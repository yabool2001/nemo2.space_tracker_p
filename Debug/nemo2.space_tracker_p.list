
nemo2.space_tracker_p.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000bc  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000dcb4  080000bc  080000bc  000100bc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00001f0c  0800dd70  0800dd70  0001dd70  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800fc7c  0800fc7c  000206d0  2**0
                  CONTENTS
  4 .ARM          00000008  0800fc7c  0800fc7c  0001fc7c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800fc84  0800fc84  000206d0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000008  0800fc84  0800fc84  0001fc84  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800fc8c  0800fc8c  0001fc8c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000006d0  20000000  0800fc90  00020000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000062c  200006d0  08010360  000206d0  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000cfc  08010360  00020cfc  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  000206d0  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  000206f8  2**0
                  CONTENTS, READONLY
 13 .debug_info   000169c1  00000000  00000000  0002073b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000033df  00000000  00000000  000370fc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000014e8  00000000  00000000  0003a4e0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 0000106c  00000000  00000000  0003b9c8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0001ff8c  00000000  00000000  0003ca34  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0001a2dd  00000000  00000000  0005c9c0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000c5a56  00000000  00000000  00076c9d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00005f6c  00000000  00000000  0013c6f4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000005c  00000000  00000000  00142660  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000bc <__do_global_dtors_aux>:
 80000bc:	b510      	push	{r4, lr}
 80000be:	4c06      	ldr	r4, [pc, #24]	; (80000d8 <__do_global_dtors_aux+0x1c>)
 80000c0:	7823      	ldrb	r3, [r4, #0]
 80000c2:	2b00      	cmp	r3, #0
 80000c4:	d107      	bne.n	80000d6 <__do_global_dtors_aux+0x1a>
 80000c6:	4b05      	ldr	r3, [pc, #20]	; (80000dc <__do_global_dtors_aux+0x20>)
 80000c8:	2b00      	cmp	r3, #0
 80000ca:	d002      	beq.n	80000d2 <__do_global_dtors_aux+0x16>
 80000cc:	4804      	ldr	r0, [pc, #16]	; (80000e0 <__do_global_dtors_aux+0x24>)
 80000ce:	e000      	b.n	80000d2 <__do_global_dtors_aux+0x16>
 80000d0:	bf00      	nop
 80000d2:	2301      	movs	r3, #1
 80000d4:	7023      	strb	r3, [r4, #0]
 80000d6:	bd10      	pop	{r4, pc}
 80000d8:	200006d0 	.word	0x200006d0
 80000dc:	00000000 	.word	0x00000000
 80000e0:	0800dd58 	.word	0x0800dd58

080000e4 <frame_dummy>:
 80000e4:	4b04      	ldr	r3, [pc, #16]	; (80000f8 <frame_dummy+0x14>)
 80000e6:	b510      	push	{r4, lr}
 80000e8:	2b00      	cmp	r3, #0
 80000ea:	d003      	beq.n	80000f4 <frame_dummy+0x10>
 80000ec:	4903      	ldr	r1, [pc, #12]	; (80000fc <frame_dummy+0x18>)
 80000ee:	4804      	ldr	r0, [pc, #16]	; (8000100 <frame_dummy+0x1c>)
 80000f0:	e000      	b.n	80000f4 <frame_dummy+0x10>
 80000f2:	bf00      	nop
 80000f4:	bd10      	pop	{r4, pc}
 80000f6:	46c0      	nop			; (mov r8, r8)
 80000f8:	00000000 	.word	0x00000000
 80000fc:	200006d4 	.word	0x200006d4
 8000100:	0800dd58 	.word	0x0800dd58

08000104 <strlen>:
 8000104:	2300      	movs	r3, #0
 8000106:	5cc2      	ldrb	r2, [r0, r3]
 8000108:	3301      	adds	r3, #1
 800010a:	2a00      	cmp	r2, #0
 800010c:	d1fb      	bne.n	8000106 <strlen+0x2>
 800010e:	1e58      	subs	r0, r3, #1
 8000110:	4770      	bx	lr
	...

08000114 <__gnu_thumb1_case_uqi>:
 8000114:	b402      	push	{r1}
 8000116:	4671      	mov	r1, lr
 8000118:	0849      	lsrs	r1, r1, #1
 800011a:	0049      	lsls	r1, r1, #1
 800011c:	5c09      	ldrb	r1, [r1, r0]
 800011e:	0049      	lsls	r1, r1, #1
 8000120:	448e      	add	lr, r1
 8000122:	bc02      	pop	{r1}
 8000124:	4770      	bx	lr
 8000126:	46c0      	nop			; (mov r8, r8)

08000128 <__gnu_thumb1_case_uhi>:
 8000128:	b403      	push	{r0, r1}
 800012a:	4671      	mov	r1, lr
 800012c:	0849      	lsrs	r1, r1, #1
 800012e:	0040      	lsls	r0, r0, #1
 8000130:	0049      	lsls	r1, r1, #1
 8000132:	5a09      	ldrh	r1, [r1, r0]
 8000134:	0049      	lsls	r1, r1, #1
 8000136:	448e      	add	lr, r1
 8000138:	bc03      	pop	{r0, r1}
 800013a:	4770      	bx	lr

0800013c <__udivsi3>:
 800013c:	2200      	movs	r2, #0
 800013e:	0843      	lsrs	r3, r0, #1
 8000140:	428b      	cmp	r3, r1
 8000142:	d374      	bcc.n	800022e <__udivsi3+0xf2>
 8000144:	0903      	lsrs	r3, r0, #4
 8000146:	428b      	cmp	r3, r1
 8000148:	d35f      	bcc.n	800020a <__udivsi3+0xce>
 800014a:	0a03      	lsrs	r3, r0, #8
 800014c:	428b      	cmp	r3, r1
 800014e:	d344      	bcc.n	80001da <__udivsi3+0x9e>
 8000150:	0b03      	lsrs	r3, r0, #12
 8000152:	428b      	cmp	r3, r1
 8000154:	d328      	bcc.n	80001a8 <__udivsi3+0x6c>
 8000156:	0c03      	lsrs	r3, r0, #16
 8000158:	428b      	cmp	r3, r1
 800015a:	d30d      	bcc.n	8000178 <__udivsi3+0x3c>
 800015c:	22ff      	movs	r2, #255	; 0xff
 800015e:	0209      	lsls	r1, r1, #8
 8000160:	ba12      	rev	r2, r2
 8000162:	0c03      	lsrs	r3, r0, #16
 8000164:	428b      	cmp	r3, r1
 8000166:	d302      	bcc.n	800016e <__udivsi3+0x32>
 8000168:	1212      	asrs	r2, r2, #8
 800016a:	0209      	lsls	r1, r1, #8
 800016c:	d065      	beq.n	800023a <__udivsi3+0xfe>
 800016e:	0b03      	lsrs	r3, r0, #12
 8000170:	428b      	cmp	r3, r1
 8000172:	d319      	bcc.n	80001a8 <__udivsi3+0x6c>
 8000174:	e000      	b.n	8000178 <__udivsi3+0x3c>
 8000176:	0a09      	lsrs	r1, r1, #8
 8000178:	0bc3      	lsrs	r3, r0, #15
 800017a:	428b      	cmp	r3, r1
 800017c:	d301      	bcc.n	8000182 <__udivsi3+0x46>
 800017e:	03cb      	lsls	r3, r1, #15
 8000180:	1ac0      	subs	r0, r0, r3
 8000182:	4152      	adcs	r2, r2
 8000184:	0b83      	lsrs	r3, r0, #14
 8000186:	428b      	cmp	r3, r1
 8000188:	d301      	bcc.n	800018e <__udivsi3+0x52>
 800018a:	038b      	lsls	r3, r1, #14
 800018c:	1ac0      	subs	r0, r0, r3
 800018e:	4152      	adcs	r2, r2
 8000190:	0b43      	lsrs	r3, r0, #13
 8000192:	428b      	cmp	r3, r1
 8000194:	d301      	bcc.n	800019a <__udivsi3+0x5e>
 8000196:	034b      	lsls	r3, r1, #13
 8000198:	1ac0      	subs	r0, r0, r3
 800019a:	4152      	adcs	r2, r2
 800019c:	0b03      	lsrs	r3, r0, #12
 800019e:	428b      	cmp	r3, r1
 80001a0:	d301      	bcc.n	80001a6 <__udivsi3+0x6a>
 80001a2:	030b      	lsls	r3, r1, #12
 80001a4:	1ac0      	subs	r0, r0, r3
 80001a6:	4152      	adcs	r2, r2
 80001a8:	0ac3      	lsrs	r3, r0, #11
 80001aa:	428b      	cmp	r3, r1
 80001ac:	d301      	bcc.n	80001b2 <__udivsi3+0x76>
 80001ae:	02cb      	lsls	r3, r1, #11
 80001b0:	1ac0      	subs	r0, r0, r3
 80001b2:	4152      	adcs	r2, r2
 80001b4:	0a83      	lsrs	r3, r0, #10
 80001b6:	428b      	cmp	r3, r1
 80001b8:	d301      	bcc.n	80001be <__udivsi3+0x82>
 80001ba:	028b      	lsls	r3, r1, #10
 80001bc:	1ac0      	subs	r0, r0, r3
 80001be:	4152      	adcs	r2, r2
 80001c0:	0a43      	lsrs	r3, r0, #9
 80001c2:	428b      	cmp	r3, r1
 80001c4:	d301      	bcc.n	80001ca <__udivsi3+0x8e>
 80001c6:	024b      	lsls	r3, r1, #9
 80001c8:	1ac0      	subs	r0, r0, r3
 80001ca:	4152      	adcs	r2, r2
 80001cc:	0a03      	lsrs	r3, r0, #8
 80001ce:	428b      	cmp	r3, r1
 80001d0:	d301      	bcc.n	80001d6 <__udivsi3+0x9a>
 80001d2:	020b      	lsls	r3, r1, #8
 80001d4:	1ac0      	subs	r0, r0, r3
 80001d6:	4152      	adcs	r2, r2
 80001d8:	d2cd      	bcs.n	8000176 <__udivsi3+0x3a>
 80001da:	09c3      	lsrs	r3, r0, #7
 80001dc:	428b      	cmp	r3, r1
 80001de:	d301      	bcc.n	80001e4 <__udivsi3+0xa8>
 80001e0:	01cb      	lsls	r3, r1, #7
 80001e2:	1ac0      	subs	r0, r0, r3
 80001e4:	4152      	adcs	r2, r2
 80001e6:	0983      	lsrs	r3, r0, #6
 80001e8:	428b      	cmp	r3, r1
 80001ea:	d301      	bcc.n	80001f0 <__udivsi3+0xb4>
 80001ec:	018b      	lsls	r3, r1, #6
 80001ee:	1ac0      	subs	r0, r0, r3
 80001f0:	4152      	adcs	r2, r2
 80001f2:	0943      	lsrs	r3, r0, #5
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d301      	bcc.n	80001fc <__udivsi3+0xc0>
 80001f8:	014b      	lsls	r3, r1, #5
 80001fa:	1ac0      	subs	r0, r0, r3
 80001fc:	4152      	adcs	r2, r2
 80001fe:	0903      	lsrs	r3, r0, #4
 8000200:	428b      	cmp	r3, r1
 8000202:	d301      	bcc.n	8000208 <__udivsi3+0xcc>
 8000204:	010b      	lsls	r3, r1, #4
 8000206:	1ac0      	subs	r0, r0, r3
 8000208:	4152      	adcs	r2, r2
 800020a:	08c3      	lsrs	r3, r0, #3
 800020c:	428b      	cmp	r3, r1
 800020e:	d301      	bcc.n	8000214 <__udivsi3+0xd8>
 8000210:	00cb      	lsls	r3, r1, #3
 8000212:	1ac0      	subs	r0, r0, r3
 8000214:	4152      	adcs	r2, r2
 8000216:	0883      	lsrs	r3, r0, #2
 8000218:	428b      	cmp	r3, r1
 800021a:	d301      	bcc.n	8000220 <__udivsi3+0xe4>
 800021c:	008b      	lsls	r3, r1, #2
 800021e:	1ac0      	subs	r0, r0, r3
 8000220:	4152      	adcs	r2, r2
 8000222:	0843      	lsrs	r3, r0, #1
 8000224:	428b      	cmp	r3, r1
 8000226:	d301      	bcc.n	800022c <__udivsi3+0xf0>
 8000228:	004b      	lsls	r3, r1, #1
 800022a:	1ac0      	subs	r0, r0, r3
 800022c:	4152      	adcs	r2, r2
 800022e:	1a41      	subs	r1, r0, r1
 8000230:	d200      	bcs.n	8000234 <__udivsi3+0xf8>
 8000232:	4601      	mov	r1, r0
 8000234:	4152      	adcs	r2, r2
 8000236:	4610      	mov	r0, r2
 8000238:	4770      	bx	lr
 800023a:	e7ff      	b.n	800023c <__udivsi3+0x100>
 800023c:	b501      	push	{r0, lr}
 800023e:	2000      	movs	r0, #0
 8000240:	f000 f8f0 	bl	8000424 <__aeabi_idiv0>
 8000244:	bd02      	pop	{r1, pc}
 8000246:	46c0      	nop			; (mov r8, r8)

08000248 <__aeabi_uidivmod>:
 8000248:	2900      	cmp	r1, #0
 800024a:	d0f7      	beq.n	800023c <__udivsi3+0x100>
 800024c:	e776      	b.n	800013c <__udivsi3>
 800024e:	4770      	bx	lr

08000250 <__divsi3>:
 8000250:	4603      	mov	r3, r0
 8000252:	430b      	orrs	r3, r1
 8000254:	d47f      	bmi.n	8000356 <__divsi3+0x106>
 8000256:	2200      	movs	r2, #0
 8000258:	0843      	lsrs	r3, r0, #1
 800025a:	428b      	cmp	r3, r1
 800025c:	d374      	bcc.n	8000348 <__divsi3+0xf8>
 800025e:	0903      	lsrs	r3, r0, #4
 8000260:	428b      	cmp	r3, r1
 8000262:	d35f      	bcc.n	8000324 <__divsi3+0xd4>
 8000264:	0a03      	lsrs	r3, r0, #8
 8000266:	428b      	cmp	r3, r1
 8000268:	d344      	bcc.n	80002f4 <__divsi3+0xa4>
 800026a:	0b03      	lsrs	r3, r0, #12
 800026c:	428b      	cmp	r3, r1
 800026e:	d328      	bcc.n	80002c2 <__divsi3+0x72>
 8000270:	0c03      	lsrs	r3, r0, #16
 8000272:	428b      	cmp	r3, r1
 8000274:	d30d      	bcc.n	8000292 <__divsi3+0x42>
 8000276:	22ff      	movs	r2, #255	; 0xff
 8000278:	0209      	lsls	r1, r1, #8
 800027a:	ba12      	rev	r2, r2
 800027c:	0c03      	lsrs	r3, r0, #16
 800027e:	428b      	cmp	r3, r1
 8000280:	d302      	bcc.n	8000288 <__divsi3+0x38>
 8000282:	1212      	asrs	r2, r2, #8
 8000284:	0209      	lsls	r1, r1, #8
 8000286:	d065      	beq.n	8000354 <__divsi3+0x104>
 8000288:	0b03      	lsrs	r3, r0, #12
 800028a:	428b      	cmp	r3, r1
 800028c:	d319      	bcc.n	80002c2 <__divsi3+0x72>
 800028e:	e000      	b.n	8000292 <__divsi3+0x42>
 8000290:	0a09      	lsrs	r1, r1, #8
 8000292:	0bc3      	lsrs	r3, r0, #15
 8000294:	428b      	cmp	r3, r1
 8000296:	d301      	bcc.n	800029c <__divsi3+0x4c>
 8000298:	03cb      	lsls	r3, r1, #15
 800029a:	1ac0      	subs	r0, r0, r3
 800029c:	4152      	adcs	r2, r2
 800029e:	0b83      	lsrs	r3, r0, #14
 80002a0:	428b      	cmp	r3, r1
 80002a2:	d301      	bcc.n	80002a8 <__divsi3+0x58>
 80002a4:	038b      	lsls	r3, r1, #14
 80002a6:	1ac0      	subs	r0, r0, r3
 80002a8:	4152      	adcs	r2, r2
 80002aa:	0b43      	lsrs	r3, r0, #13
 80002ac:	428b      	cmp	r3, r1
 80002ae:	d301      	bcc.n	80002b4 <__divsi3+0x64>
 80002b0:	034b      	lsls	r3, r1, #13
 80002b2:	1ac0      	subs	r0, r0, r3
 80002b4:	4152      	adcs	r2, r2
 80002b6:	0b03      	lsrs	r3, r0, #12
 80002b8:	428b      	cmp	r3, r1
 80002ba:	d301      	bcc.n	80002c0 <__divsi3+0x70>
 80002bc:	030b      	lsls	r3, r1, #12
 80002be:	1ac0      	subs	r0, r0, r3
 80002c0:	4152      	adcs	r2, r2
 80002c2:	0ac3      	lsrs	r3, r0, #11
 80002c4:	428b      	cmp	r3, r1
 80002c6:	d301      	bcc.n	80002cc <__divsi3+0x7c>
 80002c8:	02cb      	lsls	r3, r1, #11
 80002ca:	1ac0      	subs	r0, r0, r3
 80002cc:	4152      	adcs	r2, r2
 80002ce:	0a83      	lsrs	r3, r0, #10
 80002d0:	428b      	cmp	r3, r1
 80002d2:	d301      	bcc.n	80002d8 <__divsi3+0x88>
 80002d4:	028b      	lsls	r3, r1, #10
 80002d6:	1ac0      	subs	r0, r0, r3
 80002d8:	4152      	adcs	r2, r2
 80002da:	0a43      	lsrs	r3, r0, #9
 80002dc:	428b      	cmp	r3, r1
 80002de:	d301      	bcc.n	80002e4 <__divsi3+0x94>
 80002e0:	024b      	lsls	r3, r1, #9
 80002e2:	1ac0      	subs	r0, r0, r3
 80002e4:	4152      	adcs	r2, r2
 80002e6:	0a03      	lsrs	r3, r0, #8
 80002e8:	428b      	cmp	r3, r1
 80002ea:	d301      	bcc.n	80002f0 <__divsi3+0xa0>
 80002ec:	020b      	lsls	r3, r1, #8
 80002ee:	1ac0      	subs	r0, r0, r3
 80002f0:	4152      	adcs	r2, r2
 80002f2:	d2cd      	bcs.n	8000290 <__divsi3+0x40>
 80002f4:	09c3      	lsrs	r3, r0, #7
 80002f6:	428b      	cmp	r3, r1
 80002f8:	d301      	bcc.n	80002fe <__divsi3+0xae>
 80002fa:	01cb      	lsls	r3, r1, #7
 80002fc:	1ac0      	subs	r0, r0, r3
 80002fe:	4152      	adcs	r2, r2
 8000300:	0983      	lsrs	r3, r0, #6
 8000302:	428b      	cmp	r3, r1
 8000304:	d301      	bcc.n	800030a <__divsi3+0xba>
 8000306:	018b      	lsls	r3, r1, #6
 8000308:	1ac0      	subs	r0, r0, r3
 800030a:	4152      	adcs	r2, r2
 800030c:	0943      	lsrs	r3, r0, #5
 800030e:	428b      	cmp	r3, r1
 8000310:	d301      	bcc.n	8000316 <__divsi3+0xc6>
 8000312:	014b      	lsls	r3, r1, #5
 8000314:	1ac0      	subs	r0, r0, r3
 8000316:	4152      	adcs	r2, r2
 8000318:	0903      	lsrs	r3, r0, #4
 800031a:	428b      	cmp	r3, r1
 800031c:	d301      	bcc.n	8000322 <__divsi3+0xd2>
 800031e:	010b      	lsls	r3, r1, #4
 8000320:	1ac0      	subs	r0, r0, r3
 8000322:	4152      	adcs	r2, r2
 8000324:	08c3      	lsrs	r3, r0, #3
 8000326:	428b      	cmp	r3, r1
 8000328:	d301      	bcc.n	800032e <__divsi3+0xde>
 800032a:	00cb      	lsls	r3, r1, #3
 800032c:	1ac0      	subs	r0, r0, r3
 800032e:	4152      	adcs	r2, r2
 8000330:	0883      	lsrs	r3, r0, #2
 8000332:	428b      	cmp	r3, r1
 8000334:	d301      	bcc.n	800033a <__divsi3+0xea>
 8000336:	008b      	lsls	r3, r1, #2
 8000338:	1ac0      	subs	r0, r0, r3
 800033a:	4152      	adcs	r2, r2
 800033c:	0843      	lsrs	r3, r0, #1
 800033e:	428b      	cmp	r3, r1
 8000340:	d301      	bcc.n	8000346 <__divsi3+0xf6>
 8000342:	004b      	lsls	r3, r1, #1
 8000344:	1ac0      	subs	r0, r0, r3
 8000346:	4152      	adcs	r2, r2
 8000348:	1a41      	subs	r1, r0, r1
 800034a:	d200      	bcs.n	800034e <__divsi3+0xfe>
 800034c:	4601      	mov	r1, r0
 800034e:	4152      	adcs	r2, r2
 8000350:	4610      	mov	r0, r2
 8000352:	4770      	bx	lr
 8000354:	e05d      	b.n	8000412 <__divsi3+0x1c2>
 8000356:	0fca      	lsrs	r2, r1, #31
 8000358:	d000      	beq.n	800035c <__divsi3+0x10c>
 800035a:	4249      	negs	r1, r1
 800035c:	1003      	asrs	r3, r0, #32
 800035e:	d300      	bcc.n	8000362 <__divsi3+0x112>
 8000360:	4240      	negs	r0, r0
 8000362:	4053      	eors	r3, r2
 8000364:	2200      	movs	r2, #0
 8000366:	469c      	mov	ip, r3
 8000368:	0903      	lsrs	r3, r0, #4
 800036a:	428b      	cmp	r3, r1
 800036c:	d32d      	bcc.n	80003ca <__divsi3+0x17a>
 800036e:	0a03      	lsrs	r3, r0, #8
 8000370:	428b      	cmp	r3, r1
 8000372:	d312      	bcc.n	800039a <__divsi3+0x14a>
 8000374:	22fc      	movs	r2, #252	; 0xfc
 8000376:	0189      	lsls	r1, r1, #6
 8000378:	ba12      	rev	r2, r2
 800037a:	0a03      	lsrs	r3, r0, #8
 800037c:	428b      	cmp	r3, r1
 800037e:	d30c      	bcc.n	800039a <__divsi3+0x14a>
 8000380:	0189      	lsls	r1, r1, #6
 8000382:	1192      	asrs	r2, r2, #6
 8000384:	428b      	cmp	r3, r1
 8000386:	d308      	bcc.n	800039a <__divsi3+0x14a>
 8000388:	0189      	lsls	r1, r1, #6
 800038a:	1192      	asrs	r2, r2, #6
 800038c:	428b      	cmp	r3, r1
 800038e:	d304      	bcc.n	800039a <__divsi3+0x14a>
 8000390:	0189      	lsls	r1, r1, #6
 8000392:	d03a      	beq.n	800040a <__divsi3+0x1ba>
 8000394:	1192      	asrs	r2, r2, #6
 8000396:	e000      	b.n	800039a <__divsi3+0x14a>
 8000398:	0989      	lsrs	r1, r1, #6
 800039a:	09c3      	lsrs	r3, r0, #7
 800039c:	428b      	cmp	r3, r1
 800039e:	d301      	bcc.n	80003a4 <__divsi3+0x154>
 80003a0:	01cb      	lsls	r3, r1, #7
 80003a2:	1ac0      	subs	r0, r0, r3
 80003a4:	4152      	adcs	r2, r2
 80003a6:	0983      	lsrs	r3, r0, #6
 80003a8:	428b      	cmp	r3, r1
 80003aa:	d301      	bcc.n	80003b0 <__divsi3+0x160>
 80003ac:	018b      	lsls	r3, r1, #6
 80003ae:	1ac0      	subs	r0, r0, r3
 80003b0:	4152      	adcs	r2, r2
 80003b2:	0943      	lsrs	r3, r0, #5
 80003b4:	428b      	cmp	r3, r1
 80003b6:	d301      	bcc.n	80003bc <__divsi3+0x16c>
 80003b8:	014b      	lsls	r3, r1, #5
 80003ba:	1ac0      	subs	r0, r0, r3
 80003bc:	4152      	adcs	r2, r2
 80003be:	0903      	lsrs	r3, r0, #4
 80003c0:	428b      	cmp	r3, r1
 80003c2:	d301      	bcc.n	80003c8 <__divsi3+0x178>
 80003c4:	010b      	lsls	r3, r1, #4
 80003c6:	1ac0      	subs	r0, r0, r3
 80003c8:	4152      	adcs	r2, r2
 80003ca:	08c3      	lsrs	r3, r0, #3
 80003cc:	428b      	cmp	r3, r1
 80003ce:	d301      	bcc.n	80003d4 <__divsi3+0x184>
 80003d0:	00cb      	lsls	r3, r1, #3
 80003d2:	1ac0      	subs	r0, r0, r3
 80003d4:	4152      	adcs	r2, r2
 80003d6:	0883      	lsrs	r3, r0, #2
 80003d8:	428b      	cmp	r3, r1
 80003da:	d301      	bcc.n	80003e0 <__divsi3+0x190>
 80003dc:	008b      	lsls	r3, r1, #2
 80003de:	1ac0      	subs	r0, r0, r3
 80003e0:	4152      	adcs	r2, r2
 80003e2:	d2d9      	bcs.n	8000398 <__divsi3+0x148>
 80003e4:	0843      	lsrs	r3, r0, #1
 80003e6:	428b      	cmp	r3, r1
 80003e8:	d301      	bcc.n	80003ee <__divsi3+0x19e>
 80003ea:	004b      	lsls	r3, r1, #1
 80003ec:	1ac0      	subs	r0, r0, r3
 80003ee:	4152      	adcs	r2, r2
 80003f0:	1a41      	subs	r1, r0, r1
 80003f2:	d200      	bcs.n	80003f6 <__divsi3+0x1a6>
 80003f4:	4601      	mov	r1, r0
 80003f6:	4663      	mov	r3, ip
 80003f8:	4152      	adcs	r2, r2
 80003fa:	105b      	asrs	r3, r3, #1
 80003fc:	4610      	mov	r0, r2
 80003fe:	d301      	bcc.n	8000404 <__divsi3+0x1b4>
 8000400:	4240      	negs	r0, r0
 8000402:	2b00      	cmp	r3, #0
 8000404:	d500      	bpl.n	8000408 <__divsi3+0x1b8>
 8000406:	4249      	negs	r1, r1
 8000408:	4770      	bx	lr
 800040a:	4663      	mov	r3, ip
 800040c:	105b      	asrs	r3, r3, #1
 800040e:	d300      	bcc.n	8000412 <__divsi3+0x1c2>
 8000410:	4240      	negs	r0, r0
 8000412:	b501      	push	{r0, lr}
 8000414:	2000      	movs	r0, #0
 8000416:	f000 f805 	bl	8000424 <__aeabi_idiv0>
 800041a:	bd02      	pop	{r1, pc}

0800041c <__aeabi_idivmod>:
 800041c:	2900      	cmp	r1, #0
 800041e:	d0f8      	beq.n	8000412 <__divsi3+0x1c2>
 8000420:	e716      	b.n	8000250 <__divsi3>
 8000422:	4770      	bx	lr

08000424 <__aeabi_idiv0>:
 8000424:	4770      	bx	lr
 8000426:	46c0      	nop			; (mov r8, r8)

08000428 <__aeabi_cdrcmple>:
 8000428:	4684      	mov	ip, r0
 800042a:	0010      	movs	r0, r2
 800042c:	4662      	mov	r2, ip
 800042e:	468c      	mov	ip, r1
 8000430:	0019      	movs	r1, r3
 8000432:	4663      	mov	r3, ip
 8000434:	e000      	b.n	8000438 <__aeabi_cdcmpeq>
 8000436:	46c0      	nop			; (mov r8, r8)

08000438 <__aeabi_cdcmpeq>:
 8000438:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800043a:	f001 f9af 	bl	800179c <__ledf2>
 800043e:	2800      	cmp	r0, #0
 8000440:	d401      	bmi.n	8000446 <__aeabi_cdcmpeq+0xe>
 8000442:	2100      	movs	r1, #0
 8000444:	42c8      	cmn	r0, r1
 8000446:	bd1f      	pop	{r0, r1, r2, r3, r4, pc}

08000448 <__aeabi_dcmpeq>:
 8000448:	b510      	push	{r4, lr}
 800044a:	f001 f8ff 	bl	800164c <__eqdf2>
 800044e:	4240      	negs	r0, r0
 8000450:	3001      	adds	r0, #1
 8000452:	bd10      	pop	{r4, pc}

08000454 <__aeabi_dcmplt>:
 8000454:	b510      	push	{r4, lr}
 8000456:	f001 f9a1 	bl	800179c <__ledf2>
 800045a:	2800      	cmp	r0, #0
 800045c:	db01      	blt.n	8000462 <__aeabi_dcmplt+0xe>
 800045e:	2000      	movs	r0, #0
 8000460:	bd10      	pop	{r4, pc}
 8000462:	2001      	movs	r0, #1
 8000464:	bd10      	pop	{r4, pc}
 8000466:	46c0      	nop			; (mov r8, r8)

08000468 <__aeabi_dcmple>:
 8000468:	b510      	push	{r4, lr}
 800046a:	f001 f997 	bl	800179c <__ledf2>
 800046e:	2800      	cmp	r0, #0
 8000470:	dd01      	ble.n	8000476 <__aeabi_dcmple+0xe>
 8000472:	2000      	movs	r0, #0
 8000474:	bd10      	pop	{r4, pc}
 8000476:	2001      	movs	r0, #1
 8000478:	bd10      	pop	{r4, pc}
 800047a:	46c0      	nop			; (mov r8, r8)

0800047c <__aeabi_dcmpgt>:
 800047c:	b510      	push	{r4, lr}
 800047e:	f001 f927 	bl	80016d0 <__gedf2>
 8000482:	2800      	cmp	r0, #0
 8000484:	dc01      	bgt.n	800048a <__aeabi_dcmpgt+0xe>
 8000486:	2000      	movs	r0, #0
 8000488:	bd10      	pop	{r4, pc}
 800048a:	2001      	movs	r0, #1
 800048c:	bd10      	pop	{r4, pc}
 800048e:	46c0      	nop			; (mov r8, r8)

08000490 <__aeabi_dcmpge>:
 8000490:	b510      	push	{r4, lr}
 8000492:	f001 f91d 	bl	80016d0 <__gedf2>
 8000496:	2800      	cmp	r0, #0
 8000498:	da01      	bge.n	800049e <__aeabi_dcmpge+0xe>
 800049a:	2000      	movs	r0, #0
 800049c:	bd10      	pop	{r4, pc}
 800049e:	2001      	movs	r0, #1
 80004a0:	bd10      	pop	{r4, pc}
 80004a2:	46c0      	nop			; (mov r8, r8)

080004a4 <__aeabi_uldivmod>:
 80004a4:	2b00      	cmp	r3, #0
 80004a6:	d111      	bne.n	80004cc <__aeabi_uldivmod+0x28>
 80004a8:	2a00      	cmp	r2, #0
 80004aa:	d10f      	bne.n	80004cc <__aeabi_uldivmod+0x28>
 80004ac:	2900      	cmp	r1, #0
 80004ae:	d100      	bne.n	80004b2 <__aeabi_uldivmod+0xe>
 80004b0:	2800      	cmp	r0, #0
 80004b2:	d002      	beq.n	80004ba <__aeabi_uldivmod+0x16>
 80004b4:	2100      	movs	r1, #0
 80004b6:	43c9      	mvns	r1, r1
 80004b8:	0008      	movs	r0, r1
 80004ba:	b407      	push	{r0, r1, r2}
 80004bc:	4802      	ldr	r0, [pc, #8]	; (80004c8 <__aeabi_uldivmod+0x24>)
 80004be:	a102      	add	r1, pc, #8	; (adr r1, 80004c8 <__aeabi_uldivmod+0x24>)
 80004c0:	1840      	adds	r0, r0, r1
 80004c2:	9002      	str	r0, [sp, #8]
 80004c4:	bd03      	pop	{r0, r1, pc}
 80004c6:	46c0      	nop			; (mov r8, r8)
 80004c8:	ffffff5d 	.word	0xffffff5d
 80004cc:	b403      	push	{r0, r1}
 80004ce:	4668      	mov	r0, sp
 80004d0:	b501      	push	{r0, lr}
 80004d2:	9802      	ldr	r0, [sp, #8]
 80004d4:	f000 f834 	bl	8000540 <__udivmoddi4>
 80004d8:	9b01      	ldr	r3, [sp, #4]
 80004da:	469e      	mov	lr, r3
 80004dc:	b002      	add	sp, #8
 80004de:	bc0c      	pop	{r2, r3}
 80004e0:	4770      	bx	lr
 80004e2:	46c0      	nop			; (mov r8, r8)

080004e4 <__aeabi_lmul>:
 80004e4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80004e6:	46ce      	mov	lr, r9
 80004e8:	4699      	mov	r9, r3
 80004ea:	0c03      	lsrs	r3, r0, #16
 80004ec:	469c      	mov	ip, r3
 80004ee:	0413      	lsls	r3, r2, #16
 80004f0:	4647      	mov	r7, r8
 80004f2:	0c1b      	lsrs	r3, r3, #16
 80004f4:	001d      	movs	r5, r3
 80004f6:	000e      	movs	r6, r1
 80004f8:	4661      	mov	r1, ip
 80004fa:	0404      	lsls	r4, r0, #16
 80004fc:	0c24      	lsrs	r4, r4, #16
 80004fe:	b580      	push	{r7, lr}
 8000500:	0007      	movs	r7, r0
 8000502:	0c10      	lsrs	r0, r2, #16
 8000504:	434b      	muls	r3, r1
 8000506:	4365      	muls	r5, r4
 8000508:	4341      	muls	r1, r0
 800050a:	4360      	muls	r0, r4
 800050c:	0c2c      	lsrs	r4, r5, #16
 800050e:	18c0      	adds	r0, r0, r3
 8000510:	1820      	adds	r0, r4, r0
 8000512:	468c      	mov	ip, r1
 8000514:	4283      	cmp	r3, r0
 8000516:	d903      	bls.n	8000520 <__aeabi_lmul+0x3c>
 8000518:	2380      	movs	r3, #128	; 0x80
 800051a:	025b      	lsls	r3, r3, #9
 800051c:	4698      	mov	r8, r3
 800051e:	44c4      	add	ip, r8
 8000520:	4649      	mov	r1, r9
 8000522:	4379      	muls	r1, r7
 8000524:	4356      	muls	r6, r2
 8000526:	0c03      	lsrs	r3, r0, #16
 8000528:	042d      	lsls	r5, r5, #16
 800052a:	0c2d      	lsrs	r5, r5, #16
 800052c:	1989      	adds	r1, r1, r6
 800052e:	4463      	add	r3, ip
 8000530:	0400      	lsls	r0, r0, #16
 8000532:	1940      	adds	r0, r0, r5
 8000534:	18c9      	adds	r1, r1, r3
 8000536:	bcc0      	pop	{r6, r7}
 8000538:	46b9      	mov	r9, r7
 800053a:	46b0      	mov	r8, r6
 800053c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800053e:	46c0      	nop			; (mov r8, r8)

08000540 <__udivmoddi4>:
 8000540:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000542:	4657      	mov	r7, sl
 8000544:	464e      	mov	r6, r9
 8000546:	4645      	mov	r5, r8
 8000548:	46de      	mov	lr, fp
 800054a:	b5e0      	push	{r5, r6, r7, lr}
 800054c:	0004      	movs	r4, r0
 800054e:	000d      	movs	r5, r1
 8000550:	4692      	mov	sl, r2
 8000552:	4699      	mov	r9, r3
 8000554:	b083      	sub	sp, #12
 8000556:	428b      	cmp	r3, r1
 8000558:	d830      	bhi.n	80005bc <__udivmoddi4+0x7c>
 800055a:	d02d      	beq.n	80005b8 <__udivmoddi4+0x78>
 800055c:	4649      	mov	r1, r9
 800055e:	4650      	mov	r0, sl
 8000560:	f002 f95a 	bl	8002818 <__clzdi2>
 8000564:	0029      	movs	r1, r5
 8000566:	0006      	movs	r6, r0
 8000568:	0020      	movs	r0, r4
 800056a:	f002 f955 	bl	8002818 <__clzdi2>
 800056e:	1a33      	subs	r3, r6, r0
 8000570:	4698      	mov	r8, r3
 8000572:	3b20      	subs	r3, #32
 8000574:	d434      	bmi.n	80005e0 <__udivmoddi4+0xa0>
 8000576:	469b      	mov	fp, r3
 8000578:	4653      	mov	r3, sl
 800057a:	465a      	mov	r2, fp
 800057c:	4093      	lsls	r3, r2
 800057e:	4642      	mov	r2, r8
 8000580:	001f      	movs	r7, r3
 8000582:	4653      	mov	r3, sl
 8000584:	4093      	lsls	r3, r2
 8000586:	001e      	movs	r6, r3
 8000588:	42af      	cmp	r7, r5
 800058a:	d83b      	bhi.n	8000604 <__udivmoddi4+0xc4>
 800058c:	42af      	cmp	r7, r5
 800058e:	d100      	bne.n	8000592 <__udivmoddi4+0x52>
 8000590:	e079      	b.n	8000686 <__udivmoddi4+0x146>
 8000592:	465b      	mov	r3, fp
 8000594:	1ba4      	subs	r4, r4, r6
 8000596:	41bd      	sbcs	r5, r7
 8000598:	2b00      	cmp	r3, #0
 800059a:	da00      	bge.n	800059e <__udivmoddi4+0x5e>
 800059c:	e076      	b.n	800068c <__udivmoddi4+0x14c>
 800059e:	2200      	movs	r2, #0
 80005a0:	2300      	movs	r3, #0
 80005a2:	9200      	str	r2, [sp, #0]
 80005a4:	9301      	str	r3, [sp, #4]
 80005a6:	2301      	movs	r3, #1
 80005a8:	465a      	mov	r2, fp
 80005aa:	4093      	lsls	r3, r2
 80005ac:	9301      	str	r3, [sp, #4]
 80005ae:	2301      	movs	r3, #1
 80005b0:	4642      	mov	r2, r8
 80005b2:	4093      	lsls	r3, r2
 80005b4:	9300      	str	r3, [sp, #0]
 80005b6:	e029      	b.n	800060c <__udivmoddi4+0xcc>
 80005b8:	4282      	cmp	r2, r0
 80005ba:	d9cf      	bls.n	800055c <__udivmoddi4+0x1c>
 80005bc:	2200      	movs	r2, #0
 80005be:	2300      	movs	r3, #0
 80005c0:	9200      	str	r2, [sp, #0]
 80005c2:	9301      	str	r3, [sp, #4]
 80005c4:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80005c6:	2b00      	cmp	r3, #0
 80005c8:	d001      	beq.n	80005ce <__udivmoddi4+0x8e>
 80005ca:	601c      	str	r4, [r3, #0]
 80005cc:	605d      	str	r5, [r3, #4]
 80005ce:	9800      	ldr	r0, [sp, #0]
 80005d0:	9901      	ldr	r1, [sp, #4]
 80005d2:	b003      	add	sp, #12
 80005d4:	bcf0      	pop	{r4, r5, r6, r7}
 80005d6:	46bb      	mov	fp, r7
 80005d8:	46b2      	mov	sl, r6
 80005da:	46a9      	mov	r9, r5
 80005dc:	46a0      	mov	r8, r4
 80005de:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80005e0:	4642      	mov	r2, r8
 80005e2:	469b      	mov	fp, r3
 80005e4:	2320      	movs	r3, #32
 80005e6:	1a9b      	subs	r3, r3, r2
 80005e8:	4652      	mov	r2, sl
 80005ea:	40da      	lsrs	r2, r3
 80005ec:	4641      	mov	r1, r8
 80005ee:	0013      	movs	r3, r2
 80005f0:	464a      	mov	r2, r9
 80005f2:	408a      	lsls	r2, r1
 80005f4:	0017      	movs	r7, r2
 80005f6:	4642      	mov	r2, r8
 80005f8:	431f      	orrs	r7, r3
 80005fa:	4653      	mov	r3, sl
 80005fc:	4093      	lsls	r3, r2
 80005fe:	001e      	movs	r6, r3
 8000600:	42af      	cmp	r7, r5
 8000602:	d9c3      	bls.n	800058c <__udivmoddi4+0x4c>
 8000604:	2200      	movs	r2, #0
 8000606:	2300      	movs	r3, #0
 8000608:	9200      	str	r2, [sp, #0]
 800060a:	9301      	str	r3, [sp, #4]
 800060c:	4643      	mov	r3, r8
 800060e:	2b00      	cmp	r3, #0
 8000610:	d0d8      	beq.n	80005c4 <__udivmoddi4+0x84>
 8000612:	07fb      	lsls	r3, r7, #31
 8000614:	0872      	lsrs	r2, r6, #1
 8000616:	431a      	orrs	r2, r3
 8000618:	4646      	mov	r6, r8
 800061a:	087b      	lsrs	r3, r7, #1
 800061c:	e00e      	b.n	800063c <__udivmoddi4+0xfc>
 800061e:	42ab      	cmp	r3, r5
 8000620:	d101      	bne.n	8000626 <__udivmoddi4+0xe6>
 8000622:	42a2      	cmp	r2, r4
 8000624:	d80c      	bhi.n	8000640 <__udivmoddi4+0x100>
 8000626:	1aa4      	subs	r4, r4, r2
 8000628:	419d      	sbcs	r5, r3
 800062a:	2001      	movs	r0, #1
 800062c:	1924      	adds	r4, r4, r4
 800062e:	416d      	adcs	r5, r5
 8000630:	2100      	movs	r1, #0
 8000632:	3e01      	subs	r6, #1
 8000634:	1824      	adds	r4, r4, r0
 8000636:	414d      	adcs	r5, r1
 8000638:	2e00      	cmp	r6, #0
 800063a:	d006      	beq.n	800064a <__udivmoddi4+0x10a>
 800063c:	42ab      	cmp	r3, r5
 800063e:	d9ee      	bls.n	800061e <__udivmoddi4+0xde>
 8000640:	3e01      	subs	r6, #1
 8000642:	1924      	adds	r4, r4, r4
 8000644:	416d      	adcs	r5, r5
 8000646:	2e00      	cmp	r6, #0
 8000648:	d1f8      	bne.n	800063c <__udivmoddi4+0xfc>
 800064a:	9800      	ldr	r0, [sp, #0]
 800064c:	9901      	ldr	r1, [sp, #4]
 800064e:	465b      	mov	r3, fp
 8000650:	1900      	adds	r0, r0, r4
 8000652:	4169      	adcs	r1, r5
 8000654:	2b00      	cmp	r3, #0
 8000656:	db24      	blt.n	80006a2 <__udivmoddi4+0x162>
 8000658:	002b      	movs	r3, r5
 800065a:	465a      	mov	r2, fp
 800065c:	4644      	mov	r4, r8
 800065e:	40d3      	lsrs	r3, r2
 8000660:	002a      	movs	r2, r5
 8000662:	40e2      	lsrs	r2, r4
 8000664:	001c      	movs	r4, r3
 8000666:	465b      	mov	r3, fp
 8000668:	0015      	movs	r5, r2
 800066a:	2b00      	cmp	r3, #0
 800066c:	db2a      	blt.n	80006c4 <__udivmoddi4+0x184>
 800066e:	0026      	movs	r6, r4
 8000670:	409e      	lsls	r6, r3
 8000672:	0033      	movs	r3, r6
 8000674:	0026      	movs	r6, r4
 8000676:	4647      	mov	r7, r8
 8000678:	40be      	lsls	r6, r7
 800067a:	0032      	movs	r2, r6
 800067c:	1a80      	subs	r0, r0, r2
 800067e:	4199      	sbcs	r1, r3
 8000680:	9000      	str	r0, [sp, #0]
 8000682:	9101      	str	r1, [sp, #4]
 8000684:	e79e      	b.n	80005c4 <__udivmoddi4+0x84>
 8000686:	42a3      	cmp	r3, r4
 8000688:	d8bc      	bhi.n	8000604 <__udivmoddi4+0xc4>
 800068a:	e782      	b.n	8000592 <__udivmoddi4+0x52>
 800068c:	4642      	mov	r2, r8
 800068e:	2320      	movs	r3, #32
 8000690:	2100      	movs	r1, #0
 8000692:	1a9b      	subs	r3, r3, r2
 8000694:	2200      	movs	r2, #0
 8000696:	9100      	str	r1, [sp, #0]
 8000698:	9201      	str	r2, [sp, #4]
 800069a:	2201      	movs	r2, #1
 800069c:	40da      	lsrs	r2, r3
 800069e:	9201      	str	r2, [sp, #4]
 80006a0:	e785      	b.n	80005ae <__udivmoddi4+0x6e>
 80006a2:	4642      	mov	r2, r8
 80006a4:	2320      	movs	r3, #32
 80006a6:	1a9b      	subs	r3, r3, r2
 80006a8:	002a      	movs	r2, r5
 80006aa:	4646      	mov	r6, r8
 80006ac:	409a      	lsls	r2, r3
 80006ae:	0023      	movs	r3, r4
 80006b0:	40f3      	lsrs	r3, r6
 80006b2:	4644      	mov	r4, r8
 80006b4:	4313      	orrs	r3, r2
 80006b6:	002a      	movs	r2, r5
 80006b8:	40e2      	lsrs	r2, r4
 80006ba:	001c      	movs	r4, r3
 80006bc:	465b      	mov	r3, fp
 80006be:	0015      	movs	r5, r2
 80006c0:	2b00      	cmp	r3, #0
 80006c2:	dad4      	bge.n	800066e <__udivmoddi4+0x12e>
 80006c4:	4642      	mov	r2, r8
 80006c6:	002f      	movs	r7, r5
 80006c8:	2320      	movs	r3, #32
 80006ca:	0026      	movs	r6, r4
 80006cc:	4097      	lsls	r7, r2
 80006ce:	1a9b      	subs	r3, r3, r2
 80006d0:	40de      	lsrs	r6, r3
 80006d2:	003b      	movs	r3, r7
 80006d4:	4333      	orrs	r3, r6
 80006d6:	e7cd      	b.n	8000674 <__udivmoddi4+0x134>

080006d8 <__aeabi_fdiv>:
 80006d8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80006da:	464f      	mov	r7, r9
 80006dc:	4646      	mov	r6, r8
 80006de:	46d6      	mov	lr, sl
 80006e0:	0245      	lsls	r5, r0, #9
 80006e2:	b5c0      	push	{r6, r7, lr}
 80006e4:	0047      	lsls	r7, r0, #1
 80006e6:	1c0c      	adds	r4, r1, #0
 80006e8:	0a6d      	lsrs	r5, r5, #9
 80006ea:	0e3f      	lsrs	r7, r7, #24
 80006ec:	0fc6      	lsrs	r6, r0, #31
 80006ee:	2f00      	cmp	r7, #0
 80006f0:	d100      	bne.n	80006f4 <__aeabi_fdiv+0x1c>
 80006f2:	e06f      	b.n	80007d4 <__aeabi_fdiv+0xfc>
 80006f4:	2fff      	cmp	r7, #255	; 0xff
 80006f6:	d100      	bne.n	80006fa <__aeabi_fdiv+0x22>
 80006f8:	e074      	b.n	80007e4 <__aeabi_fdiv+0x10c>
 80006fa:	2300      	movs	r3, #0
 80006fc:	2280      	movs	r2, #128	; 0x80
 80006fe:	4699      	mov	r9, r3
 8000700:	469a      	mov	sl, r3
 8000702:	00ed      	lsls	r5, r5, #3
 8000704:	04d2      	lsls	r2, r2, #19
 8000706:	4315      	orrs	r5, r2
 8000708:	3f7f      	subs	r7, #127	; 0x7f
 800070a:	0263      	lsls	r3, r4, #9
 800070c:	0a5b      	lsrs	r3, r3, #9
 800070e:	4698      	mov	r8, r3
 8000710:	0063      	lsls	r3, r4, #1
 8000712:	0e1b      	lsrs	r3, r3, #24
 8000714:	0fe4      	lsrs	r4, r4, #31
 8000716:	2b00      	cmp	r3, #0
 8000718:	d04d      	beq.n	80007b6 <__aeabi_fdiv+0xde>
 800071a:	2bff      	cmp	r3, #255	; 0xff
 800071c:	d045      	beq.n	80007aa <__aeabi_fdiv+0xd2>
 800071e:	4642      	mov	r2, r8
 8000720:	2180      	movs	r1, #128	; 0x80
 8000722:	00d2      	lsls	r2, r2, #3
 8000724:	04c9      	lsls	r1, r1, #19
 8000726:	4311      	orrs	r1, r2
 8000728:	4688      	mov	r8, r1
 800072a:	2200      	movs	r2, #0
 800072c:	3b7f      	subs	r3, #127	; 0x7f
 800072e:	0031      	movs	r1, r6
 8000730:	1aff      	subs	r7, r7, r3
 8000732:	464b      	mov	r3, r9
 8000734:	4061      	eors	r1, r4
 8000736:	b2c9      	uxtb	r1, r1
 8000738:	2b0f      	cmp	r3, #15
 800073a:	d900      	bls.n	800073e <__aeabi_fdiv+0x66>
 800073c:	e0b8      	b.n	80008b0 <__aeabi_fdiv+0x1d8>
 800073e:	4870      	ldr	r0, [pc, #448]	; (8000900 <__aeabi_fdiv+0x228>)
 8000740:	009b      	lsls	r3, r3, #2
 8000742:	58c3      	ldr	r3, [r0, r3]
 8000744:	469f      	mov	pc, r3
 8000746:	2300      	movs	r3, #0
 8000748:	4698      	mov	r8, r3
 800074a:	0026      	movs	r6, r4
 800074c:	4645      	mov	r5, r8
 800074e:	4692      	mov	sl, r2
 8000750:	4653      	mov	r3, sl
 8000752:	2b02      	cmp	r3, #2
 8000754:	d100      	bne.n	8000758 <__aeabi_fdiv+0x80>
 8000756:	e08d      	b.n	8000874 <__aeabi_fdiv+0x19c>
 8000758:	2b03      	cmp	r3, #3
 800075a:	d100      	bne.n	800075e <__aeabi_fdiv+0x86>
 800075c:	e0a1      	b.n	80008a2 <__aeabi_fdiv+0x1ca>
 800075e:	2b01      	cmp	r3, #1
 8000760:	d018      	beq.n	8000794 <__aeabi_fdiv+0xbc>
 8000762:	003b      	movs	r3, r7
 8000764:	337f      	adds	r3, #127	; 0x7f
 8000766:	2b00      	cmp	r3, #0
 8000768:	dd6d      	ble.n	8000846 <__aeabi_fdiv+0x16e>
 800076a:	076a      	lsls	r2, r5, #29
 800076c:	d004      	beq.n	8000778 <__aeabi_fdiv+0xa0>
 800076e:	220f      	movs	r2, #15
 8000770:	402a      	ands	r2, r5
 8000772:	2a04      	cmp	r2, #4
 8000774:	d000      	beq.n	8000778 <__aeabi_fdiv+0xa0>
 8000776:	3504      	adds	r5, #4
 8000778:	012a      	lsls	r2, r5, #4
 800077a:	d503      	bpl.n	8000784 <__aeabi_fdiv+0xac>
 800077c:	4b61      	ldr	r3, [pc, #388]	; (8000904 <__aeabi_fdiv+0x22c>)
 800077e:	401d      	ands	r5, r3
 8000780:	003b      	movs	r3, r7
 8000782:	3380      	adds	r3, #128	; 0x80
 8000784:	2bfe      	cmp	r3, #254	; 0xfe
 8000786:	dd00      	ble.n	800078a <__aeabi_fdiv+0xb2>
 8000788:	e074      	b.n	8000874 <__aeabi_fdiv+0x19c>
 800078a:	01aa      	lsls	r2, r5, #6
 800078c:	0a52      	lsrs	r2, r2, #9
 800078e:	b2d8      	uxtb	r0, r3
 8000790:	e002      	b.n	8000798 <__aeabi_fdiv+0xc0>
 8000792:	000e      	movs	r6, r1
 8000794:	2000      	movs	r0, #0
 8000796:	2200      	movs	r2, #0
 8000798:	05c0      	lsls	r0, r0, #23
 800079a:	07f6      	lsls	r6, r6, #31
 800079c:	4310      	orrs	r0, r2
 800079e:	4330      	orrs	r0, r6
 80007a0:	bce0      	pop	{r5, r6, r7}
 80007a2:	46ba      	mov	sl, r7
 80007a4:	46b1      	mov	r9, r6
 80007a6:	46a8      	mov	r8, r5
 80007a8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80007aa:	4643      	mov	r3, r8
 80007ac:	2b00      	cmp	r3, #0
 80007ae:	d13f      	bne.n	8000830 <__aeabi_fdiv+0x158>
 80007b0:	2202      	movs	r2, #2
 80007b2:	3fff      	subs	r7, #255	; 0xff
 80007b4:	e003      	b.n	80007be <__aeabi_fdiv+0xe6>
 80007b6:	4643      	mov	r3, r8
 80007b8:	2b00      	cmp	r3, #0
 80007ba:	d12d      	bne.n	8000818 <__aeabi_fdiv+0x140>
 80007bc:	2201      	movs	r2, #1
 80007be:	0031      	movs	r1, r6
 80007c0:	464b      	mov	r3, r9
 80007c2:	4061      	eors	r1, r4
 80007c4:	b2c9      	uxtb	r1, r1
 80007c6:	4313      	orrs	r3, r2
 80007c8:	2b0f      	cmp	r3, #15
 80007ca:	d838      	bhi.n	800083e <__aeabi_fdiv+0x166>
 80007cc:	484e      	ldr	r0, [pc, #312]	; (8000908 <__aeabi_fdiv+0x230>)
 80007ce:	009b      	lsls	r3, r3, #2
 80007d0:	58c3      	ldr	r3, [r0, r3]
 80007d2:	469f      	mov	pc, r3
 80007d4:	2d00      	cmp	r5, #0
 80007d6:	d113      	bne.n	8000800 <__aeabi_fdiv+0x128>
 80007d8:	2304      	movs	r3, #4
 80007da:	4699      	mov	r9, r3
 80007dc:	3b03      	subs	r3, #3
 80007de:	2700      	movs	r7, #0
 80007e0:	469a      	mov	sl, r3
 80007e2:	e792      	b.n	800070a <__aeabi_fdiv+0x32>
 80007e4:	2d00      	cmp	r5, #0
 80007e6:	d105      	bne.n	80007f4 <__aeabi_fdiv+0x11c>
 80007e8:	2308      	movs	r3, #8
 80007ea:	4699      	mov	r9, r3
 80007ec:	3b06      	subs	r3, #6
 80007ee:	27ff      	movs	r7, #255	; 0xff
 80007f0:	469a      	mov	sl, r3
 80007f2:	e78a      	b.n	800070a <__aeabi_fdiv+0x32>
 80007f4:	230c      	movs	r3, #12
 80007f6:	4699      	mov	r9, r3
 80007f8:	3b09      	subs	r3, #9
 80007fa:	27ff      	movs	r7, #255	; 0xff
 80007fc:	469a      	mov	sl, r3
 80007fe:	e784      	b.n	800070a <__aeabi_fdiv+0x32>
 8000800:	0028      	movs	r0, r5
 8000802:	f001 ffeb 	bl	80027dc <__clzsi2>
 8000806:	2776      	movs	r7, #118	; 0x76
 8000808:	1f43      	subs	r3, r0, #5
 800080a:	409d      	lsls	r5, r3
 800080c:	2300      	movs	r3, #0
 800080e:	427f      	negs	r7, r7
 8000810:	4699      	mov	r9, r3
 8000812:	469a      	mov	sl, r3
 8000814:	1a3f      	subs	r7, r7, r0
 8000816:	e778      	b.n	800070a <__aeabi_fdiv+0x32>
 8000818:	4640      	mov	r0, r8
 800081a:	f001 ffdf 	bl	80027dc <__clzsi2>
 800081e:	4642      	mov	r2, r8
 8000820:	1f43      	subs	r3, r0, #5
 8000822:	409a      	lsls	r2, r3
 8000824:	2376      	movs	r3, #118	; 0x76
 8000826:	425b      	negs	r3, r3
 8000828:	4690      	mov	r8, r2
 800082a:	1a1b      	subs	r3, r3, r0
 800082c:	2200      	movs	r2, #0
 800082e:	e77e      	b.n	800072e <__aeabi_fdiv+0x56>
 8000830:	2303      	movs	r3, #3
 8000832:	464a      	mov	r2, r9
 8000834:	431a      	orrs	r2, r3
 8000836:	4691      	mov	r9, r2
 8000838:	33fc      	adds	r3, #252	; 0xfc
 800083a:	2203      	movs	r2, #3
 800083c:	e777      	b.n	800072e <__aeabi_fdiv+0x56>
 800083e:	000e      	movs	r6, r1
 8000840:	20ff      	movs	r0, #255	; 0xff
 8000842:	2200      	movs	r2, #0
 8000844:	e7a8      	b.n	8000798 <__aeabi_fdiv+0xc0>
 8000846:	2201      	movs	r2, #1
 8000848:	1ad3      	subs	r3, r2, r3
 800084a:	2b1b      	cmp	r3, #27
 800084c:	dca2      	bgt.n	8000794 <__aeabi_fdiv+0xbc>
 800084e:	379e      	adds	r7, #158	; 0x9e
 8000850:	002a      	movs	r2, r5
 8000852:	40bd      	lsls	r5, r7
 8000854:	40da      	lsrs	r2, r3
 8000856:	1e6b      	subs	r3, r5, #1
 8000858:	419d      	sbcs	r5, r3
 800085a:	4315      	orrs	r5, r2
 800085c:	076a      	lsls	r2, r5, #29
 800085e:	d004      	beq.n	800086a <__aeabi_fdiv+0x192>
 8000860:	220f      	movs	r2, #15
 8000862:	402a      	ands	r2, r5
 8000864:	2a04      	cmp	r2, #4
 8000866:	d000      	beq.n	800086a <__aeabi_fdiv+0x192>
 8000868:	3504      	adds	r5, #4
 800086a:	016a      	lsls	r2, r5, #5
 800086c:	d544      	bpl.n	80008f8 <__aeabi_fdiv+0x220>
 800086e:	2001      	movs	r0, #1
 8000870:	2200      	movs	r2, #0
 8000872:	e791      	b.n	8000798 <__aeabi_fdiv+0xc0>
 8000874:	20ff      	movs	r0, #255	; 0xff
 8000876:	2200      	movs	r2, #0
 8000878:	e78e      	b.n	8000798 <__aeabi_fdiv+0xc0>
 800087a:	2280      	movs	r2, #128	; 0x80
 800087c:	2600      	movs	r6, #0
 800087e:	20ff      	movs	r0, #255	; 0xff
 8000880:	03d2      	lsls	r2, r2, #15
 8000882:	e789      	b.n	8000798 <__aeabi_fdiv+0xc0>
 8000884:	2300      	movs	r3, #0
 8000886:	4698      	mov	r8, r3
 8000888:	2280      	movs	r2, #128	; 0x80
 800088a:	03d2      	lsls	r2, r2, #15
 800088c:	4215      	tst	r5, r2
 800088e:	d008      	beq.n	80008a2 <__aeabi_fdiv+0x1ca>
 8000890:	4643      	mov	r3, r8
 8000892:	4213      	tst	r3, r2
 8000894:	d105      	bne.n	80008a2 <__aeabi_fdiv+0x1ca>
 8000896:	431a      	orrs	r2, r3
 8000898:	0252      	lsls	r2, r2, #9
 800089a:	0026      	movs	r6, r4
 800089c:	20ff      	movs	r0, #255	; 0xff
 800089e:	0a52      	lsrs	r2, r2, #9
 80008a0:	e77a      	b.n	8000798 <__aeabi_fdiv+0xc0>
 80008a2:	2280      	movs	r2, #128	; 0x80
 80008a4:	03d2      	lsls	r2, r2, #15
 80008a6:	432a      	orrs	r2, r5
 80008a8:	0252      	lsls	r2, r2, #9
 80008aa:	20ff      	movs	r0, #255	; 0xff
 80008ac:	0a52      	lsrs	r2, r2, #9
 80008ae:	e773      	b.n	8000798 <__aeabi_fdiv+0xc0>
 80008b0:	4642      	mov	r2, r8
 80008b2:	016b      	lsls	r3, r5, #5
 80008b4:	0155      	lsls	r5, r2, #5
 80008b6:	42ab      	cmp	r3, r5
 80008b8:	d21a      	bcs.n	80008f0 <__aeabi_fdiv+0x218>
 80008ba:	201b      	movs	r0, #27
 80008bc:	2200      	movs	r2, #0
 80008be:	3f01      	subs	r7, #1
 80008c0:	2601      	movs	r6, #1
 80008c2:	001c      	movs	r4, r3
 80008c4:	0052      	lsls	r2, r2, #1
 80008c6:	005b      	lsls	r3, r3, #1
 80008c8:	2c00      	cmp	r4, #0
 80008ca:	db01      	blt.n	80008d0 <__aeabi_fdiv+0x1f8>
 80008cc:	429d      	cmp	r5, r3
 80008ce:	d801      	bhi.n	80008d4 <__aeabi_fdiv+0x1fc>
 80008d0:	1b5b      	subs	r3, r3, r5
 80008d2:	4332      	orrs	r2, r6
 80008d4:	3801      	subs	r0, #1
 80008d6:	2800      	cmp	r0, #0
 80008d8:	d1f3      	bne.n	80008c2 <__aeabi_fdiv+0x1ea>
 80008da:	1e58      	subs	r0, r3, #1
 80008dc:	4183      	sbcs	r3, r0
 80008de:	4313      	orrs	r3, r2
 80008e0:	001d      	movs	r5, r3
 80008e2:	003b      	movs	r3, r7
 80008e4:	337f      	adds	r3, #127	; 0x7f
 80008e6:	000e      	movs	r6, r1
 80008e8:	2b00      	cmp	r3, #0
 80008ea:	dd00      	ble.n	80008ee <__aeabi_fdiv+0x216>
 80008ec:	e73d      	b.n	800076a <__aeabi_fdiv+0x92>
 80008ee:	e7aa      	b.n	8000846 <__aeabi_fdiv+0x16e>
 80008f0:	201a      	movs	r0, #26
 80008f2:	2201      	movs	r2, #1
 80008f4:	1b5b      	subs	r3, r3, r5
 80008f6:	e7e3      	b.n	80008c0 <__aeabi_fdiv+0x1e8>
 80008f8:	01aa      	lsls	r2, r5, #6
 80008fa:	2000      	movs	r0, #0
 80008fc:	0a52      	lsrs	r2, r2, #9
 80008fe:	e74b      	b.n	8000798 <__aeabi_fdiv+0xc0>
 8000900:	0800f770 	.word	0x0800f770
 8000904:	f7ffffff 	.word	0xf7ffffff
 8000908:	0800f7b0 	.word	0x0800f7b0

0800090c <__aeabi_i2f>:
 800090c:	b570      	push	{r4, r5, r6, lr}
 800090e:	2800      	cmp	r0, #0
 8000910:	d013      	beq.n	800093a <__aeabi_i2f+0x2e>
 8000912:	17c3      	asrs	r3, r0, #31
 8000914:	18c5      	adds	r5, r0, r3
 8000916:	405d      	eors	r5, r3
 8000918:	0fc4      	lsrs	r4, r0, #31
 800091a:	0028      	movs	r0, r5
 800091c:	f001 ff5e 	bl	80027dc <__clzsi2>
 8000920:	239e      	movs	r3, #158	; 0x9e
 8000922:	0001      	movs	r1, r0
 8000924:	1a1b      	subs	r3, r3, r0
 8000926:	2b96      	cmp	r3, #150	; 0x96
 8000928:	dc0f      	bgt.n	800094a <__aeabi_i2f+0x3e>
 800092a:	2808      	cmp	r0, #8
 800092c:	d031      	beq.n	8000992 <__aeabi_i2f+0x86>
 800092e:	3908      	subs	r1, #8
 8000930:	408d      	lsls	r5, r1
 8000932:	026d      	lsls	r5, r5, #9
 8000934:	0a6d      	lsrs	r5, r5, #9
 8000936:	b2d8      	uxtb	r0, r3
 8000938:	e002      	b.n	8000940 <__aeabi_i2f+0x34>
 800093a:	2400      	movs	r4, #0
 800093c:	2000      	movs	r0, #0
 800093e:	2500      	movs	r5, #0
 8000940:	05c0      	lsls	r0, r0, #23
 8000942:	4328      	orrs	r0, r5
 8000944:	07e4      	lsls	r4, r4, #31
 8000946:	4320      	orrs	r0, r4
 8000948:	bd70      	pop	{r4, r5, r6, pc}
 800094a:	2b99      	cmp	r3, #153	; 0x99
 800094c:	dd0c      	ble.n	8000968 <__aeabi_i2f+0x5c>
 800094e:	2205      	movs	r2, #5
 8000950:	1a12      	subs	r2, r2, r0
 8000952:	0028      	movs	r0, r5
 8000954:	40d0      	lsrs	r0, r2
 8000956:	0002      	movs	r2, r0
 8000958:	0008      	movs	r0, r1
 800095a:	301b      	adds	r0, #27
 800095c:	4085      	lsls	r5, r0
 800095e:	0028      	movs	r0, r5
 8000960:	1e45      	subs	r5, r0, #1
 8000962:	41a8      	sbcs	r0, r5
 8000964:	4302      	orrs	r2, r0
 8000966:	0015      	movs	r5, r2
 8000968:	2905      	cmp	r1, #5
 800096a:	dc16      	bgt.n	800099a <__aeabi_i2f+0x8e>
 800096c:	002a      	movs	r2, r5
 800096e:	480f      	ldr	r0, [pc, #60]	; (80009ac <__aeabi_i2f+0xa0>)
 8000970:	4002      	ands	r2, r0
 8000972:	076e      	lsls	r6, r5, #29
 8000974:	d009      	beq.n	800098a <__aeabi_i2f+0x7e>
 8000976:	260f      	movs	r6, #15
 8000978:	4035      	ands	r5, r6
 800097a:	2d04      	cmp	r5, #4
 800097c:	d005      	beq.n	800098a <__aeabi_i2f+0x7e>
 800097e:	3204      	adds	r2, #4
 8000980:	0155      	lsls	r5, r2, #5
 8000982:	d502      	bpl.n	800098a <__aeabi_i2f+0x7e>
 8000984:	239f      	movs	r3, #159	; 0x9f
 8000986:	4002      	ands	r2, r0
 8000988:	1a5b      	subs	r3, r3, r1
 800098a:	0192      	lsls	r2, r2, #6
 800098c:	0a55      	lsrs	r5, r2, #9
 800098e:	b2d8      	uxtb	r0, r3
 8000990:	e7d6      	b.n	8000940 <__aeabi_i2f+0x34>
 8000992:	026d      	lsls	r5, r5, #9
 8000994:	2096      	movs	r0, #150	; 0x96
 8000996:	0a6d      	lsrs	r5, r5, #9
 8000998:	e7d2      	b.n	8000940 <__aeabi_i2f+0x34>
 800099a:	1f4a      	subs	r2, r1, #5
 800099c:	4095      	lsls	r5, r2
 800099e:	002a      	movs	r2, r5
 80009a0:	4802      	ldr	r0, [pc, #8]	; (80009ac <__aeabi_i2f+0xa0>)
 80009a2:	4002      	ands	r2, r0
 80009a4:	076e      	lsls	r6, r5, #29
 80009a6:	d0f0      	beq.n	800098a <__aeabi_i2f+0x7e>
 80009a8:	e7e5      	b.n	8000976 <__aeabi_i2f+0x6a>
 80009aa:	46c0      	nop			; (mov r8, r8)
 80009ac:	fbffffff 	.word	0xfbffffff

080009b0 <__aeabi_dadd>:
 80009b0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80009b2:	464f      	mov	r7, r9
 80009b4:	4646      	mov	r6, r8
 80009b6:	46d6      	mov	lr, sl
 80009b8:	0004      	movs	r4, r0
 80009ba:	b5c0      	push	{r6, r7, lr}
 80009bc:	001f      	movs	r7, r3
 80009be:	030b      	lsls	r3, r1, #12
 80009c0:	0010      	movs	r0, r2
 80009c2:	004e      	lsls	r6, r1, #1
 80009c4:	0a5b      	lsrs	r3, r3, #9
 80009c6:	0fcd      	lsrs	r5, r1, #31
 80009c8:	0f61      	lsrs	r1, r4, #29
 80009ca:	007a      	lsls	r2, r7, #1
 80009cc:	4319      	orrs	r1, r3
 80009ce:	00e3      	lsls	r3, r4, #3
 80009d0:	033c      	lsls	r4, r7, #12
 80009d2:	0fff      	lsrs	r7, r7, #31
 80009d4:	46bc      	mov	ip, r7
 80009d6:	0a64      	lsrs	r4, r4, #9
 80009d8:	0f47      	lsrs	r7, r0, #29
 80009da:	4327      	orrs	r7, r4
 80009dc:	0d76      	lsrs	r6, r6, #21
 80009de:	0d52      	lsrs	r2, r2, #21
 80009e0:	00c0      	lsls	r0, r0, #3
 80009e2:	46b9      	mov	r9, r7
 80009e4:	4680      	mov	r8, r0
 80009e6:	1ab7      	subs	r7, r6, r2
 80009e8:	4565      	cmp	r5, ip
 80009ea:	d100      	bne.n	80009ee <__aeabi_dadd+0x3e>
 80009ec:	e09b      	b.n	8000b26 <__aeabi_dadd+0x176>
 80009ee:	2f00      	cmp	r7, #0
 80009f0:	dc00      	bgt.n	80009f4 <__aeabi_dadd+0x44>
 80009f2:	e084      	b.n	8000afe <__aeabi_dadd+0x14e>
 80009f4:	2a00      	cmp	r2, #0
 80009f6:	d100      	bne.n	80009fa <__aeabi_dadd+0x4a>
 80009f8:	e0be      	b.n	8000b78 <__aeabi_dadd+0x1c8>
 80009fa:	4ac8      	ldr	r2, [pc, #800]	; (8000d1c <__aeabi_dadd+0x36c>)
 80009fc:	4296      	cmp	r6, r2
 80009fe:	d100      	bne.n	8000a02 <__aeabi_dadd+0x52>
 8000a00:	e124      	b.n	8000c4c <__aeabi_dadd+0x29c>
 8000a02:	2280      	movs	r2, #128	; 0x80
 8000a04:	464c      	mov	r4, r9
 8000a06:	0412      	lsls	r2, r2, #16
 8000a08:	4314      	orrs	r4, r2
 8000a0a:	46a1      	mov	r9, r4
 8000a0c:	2f38      	cmp	r7, #56	; 0x38
 8000a0e:	dd00      	ble.n	8000a12 <__aeabi_dadd+0x62>
 8000a10:	e167      	b.n	8000ce2 <__aeabi_dadd+0x332>
 8000a12:	2f1f      	cmp	r7, #31
 8000a14:	dd00      	ble.n	8000a18 <__aeabi_dadd+0x68>
 8000a16:	e1d6      	b.n	8000dc6 <__aeabi_dadd+0x416>
 8000a18:	2220      	movs	r2, #32
 8000a1a:	464c      	mov	r4, r9
 8000a1c:	1bd2      	subs	r2, r2, r7
 8000a1e:	4094      	lsls	r4, r2
 8000a20:	46a2      	mov	sl, r4
 8000a22:	4644      	mov	r4, r8
 8000a24:	40fc      	lsrs	r4, r7
 8000a26:	0020      	movs	r0, r4
 8000a28:	4654      	mov	r4, sl
 8000a2a:	4304      	orrs	r4, r0
 8000a2c:	4640      	mov	r0, r8
 8000a2e:	4090      	lsls	r0, r2
 8000a30:	1e42      	subs	r2, r0, #1
 8000a32:	4190      	sbcs	r0, r2
 8000a34:	464a      	mov	r2, r9
 8000a36:	40fa      	lsrs	r2, r7
 8000a38:	4304      	orrs	r4, r0
 8000a3a:	1a89      	subs	r1, r1, r2
 8000a3c:	1b1c      	subs	r4, r3, r4
 8000a3e:	42a3      	cmp	r3, r4
 8000a40:	4192      	sbcs	r2, r2
 8000a42:	4252      	negs	r2, r2
 8000a44:	1a8b      	subs	r3, r1, r2
 8000a46:	469a      	mov	sl, r3
 8000a48:	4653      	mov	r3, sl
 8000a4a:	021b      	lsls	r3, r3, #8
 8000a4c:	d400      	bmi.n	8000a50 <__aeabi_dadd+0xa0>
 8000a4e:	e0d4      	b.n	8000bfa <__aeabi_dadd+0x24a>
 8000a50:	4653      	mov	r3, sl
 8000a52:	025a      	lsls	r2, r3, #9
 8000a54:	0a53      	lsrs	r3, r2, #9
 8000a56:	469a      	mov	sl, r3
 8000a58:	4653      	mov	r3, sl
 8000a5a:	2b00      	cmp	r3, #0
 8000a5c:	d100      	bne.n	8000a60 <__aeabi_dadd+0xb0>
 8000a5e:	e104      	b.n	8000c6a <__aeabi_dadd+0x2ba>
 8000a60:	4650      	mov	r0, sl
 8000a62:	f001 febb 	bl	80027dc <__clzsi2>
 8000a66:	0003      	movs	r3, r0
 8000a68:	3b08      	subs	r3, #8
 8000a6a:	2220      	movs	r2, #32
 8000a6c:	0020      	movs	r0, r4
 8000a6e:	1ad2      	subs	r2, r2, r3
 8000a70:	4651      	mov	r1, sl
 8000a72:	40d0      	lsrs	r0, r2
 8000a74:	4099      	lsls	r1, r3
 8000a76:	0002      	movs	r2, r0
 8000a78:	409c      	lsls	r4, r3
 8000a7a:	430a      	orrs	r2, r1
 8000a7c:	42b3      	cmp	r3, r6
 8000a7e:	da00      	bge.n	8000a82 <__aeabi_dadd+0xd2>
 8000a80:	e102      	b.n	8000c88 <__aeabi_dadd+0x2d8>
 8000a82:	1b9b      	subs	r3, r3, r6
 8000a84:	1c59      	adds	r1, r3, #1
 8000a86:	291f      	cmp	r1, #31
 8000a88:	dd00      	ble.n	8000a8c <__aeabi_dadd+0xdc>
 8000a8a:	e0a7      	b.n	8000bdc <__aeabi_dadd+0x22c>
 8000a8c:	2320      	movs	r3, #32
 8000a8e:	0010      	movs	r0, r2
 8000a90:	0026      	movs	r6, r4
 8000a92:	1a5b      	subs	r3, r3, r1
 8000a94:	409c      	lsls	r4, r3
 8000a96:	4098      	lsls	r0, r3
 8000a98:	40ce      	lsrs	r6, r1
 8000a9a:	40ca      	lsrs	r2, r1
 8000a9c:	1e63      	subs	r3, r4, #1
 8000a9e:	419c      	sbcs	r4, r3
 8000aa0:	4330      	orrs	r0, r6
 8000aa2:	4692      	mov	sl, r2
 8000aa4:	2600      	movs	r6, #0
 8000aa6:	4304      	orrs	r4, r0
 8000aa8:	0763      	lsls	r3, r4, #29
 8000aaa:	d009      	beq.n	8000ac0 <__aeabi_dadd+0x110>
 8000aac:	230f      	movs	r3, #15
 8000aae:	4023      	ands	r3, r4
 8000ab0:	2b04      	cmp	r3, #4
 8000ab2:	d005      	beq.n	8000ac0 <__aeabi_dadd+0x110>
 8000ab4:	1d23      	adds	r3, r4, #4
 8000ab6:	42a3      	cmp	r3, r4
 8000ab8:	41a4      	sbcs	r4, r4
 8000aba:	4264      	negs	r4, r4
 8000abc:	44a2      	add	sl, r4
 8000abe:	001c      	movs	r4, r3
 8000ac0:	4653      	mov	r3, sl
 8000ac2:	021b      	lsls	r3, r3, #8
 8000ac4:	d400      	bmi.n	8000ac8 <__aeabi_dadd+0x118>
 8000ac6:	e09b      	b.n	8000c00 <__aeabi_dadd+0x250>
 8000ac8:	4b94      	ldr	r3, [pc, #592]	; (8000d1c <__aeabi_dadd+0x36c>)
 8000aca:	3601      	adds	r6, #1
 8000acc:	429e      	cmp	r6, r3
 8000ace:	d100      	bne.n	8000ad2 <__aeabi_dadd+0x122>
 8000ad0:	e0b8      	b.n	8000c44 <__aeabi_dadd+0x294>
 8000ad2:	4653      	mov	r3, sl
 8000ad4:	4992      	ldr	r1, [pc, #584]	; (8000d20 <__aeabi_dadd+0x370>)
 8000ad6:	08e4      	lsrs	r4, r4, #3
 8000ad8:	400b      	ands	r3, r1
 8000ada:	0019      	movs	r1, r3
 8000adc:	075b      	lsls	r3, r3, #29
 8000ade:	4323      	orrs	r3, r4
 8000ae0:	0572      	lsls	r2, r6, #21
 8000ae2:	024c      	lsls	r4, r1, #9
 8000ae4:	0b24      	lsrs	r4, r4, #12
 8000ae6:	0d52      	lsrs	r2, r2, #21
 8000ae8:	0512      	lsls	r2, r2, #20
 8000aea:	07ed      	lsls	r5, r5, #31
 8000aec:	4322      	orrs	r2, r4
 8000aee:	432a      	orrs	r2, r5
 8000af0:	0018      	movs	r0, r3
 8000af2:	0011      	movs	r1, r2
 8000af4:	bce0      	pop	{r5, r6, r7}
 8000af6:	46ba      	mov	sl, r7
 8000af8:	46b1      	mov	r9, r6
 8000afa:	46a8      	mov	r8, r5
 8000afc:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000afe:	2f00      	cmp	r7, #0
 8000b00:	d048      	beq.n	8000b94 <__aeabi_dadd+0x1e4>
 8000b02:	1b97      	subs	r7, r2, r6
 8000b04:	2e00      	cmp	r6, #0
 8000b06:	d000      	beq.n	8000b0a <__aeabi_dadd+0x15a>
 8000b08:	e10e      	b.n	8000d28 <__aeabi_dadd+0x378>
 8000b0a:	000c      	movs	r4, r1
 8000b0c:	431c      	orrs	r4, r3
 8000b0e:	d100      	bne.n	8000b12 <__aeabi_dadd+0x162>
 8000b10:	e1b7      	b.n	8000e82 <__aeabi_dadd+0x4d2>
 8000b12:	1e7c      	subs	r4, r7, #1
 8000b14:	2f01      	cmp	r7, #1
 8000b16:	d100      	bne.n	8000b1a <__aeabi_dadd+0x16a>
 8000b18:	e226      	b.n	8000f68 <__aeabi_dadd+0x5b8>
 8000b1a:	4d80      	ldr	r5, [pc, #512]	; (8000d1c <__aeabi_dadd+0x36c>)
 8000b1c:	42af      	cmp	r7, r5
 8000b1e:	d100      	bne.n	8000b22 <__aeabi_dadd+0x172>
 8000b20:	e1d5      	b.n	8000ece <__aeabi_dadd+0x51e>
 8000b22:	0027      	movs	r7, r4
 8000b24:	e107      	b.n	8000d36 <__aeabi_dadd+0x386>
 8000b26:	2f00      	cmp	r7, #0
 8000b28:	dc00      	bgt.n	8000b2c <__aeabi_dadd+0x17c>
 8000b2a:	e0b2      	b.n	8000c92 <__aeabi_dadd+0x2e2>
 8000b2c:	2a00      	cmp	r2, #0
 8000b2e:	d047      	beq.n	8000bc0 <__aeabi_dadd+0x210>
 8000b30:	4a7a      	ldr	r2, [pc, #488]	; (8000d1c <__aeabi_dadd+0x36c>)
 8000b32:	4296      	cmp	r6, r2
 8000b34:	d100      	bne.n	8000b38 <__aeabi_dadd+0x188>
 8000b36:	e089      	b.n	8000c4c <__aeabi_dadd+0x29c>
 8000b38:	2280      	movs	r2, #128	; 0x80
 8000b3a:	464c      	mov	r4, r9
 8000b3c:	0412      	lsls	r2, r2, #16
 8000b3e:	4314      	orrs	r4, r2
 8000b40:	46a1      	mov	r9, r4
 8000b42:	2f38      	cmp	r7, #56	; 0x38
 8000b44:	dc6b      	bgt.n	8000c1e <__aeabi_dadd+0x26e>
 8000b46:	2f1f      	cmp	r7, #31
 8000b48:	dc00      	bgt.n	8000b4c <__aeabi_dadd+0x19c>
 8000b4a:	e16e      	b.n	8000e2a <__aeabi_dadd+0x47a>
 8000b4c:	003a      	movs	r2, r7
 8000b4e:	4648      	mov	r0, r9
 8000b50:	3a20      	subs	r2, #32
 8000b52:	40d0      	lsrs	r0, r2
 8000b54:	4684      	mov	ip, r0
 8000b56:	2f20      	cmp	r7, #32
 8000b58:	d007      	beq.n	8000b6a <__aeabi_dadd+0x1ba>
 8000b5a:	2240      	movs	r2, #64	; 0x40
 8000b5c:	4648      	mov	r0, r9
 8000b5e:	1bd2      	subs	r2, r2, r7
 8000b60:	4090      	lsls	r0, r2
 8000b62:	0002      	movs	r2, r0
 8000b64:	4640      	mov	r0, r8
 8000b66:	4310      	orrs	r0, r2
 8000b68:	4680      	mov	r8, r0
 8000b6a:	4640      	mov	r0, r8
 8000b6c:	1e42      	subs	r2, r0, #1
 8000b6e:	4190      	sbcs	r0, r2
 8000b70:	4662      	mov	r2, ip
 8000b72:	0004      	movs	r4, r0
 8000b74:	4314      	orrs	r4, r2
 8000b76:	e057      	b.n	8000c28 <__aeabi_dadd+0x278>
 8000b78:	464a      	mov	r2, r9
 8000b7a:	4302      	orrs	r2, r0
 8000b7c:	d100      	bne.n	8000b80 <__aeabi_dadd+0x1d0>
 8000b7e:	e103      	b.n	8000d88 <__aeabi_dadd+0x3d8>
 8000b80:	1e7a      	subs	r2, r7, #1
 8000b82:	2f01      	cmp	r7, #1
 8000b84:	d100      	bne.n	8000b88 <__aeabi_dadd+0x1d8>
 8000b86:	e193      	b.n	8000eb0 <__aeabi_dadd+0x500>
 8000b88:	4c64      	ldr	r4, [pc, #400]	; (8000d1c <__aeabi_dadd+0x36c>)
 8000b8a:	42a7      	cmp	r7, r4
 8000b8c:	d100      	bne.n	8000b90 <__aeabi_dadd+0x1e0>
 8000b8e:	e18a      	b.n	8000ea6 <__aeabi_dadd+0x4f6>
 8000b90:	0017      	movs	r7, r2
 8000b92:	e73b      	b.n	8000a0c <__aeabi_dadd+0x5c>
 8000b94:	4c63      	ldr	r4, [pc, #396]	; (8000d24 <__aeabi_dadd+0x374>)
 8000b96:	1c72      	adds	r2, r6, #1
 8000b98:	4222      	tst	r2, r4
 8000b9a:	d000      	beq.n	8000b9e <__aeabi_dadd+0x1ee>
 8000b9c:	e0e0      	b.n	8000d60 <__aeabi_dadd+0x3b0>
 8000b9e:	000a      	movs	r2, r1
 8000ba0:	431a      	orrs	r2, r3
 8000ba2:	2e00      	cmp	r6, #0
 8000ba4:	d000      	beq.n	8000ba8 <__aeabi_dadd+0x1f8>
 8000ba6:	e174      	b.n	8000e92 <__aeabi_dadd+0x4e2>
 8000ba8:	2a00      	cmp	r2, #0
 8000baa:	d100      	bne.n	8000bae <__aeabi_dadd+0x1fe>
 8000bac:	e1d0      	b.n	8000f50 <__aeabi_dadd+0x5a0>
 8000bae:	464a      	mov	r2, r9
 8000bb0:	4302      	orrs	r2, r0
 8000bb2:	d000      	beq.n	8000bb6 <__aeabi_dadd+0x206>
 8000bb4:	e1e3      	b.n	8000f7e <__aeabi_dadd+0x5ce>
 8000bb6:	074a      	lsls	r2, r1, #29
 8000bb8:	08db      	lsrs	r3, r3, #3
 8000bba:	4313      	orrs	r3, r2
 8000bbc:	08c9      	lsrs	r1, r1, #3
 8000bbe:	e029      	b.n	8000c14 <__aeabi_dadd+0x264>
 8000bc0:	464a      	mov	r2, r9
 8000bc2:	4302      	orrs	r2, r0
 8000bc4:	d100      	bne.n	8000bc8 <__aeabi_dadd+0x218>
 8000bc6:	e17d      	b.n	8000ec4 <__aeabi_dadd+0x514>
 8000bc8:	1e7a      	subs	r2, r7, #1
 8000bca:	2f01      	cmp	r7, #1
 8000bcc:	d100      	bne.n	8000bd0 <__aeabi_dadd+0x220>
 8000bce:	e0e0      	b.n	8000d92 <__aeabi_dadd+0x3e2>
 8000bd0:	4c52      	ldr	r4, [pc, #328]	; (8000d1c <__aeabi_dadd+0x36c>)
 8000bd2:	42a7      	cmp	r7, r4
 8000bd4:	d100      	bne.n	8000bd8 <__aeabi_dadd+0x228>
 8000bd6:	e166      	b.n	8000ea6 <__aeabi_dadd+0x4f6>
 8000bd8:	0017      	movs	r7, r2
 8000bda:	e7b2      	b.n	8000b42 <__aeabi_dadd+0x192>
 8000bdc:	0010      	movs	r0, r2
 8000bde:	3b1f      	subs	r3, #31
 8000be0:	40d8      	lsrs	r0, r3
 8000be2:	2920      	cmp	r1, #32
 8000be4:	d003      	beq.n	8000bee <__aeabi_dadd+0x23e>
 8000be6:	2340      	movs	r3, #64	; 0x40
 8000be8:	1a5b      	subs	r3, r3, r1
 8000bea:	409a      	lsls	r2, r3
 8000bec:	4314      	orrs	r4, r2
 8000bee:	1e63      	subs	r3, r4, #1
 8000bf0:	419c      	sbcs	r4, r3
 8000bf2:	2300      	movs	r3, #0
 8000bf4:	2600      	movs	r6, #0
 8000bf6:	469a      	mov	sl, r3
 8000bf8:	4304      	orrs	r4, r0
 8000bfa:	0763      	lsls	r3, r4, #29
 8000bfc:	d000      	beq.n	8000c00 <__aeabi_dadd+0x250>
 8000bfe:	e755      	b.n	8000aac <__aeabi_dadd+0xfc>
 8000c00:	4652      	mov	r2, sl
 8000c02:	08e3      	lsrs	r3, r4, #3
 8000c04:	0752      	lsls	r2, r2, #29
 8000c06:	4313      	orrs	r3, r2
 8000c08:	4652      	mov	r2, sl
 8000c0a:	0037      	movs	r7, r6
 8000c0c:	08d1      	lsrs	r1, r2, #3
 8000c0e:	4a43      	ldr	r2, [pc, #268]	; (8000d1c <__aeabi_dadd+0x36c>)
 8000c10:	4297      	cmp	r7, r2
 8000c12:	d01f      	beq.n	8000c54 <__aeabi_dadd+0x2a4>
 8000c14:	0309      	lsls	r1, r1, #12
 8000c16:	057a      	lsls	r2, r7, #21
 8000c18:	0b0c      	lsrs	r4, r1, #12
 8000c1a:	0d52      	lsrs	r2, r2, #21
 8000c1c:	e764      	b.n	8000ae8 <__aeabi_dadd+0x138>
 8000c1e:	4642      	mov	r2, r8
 8000c20:	464c      	mov	r4, r9
 8000c22:	4314      	orrs	r4, r2
 8000c24:	1e62      	subs	r2, r4, #1
 8000c26:	4194      	sbcs	r4, r2
 8000c28:	18e4      	adds	r4, r4, r3
 8000c2a:	429c      	cmp	r4, r3
 8000c2c:	4192      	sbcs	r2, r2
 8000c2e:	4252      	negs	r2, r2
 8000c30:	4692      	mov	sl, r2
 8000c32:	448a      	add	sl, r1
 8000c34:	4653      	mov	r3, sl
 8000c36:	021b      	lsls	r3, r3, #8
 8000c38:	d5df      	bpl.n	8000bfa <__aeabi_dadd+0x24a>
 8000c3a:	4b38      	ldr	r3, [pc, #224]	; (8000d1c <__aeabi_dadd+0x36c>)
 8000c3c:	3601      	adds	r6, #1
 8000c3e:	429e      	cmp	r6, r3
 8000c40:	d000      	beq.n	8000c44 <__aeabi_dadd+0x294>
 8000c42:	e0b3      	b.n	8000dac <__aeabi_dadd+0x3fc>
 8000c44:	0032      	movs	r2, r6
 8000c46:	2400      	movs	r4, #0
 8000c48:	2300      	movs	r3, #0
 8000c4a:	e74d      	b.n	8000ae8 <__aeabi_dadd+0x138>
 8000c4c:	074a      	lsls	r2, r1, #29
 8000c4e:	08db      	lsrs	r3, r3, #3
 8000c50:	4313      	orrs	r3, r2
 8000c52:	08c9      	lsrs	r1, r1, #3
 8000c54:	001a      	movs	r2, r3
 8000c56:	430a      	orrs	r2, r1
 8000c58:	d100      	bne.n	8000c5c <__aeabi_dadd+0x2ac>
 8000c5a:	e200      	b.n	800105e <__aeabi_dadd+0x6ae>
 8000c5c:	2480      	movs	r4, #128	; 0x80
 8000c5e:	0324      	lsls	r4, r4, #12
 8000c60:	430c      	orrs	r4, r1
 8000c62:	0324      	lsls	r4, r4, #12
 8000c64:	4a2d      	ldr	r2, [pc, #180]	; (8000d1c <__aeabi_dadd+0x36c>)
 8000c66:	0b24      	lsrs	r4, r4, #12
 8000c68:	e73e      	b.n	8000ae8 <__aeabi_dadd+0x138>
 8000c6a:	0020      	movs	r0, r4
 8000c6c:	f001 fdb6 	bl	80027dc <__clzsi2>
 8000c70:	0003      	movs	r3, r0
 8000c72:	3318      	adds	r3, #24
 8000c74:	2b1f      	cmp	r3, #31
 8000c76:	dc00      	bgt.n	8000c7a <__aeabi_dadd+0x2ca>
 8000c78:	e6f7      	b.n	8000a6a <__aeabi_dadd+0xba>
 8000c7a:	0022      	movs	r2, r4
 8000c7c:	3808      	subs	r0, #8
 8000c7e:	4082      	lsls	r2, r0
 8000c80:	2400      	movs	r4, #0
 8000c82:	42b3      	cmp	r3, r6
 8000c84:	db00      	blt.n	8000c88 <__aeabi_dadd+0x2d8>
 8000c86:	e6fc      	b.n	8000a82 <__aeabi_dadd+0xd2>
 8000c88:	1af6      	subs	r6, r6, r3
 8000c8a:	4b25      	ldr	r3, [pc, #148]	; (8000d20 <__aeabi_dadd+0x370>)
 8000c8c:	401a      	ands	r2, r3
 8000c8e:	4692      	mov	sl, r2
 8000c90:	e70a      	b.n	8000aa8 <__aeabi_dadd+0xf8>
 8000c92:	2f00      	cmp	r7, #0
 8000c94:	d02b      	beq.n	8000cee <__aeabi_dadd+0x33e>
 8000c96:	1b97      	subs	r7, r2, r6
 8000c98:	2e00      	cmp	r6, #0
 8000c9a:	d100      	bne.n	8000c9e <__aeabi_dadd+0x2ee>
 8000c9c:	e0b8      	b.n	8000e10 <__aeabi_dadd+0x460>
 8000c9e:	4c1f      	ldr	r4, [pc, #124]	; (8000d1c <__aeabi_dadd+0x36c>)
 8000ca0:	42a2      	cmp	r2, r4
 8000ca2:	d100      	bne.n	8000ca6 <__aeabi_dadd+0x2f6>
 8000ca4:	e11c      	b.n	8000ee0 <__aeabi_dadd+0x530>
 8000ca6:	2480      	movs	r4, #128	; 0x80
 8000ca8:	0424      	lsls	r4, r4, #16
 8000caa:	4321      	orrs	r1, r4
 8000cac:	2f38      	cmp	r7, #56	; 0x38
 8000cae:	dd00      	ble.n	8000cb2 <__aeabi_dadd+0x302>
 8000cb0:	e11e      	b.n	8000ef0 <__aeabi_dadd+0x540>
 8000cb2:	2f1f      	cmp	r7, #31
 8000cb4:	dd00      	ble.n	8000cb8 <__aeabi_dadd+0x308>
 8000cb6:	e19e      	b.n	8000ff6 <__aeabi_dadd+0x646>
 8000cb8:	2620      	movs	r6, #32
 8000cba:	000c      	movs	r4, r1
 8000cbc:	1bf6      	subs	r6, r6, r7
 8000cbe:	0018      	movs	r0, r3
 8000cc0:	40b3      	lsls	r3, r6
 8000cc2:	40b4      	lsls	r4, r6
 8000cc4:	40f8      	lsrs	r0, r7
 8000cc6:	1e5e      	subs	r6, r3, #1
 8000cc8:	41b3      	sbcs	r3, r6
 8000cca:	40f9      	lsrs	r1, r7
 8000ccc:	4304      	orrs	r4, r0
 8000cce:	431c      	orrs	r4, r3
 8000cd0:	4489      	add	r9, r1
 8000cd2:	4444      	add	r4, r8
 8000cd4:	4544      	cmp	r4, r8
 8000cd6:	419b      	sbcs	r3, r3
 8000cd8:	425b      	negs	r3, r3
 8000cda:	444b      	add	r3, r9
 8000cdc:	469a      	mov	sl, r3
 8000cde:	0016      	movs	r6, r2
 8000ce0:	e7a8      	b.n	8000c34 <__aeabi_dadd+0x284>
 8000ce2:	4642      	mov	r2, r8
 8000ce4:	464c      	mov	r4, r9
 8000ce6:	4314      	orrs	r4, r2
 8000ce8:	1e62      	subs	r2, r4, #1
 8000cea:	4194      	sbcs	r4, r2
 8000cec:	e6a6      	b.n	8000a3c <__aeabi_dadd+0x8c>
 8000cee:	4c0d      	ldr	r4, [pc, #52]	; (8000d24 <__aeabi_dadd+0x374>)
 8000cf0:	1c72      	adds	r2, r6, #1
 8000cf2:	4222      	tst	r2, r4
 8000cf4:	d000      	beq.n	8000cf8 <__aeabi_dadd+0x348>
 8000cf6:	e0a8      	b.n	8000e4a <__aeabi_dadd+0x49a>
 8000cf8:	000a      	movs	r2, r1
 8000cfa:	431a      	orrs	r2, r3
 8000cfc:	2e00      	cmp	r6, #0
 8000cfe:	d000      	beq.n	8000d02 <__aeabi_dadd+0x352>
 8000d00:	e10a      	b.n	8000f18 <__aeabi_dadd+0x568>
 8000d02:	2a00      	cmp	r2, #0
 8000d04:	d100      	bne.n	8000d08 <__aeabi_dadd+0x358>
 8000d06:	e15e      	b.n	8000fc6 <__aeabi_dadd+0x616>
 8000d08:	464a      	mov	r2, r9
 8000d0a:	4302      	orrs	r2, r0
 8000d0c:	d000      	beq.n	8000d10 <__aeabi_dadd+0x360>
 8000d0e:	e161      	b.n	8000fd4 <__aeabi_dadd+0x624>
 8000d10:	074a      	lsls	r2, r1, #29
 8000d12:	08db      	lsrs	r3, r3, #3
 8000d14:	4313      	orrs	r3, r2
 8000d16:	08c9      	lsrs	r1, r1, #3
 8000d18:	e77c      	b.n	8000c14 <__aeabi_dadd+0x264>
 8000d1a:	46c0      	nop			; (mov r8, r8)
 8000d1c:	000007ff 	.word	0x000007ff
 8000d20:	ff7fffff 	.word	0xff7fffff
 8000d24:	000007fe 	.word	0x000007fe
 8000d28:	4ccf      	ldr	r4, [pc, #828]	; (8001068 <__aeabi_dadd+0x6b8>)
 8000d2a:	42a2      	cmp	r2, r4
 8000d2c:	d100      	bne.n	8000d30 <__aeabi_dadd+0x380>
 8000d2e:	e0ce      	b.n	8000ece <__aeabi_dadd+0x51e>
 8000d30:	2480      	movs	r4, #128	; 0x80
 8000d32:	0424      	lsls	r4, r4, #16
 8000d34:	4321      	orrs	r1, r4
 8000d36:	2f38      	cmp	r7, #56	; 0x38
 8000d38:	dc5b      	bgt.n	8000df2 <__aeabi_dadd+0x442>
 8000d3a:	2f1f      	cmp	r7, #31
 8000d3c:	dd00      	ble.n	8000d40 <__aeabi_dadd+0x390>
 8000d3e:	e0dc      	b.n	8000efa <__aeabi_dadd+0x54a>
 8000d40:	2520      	movs	r5, #32
 8000d42:	000c      	movs	r4, r1
 8000d44:	1bed      	subs	r5, r5, r7
 8000d46:	001e      	movs	r6, r3
 8000d48:	40ab      	lsls	r3, r5
 8000d4a:	40ac      	lsls	r4, r5
 8000d4c:	40fe      	lsrs	r6, r7
 8000d4e:	1e5d      	subs	r5, r3, #1
 8000d50:	41ab      	sbcs	r3, r5
 8000d52:	4334      	orrs	r4, r6
 8000d54:	40f9      	lsrs	r1, r7
 8000d56:	431c      	orrs	r4, r3
 8000d58:	464b      	mov	r3, r9
 8000d5a:	1a5b      	subs	r3, r3, r1
 8000d5c:	4699      	mov	r9, r3
 8000d5e:	e04c      	b.n	8000dfa <__aeabi_dadd+0x44a>
 8000d60:	464a      	mov	r2, r9
 8000d62:	1a1c      	subs	r4, r3, r0
 8000d64:	1a88      	subs	r0, r1, r2
 8000d66:	42a3      	cmp	r3, r4
 8000d68:	4192      	sbcs	r2, r2
 8000d6a:	4252      	negs	r2, r2
 8000d6c:	4692      	mov	sl, r2
 8000d6e:	0002      	movs	r2, r0
 8000d70:	4650      	mov	r0, sl
 8000d72:	1a12      	subs	r2, r2, r0
 8000d74:	4692      	mov	sl, r2
 8000d76:	0212      	lsls	r2, r2, #8
 8000d78:	d478      	bmi.n	8000e6c <__aeabi_dadd+0x4bc>
 8000d7a:	4653      	mov	r3, sl
 8000d7c:	4323      	orrs	r3, r4
 8000d7e:	d000      	beq.n	8000d82 <__aeabi_dadd+0x3d2>
 8000d80:	e66a      	b.n	8000a58 <__aeabi_dadd+0xa8>
 8000d82:	2100      	movs	r1, #0
 8000d84:	2500      	movs	r5, #0
 8000d86:	e745      	b.n	8000c14 <__aeabi_dadd+0x264>
 8000d88:	074a      	lsls	r2, r1, #29
 8000d8a:	08db      	lsrs	r3, r3, #3
 8000d8c:	4313      	orrs	r3, r2
 8000d8e:	08c9      	lsrs	r1, r1, #3
 8000d90:	e73d      	b.n	8000c0e <__aeabi_dadd+0x25e>
 8000d92:	181c      	adds	r4, r3, r0
 8000d94:	429c      	cmp	r4, r3
 8000d96:	419b      	sbcs	r3, r3
 8000d98:	4449      	add	r1, r9
 8000d9a:	468a      	mov	sl, r1
 8000d9c:	425b      	negs	r3, r3
 8000d9e:	449a      	add	sl, r3
 8000da0:	4653      	mov	r3, sl
 8000da2:	2601      	movs	r6, #1
 8000da4:	021b      	lsls	r3, r3, #8
 8000da6:	d400      	bmi.n	8000daa <__aeabi_dadd+0x3fa>
 8000da8:	e727      	b.n	8000bfa <__aeabi_dadd+0x24a>
 8000daa:	2602      	movs	r6, #2
 8000dac:	4652      	mov	r2, sl
 8000dae:	4baf      	ldr	r3, [pc, #700]	; (800106c <__aeabi_dadd+0x6bc>)
 8000db0:	2101      	movs	r1, #1
 8000db2:	401a      	ands	r2, r3
 8000db4:	0013      	movs	r3, r2
 8000db6:	4021      	ands	r1, r4
 8000db8:	0862      	lsrs	r2, r4, #1
 8000dba:	430a      	orrs	r2, r1
 8000dbc:	07dc      	lsls	r4, r3, #31
 8000dbe:	085b      	lsrs	r3, r3, #1
 8000dc0:	469a      	mov	sl, r3
 8000dc2:	4314      	orrs	r4, r2
 8000dc4:	e670      	b.n	8000aa8 <__aeabi_dadd+0xf8>
 8000dc6:	003a      	movs	r2, r7
 8000dc8:	464c      	mov	r4, r9
 8000dca:	3a20      	subs	r2, #32
 8000dcc:	40d4      	lsrs	r4, r2
 8000dce:	46a4      	mov	ip, r4
 8000dd0:	2f20      	cmp	r7, #32
 8000dd2:	d007      	beq.n	8000de4 <__aeabi_dadd+0x434>
 8000dd4:	2240      	movs	r2, #64	; 0x40
 8000dd6:	4648      	mov	r0, r9
 8000dd8:	1bd2      	subs	r2, r2, r7
 8000dda:	4090      	lsls	r0, r2
 8000ddc:	0002      	movs	r2, r0
 8000dde:	4640      	mov	r0, r8
 8000de0:	4310      	orrs	r0, r2
 8000de2:	4680      	mov	r8, r0
 8000de4:	4640      	mov	r0, r8
 8000de6:	1e42      	subs	r2, r0, #1
 8000de8:	4190      	sbcs	r0, r2
 8000dea:	4662      	mov	r2, ip
 8000dec:	0004      	movs	r4, r0
 8000dee:	4314      	orrs	r4, r2
 8000df0:	e624      	b.n	8000a3c <__aeabi_dadd+0x8c>
 8000df2:	4319      	orrs	r1, r3
 8000df4:	000c      	movs	r4, r1
 8000df6:	1e63      	subs	r3, r4, #1
 8000df8:	419c      	sbcs	r4, r3
 8000dfa:	4643      	mov	r3, r8
 8000dfc:	1b1c      	subs	r4, r3, r4
 8000dfe:	45a0      	cmp	r8, r4
 8000e00:	419b      	sbcs	r3, r3
 8000e02:	4649      	mov	r1, r9
 8000e04:	425b      	negs	r3, r3
 8000e06:	1acb      	subs	r3, r1, r3
 8000e08:	469a      	mov	sl, r3
 8000e0a:	4665      	mov	r5, ip
 8000e0c:	0016      	movs	r6, r2
 8000e0e:	e61b      	b.n	8000a48 <__aeabi_dadd+0x98>
 8000e10:	000c      	movs	r4, r1
 8000e12:	431c      	orrs	r4, r3
 8000e14:	d100      	bne.n	8000e18 <__aeabi_dadd+0x468>
 8000e16:	e0c7      	b.n	8000fa8 <__aeabi_dadd+0x5f8>
 8000e18:	1e7c      	subs	r4, r7, #1
 8000e1a:	2f01      	cmp	r7, #1
 8000e1c:	d100      	bne.n	8000e20 <__aeabi_dadd+0x470>
 8000e1e:	e0f9      	b.n	8001014 <__aeabi_dadd+0x664>
 8000e20:	4e91      	ldr	r6, [pc, #580]	; (8001068 <__aeabi_dadd+0x6b8>)
 8000e22:	42b7      	cmp	r7, r6
 8000e24:	d05c      	beq.n	8000ee0 <__aeabi_dadd+0x530>
 8000e26:	0027      	movs	r7, r4
 8000e28:	e740      	b.n	8000cac <__aeabi_dadd+0x2fc>
 8000e2a:	2220      	movs	r2, #32
 8000e2c:	464c      	mov	r4, r9
 8000e2e:	4640      	mov	r0, r8
 8000e30:	1bd2      	subs	r2, r2, r7
 8000e32:	4094      	lsls	r4, r2
 8000e34:	40f8      	lsrs	r0, r7
 8000e36:	4304      	orrs	r4, r0
 8000e38:	4640      	mov	r0, r8
 8000e3a:	4090      	lsls	r0, r2
 8000e3c:	1e42      	subs	r2, r0, #1
 8000e3e:	4190      	sbcs	r0, r2
 8000e40:	464a      	mov	r2, r9
 8000e42:	40fa      	lsrs	r2, r7
 8000e44:	4304      	orrs	r4, r0
 8000e46:	1889      	adds	r1, r1, r2
 8000e48:	e6ee      	b.n	8000c28 <__aeabi_dadd+0x278>
 8000e4a:	4c87      	ldr	r4, [pc, #540]	; (8001068 <__aeabi_dadd+0x6b8>)
 8000e4c:	42a2      	cmp	r2, r4
 8000e4e:	d100      	bne.n	8000e52 <__aeabi_dadd+0x4a2>
 8000e50:	e6f9      	b.n	8000c46 <__aeabi_dadd+0x296>
 8000e52:	1818      	adds	r0, r3, r0
 8000e54:	4298      	cmp	r0, r3
 8000e56:	419b      	sbcs	r3, r3
 8000e58:	4449      	add	r1, r9
 8000e5a:	425b      	negs	r3, r3
 8000e5c:	18cb      	adds	r3, r1, r3
 8000e5e:	07dc      	lsls	r4, r3, #31
 8000e60:	0840      	lsrs	r0, r0, #1
 8000e62:	085b      	lsrs	r3, r3, #1
 8000e64:	469a      	mov	sl, r3
 8000e66:	0016      	movs	r6, r2
 8000e68:	4304      	orrs	r4, r0
 8000e6a:	e6c6      	b.n	8000bfa <__aeabi_dadd+0x24a>
 8000e6c:	4642      	mov	r2, r8
 8000e6e:	1ad4      	subs	r4, r2, r3
 8000e70:	45a0      	cmp	r8, r4
 8000e72:	4180      	sbcs	r0, r0
 8000e74:	464b      	mov	r3, r9
 8000e76:	4240      	negs	r0, r0
 8000e78:	1a59      	subs	r1, r3, r1
 8000e7a:	1a0b      	subs	r3, r1, r0
 8000e7c:	469a      	mov	sl, r3
 8000e7e:	4665      	mov	r5, ip
 8000e80:	e5ea      	b.n	8000a58 <__aeabi_dadd+0xa8>
 8000e82:	464b      	mov	r3, r9
 8000e84:	464a      	mov	r2, r9
 8000e86:	08c0      	lsrs	r0, r0, #3
 8000e88:	075b      	lsls	r3, r3, #29
 8000e8a:	4665      	mov	r5, ip
 8000e8c:	4303      	orrs	r3, r0
 8000e8e:	08d1      	lsrs	r1, r2, #3
 8000e90:	e6bd      	b.n	8000c0e <__aeabi_dadd+0x25e>
 8000e92:	2a00      	cmp	r2, #0
 8000e94:	d000      	beq.n	8000e98 <__aeabi_dadd+0x4e8>
 8000e96:	e08e      	b.n	8000fb6 <__aeabi_dadd+0x606>
 8000e98:	464b      	mov	r3, r9
 8000e9a:	4303      	orrs	r3, r0
 8000e9c:	d117      	bne.n	8000ece <__aeabi_dadd+0x51e>
 8000e9e:	2180      	movs	r1, #128	; 0x80
 8000ea0:	2500      	movs	r5, #0
 8000ea2:	0309      	lsls	r1, r1, #12
 8000ea4:	e6da      	b.n	8000c5c <__aeabi_dadd+0x2ac>
 8000ea6:	074a      	lsls	r2, r1, #29
 8000ea8:	08db      	lsrs	r3, r3, #3
 8000eaa:	4313      	orrs	r3, r2
 8000eac:	08c9      	lsrs	r1, r1, #3
 8000eae:	e6d1      	b.n	8000c54 <__aeabi_dadd+0x2a4>
 8000eb0:	1a1c      	subs	r4, r3, r0
 8000eb2:	464a      	mov	r2, r9
 8000eb4:	42a3      	cmp	r3, r4
 8000eb6:	419b      	sbcs	r3, r3
 8000eb8:	1a89      	subs	r1, r1, r2
 8000eba:	425b      	negs	r3, r3
 8000ebc:	1acb      	subs	r3, r1, r3
 8000ebe:	469a      	mov	sl, r3
 8000ec0:	2601      	movs	r6, #1
 8000ec2:	e5c1      	b.n	8000a48 <__aeabi_dadd+0x98>
 8000ec4:	074a      	lsls	r2, r1, #29
 8000ec6:	08db      	lsrs	r3, r3, #3
 8000ec8:	4313      	orrs	r3, r2
 8000eca:	08c9      	lsrs	r1, r1, #3
 8000ecc:	e69f      	b.n	8000c0e <__aeabi_dadd+0x25e>
 8000ece:	4643      	mov	r3, r8
 8000ed0:	08d8      	lsrs	r0, r3, #3
 8000ed2:	464b      	mov	r3, r9
 8000ed4:	464a      	mov	r2, r9
 8000ed6:	075b      	lsls	r3, r3, #29
 8000ed8:	4665      	mov	r5, ip
 8000eda:	4303      	orrs	r3, r0
 8000edc:	08d1      	lsrs	r1, r2, #3
 8000ede:	e6b9      	b.n	8000c54 <__aeabi_dadd+0x2a4>
 8000ee0:	4643      	mov	r3, r8
 8000ee2:	08d8      	lsrs	r0, r3, #3
 8000ee4:	464b      	mov	r3, r9
 8000ee6:	464a      	mov	r2, r9
 8000ee8:	075b      	lsls	r3, r3, #29
 8000eea:	4303      	orrs	r3, r0
 8000eec:	08d1      	lsrs	r1, r2, #3
 8000eee:	e6b1      	b.n	8000c54 <__aeabi_dadd+0x2a4>
 8000ef0:	4319      	orrs	r1, r3
 8000ef2:	000c      	movs	r4, r1
 8000ef4:	1e63      	subs	r3, r4, #1
 8000ef6:	419c      	sbcs	r4, r3
 8000ef8:	e6eb      	b.n	8000cd2 <__aeabi_dadd+0x322>
 8000efa:	003c      	movs	r4, r7
 8000efc:	000d      	movs	r5, r1
 8000efe:	3c20      	subs	r4, #32
 8000f00:	40e5      	lsrs	r5, r4
 8000f02:	2f20      	cmp	r7, #32
 8000f04:	d003      	beq.n	8000f0e <__aeabi_dadd+0x55e>
 8000f06:	2440      	movs	r4, #64	; 0x40
 8000f08:	1be4      	subs	r4, r4, r7
 8000f0a:	40a1      	lsls	r1, r4
 8000f0c:	430b      	orrs	r3, r1
 8000f0e:	001c      	movs	r4, r3
 8000f10:	1e63      	subs	r3, r4, #1
 8000f12:	419c      	sbcs	r4, r3
 8000f14:	432c      	orrs	r4, r5
 8000f16:	e770      	b.n	8000dfa <__aeabi_dadd+0x44a>
 8000f18:	2a00      	cmp	r2, #0
 8000f1a:	d0e1      	beq.n	8000ee0 <__aeabi_dadd+0x530>
 8000f1c:	464a      	mov	r2, r9
 8000f1e:	4302      	orrs	r2, r0
 8000f20:	d0c1      	beq.n	8000ea6 <__aeabi_dadd+0x4f6>
 8000f22:	074a      	lsls	r2, r1, #29
 8000f24:	08db      	lsrs	r3, r3, #3
 8000f26:	4313      	orrs	r3, r2
 8000f28:	2280      	movs	r2, #128	; 0x80
 8000f2a:	08c9      	lsrs	r1, r1, #3
 8000f2c:	0312      	lsls	r2, r2, #12
 8000f2e:	4211      	tst	r1, r2
 8000f30:	d008      	beq.n	8000f44 <__aeabi_dadd+0x594>
 8000f32:	4648      	mov	r0, r9
 8000f34:	08c4      	lsrs	r4, r0, #3
 8000f36:	4214      	tst	r4, r2
 8000f38:	d104      	bne.n	8000f44 <__aeabi_dadd+0x594>
 8000f3a:	4643      	mov	r3, r8
 8000f3c:	0021      	movs	r1, r4
 8000f3e:	08db      	lsrs	r3, r3, #3
 8000f40:	0742      	lsls	r2, r0, #29
 8000f42:	4313      	orrs	r3, r2
 8000f44:	0f5a      	lsrs	r2, r3, #29
 8000f46:	00db      	lsls	r3, r3, #3
 8000f48:	0752      	lsls	r2, r2, #29
 8000f4a:	08db      	lsrs	r3, r3, #3
 8000f4c:	4313      	orrs	r3, r2
 8000f4e:	e681      	b.n	8000c54 <__aeabi_dadd+0x2a4>
 8000f50:	464b      	mov	r3, r9
 8000f52:	4303      	orrs	r3, r0
 8000f54:	d100      	bne.n	8000f58 <__aeabi_dadd+0x5a8>
 8000f56:	e714      	b.n	8000d82 <__aeabi_dadd+0x3d2>
 8000f58:	464b      	mov	r3, r9
 8000f5a:	464a      	mov	r2, r9
 8000f5c:	08c0      	lsrs	r0, r0, #3
 8000f5e:	075b      	lsls	r3, r3, #29
 8000f60:	4665      	mov	r5, ip
 8000f62:	4303      	orrs	r3, r0
 8000f64:	08d1      	lsrs	r1, r2, #3
 8000f66:	e655      	b.n	8000c14 <__aeabi_dadd+0x264>
 8000f68:	1ac4      	subs	r4, r0, r3
 8000f6a:	45a0      	cmp	r8, r4
 8000f6c:	4180      	sbcs	r0, r0
 8000f6e:	464b      	mov	r3, r9
 8000f70:	4240      	negs	r0, r0
 8000f72:	1a59      	subs	r1, r3, r1
 8000f74:	1a0b      	subs	r3, r1, r0
 8000f76:	469a      	mov	sl, r3
 8000f78:	4665      	mov	r5, ip
 8000f7a:	2601      	movs	r6, #1
 8000f7c:	e564      	b.n	8000a48 <__aeabi_dadd+0x98>
 8000f7e:	1a1c      	subs	r4, r3, r0
 8000f80:	464a      	mov	r2, r9
 8000f82:	42a3      	cmp	r3, r4
 8000f84:	4180      	sbcs	r0, r0
 8000f86:	1a8a      	subs	r2, r1, r2
 8000f88:	4240      	negs	r0, r0
 8000f8a:	1a12      	subs	r2, r2, r0
 8000f8c:	4692      	mov	sl, r2
 8000f8e:	0212      	lsls	r2, r2, #8
 8000f90:	d549      	bpl.n	8001026 <__aeabi_dadd+0x676>
 8000f92:	4642      	mov	r2, r8
 8000f94:	1ad4      	subs	r4, r2, r3
 8000f96:	45a0      	cmp	r8, r4
 8000f98:	4180      	sbcs	r0, r0
 8000f9a:	464b      	mov	r3, r9
 8000f9c:	4240      	negs	r0, r0
 8000f9e:	1a59      	subs	r1, r3, r1
 8000fa0:	1a0b      	subs	r3, r1, r0
 8000fa2:	469a      	mov	sl, r3
 8000fa4:	4665      	mov	r5, ip
 8000fa6:	e57f      	b.n	8000aa8 <__aeabi_dadd+0xf8>
 8000fa8:	464b      	mov	r3, r9
 8000faa:	464a      	mov	r2, r9
 8000fac:	08c0      	lsrs	r0, r0, #3
 8000fae:	075b      	lsls	r3, r3, #29
 8000fb0:	4303      	orrs	r3, r0
 8000fb2:	08d1      	lsrs	r1, r2, #3
 8000fb4:	e62b      	b.n	8000c0e <__aeabi_dadd+0x25e>
 8000fb6:	464a      	mov	r2, r9
 8000fb8:	08db      	lsrs	r3, r3, #3
 8000fba:	4302      	orrs	r2, r0
 8000fbc:	d138      	bne.n	8001030 <__aeabi_dadd+0x680>
 8000fbe:	074a      	lsls	r2, r1, #29
 8000fc0:	4313      	orrs	r3, r2
 8000fc2:	08c9      	lsrs	r1, r1, #3
 8000fc4:	e646      	b.n	8000c54 <__aeabi_dadd+0x2a4>
 8000fc6:	464b      	mov	r3, r9
 8000fc8:	464a      	mov	r2, r9
 8000fca:	08c0      	lsrs	r0, r0, #3
 8000fcc:	075b      	lsls	r3, r3, #29
 8000fce:	4303      	orrs	r3, r0
 8000fd0:	08d1      	lsrs	r1, r2, #3
 8000fd2:	e61f      	b.n	8000c14 <__aeabi_dadd+0x264>
 8000fd4:	181c      	adds	r4, r3, r0
 8000fd6:	429c      	cmp	r4, r3
 8000fd8:	419b      	sbcs	r3, r3
 8000fda:	4449      	add	r1, r9
 8000fdc:	468a      	mov	sl, r1
 8000fde:	425b      	negs	r3, r3
 8000fe0:	449a      	add	sl, r3
 8000fe2:	4653      	mov	r3, sl
 8000fe4:	021b      	lsls	r3, r3, #8
 8000fe6:	d400      	bmi.n	8000fea <__aeabi_dadd+0x63a>
 8000fe8:	e607      	b.n	8000bfa <__aeabi_dadd+0x24a>
 8000fea:	4652      	mov	r2, sl
 8000fec:	4b1f      	ldr	r3, [pc, #124]	; (800106c <__aeabi_dadd+0x6bc>)
 8000fee:	2601      	movs	r6, #1
 8000ff0:	401a      	ands	r2, r3
 8000ff2:	4692      	mov	sl, r2
 8000ff4:	e601      	b.n	8000bfa <__aeabi_dadd+0x24a>
 8000ff6:	003c      	movs	r4, r7
 8000ff8:	000e      	movs	r6, r1
 8000ffa:	3c20      	subs	r4, #32
 8000ffc:	40e6      	lsrs	r6, r4
 8000ffe:	2f20      	cmp	r7, #32
 8001000:	d003      	beq.n	800100a <__aeabi_dadd+0x65a>
 8001002:	2440      	movs	r4, #64	; 0x40
 8001004:	1be4      	subs	r4, r4, r7
 8001006:	40a1      	lsls	r1, r4
 8001008:	430b      	orrs	r3, r1
 800100a:	001c      	movs	r4, r3
 800100c:	1e63      	subs	r3, r4, #1
 800100e:	419c      	sbcs	r4, r3
 8001010:	4334      	orrs	r4, r6
 8001012:	e65e      	b.n	8000cd2 <__aeabi_dadd+0x322>
 8001014:	4443      	add	r3, r8
 8001016:	4283      	cmp	r3, r0
 8001018:	4180      	sbcs	r0, r0
 800101a:	4449      	add	r1, r9
 800101c:	468a      	mov	sl, r1
 800101e:	4240      	negs	r0, r0
 8001020:	001c      	movs	r4, r3
 8001022:	4482      	add	sl, r0
 8001024:	e6bc      	b.n	8000da0 <__aeabi_dadd+0x3f0>
 8001026:	4653      	mov	r3, sl
 8001028:	4323      	orrs	r3, r4
 800102a:	d100      	bne.n	800102e <__aeabi_dadd+0x67e>
 800102c:	e6a9      	b.n	8000d82 <__aeabi_dadd+0x3d2>
 800102e:	e5e4      	b.n	8000bfa <__aeabi_dadd+0x24a>
 8001030:	074a      	lsls	r2, r1, #29
 8001032:	4313      	orrs	r3, r2
 8001034:	2280      	movs	r2, #128	; 0x80
 8001036:	08c9      	lsrs	r1, r1, #3
 8001038:	0312      	lsls	r2, r2, #12
 800103a:	4211      	tst	r1, r2
 800103c:	d009      	beq.n	8001052 <__aeabi_dadd+0x6a2>
 800103e:	4648      	mov	r0, r9
 8001040:	08c4      	lsrs	r4, r0, #3
 8001042:	4214      	tst	r4, r2
 8001044:	d105      	bne.n	8001052 <__aeabi_dadd+0x6a2>
 8001046:	4643      	mov	r3, r8
 8001048:	4665      	mov	r5, ip
 800104a:	0021      	movs	r1, r4
 800104c:	08db      	lsrs	r3, r3, #3
 800104e:	0742      	lsls	r2, r0, #29
 8001050:	4313      	orrs	r3, r2
 8001052:	0f5a      	lsrs	r2, r3, #29
 8001054:	00db      	lsls	r3, r3, #3
 8001056:	08db      	lsrs	r3, r3, #3
 8001058:	0752      	lsls	r2, r2, #29
 800105a:	4313      	orrs	r3, r2
 800105c:	e5fa      	b.n	8000c54 <__aeabi_dadd+0x2a4>
 800105e:	2300      	movs	r3, #0
 8001060:	4a01      	ldr	r2, [pc, #4]	; (8001068 <__aeabi_dadd+0x6b8>)
 8001062:	001c      	movs	r4, r3
 8001064:	e540      	b.n	8000ae8 <__aeabi_dadd+0x138>
 8001066:	46c0      	nop			; (mov r8, r8)
 8001068:	000007ff 	.word	0x000007ff
 800106c:	ff7fffff 	.word	0xff7fffff

08001070 <__aeabi_ddiv>:
 8001070:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001072:	4657      	mov	r7, sl
 8001074:	464e      	mov	r6, r9
 8001076:	4645      	mov	r5, r8
 8001078:	46de      	mov	lr, fp
 800107a:	b5e0      	push	{r5, r6, r7, lr}
 800107c:	030c      	lsls	r4, r1, #12
 800107e:	001f      	movs	r7, r3
 8001080:	004b      	lsls	r3, r1, #1
 8001082:	4681      	mov	r9, r0
 8001084:	4692      	mov	sl, r2
 8001086:	0005      	movs	r5, r0
 8001088:	b085      	sub	sp, #20
 800108a:	0b24      	lsrs	r4, r4, #12
 800108c:	0d5b      	lsrs	r3, r3, #21
 800108e:	0fce      	lsrs	r6, r1, #31
 8001090:	2b00      	cmp	r3, #0
 8001092:	d100      	bne.n	8001096 <__aeabi_ddiv+0x26>
 8001094:	e152      	b.n	800133c <__aeabi_ddiv+0x2cc>
 8001096:	4ad2      	ldr	r2, [pc, #840]	; (80013e0 <__aeabi_ddiv+0x370>)
 8001098:	4293      	cmp	r3, r2
 800109a:	d100      	bne.n	800109e <__aeabi_ddiv+0x2e>
 800109c:	e16e      	b.n	800137c <__aeabi_ddiv+0x30c>
 800109e:	0f42      	lsrs	r2, r0, #29
 80010a0:	00e4      	lsls	r4, r4, #3
 80010a2:	4314      	orrs	r4, r2
 80010a4:	2280      	movs	r2, #128	; 0x80
 80010a6:	0412      	lsls	r2, r2, #16
 80010a8:	4322      	orrs	r2, r4
 80010aa:	4690      	mov	r8, r2
 80010ac:	4acd      	ldr	r2, [pc, #820]	; (80013e4 <__aeabi_ddiv+0x374>)
 80010ae:	00c5      	lsls	r5, r0, #3
 80010b0:	4693      	mov	fp, r2
 80010b2:	449b      	add	fp, r3
 80010b4:	2300      	movs	r3, #0
 80010b6:	4699      	mov	r9, r3
 80010b8:	9300      	str	r3, [sp, #0]
 80010ba:	033c      	lsls	r4, r7, #12
 80010bc:	007b      	lsls	r3, r7, #1
 80010be:	4650      	mov	r0, sl
 80010c0:	0b24      	lsrs	r4, r4, #12
 80010c2:	0d5b      	lsrs	r3, r3, #21
 80010c4:	0fff      	lsrs	r7, r7, #31
 80010c6:	2b00      	cmp	r3, #0
 80010c8:	d100      	bne.n	80010cc <__aeabi_ddiv+0x5c>
 80010ca:	e11a      	b.n	8001302 <__aeabi_ddiv+0x292>
 80010cc:	4ac4      	ldr	r2, [pc, #784]	; (80013e0 <__aeabi_ddiv+0x370>)
 80010ce:	4293      	cmp	r3, r2
 80010d0:	d100      	bne.n	80010d4 <__aeabi_ddiv+0x64>
 80010d2:	e15e      	b.n	8001392 <__aeabi_ddiv+0x322>
 80010d4:	0f42      	lsrs	r2, r0, #29
 80010d6:	00e4      	lsls	r4, r4, #3
 80010d8:	4322      	orrs	r2, r4
 80010da:	2480      	movs	r4, #128	; 0x80
 80010dc:	0424      	lsls	r4, r4, #16
 80010de:	4314      	orrs	r4, r2
 80010e0:	4ac0      	ldr	r2, [pc, #768]	; (80013e4 <__aeabi_ddiv+0x374>)
 80010e2:	00c1      	lsls	r1, r0, #3
 80010e4:	4694      	mov	ip, r2
 80010e6:	465a      	mov	r2, fp
 80010e8:	4463      	add	r3, ip
 80010ea:	1ad3      	subs	r3, r2, r3
 80010ec:	469b      	mov	fp, r3
 80010ee:	2000      	movs	r0, #0
 80010f0:	0033      	movs	r3, r6
 80010f2:	407b      	eors	r3, r7
 80010f4:	469a      	mov	sl, r3
 80010f6:	464b      	mov	r3, r9
 80010f8:	2b0f      	cmp	r3, #15
 80010fa:	d827      	bhi.n	800114c <__aeabi_ddiv+0xdc>
 80010fc:	4aba      	ldr	r2, [pc, #744]	; (80013e8 <__aeabi_ddiv+0x378>)
 80010fe:	009b      	lsls	r3, r3, #2
 8001100:	58d3      	ldr	r3, [r2, r3]
 8001102:	469f      	mov	pc, r3
 8001104:	46b2      	mov	sl, r6
 8001106:	9b00      	ldr	r3, [sp, #0]
 8001108:	2b02      	cmp	r3, #2
 800110a:	d016      	beq.n	800113a <__aeabi_ddiv+0xca>
 800110c:	2b03      	cmp	r3, #3
 800110e:	d100      	bne.n	8001112 <__aeabi_ddiv+0xa2>
 8001110:	e287      	b.n	8001622 <__aeabi_ddiv+0x5b2>
 8001112:	2b01      	cmp	r3, #1
 8001114:	d000      	beq.n	8001118 <__aeabi_ddiv+0xa8>
 8001116:	e0d5      	b.n	80012c4 <__aeabi_ddiv+0x254>
 8001118:	2300      	movs	r3, #0
 800111a:	2200      	movs	r2, #0
 800111c:	2500      	movs	r5, #0
 800111e:	051b      	lsls	r3, r3, #20
 8001120:	4313      	orrs	r3, r2
 8001122:	4652      	mov	r2, sl
 8001124:	07d2      	lsls	r2, r2, #31
 8001126:	4313      	orrs	r3, r2
 8001128:	0028      	movs	r0, r5
 800112a:	0019      	movs	r1, r3
 800112c:	b005      	add	sp, #20
 800112e:	bcf0      	pop	{r4, r5, r6, r7}
 8001130:	46bb      	mov	fp, r7
 8001132:	46b2      	mov	sl, r6
 8001134:	46a9      	mov	r9, r5
 8001136:	46a0      	mov	r8, r4
 8001138:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800113a:	2200      	movs	r2, #0
 800113c:	2500      	movs	r5, #0
 800113e:	4ba8      	ldr	r3, [pc, #672]	; (80013e0 <__aeabi_ddiv+0x370>)
 8001140:	e7ed      	b.n	800111e <__aeabi_ddiv+0xae>
 8001142:	46ba      	mov	sl, r7
 8001144:	46a0      	mov	r8, r4
 8001146:	000d      	movs	r5, r1
 8001148:	9000      	str	r0, [sp, #0]
 800114a:	e7dc      	b.n	8001106 <__aeabi_ddiv+0x96>
 800114c:	4544      	cmp	r4, r8
 800114e:	d200      	bcs.n	8001152 <__aeabi_ddiv+0xe2>
 8001150:	e1c4      	b.n	80014dc <__aeabi_ddiv+0x46c>
 8001152:	d100      	bne.n	8001156 <__aeabi_ddiv+0xe6>
 8001154:	e1bf      	b.n	80014d6 <__aeabi_ddiv+0x466>
 8001156:	2301      	movs	r3, #1
 8001158:	425b      	negs	r3, r3
 800115a:	469c      	mov	ip, r3
 800115c:	002e      	movs	r6, r5
 800115e:	4640      	mov	r0, r8
 8001160:	2500      	movs	r5, #0
 8001162:	44e3      	add	fp, ip
 8001164:	0223      	lsls	r3, r4, #8
 8001166:	0e0c      	lsrs	r4, r1, #24
 8001168:	431c      	orrs	r4, r3
 800116a:	0c1b      	lsrs	r3, r3, #16
 800116c:	4699      	mov	r9, r3
 800116e:	0423      	lsls	r3, r4, #16
 8001170:	020a      	lsls	r2, r1, #8
 8001172:	0c1f      	lsrs	r7, r3, #16
 8001174:	4649      	mov	r1, r9
 8001176:	9200      	str	r2, [sp, #0]
 8001178:	9701      	str	r7, [sp, #4]
 800117a:	f7ff f865 	bl	8000248 <__aeabi_uidivmod>
 800117e:	0002      	movs	r2, r0
 8001180:	437a      	muls	r2, r7
 8001182:	040b      	lsls	r3, r1, #16
 8001184:	0c31      	lsrs	r1, r6, #16
 8001186:	4680      	mov	r8, r0
 8001188:	4319      	orrs	r1, r3
 800118a:	428a      	cmp	r2, r1
 800118c:	d907      	bls.n	800119e <__aeabi_ddiv+0x12e>
 800118e:	2301      	movs	r3, #1
 8001190:	425b      	negs	r3, r3
 8001192:	469c      	mov	ip, r3
 8001194:	1909      	adds	r1, r1, r4
 8001196:	44e0      	add	r8, ip
 8001198:	428c      	cmp	r4, r1
 800119a:	d800      	bhi.n	800119e <__aeabi_ddiv+0x12e>
 800119c:	e201      	b.n	80015a2 <__aeabi_ddiv+0x532>
 800119e:	1a88      	subs	r0, r1, r2
 80011a0:	4649      	mov	r1, r9
 80011a2:	f7ff f851 	bl	8000248 <__aeabi_uidivmod>
 80011a6:	9a01      	ldr	r2, [sp, #4]
 80011a8:	0436      	lsls	r6, r6, #16
 80011aa:	4342      	muls	r2, r0
 80011ac:	0409      	lsls	r1, r1, #16
 80011ae:	0c36      	lsrs	r6, r6, #16
 80011b0:	0003      	movs	r3, r0
 80011b2:	430e      	orrs	r6, r1
 80011b4:	42b2      	cmp	r2, r6
 80011b6:	d904      	bls.n	80011c2 <__aeabi_ddiv+0x152>
 80011b8:	1936      	adds	r6, r6, r4
 80011ba:	3b01      	subs	r3, #1
 80011bc:	42b4      	cmp	r4, r6
 80011be:	d800      	bhi.n	80011c2 <__aeabi_ddiv+0x152>
 80011c0:	e1e9      	b.n	8001596 <__aeabi_ddiv+0x526>
 80011c2:	1ab0      	subs	r0, r6, r2
 80011c4:	4642      	mov	r2, r8
 80011c6:	9e00      	ldr	r6, [sp, #0]
 80011c8:	0412      	lsls	r2, r2, #16
 80011ca:	431a      	orrs	r2, r3
 80011cc:	0c33      	lsrs	r3, r6, #16
 80011ce:	001f      	movs	r7, r3
 80011d0:	0c11      	lsrs	r1, r2, #16
 80011d2:	4690      	mov	r8, r2
 80011d4:	9302      	str	r3, [sp, #8]
 80011d6:	0413      	lsls	r3, r2, #16
 80011d8:	0432      	lsls	r2, r6, #16
 80011da:	0c16      	lsrs	r6, r2, #16
 80011dc:	0032      	movs	r2, r6
 80011de:	0c1b      	lsrs	r3, r3, #16
 80011e0:	435a      	muls	r2, r3
 80011e2:	9603      	str	r6, [sp, #12]
 80011e4:	437b      	muls	r3, r7
 80011e6:	434e      	muls	r6, r1
 80011e8:	4379      	muls	r1, r7
 80011ea:	0c17      	lsrs	r7, r2, #16
 80011ec:	46bc      	mov	ip, r7
 80011ee:	199b      	adds	r3, r3, r6
 80011f0:	4463      	add	r3, ip
 80011f2:	429e      	cmp	r6, r3
 80011f4:	d903      	bls.n	80011fe <__aeabi_ddiv+0x18e>
 80011f6:	2680      	movs	r6, #128	; 0x80
 80011f8:	0276      	lsls	r6, r6, #9
 80011fa:	46b4      	mov	ip, r6
 80011fc:	4461      	add	r1, ip
 80011fe:	0c1e      	lsrs	r6, r3, #16
 8001200:	1871      	adds	r1, r6, r1
 8001202:	0416      	lsls	r6, r2, #16
 8001204:	041b      	lsls	r3, r3, #16
 8001206:	0c36      	lsrs	r6, r6, #16
 8001208:	199e      	adds	r6, r3, r6
 800120a:	4288      	cmp	r0, r1
 800120c:	d302      	bcc.n	8001214 <__aeabi_ddiv+0x1a4>
 800120e:	d112      	bne.n	8001236 <__aeabi_ddiv+0x1c6>
 8001210:	42b5      	cmp	r5, r6
 8001212:	d210      	bcs.n	8001236 <__aeabi_ddiv+0x1c6>
 8001214:	4643      	mov	r3, r8
 8001216:	1e5a      	subs	r2, r3, #1
 8001218:	9b00      	ldr	r3, [sp, #0]
 800121a:	469c      	mov	ip, r3
 800121c:	4465      	add	r5, ip
 800121e:	001f      	movs	r7, r3
 8001220:	429d      	cmp	r5, r3
 8001222:	419b      	sbcs	r3, r3
 8001224:	425b      	negs	r3, r3
 8001226:	191b      	adds	r3, r3, r4
 8001228:	18c0      	adds	r0, r0, r3
 800122a:	4284      	cmp	r4, r0
 800122c:	d200      	bcs.n	8001230 <__aeabi_ddiv+0x1c0>
 800122e:	e19e      	b.n	800156e <__aeabi_ddiv+0x4fe>
 8001230:	d100      	bne.n	8001234 <__aeabi_ddiv+0x1c4>
 8001232:	e199      	b.n	8001568 <__aeabi_ddiv+0x4f8>
 8001234:	4690      	mov	r8, r2
 8001236:	1bae      	subs	r6, r5, r6
 8001238:	42b5      	cmp	r5, r6
 800123a:	41ad      	sbcs	r5, r5
 800123c:	1a40      	subs	r0, r0, r1
 800123e:	426d      	negs	r5, r5
 8001240:	1b40      	subs	r0, r0, r5
 8001242:	4284      	cmp	r4, r0
 8001244:	d100      	bne.n	8001248 <__aeabi_ddiv+0x1d8>
 8001246:	e1d2      	b.n	80015ee <__aeabi_ddiv+0x57e>
 8001248:	4649      	mov	r1, r9
 800124a:	f7fe fffd 	bl	8000248 <__aeabi_uidivmod>
 800124e:	9a01      	ldr	r2, [sp, #4]
 8001250:	040b      	lsls	r3, r1, #16
 8001252:	4342      	muls	r2, r0
 8001254:	0c31      	lsrs	r1, r6, #16
 8001256:	0005      	movs	r5, r0
 8001258:	4319      	orrs	r1, r3
 800125a:	428a      	cmp	r2, r1
 800125c:	d900      	bls.n	8001260 <__aeabi_ddiv+0x1f0>
 800125e:	e16c      	b.n	800153a <__aeabi_ddiv+0x4ca>
 8001260:	1a88      	subs	r0, r1, r2
 8001262:	4649      	mov	r1, r9
 8001264:	f7fe fff0 	bl	8000248 <__aeabi_uidivmod>
 8001268:	9a01      	ldr	r2, [sp, #4]
 800126a:	0436      	lsls	r6, r6, #16
 800126c:	4342      	muls	r2, r0
 800126e:	0409      	lsls	r1, r1, #16
 8001270:	0c36      	lsrs	r6, r6, #16
 8001272:	0003      	movs	r3, r0
 8001274:	430e      	orrs	r6, r1
 8001276:	42b2      	cmp	r2, r6
 8001278:	d900      	bls.n	800127c <__aeabi_ddiv+0x20c>
 800127a:	e153      	b.n	8001524 <__aeabi_ddiv+0x4b4>
 800127c:	9803      	ldr	r0, [sp, #12]
 800127e:	1ab6      	subs	r6, r6, r2
 8001280:	0002      	movs	r2, r0
 8001282:	042d      	lsls	r5, r5, #16
 8001284:	431d      	orrs	r5, r3
 8001286:	9f02      	ldr	r7, [sp, #8]
 8001288:	042b      	lsls	r3, r5, #16
 800128a:	0c1b      	lsrs	r3, r3, #16
 800128c:	435a      	muls	r2, r3
 800128e:	437b      	muls	r3, r7
 8001290:	469c      	mov	ip, r3
 8001292:	0c29      	lsrs	r1, r5, #16
 8001294:	4348      	muls	r0, r1
 8001296:	0c13      	lsrs	r3, r2, #16
 8001298:	4484      	add	ip, r0
 800129a:	4463      	add	r3, ip
 800129c:	4379      	muls	r1, r7
 800129e:	4298      	cmp	r0, r3
 80012a0:	d903      	bls.n	80012aa <__aeabi_ddiv+0x23a>
 80012a2:	2080      	movs	r0, #128	; 0x80
 80012a4:	0240      	lsls	r0, r0, #9
 80012a6:	4684      	mov	ip, r0
 80012a8:	4461      	add	r1, ip
 80012aa:	0c18      	lsrs	r0, r3, #16
 80012ac:	0412      	lsls	r2, r2, #16
 80012ae:	041b      	lsls	r3, r3, #16
 80012b0:	0c12      	lsrs	r2, r2, #16
 80012b2:	1840      	adds	r0, r0, r1
 80012b4:	189b      	adds	r3, r3, r2
 80012b6:	4286      	cmp	r6, r0
 80012b8:	d200      	bcs.n	80012bc <__aeabi_ddiv+0x24c>
 80012ba:	e100      	b.n	80014be <__aeabi_ddiv+0x44e>
 80012bc:	d100      	bne.n	80012c0 <__aeabi_ddiv+0x250>
 80012be:	e0fb      	b.n	80014b8 <__aeabi_ddiv+0x448>
 80012c0:	2301      	movs	r3, #1
 80012c2:	431d      	orrs	r5, r3
 80012c4:	4b49      	ldr	r3, [pc, #292]	; (80013ec <__aeabi_ddiv+0x37c>)
 80012c6:	445b      	add	r3, fp
 80012c8:	2b00      	cmp	r3, #0
 80012ca:	dc00      	bgt.n	80012ce <__aeabi_ddiv+0x25e>
 80012cc:	e0aa      	b.n	8001424 <__aeabi_ddiv+0x3b4>
 80012ce:	076a      	lsls	r2, r5, #29
 80012d0:	d000      	beq.n	80012d4 <__aeabi_ddiv+0x264>
 80012d2:	e13d      	b.n	8001550 <__aeabi_ddiv+0x4e0>
 80012d4:	08e9      	lsrs	r1, r5, #3
 80012d6:	4642      	mov	r2, r8
 80012d8:	01d2      	lsls	r2, r2, #7
 80012da:	d506      	bpl.n	80012ea <__aeabi_ddiv+0x27a>
 80012dc:	4642      	mov	r2, r8
 80012de:	4b44      	ldr	r3, [pc, #272]	; (80013f0 <__aeabi_ddiv+0x380>)
 80012e0:	401a      	ands	r2, r3
 80012e2:	2380      	movs	r3, #128	; 0x80
 80012e4:	4690      	mov	r8, r2
 80012e6:	00db      	lsls	r3, r3, #3
 80012e8:	445b      	add	r3, fp
 80012ea:	4a42      	ldr	r2, [pc, #264]	; (80013f4 <__aeabi_ddiv+0x384>)
 80012ec:	4293      	cmp	r3, r2
 80012ee:	dd00      	ble.n	80012f2 <__aeabi_ddiv+0x282>
 80012f0:	e723      	b.n	800113a <__aeabi_ddiv+0xca>
 80012f2:	4642      	mov	r2, r8
 80012f4:	055b      	lsls	r3, r3, #21
 80012f6:	0755      	lsls	r5, r2, #29
 80012f8:	0252      	lsls	r2, r2, #9
 80012fa:	430d      	orrs	r5, r1
 80012fc:	0b12      	lsrs	r2, r2, #12
 80012fe:	0d5b      	lsrs	r3, r3, #21
 8001300:	e70d      	b.n	800111e <__aeabi_ddiv+0xae>
 8001302:	4651      	mov	r1, sl
 8001304:	4321      	orrs	r1, r4
 8001306:	d100      	bne.n	800130a <__aeabi_ddiv+0x29a>
 8001308:	e07c      	b.n	8001404 <__aeabi_ddiv+0x394>
 800130a:	2c00      	cmp	r4, #0
 800130c:	d100      	bne.n	8001310 <__aeabi_ddiv+0x2a0>
 800130e:	e0fb      	b.n	8001508 <__aeabi_ddiv+0x498>
 8001310:	0020      	movs	r0, r4
 8001312:	f001 fa63 	bl	80027dc <__clzsi2>
 8001316:	0002      	movs	r2, r0
 8001318:	3a0b      	subs	r2, #11
 800131a:	231d      	movs	r3, #29
 800131c:	1a9b      	subs	r3, r3, r2
 800131e:	4652      	mov	r2, sl
 8001320:	0001      	movs	r1, r0
 8001322:	40da      	lsrs	r2, r3
 8001324:	4653      	mov	r3, sl
 8001326:	3908      	subs	r1, #8
 8001328:	408b      	lsls	r3, r1
 800132a:	408c      	lsls	r4, r1
 800132c:	0019      	movs	r1, r3
 800132e:	4314      	orrs	r4, r2
 8001330:	4b31      	ldr	r3, [pc, #196]	; (80013f8 <__aeabi_ddiv+0x388>)
 8001332:	4458      	add	r0, fp
 8001334:	469b      	mov	fp, r3
 8001336:	4483      	add	fp, r0
 8001338:	2000      	movs	r0, #0
 800133a:	e6d9      	b.n	80010f0 <__aeabi_ddiv+0x80>
 800133c:	0003      	movs	r3, r0
 800133e:	4323      	orrs	r3, r4
 8001340:	4698      	mov	r8, r3
 8001342:	d044      	beq.n	80013ce <__aeabi_ddiv+0x35e>
 8001344:	2c00      	cmp	r4, #0
 8001346:	d100      	bne.n	800134a <__aeabi_ddiv+0x2da>
 8001348:	e0cf      	b.n	80014ea <__aeabi_ddiv+0x47a>
 800134a:	0020      	movs	r0, r4
 800134c:	f001 fa46 	bl	80027dc <__clzsi2>
 8001350:	0001      	movs	r1, r0
 8001352:	0002      	movs	r2, r0
 8001354:	390b      	subs	r1, #11
 8001356:	231d      	movs	r3, #29
 8001358:	1a5b      	subs	r3, r3, r1
 800135a:	4649      	mov	r1, r9
 800135c:	0010      	movs	r0, r2
 800135e:	40d9      	lsrs	r1, r3
 8001360:	3808      	subs	r0, #8
 8001362:	4084      	lsls	r4, r0
 8001364:	000b      	movs	r3, r1
 8001366:	464d      	mov	r5, r9
 8001368:	4323      	orrs	r3, r4
 800136a:	4698      	mov	r8, r3
 800136c:	4085      	lsls	r5, r0
 800136e:	4b23      	ldr	r3, [pc, #140]	; (80013fc <__aeabi_ddiv+0x38c>)
 8001370:	1a9b      	subs	r3, r3, r2
 8001372:	469b      	mov	fp, r3
 8001374:	2300      	movs	r3, #0
 8001376:	4699      	mov	r9, r3
 8001378:	9300      	str	r3, [sp, #0]
 800137a:	e69e      	b.n	80010ba <__aeabi_ddiv+0x4a>
 800137c:	0002      	movs	r2, r0
 800137e:	4322      	orrs	r2, r4
 8001380:	4690      	mov	r8, r2
 8001382:	d11d      	bne.n	80013c0 <__aeabi_ddiv+0x350>
 8001384:	2208      	movs	r2, #8
 8001386:	469b      	mov	fp, r3
 8001388:	2302      	movs	r3, #2
 800138a:	2500      	movs	r5, #0
 800138c:	4691      	mov	r9, r2
 800138e:	9300      	str	r3, [sp, #0]
 8001390:	e693      	b.n	80010ba <__aeabi_ddiv+0x4a>
 8001392:	4651      	mov	r1, sl
 8001394:	4321      	orrs	r1, r4
 8001396:	d109      	bne.n	80013ac <__aeabi_ddiv+0x33c>
 8001398:	2302      	movs	r3, #2
 800139a:	464a      	mov	r2, r9
 800139c:	431a      	orrs	r2, r3
 800139e:	4b18      	ldr	r3, [pc, #96]	; (8001400 <__aeabi_ddiv+0x390>)
 80013a0:	4691      	mov	r9, r2
 80013a2:	469c      	mov	ip, r3
 80013a4:	2400      	movs	r4, #0
 80013a6:	2002      	movs	r0, #2
 80013a8:	44e3      	add	fp, ip
 80013aa:	e6a1      	b.n	80010f0 <__aeabi_ddiv+0x80>
 80013ac:	2303      	movs	r3, #3
 80013ae:	464a      	mov	r2, r9
 80013b0:	431a      	orrs	r2, r3
 80013b2:	4b13      	ldr	r3, [pc, #76]	; (8001400 <__aeabi_ddiv+0x390>)
 80013b4:	4691      	mov	r9, r2
 80013b6:	469c      	mov	ip, r3
 80013b8:	4651      	mov	r1, sl
 80013ba:	2003      	movs	r0, #3
 80013bc:	44e3      	add	fp, ip
 80013be:	e697      	b.n	80010f0 <__aeabi_ddiv+0x80>
 80013c0:	220c      	movs	r2, #12
 80013c2:	469b      	mov	fp, r3
 80013c4:	2303      	movs	r3, #3
 80013c6:	46a0      	mov	r8, r4
 80013c8:	4691      	mov	r9, r2
 80013ca:	9300      	str	r3, [sp, #0]
 80013cc:	e675      	b.n	80010ba <__aeabi_ddiv+0x4a>
 80013ce:	2304      	movs	r3, #4
 80013d0:	4699      	mov	r9, r3
 80013d2:	2300      	movs	r3, #0
 80013d4:	469b      	mov	fp, r3
 80013d6:	3301      	adds	r3, #1
 80013d8:	2500      	movs	r5, #0
 80013da:	9300      	str	r3, [sp, #0]
 80013dc:	e66d      	b.n	80010ba <__aeabi_ddiv+0x4a>
 80013de:	46c0      	nop			; (mov r8, r8)
 80013e0:	000007ff 	.word	0x000007ff
 80013e4:	fffffc01 	.word	0xfffffc01
 80013e8:	0800f7f0 	.word	0x0800f7f0
 80013ec:	000003ff 	.word	0x000003ff
 80013f0:	feffffff 	.word	0xfeffffff
 80013f4:	000007fe 	.word	0x000007fe
 80013f8:	000003f3 	.word	0x000003f3
 80013fc:	fffffc0d 	.word	0xfffffc0d
 8001400:	fffff801 	.word	0xfffff801
 8001404:	464a      	mov	r2, r9
 8001406:	2301      	movs	r3, #1
 8001408:	431a      	orrs	r2, r3
 800140a:	4691      	mov	r9, r2
 800140c:	2400      	movs	r4, #0
 800140e:	2001      	movs	r0, #1
 8001410:	e66e      	b.n	80010f0 <__aeabi_ddiv+0x80>
 8001412:	2300      	movs	r3, #0
 8001414:	2280      	movs	r2, #128	; 0x80
 8001416:	469a      	mov	sl, r3
 8001418:	2500      	movs	r5, #0
 800141a:	4b88      	ldr	r3, [pc, #544]	; (800163c <__aeabi_ddiv+0x5cc>)
 800141c:	0312      	lsls	r2, r2, #12
 800141e:	e67e      	b.n	800111e <__aeabi_ddiv+0xae>
 8001420:	2501      	movs	r5, #1
 8001422:	426d      	negs	r5, r5
 8001424:	2201      	movs	r2, #1
 8001426:	1ad2      	subs	r2, r2, r3
 8001428:	2a38      	cmp	r2, #56	; 0x38
 800142a:	dd00      	ble.n	800142e <__aeabi_ddiv+0x3be>
 800142c:	e674      	b.n	8001118 <__aeabi_ddiv+0xa8>
 800142e:	2a1f      	cmp	r2, #31
 8001430:	dc00      	bgt.n	8001434 <__aeabi_ddiv+0x3c4>
 8001432:	e0bd      	b.n	80015b0 <__aeabi_ddiv+0x540>
 8001434:	211f      	movs	r1, #31
 8001436:	4249      	negs	r1, r1
 8001438:	1acb      	subs	r3, r1, r3
 800143a:	4641      	mov	r1, r8
 800143c:	40d9      	lsrs	r1, r3
 800143e:	000b      	movs	r3, r1
 8001440:	2a20      	cmp	r2, #32
 8001442:	d004      	beq.n	800144e <__aeabi_ddiv+0x3de>
 8001444:	4641      	mov	r1, r8
 8001446:	4a7e      	ldr	r2, [pc, #504]	; (8001640 <__aeabi_ddiv+0x5d0>)
 8001448:	445a      	add	r2, fp
 800144a:	4091      	lsls	r1, r2
 800144c:	430d      	orrs	r5, r1
 800144e:	0029      	movs	r1, r5
 8001450:	1e4a      	subs	r2, r1, #1
 8001452:	4191      	sbcs	r1, r2
 8001454:	4319      	orrs	r1, r3
 8001456:	2307      	movs	r3, #7
 8001458:	001d      	movs	r5, r3
 800145a:	2200      	movs	r2, #0
 800145c:	400d      	ands	r5, r1
 800145e:	420b      	tst	r3, r1
 8001460:	d100      	bne.n	8001464 <__aeabi_ddiv+0x3f4>
 8001462:	e0d0      	b.n	8001606 <__aeabi_ddiv+0x596>
 8001464:	220f      	movs	r2, #15
 8001466:	2300      	movs	r3, #0
 8001468:	400a      	ands	r2, r1
 800146a:	2a04      	cmp	r2, #4
 800146c:	d100      	bne.n	8001470 <__aeabi_ddiv+0x400>
 800146e:	e0c7      	b.n	8001600 <__aeabi_ddiv+0x590>
 8001470:	1d0a      	adds	r2, r1, #4
 8001472:	428a      	cmp	r2, r1
 8001474:	4189      	sbcs	r1, r1
 8001476:	4249      	negs	r1, r1
 8001478:	185b      	adds	r3, r3, r1
 800147a:	0011      	movs	r1, r2
 800147c:	021a      	lsls	r2, r3, #8
 800147e:	d400      	bmi.n	8001482 <__aeabi_ddiv+0x412>
 8001480:	e0be      	b.n	8001600 <__aeabi_ddiv+0x590>
 8001482:	2301      	movs	r3, #1
 8001484:	2200      	movs	r2, #0
 8001486:	2500      	movs	r5, #0
 8001488:	e649      	b.n	800111e <__aeabi_ddiv+0xae>
 800148a:	2280      	movs	r2, #128	; 0x80
 800148c:	4643      	mov	r3, r8
 800148e:	0312      	lsls	r2, r2, #12
 8001490:	4213      	tst	r3, r2
 8001492:	d008      	beq.n	80014a6 <__aeabi_ddiv+0x436>
 8001494:	4214      	tst	r4, r2
 8001496:	d106      	bne.n	80014a6 <__aeabi_ddiv+0x436>
 8001498:	4322      	orrs	r2, r4
 800149a:	0312      	lsls	r2, r2, #12
 800149c:	46ba      	mov	sl, r7
 800149e:	000d      	movs	r5, r1
 80014a0:	4b66      	ldr	r3, [pc, #408]	; (800163c <__aeabi_ddiv+0x5cc>)
 80014a2:	0b12      	lsrs	r2, r2, #12
 80014a4:	e63b      	b.n	800111e <__aeabi_ddiv+0xae>
 80014a6:	2280      	movs	r2, #128	; 0x80
 80014a8:	4643      	mov	r3, r8
 80014aa:	0312      	lsls	r2, r2, #12
 80014ac:	431a      	orrs	r2, r3
 80014ae:	0312      	lsls	r2, r2, #12
 80014b0:	46b2      	mov	sl, r6
 80014b2:	4b62      	ldr	r3, [pc, #392]	; (800163c <__aeabi_ddiv+0x5cc>)
 80014b4:	0b12      	lsrs	r2, r2, #12
 80014b6:	e632      	b.n	800111e <__aeabi_ddiv+0xae>
 80014b8:	2b00      	cmp	r3, #0
 80014ba:	d100      	bne.n	80014be <__aeabi_ddiv+0x44e>
 80014bc:	e702      	b.n	80012c4 <__aeabi_ddiv+0x254>
 80014be:	19a6      	adds	r6, r4, r6
 80014c0:	1e6a      	subs	r2, r5, #1
 80014c2:	42a6      	cmp	r6, r4
 80014c4:	d200      	bcs.n	80014c8 <__aeabi_ddiv+0x458>
 80014c6:	e089      	b.n	80015dc <__aeabi_ddiv+0x56c>
 80014c8:	4286      	cmp	r6, r0
 80014ca:	d200      	bcs.n	80014ce <__aeabi_ddiv+0x45e>
 80014cc:	e09f      	b.n	800160e <__aeabi_ddiv+0x59e>
 80014ce:	d100      	bne.n	80014d2 <__aeabi_ddiv+0x462>
 80014d0:	e0af      	b.n	8001632 <__aeabi_ddiv+0x5c2>
 80014d2:	0015      	movs	r5, r2
 80014d4:	e6f4      	b.n	80012c0 <__aeabi_ddiv+0x250>
 80014d6:	42a9      	cmp	r1, r5
 80014d8:	d900      	bls.n	80014dc <__aeabi_ddiv+0x46c>
 80014da:	e63c      	b.n	8001156 <__aeabi_ddiv+0xe6>
 80014dc:	4643      	mov	r3, r8
 80014de:	07de      	lsls	r6, r3, #31
 80014e0:	0858      	lsrs	r0, r3, #1
 80014e2:	086b      	lsrs	r3, r5, #1
 80014e4:	431e      	orrs	r6, r3
 80014e6:	07ed      	lsls	r5, r5, #31
 80014e8:	e63c      	b.n	8001164 <__aeabi_ddiv+0xf4>
 80014ea:	f001 f977 	bl	80027dc <__clzsi2>
 80014ee:	0001      	movs	r1, r0
 80014f0:	0002      	movs	r2, r0
 80014f2:	3115      	adds	r1, #21
 80014f4:	3220      	adds	r2, #32
 80014f6:	291c      	cmp	r1, #28
 80014f8:	dc00      	bgt.n	80014fc <__aeabi_ddiv+0x48c>
 80014fa:	e72c      	b.n	8001356 <__aeabi_ddiv+0x2e6>
 80014fc:	464b      	mov	r3, r9
 80014fe:	3808      	subs	r0, #8
 8001500:	4083      	lsls	r3, r0
 8001502:	2500      	movs	r5, #0
 8001504:	4698      	mov	r8, r3
 8001506:	e732      	b.n	800136e <__aeabi_ddiv+0x2fe>
 8001508:	f001 f968 	bl	80027dc <__clzsi2>
 800150c:	0003      	movs	r3, r0
 800150e:	001a      	movs	r2, r3
 8001510:	3215      	adds	r2, #21
 8001512:	3020      	adds	r0, #32
 8001514:	2a1c      	cmp	r2, #28
 8001516:	dc00      	bgt.n	800151a <__aeabi_ddiv+0x4aa>
 8001518:	e6ff      	b.n	800131a <__aeabi_ddiv+0x2aa>
 800151a:	4654      	mov	r4, sl
 800151c:	3b08      	subs	r3, #8
 800151e:	2100      	movs	r1, #0
 8001520:	409c      	lsls	r4, r3
 8001522:	e705      	b.n	8001330 <__aeabi_ddiv+0x2c0>
 8001524:	1936      	adds	r6, r6, r4
 8001526:	3b01      	subs	r3, #1
 8001528:	42b4      	cmp	r4, r6
 800152a:	d900      	bls.n	800152e <__aeabi_ddiv+0x4be>
 800152c:	e6a6      	b.n	800127c <__aeabi_ddiv+0x20c>
 800152e:	42b2      	cmp	r2, r6
 8001530:	d800      	bhi.n	8001534 <__aeabi_ddiv+0x4c4>
 8001532:	e6a3      	b.n	800127c <__aeabi_ddiv+0x20c>
 8001534:	1e83      	subs	r3, r0, #2
 8001536:	1936      	adds	r6, r6, r4
 8001538:	e6a0      	b.n	800127c <__aeabi_ddiv+0x20c>
 800153a:	1909      	adds	r1, r1, r4
 800153c:	3d01      	subs	r5, #1
 800153e:	428c      	cmp	r4, r1
 8001540:	d900      	bls.n	8001544 <__aeabi_ddiv+0x4d4>
 8001542:	e68d      	b.n	8001260 <__aeabi_ddiv+0x1f0>
 8001544:	428a      	cmp	r2, r1
 8001546:	d800      	bhi.n	800154a <__aeabi_ddiv+0x4da>
 8001548:	e68a      	b.n	8001260 <__aeabi_ddiv+0x1f0>
 800154a:	1e85      	subs	r5, r0, #2
 800154c:	1909      	adds	r1, r1, r4
 800154e:	e687      	b.n	8001260 <__aeabi_ddiv+0x1f0>
 8001550:	220f      	movs	r2, #15
 8001552:	402a      	ands	r2, r5
 8001554:	2a04      	cmp	r2, #4
 8001556:	d100      	bne.n	800155a <__aeabi_ddiv+0x4ea>
 8001558:	e6bc      	b.n	80012d4 <__aeabi_ddiv+0x264>
 800155a:	1d29      	adds	r1, r5, #4
 800155c:	42a9      	cmp	r1, r5
 800155e:	41ad      	sbcs	r5, r5
 8001560:	426d      	negs	r5, r5
 8001562:	08c9      	lsrs	r1, r1, #3
 8001564:	44a8      	add	r8, r5
 8001566:	e6b6      	b.n	80012d6 <__aeabi_ddiv+0x266>
 8001568:	42af      	cmp	r7, r5
 800156a:	d900      	bls.n	800156e <__aeabi_ddiv+0x4fe>
 800156c:	e662      	b.n	8001234 <__aeabi_ddiv+0x1c4>
 800156e:	4281      	cmp	r1, r0
 8001570:	d804      	bhi.n	800157c <__aeabi_ddiv+0x50c>
 8001572:	d000      	beq.n	8001576 <__aeabi_ddiv+0x506>
 8001574:	e65e      	b.n	8001234 <__aeabi_ddiv+0x1c4>
 8001576:	42ae      	cmp	r6, r5
 8001578:	d800      	bhi.n	800157c <__aeabi_ddiv+0x50c>
 800157a:	e65b      	b.n	8001234 <__aeabi_ddiv+0x1c4>
 800157c:	2302      	movs	r3, #2
 800157e:	425b      	negs	r3, r3
 8001580:	469c      	mov	ip, r3
 8001582:	9b00      	ldr	r3, [sp, #0]
 8001584:	44e0      	add	r8, ip
 8001586:	469c      	mov	ip, r3
 8001588:	4465      	add	r5, ip
 800158a:	429d      	cmp	r5, r3
 800158c:	419b      	sbcs	r3, r3
 800158e:	425b      	negs	r3, r3
 8001590:	191b      	adds	r3, r3, r4
 8001592:	18c0      	adds	r0, r0, r3
 8001594:	e64f      	b.n	8001236 <__aeabi_ddiv+0x1c6>
 8001596:	42b2      	cmp	r2, r6
 8001598:	d800      	bhi.n	800159c <__aeabi_ddiv+0x52c>
 800159a:	e612      	b.n	80011c2 <__aeabi_ddiv+0x152>
 800159c:	1e83      	subs	r3, r0, #2
 800159e:	1936      	adds	r6, r6, r4
 80015a0:	e60f      	b.n	80011c2 <__aeabi_ddiv+0x152>
 80015a2:	428a      	cmp	r2, r1
 80015a4:	d800      	bhi.n	80015a8 <__aeabi_ddiv+0x538>
 80015a6:	e5fa      	b.n	800119e <__aeabi_ddiv+0x12e>
 80015a8:	1e83      	subs	r3, r0, #2
 80015aa:	4698      	mov	r8, r3
 80015ac:	1909      	adds	r1, r1, r4
 80015ae:	e5f6      	b.n	800119e <__aeabi_ddiv+0x12e>
 80015b0:	4b24      	ldr	r3, [pc, #144]	; (8001644 <__aeabi_ddiv+0x5d4>)
 80015b2:	0028      	movs	r0, r5
 80015b4:	445b      	add	r3, fp
 80015b6:	4641      	mov	r1, r8
 80015b8:	409d      	lsls	r5, r3
 80015ba:	4099      	lsls	r1, r3
 80015bc:	40d0      	lsrs	r0, r2
 80015be:	1e6b      	subs	r3, r5, #1
 80015c0:	419d      	sbcs	r5, r3
 80015c2:	4643      	mov	r3, r8
 80015c4:	4301      	orrs	r1, r0
 80015c6:	4329      	orrs	r1, r5
 80015c8:	40d3      	lsrs	r3, r2
 80015ca:	074a      	lsls	r2, r1, #29
 80015cc:	d100      	bne.n	80015d0 <__aeabi_ddiv+0x560>
 80015ce:	e755      	b.n	800147c <__aeabi_ddiv+0x40c>
 80015d0:	220f      	movs	r2, #15
 80015d2:	400a      	ands	r2, r1
 80015d4:	2a04      	cmp	r2, #4
 80015d6:	d000      	beq.n	80015da <__aeabi_ddiv+0x56a>
 80015d8:	e74a      	b.n	8001470 <__aeabi_ddiv+0x400>
 80015da:	e74f      	b.n	800147c <__aeabi_ddiv+0x40c>
 80015dc:	0015      	movs	r5, r2
 80015de:	4286      	cmp	r6, r0
 80015e0:	d000      	beq.n	80015e4 <__aeabi_ddiv+0x574>
 80015e2:	e66d      	b.n	80012c0 <__aeabi_ddiv+0x250>
 80015e4:	9a00      	ldr	r2, [sp, #0]
 80015e6:	429a      	cmp	r2, r3
 80015e8:	d000      	beq.n	80015ec <__aeabi_ddiv+0x57c>
 80015ea:	e669      	b.n	80012c0 <__aeabi_ddiv+0x250>
 80015ec:	e66a      	b.n	80012c4 <__aeabi_ddiv+0x254>
 80015ee:	4b16      	ldr	r3, [pc, #88]	; (8001648 <__aeabi_ddiv+0x5d8>)
 80015f0:	445b      	add	r3, fp
 80015f2:	2b00      	cmp	r3, #0
 80015f4:	dc00      	bgt.n	80015f8 <__aeabi_ddiv+0x588>
 80015f6:	e713      	b.n	8001420 <__aeabi_ddiv+0x3b0>
 80015f8:	2501      	movs	r5, #1
 80015fa:	2100      	movs	r1, #0
 80015fc:	44a8      	add	r8, r5
 80015fe:	e66a      	b.n	80012d6 <__aeabi_ddiv+0x266>
 8001600:	075d      	lsls	r5, r3, #29
 8001602:	025b      	lsls	r3, r3, #9
 8001604:	0b1a      	lsrs	r2, r3, #12
 8001606:	08c9      	lsrs	r1, r1, #3
 8001608:	2300      	movs	r3, #0
 800160a:	430d      	orrs	r5, r1
 800160c:	e587      	b.n	800111e <__aeabi_ddiv+0xae>
 800160e:	9900      	ldr	r1, [sp, #0]
 8001610:	3d02      	subs	r5, #2
 8001612:	004a      	lsls	r2, r1, #1
 8001614:	428a      	cmp	r2, r1
 8001616:	41bf      	sbcs	r7, r7
 8001618:	427f      	negs	r7, r7
 800161a:	193f      	adds	r7, r7, r4
 800161c:	19f6      	adds	r6, r6, r7
 800161e:	9200      	str	r2, [sp, #0]
 8001620:	e7dd      	b.n	80015de <__aeabi_ddiv+0x56e>
 8001622:	2280      	movs	r2, #128	; 0x80
 8001624:	4643      	mov	r3, r8
 8001626:	0312      	lsls	r2, r2, #12
 8001628:	431a      	orrs	r2, r3
 800162a:	0312      	lsls	r2, r2, #12
 800162c:	4b03      	ldr	r3, [pc, #12]	; (800163c <__aeabi_ddiv+0x5cc>)
 800162e:	0b12      	lsrs	r2, r2, #12
 8001630:	e575      	b.n	800111e <__aeabi_ddiv+0xae>
 8001632:	9900      	ldr	r1, [sp, #0]
 8001634:	4299      	cmp	r1, r3
 8001636:	d3ea      	bcc.n	800160e <__aeabi_ddiv+0x59e>
 8001638:	0015      	movs	r5, r2
 800163a:	e7d3      	b.n	80015e4 <__aeabi_ddiv+0x574>
 800163c:	000007ff 	.word	0x000007ff
 8001640:	0000043e 	.word	0x0000043e
 8001644:	0000041e 	.word	0x0000041e
 8001648:	000003ff 	.word	0x000003ff

0800164c <__eqdf2>:
 800164c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800164e:	464e      	mov	r6, r9
 8001650:	4645      	mov	r5, r8
 8001652:	46de      	mov	lr, fp
 8001654:	4657      	mov	r7, sl
 8001656:	4690      	mov	r8, r2
 8001658:	b5e0      	push	{r5, r6, r7, lr}
 800165a:	0017      	movs	r7, r2
 800165c:	031a      	lsls	r2, r3, #12
 800165e:	0b12      	lsrs	r2, r2, #12
 8001660:	0005      	movs	r5, r0
 8001662:	4684      	mov	ip, r0
 8001664:	4819      	ldr	r0, [pc, #100]	; (80016cc <__eqdf2+0x80>)
 8001666:	030e      	lsls	r6, r1, #12
 8001668:	004c      	lsls	r4, r1, #1
 800166a:	4691      	mov	r9, r2
 800166c:	005a      	lsls	r2, r3, #1
 800166e:	0fdb      	lsrs	r3, r3, #31
 8001670:	469b      	mov	fp, r3
 8001672:	0b36      	lsrs	r6, r6, #12
 8001674:	0d64      	lsrs	r4, r4, #21
 8001676:	0fc9      	lsrs	r1, r1, #31
 8001678:	0d52      	lsrs	r2, r2, #21
 800167a:	4284      	cmp	r4, r0
 800167c:	d019      	beq.n	80016b2 <__eqdf2+0x66>
 800167e:	4282      	cmp	r2, r0
 8001680:	d010      	beq.n	80016a4 <__eqdf2+0x58>
 8001682:	2001      	movs	r0, #1
 8001684:	4294      	cmp	r4, r2
 8001686:	d10e      	bne.n	80016a6 <__eqdf2+0x5a>
 8001688:	454e      	cmp	r6, r9
 800168a:	d10c      	bne.n	80016a6 <__eqdf2+0x5a>
 800168c:	2001      	movs	r0, #1
 800168e:	45c4      	cmp	ip, r8
 8001690:	d109      	bne.n	80016a6 <__eqdf2+0x5a>
 8001692:	4559      	cmp	r1, fp
 8001694:	d017      	beq.n	80016c6 <__eqdf2+0x7a>
 8001696:	2c00      	cmp	r4, #0
 8001698:	d105      	bne.n	80016a6 <__eqdf2+0x5a>
 800169a:	0030      	movs	r0, r6
 800169c:	4328      	orrs	r0, r5
 800169e:	1e43      	subs	r3, r0, #1
 80016a0:	4198      	sbcs	r0, r3
 80016a2:	e000      	b.n	80016a6 <__eqdf2+0x5a>
 80016a4:	2001      	movs	r0, #1
 80016a6:	bcf0      	pop	{r4, r5, r6, r7}
 80016a8:	46bb      	mov	fp, r7
 80016aa:	46b2      	mov	sl, r6
 80016ac:	46a9      	mov	r9, r5
 80016ae:	46a0      	mov	r8, r4
 80016b0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80016b2:	0033      	movs	r3, r6
 80016b4:	2001      	movs	r0, #1
 80016b6:	432b      	orrs	r3, r5
 80016b8:	d1f5      	bne.n	80016a6 <__eqdf2+0x5a>
 80016ba:	42a2      	cmp	r2, r4
 80016bc:	d1f3      	bne.n	80016a6 <__eqdf2+0x5a>
 80016be:	464b      	mov	r3, r9
 80016c0:	433b      	orrs	r3, r7
 80016c2:	d1f0      	bne.n	80016a6 <__eqdf2+0x5a>
 80016c4:	e7e2      	b.n	800168c <__eqdf2+0x40>
 80016c6:	2000      	movs	r0, #0
 80016c8:	e7ed      	b.n	80016a6 <__eqdf2+0x5a>
 80016ca:	46c0      	nop			; (mov r8, r8)
 80016cc:	000007ff 	.word	0x000007ff

080016d0 <__gedf2>:
 80016d0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80016d2:	4647      	mov	r7, r8
 80016d4:	46ce      	mov	lr, r9
 80016d6:	0004      	movs	r4, r0
 80016d8:	0018      	movs	r0, r3
 80016da:	0016      	movs	r6, r2
 80016dc:	031b      	lsls	r3, r3, #12
 80016de:	0b1b      	lsrs	r3, r3, #12
 80016e0:	4d2d      	ldr	r5, [pc, #180]	; (8001798 <__gedf2+0xc8>)
 80016e2:	004a      	lsls	r2, r1, #1
 80016e4:	4699      	mov	r9, r3
 80016e6:	b580      	push	{r7, lr}
 80016e8:	0043      	lsls	r3, r0, #1
 80016ea:	030f      	lsls	r7, r1, #12
 80016ec:	46a4      	mov	ip, r4
 80016ee:	46b0      	mov	r8, r6
 80016f0:	0b3f      	lsrs	r7, r7, #12
 80016f2:	0d52      	lsrs	r2, r2, #21
 80016f4:	0fc9      	lsrs	r1, r1, #31
 80016f6:	0d5b      	lsrs	r3, r3, #21
 80016f8:	0fc0      	lsrs	r0, r0, #31
 80016fa:	42aa      	cmp	r2, r5
 80016fc:	d021      	beq.n	8001742 <__gedf2+0x72>
 80016fe:	42ab      	cmp	r3, r5
 8001700:	d013      	beq.n	800172a <__gedf2+0x5a>
 8001702:	2a00      	cmp	r2, #0
 8001704:	d122      	bne.n	800174c <__gedf2+0x7c>
 8001706:	433c      	orrs	r4, r7
 8001708:	2b00      	cmp	r3, #0
 800170a:	d102      	bne.n	8001712 <__gedf2+0x42>
 800170c:	464d      	mov	r5, r9
 800170e:	432e      	orrs	r6, r5
 8001710:	d022      	beq.n	8001758 <__gedf2+0x88>
 8001712:	2c00      	cmp	r4, #0
 8001714:	d010      	beq.n	8001738 <__gedf2+0x68>
 8001716:	4281      	cmp	r1, r0
 8001718:	d022      	beq.n	8001760 <__gedf2+0x90>
 800171a:	2002      	movs	r0, #2
 800171c:	3901      	subs	r1, #1
 800171e:	4008      	ands	r0, r1
 8001720:	3801      	subs	r0, #1
 8001722:	bcc0      	pop	{r6, r7}
 8001724:	46b9      	mov	r9, r7
 8001726:	46b0      	mov	r8, r6
 8001728:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800172a:	464d      	mov	r5, r9
 800172c:	432e      	orrs	r6, r5
 800172e:	d129      	bne.n	8001784 <__gedf2+0xb4>
 8001730:	2a00      	cmp	r2, #0
 8001732:	d1f0      	bne.n	8001716 <__gedf2+0x46>
 8001734:	433c      	orrs	r4, r7
 8001736:	d1ee      	bne.n	8001716 <__gedf2+0x46>
 8001738:	2800      	cmp	r0, #0
 800173a:	d1f2      	bne.n	8001722 <__gedf2+0x52>
 800173c:	2001      	movs	r0, #1
 800173e:	4240      	negs	r0, r0
 8001740:	e7ef      	b.n	8001722 <__gedf2+0x52>
 8001742:	003d      	movs	r5, r7
 8001744:	4325      	orrs	r5, r4
 8001746:	d11d      	bne.n	8001784 <__gedf2+0xb4>
 8001748:	4293      	cmp	r3, r2
 800174a:	d0ee      	beq.n	800172a <__gedf2+0x5a>
 800174c:	2b00      	cmp	r3, #0
 800174e:	d1e2      	bne.n	8001716 <__gedf2+0x46>
 8001750:	464c      	mov	r4, r9
 8001752:	4326      	orrs	r6, r4
 8001754:	d1df      	bne.n	8001716 <__gedf2+0x46>
 8001756:	e7e0      	b.n	800171a <__gedf2+0x4a>
 8001758:	2000      	movs	r0, #0
 800175a:	2c00      	cmp	r4, #0
 800175c:	d0e1      	beq.n	8001722 <__gedf2+0x52>
 800175e:	e7dc      	b.n	800171a <__gedf2+0x4a>
 8001760:	429a      	cmp	r2, r3
 8001762:	dc0a      	bgt.n	800177a <__gedf2+0xaa>
 8001764:	dbe8      	blt.n	8001738 <__gedf2+0x68>
 8001766:	454f      	cmp	r7, r9
 8001768:	d8d7      	bhi.n	800171a <__gedf2+0x4a>
 800176a:	d00e      	beq.n	800178a <__gedf2+0xba>
 800176c:	2000      	movs	r0, #0
 800176e:	454f      	cmp	r7, r9
 8001770:	d2d7      	bcs.n	8001722 <__gedf2+0x52>
 8001772:	2900      	cmp	r1, #0
 8001774:	d0e2      	beq.n	800173c <__gedf2+0x6c>
 8001776:	0008      	movs	r0, r1
 8001778:	e7d3      	b.n	8001722 <__gedf2+0x52>
 800177a:	4243      	negs	r3, r0
 800177c:	4158      	adcs	r0, r3
 800177e:	0040      	lsls	r0, r0, #1
 8001780:	3801      	subs	r0, #1
 8001782:	e7ce      	b.n	8001722 <__gedf2+0x52>
 8001784:	2002      	movs	r0, #2
 8001786:	4240      	negs	r0, r0
 8001788:	e7cb      	b.n	8001722 <__gedf2+0x52>
 800178a:	45c4      	cmp	ip, r8
 800178c:	d8c5      	bhi.n	800171a <__gedf2+0x4a>
 800178e:	2000      	movs	r0, #0
 8001790:	45c4      	cmp	ip, r8
 8001792:	d2c6      	bcs.n	8001722 <__gedf2+0x52>
 8001794:	e7ed      	b.n	8001772 <__gedf2+0xa2>
 8001796:	46c0      	nop			; (mov r8, r8)
 8001798:	000007ff 	.word	0x000007ff

0800179c <__ledf2>:
 800179c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800179e:	4647      	mov	r7, r8
 80017a0:	46ce      	mov	lr, r9
 80017a2:	0004      	movs	r4, r0
 80017a4:	0018      	movs	r0, r3
 80017a6:	0016      	movs	r6, r2
 80017a8:	031b      	lsls	r3, r3, #12
 80017aa:	0b1b      	lsrs	r3, r3, #12
 80017ac:	4d2c      	ldr	r5, [pc, #176]	; (8001860 <__ledf2+0xc4>)
 80017ae:	004a      	lsls	r2, r1, #1
 80017b0:	4699      	mov	r9, r3
 80017b2:	b580      	push	{r7, lr}
 80017b4:	0043      	lsls	r3, r0, #1
 80017b6:	030f      	lsls	r7, r1, #12
 80017b8:	46a4      	mov	ip, r4
 80017ba:	46b0      	mov	r8, r6
 80017bc:	0b3f      	lsrs	r7, r7, #12
 80017be:	0d52      	lsrs	r2, r2, #21
 80017c0:	0fc9      	lsrs	r1, r1, #31
 80017c2:	0d5b      	lsrs	r3, r3, #21
 80017c4:	0fc0      	lsrs	r0, r0, #31
 80017c6:	42aa      	cmp	r2, r5
 80017c8:	d00d      	beq.n	80017e6 <__ledf2+0x4a>
 80017ca:	42ab      	cmp	r3, r5
 80017cc:	d010      	beq.n	80017f0 <__ledf2+0x54>
 80017ce:	2a00      	cmp	r2, #0
 80017d0:	d127      	bne.n	8001822 <__ledf2+0x86>
 80017d2:	433c      	orrs	r4, r7
 80017d4:	2b00      	cmp	r3, #0
 80017d6:	d111      	bne.n	80017fc <__ledf2+0x60>
 80017d8:	464d      	mov	r5, r9
 80017da:	432e      	orrs	r6, r5
 80017dc:	d10e      	bne.n	80017fc <__ledf2+0x60>
 80017de:	2000      	movs	r0, #0
 80017e0:	2c00      	cmp	r4, #0
 80017e2:	d015      	beq.n	8001810 <__ledf2+0x74>
 80017e4:	e00e      	b.n	8001804 <__ledf2+0x68>
 80017e6:	003d      	movs	r5, r7
 80017e8:	4325      	orrs	r5, r4
 80017ea:	d110      	bne.n	800180e <__ledf2+0x72>
 80017ec:	4293      	cmp	r3, r2
 80017ee:	d118      	bne.n	8001822 <__ledf2+0x86>
 80017f0:	464d      	mov	r5, r9
 80017f2:	432e      	orrs	r6, r5
 80017f4:	d10b      	bne.n	800180e <__ledf2+0x72>
 80017f6:	2a00      	cmp	r2, #0
 80017f8:	d102      	bne.n	8001800 <__ledf2+0x64>
 80017fa:	433c      	orrs	r4, r7
 80017fc:	2c00      	cmp	r4, #0
 80017fe:	d00b      	beq.n	8001818 <__ledf2+0x7c>
 8001800:	4281      	cmp	r1, r0
 8001802:	d014      	beq.n	800182e <__ledf2+0x92>
 8001804:	2002      	movs	r0, #2
 8001806:	3901      	subs	r1, #1
 8001808:	4008      	ands	r0, r1
 800180a:	3801      	subs	r0, #1
 800180c:	e000      	b.n	8001810 <__ledf2+0x74>
 800180e:	2002      	movs	r0, #2
 8001810:	bcc0      	pop	{r6, r7}
 8001812:	46b9      	mov	r9, r7
 8001814:	46b0      	mov	r8, r6
 8001816:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001818:	2800      	cmp	r0, #0
 800181a:	d1f9      	bne.n	8001810 <__ledf2+0x74>
 800181c:	2001      	movs	r0, #1
 800181e:	4240      	negs	r0, r0
 8001820:	e7f6      	b.n	8001810 <__ledf2+0x74>
 8001822:	2b00      	cmp	r3, #0
 8001824:	d1ec      	bne.n	8001800 <__ledf2+0x64>
 8001826:	464c      	mov	r4, r9
 8001828:	4326      	orrs	r6, r4
 800182a:	d1e9      	bne.n	8001800 <__ledf2+0x64>
 800182c:	e7ea      	b.n	8001804 <__ledf2+0x68>
 800182e:	429a      	cmp	r2, r3
 8001830:	dd04      	ble.n	800183c <__ledf2+0xa0>
 8001832:	4243      	negs	r3, r0
 8001834:	4158      	adcs	r0, r3
 8001836:	0040      	lsls	r0, r0, #1
 8001838:	3801      	subs	r0, #1
 800183a:	e7e9      	b.n	8001810 <__ledf2+0x74>
 800183c:	429a      	cmp	r2, r3
 800183e:	dbeb      	blt.n	8001818 <__ledf2+0x7c>
 8001840:	454f      	cmp	r7, r9
 8001842:	d8df      	bhi.n	8001804 <__ledf2+0x68>
 8001844:	d006      	beq.n	8001854 <__ledf2+0xb8>
 8001846:	2000      	movs	r0, #0
 8001848:	454f      	cmp	r7, r9
 800184a:	d2e1      	bcs.n	8001810 <__ledf2+0x74>
 800184c:	2900      	cmp	r1, #0
 800184e:	d0e5      	beq.n	800181c <__ledf2+0x80>
 8001850:	0008      	movs	r0, r1
 8001852:	e7dd      	b.n	8001810 <__ledf2+0x74>
 8001854:	45c4      	cmp	ip, r8
 8001856:	d8d5      	bhi.n	8001804 <__ledf2+0x68>
 8001858:	2000      	movs	r0, #0
 800185a:	45c4      	cmp	ip, r8
 800185c:	d2d8      	bcs.n	8001810 <__ledf2+0x74>
 800185e:	e7f5      	b.n	800184c <__ledf2+0xb0>
 8001860:	000007ff 	.word	0x000007ff

08001864 <__aeabi_dmul>:
 8001864:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001866:	4645      	mov	r5, r8
 8001868:	46de      	mov	lr, fp
 800186a:	4657      	mov	r7, sl
 800186c:	464e      	mov	r6, r9
 800186e:	b5e0      	push	{r5, r6, r7, lr}
 8001870:	001f      	movs	r7, r3
 8001872:	030b      	lsls	r3, r1, #12
 8001874:	0b1b      	lsrs	r3, r3, #12
 8001876:	469b      	mov	fp, r3
 8001878:	004d      	lsls	r5, r1, #1
 800187a:	0fcb      	lsrs	r3, r1, #31
 800187c:	0004      	movs	r4, r0
 800187e:	4691      	mov	r9, r2
 8001880:	4698      	mov	r8, r3
 8001882:	b087      	sub	sp, #28
 8001884:	0d6d      	lsrs	r5, r5, #21
 8001886:	d100      	bne.n	800188a <__aeabi_dmul+0x26>
 8001888:	e1cd      	b.n	8001c26 <__aeabi_dmul+0x3c2>
 800188a:	4bce      	ldr	r3, [pc, #824]	; (8001bc4 <__aeabi_dmul+0x360>)
 800188c:	429d      	cmp	r5, r3
 800188e:	d100      	bne.n	8001892 <__aeabi_dmul+0x2e>
 8001890:	e1e9      	b.n	8001c66 <__aeabi_dmul+0x402>
 8001892:	465a      	mov	r2, fp
 8001894:	0f43      	lsrs	r3, r0, #29
 8001896:	00d2      	lsls	r2, r2, #3
 8001898:	4313      	orrs	r3, r2
 800189a:	2280      	movs	r2, #128	; 0x80
 800189c:	0412      	lsls	r2, r2, #16
 800189e:	431a      	orrs	r2, r3
 80018a0:	00c3      	lsls	r3, r0, #3
 80018a2:	469a      	mov	sl, r3
 80018a4:	4bc8      	ldr	r3, [pc, #800]	; (8001bc8 <__aeabi_dmul+0x364>)
 80018a6:	4693      	mov	fp, r2
 80018a8:	469c      	mov	ip, r3
 80018aa:	2300      	movs	r3, #0
 80018ac:	2600      	movs	r6, #0
 80018ae:	4465      	add	r5, ip
 80018b0:	9300      	str	r3, [sp, #0]
 80018b2:	033c      	lsls	r4, r7, #12
 80018b4:	007b      	lsls	r3, r7, #1
 80018b6:	4648      	mov	r0, r9
 80018b8:	0b24      	lsrs	r4, r4, #12
 80018ba:	0d5b      	lsrs	r3, r3, #21
 80018bc:	0fff      	lsrs	r7, r7, #31
 80018be:	2b00      	cmp	r3, #0
 80018c0:	d100      	bne.n	80018c4 <__aeabi_dmul+0x60>
 80018c2:	e189      	b.n	8001bd8 <__aeabi_dmul+0x374>
 80018c4:	4abf      	ldr	r2, [pc, #764]	; (8001bc4 <__aeabi_dmul+0x360>)
 80018c6:	4293      	cmp	r3, r2
 80018c8:	d019      	beq.n	80018fe <__aeabi_dmul+0x9a>
 80018ca:	0f42      	lsrs	r2, r0, #29
 80018cc:	00e4      	lsls	r4, r4, #3
 80018ce:	4322      	orrs	r2, r4
 80018d0:	2480      	movs	r4, #128	; 0x80
 80018d2:	0424      	lsls	r4, r4, #16
 80018d4:	4314      	orrs	r4, r2
 80018d6:	4abc      	ldr	r2, [pc, #752]	; (8001bc8 <__aeabi_dmul+0x364>)
 80018d8:	2100      	movs	r1, #0
 80018da:	4694      	mov	ip, r2
 80018dc:	4642      	mov	r2, r8
 80018de:	4463      	add	r3, ip
 80018e0:	195b      	adds	r3, r3, r5
 80018e2:	9301      	str	r3, [sp, #4]
 80018e4:	9b01      	ldr	r3, [sp, #4]
 80018e6:	407a      	eors	r2, r7
 80018e8:	3301      	adds	r3, #1
 80018ea:	00c0      	lsls	r0, r0, #3
 80018ec:	b2d2      	uxtb	r2, r2
 80018ee:	9302      	str	r3, [sp, #8]
 80018f0:	2e0a      	cmp	r6, #10
 80018f2:	dd1c      	ble.n	800192e <__aeabi_dmul+0xca>
 80018f4:	003a      	movs	r2, r7
 80018f6:	2e0b      	cmp	r6, #11
 80018f8:	d05e      	beq.n	80019b8 <__aeabi_dmul+0x154>
 80018fa:	4647      	mov	r7, r8
 80018fc:	e056      	b.n	80019ac <__aeabi_dmul+0x148>
 80018fe:	4649      	mov	r1, r9
 8001900:	4bb0      	ldr	r3, [pc, #704]	; (8001bc4 <__aeabi_dmul+0x360>)
 8001902:	4321      	orrs	r1, r4
 8001904:	18eb      	adds	r3, r5, r3
 8001906:	9301      	str	r3, [sp, #4]
 8001908:	2900      	cmp	r1, #0
 800190a:	d12a      	bne.n	8001962 <__aeabi_dmul+0xfe>
 800190c:	2080      	movs	r0, #128	; 0x80
 800190e:	2202      	movs	r2, #2
 8001910:	0100      	lsls	r0, r0, #4
 8001912:	002b      	movs	r3, r5
 8001914:	4684      	mov	ip, r0
 8001916:	4316      	orrs	r6, r2
 8001918:	4642      	mov	r2, r8
 800191a:	4463      	add	r3, ip
 800191c:	407a      	eors	r2, r7
 800191e:	b2d2      	uxtb	r2, r2
 8001920:	9302      	str	r3, [sp, #8]
 8001922:	2e0a      	cmp	r6, #10
 8001924:	dd00      	ble.n	8001928 <__aeabi_dmul+0xc4>
 8001926:	e231      	b.n	8001d8c <__aeabi_dmul+0x528>
 8001928:	2000      	movs	r0, #0
 800192a:	2400      	movs	r4, #0
 800192c:	2102      	movs	r1, #2
 800192e:	2e02      	cmp	r6, #2
 8001930:	dc26      	bgt.n	8001980 <__aeabi_dmul+0x11c>
 8001932:	3e01      	subs	r6, #1
 8001934:	2e01      	cmp	r6, #1
 8001936:	d852      	bhi.n	80019de <__aeabi_dmul+0x17a>
 8001938:	2902      	cmp	r1, #2
 800193a:	d04c      	beq.n	80019d6 <__aeabi_dmul+0x172>
 800193c:	2901      	cmp	r1, #1
 800193e:	d000      	beq.n	8001942 <__aeabi_dmul+0xde>
 8001940:	e118      	b.n	8001b74 <__aeabi_dmul+0x310>
 8001942:	2300      	movs	r3, #0
 8001944:	2400      	movs	r4, #0
 8001946:	2500      	movs	r5, #0
 8001948:	051b      	lsls	r3, r3, #20
 800194a:	4323      	orrs	r3, r4
 800194c:	07d2      	lsls	r2, r2, #31
 800194e:	4313      	orrs	r3, r2
 8001950:	0028      	movs	r0, r5
 8001952:	0019      	movs	r1, r3
 8001954:	b007      	add	sp, #28
 8001956:	bcf0      	pop	{r4, r5, r6, r7}
 8001958:	46bb      	mov	fp, r7
 800195a:	46b2      	mov	sl, r6
 800195c:	46a9      	mov	r9, r5
 800195e:	46a0      	mov	r8, r4
 8001960:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001962:	2180      	movs	r1, #128	; 0x80
 8001964:	2203      	movs	r2, #3
 8001966:	0109      	lsls	r1, r1, #4
 8001968:	002b      	movs	r3, r5
 800196a:	468c      	mov	ip, r1
 800196c:	4316      	orrs	r6, r2
 800196e:	4642      	mov	r2, r8
 8001970:	4463      	add	r3, ip
 8001972:	407a      	eors	r2, r7
 8001974:	b2d2      	uxtb	r2, r2
 8001976:	9302      	str	r3, [sp, #8]
 8001978:	2e0a      	cmp	r6, #10
 800197a:	dd00      	ble.n	800197e <__aeabi_dmul+0x11a>
 800197c:	e228      	b.n	8001dd0 <__aeabi_dmul+0x56c>
 800197e:	2103      	movs	r1, #3
 8001980:	2501      	movs	r5, #1
 8001982:	40b5      	lsls	r5, r6
 8001984:	46ac      	mov	ip, r5
 8001986:	26a6      	movs	r6, #166	; 0xa6
 8001988:	4663      	mov	r3, ip
 800198a:	00f6      	lsls	r6, r6, #3
 800198c:	4035      	ands	r5, r6
 800198e:	4233      	tst	r3, r6
 8001990:	d10b      	bne.n	80019aa <__aeabi_dmul+0x146>
 8001992:	2690      	movs	r6, #144	; 0x90
 8001994:	00b6      	lsls	r6, r6, #2
 8001996:	4233      	tst	r3, r6
 8001998:	d118      	bne.n	80019cc <__aeabi_dmul+0x168>
 800199a:	3eb9      	subs	r6, #185	; 0xb9
 800199c:	3eff      	subs	r6, #255	; 0xff
 800199e:	421e      	tst	r6, r3
 80019a0:	d01d      	beq.n	80019de <__aeabi_dmul+0x17a>
 80019a2:	46a3      	mov	fp, r4
 80019a4:	4682      	mov	sl, r0
 80019a6:	9100      	str	r1, [sp, #0]
 80019a8:	e000      	b.n	80019ac <__aeabi_dmul+0x148>
 80019aa:	0017      	movs	r7, r2
 80019ac:	9900      	ldr	r1, [sp, #0]
 80019ae:	003a      	movs	r2, r7
 80019b0:	2902      	cmp	r1, #2
 80019b2:	d010      	beq.n	80019d6 <__aeabi_dmul+0x172>
 80019b4:	465c      	mov	r4, fp
 80019b6:	4650      	mov	r0, sl
 80019b8:	2903      	cmp	r1, #3
 80019ba:	d1bf      	bne.n	800193c <__aeabi_dmul+0xd8>
 80019bc:	2380      	movs	r3, #128	; 0x80
 80019be:	031b      	lsls	r3, r3, #12
 80019c0:	431c      	orrs	r4, r3
 80019c2:	0324      	lsls	r4, r4, #12
 80019c4:	0005      	movs	r5, r0
 80019c6:	4b7f      	ldr	r3, [pc, #508]	; (8001bc4 <__aeabi_dmul+0x360>)
 80019c8:	0b24      	lsrs	r4, r4, #12
 80019ca:	e7bd      	b.n	8001948 <__aeabi_dmul+0xe4>
 80019cc:	2480      	movs	r4, #128	; 0x80
 80019ce:	2200      	movs	r2, #0
 80019d0:	4b7c      	ldr	r3, [pc, #496]	; (8001bc4 <__aeabi_dmul+0x360>)
 80019d2:	0324      	lsls	r4, r4, #12
 80019d4:	e7b8      	b.n	8001948 <__aeabi_dmul+0xe4>
 80019d6:	2400      	movs	r4, #0
 80019d8:	2500      	movs	r5, #0
 80019da:	4b7a      	ldr	r3, [pc, #488]	; (8001bc4 <__aeabi_dmul+0x360>)
 80019dc:	e7b4      	b.n	8001948 <__aeabi_dmul+0xe4>
 80019de:	4653      	mov	r3, sl
 80019e0:	041e      	lsls	r6, r3, #16
 80019e2:	0c36      	lsrs	r6, r6, #16
 80019e4:	0c1f      	lsrs	r7, r3, #16
 80019e6:	0033      	movs	r3, r6
 80019e8:	0c01      	lsrs	r1, r0, #16
 80019ea:	0400      	lsls	r0, r0, #16
 80019ec:	0c00      	lsrs	r0, r0, #16
 80019ee:	4343      	muls	r3, r0
 80019f0:	4698      	mov	r8, r3
 80019f2:	0003      	movs	r3, r0
 80019f4:	437b      	muls	r3, r7
 80019f6:	4699      	mov	r9, r3
 80019f8:	0033      	movs	r3, r6
 80019fa:	434b      	muls	r3, r1
 80019fc:	469c      	mov	ip, r3
 80019fe:	4643      	mov	r3, r8
 8001a00:	000d      	movs	r5, r1
 8001a02:	0c1b      	lsrs	r3, r3, #16
 8001a04:	469a      	mov	sl, r3
 8001a06:	437d      	muls	r5, r7
 8001a08:	44cc      	add	ip, r9
 8001a0a:	44d4      	add	ip, sl
 8001a0c:	9500      	str	r5, [sp, #0]
 8001a0e:	45e1      	cmp	r9, ip
 8001a10:	d904      	bls.n	8001a1c <__aeabi_dmul+0x1b8>
 8001a12:	2380      	movs	r3, #128	; 0x80
 8001a14:	025b      	lsls	r3, r3, #9
 8001a16:	4699      	mov	r9, r3
 8001a18:	444d      	add	r5, r9
 8001a1a:	9500      	str	r5, [sp, #0]
 8001a1c:	4663      	mov	r3, ip
 8001a1e:	0c1b      	lsrs	r3, r3, #16
 8001a20:	001d      	movs	r5, r3
 8001a22:	4663      	mov	r3, ip
 8001a24:	041b      	lsls	r3, r3, #16
 8001a26:	469c      	mov	ip, r3
 8001a28:	4643      	mov	r3, r8
 8001a2a:	041b      	lsls	r3, r3, #16
 8001a2c:	0c1b      	lsrs	r3, r3, #16
 8001a2e:	4698      	mov	r8, r3
 8001a30:	4663      	mov	r3, ip
 8001a32:	4443      	add	r3, r8
 8001a34:	9303      	str	r3, [sp, #12]
 8001a36:	0c23      	lsrs	r3, r4, #16
 8001a38:	4698      	mov	r8, r3
 8001a3a:	0033      	movs	r3, r6
 8001a3c:	0424      	lsls	r4, r4, #16
 8001a3e:	0c24      	lsrs	r4, r4, #16
 8001a40:	4363      	muls	r3, r4
 8001a42:	469c      	mov	ip, r3
 8001a44:	0023      	movs	r3, r4
 8001a46:	437b      	muls	r3, r7
 8001a48:	4699      	mov	r9, r3
 8001a4a:	4643      	mov	r3, r8
 8001a4c:	435e      	muls	r6, r3
 8001a4e:	435f      	muls	r7, r3
 8001a50:	444e      	add	r6, r9
 8001a52:	4663      	mov	r3, ip
 8001a54:	46b2      	mov	sl, r6
 8001a56:	0c1e      	lsrs	r6, r3, #16
 8001a58:	4456      	add	r6, sl
 8001a5a:	45b1      	cmp	r9, r6
 8001a5c:	d903      	bls.n	8001a66 <__aeabi_dmul+0x202>
 8001a5e:	2380      	movs	r3, #128	; 0x80
 8001a60:	025b      	lsls	r3, r3, #9
 8001a62:	4699      	mov	r9, r3
 8001a64:	444f      	add	r7, r9
 8001a66:	0c33      	lsrs	r3, r6, #16
 8001a68:	4699      	mov	r9, r3
 8001a6a:	003b      	movs	r3, r7
 8001a6c:	444b      	add	r3, r9
 8001a6e:	9305      	str	r3, [sp, #20]
 8001a70:	4663      	mov	r3, ip
 8001a72:	46ac      	mov	ip, r5
 8001a74:	041f      	lsls	r7, r3, #16
 8001a76:	0c3f      	lsrs	r7, r7, #16
 8001a78:	0436      	lsls	r6, r6, #16
 8001a7a:	19f6      	adds	r6, r6, r7
 8001a7c:	44b4      	add	ip, r6
 8001a7e:	4663      	mov	r3, ip
 8001a80:	9304      	str	r3, [sp, #16]
 8001a82:	465b      	mov	r3, fp
 8001a84:	0c1b      	lsrs	r3, r3, #16
 8001a86:	469c      	mov	ip, r3
 8001a88:	465b      	mov	r3, fp
 8001a8a:	041f      	lsls	r7, r3, #16
 8001a8c:	0c3f      	lsrs	r7, r7, #16
 8001a8e:	003b      	movs	r3, r7
 8001a90:	4343      	muls	r3, r0
 8001a92:	4699      	mov	r9, r3
 8001a94:	4663      	mov	r3, ip
 8001a96:	4343      	muls	r3, r0
 8001a98:	469a      	mov	sl, r3
 8001a9a:	464b      	mov	r3, r9
 8001a9c:	4660      	mov	r0, ip
 8001a9e:	0c1b      	lsrs	r3, r3, #16
 8001aa0:	469b      	mov	fp, r3
 8001aa2:	4348      	muls	r0, r1
 8001aa4:	4379      	muls	r1, r7
 8001aa6:	4451      	add	r1, sl
 8001aa8:	4459      	add	r1, fp
 8001aaa:	458a      	cmp	sl, r1
 8001aac:	d903      	bls.n	8001ab6 <__aeabi_dmul+0x252>
 8001aae:	2380      	movs	r3, #128	; 0x80
 8001ab0:	025b      	lsls	r3, r3, #9
 8001ab2:	469a      	mov	sl, r3
 8001ab4:	4450      	add	r0, sl
 8001ab6:	0c0b      	lsrs	r3, r1, #16
 8001ab8:	469a      	mov	sl, r3
 8001aba:	464b      	mov	r3, r9
 8001abc:	041b      	lsls	r3, r3, #16
 8001abe:	0c1b      	lsrs	r3, r3, #16
 8001ac0:	4699      	mov	r9, r3
 8001ac2:	003b      	movs	r3, r7
 8001ac4:	4363      	muls	r3, r4
 8001ac6:	0409      	lsls	r1, r1, #16
 8001ac8:	4645      	mov	r5, r8
 8001aca:	4449      	add	r1, r9
 8001acc:	4699      	mov	r9, r3
 8001ace:	4663      	mov	r3, ip
 8001ad0:	435c      	muls	r4, r3
 8001ad2:	436b      	muls	r3, r5
 8001ad4:	469c      	mov	ip, r3
 8001ad6:	464b      	mov	r3, r9
 8001ad8:	0c1b      	lsrs	r3, r3, #16
 8001ada:	4698      	mov	r8, r3
 8001adc:	436f      	muls	r7, r5
 8001ade:	193f      	adds	r7, r7, r4
 8001ae0:	4447      	add	r7, r8
 8001ae2:	4450      	add	r0, sl
 8001ae4:	42bc      	cmp	r4, r7
 8001ae6:	d903      	bls.n	8001af0 <__aeabi_dmul+0x28c>
 8001ae8:	2380      	movs	r3, #128	; 0x80
 8001aea:	025b      	lsls	r3, r3, #9
 8001aec:	4698      	mov	r8, r3
 8001aee:	44c4      	add	ip, r8
 8001af0:	9b04      	ldr	r3, [sp, #16]
 8001af2:	9d00      	ldr	r5, [sp, #0]
 8001af4:	4698      	mov	r8, r3
 8001af6:	4445      	add	r5, r8
 8001af8:	42b5      	cmp	r5, r6
 8001afa:	41b6      	sbcs	r6, r6
 8001afc:	4273      	negs	r3, r6
 8001afe:	4698      	mov	r8, r3
 8001b00:	464b      	mov	r3, r9
 8001b02:	041e      	lsls	r6, r3, #16
 8001b04:	9b05      	ldr	r3, [sp, #20]
 8001b06:	043c      	lsls	r4, r7, #16
 8001b08:	4699      	mov	r9, r3
 8001b0a:	0c36      	lsrs	r6, r6, #16
 8001b0c:	19a4      	adds	r4, r4, r6
 8001b0e:	444c      	add	r4, r9
 8001b10:	46a1      	mov	r9, r4
 8001b12:	4683      	mov	fp, r0
 8001b14:	186e      	adds	r6, r5, r1
 8001b16:	44c1      	add	r9, r8
 8001b18:	428e      	cmp	r6, r1
 8001b1a:	4189      	sbcs	r1, r1
 8001b1c:	44cb      	add	fp, r9
 8001b1e:	465d      	mov	r5, fp
 8001b20:	4249      	negs	r1, r1
 8001b22:	186d      	adds	r5, r5, r1
 8001b24:	429c      	cmp	r4, r3
 8001b26:	41a4      	sbcs	r4, r4
 8001b28:	45c1      	cmp	r9, r8
 8001b2a:	419b      	sbcs	r3, r3
 8001b2c:	4583      	cmp	fp, r0
 8001b2e:	4180      	sbcs	r0, r0
 8001b30:	428d      	cmp	r5, r1
 8001b32:	4189      	sbcs	r1, r1
 8001b34:	425b      	negs	r3, r3
 8001b36:	4264      	negs	r4, r4
 8001b38:	431c      	orrs	r4, r3
 8001b3a:	4240      	negs	r0, r0
 8001b3c:	9b03      	ldr	r3, [sp, #12]
 8001b3e:	4249      	negs	r1, r1
 8001b40:	4301      	orrs	r1, r0
 8001b42:	0270      	lsls	r0, r6, #9
 8001b44:	0c3f      	lsrs	r7, r7, #16
 8001b46:	4318      	orrs	r0, r3
 8001b48:	19e4      	adds	r4, r4, r7
 8001b4a:	1e47      	subs	r7, r0, #1
 8001b4c:	41b8      	sbcs	r0, r7
 8001b4e:	1864      	adds	r4, r4, r1
 8001b50:	4464      	add	r4, ip
 8001b52:	0df6      	lsrs	r6, r6, #23
 8001b54:	0261      	lsls	r1, r4, #9
 8001b56:	4330      	orrs	r0, r6
 8001b58:	0dec      	lsrs	r4, r5, #23
 8001b5a:	026e      	lsls	r6, r5, #9
 8001b5c:	430c      	orrs	r4, r1
 8001b5e:	4330      	orrs	r0, r6
 8001b60:	01c9      	lsls	r1, r1, #7
 8001b62:	d400      	bmi.n	8001b66 <__aeabi_dmul+0x302>
 8001b64:	e0f1      	b.n	8001d4a <__aeabi_dmul+0x4e6>
 8001b66:	2101      	movs	r1, #1
 8001b68:	0843      	lsrs	r3, r0, #1
 8001b6a:	4001      	ands	r1, r0
 8001b6c:	430b      	orrs	r3, r1
 8001b6e:	07e0      	lsls	r0, r4, #31
 8001b70:	4318      	orrs	r0, r3
 8001b72:	0864      	lsrs	r4, r4, #1
 8001b74:	4915      	ldr	r1, [pc, #84]	; (8001bcc <__aeabi_dmul+0x368>)
 8001b76:	9b02      	ldr	r3, [sp, #8]
 8001b78:	468c      	mov	ip, r1
 8001b7a:	4463      	add	r3, ip
 8001b7c:	2b00      	cmp	r3, #0
 8001b7e:	dc00      	bgt.n	8001b82 <__aeabi_dmul+0x31e>
 8001b80:	e097      	b.n	8001cb2 <__aeabi_dmul+0x44e>
 8001b82:	0741      	lsls	r1, r0, #29
 8001b84:	d009      	beq.n	8001b9a <__aeabi_dmul+0x336>
 8001b86:	210f      	movs	r1, #15
 8001b88:	4001      	ands	r1, r0
 8001b8a:	2904      	cmp	r1, #4
 8001b8c:	d005      	beq.n	8001b9a <__aeabi_dmul+0x336>
 8001b8e:	1d01      	adds	r1, r0, #4
 8001b90:	4281      	cmp	r1, r0
 8001b92:	4180      	sbcs	r0, r0
 8001b94:	4240      	negs	r0, r0
 8001b96:	1824      	adds	r4, r4, r0
 8001b98:	0008      	movs	r0, r1
 8001b9a:	01e1      	lsls	r1, r4, #7
 8001b9c:	d506      	bpl.n	8001bac <__aeabi_dmul+0x348>
 8001b9e:	2180      	movs	r1, #128	; 0x80
 8001ba0:	00c9      	lsls	r1, r1, #3
 8001ba2:	468c      	mov	ip, r1
 8001ba4:	4b0a      	ldr	r3, [pc, #40]	; (8001bd0 <__aeabi_dmul+0x36c>)
 8001ba6:	401c      	ands	r4, r3
 8001ba8:	9b02      	ldr	r3, [sp, #8]
 8001baa:	4463      	add	r3, ip
 8001bac:	4909      	ldr	r1, [pc, #36]	; (8001bd4 <__aeabi_dmul+0x370>)
 8001bae:	428b      	cmp	r3, r1
 8001bb0:	dd00      	ble.n	8001bb4 <__aeabi_dmul+0x350>
 8001bb2:	e710      	b.n	80019d6 <__aeabi_dmul+0x172>
 8001bb4:	0761      	lsls	r1, r4, #29
 8001bb6:	08c5      	lsrs	r5, r0, #3
 8001bb8:	0264      	lsls	r4, r4, #9
 8001bba:	055b      	lsls	r3, r3, #21
 8001bbc:	430d      	orrs	r5, r1
 8001bbe:	0b24      	lsrs	r4, r4, #12
 8001bc0:	0d5b      	lsrs	r3, r3, #21
 8001bc2:	e6c1      	b.n	8001948 <__aeabi_dmul+0xe4>
 8001bc4:	000007ff 	.word	0x000007ff
 8001bc8:	fffffc01 	.word	0xfffffc01
 8001bcc:	000003ff 	.word	0x000003ff
 8001bd0:	feffffff 	.word	0xfeffffff
 8001bd4:	000007fe 	.word	0x000007fe
 8001bd8:	464b      	mov	r3, r9
 8001bda:	4323      	orrs	r3, r4
 8001bdc:	d059      	beq.n	8001c92 <__aeabi_dmul+0x42e>
 8001bde:	2c00      	cmp	r4, #0
 8001be0:	d100      	bne.n	8001be4 <__aeabi_dmul+0x380>
 8001be2:	e0a3      	b.n	8001d2c <__aeabi_dmul+0x4c8>
 8001be4:	0020      	movs	r0, r4
 8001be6:	f000 fdf9 	bl	80027dc <__clzsi2>
 8001bea:	0001      	movs	r1, r0
 8001bec:	0003      	movs	r3, r0
 8001bee:	390b      	subs	r1, #11
 8001bf0:	221d      	movs	r2, #29
 8001bf2:	1a52      	subs	r2, r2, r1
 8001bf4:	4649      	mov	r1, r9
 8001bf6:	0018      	movs	r0, r3
 8001bf8:	40d1      	lsrs	r1, r2
 8001bfa:	464a      	mov	r2, r9
 8001bfc:	3808      	subs	r0, #8
 8001bfe:	4082      	lsls	r2, r0
 8001c00:	4084      	lsls	r4, r0
 8001c02:	0010      	movs	r0, r2
 8001c04:	430c      	orrs	r4, r1
 8001c06:	4a74      	ldr	r2, [pc, #464]	; (8001dd8 <__aeabi_dmul+0x574>)
 8001c08:	1aeb      	subs	r3, r5, r3
 8001c0a:	4694      	mov	ip, r2
 8001c0c:	4642      	mov	r2, r8
 8001c0e:	4463      	add	r3, ip
 8001c10:	9301      	str	r3, [sp, #4]
 8001c12:	9b01      	ldr	r3, [sp, #4]
 8001c14:	407a      	eors	r2, r7
 8001c16:	3301      	adds	r3, #1
 8001c18:	2100      	movs	r1, #0
 8001c1a:	b2d2      	uxtb	r2, r2
 8001c1c:	9302      	str	r3, [sp, #8]
 8001c1e:	2e0a      	cmp	r6, #10
 8001c20:	dd00      	ble.n	8001c24 <__aeabi_dmul+0x3c0>
 8001c22:	e667      	b.n	80018f4 <__aeabi_dmul+0x90>
 8001c24:	e683      	b.n	800192e <__aeabi_dmul+0xca>
 8001c26:	465b      	mov	r3, fp
 8001c28:	4303      	orrs	r3, r0
 8001c2a:	469a      	mov	sl, r3
 8001c2c:	d02a      	beq.n	8001c84 <__aeabi_dmul+0x420>
 8001c2e:	465b      	mov	r3, fp
 8001c30:	2b00      	cmp	r3, #0
 8001c32:	d06d      	beq.n	8001d10 <__aeabi_dmul+0x4ac>
 8001c34:	4658      	mov	r0, fp
 8001c36:	f000 fdd1 	bl	80027dc <__clzsi2>
 8001c3a:	0001      	movs	r1, r0
 8001c3c:	0003      	movs	r3, r0
 8001c3e:	390b      	subs	r1, #11
 8001c40:	221d      	movs	r2, #29
 8001c42:	1a52      	subs	r2, r2, r1
 8001c44:	0021      	movs	r1, r4
 8001c46:	0018      	movs	r0, r3
 8001c48:	465d      	mov	r5, fp
 8001c4a:	40d1      	lsrs	r1, r2
 8001c4c:	3808      	subs	r0, #8
 8001c4e:	4085      	lsls	r5, r0
 8001c50:	000a      	movs	r2, r1
 8001c52:	4084      	lsls	r4, r0
 8001c54:	432a      	orrs	r2, r5
 8001c56:	4693      	mov	fp, r2
 8001c58:	46a2      	mov	sl, r4
 8001c5a:	4d5f      	ldr	r5, [pc, #380]	; (8001dd8 <__aeabi_dmul+0x574>)
 8001c5c:	2600      	movs	r6, #0
 8001c5e:	1aed      	subs	r5, r5, r3
 8001c60:	2300      	movs	r3, #0
 8001c62:	9300      	str	r3, [sp, #0]
 8001c64:	e625      	b.n	80018b2 <__aeabi_dmul+0x4e>
 8001c66:	465b      	mov	r3, fp
 8001c68:	4303      	orrs	r3, r0
 8001c6a:	469a      	mov	sl, r3
 8001c6c:	d105      	bne.n	8001c7a <__aeabi_dmul+0x416>
 8001c6e:	2300      	movs	r3, #0
 8001c70:	469b      	mov	fp, r3
 8001c72:	3302      	adds	r3, #2
 8001c74:	2608      	movs	r6, #8
 8001c76:	9300      	str	r3, [sp, #0]
 8001c78:	e61b      	b.n	80018b2 <__aeabi_dmul+0x4e>
 8001c7a:	2303      	movs	r3, #3
 8001c7c:	4682      	mov	sl, r0
 8001c7e:	260c      	movs	r6, #12
 8001c80:	9300      	str	r3, [sp, #0]
 8001c82:	e616      	b.n	80018b2 <__aeabi_dmul+0x4e>
 8001c84:	2300      	movs	r3, #0
 8001c86:	469b      	mov	fp, r3
 8001c88:	3301      	adds	r3, #1
 8001c8a:	2604      	movs	r6, #4
 8001c8c:	2500      	movs	r5, #0
 8001c8e:	9300      	str	r3, [sp, #0]
 8001c90:	e60f      	b.n	80018b2 <__aeabi_dmul+0x4e>
 8001c92:	4642      	mov	r2, r8
 8001c94:	3301      	adds	r3, #1
 8001c96:	9501      	str	r5, [sp, #4]
 8001c98:	431e      	orrs	r6, r3
 8001c9a:	9b01      	ldr	r3, [sp, #4]
 8001c9c:	407a      	eors	r2, r7
 8001c9e:	3301      	adds	r3, #1
 8001ca0:	2400      	movs	r4, #0
 8001ca2:	2000      	movs	r0, #0
 8001ca4:	2101      	movs	r1, #1
 8001ca6:	b2d2      	uxtb	r2, r2
 8001ca8:	9302      	str	r3, [sp, #8]
 8001caa:	2e0a      	cmp	r6, #10
 8001cac:	dd00      	ble.n	8001cb0 <__aeabi_dmul+0x44c>
 8001cae:	e621      	b.n	80018f4 <__aeabi_dmul+0x90>
 8001cb0:	e63d      	b.n	800192e <__aeabi_dmul+0xca>
 8001cb2:	2101      	movs	r1, #1
 8001cb4:	1ac9      	subs	r1, r1, r3
 8001cb6:	2938      	cmp	r1, #56	; 0x38
 8001cb8:	dd00      	ble.n	8001cbc <__aeabi_dmul+0x458>
 8001cba:	e642      	b.n	8001942 <__aeabi_dmul+0xde>
 8001cbc:	291f      	cmp	r1, #31
 8001cbe:	dd47      	ble.n	8001d50 <__aeabi_dmul+0x4ec>
 8001cc0:	261f      	movs	r6, #31
 8001cc2:	0025      	movs	r5, r4
 8001cc4:	4276      	negs	r6, r6
 8001cc6:	1af3      	subs	r3, r6, r3
 8001cc8:	40dd      	lsrs	r5, r3
 8001cca:	002b      	movs	r3, r5
 8001ccc:	2920      	cmp	r1, #32
 8001cce:	d005      	beq.n	8001cdc <__aeabi_dmul+0x478>
 8001cd0:	4942      	ldr	r1, [pc, #264]	; (8001ddc <__aeabi_dmul+0x578>)
 8001cd2:	9d02      	ldr	r5, [sp, #8]
 8001cd4:	468c      	mov	ip, r1
 8001cd6:	4465      	add	r5, ip
 8001cd8:	40ac      	lsls	r4, r5
 8001cda:	4320      	orrs	r0, r4
 8001cdc:	1e41      	subs	r1, r0, #1
 8001cde:	4188      	sbcs	r0, r1
 8001ce0:	4318      	orrs	r0, r3
 8001ce2:	2307      	movs	r3, #7
 8001ce4:	001d      	movs	r5, r3
 8001ce6:	2400      	movs	r4, #0
 8001ce8:	4005      	ands	r5, r0
 8001cea:	4203      	tst	r3, r0
 8001cec:	d04a      	beq.n	8001d84 <__aeabi_dmul+0x520>
 8001cee:	230f      	movs	r3, #15
 8001cf0:	2400      	movs	r4, #0
 8001cf2:	4003      	ands	r3, r0
 8001cf4:	2b04      	cmp	r3, #4
 8001cf6:	d042      	beq.n	8001d7e <__aeabi_dmul+0x51a>
 8001cf8:	1d03      	adds	r3, r0, #4
 8001cfa:	4283      	cmp	r3, r0
 8001cfc:	4180      	sbcs	r0, r0
 8001cfe:	4240      	negs	r0, r0
 8001d00:	1824      	adds	r4, r4, r0
 8001d02:	0018      	movs	r0, r3
 8001d04:	0223      	lsls	r3, r4, #8
 8001d06:	d53a      	bpl.n	8001d7e <__aeabi_dmul+0x51a>
 8001d08:	2301      	movs	r3, #1
 8001d0a:	2400      	movs	r4, #0
 8001d0c:	2500      	movs	r5, #0
 8001d0e:	e61b      	b.n	8001948 <__aeabi_dmul+0xe4>
 8001d10:	f000 fd64 	bl	80027dc <__clzsi2>
 8001d14:	0001      	movs	r1, r0
 8001d16:	0003      	movs	r3, r0
 8001d18:	3115      	adds	r1, #21
 8001d1a:	3320      	adds	r3, #32
 8001d1c:	291c      	cmp	r1, #28
 8001d1e:	dd8f      	ble.n	8001c40 <__aeabi_dmul+0x3dc>
 8001d20:	3808      	subs	r0, #8
 8001d22:	2200      	movs	r2, #0
 8001d24:	4084      	lsls	r4, r0
 8001d26:	4692      	mov	sl, r2
 8001d28:	46a3      	mov	fp, r4
 8001d2a:	e796      	b.n	8001c5a <__aeabi_dmul+0x3f6>
 8001d2c:	f000 fd56 	bl	80027dc <__clzsi2>
 8001d30:	0001      	movs	r1, r0
 8001d32:	0003      	movs	r3, r0
 8001d34:	3115      	adds	r1, #21
 8001d36:	3320      	adds	r3, #32
 8001d38:	291c      	cmp	r1, #28
 8001d3a:	dc00      	bgt.n	8001d3e <__aeabi_dmul+0x4da>
 8001d3c:	e758      	b.n	8001bf0 <__aeabi_dmul+0x38c>
 8001d3e:	0002      	movs	r2, r0
 8001d40:	464c      	mov	r4, r9
 8001d42:	3a08      	subs	r2, #8
 8001d44:	2000      	movs	r0, #0
 8001d46:	4094      	lsls	r4, r2
 8001d48:	e75d      	b.n	8001c06 <__aeabi_dmul+0x3a2>
 8001d4a:	9b01      	ldr	r3, [sp, #4]
 8001d4c:	9302      	str	r3, [sp, #8]
 8001d4e:	e711      	b.n	8001b74 <__aeabi_dmul+0x310>
 8001d50:	4b23      	ldr	r3, [pc, #140]	; (8001de0 <__aeabi_dmul+0x57c>)
 8001d52:	0026      	movs	r6, r4
 8001d54:	469c      	mov	ip, r3
 8001d56:	0003      	movs	r3, r0
 8001d58:	9d02      	ldr	r5, [sp, #8]
 8001d5a:	40cb      	lsrs	r3, r1
 8001d5c:	4465      	add	r5, ip
 8001d5e:	40ae      	lsls	r6, r5
 8001d60:	431e      	orrs	r6, r3
 8001d62:	0003      	movs	r3, r0
 8001d64:	40ab      	lsls	r3, r5
 8001d66:	1e58      	subs	r0, r3, #1
 8001d68:	4183      	sbcs	r3, r0
 8001d6a:	0030      	movs	r0, r6
 8001d6c:	4318      	orrs	r0, r3
 8001d6e:	40cc      	lsrs	r4, r1
 8001d70:	0743      	lsls	r3, r0, #29
 8001d72:	d0c7      	beq.n	8001d04 <__aeabi_dmul+0x4a0>
 8001d74:	230f      	movs	r3, #15
 8001d76:	4003      	ands	r3, r0
 8001d78:	2b04      	cmp	r3, #4
 8001d7a:	d1bd      	bne.n	8001cf8 <__aeabi_dmul+0x494>
 8001d7c:	e7c2      	b.n	8001d04 <__aeabi_dmul+0x4a0>
 8001d7e:	0765      	lsls	r5, r4, #29
 8001d80:	0264      	lsls	r4, r4, #9
 8001d82:	0b24      	lsrs	r4, r4, #12
 8001d84:	08c0      	lsrs	r0, r0, #3
 8001d86:	2300      	movs	r3, #0
 8001d88:	4305      	orrs	r5, r0
 8001d8a:	e5dd      	b.n	8001948 <__aeabi_dmul+0xe4>
 8001d8c:	2500      	movs	r5, #0
 8001d8e:	2302      	movs	r3, #2
 8001d90:	2e0f      	cmp	r6, #15
 8001d92:	d10c      	bne.n	8001dae <__aeabi_dmul+0x54a>
 8001d94:	2480      	movs	r4, #128	; 0x80
 8001d96:	465b      	mov	r3, fp
 8001d98:	0324      	lsls	r4, r4, #12
 8001d9a:	4223      	tst	r3, r4
 8001d9c:	d00e      	beq.n	8001dbc <__aeabi_dmul+0x558>
 8001d9e:	4221      	tst	r1, r4
 8001da0:	d10c      	bne.n	8001dbc <__aeabi_dmul+0x558>
 8001da2:	430c      	orrs	r4, r1
 8001da4:	0324      	lsls	r4, r4, #12
 8001da6:	003a      	movs	r2, r7
 8001da8:	4b0e      	ldr	r3, [pc, #56]	; (8001de4 <__aeabi_dmul+0x580>)
 8001daa:	0b24      	lsrs	r4, r4, #12
 8001dac:	e5cc      	b.n	8001948 <__aeabi_dmul+0xe4>
 8001dae:	2e0b      	cmp	r6, #11
 8001db0:	d000      	beq.n	8001db4 <__aeabi_dmul+0x550>
 8001db2:	e5a2      	b.n	80018fa <__aeabi_dmul+0x96>
 8001db4:	468b      	mov	fp, r1
 8001db6:	46aa      	mov	sl, r5
 8001db8:	9300      	str	r3, [sp, #0]
 8001dba:	e5f7      	b.n	80019ac <__aeabi_dmul+0x148>
 8001dbc:	2480      	movs	r4, #128	; 0x80
 8001dbe:	465b      	mov	r3, fp
 8001dc0:	0324      	lsls	r4, r4, #12
 8001dc2:	431c      	orrs	r4, r3
 8001dc4:	0324      	lsls	r4, r4, #12
 8001dc6:	4642      	mov	r2, r8
 8001dc8:	4655      	mov	r5, sl
 8001dca:	4b06      	ldr	r3, [pc, #24]	; (8001de4 <__aeabi_dmul+0x580>)
 8001dcc:	0b24      	lsrs	r4, r4, #12
 8001dce:	e5bb      	b.n	8001948 <__aeabi_dmul+0xe4>
 8001dd0:	464d      	mov	r5, r9
 8001dd2:	0021      	movs	r1, r4
 8001dd4:	2303      	movs	r3, #3
 8001dd6:	e7db      	b.n	8001d90 <__aeabi_dmul+0x52c>
 8001dd8:	fffffc0d 	.word	0xfffffc0d
 8001ddc:	0000043e 	.word	0x0000043e
 8001de0:	0000041e 	.word	0x0000041e
 8001de4:	000007ff 	.word	0x000007ff

08001de8 <__aeabi_dsub>:
 8001de8:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001dea:	4657      	mov	r7, sl
 8001dec:	464e      	mov	r6, r9
 8001dee:	4645      	mov	r5, r8
 8001df0:	46de      	mov	lr, fp
 8001df2:	b5e0      	push	{r5, r6, r7, lr}
 8001df4:	000d      	movs	r5, r1
 8001df6:	0004      	movs	r4, r0
 8001df8:	0019      	movs	r1, r3
 8001dfa:	0010      	movs	r0, r2
 8001dfc:	032b      	lsls	r3, r5, #12
 8001dfe:	0a5b      	lsrs	r3, r3, #9
 8001e00:	0f62      	lsrs	r2, r4, #29
 8001e02:	431a      	orrs	r2, r3
 8001e04:	00e3      	lsls	r3, r4, #3
 8001e06:	030c      	lsls	r4, r1, #12
 8001e08:	0a64      	lsrs	r4, r4, #9
 8001e0a:	0f47      	lsrs	r7, r0, #29
 8001e0c:	4327      	orrs	r7, r4
 8001e0e:	4cd0      	ldr	r4, [pc, #832]	; (8002150 <__aeabi_dsub+0x368>)
 8001e10:	006e      	lsls	r6, r5, #1
 8001e12:	4691      	mov	r9, r2
 8001e14:	b083      	sub	sp, #12
 8001e16:	004a      	lsls	r2, r1, #1
 8001e18:	00c0      	lsls	r0, r0, #3
 8001e1a:	4698      	mov	r8, r3
 8001e1c:	46a2      	mov	sl, r4
 8001e1e:	0d76      	lsrs	r6, r6, #21
 8001e20:	0fed      	lsrs	r5, r5, #31
 8001e22:	0d52      	lsrs	r2, r2, #21
 8001e24:	0fc9      	lsrs	r1, r1, #31
 8001e26:	9001      	str	r0, [sp, #4]
 8001e28:	42a2      	cmp	r2, r4
 8001e2a:	d100      	bne.n	8001e2e <__aeabi_dsub+0x46>
 8001e2c:	e0b9      	b.n	8001fa2 <__aeabi_dsub+0x1ba>
 8001e2e:	2401      	movs	r4, #1
 8001e30:	4061      	eors	r1, r4
 8001e32:	468b      	mov	fp, r1
 8001e34:	428d      	cmp	r5, r1
 8001e36:	d100      	bne.n	8001e3a <__aeabi_dsub+0x52>
 8001e38:	e08d      	b.n	8001f56 <__aeabi_dsub+0x16e>
 8001e3a:	1ab4      	subs	r4, r6, r2
 8001e3c:	46a4      	mov	ip, r4
 8001e3e:	2c00      	cmp	r4, #0
 8001e40:	dc00      	bgt.n	8001e44 <__aeabi_dsub+0x5c>
 8001e42:	e0b7      	b.n	8001fb4 <__aeabi_dsub+0x1cc>
 8001e44:	2a00      	cmp	r2, #0
 8001e46:	d100      	bne.n	8001e4a <__aeabi_dsub+0x62>
 8001e48:	e0cb      	b.n	8001fe2 <__aeabi_dsub+0x1fa>
 8001e4a:	4ac1      	ldr	r2, [pc, #772]	; (8002150 <__aeabi_dsub+0x368>)
 8001e4c:	4296      	cmp	r6, r2
 8001e4e:	d100      	bne.n	8001e52 <__aeabi_dsub+0x6a>
 8001e50:	e186      	b.n	8002160 <__aeabi_dsub+0x378>
 8001e52:	2280      	movs	r2, #128	; 0x80
 8001e54:	0412      	lsls	r2, r2, #16
 8001e56:	4317      	orrs	r7, r2
 8001e58:	4662      	mov	r2, ip
 8001e5a:	2a38      	cmp	r2, #56	; 0x38
 8001e5c:	dd00      	ble.n	8001e60 <__aeabi_dsub+0x78>
 8001e5e:	e1a4      	b.n	80021aa <__aeabi_dsub+0x3c2>
 8001e60:	2a1f      	cmp	r2, #31
 8001e62:	dd00      	ble.n	8001e66 <__aeabi_dsub+0x7e>
 8001e64:	e21d      	b.n	80022a2 <__aeabi_dsub+0x4ba>
 8001e66:	4661      	mov	r1, ip
 8001e68:	2220      	movs	r2, #32
 8001e6a:	003c      	movs	r4, r7
 8001e6c:	1a52      	subs	r2, r2, r1
 8001e6e:	0001      	movs	r1, r0
 8001e70:	4090      	lsls	r0, r2
 8001e72:	4094      	lsls	r4, r2
 8001e74:	1e42      	subs	r2, r0, #1
 8001e76:	4190      	sbcs	r0, r2
 8001e78:	4662      	mov	r2, ip
 8001e7a:	46a0      	mov	r8, r4
 8001e7c:	4664      	mov	r4, ip
 8001e7e:	40d7      	lsrs	r7, r2
 8001e80:	464a      	mov	r2, r9
 8001e82:	40e1      	lsrs	r1, r4
 8001e84:	4644      	mov	r4, r8
 8001e86:	1bd2      	subs	r2, r2, r7
 8001e88:	4691      	mov	r9, r2
 8001e8a:	430c      	orrs	r4, r1
 8001e8c:	4304      	orrs	r4, r0
 8001e8e:	1b1c      	subs	r4, r3, r4
 8001e90:	42a3      	cmp	r3, r4
 8001e92:	4192      	sbcs	r2, r2
 8001e94:	464b      	mov	r3, r9
 8001e96:	4252      	negs	r2, r2
 8001e98:	1a9b      	subs	r3, r3, r2
 8001e9a:	469a      	mov	sl, r3
 8001e9c:	4653      	mov	r3, sl
 8001e9e:	021b      	lsls	r3, r3, #8
 8001ea0:	d400      	bmi.n	8001ea4 <__aeabi_dsub+0xbc>
 8001ea2:	e12b      	b.n	80020fc <__aeabi_dsub+0x314>
 8001ea4:	4653      	mov	r3, sl
 8001ea6:	025a      	lsls	r2, r3, #9
 8001ea8:	0a53      	lsrs	r3, r2, #9
 8001eaa:	469a      	mov	sl, r3
 8001eac:	4653      	mov	r3, sl
 8001eae:	2b00      	cmp	r3, #0
 8001eb0:	d100      	bne.n	8001eb4 <__aeabi_dsub+0xcc>
 8001eb2:	e166      	b.n	8002182 <__aeabi_dsub+0x39a>
 8001eb4:	4650      	mov	r0, sl
 8001eb6:	f000 fc91 	bl	80027dc <__clzsi2>
 8001eba:	0003      	movs	r3, r0
 8001ebc:	3b08      	subs	r3, #8
 8001ebe:	2220      	movs	r2, #32
 8001ec0:	0020      	movs	r0, r4
 8001ec2:	1ad2      	subs	r2, r2, r3
 8001ec4:	4651      	mov	r1, sl
 8001ec6:	40d0      	lsrs	r0, r2
 8001ec8:	4099      	lsls	r1, r3
 8001eca:	0002      	movs	r2, r0
 8001ecc:	409c      	lsls	r4, r3
 8001ece:	430a      	orrs	r2, r1
 8001ed0:	429e      	cmp	r6, r3
 8001ed2:	dd00      	ble.n	8001ed6 <__aeabi_dsub+0xee>
 8001ed4:	e164      	b.n	80021a0 <__aeabi_dsub+0x3b8>
 8001ed6:	1b9b      	subs	r3, r3, r6
 8001ed8:	1c59      	adds	r1, r3, #1
 8001eda:	291f      	cmp	r1, #31
 8001edc:	dd00      	ble.n	8001ee0 <__aeabi_dsub+0xf8>
 8001ede:	e0fe      	b.n	80020de <__aeabi_dsub+0x2f6>
 8001ee0:	2320      	movs	r3, #32
 8001ee2:	0010      	movs	r0, r2
 8001ee4:	0026      	movs	r6, r4
 8001ee6:	1a5b      	subs	r3, r3, r1
 8001ee8:	409c      	lsls	r4, r3
 8001eea:	4098      	lsls	r0, r3
 8001eec:	40ce      	lsrs	r6, r1
 8001eee:	40ca      	lsrs	r2, r1
 8001ef0:	1e63      	subs	r3, r4, #1
 8001ef2:	419c      	sbcs	r4, r3
 8001ef4:	4330      	orrs	r0, r6
 8001ef6:	4692      	mov	sl, r2
 8001ef8:	2600      	movs	r6, #0
 8001efa:	4304      	orrs	r4, r0
 8001efc:	0763      	lsls	r3, r4, #29
 8001efe:	d009      	beq.n	8001f14 <__aeabi_dsub+0x12c>
 8001f00:	230f      	movs	r3, #15
 8001f02:	4023      	ands	r3, r4
 8001f04:	2b04      	cmp	r3, #4
 8001f06:	d005      	beq.n	8001f14 <__aeabi_dsub+0x12c>
 8001f08:	1d23      	adds	r3, r4, #4
 8001f0a:	42a3      	cmp	r3, r4
 8001f0c:	41a4      	sbcs	r4, r4
 8001f0e:	4264      	negs	r4, r4
 8001f10:	44a2      	add	sl, r4
 8001f12:	001c      	movs	r4, r3
 8001f14:	4653      	mov	r3, sl
 8001f16:	021b      	lsls	r3, r3, #8
 8001f18:	d400      	bmi.n	8001f1c <__aeabi_dsub+0x134>
 8001f1a:	e0f2      	b.n	8002102 <__aeabi_dsub+0x31a>
 8001f1c:	4b8c      	ldr	r3, [pc, #560]	; (8002150 <__aeabi_dsub+0x368>)
 8001f1e:	3601      	adds	r6, #1
 8001f20:	429e      	cmp	r6, r3
 8001f22:	d100      	bne.n	8001f26 <__aeabi_dsub+0x13e>
 8001f24:	e10f      	b.n	8002146 <__aeabi_dsub+0x35e>
 8001f26:	4653      	mov	r3, sl
 8001f28:	498a      	ldr	r1, [pc, #552]	; (8002154 <__aeabi_dsub+0x36c>)
 8001f2a:	08e4      	lsrs	r4, r4, #3
 8001f2c:	400b      	ands	r3, r1
 8001f2e:	0019      	movs	r1, r3
 8001f30:	075b      	lsls	r3, r3, #29
 8001f32:	4323      	orrs	r3, r4
 8001f34:	0572      	lsls	r2, r6, #21
 8001f36:	024c      	lsls	r4, r1, #9
 8001f38:	0b24      	lsrs	r4, r4, #12
 8001f3a:	0d52      	lsrs	r2, r2, #21
 8001f3c:	0512      	lsls	r2, r2, #20
 8001f3e:	4322      	orrs	r2, r4
 8001f40:	07ed      	lsls	r5, r5, #31
 8001f42:	432a      	orrs	r2, r5
 8001f44:	0018      	movs	r0, r3
 8001f46:	0011      	movs	r1, r2
 8001f48:	b003      	add	sp, #12
 8001f4a:	bcf0      	pop	{r4, r5, r6, r7}
 8001f4c:	46bb      	mov	fp, r7
 8001f4e:	46b2      	mov	sl, r6
 8001f50:	46a9      	mov	r9, r5
 8001f52:	46a0      	mov	r8, r4
 8001f54:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001f56:	1ab4      	subs	r4, r6, r2
 8001f58:	46a4      	mov	ip, r4
 8001f5a:	2c00      	cmp	r4, #0
 8001f5c:	dd59      	ble.n	8002012 <__aeabi_dsub+0x22a>
 8001f5e:	2a00      	cmp	r2, #0
 8001f60:	d100      	bne.n	8001f64 <__aeabi_dsub+0x17c>
 8001f62:	e0b0      	b.n	80020c6 <__aeabi_dsub+0x2de>
 8001f64:	4556      	cmp	r6, sl
 8001f66:	d100      	bne.n	8001f6a <__aeabi_dsub+0x182>
 8001f68:	e0fa      	b.n	8002160 <__aeabi_dsub+0x378>
 8001f6a:	2280      	movs	r2, #128	; 0x80
 8001f6c:	0412      	lsls	r2, r2, #16
 8001f6e:	4317      	orrs	r7, r2
 8001f70:	4662      	mov	r2, ip
 8001f72:	2a38      	cmp	r2, #56	; 0x38
 8001f74:	dd00      	ble.n	8001f78 <__aeabi_dsub+0x190>
 8001f76:	e0d4      	b.n	8002122 <__aeabi_dsub+0x33a>
 8001f78:	2a1f      	cmp	r2, #31
 8001f7a:	dc00      	bgt.n	8001f7e <__aeabi_dsub+0x196>
 8001f7c:	e1c0      	b.n	8002300 <__aeabi_dsub+0x518>
 8001f7e:	0039      	movs	r1, r7
 8001f80:	3a20      	subs	r2, #32
 8001f82:	40d1      	lsrs	r1, r2
 8001f84:	4662      	mov	r2, ip
 8001f86:	2a20      	cmp	r2, #32
 8001f88:	d006      	beq.n	8001f98 <__aeabi_dsub+0x1b0>
 8001f8a:	4664      	mov	r4, ip
 8001f8c:	2240      	movs	r2, #64	; 0x40
 8001f8e:	1b12      	subs	r2, r2, r4
 8001f90:	003c      	movs	r4, r7
 8001f92:	4094      	lsls	r4, r2
 8001f94:	4304      	orrs	r4, r0
 8001f96:	9401      	str	r4, [sp, #4]
 8001f98:	9c01      	ldr	r4, [sp, #4]
 8001f9a:	1e62      	subs	r2, r4, #1
 8001f9c:	4194      	sbcs	r4, r2
 8001f9e:	430c      	orrs	r4, r1
 8001fa0:	e0c3      	b.n	800212a <__aeabi_dsub+0x342>
 8001fa2:	003c      	movs	r4, r7
 8001fa4:	4304      	orrs	r4, r0
 8001fa6:	d02b      	beq.n	8002000 <__aeabi_dsub+0x218>
 8001fa8:	468b      	mov	fp, r1
 8001faa:	428d      	cmp	r5, r1
 8001fac:	d02e      	beq.n	800200c <__aeabi_dsub+0x224>
 8001fae:	4c6a      	ldr	r4, [pc, #424]	; (8002158 <__aeabi_dsub+0x370>)
 8001fb0:	46a4      	mov	ip, r4
 8001fb2:	44b4      	add	ip, r6
 8001fb4:	4664      	mov	r4, ip
 8001fb6:	2c00      	cmp	r4, #0
 8001fb8:	d05f      	beq.n	800207a <__aeabi_dsub+0x292>
 8001fba:	1b94      	subs	r4, r2, r6
 8001fbc:	46a4      	mov	ip, r4
 8001fbe:	2e00      	cmp	r6, #0
 8001fc0:	d000      	beq.n	8001fc4 <__aeabi_dsub+0x1dc>
 8001fc2:	e120      	b.n	8002206 <__aeabi_dsub+0x41e>
 8001fc4:	464c      	mov	r4, r9
 8001fc6:	431c      	orrs	r4, r3
 8001fc8:	d100      	bne.n	8001fcc <__aeabi_dsub+0x1e4>
 8001fca:	e1c7      	b.n	800235c <__aeabi_dsub+0x574>
 8001fcc:	4661      	mov	r1, ip
 8001fce:	1e4c      	subs	r4, r1, #1
 8001fd0:	2901      	cmp	r1, #1
 8001fd2:	d100      	bne.n	8001fd6 <__aeabi_dsub+0x1ee>
 8001fd4:	e223      	b.n	800241e <__aeabi_dsub+0x636>
 8001fd6:	4d5e      	ldr	r5, [pc, #376]	; (8002150 <__aeabi_dsub+0x368>)
 8001fd8:	45ac      	cmp	ip, r5
 8001fda:	d100      	bne.n	8001fde <__aeabi_dsub+0x1f6>
 8001fdc:	e1d8      	b.n	8002390 <__aeabi_dsub+0x5a8>
 8001fde:	46a4      	mov	ip, r4
 8001fe0:	e11a      	b.n	8002218 <__aeabi_dsub+0x430>
 8001fe2:	003a      	movs	r2, r7
 8001fe4:	4302      	orrs	r2, r0
 8001fe6:	d100      	bne.n	8001fea <__aeabi_dsub+0x202>
 8001fe8:	e0e4      	b.n	80021b4 <__aeabi_dsub+0x3cc>
 8001fea:	0022      	movs	r2, r4
 8001fec:	3a01      	subs	r2, #1
 8001fee:	2c01      	cmp	r4, #1
 8001ff0:	d100      	bne.n	8001ff4 <__aeabi_dsub+0x20c>
 8001ff2:	e1c3      	b.n	800237c <__aeabi_dsub+0x594>
 8001ff4:	4956      	ldr	r1, [pc, #344]	; (8002150 <__aeabi_dsub+0x368>)
 8001ff6:	428c      	cmp	r4, r1
 8001ff8:	d100      	bne.n	8001ffc <__aeabi_dsub+0x214>
 8001ffa:	e0b1      	b.n	8002160 <__aeabi_dsub+0x378>
 8001ffc:	4694      	mov	ip, r2
 8001ffe:	e72b      	b.n	8001e58 <__aeabi_dsub+0x70>
 8002000:	2401      	movs	r4, #1
 8002002:	4061      	eors	r1, r4
 8002004:	468b      	mov	fp, r1
 8002006:	428d      	cmp	r5, r1
 8002008:	d000      	beq.n	800200c <__aeabi_dsub+0x224>
 800200a:	e716      	b.n	8001e3a <__aeabi_dsub+0x52>
 800200c:	4952      	ldr	r1, [pc, #328]	; (8002158 <__aeabi_dsub+0x370>)
 800200e:	468c      	mov	ip, r1
 8002010:	44b4      	add	ip, r6
 8002012:	4664      	mov	r4, ip
 8002014:	2c00      	cmp	r4, #0
 8002016:	d100      	bne.n	800201a <__aeabi_dsub+0x232>
 8002018:	e0d3      	b.n	80021c2 <__aeabi_dsub+0x3da>
 800201a:	1b91      	subs	r1, r2, r6
 800201c:	468c      	mov	ip, r1
 800201e:	2e00      	cmp	r6, #0
 8002020:	d100      	bne.n	8002024 <__aeabi_dsub+0x23c>
 8002022:	e15e      	b.n	80022e2 <__aeabi_dsub+0x4fa>
 8002024:	494a      	ldr	r1, [pc, #296]	; (8002150 <__aeabi_dsub+0x368>)
 8002026:	428a      	cmp	r2, r1
 8002028:	d100      	bne.n	800202c <__aeabi_dsub+0x244>
 800202a:	e1be      	b.n	80023aa <__aeabi_dsub+0x5c2>
 800202c:	2180      	movs	r1, #128	; 0x80
 800202e:	464c      	mov	r4, r9
 8002030:	0409      	lsls	r1, r1, #16
 8002032:	430c      	orrs	r4, r1
 8002034:	46a1      	mov	r9, r4
 8002036:	4661      	mov	r1, ip
 8002038:	2938      	cmp	r1, #56	; 0x38
 800203a:	dd00      	ble.n	800203e <__aeabi_dsub+0x256>
 800203c:	e1ba      	b.n	80023b4 <__aeabi_dsub+0x5cc>
 800203e:	291f      	cmp	r1, #31
 8002040:	dd00      	ble.n	8002044 <__aeabi_dsub+0x25c>
 8002042:	e227      	b.n	8002494 <__aeabi_dsub+0x6ac>
 8002044:	2420      	movs	r4, #32
 8002046:	1a64      	subs	r4, r4, r1
 8002048:	4649      	mov	r1, r9
 800204a:	40a1      	lsls	r1, r4
 800204c:	001e      	movs	r6, r3
 800204e:	4688      	mov	r8, r1
 8002050:	4661      	mov	r1, ip
 8002052:	40a3      	lsls	r3, r4
 8002054:	40ce      	lsrs	r6, r1
 8002056:	4641      	mov	r1, r8
 8002058:	1e5c      	subs	r4, r3, #1
 800205a:	41a3      	sbcs	r3, r4
 800205c:	4331      	orrs	r1, r6
 800205e:	4319      	orrs	r1, r3
 8002060:	000c      	movs	r4, r1
 8002062:	4663      	mov	r3, ip
 8002064:	4649      	mov	r1, r9
 8002066:	40d9      	lsrs	r1, r3
 8002068:	187f      	adds	r7, r7, r1
 800206a:	1824      	adds	r4, r4, r0
 800206c:	4284      	cmp	r4, r0
 800206e:	419b      	sbcs	r3, r3
 8002070:	425b      	negs	r3, r3
 8002072:	469a      	mov	sl, r3
 8002074:	0016      	movs	r6, r2
 8002076:	44ba      	add	sl, r7
 8002078:	e05d      	b.n	8002136 <__aeabi_dsub+0x34e>
 800207a:	4c38      	ldr	r4, [pc, #224]	; (800215c <__aeabi_dsub+0x374>)
 800207c:	1c72      	adds	r2, r6, #1
 800207e:	4222      	tst	r2, r4
 8002080:	d000      	beq.n	8002084 <__aeabi_dsub+0x29c>
 8002082:	e0df      	b.n	8002244 <__aeabi_dsub+0x45c>
 8002084:	464a      	mov	r2, r9
 8002086:	431a      	orrs	r2, r3
 8002088:	2e00      	cmp	r6, #0
 800208a:	d000      	beq.n	800208e <__aeabi_dsub+0x2a6>
 800208c:	e15c      	b.n	8002348 <__aeabi_dsub+0x560>
 800208e:	2a00      	cmp	r2, #0
 8002090:	d100      	bne.n	8002094 <__aeabi_dsub+0x2ac>
 8002092:	e1cf      	b.n	8002434 <__aeabi_dsub+0x64c>
 8002094:	003a      	movs	r2, r7
 8002096:	4302      	orrs	r2, r0
 8002098:	d100      	bne.n	800209c <__aeabi_dsub+0x2b4>
 800209a:	e17f      	b.n	800239c <__aeabi_dsub+0x5b4>
 800209c:	1a1c      	subs	r4, r3, r0
 800209e:	464a      	mov	r2, r9
 80020a0:	42a3      	cmp	r3, r4
 80020a2:	4189      	sbcs	r1, r1
 80020a4:	1bd2      	subs	r2, r2, r7
 80020a6:	4249      	negs	r1, r1
 80020a8:	1a52      	subs	r2, r2, r1
 80020aa:	4692      	mov	sl, r2
 80020ac:	0212      	lsls	r2, r2, #8
 80020ae:	d400      	bmi.n	80020b2 <__aeabi_dsub+0x2ca>
 80020b0:	e20a      	b.n	80024c8 <__aeabi_dsub+0x6e0>
 80020b2:	1ac4      	subs	r4, r0, r3
 80020b4:	42a0      	cmp	r0, r4
 80020b6:	4180      	sbcs	r0, r0
 80020b8:	464b      	mov	r3, r9
 80020ba:	4240      	negs	r0, r0
 80020bc:	1aff      	subs	r7, r7, r3
 80020be:	1a3b      	subs	r3, r7, r0
 80020c0:	469a      	mov	sl, r3
 80020c2:	465d      	mov	r5, fp
 80020c4:	e71a      	b.n	8001efc <__aeabi_dsub+0x114>
 80020c6:	003a      	movs	r2, r7
 80020c8:	4302      	orrs	r2, r0
 80020ca:	d073      	beq.n	80021b4 <__aeabi_dsub+0x3cc>
 80020cc:	0022      	movs	r2, r4
 80020ce:	3a01      	subs	r2, #1
 80020d0:	2c01      	cmp	r4, #1
 80020d2:	d100      	bne.n	80020d6 <__aeabi_dsub+0x2ee>
 80020d4:	e0cb      	b.n	800226e <__aeabi_dsub+0x486>
 80020d6:	4554      	cmp	r4, sl
 80020d8:	d042      	beq.n	8002160 <__aeabi_dsub+0x378>
 80020da:	4694      	mov	ip, r2
 80020dc:	e748      	b.n	8001f70 <__aeabi_dsub+0x188>
 80020de:	0010      	movs	r0, r2
 80020e0:	3b1f      	subs	r3, #31
 80020e2:	40d8      	lsrs	r0, r3
 80020e4:	2920      	cmp	r1, #32
 80020e6:	d003      	beq.n	80020f0 <__aeabi_dsub+0x308>
 80020e8:	2340      	movs	r3, #64	; 0x40
 80020ea:	1a5b      	subs	r3, r3, r1
 80020ec:	409a      	lsls	r2, r3
 80020ee:	4314      	orrs	r4, r2
 80020f0:	1e63      	subs	r3, r4, #1
 80020f2:	419c      	sbcs	r4, r3
 80020f4:	2300      	movs	r3, #0
 80020f6:	2600      	movs	r6, #0
 80020f8:	469a      	mov	sl, r3
 80020fa:	4304      	orrs	r4, r0
 80020fc:	0763      	lsls	r3, r4, #29
 80020fe:	d000      	beq.n	8002102 <__aeabi_dsub+0x31a>
 8002100:	e6fe      	b.n	8001f00 <__aeabi_dsub+0x118>
 8002102:	4652      	mov	r2, sl
 8002104:	08e3      	lsrs	r3, r4, #3
 8002106:	0752      	lsls	r2, r2, #29
 8002108:	4313      	orrs	r3, r2
 800210a:	4652      	mov	r2, sl
 800210c:	46b4      	mov	ip, r6
 800210e:	08d2      	lsrs	r2, r2, #3
 8002110:	490f      	ldr	r1, [pc, #60]	; (8002150 <__aeabi_dsub+0x368>)
 8002112:	458c      	cmp	ip, r1
 8002114:	d02a      	beq.n	800216c <__aeabi_dsub+0x384>
 8002116:	0312      	lsls	r2, r2, #12
 8002118:	0b14      	lsrs	r4, r2, #12
 800211a:	4662      	mov	r2, ip
 800211c:	0552      	lsls	r2, r2, #21
 800211e:	0d52      	lsrs	r2, r2, #21
 8002120:	e70c      	b.n	8001f3c <__aeabi_dsub+0x154>
 8002122:	003c      	movs	r4, r7
 8002124:	4304      	orrs	r4, r0
 8002126:	1e62      	subs	r2, r4, #1
 8002128:	4194      	sbcs	r4, r2
 800212a:	18e4      	adds	r4, r4, r3
 800212c:	429c      	cmp	r4, r3
 800212e:	4192      	sbcs	r2, r2
 8002130:	4252      	negs	r2, r2
 8002132:	444a      	add	r2, r9
 8002134:	4692      	mov	sl, r2
 8002136:	4653      	mov	r3, sl
 8002138:	021b      	lsls	r3, r3, #8
 800213a:	d5df      	bpl.n	80020fc <__aeabi_dsub+0x314>
 800213c:	4b04      	ldr	r3, [pc, #16]	; (8002150 <__aeabi_dsub+0x368>)
 800213e:	3601      	adds	r6, #1
 8002140:	429e      	cmp	r6, r3
 8002142:	d000      	beq.n	8002146 <__aeabi_dsub+0x35e>
 8002144:	e0a0      	b.n	8002288 <__aeabi_dsub+0x4a0>
 8002146:	0032      	movs	r2, r6
 8002148:	2400      	movs	r4, #0
 800214a:	2300      	movs	r3, #0
 800214c:	e6f6      	b.n	8001f3c <__aeabi_dsub+0x154>
 800214e:	46c0      	nop			; (mov r8, r8)
 8002150:	000007ff 	.word	0x000007ff
 8002154:	ff7fffff 	.word	0xff7fffff
 8002158:	fffff801 	.word	0xfffff801
 800215c:	000007fe 	.word	0x000007fe
 8002160:	08db      	lsrs	r3, r3, #3
 8002162:	464a      	mov	r2, r9
 8002164:	0752      	lsls	r2, r2, #29
 8002166:	4313      	orrs	r3, r2
 8002168:	464a      	mov	r2, r9
 800216a:	08d2      	lsrs	r2, r2, #3
 800216c:	0019      	movs	r1, r3
 800216e:	4311      	orrs	r1, r2
 8002170:	d100      	bne.n	8002174 <__aeabi_dsub+0x38c>
 8002172:	e1b5      	b.n	80024e0 <__aeabi_dsub+0x6f8>
 8002174:	2480      	movs	r4, #128	; 0x80
 8002176:	0324      	lsls	r4, r4, #12
 8002178:	4314      	orrs	r4, r2
 800217a:	0324      	lsls	r4, r4, #12
 800217c:	4ad5      	ldr	r2, [pc, #852]	; (80024d4 <__aeabi_dsub+0x6ec>)
 800217e:	0b24      	lsrs	r4, r4, #12
 8002180:	e6dc      	b.n	8001f3c <__aeabi_dsub+0x154>
 8002182:	0020      	movs	r0, r4
 8002184:	f000 fb2a 	bl	80027dc <__clzsi2>
 8002188:	0003      	movs	r3, r0
 800218a:	3318      	adds	r3, #24
 800218c:	2b1f      	cmp	r3, #31
 800218e:	dc00      	bgt.n	8002192 <__aeabi_dsub+0x3aa>
 8002190:	e695      	b.n	8001ebe <__aeabi_dsub+0xd6>
 8002192:	0022      	movs	r2, r4
 8002194:	3808      	subs	r0, #8
 8002196:	4082      	lsls	r2, r0
 8002198:	2400      	movs	r4, #0
 800219a:	429e      	cmp	r6, r3
 800219c:	dc00      	bgt.n	80021a0 <__aeabi_dsub+0x3b8>
 800219e:	e69a      	b.n	8001ed6 <__aeabi_dsub+0xee>
 80021a0:	1af6      	subs	r6, r6, r3
 80021a2:	4bcd      	ldr	r3, [pc, #820]	; (80024d8 <__aeabi_dsub+0x6f0>)
 80021a4:	401a      	ands	r2, r3
 80021a6:	4692      	mov	sl, r2
 80021a8:	e6a8      	b.n	8001efc <__aeabi_dsub+0x114>
 80021aa:	003c      	movs	r4, r7
 80021ac:	4304      	orrs	r4, r0
 80021ae:	1e62      	subs	r2, r4, #1
 80021b0:	4194      	sbcs	r4, r2
 80021b2:	e66c      	b.n	8001e8e <__aeabi_dsub+0xa6>
 80021b4:	464a      	mov	r2, r9
 80021b6:	08db      	lsrs	r3, r3, #3
 80021b8:	0752      	lsls	r2, r2, #29
 80021ba:	4313      	orrs	r3, r2
 80021bc:	464a      	mov	r2, r9
 80021be:	08d2      	lsrs	r2, r2, #3
 80021c0:	e7a6      	b.n	8002110 <__aeabi_dsub+0x328>
 80021c2:	4cc6      	ldr	r4, [pc, #792]	; (80024dc <__aeabi_dsub+0x6f4>)
 80021c4:	1c72      	adds	r2, r6, #1
 80021c6:	4222      	tst	r2, r4
 80021c8:	d000      	beq.n	80021cc <__aeabi_dsub+0x3e4>
 80021ca:	e0ac      	b.n	8002326 <__aeabi_dsub+0x53e>
 80021cc:	464a      	mov	r2, r9
 80021ce:	431a      	orrs	r2, r3
 80021d0:	2e00      	cmp	r6, #0
 80021d2:	d000      	beq.n	80021d6 <__aeabi_dsub+0x3ee>
 80021d4:	e105      	b.n	80023e2 <__aeabi_dsub+0x5fa>
 80021d6:	2a00      	cmp	r2, #0
 80021d8:	d100      	bne.n	80021dc <__aeabi_dsub+0x3f4>
 80021da:	e156      	b.n	800248a <__aeabi_dsub+0x6a2>
 80021dc:	003a      	movs	r2, r7
 80021de:	4302      	orrs	r2, r0
 80021e0:	d100      	bne.n	80021e4 <__aeabi_dsub+0x3fc>
 80021e2:	e0db      	b.n	800239c <__aeabi_dsub+0x5b4>
 80021e4:	181c      	adds	r4, r3, r0
 80021e6:	429c      	cmp	r4, r3
 80021e8:	419b      	sbcs	r3, r3
 80021ea:	444f      	add	r7, r9
 80021ec:	46ba      	mov	sl, r7
 80021ee:	425b      	negs	r3, r3
 80021f0:	449a      	add	sl, r3
 80021f2:	4653      	mov	r3, sl
 80021f4:	021b      	lsls	r3, r3, #8
 80021f6:	d400      	bmi.n	80021fa <__aeabi_dsub+0x412>
 80021f8:	e780      	b.n	80020fc <__aeabi_dsub+0x314>
 80021fa:	4652      	mov	r2, sl
 80021fc:	4bb6      	ldr	r3, [pc, #728]	; (80024d8 <__aeabi_dsub+0x6f0>)
 80021fe:	2601      	movs	r6, #1
 8002200:	401a      	ands	r2, r3
 8002202:	4692      	mov	sl, r2
 8002204:	e77a      	b.n	80020fc <__aeabi_dsub+0x314>
 8002206:	4cb3      	ldr	r4, [pc, #716]	; (80024d4 <__aeabi_dsub+0x6ec>)
 8002208:	42a2      	cmp	r2, r4
 800220a:	d100      	bne.n	800220e <__aeabi_dsub+0x426>
 800220c:	e0c0      	b.n	8002390 <__aeabi_dsub+0x5a8>
 800220e:	2480      	movs	r4, #128	; 0x80
 8002210:	464d      	mov	r5, r9
 8002212:	0424      	lsls	r4, r4, #16
 8002214:	4325      	orrs	r5, r4
 8002216:	46a9      	mov	r9, r5
 8002218:	4664      	mov	r4, ip
 800221a:	2c38      	cmp	r4, #56	; 0x38
 800221c:	dc53      	bgt.n	80022c6 <__aeabi_dsub+0x4de>
 800221e:	4661      	mov	r1, ip
 8002220:	2c1f      	cmp	r4, #31
 8002222:	dd00      	ble.n	8002226 <__aeabi_dsub+0x43e>
 8002224:	e0cd      	b.n	80023c2 <__aeabi_dsub+0x5da>
 8002226:	2520      	movs	r5, #32
 8002228:	001e      	movs	r6, r3
 800222a:	1b2d      	subs	r5, r5, r4
 800222c:	464c      	mov	r4, r9
 800222e:	40ab      	lsls	r3, r5
 8002230:	40ac      	lsls	r4, r5
 8002232:	40ce      	lsrs	r6, r1
 8002234:	1e5d      	subs	r5, r3, #1
 8002236:	41ab      	sbcs	r3, r5
 8002238:	4334      	orrs	r4, r6
 800223a:	4323      	orrs	r3, r4
 800223c:	464c      	mov	r4, r9
 800223e:	40cc      	lsrs	r4, r1
 8002240:	1b3f      	subs	r7, r7, r4
 8002242:	e045      	b.n	80022d0 <__aeabi_dsub+0x4e8>
 8002244:	464a      	mov	r2, r9
 8002246:	1a1c      	subs	r4, r3, r0
 8002248:	1bd1      	subs	r1, r2, r7
 800224a:	42a3      	cmp	r3, r4
 800224c:	4192      	sbcs	r2, r2
 800224e:	4252      	negs	r2, r2
 8002250:	4692      	mov	sl, r2
 8002252:	000a      	movs	r2, r1
 8002254:	4651      	mov	r1, sl
 8002256:	1a52      	subs	r2, r2, r1
 8002258:	4692      	mov	sl, r2
 800225a:	0212      	lsls	r2, r2, #8
 800225c:	d500      	bpl.n	8002260 <__aeabi_dsub+0x478>
 800225e:	e083      	b.n	8002368 <__aeabi_dsub+0x580>
 8002260:	4653      	mov	r3, sl
 8002262:	4323      	orrs	r3, r4
 8002264:	d000      	beq.n	8002268 <__aeabi_dsub+0x480>
 8002266:	e621      	b.n	8001eac <__aeabi_dsub+0xc4>
 8002268:	2200      	movs	r2, #0
 800226a:	2500      	movs	r5, #0
 800226c:	e753      	b.n	8002116 <__aeabi_dsub+0x32e>
 800226e:	181c      	adds	r4, r3, r0
 8002270:	429c      	cmp	r4, r3
 8002272:	419b      	sbcs	r3, r3
 8002274:	444f      	add	r7, r9
 8002276:	46ba      	mov	sl, r7
 8002278:	425b      	negs	r3, r3
 800227a:	449a      	add	sl, r3
 800227c:	4653      	mov	r3, sl
 800227e:	2601      	movs	r6, #1
 8002280:	021b      	lsls	r3, r3, #8
 8002282:	d400      	bmi.n	8002286 <__aeabi_dsub+0x49e>
 8002284:	e73a      	b.n	80020fc <__aeabi_dsub+0x314>
 8002286:	2602      	movs	r6, #2
 8002288:	4652      	mov	r2, sl
 800228a:	4b93      	ldr	r3, [pc, #588]	; (80024d8 <__aeabi_dsub+0x6f0>)
 800228c:	2101      	movs	r1, #1
 800228e:	401a      	ands	r2, r3
 8002290:	0013      	movs	r3, r2
 8002292:	4021      	ands	r1, r4
 8002294:	0862      	lsrs	r2, r4, #1
 8002296:	430a      	orrs	r2, r1
 8002298:	07dc      	lsls	r4, r3, #31
 800229a:	085b      	lsrs	r3, r3, #1
 800229c:	469a      	mov	sl, r3
 800229e:	4314      	orrs	r4, r2
 80022a0:	e62c      	b.n	8001efc <__aeabi_dsub+0x114>
 80022a2:	0039      	movs	r1, r7
 80022a4:	3a20      	subs	r2, #32
 80022a6:	40d1      	lsrs	r1, r2
 80022a8:	4662      	mov	r2, ip
 80022aa:	2a20      	cmp	r2, #32
 80022ac:	d006      	beq.n	80022bc <__aeabi_dsub+0x4d4>
 80022ae:	4664      	mov	r4, ip
 80022b0:	2240      	movs	r2, #64	; 0x40
 80022b2:	1b12      	subs	r2, r2, r4
 80022b4:	003c      	movs	r4, r7
 80022b6:	4094      	lsls	r4, r2
 80022b8:	4304      	orrs	r4, r0
 80022ba:	9401      	str	r4, [sp, #4]
 80022bc:	9c01      	ldr	r4, [sp, #4]
 80022be:	1e62      	subs	r2, r4, #1
 80022c0:	4194      	sbcs	r4, r2
 80022c2:	430c      	orrs	r4, r1
 80022c4:	e5e3      	b.n	8001e8e <__aeabi_dsub+0xa6>
 80022c6:	4649      	mov	r1, r9
 80022c8:	4319      	orrs	r1, r3
 80022ca:	000b      	movs	r3, r1
 80022cc:	1e5c      	subs	r4, r3, #1
 80022ce:	41a3      	sbcs	r3, r4
 80022d0:	1ac4      	subs	r4, r0, r3
 80022d2:	42a0      	cmp	r0, r4
 80022d4:	419b      	sbcs	r3, r3
 80022d6:	425b      	negs	r3, r3
 80022d8:	1afb      	subs	r3, r7, r3
 80022da:	469a      	mov	sl, r3
 80022dc:	465d      	mov	r5, fp
 80022de:	0016      	movs	r6, r2
 80022e0:	e5dc      	b.n	8001e9c <__aeabi_dsub+0xb4>
 80022e2:	4649      	mov	r1, r9
 80022e4:	4319      	orrs	r1, r3
 80022e6:	d100      	bne.n	80022ea <__aeabi_dsub+0x502>
 80022e8:	e0ae      	b.n	8002448 <__aeabi_dsub+0x660>
 80022ea:	4661      	mov	r1, ip
 80022ec:	4664      	mov	r4, ip
 80022ee:	3901      	subs	r1, #1
 80022f0:	2c01      	cmp	r4, #1
 80022f2:	d100      	bne.n	80022f6 <__aeabi_dsub+0x50e>
 80022f4:	e0e0      	b.n	80024b8 <__aeabi_dsub+0x6d0>
 80022f6:	4c77      	ldr	r4, [pc, #476]	; (80024d4 <__aeabi_dsub+0x6ec>)
 80022f8:	45a4      	cmp	ip, r4
 80022fa:	d056      	beq.n	80023aa <__aeabi_dsub+0x5c2>
 80022fc:	468c      	mov	ip, r1
 80022fe:	e69a      	b.n	8002036 <__aeabi_dsub+0x24e>
 8002300:	4661      	mov	r1, ip
 8002302:	2220      	movs	r2, #32
 8002304:	003c      	movs	r4, r7
 8002306:	1a52      	subs	r2, r2, r1
 8002308:	4094      	lsls	r4, r2
 800230a:	0001      	movs	r1, r0
 800230c:	4090      	lsls	r0, r2
 800230e:	46a0      	mov	r8, r4
 8002310:	4664      	mov	r4, ip
 8002312:	1e42      	subs	r2, r0, #1
 8002314:	4190      	sbcs	r0, r2
 8002316:	4662      	mov	r2, ip
 8002318:	40e1      	lsrs	r1, r4
 800231a:	4644      	mov	r4, r8
 800231c:	40d7      	lsrs	r7, r2
 800231e:	430c      	orrs	r4, r1
 8002320:	4304      	orrs	r4, r0
 8002322:	44b9      	add	r9, r7
 8002324:	e701      	b.n	800212a <__aeabi_dsub+0x342>
 8002326:	496b      	ldr	r1, [pc, #428]	; (80024d4 <__aeabi_dsub+0x6ec>)
 8002328:	428a      	cmp	r2, r1
 800232a:	d100      	bne.n	800232e <__aeabi_dsub+0x546>
 800232c:	e70c      	b.n	8002148 <__aeabi_dsub+0x360>
 800232e:	1818      	adds	r0, r3, r0
 8002330:	4298      	cmp	r0, r3
 8002332:	419b      	sbcs	r3, r3
 8002334:	444f      	add	r7, r9
 8002336:	425b      	negs	r3, r3
 8002338:	18fb      	adds	r3, r7, r3
 800233a:	07dc      	lsls	r4, r3, #31
 800233c:	0840      	lsrs	r0, r0, #1
 800233e:	085b      	lsrs	r3, r3, #1
 8002340:	469a      	mov	sl, r3
 8002342:	0016      	movs	r6, r2
 8002344:	4304      	orrs	r4, r0
 8002346:	e6d9      	b.n	80020fc <__aeabi_dsub+0x314>
 8002348:	2a00      	cmp	r2, #0
 800234a:	d000      	beq.n	800234e <__aeabi_dsub+0x566>
 800234c:	e081      	b.n	8002452 <__aeabi_dsub+0x66a>
 800234e:	003b      	movs	r3, r7
 8002350:	4303      	orrs	r3, r0
 8002352:	d11d      	bne.n	8002390 <__aeabi_dsub+0x5a8>
 8002354:	2280      	movs	r2, #128	; 0x80
 8002356:	2500      	movs	r5, #0
 8002358:	0312      	lsls	r2, r2, #12
 800235a:	e70b      	b.n	8002174 <__aeabi_dsub+0x38c>
 800235c:	08c0      	lsrs	r0, r0, #3
 800235e:	077b      	lsls	r3, r7, #29
 8002360:	465d      	mov	r5, fp
 8002362:	4303      	orrs	r3, r0
 8002364:	08fa      	lsrs	r2, r7, #3
 8002366:	e6d3      	b.n	8002110 <__aeabi_dsub+0x328>
 8002368:	1ac4      	subs	r4, r0, r3
 800236a:	42a0      	cmp	r0, r4
 800236c:	4180      	sbcs	r0, r0
 800236e:	464b      	mov	r3, r9
 8002370:	4240      	negs	r0, r0
 8002372:	1aff      	subs	r7, r7, r3
 8002374:	1a3b      	subs	r3, r7, r0
 8002376:	469a      	mov	sl, r3
 8002378:	465d      	mov	r5, fp
 800237a:	e597      	b.n	8001eac <__aeabi_dsub+0xc4>
 800237c:	1a1c      	subs	r4, r3, r0
 800237e:	464a      	mov	r2, r9
 8002380:	42a3      	cmp	r3, r4
 8002382:	419b      	sbcs	r3, r3
 8002384:	1bd7      	subs	r7, r2, r7
 8002386:	425b      	negs	r3, r3
 8002388:	1afb      	subs	r3, r7, r3
 800238a:	469a      	mov	sl, r3
 800238c:	2601      	movs	r6, #1
 800238e:	e585      	b.n	8001e9c <__aeabi_dsub+0xb4>
 8002390:	08c0      	lsrs	r0, r0, #3
 8002392:	077b      	lsls	r3, r7, #29
 8002394:	465d      	mov	r5, fp
 8002396:	4303      	orrs	r3, r0
 8002398:	08fa      	lsrs	r2, r7, #3
 800239a:	e6e7      	b.n	800216c <__aeabi_dsub+0x384>
 800239c:	464a      	mov	r2, r9
 800239e:	08db      	lsrs	r3, r3, #3
 80023a0:	0752      	lsls	r2, r2, #29
 80023a2:	4313      	orrs	r3, r2
 80023a4:	464a      	mov	r2, r9
 80023a6:	08d2      	lsrs	r2, r2, #3
 80023a8:	e6b5      	b.n	8002116 <__aeabi_dsub+0x32e>
 80023aa:	08c0      	lsrs	r0, r0, #3
 80023ac:	077b      	lsls	r3, r7, #29
 80023ae:	4303      	orrs	r3, r0
 80023b0:	08fa      	lsrs	r2, r7, #3
 80023b2:	e6db      	b.n	800216c <__aeabi_dsub+0x384>
 80023b4:	4649      	mov	r1, r9
 80023b6:	4319      	orrs	r1, r3
 80023b8:	000b      	movs	r3, r1
 80023ba:	1e59      	subs	r1, r3, #1
 80023bc:	418b      	sbcs	r3, r1
 80023be:	001c      	movs	r4, r3
 80023c0:	e653      	b.n	800206a <__aeabi_dsub+0x282>
 80023c2:	464d      	mov	r5, r9
 80023c4:	3c20      	subs	r4, #32
 80023c6:	40e5      	lsrs	r5, r4
 80023c8:	2920      	cmp	r1, #32
 80023ca:	d005      	beq.n	80023d8 <__aeabi_dsub+0x5f0>
 80023cc:	2440      	movs	r4, #64	; 0x40
 80023ce:	1a64      	subs	r4, r4, r1
 80023d0:	4649      	mov	r1, r9
 80023d2:	40a1      	lsls	r1, r4
 80023d4:	430b      	orrs	r3, r1
 80023d6:	4698      	mov	r8, r3
 80023d8:	4643      	mov	r3, r8
 80023da:	1e5c      	subs	r4, r3, #1
 80023dc:	41a3      	sbcs	r3, r4
 80023de:	432b      	orrs	r3, r5
 80023e0:	e776      	b.n	80022d0 <__aeabi_dsub+0x4e8>
 80023e2:	2a00      	cmp	r2, #0
 80023e4:	d0e1      	beq.n	80023aa <__aeabi_dsub+0x5c2>
 80023e6:	003a      	movs	r2, r7
 80023e8:	08db      	lsrs	r3, r3, #3
 80023ea:	4302      	orrs	r2, r0
 80023ec:	d100      	bne.n	80023f0 <__aeabi_dsub+0x608>
 80023ee:	e6b8      	b.n	8002162 <__aeabi_dsub+0x37a>
 80023f0:	464a      	mov	r2, r9
 80023f2:	0752      	lsls	r2, r2, #29
 80023f4:	2480      	movs	r4, #128	; 0x80
 80023f6:	4313      	orrs	r3, r2
 80023f8:	464a      	mov	r2, r9
 80023fa:	0324      	lsls	r4, r4, #12
 80023fc:	08d2      	lsrs	r2, r2, #3
 80023fe:	4222      	tst	r2, r4
 8002400:	d007      	beq.n	8002412 <__aeabi_dsub+0x62a>
 8002402:	08fe      	lsrs	r6, r7, #3
 8002404:	4226      	tst	r6, r4
 8002406:	d104      	bne.n	8002412 <__aeabi_dsub+0x62a>
 8002408:	465d      	mov	r5, fp
 800240a:	0032      	movs	r2, r6
 800240c:	08c3      	lsrs	r3, r0, #3
 800240e:	077f      	lsls	r7, r7, #29
 8002410:	433b      	orrs	r3, r7
 8002412:	0f59      	lsrs	r1, r3, #29
 8002414:	00db      	lsls	r3, r3, #3
 8002416:	0749      	lsls	r1, r1, #29
 8002418:	08db      	lsrs	r3, r3, #3
 800241a:	430b      	orrs	r3, r1
 800241c:	e6a6      	b.n	800216c <__aeabi_dsub+0x384>
 800241e:	1ac4      	subs	r4, r0, r3
 8002420:	42a0      	cmp	r0, r4
 8002422:	4180      	sbcs	r0, r0
 8002424:	464b      	mov	r3, r9
 8002426:	4240      	negs	r0, r0
 8002428:	1aff      	subs	r7, r7, r3
 800242a:	1a3b      	subs	r3, r7, r0
 800242c:	469a      	mov	sl, r3
 800242e:	465d      	mov	r5, fp
 8002430:	2601      	movs	r6, #1
 8002432:	e533      	b.n	8001e9c <__aeabi_dsub+0xb4>
 8002434:	003b      	movs	r3, r7
 8002436:	4303      	orrs	r3, r0
 8002438:	d100      	bne.n	800243c <__aeabi_dsub+0x654>
 800243a:	e715      	b.n	8002268 <__aeabi_dsub+0x480>
 800243c:	08c0      	lsrs	r0, r0, #3
 800243e:	077b      	lsls	r3, r7, #29
 8002440:	465d      	mov	r5, fp
 8002442:	4303      	orrs	r3, r0
 8002444:	08fa      	lsrs	r2, r7, #3
 8002446:	e666      	b.n	8002116 <__aeabi_dsub+0x32e>
 8002448:	08c0      	lsrs	r0, r0, #3
 800244a:	077b      	lsls	r3, r7, #29
 800244c:	4303      	orrs	r3, r0
 800244e:	08fa      	lsrs	r2, r7, #3
 8002450:	e65e      	b.n	8002110 <__aeabi_dsub+0x328>
 8002452:	003a      	movs	r2, r7
 8002454:	08db      	lsrs	r3, r3, #3
 8002456:	4302      	orrs	r2, r0
 8002458:	d100      	bne.n	800245c <__aeabi_dsub+0x674>
 800245a:	e682      	b.n	8002162 <__aeabi_dsub+0x37a>
 800245c:	464a      	mov	r2, r9
 800245e:	0752      	lsls	r2, r2, #29
 8002460:	2480      	movs	r4, #128	; 0x80
 8002462:	4313      	orrs	r3, r2
 8002464:	464a      	mov	r2, r9
 8002466:	0324      	lsls	r4, r4, #12
 8002468:	08d2      	lsrs	r2, r2, #3
 800246a:	4222      	tst	r2, r4
 800246c:	d007      	beq.n	800247e <__aeabi_dsub+0x696>
 800246e:	08fe      	lsrs	r6, r7, #3
 8002470:	4226      	tst	r6, r4
 8002472:	d104      	bne.n	800247e <__aeabi_dsub+0x696>
 8002474:	465d      	mov	r5, fp
 8002476:	0032      	movs	r2, r6
 8002478:	08c3      	lsrs	r3, r0, #3
 800247a:	077f      	lsls	r7, r7, #29
 800247c:	433b      	orrs	r3, r7
 800247e:	0f59      	lsrs	r1, r3, #29
 8002480:	00db      	lsls	r3, r3, #3
 8002482:	08db      	lsrs	r3, r3, #3
 8002484:	0749      	lsls	r1, r1, #29
 8002486:	430b      	orrs	r3, r1
 8002488:	e670      	b.n	800216c <__aeabi_dsub+0x384>
 800248a:	08c0      	lsrs	r0, r0, #3
 800248c:	077b      	lsls	r3, r7, #29
 800248e:	4303      	orrs	r3, r0
 8002490:	08fa      	lsrs	r2, r7, #3
 8002492:	e640      	b.n	8002116 <__aeabi_dsub+0x32e>
 8002494:	464c      	mov	r4, r9
 8002496:	3920      	subs	r1, #32
 8002498:	40cc      	lsrs	r4, r1
 800249a:	4661      	mov	r1, ip
 800249c:	2920      	cmp	r1, #32
 800249e:	d006      	beq.n	80024ae <__aeabi_dsub+0x6c6>
 80024a0:	4666      	mov	r6, ip
 80024a2:	2140      	movs	r1, #64	; 0x40
 80024a4:	1b89      	subs	r1, r1, r6
 80024a6:	464e      	mov	r6, r9
 80024a8:	408e      	lsls	r6, r1
 80024aa:	4333      	orrs	r3, r6
 80024ac:	4698      	mov	r8, r3
 80024ae:	4643      	mov	r3, r8
 80024b0:	1e59      	subs	r1, r3, #1
 80024b2:	418b      	sbcs	r3, r1
 80024b4:	431c      	orrs	r4, r3
 80024b6:	e5d8      	b.n	800206a <__aeabi_dsub+0x282>
 80024b8:	181c      	adds	r4, r3, r0
 80024ba:	4284      	cmp	r4, r0
 80024bc:	4180      	sbcs	r0, r0
 80024be:	444f      	add	r7, r9
 80024c0:	46ba      	mov	sl, r7
 80024c2:	4240      	negs	r0, r0
 80024c4:	4482      	add	sl, r0
 80024c6:	e6d9      	b.n	800227c <__aeabi_dsub+0x494>
 80024c8:	4653      	mov	r3, sl
 80024ca:	4323      	orrs	r3, r4
 80024cc:	d100      	bne.n	80024d0 <__aeabi_dsub+0x6e8>
 80024ce:	e6cb      	b.n	8002268 <__aeabi_dsub+0x480>
 80024d0:	e614      	b.n	80020fc <__aeabi_dsub+0x314>
 80024d2:	46c0      	nop			; (mov r8, r8)
 80024d4:	000007ff 	.word	0x000007ff
 80024d8:	ff7fffff 	.word	0xff7fffff
 80024dc:	000007fe 	.word	0x000007fe
 80024e0:	2300      	movs	r3, #0
 80024e2:	4a01      	ldr	r2, [pc, #4]	; (80024e8 <__aeabi_dsub+0x700>)
 80024e4:	001c      	movs	r4, r3
 80024e6:	e529      	b.n	8001f3c <__aeabi_dsub+0x154>
 80024e8:	000007ff 	.word	0x000007ff

080024ec <__aeabi_dcmpun>:
 80024ec:	b570      	push	{r4, r5, r6, lr}
 80024ee:	0005      	movs	r5, r0
 80024f0:	480c      	ldr	r0, [pc, #48]	; (8002524 <__aeabi_dcmpun+0x38>)
 80024f2:	031c      	lsls	r4, r3, #12
 80024f4:	0016      	movs	r6, r2
 80024f6:	005b      	lsls	r3, r3, #1
 80024f8:	030a      	lsls	r2, r1, #12
 80024fa:	0049      	lsls	r1, r1, #1
 80024fc:	0b12      	lsrs	r2, r2, #12
 80024fe:	0d49      	lsrs	r1, r1, #21
 8002500:	0b24      	lsrs	r4, r4, #12
 8002502:	0d5b      	lsrs	r3, r3, #21
 8002504:	4281      	cmp	r1, r0
 8002506:	d008      	beq.n	800251a <__aeabi_dcmpun+0x2e>
 8002508:	4a06      	ldr	r2, [pc, #24]	; (8002524 <__aeabi_dcmpun+0x38>)
 800250a:	2000      	movs	r0, #0
 800250c:	4293      	cmp	r3, r2
 800250e:	d103      	bne.n	8002518 <__aeabi_dcmpun+0x2c>
 8002510:	0020      	movs	r0, r4
 8002512:	4330      	orrs	r0, r6
 8002514:	1e43      	subs	r3, r0, #1
 8002516:	4198      	sbcs	r0, r3
 8002518:	bd70      	pop	{r4, r5, r6, pc}
 800251a:	2001      	movs	r0, #1
 800251c:	432a      	orrs	r2, r5
 800251e:	d1fb      	bne.n	8002518 <__aeabi_dcmpun+0x2c>
 8002520:	e7f2      	b.n	8002508 <__aeabi_dcmpun+0x1c>
 8002522:	46c0      	nop			; (mov r8, r8)
 8002524:	000007ff 	.word	0x000007ff

08002528 <__aeabi_d2iz>:
 8002528:	000a      	movs	r2, r1
 800252a:	b530      	push	{r4, r5, lr}
 800252c:	4c13      	ldr	r4, [pc, #76]	; (800257c <__aeabi_d2iz+0x54>)
 800252e:	0053      	lsls	r3, r2, #1
 8002530:	0309      	lsls	r1, r1, #12
 8002532:	0005      	movs	r5, r0
 8002534:	0b09      	lsrs	r1, r1, #12
 8002536:	2000      	movs	r0, #0
 8002538:	0d5b      	lsrs	r3, r3, #21
 800253a:	0fd2      	lsrs	r2, r2, #31
 800253c:	42a3      	cmp	r3, r4
 800253e:	dd04      	ble.n	800254a <__aeabi_d2iz+0x22>
 8002540:	480f      	ldr	r0, [pc, #60]	; (8002580 <__aeabi_d2iz+0x58>)
 8002542:	4283      	cmp	r3, r0
 8002544:	dd02      	ble.n	800254c <__aeabi_d2iz+0x24>
 8002546:	4b0f      	ldr	r3, [pc, #60]	; (8002584 <__aeabi_d2iz+0x5c>)
 8002548:	18d0      	adds	r0, r2, r3
 800254a:	bd30      	pop	{r4, r5, pc}
 800254c:	2080      	movs	r0, #128	; 0x80
 800254e:	0340      	lsls	r0, r0, #13
 8002550:	4301      	orrs	r1, r0
 8002552:	480d      	ldr	r0, [pc, #52]	; (8002588 <__aeabi_d2iz+0x60>)
 8002554:	1ac0      	subs	r0, r0, r3
 8002556:	281f      	cmp	r0, #31
 8002558:	dd08      	ble.n	800256c <__aeabi_d2iz+0x44>
 800255a:	480c      	ldr	r0, [pc, #48]	; (800258c <__aeabi_d2iz+0x64>)
 800255c:	1ac3      	subs	r3, r0, r3
 800255e:	40d9      	lsrs	r1, r3
 8002560:	000b      	movs	r3, r1
 8002562:	4258      	negs	r0, r3
 8002564:	2a00      	cmp	r2, #0
 8002566:	d1f0      	bne.n	800254a <__aeabi_d2iz+0x22>
 8002568:	0018      	movs	r0, r3
 800256a:	e7ee      	b.n	800254a <__aeabi_d2iz+0x22>
 800256c:	4c08      	ldr	r4, [pc, #32]	; (8002590 <__aeabi_d2iz+0x68>)
 800256e:	40c5      	lsrs	r5, r0
 8002570:	46a4      	mov	ip, r4
 8002572:	4463      	add	r3, ip
 8002574:	4099      	lsls	r1, r3
 8002576:	000b      	movs	r3, r1
 8002578:	432b      	orrs	r3, r5
 800257a:	e7f2      	b.n	8002562 <__aeabi_d2iz+0x3a>
 800257c:	000003fe 	.word	0x000003fe
 8002580:	0000041d 	.word	0x0000041d
 8002584:	7fffffff 	.word	0x7fffffff
 8002588:	00000433 	.word	0x00000433
 800258c:	00000413 	.word	0x00000413
 8002590:	fffffbed 	.word	0xfffffbed

08002594 <__aeabi_i2d>:
 8002594:	b570      	push	{r4, r5, r6, lr}
 8002596:	2800      	cmp	r0, #0
 8002598:	d016      	beq.n	80025c8 <__aeabi_i2d+0x34>
 800259a:	17c3      	asrs	r3, r0, #31
 800259c:	18c5      	adds	r5, r0, r3
 800259e:	405d      	eors	r5, r3
 80025a0:	0fc4      	lsrs	r4, r0, #31
 80025a2:	0028      	movs	r0, r5
 80025a4:	f000 f91a 	bl	80027dc <__clzsi2>
 80025a8:	4b11      	ldr	r3, [pc, #68]	; (80025f0 <__aeabi_i2d+0x5c>)
 80025aa:	1a1b      	subs	r3, r3, r0
 80025ac:	280a      	cmp	r0, #10
 80025ae:	dc16      	bgt.n	80025de <__aeabi_i2d+0x4a>
 80025b0:	0002      	movs	r2, r0
 80025b2:	002e      	movs	r6, r5
 80025b4:	3215      	adds	r2, #21
 80025b6:	4096      	lsls	r6, r2
 80025b8:	220b      	movs	r2, #11
 80025ba:	1a12      	subs	r2, r2, r0
 80025bc:	40d5      	lsrs	r5, r2
 80025be:	055b      	lsls	r3, r3, #21
 80025c0:	032d      	lsls	r5, r5, #12
 80025c2:	0b2d      	lsrs	r5, r5, #12
 80025c4:	0d5b      	lsrs	r3, r3, #21
 80025c6:	e003      	b.n	80025d0 <__aeabi_i2d+0x3c>
 80025c8:	2400      	movs	r4, #0
 80025ca:	2300      	movs	r3, #0
 80025cc:	2500      	movs	r5, #0
 80025ce:	2600      	movs	r6, #0
 80025d0:	051b      	lsls	r3, r3, #20
 80025d2:	432b      	orrs	r3, r5
 80025d4:	07e4      	lsls	r4, r4, #31
 80025d6:	4323      	orrs	r3, r4
 80025d8:	0030      	movs	r0, r6
 80025da:	0019      	movs	r1, r3
 80025dc:	bd70      	pop	{r4, r5, r6, pc}
 80025de:	380b      	subs	r0, #11
 80025e0:	4085      	lsls	r5, r0
 80025e2:	055b      	lsls	r3, r3, #21
 80025e4:	032d      	lsls	r5, r5, #12
 80025e6:	2600      	movs	r6, #0
 80025e8:	0b2d      	lsrs	r5, r5, #12
 80025ea:	0d5b      	lsrs	r3, r3, #21
 80025ec:	e7f0      	b.n	80025d0 <__aeabi_i2d+0x3c>
 80025ee:	46c0      	nop			; (mov r8, r8)
 80025f0:	0000041e 	.word	0x0000041e

080025f4 <__aeabi_ui2d>:
 80025f4:	b510      	push	{r4, lr}
 80025f6:	1e04      	subs	r4, r0, #0
 80025f8:	d010      	beq.n	800261c <__aeabi_ui2d+0x28>
 80025fa:	f000 f8ef 	bl	80027dc <__clzsi2>
 80025fe:	4b0f      	ldr	r3, [pc, #60]	; (800263c <__aeabi_ui2d+0x48>)
 8002600:	1a1b      	subs	r3, r3, r0
 8002602:	280a      	cmp	r0, #10
 8002604:	dc11      	bgt.n	800262a <__aeabi_ui2d+0x36>
 8002606:	220b      	movs	r2, #11
 8002608:	0021      	movs	r1, r4
 800260a:	1a12      	subs	r2, r2, r0
 800260c:	40d1      	lsrs	r1, r2
 800260e:	3015      	adds	r0, #21
 8002610:	030a      	lsls	r2, r1, #12
 8002612:	055b      	lsls	r3, r3, #21
 8002614:	4084      	lsls	r4, r0
 8002616:	0b12      	lsrs	r2, r2, #12
 8002618:	0d5b      	lsrs	r3, r3, #21
 800261a:	e001      	b.n	8002620 <__aeabi_ui2d+0x2c>
 800261c:	2300      	movs	r3, #0
 800261e:	2200      	movs	r2, #0
 8002620:	051b      	lsls	r3, r3, #20
 8002622:	4313      	orrs	r3, r2
 8002624:	0020      	movs	r0, r4
 8002626:	0019      	movs	r1, r3
 8002628:	bd10      	pop	{r4, pc}
 800262a:	0022      	movs	r2, r4
 800262c:	380b      	subs	r0, #11
 800262e:	4082      	lsls	r2, r0
 8002630:	055b      	lsls	r3, r3, #21
 8002632:	0312      	lsls	r2, r2, #12
 8002634:	2400      	movs	r4, #0
 8002636:	0b12      	lsrs	r2, r2, #12
 8002638:	0d5b      	lsrs	r3, r3, #21
 800263a:	e7f1      	b.n	8002620 <__aeabi_ui2d+0x2c>
 800263c:	0000041e 	.word	0x0000041e

08002640 <__aeabi_f2d>:
 8002640:	b570      	push	{r4, r5, r6, lr}
 8002642:	0242      	lsls	r2, r0, #9
 8002644:	0043      	lsls	r3, r0, #1
 8002646:	0fc4      	lsrs	r4, r0, #31
 8002648:	20fe      	movs	r0, #254	; 0xfe
 800264a:	0e1b      	lsrs	r3, r3, #24
 800264c:	1c59      	adds	r1, r3, #1
 800264e:	0a55      	lsrs	r5, r2, #9
 8002650:	4208      	tst	r0, r1
 8002652:	d00c      	beq.n	800266e <__aeabi_f2d+0x2e>
 8002654:	21e0      	movs	r1, #224	; 0xe0
 8002656:	0089      	lsls	r1, r1, #2
 8002658:	468c      	mov	ip, r1
 800265a:	076d      	lsls	r5, r5, #29
 800265c:	0b12      	lsrs	r2, r2, #12
 800265e:	4463      	add	r3, ip
 8002660:	051b      	lsls	r3, r3, #20
 8002662:	4313      	orrs	r3, r2
 8002664:	07e4      	lsls	r4, r4, #31
 8002666:	4323      	orrs	r3, r4
 8002668:	0028      	movs	r0, r5
 800266a:	0019      	movs	r1, r3
 800266c:	bd70      	pop	{r4, r5, r6, pc}
 800266e:	2b00      	cmp	r3, #0
 8002670:	d114      	bne.n	800269c <__aeabi_f2d+0x5c>
 8002672:	2d00      	cmp	r5, #0
 8002674:	d01b      	beq.n	80026ae <__aeabi_f2d+0x6e>
 8002676:	0028      	movs	r0, r5
 8002678:	f000 f8b0 	bl	80027dc <__clzsi2>
 800267c:	280a      	cmp	r0, #10
 800267e:	dc1c      	bgt.n	80026ba <__aeabi_f2d+0x7a>
 8002680:	230b      	movs	r3, #11
 8002682:	002a      	movs	r2, r5
 8002684:	1a1b      	subs	r3, r3, r0
 8002686:	40da      	lsrs	r2, r3
 8002688:	0003      	movs	r3, r0
 800268a:	3315      	adds	r3, #21
 800268c:	409d      	lsls	r5, r3
 800268e:	4b0e      	ldr	r3, [pc, #56]	; (80026c8 <__aeabi_f2d+0x88>)
 8002690:	0312      	lsls	r2, r2, #12
 8002692:	1a1b      	subs	r3, r3, r0
 8002694:	055b      	lsls	r3, r3, #21
 8002696:	0b12      	lsrs	r2, r2, #12
 8002698:	0d5b      	lsrs	r3, r3, #21
 800269a:	e7e1      	b.n	8002660 <__aeabi_f2d+0x20>
 800269c:	2d00      	cmp	r5, #0
 800269e:	d009      	beq.n	80026b4 <__aeabi_f2d+0x74>
 80026a0:	0b13      	lsrs	r3, r2, #12
 80026a2:	2280      	movs	r2, #128	; 0x80
 80026a4:	0312      	lsls	r2, r2, #12
 80026a6:	431a      	orrs	r2, r3
 80026a8:	076d      	lsls	r5, r5, #29
 80026aa:	4b08      	ldr	r3, [pc, #32]	; (80026cc <__aeabi_f2d+0x8c>)
 80026ac:	e7d8      	b.n	8002660 <__aeabi_f2d+0x20>
 80026ae:	2300      	movs	r3, #0
 80026b0:	2200      	movs	r2, #0
 80026b2:	e7d5      	b.n	8002660 <__aeabi_f2d+0x20>
 80026b4:	2200      	movs	r2, #0
 80026b6:	4b05      	ldr	r3, [pc, #20]	; (80026cc <__aeabi_f2d+0x8c>)
 80026b8:	e7d2      	b.n	8002660 <__aeabi_f2d+0x20>
 80026ba:	0003      	movs	r3, r0
 80026bc:	002a      	movs	r2, r5
 80026be:	3b0b      	subs	r3, #11
 80026c0:	409a      	lsls	r2, r3
 80026c2:	2500      	movs	r5, #0
 80026c4:	e7e3      	b.n	800268e <__aeabi_f2d+0x4e>
 80026c6:	46c0      	nop			; (mov r8, r8)
 80026c8:	00000389 	.word	0x00000389
 80026cc:	000007ff 	.word	0x000007ff

080026d0 <__aeabi_d2f>:
 80026d0:	0002      	movs	r2, r0
 80026d2:	b5f0      	push	{r4, r5, r6, r7, lr}
 80026d4:	004b      	lsls	r3, r1, #1
 80026d6:	030d      	lsls	r5, r1, #12
 80026d8:	0f40      	lsrs	r0, r0, #29
 80026da:	0d5b      	lsrs	r3, r3, #21
 80026dc:	0fcc      	lsrs	r4, r1, #31
 80026de:	0a6d      	lsrs	r5, r5, #9
 80026e0:	493a      	ldr	r1, [pc, #232]	; (80027cc <__aeabi_d2f+0xfc>)
 80026e2:	4305      	orrs	r5, r0
 80026e4:	1c58      	adds	r0, r3, #1
 80026e6:	00d7      	lsls	r7, r2, #3
 80026e8:	4208      	tst	r0, r1
 80026ea:	d00a      	beq.n	8002702 <__aeabi_d2f+0x32>
 80026ec:	4938      	ldr	r1, [pc, #224]	; (80027d0 <__aeabi_d2f+0x100>)
 80026ee:	1859      	adds	r1, r3, r1
 80026f0:	29fe      	cmp	r1, #254	; 0xfe
 80026f2:	dd16      	ble.n	8002722 <__aeabi_d2f+0x52>
 80026f4:	20ff      	movs	r0, #255	; 0xff
 80026f6:	2200      	movs	r2, #0
 80026f8:	05c0      	lsls	r0, r0, #23
 80026fa:	4310      	orrs	r0, r2
 80026fc:	07e4      	lsls	r4, r4, #31
 80026fe:	4320      	orrs	r0, r4
 8002700:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002702:	2b00      	cmp	r3, #0
 8002704:	d106      	bne.n	8002714 <__aeabi_d2f+0x44>
 8002706:	433d      	orrs	r5, r7
 8002708:	d026      	beq.n	8002758 <__aeabi_d2f+0x88>
 800270a:	2205      	movs	r2, #5
 800270c:	0192      	lsls	r2, r2, #6
 800270e:	0a52      	lsrs	r2, r2, #9
 8002710:	b2d8      	uxtb	r0, r3
 8002712:	e7f1      	b.n	80026f8 <__aeabi_d2f+0x28>
 8002714:	432f      	orrs	r7, r5
 8002716:	d0ed      	beq.n	80026f4 <__aeabi_d2f+0x24>
 8002718:	2280      	movs	r2, #128	; 0x80
 800271a:	03d2      	lsls	r2, r2, #15
 800271c:	20ff      	movs	r0, #255	; 0xff
 800271e:	432a      	orrs	r2, r5
 8002720:	e7ea      	b.n	80026f8 <__aeabi_d2f+0x28>
 8002722:	2900      	cmp	r1, #0
 8002724:	dd1b      	ble.n	800275e <__aeabi_d2f+0x8e>
 8002726:	0192      	lsls	r2, r2, #6
 8002728:	1e50      	subs	r0, r2, #1
 800272a:	4182      	sbcs	r2, r0
 800272c:	00ed      	lsls	r5, r5, #3
 800272e:	0f7f      	lsrs	r7, r7, #29
 8002730:	432a      	orrs	r2, r5
 8002732:	433a      	orrs	r2, r7
 8002734:	0753      	lsls	r3, r2, #29
 8002736:	d047      	beq.n	80027c8 <__aeabi_d2f+0xf8>
 8002738:	230f      	movs	r3, #15
 800273a:	4013      	ands	r3, r2
 800273c:	2b04      	cmp	r3, #4
 800273e:	d000      	beq.n	8002742 <__aeabi_d2f+0x72>
 8002740:	3204      	adds	r2, #4
 8002742:	2380      	movs	r3, #128	; 0x80
 8002744:	04db      	lsls	r3, r3, #19
 8002746:	4013      	ands	r3, r2
 8002748:	d03e      	beq.n	80027c8 <__aeabi_d2f+0xf8>
 800274a:	1c48      	adds	r0, r1, #1
 800274c:	29fe      	cmp	r1, #254	; 0xfe
 800274e:	d0d1      	beq.n	80026f4 <__aeabi_d2f+0x24>
 8002750:	0192      	lsls	r2, r2, #6
 8002752:	0a52      	lsrs	r2, r2, #9
 8002754:	b2c0      	uxtb	r0, r0
 8002756:	e7cf      	b.n	80026f8 <__aeabi_d2f+0x28>
 8002758:	2000      	movs	r0, #0
 800275a:	2200      	movs	r2, #0
 800275c:	e7cc      	b.n	80026f8 <__aeabi_d2f+0x28>
 800275e:	000a      	movs	r2, r1
 8002760:	3217      	adds	r2, #23
 8002762:	db2f      	blt.n	80027c4 <__aeabi_d2f+0xf4>
 8002764:	2680      	movs	r6, #128	; 0x80
 8002766:	0436      	lsls	r6, r6, #16
 8002768:	432e      	orrs	r6, r5
 800276a:	251e      	movs	r5, #30
 800276c:	1a6d      	subs	r5, r5, r1
 800276e:	2d1f      	cmp	r5, #31
 8002770:	dd11      	ble.n	8002796 <__aeabi_d2f+0xc6>
 8002772:	2202      	movs	r2, #2
 8002774:	4252      	negs	r2, r2
 8002776:	1a52      	subs	r2, r2, r1
 8002778:	0031      	movs	r1, r6
 800277a:	40d1      	lsrs	r1, r2
 800277c:	2d20      	cmp	r5, #32
 800277e:	d004      	beq.n	800278a <__aeabi_d2f+0xba>
 8002780:	4a14      	ldr	r2, [pc, #80]	; (80027d4 <__aeabi_d2f+0x104>)
 8002782:	4694      	mov	ip, r2
 8002784:	4463      	add	r3, ip
 8002786:	409e      	lsls	r6, r3
 8002788:	4337      	orrs	r7, r6
 800278a:	003a      	movs	r2, r7
 800278c:	1e53      	subs	r3, r2, #1
 800278e:	419a      	sbcs	r2, r3
 8002790:	430a      	orrs	r2, r1
 8002792:	2100      	movs	r1, #0
 8002794:	e7ce      	b.n	8002734 <__aeabi_d2f+0x64>
 8002796:	4a10      	ldr	r2, [pc, #64]	; (80027d8 <__aeabi_d2f+0x108>)
 8002798:	0038      	movs	r0, r7
 800279a:	4694      	mov	ip, r2
 800279c:	4463      	add	r3, ip
 800279e:	4098      	lsls	r0, r3
 80027a0:	003a      	movs	r2, r7
 80027a2:	1e41      	subs	r1, r0, #1
 80027a4:	4188      	sbcs	r0, r1
 80027a6:	409e      	lsls	r6, r3
 80027a8:	40ea      	lsrs	r2, r5
 80027aa:	4330      	orrs	r0, r6
 80027ac:	4302      	orrs	r2, r0
 80027ae:	2100      	movs	r1, #0
 80027b0:	0753      	lsls	r3, r2, #29
 80027b2:	d1c1      	bne.n	8002738 <__aeabi_d2f+0x68>
 80027b4:	2180      	movs	r1, #128	; 0x80
 80027b6:	0013      	movs	r3, r2
 80027b8:	04c9      	lsls	r1, r1, #19
 80027ba:	2001      	movs	r0, #1
 80027bc:	400b      	ands	r3, r1
 80027be:	420a      	tst	r2, r1
 80027c0:	d1c6      	bne.n	8002750 <__aeabi_d2f+0x80>
 80027c2:	e7a3      	b.n	800270c <__aeabi_d2f+0x3c>
 80027c4:	2300      	movs	r3, #0
 80027c6:	e7a0      	b.n	800270a <__aeabi_d2f+0x3a>
 80027c8:	000b      	movs	r3, r1
 80027ca:	e79f      	b.n	800270c <__aeabi_d2f+0x3c>
 80027cc:	000007fe 	.word	0x000007fe
 80027d0:	fffffc80 	.word	0xfffffc80
 80027d4:	fffffca2 	.word	0xfffffca2
 80027d8:	fffffc82 	.word	0xfffffc82

080027dc <__clzsi2>:
 80027dc:	211c      	movs	r1, #28
 80027de:	2301      	movs	r3, #1
 80027e0:	041b      	lsls	r3, r3, #16
 80027e2:	4298      	cmp	r0, r3
 80027e4:	d301      	bcc.n	80027ea <__clzsi2+0xe>
 80027e6:	0c00      	lsrs	r0, r0, #16
 80027e8:	3910      	subs	r1, #16
 80027ea:	0a1b      	lsrs	r3, r3, #8
 80027ec:	4298      	cmp	r0, r3
 80027ee:	d301      	bcc.n	80027f4 <__clzsi2+0x18>
 80027f0:	0a00      	lsrs	r0, r0, #8
 80027f2:	3908      	subs	r1, #8
 80027f4:	091b      	lsrs	r3, r3, #4
 80027f6:	4298      	cmp	r0, r3
 80027f8:	d301      	bcc.n	80027fe <__clzsi2+0x22>
 80027fa:	0900      	lsrs	r0, r0, #4
 80027fc:	3904      	subs	r1, #4
 80027fe:	a202      	add	r2, pc, #8	; (adr r2, 8002808 <__clzsi2+0x2c>)
 8002800:	5c10      	ldrb	r0, [r2, r0]
 8002802:	1840      	adds	r0, r0, r1
 8002804:	4770      	bx	lr
 8002806:	46c0      	nop			; (mov r8, r8)
 8002808:	02020304 	.word	0x02020304
 800280c:	01010101 	.word	0x01010101
	...

08002818 <__clzdi2>:
 8002818:	b510      	push	{r4, lr}
 800281a:	2900      	cmp	r1, #0
 800281c:	d103      	bne.n	8002826 <__clzdi2+0xe>
 800281e:	f7ff ffdd 	bl	80027dc <__clzsi2>
 8002822:	3020      	adds	r0, #32
 8002824:	e002      	b.n	800282c <__clzdi2+0x14>
 8002826:	0008      	movs	r0, r1
 8002828:	f7ff ffd8 	bl	80027dc <__clzsi2>
 800282c:	bd10      	pop	{r4, pc}
 800282e:	46c0      	nop			; (mov r8, r8)

08002830 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8002830:	b590      	push	{r4, r7, lr}
 8002832:	b091      	sub	sp, #68	; 0x44
 8002834:	af10      	add	r7, sp, #64	; 0x40
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8002836:	f001 f819 	bl	800386c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800283a:	f000 f913 	bl	8002a64 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800283e:	f000 fb19 	bl	8002e74 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 8002842:	f000 fa47 	bl	8002cd4 <MX_USART2_UART_Init>
  MX_RTC_Init();
 8002846:	f000 f963 	bl	8002b10 <MX_RTC_Init>
  MX_TIM6_Init();
 800284a:	f000 fa05 	bl	8002c58 <MX_TIM6_Init>
  MX_USART3_UART_Init();
 800284e:	f000 fa8f 	bl	8002d70 <MX_USART3_UART_Init>
  MX_USART4_UART_Init();
 8002852:	f000 fadb 	bl	8002e0c <MX_USART4_UART_Init>
  /* USER CODE BEGIN 2 */

  // System hello
  HAL_UART_Transmit ( HUART_DBG , (uint8_t*) hello , strlen (hello) , UART_TIMEOUT ) ;
 8002856:	4b70      	ldr	r3, [pc, #448]	; (8002a18 <main+0x1e8>)
 8002858:	681c      	ldr	r4, [r3, #0]
 800285a:	4b6f      	ldr	r3, [pc, #444]	; (8002a18 <main+0x1e8>)
 800285c:	681b      	ldr	r3, [r3, #0]
 800285e:	0018      	movs	r0, r3
 8002860:	f7fd fc50 	bl	8000104 <strlen>
 8002864:	0003      	movs	r3, r0
 8002866:	b29a      	uxth	r2, r3
 8002868:	23fa      	movs	r3, #250	; 0xfa
 800286a:	009b      	lsls	r3, r3, #2
 800286c:	486b      	ldr	r0, [pc, #428]	; (8002a1c <main+0x1ec>)
 800286e:	0021      	movs	r1, r4
 8002870:	f003 fc26 	bl	80060c0 <HAL_UART_Transmit>

  // System Init
  my_tim_init ( HTIM ) ;
 8002874:	4c6a      	ldr	r4, [pc, #424]	; (8002a20 <main+0x1f0>)
 8002876:	466b      	mov	r3, sp
 8002878:	0018      	movs	r0, r3
 800287a:	0023      	movs	r3, r4
 800287c:	3310      	adds	r3, #16
 800287e:	223c      	movs	r2, #60	; 0x3c
 8002880:	0019      	movs	r1, r3
 8002882:	f006 fd99 	bl	80093b8 <memcpy>
 8002886:	6820      	ldr	r0, [r4, #0]
 8002888:	6861      	ldr	r1, [r4, #4]
 800288a:	68a2      	ldr	r2, [r4, #8]
 800288c:	68e3      	ldr	r3, [r4, #12]
 800288e:	f000 fc2b 	bl	80030e8 <my_tim_init>

  if ( !is_system_initialized () )
 8002892:	f000 fcdb 	bl	800324c <is_system_initialized>
 8002896:	0003      	movs	r3, r0
 8002898:	001a      	movs	r2, r3
 800289a:	2301      	movs	r3, #1
 800289c:	4053      	eors	r3, r2
 800289e:	b2db      	uxtb	r3, r3
 80028a0:	2b00      	cmp	r3, #0
 80028a2:	d034      	beq.n	800290e <main+0xde>
  {
	  if ( !my_astro_init ( htim6 ) )
 80028a4:	4c5e      	ldr	r4, [pc, #376]	; (8002a20 <main+0x1f0>)
 80028a6:	466b      	mov	r3, sp
 80028a8:	0018      	movs	r0, r3
 80028aa:	0023      	movs	r3, r4
 80028ac:	3310      	adds	r3, #16
 80028ae:	223c      	movs	r2, #60	; 0x3c
 80028b0:	0019      	movs	r1, r3
 80028b2:	f006 fd81 	bl	80093b8 <memcpy>
 80028b6:	6820      	ldr	r0, [r4, #0]
 80028b8:	6861      	ldr	r1, [r4, #4]
 80028ba:	68a2      	ldr	r2, [r4, #8]
 80028bc:	68e3      	ldr	r3, [r4, #12]
 80028be:	f000 fc55 	bl	800316c <my_astro_init>
 80028c2:	0003      	movs	r3, r0
 80028c4:	001a      	movs	r2, r3
 80028c6:	2301      	movs	r3, #1
 80028c8:	4053      	eors	r3, r2
 80028ca:	b2db      	uxtb	r3, r3
 80028cc:	2b00      	cmp	r3, #0
 80028ce:	d008      	beq.n	80028e2 <main+0xb2>
	  {
		  HAL_NVIC_SystemReset () ;
 80028d0:	f001 f98b 	bl	8003bea <HAL_NVIC_SystemReset>
 80028d4:	e01b      	b.n	800290e <main+0xde>
	  }
	  else
	  {
		  while ( is_evt_pin_high() )
		  {
			  send_debug_logs ( "main.c,ucb2,is_evt_pin_high" ) ;
 80028d6:	4b53      	ldr	r3, [pc, #332]	; (8002a24 <main+0x1f4>)
 80028d8:	0018      	movs	r0, r3
 80028da:	f000 fb59 	bl	8002f90 <send_debug_logs>
			  my_astro_read_evt_reg () ;
 80028de:	f006 f851 	bl	8008984 <my_astro_read_evt_reg>
		  while ( is_evt_pin_high() )
 80028e2:	f000 fbd1 	bl	8003088 <is_evt_pin_high>
 80028e6:	1e03      	subs	r3, r0, #0
 80028e8:	d1f5      	bne.n	80028d6 <main+0xa6>
		  }
		  sprintf ( payload , "fv=%s" , fv ) ;
 80028ea:	4b4f      	ldr	r3, [pc, #316]	; (8002a28 <main+0x1f8>)
 80028ec:	681a      	ldr	r2, [r3, #0]
 80028ee:	494f      	ldr	r1, [pc, #316]	; (8002a2c <main+0x1fc>)
 80028f0:	4b4f      	ldr	r3, [pc, #316]	; (8002a30 <main+0x200>)
 80028f2:	0018      	movs	r0, r3
 80028f4:	f006 fc68 	bl	80091c8 <sprintf>
		  my_astro_add_payload_2_queue ( astro_payload_id++ , payload ) ;
 80028f8:	4b4e      	ldr	r3, [pc, #312]	; (8002a34 <main+0x204>)
 80028fa:	881b      	ldrh	r3, [r3, #0]
 80028fc:	1c5a      	adds	r2, r3, #1
 80028fe:	b291      	uxth	r1, r2
 8002900:	4a4c      	ldr	r2, [pc, #304]	; (8002a34 <main+0x204>)
 8002902:	8011      	strh	r1, [r2, #0]
 8002904:	4a4a      	ldr	r2, [pc, #296]	; (8002a30 <main+0x200>)
 8002906:	0011      	movs	r1, r2
 8002908:	0018      	movs	r0, r3
 800290a:	f006 f813 	bl	8008934 <my_astro_add_payload_2_queue>
	  }
  }
  if ( my_rtc_set_alarm ( 10 ) )
 800290e:	200a      	movs	r0, #10
 8002910:	f006 f8d8 	bl	8008ac4 <my_rtc_set_alarm>
 8002914:	1e03      	subs	r3, r0, #0
 8002916:	d018      	beq.n	800294a <main+0x11a>
  {
	  HAL_SuspendTick () ; // Jak nie wyłączę to mnie przerwanie SysTick od razu wybudzi!!!
 8002918:	f001 f852 	bl	80039c0 <HAL_SuspendTick>
	  HAL_PWR_EnterSTOPMode ( PWR_LOWPOWERREGULATOR_ON , PWR_STOPENTRY_WFE ) ;
 800291c:	2380      	movs	r3, #128	; 0x80
 800291e:	01db      	lsls	r3, r3, #7
 8002920:	2102      	movs	r1, #2
 8002922:	0018      	movs	r0, r3
 8002924:	f001 fb5a 	bl	8003fdc <HAL_PWR_EnterSTOPMode>
	  HAL_ResumeTick () ;
 8002928:	f001 f858 	bl	80039dc <HAL_ResumeTick>
	  my_rtc_get_dt_s ( rtc_dt_s ) ;
 800292c:	4b42      	ldr	r3, [pc, #264]	; (8002a38 <main+0x208>)
 800292e:	0018      	movs	r0, r3
 8002930:	f006 f886 	bl	8008a40 <my_rtc_get_dt_s>
	  send_debug_logs ( rtc_dt_s ) ;
 8002934:	4b40      	ldr	r3, [pc, #256]	; (8002a38 <main+0x208>)
 8002936:	0018      	movs	r0, r3
 8002938:	f000 fb2a 	bl	8002f90 <send_debug_logs>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  while ( is_evt_pin_high() )
 800293c:	e005      	b.n	800294a <main+0x11a>
	  {
		  send_debug_logs ( "main.c,ucbw,is_evt_pin_high" ) ;
 800293e:	4b3f      	ldr	r3, [pc, #252]	; (8002a3c <main+0x20c>)
 8002940:	0018      	movs	r0, r3
 8002942:	f000 fb25 	bl	8002f90 <send_debug_logs>
		  my_astro_read_evt_reg () ;
 8002946:	f006 f81d 	bl	8008984 <my_astro_read_evt_reg>
	  while ( is_evt_pin_high() )
 800294a:	f000 fb9d 	bl	8003088 <is_evt_pin_high>
 800294e:	1e03      	subs	r3, r0, #0
 8002950:	d1f5      	bne.n	800293e <main+0x10e>
	  }
	  // Prepare payload to Astronode
	  my_rand_get_coordinates ( &last_latitude_astro_geo_wr , &last_longitude_astro_geo_wr , &latitude_astro_geo_wr , &longitude_astro_geo_wr ) ;
 8002952:	4b3b      	ldr	r3, [pc, #236]	; (8002a40 <main+0x210>)
 8002954:	4a3b      	ldr	r2, [pc, #236]	; (8002a44 <main+0x214>)
 8002956:	493c      	ldr	r1, [pc, #240]	; (8002a48 <main+0x218>)
 8002958:	483c      	ldr	r0, [pc, #240]	; (8002a4c <main+0x21c>)
 800295a:	f006 fab5 	bl	8008ec8 <my_rand_get_coordinates>
	  my_astro_write_coordinates ( latitude_astro_geo_wr , longitude_astro_geo_wr ) ;
 800295e:	4b39      	ldr	r3, [pc, #228]	; (8002a44 <main+0x214>)
 8002960:	681a      	ldr	r2, [r3, #0]
 8002962:	4b37      	ldr	r3, [pc, #220]	; (8002a40 <main+0x210>)
 8002964:	681b      	ldr	r3, [r3, #0]
 8002966:	0019      	movs	r1, r3
 8002968:	0010      	movs	r0, r2
 800296a:	f006 f841 	bl	80089f0 <my_astro_write_coordinates>
	  pdop = ((float) rand () / RAND_MAX) * 99.9 ;
 800296e:	f006 fb19 	bl	8008fa4 <rand>
 8002972:	0003      	movs	r3, r0
 8002974:	0018      	movs	r0, r3
 8002976:	f7fd ffc9 	bl	800090c <__aeabi_i2f>
 800297a:	1c03      	adds	r3, r0, #0
 800297c:	219e      	movs	r1, #158	; 0x9e
 800297e:	05c9      	lsls	r1, r1, #23
 8002980:	1c18      	adds	r0, r3, #0
 8002982:	f7fd fea9 	bl	80006d8 <__aeabi_fdiv>
 8002986:	1c03      	adds	r3, r0, #0
 8002988:	1c18      	adds	r0, r3, #0
 800298a:	f7ff fe59 	bl	8002640 <__aeabi_f2d>
 800298e:	4a30      	ldr	r2, [pc, #192]	; (8002a50 <main+0x220>)
 8002990:	4b30      	ldr	r3, [pc, #192]	; (8002a54 <main+0x224>)
 8002992:	f7fe ff67 	bl	8001864 <__aeabi_dmul>
 8002996:	0002      	movs	r2, r0
 8002998:	000b      	movs	r3, r1
 800299a:	0010      	movs	r0, r2
 800299c:	0019      	movs	r1, r3
 800299e:	f7ff fe97 	bl	80026d0 <__aeabi_d2f>
 80029a2:	1c02      	adds	r2, r0, #0
 80029a4:	4b2c      	ldr	r3, [pc, #176]	; (8002a58 <main+0x228>)
 80029a6:	601a      	str	r2, [r3, #0]
	  sprintf ( payload , "%.1f" , pdop ) ;
 80029a8:	4b2b      	ldr	r3, [pc, #172]	; (8002a58 <main+0x228>)
 80029aa:	681b      	ldr	r3, [r3, #0]
 80029ac:	1c18      	adds	r0, r3, #0
 80029ae:	f7ff fe47 	bl	8002640 <__aeabi_f2d>
 80029b2:	0002      	movs	r2, r0
 80029b4:	000b      	movs	r3, r1
 80029b6:	4929      	ldr	r1, [pc, #164]	; (8002a5c <main+0x22c>)
 80029b8:	481d      	ldr	r0, [pc, #116]	; (8002a30 <main+0x200>)
 80029ba:	f006 fc05 	bl	80091c8 <sprintf>
	  my_astro_add_payload_2_queue ( astro_payload_id++ , payload ) ;
 80029be:	4b1d      	ldr	r3, [pc, #116]	; (8002a34 <main+0x204>)
 80029c0:	881b      	ldrh	r3, [r3, #0]
 80029c2:	1c5a      	adds	r2, r3, #1
 80029c4:	b291      	uxth	r1, r2
 80029c6:	4a1b      	ldr	r2, [pc, #108]	; (8002a34 <main+0x204>)
 80029c8:	8011      	strh	r1, [r2, #0]
 80029ca:	4a19      	ldr	r2, [pc, #100]	; (8002a30 <main+0x200>)
 80029cc:	0011      	movs	r1, r2
 80029ce:	0018      	movs	r0, r3
 80029d0:	f005 ffb0 	bl	8008934 <my_astro_add_payload_2_queue>
	  while ( is_evt_pin_high() )
 80029d4:	e005      	b.n	80029e2 <main+0x1b2>
	  {
		  send_debug_logs ( "main.c,ucbw,is_evt_pin_high" ) ;
 80029d6:	4b19      	ldr	r3, [pc, #100]	; (8002a3c <main+0x20c>)
 80029d8:	0018      	movs	r0, r3
 80029da:	f000 fad9 	bl	8002f90 <send_debug_logs>
		  my_astro_read_evt_reg () ;
 80029de:	f005 ffd1 	bl	8008984 <my_astro_read_evt_reg>
	  while ( is_evt_pin_high() )
 80029e2:	f000 fb51 	bl	8003088 <is_evt_pin_high>
 80029e6:	1e03      	subs	r3, r0, #0
 80029e8:	d1f5      	bne.n	80029d6 <main+0x1a6>
	  }
	  send_debug_logs ( "main.c,ucbw,nothing to do! Going to stop for 10 s" ) ;
 80029ea:	4b1d      	ldr	r3, [pc, #116]	; (8002a60 <main+0x230>)
 80029ec:	0018      	movs	r0, r3
 80029ee:	f000 facf 	bl	8002f90 <send_debug_logs>
	  if ( my_rtc_set_alarm ( 3600 ) )
 80029f2:	23e1      	movs	r3, #225	; 0xe1
 80029f4:	011b      	lsls	r3, r3, #4
 80029f6:	0018      	movs	r0, r3
 80029f8:	f006 f864 	bl	8008ac4 <my_rtc_set_alarm>
 80029fc:	1e03      	subs	r3, r0, #0
 80029fe:	d0a4      	beq.n	800294a <main+0x11a>
	  {
		  HAL_SuspendTick () ; // Jak nie wyłączę to mnie przerwanie SysTick od razu wybudzi!!!
 8002a00:	f000 ffde 	bl	80039c0 <HAL_SuspendTick>
		  HAL_PWR_EnterSTOPMode ( PWR_LOWPOWERREGULATOR_ON , PWR_STOPENTRY_WFE ) ;
 8002a04:	2380      	movs	r3, #128	; 0x80
 8002a06:	01db      	lsls	r3, r3, #7
 8002a08:	2102      	movs	r1, #2
 8002a0a:	0018      	movs	r0, r3
 8002a0c:	f001 fae6 	bl	8003fdc <HAL_PWR_EnterSTOPMode>
		  HAL_ResumeTick () ;
 8002a10:	f000 ffe4 	bl	80039dc <HAL_ResumeTick>
	  while ( is_evt_pin_high() )
 8002a14:	e799      	b.n	800294a <main+0x11a>
 8002a16:	46c0      	nop			; (mov r8, r8)
 8002a18:	20000000 	.word	0x20000000
 8002a1c:	20000764 	.word	0x20000764
 8002a20:	20000718 	.word	0x20000718
 8002a24:	0800dd98 	.word	0x0800dd98
 8002a28:	20000004 	.word	0x20000004
 8002a2c:	0800ddb4 	.word	0x0800ddb4
 8002a30:	20000938 	.word	0x20000938
 8002a34:	20000936 	.word	0x20000936
 8002a38:	20000920 	.word	0x20000920
 8002a3c:	0800ddbc 	.word	0x0800ddbc
 8002a40:	200009dc 	.word	0x200009dc
 8002a44:	200009d8 	.word	0x200009d8
 8002a48:	2000000c 	.word	0x2000000c
 8002a4c:	20000008 	.word	0x20000008
 8002a50:	9999999a 	.word	0x9999999a
 8002a54:	4058f999 	.word	0x4058f999
 8002a58:	200009e0 	.word	0x200009e0
 8002a5c:	0800ddd8 	.word	0x0800ddd8
 8002a60:	0800dde0 	.word	0x0800dde0

08002a64 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8002a64:	b590      	push	{r4, r7, lr}
 8002a66:	b095      	sub	sp, #84	; 0x54
 8002a68:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8002a6a:	2414      	movs	r4, #20
 8002a6c:	193b      	adds	r3, r7, r4
 8002a6e:	0018      	movs	r0, r3
 8002a70:	233c      	movs	r3, #60	; 0x3c
 8002a72:	001a      	movs	r2, r3
 8002a74:	2100      	movs	r1, #0
 8002a76:	f006 fc13 	bl	80092a0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8002a7a:	1d3b      	adds	r3, r7, #4
 8002a7c:	0018      	movs	r0, r3
 8002a7e:	2310      	movs	r3, #16
 8002a80:	001a      	movs	r2, r3
 8002a82:	2100      	movs	r1, #0
 8002a84:	f006 fc0c 	bl	80092a0 <memset>

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1);
 8002a88:	2380      	movs	r3, #128	; 0x80
 8002a8a:	009b      	lsls	r3, r3, #2
 8002a8c:	0018      	movs	r0, r3
 8002a8e:	f001 fadd 	bl	800404c <HAL_PWREx_ControlVoltageScaling>

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 8002a92:	f001 fa95 	bl	8003fc0 <HAL_PWR_EnableBkUpAccess>
  __HAL_RCC_LSEDRIVE_CONFIG(RCC_LSEDRIVE_LOW);
 8002a96:	4b1d      	ldr	r3, [pc, #116]	; (8002b0c <SystemClock_Config+0xa8>)
 8002a98:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8002a9a:	4b1c      	ldr	r3, [pc, #112]	; (8002b0c <SystemClock_Config+0xa8>)
 8002a9c:	2118      	movs	r1, #24
 8002a9e:	438a      	bics	r2, r1
 8002aa0:	65da      	str	r2, [r3, #92]	; 0x5c

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_LSE;
 8002aa2:	193b      	adds	r3, r7, r4
 8002aa4:	2206      	movs	r2, #6
 8002aa6:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 8002aa8:	193b      	adds	r3, r7, r4
 8002aaa:	2201      	movs	r2, #1
 8002aac:	609a      	str	r2, [r3, #8]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8002aae:	193b      	adds	r3, r7, r4
 8002ab0:	2280      	movs	r2, #128	; 0x80
 8002ab2:	0052      	lsls	r2, r2, #1
 8002ab4:	60da      	str	r2, [r3, #12]
  RCC_OscInitStruct.HSIDiv = RCC_HSI_DIV1;
 8002ab6:	193b      	adds	r3, r7, r4
 8002ab8:	2200      	movs	r2, #0
 8002aba:	611a      	str	r2, [r3, #16]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8002abc:	193b      	adds	r3, r7, r4
 8002abe:	2240      	movs	r2, #64	; 0x40
 8002ac0:	615a      	str	r2, [r3, #20]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8002ac2:	193b      	adds	r3, r7, r4
 8002ac4:	2200      	movs	r2, #0
 8002ac6:	621a      	str	r2, [r3, #32]
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8002ac8:	193b      	adds	r3, r7, r4
 8002aca:	0018      	movs	r0, r3
 8002acc:	f001 fb0a 	bl	80040e4 <HAL_RCC_OscConfig>
 8002ad0:	1e03      	subs	r3, r0, #0
 8002ad2:	d001      	beq.n	8002ad8 <SystemClock_Config+0x74>
  {
    Error_Handler();
 8002ad4:	f000 fc24 	bl	8003320 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8002ad8:	1d3b      	adds	r3, r7, #4
 8002ada:	2207      	movs	r2, #7
 8002adc:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8002ade:	1d3b      	adds	r3, r7, #4
 8002ae0:	2200      	movs	r2, #0
 8002ae2:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8002ae4:	1d3b      	adds	r3, r7, #4
 8002ae6:	2200      	movs	r2, #0
 8002ae8:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8002aea:	1d3b      	adds	r3, r7, #4
 8002aec:	2200      	movs	r2, #0
 8002aee:	60da      	str	r2, [r3, #12]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8002af0:	1d3b      	adds	r3, r7, #4
 8002af2:	2100      	movs	r1, #0
 8002af4:	0018      	movs	r0, r3
 8002af6:	f001 fe55 	bl	80047a4 <HAL_RCC_ClockConfig>
 8002afa:	1e03      	subs	r3, r0, #0
 8002afc:	d001      	beq.n	8002b02 <SystemClock_Config+0x9e>
  {
    Error_Handler();
 8002afe:	f000 fc0f 	bl	8003320 <Error_Handler>
  }
}
 8002b02:	46c0      	nop			; (mov r8, r8)
 8002b04:	46bd      	mov	sp, r7
 8002b06:	b015      	add	sp, #84	; 0x54
 8002b08:	bd90      	pop	{r4, r7, pc}
 8002b0a:	46c0      	nop			; (mov r8, r8)
 8002b0c:	40021000 	.word	0x40021000

08002b10 <MX_RTC_Init>:
  * @brief RTC Initialization Function
  * @param None
  * @retval None
  */
static void MX_RTC_Init(void)
{
 8002b10:	b580      	push	{r7, lr}
 8002b12:	b090      	sub	sp, #64	; 0x40
 8002b14:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN RTC_Init 0 */

  /* USER CODE END RTC_Init 0 */

  RTC_TimeTypeDef sTime = {0};
 8002b16:	232c      	movs	r3, #44	; 0x2c
 8002b18:	18fb      	adds	r3, r7, r3
 8002b1a:	0018      	movs	r0, r3
 8002b1c:	2314      	movs	r3, #20
 8002b1e:	001a      	movs	r2, r3
 8002b20:	2100      	movs	r1, #0
 8002b22:	f006 fbbd 	bl	80092a0 <memset>
  RTC_DateTypeDef sDate = {0};
 8002b26:	2328      	movs	r3, #40	; 0x28
 8002b28:	18fb      	adds	r3, r7, r3
 8002b2a:	2200      	movs	r2, #0
 8002b2c:	601a      	str	r2, [r3, #0]
  RTC_AlarmTypeDef sAlarm = {0};
 8002b2e:	003b      	movs	r3, r7
 8002b30:	0018      	movs	r0, r3
 8002b32:	2328      	movs	r3, #40	; 0x28
 8002b34:	001a      	movs	r2, r3
 8002b36:	2100      	movs	r1, #0
 8002b38:	f006 fbb2 	bl	80092a0 <memset>

  /* USER CODE END RTC_Init 1 */

  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 8002b3c:	4b44      	ldr	r3, [pc, #272]	; (8002c50 <MX_RTC_Init+0x140>)
 8002b3e:	4a45      	ldr	r2, [pc, #276]	; (8002c54 <MX_RTC_Init+0x144>)
 8002b40:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 8002b42:	4b43      	ldr	r3, [pc, #268]	; (8002c50 <MX_RTC_Init+0x140>)
 8002b44:	2200      	movs	r2, #0
 8002b46:	609a      	str	r2, [r3, #8]
  hrtc.Init.AsynchPrediv = 127;
 8002b48:	4b41      	ldr	r3, [pc, #260]	; (8002c50 <MX_RTC_Init+0x140>)
 8002b4a:	227f      	movs	r2, #127	; 0x7f
 8002b4c:	60da      	str	r2, [r3, #12]
  hrtc.Init.SynchPrediv = 255;
 8002b4e:	4b40      	ldr	r3, [pc, #256]	; (8002c50 <MX_RTC_Init+0x140>)
 8002b50:	22ff      	movs	r2, #255	; 0xff
 8002b52:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 8002b54:	4b3e      	ldr	r3, [pc, #248]	; (8002c50 <MX_RTC_Init+0x140>)
 8002b56:	2200      	movs	r2, #0
 8002b58:	615a      	str	r2, [r3, #20]
  hrtc.Init.OutPutRemap = RTC_OUTPUT_REMAP_NONE;
 8002b5a:	4b3d      	ldr	r3, [pc, #244]	; (8002c50 <MX_RTC_Init+0x140>)
 8002b5c:	2200      	movs	r2, #0
 8002b5e:	619a      	str	r2, [r3, #24]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 8002b60:	4b3b      	ldr	r3, [pc, #236]	; (8002c50 <MX_RTC_Init+0x140>)
 8002b62:	2200      	movs	r2, #0
 8002b64:	61da      	str	r2, [r3, #28]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 8002b66:	4b3a      	ldr	r3, [pc, #232]	; (8002c50 <MX_RTC_Init+0x140>)
 8002b68:	2280      	movs	r2, #128	; 0x80
 8002b6a:	05d2      	lsls	r2, r2, #23
 8002b6c:	621a      	str	r2, [r3, #32]
  hrtc.Init.OutPutPullUp = RTC_OUTPUT_PULLUP_NONE;
 8002b6e:	4b38      	ldr	r3, [pc, #224]	; (8002c50 <MX_RTC_Init+0x140>)
 8002b70:	2200      	movs	r2, #0
 8002b72:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 8002b74:	4b36      	ldr	r3, [pc, #216]	; (8002c50 <MX_RTC_Init+0x140>)
 8002b76:	0018      	movs	r0, r3
 8002b78:	f002 f9fa 	bl	8004f70 <HAL_RTC_Init>
 8002b7c:	1e03      	subs	r3, r0, #0
 8002b7e:	d001      	beq.n	8002b84 <MX_RTC_Init+0x74>
  {
    Error_Handler();
 8002b80:	f000 fbce 	bl	8003320 <Error_Handler>

  /* USER CODE END Check_RTC_BKUP */

  /** Initialize RTC and set the Time and Date
  */
  sTime.Hours = 0;
 8002b84:	212c      	movs	r1, #44	; 0x2c
 8002b86:	187b      	adds	r3, r7, r1
 8002b88:	2200      	movs	r2, #0
 8002b8a:	701a      	strb	r2, [r3, #0]
  sTime.Minutes = 0;
 8002b8c:	187b      	adds	r3, r7, r1
 8002b8e:	2200      	movs	r2, #0
 8002b90:	705a      	strb	r2, [r3, #1]
  sTime.Seconds = 0;
 8002b92:	187b      	adds	r3, r7, r1
 8002b94:	2200      	movs	r2, #0
 8002b96:	709a      	strb	r2, [r3, #2]
  sTime.SubSeconds = 0;
 8002b98:	187b      	adds	r3, r7, r1
 8002b9a:	2200      	movs	r2, #0
 8002b9c:	605a      	str	r2, [r3, #4]
  sTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 8002b9e:	187b      	adds	r3, r7, r1
 8002ba0:	2200      	movs	r2, #0
 8002ba2:	60da      	str	r2, [r3, #12]
  sTime.StoreOperation = RTC_STOREOPERATION_RESET;
 8002ba4:	187b      	adds	r3, r7, r1
 8002ba6:	2200      	movs	r2, #0
 8002ba8:	611a      	str	r2, [r3, #16]
  if (HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BIN) != HAL_OK)
 8002baa:	1879      	adds	r1, r7, r1
 8002bac:	4b28      	ldr	r3, [pc, #160]	; (8002c50 <MX_RTC_Init+0x140>)
 8002bae:	2200      	movs	r2, #0
 8002bb0:	0018      	movs	r0, r3
 8002bb2:	f002 fa7f 	bl	80050b4 <HAL_RTC_SetTime>
 8002bb6:	1e03      	subs	r3, r0, #0
 8002bb8:	d001      	beq.n	8002bbe <MX_RTC_Init+0xae>
  {
    Error_Handler();
 8002bba:	f000 fbb1 	bl	8003320 <Error_Handler>
  }
  sDate.WeekDay = RTC_WEEKDAY_SATURDAY;
 8002bbe:	2128      	movs	r1, #40	; 0x28
 8002bc0:	187b      	adds	r3, r7, r1
 8002bc2:	2206      	movs	r2, #6
 8002bc4:	701a      	strb	r2, [r3, #0]
  sDate.Month = RTC_MONTH_JANUARY;
 8002bc6:	187b      	adds	r3, r7, r1
 8002bc8:	2201      	movs	r2, #1
 8002bca:	705a      	strb	r2, [r3, #1]
  sDate.Date = 1;
 8002bcc:	187b      	adds	r3, r7, r1
 8002bce:	2201      	movs	r2, #1
 8002bd0:	709a      	strb	r2, [r3, #2]
  sDate.Year = 0;
 8002bd2:	187b      	adds	r3, r7, r1
 8002bd4:	2200      	movs	r2, #0
 8002bd6:	70da      	strb	r2, [r3, #3]

  if (HAL_RTC_SetDate(&hrtc, &sDate, RTC_FORMAT_BIN) != HAL_OK)
 8002bd8:	1879      	adds	r1, r7, r1
 8002bda:	4b1d      	ldr	r3, [pc, #116]	; (8002c50 <MX_RTC_Init+0x140>)
 8002bdc:	2200      	movs	r2, #0
 8002bde:	0018      	movs	r0, r3
 8002be0:	f002 fb6c 	bl	80052bc <HAL_RTC_SetDate>
 8002be4:	1e03      	subs	r3, r0, #0
 8002be6:	d001      	beq.n	8002bec <MX_RTC_Init+0xdc>
  {
    Error_Handler();
 8002be8:	f000 fb9a 	bl	8003320 <Error_Handler>
  }

  /** Enable the Alarm A
  */
  sAlarm.AlarmTime.Hours = 0;
 8002bec:	003b      	movs	r3, r7
 8002bee:	2200      	movs	r2, #0
 8002bf0:	701a      	strb	r2, [r3, #0]
  sAlarm.AlarmTime.Minutes = 0;
 8002bf2:	003b      	movs	r3, r7
 8002bf4:	2200      	movs	r2, #0
 8002bf6:	705a      	strb	r2, [r3, #1]
  sAlarm.AlarmTime.Seconds = 0;
 8002bf8:	003b      	movs	r3, r7
 8002bfa:	2200      	movs	r2, #0
 8002bfc:	709a      	strb	r2, [r3, #2]
  sAlarm.AlarmTime.SubSeconds = 0;
 8002bfe:	003b      	movs	r3, r7
 8002c00:	2200      	movs	r2, #0
 8002c02:	605a      	str	r2, [r3, #4]
  sAlarm.AlarmTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 8002c04:	003b      	movs	r3, r7
 8002c06:	2200      	movs	r2, #0
 8002c08:	60da      	str	r2, [r3, #12]
  sAlarm.AlarmTime.StoreOperation = RTC_STOREOPERATION_RESET;
 8002c0a:	003b      	movs	r3, r7
 8002c0c:	2200      	movs	r2, #0
 8002c0e:	611a      	str	r2, [r3, #16]
  sAlarm.AlarmMask = RTC_ALARMMASK_NONE;
 8002c10:	003b      	movs	r3, r7
 8002c12:	2200      	movs	r2, #0
 8002c14:	615a      	str	r2, [r3, #20]
  sAlarm.AlarmSubSecondMask = RTC_ALARMSUBSECONDMASK_ALL;
 8002c16:	003b      	movs	r3, r7
 8002c18:	2200      	movs	r2, #0
 8002c1a:	619a      	str	r2, [r3, #24]
  sAlarm.AlarmDateWeekDaySel = RTC_ALARMDATEWEEKDAYSEL_DATE;
 8002c1c:	003b      	movs	r3, r7
 8002c1e:	2200      	movs	r2, #0
 8002c20:	61da      	str	r2, [r3, #28]
  sAlarm.AlarmDateWeekDay = 1;
 8002c22:	003b      	movs	r3, r7
 8002c24:	2220      	movs	r2, #32
 8002c26:	2101      	movs	r1, #1
 8002c28:	5499      	strb	r1, [r3, r2]
  sAlarm.Alarm = RTC_ALARM_A;
 8002c2a:	003b      	movs	r3, r7
 8002c2c:	2280      	movs	r2, #128	; 0x80
 8002c2e:	0052      	lsls	r2, r2, #1
 8002c30:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_RTC_SetAlarm_IT(&hrtc, &sAlarm, RTC_FORMAT_BIN) != HAL_OK)
 8002c32:	0039      	movs	r1, r7
 8002c34:	4b06      	ldr	r3, [pc, #24]	; (8002c50 <MX_RTC_Init+0x140>)
 8002c36:	2200      	movs	r2, #0
 8002c38:	0018      	movs	r0, r3
 8002c3a:	f002 fc1f 	bl	800547c <HAL_RTC_SetAlarm_IT>
 8002c3e:	1e03      	subs	r3, r0, #0
 8002c40:	d001      	beq.n	8002c46 <MX_RTC_Init+0x136>
  {
    Error_Handler();
 8002c42:	f000 fb6d 	bl	8003320 <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 8002c46:	46c0      	nop			; (mov r8, r8)
 8002c48:	46bd      	mov	sp, r7
 8002c4a:	b010      	add	sp, #64	; 0x40
 8002c4c:	bd80      	pop	{r7, pc}
 8002c4e:	46c0      	nop			; (mov r8, r8)
 8002c50:	200006ec 	.word	0x200006ec
 8002c54:	40002800 	.word	0x40002800

08002c58 <MX_TIM6_Init>:
  * @brief TIM6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM6_Init(void)
{
 8002c58:	b580      	push	{r7, lr}
 8002c5a:	b084      	sub	sp, #16
 8002c5c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM6_Init 0 */

  /* USER CODE END TIM6_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002c5e:	1d3b      	adds	r3, r7, #4
 8002c60:	0018      	movs	r0, r3
 8002c62:	230c      	movs	r3, #12
 8002c64:	001a      	movs	r2, r3
 8002c66:	2100      	movs	r1, #0
 8002c68:	f006 fb1a 	bl	80092a0 <memset>

  /* USER CODE BEGIN TIM6_Init 1 */

  /* USER CODE END TIM6_Init 1 */
  htim6.Instance = TIM6;
 8002c6c:	4b15      	ldr	r3, [pc, #84]	; (8002cc4 <MX_TIM6_Init+0x6c>)
 8002c6e:	4a16      	ldr	r2, [pc, #88]	; (8002cc8 <MX_TIM6_Init+0x70>)
 8002c70:	601a      	str	r2, [r3, #0]
  htim6.Init.Prescaler = 16000-1;
 8002c72:	4b14      	ldr	r3, [pc, #80]	; (8002cc4 <MX_TIM6_Init+0x6c>)
 8002c74:	4a15      	ldr	r2, [pc, #84]	; (8002ccc <MX_TIM6_Init+0x74>)
 8002c76:	605a      	str	r2, [r3, #4]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002c78:	4b12      	ldr	r3, [pc, #72]	; (8002cc4 <MX_TIM6_Init+0x6c>)
 8002c7a:	2200      	movs	r2, #0
 8002c7c:	609a      	str	r2, [r3, #8]
  htim6.Init.Period = 1000-1;
 8002c7e:	4b11      	ldr	r3, [pc, #68]	; (8002cc4 <MX_TIM6_Init+0x6c>)
 8002c80:	4a13      	ldr	r2, [pc, #76]	; (8002cd0 <MX_TIM6_Init+0x78>)
 8002c82:	60da      	str	r2, [r3, #12]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002c84:	4b0f      	ldr	r3, [pc, #60]	; (8002cc4 <MX_TIM6_Init+0x6c>)
 8002c86:	2200      	movs	r2, #0
 8002c88:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 8002c8a:	4b0e      	ldr	r3, [pc, #56]	; (8002cc4 <MX_TIM6_Init+0x6c>)
 8002c8c:	0018      	movs	r0, r3
 8002c8e:	f002 fe6e 	bl	800596e <HAL_TIM_Base_Init>
 8002c92:	1e03      	subs	r3, r0, #0
 8002c94:	d001      	beq.n	8002c9a <MX_TIM6_Init+0x42>
  {
    Error_Handler();
 8002c96:	f000 fb43 	bl	8003320 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002c9a:	1d3b      	adds	r3, r7, #4
 8002c9c:	2200      	movs	r2, #0
 8002c9e:	601a      	str	r2, [r3, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002ca0:	1d3b      	adds	r3, r7, #4
 8002ca2:	2200      	movs	r2, #0
 8002ca4:	609a      	str	r2, [r3, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 8002ca6:	1d3a      	adds	r2, r7, #4
 8002ca8:	4b06      	ldr	r3, [pc, #24]	; (8002cc4 <MX_TIM6_Init+0x6c>)
 8002caa:	0011      	movs	r1, r2
 8002cac:	0018      	movs	r0, r3
 8002cae:	f003 f923 	bl	8005ef8 <HAL_TIMEx_MasterConfigSynchronization>
 8002cb2:	1e03      	subs	r3, r0, #0
 8002cb4:	d001      	beq.n	8002cba <MX_TIM6_Init+0x62>
  {
    Error_Handler();
 8002cb6:	f000 fb33 	bl	8003320 <Error_Handler>
  }
  /* USER CODE BEGIN TIM6_Init 2 */

  /* USER CODE END TIM6_Init 2 */

}
 8002cba:	46c0      	nop			; (mov r8, r8)
 8002cbc:	46bd      	mov	sp, r7
 8002cbe:	b004      	add	sp, #16
 8002cc0:	bd80      	pop	{r7, pc}
 8002cc2:	46c0      	nop			; (mov r8, r8)
 8002cc4:	20000718 	.word	0x20000718
 8002cc8:	40001000 	.word	0x40001000
 8002ccc:	00003e7f 	.word	0x00003e7f
 8002cd0:	000003e7 	.word	0x000003e7

08002cd4 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8002cd4:	b580      	push	{r7, lr}
 8002cd6:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8002cd8:	4b23      	ldr	r3, [pc, #140]	; (8002d68 <MX_USART2_UART_Init+0x94>)
 8002cda:	4a24      	ldr	r2, [pc, #144]	; (8002d6c <MX_USART2_UART_Init+0x98>)
 8002cdc:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8002cde:	4b22      	ldr	r3, [pc, #136]	; (8002d68 <MX_USART2_UART_Init+0x94>)
 8002ce0:	22e1      	movs	r2, #225	; 0xe1
 8002ce2:	0252      	lsls	r2, r2, #9
 8002ce4:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8002ce6:	4b20      	ldr	r3, [pc, #128]	; (8002d68 <MX_USART2_UART_Init+0x94>)
 8002ce8:	2200      	movs	r2, #0
 8002cea:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8002cec:	4b1e      	ldr	r3, [pc, #120]	; (8002d68 <MX_USART2_UART_Init+0x94>)
 8002cee:	2200      	movs	r2, #0
 8002cf0:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8002cf2:	4b1d      	ldr	r3, [pc, #116]	; (8002d68 <MX_USART2_UART_Init+0x94>)
 8002cf4:	2200      	movs	r2, #0
 8002cf6:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8002cf8:	4b1b      	ldr	r3, [pc, #108]	; (8002d68 <MX_USART2_UART_Init+0x94>)
 8002cfa:	220c      	movs	r2, #12
 8002cfc:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002cfe:	4b1a      	ldr	r3, [pc, #104]	; (8002d68 <MX_USART2_UART_Init+0x94>)
 8002d00:	2200      	movs	r2, #0
 8002d02:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8002d04:	4b18      	ldr	r3, [pc, #96]	; (8002d68 <MX_USART2_UART_Init+0x94>)
 8002d06:	2200      	movs	r2, #0
 8002d08:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8002d0a:	4b17      	ldr	r3, [pc, #92]	; (8002d68 <MX_USART2_UART_Init+0x94>)
 8002d0c:	2200      	movs	r2, #0
 8002d0e:	621a      	str	r2, [r3, #32]
  huart2.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8002d10:	4b15      	ldr	r3, [pc, #84]	; (8002d68 <MX_USART2_UART_Init+0x94>)
 8002d12:	2200      	movs	r2, #0
 8002d14:	625a      	str	r2, [r3, #36]	; 0x24
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8002d16:	4b14      	ldr	r3, [pc, #80]	; (8002d68 <MX_USART2_UART_Init+0x94>)
 8002d18:	2200      	movs	r2, #0
 8002d1a:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8002d1c:	4b12      	ldr	r3, [pc, #72]	; (8002d68 <MX_USART2_UART_Init+0x94>)
 8002d1e:	0018      	movs	r0, r3
 8002d20:	f003 f978 	bl	8006014 <HAL_UART_Init>
 8002d24:	1e03      	subs	r3, r0, #0
 8002d26:	d001      	beq.n	8002d2c <MX_USART2_UART_Init+0x58>
  {
    Error_Handler();
 8002d28:	f000 fafa 	bl	8003320 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart2, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8002d2c:	4b0e      	ldr	r3, [pc, #56]	; (8002d68 <MX_USART2_UART_Init+0x94>)
 8002d2e:	2100      	movs	r1, #0
 8002d30:	0018      	movs	r0, r3
 8002d32:	f004 f89d 	bl	8006e70 <HAL_UARTEx_SetTxFifoThreshold>
 8002d36:	1e03      	subs	r3, r0, #0
 8002d38:	d001      	beq.n	8002d3e <MX_USART2_UART_Init+0x6a>
  {
    Error_Handler();
 8002d3a:	f000 faf1 	bl	8003320 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart2, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8002d3e:	4b0a      	ldr	r3, [pc, #40]	; (8002d68 <MX_USART2_UART_Init+0x94>)
 8002d40:	2100      	movs	r1, #0
 8002d42:	0018      	movs	r0, r3
 8002d44:	f004 f8d4 	bl	8006ef0 <HAL_UARTEx_SetRxFifoThreshold>
 8002d48:	1e03      	subs	r3, r0, #0
 8002d4a:	d001      	beq.n	8002d50 <MX_USART2_UART_Init+0x7c>
  {
    Error_Handler();
 8002d4c:	f000 fae8 	bl	8003320 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart2) != HAL_OK)
 8002d50:	4b05      	ldr	r3, [pc, #20]	; (8002d68 <MX_USART2_UART_Init+0x94>)
 8002d52:	0018      	movs	r0, r3
 8002d54:	f004 f852 	bl	8006dfc <HAL_UARTEx_DisableFifoMode>
 8002d58:	1e03      	subs	r3, r0, #0
 8002d5a:	d001      	beq.n	8002d60 <MX_USART2_UART_Init+0x8c>
  {
    Error_Handler();
 8002d5c:	f000 fae0 	bl	8003320 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8002d60:	46c0      	nop			; (mov r8, r8)
 8002d62:	46bd      	mov	sp, r7
 8002d64:	bd80      	pop	{r7, pc}
 8002d66:	46c0      	nop			; (mov r8, r8)
 8002d68:	20000764 	.word	0x20000764
 8002d6c:	40004400 	.word	0x40004400

08002d70 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8002d70:	b580      	push	{r7, lr}
 8002d72:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8002d74:	4b23      	ldr	r3, [pc, #140]	; (8002e04 <MX_USART3_UART_Init+0x94>)
 8002d76:	4a24      	ldr	r2, [pc, #144]	; (8002e08 <MX_USART3_UART_Init+0x98>)
 8002d78:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 9600;
 8002d7a:	4b22      	ldr	r3, [pc, #136]	; (8002e04 <MX_USART3_UART_Init+0x94>)
 8002d7c:	2296      	movs	r2, #150	; 0x96
 8002d7e:	0192      	lsls	r2, r2, #6
 8002d80:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8002d82:	4b20      	ldr	r3, [pc, #128]	; (8002e04 <MX_USART3_UART_Init+0x94>)
 8002d84:	2200      	movs	r2, #0
 8002d86:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8002d88:	4b1e      	ldr	r3, [pc, #120]	; (8002e04 <MX_USART3_UART_Init+0x94>)
 8002d8a:	2200      	movs	r2, #0
 8002d8c:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8002d8e:	4b1d      	ldr	r3, [pc, #116]	; (8002e04 <MX_USART3_UART_Init+0x94>)
 8002d90:	2200      	movs	r2, #0
 8002d92:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8002d94:	4b1b      	ldr	r3, [pc, #108]	; (8002e04 <MX_USART3_UART_Init+0x94>)
 8002d96:	220c      	movs	r2, #12
 8002d98:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002d9a:	4b1a      	ldr	r3, [pc, #104]	; (8002e04 <MX_USART3_UART_Init+0x94>)
 8002d9c:	2200      	movs	r2, #0
 8002d9e:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8002da0:	4b18      	ldr	r3, [pc, #96]	; (8002e04 <MX_USART3_UART_Init+0x94>)
 8002da2:	2200      	movs	r2, #0
 8002da4:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8002da6:	4b17      	ldr	r3, [pc, #92]	; (8002e04 <MX_USART3_UART_Init+0x94>)
 8002da8:	2200      	movs	r2, #0
 8002daa:	621a      	str	r2, [r3, #32]
  huart3.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8002dac:	4b15      	ldr	r3, [pc, #84]	; (8002e04 <MX_USART3_UART_Init+0x94>)
 8002dae:	2200      	movs	r2, #0
 8002db0:	625a      	str	r2, [r3, #36]	; 0x24
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8002db2:	4b14      	ldr	r3, [pc, #80]	; (8002e04 <MX_USART3_UART_Init+0x94>)
 8002db4:	2200      	movs	r2, #0
 8002db6:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8002db8:	4b12      	ldr	r3, [pc, #72]	; (8002e04 <MX_USART3_UART_Init+0x94>)
 8002dba:	0018      	movs	r0, r3
 8002dbc:	f003 f92a 	bl	8006014 <HAL_UART_Init>
 8002dc0:	1e03      	subs	r3, r0, #0
 8002dc2:	d001      	beq.n	8002dc8 <MX_USART3_UART_Init+0x58>
  {
    Error_Handler();
 8002dc4:	f000 faac 	bl	8003320 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart3, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8002dc8:	4b0e      	ldr	r3, [pc, #56]	; (8002e04 <MX_USART3_UART_Init+0x94>)
 8002dca:	2100      	movs	r1, #0
 8002dcc:	0018      	movs	r0, r3
 8002dce:	f004 f84f 	bl	8006e70 <HAL_UARTEx_SetTxFifoThreshold>
 8002dd2:	1e03      	subs	r3, r0, #0
 8002dd4:	d001      	beq.n	8002dda <MX_USART3_UART_Init+0x6a>
  {
    Error_Handler();
 8002dd6:	f000 faa3 	bl	8003320 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart3, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8002dda:	4b0a      	ldr	r3, [pc, #40]	; (8002e04 <MX_USART3_UART_Init+0x94>)
 8002ddc:	2100      	movs	r1, #0
 8002dde:	0018      	movs	r0, r3
 8002de0:	f004 f886 	bl	8006ef0 <HAL_UARTEx_SetRxFifoThreshold>
 8002de4:	1e03      	subs	r3, r0, #0
 8002de6:	d001      	beq.n	8002dec <MX_USART3_UART_Init+0x7c>
  {
    Error_Handler();
 8002de8:	f000 fa9a 	bl	8003320 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart3) != HAL_OK)
 8002dec:	4b05      	ldr	r3, [pc, #20]	; (8002e04 <MX_USART3_UART_Init+0x94>)
 8002dee:	0018      	movs	r0, r3
 8002df0:	f004 f804 	bl	8006dfc <HAL_UARTEx_DisableFifoMode>
 8002df4:	1e03      	subs	r3, r0, #0
 8002df6:	d001      	beq.n	8002dfc <MX_USART3_UART_Init+0x8c>
  {
    Error_Handler();
 8002df8:	f000 fa92 	bl	8003320 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8002dfc:	46c0      	nop			; (mov r8, r8)
 8002dfe:	46bd      	mov	sp, r7
 8002e00:	bd80      	pop	{r7, pc}
 8002e02:	46c0      	nop			; (mov r8, r8)
 8002e04:	200007f8 	.word	0x200007f8
 8002e08:	40004800 	.word	0x40004800

08002e0c <MX_USART4_UART_Init>:
  * @brief USART4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART4_UART_Init(void)
{
 8002e0c:	b580      	push	{r7, lr}
 8002e0e:	af00      	add	r7, sp, #0
  /* USER CODE END USART4_Init 0 */

  /* USER CODE BEGIN USART4_Init 1 */

  /* USER CODE END USART4_Init 1 */
  huart4.Instance = USART4;
 8002e10:	4b16      	ldr	r3, [pc, #88]	; (8002e6c <MX_USART4_UART_Init+0x60>)
 8002e12:	4a17      	ldr	r2, [pc, #92]	; (8002e70 <MX_USART4_UART_Init+0x64>)
 8002e14:	601a      	str	r2, [r3, #0]
  huart4.Init.BaudRate = 115200;
 8002e16:	4b15      	ldr	r3, [pc, #84]	; (8002e6c <MX_USART4_UART_Init+0x60>)
 8002e18:	22e1      	movs	r2, #225	; 0xe1
 8002e1a:	0252      	lsls	r2, r2, #9
 8002e1c:	605a      	str	r2, [r3, #4]
  huart4.Init.WordLength = UART_WORDLENGTH_8B;
 8002e1e:	4b13      	ldr	r3, [pc, #76]	; (8002e6c <MX_USART4_UART_Init+0x60>)
 8002e20:	2200      	movs	r2, #0
 8002e22:	609a      	str	r2, [r3, #8]
  huart4.Init.StopBits = UART_STOPBITS_1;
 8002e24:	4b11      	ldr	r3, [pc, #68]	; (8002e6c <MX_USART4_UART_Init+0x60>)
 8002e26:	2200      	movs	r2, #0
 8002e28:	60da      	str	r2, [r3, #12]
  huart4.Init.Parity = UART_PARITY_NONE;
 8002e2a:	4b10      	ldr	r3, [pc, #64]	; (8002e6c <MX_USART4_UART_Init+0x60>)
 8002e2c:	2200      	movs	r2, #0
 8002e2e:	611a      	str	r2, [r3, #16]
  huart4.Init.Mode = UART_MODE_TX_RX;
 8002e30:	4b0e      	ldr	r3, [pc, #56]	; (8002e6c <MX_USART4_UART_Init+0x60>)
 8002e32:	220c      	movs	r2, #12
 8002e34:	615a      	str	r2, [r3, #20]
  huart4.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002e36:	4b0d      	ldr	r3, [pc, #52]	; (8002e6c <MX_USART4_UART_Init+0x60>)
 8002e38:	2200      	movs	r2, #0
 8002e3a:	619a      	str	r2, [r3, #24]
  huart4.Init.OverSampling = UART_OVERSAMPLING_16;
 8002e3c:	4b0b      	ldr	r3, [pc, #44]	; (8002e6c <MX_USART4_UART_Init+0x60>)
 8002e3e:	2200      	movs	r2, #0
 8002e40:	61da      	str	r2, [r3, #28]
  huart4.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8002e42:	4b0a      	ldr	r3, [pc, #40]	; (8002e6c <MX_USART4_UART_Init+0x60>)
 8002e44:	2200      	movs	r2, #0
 8002e46:	621a      	str	r2, [r3, #32]
  huart4.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8002e48:	4b08      	ldr	r3, [pc, #32]	; (8002e6c <MX_USART4_UART_Init+0x60>)
 8002e4a:	2200      	movs	r2, #0
 8002e4c:	625a      	str	r2, [r3, #36]	; 0x24
  huart4.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8002e4e:	4b07      	ldr	r3, [pc, #28]	; (8002e6c <MX_USART4_UART_Init+0x60>)
 8002e50:	2200      	movs	r2, #0
 8002e52:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart4) != HAL_OK)
 8002e54:	4b05      	ldr	r3, [pc, #20]	; (8002e6c <MX_USART4_UART_Init+0x60>)
 8002e56:	0018      	movs	r0, r3
 8002e58:	f003 f8dc 	bl	8006014 <HAL_UART_Init>
 8002e5c:	1e03      	subs	r3, r0, #0
 8002e5e:	d001      	beq.n	8002e64 <MX_USART4_UART_Init+0x58>
  {
    Error_Handler();
 8002e60:	f000 fa5e 	bl	8003320 <Error_Handler>
  }
  /* USER CODE BEGIN USART4_Init 2 */

  /* USER CODE END USART4_Init 2 */

}
 8002e64:	46c0      	nop			; (mov r8, r8)
 8002e66:	46bd      	mov	sp, r7
 8002e68:	bd80      	pop	{r7, pc}
 8002e6a:	46c0      	nop			; (mov r8, r8)
 8002e6c:	2000088c 	.word	0x2000088c
 8002e70:	40004c00 	.word	0x40004c00

08002e74 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8002e74:	b590      	push	{r4, r7, lr}
 8002e76:	b08b      	sub	sp, #44	; 0x2c
 8002e78:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002e7a:	2414      	movs	r4, #20
 8002e7c:	193b      	adds	r3, r7, r4
 8002e7e:	0018      	movs	r0, r3
 8002e80:	2314      	movs	r3, #20
 8002e82:	001a      	movs	r2, r3
 8002e84:	2100      	movs	r1, #0
 8002e86:	f006 fa0b 	bl	80092a0 <memset>
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8002e8a:	4b3f      	ldr	r3, [pc, #252]	; (8002f88 <MX_GPIO_Init+0x114>)
 8002e8c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002e8e:	4b3e      	ldr	r3, [pc, #248]	; (8002f88 <MX_GPIO_Init+0x114>)
 8002e90:	2104      	movs	r1, #4
 8002e92:	430a      	orrs	r2, r1
 8002e94:	635a      	str	r2, [r3, #52]	; 0x34
 8002e96:	4b3c      	ldr	r3, [pc, #240]	; (8002f88 <MX_GPIO_Init+0x114>)
 8002e98:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002e9a:	2204      	movs	r2, #4
 8002e9c:	4013      	ands	r3, r2
 8002e9e:	613b      	str	r3, [r7, #16]
 8002ea0:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8002ea2:	4b39      	ldr	r3, [pc, #228]	; (8002f88 <MX_GPIO_Init+0x114>)
 8002ea4:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002ea6:	4b38      	ldr	r3, [pc, #224]	; (8002f88 <MX_GPIO_Init+0x114>)
 8002ea8:	2120      	movs	r1, #32
 8002eaa:	430a      	orrs	r2, r1
 8002eac:	635a      	str	r2, [r3, #52]	; 0x34
 8002eae:	4b36      	ldr	r3, [pc, #216]	; (8002f88 <MX_GPIO_Init+0x114>)
 8002eb0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002eb2:	2220      	movs	r2, #32
 8002eb4:	4013      	ands	r3, r2
 8002eb6:	60fb      	str	r3, [r7, #12]
 8002eb8:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8002eba:	4b33      	ldr	r3, [pc, #204]	; (8002f88 <MX_GPIO_Init+0x114>)
 8002ebc:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002ebe:	4b32      	ldr	r3, [pc, #200]	; (8002f88 <MX_GPIO_Init+0x114>)
 8002ec0:	2101      	movs	r1, #1
 8002ec2:	430a      	orrs	r2, r1
 8002ec4:	635a      	str	r2, [r3, #52]	; 0x34
 8002ec6:	4b30      	ldr	r3, [pc, #192]	; (8002f88 <MX_GPIO_Init+0x114>)
 8002ec8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002eca:	2201      	movs	r2, #1
 8002ecc:	4013      	ands	r3, r2
 8002ece:	60bb      	str	r3, [r7, #8]
 8002ed0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8002ed2:	4b2d      	ldr	r3, [pc, #180]	; (8002f88 <MX_GPIO_Init+0x114>)
 8002ed4:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002ed6:	4b2c      	ldr	r3, [pc, #176]	; (8002f88 <MX_GPIO_Init+0x114>)
 8002ed8:	2102      	movs	r1, #2
 8002eda:	430a      	orrs	r2, r1
 8002edc:	635a      	str	r2, [r3, #52]	; 0x34
 8002ede:	4b2a      	ldr	r3, [pc, #168]	; (8002f88 <MX_GPIO_Init+0x114>)
 8002ee0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002ee2:	2202      	movs	r2, #2
 8002ee4:	4013      	ands	r3, r2
 8002ee6:	607b      	str	r3, [r7, #4]
 8002ee8:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LDG_GPIO_Port, LDG_Pin, GPIO_PIN_RESET);
 8002eea:	23a0      	movs	r3, #160	; 0xa0
 8002eec:	05db      	lsls	r3, r3, #23
 8002eee:	2200      	movs	r2, #0
 8002ef0:	2120      	movs	r1, #32
 8002ef2:	0018      	movs	r0, r3
 8002ef4:	f001 f813 	bl	8003f1e <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, ASTRO_WKUP_Pin|ASTRO_RST_Pin, GPIO_PIN_RESET);
 8002ef8:	4b24      	ldr	r3, [pc, #144]	; (8002f8c <MX_GPIO_Init+0x118>)
 8002efa:	2200      	movs	r2, #0
 8002efc:	2103      	movs	r1, #3
 8002efe:	0018      	movs	r0, r3
 8002f00:	f001 f80d 	bl	8003f1e <HAL_GPIO_WritePin>

  /*Configure GPIO pin : LDG_Pin */
  GPIO_InitStruct.Pin = LDG_Pin;
 8002f04:	193b      	adds	r3, r7, r4
 8002f06:	2220      	movs	r2, #32
 8002f08:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002f0a:	193b      	adds	r3, r7, r4
 8002f0c:	2201      	movs	r2, #1
 8002f0e:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002f10:	193b      	adds	r3, r7, r4
 8002f12:	2200      	movs	r2, #0
 8002f14:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8002f16:	193b      	adds	r3, r7, r4
 8002f18:	2202      	movs	r2, #2
 8002f1a:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(LDG_GPIO_Port, &GPIO_InitStruct);
 8002f1c:	193a      	adds	r2, r7, r4
 8002f1e:	23a0      	movs	r3, #160	; 0xa0
 8002f20:	05db      	lsls	r3, r3, #23
 8002f22:	0011      	movs	r1, r2
 8002f24:	0018      	movs	r0, r3
 8002f26:	f000 fe71 	bl	8003c0c <HAL_GPIO_Init>

  /*Configure GPIO pins : ASTRO_WKUP_Pin ASTRO_RST_Pin */
  GPIO_InitStruct.Pin = ASTRO_WKUP_Pin|ASTRO_RST_Pin;
 8002f2a:	193b      	adds	r3, r7, r4
 8002f2c:	2203      	movs	r2, #3
 8002f2e:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002f30:	193b      	adds	r3, r7, r4
 8002f32:	2201      	movs	r2, #1
 8002f34:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002f36:	193b      	adds	r3, r7, r4
 8002f38:	2200      	movs	r2, #0
 8002f3a:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002f3c:	193b      	adds	r3, r7, r4
 8002f3e:	2200      	movs	r2, #0
 8002f40:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002f42:	193b      	adds	r3, r7, r4
 8002f44:	4a11      	ldr	r2, [pc, #68]	; (8002f8c <MX_GPIO_Init+0x118>)
 8002f46:	0019      	movs	r1, r3
 8002f48:	0010      	movs	r0, r2
 8002f4a:	f000 fe5f 	bl	8003c0c <HAL_GPIO_Init>

  /*Configure GPIO pin : ASTRO_EVT_IT2_Pin */
  GPIO_InitStruct.Pin = ASTRO_EVT_IT2_Pin;
 8002f4e:	0021      	movs	r1, r4
 8002f50:	187b      	adds	r3, r7, r1
 8002f52:	2204      	movs	r2, #4
 8002f54:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8002f56:	187b      	adds	r3, r7, r1
 8002f58:	2288      	movs	r2, #136	; 0x88
 8002f5a:	0352      	lsls	r2, r2, #13
 8002f5c:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002f5e:	187b      	adds	r3, r7, r1
 8002f60:	2200      	movs	r2, #0
 8002f62:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(ASTRO_EVT_IT2_GPIO_Port, &GPIO_InitStruct);
 8002f64:	187b      	adds	r3, r7, r1
 8002f66:	4a09      	ldr	r2, [pc, #36]	; (8002f8c <MX_GPIO_Init+0x118>)
 8002f68:	0019      	movs	r1, r3
 8002f6a:	0010      	movs	r0, r2
 8002f6c:	f000 fe4e 	bl	8003c0c <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI2_3_IRQn, 3, 0);
 8002f70:	2200      	movs	r2, #0
 8002f72:	2103      	movs	r1, #3
 8002f74:	2006      	movs	r0, #6
 8002f76:	f000 fe13 	bl	8003ba0 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI2_3_IRQn);
 8002f7a:	2006      	movs	r0, #6
 8002f7c:	f000 fe25 	bl	8003bca <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8002f80:	46c0      	nop			; (mov r8, r8)
 8002f82:	46bd      	mov	sp, r7
 8002f84:	b00b      	add	sp, #44	; 0x2c
 8002f86:	bd90      	pop	{r4, r7, pc}
 8002f88:	40021000 	.word	0x40021000
 8002f8c:	50000400 	.word	0x50000400

08002f90 <send_debug_logs>:

/* USER CODE BEGIN 4 */
void send_debug_logs ( char* p_tx_buffer )
{
 8002f90:	b580      	push	{r7, lr}
 8002f92:	b084      	sub	sp, #16
 8002f94:	af00      	add	r7, sp, #0
 8002f96:	6078      	str	r0, [r7, #4]
    uint32_t length = strlen ( p_tx_buffer ) ;
 8002f98:	687b      	ldr	r3, [r7, #4]
 8002f9a:	0018      	movs	r0, r3
 8002f9c:	f7fd f8b2 	bl	8000104 <strlen>
 8002fa0:	0003      	movs	r3, r0
 8002fa2:	60fb      	str	r3, [r7, #12]

    if ( length > UART_TX_MAX_BUFF_SIZE )
 8002fa4:	68fb      	ldr	r3, [r7, #12]
 8002fa6:	2bfa      	cmp	r3, #250	; 0xfa
 8002fa8:	d908      	bls.n	8002fbc <send_debug_logs+0x2c>
    {
        HAL_UART_Transmit ( HUART_DBG , ( uint8_t* ) "[ERROR] UART buffer reached max length.\n" , 42 , 1000 ) ;
 8002faa:	23fa      	movs	r3, #250	; 0xfa
 8002fac:	009b      	lsls	r3, r3, #2
 8002fae:	490d      	ldr	r1, [pc, #52]	; (8002fe4 <send_debug_logs+0x54>)
 8002fb0:	480d      	ldr	r0, [pc, #52]	; (8002fe8 <send_debug_logs+0x58>)
 8002fb2:	222a      	movs	r2, #42	; 0x2a
 8002fb4:	f003 f884 	bl	80060c0 <HAL_UART_Transmit>
        length = UART_TX_MAX_BUFF_SIZE;
 8002fb8:	23fa      	movs	r3, #250	; 0xfa
 8002fba:	60fb      	str	r3, [r7, #12]
    }

    HAL_UART_Transmit ( HUART_DBG , ( uint8_t* ) p_tx_buffer , length , 1000 ) ;
 8002fbc:	68fb      	ldr	r3, [r7, #12]
 8002fbe:	b29a      	uxth	r2, r3
 8002fc0:	23fa      	movs	r3, #250	; 0xfa
 8002fc2:	009b      	lsls	r3, r3, #2
 8002fc4:	6879      	ldr	r1, [r7, #4]
 8002fc6:	4808      	ldr	r0, [pc, #32]	; (8002fe8 <send_debug_logs+0x58>)
 8002fc8:	f003 f87a 	bl	80060c0 <HAL_UART_Transmit>
    HAL_UART_Transmit ( HUART_DBG , ( uint8_t* ) "\n" , 1 , 1000 ) ;
 8002fcc:	23fa      	movs	r3, #250	; 0xfa
 8002fce:	009b      	lsls	r3, r3, #2
 8002fd0:	4906      	ldr	r1, [pc, #24]	; (8002fec <send_debug_logs+0x5c>)
 8002fd2:	4805      	ldr	r0, [pc, #20]	; (8002fe8 <send_debug_logs+0x58>)
 8002fd4:	2201      	movs	r2, #1
 8002fd6:	f003 f873 	bl	80060c0 <HAL_UART_Transmit>
}
 8002fda:	46c0      	nop			; (mov r8, r8)
 8002fdc:	46bd      	mov	sp, r7
 8002fde:	b004      	add	sp, #16
 8002fe0:	bd80      	pop	{r7, pc}
 8002fe2:	46c0      	nop			; (mov r8, r8)
 8002fe4:	0800de14 	.word	0x0800de14
 8002fe8:	20000764 	.word	0x20000764
 8002fec:	0800de40 	.word	0x0800de40

08002ff0 <reset_astronode>:
void reset_astronode ( void )
{
 8002ff0:	b580      	push	{r7, lr}
 8002ff2:	af00      	add	r7, sp, #0
    HAL_GPIO_WritePin ( ASTRO_RST_GPIO_Port , ASTRO_RST_Pin , GPIO_PIN_SET ) ;
 8002ff4:	4b0a      	ldr	r3, [pc, #40]	; (8003020 <reset_astronode+0x30>)
 8002ff6:	2201      	movs	r2, #1
 8002ff8:	2102      	movs	r1, #2
 8002ffa:	0018      	movs	r0, r3
 8002ffc:	f000 ff8f 	bl	8003f1e <HAL_GPIO_WritePin>
    HAL_Delay ( 1 ) ;
 8003000:	2001      	movs	r0, #1
 8003002:	f000 fcb9 	bl	8003978 <HAL_Delay>
    HAL_GPIO_WritePin ( ASTRO_RST_GPIO_Port , ASTRO_RST_Pin , GPIO_PIN_RESET ) ;
 8003006:	4b06      	ldr	r3, [pc, #24]	; (8003020 <reset_astronode+0x30>)
 8003008:	2200      	movs	r2, #0
 800300a:	2102      	movs	r1, #2
 800300c:	0018      	movs	r0, r3
 800300e:	f000 ff86 	bl	8003f1e <HAL_GPIO_WritePin>
    HAL_Delay ( 250 ) ;
 8003012:	20fa      	movs	r0, #250	; 0xfa
 8003014:	f000 fcb0 	bl	8003978 <HAL_Delay>
}
 8003018:	46c0      	nop			; (mov r8, r8)
 800301a:	46bd      	mov	sp, r7
 800301c:	bd80      	pop	{r7, pc}
 800301e:	46c0      	nop			; (mov r8, r8)
 8003020:	50000400 	.word	0x50000400

08003024 <send_astronode_request>:
void send_astronode_request ( uint8_t* p_tx_buffer , uint32_t length )
{
 8003024:	b580      	push	{r7, lr}
 8003026:	b082      	sub	sp, #8
 8003028:	af00      	add	r7, sp, #0
 800302a:	6078      	str	r0, [r7, #4]
 800302c:	6039      	str	r1, [r7, #0]
    send_debug_logs ( "Message sent to the Astronode --> " ) ;
 800302e:	4b0a      	ldr	r3, [pc, #40]	; (8003058 <send_astronode_request+0x34>)
 8003030:	0018      	movs	r0, r3
 8003032:	f7ff ffad 	bl	8002f90 <send_debug_logs>
    send_debug_logs ( ( char* ) p_tx_buffer ) ;
 8003036:	687b      	ldr	r3, [r7, #4]
 8003038:	0018      	movs	r0, r3
 800303a:	f7ff ffa9 	bl	8002f90 <send_debug_logs>

    HAL_UART_Transmit ( HUART_ASTRO , p_tx_buffer , length , 1000 ) ;
 800303e:	683b      	ldr	r3, [r7, #0]
 8003040:	b29a      	uxth	r2, r3
 8003042:	23fa      	movs	r3, #250	; 0xfa
 8003044:	009b      	lsls	r3, r3, #2
 8003046:	6879      	ldr	r1, [r7, #4]
 8003048:	4804      	ldr	r0, [pc, #16]	; (800305c <send_astronode_request+0x38>)
 800304a:	f003 f839 	bl	80060c0 <HAL_UART_Transmit>
}
 800304e:	46c0      	nop			; (mov r8, r8)
 8003050:	46bd      	mov	sp, r7
 8003052:	b002      	add	sp, #8
 8003054:	bd80      	pop	{r7, pc}
 8003056:	46c0      	nop			; (mov r8, r8)
 8003058:	0800de44 	.word	0x0800de44
 800305c:	200007f8 	.word	0x200007f8

08003060 <is_astronode_character_received>:
bool is_astronode_character_received ( uint8_t* p_rx_char )
{
 8003060:	b580      	push	{r7, lr}
 8003062:	b082      	sub	sp, #8
 8003064:	af00      	add	r7, sp, #0
 8003066:	6078      	str	r0, [r7, #4]
    return ( HAL_UART_Receive ( HUART_ASTRO , p_rx_char , 1 , 100 ) == HAL_OK ? true : false ) ;
 8003068:	6879      	ldr	r1, [r7, #4]
 800306a:	4806      	ldr	r0, [pc, #24]	; (8003084 <is_astronode_character_received+0x24>)
 800306c:	2364      	movs	r3, #100	; 0x64
 800306e:	2201      	movs	r2, #1
 8003070:	f003 f8c2 	bl	80061f8 <HAL_UART_Receive>
 8003074:	0003      	movs	r3, r0
 8003076:	425a      	negs	r2, r3
 8003078:	4153      	adcs	r3, r2
 800307a:	b2db      	uxtb	r3, r3
}
 800307c:	0018      	movs	r0, r3
 800307e:	46bd      	mov	sp, r7
 8003080:	b002      	add	sp, #8
 8003082:	bd80      	pop	{r7, pc}
 8003084:	200007f8 	.word	0x200007f8

08003088 <is_evt_pin_high>:
bool is_evt_pin_high ( void )
{
 8003088:	b580      	push	{r7, lr}
 800308a:	af00      	add	r7, sp, #0
	return ( HAL_GPIO_ReadPin ( /*GPIOA*/ ASTRO_EVT_IT2_GPIO_Port , ASTRO_EVT_IT2_Pin ) == GPIO_PIN_SET ? true : false);
 800308c:	4b06      	ldr	r3, [pc, #24]	; (80030a8 <is_evt_pin_high+0x20>)
 800308e:	2104      	movs	r1, #4
 8003090:	0018      	movs	r0, r3
 8003092:	f000 ff27 	bl	8003ee4 <HAL_GPIO_ReadPin>
 8003096:	0003      	movs	r3, r0
 8003098:	3b01      	subs	r3, #1
 800309a:	425a      	negs	r2, r3
 800309c:	4153      	adcs	r3, r2
 800309e:	b2db      	uxtb	r3, r3
}
 80030a0:	0018      	movs	r0, r3
 80030a2:	46bd      	mov	sp, r7
 80030a4:	bd80      	pop	{r7, pc}
 80030a6:	46c0      	nop			; (mov r8, r8)
 80030a8:	50000400 	.word	0x50000400

080030ac <get_systick>:
uint32_t get_systick ( void )
{
 80030ac:	b580      	push	{r7, lr}
 80030ae:	af00      	add	r7, sp, #0
    return HAL_GetTick() ;
 80030b0:	f000 fc58 	bl	8003964 <HAL_GetTick>
 80030b4:	0003      	movs	r3, r0
}
 80030b6:	0018      	movs	r0, r3
 80030b8:	46bd      	mov	sp, r7
 80030ba:	bd80      	pop	{r7, pc}

080030bc <is_systick_timeout_over>:
bool is_systick_timeout_over ( uint32_t starting_value , uint16_t duration )
{
 80030bc:	b580      	push	{r7, lr}
 80030be:	b082      	sub	sp, #8
 80030c0:	af00      	add	r7, sp, #0
 80030c2:	6078      	str	r0, [r7, #4]
 80030c4:	000a      	movs	r2, r1
 80030c6:	1cbb      	adds	r3, r7, #2
 80030c8:	801a      	strh	r2, [r3, #0]
    return ( get_systick () - starting_value > duration ) ? true : false ;
 80030ca:	f7ff ffef 	bl	80030ac <get_systick>
 80030ce:	0002      	movs	r2, r0
 80030d0:	687b      	ldr	r3, [r7, #4]
 80030d2:	1ad3      	subs	r3, r2, r3
 80030d4:	1cba      	adds	r2, r7, #2
 80030d6:	8812      	ldrh	r2, [r2, #0]
 80030d8:	429a      	cmp	r2, r3
 80030da:	419b      	sbcs	r3, r3
 80030dc:	425b      	negs	r3, r3
 80030de:	b2db      	uxtb	r3, r3
}
 80030e0:	0018      	movs	r0, r3
 80030e2:	46bd      	mov	sp, r7
 80030e4:	b002      	add	sp, #8
 80030e6:	bd80      	pop	{r7, pc}

080030e8 <my_tim_init>:

// TIM functions
void my_tim_init ( TIM_HandleTypeDef htim )
{
 80030e8:	b084      	sub	sp, #16
 80030ea:	b5b0      	push	{r4, r5, r7, lr}
 80030ec:	af00      	add	r7, sp, #0
 80030ee:	250c      	movs	r5, #12
 80030f0:	1d2c      	adds	r4, r5, #4
 80030f2:	19e4      	adds	r4, r4, r7
 80030f4:	6020      	str	r0, [r4, #0]
 80030f6:	6061      	str	r1, [r4, #4]
 80030f8:	60a2      	str	r2, [r4, #8]
 80030fa:	60e3      	str	r3, [r4, #12]
	__HAL_TIM_CLEAR_IT ( &htim , TIM_IT_UPDATE ) ;
 80030fc:	1d2b      	adds	r3, r5, #4
 80030fe:	19db      	adds	r3, r3, r7
 8003100:	681b      	ldr	r3, [r3, #0]
 8003102:	2202      	movs	r2, #2
 8003104:	4252      	negs	r2, r2
 8003106:	611a      	str	r2, [r3, #16]
}
 8003108:	46c0      	nop			; (mov r8, r8)
 800310a:	46bd      	mov	sp, r7
 800310c:	bcb0      	pop	{r4, r5, r7}
 800310e:	bc08      	pop	{r3}
 8003110:	b004      	add	sp, #16
 8003112:	4718      	bx	r3

08003114 <my_tim_start>:

void my_tim_start ( TIM_HandleTypeDef htim )
{
 8003114:	b084      	sub	sp, #16
 8003116:	b5b0      	push	{r4, r5, r7, lr}
 8003118:	af00      	add	r7, sp, #0
 800311a:	2510      	movs	r5, #16
 800311c:	197c      	adds	r4, r7, r5
 800311e:	6020      	str	r0, [r4, #0]
 8003120:	6061      	str	r1, [r4, #4]
 8003122:	60a2      	str	r2, [r4, #8]
 8003124:	60e3      	str	r3, [r4, #12]
	tim_seconds = 0 ;
 8003126:	4b06      	ldr	r3, [pc, #24]	; (8003140 <my_tim_start+0x2c>)
 8003128:	2200      	movs	r2, #0
 800312a:	801a      	strh	r2, [r3, #0]
	HAL_TIM_Base_Start_IT ( &htim ) ;
 800312c:	197b      	adds	r3, r7, r5
 800312e:	0018      	movs	r0, r3
 8003130:	f002 fc76 	bl	8005a20 <HAL_TIM_Base_Start_IT>
}
 8003134:	46c0      	nop			; (mov r8, r8)
 8003136:	46bd      	mov	sp, r7
 8003138:	bcb0      	pop	{r4, r5, r7}
 800313a:	bc08      	pop	{r3}
 800313c:	b004      	add	sp, #16
 800313e:	4718      	bx	r3
 8003140:	20000934 	.word	0x20000934

08003144 <my_tim_stop>:

void my_tim_stop ( TIM_HandleTypeDef htim )
{
 8003144:	b084      	sub	sp, #16
 8003146:	b5b0      	push	{r4, r5, r7, lr}
 8003148:	af00      	add	r7, sp, #0
 800314a:	2510      	movs	r5, #16
 800314c:	197c      	adds	r4, r7, r5
 800314e:	6020      	str	r0, [r4, #0]
 8003150:	6061      	str	r1, [r4, #4]
 8003152:	60a2      	str	r2, [r4, #8]
 8003154:	60e3      	str	r3, [r4, #12]
	HAL_TIM_Base_Stop_IT ( &htim ) ;
 8003156:	197b      	adds	r3, r7, r5
 8003158:	0018      	movs	r0, r3
 800315a:	f002 fcc3 	bl	8005ae4 <HAL_TIM_Base_Stop_IT>
}
 800315e:	46c0      	nop			; (mov r8, r8)
 8003160:	46bd      	mov	sp, r7
 8003162:	bcb0      	pop	{r4, r5, r7}
 8003164:	bc08      	pop	{r3}
 8003166:	b004      	add	sp, #16
 8003168:	4718      	bx	r3
	...

0800316c <my_astro_init>:

// Astronode functions
bool my_astro_init ( TIM_HandleTypeDef htim )
{
 800316c:	b084      	sub	sp, #16
 800316e:	b5b0      	push	{r4, r5, r7, lr}
 8003170:	b092      	sub	sp, #72	; 0x48
 8003172:	af10      	add	r7, sp, #64	; 0x40
 8003174:	2518      	movs	r5, #24
 8003176:	197c      	adds	r4, r7, r5
 8003178:	6020      	str	r0, [r4, #0]
 800317a:	6061      	str	r1, [r4, #4]
 800317c:	60a2      	str	r2, [r4, #8]
 800317e:	60e3      	str	r3, [r4, #12]
	bool cfg_wr = false ;
 8003180:	1dfb      	adds	r3, r7, #7
 8003182:	2200      	movs	r2, #0
 8003184:	701a      	strb	r2, [r3, #0]
	tim_seconds = 0 ;
 8003186:	4b30      	ldr	r3, [pc, #192]	; (8003248 <my_astro_init+0xdc>)
 8003188:	2200      	movs	r2, #0
 800318a:	801a      	strh	r2, [r3, #0]

	my_tim_start ( htim ) ;
 800318c:	197c      	adds	r4, r7, r5
 800318e:	466b      	mov	r3, sp
 8003190:	0018      	movs	r0, r3
 8003192:	0023      	movs	r3, r4
 8003194:	3310      	adds	r3, #16
 8003196:	223c      	movs	r2, #60	; 0x3c
 8003198:	0019      	movs	r1, r3
 800319a:	f006 f90d 	bl	80093b8 <memcpy>
 800319e:	6820      	ldr	r0, [r4, #0]
 80031a0:	6861      	ldr	r1, [r4, #4]
 80031a2:	68a2      	ldr	r2, [r4, #8]
 80031a4:	68e3      	ldr	r3, [r4, #12]
 80031a6:	f7ff ffb5 	bl	8003114 <my_tim_start>
	while ( tim_seconds < MY_ASTRO_INIT_TIME && !cfg_wr )
 80031aa:	e015      	b.n	80031d8 <my_astro_init+0x6c>
	{
		reset_astronode () ;
 80031ac:	f7ff ff20 	bl	8002ff0 <reset_astronode>
		HAL_Delay ( 100 ) ;
 80031b0:	2064      	movs	r0, #100	; 0x64
 80031b2:	f000 fbe1 	bl	8003978 <HAL_Delay>
		// Deep Sleep Mode (false) NOT used
		// Satellite Ack Event Pin Mask (true): EVT pin shows EVT register Payload Ack bit state
		// Reset Notification Event Pin Mask (true):  EVT pin shows EVT register Reset Event Notification bit state
		// Command Available Event Pin Mask (true): EVT pin shows EVT register Command Available bit state
		// Message Transmission (Tx) Pending Event Pin Mask (false):  EVT pin does not show EVT register Msg Tx Pending bit state
		cfg_wr = astronode_send_cfg_wr ( true , true , true , false , true , true , true , false  ) ;
 80031b6:	1dfc      	adds	r4, r7, #7
 80031b8:	2300      	movs	r3, #0
 80031ba:	9303      	str	r3, [sp, #12]
 80031bc:	2301      	movs	r3, #1
 80031be:	9302      	str	r3, [sp, #8]
 80031c0:	2301      	movs	r3, #1
 80031c2:	9301      	str	r3, [sp, #4]
 80031c4:	2301      	movs	r3, #1
 80031c6:	9300      	str	r3, [sp, #0]
 80031c8:	2300      	movs	r3, #0
 80031ca:	2201      	movs	r2, #1
 80031cc:	2101      	movs	r1, #1
 80031ce:	2001      	movs	r0, #1
 80031d0:	f003 ff66 	bl	80070a0 <astronode_send_cfg_wr>
 80031d4:	0003      	movs	r3, r0
 80031d6:	7023      	strb	r3, [r4, #0]
	while ( tim_seconds < MY_ASTRO_INIT_TIME && !cfg_wr )
 80031d8:	4b1b      	ldr	r3, [pc, #108]	; (8003248 <my_astro_init+0xdc>)
 80031da:	881b      	ldrh	r3, [r3, #0]
 80031dc:	2b09      	cmp	r3, #9
 80031de:	d806      	bhi.n	80031ee <my_astro_init+0x82>
 80031e0:	1dfb      	adds	r3, r7, #7
 80031e2:	781b      	ldrb	r3, [r3, #0]
 80031e4:	2201      	movs	r2, #1
 80031e6:	4053      	eors	r3, r2
 80031e8:	b2db      	uxtb	r3, r3
 80031ea:	2b00      	cmp	r3, #0
 80031ec:	d1de      	bne.n	80031ac <my_astro_init+0x40>
	}
	tim_seconds = 0 ;
 80031ee:	4b16      	ldr	r3, [pc, #88]	; (8003248 <my_astro_init+0xdc>)
 80031f0:	2200      	movs	r2, #0
 80031f2:	801a      	strh	r2, [r3, #0]
	my_tim_stop ( htim ) ;
 80031f4:	2318      	movs	r3, #24
 80031f6:	18fc      	adds	r4, r7, r3
 80031f8:	466b      	mov	r3, sp
 80031fa:	0018      	movs	r0, r3
 80031fc:	0023      	movs	r3, r4
 80031fe:	3310      	adds	r3, #16
 8003200:	223c      	movs	r2, #60	; 0x3c
 8003202:	0019      	movs	r1, r3
 8003204:	f006 f8d8 	bl	80093b8 <memcpy>
 8003208:	6820      	ldr	r0, [r4, #0]
 800320a:	6861      	ldr	r1, [r4, #4]
 800320c:	68a2      	ldr	r2, [r4, #8]
 800320e:	68e3      	ldr	r3, [r4, #12]
 8003210:	f7ff ff98 	bl	8003144 <my_tim_stop>
	if ( cfg_wr )
 8003214:	1dfb      	adds	r3, r7, #7
 8003216:	781b      	ldrb	r3, [r3, #0]
 8003218:	2b00      	cmp	r3, #0
 800321a:	d00d      	beq.n	8003238 <my_astro_init+0xcc>
	{
		astronode_send_rtc_rr () ;
 800321c:	f004 fba0 	bl	8007960 <astronode_send_rtc_rr>
		astronode_send_cfg_sr () ;
 8003220:	f003 ff06 	bl	8007030 <astronode_send_cfg_sr>
		astronode_send_mpn_rr () ;
 8003224:	f004 fc96 	bl	8007b54 <astronode_send_mpn_rr>
		astronode_send_msn_rr () ;
 8003228:	f004 f890 	bl	800734c <astronode_send_msn_rr>
		astronode_send_mgi_rr () ;
 800322c:	f003 ffe4 	bl	80071f8 <astronode_send_mgi_rr>
		astronode_send_pld_fr () ;
 8003230:	f004 fb1a 	bl	8007868 <astronode_send_pld_fr>
		return true ;
 8003234:	2301      	movs	r3, #1
 8003236:	e000      	b.n	800323a <my_astro_init+0xce>
	}
	else
	{
		return false ;
 8003238:	2300      	movs	r3, #0
	}
}
 800323a:	0018      	movs	r0, r3
 800323c:	46bd      	mov	sp, r7
 800323e:	b002      	add	sp, #8
 8003240:	bcb0      	pop	{r4, r5, r7}
 8003242:	bc08      	pop	{r3}
 8003244:	b004      	add	sp, #16
 8003246:	4718      	bx	r3
 8003248:	20000934 	.word	0x20000934

0800324c <is_system_initialized>:


// System functions
bool is_system_initialized ( void )
{
 800324c:	b590      	push	{r4, r7, lr}
 800324e:	b083      	sub	sp, #12
 8003250:	af00      	add	r7, sp, #0
	// Nie próbuj robić nic z Astronode, bo nie wiesz czy nie trzeba go zainicjować restartem. Ogranicz się do samego systemu.
	uint16_t yyyy = my_rtc_get_dt_s ( rtc_dt_s ) ;
 8003252:	1dbc      	adds	r4, r7, #6
 8003254:	4b0a      	ldr	r3, [pc, #40]	; (8003280 <is_system_initialized+0x34>)
 8003256:	0018      	movs	r0, r3
 8003258:	f005 fbf2 	bl	8008a40 <my_rtc_get_dt_s>
 800325c:	0003      	movs	r3, r0
 800325e:	8023      	strh	r3, [r4, #0]
	send_debug_logs ( rtc_dt_s ) ;
 8003260:	4b07      	ldr	r3, [pc, #28]	; (8003280 <is_system_initialized+0x34>)
 8003262:	0018      	movs	r0, r3
 8003264:	f7ff fe94 	bl	8002f90 <send_debug_logs>
	return ( yyyy >= FIRMWARE_RELEASE_YEAR ) ? true : false ;
 8003268:	1dbb      	adds	r3, r7, #6
 800326a:	881b      	ldrh	r3, [r3, #0]
 800326c:	4a05      	ldr	r2, [pc, #20]	; (8003284 <is_system_initialized+0x38>)
 800326e:	429a      	cmp	r2, r3
 8003270:	419b      	sbcs	r3, r3
 8003272:	425b      	negs	r3, r3
 8003274:	b2db      	uxtb	r3, r3
}
 8003276:	0018      	movs	r0, r3
 8003278:	46bd      	mov	sp, r7
 800327a:	b003      	add	sp, #12
 800327c:	bd90      	pop	{r4, r7, pc}
 800327e:	46c0      	nop			; (mov r8, r8)
 8003280:	20000920 	.word	0x20000920
 8003284:	000007e6 	.word	0x000007e6

08003288 <HAL_RTC_AlarmAEventCallback>:

// RTC Callbacks
void HAL_RTC_AlarmAEventCallback ( RTC_HandleTypeDef* hrtc )
{
 8003288:	b580      	push	{r7, lr}
 800328a:	b082      	sub	sp, #8
 800328c:	af00      	add	r7, sp, #0
 800328e:	6078      	str	r0, [r7, #4]
	// is_rtc_alarm_a_flag = true ;
	//__HAL_RTC_ALARM_CLEAR_FLAG ( hrtc , RTC_FLAG_ALRAF ) ;  // Wyczyść flagę alarmu
	send_debug_logs ( "main.c,HAL_RTC_AlarmAEventCallback," ) ;
 8003290:	4b03      	ldr	r3, [pc, #12]	; (80032a0 <HAL_RTC_AlarmAEventCallback+0x18>)
 8003292:	0018      	movs	r0, r3
 8003294:	f7ff fe7c 	bl	8002f90 <send_debug_logs>
}
 8003298:	46c0      	nop			; (mov r8, r8)
 800329a:	46bd      	mov	sp, r7
 800329c:	b002      	add	sp, #8
 800329e:	bd80      	pop	{r7, pc}
 80032a0:	0800de68 	.word	0x0800de68

080032a4 <HAL_TIM_PeriodElapsedCallback>:

// TIM Callbacks

void HAL_TIM_PeriodElapsedCallback ( TIM_HandleTypeDef *htim )
{
 80032a4:	b580      	push	{r7, lr}
 80032a6:	b082      	sub	sp, #8
 80032a8:	af00      	add	r7, sp, #0
 80032aa:	6078      	str	r0, [r7, #4]
	if ( htim->Instance == TIM6 )
 80032ac:	687b      	ldr	r3, [r7, #4]
 80032ae:	681b      	ldr	r3, [r3, #0]
 80032b0:	4a0c      	ldr	r2, [pc, #48]	; (80032e4 <HAL_TIM_PeriodElapsedCallback+0x40>)
 80032b2:	4293      	cmp	r3, r2
 80032b4:	d111      	bne.n	80032da <HAL_TIM_PeriodElapsedCallback+0x36>
	{
		tim_seconds++ ;
 80032b6:	4b0c      	ldr	r3, [pc, #48]	; (80032e8 <HAL_TIM_PeriodElapsedCallback+0x44>)
 80032b8:	881b      	ldrh	r3, [r3, #0]
 80032ba:	3301      	adds	r3, #1
 80032bc:	b29a      	uxth	r2, r3
 80032be:	4b0a      	ldr	r3, [pc, #40]	; (80032e8 <HAL_TIM_PeriodElapsedCallback+0x44>)
 80032c0:	801a      	strh	r2, [r3, #0]
		if ( tim_seconds > TIM_SECONDS_THS_SYSTEM_RESET )
 80032c2:	4b09      	ldr	r3, [pc, #36]	; (80032e8 <HAL_TIM_PeriodElapsedCallback+0x44>)
 80032c4:	881a      	ldrh	r2, [r3, #0]
 80032c6:	2396      	movs	r3, #150	; 0x96
 80032c8:	005b      	lsls	r3, r3, #1
 80032ca:	429a      	cmp	r2, r3
 80032cc:	d905      	bls.n	80032da <HAL_TIM_PeriodElapsedCallback+0x36>
		{
			send_debug_logs ( "main.c,HAL_TIM_PeriodElapsedCallback,HAL_NVIC_SystemReset" ) ;
 80032ce:	4b07      	ldr	r3, [pc, #28]	; (80032ec <HAL_TIM_PeriodElapsedCallback+0x48>)
 80032d0:	0018      	movs	r0, r3
 80032d2:	f7ff fe5d 	bl	8002f90 <send_debug_logs>
			HAL_NVIC_SystemReset () ;
 80032d6:	f000 fc88 	bl	8003bea <HAL_NVIC_SystemReset>
		}
	}
}
 80032da:	46c0      	nop			; (mov r8, r8)
 80032dc:	46bd      	mov	sp, r7
 80032de:	b002      	add	sp, #8
 80032e0:	bd80      	pop	{r7, pc}
 80032e2:	46c0      	nop			; (mov r8, r8)
 80032e4:	40001000 	.word	0x40001000
 80032e8:	20000934 	.word	0x20000934
 80032ec:	0800de8c 	.word	0x0800de8c

080032f0 <HAL_GPIO_EXTI_Rising_Callback>:

// EXTI Callbacks
void HAL_GPIO_EXTI_Rising_Callback ( uint16_t GPIO_Pin )
{
 80032f0:	b590      	push	{r4, r7, lr}
 80032f2:	b095      	sub	sp, #84	; 0x54
 80032f4:	af00      	add	r7, sp, #0
 80032f6:	0002      	movs	r2, r0
 80032f8:	1dbb      	adds	r3, r7, #6
 80032fa:	801a      	strh	r2, [r3, #0]
	{
		is_astro_evt_flag = true ;
	}
	*/
	char m[70];
	sprintf ( m , "main.c,HAL_GPIO_EXTI_Rising_Callback,%d" , GPIO_Pin ) ;
 80032fc:	1dbb      	adds	r3, r7, #6
 80032fe:	881a      	ldrh	r2, [r3, #0]
 8003300:	4906      	ldr	r1, [pc, #24]	; (800331c <HAL_GPIO_EXTI_Rising_Callback+0x2c>)
 8003302:	2408      	movs	r4, #8
 8003304:	193b      	adds	r3, r7, r4
 8003306:	0018      	movs	r0, r3
 8003308:	f005 ff5e 	bl	80091c8 <sprintf>
	send_debug_logs ( m ) ;
 800330c:	193b      	adds	r3, r7, r4
 800330e:	0018      	movs	r0, r3
 8003310:	f7ff fe3e 	bl	8002f90 <send_debug_logs>
}
 8003314:	46c0      	nop			; (mov r8, r8)
 8003316:	46bd      	mov	sp, r7
 8003318:	b015      	add	sp, #84	; 0x54
 800331a:	bd90      	pop	{r4, r7, pc}
 800331c:	0800dec8 	.word	0x0800dec8

08003320 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8003320:	b580      	push	{r7, lr}
 8003322:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8003324:	b672      	cpsid	i
}
 8003326:	46c0      	nop			; (mov r8, r8)
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8003328:	e7fe      	b.n	8003328 <Error_Handler+0x8>
	...

0800332c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800332c:	b580      	push	{r7, lr}
 800332e:	b082      	sub	sp, #8
 8003330:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003332:	4b11      	ldr	r3, [pc, #68]	; (8003378 <HAL_MspInit+0x4c>)
 8003334:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003336:	4b10      	ldr	r3, [pc, #64]	; (8003378 <HAL_MspInit+0x4c>)
 8003338:	2101      	movs	r1, #1
 800333a:	430a      	orrs	r2, r1
 800333c:	641a      	str	r2, [r3, #64]	; 0x40
 800333e:	4b0e      	ldr	r3, [pc, #56]	; (8003378 <HAL_MspInit+0x4c>)
 8003340:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003342:	2201      	movs	r2, #1
 8003344:	4013      	ands	r3, r2
 8003346:	607b      	str	r3, [r7, #4]
 8003348:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800334a:	4b0b      	ldr	r3, [pc, #44]	; (8003378 <HAL_MspInit+0x4c>)
 800334c:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800334e:	4b0a      	ldr	r3, [pc, #40]	; (8003378 <HAL_MspInit+0x4c>)
 8003350:	2180      	movs	r1, #128	; 0x80
 8003352:	0549      	lsls	r1, r1, #21
 8003354:	430a      	orrs	r2, r1
 8003356:	63da      	str	r2, [r3, #60]	; 0x3c
 8003358:	4b07      	ldr	r3, [pc, #28]	; (8003378 <HAL_MspInit+0x4c>)
 800335a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800335c:	2380      	movs	r3, #128	; 0x80
 800335e:	055b      	lsls	r3, r3, #21
 8003360:	4013      	ands	r3, r2
 8003362:	603b      	str	r3, [r7, #0]
 8003364:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  /** Disable the internal Pull-Up in Dead Battery pins of UCPD peripheral
  */
  HAL_SYSCFG_StrobeDBattpinsConfig(SYSCFG_CFGR1_UCPD1_STROBE | SYSCFG_CFGR1_UCPD2_STROBE);
 8003366:	23c0      	movs	r3, #192	; 0xc0
 8003368:	00db      	lsls	r3, r3, #3
 800336a:	0018      	movs	r0, r3
 800336c:	f000 fb44 	bl	80039f8 <HAL_SYSCFG_StrobeDBattpinsConfig>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8003370:	46c0      	nop			; (mov r8, r8)
 8003372:	46bd      	mov	sp, r7
 8003374:	b002      	add	sp, #8
 8003376:	bd80      	pop	{r7, pc}
 8003378:	40021000 	.word	0x40021000

0800337c <HAL_RTC_MspInit>:
* This function configures the hardware resources used in this example
* @param hrtc: RTC handle pointer
* @retval None
*/
void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{
 800337c:	b590      	push	{r4, r7, lr}
 800337e:	b097      	sub	sp, #92	; 0x5c
 8003380:	af00      	add	r7, sp, #0
 8003382:	6078      	str	r0, [r7, #4]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8003384:	240c      	movs	r4, #12
 8003386:	193b      	adds	r3, r7, r4
 8003388:	0018      	movs	r0, r3
 800338a:	234c      	movs	r3, #76	; 0x4c
 800338c:	001a      	movs	r2, r3
 800338e:	2100      	movs	r1, #0
 8003390:	f005 ff86 	bl	80092a0 <memset>
  if(hrtc->Instance==RTC)
 8003394:	687b      	ldr	r3, [r7, #4]
 8003396:	681b      	ldr	r3, [r3, #0]
 8003398:	4a19      	ldr	r2, [pc, #100]	; (8003400 <HAL_RTC_MspInit+0x84>)
 800339a:	4293      	cmp	r3, r2
 800339c:	d12c      	bne.n	80033f8 <HAL_RTC_MspInit+0x7c>

  /* USER CODE END RTC_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 800339e:	193b      	adds	r3, r7, r4
 80033a0:	2280      	movs	r2, #128	; 0x80
 80033a2:	0292      	lsls	r2, r2, #10
 80033a4:	601a      	str	r2, [r3, #0]
    PeriphClkInit.RTCClockSelection = RCC_RTCCLKSOURCE_LSE;
 80033a6:	193b      	adds	r3, r7, r4
 80033a8:	2280      	movs	r2, #128	; 0x80
 80033aa:	0052      	lsls	r2, r2, #1
 80033ac:	641a      	str	r2, [r3, #64]	; 0x40
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80033ae:	193b      	adds	r3, r7, r4
 80033b0:	0018      	movs	r0, r3
 80033b2:	f001 fba1 	bl	8004af8 <HAL_RCCEx_PeriphCLKConfig>
 80033b6:	1e03      	subs	r3, r0, #0
 80033b8:	d001      	beq.n	80033be <HAL_RTC_MspInit+0x42>
    {
      Error_Handler();
 80033ba:	f7ff ffb1 	bl	8003320 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_RTC_ENABLE();
 80033be:	4b11      	ldr	r3, [pc, #68]	; (8003404 <HAL_RTC_MspInit+0x88>)
 80033c0:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 80033c2:	4b10      	ldr	r3, [pc, #64]	; (8003404 <HAL_RTC_MspInit+0x88>)
 80033c4:	2180      	movs	r1, #128	; 0x80
 80033c6:	0209      	lsls	r1, r1, #8
 80033c8:	430a      	orrs	r2, r1
 80033ca:	65da      	str	r2, [r3, #92]	; 0x5c
    __HAL_RCC_RTCAPB_CLK_ENABLE();
 80033cc:	4b0d      	ldr	r3, [pc, #52]	; (8003404 <HAL_RTC_MspInit+0x88>)
 80033ce:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80033d0:	4b0c      	ldr	r3, [pc, #48]	; (8003404 <HAL_RTC_MspInit+0x88>)
 80033d2:	2180      	movs	r1, #128	; 0x80
 80033d4:	00c9      	lsls	r1, r1, #3
 80033d6:	430a      	orrs	r2, r1
 80033d8:	63da      	str	r2, [r3, #60]	; 0x3c
 80033da:	4b0a      	ldr	r3, [pc, #40]	; (8003404 <HAL_RTC_MspInit+0x88>)
 80033dc:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80033de:	2380      	movs	r3, #128	; 0x80
 80033e0:	00db      	lsls	r3, r3, #3
 80033e2:	4013      	ands	r3, r2
 80033e4:	60bb      	str	r3, [r7, #8]
 80033e6:	68bb      	ldr	r3, [r7, #8]
    /* RTC interrupt Init */
    HAL_NVIC_SetPriority(RTC_TAMP_IRQn, 3, 0);
 80033e8:	2200      	movs	r2, #0
 80033ea:	2103      	movs	r1, #3
 80033ec:	2002      	movs	r0, #2
 80033ee:	f000 fbd7 	bl	8003ba0 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(RTC_TAMP_IRQn);
 80033f2:	2002      	movs	r0, #2
 80033f4:	f000 fbe9 	bl	8003bca <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }

}
 80033f8:	46c0      	nop			; (mov r8, r8)
 80033fa:	46bd      	mov	sp, r7
 80033fc:	b017      	add	sp, #92	; 0x5c
 80033fe:	bd90      	pop	{r4, r7, pc}
 8003400:	40002800 	.word	0x40002800
 8003404:	40021000 	.word	0x40021000

08003408 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8003408:	b580      	push	{r7, lr}
 800340a:	b084      	sub	sp, #16
 800340c:	af00      	add	r7, sp, #0
 800340e:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM6)
 8003410:	687b      	ldr	r3, [r7, #4]
 8003412:	681b      	ldr	r3, [r3, #0]
 8003414:	4a0d      	ldr	r2, [pc, #52]	; (800344c <HAL_TIM_Base_MspInit+0x44>)
 8003416:	4293      	cmp	r3, r2
 8003418:	d113      	bne.n	8003442 <HAL_TIM_Base_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM6_MspInit 0 */

  /* USER CODE END TIM6_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM6_CLK_ENABLE();
 800341a:	4b0d      	ldr	r3, [pc, #52]	; (8003450 <HAL_TIM_Base_MspInit+0x48>)
 800341c:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800341e:	4b0c      	ldr	r3, [pc, #48]	; (8003450 <HAL_TIM_Base_MspInit+0x48>)
 8003420:	2110      	movs	r1, #16
 8003422:	430a      	orrs	r2, r1
 8003424:	63da      	str	r2, [r3, #60]	; 0x3c
 8003426:	4b0a      	ldr	r3, [pc, #40]	; (8003450 <HAL_TIM_Base_MspInit+0x48>)
 8003428:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800342a:	2210      	movs	r2, #16
 800342c:	4013      	ands	r3, r2
 800342e:	60fb      	str	r3, [r7, #12]
 8003430:	68fb      	ldr	r3, [r7, #12]
    /* TIM6 interrupt Init */
    HAL_NVIC_SetPriority(TIM6_DAC_LPTIM1_IRQn, 2, 0);
 8003432:	2200      	movs	r2, #0
 8003434:	2102      	movs	r1, #2
 8003436:	2011      	movs	r0, #17
 8003438:	f000 fbb2 	bl	8003ba0 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM6_DAC_LPTIM1_IRQn);
 800343c:	2011      	movs	r0, #17
 800343e:	f000 fbc4 	bl	8003bca <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM6_MspInit 1 */

  /* USER CODE END TIM6_MspInit 1 */
  }

}
 8003442:	46c0      	nop			; (mov r8, r8)
 8003444:	46bd      	mov	sp, r7
 8003446:	b004      	add	sp, #16
 8003448:	bd80      	pop	{r7, pc}
 800344a:	46c0      	nop			; (mov r8, r8)
 800344c:	40001000 	.word	0x40001000
 8003450:	40021000 	.word	0x40021000

08003454 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8003454:	b590      	push	{r4, r7, lr}
 8003456:	b0a1      	sub	sp, #132	; 0x84
 8003458:	af00      	add	r7, sp, #0
 800345a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800345c:	236c      	movs	r3, #108	; 0x6c
 800345e:	18fb      	adds	r3, r7, r3
 8003460:	0018      	movs	r0, r3
 8003462:	2314      	movs	r3, #20
 8003464:	001a      	movs	r2, r3
 8003466:	2100      	movs	r1, #0
 8003468:	f005 ff1a 	bl	80092a0 <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800346c:	2420      	movs	r4, #32
 800346e:	193b      	adds	r3, r7, r4
 8003470:	0018      	movs	r0, r3
 8003472:	234c      	movs	r3, #76	; 0x4c
 8003474:	001a      	movs	r2, r3
 8003476:	2100      	movs	r1, #0
 8003478:	f005 ff12 	bl	80092a0 <memset>
  if(huart->Instance==USART2)
 800347c:	687b      	ldr	r3, [r7, #4]
 800347e:	681b      	ldr	r3, [r3, #0]
 8003480:	4a61      	ldr	r2, [pc, #388]	; (8003608 <HAL_UART_MspInit+0x1b4>)
 8003482:	4293      	cmp	r3, r2
 8003484:	d13f      	bne.n	8003506 <HAL_UART_MspInit+0xb2>

  /* USER CODE END USART2_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8003486:	193b      	adds	r3, r7, r4
 8003488:	2202      	movs	r2, #2
 800348a:	601a      	str	r2, [r3, #0]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 800348c:	193b      	adds	r3, r7, r4
 800348e:	2200      	movs	r2, #0
 8003490:	609a      	str	r2, [r3, #8]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8003492:	193b      	adds	r3, r7, r4
 8003494:	0018      	movs	r0, r3
 8003496:	f001 fb2f 	bl	8004af8 <HAL_RCCEx_PeriphCLKConfig>
 800349a:	1e03      	subs	r3, r0, #0
 800349c:	d001      	beq.n	80034a2 <HAL_UART_MspInit+0x4e>
    {
      Error_Handler();
 800349e:	f7ff ff3f 	bl	8003320 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 80034a2:	4b5a      	ldr	r3, [pc, #360]	; (800360c <HAL_UART_MspInit+0x1b8>)
 80034a4:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80034a6:	4b59      	ldr	r3, [pc, #356]	; (800360c <HAL_UART_MspInit+0x1b8>)
 80034a8:	2180      	movs	r1, #128	; 0x80
 80034aa:	0289      	lsls	r1, r1, #10
 80034ac:	430a      	orrs	r2, r1
 80034ae:	63da      	str	r2, [r3, #60]	; 0x3c
 80034b0:	4b56      	ldr	r3, [pc, #344]	; (800360c <HAL_UART_MspInit+0x1b8>)
 80034b2:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80034b4:	2380      	movs	r3, #128	; 0x80
 80034b6:	029b      	lsls	r3, r3, #10
 80034b8:	4013      	ands	r3, r2
 80034ba:	61fb      	str	r3, [r7, #28]
 80034bc:	69fb      	ldr	r3, [r7, #28]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80034be:	4b53      	ldr	r3, [pc, #332]	; (800360c <HAL_UART_MspInit+0x1b8>)
 80034c0:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80034c2:	4b52      	ldr	r3, [pc, #328]	; (800360c <HAL_UART_MspInit+0x1b8>)
 80034c4:	2101      	movs	r1, #1
 80034c6:	430a      	orrs	r2, r1
 80034c8:	635a      	str	r2, [r3, #52]	; 0x34
 80034ca:	4b50      	ldr	r3, [pc, #320]	; (800360c <HAL_UART_MspInit+0x1b8>)
 80034cc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80034ce:	2201      	movs	r2, #1
 80034d0:	4013      	ands	r3, r2
 80034d2:	61bb      	str	r3, [r7, #24]
 80034d4:	69bb      	ldr	r3, [r7, #24]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = DBG_TX_Pin|DBG_RX_Pin;
 80034d6:	216c      	movs	r1, #108	; 0x6c
 80034d8:	187b      	adds	r3, r7, r1
 80034da:	220c      	movs	r2, #12
 80034dc:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80034de:	187b      	adds	r3, r7, r1
 80034e0:	2202      	movs	r2, #2
 80034e2:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80034e4:	187b      	adds	r3, r7, r1
 80034e6:	2200      	movs	r2, #0
 80034e8:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80034ea:	187b      	adds	r3, r7, r1
 80034ec:	2200      	movs	r2, #0
 80034ee:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_USART2;
 80034f0:	187b      	adds	r3, r7, r1
 80034f2:	2201      	movs	r2, #1
 80034f4:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80034f6:	187a      	adds	r2, r7, r1
 80034f8:	23a0      	movs	r3, #160	; 0xa0
 80034fa:	05db      	lsls	r3, r3, #23
 80034fc:	0011      	movs	r1, r2
 80034fe:	0018      	movs	r0, r3
 8003500:	f000 fb84 	bl	8003c0c <HAL_GPIO_Init>
  /* USER CODE BEGIN USART4_MspInit 1 */

  /* USER CODE END USART4_MspInit 1 */
  }

}
 8003504:	e07b      	b.n	80035fe <HAL_UART_MspInit+0x1aa>
  else if(huart->Instance==USART3)
 8003506:	687b      	ldr	r3, [r7, #4]
 8003508:	681b      	ldr	r3, [r3, #0]
 800350a:	4a41      	ldr	r2, [pc, #260]	; (8003610 <HAL_UART_MspInit+0x1bc>)
 800350c:	4293      	cmp	r3, r2
 800350e:	d140      	bne.n	8003592 <HAL_UART_MspInit+0x13e>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 8003510:	2120      	movs	r1, #32
 8003512:	187b      	adds	r3, r7, r1
 8003514:	2204      	movs	r2, #4
 8003516:	601a      	str	r2, [r3, #0]
    PeriphClkInit.Usart3ClockSelection = RCC_USART3CLKSOURCE_PCLK1;
 8003518:	187b      	adds	r3, r7, r1
 800351a:	2200      	movs	r2, #0
 800351c:	60da      	str	r2, [r3, #12]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800351e:	187b      	adds	r3, r7, r1
 8003520:	0018      	movs	r0, r3
 8003522:	f001 fae9 	bl	8004af8 <HAL_RCCEx_PeriphCLKConfig>
 8003526:	1e03      	subs	r3, r0, #0
 8003528:	d001      	beq.n	800352e <HAL_UART_MspInit+0xda>
      Error_Handler();
 800352a:	f7ff fef9 	bl	8003320 <Error_Handler>
    __HAL_RCC_USART3_CLK_ENABLE();
 800352e:	4b37      	ldr	r3, [pc, #220]	; (800360c <HAL_UART_MspInit+0x1b8>)
 8003530:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8003532:	4b36      	ldr	r3, [pc, #216]	; (800360c <HAL_UART_MspInit+0x1b8>)
 8003534:	2180      	movs	r1, #128	; 0x80
 8003536:	02c9      	lsls	r1, r1, #11
 8003538:	430a      	orrs	r2, r1
 800353a:	63da      	str	r2, [r3, #60]	; 0x3c
 800353c:	4b33      	ldr	r3, [pc, #204]	; (800360c <HAL_UART_MspInit+0x1b8>)
 800353e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8003540:	2380      	movs	r3, #128	; 0x80
 8003542:	02db      	lsls	r3, r3, #11
 8003544:	4013      	ands	r3, r2
 8003546:	617b      	str	r3, [r7, #20]
 8003548:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800354a:	4b30      	ldr	r3, [pc, #192]	; (800360c <HAL_UART_MspInit+0x1b8>)
 800354c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800354e:	4b2f      	ldr	r3, [pc, #188]	; (800360c <HAL_UART_MspInit+0x1b8>)
 8003550:	2102      	movs	r1, #2
 8003552:	430a      	orrs	r2, r1
 8003554:	635a      	str	r2, [r3, #52]	; 0x34
 8003556:	4b2d      	ldr	r3, [pc, #180]	; (800360c <HAL_UART_MspInit+0x1b8>)
 8003558:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800355a:	2202      	movs	r2, #2
 800355c:	4013      	ands	r3, r2
 800355e:	613b      	str	r3, [r7, #16]
 8003560:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = ASTRO_TX_Pin|ASTRO_RX_Pin;
 8003562:	216c      	movs	r1, #108	; 0x6c
 8003564:	187b      	adds	r3, r7, r1
 8003566:	22c0      	movs	r2, #192	; 0xc0
 8003568:	0092      	lsls	r2, r2, #2
 800356a:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800356c:	187b      	adds	r3, r7, r1
 800356e:	2202      	movs	r2, #2
 8003570:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003572:	187b      	adds	r3, r7, r1
 8003574:	2200      	movs	r2, #0
 8003576:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003578:	187b      	adds	r3, r7, r1
 800357a:	2200      	movs	r2, #0
 800357c:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF4_USART3;
 800357e:	187b      	adds	r3, r7, r1
 8003580:	2204      	movs	r2, #4
 8003582:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003584:	187b      	adds	r3, r7, r1
 8003586:	4a23      	ldr	r2, [pc, #140]	; (8003614 <HAL_UART_MspInit+0x1c0>)
 8003588:	0019      	movs	r1, r3
 800358a:	0010      	movs	r0, r2
 800358c:	f000 fb3e 	bl	8003c0c <HAL_GPIO_Init>
}
 8003590:	e035      	b.n	80035fe <HAL_UART_MspInit+0x1aa>
  else if(huart->Instance==USART4)
 8003592:	687b      	ldr	r3, [r7, #4]
 8003594:	681b      	ldr	r3, [r3, #0]
 8003596:	4a20      	ldr	r2, [pc, #128]	; (8003618 <HAL_UART_MspInit+0x1c4>)
 8003598:	4293      	cmp	r3, r2
 800359a:	d130      	bne.n	80035fe <HAL_UART_MspInit+0x1aa>
    __HAL_RCC_USART4_CLK_ENABLE();
 800359c:	4b1b      	ldr	r3, [pc, #108]	; (800360c <HAL_UART_MspInit+0x1b8>)
 800359e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80035a0:	4b1a      	ldr	r3, [pc, #104]	; (800360c <HAL_UART_MspInit+0x1b8>)
 80035a2:	2180      	movs	r1, #128	; 0x80
 80035a4:	0309      	lsls	r1, r1, #12
 80035a6:	430a      	orrs	r2, r1
 80035a8:	63da      	str	r2, [r3, #60]	; 0x3c
 80035aa:	4b18      	ldr	r3, [pc, #96]	; (800360c <HAL_UART_MspInit+0x1b8>)
 80035ac:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80035ae:	2380      	movs	r3, #128	; 0x80
 80035b0:	031b      	lsls	r3, r3, #12
 80035b2:	4013      	ands	r3, r2
 80035b4:	60fb      	str	r3, [r7, #12]
 80035b6:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80035b8:	4b14      	ldr	r3, [pc, #80]	; (800360c <HAL_UART_MspInit+0x1b8>)
 80035ba:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80035bc:	4b13      	ldr	r3, [pc, #76]	; (800360c <HAL_UART_MspInit+0x1b8>)
 80035be:	2104      	movs	r1, #4
 80035c0:	430a      	orrs	r2, r1
 80035c2:	635a      	str	r2, [r3, #52]	; 0x34
 80035c4:	4b11      	ldr	r3, [pc, #68]	; (800360c <HAL_UART_MspInit+0x1b8>)
 80035c6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80035c8:	2204      	movs	r2, #4
 80035ca:	4013      	ands	r3, r2
 80035cc:	60bb      	str	r3, [r7, #8]
 80035ce:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = OPENLOG_RX_Pin|OPENLOG_TX_Pin;
 80035d0:	216c      	movs	r1, #108	; 0x6c
 80035d2:	187b      	adds	r3, r7, r1
 80035d4:	22c0      	movs	r2, #192	; 0xc0
 80035d6:	0112      	lsls	r2, r2, #4
 80035d8:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80035da:	187b      	adds	r3, r7, r1
 80035dc:	2202      	movs	r2, #2
 80035de:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80035e0:	187b      	adds	r3, r7, r1
 80035e2:	2200      	movs	r2, #0
 80035e4:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80035e6:	187b      	adds	r3, r7, r1
 80035e8:	2200      	movs	r2, #0
 80035ea:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_USART4;
 80035ec:	187b      	adds	r3, r7, r1
 80035ee:	2201      	movs	r2, #1
 80035f0:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80035f2:	187b      	adds	r3, r7, r1
 80035f4:	4a09      	ldr	r2, [pc, #36]	; (800361c <HAL_UART_MspInit+0x1c8>)
 80035f6:	0019      	movs	r1, r3
 80035f8:	0010      	movs	r0, r2
 80035fa:	f000 fb07 	bl	8003c0c <HAL_GPIO_Init>
}
 80035fe:	46c0      	nop			; (mov r8, r8)
 8003600:	46bd      	mov	sp, r7
 8003602:	b021      	add	sp, #132	; 0x84
 8003604:	bd90      	pop	{r4, r7, pc}
 8003606:	46c0      	nop			; (mov r8, r8)
 8003608:	40004400 	.word	0x40004400
 800360c:	40021000 	.word	0x40021000
 8003610:	40004800 	.word	0x40004800
 8003614:	50000400 	.word	0x50000400
 8003618:	40004c00 	.word	0x40004c00
 800361c:	50000800 	.word	0x50000800

08003620 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8003620:	b580      	push	{r7, lr}
 8003622:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8003624:	e7fe      	b.n	8003624 <NMI_Handler+0x4>

08003626 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8003626:	b580      	push	{r7, lr}
 8003628:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800362a:	e7fe      	b.n	800362a <HardFault_Handler+0x4>

0800362c <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800362c:	b580      	push	{r7, lr}
 800362e:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 8003630:	46c0      	nop			; (mov r8, r8)
 8003632:	46bd      	mov	sp, r7
 8003634:	bd80      	pop	{r7, pc}

08003636 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8003636:	b580      	push	{r7, lr}
 8003638:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800363a:	46c0      	nop			; (mov r8, r8)
 800363c:	46bd      	mov	sp, r7
 800363e:	bd80      	pop	{r7, pc}

08003640 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8003640:	b580      	push	{r7, lr}
 8003642:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8003644:	f000 f97c 	bl	8003940 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8003648:	46c0      	nop			; (mov r8, r8)
 800364a:	46bd      	mov	sp, r7
 800364c:	bd80      	pop	{r7, pc}
	...

08003650 <RTC_TAMP_IRQHandler>:

/**
  * @brief This function handles RTC and TAMP interrupts through EXTI lines 19 and 21.
  */
void RTC_TAMP_IRQHandler(void)
{
 8003650:	b580      	push	{r7, lr}
 8003652:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN RTC_TAMP_IRQn 0 */

  /* USER CODE END RTC_TAMP_IRQn 0 */
  HAL_RTC_AlarmIRQHandler(&hrtc);
 8003654:	4b03      	ldr	r3, [pc, #12]	; (8003664 <RTC_TAMP_IRQHandler+0x14>)
 8003656:	0018      	movs	r0, r3
 8003658:	f002 f850 	bl	80056fc <HAL_RTC_AlarmIRQHandler>
  /* USER CODE BEGIN RTC_TAMP_IRQn 1 */

  /* USER CODE END RTC_TAMP_IRQn 1 */
}
 800365c:	46c0      	nop			; (mov r8, r8)
 800365e:	46bd      	mov	sp, r7
 8003660:	bd80      	pop	{r7, pc}
 8003662:	46c0      	nop			; (mov r8, r8)
 8003664:	200006ec 	.word	0x200006ec

08003668 <EXTI2_3_IRQHandler>:

/**
  * @brief This function handles EXTI line 2 and line 3 interrupts.
  */
void EXTI2_3_IRQHandler(void)
{
 8003668:	b580      	push	{r7, lr}
 800366a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI2_3_IRQn 0 */

  /* USER CODE END EXTI2_3_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(ASTRO_EVT_IT2_Pin);
 800366c:	2004      	movs	r0, #4
 800366e:	f000 fc73 	bl	8003f58 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI2_3_IRQn 1 */

  /* USER CODE END EXTI2_3_IRQn 1 */
}
 8003672:	46c0      	nop			; (mov r8, r8)
 8003674:	46bd      	mov	sp, r7
 8003676:	bd80      	pop	{r7, pc}

08003678 <TIM6_DAC_LPTIM1_IRQHandler>:

/**
  * @brief This function handles TIM6, DAC and LPTIM1 global Interrupts.
  */
void TIM6_DAC_LPTIM1_IRQHandler(void)
{
 8003678:	b580      	push	{r7, lr}
 800367a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_LPTIM1_IRQn 0 */

  /* USER CODE END TIM6_DAC_LPTIM1_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 800367c:	4b03      	ldr	r3, [pc, #12]	; (800368c <TIM6_DAC_LPTIM1_IRQHandler+0x14>)
 800367e:	0018      	movs	r0, r3
 8003680:	f002 fa5e 	bl	8005b40 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_LPTIM1_IRQn 1 */

  /* USER CODE END TIM6_DAC_LPTIM1_IRQn 1 */
}
 8003684:	46c0      	nop			; (mov r8, r8)
 8003686:	46bd      	mov	sp, r7
 8003688:	bd80      	pop	{r7, pc}
 800368a:	46c0      	nop			; (mov r8, r8)
 800368c:	20000718 	.word	0x20000718

08003690 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8003690:	b580      	push	{r7, lr}
 8003692:	af00      	add	r7, sp, #0
  return 1;
 8003694:	2301      	movs	r3, #1
}
 8003696:	0018      	movs	r0, r3
 8003698:	46bd      	mov	sp, r7
 800369a:	bd80      	pop	{r7, pc}

0800369c <_kill>:

int _kill(int pid, int sig)
{
 800369c:	b580      	push	{r7, lr}
 800369e:	b082      	sub	sp, #8
 80036a0:	af00      	add	r7, sp, #0
 80036a2:	6078      	str	r0, [r7, #4]
 80036a4:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 80036a6:	f005 fe59 	bl	800935c <__errno>
 80036aa:	0003      	movs	r3, r0
 80036ac:	2216      	movs	r2, #22
 80036ae:	601a      	str	r2, [r3, #0]
  return -1;
 80036b0:	2301      	movs	r3, #1
 80036b2:	425b      	negs	r3, r3
}
 80036b4:	0018      	movs	r0, r3
 80036b6:	46bd      	mov	sp, r7
 80036b8:	b002      	add	sp, #8
 80036ba:	bd80      	pop	{r7, pc}

080036bc <_exit>:

void _exit (int status)
{
 80036bc:	b580      	push	{r7, lr}
 80036be:	b082      	sub	sp, #8
 80036c0:	af00      	add	r7, sp, #0
 80036c2:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 80036c4:	2301      	movs	r3, #1
 80036c6:	425a      	negs	r2, r3
 80036c8:	687b      	ldr	r3, [r7, #4]
 80036ca:	0011      	movs	r1, r2
 80036cc:	0018      	movs	r0, r3
 80036ce:	f7ff ffe5 	bl	800369c <_kill>
  while (1) {}    /* Make sure we hang here */
 80036d2:	e7fe      	b.n	80036d2 <_exit+0x16>

080036d4 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80036d4:	b580      	push	{r7, lr}
 80036d6:	b086      	sub	sp, #24
 80036d8:	af00      	add	r7, sp, #0
 80036da:	60f8      	str	r0, [r7, #12]
 80036dc:	60b9      	str	r1, [r7, #8]
 80036de:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80036e0:	2300      	movs	r3, #0
 80036e2:	617b      	str	r3, [r7, #20]
 80036e4:	e00a      	b.n	80036fc <_read+0x28>
  {
    *ptr++ = __io_getchar();
 80036e6:	e000      	b.n	80036ea <_read+0x16>
 80036e8:	bf00      	nop
 80036ea:	0001      	movs	r1, r0
 80036ec:	68bb      	ldr	r3, [r7, #8]
 80036ee:	1c5a      	adds	r2, r3, #1
 80036f0:	60ba      	str	r2, [r7, #8]
 80036f2:	b2ca      	uxtb	r2, r1
 80036f4:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80036f6:	697b      	ldr	r3, [r7, #20]
 80036f8:	3301      	adds	r3, #1
 80036fa:	617b      	str	r3, [r7, #20]
 80036fc:	697a      	ldr	r2, [r7, #20]
 80036fe:	687b      	ldr	r3, [r7, #4]
 8003700:	429a      	cmp	r2, r3
 8003702:	dbf0      	blt.n	80036e6 <_read+0x12>
  }

  return len;
 8003704:	687b      	ldr	r3, [r7, #4]
}
 8003706:	0018      	movs	r0, r3
 8003708:	46bd      	mov	sp, r7
 800370a:	b006      	add	sp, #24
 800370c:	bd80      	pop	{r7, pc}

0800370e <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 800370e:	b580      	push	{r7, lr}
 8003710:	b086      	sub	sp, #24
 8003712:	af00      	add	r7, sp, #0
 8003714:	60f8      	str	r0, [r7, #12]
 8003716:	60b9      	str	r1, [r7, #8]
 8003718:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800371a:	2300      	movs	r3, #0
 800371c:	617b      	str	r3, [r7, #20]
 800371e:	e009      	b.n	8003734 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8003720:	68bb      	ldr	r3, [r7, #8]
 8003722:	1c5a      	adds	r2, r3, #1
 8003724:	60ba      	str	r2, [r7, #8]
 8003726:	781b      	ldrb	r3, [r3, #0]
 8003728:	0018      	movs	r0, r3
 800372a:	e000      	b.n	800372e <_write+0x20>
 800372c:	bf00      	nop
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800372e:	697b      	ldr	r3, [r7, #20]
 8003730:	3301      	adds	r3, #1
 8003732:	617b      	str	r3, [r7, #20]
 8003734:	697a      	ldr	r2, [r7, #20]
 8003736:	687b      	ldr	r3, [r7, #4]
 8003738:	429a      	cmp	r2, r3
 800373a:	dbf1      	blt.n	8003720 <_write+0x12>
  }
  return len;
 800373c:	687b      	ldr	r3, [r7, #4]
}
 800373e:	0018      	movs	r0, r3
 8003740:	46bd      	mov	sp, r7
 8003742:	b006      	add	sp, #24
 8003744:	bd80      	pop	{r7, pc}

08003746 <_close>:

int _close(int file)
{
 8003746:	b580      	push	{r7, lr}
 8003748:	b082      	sub	sp, #8
 800374a:	af00      	add	r7, sp, #0
 800374c:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 800374e:	2301      	movs	r3, #1
 8003750:	425b      	negs	r3, r3
}
 8003752:	0018      	movs	r0, r3
 8003754:	46bd      	mov	sp, r7
 8003756:	b002      	add	sp, #8
 8003758:	bd80      	pop	{r7, pc}

0800375a <_fstat>:


int _fstat(int file, struct stat *st)
{
 800375a:	b580      	push	{r7, lr}
 800375c:	b082      	sub	sp, #8
 800375e:	af00      	add	r7, sp, #0
 8003760:	6078      	str	r0, [r7, #4]
 8003762:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8003764:	683b      	ldr	r3, [r7, #0]
 8003766:	2280      	movs	r2, #128	; 0x80
 8003768:	0192      	lsls	r2, r2, #6
 800376a:	605a      	str	r2, [r3, #4]
  return 0;
 800376c:	2300      	movs	r3, #0
}
 800376e:	0018      	movs	r0, r3
 8003770:	46bd      	mov	sp, r7
 8003772:	b002      	add	sp, #8
 8003774:	bd80      	pop	{r7, pc}

08003776 <_isatty>:

int _isatty(int file)
{
 8003776:	b580      	push	{r7, lr}
 8003778:	b082      	sub	sp, #8
 800377a:	af00      	add	r7, sp, #0
 800377c:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 800377e:	2301      	movs	r3, #1
}
 8003780:	0018      	movs	r0, r3
 8003782:	46bd      	mov	sp, r7
 8003784:	b002      	add	sp, #8
 8003786:	bd80      	pop	{r7, pc}

08003788 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8003788:	b580      	push	{r7, lr}
 800378a:	b084      	sub	sp, #16
 800378c:	af00      	add	r7, sp, #0
 800378e:	60f8      	str	r0, [r7, #12]
 8003790:	60b9      	str	r1, [r7, #8]
 8003792:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8003794:	2300      	movs	r3, #0
}
 8003796:	0018      	movs	r0, r3
 8003798:	46bd      	mov	sp, r7
 800379a:	b004      	add	sp, #16
 800379c:	bd80      	pop	{r7, pc}
	...

080037a0 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80037a0:	b580      	push	{r7, lr}
 80037a2:	b086      	sub	sp, #24
 80037a4:	af00      	add	r7, sp, #0
 80037a6:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80037a8:	4a14      	ldr	r2, [pc, #80]	; (80037fc <_sbrk+0x5c>)
 80037aa:	4b15      	ldr	r3, [pc, #84]	; (8003800 <_sbrk+0x60>)
 80037ac:	1ad3      	subs	r3, r2, r3
 80037ae:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80037b0:	697b      	ldr	r3, [r7, #20]
 80037b2:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80037b4:	4b13      	ldr	r3, [pc, #76]	; (8003804 <_sbrk+0x64>)
 80037b6:	681b      	ldr	r3, [r3, #0]
 80037b8:	2b00      	cmp	r3, #0
 80037ba:	d102      	bne.n	80037c2 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80037bc:	4b11      	ldr	r3, [pc, #68]	; (8003804 <_sbrk+0x64>)
 80037be:	4a12      	ldr	r2, [pc, #72]	; (8003808 <_sbrk+0x68>)
 80037c0:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80037c2:	4b10      	ldr	r3, [pc, #64]	; (8003804 <_sbrk+0x64>)
 80037c4:	681a      	ldr	r2, [r3, #0]
 80037c6:	687b      	ldr	r3, [r7, #4]
 80037c8:	18d3      	adds	r3, r2, r3
 80037ca:	693a      	ldr	r2, [r7, #16]
 80037cc:	429a      	cmp	r2, r3
 80037ce:	d207      	bcs.n	80037e0 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80037d0:	f005 fdc4 	bl	800935c <__errno>
 80037d4:	0003      	movs	r3, r0
 80037d6:	220c      	movs	r2, #12
 80037d8:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80037da:	2301      	movs	r3, #1
 80037dc:	425b      	negs	r3, r3
 80037de:	e009      	b.n	80037f4 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80037e0:	4b08      	ldr	r3, [pc, #32]	; (8003804 <_sbrk+0x64>)
 80037e2:	681b      	ldr	r3, [r3, #0]
 80037e4:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80037e6:	4b07      	ldr	r3, [pc, #28]	; (8003804 <_sbrk+0x64>)
 80037e8:	681a      	ldr	r2, [r3, #0]
 80037ea:	687b      	ldr	r3, [r7, #4]
 80037ec:	18d2      	adds	r2, r2, r3
 80037ee:	4b05      	ldr	r3, [pc, #20]	; (8003804 <_sbrk+0x64>)
 80037f0:	601a      	str	r2, [r3, #0]

  return (void *)prev_heap_end;
 80037f2:	68fb      	ldr	r3, [r7, #12]
}
 80037f4:	0018      	movs	r0, r3
 80037f6:	46bd      	mov	sp, r7
 80037f8:	b006      	add	sp, #24
 80037fa:	bd80      	pop	{r7, pc}
 80037fc:	20024000 	.word	0x20024000
 8003800:	00000400 	.word	0x00000400
 8003804:	200009e4 	.word	0x200009e4
 8003808:	20000d00 	.word	0x20000d00

0800380c <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 800380c:	b580      	push	{r7, lr}
 800380e:	af00      	add	r7, sp, #0
  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8003810:	46c0      	nop			; (mov r8, r8)
 8003812:	46bd      	mov	sp, r7
 8003814:	bd80      	pop	{r7, pc}
	...

08003818 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8003818:	480d      	ldr	r0, [pc, #52]	; (8003850 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 800381a:	4685      	mov	sp, r0

/* Call the clock system initialization function.*/
  bl  SystemInit
 800381c:	f7ff fff6 	bl	800380c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8003820:	480c      	ldr	r0, [pc, #48]	; (8003854 <LoopForever+0x6>)
  ldr r1, =_edata
 8003822:	490d      	ldr	r1, [pc, #52]	; (8003858 <LoopForever+0xa>)
  ldr r2, =_sidata
 8003824:	4a0d      	ldr	r2, [pc, #52]	; (800385c <LoopForever+0xe>)
  movs r3, #0
 8003826:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8003828:	e002      	b.n	8003830 <LoopCopyDataInit>

0800382a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800382a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800382c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800382e:	3304      	adds	r3, #4

08003830 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8003830:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8003832:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8003834:	d3f9      	bcc.n	800382a <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8003836:	4a0a      	ldr	r2, [pc, #40]	; (8003860 <LoopForever+0x12>)
  ldr r4, =_ebss
 8003838:	4c0a      	ldr	r4, [pc, #40]	; (8003864 <LoopForever+0x16>)
  movs r3, #0
 800383a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800383c:	e001      	b.n	8003842 <LoopFillZerobss>

0800383e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800383e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8003840:	3204      	adds	r2, #4

08003842 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8003842:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8003844:	d3fb      	bcc.n	800383e <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8003846:	f005 fd8f 	bl	8009368 <__libc_init_array>
/* Call the application s entry point.*/
  bl main
 800384a:	f7fe fff1 	bl	8002830 <main>

0800384e <LoopForever>:

LoopForever:
  b LoopForever
 800384e:	e7fe      	b.n	800384e <LoopForever>
  ldr   r0, =_estack
 8003850:	20024000 	.word	0x20024000
  ldr r0, =_sdata
 8003854:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8003858:	200006d0 	.word	0x200006d0
  ldr r2, =_sidata
 800385c:	0800fc90 	.word	0x0800fc90
  ldr r2, =_sbss
 8003860:	200006d0 	.word	0x200006d0
  ldr r4, =_ebss
 8003864:	20000cfc 	.word	0x20000cfc

08003868 <ADC1_COMP_IRQHandler>:
 * @retval None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8003868:	e7fe      	b.n	8003868 <ADC1_COMP_IRQHandler>
	...

0800386c <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800386c:	b580      	push	{r7, lr}
 800386e:	b082      	sub	sp, #8
 8003870:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8003872:	1dfb      	adds	r3, r7, #7
 8003874:	2200      	movs	r2, #0
 8003876:	701a      	strb	r2, [r3, #0]
#if (INSTRUCTION_CACHE_ENABLE == 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_DISABLE();
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8003878:	4b0b      	ldr	r3, [pc, #44]	; (80038a8 <HAL_Init+0x3c>)
 800387a:	681a      	ldr	r2, [r3, #0]
 800387c:	4b0a      	ldr	r3, [pc, #40]	; (80038a8 <HAL_Init+0x3c>)
 800387e:	2180      	movs	r1, #128	; 0x80
 8003880:	0049      	lsls	r1, r1, #1
 8003882:	430a      	orrs	r2, r1
 8003884:	601a      	str	r2, [r3, #0]
#endif /* PREFETCH_ENABLE */

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8003886:	2000      	movs	r0, #0
 8003888:	f000 f810 	bl	80038ac <HAL_InitTick>
 800388c:	1e03      	subs	r3, r0, #0
 800388e:	d003      	beq.n	8003898 <HAL_Init+0x2c>
  {
    status = HAL_ERROR;
 8003890:	1dfb      	adds	r3, r7, #7
 8003892:	2201      	movs	r2, #1
 8003894:	701a      	strb	r2, [r3, #0]
 8003896:	e001      	b.n	800389c <HAL_Init+0x30>
  }
  else
  {
  /* Init the low level hardware */
  HAL_MspInit();
 8003898:	f7ff fd48 	bl	800332c <HAL_MspInit>
  }

  /* Return function status */
  return status;
 800389c:	1dfb      	adds	r3, r7, #7
 800389e:	781b      	ldrb	r3, [r3, #0]
}
 80038a0:	0018      	movs	r0, r3
 80038a2:	46bd      	mov	sp, r7
 80038a4:	b002      	add	sp, #8
 80038a6:	bd80      	pop	{r7, pc}
 80038a8:	40022000 	.word	0x40022000

080038ac <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80038ac:	b590      	push	{r4, r7, lr}
 80038ae:	b085      	sub	sp, #20
 80038b0:	af00      	add	r7, sp, #0
 80038b2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 80038b4:	230f      	movs	r3, #15
 80038b6:	18fb      	adds	r3, r7, r3
 80038b8:	2200      	movs	r2, #0
 80038ba:	701a      	strb	r2, [r3, #0]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/ 
  if ((uint32_t)uwTickFreq != 0U)
 80038bc:	4b1d      	ldr	r3, [pc, #116]	; (8003934 <HAL_InitTick+0x88>)
 80038be:	781b      	ldrb	r3, [r3, #0]
 80038c0:	2b00      	cmp	r3, #0
 80038c2:	d02b      	beq.n	800391c <HAL_InitTick+0x70>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U /(uint32_t)uwTickFreq)) == 0U)
 80038c4:	4b1c      	ldr	r3, [pc, #112]	; (8003938 <HAL_InitTick+0x8c>)
 80038c6:	681c      	ldr	r4, [r3, #0]
 80038c8:	4b1a      	ldr	r3, [pc, #104]	; (8003934 <HAL_InitTick+0x88>)
 80038ca:	781b      	ldrb	r3, [r3, #0]
 80038cc:	0019      	movs	r1, r3
 80038ce:	23fa      	movs	r3, #250	; 0xfa
 80038d0:	0098      	lsls	r0, r3, #2
 80038d2:	f7fc fc33 	bl	800013c <__udivsi3>
 80038d6:	0003      	movs	r3, r0
 80038d8:	0019      	movs	r1, r3
 80038da:	0020      	movs	r0, r4
 80038dc:	f7fc fc2e 	bl	800013c <__udivsi3>
 80038e0:	0003      	movs	r3, r0
 80038e2:	0018      	movs	r0, r3
 80038e4:	f000 f985 	bl	8003bf2 <HAL_SYSTICK_Config>
 80038e8:	1e03      	subs	r3, r0, #0
 80038ea:	d112      	bne.n	8003912 <HAL_InitTick+0x66>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80038ec:	687b      	ldr	r3, [r7, #4]
 80038ee:	2b03      	cmp	r3, #3
 80038f0:	d80a      	bhi.n	8003908 <HAL_InitTick+0x5c>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80038f2:	6879      	ldr	r1, [r7, #4]
 80038f4:	2301      	movs	r3, #1
 80038f6:	425b      	negs	r3, r3
 80038f8:	2200      	movs	r2, #0
 80038fa:	0018      	movs	r0, r3
 80038fc:	f000 f950 	bl	8003ba0 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8003900:	4b0e      	ldr	r3, [pc, #56]	; (800393c <HAL_InitTick+0x90>)
 8003902:	687a      	ldr	r2, [r7, #4]
 8003904:	601a      	str	r2, [r3, #0]
 8003906:	e00d      	b.n	8003924 <HAL_InitTick+0x78>
      }
      else
      {
        status = HAL_ERROR;
 8003908:	230f      	movs	r3, #15
 800390a:	18fb      	adds	r3, r7, r3
 800390c:	2201      	movs	r2, #1
 800390e:	701a      	strb	r2, [r3, #0]
 8003910:	e008      	b.n	8003924 <HAL_InitTick+0x78>
      }
    }
    else
    {
      status = HAL_ERROR;
 8003912:	230f      	movs	r3, #15
 8003914:	18fb      	adds	r3, r7, r3
 8003916:	2201      	movs	r2, #1
 8003918:	701a      	strb	r2, [r3, #0]
 800391a:	e003      	b.n	8003924 <HAL_InitTick+0x78>
    }
  }
  else
  {
    status = HAL_ERROR;
 800391c:	230f      	movs	r3, #15
 800391e:	18fb      	adds	r3, r7, r3
 8003920:	2201      	movs	r2, #1
 8003922:	701a      	strb	r2, [r3, #0]
  }

  /* Return function status */
  return status;
 8003924:	230f      	movs	r3, #15
 8003926:	18fb      	adds	r3, r7, r3
 8003928:	781b      	ldrb	r3, [r3, #0]
}
 800392a:	0018      	movs	r0, r3
 800392c:	46bd      	mov	sp, r7
 800392e:	b005      	add	sp, #20
 8003930:	bd90      	pop	{r4, r7, pc}
 8003932:	46c0      	nop			; (mov r8, r8)
 8003934:	20000018 	.word	0x20000018
 8003938:	20000010 	.word	0x20000010
 800393c:	20000014 	.word	0x20000014

08003940 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8003940:	b580      	push	{r7, lr}
 8003942:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8003944:	4b05      	ldr	r3, [pc, #20]	; (800395c <HAL_IncTick+0x1c>)
 8003946:	781b      	ldrb	r3, [r3, #0]
 8003948:	001a      	movs	r2, r3
 800394a:	4b05      	ldr	r3, [pc, #20]	; (8003960 <HAL_IncTick+0x20>)
 800394c:	681b      	ldr	r3, [r3, #0]
 800394e:	18d2      	adds	r2, r2, r3
 8003950:	4b03      	ldr	r3, [pc, #12]	; (8003960 <HAL_IncTick+0x20>)
 8003952:	601a      	str	r2, [r3, #0]
}
 8003954:	46c0      	nop			; (mov r8, r8)
 8003956:	46bd      	mov	sp, r7
 8003958:	bd80      	pop	{r7, pc}
 800395a:	46c0      	nop			; (mov r8, r8)
 800395c:	20000018 	.word	0x20000018
 8003960:	200009e8 	.word	0x200009e8

08003964 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8003964:	b580      	push	{r7, lr}
 8003966:	af00      	add	r7, sp, #0
  return uwTick;
 8003968:	4b02      	ldr	r3, [pc, #8]	; (8003974 <HAL_GetTick+0x10>)
 800396a:	681b      	ldr	r3, [r3, #0]
}
 800396c:	0018      	movs	r0, r3
 800396e:	46bd      	mov	sp, r7
 8003970:	bd80      	pop	{r7, pc}
 8003972:	46c0      	nop			; (mov r8, r8)
 8003974:	200009e8 	.word	0x200009e8

08003978 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8003978:	b580      	push	{r7, lr}
 800397a:	b084      	sub	sp, #16
 800397c:	af00      	add	r7, sp, #0
 800397e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8003980:	f7ff fff0 	bl	8003964 <HAL_GetTick>
 8003984:	0003      	movs	r3, r0
 8003986:	60bb      	str	r3, [r7, #8]
  uint32_t wait = Delay;
 8003988:	687b      	ldr	r3, [r7, #4]
 800398a:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800398c:	68fb      	ldr	r3, [r7, #12]
 800398e:	3301      	adds	r3, #1
 8003990:	d005      	beq.n	800399e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8003992:	4b0a      	ldr	r3, [pc, #40]	; (80039bc <HAL_Delay+0x44>)
 8003994:	781b      	ldrb	r3, [r3, #0]
 8003996:	001a      	movs	r2, r3
 8003998:	68fb      	ldr	r3, [r7, #12]
 800399a:	189b      	adds	r3, r3, r2
 800399c:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800399e:	46c0      	nop			; (mov r8, r8)
 80039a0:	f7ff ffe0 	bl	8003964 <HAL_GetTick>
 80039a4:	0002      	movs	r2, r0
 80039a6:	68bb      	ldr	r3, [r7, #8]
 80039a8:	1ad3      	subs	r3, r2, r3
 80039aa:	68fa      	ldr	r2, [r7, #12]
 80039ac:	429a      	cmp	r2, r3
 80039ae:	d8f7      	bhi.n	80039a0 <HAL_Delay+0x28>
  {
  }
}
 80039b0:	46c0      	nop			; (mov r8, r8)
 80039b2:	46c0      	nop			; (mov r8, r8)
 80039b4:	46bd      	mov	sp, r7
 80039b6:	b004      	add	sp, #16
 80039b8:	bd80      	pop	{r7, pc}
 80039ba:	46c0      	nop			; (mov r8, r8)
 80039bc:	20000018 	.word	0x20000018

080039c0 <HAL_SuspendTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval None
  */
__weak void HAL_SuspendTick(void)
{
 80039c0:	b580      	push	{r7, lr}
 80039c2:	af00      	add	r7, sp, #0
  /* Disable SysTick Interrupt */
  CLEAR_BIT(SysTick->CTRL,SysTick_CTRL_TICKINT_Msk);
 80039c4:	4b04      	ldr	r3, [pc, #16]	; (80039d8 <HAL_SuspendTick+0x18>)
 80039c6:	681a      	ldr	r2, [r3, #0]
 80039c8:	4b03      	ldr	r3, [pc, #12]	; (80039d8 <HAL_SuspendTick+0x18>)
 80039ca:	2102      	movs	r1, #2
 80039cc:	438a      	bics	r2, r1
 80039ce:	601a      	str	r2, [r3, #0]
}
 80039d0:	46c0      	nop			; (mov r8, r8)
 80039d2:	46bd      	mov	sp, r7
 80039d4:	bd80      	pop	{r7, pc}
 80039d6:	46c0      	nop			; (mov r8, r8)
 80039d8:	e000e010 	.word	0xe000e010

080039dc <HAL_ResumeTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval None
  */
__weak void HAL_ResumeTick(void)
{
 80039dc:	b580      	push	{r7, lr}
 80039de:	af00      	add	r7, sp, #0
  /* Enable SysTick Interrupt */
  SET_BIT(SysTick->CTRL, SysTick_CTRL_TICKINT_Msk);
 80039e0:	4b04      	ldr	r3, [pc, #16]	; (80039f4 <HAL_ResumeTick+0x18>)
 80039e2:	681a      	ldr	r2, [r3, #0]
 80039e4:	4b03      	ldr	r3, [pc, #12]	; (80039f4 <HAL_ResumeTick+0x18>)
 80039e6:	2102      	movs	r1, #2
 80039e8:	430a      	orrs	r2, r1
 80039ea:	601a      	str	r2, [r3, #0]
}
 80039ec:	46c0      	nop			; (mov r8, r8)
 80039ee:	46bd      	mov	sp, r7
 80039f0:	bd80      	pop	{r7, pc}
 80039f2:	46c0      	nop			; (mov r8, r8)
 80039f4:	e000e010 	.word	0xe000e010

080039f8 <HAL_SYSCFG_StrobeDBattpinsConfig>:
  *         @arg @ref SYSCFG_UCPD1_STROBE
  *         @arg @ref SYSCFG_UCPD2_STROBE
  * @retval None
  */
void HAL_SYSCFG_StrobeDBattpinsConfig(uint32_t ConfigDeadBattery)
{
 80039f8:	b580      	push	{r7, lr}
 80039fa:	b082      	sub	sp, #8
 80039fc:	af00      	add	r7, sp, #0
 80039fe:	6078      	str	r0, [r7, #4]
  assert_param(IS_SYSCFG_DBATT_CONFIG(ConfigDeadBattery));

  /* Change strobe configuration of GPIO depending on UCPDx dead battery settings */
  MODIFY_REG(SYSCFG->CFGR1, (SYSCFG_CFGR1_UCPD1_STROBE | SYSCFG_CFGR1_UCPD2_STROBE), ConfigDeadBattery);
 8003a00:	4b06      	ldr	r3, [pc, #24]	; (8003a1c <HAL_SYSCFG_StrobeDBattpinsConfig+0x24>)
 8003a02:	681b      	ldr	r3, [r3, #0]
 8003a04:	4a06      	ldr	r2, [pc, #24]	; (8003a20 <HAL_SYSCFG_StrobeDBattpinsConfig+0x28>)
 8003a06:	4013      	ands	r3, r2
 8003a08:	0019      	movs	r1, r3
 8003a0a:	4b04      	ldr	r3, [pc, #16]	; (8003a1c <HAL_SYSCFG_StrobeDBattpinsConfig+0x24>)
 8003a0c:	687a      	ldr	r2, [r7, #4]
 8003a0e:	430a      	orrs	r2, r1
 8003a10:	601a      	str	r2, [r3, #0]
}
 8003a12:	46c0      	nop			; (mov r8, r8)
 8003a14:	46bd      	mov	sp, r7
 8003a16:	b002      	add	sp, #8
 8003a18:	bd80      	pop	{r7, pc}
 8003a1a:	46c0      	nop			; (mov r8, r8)
 8003a1c:	40010000 	.word	0x40010000
 8003a20:	fffff9ff 	.word	0xfffff9ff

08003a24 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003a24:	b580      	push	{r7, lr}
 8003a26:	b082      	sub	sp, #8
 8003a28:	af00      	add	r7, sp, #0
 8003a2a:	0002      	movs	r2, r0
 8003a2c:	1dfb      	adds	r3, r7, #7
 8003a2e:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8003a30:	1dfb      	adds	r3, r7, #7
 8003a32:	781b      	ldrb	r3, [r3, #0]
 8003a34:	2b7f      	cmp	r3, #127	; 0x7f
 8003a36:	d809      	bhi.n	8003a4c <__NVIC_EnableIRQ+0x28>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003a38:	1dfb      	adds	r3, r7, #7
 8003a3a:	781b      	ldrb	r3, [r3, #0]
 8003a3c:	001a      	movs	r2, r3
 8003a3e:	231f      	movs	r3, #31
 8003a40:	401a      	ands	r2, r3
 8003a42:	4b04      	ldr	r3, [pc, #16]	; (8003a54 <__NVIC_EnableIRQ+0x30>)
 8003a44:	2101      	movs	r1, #1
 8003a46:	4091      	lsls	r1, r2
 8003a48:	000a      	movs	r2, r1
 8003a4a:	601a      	str	r2, [r3, #0]
    __COMPILER_BARRIER();
  }
}
 8003a4c:	46c0      	nop			; (mov r8, r8)
 8003a4e:	46bd      	mov	sp, r7
 8003a50:	b002      	add	sp, #8
 8003a52:	bd80      	pop	{r7, pc}
 8003a54:	e000e100 	.word	0xe000e100

08003a58 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8003a58:	b590      	push	{r4, r7, lr}
 8003a5a:	b083      	sub	sp, #12
 8003a5c:	af00      	add	r7, sp, #0
 8003a5e:	0002      	movs	r2, r0
 8003a60:	6039      	str	r1, [r7, #0]
 8003a62:	1dfb      	adds	r3, r7, #7
 8003a64:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8003a66:	1dfb      	adds	r3, r7, #7
 8003a68:	781b      	ldrb	r3, [r3, #0]
 8003a6a:	2b7f      	cmp	r3, #127	; 0x7f
 8003a6c:	d828      	bhi.n	8003ac0 <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8003a6e:	4a2f      	ldr	r2, [pc, #188]	; (8003b2c <__NVIC_SetPriority+0xd4>)
 8003a70:	1dfb      	adds	r3, r7, #7
 8003a72:	781b      	ldrb	r3, [r3, #0]
 8003a74:	b25b      	sxtb	r3, r3
 8003a76:	089b      	lsrs	r3, r3, #2
 8003a78:	33c0      	adds	r3, #192	; 0xc0
 8003a7a:	009b      	lsls	r3, r3, #2
 8003a7c:	589b      	ldr	r3, [r3, r2]
 8003a7e:	1dfa      	adds	r2, r7, #7
 8003a80:	7812      	ldrb	r2, [r2, #0]
 8003a82:	0011      	movs	r1, r2
 8003a84:	2203      	movs	r2, #3
 8003a86:	400a      	ands	r2, r1
 8003a88:	00d2      	lsls	r2, r2, #3
 8003a8a:	21ff      	movs	r1, #255	; 0xff
 8003a8c:	4091      	lsls	r1, r2
 8003a8e:	000a      	movs	r2, r1
 8003a90:	43d2      	mvns	r2, r2
 8003a92:	401a      	ands	r2, r3
 8003a94:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8003a96:	683b      	ldr	r3, [r7, #0]
 8003a98:	019b      	lsls	r3, r3, #6
 8003a9a:	22ff      	movs	r2, #255	; 0xff
 8003a9c:	401a      	ands	r2, r3
 8003a9e:	1dfb      	adds	r3, r7, #7
 8003aa0:	781b      	ldrb	r3, [r3, #0]
 8003aa2:	0018      	movs	r0, r3
 8003aa4:	2303      	movs	r3, #3
 8003aa6:	4003      	ands	r3, r0
 8003aa8:	00db      	lsls	r3, r3, #3
 8003aaa:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8003aac:	481f      	ldr	r0, [pc, #124]	; (8003b2c <__NVIC_SetPriority+0xd4>)
 8003aae:	1dfb      	adds	r3, r7, #7
 8003ab0:	781b      	ldrb	r3, [r3, #0]
 8003ab2:	b25b      	sxtb	r3, r3
 8003ab4:	089b      	lsrs	r3, r3, #2
 8003ab6:	430a      	orrs	r2, r1
 8003ab8:	33c0      	adds	r3, #192	; 0xc0
 8003aba:	009b      	lsls	r3, r3, #2
 8003abc:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 8003abe:	e031      	b.n	8003b24 <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8003ac0:	4a1b      	ldr	r2, [pc, #108]	; (8003b30 <__NVIC_SetPriority+0xd8>)
 8003ac2:	1dfb      	adds	r3, r7, #7
 8003ac4:	781b      	ldrb	r3, [r3, #0]
 8003ac6:	0019      	movs	r1, r3
 8003ac8:	230f      	movs	r3, #15
 8003aca:	400b      	ands	r3, r1
 8003acc:	3b08      	subs	r3, #8
 8003ace:	089b      	lsrs	r3, r3, #2
 8003ad0:	3306      	adds	r3, #6
 8003ad2:	009b      	lsls	r3, r3, #2
 8003ad4:	18d3      	adds	r3, r2, r3
 8003ad6:	3304      	adds	r3, #4
 8003ad8:	681b      	ldr	r3, [r3, #0]
 8003ada:	1dfa      	adds	r2, r7, #7
 8003adc:	7812      	ldrb	r2, [r2, #0]
 8003ade:	0011      	movs	r1, r2
 8003ae0:	2203      	movs	r2, #3
 8003ae2:	400a      	ands	r2, r1
 8003ae4:	00d2      	lsls	r2, r2, #3
 8003ae6:	21ff      	movs	r1, #255	; 0xff
 8003ae8:	4091      	lsls	r1, r2
 8003aea:	000a      	movs	r2, r1
 8003aec:	43d2      	mvns	r2, r2
 8003aee:	401a      	ands	r2, r3
 8003af0:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8003af2:	683b      	ldr	r3, [r7, #0]
 8003af4:	019b      	lsls	r3, r3, #6
 8003af6:	22ff      	movs	r2, #255	; 0xff
 8003af8:	401a      	ands	r2, r3
 8003afa:	1dfb      	adds	r3, r7, #7
 8003afc:	781b      	ldrb	r3, [r3, #0]
 8003afe:	0018      	movs	r0, r3
 8003b00:	2303      	movs	r3, #3
 8003b02:	4003      	ands	r3, r0
 8003b04:	00db      	lsls	r3, r3, #3
 8003b06:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8003b08:	4809      	ldr	r0, [pc, #36]	; (8003b30 <__NVIC_SetPriority+0xd8>)
 8003b0a:	1dfb      	adds	r3, r7, #7
 8003b0c:	781b      	ldrb	r3, [r3, #0]
 8003b0e:	001c      	movs	r4, r3
 8003b10:	230f      	movs	r3, #15
 8003b12:	4023      	ands	r3, r4
 8003b14:	3b08      	subs	r3, #8
 8003b16:	089b      	lsrs	r3, r3, #2
 8003b18:	430a      	orrs	r2, r1
 8003b1a:	3306      	adds	r3, #6
 8003b1c:	009b      	lsls	r3, r3, #2
 8003b1e:	18c3      	adds	r3, r0, r3
 8003b20:	3304      	adds	r3, #4
 8003b22:	601a      	str	r2, [r3, #0]
}
 8003b24:	46c0      	nop			; (mov r8, r8)
 8003b26:	46bd      	mov	sp, r7
 8003b28:	b003      	add	sp, #12
 8003b2a:	bd90      	pop	{r4, r7, pc}
 8003b2c:	e000e100 	.word	0xe000e100
 8003b30:	e000ed00 	.word	0xe000ed00

08003b34 <__NVIC_SystemReset>:
/**
  \brief   System Reset
  \details Initiates a system reset request to reset the MCU.
 */
__NO_RETURN __STATIC_INLINE void __NVIC_SystemReset(void)
{
 8003b34:	b580      	push	{r7, lr}
 8003b36:	af00      	add	r7, sp, #0
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8003b38:	f3bf 8f4f 	dsb	sy
}
 8003b3c:	46c0      	nop			; (mov r8, r8)
  __DSB();                                                          /* Ensure all outstanding memory accesses included
                                                                       buffered write are completed before reset */
  SCB->AIRCR  = ((0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003b3e:	4b04      	ldr	r3, [pc, #16]	; (8003b50 <__NVIC_SystemReset+0x1c>)
 8003b40:	4a04      	ldr	r2, [pc, #16]	; (8003b54 <__NVIC_SystemReset+0x20>)
 8003b42:	60da      	str	r2, [r3, #12]
  __ASM volatile ("dsb 0xF":::"memory");
 8003b44:	f3bf 8f4f 	dsb	sy
}
 8003b48:	46c0      	nop			; (mov r8, r8)
                 SCB_AIRCR_SYSRESETREQ_Msk);
  __DSB();                                                          /* Ensure completion of memory access */

  for(;;)                                                           /* wait until reset */
  {
    __NOP();
 8003b4a:	46c0      	nop			; (mov r8, r8)
 8003b4c:	e7fd      	b.n	8003b4a <__NVIC_SystemReset+0x16>
 8003b4e:	46c0      	nop			; (mov r8, r8)
 8003b50:	e000ed00 	.word	0xe000ed00
 8003b54:	05fa0004 	.word	0x05fa0004

08003b58 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8003b58:	b580      	push	{r7, lr}
 8003b5a:	b082      	sub	sp, #8
 8003b5c:	af00      	add	r7, sp, #0
 8003b5e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8003b60:	687b      	ldr	r3, [r7, #4]
 8003b62:	1e5a      	subs	r2, r3, #1
 8003b64:	2380      	movs	r3, #128	; 0x80
 8003b66:	045b      	lsls	r3, r3, #17
 8003b68:	429a      	cmp	r2, r3
 8003b6a:	d301      	bcc.n	8003b70 <SysTick_Config+0x18>
  {
    return (1UL);                                                   /* Reload value impossible */
 8003b6c:	2301      	movs	r3, #1
 8003b6e:	e010      	b.n	8003b92 <SysTick_Config+0x3a>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8003b70:	4b0a      	ldr	r3, [pc, #40]	; (8003b9c <SysTick_Config+0x44>)
 8003b72:	687a      	ldr	r2, [r7, #4]
 8003b74:	3a01      	subs	r2, #1
 8003b76:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8003b78:	2301      	movs	r3, #1
 8003b7a:	425b      	negs	r3, r3
 8003b7c:	2103      	movs	r1, #3
 8003b7e:	0018      	movs	r0, r3
 8003b80:	f7ff ff6a 	bl	8003a58 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8003b84:	4b05      	ldr	r3, [pc, #20]	; (8003b9c <SysTick_Config+0x44>)
 8003b86:	2200      	movs	r2, #0
 8003b88:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8003b8a:	4b04      	ldr	r3, [pc, #16]	; (8003b9c <SysTick_Config+0x44>)
 8003b8c:	2207      	movs	r2, #7
 8003b8e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8003b90:	2300      	movs	r3, #0
}
 8003b92:	0018      	movs	r0, r3
 8003b94:	46bd      	mov	sp, r7
 8003b96:	b002      	add	sp, #8
 8003b98:	bd80      	pop	{r7, pc}
 8003b9a:	46c0      	nop			; (mov r8, r8)
 8003b9c:	e000e010 	.word	0xe000e010

08003ba0 <HAL_NVIC_SetPriority>:
  *         with stm32g0xx devices, this parameter is a dummy value and it is ignored, because
  *         no subpriority supported in Cortex M0+ based products.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003ba0:	b580      	push	{r7, lr}
 8003ba2:	b084      	sub	sp, #16
 8003ba4:	af00      	add	r7, sp, #0
 8003ba6:	60b9      	str	r1, [r7, #8]
 8003ba8:	607a      	str	r2, [r7, #4]
 8003baa:	210f      	movs	r1, #15
 8003bac:	187b      	adds	r3, r7, r1
 8003bae:	1c02      	adds	r2, r0, #0
 8003bb0:	701a      	strb	r2, [r3, #0]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(SubPriority);

  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn, PreemptPriority);
 8003bb2:	68ba      	ldr	r2, [r7, #8]
 8003bb4:	187b      	adds	r3, r7, r1
 8003bb6:	781b      	ldrb	r3, [r3, #0]
 8003bb8:	b25b      	sxtb	r3, r3
 8003bba:	0011      	movs	r1, r2
 8003bbc:	0018      	movs	r0, r3
 8003bbe:	f7ff ff4b 	bl	8003a58 <__NVIC_SetPriority>
}
 8003bc2:	46c0      	nop			; (mov r8, r8)
 8003bc4:	46bd      	mov	sp, r7
 8003bc6:	b004      	add	sp, #16
 8003bc8:	bd80      	pop	{r7, pc}

08003bca <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g0xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003bca:	b580      	push	{r7, lr}
 8003bcc:	b082      	sub	sp, #8
 8003bce:	af00      	add	r7, sp, #0
 8003bd0:	0002      	movs	r2, r0
 8003bd2:	1dfb      	adds	r3, r7, #7
 8003bd4:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8003bd6:	1dfb      	adds	r3, r7, #7
 8003bd8:	781b      	ldrb	r3, [r3, #0]
 8003bda:	b25b      	sxtb	r3, r3
 8003bdc:	0018      	movs	r0, r3
 8003bde:	f7ff ff21 	bl	8003a24 <__NVIC_EnableIRQ>
}
 8003be2:	46c0      	nop			; (mov r8, r8)
 8003be4:	46bd      	mov	sp, r7
 8003be6:	b002      	add	sp, #8
 8003be8:	bd80      	pop	{r7, pc}

08003bea <HAL_NVIC_SystemReset>:
/**
  * @brief  Initiate a system reset request to reset the MCU.
  * @retval None
  */
void HAL_NVIC_SystemReset(void)
{
 8003bea:	b580      	push	{r7, lr}
 8003bec:	af00      	add	r7, sp, #0
  /* System Reset */
  NVIC_SystemReset();
 8003bee:	f7ff ffa1 	bl	8003b34 <__NVIC_SystemReset>

08003bf2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8003bf2:	b580      	push	{r7, lr}
 8003bf4:	b082      	sub	sp, #8
 8003bf6:	af00      	add	r7, sp, #0
 8003bf8:	6078      	str	r0, [r7, #4]
  return SysTick_Config(TicksNumb);
 8003bfa:	687b      	ldr	r3, [r7, #4]
 8003bfc:	0018      	movs	r0, r3
 8003bfe:	f7ff ffab 	bl	8003b58 <SysTick_Config>
 8003c02:	0003      	movs	r3, r0
}
 8003c04:	0018      	movs	r0, r3
 8003c06:	46bd      	mov	sp, r7
 8003c08:	b002      	add	sp, #8
 8003c0a:	bd80      	pop	{r7, pc}

08003c0c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003c0c:	b580      	push	{r7, lr}
 8003c0e:	b086      	sub	sp, #24
 8003c10:	af00      	add	r7, sp, #0
 8003c12:	6078      	str	r0, [r7, #4]
 8003c14:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8003c16:	2300      	movs	r3, #0
 8003c18:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8003c1a:	e14d      	b.n	8003eb8 <HAL_GPIO_Init+0x2ac>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8003c1c:	683b      	ldr	r3, [r7, #0]
 8003c1e:	681b      	ldr	r3, [r3, #0]
 8003c20:	2101      	movs	r1, #1
 8003c22:	697a      	ldr	r2, [r7, #20]
 8003c24:	4091      	lsls	r1, r2
 8003c26:	000a      	movs	r2, r1
 8003c28:	4013      	ands	r3, r2
 8003c2a:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8003c2c:	68fb      	ldr	r3, [r7, #12]
 8003c2e:	2b00      	cmp	r3, #0
 8003c30:	d100      	bne.n	8003c34 <HAL_GPIO_Init+0x28>
 8003c32:	e13e      	b.n	8003eb2 <HAL_GPIO_Init+0x2a6>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8003c34:	683b      	ldr	r3, [r7, #0]
 8003c36:	685b      	ldr	r3, [r3, #4]
 8003c38:	2203      	movs	r2, #3
 8003c3a:	4013      	ands	r3, r2
 8003c3c:	2b01      	cmp	r3, #1
 8003c3e:	d005      	beq.n	8003c4c <HAL_GPIO_Init+0x40>
 8003c40:	683b      	ldr	r3, [r7, #0]
 8003c42:	685b      	ldr	r3, [r3, #4]
 8003c44:	2203      	movs	r2, #3
 8003c46:	4013      	ands	r3, r2
 8003c48:	2b02      	cmp	r3, #2
 8003c4a:	d130      	bne.n	8003cae <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8003c4c:	687b      	ldr	r3, [r7, #4]
 8003c4e:	689b      	ldr	r3, [r3, #8]
 8003c50:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8003c52:	697b      	ldr	r3, [r7, #20]
 8003c54:	005b      	lsls	r3, r3, #1
 8003c56:	2203      	movs	r2, #3
 8003c58:	409a      	lsls	r2, r3
 8003c5a:	0013      	movs	r3, r2
 8003c5c:	43da      	mvns	r2, r3
 8003c5e:	693b      	ldr	r3, [r7, #16]
 8003c60:	4013      	ands	r3, r2
 8003c62:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8003c64:	683b      	ldr	r3, [r7, #0]
 8003c66:	68da      	ldr	r2, [r3, #12]
 8003c68:	697b      	ldr	r3, [r7, #20]
 8003c6a:	005b      	lsls	r3, r3, #1
 8003c6c:	409a      	lsls	r2, r3
 8003c6e:	0013      	movs	r3, r2
 8003c70:	693a      	ldr	r2, [r7, #16]
 8003c72:	4313      	orrs	r3, r2
 8003c74:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8003c76:	687b      	ldr	r3, [r7, #4]
 8003c78:	693a      	ldr	r2, [r7, #16]
 8003c7a:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8003c7c:	687b      	ldr	r3, [r7, #4]
 8003c7e:	685b      	ldr	r3, [r3, #4]
 8003c80:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8003c82:	2201      	movs	r2, #1
 8003c84:	697b      	ldr	r3, [r7, #20]
 8003c86:	409a      	lsls	r2, r3
 8003c88:	0013      	movs	r3, r2
 8003c8a:	43da      	mvns	r2, r3
 8003c8c:	693b      	ldr	r3, [r7, #16]
 8003c8e:	4013      	ands	r3, r2
 8003c90:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8003c92:	683b      	ldr	r3, [r7, #0]
 8003c94:	685b      	ldr	r3, [r3, #4]
 8003c96:	091b      	lsrs	r3, r3, #4
 8003c98:	2201      	movs	r2, #1
 8003c9a:	401a      	ands	r2, r3
 8003c9c:	697b      	ldr	r3, [r7, #20]
 8003c9e:	409a      	lsls	r2, r3
 8003ca0:	0013      	movs	r3, r2
 8003ca2:	693a      	ldr	r2, [r7, #16]
 8003ca4:	4313      	orrs	r3, r2
 8003ca6:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8003ca8:	687b      	ldr	r3, [r7, #4]
 8003caa:	693a      	ldr	r2, [r7, #16]
 8003cac:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8003cae:	683b      	ldr	r3, [r7, #0]
 8003cb0:	685b      	ldr	r3, [r3, #4]
 8003cb2:	2203      	movs	r2, #3
 8003cb4:	4013      	ands	r3, r2
 8003cb6:	2b03      	cmp	r3, #3
 8003cb8:	d017      	beq.n	8003cea <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8003cba:	687b      	ldr	r3, [r7, #4]
 8003cbc:	68db      	ldr	r3, [r3, #12]
 8003cbe:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 8003cc0:	697b      	ldr	r3, [r7, #20]
 8003cc2:	005b      	lsls	r3, r3, #1
 8003cc4:	2203      	movs	r2, #3
 8003cc6:	409a      	lsls	r2, r3
 8003cc8:	0013      	movs	r3, r2
 8003cca:	43da      	mvns	r2, r3
 8003ccc:	693b      	ldr	r3, [r7, #16]
 8003cce:	4013      	ands	r3, r2
 8003cd0:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 8003cd2:	683b      	ldr	r3, [r7, #0]
 8003cd4:	689a      	ldr	r2, [r3, #8]
 8003cd6:	697b      	ldr	r3, [r7, #20]
 8003cd8:	005b      	lsls	r3, r3, #1
 8003cda:	409a      	lsls	r2, r3
 8003cdc:	0013      	movs	r3, r2
 8003cde:	693a      	ldr	r2, [r7, #16]
 8003ce0:	4313      	orrs	r3, r2
 8003ce2:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8003ce4:	687b      	ldr	r3, [r7, #4]
 8003ce6:	693a      	ldr	r2, [r7, #16]
 8003ce8:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003cea:	683b      	ldr	r3, [r7, #0]
 8003cec:	685b      	ldr	r3, [r3, #4]
 8003cee:	2203      	movs	r2, #3
 8003cf0:	4013      	ands	r3, r2
 8003cf2:	2b02      	cmp	r3, #2
 8003cf4:	d123      	bne.n	8003d3e <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8003cf6:	697b      	ldr	r3, [r7, #20]
 8003cf8:	08da      	lsrs	r2, r3, #3
 8003cfa:	687b      	ldr	r3, [r7, #4]
 8003cfc:	3208      	adds	r2, #8
 8003cfe:	0092      	lsls	r2, r2, #2
 8003d00:	58d3      	ldr	r3, [r2, r3]
 8003d02:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8003d04:	697b      	ldr	r3, [r7, #20]
 8003d06:	2207      	movs	r2, #7
 8003d08:	4013      	ands	r3, r2
 8003d0a:	009b      	lsls	r3, r3, #2
 8003d0c:	220f      	movs	r2, #15
 8003d0e:	409a      	lsls	r2, r3
 8003d10:	0013      	movs	r3, r2
 8003d12:	43da      	mvns	r2, r3
 8003d14:	693b      	ldr	r3, [r7, #16]
 8003d16:	4013      	ands	r3, r2
 8003d18:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8003d1a:	683b      	ldr	r3, [r7, #0]
 8003d1c:	691a      	ldr	r2, [r3, #16]
 8003d1e:	697b      	ldr	r3, [r7, #20]
 8003d20:	2107      	movs	r1, #7
 8003d22:	400b      	ands	r3, r1
 8003d24:	009b      	lsls	r3, r3, #2
 8003d26:	409a      	lsls	r2, r3
 8003d28:	0013      	movs	r3, r2
 8003d2a:	693a      	ldr	r2, [r7, #16]
 8003d2c:	4313      	orrs	r3, r2
 8003d2e:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8003d30:	697b      	ldr	r3, [r7, #20]
 8003d32:	08da      	lsrs	r2, r3, #3
 8003d34:	687b      	ldr	r3, [r7, #4]
 8003d36:	3208      	adds	r2, #8
 8003d38:	0092      	lsls	r2, r2, #2
 8003d3a:	6939      	ldr	r1, [r7, #16]
 8003d3c:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003d3e:	687b      	ldr	r3, [r7, #4]
 8003d40:	681b      	ldr	r3, [r3, #0]
 8003d42:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8003d44:	697b      	ldr	r3, [r7, #20]
 8003d46:	005b      	lsls	r3, r3, #1
 8003d48:	2203      	movs	r2, #3
 8003d4a:	409a      	lsls	r2, r3
 8003d4c:	0013      	movs	r3, r2
 8003d4e:	43da      	mvns	r2, r3
 8003d50:	693b      	ldr	r3, [r7, #16]
 8003d52:	4013      	ands	r3, r2
 8003d54:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8003d56:	683b      	ldr	r3, [r7, #0]
 8003d58:	685b      	ldr	r3, [r3, #4]
 8003d5a:	2203      	movs	r2, #3
 8003d5c:	401a      	ands	r2, r3
 8003d5e:	697b      	ldr	r3, [r7, #20]
 8003d60:	005b      	lsls	r3, r3, #1
 8003d62:	409a      	lsls	r2, r3
 8003d64:	0013      	movs	r3, r2
 8003d66:	693a      	ldr	r2, [r7, #16]
 8003d68:	4313      	orrs	r3, r2
 8003d6a:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8003d6c:	687b      	ldr	r3, [r7, #4]
 8003d6e:	693a      	ldr	r2, [r7, #16]
 8003d70:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8003d72:	683b      	ldr	r3, [r7, #0]
 8003d74:	685a      	ldr	r2, [r3, #4]
 8003d76:	23c0      	movs	r3, #192	; 0xc0
 8003d78:	029b      	lsls	r3, r3, #10
 8003d7a:	4013      	ands	r3, r2
 8003d7c:	d100      	bne.n	8003d80 <HAL_GPIO_Init+0x174>
 8003d7e:	e098      	b.n	8003eb2 <HAL_GPIO_Init+0x2a6>
      {
        temp = EXTI->EXTICR[position >> 2u];
 8003d80:	4a53      	ldr	r2, [pc, #332]	; (8003ed0 <HAL_GPIO_Init+0x2c4>)
 8003d82:	697b      	ldr	r3, [r7, #20]
 8003d84:	089b      	lsrs	r3, r3, #2
 8003d86:	3318      	adds	r3, #24
 8003d88:	009b      	lsls	r3, r3, #2
 8003d8a:	589b      	ldr	r3, [r3, r2]
 8003d8c:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (8u * (position & 0x03u)));
 8003d8e:	697b      	ldr	r3, [r7, #20]
 8003d90:	2203      	movs	r2, #3
 8003d92:	4013      	ands	r3, r2
 8003d94:	00db      	lsls	r3, r3, #3
 8003d96:	220f      	movs	r2, #15
 8003d98:	409a      	lsls	r2, r3
 8003d9a:	0013      	movs	r3, r2
 8003d9c:	43da      	mvns	r2, r3
 8003d9e:	693b      	ldr	r3, [r7, #16]
 8003da0:	4013      	ands	r3, r2
 8003da2:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (8u * (position & 0x03u)));
 8003da4:	687a      	ldr	r2, [r7, #4]
 8003da6:	23a0      	movs	r3, #160	; 0xa0
 8003da8:	05db      	lsls	r3, r3, #23
 8003daa:	429a      	cmp	r2, r3
 8003dac:	d019      	beq.n	8003de2 <HAL_GPIO_Init+0x1d6>
 8003dae:	687b      	ldr	r3, [r7, #4]
 8003db0:	4a48      	ldr	r2, [pc, #288]	; (8003ed4 <HAL_GPIO_Init+0x2c8>)
 8003db2:	4293      	cmp	r3, r2
 8003db4:	d013      	beq.n	8003dde <HAL_GPIO_Init+0x1d2>
 8003db6:	687b      	ldr	r3, [r7, #4]
 8003db8:	4a47      	ldr	r2, [pc, #284]	; (8003ed8 <HAL_GPIO_Init+0x2cc>)
 8003dba:	4293      	cmp	r3, r2
 8003dbc:	d00d      	beq.n	8003dda <HAL_GPIO_Init+0x1ce>
 8003dbe:	687b      	ldr	r3, [r7, #4]
 8003dc0:	4a46      	ldr	r2, [pc, #280]	; (8003edc <HAL_GPIO_Init+0x2d0>)
 8003dc2:	4293      	cmp	r3, r2
 8003dc4:	d007      	beq.n	8003dd6 <HAL_GPIO_Init+0x1ca>
 8003dc6:	687b      	ldr	r3, [r7, #4]
 8003dc8:	4a45      	ldr	r2, [pc, #276]	; (8003ee0 <HAL_GPIO_Init+0x2d4>)
 8003dca:	4293      	cmp	r3, r2
 8003dcc:	d101      	bne.n	8003dd2 <HAL_GPIO_Init+0x1c6>
 8003dce:	2304      	movs	r3, #4
 8003dd0:	e008      	b.n	8003de4 <HAL_GPIO_Init+0x1d8>
 8003dd2:	2305      	movs	r3, #5
 8003dd4:	e006      	b.n	8003de4 <HAL_GPIO_Init+0x1d8>
 8003dd6:	2303      	movs	r3, #3
 8003dd8:	e004      	b.n	8003de4 <HAL_GPIO_Init+0x1d8>
 8003dda:	2302      	movs	r3, #2
 8003ddc:	e002      	b.n	8003de4 <HAL_GPIO_Init+0x1d8>
 8003dde:	2301      	movs	r3, #1
 8003de0:	e000      	b.n	8003de4 <HAL_GPIO_Init+0x1d8>
 8003de2:	2300      	movs	r3, #0
 8003de4:	697a      	ldr	r2, [r7, #20]
 8003de6:	2103      	movs	r1, #3
 8003de8:	400a      	ands	r2, r1
 8003dea:	00d2      	lsls	r2, r2, #3
 8003dec:	4093      	lsls	r3, r2
 8003dee:	693a      	ldr	r2, [r7, #16]
 8003df0:	4313      	orrs	r3, r2
 8003df2:	613b      	str	r3, [r7, #16]
        EXTI->EXTICR[position >> 2u] = temp;
 8003df4:	4936      	ldr	r1, [pc, #216]	; (8003ed0 <HAL_GPIO_Init+0x2c4>)
 8003df6:	697b      	ldr	r3, [r7, #20]
 8003df8:	089b      	lsrs	r3, r3, #2
 8003dfa:	3318      	adds	r3, #24
 8003dfc:	009b      	lsls	r3, r3, #2
 8003dfe:	693a      	ldr	r2, [r7, #16]
 8003e00:	505a      	str	r2, [r3, r1]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8003e02:	4b33      	ldr	r3, [pc, #204]	; (8003ed0 <HAL_GPIO_Init+0x2c4>)
 8003e04:	681b      	ldr	r3, [r3, #0]
 8003e06:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003e08:	68fb      	ldr	r3, [r7, #12]
 8003e0a:	43da      	mvns	r2, r3
 8003e0c:	693b      	ldr	r3, [r7, #16]
 8003e0e:	4013      	ands	r3, r2
 8003e10:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8003e12:	683b      	ldr	r3, [r7, #0]
 8003e14:	685a      	ldr	r2, [r3, #4]
 8003e16:	2380      	movs	r3, #128	; 0x80
 8003e18:	035b      	lsls	r3, r3, #13
 8003e1a:	4013      	ands	r3, r2
 8003e1c:	d003      	beq.n	8003e26 <HAL_GPIO_Init+0x21a>
        {
          temp |= iocurrent;
 8003e1e:	693a      	ldr	r2, [r7, #16]
 8003e20:	68fb      	ldr	r3, [r7, #12]
 8003e22:	4313      	orrs	r3, r2
 8003e24:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8003e26:	4b2a      	ldr	r3, [pc, #168]	; (8003ed0 <HAL_GPIO_Init+0x2c4>)
 8003e28:	693a      	ldr	r2, [r7, #16]
 8003e2a:	601a      	str	r2, [r3, #0]

        temp = EXTI->FTSR1;
 8003e2c:	4b28      	ldr	r3, [pc, #160]	; (8003ed0 <HAL_GPIO_Init+0x2c4>)
 8003e2e:	685b      	ldr	r3, [r3, #4]
 8003e30:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003e32:	68fb      	ldr	r3, [r7, #12]
 8003e34:	43da      	mvns	r2, r3
 8003e36:	693b      	ldr	r3, [r7, #16]
 8003e38:	4013      	ands	r3, r2
 8003e3a:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8003e3c:	683b      	ldr	r3, [r7, #0]
 8003e3e:	685a      	ldr	r2, [r3, #4]
 8003e40:	2380      	movs	r3, #128	; 0x80
 8003e42:	039b      	lsls	r3, r3, #14
 8003e44:	4013      	ands	r3, r2
 8003e46:	d003      	beq.n	8003e50 <HAL_GPIO_Init+0x244>
        {
          temp |= iocurrent;
 8003e48:	693a      	ldr	r2, [r7, #16]
 8003e4a:	68fb      	ldr	r3, [r7, #12]
 8003e4c:	4313      	orrs	r3, r2
 8003e4e:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8003e50:	4b1f      	ldr	r3, [pc, #124]	; (8003ed0 <HAL_GPIO_Init+0x2c4>)
 8003e52:	693a      	ldr	r2, [r7, #16]
 8003e54:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 8003e56:	4a1e      	ldr	r2, [pc, #120]	; (8003ed0 <HAL_GPIO_Init+0x2c4>)
 8003e58:	2384      	movs	r3, #132	; 0x84
 8003e5a:	58d3      	ldr	r3, [r2, r3]
 8003e5c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003e5e:	68fb      	ldr	r3, [r7, #12]
 8003e60:	43da      	mvns	r2, r3
 8003e62:	693b      	ldr	r3, [r7, #16]
 8003e64:	4013      	ands	r3, r2
 8003e66:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8003e68:	683b      	ldr	r3, [r7, #0]
 8003e6a:	685a      	ldr	r2, [r3, #4]
 8003e6c:	2380      	movs	r3, #128	; 0x80
 8003e6e:	029b      	lsls	r3, r3, #10
 8003e70:	4013      	ands	r3, r2
 8003e72:	d003      	beq.n	8003e7c <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8003e74:	693a      	ldr	r2, [r7, #16]
 8003e76:	68fb      	ldr	r3, [r7, #12]
 8003e78:	4313      	orrs	r3, r2
 8003e7a:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8003e7c:	4914      	ldr	r1, [pc, #80]	; (8003ed0 <HAL_GPIO_Init+0x2c4>)
 8003e7e:	2284      	movs	r2, #132	; 0x84
 8003e80:	693b      	ldr	r3, [r7, #16]
 8003e82:	508b      	str	r3, [r1, r2]

        temp = EXTI->IMR1;
 8003e84:	4a12      	ldr	r2, [pc, #72]	; (8003ed0 <HAL_GPIO_Init+0x2c4>)
 8003e86:	2380      	movs	r3, #128	; 0x80
 8003e88:	58d3      	ldr	r3, [r2, r3]
 8003e8a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003e8c:	68fb      	ldr	r3, [r7, #12]
 8003e8e:	43da      	mvns	r2, r3
 8003e90:	693b      	ldr	r3, [r7, #16]
 8003e92:	4013      	ands	r3, r2
 8003e94:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8003e96:	683b      	ldr	r3, [r7, #0]
 8003e98:	685a      	ldr	r2, [r3, #4]
 8003e9a:	2380      	movs	r3, #128	; 0x80
 8003e9c:	025b      	lsls	r3, r3, #9
 8003e9e:	4013      	ands	r3, r2
 8003ea0:	d003      	beq.n	8003eaa <HAL_GPIO_Init+0x29e>
        {
          temp |= iocurrent;
 8003ea2:	693a      	ldr	r2, [r7, #16]
 8003ea4:	68fb      	ldr	r3, [r7, #12]
 8003ea6:	4313      	orrs	r3, r2
 8003ea8:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8003eaa:	4909      	ldr	r1, [pc, #36]	; (8003ed0 <HAL_GPIO_Init+0x2c4>)
 8003eac:	2280      	movs	r2, #128	; 0x80
 8003eae:	693b      	ldr	r3, [r7, #16]
 8003eb0:	508b      	str	r3, [r1, r2]
      }
    }

    position++;
 8003eb2:	697b      	ldr	r3, [r7, #20]
 8003eb4:	3301      	adds	r3, #1
 8003eb6:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8003eb8:	683b      	ldr	r3, [r7, #0]
 8003eba:	681a      	ldr	r2, [r3, #0]
 8003ebc:	697b      	ldr	r3, [r7, #20]
 8003ebe:	40da      	lsrs	r2, r3
 8003ec0:	1e13      	subs	r3, r2, #0
 8003ec2:	d000      	beq.n	8003ec6 <HAL_GPIO_Init+0x2ba>
 8003ec4:	e6aa      	b.n	8003c1c <HAL_GPIO_Init+0x10>
  }
}
 8003ec6:	46c0      	nop			; (mov r8, r8)
 8003ec8:	46c0      	nop			; (mov r8, r8)
 8003eca:	46bd      	mov	sp, r7
 8003ecc:	b006      	add	sp, #24
 8003ece:	bd80      	pop	{r7, pc}
 8003ed0:	40021800 	.word	0x40021800
 8003ed4:	50000400 	.word	0x50000400
 8003ed8:	50000800 	.word	0x50000800
 8003edc:	50000c00 	.word	0x50000c00
 8003ee0:	50001000 	.word	0x50001000

08003ee4 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8003ee4:	b580      	push	{r7, lr}
 8003ee6:	b084      	sub	sp, #16
 8003ee8:	af00      	add	r7, sp, #0
 8003eea:	6078      	str	r0, [r7, #4]
 8003eec:	000a      	movs	r2, r1
 8003eee:	1cbb      	adds	r3, r7, #2
 8003ef0:	801a      	strh	r2, [r3, #0]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00u)
 8003ef2:	687b      	ldr	r3, [r7, #4]
 8003ef4:	691b      	ldr	r3, [r3, #16]
 8003ef6:	1cba      	adds	r2, r7, #2
 8003ef8:	8812      	ldrh	r2, [r2, #0]
 8003efa:	4013      	ands	r3, r2
 8003efc:	d004      	beq.n	8003f08 <HAL_GPIO_ReadPin+0x24>
  {
    bitstatus = GPIO_PIN_SET;
 8003efe:	230f      	movs	r3, #15
 8003f00:	18fb      	adds	r3, r7, r3
 8003f02:	2201      	movs	r2, #1
 8003f04:	701a      	strb	r2, [r3, #0]
 8003f06:	e003      	b.n	8003f10 <HAL_GPIO_ReadPin+0x2c>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8003f08:	230f      	movs	r3, #15
 8003f0a:	18fb      	adds	r3, r7, r3
 8003f0c:	2200      	movs	r2, #0
 8003f0e:	701a      	strb	r2, [r3, #0]
  }
  return bitstatus;
 8003f10:	230f      	movs	r3, #15
 8003f12:	18fb      	adds	r3, r7, r3
 8003f14:	781b      	ldrb	r3, [r3, #0]
}
 8003f16:	0018      	movs	r0, r3
 8003f18:	46bd      	mov	sp, r7
 8003f1a:	b004      	add	sp, #16
 8003f1c:	bd80      	pop	{r7, pc}

08003f1e <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003f1e:	b580      	push	{r7, lr}
 8003f20:	b082      	sub	sp, #8
 8003f22:	af00      	add	r7, sp, #0
 8003f24:	6078      	str	r0, [r7, #4]
 8003f26:	0008      	movs	r0, r1
 8003f28:	0011      	movs	r1, r2
 8003f2a:	1cbb      	adds	r3, r7, #2
 8003f2c:	1c02      	adds	r2, r0, #0
 8003f2e:	801a      	strh	r2, [r3, #0]
 8003f30:	1c7b      	adds	r3, r7, #1
 8003f32:	1c0a      	adds	r2, r1, #0
 8003f34:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8003f36:	1c7b      	adds	r3, r7, #1
 8003f38:	781b      	ldrb	r3, [r3, #0]
 8003f3a:	2b00      	cmp	r3, #0
 8003f3c:	d004      	beq.n	8003f48 <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8003f3e:	1cbb      	adds	r3, r7, #2
 8003f40:	881a      	ldrh	r2, [r3, #0]
 8003f42:	687b      	ldr	r3, [r7, #4]
 8003f44:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8003f46:	e003      	b.n	8003f50 <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8003f48:	1cbb      	adds	r3, r7, #2
 8003f4a:	881a      	ldrh	r2, [r3, #0]
 8003f4c:	687b      	ldr	r3, [r7, #4]
 8003f4e:	629a      	str	r2, [r3, #40]	; 0x28
}
 8003f50:	46c0      	nop			; (mov r8, r8)
 8003f52:	46bd      	mov	sp, r7
 8003f54:	b002      	add	sp, #8
 8003f56:	bd80      	pop	{r7, pc}

08003f58 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8003f58:	b580      	push	{r7, lr}
 8003f5a:	b082      	sub	sp, #8
 8003f5c:	af00      	add	r7, sp, #0
 8003f5e:	0002      	movs	r2, r0
 8003f60:	1dbb      	adds	r3, r7, #6
 8003f62:	801a      	strh	r2, [r3, #0]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_RISING_IT(GPIO_Pin) != 0x00u)
 8003f64:	4b10      	ldr	r3, [pc, #64]	; (8003fa8 <HAL_GPIO_EXTI_IRQHandler+0x50>)
 8003f66:	68db      	ldr	r3, [r3, #12]
 8003f68:	1dba      	adds	r2, r7, #6
 8003f6a:	8812      	ldrh	r2, [r2, #0]
 8003f6c:	4013      	ands	r3, r2
 8003f6e:	d008      	beq.n	8003f82 <HAL_GPIO_EXTI_IRQHandler+0x2a>
  {
    __HAL_GPIO_EXTI_CLEAR_RISING_IT(GPIO_Pin);
 8003f70:	4b0d      	ldr	r3, [pc, #52]	; (8003fa8 <HAL_GPIO_EXTI_IRQHandler+0x50>)
 8003f72:	1dba      	adds	r2, r7, #6
 8003f74:	8812      	ldrh	r2, [r2, #0]
 8003f76:	60da      	str	r2, [r3, #12]
    HAL_GPIO_EXTI_Rising_Callback(GPIO_Pin);
 8003f78:	1dbb      	adds	r3, r7, #6
 8003f7a:	881b      	ldrh	r3, [r3, #0]
 8003f7c:	0018      	movs	r0, r3
 8003f7e:	f7ff f9b7 	bl	80032f0 <HAL_GPIO_EXTI_Rising_Callback>
  }

  if (__HAL_GPIO_EXTI_GET_FALLING_IT(GPIO_Pin) != 0x00u)
 8003f82:	4b09      	ldr	r3, [pc, #36]	; (8003fa8 <HAL_GPIO_EXTI_IRQHandler+0x50>)
 8003f84:	691b      	ldr	r3, [r3, #16]
 8003f86:	1dba      	adds	r2, r7, #6
 8003f88:	8812      	ldrh	r2, [r2, #0]
 8003f8a:	4013      	ands	r3, r2
 8003f8c:	d008      	beq.n	8003fa0 <HAL_GPIO_EXTI_IRQHandler+0x48>
  {
    __HAL_GPIO_EXTI_CLEAR_FALLING_IT(GPIO_Pin);
 8003f8e:	4b06      	ldr	r3, [pc, #24]	; (8003fa8 <HAL_GPIO_EXTI_IRQHandler+0x50>)
 8003f90:	1dba      	adds	r2, r7, #6
 8003f92:	8812      	ldrh	r2, [r2, #0]
 8003f94:	611a      	str	r2, [r3, #16]
    HAL_GPIO_EXTI_Falling_Callback(GPIO_Pin);
 8003f96:	1dbb      	adds	r3, r7, #6
 8003f98:	881b      	ldrh	r3, [r3, #0]
 8003f9a:	0018      	movs	r0, r3
 8003f9c:	f000 f806 	bl	8003fac <HAL_GPIO_EXTI_Falling_Callback>
  }
}
 8003fa0:	46c0      	nop			; (mov r8, r8)
 8003fa2:	46bd      	mov	sp, r7
 8003fa4:	b002      	add	sp, #8
 8003fa6:	bd80      	pop	{r7, pc}
 8003fa8:	40021800 	.word	0x40021800

08003fac <HAL_GPIO_EXTI_Falling_Callback>:
  * @brief  EXTI line detection callback.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Falling_Callback(uint16_t GPIO_Pin)
{
 8003fac:	b580      	push	{r7, lr}
 8003fae:	b082      	sub	sp, #8
 8003fb0:	af00      	add	r7, sp, #0
 8003fb2:	0002      	movs	r2, r0
 8003fb4:	1dbb      	adds	r3, r7, #6
 8003fb6:	801a      	strh	r2, [r3, #0]
  UNUSED(GPIO_Pin);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Falling_Callback could be implemented in the user file
   */
}
 8003fb8:	46c0      	nop			; (mov r8, r8)
 8003fba:	46bd      	mov	sp, r7
 8003fbc:	b002      	add	sp, #8
 8003fbe:	bd80      	pop	{r7, pc}

08003fc0 <HAL_PWR_EnableBkUpAccess>:
  *         possible unwanted write accesses. All RTC & TAMP registers (backup
  *         registers included) and RCC BDCR register are concerned.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 8003fc0:	b580      	push	{r7, lr}
 8003fc2:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8003fc4:	4b04      	ldr	r3, [pc, #16]	; (8003fd8 <HAL_PWR_EnableBkUpAccess+0x18>)
 8003fc6:	681a      	ldr	r2, [r3, #0]
 8003fc8:	4b03      	ldr	r3, [pc, #12]	; (8003fd8 <HAL_PWR_EnableBkUpAccess+0x18>)
 8003fca:	2180      	movs	r1, #128	; 0x80
 8003fcc:	0049      	lsls	r1, r1, #1
 8003fce:	430a      	orrs	r2, r1
 8003fd0:	601a      	str	r2, [r3, #0]
}
 8003fd2:	46c0      	nop			; (mov r8, r8)
 8003fd4:	46bd      	mov	sp, r7
 8003fd6:	bd80      	pop	{r7, pc}
 8003fd8:	40007000 	.word	0x40007000

08003fdc <HAL_PWR_EnterSTOPMode>:
  *            @arg @ref PWR_STOPENTRY_WFE  Enter Stop 0 or Stop 1 mode with WFE
  *                                         instruction.
  * @retval None
  */
void HAL_PWR_EnterSTOPMode(uint32_t Regulator, uint8_t STOPEntry)
{
 8003fdc:	b580      	push	{r7, lr}
 8003fde:	b082      	sub	sp, #8
 8003fe0:	af00      	add	r7, sp, #0
 8003fe2:	6078      	str	r0, [r7, #4]
 8003fe4:	000a      	movs	r2, r1
 8003fe6:	1cfb      	adds	r3, r7, #3
 8003fe8:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_PWR_REGULATOR(Regulator));
  assert_param(IS_PWR_STOP_ENTRY(STOPEntry));

  if (Regulator != PWR_MAINREGULATOR_ON)
 8003fea:	687b      	ldr	r3, [r7, #4]
 8003fec:	2b00      	cmp	r3, #0
 8003fee:	d009      	beq.n	8004004 <HAL_PWR_EnterSTOPMode+0x28>
  {
    /* Stop mode with Low-Power Regulator */
    MODIFY_REG(PWR->CR1, PWR_CR1_LPMS, PWR_LOWPOWERMODE_STOP1);
 8003ff0:	4b14      	ldr	r3, [pc, #80]	; (8004044 <HAL_PWR_EnterSTOPMode+0x68>)
 8003ff2:	681b      	ldr	r3, [r3, #0]
 8003ff4:	2207      	movs	r2, #7
 8003ff6:	4393      	bics	r3, r2
 8003ff8:	001a      	movs	r2, r3
 8003ffa:	4b12      	ldr	r3, [pc, #72]	; (8004044 <HAL_PWR_EnterSTOPMode+0x68>)
 8003ffc:	2101      	movs	r1, #1
 8003ffe:	430a      	orrs	r2, r1
 8004000:	601a      	str	r2, [r3, #0]
 8004002:	e005      	b.n	8004010 <HAL_PWR_EnterSTOPMode+0x34>
  }
  else
  {
    /* Stop mode with Main Regulator */
    MODIFY_REG(PWR->CR1, PWR_CR1_LPMS, PWR_LOWPOWERMODE_STOP0);
 8004004:	4b0f      	ldr	r3, [pc, #60]	; (8004044 <HAL_PWR_EnterSTOPMode+0x68>)
 8004006:	681a      	ldr	r2, [r3, #0]
 8004008:	4b0e      	ldr	r3, [pc, #56]	; (8004044 <HAL_PWR_EnterSTOPMode+0x68>)
 800400a:	2107      	movs	r1, #7
 800400c:	438a      	bics	r2, r1
 800400e:	601a      	str	r2, [r3, #0]
  }

  /* Set SLEEPDEEP bit of Cortex System Control Register */
  SET_BIT(SCB->SCR, ((uint32_t)SCB_SCR_SLEEPDEEP_Msk));
 8004010:	4b0d      	ldr	r3, [pc, #52]	; (8004048 <HAL_PWR_EnterSTOPMode+0x6c>)
 8004012:	691a      	ldr	r2, [r3, #16]
 8004014:	4b0c      	ldr	r3, [pc, #48]	; (8004048 <HAL_PWR_EnterSTOPMode+0x6c>)
 8004016:	2104      	movs	r1, #4
 8004018:	430a      	orrs	r2, r1
 800401a:	611a      	str	r2, [r3, #16]

  /* Select Stop mode entry --------------------------------------------------*/
  if (STOPEntry == PWR_STOPENTRY_WFI)
 800401c:	1cfb      	adds	r3, r7, #3
 800401e:	781b      	ldrb	r3, [r3, #0]
 8004020:	2b01      	cmp	r3, #1
 8004022:	d101      	bne.n	8004028 <HAL_PWR_EnterSTOPMode+0x4c>
  {
    /* Request Wait For Interrupt */
    __WFI();
 8004024:	bf30      	wfi
 8004026:	e002      	b.n	800402e <HAL_PWR_EnterSTOPMode+0x52>
  }
  else
  {
    /* Request Wait For Event */
    __SEV();
 8004028:	bf40      	sev
    __WFE();
 800402a:	bf20      	wfe
    __WFE();
 800402c:	bf20      	wfe
  }

  /* Reset SLEEPDEEP bit of Cortex System Control Register */
  CLEAR_BIT(SCB->SCR, ((uint32_t)SCB_SCR_SLEEPDEEP_Msk));
 800402e:	4b06      	ldr	r3, [pc, #24]	; (8004048 <HAL_PWR_EnterSTOPMode+0x6c>)
 8004030:	691a      	ldr	r2, [r3, #16]
 8004032:	4b05      	ldr	r3, [pc, #20]	; (8004048 <HAL_PWR_EnterSTOPMode+0x6c>)
 8004034:	2104      	movs	r1, #4
 8004036:	438a      	bics	r2, r1
 8004038:	611a      	str	r2, [r3, #16]
}
 800403a:	46c0      	nop			; (mov r8, r8)
 800403c:	46bd      	mov	sp, r7
 800403e:	b002      	add	sp, #8
 8004040:	bd80      	pop	{r7, pc}
 8004042:	46c0      	nop			; (mov r8, r8)
 8004044:	40007000 	.word	0x40007000
 8004048:	e000ed00 	.word	0xe000ed00

0800404c <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        6 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 800404c:	b580      	push	{r7, lr}
 800404e:	b084      	sub	sp, #16
 8004050:	af00      	add	r7, sp, #0
 8004052:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  /* Modify voltage scaling range */
  MODIFY_REG(PWR->CR1, PWR_CR1_VOS, VoltageScaling);
 8004054:	4b19      	ldr	r3, [pc, #100]	; (80040bc <HAL_PWREx_ControlVoltageScaling+0x70>)
 8004056:	681b      	ldr	r3, [r3, #0]
 8004058:	4a19      	ldr	r2, [pc, #100]	; (80040c0 <HAL_PWREx_ControlVoltageScaling+0x74>)
 800405a:	4013      	ands	r3, r2
 800405c:	0019      	movs	r1, r3
 800405e:	4b17      	ldr	r3, [pc, #92]	; (80040bc <HAL_PWREx_ControlVoltageScaling+0x70>)
 8004060:	687a      	ldr	r2, [r7, #4]
 8004062:	430a      	orrs	r2, r1
 8004064:	601a      	str	r2, [r3, #0]

  /* In case of Range 1 selected, we need to ensure that main regulator reaches new value */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8004066:	687a      	ldr	r2, [r7, #4]
 8004068:	2380      	movs	r3, #128	; 0x80
 800406a:	009b      	lsls	r3, r3, #2
 800406c:	429a      	cmp	r2, r3
 800406e:	d11f      	bne.n	80040b0 <HAL_PWREx_ControlVoltageScaling+0x64>
  {
    /* Set timeout value */
    wait_loop_index = ((PWR_VOSF_SETTING_DELAY_6_US * SystemCoreClock) / 1000000U) + 1U;
 8004070:	4b14      	ldr	r3, [pc, #80]	; (80040c4 <HAL_PWREx_ControlVoltageScaling+0x78>)
 8004072:	681a      	ldr	r2, [r3, #0]
 8004074:	0013      	movs	r3, r2
 8004076:	005b      	lsls	r3, r3, #1
 8004078:	189b      	adds	r3, r3, r2
 800407a:	005b      	lsls	r3, r3, #1
 800407c:	4912      	ldr	r1, [pc, #72]	; (80040c8 <HAL_PWREx_ControlVoltageScaling+0x7c>)
 800407e:	0018      	movs	r0, r3
 8004080:	f7fc f85c 	bl	800013c <__udivsi3>
 8004084:	0003      	movs	r3, r0
 8004086:	3301      	adds	r3, #1
 8004088:	60fb      	str	r3, [r7, #12]

    /* Wait until VOSF is reset */
    while (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 800408a:	e008      	b.n	800409e <HAL_PWREx_ControlVoltageScaling+0x52>
    {
      if (wait_loop_index != 0U)
 800408c:	68fb      	ldr	r3, [r7, #12]
 800408e:	2b00      	cmp	r3, #0
 8004090:	d003      	beq.n	800409a <HAL_PWREx_ControlVoltageScaling+0x4e>
      {
        wait_loop_index--;
 8004092:	68fb      	ldr	r3, [r7, #12]
 8004094:	3b01      	subs	r3, #1
 8004096:	60fb      	str	r3, [r7, #12]
 8004098:	e001      	b.n	800409e <HAL_PWREx_ControlVoltageScaling+0x52>
      }
      else
      {
        return HAL_TIMEOUT;
 800409a:	2303      	movs	r3, #3
 800409c:	e009      	b.n	80040b2 <HAL_PWREx_ControlVoltageScaling+0x66>
    while (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 800409e:	4b07      	ldr	r3, [pc, #28]	; (80040bc <HAL_PWREx_ControlVoltageScaling+0x70>)
 80040a0:	695a      	ldr	r2, [r3, #20]
 80040a2:	2380      	movs	r3, #128	; 0x80
 80040a4:	00db      	lsls	r3, r3, #3
 80040a6:	401a      	ands	r2, r3
 80040a8:	2380      	movs	r3, #128	; 0x80
 80040aa:	00db      	lsls	r3, r3, #3
 80040ac:	429a      	cmp	r2, r3
 80040ae:	d0ed      	beq.n	800408c <HAL_PWREx_ControlVoltageScaling+0x40>
      }
    }
  }

  return HAL_OK;
 80040b0:	2300      	movs	r3, #0
}
 80040b2:	0018      	movs	r0, r3
 80040b4:	46bd      	mov	sp, r7
 80040b6:	b004      	add	sp, #16
 80040b8:	bd80      	pop	{r7, pc}
 80040ba:	46c0      	nop			; (mov r8, r8)
 80040bc:	40007000 	.word	0x40007000
 80040c0:	fffff9ff 	.word	0xfffff9ff
 80040c4:	20000010 	.word	0x20000010
 80040c8:	000f4240 	.word	0x000f4240

080040cc <LL_RCC_GetAPB1Prescaler>:
  *         @arg @ref LL_RCC_APB1_DIV_4
  *         @arg @ref LL_RCC_APB1_DIV_8
  *         @arg @ref LL_RCC_APB1_DIV_16
  */
__STATIC_INLINE uint32_t LL_RCC_GetAPB1Prescaler(void)
{
 80040cc:	b580      	push	{r7, lr}
 80040ce:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE));
 80040d0:	4b03      	ldr	r3, [pc, #12]	; (80040e0 <LL_RCC_GetAPB1Prescaler+0x14>)
 80040d2:	689a      	ldr	r2, [r3, #8]
 80040d4:	23e0      	movs	r3, #224	; 0xe0
 80040d6:	01db      	lsls	r3, r3, #7
 80040d8:	4013      	ands	r3, r2
}
 80040da:	0018      	movs	r0, r3
 80040dc:	46bd      	mov	sp, r7
 80040de:	bd80      	pop	{r7, pc}
 80040e0:	40021000 	.word	0x40021000

080040e4 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to LSE Off
  *         first and then to LSE On or LSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80040e4:	b580      	push	{r7, lr}
 80040e6:	b088      	sub	sp, #32
 80040e8:	af00      	add	r7, sp, #0
 80040ea:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80040ec:	687b      	ldr	r3, [r7, #4]
 80040ee:	2b00      	cmp	r3, #0
 80040f0:	d102      	bne.n	80040f8 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 80040f2:	2301      	movs	r3, #1
 80040f4:	f000 fb50 	bl	8004798 <HAL_RCC_OscConfig+0x6b4>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80040f8:	687b      	ldr	r3, [r7, #4]
 80040fa:	681b      	ldr	r3, [r3, #0]
 80040fc:	2201      	movs	r2, #1
 80040fe:	4013      	ands	r3, r2
 8004100:	d100      	bne.n	8004104 <HAL_RCC_OscConfig+0x20>
 8004102:	e07c      	b.n	80041fe <HAL_RCC_OscConfig+0x11a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8004104:	4bc3      	ldr	r3, [pc, #780]	; (8004414 <HAL_RCC_OscConfig+0x330>)
 8004106:	689b      	ldr	r3, [r3, #8]
 8004108:	2238      	movs	r2, #56	; 0x38
 800410a:	4013      	ands	r3, r2
 800410c:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 800410e:	4bc1      	ldr	r3, [pc, #772]	; (8004414 <HAL_RCC_OscConfig+0x330>)
 8004110:	68db      	ldr	r3, [r3, #12]
 8004112:	2203      	movs	r2, #3
 8004114:	4013      	ands	r3, r2
 8004116:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckcfg == RCC_PLLSOURCE_HSE))
 8004118:	69bb      	ldr	r3, [r7, #24]
 800411a:	2b10      	cmp	r3, #16
 800411c:	d102      	bne.n	8004124 <HAL_RCC_OscConfig+0x40>
 800411e:	697b      	ldr	r3, [r7, #20]
 8004120:	2b03      	cmp	r3, #3
 8004122:	d002      	beq.n	800412a <HAL_RCC_OscConfig+0x46>
        || (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSE))
 8004124:	69bb      	ldr	r3, [r7, #24]
 8004126:	2b08      	cmp	r3, #8
 8004128:	d10b      	bne.n	8004142 <HAL_RCC_OscConfig+0x5e>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800412a:	4bba      	ldr	r3, [pc, #744]	; (8004414 <HAL_RCC_OscConfig+0x330>)
 800412c:	681a      	ldr	r2, [r3, #0]
 800412e:	2380      	movs	r3, #128	; 0x80
 8004130:	029b      	lsls	r3, r3, #10
 8004132:	4013      	ands	r3, r2
 8004134:	d062      	beq.n	80041fc <HAL_RCC_OscConfig+0x118>
 8004136:	687b      	ldr	r3, [r7, #4]
 8004138:	685b      	ldr	r3, [r3, #4]
 800413a:	2b00      	cmp	r3, #0
 800413c:	d15e      	bne.n	80041fc <HAL_RCC_OscConfig+0x118>
      {
        return HAL_ERROR;
 800413e:	2301      	movs	r3, #1
 8004140:	e32a      	b.n	8004798 <HAL_RCC_OscConfig+0x6b4>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004142:	687b      	ldr	r3, [r7, #4]
 8004144:	685a      	ldr	r2, [r3, #4]
 8004146:	2380      	movs	r3, #128	; 0x80
 8004148:	025b      	lsls	r3, r3, #9
 800414a:	429a      	cmp	r2, r3
 800414c:	d107      	bne.n	800415e <HAL_RCC_OscConfig+0x7a>
 800414e:	4bb1      	ldr	r3, [pc, #708]	; (8004414 <HAL_RCC_OscConfig+0x330>)
 8004150:	681a      	ldr	r2, [r3, #0]
 8004152:	4bb0      	ldr	r3, [pc, #704]	; (8004414 <HAL_RCC_OscConfig+0x330>)
 8004154:	2180      	movs	r1, #128	; 0x80
 8004156:	0249      	lsls	r1, r1, #9
 8004158:	430a      	orrs	r2, r1
 800415a:	601a      	str	r2, [r3, #0]
 800415c:	e020      	b.n	80041a0 <HAL_RCC_OscConfig+0xbc>
 800415e:	687b      	ldr	r3, [r7, #4]
 8004160:	685a      	ldr	r2, [r3, #4]
 8004162:	23a0      	movs	r3, #160	; 0xa0
 8004164:	02db      	lsls	r3, r3, #11
 8004166:	429a      	cmp	r2, r3
 8004168:	d10e      	bne.n	8004188 <HAL_RCC_OscConfig+0xa4>
 800416a:	4baa      	ldr	r3, [pc, #680]	; (8004414 <HAL_RCC_OscConfig+0x330>)
 800416c:	681a      	ldr	r2, [r3, #0]
 800416e:	4ba9      	ldr	r3, [pc, #676]	; (8004414 <HAL_RCC_OscConfig+0x330>)
 8004170:	2180      	movs	r1, #128	; 0x80
 8004172:	02c9      	lsls	r1, r1, #11
 8004174:	430a      	orrs	r2, r1
 8004176:	601a      	str	r2, [r3, #0]
 8004178:	4ba6      	ldr	r3, [pc, #664]	; (8004414 <HAL_RCC_OscConfig+0x330>)
 800417a:	681a      	ldr	r2, [r3, #0]
 800417c:	4ba5      	ldr	r3, [pc, #660]	; (8004414 <HAL_RCC_OscConfig+0x330>)
 800417e:	2180      	movs	r1, #128	; 0x80
 8004180:	0249      	lsls	r1, r1, #9
 8004182:	430a      	orrs	r2, r1
 8004184:	601a      	str	r2, [r3, #0]
 8004186:	e00b      	b.n	80041a0 <HAL_RCC_OscConfig+0xbc>
 8004188:	4ba2      	ldr	r3, [pc, #648]	; (8004414 <HAL_RCC_OscConfig+0x330>)
 800418a:	681a      	ldr	r2, [r3, #0]
 800418c:	4ba1      	ldr	r3, [pc, #644]	; (8004414 <HAL_RCC_OscConfig+0x330>)
 800418e:	49a2      	ldr	r1, [pc, #648]	; (8004418 <HAL_RCC_OscConfig+0x334>)
 8004190:	400a      	ands	r2, r1
 8004192:	601a      	str	r2, [r3, #0]
 8004194:	4b9f      	ldr	r3, [pc, #636]	; (8004414 <HAL_RCC_OscConfig+0x330>)
 8004196:	681a      	ldr	r2, [r3, #0]
 8004198:	4b9e      	ldr	r3, [pc, #632]	; (8004414 <HAL_RCC_OscConfig+0x330>)
 800419a:	49a0      	ldr	r1, [pc, #640]	; (800441c <HAL_RCC_OscConfig+0x338>)
 800419c:	400a      	ands	r2, r1
 800419e:	601a      	str	r2, [r3, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80041a0:	687b      	ldr	r3, [r7, #4]
 80041a2:	685b      	ldr	r3, [r3, #4]
 80041a4:	2b00      	cmp	r3, #0
 80041a6:	d014      	beq.n	80041d2 <HAL_RCC_OscConfig+0xee>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80041a8:	f7ff fbdc 	bl	8003964 <HAL_GetTick>
 80041ac:	0003      	movs	r3, r0
 80041ae:	613b      	str	r3, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80041b0:	e008      	b.n	80041c4 <HAL_RCC_OscConfig+0xe0>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80041b2:	f7ff fbd7 	bl	8003964 <HAL_GetTick>
 80041b6:	0002      	movs	r2, r0
 80041b8:	693b      	ldr	r3, [r7, #16]
 80041ba:	1ad3      	subs	r3, r2, r3
 80041bc:	2b64      	cmp	r3, #100	; 0x64
 80041be:	d901      	bls.n	80041c4 <HAL_RCC_OscConfig+0xe0>
          {
            return HAL_TIMEOUT;
 80041c0:	2303      	movs	r3, #3
 80041c2:	e2e9      	b.n	8004798 <HAL_RCC_OscConfig+0x6b4>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80041c4:	4b93      	ldr	r3, [pc, #588]	; (8004414 <HAL_RCC_OscConfig+0x330>)
 80041c6:	681a      	ldr	r2, [r3, #0]
 80041c8:	2380      	movs	r3, #128	; 0x80
 80041ca:	029b      	lsls	r3, r3, #10
 80041cc:	4013      	ands	r3, r2
 80041ce:	d0f0      	beq.n	80041b2 <HAL_RCC_OscConfig+0xce>
 80041d0:	e015      	b.n	80041fe <HAL_RCC_OscConfig+0x11a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80041d2:	f7ff fbc7 	bl	8003964 <HAL_GetTick>
 80041d6:	0003      	movs	r3, r0
 80041d8:	613b      	str	r3, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80041da:	e008      	b.n	80041ee <HAL_RCC_OscConfig+0x10a>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80041dc:	f7ff fbc2 	bl	8003964 <HAL_GetTick>
 80041e0:	0002      	movs	r2, r0
 80041e2:	693b      	ldr	r3, [r7, #16]
 80041e4:	1ad3      	subs	r3, r2, r3
 80041e6:	2b64      	cmp	r3, #100	; 0x64
 80041e8:	d901      	bls.n	80041ee <HAL_RCC_OscConfig+0x10a>
          {
            return HAL_TIMEOUT;
 80041ea:	2303      	movs	r3, #3
 80041ec:	e2d4      	b.n	8004798 <HAL_RCC_OscConfig+0x6b4>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80041ee:	4b89      	ldr	r3, [pc, #548]	; (8004414 <HAL_RCC_OscConfig+0x330>)
 80041f0:	681a      	ldr	r2, [r3, #0]
 80041f2:	2380      	movs	r3, #128	; 0x80
 80041f4:	029b      	lsls	r3, r3, #10
 80041f6:	4013      	ands	r3, r2
 80041f8:	d1f0      	bne.n	80041dc <HAL_RCC_OscConfig+0xf8>
 80041fa:	e000      	b.n	80041fe <HAL_RCC_OscConfig+0x11a>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80041fc:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80041fe:	687b      	ldr	r3, [r7, #4]
 8004200:	681b      	ldr	r3, [r3, #0]
 8004202:	2202      	movs	r2, #2
 8004204:	4013      	ands	r3, r2
 8004206:	d100      	bne.n	800420a <HAL_RCC_OscConfig+0x126>
 8004208:	e099      	b.n	800433e <HAL_RCC_OscConfig+0x25a>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    assert_param(IS_RCC_HSIDIV(RCC_OscInitStruct->HSIDiv));

    /* Check if HSI16 is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800420a:	4b82      	ldr	r3, [pc, #520]	; (8004414 <HAL_RCC_OscConfig+0x330>)
 800420c:	689b      	ldr	r3, [r3, #8]
 800420e:	2238      	movs	r2, #56	; 0x38
 8004210:	4013      	ands	r3, r2
 8004212:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8004214:	4b7f      	ldr	r3, [pc, #508]	; (8004414 <HAL_RCC_OscConfig+0x330>)
 8004216:	68db      	ldr	r3, [r3, #12]
 8004218:	2203      	movs	r2, #3
 800421a:	4013      	ands	r3, r2
 800421c:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckcfg == RCC_PLLSOURCE_HSI))
 800421e:	69bb      	ldr	r3, [r7, #24]
 8004220:	2b10      	cmp	r3, #16
 8004222:	d102      	bne.n	800422a <HAL_RCC_OscConfig+0x146>
 8004224:	697b      	ldr	r3, [r7, #20]
 8004226:	2b02      	cmp	r3, #2
 8004228:	d002      	beq.n	8004230 <HAL_RCC_OscConfig+0x14c>
        || (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI))
 800422a:	69bb      	ldr	r3, [r7, #24]
 800422c:	2b00      	cmp	r3, #0
 800422e:	d135      	bne.n	800429c <HAL_RCC_OscConfig+0x1b8>
    {
      /* When HSI is used as system clock or as PLL input clock it can not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8004230:	4b78      	ldr	r3, [pc, #480]	; (8004414 <HAL_RCC_OscConfig+0x330>)
 8004232:	681a      	ldr	r2, [r3, #0]
 8004234:	2380      	movs	r3, #128	; 0x80
 8004236:	00db      	lsls	r3, r3, #3
 8004238:	4013      	ands	r3, r2
 800423a:	d005      	beq.n	8004248 <HAL_RCC_OscConfig+0x164>
 800423c:	687b      	ldr	r3, [r7, #4]
 800423e:	68db      	ldr	r3, [r3, #12]
 8004240:	2b00      	cmp	r3, #0
 8004242:	d101      	bne.n	8004248 <HAL_RCC_OscConfig+0x164>
      {
        return HAL_ERROR;
 8004244:	2301      	movs	r3, #1
 8004246:	e2a7      	b.n	8004798 <HAL_RCC_OscConfig+0x6b4>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004248:	4b72      	ldr	r3, [pc, #456]	; (8004414 <HAL_RCC_OscConfig+0x330>)
 800424a:	685b      	ldr	r3, [r3, #4]
 800424c:	4a74      	ldr	r2, [pc, #464]	; (8004420 <HAL_RCC_OscConfig+0x33c>)
 800424e:	4013      	ands	r3, r2
 8004250:	0019      	movs	r1, r3
 8004252:	687b      	ldr	r3, [r7, #4]
 8004254:	695b      	ldr	r3, [r3, #20]
 8004256:	021a      	lsls	r2, r3, #8
 8004258:	4b6e      	ldr	r3, [pc, #440]	; (8004414 <HAL_RCC_OscConfig+0x330>)
 800425a:	430a      	orrs	r2, r1
 800425c:	605a      	str	r2, [r3, #4]

        if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI)
 800425e:	69bb      	ldr	r3, [r7, #24]
 8004260:	2b00      	cmp	r3, #0
 8004262:	d112      	bne.n	800428a <HAL_RCC_OscConfig+0x1a6>
        {
          /* Adjust the HSI16 division factor */
          __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 8004264:	4b6b      	ldr	r3, [pc, #428]	; (8004414 <HAL_RCC_OscConfig+0x330>)
 8004266:	681b      	ldr	r3, [r3, #0]
 8004268:	4a6e      	ldr	r2, [pc, #440]	; (8004424 <HAL_RCC_OscConfig+0x340>)
 800426a:	4013      	ands	r3, r2
 800426c:	0019      	movs	r1, r3
 800426e:	687b      	ldr	r3, [r7, #4]
 8004270:	691a      	ldr	r2, [r3, #16]
 8004272:	4b68      	ldr	r3, [pc, #416]	; (8004414 <HAL_RCC_OscConfig+0x330>)
 8004274:	430a      	orrs	r2, r1
 8004276:	601a      	str	r2, [r3, #0]

          /* Update the SystemCoreClock global variable with HSISYS value  */
          SystemCoreClock = (HSI_VALUE / (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos)));
 8004278:	4b66      	ldr	r3, [pc, #408]	; (8004414 <HAL_RCC_OscConfig+0x330>)
 800427a:	681b      	ldr	r3, [r3, #0]
 800427c:	0adb      	lsrs	r3, r3, #11
 800427e:	2207      	movs	r2, #7
 8004280:	4013      	ands	r3, r2
 8004282:	4a69      	ldr	r2, [pc, #420]	; (8004428 <HAL_RCC_OscConfig+0x344>)
 8004284:	40da      	lsrs	r2, r3
 8004286:	4b69      	ldr	r3, [pc, #420]	; (800442c <HAL_RCC_OscConfig+0x348>)
 8004288:	601a      	str	r2, [r3, #0]
        }

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 800428a:	4b69      	ldr	r3, [pc, #420]	; (8004430 <HAL_RCC_OscConfig+0x34c>)
 800428c:	681b      	ldr	r3, [r3, #0]
 800428e:	0018      	movs	r0, r3
 8004290:	f7ff fb0c 	bl	80038ac <HAL_InitTick>
 8004294:	1e03      	subs	r3, r0, #0
 8004296:	d051      	beq.n	800433c <HAL_RCC_OscConfig+0x258>
        {
          return HAL_ERROR;
 8004298:	2301      	movs	r3, #1
 800429a:	e27d      	b.n	8004798 <HAL_RCC_OscConfig+0x6b4>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800429c:	687b      	ldr	r3, [r7, #4]
 800429e:	68db      	ldr	r3, [r3, #12]
 80042a0:	2b00      	cmp	r3, #0
 80042a2:	d030      	beq.n	8004306 <HAL_RCC_OscConfig+0x222>
      {
        /* Configure the HSI16 division factor */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 80042a4:	4b5b      	ldr	r3, [pc, #364]	; (8004414 <HAL_RCC_OscConfig+0x330>)
 80042a6:	681b      	ldr	r3, [r3, #0]
 80042a8:	4a5e      	ldr	r2, [pc, #376]	; (8004424 <HAL_RCC_OscConfig+0x340>)
 80042aa:	4013      	ands	r3, r2
 80042ac:	0019      	movs	r1, r3
 80042ae:	687b      	ldr	r3, [r7, #4]
 80042b0:	691a      	ldr	r2, [r3, #16]
 80042b2:	4b58      	ldr	r3, [pc, #352]	; (8004414 <HAL_RCC_OscConfig+0x330>)
 80042b4:	430a      	orrs	r2, r1
 80042b6:	601a      	str	r2, [r3, #0]

        /* Enable the Internal High Speed oscillator (HSI16). */
        __HAL_RCC_HSI_ENABLE();
 80042b8:	4b56      	ldr	r3, [pc, #344]	; (8004414 <HAL_RCC_OscConfig+0x330>)
 80042ba:	681a      	ldr	r2, [r3, #0]
 80042bc:	4b55      	ldr	r3, [pc, #340]	; (8004414 <HAL_RCC_OscConfig+0x330>)
 80042be:	2180      	movs	r1, #128	; 0x80
 80042c0:	0049      	lsls	r1, r1, #1
 80042c2:	430a      	orrs	r2, r1
 80042c4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80042c6:	f7ff fb4d 	bl	8003964 <HAL_GetTick>
 80042ca:	0003      	movs	r3, r0
 80042cc:	613b      	str	r3, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80042ce:	e008      	b.n	80042e2 <HAL_RCC_OscConfig+0x1fe>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80042d0:	f7ff fb48 	bl	8003964 <HAL_GetTick>
 80042d4:	0002      	movs	r2, r0
 80042d6:	693b      	ldr	r3, [r7, #16]
 80042d8:	1ad3      	subs	r3, r2, r3
 80042da:	2b02      	cmp	r3, #2
 80042dc:	d901      	bls.n	80042e2 <HAL_RCC_OscConfig+0x1fe>
          {
            return HAL_TIMEOUT;
 80042de:	2303      	movs	r3, #3
 80042e0:	e25a      	b.n	8004798 <HAL_RCC_OscConfig+0x6b4>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80042e2:	4b4c      	ldr	r3, [pc, #304]	; (8004414 <HAL_RCC_OscConfig+0x330>)
 80042e4:	681a      	ldr	r2, [r3, #0]
 80042e6:	2380      	movs	r3, #128	; 0x80
 80042e8:	00db      	lsls	r3, r3, #3
 80042ea:	4013      	ands	r3, r2
 80042ec:	d0f0      	beq.n	80042d0 <HAL_RCC_OscConfig+0x1ec>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80042ee:	4b49      	ldr	r3, [pc, #292]	; (8004414 <HAL_RCC_OscConfig+0x330>)
 80042f0:	685b      	ldr	r3, [r3, #4]
 80042f2:	4a4b      	ldr	r2, [pc, #300]	; (8004420 <HAL_RCC_OscConfig+0x33c>)
 80042f4:	4013      	ands	r3, r2
 80042f6:	0019      	movs	r1, r3
 80042f8:	687b      	ldr	r3, [r7, #4]
 80042fa:	695b      	ldr	r3, [r3, #20]
 80042fc:	021a      	lsls	r2, r3, #8
 80042fe:	4b45      	ldr	r3, [pc, #276]	; (8004414 <HAL_RCC_OscConfig+0x330>)
 8004300:	430a      	orrs	r2, r1
 8004302:	605a      	str	r2, [r3, #4]
 8004304:	e01b      	b.n	800433e <HAL_RCC_OscConfig+0x25a>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI16). */
        __HAL_RCC_HSI_DISABLE();
 8004306:	4b43      	ldr	r3, [pc, #268]	; (8004414 <HAL_RCC_OscConfig+0x330>)
 8004308:	681a      	ldr	r2, [r3, #0]
 800430a:	4b42      	ldr	r3, [pc, #264]	; (8004414 <HAL_RCC_OscConfig+0x330>)
 800430c:	4949      	ldr	r1, [pc, #292]	; (8004434 <HAL_RCC_OscConfig+0x350>)
 800430e:	400a      	ands	r2, r1
 8004310:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004312:	f7ff fb27 	bl	8003964 <HAL_GetTick>
 8004316:	0003      	movs	r3, r0
 8004318:	613b      	str	r3, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800431a:	e008      	b.n	800432e <HAL_RCC_OscConfig+0x24a>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800431c:	f7ff fb22 	bl	8003964 <HAL_GetTick>
 8004320:	0002      	movs	r2, r0
 8004322:	693b      	ldr	r3, [r7, #16]
 8004324:	1ad3      	subs	r3, r2, r3
 8004326:	2b02      	cmp	r3, #2
 8004328:	d901      	bls.n	800432e <HAL_RCC_OscConfig+0x24a>
          {
            return HAL_TIMEOUT;
 800432a:	2303      	movs	r3, #3
 800432c:	e234      	b.n	8004798 <HAL_RCC_OscConfig+0x6b4>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800432e:	4b39      	ldr	r3, [pc, #228]	; (8004414 <HAL_RCC_OscConfig+0x330>)
 8004330:	681a      	ldr	r2, [r3, #0]
 8004332:	2380      	movs	r3, #128	; 0x80
 8004334:	00db      	lsls	r3, r3, #3
 8004336:	4013      	ands	r3, r2
 8004338:	d1f0      	bne.n	800431c <HAL_RCC_OscConfig+0x238>
 800433a:	e000      	b.n	800433e <HAL_RCC_OscConfig+0x25a>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800433c:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800433e:	687b      	ldr	r3, [r7, #4]
 8004340:	681b      	ldr	r3, [r3, #0]
 8004342:	2208      	movs	r2, #8
 8004344:	4013      	ands	r3, r2
 8004346:	d047      	beq.n	80043d8 <HAL_RCC_OscConfig+0x2f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check if LSI is used as system clock */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSI)
 8004348:	4b32      	ldr	r3, [pc, #200]	; (8004414 <HAL_RCC_OscConfig+0x330>)
 800434a:	689b      	ldr	r3, [r3, #8]
 800434c:	2238      	movs	r2, #56	; 0x38
 800434e:	4013      	ands	r3, r2
 8004350:	2b18      	cmp	r3, #24
 8004352:	d10a      	bne.n	800436a <HAL_RCC_OscConfig+0x286>
    {
      /* When LSI is used as system clock it will not be disabled */
      if ((((RCC->CSR) & RCC_CSR_LSIRDY) != 0U) && (RCC_OscInitStruct->LSIState == RCC_LSI_OFF))
 8004354:	4b2f      	ldr	r3, [pc, #188]	; (8004414 <HAL_RCC_OscConfig+0x330>)
 8004356:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004358:	2202      	movs	r2, #2
 800435a:	4013      	ands	r3, r2
 800435c:	d03c      	beq.n	80043d8 <HAL_RCC_OscConfig+0x2f4>
 800435e:	687b      	ldr	r3, [r7, #4]
 8004360:	699b      	ldr	r3, [r3, #24]
 8004362:	2b00      	cmp	r3, #0
 8004364:	d138      	bne.n	80043d8 <HAL_RCC_OscConfig+0x2f4>
      {
        return HAL_ERROR;
 8004366:	2301      	movs	r3, #1
 8004368:	e216      	b.n	8004798 <HAL_RCC_OscConfig+0x6b4>
      }
    }
    else
    {
      /* Check the LSI State */
      if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800436a:	687b      	ldr	r3, [r7, #4]
 800436c:	699b      	ldr	r3, [r3, #24]
 800436e:	2b00      	cmp	r3, #0
 8004370:	d019      	beq.n	80043a6 <HAL_RCC_OscConfig+0x2c2>
      {
        /* Enable the Internal Low Speed oscillator (LSI). */
        __HAL_RCC_LSI_ENABLE();
 8004372:	4b28      	ldr	r3, [pc, #160]	; (8004414 <HAL_RCC_OscConfig+0x330>)
 8004374:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8004376:	4b27      	ldr	r3, [pc, #156]	; (8004414 <HAL_RCC_OscConfig+0x330>)
 8004378:	2101      	movs	r1, #1
 800437a:	430a      	orrs	r2, r1
 800437c:	661a      	str	r2, [r3, #96]	; 0x60

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800437e:	f7ff faf1 	bl	8003964 <HAL_GetTick>
 8004382:	0003      	movs	r3, r0
 8004384:	613b      	str	r3, [r7, #16]

        /* Wait till LSI is ready */
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8004386:	e008      	b.n	800439a <HAL_RCC_OscConfig+0x2b6>
        {
          if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004388:	f7ff faec 	bl	8003964 <HAL_GetTick>
 800438c:	0002      	movs	r2, r0
 800438e:	693b      	ldr	r3, [r7, #16]
 8004390:	1ad3      	subs	r3, r2, r3
 8004392:	2b02      	cmp	r3, #2
 8004394:	d901      	bls.n	800439a <HAL_RCC_OscConfig+0x2b6>
          {
            return HAL_TIMEOUT;
 8004396:	2303      	movs	r3, #3
 8004398:	e1fe      	b.n	8004798 <HAL_RCC_OscConfig+0x6b4>
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800439a:	4b1e      	ldr	r3, [pc, #120]	; (8004414 <HAL_RCC_OscConfig+0x330>)
 800439c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800439e:	2202      	movs	r2, #2
 80043a0:	4013      	ands	r3, r2
 80043a2:	d0f1      	beq.n	8004388 <HAL_RCC_OscConfig+0x2a4>
 80043a4:	e018      	b.n	80043d8 <HAL_RCC_OscConfig+0x2f4>
        }
      }
      else
      {
        /* Disable the Internal Low Speed oscillator (LSI). */
        __HAL_RCC_LSI_DISABLE();
 80043a6:	4b1b      	ldr	r3, [pc, #108]	; (8004414 <HAL_RCC_OscConfig+0x330>)
 80043a8:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 80043aa:	4b1a      	ldr	r3, [pc, #104]	; (8004414 <HAL_RCC_OscConfig+0x330>)
 80043ac:	2101      	movs	r1, #1
 80043ae:	438a      	bics	r2, r1
 80043b0:	661a      	str	r2, [r3, #96]	; 0x60

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80043b2:	f7ff fad7 	bl	8003964 <HAL_GetTick>
 80043b6:	0003      	movs	r3, r0
 80043b8:	613b      	str	r3, [r7, #16]

        /* Wait till LSI is disabled */
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80043ba:	e008      	b.n	80043ce <HAL_RCC_OscConfig+0x2ea>
        {
          if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80043bc:	f7ff fad2 	bl	8003964 <HAL_GetTick>
 80043c0:	0002      	movs	r2, r0
 80043c2:	693b      	ldr	r3, [r7, #16]
 80043c4:	1ad3      	subs	r3, r2, r3
 80043c6:	2b02      	cmp	r3, #2
 80043c8:	d901      	bls.n	80043ce <HAL_RCC_OscConfig+0x2ea>
          {
            return HAL_TIMEOUT;
 80043ca:	2303      	movs	r3, #3
 80043cc:	e1e4      	b.n	8004798 <HAL_RCC_OscConfig+0x6b4>
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80043ce:	4b11      	ldr	r3, [pc, #68]	; (8004414 <HAL_RCC_OscConfig+0x330>)
 80043d0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80043d2:	2202      	movs	r2, #2
 80043d4:	4013      	ands	r3, r2
 80043d6:	d1f1      	bne.n	80043bc <HAL_RCC_OscConfig+0x2d8>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80043d8:	687b      	ldr	r3, [r7, #4]
 80043da:	681b      	ldr	r3, [r3, #0]
 80043dc:	2204      	movs	r2, #4
 80043de:	4013      	ands	r3, r2
 80043e0:	d100      	bne.n	80043e4 <HAL_RCC_OscConfig+0x300>
 80043e2:	e0c7      	b.n	8004574 <HAL_RCC_OscConfig+0x490>
  {
    FlagStatus       pwrclkchanged = RESET;
 80043e4:	231f      	movs	r3, #31
 80043e6:	18fb      	adds	r3, r7, r3
 80043e8:	2200      	movs	r2, #0
 80043ea:	701a      	strb	r2, [r3, #0]

    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* When the LSE is used as system clock, it is not allowed disable it */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSE)
 80043ec:	4b09      	ldr	r3, [pc, #36]	; (8004414 <HAL_RCC_OscConfig+0x330>)
 80043ee:	689b      	ldr	r3, [r3, #8]
 80043f0:	2238      	movs	r2, #56	; 0x38
 80043f2:	4013      	ands	r3, r2
 80043f4:	2b20      	cmp	r3, #32
 80043f6:	d11f      	bne.n	8004438 <HAL_RCC_OscConfig+0x354>
    {
      if ((((RCC->BDCR) & RCC_BDCR_LSERDY) != 0U) && (RCC_OscInitStruct->LSEState == RCC_LSE_OFF))
 80043f8:	4b06      	ldr	r3, [pc, #24]	; (8004414 <HAL_RCC_OscConfig+0x330>)
 80043fa:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80043fc:	2202      	movs	r2, #2
 80043fe:	4013      	ands	r3, r2
 8004400:	d100      	bne.n	8004404 <HAL_RCC_OscConfig+0x320>
 8004402:	e0b7      	b.n	8004574 <HAL_RCC_OscConfig+0x490>
 8004404:	687b      	ldr	r3, [r7, #4]
 8004406:	689b      	ldr	r3, [r3, #8]
 8004408:	2b00      	cmp	r3, #0
 800440a:	d000      	beq.n	800440e <HAL_RCC_OscConfig+0x32a>
 800440c:	e0b2      	b.n	8004574 <HAL_RCC_OscConfig+0x490>
      {
        return HAL_ERROR;
 800440e:	2301      	movs	r3, #1
 8004410:	e1c2      	b.n	8004798 <HAL_RCC_OscConfig+0x6b4>
 8004412:	46c0      	nop			; (mov r8, r8)
 8004414:	40021000 	.word	0x40021000
 8004418:	fffeffff 	.word	0xfffeffff
 800441c:	fffbffff 	.word	0xfffbffff
 8004420:	ffff80ff 	.word	0xffff80ff
 8004424:	ffffc7ff 	.word	0xffffc7ff
 8004428:	00f42400 	.word	0x00f42400
 800442c:	20000010 	.word	0x20000010
 8004430:	20000014 	.word	0x20000014
 8004434:	fffffeff 	.word	0xfffffeff
    }
    else
    {
      /* Update LSE configuration in Backup Domain control register    */
      /* Requires to enable write access to Backup Domain of necessary */
      if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8004438:	4bb5      	ldr	r3, [pc, #724]	; (8004710 <HAL_RCC_OscConfig+0x62c>)
 800443a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800443c:	2380      	movs	r3, #128	; 0x80
 800443e:	055b      	lsls	r3, r3, #21
 8004440:	4013      	ands	r3, r2
 8004442:	d101      	bne.n	8004448 <HAL_RCC_OscConfig+0x364>
 8004444:	2301      	movs	r3, #1
 8004446:	e000      	b.n	800444a <HAL_RCC_OscConfig+0x366>
 8004448:	2300      	movs	r3, #0
 800444a:	2b00      	cmp	r3, #0
 800444c:	d011      	beq.n	8004472 <HAL_RCC_OscConfig+0x38e>
      {
        __HAL_RCC_PWR_CLK_ENABLE();
 800444e:	4bb0      	ldr	r3, [pc, #704]	; (8004710 <HAL_RCC_OscConfig+0x62c>)
 8004450:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8004452:	4baf      	ldr	r3, [pc, #700]	; (8004710 <HAL_RCC_OscConfig+0x62c>)
 8004454:	2180      	movs	r1, #128	; 0x80
 8004456:	0549      	lsls	r1, r1, #21
 8004458:	430a      	orrs	r2, r1
 800445a:	63da      	str	r2, [r3, #60]	; 0x3c
 800445c:	4bac      	ldr	r3, [pc, #688]	; (8004710 <HAL_RCC_OscConfig+0x62c>)
 800445e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8004460:	2380      	movs	r3, #128	; 0x80
 8004462:	055b      	lsls	r3, r3, #21
 8004464:	4013      	ands	r3, r2
 8004466:	60fb      	str	r3, [r7, #12]
 8004468:	68fb      	ldr	r3, [r7, #12]
        pwrclkchanged = SET;
 800446a:	231f      	movs	r3, #31
 800446c:	18fb      	adds	r3, r7, r3
 800446e:	2201      	movs	r2, #1
 8004470:	701a      	strb	r2, [r3, #0]
      }

      if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004472:	4ba8      	ldr	r3, [pc, #672]	; (8004714 <HAL_RCC_OscConfig+0x630>)
 8004474:	681a      	ldr	r2, [r3, #0]
 8004476:	2380      	movs	r3, #128	; 0x80
 8004478:	005b      	lsls	r3, r3, #1
 800447a:	4013      	ands	r3, r2
 800447c:	d11a      	bne.n	80044b4 <HAL_RCC_OscConfig+0x3d0>
      {
        /* Enable write access to Backup domain */
        SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800447e:	4ba5      	ldr	r3, [pc, #660]	; (8004714 <HAL_RCC_OscConfig+0x630>)
 8004480:	681a      	ldr	r2, [r3, #0]
 8004482:	4ba4      	ldr	r3, [pc, #656]	; (8004714 <HAL_RCC_OscConfig+0x630>)
 8004484:	2180      	movs	r1, #128	; 0x80
 8004486:	0049      	lsls	r1, r1, #1
 8004488:	430a      	orrs	r2, r1
 800448a:	601a      	str	r2, [r3, #0]

        /* Wait for Backup domain Write protection disable */
        tickstart = HAL_GetTick();
 800448c:	f7ff fa6a 	bl	8003964 <HAL_GetTick>
 8004490:	0003      	movs	r3, r0
 8004492:	613b      	str	r3, [r7, #16]

        while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004494:	e008      	b.n	80044a8 <HAL_RCC_OscConfig+0x3c4>
        {
          if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004496:	f7ff fa65 	bl	8003964 <HAL_GetTick>
 800449a:	0002      	movs	r2, r0
 800449c:	693b      	ldr	r3, [r7, #16]
 800449e:	1ad3      	subs	r3, r2, r3
 80044a0:	2b02      	cmp	r3, #2
 80044a2:	d901      	bls.n	80044a8 <HAL_RCC_OscConfig+0x3c4>
          {
            return HAL_TIMEOUT;
 80044a4:	2303      	movs	r3, #3
 80044a6:	e177      	b.n	8004798 <HAL_RCC_OscConfig+0x6b4>
        while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80044a8:	4b9a      	ldr	r3, [pc, #616]	; (8004714 <HAL_RCC_OscConfig+0x630>)
 80044aa:	681a      	ldr	r2, [r3, #0]
 80044ac:	2380      	movs	r3, #128	; 0x80
 80044ae:	005b      	lsls	r3, r3, #1
 80044b0:	4013      	ands	r3, r2
 80044b2:	d0f0      	beq.n	8004496 <HAL_RCC_OscConfig+0x3b2>
          }
        }
      }

      /* Set the new LSE configuration -----------------------------------------*/
      __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80044b4:	687b      	ldr	r3, [r7, #4]
 80044b6:	689b      	ldr	r3, [r3, #8]
 80044b8:	2b01      	cmp	r3, #1
 80044ba:	d106      	bne.n	80044ca <HAL_RCC_OscConfig+0x3e6>
 80044bc:	4b94      	ldr	r3, [pc, #592]	; (8004710 <HAL_RCC_OscConfig+0x62c>)
 80044be:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 80044c0:	4b93      	ldr	r3, [pc, #588]	; (8004710 <HAL_RCC_OscConfig+0x62c>)
 80044c2:	2101      	movs	r1, #1
 80044c4:	430a      	orrs	r2, r1
 80044c6:	65da      	str	r2, [r3, #92]	; 0x5c
 80044c8:	e01c      	b.n	8004504 <HAL_RCC_OscConfig+0x420>
 80044ca:	687b      	ldr	r3, [r7, #4]
 80044cc:	689b      	ldr	r3, [r3, #8]
 80044ce:	2b05      	cmp	r3, #5
 80044d0:	d10c      	bne.n	80044ec <HAL_RCC_OscConfig+0x408>
 80044d2:	4b8f      	ldr	r3, [pc, #572]	; (8004710 <HAL_RCC_OscConfig+0x62c>)
 80044d4:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 80044d6:	4b8e      	ldr	r3, [pc, #568]	; (8004710 <HAL_RCC_OscConfig+0x62c>)
 80044d8:	2104      	movs	r1, #4
 80044da:	430a      	orrs	r2, r1
 80044dc:	65da      	str	r2, [r3, #92]	; 0x5c
 80044de:	4b8c      	ldr	r3, [pc, #560]	; (8004710 <HAL_RCC_OscConfig+0x62c>)
 80044e0:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 80044e2:	4b8b      	ldr	r3, [pc, #556]	; (8004710 <HAL_RCC_OscConfig+0x62c>)
 80044e4:	2101      	movs	r1, #1
 80044e6:	430a      	orrs	r2, r1
 80044e8:	65da      	str	r2, [r3, #92]	; 0x5c
 80044ea:	e00b      	b.n	8004504 <HAL_RCC_OscConfig+0x420>
 80044ec:	4b88      	ldr	r3, [pc, #544]	; (8004710 <HAL_RCC_OscConfig+0x62c>)
 80044ee:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 80044f0:	4b87      	ldr	r3, [pc, #540]	; (8004710 <HAL_RCC_OscConfig+0x62c>)
 80044f2:	2101      	movs	r1, #1
 80044f4:	438a      	bics	r2, r1
 80044f6:	65da      	str	r2, [r3, #92]	; 0x5c
 80044f8:	4b85      	ldr	r3, [pc, #532]	; (8004710 <HAL_RCC_OscConfig+0x62c>)
 80044fa:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 80044fc:	4b84      	ldr	r3, [pc, #528]	; (8004710 <HAL_RCC_OscConfig+0x62c>)
 80044fe:	2104      	movs	r1, #4
 8004500:	438a      	bics	r2, r1
 8004502:	65da      	str	r2, [r3, #92]	; 0x5c

      /* Check the LSE State */
      if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8004504:	687b      	ldr	r3, [r7, #4]
 8004506:	689b      	ldr	r3, [r3, #8]
 8004508:	2b00      	cmp	r3, #0
 800450a:	d014      	beq.n	8004536 <HAL_RCC_OscConfig+0x452>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800450c:	f7ff fa2a 	bl	8003964 <HAL_GetTick>
 8004510:	0003      	movs	r3, r0
 8004512:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004514:	e009      	b.n	800452a <HAL_RCC_OscConfig+0x446>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004516:	f7ff fa25 	bl	8003964 <HAL_GetTick>
 800451a:	0002      	movs	r2, r0
 800451c:	693b      	ldr	r3, [r7, #16]
 800451e:	1ad3      	subs	r3, r2, r3
 8004520:	4a7d      	ldr	r2, [pc, #500]	; (8004718 <HAL_RCC_OscConfig+0x634>)
 8004522:	4293      	cmp	r3, r2
 8004524:	d901      	bls.n	800452a <HAL_RCC_OscConfig+0x446>
          {
            return HAL_TIMEOUT;
 8004526:	2303      	movs	r3, #3
 8004528:	e136      	b.n	8004798 <HAL_RCC_OscConfig+0x6b4>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800452a:	4b79      	ldr	r3, [pc, #484]	; (8004710 <HAL_RCC_OscConfig+0x62c>)
 800452c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800452e:	2202      	movs	r2, #2
 8004530:	4013      	ands	r3, r2
 8004532:	d0f0      	beq.n	8004516 <HAL_RCC_OscConfig+0x432>
 8004534:	e013      	b.n	800455e <HAL_RCC_OscConfig+0x47a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004536:	f7ff fa15 	bl	8003964 <HAL_GetTick>
 800453a:	0003      	movs	r3, r0
 800453c:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is disabled */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 800453e:	e009      	b.n	8004554 <HAL_RCC_OscConfig+0x470>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004540:	f7ff fa10 	bl	8003964 <HAL_GetTick>
 8004544:	0002      	movs	r2, r0
 8004546:	693b      	ldr	r3, [r7, #16]
 8004548:	1ad3      	subs	r3, r2, r3
 800454a:	4a73      	ldr	r2, [pc, #460]	; (8004718 <HAL_RCC_OscConfig+0x634>)
 800454c:	4293      	cmp	r3, r2
 800454e:	d901      	bls.n	8004554 <HAL_RCC_OscConfig+0x470>
          {
            return HAL_TIMEOUT;
 8004550:	2303      	movs	r3, #3
 8004552:	e121      	b.n	8004798 <HAL_RCC_OscConfig+0x6b4>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8004554:	4b6e      	ldr	r3, [pc, #440]	; (8004710 <HAL_RCC_OscConfig+0x62c>)
 8004556:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004558:	2202      	movs	r2, #2
 800455a:	4013      	ands	r3, r2
 800455c:	d1f0      	bne.n	8004540 <HAL_RCC_OscConfig+0x45c>
          }
        }
      }

      /* Restore clock configuration if changed */
      if (pwrclkchanged == SET)
 800455e:	231f      	movs	r3, #31
 8004560:	18fb      	adds	r3, r7, r3
 8004562:	781b      	ldrb	r3, [r3, #0]
 8004564:	2b01      	cmp	r3, #1
 8004566:	d105      	bne.n	8004574 <HAL_RCC_OscConfig+0x490>
      {
        __HAL_RCC_PWR_CLK_DISABLE();
 8004568:	4b69      	ldr	r3, [pc, #420]	; (8004710 <HAL_RCC_OscConfig+0x62c>)
 800456a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800456c:	4b68      	ldr	r3, [pc, #416]	; (8004710 <HAL_RCC_OscConfig+0x62c>)
 800456e:	496b      	ldr	r1, [pc, #428]	; (800471c <HAL_RCC_OscConfig+0x638>)
 8004570:	400a      	ands	r2, r1
 8004572:	63da      	str	r2, [r3, #60]	; 0x3c
      }
    }
  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8004574:	687b      	ldr	r3, [r7, #4]
 8004576:	681b      	ldr	r3, [r3, #0]
 8004578:	2220      	movs	r2, #32
 800457a:	4013      	ands	r3, r2
 800457c:	d039      	beq.n	80045f2 <HAL_RCC_OscConfig+0x50e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if (RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 800457e:	687b      	ldr	r3, [r7, #4]
 8004580:	69db      	ldr	r3, [r3, #28]
 8004582:	2b00      	cmp	r3, #0
 8004584:	d01b      	beq.n	80045be <HAL_RCC_OscConfig+0x4da>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8004586:	4b62      	ldr	r3, [pc, #392]	; (8004710 <HAL_RCC_OscConfig+0x62c>)
 8004588:	681a      	ldr	r2, [r3, #0]
 800458a:	4b61      	ldr	r3, [pc, #388]	; (8004710 <HAL_RCC_OscConfig+0x62c>)
 800458c:	2180      	movs	r1, #128	; 0x80
 800458e:	03c9      	lsls	r1, r1, #15
 8004590:	430a      	orrs	r2, r1
 8004592:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004594:	f7ff f9e6 	bl	8003964 <HAL_GetTick>
 8004598:	0003      	movs	r3, r0
 800459a:	613b      	str	r3, [r7, #16]

      /* Wait till HSI48 is ready */
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) == 0U)
 800459c:	e008      	b.n	80045b0 <HAL_RCC_OscConfig+0x4cc>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800459e:	f7ff f9e1 	bl	8003964 <HAL_GetTick>
 80045a2:	0002      	movs	r2, r0
 80045a4:	693b      	ldr	r3, [r7, #16]
 80045a6:	1ad3      	subs	r3, r2, r3
 80045a8:	2b02      	cmp	r3, #2
 80045aa:	d901      	bls.n	80045b0 <HAL_RCC_OscConfig+0x4cc>
        {
          return HAL_TIMEOUT;
 80045ac:	2303      	movs	r3, #3
 80045ae:	e0f3      	b.n	8004798 <HAL_RCC_OscConfig+0x6b4>
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) == 0U)
 80045b0:	4b57      	ldr	r3, [pc, #348]	; (8004710 <HAL_RCC_OscConfig+0x62c>)
 80045b2:	681a      	ldr	r2, [r3, #0]
 80045b4:	2380      	movs	r3, #128	; 0x80
 80045b6:	041b      	lsls	r3, r3, #16
 80045b8:	4013      	ands	r3, r2
 80045ba:	d0f0      	beq.n	800459e <HAL_RCC_OscConfig+0x4ba>
 80045bc:	e019      	b.n	80045f2 <HAL_RCC_OscConfig+0x50e>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 80045be:	4b54      	ldr	r3, [pc, #336]	; (8004710 <HAL_RCC_OscConfig+0x62c>)
 80045c0:	681a      	ldr	r2, [r3, #0]
 80045c2:	4b53      	ldr	r3, [pc, #332]	; (8004710 <HAL_RCC_OscConfig+0x62c>)
 80045c4:	4956      	ldr	r1, [pc, #344]	; (8004720 <HAL_RCC_OscConfig+0x63c>)
 80045c6:	400a      	ands	r2, r1
 80045c8:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80045ca:	f7ff f9cb 	bl	8003964 <HAL_GetTick>
 80045ce:	0003      	movs	r3, r0
 80045d0:	613b      	str	r3, [r7, #16]

      /* Wait till HSI48 is disabled */
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) != 0U)
 80045d2:	e008      	b.n	80045e6 <HAL_RCC_OscConfig+0x502>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80045d4:	f7ff f9c6 	bl	8003964 <HAL_GetTick>
 80045d8:	0002      	movs	r2, r0
 80045da:	693b      	ldr	r3, [r7, #16]
 80045dc:	1ad3      	subs	r3, r2, r3
 80045de:	2b02      	cmp	r3, #2
 80045e0:	d901      	bls.n	80045e6 <HAL_RCC_OscConfig+0x502>
        {
          return HAL_TIMEOUT;
 80045e2:	2303      	movs	r3, #3
 80045e4:	e0d8      	b.n	8004798 <HAL_RCC_OscConfig+0x6b4>
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) != 0U)
 80045e6:	4b4a      	ldr	r3, [pc, #296]	; (8004710 <HAL_RCC_OscConfig+0x62c>)
 80045e8:	681a      	ldr	r2, [r3, #0]
 80045ea:	2380      	movs	r3, #128	; 0x80
 80045ec:	041b      	lsls	r3, r3, #16
 80045ee:	4013      	ands	r3, r2
 80045f0:	d1f0      	bne.n	80045d4 <HAL_RCC_OscConfig+0x4f0>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 80045f2:	687b      	ldr	r3, [r7, #4]
 80045f4:	6a1b      	ldr	r3, [r3, #32]
 80045f6:	2b00      	cmp	r3, #0
 80045f8:	d100      	bne.n	80045fc <HAL_RCC_OscConfig+0x518>
 80045fa:	e0cc      	b.n	8004796 <HAL_RCC_OscConfig+0x6b2>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80045fc:	4b44      	ldr	r3, [pc, #272]	; (8004710 <HAL_RCC_OscConfig+0x62c>)
 80045fe:	689b      	ldr	r3, [r3, #8]
 8004600:	2238      	movs	r2, #56	; 0x38
 8004602:	4013      	ands	r3, r2
 8004604:	2b10      	cmp	r3, #16
 8004606:	d100      	bne.n	800460a <HAL_RCC_OscConfig+0x526>
 8004608:	e07b      	b.n	8004702 <HAL_RCC_OscConfig+0x61e>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 800460a:	687b      	ldr	r3, [r7, #4]
 800460c:	6a1b      	ldr	r3, [r3, #32]
 800460e:	2b02      	cmp	r3, #2
 8004610:	d156      	bne.n	80046c0 <HAL_RCC_OscConfig+0x5dc>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
#endif /* RCC_PLLQ_SUPPORT */
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004612:	4b3f      	ldr	r3, [pc, #252]	; (8004710 <HAL_RCC_OscConfig+0x62c>)
 8004614:	681a      	ldr	r2, [r3, #0]
 8004616:	4b3e      	ldr	r3, [pc, #248]	; (8004710 <HAL_RCC_OscConfig+0x62c>)
 8004618:	4942      	ldr	r1, [pc, #264]	; (8004724 <HAL_RCC_OscConfig+0x640>)
 800461a:	400a      	ands	r2, r1
 800461c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800461e:	f7ff f9a1 	bl	8003964 <HAL_GetTick>
 8004622:	0003      	movs	r3, r0
 8004624:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004626:	e008      	b.n	800463a <HAL_RCC_OscConfig+0x556>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004628:	f7ff f99c 	bl	8003964 <HAL_GetTick>
 800462c:	0002      	movs	r2, r0
 800462e:	693b      	ldr	r3, [r7, #16]
 8004630:	1ad3      	subs	r3, r2, r3
 8004632:	2b02      	cmp	r3, #2
 8004634:	d901      	bls.n	800463a <HAL_RCC_OscConfig+0x556>
          {
            return HAL_TIMEOUT;
 8004636:	2303      	movs	r3, #3
 8004638:	e0ae      	b.n	8004798 <HAL_RCC_OscConfig+0x6b4>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800463a:	4b35      	ldr	r3, [pc, #212]	; (8004710 <HAL_RCC_OscConfig+0x62c>)
 800463c:	681a      	ldr	r2, [r3, #0]
 800463e:	2380      	movs	r3, #128	; 0x80
 8004640:	049b      	lsls	r3, r3, #18
 8004642:	4013      	ands	r3, r2
 8004644:	d1f0      	bne.n	8004628 <HAL_RCC_OscConfig+0x544>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLQ_SUPPORT)
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8004646:	4b32      	ldr	r3, [pc, #200]	; (8004710 <HAL_RCC_OscConfig+0x62c>)
 8004648:	68db      	ldr	r3, [r3, #12]
 800464a:	4a37      	ldr	r2, [pc, #220]	; (8004728 <HAL_RCC_OscConfig+0x644>)
 800464c:	4013      	ands	r3, r2
 800464e:	0019      	movs	r1, r3
 8004650:	687b      	ldr	r3, [r7, #4]
 8004652:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8004654:	687b      	ldr	r3, [r7, #4]
 8004656:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004658:	431a      	orrs	r2, r3
 800465a:	687b      	ldr	r3, [r7, #4]
 800465c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800465e:	021b      	lsls	r3, r3, #8
 8004660:	431a      	orrs	r2, r3
 8004662:	687b      	ldr	r3, [r7, #4]
 8004664:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004666:	431a      	orrs	r2, r3
 8004668:	687b      	ldr	r3, [r7, #4]
 800466a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800466c:	431a      	orrs	r2, r3
 800466e:	687b      	ldr	r3, [r7, #4]
 8004670:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004672:	431a      	orrs	r2, r3
 8004674:	4b26      	ldr	r3, [pc, #152]	; (8004710 <HAL_RCC_OscConfig+0x62c>)
 8004676:	430a      	orrs	r2, r1
 8004678:	60da      	str	r2, [r3, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLR);
#endif /* RCC_PLLQ_SUPPORT */

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800467a:	4b25      	ldr	r3, [pc, #148]	; (8004710 <HAL_RCC_OscConfig+0x62c>)
 800467c:	681a      	ldr	r2, [r3, #0]
 800467e:	4b24      	ldr	r3, [pc, #144]	; (8004710 <HAL_RCC_OscConfig+0x62c>)
 8004680:	2180      	movs	r1, #128	; 0x80
 8004682:	0449      	lsls	r1, r1, #17
 8004684:	430a      	orrs	r2, r1
 8004686:	601a      	str	r2, [r3, #0]

        /* Enable PLLR Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLRCLK);
 8004688:	4b21      	ldr	r3, [pc, #132]	; (8004710 <HAL_RCC_OscConfig+0x62c>)
 800468a:	68da      	ldr	r2, [r3, #12]
 800468c:	4b20      	ldr	r3, [pc, #128]	; (8004710 <HAL_RCC_OscConfig+0x62c>)
 800468e:	2180      	movs	r1, #128	; 0x80
 8004690:	0549      	lsls	r1, r1, #21
 8004692:	430a      	orrs	r2, r1
 8004694:	60da      	str	r2, [r3, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004696:	f7ff f965 	bl	8003964 <HAL_GetTick>
 800469a:	0003      	movs	r3, r0
 800469c:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800469e:	e008      	b.n	80046b2 <HAL_RCC_OscConfig+0x5ce>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80046a0:	f7ff f960 	bl	8003964 <HAL_GetTick>
 80046a4:	0002      	movs	r2, r0
 80046a6:	693b      	ldr	r3, [r7, #16]
 80046a8:	1ad3      	subs	r3, r2, r3
 80046aa:	2b02      	cmp	r3, #2
 80046ac:	d901      	bls.n	80046b2 <HAL_RCC_OscConfig+0x5ce>
          {
            return HAL_TIMEOUT;
 80046ae:	2303      	movs	r3, #3
 80046b0:	e072      	b.n	8004798 <HAL_RCC_OscConfig+0x6b4>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80046b2:	4b17      	ldr	r3, [pc, #92]	; (8004710 <HAL_RCC_OscConfig+0x62c>)
 80046b4:	681a      	ldr	r2, [r3, #0]
 80046b6:	2380      	movs	r3, #128	; 0x80
 80046b8:	049b      	lsls	r3, r3, #18
 80046ba:	4013      	ands	r3, r2
 80046bc:	d0f0      	beq.n	80046a0 <HAL_RCC_OscConfig+0x5bc>
 80046be:	e06a      	b.n	8004796 <HAL_RCC_OscConfig+0x6b2>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80046c0:	4b13      	ldr	r3, [pc, #76]	; (8004710 <HAL_RCC_OscConfig+0x62c>)
 80046c2:	681a      	ldr	r2, [r3, #0]
 80046c4:	4b12      	ldr	r3, [pc, #72]	; (8004710 <HAL_RCC_OscConfig+0x62c>)
 80046c6:	4917      	ldr	r1, [pc, #92]	; (8004724 <HAL_RCC_OscConfig+0x640>)
 80046c8:	400a      	ands	r2, r1
 80046ca:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80046cc:	f7ff f94a 	bl	8003964 <HAL_GetTick>
 80046d0:	0003      	movs	r3, r0
 80046d2:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80046d4:	e008      	b.n	80046e8 <HAL_RCC_OscConfig+0x604>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80046d6:	f7ff f945 	bl	8003964 <HAL_GetTick>
 80046da:	0002      	movs	r2, r0
 80046dc:	693b      	ldr	r3, [r7, #16]
 80046de:	1ad3      	subs	r3, r2, r3
 80046e0:	2b02      	cmp	r3, #2
 80046e2:	d901      	bls.n	80046e8 <HAL_RCC_OscConfig+0x604>
          {
            return HAL_TIMEOUT;
 80046e4:	2303      	movs	r3, #3
 80046e6:	e057      	b.n	8004798 <HAL_RCC_OscConfig+0x6b4>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80046e8:	4b09      	ldr	r3, [pc, #36]	; (8004710 <HAL_RCC_OscConfig+0x62c>)
 80046ea:	681a      	ldr	r2, [r3, #0]
 80046ec:	2380      	movs	r3, #128	; 0x80
 80046ee:	049b      	lsls	r3, r3, #18
 80046f0:	4013      	ands	r3, r2
 80046f2:	d1f0      	bne.n	80046d6 <HAL_RCC_OscConfig+0x5f2>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLQ_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLPEN | RCC_PLLCFGR_PLLQEN | RCC_PLLCFGR_PLLREN);
 80046f4:	4b06      	ldr	r3, [pc, #24]	; (8004710 <HAL_RCC_OscConfig+0x62c>)
 80046f6:	68da      	ldr	r2, [r3, #12]
 80046f8:	4b05      	ldr	r3, [pc, #20]	; (8004710 <HAL_RCC_OscConfig+0x62c>)
 80046fa:	490c      	ldr	r1, [pc, #48]	; (800472c <HAL_RCC_OscConfig+0x648>)
 80046fc:	400a      	ands	r2, r1
 80046fe:	60da      	str	r2, [r3, #12]
 8004700:	e049      	b.n	8004796 <HAL_RCC_OscConfig+0x6b2>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8004702:	687b      	ldr	r3, [r7, #4]
 8004704:	6a1b      	ldr	r3, [r3, #32]
 8004706:	2b01      	cmp	r3, #1
 8004708:	d112      	bne.n	8004730 <HAL_RCC_OscConfig+0x64c>
      {
        return HAL_ERROR;
 800470a:	2301      	movs	r3, #1
 800470c:	e044      	b.n	8004798 <HAL_RCC_OscConfig+0x6b4>
 800470e:	46c0      	nop			; (mov r8, r8)
 8004710:	40021000 	.word	0x40021000
 8004714:	40007000 	.word	0x40007000
 8004718:	00001388 	.word	0x00001388
 800471c:	efffffff 	.word	0xefffffff
 8004720:	ffbfffff 	.word	0xffbfffff
 8004724:	feffffff 	.word	0xfeffffff
 8004728:	11c1808c 	.word	0x11c1808c
 800472c:	eefefffc 	.word	0xeefefffc
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        temp_pllckcfg = RCC->PLLCFGR;
 8004730:	4b1b      	ldr	r3, [pc, #108]	; (80047a0 <HAL_RCC_OscConfig+0x6bc>)
 8004732:	68db      	ldr	r3, [r3, #12]
 8004734:	617b      	str	r3, [r7, #20]
        if ((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004736:	697b      	ldr	r3, [r7, #20]
 8004738:	2203      	movs	r2, #3
 800473a:	401a      	ands	r2, r3
 800473c:	687b      	ldr	r3, [r7, #4]
 800473e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004740:	429a      	cmp	r2, r3
 8004742:	d126      	bne.n	8004792 <HAL_RCC_OscConfig+0x6ae>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8004744:	697b      	ldr	r3, [r7, #20]
 8004746:	2270      	movs	r2, #112	; 0x70
 8004748:	401a      	ands	r2, r3
 800474a:	687b      	ldr	r3, [r7, #4]
 800474c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
        if ((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800474e:	429a      	cmp	r2, r3
 8004750:	d11f      	bne.n	8004792 <HAL_RCC_OscConfig+0x6ae>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8004752:	697a      	ldr	r2, [r7, #20]
 8004754:	23fe      	movs	r3, #254	; 0xfe
 8004756:	01db      	lsls	r3, r3, #7
 8004758:	401a      	ands	r2, r3
 800475a:	687b      	ldr	r3, [r7, #4]
 800475c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800475e:	021b      	lsls	r3, r3, #8
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8004760:	429a      	cmp	r2, r3
 8004762:	d116      	bne.n	8004792 <HAL_RCC_OscConfig+0x6ae>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8004764:	697a      	ldr	r2, [r7, #20]
 8004766:	23f8      	movs	r3, #248	; 0xf8
 8004768:	039b      	lsls	r3, r3, #14
 800476a:	401a      	ands	r2, r3
 800476c:	687b      	ldr	r3, [r7, #4]
 800476e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8004770:	429a      	cmp	r2, r3
 8004772:	d10e      	bne.n	8004792 <HAL_RCC_OscConfig+0x6ae>
#if defined (RCC_PLLQ_SUPPORT)
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
 8004774:	697a      	ldr	r2, [r7, #20]
 8004776:	23e0      	movs	r3, #224	; 0xe0
 8004778:	051b      	lsls	r3, r3, #20
 800477a:	401a      	ands	r2, r3
 800477c:	687b      	ldr	r3, [r7, #4]
 800477e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8004780:	429a      	cmp	r2, r3
 8004782:	d106      	bne.n	8004792 <HAL_RCC_OscConfig+0x6ae>
#endif /* RCC_PLLQ_SUPPORT */
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != RCC_OscInitStruct->PLL.PLLR))
 8004784:	697b      	ldr	r3, [r7, #20]
 8004786:	0f5b      	lsrs	r3, r3, #29
 8004788:	075a      	lsls	r2, r3, #29
 800478a:	687b      	ldr	r3, [r7, #4]
 800478c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
 800478e:	429a      	cmp	r2, r3
 8004790:	d001      	beq.n	8004796 <HAL_RCC_OscConfig+0x6b2>
        {
          return HAL_ERROR;
 8004792:	2301      	movs	r3, #1
 8004794:	e000      	b.n	8004798 <HAL_RCC_OscConfig+0x6b4>
        }
      }
    }
  }
  return HAL_OK;
 8004796:	2300      	movs	r3, #0
}
 8004798:	0018      	movs	r0, r3
 800479a:	46bd      	mov	sp, r7
 800479c:	b008      	add	sp, #32
 800479e:	bd80      	pop	{r7, pc}
 80047a0:	40021000 	.word	0x40021000

080047a4 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80047a4:	b580      	push	{r7, lr}
 80047a6:	b084      	sub	sp, #16
 80047a8:	af00      	add	r7, sp, #0
 80047aa:	6078      	str	r0, [r7, #4]
 80047ac:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80047ae:	687b      	ldr	r3, [r7, #4]
 80047b0:	2b00      	cmp	r3, #0
 80047b2:	d101      	bne.n	80047b8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80047b4:	2301      	movs	r3, #1
 80047b6:	e0e9      	b.n	800498c <HAL_RCC_ClockConfig+0x1e8>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the FLASH clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80047b8:	4b76      	ldr	r3, [pc, #472]	; (8004994 <HAL_RCC_ClockConfig+0x1f0>)
 80047ba:	681b      	ldr	r3, [r3, #0]
 80047bc:	2207      	movs	r2, #7
 80047be:	4013      	ands	r3, r2
 80047c0:	683a      	ldr	r2, [r7, #0]
 80047c2:	429a      	cmp	r2, r3
 80047c4:	d91e      	bls.n	8004804 <HAL_RCC_ClockConfig+0x60>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80047c6:	4b73      	ldr	r3, [pc, #460]	; (8004994 <HAL_RCC_ClockConfig+0x1f0>)
 80047c8:	681b      	ldr	r3, [r3, #0]
 80047ca:	2207      	movs	r2, #7
 80047cc:	4393      	bics	r3, r2
 80047ce:	0019      	movs	r1, r3
 80047d0:	4b70      	ldr	r3, [pc, #448]	; (8004994 <HAL_RCC_ClockConfig+0x1f0>)
 80047d2:	683a      	ldr	r2, [r7, #0]
 80047d4:	430a      	orrs	r2, r1
 80047d6:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 80047d8:	f7ff f8c4 	bl	8003964 <HAL_GetTick>
 80047dc:	0003      	movs	r3, r0
 80047de:	60fb      	str	r3, [r7, #12]

    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 80047e0:	e009      	b.n	80047f6 <HAL_RCC_ClockConfig+0x52>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80047e2:	f7ff f8bf 	bl	8003964 <HAL_GetTick>
 80047e6:	0002      	movs	r2, r0
 80047e8:	68fb      	ldr	r3, [r7, #12]
 80047ea:	1ad3      	subs	r3, r2, r3
 80047ec:	4a6a      	ldr	r2, [pc, #424]	; (8004998 <HAL_RCC_ClockConfig+0x1f4>)
 80047ee:	4293      	cmp	r3, r2
 80047f0:	d901      	bls.n	80047f6 <HAL_RCC_ClockConfig+0x52>
      {
        return HAL_TIMEOUT;
 80047f2:	2303      	movs	r3, #3
 80047f4:	e0ca      	b.n	800498c <HAL_RCC_ClockConfig+0x1e8>
    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 80047f6:	4b67      	ldr	r3, [pc, #412]	; (8004994 <HAL_RCC_ClockConfig+0x1f0>)
 80047f8:	681b      	ldr	r3, [r3, #0]
 80047fa:	2207      	movs	r2, #7
 80047fc:	4013      	ands	r3, r2
 80047fe:	683a      	ldr	r2, [r7, #0]
 8004800:	429a      	cmp	r2, r3
 8004802:	d1ee      	bne.n	80047e2 <HAL_RCC_ClockConfig+0x3e>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004804:	687b      	ldr	r3, [r7, #4]
 8004806:	681b      	ldr	r3, [r3, #0]
 8004808:	2202      	movs	r2, #2
 800480a:	4013      	ands	r3, r2
 800480c:	d015      	beq.n	800483a <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800480e:	687b      	ldr	r3, [r7, #4]
 8004810:	681b      	ldr	r3, [r3, #0]
 8004812:	2204      	movs	r2, #4
 8004814:	4013      	ands	r3, r2
 8004816:	d006      	beq.n	8004826 <HAL_RCC_ClockConfig+0x82>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_HCLK_DIV16);
 8004818:	4b60      	ldr	r3, [pc, #384]	; (800499c <HAL_RCC_ClockConfig+0x1f8>)
 800481a:	689a      	ldr	r2, [r3, #8]
 800481c:	4b5f      	ldr	r3, [pc, #380]	; (800499c <HAL_RCC_ClockConfig+0x1f8>)
 800481e:	21e0      	movs	r1, #224	; 0xe0
 8004820:	01c9      	lsls	r1, r1, #7
 8004822:	430a      	orrs	r2, r1
 8004824:	609a      	str	r2, [r3, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004826:	4b5d      	ldr	r3, [pc, #372]	; (800499c <HAL_RCC_ClockConfig+0x1f8>)
 8004828:	689b      	ldr	r3, [r3, #8]
 800482a:	4a5d      	ldr	r2, [pc, #372]	; (80049a0 <HAL_RCC_ClockConfig+0x1fc>)
 800482c:	4013      	ands	r3, r2
 800482e:	0019      	movs	r1, r3
 8004830:	687b      	ldr	r3, [r7, #4]
 8004832:	689a      	ldr	r2, [r3, #8]
 8004834:	4b59      	ldr	r3, [pc, #356]	; (800499c <HAL_RCC_ClockConfig+0x1f8>)
 8004836:	430a      	orrs	r2, r1
 8004838:	609a      	str	r2, [r3, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800483a:	687b      	ldr	r3, [r7, #4]
 800483c:	681b      	ldr	r3, [r3, #0]
 800483e:	2201      	movs	r2, #1
 8004840:	4013      	ands	r3, r2
 8004842:	d057      	beq.n	80048f4 <HAL_RCC_ClockConfig+0x150>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004844:	687b      	ldr	r3, [r7, #4]
 8004846:	685b      	ldr	r3, [r3, #4]
 8004848:	2b01      	cmp	r3, #1
 800484a:	d107      	bne.n	800485c <HAL_RCC_ClockConfig+0xb8>
    {
      /* Check the HSE ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800484c:	4b53      	ldr	r3, [pc, #332]	; (800499c <HAL_RCC_ClockConfig+0x1f8>)
 800484e:	681a      	ldr	r2, [r3, #0]
 8004850:	2380      	movs	r3, #128	; 0x80
 8004852:	029b      	lsls	r3, r3, #10
 8004854:	4013      	ands	r3, r2
 8004856:	d12b      	bne.n	80048b0 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8004858:	2301      	movs	r3, #1
 800485a:	e097      	b.n	800498c <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800485c:	687b      	ldr	r3, [r7, #4]
 800485e:	685b      	ldr	r3, [r3, #4]
 8004860:	2b02      	cmp	r3, #2
 8004862:	d107      	bne.n	8004874 <HAL_RCC_ClockConfig+0xd0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004864:	4b4d      	ldr	r3, [pc, #308]	; (800499c <HAL_RCC_ClockConfig+0x1f8>)
 8004866:	681a      	ldr	r2, [r3, #0]
 8004868:	2380      	movs	r3, #128	; 0x80
 800486a:	049b      	lsls	r3, r3, #18
 800486c:	4013      	ands	r3, r2
 800486e:	d11f      	bne.n	80048b0 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8004870:	2301      	movs	r3, #1
 8004872:	e08b      	b.n	800498c <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* HSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 8004874:	687b      	ldr	r3, [r7, #4]
 8004876:	685b      	ldr	r3, [r3, #4]
 8004878:	2b00      	cmp	r3, #0
 800487a:	d107      	bne.n	800488c <HAL_RCC_ClockConfig+0xe8>
    {
      /* Check the HSI ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800487c:	4b47      	ldr	r3, [pc, #284]	; (800499c <HAL_RCC_ClockConfig+0x1f8>)
 800487e:	681a      	ldr	r2, [r3, #0]
 8004880:	2380      	movs	r3, #128	; 0x80
 8004882:	00db      	lsls	r3, r3, #3
 8004884:	4013      	ands	r3, r2
 8004886:	d113      	bne.n	80048b0 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8004888:	2301      	movs	r3, #1
 800488a:	e07f      	b.n	800498c <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* LSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_LSI)
 800488c:	687b      	ldr	r3, [r7, #4]
 800488e:	685b      	ldr	r3, [r3, #4]
 8004890:	2b03      	cmp	r3, #3
 8004892:	d106      	bne.n	80048a2 <HAL_RCC_ClockConfig+0xfe>
    {
      /* Check the LSI ready flag */
      if (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8004894:	4b41      	ldr	r3, [pc, #260]	; (800499c <HAL_RCC_ClockConfig+0x1f8>)
 8004896:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004898:	2202      	movs	r2, #2
 800489a:	4013      	ands	r3, r2
 800489c:	d108      	bne.n	80048b0 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 800489e:	2301      	movs	r3, #1
 80048a0:	e074      	b.n	800498c <HAL_RCC_ClockConfig+0x1e8>
    }
    /* LSE is selected as System Clock Source */
    else
    {
      /* Check the LSE ready flag */
      if (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80048a2:	4b3e      	ldr	r3, [pc, #248]	; (800499c <HAL_RCC_ClockConfig+0x1f8>)
 80048a4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80048a6:	2202      	movs	r2, #2
 80048a8:	4013      	ands	r3, r2
 80048aa:	d101      	bne.n	80048b0 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 80048ac:	2301      	movs	r3, #1
 80048ae:	e06d      	b.n	800498c <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 80048b0:	4b3a      	ldr	r3, [pc, #232]	; (800499c <HAL_RCC_ClockConfig+0x1f8>)
 80048b2:	689b      	ldr	r3, [r3, #8]
 80048b4:	2207      	movs	r2, #7
 80048b6:	4393      	bics	r3, r2
 80048b8:	0019      	movs	r1, r3
 80048ba:	687b      	ldr	r3, [r7, #4]
 80048bc:	685a      	ldr	r2, [r3, #4]
 80048be:	4b37      	ldr	r3, [pc, #220]	; (800499c <HAL_RCC_ClockConfig+0x1f8>)
 80048c0:	430a      	orrs	r2, r1
 80048c2:	609a      	str	r2, [r3, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80048c4:	f7ff f84e 	bl	8003964 <HAL_GetTick>
 80048c8:	0003      	movs	r3, r0
 80048ca:	60fb      	str	r3, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80048cc:	e009      	b.n	80048e2 <HAL_RCC_ClockConfig+0x13e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80048ce:	f7ff f849 	bl	8003964 <HAL_GetTick>
 80048d2:	0002      	movs	r2, r0
 80048d4:	68fb      	ldr	r3, [r7, #12]
 80048d6:	1ad3      	subs	r3, r2, r3
 80048d8:	4a2f      	ldr	r2, [pc, #188]	; (8004998 <HAL_RCC_ClockConfig+0x1f4>)
 80048da:	4293      	cmp	r3, r2
 80048dc:	d901      	bls.n	80048e2 <HAL_RCC_ClockConfig+0x13e>
      {
        return HAL_TIMEOUT;
 80048de:	2303      	movs	r3, #3
 80048e0:	e054      	b.n	800498c <HAL_RCC_ClockConfig+0x1e8>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80048e2:	4b2e      	ldr	r3, [pc, #184]	; (800499c <HAL_RCC_ClockConfig+0x1f8>)
 80048e4:	689b      	ldr	r3, [r3, #8]
 80048e6:	2238      	movs	r2, #56	; 0x38
 80048e8:	401a      	ands	r2, r3
 80048ea:	687b      	ldr	r3, [r7, #4]
 80048ec:	685b      	ldr	r3, [r3, #4]
 80048ee:	00db      	lsls	r3, r3, #3
 80048f0:	429a      	cmp	r2, r3
 80048f2:	d1ec      	bne.n	80048ce <HAL_RCC_ClockConfig+0x12a>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80048f4:	4b27      	ldr	r3, [pc, #156]	; (8004994 <HAL_RCC_ClockConfig+0x1f0>)
 80048f6:	681b      	ldr	r3, [r3, #0]
 80048f8:	2207      	movs	r2, #7
 80048fa:	4013      	ands	r3, r2
 80048fc:	683a      	ldr	r2, [r7, #0]
 80048fe:	429a      	cmp	r2, r3
 8004900:	d21e      	bcs.n	8004940 <HAL_RCC_ClockConfig+0x19c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004902:	4b24      	ldr	r3, [pc, #144]	; (8004994 <HAL_RCC_ClockConfig+0x1f0>)
 8004904:	681b      	ldr	r3, [r3, #0]
 8004906:	2207      	movs	r2, #7
 8004908:	4393      	bics	r3, r2
 800490a:	0019      	movs	r1, r3
 800490c:	4b21      	ldr	r3, [pc, #132]	; (8004994 <HAL_RCC_ClockConfig+0x1f0>)
 800490e:	683a      	ldr	r2, [r7, #0]
 8004910:	430a      	orrs	r2, r1
 8004912:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8004914:	f7ff f826 	bl	8003964 <HAL_GetTick>
 8004918:	0003      	movs	r3, r0
 800491a:	60fb      	str	r3, [r7, #12]

    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 800491c:	e009      	b.n	8004932 <HAL_RCC_ClockConfig+0x18e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800491e:	f7ff f821 	bl	8003964 <HAL_GetTick>
 8004922:	0002      	movs	r2, r0
 8004924:	68fb      	ldr	r3, [r7, #12]
 8004926:	1ad3      	subs	r3, r2, r3
 8004928:	4a1b      	ldr	r2, [pc, #108]	; (8004998 <HAL_RCC_ClockConfig+0x1f4>)
 800492a:	4293      	cmp	r3, r2
 800492c:	d901      	bls.n	8004932 <HAL_RCC_ClockConfig+0x18e>
      {
        return HAL_TIMEOUT;
 800492e:	2303      	movs	r3, #3
 8004930:	e02c      	b.n	800498c <HAL_RCC_ClockConfig+0x1e8>
    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8004932:	4b18      	ldr	r3, [pc, #96]	; (8004994 <HAL_RCC_ClockConfig+0x1f0>)
 8004934:	681b      	ldr	r3, [r3, #0]
 8004936:	2207      	movs	r2, #7
 8004938:	4013      	ands	r3, r2
 800493a:	683a      	ldr	r2, [r7, #0]
 800493c:	429a      	cmp	r2, r3
 800493e:	d1ee      	bne.n	800491e <HAL_RCC_ClockConfig+0x17a>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004940:	687b      	ldr	r3, [r7, #4]
 8004942:	681b      	ldr	r3, [r3, #0]
 8004944:	2204      	movs	r2, #4
 8004946:	4013      	ands	r3, r2
 8004948:	d009      	beq.n	800495e <HAL_RCC_ClockConfig+0x1ba>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 800494a:	4b14      	ldr	r3, [pc, #80]	; (800499c <HAL_RCC_ClockConfig+0x1f8>)
 800494c:	689b      	ldr	r3, [r3, #8]
 800494e:	4a15      	ldr	r2, [pc, #84]	; (80049a4 <HAL_RCC_ClockConfig+0x200>)
 8004950:	4013      	ands	r3, r2
 8004952:	0019      	movs	r1, r3
 8004954:	687b      	ldr	r3, [r7, #4]
 8004956:	68da      	ldr	r2, [r3, #12]
 8004958:	4b10      	ldr	r3, [pc, #64]	; (800499c <HAL_RCC_ClockConfig+0x1f8>)
 800495a:	430a      	orrs	r2, r1
 800495c:	609a      	str	r2, [r3, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = (HAL_RCC_GetSysClockFreq() >> ((AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos]) & 0x1FU));
 800495e:	f000 f829 	bl	80049b4 <HAL_RCC_GetSysClockFreq>
 8004962:	0001      	movs	r1, r0
 8004964:	4b0d      	ldr	r3, [pc, #52]	; (800499c <HAL_RCC_ClockConfig+0x1f8>)
 8004966:	689b      	ldr	r3, [r3, #8]
 8004968:	0a1b      	lsrs	r3, r3, #8
 800496a:	220f      	movs	r2, #15
 800496c:	401a      	ands	r2, r3
 800496e:	4b0e      	ldr	r3, [pc, #56]	; (80049a8 <HAL_RCC_ClockConfig+0x204>)
 8004970:	0092      	lsls	r2, r2, #2
 8004972:	58d3      	ldr	r3, [r2, r3]
 8004974:	221f      	movs	r2, #31
 8004976:	4013      	ands	r3, r2
 8004978:	000a      	movs	r2, r1
 800497a:	40da      	lsrs	r2, r3
 800497c:	4b0b      	ldr	r3, [pc, #44]	; (80049ac <HAL_RCC_ClockConfig+0x208>)
 800497e:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 8004980:	4b0b      	ldr	r3, [pc, #44]	; (80049b0 <HAL_RCC_ClockConfig+0x20c>)
 8004982:	681b      	ldr	r3, [r3, #0]
 8004984:	0018      	movs	r0, r3
 8004986:	f7fe ff91 	bl	80038ac <HAL_InitTick>
 800498a:	0003      	movs	r3, r0
}
 800498c:	0018      	movs	r0, r3
 800498e:	46bd      	mov	sp, r7
 8004990:	b004      	add	sp, #16
 8004992:	bd80      	pop	{r7, pc}
 8004994:	40022000 	.word	0x40022000
 8004998:	00001388 	.word	0x00001388
 800499c:	40021000 	.word	0x40021000
 80049a0:	fffff0ff 	.word	0xfffff0ff
 80049a4:	ffff8fff 	.word	0xffff8fff
 80049a8:	0800f830 	.word	0x0800f830
 80049ac:	20000010 	.word	0x20000010
 80049b0:	20000014 	.word	0x20000014

080049b4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80049b4:	b580      	push	{r7, lr}
 80049b6:	b086      	sub	sp, #24
 80049b8:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm, hsidiv;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 80049ba:	4b3c      	ldr	r3, [pc, #240]	; (8004aac <HAL_RCC_GetSysClockFreq+0xf8>)
 80049bc:	689b      	ldr	r3, [r3, #8]
 80049be:	2238      	movs	r2, #56	; 0x38
 80049c0:	4013      	ands	r3, r2
 80049c2:	d10f      	bne.n	80049e4 <HAL_RCC_GetSysClockFreq+0x30>
  {
    /* HSISYS can be derived for HSI16 */
    hsidiv = (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos));
 80049c4:	4b39      	ldr	r3, [pc, #228]	; (8004aac <HAL_RCC_GetSysClockFreq+0xf8>)
 80049c6:	681b      	ldr	r3, [r3, #0]
 80049c8:	0adb      	lsrs	r3, r3, #11
 80049ca:	2207      	movs	r2, #7
 80049cc:	4013      	ands	r3, r2
 80049ce:	2201      	movs	r2, #1
 80049d0:	409a      	lsls	r2, r3
 80049d2:	0013      	movs	r3, r2
 80049d4:	603b      	str	r3, [r7, #0]

    /* HSI used as system clock source */
    sysclockfreq = (HSI_VALUE / hsidiv);
 80049d6:	6839      	ldr	r1, [r7, #0]
 80049d8:	4835      	ldr	r0, [pc, #212]	; (8004ab0 <HAL_RCC_GetSysClockFreq+0xfc>)
 80049da:	f7fb fbaf 	bl	800013c <__udivsi3>
 80049de:	0003      	movs	r3, r0
 80049e0:	613b      	str	r3, [r7, #16]
 80049e2:	e05d      	b.n	8004aa0 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 80049e4:	4b31      	ldr	r3, [pc, #196]	; (8004aac <HAL_RCC_GetSysClockFreq+0xf8>)
 80049e6:	689b      	ldr	r3, [r3, #8]
 80049e8:	2238      	movs	r2, #56	; 0x38
 80049ea:	4013      	ands	r3, r2
 80049ec:	2b08      	cmp	r3, #8
 80049ee:	d102      	bne.n	80049f6 <HAL_RCC_GetSysClockFreq+0x42>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 80049f0:	4b30      	ldr	r3, [pc, #192]	; (8004ab4 <HAL_RCC_GetSysClockFreq+0x100>)
 80049f2:	613b      	str	r3, [r7, #16]
 80049f4:	e054      	b.n	8004aa0 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80049f6:	4b2d      	ldr	r3, [pc, #180]	; (8004aac <HAL_RCC_GetSysClockFreq+0xf8>)
 80049f8:	689b      	ldr	r3, [r3, #8]
 80049fa:	2238      	movs	r2, #56	; 0x38
 80049fc:	4013      	ands	r3, r2
 80049fe:	2b10      	cmp	r3, #16
 8004a00:	d138      	bne.n	8004a74 <HAL_RCC_GetSysClockFreq+0xc0>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC);
 8004a02:	4b2a      	ldr	r3, [pc, #168]	; (8004aac <HAL_RCC_GetSysClockFreq+0xf8>)
 8004a04:	68db      	ldr	r3, [r3, #12]
 8004a06:	2203      	movs	r2, #3
 8004a08:	4013      	ands	r3, r2
 8004a0a:	60fb      	str	r3, [r7, #12]
    pllm = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8004a0c:	4b27      	ldr	r3, [pc, #156]	; (8004aac <HAL_RCC_GetSysClockFreq+0xf8>)
 8004a0e:	68db      	ldr	r3, [r3, #12]
 8004a10:	091b      	lsrs	r3, r3, #4
 8004a12:	2207      	movs	r2, #7
 8004a14:	4013      	ands	r3, r2
 8004a16:	3301      	adds	r3, #1
 8004a18:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8004a1a:	68fb      	ldr	r3, [r7, #12]
 8004a1c:	2b03      	cmp	r3, #3
 8004a1e:	d10d      	bne.n	8004a3c <HAL_RCC_GetSysClockFreq+0x88>
    {
      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = (HSE_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8004a20:	68b9      	ldr	r1, [r7, #8]
 8004a22:	4824      	ldr	r0, [pc, #144]	; (8004ab4 <HAL_RCC_GetSysClockFreq+0x100>)
 8004a24:	f7fb fb8a 	bl	800013c <__udivsi3>
 8004a28:	0003      	movs	r3, r0
 8004a2a:	0019      	movs	r1, r3
 8004a2c:	4b1f      	ldr	r3, [pc, #124]	; (8004aac <HAL_RCC_GetSysClockFreq+0xf8>)
 8004a2e:	68db      	ldr	r3, [r3, #12]
 8004a30:	0a1b      	lsrs	r3, r3, #8
 8004a32:	227f      	movs	r2, #127	; 0x7f
 8004a34:	4013      	ands	r3, r2
 8004a36:	434b      	muls	r3, r1
 8004a38:	617b      	str	r3, [r7, #20]
        break;
 8004a3a:	e00d      	b.n	8004a58 <HAL_RCC_GetSysClockFreq+0xa4>

      case RCC_PLLSOURCE_HSI:  /* HSI16 used as PLL clock source */
      default:                 /* HSI16 used as PLL clock source */
        pllvco = (HSI_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos) ;
 8004a3c:	68b9      	ldr	r1, [r7, #8]
 8004a3e:	481c      	ldr	r0, [pc, #112]	; (8004ab0 <HAL_RCC_GetSysClockFreq+0xfc>)
 8004a40:	f7fb fb7c 	bl	800013c <__udivsi3>
 8004a44:	0003      	movs	r3, r0
 8004a46:	0019      	movs	r1, r3
 8004a48:	4b18      	ldr	r3, [pc, #96]	; (8004aac <HAL_RCC_GetSysClockFreq+0xf8>)
 8004a4a:	68db      	ldr	r3, [r3, #12]
 8004a4c:	0a1b      	lsrs	r3, r3, #8
 8004a4e:	227f      	movs	r2, #127	; 0x7f
 8004a50:	4013      	ands	r3, r2
 8004a52:	434b      	muls	r3, r1
 8004a54:	617b      	str	r3, [r7, #20]
        break;
 8004a56:	46c0      	nop			; (mov r8, r8)
    }
    pllr = (((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U);
 8004a58:	4b14      	ldr	r3, [pc, #80]	; (8004aac <HAL_RCC_GetSysClockFreq+0xf8>)
 8004a5a:	68db      	ldr	r3, [r3, #12]
 8004a5c:	0f5b      	lsrs	r3, r3, #29
 8004a5e:	2207      	movs	r2, #7
 8004a60:	4013      	ands	r3, r2
 8004a62:	3301      	adds	r3, #1
 8004a64:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco / pllr;
 8004a66:	6879      	ldr	r1, [r7, #4]
 8004a68:	6978      	ldr	r0, [r7, #20]
 8004a6a:	f7fb fb67 	bl	800013c <__udivsi3>
 8004a6e:	0003      	movs	r3, r0
 8004a70:	613b      	str	r3, [r7, #16]
 8004a72:	e015      	b.n	8004aa0 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSE)
 8004a74:	4b0d      	ldr	r3, [pc, #52]	; (8004aac <HAL_RCC_GetSysClockFreq+0xf8>)
 8004a76:	689b      	ldr	r3, [r3, #8]
 8004a78:	2238      	movs	r2, #56	; 0x38
 8004a7a:	4013      	ands	r3, r2
 8004a7c:	2b20      	cmp	r3, #32
 8004a7e:	d103      	bne.n	8004a88 <HAL_RCC_GetSysClockFreq+0xd4>
  {
    /* LSE used as system clock source */
    sysclockfreq = LSE_VALUE;
 8004a80:	2380      	movs	r3, #128	; 0x80
 8004a82:	021b      	lsls	r3, r3, #8
 8004a84:	613b      	str	r3, [r7, #16]
 8004a86:	e00b      	b.n	8004aa0 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSI)
 8004a88:	4b08      	ldr	r3, [pc, #32]	; (8004aac <HAL_RCC_GetSysClockFreq+0xf8>)
 8004a8a:	689b      	ldr	r3, [r3, #8]
 8004a8c:	2238      	movs	r2, #56	; 0x38
 8004a8e:	4013      	ands	r3, r2
 8004a90:	2b18      	cmp	r3, #24
 8004a92:	d103      	bne.n	8004a9c <HAL_RCC_GetSysClockFreq+0xe8>
  {
    /* LSI used as system clock source */
    sysclockfreq = LSI_VALUE;
 8004a94:	23fa      	movs	r3, #250	; 0xfa
 8004a96:	01db      	lsls	r3, r3, #7
 8004a98:	613b      	str	r3, [r7, #16]
 8004a9a:	e001      	b.n	8004aa0 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else
  {
    sysclockfreq = 0U;
 8004a9c:	2300      	movs	r3, #0
 8004a9e:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 8004aa0:	693b      	ldr	r3, [r7, #16]
}
 8004aa2:	0018      	movs	r0, r3
 8004aa4:	46bd      	mov	sp, r7
 8004aa6:	b006      	add	sp, #24
 8004aa8:	bd80      	pop	{r7, pc}
 8004aaa:	46c0      	nop			; (mov r8, r8)
 8004aac:	40021000 	.word	0x40021000
 8004ab0:	00f42400 	.word	0x00f42400
 8004ab4:	007a1200 	.word	0x007a1200

08004ab8 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004ab8:	b580      	push	{r7, lr}
 8004aba:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004abc:	4b02      	ldr	r3, [pc, #8]	; (8004ac8 <HAL_RCC_GetHCLKFreq+0x10>)
 8004abe:	681b      	ldr	r3, [r3, #0]
}
 8004ac0:	0018      	movs	r0, r3
 8004ac2:	46bd      	mov	sp, r7
 8004ac4:	bd80      	pop	{r7, pc}
 8004ac6:	46c0      	nop			; (mov r8, r8)
 8004ac8:	20000010 	.word	0x20000010

08004acc <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004acc:	b5b0      	push	{r4, r5, r7, lr}
 8004ace:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_PCLK1_FREQ(HAL_RCC_GetHCLKFreq(), LL_RCC_GetAPB1Prescaler())));
 8004ad0:	f7ff fff2 	bl	8004ab8 <HAL_RCC_GetHCLKFreq>
 8004ad4:	0004      	movs	r4, r0
 8004ad6:	f7ff faf9 	bl	80040cc <LL_RCC_GetAPB1Prescaler>
 8004ada:	0003      	movs	r3, r0
 8004adc:	0b1a      	lsrs	r2, r3, #12
 8004ade:	4b05      	ldr	r3, [pc, #20]	; (8004af4 <HAL_RCC_GetPCLK1Freq+0x28>)
 8004ae0:	0092      	lsls	r2, r2, #2
 8004ae2:	58d3      	ldr	r3, [r2, r3]
 8004ae4:	221f      	movs	r2, #31
 8004ae6:	4013      	ands	r3, r2
 8004ae8:	40dc      	lsrs	r4, r3
 8004aea:	0023      	movs	r3, r4
}
 8004aec:	0018      	movs	r0, r3
 8004aee:	46bd      	mov	sp, r7
 8004af0:	bdb0      	pop	{r4, r5, r7, pc}
 8004af2:	46c0      	nop			; (mov r8, r8)
 8004af4:	0800f870 	.word	0x0800f870

08004af8 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8004af8:	b580      	push	{r7, lr}
 8004afa:	b086      	sub	sp, #24
 8004afc:	af00      	add	r7, sp, #0
 8004afe:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret    = HAL_OK;   /* Intermediate status */
 8004b00:	2313      	movs	r3, #19
 8004b02:	18fb      	adds	r3, r7, r3
 8004b04:	2200      	movs	r2, #0
 8004b06:	701a      	strb	r2, [r3, #0]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8004b08:	2312      	movs	r3, #18
 8004b0a:	18fb      	adds	r3, r7, r3
 8004b0c:	2200      	movs	r2, #0
 8004b0e:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8004b10:	687b      	ldr	r3, [r7, #4]
 8004b12:	681a      	ldr	r2, [r3, #0]
 8004b14:	2380      	movs	r3, #128	; 0x80
 8004b16:	029b      	lsls	r3, r3, #10
 8004b18:	4013      	ands	r3, r2
 8004b1a:	d100      	bne.n	8004b1e <HAL_RCCEx_PeriphCLKConfig+0x26>
 8004b1c:	e0ad      	b.n	8004c7a <HAL_RCCEx_PeriphCLKConfig+0x182>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004b1e:	2011      	movs	r0, #17
 8004b20:	183b      	adds	r3, r7, r0
 8004b22:	2200      	movs	r2, #0
 8004b24:	701a      	strb	r2, [r3, #0]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004b26:	4b47      	ldr	r3, [pc, #284]	; (8004c44 <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 8004b28:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8004b2a:	2380      	movs	r3, #128	; 0x80
 8004b2c:	055b      	lsls	r3, r3, #21
 8004b2e:	4013      	ands	r3, r2
 8004b30:	d110      	bne.n	8004b54 <HAL_RCCEx_PeriphCLKConfig+0x5c>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004b32:	4b44      	ldr	r3, [pc, #272]	; (8004c44 <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 8004b34:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8004b36:	4b43      	ldr	r3, [pc, #268]	; (8004c44 <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 8004b38:	2180      	movs	r1, #128	; 0x80
 8004b3a:	0549      	lsls	r1, r1, #21
 8004b3c:	430a      	orrs	r2, r1
 8004b3e:	63da      	str	r2, [r3, #60]	; 0x3c
 8004b40:	4b40      	ldr	r3, [pc, #256]	; (8004c44 <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 8004b42:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8004b44:	2380      	movs	r3, #128	; 0x80
 8004b46:	055b      	lsls	r3, r3, #21
 8004b48:	4013      	ands	r3, r2
 8004b4a:	60bb      	str	r3, [r7, #8]
 8004b4c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004b4e:	183b      	adds	r3, r7, r0
 8004b50:	2201      	movs	r2, #1
 8004b52:	701a      	strb	r2, [r3, #0]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8004b54:	4b3c      	ldr	r3, [pc, #240]	; (8004c48 <HAL_RCCEx_PeriphCLKConfig+0x150>)
 8004b56:	681a      	ldr	r2, [r3, #0]
 8004b58:	4b3b      	ldr	r3, [pc, #236]	; (8004c48 <HAL_RCCEx_PeriphCLKConfig+0x150>)
 8004b5a:	2180      	movs	r1, #128	; 0x80
 8004b5c:	0049      	lsls	r1, r1, #1
 8004b5e:	430a      	orrs	r2, r1
 8004b60:	601a      	str	r2, [r3, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8004b62:	f7fe feff 	bl	8003964 <HAL_GetTick>
 8004b66:	0003      	movs	r3, r0
 8004b68:	60fb      	str	r3, [r7, #12]

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8004b6a:	e00b      	b.n	8004b84 <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004b6c:	f7fe fefa 	bl	8003964 <HAL_GetTick>
 8004b70:	0002      	movs	r2, r0
 8004b72:	68fb      	ldr	r3, [r7, #12]
 8004b74:	1ad3      	subs	r3, r2, r3
 8004b76:	2b02      	cmp	r3, #2
 8004b78:	d904      	bls.n	8004b84 <HAL_RCCEx_PeriphCLKConfig+0x8c>
      {
        ret = HAL_TIMEOUT;
 8004b7a:	2313      	movs	r3, #19
 8004b7c:	18fb      	adds	r3, r7, r3
 8004b7e:	2203      	movs	r2, #3
 8004b80:	701a      	strb	r2, [r3, #0]
        break;
 8004b82:	e005      	b.n	8004b90 <HAL_RCCEx_PeriphCLKConfig+0x98>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8004b84:	4b30      	ldr	r3, [pc, #192]	; (8004c48 <HAL_RCCEx_PeriphCLKConfig+0x150>)
 8004b86:	681a      	ldr	r2, [r3, #0]
 8004b88:	2380      	movs	r3, #128	; 0x80
 8004b8a:	005b      	lsls	r3, r3, #1
 8004b8c:	4013      	ands	r3, r2
 8004b8e:	d0ed      	beq.n	8004b6c <HAL_RCCEx_PeriphCLKConfig+0x74>
      }
    }

    if (ret == HAL_OK)
 8004b90:	2313      	movs	r3, #19
 8004b92:	18fb      	adds	r3, r7, r3
 8004b94:	781b      	ldrb	r3, [r3, #0]
 8004b96:	2b00      	cmp	r3, #0
 8004b98:	d15e      	bne.n	8004c58 <HAL_RCCEx_PeriphCLKConfig+0x160>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8004b9a:	4b2a      	ldr	r3, [pc, #168]	; (8004c44 <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 8004b9c:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8004b9e:	23c0      	movs	r3, #192	; 0xc0
 8004ba0:	009b      	lsls	r3, r3, #2
 8004ba2:	4013      	ands	r3, r2
 8004ba4:	617b      	str	r3, [r7, #20]

      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8004ba6:	697b      	ldr	r3, [r7, #20]
 8004ba8:	2b00      	cmp	r3, #0
 8004baa:	d019      	beq.n	8004be0 <HAL_RCCEx_PeriphCLKConfig+0xe8>
 8004bac:	687b      	ldr	r3, [r7, #4]
 8004bae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004bb0:	697a      	ldr	r2, [r7, #20]
 8004bb2:	429a      	cmp	r2, r3
 8004bb4:	d014      	beq.n	8004be0 <HAL_RCCEx_PeriphCLKConfig+0xe8>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8004bb6:	4b23      	ldr	r3, [pc, #140]	; (8004c44 <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 8004bb8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004bba:	4a24      	ldr	r2, [pc, #144]	; (8004c4c <HAL_RCCEx_PeriphCLKConfig+0x154>)
 8004bbc:	4013      	ands	r3, r2
 8004bbe:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8004bc0:	4b20      	ldr	r3, [pc, #128]	; (8004c44 <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 8004bc2:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8004bc4:	4b1f      	ldr	r3, [pc, #124]	; (8004c44 <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 8004bc6:	2180      	movs	r1, #128	; 0x80
 8004bc8:	0249      	lsls	r1, r1, #9
 8004bca:	430a      	orrs	r2, r1
 8004bcc:	65da      	str	r2, [r3, #92]	; 0x5c
        __HAL_RCC_BACKUPRESET_RELEASE();
 8004bce:	4b1d      	ldr	r3, [pc, #116]	; (8004c44 <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 8004bd0:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8004bd2:	4b1c      	ldr	r3, [pc, #112]	; (8004c44 <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 8004bd4:	491e      	ldr	r1, [pc, #120]	; (8004c50 <HAL_RCCEx_PeriphCLKConfig+0x158>)
 8004bd6:	400a      	ands	r2, r1
 8004bd8:	65da      	str	r2, [r3, #92]	; 0x5c
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8004bda:	4b1a      	ldr	r3, [pc, #104]	; (8004c44 <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 8004bdc:	697a      	ldr	r2, [r7, #20]
 8004bde:	65da      	str	r2, [r3, #92]	; 0x5c
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8004be0:	697b      	ldr	r3, [r7, #20]
 8004be2:	2201      	movs	r2, #1
 8004be4:	4013      	ands	r3, r2
 8004be6:	d016      	beq.n	8004c16 <HAL_RCCEx_PeriphCLKConfig+0x11e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004be8:	f7fe febc 	bl	8003964 <HAL_GetTick>
 8004bec:	0003      	movs	r3, r0
 8004bee:	60fb      	str	r3, [r7, #12]

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004bf0:	e00c      	b.n	8004c0c <HAL_RCCEx_PeriphCLKConfig+0x114>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004bf2:	f7fe feb7 	bl	8003964 <HAL_GetTick>
 8004bf6:	0002      	movs	r2, r0
 8004bf8:	68fb      	ldr	r3, [r7, #12]
 8004bfa:	1ad3      	subs	r3, r2, r3
 8004bfc:	4a15      	ldr	r2, [pc, #84]	; (8004c54 <HAL_RCCEx_PeriphCLKConfig+0x15c>)
 8004bfe:	4293      	cmp	r3, r2
 8004c00:	d904      	bls.n	8004c0c <HAL_RCCEx_PeriphCLKConfig+0x114>
          {
            ret = HAL_TIMEOUT;
 8004c02:	2313      	movs	r3, #19
 8004c04:	18fb      	adds	r3, r7, r3
 8004c06:	2203      	movs	r2, #3
 8004c08:	701a      	strb	r2, [r3, #0]
            break;
 8004c0a:	e004      	b.n	8004c16 <HAL_RCCEx_PeriphCLKConfig+0x11e>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004c0c:	4b0d      	ldr	r3, [pc, #52]	; (8004c44 <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 8004c0e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004c10:	2202      	movs	r2, #2
 8004c12:	4013      	ands	r3, r2
 8004c14:	d0ed      	beq.n	8004bf2 <HAL_RCCEx_PeriphCLKConfig+0xfa>
          }
        }
      }

      if (ret == HAL_OK)
 8004c16:	2313      	movs	r3, #19
 8004c18:	18fb      	adds	r3, r7, r3
 8004c1a:	781b      	ldrb	r3, [r3, #0]
 8004c1c:	2b00      	cmp	r3, #0
 8004c1e:	d10a      	bne.n	8004c36 <HAL_RCCEx_PeriphCLKConfig+0x13e>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8004c20:	4b08      	ldr	r3, [pc, #32]	; (8004c44 <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 8004c22:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004c24:	4a09      	ldr	r2, [pc, #36]	; (8004c4c <HAL_RCCEx_PeriphCLKConfig+0x154>)
 8004c26:	4013      	ands	r3, r2
 8004c28:	0019      	movs	r1, r3
 8004c2a:	687b      	ldr	r3, [r7, #4]
 8004c2c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8004c2e:	4b05      	ldr	r3, [pc, #20]	; (8004c44 <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 8004c30:	430a      	orrs	r2, r1
 8004c32:	65da      	str	r2, [r3, #92]	; 0x5c
 8004c34:	e016      	b.n	8004c64 <HAL_RCCEx_PeriphCLKConfig+0x16c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8004c36:	2312      	movs	r3, #18
 8004c38:	18fb      	adds	r3, r7, r3
 8004c3a:	2213      	movs	r2, #19
 8004c3c:	18ba      	adds	r2, r7, r2
 8004c3e:	7812      	ldrb	r2, [r2, #0]
 8004c40:	701a      	strb	r2, [r3, #0]
 8004c42:	e00f      	b.n	8004c64 <HAL_RCCEx_PeriphCLKConfig+0x16c>
 8004c44:	40021000 	.word	0x40021000
 8004c48:	40007000 	.word	0x40007000
 8004c4c:	fffffcff 	.word	0xfffffcff
 8004c50:	fffeffff 	.word	0xfffeffff
 8004c54:	00001388 	.word	0x00001388
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004c58:	2312      	movs	r3, #18
 8004c5a:	18fb      	adds	r3, r7, r3
 8004c5c:	2213      	movs	r2, #19
 8004c5e:	18ba      	adds	r2, r7, r2
 8004c60:	7812      	ldrb	r2, [r2, #0]
 8004c62:	701a      	strb	r2, [r3, #0]
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8004c64:	2311      	movs	r3, #17
 8004c66:	18fb      	adds	r3, r7, r3
 8004c68:	781b      	ldrb	r3, [r3, #0]
 8004c6a:	2b01      	cmp	r3, #1
 8004c6c:	d105      	bne.n	8004c7a <HAL_RCCEx_PeriphCLKConfig+0x182>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004c6e:	4bb6      	ldr	r3, [pc, #728]	; (8004f48 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8004c70:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8004c72:	4bb5      	ldr	r3, [pc, #724]	; (8004f48 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8004c74:	49b5      	ldr	r1, [pc, #724]	; (8004f4c <HAL_RCCEx_PeriphCLKConfig+0x454>)
 8004c76:	400a      	ands	r2, r1
 8004c78:	63da      	str	r2, [r3, #60]	; 0x3c
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8004c7a:	687b      	ldr	r3, [r7, #4]
 8004c7c:	681b      	ldr	r3, [r3, #0]
 8004c7e:	2201      	movs	r2, #1
 8004c80:	4013      	ands	r3, r2
 8004c82:	d009      	beq.n	8004c98 <HAL_RCCEx_PeriphCLKConfig+0x1a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8004c84:	4bb0      	ldr	r3, [pc, #704]	; (8004f48 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8004c86:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004c88:	2203      	movs	r2, #3
 8004c8a:	4393      	bics	r3, r2
 8004c8c:	0019      	movs	r1, r3
 8004c8e:	687b      	ldr	r3, [r7, #4]
 8004c90:	685a      	ldr	r2, [r3, #4]
 8004c92:	4bad      	ldr	r3, [pc, #692]	; (8004f48 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8004c94:	430a      	orrs	r2, r1
 8004c96:	655a      	str	r2, [r3, #84]	; 0x54
  }

#if defined(RCC_CCIPR_USART2SEL)
  /*-------------------------- USART2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8004c98:	687b      	ldr	r3, [r7, #4]
 8004c9a:	681b      	ldr	r3, [r3, #0]
 8004c9c:	2202      	movs	r2, #2
 8004c9e:	4013      	ands	r3, r2
 8004ca0:	d009      	beq.n	8004cb6 <HAL_RCCEx_PeriphCLKConfig+0x1be>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8004ca2:	4ba9      	ldr	r3, [pc, #676]	; (8004f48 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8004ca4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004ca6:	220c      	movs	r2, #12
 8004ca8:	4393      	bics	r3, r2
 8004caa:	0019      	movs	r1, r3
 8004cac:	687b      	ldr	r3, [r7, #4]
 8004cae:	689a      	ldr	r2, [r3, #8]
 8004cb0:	4ba5      	ldr	r3, [pc, #660]	; (8004f48 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8004cb2:	430a      	orrs	r2, r1
 8004cb4:	655a      	str	r2, [r3, #84]	; 0x54
  }
#endif /* RCC_CCIPR_USART2SEL */

#if defined(RCC_CCIPR_USART3SEL)
  /*-------------------------- USART3 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8004cb6:	687b      	ldr	r3, [r7, #4]
 8004cb8:	681b      	ldr	r3, [r3, #0]
 8004cba:	2204      	movs	r2, #4
 8004cbc:	4013      	ands	r3, r2
 8004cbe:	d009      	beq.n	8004cd4 <HAL_RCCEx_PeriphCLKConfig+0x1dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8004cc0:	4ba1      	ldr	r3, [pc, #644]	; (8004f48 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8004cc2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004cc4:	2230      	movs	r2, #48	; 0x30
 8004cc6:	4393      	bics	r3, r2
 8004cc8:	0019      	movs	r1, r3
 8004cca:	687b      	ldr	r3, [r7, #4]
 8004ccc:	68da      	ldr	r2, [r3, #12]
 8004cce:	4b9e      	ldr	r3, [pc, #632]	; (8004f48 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8004cd0:	430a      	orrs	r2, r1
 8004cd2:	655a      	str	r2, [r3, #84]	; 0x54
  }
#endif /* RCC_CCIPR_USART3SEL */

#if defined(LPUART1)
  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8004cd4:	687b      	ldr	r3, [r7, #4]
 8004cd6:	681b      	ldr	r3, [r3, #0]
 8004cd8:	2210      	movs	r2, #16
 8004cda:	4013      	ands	r3, r2
 8004cdc:	d009      	beq.n	8004cf2 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8004cde:	4b9a      	ldr	r3, [pc, #616]	; (8004f48 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8004ce0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004ce2:	4a9b      	ldr	r2, [pc, #620]	; (8004f50 <HAL_RCCEx_PeriphCLKConfig+0x458>)
 8004ce4:	4013      	ands	r3, r2
 8004ce6:	0019      	movs	r1, r3
 8004ce8:	687b      	ldr	r3, [r7, #4]
 8004cea:	691a      	ldr	r2, [r3, #16]
 8004cec:	4b96      	ldr	r3, [pc, #600]	; (8004f48 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8004cee:	430a      	orrs	r2, r1
 8004cf0:	655a      	str	r2, [r3, #84]	; 0x54
  }
#endif /* LPUART1 */

#if defined(LPUART2)
  /*-------------------------- LPUART2 clock source configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART2) == RCC_PERIPHCLK_LPUART2)
 8004cf2:	687b      	ldr	r3, [r7, #4]
 8004cf4:	681a      	ldr	r2, [r3, #0]
 8004cf6:	2380      	movs	r3, #128	; 0x80
 8004cf8:	015b      	lsls	r3, r3, #5
 8004cfa:	4013      	ands	r3, r2
 8004cfc:	d009      	beq.n	8004d12 <HAL_RCCEx_PeriphCLKConfig+0x21a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART2CLKSOURCE(PeriphClkInit->Lpuart2ClockSelection));

    /* Configure the LPUART clock source */
    __HAL_RCC_LPUART2_CONFIG(PeriphClkInit->Lpuart2ClockSelection);
 8004cfe:	4b92      	ldr	r3, [pc, #584]	; (8004f48 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8004d00:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004d02:	4a94      	ldr	r2, [pc, #592]	; (8004f54 <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 8004d04:	4013      	ands	r3, r2
 8004d06:	0019      	movs	r1, r3
 8004d08:	687b      	ldr	r3, [r7, #4]
 8004d0a:	695a      	ldr	r2, [r3, #20]
 8004d0c:	4b8e      	ldr	r3, [pc, #568]	; (8004f48 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8004d0e:	430a      	orrs	r2, r1
 8004d10:	655a      	str	r2, [r3, #84]	; 0x54
  }
#endif /* LPUART2 */

#if defined(RCC_CCIPR_LPTIM1SEL)
  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8004d12:	687b      	ldr	r3, [r7, #4]
 8004d14:	681a      	ldr	r2, [r3, #0]
 8004d16:	2380      	movs	r3, #128	; 0x80
 8004d18:	009b      	lsls	r3, r3, #2
 8004d1a:	4013      	ands	r3, r2
 8004d1c:	d009      	beq.n	8004d32 <HAL_RCCEx_PeriphCLKConfig+0x23a>
  {
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8004d1e:	4b8a      	ldr	r3, [pc, #552]	; (8004f48 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8004d20:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004d22:	4a8d      	ldr	r2, [pc, #564]	; (8004f58 <HAL_RCCEx_PeriphCLKConfig+0x460>)
 8004d24:	4013      	ands	r3, r2
 8004d26:	0019      	movs	r1, r3
 8004d28:	687b      	ldr	r3, [r7, #4]
 8004d2a:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8004d2c:	4b86      	ldr	r3, [pc, #536]	; (8004f48 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8004d2e:	430a      	orrs	r2, r1
 8004d30:	655a      	str	r2, [r3, #84]	; 0x54
  }
#endif /* RCC_CCIPR_LPTIM1SEL */

#if defined(RCC_CCIPR_LPTIM2SEL)
  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8004d32:	687b      	ldr	r3, [r7, #4]
 8004d34:	681a      	ldr	r2, [r3, #0]
 8004d36:	2380      	movs	r3, #128	; 0x80
 8004d38:	00db      	lsls	r3, r3, #3
 8004d3a:	4013      	ands	r3, r2
 8004d3c:	d009      	beq.n	8004d52 <HAL_RCCEx_PeriphCLKConfig+0x25a>
  {
    assert_param(IS_RCC_LPTIM2CLKSOURCE(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8004d3e:	4b82      	ldr	r3, [pc, #520]	; (8004f48 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8004d40:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004d42:	4a86      	ldr	r2, [pc, #536]	; (8004f5c <HAL_RCCEx_PeriphCLKConfig+0x464>)
 8004d44:	4013      	ands	r3, r2
 8004d46:	0019      	movs	r1, r3
 8004d48:	687b      	ldr	r3, [r7, #4]
 8004d4a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004d4c:	4b7e      	ldr	r3, [pc, #504]	; (8004f48 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8004d4e:	430a      	orrs	r2, r1
 8004d50:	655a      	str	r2, [r3, #84]	; 0x54
  }
#endif /* RCC_CCIPR_LPTIM2SEL */

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8004d52:	687b      	ldr	r3, [r7, #4]
 8004d54:	681b      	ldr	r3, [r3, #0]
 8004d56:	2220      	movs	r2, #32
 8004d58:	4013      	ands	r3, r2
 8004d5a:	d009      	beq.n	8004d70 <HAL_RCCEx_PeriphCLKConfig+0x278>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8004d5c:	4b7a      	ldr	r3, [pc, #488]	; (8004f48 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8004d5e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004d60:	4a7f      	ldr	r2, [pc, #508]	; (8004f60 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 8004d62:	4013      	ands	r3, r2
 8004d64:	0019      	movs	r1, r3
 8004d66:	687b      	ldr	r3, [r7, #4]
 8004d68:	699a      	ldr	r2, [r3, #24]
 8004d6a:	4b77      	ldr	r3, [pc, #476]	; (8004f48 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8004d6c:	430a      	orrs	r2, r1
 8004d6e:	655a      	str	r2, [r3, #84]	; 0x54
  }

#if defined(RCC_CCIPR_I2C2SEL)
  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8004d70:	687b      	ldr	r3, [r7, #4]
 8004d72:	681b      	ldr	r3, [r3, #0]
 8004d74:	2240      	movs	r2, #64	; 0x40
 8004d76:	4013      	ands	r3, r2
 8004d78:	d009      	beq.n	8004d8e <HAL_RCCEx_PeriphCLKConfig+0x296>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8004d7a:	4b73      	ldr	r3, [pc, #460]	; (8004f48 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8004d7c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004d7e:	4a79      	ldr	r2, [pc, #484]	; (8004f64 <HAL_RCCEx_PeriphCLKConfig+0x46c>)
 8004d80:	4013      	ands	r3, r2
 8004d82:	0019      	movs	r1, r3
 8004d84:	687b      	ldr	r3, [r7, #4]
 8004d86:	69da      	ldr	r2, [r3, #28]
 8004d88:	4b6f      	ldr	r3, [pc, #444]	; (8004f48 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8004d8a:	430a      	orrs	r2, r1
 8004d8c:	655a      	str	r2, [r3, #84]	; 0x54
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
    }
  }
#endif /* RNG */
  /*-------------------------- ADC clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8004d8e:	687b      	ldr	r3, [r7, #4]
 8004d90:	681a      	ldr	r2, [r3, #0]
 8004d92:	2380      	movs	r3, #128	; 0x80
 8004d94:	01db      	lsls	r3, r3, #7
 8004d96:	4013      	ands	r3, r2
 8004d98:	d015      	beq.n	8004dc6 <HAL_RCCEx_PeriphCLKConfig+0x2ce>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8004d9a:	4b6b      	ldr	r3, [pc, #428]	; (8004f48 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8004d9c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004d9e:	009b      	lsls	r3, r3, #2
 8004da0:	0899      	lsrs	r1, r3, #2
 8004da2:	687b      	ldr	r3, [r7, #4]
 8004da4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004da6:	4b68      	ldr	r3, [pc, #416]	; (8004f48 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8004da8:	430a      	orrs	r2, r1
 8004daa:	655a      	str	r2, [r3, #84]	; 0x54

    if (PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLADC)
 8004dac:	687b      	ldr	r3, [r7, #4]
 8004dae:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004db0:	2380      	movs	r3, #128	; 0x80
 8004db2:	05db      	lsls	r3, r3, #23
 8004db4:	429a      	cmp	r2, r3
 8004db6:	d106      	bne.n	8004dc6 <HAL_RCCEx_PeriphCLKConfig+0x2ce>
    {
      /* Enable PLLPCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLPCLK);
 8004db8:	4b63      	ldr	r3, [pc, #396]	; (8004f48 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8004dba:	68da      	ldr	r2, [r3, #12]
 8004dbc:	4b62      	ldr	r3, [pc, #392]	; (8004f48 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8004dbe:	2180      	movs	r1, #128	; 0x80
 8004dc0:	0249      	lsls	r1, r1, #9
 8004dc2:	430a      	orrs	r2, r1
 8004dc4:	60da      	str	r2, [r3, #12]
    }
  }

#if defined(CEC)
  /*-------------------------- CEC clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8004dc6:	687b      	ldr	r3, [r7, #4]
 8004dc8:	681a      	ldr	r2, [r3, #0]
 8004dca:	2380      	movs	r3, #128	; 0x80
 8004dcc:	031b      	lsls	r3, r3, #12
 8004dce:	4013      	ands	r3, r2
 8004dd0:	d009      	beq.n	8004de6 <HAL_RCCEx_PeriphCLKConfig+0x2ee>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8004dd2:	4b5d      	ldr	r3, [pc, #372]	; (8004f48 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8004dd4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004dd6:	2240      	movs	r2, #64	; 0x40
 8004dd8:	4393      	bics	r3, r2
 8004dda:	0019      	movs	r1, r3
 8004ddc:	687b      	ldr	r3, [r7, #4]
 8004dde:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004de0:	4b59      	ldr	r3, [pc, #356]	; (8004f48 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8004de2:	430a      	orrs	r2, r1
 8004de4:	655a      	str	r2, [r3, #84]	; 0x54
  }
#endif /* CEC */

#if defined(RCC_CCIPR_TIM1SEL)
  /*-------------------------- TIM1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM1) == RCC_PERIPHCLK_TIM1)
 8004de6:	687b      	ldr	r3, [r7, #4]
 8004de8:	681a      	ldr	r2, [r3, #0]
 8004dea:	2380      	movs	r3, #128	; 0x80
 8004dec:	039b      	lsls	r3, r3, #14
 8004dee:	4013      	ands	r3, r2
 8004df0:	d016      	beq.n	8004e20 <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM1CLKSOURCE(PeriphClkInit->Tim1ClockSelection));

    /* Configure the TIM1 clock source */
    __HAL_RCC_TIM1_CONFIG(PeriphClkInit->Tim1ClockSelection);
 8004df2:	4b55      	ldr	r3, [pc, #340]	; (8004f48 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8004df4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004df6:	4a5c      	ldr	r2, [pc, #368]	; (8004f68 <HAL_RCCEx_PeriphCLKConfig+0x470>)
 8004df8:	4013      	ands	r3, r2
 8004dfa:	0019      	movs	r1, r3
 8004dfc:	687b      	ldr	r3, [r7, #4]
 8004dfe:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004e00:	4b51      	ldr	r3, [pc, #324]	; (8004f48 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8004e02:	430a      	orrs	r2, r1
 8004e04:	655a      	str	r2, [r3, #84]	; 0x54

    if (PeriphClkInit->Tim1ClockSelection == RCC_TIM1CLKSOURCE_PLL)
 8004e06:	687b      	ldr	r3, [r7, #4]
 8004e08:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004e0a:	2380      	movs	r3, #128	; 0x80
 8004e0c:	03db      	lsls	r3, r3, #15
 8004e0e:	429a      	cmp	r2, r3
 8004e10:	d106      	bne.n	8004e20 <HAL_RCCEx_PeriphCLKConfig+0x328>
    {
      /* Enable PLLQCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
 8004e12:	4b4d      	ldr	r3, [pc, #308]	; (8004f48 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8004e14:	68da      	ldr	r2, [r3, #12]
 8004e16:	4b4c      	ldr	r3, [pc, #304]	; (8004f48 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8004e18:	2180      	movs	r1, #128	; 0x80
 8004e1a:	0449      	lsls	r1, r1, #17
 8004e1c:	430a      	orrs	r2, r1
 8004e1e:	60da      	str	r2, [r3, #12]
  }
#endif /* RCC_CCIPR_TIM1SEL */

#if defined(RCC_CCIPR_TIM15SEL)
  /*-------------------------- TIM15 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM15) == RCC_PERIPHCLK_TIM15)
 8004e20:	687b      	ldr	r3, [r7, #4]
 8004e22:	681a      	ldr	r2, [r3, #0]
 8004e24:	2380      	movs	r3, #128	; 0x80
 8004e26:	03db      	lsls	r3, r3, #15
 8004e28:	4013      	ands	r3, r2
 8004e2a:	d016      	beq.n	8004e5a <HAL_RCCEx_PeriphCLKConfig+0x362>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM15CLKSOURCE(PeriphClkInit->Tim15ClockSelection));

    /* Configure the TIM15 clock source */
    __HAL_RCC_TIM15_CONFIG(PeriphClkInit->Tim15ClockSelection);
 8004e2c:	4b46      	ldr	r3, [pc, #280]	; (8004f48 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8004e2e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004e30:	4a4e      	ldr	r2, [pc, #312]	; (8004f6c <HAL_RCCEx_PeriphCLKConfig+0x474>)
 8004e32:	4013      	ands	r3, r2
 8004e34:	0019      	movs	r1, r3
 8004e36:	687b      	ldr	r3, [r7, #4]
 8004e38:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8004e3a:	4b43      	ldr	r3, [pc, #268]	; (8004f48 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8004e3c:	430a      	orrs	r2, r1
 8004e3e:	655a      	str	r2, [r3, #84]	; 0x54

    if (PeriphClkInit->Tim15ClockSelection == RCC_TIM15CLKSOURCE_PLL)
 8004e40:	687b      	ldr	r3, [r7, #4]
 8004e42:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8004e44:	2380      	movs	r3, #128	; 0x80
 8004e46:	045b      	lsls	r3, r3, #17
 8004e48:	429a      	cmp	r2, r3
 8004e4a:	d106      	bne.n	8004e5a <HAL_RCCEx_PeriphCLKConfig+0x362>
    {
      /* Enable PLLQCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
 8004e4c:	4b3e      	ldr	r3, [pc, #248]	; (8004f48 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8004e4e:	68da      	ldr	r2, [r3, #12]
 8004e50:	4b3d      	ldr	r3, [pc, #244]	; (8004f48 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8004e52:	2180      	movs	r1, #128	; 0x80
 8004e54:	0449      	lsls	r1, r1, #17
 8004e56:	430a      	orrs	r2, r1
 8004e58:	60da      	str	r2, [r3, #12]
    }
  }
#endif /* RCC_CCIPR_TIM15SEL */

  /*-------------------------- I2S1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S1) == RCC_PERIPHCLK_I2S1)
 8004e5a:	687b      	ldr	r3, [r7, #4]
 8004e5c:	681a      	ldr	r2, [r3, #0]
 8004e5e:	2380      	movs	r3, #128	; 0x80
 8004e60:	011b      	lsls	r3, r3, #4
 8004e62:	4013      	ands	r3, r2
 8004e64:	d014      	beq.n	8004e90 <HAL_RCCEx_PeriphCLKConfig+0x398>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2S1CLKSOURCE(PeriphClkInit->I2s1ClockSelection));

    /* Configure the I2S1 clock source */
    __HAL_RCC_I2S1_CONFIG(PeriphClkInit->I2s1ClockSelection);
 8004e66:	4b38      	ldr	r3, [pc, #224]	; (8004f48 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8004e68:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004e6a:	2203      	movs	r2, #3
 8004e6c:	4393      	bics	r3, r2
 8004e6e:	0019      	movs	r1, r3
 8004e70:	687b      	ldr	r3, [r7, #4]
 8004e72:	6a1a      	ldr	r2, [r3, #32]
 8004e74:	4b34      	ldr	r3, [pc, #208]	; (8004f48 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8004e76:	430a      	orrs	r2, r1
 8004e78:	659a      	str	r2, [r3, #88]	; 0x58

    if (PeriphClkInit->I2s1ClockSelection == RCC_I2S1CLKSOURCE_PLL)
 8004e7a:	687b      	ldr	r3, [r7, #4]
 8004e7c:	6a1b      	ldr	r3, [r3, #32]
 8004e7e:	2b01      	cmp	r3, #1
 8004e80:	d106      	bne.n	8004e90 <HAL_RCCEx_PeriphCLKConfig+0x398>
    {
      /* Enable PLLPCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLPCLK);
 8004e82:	4b31      	ldr	r3, [pc, #196]	; (8004f48 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8004e84:	68da      	ldr	r2, [r3, #12]
 8004e86:	4b30      	ldr	r3, [pc, #192]	; (8004f48 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8004e88:	2180      	movs	r1, #128	; 0x80
 8004e8a:	0249      	lsls	r1, r1, #9
 8004e8c:	430a      	orrs	r2, r1
 8004e8e:	60da      	str	r2, [r3, #12]
    }
  }

#if defined(RCC_CCIPR2_I2S2SEL)
  /*-------------------------- I2S2 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S2) == RCC_PERIPHCLK_I2S2)
 8004e90:	687b      	ldr	r3, [r7, #4]
 8004e92:	681a      	ldr	r2, [r3, #0]
 8004e94:	2380      	movs	r3, #128	; 0x80
 8004e96:	019b      	lsls	r3, r3, #6
 8004e98:	4013      	ands	r3, r2
 8004e9a:	d014      	beq.n	8004ec6 <HAL_RCCEx_PeriphCLKConfig+0x3ce>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2S2CLKSOURCE(PeriphClkInit->I2s2ClockSelection));

    /* Configure the I2S2 clock source */
    __HAL_RCC_I2S2_CONFIG(PeriphClkInit->I2s2ClockSelection);
 8004e9c:	4b2a      	ldr	r3, [pc, #168]	; (8004f48 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8004e9e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004ea0:	220c      	movs	r2, #12
 8004ea2:	4393      	bics	r3, r2
 8004ea4:	0019      	movs	r1, r3
 8004ea6:	687b      	ldr	r3, [r7, #4]
 8004ea8:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8004eaa:	4b27      	ldr	r3, [pc, #156]	; (8004f48 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8004eac:	430a      	orrs	r2, r1
 8004eae:	659a      	str	r2, [r3, #88]	; 0x58

    if (PeriphClkInit->I2s2ClockSelection == RCC_I2S2CLKSOURCE_PLL)
 8004eb0:	687b      	ldr	r3, [r7, #4]
 8004eb2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004eb4:	2b04      	cmp	r3, #4
 8004eb6:	d106      	bne.n	8004ec6 <HAL_RCCEx_PeriphCLKConfig+0x3ce>
    {
      /* Enable PLLPCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLPCLK);
 8004eb8:	4b23      	ldr	r3, [pc, #140]	; (8004f48 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8004eba:	68da      	ldr	r2, [r3, #12]
 8004ebc:	4b22      	ldr	r3, [pc, #136]	; (8004f48 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8004ebe:	2180      	movs	r1, #128	; 0x80
 8004ec0:	0249      	lsls	r1, r1, #9
 8004ec2:	430a      	orrs	r2, r1
 8004ec4:	60da      	str	r2, [r3, #12]
  }
#endif /* RCC_CCIPR2_I2S2SEL */

#if defined(STM32G0C1xx) || defined(STM32G0B1xx)  || defined(STM32G0B0xx)
  /*-------------------------- USB clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8004ec6:	687b      	ldr	r3, [r7, #4]
 8004ec8:	681a      	ldr	r2, [r3, #0]
 8004eca:	2380      	movs	r3, #128	; 0x80
 8004ecc:	045b      	lsls	r3, r3, #17
 8004ece:	4013      	ands	r3, r2
 8004ed0:	d016      	beq.n	8004f00 <HAL_RCCEx_PeriphCLKConfig+0x408>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8004ed2:	4b1d      	ldr	r3, [pc, #116]	; (8004f48 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8004ed4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004ed6:	4a22      	ldr	r2, [pc, #136]	; (8004f60 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 8004ed8:	4013      	ands	r3, r2
 8004eda:	0019      	movs	r1, r3
 8004edc:	687b      	ldr	r3, [r7, #4]
 8004ede:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004ee0:	4b19      	ldr	r3, [pc, #100]	; (8004f48 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8004ee2:	430a      	orrs	r2, r1
 8004ee4:	659a      	str	r2, [r3, #88]	; 0x58

    if (PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8004ee6:	687b      	ldr	r3, [r7, #4]
 8004ee8:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004eea:	2380      	movs	r3, #128	; 0x80
 8004eec:	019b      	lsls	r3, r3, #6
 8004eee:	429a      	cmp	r2, r3
 8004ef0:	d106      	bne.n	8004f00 <HAL_RCCEx_PeriphCLKConfig+0x408>
    {
      /* Enable PLLQCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
 8004ef2:	4b15      	ldr	r3, [pc, #84]	; (8004f48 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8004ef4:	68da      	ldr	r2, [r3, #12]
 8004ef6:	4b14      	ldr	r3, [pc, #80]	; (8004f48 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8004ef8:	2180      	movs	r1, #128	; 0x80
 8004efa:	0449      	lsls	r1, r1, #17
 8004efc:	430a      	orrs	r2, r1
 8004efe:	60da      	str	r2, [r3, #12]
  }
#endif /* STM32G0C1xx || STM32G0B1xx || STM32G0B0xx */

#if defined(FDCAN1) || defined(FDCAN2)
  /*-------------------------- FDCAN clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8004f00:	687b      	ldr	r3, [r7, #4]
 8004f02:	681a      	ldr	r2, [r3, #0]
 8004f04:	2380      	movs	r3, #128	; 0x80
 8004f06:	049b      	lsls	r3, r3, #18
 8004f08:	4013      	ands	r3, r2
 8004f0a:	d016      	beq.n	8004f3a <HAL_RCCEx_PeriphCLKConfig+0x442>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FDCANCLKSOURCE(PeriphClkInit->FdcanClockSelection));

    /* Configure the FDCAN clock source */
    __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8004f0c:	4b0e      	ldr	r3, [pc, #56]	; (8004f48 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8004f0e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004f10:	4a10      	ldr	r2, [pc, #64]	; (8004f54 <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 8004f12:	4013      	ands	r3, r2
 8004f14:	0019      	movs	r1, r3
 8004f16:	687b      	ldr	r3, [r7, #4]
 8004f18:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8004f1a:	4b0b      	ldr	r3, [pc, #44]	; (8004f48 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8004f1c:	430a      	orrs	r2, r1
 8004f1e:	659a      	str	r2, [r3, #88]	; 0x58

    if (PeriphClkInit->FdcanClockSelection == RCC_FDCANCLKSOURCE_PLL)
 8004f20:	687b      	ldr	r3, [r7, #4]
 8004f22:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8004f24:	2380      	movs	r3, #128	; 0x80
 8004f26:	005b      	lsls	r3, r3, #1
 8004f28:	429a      	cmp	r2, r3
 8004f2a:	d106      	bne.n	8004f3a <HAL_RCCEx_PeriphCLKConfig+0x442>
    {
      /* Enable PLLQCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
 8004f2c:	4b06      	ldr	r3, [pc, #24]	; (8004f48 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8004f2e:	68da      	ldr	r2, [r3, #12]
 8004f30:	4b05      	ldr	r3, [pc, #20]	; (8004f48 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8004f32:	2180      	movs	r1, #128	; 0x80
 8004f34:	0449      	lsls	r1, r1, #17
 8004f36:	430a      	orrs	r2, r1
 8004f38:	60da      	str	r2, [r3, #12]
    }
  }
#endif /* FDCAN1 || FDCAN2 */

  return status;
 8004f3a:	2312      	movs	r3, #18
 8004f3c:	18fb      	adds	r3, r7, r3
 8004f3e:	781b      	ldrb	r3, [r3, #0]
}
 8004f40:	0018      	movs	r0, r3
 8004f42:	46bd      	mov	sp, r7
 8004f44:	b006      	add	sp, #24
 8004f46:	bd80      	pop	{r7, pc}
 8004f48:	40021000 	.word	0x40021000
 8004f4c:	efffffff 	.word	0xefffffff
 8004f50:	fffff3ff 	.word	0xfffff3ff
 8004f54:	fffffcff 	.word	0xfffffcff
 8004f58:	fff3ffff 	.word	0xfff3ffff
 8004f5c:	ffcfffff 	.word	0xffcfffff
 8004f60:	ffffcfff 	.word	0xffffcfff
 8004f64:	ffff3fff 	.word	0xffff3fff
 8004f68:	ffbfffff 	.word	0xffbfffff
 8004f6c:	feffffff 	.word	0xfeffffff

08004f70 <HAL_RTC_Init>:
  * @brief  Initialize the RTC peripheral
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 8004f70:	b5b0      	push	{r4, r5, r7, lr}
 8004f72:	b084      	sub	sp, #16
 8004f74:	af00      	add	r7, sp, #0
 8004f76:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_ERROR;
 8004f78:	230f      	movs	r3, #15
 8004f7a:	18fb      	adds	r3, r7, r3
 8004f7c:	2201      	movs	r2, #1
 8004f7e:	701a      	strb	r2, [r3, #0]

  /* Check the RTC peripheral state */
  if(hrtc != NULL)
 8004f80:	687b      	ldr	r3, [r7, #4]
 8004f82:	2b00      	cmp	r3, #0
 8004f84:	d100      	bne.n	8004f88 <HAL_RTC_Init+0x18>
 8004f86:	e08c      	b.n	80050a2 <HAL_RTC_Init+0x132>
    assert_param(IS_RTC_OUTPUT_REMAP(hrtc->Init.OutPutRemap));
    assert_param(IS_RTC_OUTPUT_POL(hrtc->Init.OutPutPolarity));
    assert_param(IS_RTC_OUTPUT_TYPE(hrtc->Init.OutPutType));
    assert_param(IS_RTC_OUTPUT_PULLUP(hrtc->Init.OutPutPullUp));

    if(hrtc->State == HAL_RTC_STATE_RESET)
 8004f88:	687b      	ldr	r3, [r7, #4]
 8004f8a:	2229      	movs	r2, #41	; 0x29
 8004f8c:	5c9b      	ldrb	r3, [r3, r2]
 8004f8e:	b2db      	uxtb	r3, r3
 8004f90:	2b00      	cmp	r3, #0
 8004f92:	d10b      	bne.n	8004fac <HAL_RTC_Init+0x3c>
    {
      /* Allocate lock resource and initialize it */
      hrtc->Lock = HAL_UNLOCKED;
 8004f94:	687b      	ldr	r3, [r7, #4]
 8004f96:	2228      	movs	r2, #40	; 0x28
 8004f98:	2100      	movs	r1, #0
 8004f9a:	5499      	strb	r1, [r3, r2]

      /* Process TAMP peripheral offset from RTC one */
      hrtc->TampOffset = (TAMP_BASE - RTC_BASE);
 8004f9c:	687b      	ldr	r3, [r7, #4]
 8004f9e:	2288      	movs	r2, #136	; 0x88
 8004fa0:	0212      	lsls	r2, r2, #8
 8004fa2:	605a      	str	r2, [r3, #4]
      {
        hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
      }
#else
      /* Initialize RTC MSP */
      HAL_RTC_MspInit(hrtc);
 8004fa4:	687b      	ldr	r3, [r7, #4]
 8004fa6:	0018      	movs	r0, r3
 8004fa8:	f7fe f9e8 	bl	800337c <HAL_RTC_MspInit>
#endif /* (USE_HAL_RTC_REGISTER_CALLBACKS) */
    }

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_BUSY;
 8004fac:	687b      	ldr	r3, [r7, #4]
 8004fae:	2229      	movs	r2, #41	; 0x29
 8004fb0:	2102      	movs	r1, #2
 8004fb2:	5499      	strb	r1, [r3, r2]

    /* Check whether the calendar needs to be initialized */
    if (__HAL_RTC_IS_CALENDAR_INITIALIZED(hrtc) == 0U)
 8004fb4:	687b      	ldr	r3, [r7, #4]
 8004fb6:	681b      	ldr	r3, [r3, #0]
 8004fb8:	68db      	ldr	r3, [r3, #12]
 8004fba:	2210      	movs	r2, #16
 8004fbc:	4013      	ands	r3, r2
 8004fbe:	2b10      	cmp	r3, #16
 8004fc0:	d062      	beq.n	8005088 <HAL_RTC_Init+0x118>
    {
      /* Disable the write protection for RTC registers */
      __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8004fc2:	687b      	ldr	r3, [r7, #4]
 8004fc4:	681b      	ldr	r3, [r3, #0]
 8004fc6:	22ca      	movs	r2, #202	; 0xca
 8004fc8:	625a      	str	r2, [r3, #36]	; 0x24
 8004fca:	687b      	ldr	r3, [r7, #4]
 8004fcc:	681b      	ldr	r3, [r3, #0]
 8004fce:	2253      	movs	r2, #83	; 0x53
 8004fd0:	625a      	str	r2, [r3, #36]	; 0x24

      /* Enter Initialization mode */
      status = RTC_EnterInitMode(hrtc);
 8004fd2:	250f      	movs	r5, #15
 8004fd4:	197c      	adds	r4, r7, r5
 8004fd6:	687b      	ldr	r3, [r7, #4]
 8004fd8:	0018      	movs	r0, r3
 8004fda:	f000 fbf4 	bl	80057c6 <RTC_EnterInitMode>
 8004fde:	0003      	movs	r3, r0
 8004fe0:	7023      	strb	r3, [r4, #0]

      if(status == HAL_OK)
 8004fe2:	0028      	movs	r0, r5
 8004fe4:	183b      	adds	r3, r7, r0
 8004fe6:	781b      	ldrb	r3, [r3, #0]
 8004fe8:	2b00      	cmp	r3, #0
 8004fea:	d12c      	bne.n	8005046 <HAL_RTC_Init+0xd6>
      {
        /* Clear RTC_CR FMT, OSEL and POL Bits */
        hrtc->Instance->CR &= ~(RTC_CR_FMT | RTC_CR_POL | RTC_CR_OSEL | RTC_CR_TAMPOE);
 8004fec:	687b      	ldr	r3, [r7, #4]
 8004fee:	681b      	ldr	r3, [r3, #0]
 8004ff0:	699a      	ldr	r2, [r3, #24]
 8004ff2:	687b      	ldr	r3, [r7, #4]
 8004ff4:	681b      	ldr	r3, [r3, #0]
 8004ff6:	492e      	ldr	r1, [pc, #184]	; (80050b0 <HAL_RTC_Init+0x140>)
 8004ff8:	400a      	ands	r2, r1
 8004ffa:	619a      	str	r2, [r3, #24]
        /* Set RTC_CR register */
        hrtc->Instance->CR |= (hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 8004ffc:	687b      	ldr	r3, [r7, #4]
 8004ffe:	681b      	ldr	r3, [r3, #0]
 8005000:	6999      	ldr	r1, [r3, #24]
 8005002:	687b      	ldr	r3, [r7, #4]
 8005004:	689a      	ldr	r2, [r3, #8]
 8005006:	687b      	ldr	r3, [r7, #4]
 8005008:	695b      	ldr	r3, [r3, #20]
 800500a:	431a      	orrs	r2, r3
 800500c:	687b      	ldr	r3, [r7, #4]
 800500e:	69db      	ldr	r3, [r3, #28]
 8005010:	431a      	orrs	r2, r3
 8005012:	687b      	ldr	r3, [r7, #4]
 8005014:	681b      	ldr	r3, [r3, #0]
 8005016:	430a      	orrs	r2, r1
 8005018:	619a      	str	r2, [r3, #24]

        /* Configure the RTC PRER */
        hrtc->Instance->PRER = (hrtc->Init.SynchPrediv);
 800501a:	687b      	ldr	r3, [r7, #4]
 800501c:	681b      	ldr	r3, [r3, #0]
 800501e:	687a      	ldr	r2, [r7, #4]
 8005020:	6912      	ldr	r2, [r2, #16]
 8005022:	611a      	str	r2, [r3, #16]
        hrtc->Instance->PRER |= (hrtc->Init.AsynchPrediv << RTC_PRER_PREDIV_A_Pos);
 8005024:	687b      	ldr	r3, [r7, #4]
 8005026:	681b      	ldr	r3, [r3, #0]
 8005028:	6919      	ldr	r1, [r3, #16]
 800502a:	687b      	ldr	r3, [r7, #4]
 800502c:	68db      	ldr	r3, [r3, #12]
 800502e:	041a      	lsls	r2, r3, #16
 8005030:	687b      	ldr	r3, [r7, #4]
 8005032:	681b      	ldr	r3, [r3, #0]
 8005034:	430a      	orrs	r2, r1
 8005036:	611a      	str	r2, [r3, #16]

        /* Exit Initialization mode */
        status = RTC_ExitInitMode(hrtc);
 8005038:	183c      	adds	r4, r7, r0
 800503a:	687b      	ldr	r3, [r7, #4]
 800503c:	0018      	movs	r0, r3
 800503e:	f000 fc05 	bl	800584c <RTC_ExitInitMode>
 8005042:	0003      	movs	r3, r0
 8005044:	7023      	strb	r3, [r4, #0]
      }

      if (status == HAL_OK)
 8005046:	230f      	movs	r3, #15
 8005048:	18fb      	adds	r3, r7, r3
 800504a:	781b      	ldrb	r3, [r3, #0]
 800504c:	2b00      	cmp	r3, #0
 800504e:	d116      	bne.n	800507e <HAL_RTC_Init+0x10e>
      {
        hrtc->Instance->CR &= ~(RTC_CR_TAMPALRM_PU |RTC_CR_TAMPALRM_TYPE | RTC_CR_OUT2EN);
 8005050:	687b      	ldr	r3, [r7, #4]
 8005052:	681b      	ldr	r3, [r3, #0]
 8005054:	699a      	ldr	r2, [r3, #24]
 8005056:	687b      	ldr	r3, [r7, #4]
 8005058:	681b      	ldr	r3, [r3, #0]
 800505a:	00d2      	lsls	r2, r2, #3
 800505c:	08d2      	lsrs	r2, r2, #3
 800505e:	619a      	str	r2, [r3, #24]
        hrtc->Instance->CR |= (hrtc->Init.OutPutPullUp | hrtc->Init.OutPutType | hrtc->Init.OutPutRemap);
 8005060:	687b      	ldr	r3, [r7, #4]
 8005062:	681b      	ldr	r3, [r3, #0]
 8005064:	6999      	ldr	r1, [r3, #24]
 8005066:	687b      	ldr	r3, [r7, #4]
 8005068:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800506a:	687b      	ldr	r3, [r7, #4]
 800506c:	6a1b      	ldr	r3, [r3, #32]
 800506e:	431a      	orrs	r2, r3
 8005070:	687b      	ldr	r3, [r7, #4]
 8005072:	699b      	ldr	r3, [r3, #24]
 8005074:	431a      	orrs	r2, r3
 8005076:	687b      	ldr	r3, [r7, #4]
 8005078:	681b      	ldr	r3, [r3, #0]
 800507a:	430a      	orrs	r2, r1
 800507c:	619a      	str	r2, [r3, #24]
      }

      /* Enable the write protection for RTC registers */
      __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800507e:	687b      	ldr	r3, [r7, #4]
 8005080:	681b      	ldr	r3, [r3, #0]
 8005082:	22ff      	movs	r2, #255	; 0xff
 8005084:	625a      	str	r2, [r3, #36]	; 0x24
 8005086:	e003      	b.n	8005090 <HAL_RTC_Init+0x120>
    }
    else
    {
      /* The calendar is already initialized */
      status = HAL_OK;
 8005088:	230f      	movs	r3, #15
 800508a:	18fb      	adds	r3, r7, r3
 800508c:	2200      	movs	r2, #0
 800508e:	701a      	strb	r2, [r3, #0]
    }

    if (status == HAL_OK)
 8005090:	230f      	movs	r3, #15
 8005092:	18fb      	adds	r3, r7, r3
 8005094:	781b      	ldrb	r3, [r3, #0]
 8005096:	2b00      	cmp	r3, #0
 8005098:	d103      	bne.n	80050a2 <HAL_RTC_Init+0x132>
    {
      hrtc->State = HAL_RTC_STATE_READY;
 800509a:	687b      	ldr	r3, [r7, #4]
 800509c:	2229      	movs	r2, #41	; 0x29
 800509e:	2101      	movs	r1, #1
 80050a0:	5499      	strb	r1, [r3, r2]
    }
  }

  return status;
 80050a2:	230f      	movs	r3, #15
 80050a4:	18fb      	adds	r3, r7, r3
 80050a6:	781b      	ldrb	r3, [r3, #0]
}
 80050a8:	0018      	movs	r0, r3
 80050aa:	46bd      	mov	sp, r7
 80050ac:	b004      	add	sp, #16
 80050ae:	bdb0      	pop	{r4, r5, r7, pc}
 80050b0:	fb8fffbf 	.word	0xfb8fffbf

080050b4 <HAL_RTC_SetTime>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 80050b4:	b5b0      	push	{r4, r5, r7, lr}
 80050b6:	b086      	sub	sp, #24
 80050b8:	af00      	add	r7, sp, #0
 80050ba:	60f8      	str	r0, [r7, #12]
 80050bc:	60b9      	str	r1, [r7, #8]
 80050be:	607a      	str	r2, [r7, #4]
  assert_param(IS_RTC_FORMAT(Format));
  assert_param(IS_RTC_DAYLIGHT_SAVING(sTime->DayLightSaving));
  assert_param(IS_RTC_STORE_OPERATION(sTime->StoreOperation));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 80050c0:	68fb      	ldr	r3, [r7, #12]
 80050c2:	2228      	movs	r2, #40	; 0x28
 80050c4:	5c9b      	ldrb	r3, [r3, r2]
 80050c6:	2b01      	cmp	r3, #1
 80050c8:	d101      	bne.n	80050ce <HAL_RTC_SetTime+0x1a>
 80050ca:	2302      	movs	r3, #2
 80050cc:	e092      	b.n	80051f4 <HAL_RTC_SetTime+0x140>
 80050ce:	68fb      	ldr	r3, [r7, #12]
 80050d0:	2228      	movs	r2, #40	; 0x28
 80050d2:	2101      	movs	r1, #1
 80050d4:	5499      	strb	r1, [r3, r2]

  hrtc->State = HAL_RTC_STATE_BUSY;
 80050d6:	68fb      	ldr	r3, [r7, #12]
 80050d8:	2229      	movs	r2, #41	; 0x29
 80050da:	2102      	movs	r1, #2
 80050dc:	5499      	strb	r1, [r3, r2]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 80050de:	68fb      	ldr	r3, [r7, #12]
 80050e0:	681b      	ldr	r3, [r3, #0]
 80050e2:	22ca      	movs	r2, #202	; 0xca
 80050e4:	625a      	str	r2, [r3, #36]	; 0x24
 80050e6:	68fb      	ldr	r3, [r7, #12]
 80050e8:	681b      	ldr	r3, [r3, #0]
 80050ea:	2253      	movs	r2, #83	; 0x53
 80050ec:	625a      	str	r2, [r3, #36]	; 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 80050ee:	2513      	movs	r5, #19
 80050f0:	197c      	adds	r4, r7, r5
 80050f2:	68fb      	ldr	r3, [r7, #12]
 80050f4:	0018      	movs	r0, r3
 80050f6:	f000 fb66 	bl	80057c6 <RTC_EnterInitMode>
 80050fa:	0003      	movs	r3, r0
 80050fc:	7023      	strb	r3, [r4, #0]
  if(status == HAL_OK)
 80050fe:	197b      	adds	r3, r7, r5
 8005100:	781b      	ldrb	r3, [r3, #0]
 8005102:	2b00      	cmp	r3, #0
 8005104:	d162      	bne.n	80051cc <HAL_RTC_SetTime+0x118>
  {
    if(Format == RTC_FORMAT_BIN)
 8005106:	687b      	ldr	r3, [r7, #4]
 8005108:	2b00      	cmp	r3, #0
 800510a:	d125      	bne.n	8005158 <HAL_RTC_SetTime+0xa4>
    {
    if((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 800510c:	68fb      	ldr	r3, [r7, #12]
 800510e:	681b      	ldr	r3, [r3, #0]
 8005110:	699b      	ldr	r3, [r3, #24]
 8005112:	2240      	movs	r2, #64	; 0x40
 8005114:	4013      	ands	r3, r2
 8005116:	d102      	bne.n	800511e <HAL_RTC_SetTime+0x6a>
        assert_param(IS_RTC_HOUR12(sTime->Hours));
        assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
      }
      else
      {
        sTime->TimeFormat = 0x00U;
 8005118:	68bb      	ldr	r3, [r7, #8]
 800511a:	2200      	movs	r2, #0
 800511c:	70da      	strb	r2, [r3, #3]
        assert_param(IS_RTC_HOUR24(sTime->Hours));
      }
      assert_param(IS_RTC_MINUTES(sTime->Minutes));
      assert_param(IS_RTC_SECONDS(sTime->Seconds));

      tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << RTC_TR_HU_Pos) | \
 800511e:	68bb      	ldr	r3, [r7, #8]
 8005120:	781b      	ldrb	r3, [r3, #0]
 8005122:	0018      	movs	r0, r3
 8005124:	f000 fbd6 	bl	80058d4 <RTC_ByteToBcd2>
 8005128:	0003      	movs	r3, r0
 800512a:	041c      	lsls	r4, r3, #16
                          ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 800512c:	68bb      	ldr	r3, [r7, #8]
 800512e:	785b      	ldrb	r3, [r3, #1]
 8005130:	0018      	movs	r0, r3
 8005132:	f000 fbcf 	bl	80058d4 <RTC_ByteToBcd2>
 8005136:	0003      	movs	r3, r0
 8005138:	021b      	lsls	r3, r3, #8
      tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << RTC_TR_HU_Pos) | \
 800513a:	431c      	orrs	r4, r3
                          ((uint32_t)RTC_ByteToBcd2(sTime->Seconds) << RTC_TR_SU_Pos) | \
 800513c:	68bb      	ldr	r3, [r7, #8]
 800513e:	789b      	ldrb	r3, [r3, #2]
 8005140:	0018      	movs	r0, r3
 8005142:	f000 fbc7 	bl	80058d4 <RTC_ByteToBcd2>
 8005146:	0003      	movs	r3, r0
                          ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 8005148:	0022      	movs	r2, r4
 800514a:	431a      	orrs	r2, r3
                          (((uint32_t)sTime->TimeFormat) << RTC_TR_PM_Pos));
 800514c:	68bb      	ldr	r3, [r7, #8]
 800514e:	78db      	ldrb	r3, [r3, #3]
 8005150:	059b      	lsls	r3, r3, #22
      tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << RTC_TR_HU_Pos) | \
 8005152:	4313      	orrs	r3, r2
 8005154:	617b      	str	r3, [r7, #20]
 8005156:	e017      	b.n	8005188 <HAL_RTC_SetTime+0xd4>
    }
    else
    {
    if((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 8005158:	68fb      	ldr	r3, [r7, #12]
 800515a:	681b      	ldr	r3, [r3, #0]
 800515c:	699b      	ldr	r3, [r3, #24]
 800515e:	2240      	movs	r2, #64	; 0x40
 8005160:	4013      	ands	r3, r2
 8005162:	d102      	bne.n	800516a <HAL_RTC_SetTime+0xb6>
        assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sTime->Hours)));
        assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
      }
      else
      {
        sTime->TimeFormat = 0x00U;
 8005164:	68bb      	ldr	r3, [r7, #8]
 8005166:	2200      	movs	r2, #0
 8005168:	70da      	strb	r2, [r3, #3]
        assert_param(IS_RTC_HOUR24(RTC_Bcd2ToByte(sTime->Hours)));
      }
      assert_param(IS_RTC_MINUTES(RTC_Bcd2ToByte(sTime->Minutes)));
      assert_param(IS_RTC_SECONDS(RTC_Bcd2ToByte(sTime->Seconds)));
      tmpreg = (((uint32_t)(sTime->Hours) << RTC_TR_HU_Pos) | \
 800516a:	68bb      	ldr	r3, [r7, #8]
 800516c:	781b      	ldrb	r3, [r3, #0]
 800516e:	041a      	lsls	r2, r3, #16
                ((uint32_t)(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 8005170:	68bb      	ldr	r3, [r7, #8]
 8005172:	785b      	ldrb	r3, [r3, #1]
 8005174:	021b      	lsls	r3, r3, #8
      tmpreg = (((uint32_t)(sTime->Hours) << RTC_TR_HU_Pos) | \
 8005176:	4313      	orrs	r3, r2
                ((uint32_t)(sTime->Seconds) << RTC_TR_SU_Pos) | \
 8005178:	68ba      	ldr	r2, [r7, #8]
 800517a:	7892      	ldrb	r2, [r2, #2]
                ((uint32_t)(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 800517c:	431a      	orrs	r2, r3
                ((uint32_t)(sTime->TimeFormat) << RTC_TR_PM_Pos));
 800517e:	68bb      	ldr	r3, [r7, #8]
 8005180:	78db      	ldrb	r3, [r3, #3]
 8005182:	059b      	lsls	r3, r3, #22
      tmpreg = (((uint32_t)(sTime->Hours) << RTC_TR_HU_Pos) | \
 8005184:	4313      	orrs	r3, r2
 8005186:	617b      	str	r3, [r7, #20]
    }

    /* Set the RTC_TR register */
    hrtc->Instance->TR = (uint32_t)(tmpreg & RTC_TR_RESERVED_MASK);
 8005188:	68fb      	ldr	r3, [r7, #12]
 800518a:	681b      	ldr	r3, [r3, #0]
 800518c:	697a      	ldr	r2, [r7, #20]
 800518e:	491b      	ldr	r1, [pc, #108]	; (80051fc <HAL_RTC_SetTime+0x148>)
 8005190:	400a      	ands	r2, r1
 8005192:	601a      	str	r2, [r3, #0]

    /* This interface is deprecated. To manage Daylight Saving Time, please use HAL_RTC_DST_xxx functions */
    hrtc->Instance->CR &= ((uint32_t)~RTC_CR_BKP);
 8005194:	68fb      	ldr	r3, [r7, #12]
 8005196:	681b      	ldr	r3, [r3, #0]
 8005198:	699a      	ldr	r2, [r3, #24]
 800519a:	68fb      	ldr	r3, [r7, #12]
 800519c:	681b      	ldr	r3, [r3, #0]
 800519e:	4918      	ldr	r1, [pc, #96]	; (8005200 <HAL_RTC_SetTime+0x14c>)
 80051a0:	400a      	ands	r2, r1
 80051a2:	619a      	str	r2, [r3, #24]

    /* This interface is deprecated. To manage Daylight Saving Time, please use HAL_RTC_DST_xxx functions */
    hrtc->Instance->CR |= (uint32_t)(sTime->DayLightSaving | sTime->StoreOperation);
 80051a4:	68fb      	ldr	r3, [r7, #12]
 80051a6:	681b      	ldr	r3, [r3, #0]
 80051a8:	6999      	ldr	r1, [r3, #24]
 80051aa:	68bb      	ldr	r3, [r7, #8]
 80051ac:	68da      	ldr	r2, [r3, #12]
 80051ae:	68bb      	ldr	r3, [r7, #8]
 80051b0:	691b      	ldr	r3, [r3, #16]
 80051b2:	431a      	orrs	r2, r3
 80051b4:	68fb      	ldr	r3, [r7, #12]
 80051b6:	681b      	ldr	r3, [r3, #0]
 80051b8:	430a      	orrs	r2, r1
 80051ba:	619a      	str	r2, [r3, #24]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 80051bc:	2313      	movs	r3, #19
 80051be:	18fc      	adds	r4, r7, r3
 80051c0:	68fb      	ldr	r3, [r7, #12]
 80051c2:	0018      	movs	r0, r3
 80051c4:	f000 fb42 	bl	800584c <RTC_ExitInitMode>
 80051c8:	0003      	movs	r3, r0
 80051ca:	7023      	strb	r3, [r4, #0]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80051cc:	68fb      	ldr	r3, [r7, #12]
 80051ce:	681b      	ldr	r3, [r3, #0]
 80051d0:	22ff      	movs	r2, #255	; 0xff
 80051d2:	625a      	str	r2, [r3, #36]	; 0x24
  
  if (status == HAL_OK)
 80051d4:	2313      	movs	r3, #19
 80051d6:	18fb      	adds	r3, r7, r3
 80051d8:	781b      	ldrb	r3, [r3, #0]
 80051da:	2b00      	cmp	r3, #0
 80051dc:	d103      	bne.n	80051e6 <HAL_RTC_SetTime+0x132>
  {
   hrtc->State = HAL_RTC_STATE_READY;
 80051de:	68fb      	ldr	r3, [r7, #12]
 80051e0:	2229      	movs	r2, #41	; 0x29
 80051e2:	2101      	movs	r1, #1
 80051e4:	5499      	strb	r1, [r3, r2]
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 80051e6:	68fb      	ldr	r3, [r7, #12]
 80051e8:	2228      	movs	r2, #40	; 0x28
 80051ea:	2100      	movs	r1, #0
 80051ec:	5499      	strb	r1, [r3, r2]

  return status;
 80051ee:	2313      	movs	r3, #19
 80051f0:	18fb      	adds	r3, r7, r3
 80051f2:	781b      	ldrb	r3, [r3, #0]
}
 80051f4:	0018      	movs	r0, r3
 80051f6:	46bd      	mov	sp, r7
 80051f8:	b006      	add	sp, #24
 80051fa:	bdb0      	pop	{r4, r5, r7, pc}
 80051fc:	007f7f7f 	.word	0x007f7f7f
 8005200:	fffbffff 	.word	0xfffbffff

08005204 <HAL_RTC_GetTime>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 8005204:	b580      	push	{r7, lr}
 8005206:	b086      	sub	sp, #24
 8005208:	af00      	add	r7, sp, #0
 800520a:	60f8      	str	r0, [r7, #12]
 800520c:	60b9      	str	r1, [r7, #8]
 800520e:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Get subseconds structure field from the corresponding register*/
  sTime->SubSeconds = (uint32_t)(hrtc->Instance->SSR);
 8005210:	68fb      	ldr	r3, [r7, #12]
 8005212:	681b      	ldr	r3, [r3, #0]
 8005214:	689a      	ldr	r2, [r3, #8]
 8005216:	68bb      	ldr	r3, [r7, #8]
 8005218:	605a      	str	r2, [r3, #4]

  /* Get SecondFraction structure field from the corresponding register field*/
  sTime->SecondFraction = (uint32_t)(hrtc->Instance->PRER & RTC_PRER_PREDIV_S);
 800521a:	68fb      	ldr	r3, [r7, #12]
 800521c:	681b      	ldr	r3, [r3, #0]
 800521e:	691b      	ldr	r3, [r3, #16]
 8005220:	045b      	lsls	r3, r3, #17
 8005222:	0c5a      	lsrs	r2, r3, #17
 8005224:	68bb      	ldr	r3, [r7, #8]
 8005226:	609a      	str	r2, [r3, #8]

  /* Get the TR register */
  tmpreg = (uint32_t)(hrtc->Instance->TR & RTC_TR_RESERVED_MASK);
 8005228:	68fb      	ldr	r3, [r7, #12]
 800522a:	681b      	ldr	r3, [r3, #0]
 800522c:	681b      	ldr	r3, [r3, #0]
 800522e:	4a22      	ldr	r2, [pc, #136]	; (80052b8 <HAL_RTC_GetTime+0xb4>)
 8005230:	4013      	ands	r3, r2
 8005232:	617b      	str	r3, [r7, #20]

  /* Fill the structure fields with the read parameters */
  sTime->Hours = (uint8_t)((tmpreg & (RTC_TR_HT | RTC_TR_HU)) >> RTC_TR_HU_Pos);
 8005234:	697b      	ldr	r3, [r7, #20]
 8005236:	0c1b      	lsrs	r3, r3, #16
 8005238:	b2db      	uxtb	r3, r3
 800523a:	223f      	movs	r2, #63	; 0x3f
 800523c:	4013      	ands	r3, r2
 800523e:	b2da      	uxtb	r2, r3
 8005240:	68bb      	ldr	r3, [r7, #8]
 8005242:	701a      	strb	r2, [r3, #0]
  sTime->Minutes = (uint8_t)((tmpreg & (RTC_TR_MNT | RTC_TR_MNU)) >> RTC_TR_MNU_Pos);
 8005244:	697b      	ldr	r3, [r7, #20]
 8005246:	0a1b      	lsrs	r3, r3, #8
 8005248:	b2db      	uxtb	r3, r3
 800524a:	227f      	movs	r2, #127	; 0x7f
 800524c:	4013      	ands	r3, r2
 800524e:	b2da      	uxtb	r2, r3
 8005250:	68bb      	ldr	r3, [r7, #8]
 8005252:	705a      	strb	r2, [r3, #1]
  sTime->Seconds = (uint8_t)((tmpreg & (RTC_TR_ST | RTC_TR_SU)) >> RTC_TR_SU_Pos);
 8005254:	697b      	ldr	r3, [r7, #20]
 8005256:	b2db      	uxtb	r3, r3
 8005258:	227f      	movs	r2, #127	; 0x7f
 800525a:	4013      	ands	r3, r2
 800525c:	b2da      	uxtb	r2, r3
 800525e:	68bb      	ldr	r3, [r7, #8]
 8005260:	709a      	strb	r2, [r3, #2]
  sTime->TimeFormat = (uint8_t)((tmpreg & (RTC_TR_PM)) >> RTC_TR_PM_Pos);
 8005262:	697b      	ldr	r3, [r7, #20]
 8005264:	0d9b      	lsrs	r3, r3, #22
 8005266:	b2db      	uxtb	r3, r3
 8005268:	2201      	movs	r2, #1
 800526a:	4013      	ands	r3, r2
 800526c:	b2da      	uxtb	r2, r3
 800526e:	68bb      	ldr	r3, [r7, #8]
 8005270:	70da      	strb	r2, [r3, #3]

  /* Check the input parameters format */
  if(Format == RTC_FORMAT_BIN)
 8005272:	687b      	ldr	r3, [r7, #4]
 8005274:	2b00      	cmp	r3, #0
 8005276:	d11a      	bne.n	80052ae <HAL_RTC_GetTime+0xaa>
  {
    /* Convert the time structure parameters to Binary format */
    sTime->Hours = (uint8_t)RTC_Bcd2ToByte(sTime->Hours);
 8005278:	68bb      	ldr	r3, [r7, #8]
 800527a:	781b      	ldrb	r3, [r3, #0]
 800527c:	0018      	movs	r0, r3
 800527e:	f000 fb51 	bl	8005924 <RTC_Bcd2ToByte>
 8005282:	0003      	movs	r3, r0
 8005284:	001a      	movs	r2, r3
 8005286:	68bb      	ldr	r3, [r7, #8]
 8005288:	701a      	strb	r2, [r3, #0]
    sTime->Minutes = (uint8_t)RTC_Bcd2ToByte(sTime->Minutes);
 800528a:	68bb      	ldr	r3, [r7, #8]
 800528c:	785b      	ldrb	r3, [r3, #1]
 800528e:	0018      	movs	r0, r3
 8005290:	f000 fb48 	bl	8005924 <RTC_Bcd2ToByte>
 8005294:	0003      	movs	r3, r0
 8005296:	001a      	movs	r2, r3
 8005298:	68bb      	ldr	r3, [r7, #8]
 800529a:	705a      	strb	r2, [r3, #1]
    sTime->Seconds = (uint8_t)RTC_Bcd2ToByte(sTime->Seconds);
 800529c:	68bb      	ldr	r3, [r7, #8]
 800529e:	789b      	ldrb	r3, [r3, #2]
 80052a0:	0018      	movs	r0, r3
 80052a2:	f000 fb3f 	bl	8005924 <RTC_Bcd2ToByte>
 80052a6:	0003      	movs	r3, r0
 80052a8:	001a      	movs	r2, r3
 80052aa:	68bb      	ldr	r3, [r7, #8]
 80052ac:	709a      	strb	r2, [r3, #2]
  }

  return HAL_OK;
 80052ae:	2300      	movs	r3, #0
}
 80052b0:	0018      	movs	r0, r3
 80052b2:	46bd      	mov	sp, r7
 80052b4:	b006      	add	sp, #24
 80052b6:	bd80      	pop	{r7, pc}
 80052b8:	007f7f7f 	.word	0x007f7f7f

080052bc <HAL_RTC_SetDate>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 80052bc:	b5b0      	push	{r4, r5, r7, lr}
 80052be:	b086      	sub	sp, #24
 80052c0:	af00      	add	r7, sp, #0
 80052c2:	60f8      	str	r0, [r7, #12]
 80052c4:	60b9      	str	r1, [r7, #8]
 80052c6:	607a      	str	r2, [r7, #4]

 /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

 /* Process Locked */
 __HAL_LOCK(hrtc);
 80052c8:	68fb      	ldr	r3, [r7, #12]
 80052ca:	2228      	movs	r2, #40	; 0x28
 80052cc:	5c9b      	ldrb	r3, [r3, r2]
 80052ce:	2b01      	cmp	r3, #1
 80052d0:	d101      	bne.n	80052d6 <HAL_RTC_SetDate+0x1a>
 80052d2:	2302      	movs	r3, #2
 80052d4:	e07e      	b.n	80053d4 <HAL_RTC_SetDate+0x118>
 80052d6:	68fb      	ldr	r3, [r7, #12]
 80052d8:	2228      	movs	r2, #40	; 0x28
 80052da:	2101      	movs	r1, #1
 80052dc:	5499      	strb	r1, [r3, r2]

  hrtc->State = HAL_RTC_STATE_BUSY;
 80052de:	68fb      	ldr	r3, [r7, #12]
 80052e0:	2229      	movs	r2, #41	; 0x29
 80052e2:	2102      	movs	r1, #2
 80052e4:	5499      	strb	r1, [r3, r2]

  if((Format == RTC_FORMAT_BIN) && ((sDate->Month & 0x10U) == 0x10U))
 80052e6:	687b      	ldr	r3, [r7, #4]
 80052e8:	2b00      	cmp	r3, #0
 80052ea:	d10e      	bne.n	800530a <HAL_RTC_SetDate+0x4e>
 80052ec:	68bb      	ldr	r3, [r7, #8]
 80052ee:	785b      	ldrb	r3, [r3, #1]
 80052f0:	001a      	movs	r2, r3
 80052f2:	2310      	movs	r3, #16
 80052f4:	4013      	ands	r3, r2
 80052f6:	d008      	beq.n	800530a <HAL_RTC_SetDate+0x4e>
  {
    sDate->Month = (uint8_t)((sDate->Month & (uint8_t)~(0x10U)) + (uint8_t)0x0AU);
 80052f8:	68bb      	ldr	r3, [r7, #8]
 80052fa:	785b      	ldrb	r3, [r3, #1]
 80052fc:	2210      	movs	r2, #16
 80052fe:	4393      	bics	r3, r2
 8005300:	b2db      	uxtb	r3, r3
 8005302:	330a      	adds	r3, #10
 8005304:	b2da      	uxtb	r2, r3
 8005306:	68bb      	ldr	r3, [r7, #8]
 8005308:	705a      	strb	r2, [r3, #1]
  }

  assert_param(IS_RTC_WEEKDAY(sDate->WeekDay));

  if(Format == RTC_FORMAT_BIN)
 800530a:	687b      	ldr	r3, [r7, #4]
 800530c:	2b00      	cmp	r3, #0
 800530e:	d11c      	bne.n	800534a <HAL_RTC_SetDate+0x8e>
  {
    assert_param(IS_RTC_YEAR(sDate->Year));
    assert_param(IS_RTC_MONTH(sDate->Month));
    assert_param(IS_RTC_DATE(sDate->Date));

   datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 8005310:	68bb      	ldr	r3, [r7, #8]
 8005312:	78db      	ldrb	r3, [r3, #3]
 8005314:	0018      	movs	r0, r3
 8005316:	f000 fadd 	bl	80058d4 <RTC_ByteToBcd2>
 800531a:	0003      	movs	r3, r0
 800531c:	041c      	lsls	r4, r3, #16
                 ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 800531e:	68bb      	ldr	r3, [r7, #8]
 8005320:	785b      	ldrb	r3, [r3, #1]
 8005322:	0018      	movs	r0, r3
 8005324:	f000 fad6 	bl	80058d4 <RTC_ByteToBcd2>
 8005328:	0003      	movs	r3, r0
 800532a:	021b      	lsls	r3, r3, #8
   datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 800532c:	431c      	orrs	r4, r3
                 ((uint32_t)RTC_ByteToBcd2(sDate->Date)  << RTC_DR_DU_Pos) | \
 800532e:	68bb      	ldr	r3, [r7, #8]
 8005330:	789b      	ldrb	r3, [r3, #2]
 8005332:	0018      	movs	r0, r3
 8005334:	f000 face 	bl	80058d4 <RTC_ByteToBcd2>
 8005338:	0003      	movs	r3, r0
                 ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 800533a:	0022      	movs	r2, r4
 800533c:	431a      	orrs	r2, r3
                 ((uint32_t)sDate->WeekDay << RTC_DR_WDU_Pos));
 800533e:	68bb      	ldr	r3, [r7, #8]
 8005340:	781b      	ldrb	r3, [r3, #0]
 8005342:	035b      	lsls	r3, r3, #13
   datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 8005344:	4313      	orrs	r3, r2
 8005346:	617b      	str	r3, [r7, #20]
 8005348:	e00e      	b.n	8005368 <HAL_RTC_SetDate+0xac>
  {
    assert_param(IS_RTC_YEAR(RTC_Bcd2ToByte(sDate->Year)));
    assert_param(IS_RTC_MONTH(RTC_Bcd2ToByte(sDate->Month)));
    assert_param(IS_RTC_DATE(RTC_Bcd2ToByte(sDate->Date)));

    datetmpreg = ((((uint32_t)sDate->Year) << RTC_DR_YU_Pos) | \
 800534a:	68bb      	ldr	r3, [r7, #8]
 800534c:	78db      	ldrb	r3, [r3, #3]
 800534e:	041a      	lsls	r2, r3, #16
                  (((uint32_t)sDate->Month) << RTC_DR_MU_Pos) | \
 8005350:	68bb      	ldr	r3, [r7, #8]
 8005352:	785b      	ldrb	r3, [r3, #1]
 8005354:	021b      	lsls	r3, r3, #8
    datetmpreg = ((((uint32_t)sDate->Year) << RTC_DR_YU_Pos) | \
 8005356:	4313      	orrs	r3, r2
                  (((uint32_t)sDate->Date) << RTC_DR_DU_Pos)| \
 8005358:	68ba      	ldr	r2, [r7, #8]
 800535a:	7892      	ldrb	r2, [r2, #2]
                  (((uint32_t)sDate->Month) << RTC_DR_MU_Pos) | \
 800535c:	431a      	orrs	r2, r3
                  (((uint32_t)sDate->WeekDay) << RTC_DR_WDU_Pos));
 800535e:	68bb      	ldr	r3, [r7, #8]
 8005360:	781b      	ldrb	r3, [r3, #0]
 8005362:	035b      	lsls	r3, r3, #13
    datetmpreg = ((((uint32_t)sDate->Year) << RTC_DR_YU_Pos) | \
 8005364:	4313      	orrs	r3, r2
 8005366:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8005368:	68fb      	ldr	r3, [r7, #12]
 800536a:	681b      	ldr	r3, [r3, #0]
 800536c:	22ca      	movs	r2, #202	; 0xca
 800536e:	625a      	str	r2, [r3, #36]	; 0x24
 8005370:	68fb      	ldr	r3, [r7, #12]
 8005372:	681b      	ldr	r3, [r3, #0]
 8005374:	2253      	movs	r2, #83	; 0x53
 8005376:	625a      	str	r2, [r3, #36]	; 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 8005378:	2513      	movs	r5, #19
 800537a:	197c      	adds	r4, r7, r5
 800537c:	68fb      	ldr	r3, [r7, #12]
 800537e:	0018      	movs	r0, r3
 8005380:	f000 fa21 	bl	80057c6 <RTC_EnterInitMode>
 8005384:	0003      	movs	r3, r0
 8005386:	7023      	strb	r3, [r4, #0]
  if(status == HAL_OK)
 8005388:	0028      	movs	r0, r5
 800538a:	183b      	adds	r3, r7, r0
 800538c:	781b      	ldrb	r3, [r3, #0]
 800538e:	2b00      	cmp	r3, #0
 8005390:	d10c      	bne.n	80053ac <HAL_RTC_SetDate+0xf0>
  {
    /* Set the RTC_DR register */
    hrtc->Instance->DR = (uint32_t)(datetmpreg & RTC_DR_RESERVED_MASK);
 8005392:	68fb      	ldr	r3, [r7, #12]
 8005394:	681b      	ldr	r3, [r3, #0]
 8005396:	697a      	ldr	r2, [r7, #20]
 8005398:	4910      	ldr	r1, [pc, #64]	; (80053dc <HAL_RTC_SetDate+0x120>)
 800539a:	400a      	ands	r2, r1
 800539c:	605a      	str	r2, [r3, #4]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 800539e:	183c      	adds	r4, r7, r0
 80053a0:	68fb      	ldr	r3, [r7, #12]
 80053a2:	0018      	movs	r0, r3
 80053a4:	f000 fa52 	bl	800584c <RTC_ExitInitMode>
 80053a8:	0003      	movs	r3, r0
 80053aa:	7023      	strb	r3, [r4, #0]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80053ac:	68fb      	ldr	r3, [r7, #12]
 80053ae:	681b      	ldr	r3, [r3, #0]
 80053b0:	22ff      	movs	r2, #255	; 0xff
 80053b2:	625a      	str	r2, [r3, #36]	; 0x24

  if (status == HAL_OK)
 80053b4:	2313      	movs	r3, #19
 80053b6:	18fb      	adds	r3, r7, r3
 80053b8:	781b      	ldrb	r3, [r3, #0]
 80053ba:	2b00      	cmp	r3, #0
 80053bc:	d103      	bne.n	80053c6 <HAL_RTC_SetDate+0x10a>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 80053be:	68fb      	ldr	r3, [r7, #12]
 80053c0:	2229      	movs	r2, #41	; 0x29
 80053c2:	2101      	movs	r1, #1
 80053c4:	5499      	strb	r1, [r3, r2]
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 80053c6:	68fb      	ldr	r3, [r7, #12]
 80053c8:	2228      	movs	r2, #40	; 0x28
 80053ca:	2100      	movs	r1, #0
 80053cc:	5499      	strb	r1, [r3, r2]

  return status;
 80053ce:	2313      	movs	r3, #19
 80053d0:	18fb      	adds	r3, r7, r3
 80053d2:	781b      	ldrb	r3, [r3, #0]
}
 80053d4:	0018      	movs	r0, r3
 80053d6:	46bd      	mov	sp, r7
 80053d8:	b006      	add	sp, #24
 80053da:	bdb0      	pop	{r4, r5, r7, pc}
 80053dc:	00ffff3f 	.word	0x00ffff3f

080053e0 <HAL_RTC_GetDate>:
  *            @arg RTC_FORMAT_BIN:  Binary data format
  *            @arg RTC_FORMAT_BCD:  BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 80053e0:	b580      	push	{r7, lr}
 80053e2:	b086      	sub	sp, #24
 80053e4:	af00      	add	r7, sp, #0
 80053e6:	60f8      	str	r0, [r7, #12]
 80053e8:	60b9      	str	r1, [r7, #8]
 80053ea:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Get the DR register */
  datetmpreg = (uint32_t)(hrtc->Instance->DR & RTC_DR_RESERVED_MASK);
 80053ec:	68fb      	ldr	r3, [r7, #12]
 80053ee:	681b      	ldr	r3, [r3, #0]
 80053f0:	685b      	ldr	r3, [r3, #4]
 80053f2:	4a21      	ldr	r2, [pc, #132]	; (8005478 <HAL_RTC_GetDate+0x98>)
 80053f4:	4013      	ands	r3, r2
 80053f6:	617b      	str	r3, [r7, #20]

  /* Fill the structure fields with the read parameters */
  sDate->Year = (uint8_t)((datetmpreg & (RTC_DR_YT | RTC_DR_YU)) >> RTC_DR_YU_Pos);
 80053f8:	697b      	ldr	r3, [r7, #20]
 80053fa:	0c1b      	lsrs	r3, r3, #16
 80053fc:	b2da      	uxtb	r2, r3
 80053fe:	68bb      	ldr	r3, [r7, #8]
 8005400:	70da      	strb	r2, [r3, #3]
  sDate->Month = (uint8_t)((datetmpreg & (RTC_DR_MT | RTC_DR_MU)) >> RTC_DR_MU_Pos);
 8005402:	697b      	ldr	r3, [r7, #20]
 8005404:	0a1b      	lsrs	r3, r3, #8
 8005406:	b2db      	uxtb	r3, r3
 8005408:	221f      	movs	r2, #31
 800540a:	4013      	ands	r3, r2
 800540c:	b2da      	uxtb	r2, r3
 800540e:	68bb      	ldr	r3, [r7, #8]
 8005410:	705a      	strb	r2, [r3, #1]
  sDate->Date = (uint8_t)((datetmpreg & (RTC_DR_DT | RTC_DR_DU)) >> RTC_DR_DU_Pos);
 8005412:	697b      	ldr	r3, [r7, #20]
 8005414:	b2db      	uxtb	r3, r3
 8005416:	223f      	movs	r2, #63	; 0x3f
 8005418:	4013      	ands	r3, r2
 800541a:	b2da      	uxtb	r2, r3
 800541c:	68bb      	ldr	r3, [r7, #8]
 800541e:	709a      	strb	r2, [r3, #2]
  sDate->WeekDay = (uint8_t)((datetmpreg & (RTC_DR_WDU)) >> RTC_DR_WDU_Pos);
 8005420:	697b      	ldr	r3, [r7, #20]
 8005422:	0b5b      	lsrs	r3, r3, #13
 8005424:	b2db      	uxtb	r3, r3
 8005426:	2207      	movs	r2, #7
 8005428:	4013      	ands	r3, r2
 800542a:	b2da      	uxtb	r2, r3
 800542c:	68bb      	ldr	r3, [r7, #8]
 800542e:	701a      	strb	r2, [r3, #0]

  /* Check the input parameters format */
  if(Format == RTC_FORMAT_BIN)
 8005430:	687b      	ldr	r3, [r7, #4]
 8005432:	2b00      	cmp	r3, #0
 8005434:	d11a      	bne.n	800546c <HAL_RTC_GetDate+0x8c>
  {
    /* Convert the date structure parameters to Binary format */
    sDate->Year = (uint8_t)RTC_Bcd2ToByte(sDate->Year);
 8005436:	68bb      	ldr	r3, [r7, #8]
 8005438:	78db      	ldrb	r3, [r3, #3]
 800543a:	0018      	movs	r0, r3
 800543c:	f000 fa72 	bl	8005924 <RTC_Bcd2ToByte>
 8005440:	0003      	movs	r3, r0
 8005442:	001a      	movs	r2, r3
 8005444:	68bb      	ldr	r3, [r7, #8]
 8005446:	70da      	strb	r2, [r3, #3]
    sDate->Month = (uint8_t)RTC_Bcd2ToByte(sDate->Month);
 8005448:	68bb      	ldr	r3, [r7, #8]
 800544a:	785b      	ldrb	r3, [r3, #1]
 800544c:	0018      	movs	r0, r3
 800544e:	f000 fa69 	bl	8005924 <RTC_Bcd2ToByte>
 8005452:	0003      	movs	r3, r0
 8005454:	001a      	movs	r2, r3
 8005456:	68bb      	ldr	r3, [r7, #8]
 8005458:	705a      	strb	r2, [r3, #1]
    sDate->Date = (uint8_t)RTC_Bcd2ToByte(sDate->Date);
 800545a:	68bb      	ldr	r3, [r7, #8]
 800545c:	789b      	ldrb	r3, [r3, #2]
 800545e:	0018      	movs	r0, r3
 8005460:	f000 fa60 	bl	8005924 <RTC_Bcd2ToByte>
 8005464:	0003      	movs	r3, r0
 8005466:	001a      	movs	r2, r3
 8005468:	68bb      	ldr	r3, [r7, #8]
 800546a:	709a      	strb	r2, [r3, #2]
  }
  return HAL_OK;
 800546c:	2300      	movs	r3, #0
}
 800546e:	0018      	movs	r0, r3
 8005470:	46bd      	mov	sp, r7
 8005472:	b006      	add	sp, #24
 8005474:	bd80      	pop	{r7, pc}
 8005476:	46c0      	nop			; (mov r8, r8)
 8005478:	00ffff3f 	.word	0x00ffff3f

0800547c <HAL_RTC_SetAlarm_IT>:
  *             @arg RTC_FORMAT_BIN: Binary data format
  *             @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetAlarm_IT(RTC_HandleTypeDef *hrtc, RTC_AlarmTypeDef *sAlarm, uint32_t Format)
{
 800547c:	b590      	push	{r4, r7, lr}
 800547e:	b089      	sub	sp, #36	; 0x24
 8005480:	af00      	add	r7, sp, #0
 8005482:	60f8      	str	r0, [r7, #12]
 8005484:	60b9      	str	r1, [r7, #8]
 8005486:	607a      	str	r2, [r7, #4]
  assert_param(IS_RTC_ALARM_DATE_WEEKDAY_SEL(sAlarm->AlarmDateWeekDaySel));
  assert_param(IS_RTC_ALARM_SUB_SECOND_VALUE(sAlarm->AlarmTime.SubSeconds));
  assert_param(IS_RTC_ALARM_SUB_SECOND_MASK(sAlarm->AlarmSubSecondMask));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8005488:	68fb      	ldr	r3, [r7, #12]
 800548a:	2228      	movs	r2, #40	; 0x28
 800548c:	5c9b      	ldrb	r3, [r3, r2]
 800548e:	2b01      	cmp	r3, #1
 8005490:	d101      	bne.n	8005496 <HAL_RTC_SetAlarm_IT+0x1a>
 8005492:	2302      	movs	r3, #2
 8005494:	e127      	b.n	80056e6 <HAL_RTC_SetAlarm_IT+0x26a>
 8005496:	68fb      	ldr	r3, [r7, #12]
 8005498:	2228      	movs	r2, #40	; 0x28
 800549a:	2101      	movs	r1, #1
 800549c:	5499      	strb	r1, [r3, r2]

  hrtc->State = HAL_RTC_STATE_BUSY;
 800549e:	68fb      	ldr	r3, [r7, #12]
 80054a0:	2229      	movs	r2, #41	; 0x29
 80054a2:	2102      	movs	r1, #2
 80054a4:	5499      	strb	r1, [r3, r2]

  if(Format == RTC_FORMAT_BIN)
 80054a6:	687b      	ldr	r3, [r7, #4]
 80054a8:	2b00      	cmp	r3, #0
 80054aa:	d136      	bne.n	800551a <HAL_RTC_SetAlarm_IT+0x9e>
  {
    if((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 80054ac:	68fb      	ldr	r3, [r7, #12]
 80054ae:	681b      	ldr	r3, [r3, #0]
 80054b0:	699b      	ldr	r3, [r3, #24]
 80054b2:	2240      	movs	r2, #64	; 0x40
 80054b4:	4013      	ands	r3, r2
 80054b6:	d102      	bne.n	80054be <HAL_RTC_SetAlarm_IT+0x42>
      assert_param(IS_RTC_HOUR12(sAlarm->AlarmTime.Hours));
      assert_param(IS_RTC_HOURFORMAT12(sAlarm->AlarmTime.TimeFormat));
    }
    else
    {
      sAlarm->AlarmTime.TimeFormat = 0x00U;
 80054b8:	68bb      	ldr	r3, [r7, #8]
 80054ba:	2200      	movs	r2, #0
 80054bc:	70da      	strb	r2, [r3, #3]
    }
    else
    {
      assert_param(IS_RTC_ALARM_DATE_WEEKDAY_WEEKDAY(sAlarm->AlarmDateWeekDay));
    }
    tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours) << RTC_ALRMAR_HU_Pos) | \
 80054be:	68bb      	ldr	r3, [r7, #8]
 80054c0:	781b      	ldrb	r3, [r3, #0]
 80054c2:	0018      	movs	r0, r3
 80054c4:	f000 fa06 	bl	80058d4 <RTC_ByteToBcd2>
 80054c8:	0003      	movs	r3, r0
 80054ca:	041c      	lsls	r4, r3, #16
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Minutes) << RTC_ALRMAR_MNU_Pos) | \
 80054cc:	68bb      	ldr	r3, [r7, #8]
 80054ce:	785b      	ldrb	r3, [r3, #1]
 80054d0:	0018      	movs	r0, r3
 80054d2:	f000 f9ff 	bl	80058d4 <RTC_ByteToBcd2>
 80054d6:	0003      	movs	r3, r0
 80054d8:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours) << RTC_ALRMAR_HU_Pos) | \
 80054da:	431c      	orrs	r4, r3
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Seconds) << RTC_ALRMAR_SU_Pos) | \
 80054dc:	68bb      	ldr	r3, [r7, #8]
 80054de:	789b      	ldrb	r3, [r3, #2]
 80054e0:	0018      	movs	r0, r3
 80054e2:	f000 f9f7 	bl	80058d4 <RTC_ByteToBcd2>
 80054e6:	0003      	movs	r3, r0
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Minutes) << RTC_ALRMAR_MNU_Pos) | \
 80054e8:	0022      	movs	r2, r4
 80054ea:	431a      	orrs	r2, r3
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << RTC_ALRMAR_PM_Pos) | \
 80054ec:	68bb      	ldr	r3, [r7, #8]
 80054ee:	78db      	ldrb	r3, [r3, #3]
 80054f0:	059b      	lsls	r3, r3, #22
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Seconds) << RTC_ALRMAR_SU_Pos) | \
 80054f2:	431a      	orrs	r2, r3
 80054f4:	0014      	movs	r4, r2
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmDateWeekDay) << RTC_ALRMAR_DU_Pos) | \
 80054f6:	68bb      	ldr	r3, [r7, #8]
 80054f8:	2220      	movs	r2, #32
 80054fa:	5c9b      	ldrb	r3, [r3, r2]
 80054fc:	0018      	movs	r0, r3
 80054fe:	f000 f9e9 	bl	80058d4 <RTC_ByteToBcd2>
 8005502:	0003      	movs	r3, r0
 8005504:	061b      	lsls	r3, r3, #24
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << RTC_ALRMAR_PM_Pos) | \
 8005506:	0022      	movs	r2, r4
 8005508:	431a      	orrs	r2, r3
              ((uint32_t)sAlarm->AlarmDateWeekDaySel) | \
 800550a:	68bb      	ldr	r3, [r7, #8]
 800550c:	69db      	ldr	r3, [r3, #28]
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmDateWeekDay) << RTC_ALRMAR_DU_Pos) | \
 800550e:	431a      	orrs	r2, r3
              ((uint32_t)sAlarm->AlarmMask));
 8005510:	68bb      	ldr	r3, [r7, #8]
 8005512:	695b      	ldr	r3, [r3, #20]
    tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours) << RTC_ALRMAR_HU_Pos) | \
 8005514:	4313      	orrs	r3, r2
 8005516:	61fb      	str	r3, [r7, #28]
 8005518:	e022      	b.n	8005560 <HAL_RTC_SetAlarm_IT+0xe4>
  }
  else
  {
    if((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 800551a:	68fb      	ldr	r3, [r7, #12]
 800551c:	681b      	ldr	r3, [r3, #0]
 800551e:	699b      	ldr	r3, [r3, #24]
 8005520:	2240      	movs	r2, #64	; 0x40
 8005522:	4013      	ands	r3, r2
 8005524:	d102      	bne.n	800552c <HAL_RTC_SetAlarm_IT+0xb0>
      assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sAlarm->AlarmTime.Hours)));
      assert_param(IS_RTC_HOURFORMAT12(sAlarm->AlarmTime.TimeFormat));
    }
    else
    {
      sAlarm->AlarmTime.TimeFormat = 0x00U;
 8005526:	68bb      	ldr	r3, [r7, #8]
 8005528:	2200      	movs	r2, #0
 800552a:	70da      	strb	r2, [r3, #3]
    }
    else
    {
      assert_param(IS_RTC_ALARM_DATE_WEEKDAY_WEEKDAY(RTC_Bcd2ToByte(sAlarm->AlarmDateWeekDay)));
    }
    tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours) << RTC_ALRMAR_HU_Pos) | \
 800552c:	68bb      	ldr	r3, [r7, #8]
 800552e:	781b      	ldrb	r3, [r3, #0]
 8005530:	041a      	lsls	r2, r3, #16
              ((uint32_t)(sAlarm->AlarmTime.Minutes) << RTC_ALRMAR_MNU_Pos) | \
 8005532:	68bb      	ldr	r3, [r7, #8]
 8005534:	785b      	ldrb	r3, [r3, #1]
 8005536:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours) << RTC_ALRMAR_HU_Pos) | \
 8005538:	4313      	orrs	r3, r2
              ((uint32_t)(sAlarm->AlarmTime.Seconds) << RTC_ALRMAR_SU_Pos) | \
 800553a:	68ba      	ldr	r2, [r7, #8]
 800553c:	7892      	ldrb	r2, [r2, #2]
              ((uint32_t)(sAlarm->AlarmTime.Minutes) << RTC_ALRMAR_MNU_Pos) | \
 800553e:	431a      	orrs	r2, r3
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << RTC_ALRMAR_PM_Pos) | \
 8005540:	68bb      	ldr	r3, [r7, #8]
 8005542:	78db      	ldrb	r3, [r3, #3]
 8005544:	059b      	lsls	r3, r3, #22
              ((uint32_t)(sAlarm->AlarmTime.Seconds) << RTC_ALRMAR_SU_Pos) | \
 8005546:	431a      	orrs	r2, r3
              ((uint32_t)(sAlarm->AlarmDateWeekDay) << RTC_ALRMAR_DU_Pos) | \
 8005548:	68bb      	ldr	r3, [r7, #8]
 800554a:	2120      	movs	r1, #32
 800554c:	5c5b      	ldrb	r3, [r3, r1]
 800554e:	061b      	lsls	r3, r3, #24
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << RTC_ALRMAR_PM_Pos) | \
 8005550:	431a      	orrs	r2, r3
              ((uint32_t)sAlarm->AlarmDateWeekDaySel) | \
 8005552:	68bb      	ldr	r3, [r7, #8]
 8005554:	69db      	ldr	r3, [r3, #28]
              ((uint32_t)(sAlarm->AlarmDateWeekDay) << RTC_ALRMAR_DU_Pos) | \
 8005556:	431a      	orrs	r2, r3
              ((uint32_t)sAlarm->AlarmMask));
 8005558:	68bb      	ldr	r3, [r7, #8]
 800555a:	695b      	ldr	r3, [r3, #20]
    tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours) << RTC_ALRMAR_HU_Pos) | \
 800555c:	4313      	orrs	r3, r2
 800555e:	61fb      	str	r3, [r7, #28]
  }
  /* Configure the Alarm A or Alarm B Sub Second registers */
  subsecondtmpreg = (uint32_t)((uint32_t)(sAlarm->AlarmTime.SubSeconds) | (uint32_t)(sAlarm->AlarmSubSecondMask));
 8005560:	68bb      	ldr	r3, [r7, #8]
 8005562:	685a      	ldr	r2, [r3, #4]
 8005564:	68bb      	ldr	r3, [r7, #8]
 8005566:	699b      	ldr	r3, [r3, #24]
 8005568:	4313      	orrs	r3, r2
 800556a:	61bb      	str	r3, [r7, #24]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800556c:	68fb      	ldr	r3, [r7, #12]
 800556e:	681b      	ldr	r3, [r3, #0]
 8005570:	22ca      	movs	r2, #202	; 0xca
 8005572:	625a      	str	r2, [r3, #36]	; 0x24
 8005574:	68fb      	ldr	r3, [r7, #12]
 8005576:	681b      	ldr	r3, [r3, #0]
 8005578:	2253      	movs	r2, #83	; 0x53
 800557a:	625a      	str	r2, [r3, #36]	; 0x24

  /* Configure the Alarm register */
  if(sAlarm->Alarm == RTC_ALARM_A)
 800557c:	68bb      	ldr	r3, [r7, #8]
 800557e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8005580:	2380      	movs	r3, #128	; 0x80
 8005582:	005b      	lsls	r3, r3, #1
 8005584:	429a      	cmp	r2, r3
 8005586:	d14c      	bne.n	8005622 <HAL_RTC_SetAlarm_IT+0x1a6>
  {
    /* Disable the Alarm A interrupt */
    __HAL_RTC_ALARMA_DISABLE(hrtc);
 8005588:	68fb      	ldr	r3, [r7, #12]
 800558a:	681b      	ldr	r3, [r3, #0]
 800558c:	699a      	ldr	r2, [r3, #24]
 800558e:	68fb      	ldr	r3, [r7, #12]
 8005590:	681b      	ldr	r3, [r3, #0]
 8005592:	4957      	ldr	r1, [pc, #348]	; (80056f0 <HAL_RTC_SetAlarm_IT+0x274>)
 8005594:	400a      	ands	r2, r1
 8005596:	619a      	str	r2, [r3, #24]

    /* Clear flag alarm A */
    __HAL_RTC_ALARM_CLEAR_FLAG(hrtc, RTC_FLAG_ALRAF);
 8005598:	68fb      	ldr	r3, [r7, #12]
 800559a:	681b      	ldr	r3, [r3, #0]
 800559c:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800559e:	68fb      	ldr	r3, [r7, #12]
 80055a0:	681b      	ldr	r3, [r3, #0]
 80055a2:	2101      	movs	r1, #1
 80055a4:	430a      	orrs	r2, r1
 80055a6:	65da      	str	r2, [r3, #92]	; 0x5c

    tickstart = HAL_GetTick();
 80055a8:	f7fe f9dc 	bl	8003964 <HAL_GetTick>
 80055ac:	0003      	movs	r3, r0
 80055ae:	617b      	str	r3, [r7, #20]
    /* Wait till RTC ALRAWF flag is set and if Time out is reached exit */
    while(__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRAWF) == 0U)
 80055b0:	e016      	b.n	80055e0 <HAL_RTC_SetAlarm_IT+0x164>
    {
      if((HAL_GetTick() - tickstart ) > RTC_TIMEOUT_VALUE)
 80055b2:	f7fe f9d7 	bl	8003964 <HAL_GetTick>
 80055b6:	0002      	movs	r2, r0
 80055b8:	697b      	ldr	r3, [r7, #20]
 80055ba:	1ad2      	subs	r2, r2, r3
 80055bc:	23fa      	movs	r3, #250	; 0xfa
 80055be:	009b      	lsls	r3, r3, #2
 80055c0:	429a      	cmp	r2, r3
 80055c2:	d90d      	bls.n	80055e0 <HAL_RTC_SetAlarm_IT+0x164>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80055c4:	68fb      	ldr	r3, [r7, #12]
 80055c6:	681b      	ldr	r3, [r3, #0]
 80055c8:	22ff      	movs	r2, #255	; 0xff
 80055ca:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 80055cc:	68fb      	ldr	r3, [r7, #12]
 80055ce:	2229      	movs	r2, #41	; 0x29
 80055d0:	2103      	movs	r1, #3
 80055d2:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 80055d4:	68fb      	ldr	r3, [r7, #12]
 80055d6:	2228      	movs	r2, #40	; 0x28
 80055d8:	2100      	movs	r1, #0
 80055da:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 80055dc:	2303      	movs	r3, #3
 80055de:	e082      	b.n	80056e6 <HAL_RTC_SetAlarm_IT+0x26a>
    while(__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRAWF) == 0U)
 80055e0:	68fb      	ldr	r3, [r7, #12]
 80055e2:	681b      	ldr	r3, [r3, #0]
 80055e4:	68db      	ldr	r3, [r3, #12]
 80055e6:	2201      	movs	r2, #1
 80055e8:	4013      	ands	r3, r2
 80055ea:	d0e2      	beq.n	80055b2 <HAL_RTC_SetAlarm_IT+0x136>
      }
    }

    hrtc->Instance->ALRMAR = (uint32_t)tmpreg;
 80055ec:	68fb      	ldr	r3, [r7, #12]
 80055ee:	681b      	ldr	r3, [r3, #0]
 80055f0:	69fa      	ldr	r2, [r7, #28]
 80055f2:	641a      	str	r2, [r3, #64]	; 0x40
    /* Configure the Alarm A Sub Second register */
    hrtc->Instance->ALRMASSR = subsecondtmpreg;
 80055f4:	68fb      	ldr	r3, [r7, #12]
 80055f6:	681b      	ldr	r3, [r3, #0]
 80055f8:	69ba      	ldr	r2, [r7, #24]
 80055fa:	645a      	str	r2, [r3, #68]	; 0x44
    /* Configure the Alarm state: Enable Alarm */
    __HAL_RTC_ALARMA_ENABLE(hrtc);
 80055fc:	68fb      	ldr	r3, [r7, #12]
 80055fe:	681b      	ldr	r3, [r3, #0]
 8005600:	699a      	ldr	r2, [r3, #24]
 8005602:	68fb      	ldr	r3, [r7, #12]
 8005604:	681b      	ldr	r3, [r3, #0]
 8005606:	2180      	movs	r1, #128	; 0x80
 8005608:	0049      	lsls	r1, r1, #1
 800560a:	430a      	orrs	r2, r1
 800560c:	619a      	str	r2, [r3, #24]
    /* Configure the Alarm interrupt */
    __HAL_RTC_ALARM_ENABLE_IT(hrtc,RTC_IT_ALRA);
 800560e:	68fb      	ldr	r3, [r7, #12]
 8005610:	681b      	ldr	r3, [r3, #0]
 8005612:	699a      	ldr	r2, [r3, #24]
 8005614:	68fb      	ldr	r3, [r7, #12]
 8005616:	681b      	ldr	r3, [r3, #0]
 8005618:	2180      	movs	r1, #128	; 0x80
 800561a:	0149      	lsls	r1, r1, #5
 800561c:	430a      	orrs	r2, r1
 800561e:	619a      	str	r2, [r3, #24]
 8005620:	e04b      	b.n	80056ba <HAL_RTC_SetAlarm_IT+0x23e>
  }
  else
  {
    /* Disable the Alarm B interrupt */
    __HAL_RTC_ALARMB_DISABLE(hrtc);
 8005622:	68fb      	ldr	r3, [r7, #12]
 8005624:	681b      	ldr	r3, [r3, #0]
 8005626:	699a      	ldr	r2, [r3, #24]
 8005628:	68fb      	ldr	r3, [r7, #12]
 800562a:	681b      	ldr	r3, [r3, #0]
 800562c:	4931      	ldr	r1, [pc, #196]	; (80056f4 <HAL_RTC_SetAlarm_IT+0x278>)
 800562e:	400a      	ands	r2, r1
 8005630:	619a      	str	r2, [r3, #24]

    /* Clear flag alarm B */
    __HAL_RTC_ALARM_CLEAR_FLAG(hrtc, RTC_CLEAR_ALRBF);
 8005632:	68fb      	ldr	r3, [r7, #12]
 8005634:	681b      	ldr	r3, [r3, #0]
 8005636:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8005638:	68fb      	ldr	r3, [r7, #12]
 800563a:	681b      	ldr	r3, [r3, #0]
 800563c:	2102      	movs	r1, #2
 800563e:	430a      	orrs	r2, r1
 8005640:	65da      	str	r2, [r3, #92]	; 0x5c

    tickstart = HAL_GetTick();
 8005642:	f7fe f98f 	bl	8003964 <HAL_GetTick>
 8005646:	0003      	movs	r3, r0
 8005648:	617b      	str	r3, [r7, #20]
    /* Wait till RTC ALRBWF flag is set and if Time out is reached exit */
    while(__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRBWF) == 0U)
 800564a:	e016      	b.n	800567a <HAL_RTC_SetAlarm_IT+0x1fe>
    {
      if((HAL_GetTick() - tickstart ) > RTC_TIMEOUT_VALUE)
 800564c:	f7fe f98a 	bl	8003964 <HAL_GetTick>
 8005650:	0002      	movs	r2, r0
 8005652:	697b      	ldr	r3, [r7, #20]
 8005654:	1ad2      	subs	r2, r2, r3
 8005656:	23fa      	movs	r3, #250	; 0xfa
 8005658:	009b      	lsls	r3, r3, #2
 800565a:	429a      	cmp	r2, r3
 800565c:	d90d      	bls.n	800567a <HAL_RTC_SetAlarm_IT+0x1fe>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800565e:	68fb      	ldr	r3, [r7, #12]
 8005660:	681b      	ldr	r3, [r3, #0]
 8005662:	22ff      	movs	r2, #255	; 0xff
 8005664:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8005666:	68fb      	ldr	r3, [r7, #12]
 8005668:	2229      	movs	r2, #41	; 0x29
 800566a:	2103      	movs	r1, #3
 800566c:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 800566e:	68fb      	ldr	r3, [r7, #12]
 8005670:	2228      	movs	r2, #40	; 0x28
 8005672:	2100      	movs	r1, #0
 8005674:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 8005676:	2303      	movs	r3, #3
 8005678:	e035      	b.n	80056e6 <HAL_RTC_SetAlarm_IT+0x26a>
    while(__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRBWF) == 0U)
 800567a:	68fb      	ldr	r3, [r7, #12]
 800567c:	681b      	ldr	r3, [r3, #0]
 800567e:	68db      	ldr	r3, [r3, #12]
 8005680:	2202      	movs	r2, #2
 8005682:	4013      	ands	r3, r2
 8005684:	d0e2      	beq.n	800564c <HAL_RTC_SetAlarm_IT+0x1d0>
      }
    }

    hrtc->Instance->ALRMBR = (uint32_t)tmpreg;
 8005686:	68fb      	ldr	r3, [r7, #12]
 8005688:	681b      	ldr	r3, [r3, #0]
 800568a:	69fa      	ldr	r2, [r7, #28]
 800568c:	649a      	str	r2, [r3, #72]	; 0x48
    /* Configure the Alarm B Sub Second register */
    hrtc->Instance->ALRMBSSR = subsecondtmpreg;
 800568e:	68fb      	ldr	r3, [r7, #12]
 8005690:	681b      	ldr	r3, [r3, #0]
 8005692:	69ba      	ldr	r2, [r7, #24]
 8005694:	64da      	str	r2, [r3, #76]	; 0x4c
    /* Configure the Alarm state: Enable Alarm */
    __HAL_RTC_ALARMB_ENABLE(hrtc);
 8005696:	68fb      	ldr	r3, [r7, #12]
 8005698:	681b      	ldr	r3, [r3, #0]
 800569a:	699a      	ldr	r2, [r3, #24]
 800569c:	68fb      	ldr	r3, [r7, #12]
 800569e:	681b      	ldr	r3, [r3, #0]
 80056a0:	2180      	movs	r1, #128	; 0x80
 80056a2:	0089      	lsls	r1, r1, #2
 80056a4:	430a      	orrs	r2, r1
 80056a6:	619a      	str	r2, [r3, #24]
    /* Configure the Alarm interrupt */
    __HAL_RTC_ALARM_ENABLE_IT(hrtc, RTC_IT_ALRB);
 80056a8:	68fb      	ldr	r3, [r7, #12]
 80056aa:	681b      	ldr	r3, [r3, #0]
 80056ac:	699a      	ldr	r2, [r3, #24]
 80056ae:	68fb      	ldr	r3, [r7, #12]
 80056b0:	681b      	ldr	r3, [r3, #0]
 80056b2:	2180      	movs	r1, #128	; 0x80
 80056b4:	0189      	lsls	r1, r1, #6
 80056b6:	430a      	orrs	r2, r1
 80056b8:	619a      	str	r2, [r3, #24]
  }

  /* RTC Alarm Interrupt Configuration: EXTI configuration */
  __HAL_RTC_ALARM_EXTI_ENABLE_IT();
 80056ba:	4a0f      	ldr	r2, [pc, #60]	; (80056f8 <HAL_RTC_SetAlarm_IT+0x27c>)
 80056bc:	2380      	movs	r3, #128	; 0x80
 80056be:	58d3      	ldr	r3, [r2, r3]
 80056c0:	490d      	ldr	r1, [pc, #52]	; (80056f8 <HAL_RTC_SetAlarm_IT+0x27c>)
 80056c2:	2280      	movs	r2, #128	; 0x80
 80056c4:	0312      	lsls	r2, r2, #12
 80056c6:	4313      	orrs	r3, r2
 80056c8:	2280      	movs	r2, #128	; 0x80
 80056ca:	508b      	str	r3, [r1, r2]

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80056cc:	68fb      	ldr	r3, [r7, #12]
 80056ce:	681b      	ldr	r3, [r3, #0]
 80056d0:	22ff      	movs	r2, #255	; 0xff
 80056d2:	625a      	str	r2, [r3, #36]	; 0x24

  hrtc->State = HAL_RTC_STATE_READY;
 80056d4:	68fb      	ldr	r3, [r7, #12]
 80056d6:	2229      	movs	r2, #41	; 0x29
 80056d8:	2101      	movs	r1, #1
 80056da:	5499      	strb	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 80056dc:	68fb      	ldr	r3, [r7, #12]
 80056de:	2228      	movs	r2, #40	; 0x28
 80056e0:	2100      	movs	r1, #0
 80056e2:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80056e4:	2300      	movs	r3, #0
}
 80056e6:	0018      	movs	r0, r3
 80056e8:	46bd      	mov	sp, r7
 80056ea:	b009      	add	sp, #36	; 0x24
 80056ec:	bd90      	pop	{r4, r7, pc}
 80056ee:	46c0      	nop			; (mov r8, r8)
 80056f0:	fffffeff 	.word	0xfffffeff
 80056f4:	fffffdff 	.word	0xfffffdff
 80056f8:	40021800 	.word	0x40021800

080056fc <HAL_RTC_AlarmIRQHandler>:
  * @brief  Handle Alarm interrupt request.
  * @param  hrtc RTC handle
  * @retval None
  */
void HAL_RTC_AlarmIRQHandler(RTC_HandleTypeDef* hrtc)
{
 80056fc:	b580      	push	{r7, lr}
 80056fe:	b082      	sub	sp, #8
 8005700:	af00      	add	r7, sp, #0
 8005702:	6078      	str	r0, [r7, #4]
  /* Get the AlarmA interrupt source enable status */
  if(__HAL_RTC_ALARM_GET_IT_SOURCE(hrtc, RTC_IT_ALRA) != 0U)
 8005704:	687b      	ldr	r3, [r7, #4]
 8005706:	681b      	ldr	r3, [r3, #0]
 8005708:	699a      	ldr	r2, [r3, #24]
 800570a:	2380      	movs	r3, #128	; 0x80
 800570c:	015b      	lsls	r3, r3, #5
 800570e:	4013      	ands	r3, r2
 8005710:	d011      	beq.n	8005736 <HAL_RTC_AlarmIRQHandler+0x3a>
  {
    /* Get the pending status of the AlarmA Interrupt */
    if(__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRAF) != 0U)
 8005712:	687b      	ldr	r3, [r7, #4]
 8005714:	681b      	ldr	r3, [r3, #0]
 8005716:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005718:	2201      	movs	r2, #1
 800571a:	4013      	ands	r3, r2
 800571c:	d00b      	beq.n	8005736 <HAL_RTC_AlarmIRQHandler+0x3a>
    {
      /* Clear the AlarmA interrupt pending bit */
      __HAL_RTC_ALARM_CLEAR_FLAG(hrtc, RTC_FLAG_ALRAF);
 800571e:	687b      	ldr	r3, [r7, #4]
 8005720:	681b      	ldr	r3, [r3, #0]
 8005722:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8005724:	687b      	ldr	r3, [r7, #4]
 8005726:	681b      	ldr	r3, [r3, #0]
 8005728:	2101      	movs	r1, #1
 800572a:	430a      	orrs	r2, r1
 800572c:	65da      	str	r2, [r3, #92]	; 0x5c
#if (USE_HAL_RTC_REGISTER_CALLBACKS == 1)
      /* Call Compare Match registered Callback */
      hrtc->AlarmAEventCallback(hrtc);
#else
      /* AlarmA callback */
      HAL_RTC_AlarmAEventCallback(hrtc);
 800572e:	687b      	ldr	r3, [r7, #4]
 8005730:	0018      	movs	r0, r3
 8005732:	f7fd fda9 	bl	8003288 <HAL_RTC_AlarmAEventCallback>
#endif /* USE_HAL_RTC_REGISTER_CALLBACKS */
    }
  }

  /* Get the AlarmB interrupt source enable status */
  if(__HAL_RTC_ALARM_GET_IT_SOURCE(hrtc, RTC_IT_ALRB) != 0U)
 8005736:	687b      	ldr	r3, [r7, #4]
 8005738:	681b      	ldr	r3, [r3, #0]
 800573a:	699a      	ldr	r2, [r3, #24]
 800573c:	2380      	movs	r3, #128	; 0x80
 800573e:	019b      	lsls	r3, r3, #6
 8005740:	4013      	ands	r3, r2
 8005742:	d011      	beq.n	8005768 <HAL_RTC_AlarmIRQHandler+0x6c>
  {
    /* Get the pending status of the AlarmB Interrupt */
    if(__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRBF) != 0U)
 8005744:	687b      	ldr	r3, [r7, #4]
 8005746:	681b      	ldr	r3, [r3, #0]
 8005748:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800574a:	2202      	movs	r2, #2
 800574c:	4013      	ands	r3, r2
 800574e:	d00b      	beq.n	8005768 <HAL_RTC_AlarmIRQHandler+0x6c>
    {
      /* Clear the AlarmB interrupt pending bit */
      __HAL_RTC_ALARM_CLEAR_FLAG(hrtc, RTC_CLEAR_ALRBF);
 8005750:	687b      	ldr	r3, [r7, #4]
 8005752:	681b      	ldr	r3, [r3, #0]
 8005754:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8005756:	687b      	ldr	r3, [r7, #4]
 8005758:	681b      	ldr	r3, [r3, #0]
 800575a:	2102      	movs	r1, #2
 800575c:	430a      	orrs	r2, r1
 800575e:	65da      	str	r2, [r3, #92]	; 0x5c
#if (USE_HAL_RTC_REGISTER_CALLBACKS == 1)
      /* Call Compare Match registered Callback */
      hrtc->AlarmBEventCallback(hrtc);
#else
      /* AlarmB callback */
      HAL_RTCEx_AlarmBEventCallback(hrtc);
 8005760:	687b      	ldr	r3, [r7, #4]
 8005762:	0018      	movs	r0, r3
 8005764:	f000 f8fb 	bl	800595e <HAL_RTCEx_AlarmBEventCallback>
#endif /* USE_HAL_RTC_REGISTER_CALLBACKS */
    }
  }

  /* Change RTC state */
  hrtc->State = HAL_RTC_STATE_READY;
 8005768:	687b      	ldr	r3, [r7, #4]
 800576a:	2229      	movs	r2, #41	; 0x29
 800576c:	2101      	movs	r1, #1
 800576e:	5499      	strb	r1, [r3, r2]
}
 8005770:	46c0      	nop			; (mov r8, r8)
 8005772:	46bd      	mov	sp, r7
 8005774:	b002      	add	sp, #8
 8005776:	bd80      	pop	{r7, pc}

08005778 <HAL_RTC_WaitForSynchro>:
  *         correctly copied into the RTC_TR and RTC_DR shadow registers.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef* hrtc)
{
 8005778:	b580      	push	{r7, lr}
 800577a:	b084      	sub	sp, #16
 800577c:	af00      	add	r7, sp, #0
 800577e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Clear RSF flag */
  hrtc->Instance->ICSR &= (uint32_t)RTC_RSF_MASK;
 8005780:	687b      	ldr	r3, [r7, #4]
 8005782:	681b      	ldr	r3, [r3, #0]
 8005784:	68da      	ldr	r2, [r3, #12]
 8005786:	687b      	ldr	r3, [r7, #4]
 8005788:	681b      	ldr	r3, [r3, #0]
 800578a:	21a0      	movs	r1, #160	; 0xa0
 800578c:	438a      	bics	r2, r1
 800578e:	60da      	str	r2, [r3, #12]

  tickstart = HAL_GetTick();
 8005790:	f7fe f8e8 	bl	8003964 <HAL_GetTick>
 8005794:	0003      	movs	r3, r0
 8005796:	60fb      	str	r3, [r7, #12]

  /* Wait the registers to be synchronised */
  while((hrtc->Instance->ICSR & RTC_ICSR_RSF) == 0U)
 8005798:	e00a      	b.n	80057b0 <HAL_RTC_WaitForSynchro+0x38>
  {
    if((HAL_GetTick() - tickstart ) > RTC_TIMEOUT_VALUE)
 800579a:	f7fe f8e3 	bl	8003964 <HAL_GetTick>
 800579e:	0002      	movs	r2, r0
 80057a0:	68fb      	ldr	r3, [r7, #12]
 80057a2:	1ad2      	subs	r2, r2, r3
 80057a4:	23fa      	movs	r3, #250	; 0xfa
 80057a6:	009b      	lsls	r3, r3, #2
 80057a8:	429a      	cmp	r2, r3
 80057aa:	d901      	bls.n	80057b0 <HAL_RTC_WaitForSynchro+0x38>
    {
      return HAL_TIMEOUT;
 80057ac:	2303      	movs	r3, #3
 80057ae:	e006      	b.n	80057be <HAL_RTC_WaitForSynchro+0x46>
  while((hrtc->Instance->ICSR & RTC_ICSR_RSF) == 0U)
 80057b0:	687b      	ldr	r3, [r7, #4]
 80057b2:	681b      	ldr	r3, [r3, #0]
 80057b4:	68db      	ldr	r3, [r3, #12]
 80057b6:	2220      	movs	r2, #32
 80057b8:	4013      	ands	r3, r2
 80057ba:	d0ee      	beq.n	800579a <HAL_RTC_WaitForSynchro+0x22>
    }
  }

  return HAL_OK;
 80057bc:	2300      	movs	r3, #0
}
 80057be:	0018      	movs	r0, r3
 80057c0:	46bd      	mov	sp, r7
 80057c2:	b004      	add	sp, #16
 80057c4:	bd80      	pop	{r7, pc}

080057c6 <RTC_EnterInitMode>:
  *         __HAL_RTC_WRITEPROTECTION_DISABLE() before calling this function.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef* hrtc)
{
 80057c6:	b580      	push	{r7, lr}
 80057c8:	b084      	sub	sp, #16
 80057ca:	af00      	add	r7, sp, #0
 80057cc:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;  
 80057ce:	230f      	movs	r3, #15
 80057d0:	18fb      	adds	r3, r7, r3
 80057d2:	2200      	movs	r2, #0
 80057d4:	701a      	strb	r2, [r3, #0]

  /* Check if the Initialization mode is set */
  if((hrtc->Instance->ICSR & RTC_ICSR_INITF) == 0U)
 80057d6:	687b      	ldr	r3, [r7, #4]
 80057d8:	681b      	ldr	r3, [r3, #0]
 80057da:	68db      	ldr	r3, [r3, #12]
 80057dc:	2240      	movs	r2, #64	; 0x40
 80057de:	4013      	ands	r3, r2
 80057e0:	d12c      	bne.n	800583c <RTC_EnterInitMode+0x76>
  {
    /* Set the Initialization mode */
    SET_BIT(hrtc->Instance->ICSR, RTC_ICSR_INIT);
 80057e2:	687b      	ldr	r3, [r7, #4]
 80057e4:	681b      	ldr	r3, [r3, #0]
 80057e6:	68da      	ldr	r2, [r3, #12]
 80057e8:	687b      	ldr	r3, [r7, #4]
 80057ea:	681b      	ldr	r3, [r3, #0]
 80057ec:	2180      	movs	r1, #128	; 0x80
 80057ee:	430a      	orrs	r2, r1
 80057f0:	60da      	str	r2, [r3, #12]

    tickstart = HAL_GetTick();
 80057f2:	f7fe f8b7 	bl	8003964 <HAL_GetTick>
 80057f6:	0003      	movs	r3, r0
 80057f8:	60bb      	str	r3, [r7, #8]
    /* Wait till RTC is in INIT state and if Time out is reached exit */
    while(((hrtc->Instance->ICSR & RTC_ICSR_INITF) == 0U) && (status != HAL_TIMEOUT))
 80057fa:	e014      	b.n	8005826 <RTC_EnterInitMode+0x60>
    {
      if((HAL_GetTick()  - tickstart ) > RTC_TIMEOUT_VALUE)
 80057fc:	f7fe f8b2 	bl	8003964 <HAL_GetTick>
 8005800:	0002      	movs	r2, r0
 8005802:	68bb      	ldr	r3, [r7, #8]
 8005804:	1ad2      	subs	r2, r2, r3
 8005806:	200f      	movs	r0, #15
 8005808:	183b      	adds	r3, r7, r0
 800580a:	1839      	adds	r1, r7, r0
 800580c:	7809      	ldrb	r1, [r1, #0]
 800580e:	7019      	strb	r1, [r3, #0]
 8005810:	23fa      	movs	r3, #250	; 0xfa
 8005812:	009b      	lsls	r3, r3, #2
 8005814:	429a      	cmp	r2, r3
 8005816:	d906      	bls.n	8005826 <RTC_EnterInitMode+0x60>
      {
        status = HAL_TIMEOUT;
 8005818:	183b      	adds	r3, r7, r0
 800581a:	2203      	movs	r2, #3
 800581c:	701a      	strb	r2, [r3, #0]
        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 800581e:	687b      	ldr	r3, [r7, #4]
 8005820:	2229      	movs	r2, #41	; 0x29
 8005822:	2103      	movs	r1, #3
 8005824:	5499      	strb	r1, [r3, r2]
    while(((hrtc->Instance->ICSR & RTC_ICSR_INITF) == 0U) && (status != HAL_TIMEOUT))
 8005826:	687b      	ldr	r3, [r7, #4]
 8005828:	681b      	ldr	r3, [r3, #0]
 800582a:	68db      	ldr	r3, [r3, #12]
 800582c:	2240      	movs	r2, #64	; 0x40
 800582e:	4013      	ands	r3, r2
 8005830:	d104      	bne.n	800583c <RTC_EnterInitMode+0x76>
 8005832:	230f      	movs	r3, #15
 8005834:	18fb      	adds	r3, r7, r3
 8005836:	781b      	ldrb	r3, [r3, #0]
 8005838:	2b03      	cmp	r3, #3
 800583a:	d1df      	bne.n	80057fc <RTC_EnterInitMode+0x36>
      }
    }
  }

  return status;
 800583c:	230f      	movs	r3, #15
 800583e:	18fb      	adds	r3, r7, r3
 8005840:	781b      	ldrb	r3, [r3, #0]
}
 8005842:	0018      	movs	r0, r3
 8005844:	46bd      	mov	sp, r7
 8005846:	b004      	add	sp, #16
 8005848:	bd80      	pop	{r7, pc}
	...

0800584c <RTC_ExitInitMode>:
  * @brief  Exit the RTC Initialization mode.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_ExitInitMode(RTC_HandleTypeDef *hrtc)
{
 800584c:	b590      	push	{r4, r7, lr}
 800584e:	b085      	sub	sp, #20
 8005850:	af00      	add	r7, sp, #0
 8005852:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8005854:	240f      	movs	r4, #15
 8005856:	193b      	adds	r3, r7, r4
 8005858:	2200      	movs	r2, #0
 800585a:	701a      	strb	r2, [r3, #0]

  /* Exit Initialization mode */
  CLEAR_BIT(RTC->ICSR, RTC_ICSR_INIT);
 800585c:	4b1c      	ldr	r3, [pc, #112]	; (80058d0 <RTC_ExitInitMode+0x84>)
 800585e:	68da      	ldr	r2, [r3, #12]
 8005860:	4b1b      	ldr	r3, [pc, #108]	; (80058d0 <RTC_ExitInitMode+0x84>)
 8005862:	2180      	movs	r1, #128	; 0x80
 8005864:	438a      	bics	r2, r1
 8005866:	60da      	str	r2, [r3, #12]

  /* If CR_BYPSHAD bit = 0, wait for synchro */
  if (READ_BIT(RTC->CR, RTC_CR_BYPSHAD) == 0U)
 8005868:	4b19      	ldr	r3, [pc, #100]	; (80058d0 <RTC_ExitInitMode+0x84>)
 800586a:	699b      	ldr	r3, [r3, #24]
 800586c:	2220      	movs	r2, #32
 800586e:	4013      	ands	r3, r2
 8005870:	d10d      	bne.n	800588e <RTC_ExitInitMode+0x42>
  {
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8005872:	687b      	ldr	r3, [r7, #4]
 8005874:	0018      	movs	r0, r3
 8005876:	f7ff ff7f 	bl	8005778 <HAL_RTC_WaitForSynchro>
 800587a:	1e03      	subs	r3, r0, #0
 800587c:	d021      	beq.n	80058c2 <RTC_ExitInitMode+0x76>
    {
      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 800587e:	687b      	ldr	r3, [r7, #4]
 8005880:	2229      	movs	r2, #41	; 0x29
 8005882:	2103      	movs	r1, #3
 8005884:	5499      	strb	r1, [r3, r2]
      status = HAL_TIMEOUT;
 8005886:	193b      	adds	r3, r7, r4
 8005888:	2203      	movs	r2, #3
 800588a:	701a      	strb	r2, [r3, #0]
 800588c:	e019      	b.n	80058c2 <RTC_ExitInitMode+0x76>
  }
  else /* WA 2.7.1 Calendar initialization may fail in case of consecutive INIT mode entry.
          Please look at STM32G0 Errata sheet on the internet for details. */
  {
    /* Clear BYPSHAD bit */
    CLEAR_BIT(RTC->CR, RTC_CR_BYPSHAD);
 800588e:	4b10      	ldr	r3, [pc, #64]	; (80058d0 <RTC_ExitInitMode+0x84>)
 8005890:	699a      	ldr	r2, [r3, #24]
 8005892:	4b0f      	ldr	r3, [pc, #60]	; (80058d0 <RTC_ExitInitMode+0x84>)
 8005894:	2120      	movs	r1, #32
 8005896:	438a      	bics	r2, r1
 8005898:	619a      	str	r2, [r3, #24]
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 800589a:	687b      	ldr	r3, [r7, #4]
 800589c:	0018      	movs	r0, r3
 800589e:	f7ff ff6b 	bl	8005778 <HAL_RTC_WaitForSynchro>
 80058a2:	1e03      	subs	r3, r0, #0
 80058a4:	d007      	beq.n	80058b6 <RTC_ExitInitMode+0x6a>
    {
      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 80058a6:	687b      	ldr	r3, [r7, #4]
 80058a8:	2229      	movs	r2, #41	; 0x29
 80058aa:	2103      	movs	r1, #3
 80058ac:	5499      	strb	r1, [r3, r2]
      status = HAL_TIMEOUT;
 80058ae:	230f      	movs	r3, #15
 80058b0:	18fb      	adds	r3, r7, r3
 80058b2:	2203      	movs	r2, #3
 80058b4:	701a      	strb	r2, [r3, #0]
    }
    /* Restore BYPSHAD bit */
    SET_BIT(RTC->CR, RTC_CR_BYPSHAD);
 80058b6:	4b06      	ldr	r3, [pc, #24]	; (80058d0 <RTC_ExitInitMode+0x84>)
 80058b8:	699a      	ldr	r2, [r3, #24]
 80058ba:	4b05      	ldr	r3, [pc, #20]	; (80058d0 <RTC_ExitInitMode+0x84>)
 80058bc:	2120      	movs	r1, #32
 80058be:	430a      	orrs	r2, r1
 80058c0:	619a      	str	r2, [r3, #24]
  }

  return status;
 80058c2:	230f      	movs	r3, #15
 80058c4:	18fb      	adds	r3, r7, r3
 80058c6:	781b      	ldrb	r3, [r3, #0]
}
 80058c8:	0018      	movs	r0, r3
 80058ca:	46bd      	mov	sp, r7
 80058cc:	b005      	add	sp, #20
 80058ce:	bd90      	pop	{r4, r7, pc}
 80058d0:	40002800 	.word	0x40002800

080058d4 <RTC_ByteToBcd2>:
  * @brief  Convert a 2 digit decimal to BCD format.
  * @param  Value Byte to be converted
  * @retval Converted byte
  */
uint8_t RTC_ByteToBcd2(uint8_t Value)
{
 80058d4:	b580      	push	{r7, lr}
 80058d6:	b084      	sub	sp, #16
 80058d8:	af00      	add	r7, sp, #0
 80058da:	0002      	movs	r2, r0
 80058dc:	1dfb      	adds	r3, r7, #7
 80058de:	701a      	strb	r2, [r3, #0]
  uint32_t bcdhigh = 0U;
 80058e0:	2300      	movs	r3, #0
 80058e2:	60fb      	str	r3, [r7, #12]
  uint8_t Param = Value;
 80058e4:	230b      	movs	r3, #11
 80058e6:	18fb      	adds	r3, r7, r3
 80058e8:	1dfa      	adds	r2, r7, #7
 80058ea:	7812      	ldrb	r2, [r2, #0]
 80058ec:	701a      	strb	r2, [r3, #0]

  while(Param >= 10U)
 80058ee:	e008      	b.n	8005902 <RTC_ByteToBcd2+0x2e>
  {
    bcdhigh++;
 80058f0:	68fb      	ldr	r3, [r7, #12]
 80058f2:	3301      	adds	r3, #1
 80058f4:	60fb      	str	r3, [r7, #12]
    Param -= 10U;
 80058f6:	220b      	movs	r2, #11
 80058f8:	18bb      	adds	r3, r7, r2
 80058fa:	18ba      	adds	r2, r7, r2
 80058fc:	7812      	ldrb	r2, [r2, #0]
 80058fe:	3a0a      	subs	r2, #10
 8005900:	701a      	strb	r2, [r3, #0]
  while(Param >= 10U)
 8005902:	210b      	movs	r1, #11
 8005904:	187b      	adds	r3, r7, r1
 8005906:	781b      	ldrb	r3, [r3, #0]
 8005908:	2b09      	cmp	r3, #9
 800590a:	d8f1      	bhi.n	80058f0 <RTC_ByteToBcd2+0x1c>
  }

  return  ((uint8_t)(bcdhigh << 4U) | Param);
 800590c:	68fb      	ldr	r3, [r7, #12]
 800590e:	b2db      	uxtb	r3, r3
 8005910:	011b      	lsls	r3, r3, #4
 8005912:	b2da      	uxtb	r2, r3
 8005914:	187b      	adds	r3, r7, r1
 8005916:	781b      	ldrb	r3, [r3, #0]
 8005918:	4313      	orrs	r3, r2
 800591a:	b2db      	uxtb	r3, r3
}
 800591c:	0018      	movs	r0, r3
 800591e:	46bd      	mov	sp, r7
 8005920:	b004      	add	sp, #16
 8005922:	bd80      	pop	{r7, pc}

08005924 <RTC_Bcd2ToByte>:
  * @brief  Convert from 2 digit BCD to Binary.
  * @param  Value BCD value to be converted
  * @retval Converted word
  */
uint8_t RTC_Bcd2ToByte(uint8_t Value)
{
 8005924:	b580      	push	{r7, lr}
 8005926:	b084      	sub	sp, #16
 8005928:	af00      	add	r7, sp, #0
 800592a:	0002      	movs	r2, r0
 800592c:	1dfb      	adds	r3, r7, #7
 800592e:	701a      	strb	r2, [r3, #0]
  uint32_t tmp;
  tmp = (((uint32_t)Value & 0xF0U) >> 4U) * 10U;
 8005930:	1dfb      	adds	r3, r7, #7
 8005932:	781b      	ldrb	r3, [r3, #0]
 8005934:	091b      	lsrs	r3, r3, #4
 8005936:	b2db      	uxtb	r3, r3
 8005938:	001a      	movs	r2, r3
 800593a:	0013      	movs	r3, r2
 800593c:	009b      	lsls	r3, r3, #2
 800593e:	189b      	adds	r3, r3, r2
 8005940:	005b      	lsls	r3, r3, #1
 8005942:	60fb      	str	r3, [r7, #12]
  return (uint8_t)(tmp + ((uint32_t)Value & 0x0FU));
 8005944:	68fb      	ldr	r3, [r7, #12]
 8005946:	b2da      	uxtb	r2, r3
 8005948:	1dfb      	adds	r3, r7, #7
 800594a:	781b      	ldrb	r3, [r3, #0]
 800594c:	210f      	movs	r1, #15
 800594e:	400b      	ands	r3, r1
 8005950:	b2db      	uxtb	r3, r3
 8005952:	18d3      	adds	r3, r2, r3
 8005954:	b2db      	uxtb	r3, r3
}
 8005956:	0018      	movs	r0, r3
 8005958:	46bd      	mov	sp, r7
 800595a:	b004      	add	sp, #16
 800595c:	bd80      	pop	{r7, pc}

0800595e <HAL_RTCEx_AlarmBEventCallback>:
  * @brief  Alarm B callback.
  * @param  hrtc RTC handle
  * @retval None
  */
__weak void HAL_RTCEx_AlarmBEventCallback(RTC_HandleTypeDef *hrtc)
{
 800595e:	b580      	push	{r7, lr}
 8005960:	b082      	sub	sp, #8
 8005962:	af00      	add	r7, sp, #0
 8005964:	6078      	str	r0, [r7, #4]
  UNUSED(hrtc);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_RTCEx_AlarmBEventCallback could be implemented in the user file
   */
}
 8005966:	46c0      	nop			; (mov r8, r8)
 8005968:	46bd      	mov	sp, r7
 800596a:	b002      	add	sp, #8
 800596c:	bd80      	pop	{r7, pc}

0800596e <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800596e:	b580      	push	{r7, lr}
 8005970:	b082      	sub	sp, #8
 8005972:	af00      	add	r7, sp, #0
 8005974:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005976:	687b      	ldr	r3, [r7, #4]
 8005978:	2b00      	cmp	r3, #0
 800597a:	d101      	bne.n	8005980 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800597c:	2301      	movs	r3, #1
 800597e:	e04a      	b.n	8005a16 <HAL_TIM_Base_Init+0xa8>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005980:	687b      	ldr	r3, [r7, #4]
 8005982:	223d      	movs	r2, #61	; 0x3d
 8005984:	5c9b      	ldrb	r3, [r3, r2]
 8005986:	b2db      	uxtb	r3, r3
 8005988:	2b00      	cmp	r3, #0
 800598a:	d107      	bne.n	800599c <HAL_TIM_Base_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800598c:	687b      	ldr	r3, [r7, #4]
 800598e:	223c      	movs	r2, #60	; 0x3c
 8005990:	2100      	movs	r1, #0
 8005992:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8005994:	687b      	ldr	r3, [r7, #4]
 8005996:	0018      	movs	r0, r3
 8005998:	f7fd fd36 	bl	8003408 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800599c:	687b      	ldr	r3, [r7, #4]
 800599e:	223d      	movs	r2, #61	; 0x3d
 80059a0:	2102      	movs	r1, #2
 80059a2:	5499      	strb	r1, [r3, r2]

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80059a4:	687b      	ldr	r3, [r7, #4]
 80059a6:	681a      	ldr	r2, [r3, #0]
 80059a8:	687b      	ldr	r3, [r7, #4]
 80059aa:	3304      	adds	r3, #4
 80059ac:	0019      	movs	r1, r3
 80059ae:	0010      	movs	r0, r2
 80059b0:	f000 fa18 	bl	8005de4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80059b4:	687b      	ldr	r3, [r7, #4]
 80059b6:	2248      	movs	r2, #72	; 0x48
 80059b8:	2101      	movs	r1, #1
 80059ba:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80059bc:	687b      	ldr	r3, [r7, #4]
 80059be:	223e      	movs	r2, #62	; 0x3e
 80059c0:	2101      	movs	r1, #1
 80059c2:	5499      	strb	r1, [r3, r2]
 80059c4:	687b      	ldr	r3, [r7, #4]
 80059c6:	223f      	movs	r2, #63	; 0x3f
 80059c8:	2101      	movs	r1, #1
 80059ca:	5499      	strb	r1, [r3, r2]
 80059cc:	687b      	ldr	r3, [r7, #4]
 80059ce:	2240      	movs	r2, #64	; 0x40
 80059d0:	2101      	movs	r1, #1
 80059d2:	5499      	strb	r1, [r3, r2]
 80059d4:	687b      	ldr	r3, [r7, #4]
 80059d6:	2241      	movs	r2, #65	; 0x41
 80059d8:	2101      	movs	r1, #1
 80059da:	5499      	strb	r1, [r3, r2]
 80059dc:	687b      	ldr	r3, [r7, #4]
 80059de:	2242      	movs	r2, #66	; 0x42
 80059e0:	2101      	movs	r1, #1
 80059e2:	5499      	strb	r1, [r3, r2]
 80059e4:	687b      	ldr	r3, [r7, #4]
 80059e6:	2243      	movs	r2, #67	; 0x43
 80059e8:	2101      	movs	r1, #1
 80059ea:	5499      	strb	r1, [r3, r2]
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80059ec:	687b      	ldr	r3, [r7, #4]
 80059ee:	2244      	movs	r2, #68	; 0x44
 80059f0:	2101      	movs	r1, #1
 80059f2:	5499      	strb	r1, [r3, r2]
 80059f4:	687b      	ldr	r3, [r7, #4]
 80059f6:	2245      	movs	r2, #69	; 0x45
 80059f8:	2101      	movs	r1, #1
 80059fa:	5499      	strb	r1, [r3, r2]
 80059fc:	687b      	ldr	r3, [r7, #4]
 80059fe:	2246      	movs	r2, #70	; 0x46
 8005a00:	2101      	movs	r1, #1
 8005a02:	5499      	strb	r1, [r3, r2]
 8005a04:	687b      	ldr	r3, [r7, #4]
 8005a06:	2247      	movs	r2, #71	; 0x47
 8005a08:	2101      	movs	r1, #1
 8005a0a:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005a0c:	687b      	ldr	r3, [r7, #4]
 8005a0e:	223d      	movs	r2, #61	; 0x3d
 8005a10:	2101      	movs	r1, #1
 8005a12:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8005a14:	2300      	movs	r3, #0
}
 8005a16:	0018      	movs	r0, r3
 8005a18:	46bd      	mov	sp, r7
 8005a1a:	b002      	add	sp, #8
 8005a1c:	bd80      	pop	{r7, pc}
	...

08005a20 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8005a20:	b580      	push	{r7, lr}
 8005a22:	b084      	sub	sp, #16
 8005a24:	af00      	add	r7, sp, #0
 8005a26:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8005a28:	687b      	ldr	r3, [r7, #4]
 8005a2a:	223d      	movs	r2, #61	; 0x3d
 8005a2c:	5c9b      	ldrb	r3, [r3, r2]
 8005a2e:	b2db      	uxtb	r3, r3
 8005a30:	2b01      	cmp	r3, #1
 8005a32:	d001      	beq.n	8005a38 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8005a34:	2301      	movs	r3, #1
 8005a36:	e047      	b.n	8005ac8 <HAL_TIM_Base_Start_IT+0xa8>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005a38:	687b      	ldr	r3, [r7, #4]
 8005a3a:	223d      	movs	r2, #61	; 0x3d
 8005a3c:	2102      	movs	r1, #2
 8005a3e:	5499      	strb	r1, [r3, r2]

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8005a40:	687b      	ldr	r3, [r7, #4]
 8005a42:	681b      	ldr	r3, [r3, #0]
 8005a44:	68da      	ldr	r2, [r3, #12]
 8005a46:	687b      	ldr	r3, [r7, #4]
 8005a48:	681b      	ldr	r3, [r3, #0]
 8005a4a:	2101      	movs	r1, #1
 8005a4c:	430a      	orrs	r2, r1
 8005a4e:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005a50:	687b      	ldr	r3, [r7, #4]
 8005a52:	681b      	ldr	r3, [r3, #0]
 8005a54:	4a1e      	ldr	r2, [pc, #120]	; (8005ad0 <HAL_TIM_Base_Start_IT+0xb0>)
 8005a56:	4293      	cmp	r3, r2
 8005a58:	d014      	beq.n	8005a84 <HAL_TIM_Base_Start_IT+0x64>
 8005a5a:	687b      	ldr	r3, [r7, #4]
 8005a5c:	681a      	ldr	r2, [r3, #0]
 8005a5e:	2380      	movs	r3, #128	; 0x80
 8005a60:	05db      	lsls	r3, r3, #23
 8005a62:	429a      	cmp	r2, r3
 8005a64:	d00e      	beq.n	8005a84 <HAL_TIM_Base_Start_IT+0x64>
 8005a66:	687b      	ldr	r3, [r7, #4]
 8005a68:	681b      	ldr	r3, [r3, #0]
 8005a6a:	4a1a      	ldr	r2, [pc, #104]	; (8005ad4 <HAL_TIM_Base_Start_IT+0xb4>)
 8005a6c:	4293      	cmp	r3, r2
 8005a6e:	d009      	beq.n	8005a84 <HAL_TIM_Base_Start_IT+0x64>
 8005a70:	687b      	ldr	r3, [r7, #4]
 8005a72:	681b      	ldr	r3, [r3, #0]
 8005a74:	4a18      	ldr	r2, [pc, #96]	; (8005ad8 <HAL_TIM_Base_Start_IT+0xb8>)
 8005a76:	4293      	cmp	r3, r2
 8005a78:	d004      	beq.n	8005a84 <HAL_TIM_Base_Start_IT+0x64>
 8005a7a:	687b      	ldr	r3, [r7, #4]
 8005a7c:	681b      	ldr	r3, [r3, #0]
 8005a7e:	4a17      	ldr	r2, [pc, #92]	; (8005adc <HAL_TIM_Base_Start_IT+0xbc>)
 8005a80:	4293      	cmp	r3, r2
 8005a82:	d116      	bne.n	8005ab2 <HAL_TIM_Base_Start_IT+0x92>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005a84:	687b      	ldr	r3, [r7, #4]
 8005a86:	681b      	ldr	r3, [r3, #0]
 8005a88:	689b      	ldr	r3, [r3, #8]
 8005a8a:	4a15      	ldr	r2, [pc, #84]	; (8005ae0 <HAL_TIM_Base_Start_IT+0xc0>)
 8005a8c:	4013      	ands	r3, r2
 8005a8e:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005a90:	68fb      	ldr	r3, [r7, #12]
 8005a92:	2b06      	cmp	r3, #6
 8005a94:	d016      	beq.n	8005ac4 <HAL_TIM_Base_Start_IT+0xa4>
 8005a96:	68fa      	ldr	r2, [r7, #12]
 8005a98:	2380      	movs	r3, #128	; 0x80
 8005a9a:	025b      	lsls	r3, r3, #9
 8005a9c:	429a      	cmp	r2, r3
 8005a9e:	d011      	beq.n	8005ac4 <HAL_TIM_Base_Start_IT+0xa4>
    {
      __HAL_TIM_ENABLE(htim);
 8005aa0:	687b      	ldr	r3, [r7, #4]
 8005aa2:	681b      	ldr	r3, [r3, #0]
 8005aa4:	681a      	ldr	r2, [r3, #0]
 8005aa6:	687b      	ldr	r3, [r7, #4]
 8005aa8:	681b      	ldr	r3, [r3, #0]
 8005aaa:	2101      	movs	r1, #1
 8005aac:	430a      	orrs	r2, r1
 8005aae:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005ab0:	e008      	b.n	8005ac4 <HAL_TIM_Base_Start_IT+0xa4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8005ab2:	687b      	ldr	r3, [r7, #4]
 8005ab4:	681b      	ldr	r3, [r3, #0]
 8005ab6:	681a      	ldr	r2, [r3, #0]
 8005ab8:	687b      	ldr	r3, [r7, #4]
 8005aba:	681b      	ldr	r3, [r3, #0]
 8005abc:	2101      	movs	r1, #1
 8005abe:	430a      	orrs	r2, r1
 8005ac0:	601a      	str	r2, [r3, #0]
 8005ac2:	e000      	b.n	8005ac6 <HAL_TIM_Base_Start_IT+0xa6>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005ac4:	46c0      	nop			; (mov r8, r8)
  }

  /* Return function status */
  return HAL_OK;
 8005ac6:	2300      	movs	r3, #0
}
 8005ac8:	0018      	movs	r0, r3
 8005aca:	46bd      	mov	sp, r7
 8005acc:	b004      	add	sp, #16
 8005ace:	bd80      	pop	{r7, pc}
 8005ad0:	40012c00 	.word	0x40012c00
 8005ad4:	40000400 	.word	0x40000400
 8005ad8:	40000800 	.word	0x40000800
 8005adc:	40014000 	.word	0x40014000
 8005ae0:	00010007 	.word	0x00010007

08005ae4 <HAL_TIM_Base_Stop_IT>:
  * @brief  Stops the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Stop_IT(TIM_HandleTypeDef *htim)
{
 8005ae4:	b580      	push	{r7, lr}
 8005ae6:	b082      	sub	sp, #8
 8005ae8:	af00      	add	r7, sp, #0
 8005aea:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Disable the TIM Update interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_UPDATE);
 8005aec:	687b      	ldr	r3, [r7, #4]
 8005aee:	681b      	ldr	r3, [r3, #0]
 8005af0:	68da      	ldr	r2, [r3, #12]
 8005af2:	687b      	ldr	r3, [r7, #4]
 8005af4:	681b      	ldr	r3, [r3, #0]
 8005af6:	2101      	movs	r1, #1
 8005af8:	438a      	bics	r2, r1
 8005afa:	60da      	str	r2, [r3, #12]

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8005afc:	687b      	ldr	r3, [r7, #4]
 8005afe:	681b      	ldr	r3, [r3, #0]
 8005b00:	6a1b      	ldr	r3, [r3, #32]
 8005b02:	4a0d      	ldr	r2, [pc, #52]	; (8005b38 <HAL_TIM_Base_Stop_IT+0x54>)
 8005b04:	4013      	ands	r3, r2
 8005b06:	d10d      	bne.n	8005b24 <HAL_TIM_Base_Stop_IT+0x40>
 8005b08:	687b      	ldr	r3, [r7, #4]
 8005b0a:	681b      	ldr	r3, [r3, #0]
 8005b0c:	6a1b      	ldr	r3, [r3, #32]
 8005b0e:	4a0b      	ldr	r2, [pc, #44]	; (8005b3c <HAL_TIM_Base_Stop_IT+0x58>)
 8005b10:	4013      	ands	r3, r2
 8005b12:	d107      	bne.n	8005b24 <HAL_TIM_Base_Stop_IT+0x40>
 8005b14:	687b      	ldr	r3, [r7, #4]
 8005b16:	681b      	ldr	r3, [r3, #0]
 8005b18:	681a      	ldr	r2, [r3, #0]
 8005b1a:	687b      	ldr	r3, [r7, #4]
 8005b1c:	681b      	ldr	r3, [r3, #0]
 8005b1e:	2101      	movs	r1, #1
 8005b20:	438a      	bics	r2, r1
 8005b22:	601a      	str	r2, [r3, #0]

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_READY;
 8005b24:	687b      	ldr	r3, [r7, #4]
 8005b26:	223d      	movs	r2, #61	; 0x3d
 8005b28:	2101      	movs	r1, #1
 8005b2a:	5499      	strb	r1, [r3, r2]

  /* Return function status */
  return HAL_OK;
 8005b2c:	2300      	movs	r3, #0
}
 8005b2e:	0018      	movs	r0, r3
 8005b30:	46bd      	mov	sp, r7
 8005b32:	b002      	add	sp, #8
 8005b34:	bd80      	pop	{r7, pc}
 8005b36:	46c0      	nop			; (mov r8, r8)
 8005b38:	00001111 	.word	0x00001111
 8005b3c:	00000444 	.word	0x00000444

08005b40 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8005b40:	b580      	push	{r7, lr}
 8005b42:	b082      	sub	sp, #8
 8005b44:	af00      	add	r7, sp, #0
 8005b46:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8005b48:	687b      	ldr	r3, [r7, #4]
 8005b4a:	681b      	ldr	r3, [r3, #0]
 8005b4c:	691b      	ldr	r3, [r3, #16]
 8005b4e:	2202      	movs	r2, #2
 8005b50:	4013      	ands	r3, r2
 8005b52:	2b02      	cmp	r3, #2
 8005b54:	d124      	bne.n	8005ba0 <HAL_TIM_IRQHandler+0x60>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8005b56:	687b      	ldr	r3, [r7, #4]
 8005b58:	681b      	ldr	r3, [r3, #0]
 8005b5a:	68db      	ldr	r3, [r3, #12]
 8005b5c:	2202      	movs	r2, #2
 8005b5e:	4013      	ands	r3, r2
 8005b60:	2b02      	cmp	r3, #2
 8005b62:	d11d      	bne.n	8005ba0 <HAL_TIM_IRQHandler+0x60>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8005b64:	687b      	ldr	r3, [r7, #4]
 8005b66:	681b      	ldr	r3, [r3, #0]
 8005b68:	2203      	movs	r2, #3
 8005b6a:	4252      	negs	r2, r2
 8005b6c:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8005b6e:	687b      	ldr	r3, [r7, #4]
 8005b70:	2201      	movs	r2, #1
 8005b72:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8005b74:	687b      	ldr	r3, [r7, #4]
 8005b76:	681b      	ldr	r3, [r3, #0]
 8005b78:	699b      	ldr	r3, [r3, #24]
 8005b7a:	2203      	movs	r2, #3
 8005b7c:	4013      	ands	r3, r2
 8005b7e:	d004      	beq.n	8005b8a <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8005b80:	687b      	ldr	r3, [r7, #4]
 8005b82:	0018      	movs	r0, r3
 8005b84:	f000 f916 	bl	8005db4 <HAL_TIM_IC_CaptureCallback>
 8005b88:	e007      	b.n	8005b9a <HAL_TIM_IRQHandler+0x5a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8005b8a:	687b      	ldr	r3, [r7, #4]
 8005b8c:	0018      	movs	r0, r3
 8005b8e:	f000 f909 	bl	8005da4 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005b92:	687b      	ldr	r3, [r7, #4]
 8005b94:	0018      	movs	r0, r3
 8005b96:	f000 f915 	bl	8005dc4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005b9a:	687b      	ldr	r3, [r7, #4]
 8005b9c:	2200      	movs	r2, #0
 8005b9e:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8005ba0:	687b      	ldr	r3, [r7, #4]
 8005ba2:	681b      	ldr	r3, [r3, #0]
 8005ba4:	691b      	ldr	r3, [r3, #16]
 8005ba6:	2204      	movs	r2, #4
 8005ba8:	4013      	ands	r3, r2
 8005baa:	2b04      	cmp	r3, #4
 8005bac:	d125      	bne.n	8005bfa <HAL_TIM_IRQHandler+0xba>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8005bae:	687b      	ldr	r3, [r7, #4]
 8005bb0:	681b      	ldr	r3, [r3, #0]
 8005bb2:	68db      	ldr	r3, [r3, #12]
 8005bb4:	2204      	movs	r2, #4
 8005bb6:	4013      	ands	r3, r2
 8005bb8:	2b04      	cmp	r3, #4
 8005bba:	d11e      	bne.n	8005bfa <HAL_TIM_IRQHandler+0xba>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8005bbc:	687b      	ldr	r3, [r7, #4]
 8005bbe:	681b      	ldr	r3, [r3, #0]
 8005bc0:	2205      	movs	r2, #5
 8005bc2:	4252      	negs	r2, r2
 8005bc4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8005bc6:	687b      	ldr	r3, [r7, #4]
 8005bc8:	2202      	movs	r2, #2
 8005bca:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8005bcc:	687b      	ldr	r3, [r7, #4]
 8005bce:	681b      	ldr	r3, [r3, #0]
 8005bd0:	699a      	ldr	r2, [r3, #24]
 8005bd2:	23c0      	movs	r3, #192	; 0xc0
 8005bd4:	009b      	lsls	r3, r3, #2
 8005bd6:	4013      	ands	r3, r2
 8005bd8:	d004      	beq.n	8005be4 <HAL_TIM_IRQHandler+0xa4>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005bda:	687b      	ldr	r3, [r7, #4]
 8005bdc:	0018      	movs	r0, r3
 8005bde:	f000 f8e9 	bl	8005db4 <HAL_TIM_IC_CaptureCallback>
 8005be2:	e007      	b.n	8005bf4 <HAL_TIM_IRQHandler+0xb4>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005be4:	687b      	ldr	r3, [r7, #4]
 8005be6:	0018      	movs	r0, r3
 8005be8:	f000 f8dc 	bl	8005da4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005bec:	687b      	ldr	r3, [r7, #4]
 8005bee:	0018      	movs	r0, r3
 8005bf0:	f000 f8e8 	bl	8005dc4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005bf4:	687b      	ldr	r3, [r7, #4]
 8005bf6:	2200      	movs	r2, #0
 8005bf8:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8005bfa:	687b      	ldr	r3, [r7, #4]
 8005bfc:	681b      	ldr	r3, [r3, #0]
 8005bfe:	691b      	ldr	r3, [r3, #16]
 8005c00:	2208      	movs	r2, #8
 8005c02:	4013      	ands	r3, r2
 8005c04:	2b08      	cmp	r3, #8
 8005c06:	d124      	bne.n	8005c52 <HAL_TIM_IRQHandler+0x112>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8005c08:	687b      	ldr	r3, [r7, #4]
 8005c0a:	681b      	ldr	r3, [r3, #0]
 8005c0c:	68db      	ldr	r3, [r3, #12]
 8005c0e:	2208      	movs	r2, #8
 8005c10:	4013      	ands	r3, r2
 8005c12:	2b08      	cmp	r3, #8
 8005c14:	d11d      	bne.n	8005c52 <HAL_TIM_IRQHandler+0x112>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8005c16:	687b      	ldr	r3, [r7, #4]
 8005c18:	681b      	ldr	r3, [r3, #0]
 8005c1a:	2209      	movs	r2, #9
 8005c1c:	4252      	negs	r2, r2
 8005c1e:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8005c20:	687b      	ldr	r3, [r7, #4]
 8005c22:	2204      	movs	r2, #4
 8005c24:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8005c26:	687b      	ldr	r3, [r7, #4]
 8005c28:	681b      	ldr	r3, [r3, #0]
 8005c2a:	69db      	ldr	r3, [r3, #28]
 8005c2c:	2203      	movs	r2, #3
 8005c2e:	4013      	ands	r3, r2
 8005c30:	d004      	beq.n	8005c3c <HAL_TIM_IRQHandler+0xfc>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005c32:	687b      	ldr	r3, [r7, #4]
 8005c34:	0018      	movs	r0, r3
 8005c36:	f000 f8bd 	bl	8005db4 <HAL_TIM_IC_CaptureCallback>
 8005c3a:	e007      	b.n	8005c4c <HAL_TIM_IRQHandler+0x10c>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005c3c:	687b      	ldr	r3, [r7, #4]
 8005c3e:	0018      	movs	r0, r3
 8005c40:	f000 f8b0 	bl	8005da4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005c44:	687b      	ldr	r3, [r7, #4]
 8005c46:	0018      	movs	r0, r3
 8005c48:	f000 f8bc 	bl	8005dc4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005c4c:	687b      	ldr	r3, [r7, #4]
 8005c4e:	2200      	movs	r2, #0
 8005c50:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8005c52:	687b      	ldr	r3, [r7, #4]
 8005c54:	681b      	ldr	r3, [r3, #0]
 8005c56:	691b      	ldr	r3, [r3, #16]
 8005c58:	2210      	movs	r2, #16
 8005c5a:	4013      	ands	r3, r2
 8005c5c:	2b10      	cmp	r3, #16
 8005c5e:	d125      	bne.n	8005cac <HAL_TIM_IRQHandler+0x16c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8005c60:	687b      	ldr	r3, [r7, #4]
 8005c62:	681b      	ldr	r3, [r3, #0]
 8005c64:	68db      	ldr	r3, [r3, #12]
 8005c66:	2210      	movs	r2, #16
 8005c68:	4013      	ands	r3, r2
 8005c6a:	2b10      	cmp	r3, #16
 8005c6c:	d11e      	bne.n	8005cac <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8005c6e:	687b      	ldr	r3, [r7, #4]
 8005c70:	681b      	ldr	r3, [r3, #0]
 8005c72:	2211      	movs	r2, #17
 8005c74:	4252      	negs	r2, r2
 8005c76:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8005c78:	687b      	ldr	r3, [r7, #4]
 8005c7a:	2208      	movs	r2, #8
 8005c7c:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8005c7e:	687b      	ldr	r3, [r7, #4]
 8005c80:	681b      	ldr	r3, [r3, #0]
 8005c82:	69da      	ldr	r2, [r3, #28]
 8005c84:	23c0      	movs	r3, #192	; 0xc0
 8005c86:	009b      	lsls	r3, r3, #2
 8005c88:	4013      	ands	r3, r2
 8005c8a:	d004      	beq.n	8005c96 <HAL_TIM_IRQHandler+0x156>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005c8c:	687b      	ldr	r3, [r7, #4]
 8005c8e:	0018      	movs	r0, r3
 8005c90:	f000 f890 	bl	8005db4 <HAL_TIM_IC_CaptureCallback>
 8005c94:	e007      	b.n	8005ca6 <HAL_TIM_IRQHandler+0x166>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005c96:	687b      	ldr	r3, [r7, #4]
 8005c98:	0018      	movs	r0, r3
 8005c9a:	f000 f883 	bl	8005da4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005c9e:	687b      	ldr	r3, [r7, #4]
 8005ca0:	0018      	movs	r0, r3
 8005ca2:	f000 f88f 	bl	8005dc4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005ca6:	687b      	ldr	r3, [r7, #4]
 8005ca8:	2200      	movs	r2, #0
 8005caa:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8005cac:	687b      	ldr	r3, [r7, #4]
 8005cae:	681b      	ldr	r3, [r3, #0]
 8005cb0:	691b      	ldr	r3, [r3, #16]
 8005cb2:	2201      	movs	r2, #1
 8005cb4:	4013      	ands	r3, r2
 8005cb6:	2b01      	cmp	r3, #1
 8005cb8:	d10f      	bne.n	8005cda <HAL_TIM_IRQHandler+0x19a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8005cba:	687b      	ldr	r3, [r7, #4]
 8005cbc:	681b      	ldr	r3, [r3, #0]
 8005cbe:	68db      	ldr	r3, [r3, #12]
 8005cc0:	2201      	movs	r2, #1
 8005cc2:	4013      	ands	r3, r2
 8005cc4:	2b01      	cmp	r3, #1
 8005cc6:	d108      	bne.n	8005cda <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8005cc8:	687b      	ldr	r3, [r7, #4]
 8005cca:	681b      	ldr	r3, [r3, #0]
 8005ccc:	2202      	movs	r2, #2
 8005cce:	4252      	negs	r2, r2
 8005cd0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8005cd2:	687b      	ldr	r3, [r7, #4]
 8005cd4:	0018      	movs	r0, r3
 8005cd6:	f7fd fae5 	bl	80032a4 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8005cda:	687b      	ldr	r3, [r7, #4]
 8005cdc:	681b      	ldr	r3, [r3, #0]
 8005cde:	691b      	ldr	r3, [r3, #16]
 8005ce0:	2280      	movs	r2, #128	; 0x80
 8005ce2:	4013      	ands	r3, r2
 8005ce4:	2b80      	cmp	r3, #128	; 0x80
 8005ce6:	d10f      	bne.n	8005d08 <HAL_TIM_IRQHandler+0x1c8>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8005ce8:	687b      	ldr	r3, [r7, #4]
 8005cea:	681b      	ldr	r3, [r3, #0]
 8005cec:	68db      	ldr	r3, [r3, #12]
 8005cee:	2280      	movs	r2, #128	; 0x80
 8005cf0:	4013      	ands	r3, r2
 8005cf2:	2b80      	cmp	r3, #128	; 0x80
 8005cf4:	d108      	bne.n	8005d08 <HAL_TIM_IRQHandler+0x1c8>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8005cf6:	687b      	ldr	r3, [r7, #4]
 8005cf8:	681b      	ldr	r3, [r3, #0]
 8005cfa:	2281      	movs	r2, #129	; 0x81
 8005cfc:	4252      	negs	r2, r2
 8005cfe:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8005d00:	687b      	ldr	r3, [r7, #4]
 8005d02:	0018      	movs	r0, r3
 8005d04:	f000 f976 	bl	8005ff4 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8005d08:	687b      	ldr	r3, [r7, #4]
 8005d0a:	681b      	ldr	r3, [r3, #0]
 8005d0c:	691a      	ldr	r2, [r3, #16]
 8005d0e:	2380      	movs	r3, #128	; 0x80
 8005d10:	005b      	lsls	r3, r3, #1
 8005d12:	401a      	ands	r2, r3
 8005d14:	2380      	movs	r3, #128	; 0x80
 8005d16:	005b      	lsls	r3, r3, #1
 8005d18:	429a      	cmp	r2, r3
 8005d1a:	d10e      	bne.n	8005d3a <HAL_TIM_IRQHandler+0x1fa>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8005d1c:	687b      	ldr	r3, [r7, #4]
 8005d1e:	681b      	ldr	r3, [r3, #0]
 8005d20:	68db      	ldr	r3, [r3, #12]
 8005d22:	2280      	movs	r2, #128	; 0x80
 8005d24:	4013      	ands	r3, r2
 8005d26:	2b80      	cmp	r3, #128	; 0x80
 8005d28:	d107      	bne.n	8005d3a <HAL_TIM_IRQHandler+0x1fa>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8005d2a:	687b      	ldr	r3, [r7, #4]
 8005d2c:	681b      	ldr	r3, [r3, #0]
 8005d2e:	4a1c      	ldr	r2, [pc, #112]	; (8005da0 <HAL_TIM_IRQHandler+0x260>)
 8005d30:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8005d32:	687b      	ldr	r3, [r7, #4]
 8005d34:	0018      	movs	r0, r3
 8005d36:	f000 f965 	bl	8006004 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8005d3a:	687b      	ldr	r3, [r7, #4]
 8005d3c:	681b      	ldr	r3, [r3, #0]
 8005d3e:	691b      	ldr	r3, [r3, #16]
 8005d40:	2240      	movs	r2, #64	; 0x40
 8005d42:	4013      	ands	r3, r2
 8005d44:	2b40      	cmp	r3, #64	; 0x40
 8005d46:	d10f      	bne.n	8005d68 <HAL_TIM_IRQHandler+0x228>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8005d48:	687b      	ldr	r3, [r7, #4]
 8005d4a:	681b      	ldr	r3, [r3, #0]
 8005d4c:	68db      	ldr	r3, [r3, #12]
 8005d4e:	2240      	movs	r2, #64	; 0x40
 8005d50:	4013      	ands	r3, r2
 8005d52:	2b40      	cmp	r3, #64	; 0x40
 8005d54:	d108      	bne.n	8005d68 <HAL_TIM_IRQHandler+0x228>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8005d56:	687b      	ldr	r3, [r7, #4]
 8005d58:	681b      	ldr	r3, [r3, #0]
 8005d5a:	2241      	movs	r2, #65	; 0x41
 8005d5c:	4252      	negs	r2, r2
 8005d5e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8005d60:	687b      	ldr	r3, [r7, #4]
 8005d62:	0018      	movs	r0, r3
 8005d64:	f000 f836 	bl	8005dd4 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8005d68:	687b      	ldr	r3, [r7, #4]
 8005d6a:	681b      	ldr	r3, [r3, #0]
 8005d6c:	691b      	ldr	r3, [r3, #16]
 8005d6e:	2220      	movs	r2, #32
 8005d70:	4013      	ands	r3, r2
 8005d72:	2b20      	cmp	r3, #32
 8005d74:	d10f      	bne.n	8005d96 <HAL_TIM_IRQHandler+0x256>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8005d76:	687b      	ldr	r3, [r7, #4]
 8005d78:	681b      	ldr	r3, [r3, #0]
 8005d7a:	68db      	ldr	r3, [r3, #12]
 8005d7c:	2220      	movs	r2, #32
 8005d7e:	4013      	ands	r3, r2
 8005d80:	2b20      	cmp	r3, #32
 8005d82:	d108      	bne.n	8005d96 <HAL_TIM_IRQHandler+0x256>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8005d84:	687b      	ldr	r3, [r7, #4]
 8005d86:	681b      	ldr	r3, [r3, #0]
 8005d88:	2221      	movs	r2, #33	; 0x21
 8005d8a:	4252      	negs	r2, r2
 8005d8c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8005d8e:	687b      	ldr	r3, [r7, #4]
 8005d90:	0018      	movs	r0, r3
 8005d92:	f000 f927 	bl	8005fe4 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8005d96:	46c0      	nop			; (mov r8, r8)
 8005d98:	46bd      	mov	sp, r7
 8005d9a:	b002      	add	sp, #8
 8005d9c:	bd80      	pop	{r7, pc}
 8005d9e:	46c0      	nop			; (mov r8, r8)
 8005da0:	fffffeff 	.word	0xfffffeff

08005da4 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8005da4:	b580      	push	{r7, lr}
 8005da6:	b082      	sub	sp, #8
 8005da8:	af00      	add	r7, sp, #0
 8005daa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8005dac:	46c0      	nop			; (mov r8, r8)
 8005dae:	46bd      	mov	sp, r7
 8005db0:	b002      	add	sp, #8
 8005db2:	bd80      	pop	{r7, pc}

08005db4 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8005db4:	b580      	push	{r7, lr}
 8005db6:	b082      	sub	sp, #8
 8005db8:	af00      	add	r7, sp, #0
 8005dba:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8005dbc:	46c0      	nop			; (mov r8, r8)
 8005dbe:	46bd      	mov	sp, r7
 8005dc0:	b002      	add	sp, #8
 8005dc2:	bd80      	pop	{r7, pc}

08005dc4 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8005dc4:	b580      	push	{r7, lr}
 8005dc6:	b082      	sub	sp, #8
 8005dc8:	af00      	add	r7, sp, #0
 8005dca:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8005dcc:	46c0      	nop			; (mov r8, r8)
 8005dce:	46bd      	mov	sp, r7
 8005dd0:	b002      	add	sp, #8
 8005dd2:	bd80      	pop	{r7, pc}

08005dd4 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8005dd4:	b580      	push	{r7, lr}
 8005dd6:	b082      	sub	sp, #8
 8005dd8:	af00      	add	r7, sp, #0
 8005dda:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8005ddc:	46c0      	nop			; (mov r8, r8)
 8005dde:	46bd      	mov	sp, r7
 8005de0:	b002      	add	sp, #8
 8005de2:	bd80      	pop	{r7, pc}

08005de4 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8005de4:	b580      	push	{r7, lr}
 8005de6:	b084      	sub	sp, #16
 8005de8:	af00      	add	r7, sp, #0
 8005dea:	6078      	str	r0, [r7, #4]
 8005dec:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8005dee:	687b      	ldr	r3, [r7, #4]
 8005df0:	681b      	ldr	r3, [r3, #0]
 8005df2:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8005df4:	687b      	ldr	r3, [r7, #4]
 8005df6:	4a38      	ldr	r2, [pc, #224]	; (8005ed8 <TIM_Base_SetConfig+0xf4>)
 8005df8:	4293      	cmp	r3, r2
 8005dfa:	d00c      	beq.n	8005e16 <TIM_Base_SetConfig+0x32>
 8005dfc:	687a      	ldr	r2, [r7, #4]
 8005dfe:	2380      	movs	r3, #128	; 0x80
 8005e00:	05db      	lsls	r3, r3, #23
 8005e02:	429a      	cmp	r2, r3
 8005e04:	d007      	beq.n	8005e16 <TIM_Base_SetConfig+0x32>
 8005e06:	687b      	ldr	r3, [r7, #4]
 8005e08:	4a34      	ldr	r2, [pc, #208]	; (8005edc <TIM_Base_SetConfig+0xf8>)
 8005e0a:	4293      	cmp	r3, r2
 8005e0c:	d003      	beq.n	8005e16 <TIM_Base_SetConfig+0x32>
 8005e0e:	687b      	ldr	r3, [r7, #4]
 8005e10:	4a33      	ldr	r2, [pc, #204]	; (8005ee0 <TIM_Base_SetConfig+0xfc>)
 8005e12:	4293      	cmp	r3, r2
 8005e14:	d108      	bne.n	8005e28 <TIM_Base_SetConfig+0x44>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8005e16:	68fb      	ldr	r3, [r7, #12]
 8005e18:	2270      	movs	r2, #112	; 0x70
 8005e1a:	4393      	bics	r3, r2
 8005e1c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8005e1e:	683b      	ldr	r3, [r7, #0]
 8005e20:	685b      	ldr	r3, [r3, #4]
 8005e22:	68fa      	ldr	r2, [r7, #12]
 8005e24:	4313      	orrs	r3, r2
 8005e26:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8005e28:	687b      	ldr	r3, [r7, #4]
 8005e2a:	4a2b      	ldr	r2, [pc, #172]	; (8005ed8 <TIM_Base_SetConfig+0xf4>)
 8005e2c:	4293      	cmp	r3, r2
 8005e2e:	d01c      	beq.n	8005e6a <TIM_Base_SetConfig+0x86>
 8005e30:	687a      	ldr	r2, [r7, #4]
 8005e32:	2380      	movs	r3, #128	; 0x80
 8005e34:	05db      	lsls	r3, r3, #23
 8005e36:	429a      	cmp	r2, r3
 8005e38:	d017      	beq.n	8005e6a <TIM_Base_SetConfig+0x86>
 8005e3a:	687b      	ldr	r3, [r7, #4]
 8005e3c:	4a27      	ldr	r2, [pc, #156]	; (8005edc <TIM_Base_SetConfig+0xf8>)
 8005e3e:	4293      	cmp	r3, r2
 8005e40:	d013      	beq.n	8005e6a <TIM_Base_SetConfig+0x86>
 8005e42:	687b      	ldr	r3, [r7, #4]
 8005e44:	4a26      	ldr	r2, [pc, #152]	; (8005ee0 <TIM_Base_SetConfig+0xfc>)
 8005e46:	4293      	cmp	r3, r2
 8005e48:	d00f      	beq.n	8005e6a <TIM_Base_SetConfig+0x86>
 8005e4a:	687b      	ldr	r3, [r7, #4]
 8005e4c:	4a25      	ldr	r2, [pc, #148]	; (8005ee4 <TIM_Base_SetConfig+0x100>)
 8005e4e:	4293      	cmp	r3, r2
 8005e50:	d00b      	beq.n	8005e6a <TIM_Base_SetConfig+0x86>
 8005e52:	687b      	ldr	r3, [r7, #4]
 8005e54:	4a24      	ldr	r2, [pc, #144]	; (8005ee8 <TIM_Base_SetConfig+0x104>)
 8005e56:	4293      	cmp	r3, r2
 8005e58:	d007      	beq.n	8005e6a <TIM_Base_SetConfig+0x86>
 8005e5a:	687b      	ldr	r3, [r7, #4]
 8005e5c:	4a23      	ldr	r2, [pc, #140]	; (8005eec <TIM_Base_SetConfig+0x108>)
 8005e5e:	4293      	cmp	r3, r2
 8005e60:	d003      	beq.n	8005e6a <TIM_Base_SetConfig+0x86>
 8005e62:	687b      	ldr	r3, [r7, #4]
 8005e64:	4a22      	ldr	r2, [pc, #136]	; (8005ef0 <TIM_Base_SetConfig+0x10c>)
 8005e66:	4293      	cmp	r3, r2
 8005e68:	d108      	bne.n	8005e7c <TIM_Base_SetConfig+0x98>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8005e6a:	68fb      	ldr	r3, [r7, #12]
 8005e6c:	4a21      	ldr	r2, [pc, #132]	; (8005ef4 <TIM_Base_SetConfig+0x110>)
 8005e6e:	4013      	ands	r3, r2
 8005e70:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8005e72:	683b      	ldr	r3, [r7, #0]
 8005e74:	68db      	ldr	r3, [r3, #12]
 8005e76:	68fa      	ldr	r2, [r7, #12]
 8005e78:	4313      	orrs	r3, r2
 8005e7a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8005e7c:	68fb      	ldr	r3, [r7, #12]
 8005e7e:	2280      	movs	r2, #128	; 0x80
 8005e80:	4393      	bics	r3, r2
 8005e82:	001a      	movs	r2, r3
 8005e84:	683b      	ldr	r3, [r7, #0]
 8005e86:	695b      	ldr	r3, [r3, #20]
 8005e88:	4313      	orrs	r3, r2
 8005e8a:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8005e8c:	687b      	ldr	r3, [r7, #4]
 8005e8e:	68fa      	ldr	r2, [r7, #12]
 8005e90:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8005e92:	683b      	ldr	r3, [r7, #0]
 8005e94:	689a      	ldr	r2, [r3, #8]
 8005e96:	687b      	ldr	r3, [r7, #4]
 8005e98:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8005e9a:	683b      	ldr	r3, [r7, #0]
 8005e9c:	681a      	ldr	r2, [r3, #0]
 8005e9e:	687b      	ldr	r3, [r7, #4]
 8005ea0:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8005ea2:	687b      	ldr	r3, [r7, #4]
 8005ea4:	4a0c      	ldr	r2, [pc, #48]	; (8005ed8 <TIM_Base_SetConfig+0xf4>)
 8005ea6:	4293      	cmp	r3, r2
 8005ea8:	d00b      	beq.n	8005ec2 <TIM_Base_SetConfig+0xde>
 8005eaa:	687b      	ldr	r3, [r7, #4]
 8005eac:	4a0e      	ldr	r2, [pc, #56]	; (8005ee8 <TIM_Base_SetConfig+0x104>)
 8005eae:	4293      	cmp	r3, r2
 8005eb0:	d007      	beq.n	8005ec2 <TIM_Base_SetConfig+0xde>
 8005eb2:	687b      	ldr	r3, [r7, #4]
 8005eb4:	4a0d      	ldr	r2, [pc, #52]	; (8005eec <TIM_Base_SetConfig+0x108>)
 8005eb6:	4293      	cmp	r3, r2
 8005eb8:	d003      	beq.n	8005ec2 <TIM_Base_SetConfig+0xde>
 8005eba:	687b      	ldr	r3, [r7, #4]
 8005ebc:	4a0c      	ldr	r2, [pc, #48]	; (8005ef0 <TIM_Base_SetConfig+0x10c>)
 8005ebe:	4293      	cmp	r3, r2
 8005ec0:	d103      	bne.n	8005eca <TIM_Base_SetConfig+0xe6>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8005ec2:	683b      	ldr	r3, [r7, #0]
 8005ec4:	691a      	ldr	r2, [r3, #16]
 8005ec6:	687b      	ldr	r3, [r7, #4]
 8005ec8:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8005eca:	687b      	ldr	r3, [r7, #4]
 8005ecc:	2201      	movs	r2, #1
 8005ece:	615a      	str	r2, [r3, #20]
}
 8005ed0:	46c0      	nop			; (mov r8, r8)
 8005ed2:	46bd      	mov	sp, r7
 8005ed4:	b004      	add	sp, #16
 8005ed6:	bd80      	pop	{r7, pc}
 8005ed8:	40012c00 	.word	0x40012c00
 8005edc:	40000400 	.word	0x40000400
 8005ee0:	40000800 	.word	0x40000800
 8005ee4:	40002000 	.word	0x40002000
 8005ee8:	40014000 	.word	0x40014000
 8005eec:	40014400 	.word	0x40014400
 8005ef0:	40014800 	.word	0x40014800
 8005ef4:	fffffcff 	.word	0xfffffcff

08005ef8 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8005ef8:	b580      	push	{r7, lr}
 8005efa:	b084      	sub	sp, #16
 8005efc:	af00      	add	r7, sp, #0
 8005efe:	6078      	str	r0, [r7, #4]
 8005f00:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8005f02:	687b      	ldr	r3, [r7, #4]
 8005f04:	223c      	movs	r2, #60	; 0x3c
 8005f06:	5c9b      	ldrb	r3, [r3, r2]
 8005f08:	2b01      	cmp	r3, #1
 8005f0a:	d101      	bne.n	8005f10 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8005f0c:	2302      	movs	r3, #2
 8005f0e:	e05a      	b.n	8005fc6 <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8005f10:	687b      	ldr	r3, [r7, #4]
 8005f12:	223c      	movs	r2, #60	; 0x3c
 8005f14:	2101      	movs	r1, #1
 8005f16:	5499      	strb	r1, [r3, r2]

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005f18:	687b      	ldr	r3, [r7, #4]
 8005f1a:	223d      	movs	r2, #61	; 0x3d
 8005f1c:	2102      	movs	r1, #2
 8005f1e:	5499      	strb	r1, [r3, r2]

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8005f20:	687b      	ldr	r3, [r7, #4]
 8005f22:	681b      	ldr	r3, [r3, #0]
 8005f24:	685b      	ldr	r3, [r3, #4]
 8005f26:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8005f28:	687b      	ldr	r3, [r7, #4]
 8005f2a:	681b      	ldr	r3, [r3, #0]
 8005f2c:	689b      	ldr	r3, [r3, #8]
 8005f2e:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8005f30:	687b      	ldr	r3, [r7, #4]
 8005f32:	681b      	ldr	r3, [r3, #0]
 8005f34:	4a26      	ldr	r2, [pc, #152]	; (8005fd0 <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 8005f36:	4293      	cmp	r3, r2
 8005f38:	d108      	bne.n	8005f4c <HAL_TIMEx_MasterConfigSynchronization+0x54>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8005f3a:	68fb      	ldr	r3, [r7, #12]
 8005f3c:	4a25      	ldr	r2, [pc, #148]	; (8005fd4 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8005f3e:	4013      	ands	r3, r2
 8005f40:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8005f42:	683b      	ldr	r3, [r7, #0]
 8005f44:	685b      	ldr	r3, [r3, #4]
 8005f46:	68fa      	ldr	r2, [r7, #12]
 8005f48:	4313      	orrs	r3, r2
 8005f4a:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8005f4c:	68fb      	ldr	r3, [r7, #12]
 8005f4e:	2270      	movs	r2, #112	; 0x70
 8005f50:	4393      	bics	r3, r2
 8005f52:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8005f54:	683b      	ldr	r3, [r7, #0]
 8005f56:	681b      	ldr	r3, [r3, #0]
 8005f58:	68fa      	ldr	r2, [r7, #12]
 8005f5a:	4313      	orrs	r3, r2
 8005f5c:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8005f5e:	687b      	ldr	r3, [r7, #4]
 8005f60:	681b      	ldr	r3, [r3, #0]
 8005f62:	68fa      	ldr	r2, [r7, #12]
 8005f64:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005f66:	687b      	ldr	r3, [r7, #4]
 8005f68:	681b      	ldr	r3, [r3, #0]
 8005f6a:	4a19      	ldr	r2, [pc, #100]	; (8005fd0 <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 8005f6c:	4293      	cmp	r3, r2
 8005f6e:	d014      	beq.n	8005f9a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005f70:	687b      	ldr	r3, [r7, #4]
 8005f72:	681a      	ldr	r2, [r3, #0]
 8005f74:	2380      	movs	r3, #128	; 0x80
 8005f76:	05db      	lsls	r3, r3, #23
 8005f78:	429a      	cmp	r2, r3
 8005f7a:	d00e      	beq.n	8005f9a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005f7c:	687b      	ldr	r3, [r7, #4]
 8005f7e:	681b      	ldr	r3, [r3, #0]
 8005f80:	4a15      	ldr	r2, [pc, #84]	; (8005fd8 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8005f82:	4293      	cmp	r3, r2
 8005f84:	d009      	beq.n	8005f9a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005f86:	687b      	ldr	r3, [r7, #4]
 8005f88:	681b      	ldr	r3, [r3, #0]
 8005f8a:	4a14      	ldr	r2, [pc, #80]	; (8005fdc <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 8005f8c:	4293      	cmp	r3, r2
 8005f8e:	d004      	beq.n	8005f9a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005f90:	687b      	ldr	r3, [r7, #4]
 8005f92:	681b      	ldr	r3, [r3, #0]
 8005f94:	4a12      	ldr	r2, [pc, #72]	; (8005fe0 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8005f96:	4293      	cmp	r3, r2
 8005f98:	d10c      	bne.n	8005fb4 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8005f9a:	68bb      	ldr	r3, [r7, #8]
 8005f9c:	2280      	movs	r2, #128	; 0x80
 8005f9e:	4393      	bics	r3, r2
 8005fa0:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8005fa2:	683b      	ldr	r3, [r7, #0]
 8005fa4:	689b      	ldr	r3, [r3, #8]
 8005fa6:	68ba      	ldr	r2, [r7, #8]
 8005fa8:	4313      	orrs	r3, r2
 8005faa:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8005fac:	687b      	ldr	r3, [r7, #4]
 8005fae:	681b      	ldr	r3, [r3, #0]
 8005fb0:	68ba      	ldr	r2, [r7, #8]
 8005fb2:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8005fb4:	687b      	ldr	r3, [r7, #4]
 8005fb6:	223d      	movs	r2, #61	; 0x3d
 8005fb8:	2101      	movs	r1, #1
 8005fba:	5499      	strb	r1, [r3, r2]

  __HAL_UNLOCK(htim);
 8005fbc:	687b      	ldr	r3, [r7, #4]
 8005fbe:	223c      	movs	r2, #60	; 0x3c
 8005fc0:	2100      	movs	r1, #0
 8005fc2:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8005fc4:	2300      	movs	r3, #0
}
 8005fc6:	0018      	movs	r0, r3
 8005fc8:	46bd      	mov	sp, r7
 8005fca:	b004      	add	sp, #16
 8005fcc:	bd80      	pop	{r7, pc}
 8005fce:	46c0      	nop			; (mov r8, r8)
 8005fd0:	40012c00 	.word	0x40012c00
 8005fd4:	ff0fffff 	.word	0xff0fffff
 8005fd8:	40000400 	.word	0x40000400
 8005fdc:	40000800 	.word	0x40000800
 8005fe0:	40014000 	.word	0x40014000

08005fe4 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8005fe4:	b580      	push	{r7, lr}
 8005fe6:	b082      	sub	sp, #8
 8005fe8:	af00      	add	r7, sp, #0
 8005fea:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8005fec:	46c0      	nop			; (mov r8, r8)
 8005fee:	46bd      	mov	sp, r7
 8005ff0:	b002      	add	sp, #8
 8005ff2:	bd80      	pop	{r7, pc}

08005ff4 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8005ff4:	b580      	push	{r7, lr}
 8005ff6:	b082      	sub	sp, #8
 8005ff8:	af00      	add	r7, sp, #0
 8005ffa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8005ffc:	46c0      	nop			; (mov r8, r8)
 8005ffe:	46bd      	mov	sp, r7
 8006000:	b002      	add	sp, #8
 8006002:	bd80      	pop	{r7, pc}

08006004 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8006004:	b580      	push	{r7, lr}
 8006006:	b082      	sub	sp, #8
 8006008:	af00      	add	r7, sp, #0
 800600a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 800600c:	46c0      	nop			; (mov r8, r8)
 800600e:	46bd      	mov	sp, r7
 8006010:	b002      	add	sp, #8
 8006012:	bd80      	pop	{r7, pc}

08006014 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8006014:	b580      	push	{r7, lr}
 8006016:	b082      	sub	sp, #8
 8006018:	af00      	add	r7, sp, #0
 800601a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800601c:	687b      	ldr	r3, [r7, #4]
 800601e:	2b00      	cmp	r3, #0
 8006020:	d101      	bne.n	8006026 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8006022:	2301      	movs	r3, #1
 8006024:	e046      	b.n	80060b4 <HAL_UART_Init+0xa0>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8006026:	687b      	ldr	r3, [r7, #4]
 8006028:	2288      	movs	r2, #136	; 0x88
 800602a:	589b      	ldr	r3, [r3, r2]
 800602c:	2b00      	cmp	r3, #0
 800602e:	d107      	bne.n	8006040 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8006030:	687b      	ldr	r3, [r7, #4]
 8006032:	2284      	movs	r2, #132	; 0x84
 8006034:	2100      	movs	r1, #0
 8006036:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8006038:	687b      	ldr	r3, [r7, #4]
 800603a:	0018      	movs	r0, r3
 800603c:	f7fd fa0a 	bl	8003454 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8006040:	687b      	ldr	r3, [r7, #4]
 8006042:	2288      	movs	r2, #136	; 0x88
 8006044:	2124      	movs	r1, #36	; 0x24
 8006046:	5099      	str	r1, [r3, r2]

  __HAL_UART_DISABLE(huart);
 8006048:	687b      	ldr	r3, [r7, #4]
 800604a:	681b      	ldr	r3, [r3, #0]
 800604c:	681a      	ldr	r2, [r3, #0]
 800604e:	687b      	ldr	r3, [r7, #4]
 8006050:	681b      	ldr	r3, [r3, #0]
 8006052:	2101      	movs	r1, #1
 8006054:	438a      	bics	r2, r1
 8006056:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8006058:	687b      	ldr	r3, [r7, #4]
 800605a:	0018      	movs	r0, r3
 800605c:	f000 f9ae 	bl	80063bc <UART_SetConfig>
 8006060:	0003      	movs	r3, r0
 8006062:	2b01      	cmp	r3, #1
 8006064:	d101      	bne.n	800606a <HAL_UART_Init+0x56>
  {
    return HAL_ERROR;
 8006066:	2301      	movs	r3, #1
 8006068:	e024      	b.n	80060b4 <HAL_UART_Init+0xa0>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800606a:	687b      	ldr	r3, [r7, #4]
 800606c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800606e:	2b00      	cmp	r3, #0
 8006070:	d003      	beq.n	800607a <HAL_UART_Init+0x66>
  {
    UART_AdvFeatureConfig(huart);
 8006072:	687b      	ldr	r3, [r7, #4]
 8006074:	0018      	movs	r0, r3
 8006076:	f000 fcf7 	bl	8006a68 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800607a:	687b      	ldr	r3, [r7, #4]
 800607c:	681b      	ldr	r3, [r3, #0]
 800607e:	685a      	ldr	r2, [r3, #4]
 8006080:	687b      	ldr	r3, [r7, #4]
 8006082:	681b      	ldr	r3, [r3, #0]
 8006084:	490d      	ldr	r1, [pc, #52]	; (80060bc <HAL_UART_Init+0xa8>)
 8006086:	400a      	ands	r2, r1
 8006088:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800608a:	687b      	ldr	r3, [r7, #4]
 800608c:	681b      	ldr	r3, [r3, #0]
 800608e:	689a      	ldr	r2, [r3, #8]
 8006090:	687b      	ldr	r3, [r7, #4]
 8006092:	681b      	ldr	r3, [r3, #0]
 8006094:	212a      	movs	r1, #42	; 0x2a
 8006096:	438a      	bics	r2, r1
 8006098:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800609a:	687b      	ldr	r3, [r7, #4]
 800609c:	681b      	ldr	r3, [r3, #0]
 800609e:	681a      	ldr	r2, [r3, #0]
 80060a0:	687b      	ldr	r3, [r7, #4]
 80060a2:	681b      	ldr	r3, [r3, #0]
 80060a4:	2101      	movs	r1, #1
 80060a6:	430a      	orrs	r2, r1
 80060a8:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80060aa:	687b      	ldr	r3, [r7, #4]
 80060ac:	0018      	movs	r0, r3
 80060ae:	f000 fd8f 	bl	8006bd0 <UART_CheckIdleState>
 80060b2:	0003      	movs	r3, r0
}
 80060b4:	0018      	movs	r0, r3
 80060b6:	46bd      	mov	sp, r7
 80060b8:	b002      	add	sp, #8
 80060ba:	bd80      	pop	{r7, pc}
 80060bc:	ffffb7ff 	.word	0xffffb7ff

080060c0 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80060c0:	b580      	push	{r7, lr}
 80060c2:	b08a      	sub	sp, #40	; 0x28
 80060c4:	af02      	add	r7, sp, #8
 80060c6:	60f8      	str	r0, [r7, #12]
 80060c8:	60b9      	str	r1, [r7, #8]
 80060ca:	603b      	str	r3, [r7, #0]
 80060cc:	1dbb      	adds	r3, r7, #6
 80060ce:	801a      	strh	r2, [r3, #0]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80060d0:	68fb      	ldr	r3, [r7, #12]
 80060d2:	2288      	movs	r2, #136	; 0x88
 80060d4:	589b      	ldr	r3, [r3, r2]
 80060d6:	2b20      	cmp	r3, #32
 80060d8:	d000      	beq.n	80060dc <HAL_UART_Transmit+0x1c>
 80060da:	e088      	b.n	80061ee <HAL_UART_Transmit+0x12e>
  {
    if ((pData == NULL) || (Size == 0U))
 80060dc:	68bb      	ldr	r3, [r7, #8]
 80060de:	2b00      	cmp	r3, #0
 80060e0:	d003      	beq.n	80060ea <HAL_UART_Transmit+0x2a>
 80060e2:	1dbb      	adds	r3, r7, #6
 80060e4:	881b      	ldrh	r3, [r3, #0]
 80060e6:	2b00      	cmp	r3, #0
 80060e8:	d101      	bne.n	80060ee <HAL_UART_Transmit+0x2e>
    {
      return  HAL_ERROR;
 80060ea:	2301      	movs	r3, #1
 80060ec:	e080      	b.n	80061f0 <HAL_UART_Transmit+0x130>
    }

    /* In case of 9bits/No Parity transfer, pData buffer provided as input parameter
       should be aligned on a u16 frontier, as data to be filled into TDR will be
       handled through a u16 cast. */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80060ee:	68fb      	ldr	r3, [r7, #12]
 80060f0:	689a      	ldr	r2, [r3, #8]
 80060f2:	2380      	movs	r3, #128	; 0x80
 80060f4:	015b      	lsls	r3, r3, #5
 80060f6:	429a      	cmp	r2, r3
 80060f8:	d109      	bne.n	800610e <HAL_UART_Transmit+0x4e>
 80060fa:	68fb      	ldr	r3, [r7, #12]
 80060fc:	691b      	ldr	r3, [r3, #16]
 80060fe:	2b00      	cmp	r3, #0
 8006100:	d105      	bne.n	800610e <HAL_UART_Transmit+0x4e>
    {
      if ((((uint32_t)pData) & 1U) != 0U)
 8006102:	68bb      	ldr	r3, [r7, #8]
 8006104:	2201      	movs	r2, #1
 8006106:	4013      	ands	r3, r2
 8006108:	d001      	beq.n	800610e <HAL_UART_Transmit+0x4e>
      {
        return  HAL_ERROR;
 800610a:	2301      	movs	r3, #1
 800610c:	e070      	b.n	80061f0 <HAL_UART_Transmit+0x130>
      }
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800610e:	68fb      	ldr	r3, [r7, #12]
 8006110:	2290      	movs	r2, #144	; 0x90
 8006112:	2100      	movs	r1, #0
 8006114:	5099      	str	r1, [r3, r2]
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8006116:	68fb      	ldr	r3, [r7, #12]
 8006118:	2288      	movs	r2, #136	; 0x88
 800611a:	2121      	movs	r1, #33	; 0x21
 800611c:	5099      	str	r1, [r3, r2]

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800611e:	f7fd fc21 	bl	8003964 <HAL_GetTick>
 8006122:	0003      	movs	r3, r0
 8006124:	617b      	str	r3, [r7, #20]

    huart->TxXferSize  = Size;
 8006126:	68fb      	ldr	r3, [r7, #12]
 8006128:	1dba      	adds	r2, r7, #6
 800612a:	2154      	movs	r1, #84	; 0x54
 800612c:	8812      	ldrh	r2, [r2, #0]
 800612e:	525a      	strh	r2, [r3, r1]
    huart->TxXferCount = Size;
 8006130:	68fb      	ldr	r3, [r7, #12]
 8006132:	1dba      	adds	r2, r7, #6
 8006134:	2156      	movs	r1, #86	; 0x56
 8006136:	8812      	ldrh	r2, [r2, #0]
 8006138:	525a      	strh	r2, [r3, r1]

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800613a:	68fb      	ldr	r3, [r7, #12]
 800613c:	689a      	ldr	r2, [r3, #8]
 800613e:	2380      	movs	r3, #128	; 0x80
 8006140:	015b      	lsls	r3, r3, #5
 8006142:	429a      	cmp	r2, r3
 8006144:	d108      	bne.n	8006158 <HAL_UART_Transmit+0x98>
 8006146:	68fb      	ldr	r3, [r7, #12]
 8006148:	691b      	ldr	r3, [r3, #16]
 800614a:	2b00      	cmp	r3, #0
 800614c:	d104      	bne.n	8006158 <HAL_UART_Transmit+0x98>
    {
      pdata8bits  = NULL;
 800614e:	2300      	movs	r3, #0
 8006150:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8006152:	68bb      	ldr	r3, [r7, #8]
 8006154:	61bb      	str	r3, [r7, #24]
 8006156:	e003      	b.n	8006160 <HAL_UART_Transmit+0xa0>
    }
    else
    {
      pdata8bits  = pData;
 8006158:	68bb      	ldr	r3, [r7, #8]
 800615a:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800615c:	2300      	movs	r3, #0
 800615e:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8006160:	e02c      	b.n	80061bc <HAL_UART_Transmit+0xfc>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8006162:	697a      	ldr	r2, [r7, #20]
 8006164:	68f8      	ldr	r0, [r7, #12]
 8006166:	683b      	ldr	r3, [r7, #0]
 8006168:	9300      	str	r3, [sp, #0]
 800616a:	0013      	movs	r3, r2
 800616c:	2200      	movs	r2, #0
 800616e:	2180      	movs	r1, #128	; 0x80
 8006170:	f000 fd7c 	bl	8006c6c <UART_WaitOnFlagUntilTimeout>
 8006174:	1e03      	subs	r3, r0, #0
 8006176:	d001      	beq.n	800617c <HAL_UART_Transmit+0xbc>
      {
        return HAL_TIMEOUT;
 8006178:	2303      	movs	r3, #3
 800617a:	e039      	b.n	80061f0 <HAL_UART_Transmit+0x130>
      }
      if (pdata8bits == NULL)
 800617c:	69fb      	ldr	r3, [r7, #28]
 800617e:	2b00      	cmp	r3, #0
 8006180:	d10b      	bne.n	800619a <HAL_UART_Transmit+0xda>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8006182:	69bb      	ldr	r3, [r7, #24]
 8006184:	881b      	ldrh	r3, [r3, #0]
 8006186:	001a      	movs	r2, r3
 8006188:	68fb      	ldr	r3, [r7, #12]
 800618a:	681b      	ldr	r3, [r3, #0]
 800618c:	05d2      	lsls	r2, r2, #23
 800618e:	0dd2      	lsrs	r2, r2, #23
 8006190:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8006192:	69bb      	ldr	r3, [r7, #24]
 8006194:	3302      	adds	r3, #2
 8006196:	61bb      	str	r3, [r7, #24]
 8006198:	e007      	b.n	80061aa <HAL_UART_Transmit+0xea>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 800619a:	69fb      	ldr	r3, [r7, #28]
 800619c:	781a      	ldrb	r2, [r3, #0]
 800619e:	68fb      	ldr	r3, [r7, #12]
 80061a0:	681b      	ldr	r3, [r3, #0]
 80061a2:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 80061a4:	69fb      	ldr	r3, [r7, #28]
 80061a6:	3301      	adds	r3, #1
 80061a8:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80061aa:	68fb      	ldr	r3, [r7, #12]
 80061ac:	2256      	movs	r2, #86	; 0x56
 80061ae:	5a9b      	ldrh	r3, [r3, r2]
 80061b0:	b29b      	uxth	r3, r3
 80061b2:	3b01      	subs	r3, #1
 80061b4:	b299      	uxth	r1, r3
 80061b6:	68fb      	ldr	r3, [r7, #12]
 80061b8:	2256      	movs	r2, #86	; 0x56
 80061ba:	5299      	strh	r1, [r3, r2]
    while (huart->TxXferCount > 0U)
 80061bc:	68fb      	ldr	r3, [r7, #12]
 80061be:	2256      	movs	r2, #86	; 0x56
 80061c0:	5a9b      	ldrh	r3, [r3, r2]
 80061c2:	b29b      	uxth	r3, r3
 80061c4:	2b00      	cmp	r3, #0
 80061c6:	d1cc      	bne.n	8006162 <HAL_UART_Transmit+0xa2>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80061c8:	697a      	ldr	r2, [r7, #20]
 80061ca:	68f8      	ldr	r0, [r7, #12]
 80061cc:	683b      	ldr	r3, [r7, #0]
 80061ce:	9300      	str	r3, [sp, #0]
 80061d0:	0013      	movs	r3, r2
 80061d2:	2200      	movs	r2, #0
 80061d4:	2140      	movs	r1, #64	; 0x40
 80061d6:	f000 fd49 	bl	8006c6c <UART_WaitOnFlagUntilTimeout>
 80061da:	1e03      	subs	r3, r0, #0
 80061dc:	d001      	beq.n	80061e2 <HAL_UART_Transmit+0x122>
    {
      return HAL_TIMEOUT;
 80061de:	2303      	movs	r3, #3
 80061e0:	e006      	b.n	80061f0 <HAL_UART_Transmit+0x130>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80061e2:	68fb      	ldr	r3, [r7, #12]
 80061e4:	2288      	movs	r2, #136	; 0x88
 80061e6:	2120      	movs	r1, #32
 80061e8:	5099      	str	r1, [r3, r2]

    return HAL_OK;
 80061ea:	2300      	movs	r3, #0
 80061ec:	e000      	b.n	80061f0 <HAL_UART_Transmit+0x130>
  }
  else
  {
    return HAL_BUSY;
 80061ee:	2302      	movs	r3, #2
  }
}
 80061f0:	0018      	movs	r0, r3
 80061f2:	46bd      	mov	sp, r7
 80061f4:	b008      	add	sp, #32
 80061f6:	bd80      	pop	{r7, pc}

080061f8 <HAL_UART_Receive>:
  * @param Size    Amount of data elements (u8 or u16) to be received.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80061f8:	b580      	push	{r7, lr}
 80061fa:	b08a      	sub	sp, #40	; 0x28
 80061fc:	af02      	add	r7, sp, #8
 80061fe:	60f8      	str	r0, [r7, #12]
 8006200:	60b9      	str	r1, [r7, #8]
 8006202:	603b      	str	r3, [r7, #0]
 8006204:	1dbb      	adds	r3, r7, #6
 8006206:	801a      	strh	r2, [r3, #0]
  uint16_t *pdata16bits;
  uint16_t uhMask;
  uint32_t tickstart;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8006208:	68fb      	ldr	r3, [r7, #12]
 800620a:	228c      	movs	r2, #140	; 0x8c
 800620c:	589b      	ldr	r3, [r3, r2]
 800620e:	2b20      	cmp	r3, #32
 8006210:	d000      	beq.n	8006214 <HAL_UART_Receive+0x1c>
 8006212:	e0cc      	b.n	80063ae <HAL_UART_Receive+0x1b6>
  {
    if ((pData == NULL) || (Size == 0U))
 8006214:	68bb      	ldr	r3, [r7, #8]
 8006216:	2b00      	cmp	r3, #0
 8006218:	d003      	beq.n	8006222 <HAL_UART_Receive+0x2a>
 800621a:	1dbb      	adds	r3, r7, #6
 800621c:	881b      	ldrh	r3, [r3, #0]
 800621e:	2b00      	cmp	r3, #0
 8006220:	d101      	bne.n	8006226 <HAL_UART_Receive+0x2e>
    {
      return  HAL_ERROR;
 8006222:	2301      	movs	r3, #1
 8006224:	e0c4      	b.n	80063b0 <HAL_UART_Receive+0x1b8>
    }

    /* In case of 9bits/No Parity transfer, pData buffer provided as input parameter
       should be aligned on a u16 frontier, as data to be received from RDR will be
       handled through a u16 cast. */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006226:	68fb      	ldr	r3, [r7, #12]
 8006228:	689a      	ldr	r2, [r3, #8]
 800622a:	2380      	movs	r3, #128	; 0x80
 800622c:	015b      	lsls	r3, r3, #5
 800622e:	429a      	cmp	r2, r3
 8006230:	d109      	bne.n	8006246 <HAL_UART_Receive+0x4e>
 8006232:	68fb      	ldr	r3, [r7, #12]
 8006234:	691b      	ldr	r3, [r3, #16]
 8006236:	2b00      	cmp	r3, #0
 8006238:	d105      	bne.n	8006246 <HAL_UART_Receive+0x4e>
    {
      if ((((uint32_t)pData) & 1U) != 0U)
 800623a:	68bb      	ldr	r3, [r7, #8]
 800623c:	2201      	movs	r2, #1
 800623e:	4013      	ands	r3, r2
 8006240:	d001      	beq.n	8006246 <HAL_UART_Receive+0x4e>
      {
        return  HAL_ERROR;
 8006242:	2301      	movs	r3, #1
 8006244:	e0b4      	b.n	80063b0 <HAL_UART_Receive+0x1b8>
      }
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006246:	68fb      	ldr	r3, [r7, #12]
 8006248:	2290      	movs	r2, #144	; 0x90
 800624a:	2100      	movs	r1, #0
 800624c:	5099      	str	r1, [r3, r2]
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 800624e:	68fb      	ldr	r3, [r7, #12]
 8006250:	228c      	movs	r2, #140	; 0x8c
 8006252:	2122      	movs	r1, #34	; 0x22
 8006254:	5099      	str	r1, [r3, r2]
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006256:	68fb      	ldr	r3, [r7, #12]
 8006258:	2200      	movs	r2, #0
 800625a:	66da      	str	r2, [r3, #108]	; 0x6c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800625c:	f7fd fb82 	bl	8003964 <HAL_GetTick>
 8006260:	0003      	movs	r3, r0
 8006262:	617b      	str	r3, [r7, #20]

    huart->RxXferSize  = Size;
 8006264:	68fb      	ldr	r3, [r7, #12]
 8006266:	1dba      	adds	r2, r7, #6
 8006268:	215c      	movs	r1, #92	; 0x5c
 800626a:	8812      	ldrh	r2, [r2, #0]
 800626c:	525a      	strh	r2, [r3, r1]
    huart->RxXferCount = Size;
 800626e:	68fb      	ldr	r3, [r7, #12]
 8006270:	1dba      	adds	r2, r7, #6
 8006272:	215e      	movs	r1, #94	; 0x5e
 8006274:	8812      	ldrh	r2, [r2, #0]
 8006276:	525a      	strh	r2, [r3, r1]

    /* Computation of UART mask to apply to RDR register */
    UART_MASK_COMPUTATION(huart);
 8006278:	68fb      	ldr	r3, [r7, #12]
 800627a:	689a      	ldr	r2, [r3, #8]
 800627c:	2380      	movs	r3, #128	; 0x80
 800627e:	015b      	lsls	r3, r3, #5
 8006280:	429a      	cmp	r2, r3
 8006282:	d10d      	bne.n	80062a0 <HAL_UART_Receive+0xa8>
 8006284:	68fb      	ldr	r3, [r7, #12]
 8006286:	691b      	ldr	r3, [r3, #16]
 8006288:	2b00      	cmp	r3, #0
 800628a:	d104      	bne.n	8006296 <HAL_UART_Receive+0x9e>
 800628c:	68fb      	ldr	r3, [r7, #12]
 800628e:	2260      	movs	r2, #96	; 0x60
 8006290:	4949      	ldr	r1, [pc, #292]	; (80063b8 <HAL_UART_Receive+0x1c0>)
 8006292:	5299      	strh	r1, [r3, r2]
 8006294:	e02e      	b.n	80062f4 <HAL_UART_Receive+0xfc>
 8006296:	68fb      	ldr	r3, [r7, #12]
 8006298:	2260      	movs	r2, #96	; 0x60
 800629a:	21ff      	movs	r1, #255	; 0xff
 800629c:	5299      	strh	r1, [r3, r2]
 800629e:	e029      	b.n	80062f4 <HAL_UART_Receive+0xfc>
 80062a0:	68fb      	ldr	r3, [r7, #12]
 80062a2:	689b      	ldr	r3, [r3, #8]
 80062a4:	2b00      	cmp	r3, #0
 80062a6:	d10d      	bne.n	80062c4 <HAL_UART_Receive+0xcc>
 80062a8:	68fb      	ldr	r3, [r7, #12]
 80062aa:	691b      	ldr	r3, [r3, #16]
 80062ac:	2b00      	cmp	r3, #0
 80062ae:	d104      	bne.n	80062ba <HAL_UART_Receive+0xc2>
 80062b0:	68fb      	ldr	r3, [r7, #12]
 80062b2:	2260      	movs	r2, #96	; 0x60
 80062b4:	21ff      	movs	r1, #255	; 0xff
 80062b6:	5299      	strh	r1, [r3, r2]
 80062b8:	e01c      	b.n	80062f4 <HAL_UART_Receive+0xfc>
 80062ba:	68fb      	ldr	r3, [r7, #12]
 80062bc:	2260      	movs	r2, #96	; 0x60
 80062be:	217f      	movs	r1, #127	; 0x7f
 80062c0:	5299      	strh	r1, [r3, r2]
 80062c2:	e017      	b.n	80062f4 <HAL_UART_Receive+0xfc>
 80062c4:	68fb      	ldr	r3, [r7, #12]
 80062c6:	689a      	ldr	r2, [r3, #8]
 80062c8:	2380      	movs	r3, #128	; 0x80
 80062ca:	055b      	lsls	r3, r3, #21
 80062cc:	429a      	cmp	r2, r3
 80062ce:	d10d      	bne.n	80062ec <HAL_UART_Receive+0xf4>
 80062d0:	68fb      	ldr	r3, [r7, #12]
 80062d2:	691b      	ldr	r3, [r3, #16]
 80062d4:	2b00      	cmp	r3, #0
 80062d6:	d104      	bne.n	80062e2 <HAL_UART_Receive+0xea>
 80062d8:	68fb      	ldr	r3, [r7, #12]
 80062da:	2260      	movs	r2, #96	; 0x60
 80062dc:	217f      	movs	r1, #127	; 0x7f
 80062de:	5299      	strh	r1, [r3, r2]
 80062e0:	e008      	b.n	80062f4 <HAL_UART_Receive+0xfc>
 80062e2:	68fb      	ldr	r3, [r7, #12]
 80062e4:	2260      	movs	r2, #96	; 0x60
 80062e6:	213f      	movs	r1, #63	; 0x3f
 80062e8:	5299      	strh	r1, [r3, r2]
 80062ea:	e003      	b.n	80062f4 <HAL_UART_Receive+0xfc>
 80062ec:	68fb      	ldr	r3, [r7, #12]
 80062ee:	2260      	movs	r2, #96	; 0x60
 80062f0:	2100      	movs	r1, #0
 80062f2:	5299      	strh	r1, [r3, r2]
    uhMask = huart->Mask;
 80062f4:	2312      	movs	r3, #18
 80062f6:	18fb      	adds	r3, r7, r3
 80062f8:	68fa      	ldr	r2, [r7, #12]
 80062fa:	2160      	movs	r1, #96	; 0x60
 80062fc:	5a52      	ldrh	r2, [r2, r1]
 80062fe:	801a      	strh	r2, [r3, #0]

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006300:	68fb      	ldr	r3, [r7, #12]
 8006302:	689a      	ldr	r2, [r3, #8]
 8006304:	2380      	movs	r3, #128	; 0x80
 8006306:	015b      	lsls	r3, r3, #5
 8006308:	429a      	cmp	r2, r3
 800630a:	d108      	bne.n	800631e <HAL_UART_Receive+0x126>
 800630c:	68fb      	ldr	r3, [r7, #12]
 800630e:	691b      	ldr	r3, [r3, #16]
 8006310:	2b00      	cmp	r3, #0
 8006312:	d104      	bne.n	800631e <HAL_UART_Receive+0x126>
    {
      pdata8bits  = NULL;
 8006314:	2300      	movs	r3, #0
 8006316:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8006318:	68bb      	ldr	r3, [r7, #8]
 800631a:	61bb      	str	r3, [r7, #24]
 800631c:	e003      	b.n	8006326 <HAL_UART_Receive+0x12e>
    }
    else
    {
      pdata8bits  = pData;
 800631e:	68bb      	ldr	r3, [r7, #8]
 8006320:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8006322:	2300      	movs	r3, #0
 8006324:	61bb      	str	r3, [r7, #24]
    }

    /* as long as data have to be received */
    while (huart->RxXferCount > 0U)
 8006326:	e036      	b.n	8006396 <HAL_UART_Receive+0x19e>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 8006328:	697a      	ldr	r2, [r7, #20]
 800632a:	68f8      	ldr	r0, [r7, #12]
 800632c:	683b      	ldr	r3, [r7, #0]
 800632e:	9300      	str	r3, [sp, #0]
 8006330:	0013      	movs	r3, r2
 8006332:	2200      	movs	r2, #0
 8006334:	2120      	movs	r1, #32
 8006336:	f000 fc99 	bl	8006c6c <UART_WaitOnFlagUntilTimeout>
 800633a:	1e03      	subs	r3, r0, #0
 800633c:	d001      	beq.n	8006342 <HAL_UART_Receive+0x14a>
      {
        return HAL_TIMEOUT;
 800633e:	2303      	movs	r3, #3
 8006340:	e036      	b.n	80063b0 <HAL_UART_Receive+0x1b8>
      }
      if (pdata8bits == NULL)
 8006342:	69fb      	ldr	r3, [r7, #28]
 8006344:	2b00      	cmp	r3, #0
 8006346:	d10e      	bne.n	8006366 <HAL_UART_Receive+0x16e>
      {
        *pdata16bits = (uint16_t)(huart->Instance->RDR & uhMask);
 8006348:	68fb      	ldr	r3, [r7, #12]
 800634a:	681b      	ldr	r3, [r3, #0]
 800634c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800634e:	b29b      	uxth	r3, r3
 8006350:	2212      	movs	r2, #18
 8006352:	18ba      	adds	r2, r7, r2
 8006354:	8812      	ldrh	r2, [r2, #0]
 8006356:	4013      	ands	r3, r2
 8006358:	b29a      	uxth	r2, r3
 800635a:	69bb      	ldr	r3, [r7, #24]
 800635c:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 800635e:	69bb      	ldr	r3, [r7, #24]
 8006360:	3302      	adds	r3, #2
 8006362:	61bb      	str	r3, [r7, #24]
 8006364:	e00e      	b.n	8006384 <HAL_UART_Receive+0x18c>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->RDR & (uint8_t)uhMask);
 8006366:	68fb      	ldr	r3, [r7, #12]
 8006368:	681b      	ldr	r3, [r3, #0]
 800636a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800636c:	b2db      	uxtb	r3, r3
 800636e:	2212      	movs	r2, #18
 8006370:	18ba      	adds	r2, r7, r2
 8006372:	8812      	ldrh	r2, [r2, #0]
 8006374:	b2d2      	uxtb	r2, r2
 8006376:	4013      	ands	r3, r2
 8006378:	b2da      	uxtb	r2, r3
 800637a:	69fb      	ldr	r3, [r7, #28]
 800637c:	701a      	strb	r2, [r3, #0]
        pdata8bits++;
 800637e:	69fb      	ldr	r3, [r7, #28]
 8006380:	3301      	adds	r3, #1
 8006382:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 8006384:	68fb      	ldr	r3, [r7, #12]
 8006386:	225e      	movs	r2, #94	; 0x5e
 8006388:	5a9b      	ldrh	r3, [r3, r2]
 800638a:	b29b      	uxth	r3, r3
 800638c:	3b01      	subs	r3, #1
 800638e:	b299      	uxth	r1, r3
 8006390:	68fb      	ldr	r3, [r7, #12]
 8006392:	225e      	movs	r2, #94	; 0x5e
 8006394:	5299      	strh	r1, [r3, r2]
    while (huart->RxXferCount > 0U)
 8006396:	68fb      	ldr	r3, [r7, #12]
 8006398:	225e      	movs	r2, #94	; 0x5e
 800639a:	5a9b      	ldrh	r3, [r3, r2]
 800639c:	b29b      	uxth	r3, r3
 800639e:	2b00      	cmp	r3, #0
 80063a0:	d1c2      	bne.n	8006328 <HAL_UART_Receive+0x130>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 80063a2:	68fb      	ldr	r3, [r7, #12]
 80063a4:	228c      	movs	r2, #140	; 0x8c
 80063a6:	2120      	movs	r1, #32
 80063a8:	5099      	str	r1, [r3, r2]

    return HAL_OK;
 80063aa:	2300      	movs	r3, #0
 80063ac:	e000      	b.n	80063b0 <HAL_UART_Receive+0x1b8>
  }
  else
  {
    return HAL_BUSY;
 80063ae:	2302      	movs	r3, #2
  }
}
 80063b0:	0018      	movs	r0, r3
 80063b2:	46bd      	mov	sp, r7
 80063b4:	b008      	add	sp, #32
 80063b6:	bd80      	pop	{r7, pc}
 80063b8:	000001ff 	.word	0x000001ff

080063bc <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80063bc:	b5b0      	push	{r4, r5, r7, lr}
 80063be:	b090      	sub	sp, #64	; 0x40
 80063c0:	af00      	add	r7, sp, #0
 80063c2:	6278      	str	r0, [r7, #36]	; 0x24
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 80063c4:	231a      	movs	r3, #26
 80063c6:	2220      	movs	r2, #32
 80063c8:	189b      	adds	r3, r3, r2
 80063ca:	19db      	adds	r3, r3, r7
 80063cc:	2200      	movs	r2, #0
 80063ce:	701a      	strb	r2, [r3, #0]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80063d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80063d2:	689a      	ldr	r2, [r3, #8]
 80063d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80063d6:	691b      	ldr	r3, [r3, #16]
 80063d8:	431a      	orrs	r2, r3
 80063da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80063dc:	695b      	ldr	r3, [r3, #20]
 80063de:	431a      	orrs	r2, r3
 80063e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80063e2:	69db      	ldr	r3, [r3, #28]
 80063e4:	4313      	orrs	r3, r2
 80063e6:	63fb      	str	r3, [r7, #60]	; 0x3c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80063e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80063ea:	681b      	ldr	r3, [r3, #0]
 80063ec:	681b      	ldr	r3, [r3, #0]
 80063ee:	4ac1      	ldr	r2, [pc, #772]	; (80066f4 <UART_SetConfig+0x338>)
 80063f0:	4013      	ands	r3, r2
 80063f2:	0019      	movs	r1, r3
 80063f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80063f6:	681a      	ldr	r2, [r3, #0]
 80063f8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80063fa:	430b      	orrs	r3, r1
 80063fc:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80063fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006400:	681b      	ldr	r3, [r3, #0]
 8006402:	685b      	ldr	r3, [r3, #4]
 8006404:	4abc      	ldr	r2, [pc, #752]	; (80066f8 <UART_SetConfig+0x33c>)
 8006406:	4013      	ands	r3, r2
 8006408:	0018      	movs	r0, r3
 800640a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800640c:	68d9      	ldr	r1, [r3, #12]
 800640e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006410:	681a      	ldr	r2, [r3, #0]
 8006412:	0003      	movs	r3, r0
 8006414:	430b      	orrs	r3, r1
 8006416:	6053      	str	r3, [r2, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8006418:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800641a:	699b      	ldr	r3, [r3, #24]
 800641c:	63fb      	str	r3, [r7, #60]	; 0x3c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 800641e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006420:	681b      	ldr	r3, [r3, #0]
 8006422:	4ab6      	ldr	r2, [pc, #728]	; (80066fc <UART_SetConfig+0x340>)
 8006424:	4293      	cmp	r3, r2
 8006426:	d009      	beq.n	800643c <UART_SetConfig+0x80>
 8006428:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800642a:	681b      	ldr	r3, [r3, #0]
 800642c:	4ab4      	ldr	r2, [pc, #720]	; (8006700 <UART_SetConfig+0x344>)
 800642e:	4293      	cmp	r3, r2
 8006430:	d004      	beq.n	800643c <UART_SetConfig+0x80>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8006432:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006434:	6a1b      	ldr	r3, [r3, #32]
 8006436:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8006438:	4313      	orrs	r3, r2
 800643a:	63fb      	str	r3, [r7, #60]	; 0x3c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800643c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800643e:	681b      	ldr	r3, [r3, #0]
 8006440:	689b      	ldr	r3, [r3, #8]
 8006442:	4ab0      	ldr	r2, [pc, #704]	; (8006704 <UART_SetConfig+0x348>)
 8006444:	4013      	ands	r3, r2
 8006446:	0019      	movs	r1, r3
 8006448:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800644a:	681a      	ldr	r2, [r3, #0]
 800644c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800644e:	430b      	orrs	r3, r1
 8006450:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8006452:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006454:	681b      	ldr	r3, [r3, #0]
 8006456:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006458:	220f      	movs	r2, #15
 800645a:	4393      	bics	r3, r2
 800645c:	0018      	movs	r0, r3
 800645e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006460:	6a59      	ldr	r1, [r3, #36]	; 0x24
 8006462:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006464:	681a      	ldr	r2, [r3, #0]
 8006466:	0003      	movs	r3, r0
 8006468:	430b      	orrs	r3, r1
 800646a:	62d3      	str	r3, [r2, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800646c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800646e:	681b      	ldr	r3, [r3, #0]
 8006470:	4aa5      	ldr	r2, [pc, #660]	; (8006708 <UART_SetConfig+0x34c>)
 8006472:	4293      	cmp	r3, r2
 8006474:	d131      	bne.n	80064da <UART_SetConfig+0x11e>
 8006476:	4ba5      	ldr	r3, [pc, #660]	; (800670c <UART_SetConfig+0x350>)
 8006478:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800647a:	2203      	movs	r2, #3
 800647c:	4013      	ands	r3, r2
 800647e:	2b03      	cmp	r3, #3
 8006480:	d01d      	beq.n	80064be <UART_SetConfig+0x102>
 8006482:	d823      	bhi.n	80064cc <UART_SetConfig+0x110>
 8006484:	2b02      	cmp	r3, #2
 8006486:	d00c      	beq.n	80064a2 <UART_SetConfig+0xe6>
 8006488:	d820      	bhi.n	80064cc <UART_SetConfig+0x110>
 800648a:	2b00      	cmp	r3, #0
 800648c:	d002      	beq.n	8006494 <UART_SetConfig+0xd8>
 800648e:	2b01      	cmp	r3, #1
 8006490:	d00e      	beq.n	80064b0 <UART_SetConfig+0xf4>
 8006492:	e01b      	b.n	80064cc <UART_SetConfig+0x110>
 8006494:	231b      	movs	r3, #27
 8006496:	2220      	movs	r2, #32
 8006498:	189b      	adds	r3, r3, r2
 800649a:	19db      	adds	r3, r3, r7
 800649c:	2200      	movs	r2, #0
 800649e:	701a      	strb	r2, [r3, #0]
 80064a0:	e154      	b.n	800674c <UART_SetConfig+0x390>
 80064a2:	231b      	movs	r3, #27
 80064a4:	2220      	movs	r2, #32
 80064a6:	189b      	adds	r3, r3, r2
 80064a8:	19db      	adds	r3, r3, r7
 80064aa:	2202      	movs	r2, #2
 80064ac:	701a      	strb	r2, [r3, #0]
 80064ae:	e14d      	b.n	800674c <UART_SetConfig+0x390>
 80064b0:	231b      	movs	r3, #27
 80064b2:	2220      	movs	r2, #32
 80064b4:	189b      	adds	r3, r3, r2
 80064b6:	19db      	adds	r3, r3, r7
 80064b8:	2204      	movs	r2, #4
 80064ba:	701a      	strb	r2, [r3, #0]
 80064bc:	e146      	b.n	800674c <UART_SetConfig+0x390>
 80064be:	231b      	movs	r3, #27
 80064c0:	2220      	movs	r2, #32
 80064c2:	189b      	adds	r3, r3, r2
 80064c4:	19db      	adds	r3, r3, r7
 80064c6:	2208      	movs	r2, #8
 80064c8:	701a      	strb	r2, [r3, #0]
 80064ca:	e13f      	b.n	800674c <UART_SetConfig+0x390>
 80064cc:	231b      	movs	r3, #27
 80064ce:	2220      	movs	r2, #32
 80064d0:	189b      	adds	r3, r3, r2
 80064d2:	19db      	adds	r3, r3, r7
 80064d4:	2210      	movs	r2, #16
 80064d6:	701a      	strb	r2, [r3, #0]
 80064d8:	e138      	b.n	800674c <UART_SetConfig+0x390>
 80064da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80064dc:	681b      	ldr	r3, [r3, #0]
 80064de:	4a8c      	ldr	r2, [pc, #560]	; (8006710 <UART_SetConfig+0x354>)
 80064e0:	4293      	cmp	r3, r2
 80064e2:	d131      	bne.n	8006548 <UART_SetConfig+0x18c>
 80064e4:	4b89      	ldr	r3, [pc, #548]	; (800670c <UART_SetConfig+0x350>)
 80064e6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80064e8:	220c      	movs	r2, #12
 80064ea:	4013      	ands	r3, r2
 80064ec:	2b0c      	cmp	r3, #12
 80064ee:	d01d      	beq.n	800652c <UART_SetConfig+0x170>
 80064f0:	d823      	bhi.n	800653a <UART_SetConfig+0x17e>
 80064f2:	2b08      	cmp	r3, #8
 80064f4:	d00c      	beq.n	8006510 <UART_SetConfig+0x154>
 80064f6:	d820      	bhi.n	800653a <UART_SetConfig+0x17e>
 80064f8:	2b00      	cmp	r3, #0
 80064fa:	d002      	beq.n	8006502 <UART_SetConfig+0x146>
 80064fc:	2b04      	cmp	r3, #4
 80064fe:	d00e      	beq.n	800651e <UART_SetConfig+0x162>
 8006500:	e01b      	b.n	800653a <UART_SetConfig+0x17e>
 8006502:	231b      	movs	r3, #27
 8006504:	2220      	movs	r2, #32
 8006506:	189b      	adds	r3, r3, r2
 8006508:	19db      	adds	r3, r3, r7
 800650a:	2200      	movs	r2, #0
 800650c:	701a      	strb	r2, [r3, #0]
 800650e:	e11d      	b.n	800674c <UART_SetConfig+0x390>
 8006510:	231b      	movs	r3, #27
 8006512:	2220      	movs	r2, #32
 8006514:	189b      	adds	r3, r3, r2
 8006516:	19db      	adds	r3, r3, r7
 8006518:	2202      	movs	r2, #2
 800651a:	701a      	strb	r2, [r3, #0]
 800651c:	e116      	b.n	800674c <UART_SetConfig+0x390>
 800651e:	231b      	movs	r3, #27
 8006520:	2220      	movs	r2, #32
 8006522:	189b      	adds	r3, r3, r2
 8006524:	19db      	adds	r3, r3, r7
 8006526:	2204      	movs	r2, #4
 8006528:	701a      	strb	r2, [r3, #0]
 800652a:	e10f      	b.n	800674c <UART_SetConfig+0x390>
 800652c:	231b      	movs	r3, #27
 800652e:	2220      	movs	r2, #32
 8006530:	189b      	adds	r3, r3, r2
 8006532:	19db      	adds	r3, r3, r7
 8006534:	2208      	movs	r2, #8
 8006536:	701a      	strb	r2, [r3, #0]
 8006538:	e108      	b.n	800674c <UART_SetConfig+0x390>
 800653a:	231b      	movs	r3, #27
 800653c:	2220      	movs	r2, #32
 800653e:	189b      	adds	r3, r3, r2
 8006540:	19db      	adds	r3, r3, r7
 8006542:	2210      	movs	r2, #16
 8006544:	701a      	strb	r2, [r3, #0]
 8006546:	e101      	b.n	800674c <UART_SetConfig+0x390>
 8006548:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800654a:	681b      	ldr	r3, [r3, #0]
 800654c:	4a71      	ldr	r2, [pc, #452]	; (8006714 <UART_SetConfig+0x358>)
 800654e:	4293      	cmp	r3, r2
 8006550:	d131      	bne.n	80065b6 <UART_SetConfig+0x1fa>
 8006552:	4b6e      	ldr	r3, [pc, #440]	; (800670c <UART_SetConfig+0x350>)
 8006554:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006556:	2230      	movs	r2, #48	; 0x30
 8006558:	4013      	ands	r3, r2
 800655a:	2b30      	cmp	r3, #48	; 0x30
 800655c:	d01d      	beq.n	800659a <UART_SetConfig+0x1de>
 800655e:	d823      	bhi.n	80065a8 <UART_SetConfig+0x1ec>
 8006560:	2b20      	cmp	r3, #32
 8006562:	d00c      	beq.n	800657e <UART_SetConfig+0x1c2>
 8006564:	d820      	bhi.n	80065a8 <UART_SetConfig+0x1ec>
 8006566:	2b00      	cmp	r3, #0
 8006568:	d002      	beq.n	8006570 <UART_SetConfig+0x1b4>
 800656a:	2b10      	cmp	r3, #16
 800656c:	d00e      	beq.n	800658c <UART_SetConfig+0x1d0>
 800656e:	e01b      	b.n	80065a8 <UART_SetConfig+0x1ec>
 8006570:	231b      	movs	r3, #27
 8006572:	2220      	movs	r2, #32
 8006574:	189b      	adds	r3, r3, r2
 8006576:	19db      	adds	r3, r3, r7
 8006578:	2200      	movs	r2, #0
 800657a:	701a      	strb	r2, [r3, #0]
 800657c:	e0e6      	b.n	800674c <UART_SetConfig+0x390>
 800657e:	231b      	movs	r3, #27
 8006580:	2220      	movs	r2, #32
 8006582:	189b      	adds	r3, r3, r2
 8006584:	19db      	adds	r3, r3, r7
 8006586:	2202      	movs	r2, #2
 8006588:	701a      	strb	r2, [r3, #0]
 800658a:	e0df      	b.n	800674c <UART_SetConfig+0x390>
 800658c:	231b      	movs	r3, #27
 800658e:	2220      	movs	r2, #32
 8006590:	189b      	adds	r3, r3, r2
 8006592:	19db      	adds	r3, r3, r7
 8006594:	2204      	movs	r2, #4
 8006596:	701a      	strb	r2, [r3, #0]
 8006598:	e0d8      	b.n	800674c <UART_SetConfig+0x390>
 800659a:	231b      	movs	r3, #27
 800659c:	2220      	movs	r2, #32
 800659e:	189b      	adds	r3, r3, r2
 80065a0:	19db      	adds	r3, r3, r7
 80065a2:	2208      	movs	r2, #8
 80065a4:	701a      	strb	r2, [r3, #0]
 80065a6:	e0d1      	b.n	800674c <UART_SetConfig+0x390>
 80065a8:	231b      	movs	r3, #27
 80065aa:	2220      	movs	r2, #32
 80065ac:	189b      	adds	r3, r3, r2
 80065ae:	19db      	adds	r3, r3, r7
 80065b0:	2210      	movs	r2, #16
 80065b2:	701a      	strb	r2, [r3, #0]
 80065b4:	e0ca      	b.n	800674c <UART_SetConfig+0x390>
 80065b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80065b8:	681b      	ldr	r3, [r3, #0]
 80065ba:	4a57      	ldr	r2, [pc, #348]	; (8006718 <UART_SetConfig+0x35c>)
 80065bc:	4293      	cmp	r3, r2
 80065be:	d106      	bne.n	80065ce <UART_SetConfig+0x212>
 80065c0:	231b      	movs	r3, #27
 80065c2:	2220      	movs	r2, #32
 80065c4:	189b      	adds	r3, r3, r2
 80065c6:	19db      	adds	r3, r3, r7
 80065c8:	2200      	movs	r2, #0
 80065ca:	701a      	strb	r2, [r3, #0]
 80065cc:	e0be      	b.n	800674c <UART_SetConfig+0x390>
 80065ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80065d0:	681b      	ldr	r3, [r3, #0]
 80065d2:	4a52      	ldr	r2, [pc, #328]	; (800671c <UART_SetConfig+0x360>)
 80065d4:	4293      	cmp	r3, r2
 80065d6:	d106      	bne.n	80065e6 <UART_SetConfig+0x22a>
 80065d8:	231b      	movs	r3, #27
 80065da:	2220      	movs	r2, #32
 80065dc:	189b      	adds	r3, r3, r2
 80065de:	19db      	adds	r3, r3, r7
 80065e0:	2200      	movs	r2, #0
 80065e2:	701a      	strb	r2, [r3, #0]
 80065e4:	e0b2      	b.n	800674c <UART_SetConfig+0x390>
 80065e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80065e8:	681b      	ldr	r3, [r3, #0]
 80065ea:	4a4d      	ldr	r2, [pc, #308]	; (8006720 <UART_SetConfig+0x364>)
 80065ec:	4293      	cmp	r3, r2
 80065ee:	d106      	bne.n	80065fe <UART_SetConfig+0x242>
 80065f0:	231b      	movs	r3, #27
 80065f2:	2220      	movs	r2, #32
 80065f4:	189b      	adds	r3, r3, r2
 80065f6:	19db      	adds	r3, r3, r7
 80065f8:	2200      	movs	r2, #0
 80065fa:	701a      	strb	r2, [r3, #0]
 80065fc:	e0a6      	b.n	800674c <UART_SetConfig+0x390>
 80065fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006600:	681b      	ldr	r3, [r3, #0]
 8006602:	4a3e      	ldr	r2, [pc, #248]	; (80066fc <UART_SetConfig+0x340>)
 8006604:	4293      	cmp	r3, r2
 8006606:	d13e      	bne.n	8006686 <UART_SetConfig+0x2ca>
 8006608:	4b40      	ldr	r3, [pc, #256]	; (800670c <UART_SetConfig+0x350>)
 800660a:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800660c:	23c0      	movs	r3, #192	; 0xc0
 800660e:	011b      	lsls	r3, r3, #4
 8006610:	4013      	ands	r3, r2
 8006612:	22c0      	movs	r2, #192	; 0xc0
 8006614:	0112      	lsls	r2, r2, #4
 8006616:	4293      	cmp	r3, r2
 8006618:	d027      	beq.n	800666a <UART_SetConfig+0x2ae>
 800661a:	22c0      	movs	r2, #192	; 0xc0
 800661c:	0112      	lsls	r2, r2, #4
 800661e:	4293      	cmp	r3, r2
 8006620:	d82a      	bhi.n	8006678 <UART_SetConfig+0x2bc>
 8006622:	2280      	movs	r2, #128	; 0x80
 8006624:	0112      	lsls	r2, r2, #4
 8006626:	4293      	cmp	r3, r2
 8006628:	d011      	beq.n	800664e <UART_SetConfig+0x292>
 800662a:	2280      	movs	r2, #128	; 0x80
 800662c:	0112      	lsls	r2, r2, #4
 800662e:	4293      	cmp	r3, r2
 8006630:	d822      	bhi.n	8006678 <UART_SetConfig+0x2bc>
 8006632:	2b00      	cmp	r3, #0
 8006634:	d004      	beq.n	8006640 <UART_SetConfig+0x284>
 8006636:	2280      	movs	r2, #128	; 0x80
 8006638:	00d2      	lsls	r2, r2, #3
 800663a:	4293      	cmp	r3, r2
 800663c:	d00e      	beq.n	800665c <UART_SetConfig+0x2a0>
 800663e:	e01b      	b.n	8006678 <UART_SetConfig+0x2bc>
 8006640:	231b      	movs	r3, #27
 8006642:	2220      	movs	r2, #32
 8006644:	189b      	adds	r3, r3, r2
 8006646:	19db      	adds	r3, r3, r7
 8006648:	2200      	movs	r2, #0
 800664a:	701a      	strb	r2, [r3, #0]
 800664c:	e07e      	b.n	800674c <UART_SetConfig+0x390>
 800664e:	231b      	movs	r3, #27
 8006650:	2220      	movs	r2, #32
 8006652:	189b      	adds	r3, r3, r2
 8006654:	19db      	adds	r3, r3, r7
 8006656:	2202      	movs	r2, #2
 8006658:	701a      	strb	r2, [r3, #0]
 800665a:	e077      	b.n	800674c <UART_SetConfig+0x390>
 800665c:	231b      	movs	r3, #27
 800665e:	2220      	movs	r2, #32
 8006660:	189b      	adds	r3, r3, r2
 8006662:	19db      	adds	r3, r3, r7
 8006664:	2204      	movs	r2, #4
 8006666:	701a      	strb	r2, [r3, #0]
 8006668:	e070      	b.n	800674c <UART_SetConfig+0x390>
 800666a:	231b      	movs	r3, #27
 800666c:	2220      	movs	r2, #32
 800666e:	189b      	adds	r3, r3, r2
 8006670:	19db      	adds	r3, r3, r7
 8006672:	2208      	movs	r2, #8
 8006674:	701a      	strb	r2, [r3, #0]
 8006676:	e069      	b.n	800674c <UART_SetConfig+0x390>
 8006678:	231b      	movs	r3, #27
 800667a:	2220      	movs	r2, #32
 800667c:	189b      	adds	r3, r3, r2
 800667e:	19db      	adds	r3, r3, r7
 8006680:	2210      	movs	r2, #16
 8006682:	701a      	strb	r2, [r3, #0]
 8006684:	e062      	b.n	800674c <UART_SetConfig+0x390>
 8006686:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006688:	681b      	ldr	r3, [r3, #0]
 800668a:	4a1d      	ldr	r2, [pc, #116]	; (8006700 <UART_SetConfig+0x344>)
 800668c:	4293      	cmp	r3, r2
 800668e:	d157      	bne.n	8006740 <UART_SetConfig+0x384>
 8006690:	4b1e      	ldr	r3, [pc, #120]	; (800670c <UART_SetConfig+0x350>)
 8006692:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8006694:	23c0      	movs	r3, #192	; 0xc0
 8006696:	009b      	lsls	r3, r3, #2
 8006698:	4013      	ands	r3, r2
 800669a:	22c0      	movs	r2, #192	; 0xc0
 800669c:	0092      	lsls	r2, r2, #2
 800669e:	4293      	cmp	r3, r2
 80066a0:	d040      	beq.n	8006724 <UART_SetConfig+0x368>
 80066a2:	22c0      	movs	r2, #192	; 0xc0
 80066a4:	0092      	lsls	r2, r2, #2
 80066a6:	4293      	cmp	r3, r2
 80066a8:	d843      	bhi.n	8006732 <UART_SetConfig+0x376>
 80066aa:	2280      	movs	r2, #128	; 0x80
 80066ac:	0092      	lsls	r2, r2, #2
 80066ae:	4293      	cmp	r3, r2
 80066b0:	d011      	beq.n	80066d6 <UART_SetConfig+0x31a>
 80066b2:	2280      	movs	r2, #128	; 0x80
 80066b4:	0092      	lsls	r2, r2, #2
 80066b6:	4293      	cmp	r3, r2
 80066b8:	d83b      	bhi.n	8006732 <UART_SetConfig+0x376>
 80066ba:	2b00      	cmp	r3, #0
 80066bc:	d004      	beq.n	80066c8 <UART_SetConfig+0x30c>
 80066be:	2280      	movs	r2, #128	; 0x80
 80066c0:	0052      	lsls	r2, r2, #1
 80066c2:	4293      	cmp	r3, r2
 80066c4:	d00e      	beq.n	80066e4 <UART_SetConfig+0x328>
 80066c6:	e034      	b.n	8006732 <UART_SetConfig+0x376>
 80066c8:	231b      	movs	r3, #27
 80066ca:	2220      	movs	r2, #32
 80066cc:	189b      	adds	r3, r3, r2
 80066ce:	19db      	adds	r3, r3, r7
 80066d0:	2200      	movs	r2, #0
 80066d2:	701a      	strb	r2, [r3, #0]
 80066d4:	e03a      	b.n	800674c <UART_SetConfig+0x390>
 80066d6:	231b      	movs	r3, #27
 80066d8:	2220      	movs	r2, #32
 80066da:	189b      	adds	r3, r3, r2
 80066dc:	19db      	adds	r3, r3, r7
 80066de:	2202      	movs	r2, #2
 80066e0:	701a      	strb	r2, [r3, #0]
 80066e2:	e033      	b.n	800674c <UART_SetConfig+0x390>
 80066e4:	231b      	movs	r3, #27
 80066e6:	2220      	movs	r2, #32
 80066e8:	189b      	adds	r3, r3, r2
 80066ea:	19db      	adds	r3, r3, r7
 80066ec:	2204      	movs	r2, #4
 80066ee:	701a      	strb	r2, [r3, #0]
 80066f0:	e02c      	b.n	800674c <UART_SetConfig+0x390>
 80066f2:	46c0      	nop			; (mov r8, r8)
 80066f4:	cfff69f3 	.word	0xcfff69f3
 80066f8:	ffffcfff 	.word	0xffffcfff
 80066fc:	40008000 	.word	0x40008000
 8006700:	40008400 	.word	0x40008400
 8006704:	11fff4ff 	.word	0x11fff4ff
 8006708:	40013800 	.word	0x40013800
 800670c:	40021000 	.word	0x40021000
 8006710:	40004400 	.word	0x40004400
 8006714:	40004800 	.word	0x40004800
 8006718:	40004c00 	.word	0x40004c00
 800671c:	40005000 	.word	0x40005000
 8006720:	40013c00 	.word	0x40013c00
 8006724:	231b      	movs	r3, #27
 8006726:	2220      	movs	r2, #32
 8006728:	189b      	adds	r3, r3, r2
 800672a:	19db      	adds	r3, r3, r7
 800672c:	2208      	movs	r2, #8
 800672e:	701a      	strb	r2, [r3, #0]
 8006730:	e00c      	b.n	800674c <UART_SetConfig+0x390>
 8006732:	231b      	movs	r3, #27
 8006734:	2220      	movs	r2, #32
 8006736:	189b      	adds	r3, r3, r2
 8006738:	19db      	adds	r3, r3, r7
 800673a:	2210      	movs	r2, #16
 800673c:	701a      	strb	r2, [r3, #0]
 800673e:	e005      	b.n	800674c <UART_SetConfig+0x390>
 8006740:	231b      	movs	r3, #27
 8006742:	2220      	movs	r2, #32
 8006744:	189b      	adds	r3, r3, r2
 8006746:	19db      	adds	r3, r3, r7
 8006748:	2210      	movs	r2, #16
 800674a:	701a      	strb	r2, [r3, #0]

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800674c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800674e:	681b      	ldr	r3, [r3, #0]
 8006750:	4ac1      	ldr	r2, [pc, #772]	; (8006a58 <UART_SetConfig+0x69c>)
 8006752:	4293      	cmp	r3, r2
 8006754:	d005      	beq.n	8006762 <UART_SetConfig+0x3a6>
 8006756:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006758:	681b      	ldr	r3, [r3, #0]
 800675a:	4ac0      	ldr	r2, [pc, #768]	; (8006a5c <UART_SetConfig+0x6a0>)
 800675c:	4293      	cmp	r3, r2
 800675e:	d000      	beq.n	8006762 <UART_SetConfig+0x3a6>
 8006760:	e093      	b.n	800688a <UART_SetConfig+0x4ce>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8006762:	231b      	movs	r3, #27
 8006764:	2220      	movs	r2, #32
 8006766:	189b      	adds	r3, r3, r2
 8006768:	19db      	adds	r3, r3, r7
 800676a:	781b      	ldrb	r3, [r3, #0]
 800676c:	2b08      	cmp	r3, #8
 800676e:	d015      	beq.n	800679c <UART_SetConfig+0x3e0>
 8006770:	dc18      	bgt.n	80067a4 <UART_SetConfig+0x3e8>
 8006772:	2b04      	cmp	r3, #4
 8006774:	d00d      	beq.n	8006792 <UART_SetConfig+0x3d6>
 8006776:	dc15      	bgt.n	80067a4 <UART_SetConfig+0x3e8>
 8006778:	2b00      	cmp	r3, #0
 800677a:	d002      	beq.n	8006782 <UART_SetConfig+0x3c6>
 800677c:	2b02      	cmp	r3, #2
 800677e:	d005      	beq.n	800678c <UART_SetConfig+0x3d0>
 8006780:	e010      	b.n	80067a4 <UART_SetConfig+0x3e8>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8006782:	f7fe f9a3 	bl	8004acc <HAL_RCC_GetPCLK1Freq>
 8006786:	0003      	movs	r3, r0
 8006788:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800678a:	e014      	b.n	80067b6 <UART_SetConfig+0x3fa>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800678c:	4bb4      	ldr	r3, [pc, #720]	; (8006a60 <UART_SetConfig+0x6a4>)
 800678e:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8006790:	e011      	b.n	80067b6 <UART_SetConfig+0x3fa>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8006792:	f7fe f90f 	bl	80049b4 <HAL_RCC_GetSysClockFreq>
 8006796:	0003      	movs	r3, r0
 8006798:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800679a:	e00c      	b.n	80067b6 <UART_SetConfig+0x3fa>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800679c:	2380      	movs	r3, #128	; 0x80
 800679e:	021b      	lsls	r3, r3, #8
 80067a0:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 80067a2:	e008      	b.n	80067b6 <UART_SetConfig+0x3fa>
      default:
        pclk = 0U;
 80067a4:	2300      	movs	r3, #0
 80067a6:	637b      	str	r3, [r7, #52]	; 0x34
        ret = HAL_ERROR;
 80067a8:	231a      	movs	r3, #26
 80067aa:	2220      	movs	r2, #32
 80067ac:	189b      	adds	r3, r3, r2
 80067ae:	19db      	adds	r3, r3, r7
 80067b0:	2201      	movs	r2, #1
 80067b2:	701a      	strb	r2, [r3, #0]
        break;
 80067b4:	46c0      	nop			; (mov r8, r8)
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 80067b6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80067b8:	2b00      	cmp	r3, #0
 80067ba:	d100      	bne.n	80067be <UART_SetConfig+0x402>
 80067bc:	e135      	b.n	8006a2a <UART_SetConfig+0x66e>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 80067be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80067c0:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80067c2:	4ba8      	ldr	r3, [pc, #672]	; (8006a64 <UART_SetConfig+0x6a8>)
 80067c4:	0052      	lsls	r2, r2, #1
 80067c6:	5ad3      	ldrh	r3, [r2, r3]
 80067c8:	0019      	movs	r1, r3
 80067ca:	6b78      	ldr	r0, [r7, #52]	; 0x34
 80067cc:	f7f9 fcb6 	bl	800013c <__udivsi3>
 80067d0:	0003      	movs	r3, r0
 80067d2:	62bb      	str	r3, [r7, #40]	; 0x28

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 80067d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80067d6:	685a      	ldr	r2, [r3, #4]
 80067d8:	0013      	movs	r3, r2
 80067da:	005b      	lsls	r3, r3, #1
 80067dc:	189b      	adds	r3, r3, r2
 80067de:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80067e0:	429a      	cmp	r2, r3
 80067e2:	d305      	bcc.n	80067f0 <UART_SetConfig+0x434>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 80067e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80067e6:	685b      	ldr	r3, [r3, #4]
 80067e8:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 80067ea:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80067ec:	429a      	cmp	r2, r3
 80067ee:	d906      	bls.n	80067fe <UART_SetConfig+0x442>
      {
        ret = HAL_ERROR;
 80067f0:	231a      	movs	r3, #26
 80067f2:	2220      	movs	r2, #32
 80067f4:	189b      	adds	r3, r3, r2
 80067f6:	19db      	adds	r3, r3, r7
 80067f8:	2201      	movs	r2, #1
 80067fa:	701a      	strb	r2, [r3, #0]
 80067fc:	e044      	b.n	8006888 <UART_SetConfig+0x4cc>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80067fe:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006800:	61bb      	str	r3, [r7, #24]
 8006802:	2300      	movs	r3, #0
 8006804:	61fb      	str	r3, [r7, #28]
 8006806:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006808:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800680a:	4b96      	ldr	r3, [pc, #600]	; (8006a64 <UART_SetConfig+0x6a8>)
 800680c:	0052      	lsls	r2, r2, #1
 800680e:	5ad3      	ldrh	r3, [r2, r3]
 8006810:	613b      	str	r3, [r7, #16]
 8006812:	2300      	movs	r3, #0
 8006814:	617b      	str	r3, [r7, #20]
 8006816:	693a      	ldr	r2, [r7, #16]
 8006818:	697b      	ldr	r3, [r7, #20]
 800681a:	69b8      	ldr	r0, [r7, #24]
 800681c:	69f9      	ldr	r1, [r7, #28]
 800681e:	f7f9 fe41 	bl	80004a4 <__aeabi_uldivmod>
 8006822:	0002      	movs	r2, r0
 8006824:	000b      	movs	r3, r1
 8006826:	0e11      	lsrs	r1, r2, #24
 8006828:	021d      	lsls	r5, r3, #8
 800682a:	430d      	orrs	r5, r1
 800682c:	0214      	lsls	r4, r2, #8
 800682e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006830:	685b      	ldr	r3, [r3, #4]
 8006832:	085b      	lsrs	r3, r3, #1
 8006834:	60bb      	str	r3, [r7, #8]
 8006836:	2300      	movs	r3, #0
 8006838:	60fb      	str	r3, [r7, #12]
 800683a:	68b8      	ldr	r0, [r7, #8]
 800683c:	68f9      	ldr	r1, [r7, #12]
 800683e:	1900      	adds	r0, r0, r4
 8006840:	4169      	adcs	r1, r5
 8006842:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006844:	685b      	ldr	r3, [r3, #4]
 8006846:	603b      	str	r3, [r7, #0]
 8006848:	2300      	movs	r3, #0
 800684a:	607b      	str	r3, [r7, #4]
 800684c:	683a      	ldr	r2, [r7, #0]
 800684e:	687b      	ldr	r3, [r7, #4]
 8006850:	f7f9 fe28 	bl	80004a4 <__aeabi_uldivmod>
 8006854:	0002      	movs	r2, r0
 8006856:	000b      	movs	r3, r1
 8006858:	0013      	movs	r3, r2
 800685a:	633b      	str	r3, [r7, #48]	; 0x30
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800685c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800685e:	23c0      	movs	r3, #192	; 0xc0
 8006860:	009b      	lsls	r3, r3, #2
 8006862:	429a      	cmp	r2, r3
 8006864:	d309      	bcc.n	800687a <UART_SetConfig+0x4be>
 8006866:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006868:	2380      	movs	r3, #128	; 0x80
 800686a:	035b      	lsls	r3, r3, #13
 800686c:	429a      	cmp	r2, r3
 800686e:	d204      	bcs.n	800687a <UART_SetConfig+0x4be>
        {
          huart->Instance->BRR = usartdiv;
 8006870:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006872:	681b      	ldr	r3, [r3, #0]
 8006874:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006876:	60da      	str	r2, [r3, #12]
 8006878:	e006      	b.n	8006888 <UART_SetConfig+0x4cc>
        }
        else
        {
          ret = HAL_ERROR;
 800687a:	231a      	movs	r3, #26
 800687c:	2220      	movs	r2, #32
 800687e:	189b      	adds	r3, r3, r2
 8006880:	19db      	adds	r3, r3, r7
 8006882:	2201      	movs	r2, #1
 8006884:	701a      	strb	r2, [r3, #0]
    if (pclk != 0U)
 8006886:	e0d0      	b.n	8006a2a <UART_SetConfig+0x66e>
 8006888:	e0cf      	b.n	8006a2a <UART_SetConfig+0x66e>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800688a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800688c:	69da      	ldr	r2, [r3, #28]
 800688e:	2380      	movs	r3, #128	; 0x80
 8006890:	021b      	lsls	r3, r3, #8
 8006892:	429a      	cmp	r2, r3
 8006894:	d000      	beq.n	8006898 <UART_SetConfig+0x4dc>
 8006896:	e070      	b.n	800697a <UART_SetConfig+0x5be>
  {
    switch (clocksource)
 8006898:	231b      	movs	r3, #27
 800689a:	2220      	movs	r2, #32
 800689c:	189b      	adds	r3, r3, r2
 800689e:	19db      	adds	r3, r3, r7
 80068a0:	781b      	ldrb	r3, [r3, #0]
 80068a2:	2b08      	cmp	r3, #8
 80068a4:	d015      	beq.n	80068d2 <UART_SetConfig+0x516>
 80068a6:	dc18      	bgt.n	80068da <UART_SetConfig+0x51e>
 80068a8:	2b04      	cmp	r3, #4
 80068aa:	d00d      	beq.n	80068c8 <UART_SetConfig+0x50c>
 80068ac:	dc15      	bgt.n	80068da <UART_SetConfig+0x51e>
 80068ae:	2b00      	cmp	r3, #0
 80068b0:	d002      	beq.n	80068b8 <UART_SetConfig+0x4fc>
 80068b2:	2b02      	cmp	r3, #2
 80068b4:	d005      	beq.n	80068c2 <UART_SetConfig+0x506>
 80068b6:	e010      	b.n	80068da <UART_SetConfig+0x51e>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80068b8:	f7fe f908 	bl	8004acc <HAL_RCC_GetPCLK1Freq>
 80068bc:	0003      	movs	r3, r0
 80068be:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 80068c0:	e014      	b.n	80068ec <UART_SetConfig+0x530>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80068c2:	4b67      	ldr	r3, [pc, #412]	; (8006a60 <UART_SetConfig+0x6a4>)
 80068c4:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 80068c6:	e011      	b.n	80068ec <UART_SetConfig+0x530>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80068c8:	f7fe f874 	bl	80049b4 <HAL_RCC_GetSysClockFreq>
 80068cc:	0003      	movs	r3, r0
 80068ce:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 80068d0:	e00c      	b.n	80068ec <UART_SetConfig+0x530>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80068d2:	2380      	movs	r3, #128	; 0x80
 80068d4:	021b      	lsls	r3, r3, #8
 80068d6:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 80068d8:	e008      	b.n	80068ec <UART_SetConfig+0x530>
      default:
        pclk = 0U;
 80068da:	2300      	movs	r3, #0
 80068dc:	637b      	str	r3, [r7, #52]	; 0x34
        ret = HAL_ERROR;
 80068de:	231a      	movs	r3, #26
 80068e0:	2220      	movs	r2, #32
 80068e2:	189b      	adds	r3, r3, r2
 80068e4:	19db      	adds	r3, r3, r7
 80068e6:	2201      	movs	r2, #1
 80068e8:	701a      	strb	r2, [r3, #0]
        break;
 80068ea:	46c0      	nop			; (mov r8, r8)
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 80068ec:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80068ee:	2b00      	cmp	r3, #0
 80068f0:	d100      	bne.n	80068f4 <UART_SetConfig+0x538>
 80068f2:	e09a      	b.n	8006a2a <UART_SetConfig+0x66e>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80068f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80068f6:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80068f8:	4b5a      	ldr	r3, [pc, #360]	; (8006a64 <UART_SetConfig+0x6a8>)
 80068fa:	0052      	lsls	r2, r2, #1
 80068fc:	5ad3      	ldrh	r3, [r2, r3]
 80068fe:	0019      	movs	r1, r3
 8006900:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8006902:	f7f9 fc1b 	bl	800013c <__udivsi3>
 8006906:	0003      	movs	r3, r0
 8006908:	005a      	lsls	r2, r3, #1
 800690a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800690c:	685b      	ldr	r3, [r3, #4]
 800690e:	085b      	lsrs	r3, r3, #1
 8006910:	18d2      	adds	r2, r2, r3
 8006912:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006914:	685b      	ldr	r3, [r3, #4]
 8006916:	0019      	movs	r1, r3
 8006918:	0010      	movs	r0, r2
 800691a:	f7f9 fc0f 	bl	800013c <__udivsi3>
 800691e:	0003      	movs	r3, r0
 8006920:	633b      	str	r3, [r7, #48]	; 0x30
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8006922:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006924:	2b0f      	cmp	r3, #15
 8006926:	d921      	bls.n	800696c <UART_SetConfig+0x5b0>
 8006928:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800692a:	2380      	movs	r3, #128	; 0x80
 800692c:	025b      	lsls	r3, r3, #9
 800692e:	429a      	cmp	r2, r3
 8006930:	d21c      	bcs.n	800696c <UART_SetConfig+0x5b0>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8006932:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006934:	b29a      	uxth	r2, r3
 8006936:	200e      	movs	r0, #14
 8006938:	2420      	movs	r4, #32
 800693a:	1903      	adds	r3, r0, r4
 800693c:	19db      	adds	r3, r3, r7
 800693e:	210f      	movs	r1, #15
 8006940:	438a      	bics	r2, r1
 8006942:	801a      	strh	r2, [r3, #0]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8006944:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006946:	085b      	lsrs	r3, r3, #1
 8006948:	b29b      	uxth	r3, r3
 800694a:	2207      	movs	r2, #7
 800694c:	4013      	ands	r3, r2
 800694e:	b299      	uxth	r1, r3
 8006950:	1903      	adds	r3, r0, r4
 8006952:	19db      	adds	r3, r3, r7
 8006954:	1902      	adds	r2, r0, r4
 8006956:	19d2      	adds	r2, r2, r7
 8006958:	8812      	ldrh	r2, [r2, #0]
 800695a:	430a      	orrs	r2, r1
 800695c:	801a      	strh	r2, [r3, #0]
        huart->Instance->BRR = brrtemp;
 800695e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006960:	681b      	ldr	r3, [r3, #0]
 8006962:	1902      	adds	r2, r0, r4
 8006964:	19d2      	adds	r2, r2, r7
 8006966:	8812      	ldrh	r2, [r2, #0]
 8006968:	60da      	str	r2, [r3, #12]
 800696a:	e05e      	b.n	8006a2a <UART_SetConfig+0x66e>
      }
      else
      {
        ret = HAL_ERROR;
 800696c:	231a      	movs	r3, #26
 800696e:	2220      	movs	r2, #32
 8006970:	189b      	adds	r3, r3, r2
 8006972:	19db      	adds	r3, r3, r7
 8006974:	2201      	movs	r2, #1
 8006976:	701a      	strb	r2, [r3, #0]
 8006978:	e057      	b.n	8006a2a <UART_SetConfig+0x66e>
      }
    }
  }
  else
  {
    switch (clocksource)
 800697a:	231b      	movs	r3, #27
 800697c:	2220      	movs	r2, #32
 800697e:	189b      	adds	r3, r3, r2
 8006980:	19db      	adds	r3, r3, r7
 8006982:	781b      	ldrb	r3, [r3, #0]
 8006984:	2b08      	cmp	r3, #8
 8006986:	d015      	beq.n	80069b4 <UART_SetConfig+0x5f8>
 8006988:	dc18      	bgt.n	80069bc <UART_SetConfig+0x600>
 800698a:	2b04      	cmp	r3, #4
 800698c:	d00d      	beq.n	80069aa <UART_SetConfig+0x5ee>
 800698e:	dc15      	bgt.n	80069bc <UART_SetConfig+0x600>
 8006990:	2b00      	cmp	r3, #0
 8006992:	d002      	beq.n	800699a <UART_SetConfig+0x5de>
 8006994:	2b02      	cmp	r3, #2
 8006996:	d005      	beq.n	80069a4 <UART_SetConfig+0x5e8>
 8006998:	e010      	b.n	80069bc <UART_SetConfig+0x600>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800699a:	f7fe f897 	bl	8004acc <HAL_RCC_GetPCLK1Freq>
 800699e:	0003      	movs	r3, r0
 80069a0:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 80069a2:	e014      	b.n	80069ce <UART_SetConfig+0x612>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80069a4:	4b2e      	ldr	r3, [pc, #184]	; (8006a60 <UART_SetConfig+0x6a4>)
 80069a6:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 80069a8:	e011      	b.n	80069ce <UART_SetConfig+0x612>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80069aa:	f7fe f803 	bl	80049b4 <HAL_RCC_GetSysClockFreq>
 80069ae:	0003      	movs	r3, r0
 80069b0:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 80069b2:	e00c      	b.n	80069ce <UART_SetConfig+0x612>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80069b4:	2380      	movs	r3, #128	; 0x80
 80069b6:	021b      	lsls	r3, r3, #8
 80069b8:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 80069ba:	e008      	b.n	80069ce <UART_SetConfig+0x612>
      default:
        pclk = 0U;
 80069bc:	2300      	movs	r3, #0
 80069be:	637b      	str	r3, [r7, #52]	; 0x34
        ret = HAL_ERROR;
 80069c0:	231a      	movs	r3, #26
 80069c2:	2220      	movs	r2, #32
 80069c4:	189b      	adds	r3, r3, r2
 80069c6:	19db      	adds	r3, r3, r7
 80069c8:	2201      	movs	r2, #1
 80069ca:	701a      	strb	r2, [r3, #0]
        break;
 80069cc:	46c0      	nop			; (mov r8, r8)
    }

    if (pclk != 0U)
 80069ce:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80069d0:	2b00      	cmp	r3, #0
 80069d2:	d02a      	beq.n	8006a2a <UART_SetConfig+0x66e>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80069d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80069d6:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80069d8:	4b22      	ldr	r3, [pc, #136]	; (8006a64 <UART_SetConfig+0x6a8>)
 80069da:	0052      	lsls	r2, r2, #1
 80069dc:	5ad3      	ldrh	r3, [r2, r3]
 80069de:	0019      	movs	r1, r3
 80069e0:	6b78      	ldr	r0, [r7, #52]	; 0x34
 80069e2:	f7f9 fbab 	bl	800013c <__udivsi3>
 80069e6:	0003      	movs	r3, r0
 80069e8:	001a      	movs	r2, r3
 80069ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80069ec:	685b      	ldr	r3, [r3, #4]
 80069ee:	085b      	lsrs	r3, r3, #1
 80069f0:	18d2      	adds	r2, r2, r3
 80069f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80069f4:	685b      	ldr	r3, [r3, #4]
 80069f6:	0019      	movs	r1, r3
 80069f8:	0010      	movs	r0, r2
 80069fa:	f7f9 fb9f 	bl	800013c <__udivsi3>
 80069fe:	0003      	movs	r3, r0
 8006a00:	633b      	str	r3, [r7, #48]	; 0x30
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8006a02:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006a04:	2b0f      	cmp	r3, #15
 8006a06:	d90a      	bls.n	8006a1e <UART_SetConfig+0x662>
 8006a08:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006a0a:	2380      	movs	r3, #128	; 0x80
 8006a0c:	025b      	lsls	r3, r3, #9
 8006a0e:	429a      	cmp	r2, r3
 8006a10:	d205      	bcs.n	8006a1e <UART_SetConfig+0x662>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8006a12:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006a14:	b29a      	uxth	r2, r3
 8006a16:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006a18:	681b      	ldr	r3, [r3, #0]
 8006a1a:	60da      	str	r2, [r3, #12]
 8006a1c:	e005      	b.n	8006a2a <UART_SetConfig+0x66e>
      }
      else
      {
        ret = HAL_ERROR;
 8006a1e:	231a      	movs	r3, #26
 8006a20:	2220      	movs	r2, #32
 8006a22:	189b      	adds	r3, r3, r2
 8006a24:	19db      	adds	r3, r3, r7
 8006a26:	2201      	movs	r2, #1
 8006a28:	701a      	strb	r2, [r3, #0]
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8006a2a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006a2c:	226a      	movs	r2, #106	; 0x6a
 8006a2e:	2101      	movs	r1, #1
 8006a30:	5299      	strh	r1, [r3, r2]
  huart->NbRxDataToProcess = 1;
 8006a32:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006a34:	2268      	movs	r2, #104	; 0x68
 8006a36:	2101      	movs	r1, #1
 8006a38:	5299      	strh	r1, [r3, r2]

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8006a3a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006a3c:	2200      	movs	r2, #0
 8006a3e:	675a      	str	r2, [r3, #116]	; 0x74
  huart->TxISR = NULL;
 8006a40:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006a42:	2200      	movs	r2, #0
 8006a44:	679a      	str	r2, [r3, #120]	; 0x78

  return ret;
 8006a46:	231a      	movs	r3, #26
 8006a48:	2220      	movs	r2, #32
 8006a4a:	189b      	adds	r3, r3, r2
 8006a4c:	19db      	adds	r3, r3, r7
 8006a4e:	781b      	ldrb	r3, [r3, #0]
}
 8006a50:	0018      	movs	r0, r3
 8006a52:	46bd      	mov	sp, r7
 8006a54:	b010      	add	sp, #64	; 0x40
 8006a56:	bdb0      	pop	{r4, r5, r7, pc}
 8006a58:	40008000 	.word	0x40008000
 8006a5c:	40008400 	.word	0x40008400
 8006a60:	00f42400 	.word	0x00f42400
 8006a64:	0800f890 	.word	0x0800f890

08006a68 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8006a68:	b580      	push	{r7, lr}
 8006a6a:	b082      	sub	sp, #8
 8006a6c:	af00      	add	r7, sp, #0
 8006a6e:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8006a70:	687b      	ldr	r3, [r7, #4]
 8006a72:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006a74:	2201      	movs	r2, #1
 8006a76:	4013      	ands	r3, r2
 8006a78:	d00b      	beq.n	8006a92 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8006a7a:	687b      	ldr	r3, [r7, #4]
 8006a7c:	681b      	ldr	r3, [r3, #0]
 8006a7e:	685b      	ldr	r3, [r3, #4]
 8006a80:	4a4a      	ldr	r2, [pc, #296]	; (8006bac <UART_AdvFeatureConfig+0x144>)
 8006a82:	4013      	ands	r3, r2
 8006a84:	0019      	movs	r1, r3
 8006a86:	687b      	ldr	r3, [r7, #4]
 8006a88:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006a8a:	687b      	ldr	r3, [r7, #4]
 8006a8c:	681b      	ldr	r3, [r3, #0]
 8006a8e:	430a      	orrs	r2, r1
 8006a90:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8006a92:	687b      	ldr	r3, [r7, #4]
 8006a94:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006a96:	2202      	movs	r2, #2
 8006a98:	4013      	ands	r3, r2
 8006a9a:	d00b      	beq.n	8006ab4 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8006a9c:	687b      	ldr	r3, [r7, #4]
 8006a9e:	681b      	ldr	r3, [r3, #0]
 8006aa0:	685b      	ldr	r3, [r3, #4]
 8006aa2:	4a43      	ldr	r2, [pc, #268]	; (8006bb0 <UART_AdvFeatureConfig+0x148>)
 8006aa4:	4013      	ands	r3, r2
 8006aa6:	0019      	movs	r1, r3
 8006aa8:	687b      	ldr	r3, [r7, #4]
 8006aaa:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8006aac:	687b      	ldr	r3, [r7, #4]
 8006aae:	681b      	ldr	r3, [r3, #0]
 8006ab0:	430a      	orrs	r2, r1
 8006ab2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8006ab4:	687b      	ldr	r3, [r7, #4]
 8006ab6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006ab8:	2204      	movs	r2, #4
 8006aba:	4013      	ands	r3, r2
 8006abc:	d00b      	beq.n	8006ad6 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8006abe:	687b      	ldr	r3, [r7, #4]
 8006ac0:	681b      	ldr	r3, [r3, #0]
 8006ac2:	685b      	ldr	r3, [r3, #4]
 8006ac4:	4a3b      	ldr	r2, [pc, #236]	; (8006bb4 <UART_AdvFeatureConfig+0x14c>)
 8006ac6:	4013      	ands	r3, r2
 8006ac8:	0019      	movs	r1, r3
 8006aca:	687b      	ldr	r3, [r7, #4]
 8006acc:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8006ace:	687b      	ldr	r3, [r7, #4]
 8006ad0:	681b      	ldr	r3, [r3, #0]
 8006ad2:	430a      	orrs	r2, r1
 8006ad4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8006ad6:	687b      	ldr	r3, [r7, #4]
 8006ad8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006ada:	2208      	movs	r2, #8
 8006adc:	4013      	ands	r3, r2
 8006ade:	d00b      	beq.n	8006af8 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8006ae0:	687b      	ldr	r3, [r7, #4]
 8006ae2:	681b      	ldr	r3, [r3, #0]
 8006ae4:	685b      	ldr	r3, [r3, #4]
 8006ae6:	4a34      	ldr	r2, [pc, #208]	; (8006bb8 <UART_AdvFeatureConfig+0x150>)
 8006ae8:	4013      	ands	r3, r2
 8006aea:	0019      	movs	r1, r3
 8006aec:	687b      	ldr	r3, [r7, #4]
 8006aee:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006af0:	687b      	ldr	r3, [r7, #4]
 8006af2:	681b      	ldr	r3, [r3, #0]
 8006af4:	430a      	orrs	r2, r1
 8006af6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8006af8:	687b      	ldr	r3, [r7, #4]
 8006afa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006afc:	2210      	movs	r2, #16
 8006afe:	4013      	ands	r3, r2
 8006b00:	d00b      	beq.n	8006b1a <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8006b02:	687b      	ldr	r3, [r7, #4]
 8006b04:	681b      	ldr	r3, [r3, #0]
 8006b06:	689b      	ldr	r3, [r3, #8]
 8006b08:	4a2c      	ldr	r2, [pc, #176]	; (8006bbc <UART_AdvFeatureConfig+0x154>)
 8006b0a:	4013      	ands	r3, r2
 8006b0c:	0019      	movs	r1, r3
 8006b0e:	687b      	ldr	r3, [r7, #4]
 8006b10:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8006b12:	687b      	ldr	r3, [r7, #4]
 8006b14:	681b      	ldr	r3, [r3, #0]
 8006b16:	430a      	orrs	r2, r1
 8006b18:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8006b1a:	687b      	ldr	r3, [r7, #4]
 8006b1c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006b1e:	2220      	movs	r2, #32
 8006b20:	4013      	ands	r3, r2
 8006b22:	d00b      	beq.n	8006b3c <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8006b24:	687b      	ldr	r3, [r7, #4]
 8006b26:	681b      	ldr	r3, [r3, #0]
 8006b28:	689b      	ldr	r3, [r3, #8]
 8006b2a:	4a25      	ldr	r2, [pc, #148]	; (8006bc0 <UART_AdvFeatureConfig+0x158>)
 8006b2c:	4013      	ands	r3, r2
 8006b2e:	0019      	movs	r1, r3
 8006b30:	687b      	ldr	r3, [r7, #4]
 8006b32:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8006b34:	687b      	ldr	r3, [r7, #4]
 8006b36:	681b      	ldr	r3, [r3, #0]
 8006b38:	430a      	orrs	r2, r1
 8006b3a:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8006b3c:	687b      	ldr	r3, [r7, #4]
 8006b3e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006b40:	2240      	movs	r2, #64	; 0x40
 8006b42:	4013      	ands	r3, r2
 8006b44:	d01d      	beq.n	8006b82 <UART_AdvFeatureConfig+0x11a>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8006b46:	687b      	ldr	r3, [r7, #4]
 8006b48:	681b      	ldr	r3, [r3, #0]
 8006b4a:	685b      	ldr	r3, [r3, #4]
 8006b4c:	4a1d      	ldr	r2, [pc, #116]	; (8006bc4 <UART_AdvFeatureConfig+0x15c>)
 8006b4e:	4013      	ands	r3, r2
 8006b50:	0019      	movs	r1, r3
 8006b52:	687b      	ldr	r3, [r7, #4]
 8006b54:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8006b56:	687b      	ldr	r3, [r7, #4]
 8006b58:	681b      	ldr	r3, [r3, #0]
 8006b5a:	430a      	orrs	r2, r1
 8006b5c:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8006b5e:	687b      	ldr	r3, [r7, #4]
 8006b60:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8006b62:	2380      	movs	r3, #128	; 0x80
 8006b64:	035b      	lsls	r3, r3, #13
 8006b66:	429a      	cmp	r2, r3
 8006b68:	d10b      	bne.n	8006b82 <UART_AdvFeatureConfig+0x11a>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8006b6a:	687b      	ldr	r3, [r7, #4]
 8006b6c:	681b      	ldr	r3, [r3, #0]
 8006b6e:	685b      	ldr	r3, [r3, #4]
 8006b70:	4a15      	ldr	r2, [pc, #84]	; (8006bc8 <UART_AdvFeatureConfig+0x160>)
 8006b72:	4013      	ands	r3, r2
 8006b74:	0019      	movs	r1, r3
 8006b76:	687b      	ldr	r3, [r7, #4]
 8006b78:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8006b7a:	687b      	ldr	r3, [r7, #4]
 8006b7c:	681b      	ldr	r3, [r3, #0]
 8006b7e:	430a      	orrs	r2, r1
 8006b80:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8006b82:	687b      	ldr	r3, [r7, #4]
 8006b84:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006b86:	2280      	movs	r2, #128	; 0x80
 8006b88:	4013      	ands	r3, r2
 8006b8a:	d00b      	beq.n	8006ba4 <UART_AdvFeatureConfig+0x13c>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8006b8c:	687b      	ldr	r3, [r7, #4]
 8006b8e:	681b      	ldr	r3, [r3, #0]
 8006b90:	685b      	ldr	r3, [r3, #4]
 8006b92:	4a0e      	ldr	r2, [pc, #56]	; (8006bcc <UART_AdvFeatureConfig+0x164>)
 8006b94:	4013      	ands	r3, r2
 8006b96:	0019      	movs	r1, r3
 8006b98:	687b      	ldr	r3, [r7, #4]
 8006b9a:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8006b9c:	687b      	ldr	r3, [r7, #4]
 8006b9e:	681b      	ldr	r3, [r3, #0]
 8006ba0:	430a      	orrs	r2, r1
 8006ba2:	605a      	str	r2, [r3, #4]
  }
}
 8006ba4:	46c0      	nop			; (mov r8, r8)
 8006ba6:	46bd      	mov	sp, r7
 8006ba8:	b002      	add	sp, #8
 8006baa:	bd80      	pop	{r7, pc}
 8006bac:	fffdffff 	.word	0xfffdffff
 8006bb0:	fffeffff 	.word	0xfffeffff
 8006bb4:	fffbffff 	.word	0xfffbffff
 8006bb8:	ffff7fff 	.word	0xffff7fff
 8006bbc:	ffffefff 	.word	0xffffefff
 8006bc0:	ffffdfff 	.word	0xffffdfff
 8006bc4:	ffefffff 	.word	0xffefffff
 8006bc8:	ff9fffff 	.word	0xff9fffff
 8006bcc:	fff7ffff 	.word	0xfff7ffff

08006bd0 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8006bd0:	b580      	push	{r7, lr}
 8006bd2:	b086      	sub	sp, #24
 8006bd4:	af02      	add	r7, sp, #8
 8006bd6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006bd8:	687b      	ldr	r3, [r7, #4]
 8006bda:	2290      	movs	r2, #144	; 0x90
 8006bdc:	2100      	movs	r1, #0
 8006bde:	5099      	str	r1, [r3, r2]

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8006be0:	f7fc fec0 	bl	8003964 <HAL_GetTick>
 8006be4:	0003      	movs	r3, r0
 8006be6:	60fb      	str	r3, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8006be8:	687b      	ldr	r3, [r7, #4]
 8006bea:	681b      	ldr	r3, [r3, #0]
 8006bec:	681b      	ldr	r3, [r3, #0]
 8006bee:	2208      	movs	r2, #8
 8006bf0:	4013      	ands	r3, r2
 8006bf2:	2b08      	cmp	r3, #8
 8006bf4:	d10c      	bne.n	8006c10 <UART_CheckIdleState+0x40>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8006bf6:	68fb      	ldr	r3, [r7, #12]
 8006bf8:	2280      	movs	r2, #128	; 0x80
 8006bfa:	0391      	lsls	r1, r2, #14
 8006bfc:	6878      	ldr	r0, [r7, #4]
 8006bfe:	4a1a      	ldr	r2, [pc, #104]	; (8006c68 <UART_CheckIdleState+0x98>)
 8006c00:	9200      	str	r2, [sp, #0]
 8006c02:	2200      	movs	r2, #0
 8006c04:	f000 f832 	bl	8006c6c <UART_WaitOnFlagUntilTimeout>
 8006c08:	1e03      	subs	r3, r0, #0
 8006c0a:	d001      	beq.n	8006c10 <UART_CheckIdleState+0x40>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8006c0c:	2303      	movs	r3, #3
 8006c0e:	e026      	b.n	8006c5e <UART_CheckIdleState+0x8e>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8006c10:	687b      	ldr	r3, [r7, #4]
 8006c12:	681b      	ldr	r3, [r3, #0]
 8006c14:	681b      	ldr	r3, [r3, #0]
 8006c16:	2204      	movs	r2, #4
 8006c18:	4013      	ands	r3, r2
 8006c1a:	2b04      	cmp	r3, #4
 8006c1c:	d10c      	bne.n	8006c38 <UART_CheckIdleState+0x68>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8006c1e:	68fb      	ldr	r3, [r7, #12]
 8006c20:	2280      	movs	r2, #128	; 0x80
 8006c22:	03d1      	lsls	r1, r2, #15
 8006c24:	6878      	ldr	r0, [r7, #4]
 8006c26:	4a10      	ldr	r2, [pc, #64]	; (8006c68 <UART_CheckIdleState+0x98>)
 8006c28:	9200      	str	r2, [sp, #0]
 8006c2a:	2200      	movs	r2, #0
 8006c2c:	f000 f81e 	bl	8006c6c <UART_WaitOnFlagUntilTimeout>
 8006c30:	1e03      	subs	r3, r0, #0
 8006c32:	d001      	beq.n	8006c38 <UART_CheckIdleState+0x68>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8006c34:	2303      	movs	r3, #3
 8006c36:	e012      	b.n	8006c5e <UART_CheckIdleState+0x8e>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8006c38:	687b      	ldr	r3, [r7, #4]
 8006c3a:	2288      	movs	r2, #136	; 0x88
 8006c3c:	2120      	movs	r1, #32
 8006c3e:	5099      	str	r1, [r3, r2]
  huart->RxState = HAL_UART_STATE_READY;
 8006c40:	687b      	ldr	r3, [r7, #4]
 8006c42:	228c      	movs	r2, #140	; 0x8c
 8006c44:	2120      	movs	r1, #32
 8006c46:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006c48:	687b      	ldr	r3, [r7, #4]
 8006c4a:	2200      	movs	r2, #0
 8006c4c:	66da      	str	r2, [r3, #108]	; 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8006c4e:	687b      	ldr	r3, [r7, #4]
 8006c50:	2200      	movs	r2, #0
 8006c52:	671a      	str	r2, [r3, #112]	; 0x70

  __HAL_UNLOCK(huart);
 8006c54:	687b      	ldr	r3, [r7, #4]
 8006c56:	2284      	movs	r2, #132	; 0x84
 8006c58:	2100      	movs	r1, #0
 8006c5a:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8006c5c:	2300      	movs	r3, #0
}
 8006c5e:	0018      	movs	r0, r3
 8006c60:	46bd      	mov	sp, r7
 8006c62:	b004      	add	sp, #16
 8006c64:	bd80      	pop	{r7, pc}
 8006c66:	46c0      	nop			; (mov r8, r8)
 8006c68:	01ffffff 	.word	0x01ffffff

08006c6c <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8006c6c:	b580      	push	{r7, lr}
 8006c6e:	b094      	sub	sp, #80	; 0x50
 8006c70:	af00      	add	r7, sp, #0
 8006c72:	60f8      	str	r0, [r7, #12]
 8006c74:	60b9      	str	r1, [r7, #8]
 8006c76:	603b      	str	r3, [r7, #0]
 8006c78:	1dfb      	adds	r3, r7, #7
 8006c7a:	701a      	strb	r2, [r3, #0]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006c7c:	e0a7      	b.n	8006dce <UART_WaitOnFlagUntilTimeout+0x162>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006c7e:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8006c80:	3301      	adds	r3, #1
 8006c82:	d100      	bne.n	8006c86 <UART_WaitOnFlagUntilTimeout+0x1a>
 8006c84:	e0a3      	b.n	8006dce <UART_WaitOnFlagUntilTimeout+0x162>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006c86:	f7fc fe6d 	bl	8003964 <HAL_GetTick>
 8006c8a:	0002      	movs	r2, r0
 8006c8c:	683b      	ldr	r3, [r7, #0]
 8006c8e:	1ad3      	subs	r3, r2, r3
 8006c90:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8006c92:	429a      	cmp	r2, r3
 8006c94:	d302      	bcc.n	8006c9c <UART_WaitOnFlagUntilTimeout+0x30>
 8006c96:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8006c98:	2b00      	cmp	r3, #0
 8006c9a:	d13f      	bne.n	8006d1c <UART_WaitOnFlagUntilTimeout+0xb0>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8006c9c:	f3ef 8310 	mrs	r3, PRIMASK
 8006ca0:	62bb      	str	r3, [r7, #40]	; 0x28
  return(result);
 8006ca2:	6abb      	ldr	r3, [r7, #40]	; 0x28
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 8006ca4:	647b      	str	r3, [r7, #68]	; 0x44
 8006ca6:	2301      	movs	r3, #1
 8006ca8:	62fb      	str	r3, [r7, #44]	; 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006caa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006cac:	f383 8810 	msr	PRIMASK, r3
}
 8006cb0:	46c0      	nop			; (mov r8, r8)
 8006cb2:	68fb      	ldr	r3, [r7, #12]
 8006cb4:	681b      	ldr	r3, [r3, #0]
 8006cb6:	681a      	ldr	r2, [r3, #0]
 8006cb8:	68fb      	ldr	r3, [r7, #12]
 8006cba:	681b      	ldr	r3, [r3, #0]
 8006cbc:	494e      	ldr	r1, [pc, #312]	; (8006df8 <UART_WaitOnFlagUntilTimeout+0x18c>)
 8006cbe:	400a      	ands	r2, r1
 8006cc0:	601a      	str	r2, [r3, #0]
 8006cc2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006cc4:	633b      	str	r3, [r7, #48]	; 0x30
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006cc6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006cc8:	f383 8810 	msr	PRIMASK, r3
}
 8006ccc:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8006cce:	f3ef 8310 	mrs	r3, PRIMASK
 8006cd2:	637b      	str	r3, [r7, #52]	; 0x34
  return(result);
 8006cd4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
                                                USART_CR1_TXEIE_TXFNFIE));
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006cd6:	643b      	str	r3, [r7, #64]	; 0x40
 8006cd8:	2301      	movs	r3, #1
 8006cda:	63bb      	str	r3, [r7, #56]	; 0x38
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006cdc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006cde:	f383 8810 	msr	PRIMASK, r3
}
 8006ce2:	46c0      	nop			; (mov r8, r8)
 8006ce4:	68fb      	ldr	r3, [r7, #12]
 8006ce6:	681b      	ldr	r3, [r3, #0]
 8006ce8:	689a      	ldr	r2, [r3, #8]
 8006cea:	68fb      	ldr	r3, [r7, #12]
 8006cec:	681b      	ldr	r3, [r3, #0]
 8006cee:	2101      	movs	r1, #1
 8006cf0:	438a      	bics	r2, r1
 8006cf2:	609a      	str	r2, [r3, #8]
 8006cf4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006cf6:	63fb      	str	r3, [r7, #60]	; 0x3c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006cf8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006cfa:	f383 8810 	msr	PRIMASK, r3
}
 8006cfe:	46c0      	nop			; (mov r8, r8)

        huart->gState = HAL_UART_STATE_READY;
 8006d00:	68fb      	ldr	r3, [r7, #12]
 8006d02:	2288      	movs	r2, #136	; 0x88
 8006d04:	2120      	movs	r1, #32
 8006d06:	5099      	str	r1, [r3, r2]
        huart->RxState = HAL_UART_STATE_READY;
 8006d08:	68fb      	ldr	r3, [r7, #12]
 8006d0a:	228c      	movs	r2, #140	; 0x8c
 8006d0c:	2120      	movs	r1, #32
 8006d0e:	5099      	str	r1, [r3, r2]

        __HAL_UNLOCK(huart);
 8006d10:	68fb      	ldr	r3, [r7, #12]
 8006d12:	2284      	movs	r2, #132	; 0x84
 8006d14:	2100      	movs	r1, #0
 8006d16:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 8006d18:	2303      	movs	r3, #3
 8006d1a:	e069      	b.n	8006df0 <UART_WaitOnFlagUntilTimeout+0x184>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8006d1c:	68fb      	ldr	r3, [r7, #12]
 8006d1e:	681b      	ldr	r3, [r3, #0]
 8006d20:	681b      	ldr	r3, [r3, #0]
 8006d22:	2204      	movs	r2, #4
 8006d24:	4013      	ands	r3, r2
 8006d26:	d052      	beq.n	8006dce <UART_WaitOnFlagUntilTimeout+0x162>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8006d28:	68fb      	ldr	r3, [r7, #12]
 8006d2a:	681b      	ldr	r3, [r3, #0]
 8006d2c:	69da      	ldr	r2, [r3, #28]
 8006d2e:	2380      	movs	r3, #128	; 0x80
 8006d30:	011b      	lsls	r3, r3, #4
 8006d32:	401a      	ands	r2, r3
 8006d34:	2380      	movs	r3, #128	; 0x80
 8006d36:	011b      	lsls	r3, r3, #4
 8006d38:	429a      	cmp	r2, r3
 8006d3a:	d148      	bne.n	8006dce <UART_WaitOnFlagUntilTimeout+0x162>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8006d3c:	68fb      	ldr	r3, [r7, #12]
 8006d3e:	681b      	ldr	r3, [r3, #0]
 8006d40:	2280      	movs	r2, #128	; 0x80
 8006d42:	0112      	lsls	r2, r2, #4
 8006d44:	621a      	str	r2, [r3, #32]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8006d46:	f3ef 8310 	mrs	r3, PRIMASK
 8006d4a:	613b      	str	r3, [r7, #16]
  return(result);
 8006d4c:	693b      	ldr	r3, [r7, #16]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 8006d4e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8006d50:	2301      	movs	r3, #1
 8006d52:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006d54:	697b      	ldr	r3, [r7, #20]
 8006d56:	f383 8810 	msr	PRIMASK, r3
}
 8006d5a:	46c0      	nop			; (mov r8, r8)
 8006d5c:	68fb      	ldr	r3, [r7, #12]
 8006d5e:	681b      	ldr	r3, [r3, #0]
 8006d60:	681a      	ldr	r2, [r3, #0]
 8006d62:	68fb      	ldr	r3, [r7, #12]
 8006d64:	681b      	ldr	r3, [r3, #0]
 8006d66:	4924      	ldr	r1, [pc, #144]	; (8006df8 <UART_WaitOnFlagUntilTimeout+0x18c>)
 8006d68:	400a      	ands	r2, r1
 8006d6a:	601a      	str	r2, [r3, #0]
 8006d6c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006d6e:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006d70:	69bb      	ldr	r3, [r7, #24]
 8006d72:	f383 8810 	msr	PRIMASK, r3
}
 8006d76:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8006d78:	f3ef 8310 	mrs	r3, PRIMASK
 8006d7c:	61fb      	str	r3, [r7, #28]
  return(result);
 8006d7e:	69fb      	ldr	r3, [r7, #28]
                                                  USART_CR1_TXEIE_TXFNFIE));
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006d80:	64bb      	str	r3, [r7, #72]	; 0x48
 8006d82:	2301      	movs	r3, #1
 8006d84:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006d86:	6a3b      	ldr	r3, [r7, #32]
 8006d88:	f383 8810 	msr	PRIMASK, r3
}
 8006d8c:	46c0      	nop			; (mov r8, r8)
 8006d8e:	68fb      	ldr	r3, [r7, #12]
 8006d90:	681b      	ldr	r3, [r3, #0]
 8006d92:	689a      	ldr	r2, [r3, #8]
 8006d94:	68fb      	ldr	r3, [r7, #12]
 8006d96:	681b      	ldr	r3, [r3, #0]
 8006d98:	2101      	movs	r1, #1
 8006d9a:	438a      	bics	r2, r1
 8006d9c:	609a      	str	r2, [r3, #8]
 8006d9e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006da0:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006da2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006da4:	f383 8810 	msr	PRIMASK, r3
}
 8006da8:	46c0      	nop			; (mov r8, r8)

          huart->gState = HAL_UART_STATE_READY;
 8006daa:	68fb      	ldr	r3, [r7, #12]
 8006dac:	2288      	movs	r2, #136	; 0x88
 8006dae:	2120      	movs	r1, #32
 8006db0:	5099      	str	r1, [r3, r2]
          huart->RxState = HAL_UART_STATE_READY;
 8006db2:	68fb      	ldr	r3, [r7, #12]
 8006db4:	228c      	movs	r2, #140	; 0x8c
 8006db6:	2120      	movs	r1, #32
 8006db8:	5099      	str	r1, [r3, r2]
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8006dba:	68fb      	ldr	r3, [r7, #12]
 8006dbc:	2290      	movs	r2, #144	; 0x90
 8006dbe:	2120      	movs	r1, #32
 8006dc0:	5099      	str	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8006dc2:	68fb      	ldr	r3, [r7, #12]
 8006dc4:	2284      	movs	r2, #132	; 0x84
 8006dc6:	2100      	movs	r1, #0
 8006dc8:	5499      	strb	r1, [r3, r2]

          return HAL_TIMEOUT;
 8006dca:	2303      	movs	r3, #3
 8006dcc:	e010      	b.n	8006df0 <UART_WaitOnFlagUntilTimeout+0x184>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006dce:	68fb      	ldr	r3, [r7, #12]
 8006dd0:	681b      	ldr	r3, [r3, #0]
 8006dd2:	69db      	ldr	r3, [r3, #28]
 8006dd4:	68ba      	ldr	r2, [r7, #8]
 8006dd6:	4013      	ands	r3, r2
 8006dd8:	68ba      	ldr	r2, [r7, #8]
 8006dda:	1ad3      	subs	r3, r2, r3
 8006ddc:	425a      	negs	r2, r3
 8006dde:	4153      	adcs	r3, r2
 8006de0:	b2db      	uxtb	r3, r3
 8006de2:	001a      	movs	r2, r3
 8006de4:	1dfb      	adds	r3, r7, #7
 8006de6:	781b      	ldrb	r3, [r3, #0]
 8006de8:	429a      	cmp	r2, r3
 8006dea:	d100      	bne.n	8006dee <UART_WaitOnFlagUntilTimeout+0x182>
 8006dec:	e747      	b.n	8006c7e <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8006dee:	2300      	movs	r3, #0
}
 8006df0:	0018      	movs	r0, r3
 8006df2:	46bd      	mov	sp, r7
 8006df4:	b014      	add	sp, #80	; 0x50
 8006df6:	bd80      	pop	{r7, pc}
 8006df8:	fffffe5f 	.word	0xfffffe5f

08006dfc <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8006dfc:	b580      	push	{r7, lr}
 8006dfe:	b084      	sub	sp, #16
 8006e00:	af00      	add	r7, sp, #0
 8006e02:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8006e04:	687b      	ldr	r3, [r7, #4]
 8006e06:	2284      	movs	r2, #132	; 0x84
 8006e08:	5c9b      	ldrb	r3, [r3, r2]
 8006e0a:	2b01      	cmp	r3, #1
 8006e0c:	d101      	bne.n	8006e12 <HAL_UARTEx_DisableFifoMode+0x16>
 8006e0e:	2302      	movs	r3, #2
 8006e10:	e027      	b.n	8006e62 <HAL_UARTEx_DisableFifoMode+0x66>
 8006e12:	687b      	ldr	r3, [r7, #4]
 8006e14:	2284      	movs	r2, #132	; 0x84
 8006e16:	2101      	movs	r1, #1
 8006e18:	5499      	strb	r1, [r3, r2]

  huart->gState = HAL_UART_STATE_BUSY;
 8006e1a:	687b      	ldr	r3, [r7, #4]
 8006e1c:	2288      	movs	r2, #136	; 0x88
 8006e1e:	2124      	movs	r1, #36	; 0x24
 8006e20:	5099      	str	r1, [r3, r2]

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8006e22:	687b      	ldr	r3, [r7, #4]
 8006e24:	681b      	ldr	r3, [r3, #0]
 8006e26:	681b      	ldr	r3, [r3, #0]
 8006e28:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8006e2a:	687b      	ldr	r3, [r7, #4]
 8006e2c:	681b      	ldr	r3, [r3, #0]
 8006e2e:	681a      	ldr	r2, [r3, #0]
 8006e30:	687b      	ldr	r3, [r7, #4]
 8006e32:	681b      	ldr	r3, [r3, #0]
 8006e34:	2101      	movs	r1, #1
 8006e36:	438a      	bics	r2, r1
 8006e38:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8006e3a:	68fb      	ldr	r3, [r7, #12]
 8006e3c:	4a0b      	ldr	r2, [pc, #44]	; (8006e6c <HAL_UARTEx_DisableFifoMode+0x70>)
 8006e3e:	4013      	ands	r3, r2
 8006e40:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8006e42:	687b      	ldr	r3, [r7, #4]
 8006e44:	2200      	movs	r2, #0
 8006e46:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8006e48:	687b      	ldr	r3, [r7, #4]
 8006e4a:	681b      	ldr	r3, [r3, #0]
 8006e4c:	68fa      	ldr	r2, [r7, #12]
 8006e4e:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8006e50:	687b      	ldr	r3, [r7, #4]
 8006e52:	2288      	movs	r2, #136	; 0x88
 8006e54:	2120      	movs	r1, #32
 8006e56:	5099      	str	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8006e58:	687b      	ldr	r3, [r7, #4]
 8006e5a:	2284      	movs	r2, #132	; 0x84
 8006e5c:	2100      	movs	r1, #0
 8006e5e:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8006e60:	2300      	movs	r3, #0
}
 8006e62:	0018      	movs	r0, r3
 8006e64:	46bd      	mov	sp, r7
 8006e66:	b004      	add	sp, #16
 8006e68:	bd80      	pop	{r7, pc}
 8006e6a:	46c0      	nop			; (mov r8, r8)
 8006e6c:	dfffffff 	.word	0xdfffffff

08006e70 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8006e70:	b580      	push	{r7, lr}
 8006e72:	b084      	sub	sp, #16
 8006e74:	af00      	add	r7, sp, #0
 8006e76:	6078      	str	r0, [r7, #4]
 8006e78:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8006e7a:	687b      	ldr	r3, [r7, #4]
 8006e7c:	2284      	movs	r2, #132	; 0x84
 8006e7e:	5c9b      	ldrb	r3, [r3, r2]
 8006e80:	2b01      	cmp	r3, #1
 8006e82:	d101      	bne.n	8006e88 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8006e84:	2302      	movs	r3, #2
 8006e86:	e02e      	b.n	8006ee6 <HAL_UARTEx_SetTxFifoThreshold+0x76>
 8006e88:	687b      	ldr	r3, [r7, #4]
 8006e8a:	2284      	movs	r2, #132	; 0x84
 8006e8c:	2101      	movs	r1, #1
 8006e8e:	5499      	strb	r1, [r3, r2]

  huart->gState = HAL_UART_STATE_BUSY;
 8006e90:	687b      	ldr	r3, [r7, #4]
 8006e92:	2288      	movs	r2, #136	; 0x88
 8006e94:	2124      	movs	r1, #36	; 0x24
 8006e96:	5099      	str	r1, [r3, r2]

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8006e98:	687b      	ldr	r3, [r7, #4]
 8006e9a:	681b      	ldr	r3, [r3, #0]
 8006e9c:	681b      	ldr	r3, [r3, #0]
 8006e9e:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8006ea0:	687b      	ldr	r3, [r7, #4]
 8006ea2:	681b      	ldr	r3, [r3, #0]
 8006ea4:	681a      	ldr	r2, [r3, #0]
 8006ea6:	687b      	ldr	r3, [r7, #4]
 8006ea8:	681b      	ldr	r3, [r3, #0]
 8006eaa:	2101      	movs	r1, #1
 8006eac:	438a      	bics	r2, r1
 8006eae:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8006eb0:	687b      	ldr	r3, [r7, #4]
 8006eb2:	681b      	ldr	r3, [r3, #0]
 8006eb4:	689b      	ldr	r3, [r3, #8]
 8006eb6:	00db      	lsls	r3, r3, #3
 8006eb8:	08d9      	lsrs	r1, r3, #3
 8006eba:	687b      	ldr	r3, [r7, #4]
 8006ebc:	681b      	ldr	r3, [r3, #0]
 8006ebe:	683a      	ldr	r2, [r7, #0]
 8006ec0:	430a      	orrs	r2, r1
 8006ec2:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8006ec4:	687b      	ldr	r3, [r7, #4]
 8006ec6:	0018      	movs	r0, r3
 8006ec8:	f000 f854 	bl	8006f74 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8006ecc:	687b      	ldr	r3, [r7, #4]
 8006ece:	681b      	ldr	r3, [r3, #0]
 8006ed0:	68fa      	ldr	r2, [r7, #12]
 8006ed2:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8006ed4:	687b      	ldr	r3, [r7, #4]
 8006ed6:	2288      	movs	r2, #136	; 0x88
 8006ed8:	2120      	movs	r1, #32
 8006eda:	5099      	str	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8006edc:	687b      	ldr	r3, [r7, #4]
 8006ede:	2284      	movs	r2, #132	; 0x84
 8006ee0:	2100      	movs	r1, #0
 8006ee2:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8006ee4:	2300      	movs	r3, #0
}
 8006ee6:	0018      	movs	r0, r3
 8006ee8:	46bd      	mov	sp, r7
 8006eea:	b004      	add	sp, #16
 8006eec:	bd80      	pop	{r7, pc}
	...

08006ef0 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8006ef0:	b580      	push	{r7, lr}
 8006ef2:	b084      	sub	sp, #16
 8006ef4:	af00      	add	r7, sp, #0
 8006ef6:	6078      	str	r0, [r7, #4]
 8006ef8:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8006efa:	687b      	ldr	r3, [r7, #4]
 8006efc:	2284      	movs	r2, #132	; 0x84
 8006efe:	5c9b      	ldrb	r3, [r3, r2]
 8006f00:	2b01      	cmp	r3, #1
 8006f02:	d101      	bne.n	8006f08 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8006f04:	2302      	movs	r3, #2
 8006f06:	e02f      	b.n	8006f68 <HAL_UARTEx_SetRxFifoThreshold+0x78>
 8006f08:	687b      	ldr	r3, [r7, #4]
 8006f0a:	2284      	movs	r2, #132	; 0x84
 8006f0c:	2101      	movs	r1, #1
 8006f0e:	5499      	strb	r1, [r3, r2]

  huart->gState = HAL_UART_STATE_BUSY;
 8006f10:	687b      	ldr	r3, [r7, #4]
 8006f12:	2288      	movs	r2, #136	; 0x88
 8006f14:	2124      	movs	r1, #36	; 0x24
 8006f16:	5099      	str	r1, [r3, r2]

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8006f18:	687b      	ldr	r3, [r7, #4]
 8006f1a:	681b      	ldr	r3, [r3, #0]
 8006f1c:	681b      	ldr	r3, [r3, #0]
 8006f1e:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8006f20:	687b      	ldr	r3, [r7, #4]
 8006f22:	681b      	ldr	r3, [r3, #0]
 8006f24:	681a      	ldr	r2, [r3, #0]
 8006f26:	687b      	ldr	r3, [r7, #4]
 8006f28:	681b      	ldr	r3, [r3, #0]
 8006f2a:	2101      	movs	r1, #1
 8006f2c:	438a      	bics	r2, r1
 8006f2e:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8006f30:	687b      	ldr	r3, [r7, #4]
 8006f32:	681b      	ldr	r3, [r3, #0]
 8006f34:	689b      	ldr	r3, [r3, #8]
 8006f36:	4a0e      	ldr	r2, [pc, #56]	; (8006f70 <HAL_UARTEx_SetRxFifoThreshold+0x80>)
 8006f38:	4013      	ands	r3, r2
 8006f3a:	0019      	movs	r1, r3
 8006f3c:	687b      	ldr	r3, [r7, #4]
 8006f3e:	681b      	ldr	r3, [r3, #0]
 8006f40:	683a      	ldr	r2, [r7, #0]
 8006f42:	430a      	orrs	r2, r1
 8006f44:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8006f46:	687b      	ldr	r3, [r7, #4]
 8006f48:	0018      	movs	r0, r3
 8006f4a:	f000 f813 	bl	8006f74 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8006f4e:	687b      	ldr	r3, [r7, #4]
 8006f50:	681b      	ldr	r3, [r3, #0]
 8006f52:	68fa      	ldr	r2, [r7, #12]
 8006f54:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8006f56:	687b      	ldr	r3, [r7, #4]
 8006f58:	2288      	movs	r2, #136	; 0x88
 8006f5a:	2120      	movs	r1, #32
 8006f5c:	5099      	str	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8006f5e:	687b      	ldr	r3, [r7, #4]
 8006f60:	2284      	movs	r2, #132	; 0x84
 8006f62:	2100      	movs	r1, #0
 8006f64:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8006f66:	2300      	movs	r3, #0
}
 8006f68:	0018      	movs	r0, r3
 8006f6a:	46bd      	mov	sp, r7
 8006f6c:	b004      	add	sp, #16
 8006f6e:	bd80      	pop	{r7, pc}
 8006f70:	f1ffffff 	.word	0xf1ffffff

08006f74 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8006f74:	b5f0      	push	{r4, r5, r6, r7, lr}
 8006f76:	b085      	sub	sp, #20
 8006f78:	af00      	add	r7, sp, #0
 8006f7a:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8006f7c:	687b      	ldr	r3, [r7, #4]
 8006f7e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8006f80:	2b00      	cmp	r3, #0
 8006f82:	d108      	bne.n	8006f96 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8006f84:	687b      	ldr	r3, [r7, #4]
 8006f86:	226a      	movs	r2, #106	; 0x6a
 8006f88:	2101      	movs	r1, #1
 8006f8a:	5299      	strh	r1, [r3, r2]
    huart->NbRxDataToProcess = 1U;
 8006f8c:	687b      	ldr	r3, [r7, #4]
 8006f8e:	2268      	movs	r2, #104	; 0x68
 8006f90:	2101      	movs	r1, #1
 8006f92:	5299      	strh	r1, [r3, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8006f94:	e043      	b.n	800701e <UARTEx_SetNbDataToProcess+0xaa>
    rx_fifo_depth = RX_FIFO_DEPTH;
 8006f96:	260f      	movs	r6, #15
 8006f98:	19bb      	adds	r3, r7, r6
 8006f9a:	2208      	movs	r2, #8
 8006f9c:	701a      	strb	r2, [r3, #0]
    tx_fifo_depth = TX_FIFO_DEPTH;
 8006f9e:	200e      	movs	r0, #14
 8006fa0:	183b      	adds	r3, r7, r0
 8006fa2:	2208      	movs	r2, #8
 8006fa4:	701a      	strb	r2, [r3, #0]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8006fa6:	687b      	ldr	r3, [r7, #4]
 8006fa8:	681b      	ldr	r3, [r3, #0]
 8006faa:	689b      	ldr	r3, [r3, #8]
 8006fac:	0e5b      	lsrs	r3, r3, #25
 8006fae:	b2da      	uxtb	r2, r3
 8006fb0:	240d      	movs	r4, #13
 8006fb2:	193b      	adds	r3, r7, r4
 8006fb4:	2107      	movs	r1, #7
 8006fb6:	400a      	ands	r2, r1
 8006fb8:	701a      	strb	r2, [r3, #0]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8006fba:	687b      	ldr	r3, [r7, #4]
 8006fbc:	681b      	ldr	r3, [r3, #0]
 8006fbe:	689b      	ldr	r3, [r3, #8]
 8006fc0:	0f5b      	lsrs	r3, r3, #29
 8006fc2:	b2da      	uxtb	r2, r3
 8006fc4:	250c      	movs	r5, #12
 8006fc6:	197b      	adds	r3, r7, r5
 8006fc8:	2107      	movs	r1, #7
 8006fca:	400a      	ands	r2, r1
 8006fcc:	701a      	strb	r2, [r3, #0]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8006fce:	183b      	adds	r3, r7, r0
 8006fd0:	781b      	ldrb	r3, [r3, #0]
 8006fd2:	197a      	adds	r2, r7, r5
 8006fd4:	7812      	ldrb	r2, [r2, #0]
 8006fd6:	4914      	ldr	r1, [pc, #80]	; (8007028 <UARTEx_SetNbDataToProcess+0xb4>)
 8006fd8:	5c8a      	ldrb	r2, [r1, r2]
 8006fda:	435a      	muls	r2, r3
 8006fdc:	0010      	movs	r0, r2
                               (uint16_t)denominator[tx_fifo_threshold];
 8006fde:	197b      	adds	r3, r7, r5
 8006fe0:	781b      	ldrb	r3, [r3, #0]
 8006fe2:	4a12      	ldr	r2, [pc, #72]	; (800702c <UARTEx_SetNbDataToProcess+0xb8>)
 8006fe4:	5cd3      	ldrb	r3, [r2, r3]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8006fe6:	0019      	movs	r1, r3
 8006fe8:	f7f9 f932 	bl	8000250 <__divsi3>
 8006fec:	0003      	movs	r3, r0
 8006fee:	b299      	uxth	r1, r3
 8006ff0:	687b      	ldr	r3, [r7, #4]
 8006ff2:	226a      	movs	r2, #106	; 0x6a
 8006ff4:	5299      	strh	r1, [r3, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8006ff6:	19bb      	adds	r3, r7, r6
 8006ff8:	781b      	ldrb	r3, [r3, #0]
 8006ffa:	193a      	adds	r2, r7, r4
 8006ffc:	7812      	ldrb	r2, [r2, #0]
 8006ffe:	490a      	ldr	r1, [pc, #40]	; (8007028 <UARTEx_SetNbDataToProcess+0xb4>)
 8007000:	5c8a      	ldrb	r2, [r1, r2]
 8007002:	435a      	muls	r2, r3
 8007004:	0010      	movs	r0, r2
                               (uint16_t)denominator[rx_fifo_threshold];
 8007006:	193b      	adds	r3, r7, r4
 8007008:	781b      	ldrb	r3, [r3, #0]
 800700a:	4a08      	ldr	r2, [pc, #32]	; (800702c <UARTEx_SetNbDataToProcess+0xb8>)
 800700c:	5cd3      	ldrb	r3, [r2, r3]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800700e:	0019      	movs	r1, r3
 8007010:	f7f9 f91e 	bl	8000250 <__divsi3>
 8007014:	0003      	movs	r3, r0
 8007016:	b299      	uxth	r1, r3
 8007018:	687b      	ldr	r3, [r7, #4]
 800701a:	2268      	movs	r2, #104	; 0x68
 800701c:	5299      	strh	r1, [r3, r2]
}
 800701e:	46c0      	nop			; (mov r8, r8)
 8007020:	46bd      	mov	sp, r7
 8007022:	b005      	add	sp, #20
 8007024:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8007026:	46c0      	nop			; (mov r8, r8)
 8007028:	0800f8a8 	.word	0x0800f8a8
 800702c:	0800f8b0 	.word	0x0800f8b0

08007030 <astronode_send_cfg_sr>:
        }
    }
}

void astronode_send_cfg_sr(void)
{
 8007030:	b5b0      	push	{r4, r5, r7, lr}
 8007032:	b0e4      	sub	sp, #400	; 0x190
 8007034:	af00      	add	r7, sp, #0
    astronode_app_msg_t request = {0};
 8007036:	24c8      	movs	r4, #200	; 0xc8
 8007038:	193b      	adds	r3, r7, r4
 800703a:	0018      	movs	r0, r3
 800703c:	23c6      	movs	r3, #198	; 0xc6
 800703e:	001a      	movs	r2, r3
 8007040:	2100      	movs	r1, #0
 8007042:	f002 f92d 	bl	80092a0 <memset>
    astronode_app_msg_t answer = {0};
 8007046:	4b13      	ldr	r3, [pc, #76]	; (8007094 <astronode_send_cfg_sr+0x64>)
 8007048:	25c8      	movs	r5, #200	; 0xc8
 800704a:	006d      	lsls	r5, r5, #1
 800704c:	195b      	adds	r3, r3, r5
 800704e:	19db      	adds	r3, r3, r7
 8007050:	0018      	movs	r0, r3
 8007052:	23c6      	movs	r3, #198	; 0xc6
 8007054:	001a      	movs	r2, r3
 8007056:	2100      	movs	r1, #0
 8007058:	f002 f922 	bl	80092a0 <memset>

    request.op_code = ASTRONODE_OP_CODE_CFG_SR;
 800705c:	193b      	adds	r3, r7, r4
 800705e:	2210      	movs	r2, #16
 8007060:	701a      	strb	r2, [r3, #0]

    astronode_transport_send_receive(&request, &answer);
 8007062:	003a      	movs	r2, r7
 8007064:	193b      	adds	r3, r7, r4
 8007066:	0011      	movs	r1, r2
 8007068:	0018      	movs	r0, r3
 800706a:	f001 fa4d 	bl	8008508 <astronode_transport_send_receive>

    if (answer.op_code == ASTRONODE_OP_CODE_CFG_SA)
 800706e:	4b09      	ldr	r3, [pc, #36]	; (8007094 <astronode_send_cfg_sr+0x64>)
 8007070:	195b      	adds	r3, r3, r5
 8007072:	19db      	adds	r3, r3, r7
 8007074:	781b      	ldrb	r3, [r3, #0]
 8007076:	2b90      	cmp	r3, #144	; 0x90
 8007078:	d104      	bne.n	8007084 <astronode_send_cfg_sr+0x54>
    {
        send_debug_logs("Astronode configuration successfully saved in NVM.");
 800707a:	4b07      	ldr	r3, [pc, #28]	; (8007098 <astronode_send_cfg_sr+0x68>)
 800707c:	0018      	movs	r0, r3
 800707e:	f7fb ff87 	bl	8002f90 <send_debug_logs>
    }
    else
    {
        send_debug_logs("Failed to save the Astronode configuration in NVM.");
    }
}
 8007082:	e003      	b.n	800708c <astronode_send_cfg_sr+0x5c>
        send_debug_logs("Failed to save the Astronode configuration in NVM.");
 8007084:	4b05      	ldr	r3, [pc, #20]	; (800709c <astronode_send_cfg_sr+0x6c>)
 8007086:	0018      	movs	r0, r3
 8007088:	f7fb ff82 	bl	8002f90 <send_debug_logs>
}
 800708c:	46c0      	nop			; (mov r8, r8)
 800708e:	46bd      	mov	sp, r7
 8007090:	b064      	add	sp, #400	; 0x190
 8007092:	bdb0      	pop	{r4, r5, r7, pc}
 8007094:	fffffe70 	.word	0xfffffe70
 8007098:	0800e300 	.word	0x0800e300
 800709c:	0800e334 	.word	0x0800e334

080070a0 <astronode_send_cfg_wr>:
                            bool deep_sleep_mode,
                            bool message_ack_event_pin_mask,
                            bool reset_notification_event_pin_mask,
							bool command_available_event_pin_mask,
							bool message_tx_event_pin_mask)
{
 80070a0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80070a2:	b0e7      	sub	sp, #412	; 0x19c
 80070a4:	af00      	add	r7, sp, #0
 80070a6:	0005      	movs	r5, r0
 80070a8:	000c      	movs	r4, r1
 80070aa:	0010      	movs	r0, r2
 80070ac:	0019      	movs	r1, r3
 80070ae:	4b4b      	ldr	r3, [pc, #300]	; (80071dc <astronode_send_cfg_wr+0x13c>)
 80070b0:	26cc      	movs	r6, #204	; 0xcc
 80070b2:	0076      	lsls	r6, r6, #1
 80070b4:	199b      	adds	r3, r3, r6
 80070b6:	19db      	adds	r3, r3, r7
 80070b8:	1c2a      	adds	r2, r5, #0
 80070ba:	701a      	strb	r2, [r3, #0]
 80070bc:	4b48      	ldr	r3, [pc, #288]	; (80071e0 <astronode_send_cfg_wr+0x140>)
 80070be:	0035      	movs	r5, r6
 80070c0:	195b      	adds	r3, r3, r5
 80070c2:	19db      	adds	r3, r3, r7
 80070c4:	1c22      	adds	r2, r4, #0
 80070c6:	701a      	strb	r2, [r3, #0]
 80070c8:	4b46      	ldr	r3, [pc, #280]	; (80071e4 <astronode_send_cfg_wr+0x144>)
 80070ca:	002c      	movs	r4, r5
 80070cc:	191b      	adds	r3, r3, r4
 80070ce:	19db      	adds	r3, r3, r7
 80070d0:	1c02      	adds	r2, r0, #0
 80070d2:	701a      	strb	r2, [r3, #0]
 80070d4:	4b44      	ldr	r3, [pc, #272]	; (80071e8 <astronode_send_cfg_wr+0x148>)
 80070d6:	191b      	adds	r3, r3, r4
 80070d8:	19db      	adds	r3, r3, r7
 80070da:	1c0a      	adds	r2, r1, #0
 80070dc:	701a      	strb	r2, [r3, #0]
    astronode_app_msg_t request = {0};
 80070de:	25d0      	movs	r5, #208	; 0xd0
 80070e0:	197b      	adds	r3, r7, r5
 80070e2:	0018      	movs	r0, r3
 80070e4:	23c6      	movs	r3, #198	; 0xc6
 80070e6:	001a      	movs	r2, r3
 80070e8:	2100      	movs	r1, #0
 80070ea:	f002 f8d9 	bl	80092a0 <memset>
    astronode_app_msg_t answer = {0};
 80070ee:	4b3f      	ldr	r3, [pc, #252]	; (80071ec <astronode_send_cfg_wr+0x14c>)
 80070f0:	191b      	adds	r3, r3, r4
 80070f2:	19db      	adds	r3, r3, r7
 80070f4:	0018      	movs	r0, r3
 80070f6:	23c6      	movs	r3, #198	; 0xc6
 80070f8:	001a      	movs	r2, r3
 80070fa:	2100      	movs	r1, #0
 80070fc:	f002 f8d0 	bl	80092a0 <memset>

    request.op_code = ASTRONODE_OP_CODE_CFG_WR;
 8007100:	0029      	movs	r1, r5
 8007102:	187b      	adds	r3, r7, r1
 8007104:	2205      	movs	r2, #5
 8007106:	701a      	strb	r2, [r3, #0]

    request.p_payload[ASTRONODE_BYTE_OFFSET_CFG_WR_CONFIG] = payload_acknowledgment << ASTRONODE_BIT_OFFSET_PAYLOAD_ACK
        | add_geolocation << ASTRONODE_BIT_OFFSET_ADD_GEO
 8007108:	4b34      	ldr	r3, [pc, #208]	; (80071dc <astronode_send_cfg_wr+0x13c>)
 800710a:	191b      	adds	r3, r3, r4
 800710c:	19db      	adds	r3, r3, r7
 800710e:	2200      	movs	r2, #0
 8007110:	569a      	ldrsb	r2, [r3, r2]
 8007112:	4b33      	ldr	r3, [pc, #204]	; (80071e0 <astronode_send_cfg_wr+0x140>)
 8007114:	191b      	adds	r3, r3, r4
 8007116:	19db      	adds	r3, r3, r7
 8007118:	781b      	ldrb	r3, [r3, #0]
 800711a:	005b      	lsls	r3, r3, #1
 800711c:	b25b      	sxtb	r3, r3
 800711e:	4313      	orrs	r3, r2
 8007120:	b25a      	sxtb	r2, r3
        | enable_ephemeris << ASTRONODE_BIT_OFFSET_ENABLE_EPH
 8007122:	4b30      	ldr	r3, [pc, #192]	; (80071e4 <astronode_send_cfg_wr+0x144>)
 8007124:	191b      	adds	r3, r3, r4
 8007126:	19db      	adds	r3, r3, r7
 8007128:	781b      	ldrb	r3, [r3, #0]
 800712a:	009b      	lsls	r3, r3, #2
 800712c:	b25b      	sxtb	r3, r3
 800712e:	4313      	orrs	r3, r2
 8007130:	b25a      	sxtb	r2, r3
        | deep_sleep_mode << ASTRONODE_BIT_OFFSET_DEEP_SLEEP_MODE;
 8007132:	4b2d      	ldr	r3, [pc, #180]	; (80071e8 <astronode_send_cfg_wr+0x148>)
 8007134:	191b      	adds	r3, r3, r4
 8007136:	19db      	adds	r3, r3, r7
 8007138:	781b      	ldrb	r3, [r3, #0]
 800713a:	00db      	lsls	r3, r3, #3
 800713c:	b25b      	sxtb	r3, r3
 800713e:	4313      	orrs	r3, r2
 8007140:	b25b      	sxtb	r3, r3
 8007142:	b2da      	uxtb	r2, r3
    request.p_payload[ASTRONODE_BYTE_OFFSET_CFG_WR_CONFIG] = payload_acknowledgment << ASTRONODE_BIT_OFFSET_PAYLOAD_ACK
 8007144:	187b      	adds	r3, r7, r1
 8007146:	705a      	strb	r2, [r3, #1]

    request.p_payload[ASTRONODE_BYTE_OFFSET_CFG_WR_EVT_PIN_MASK] = message_ack_event_pin_mask << ASTRONODE_BIT_OFFSET_MSG_ACK_EVT_PIN_MASK
        | reset_notification_event_pin_mask << ASTRONODE_BIT_OFFSET_RST_NTF_EVT_PIN_MASK
 8007148:	23d4      	movs	r3, #212	; 0xd4
 800714a:	005b      	lsls	r3, r3, #1
 800714c:	2508      	movs	r5, #8
 800714e:	195b      	adds	r3, r3, r5
 8007150:	19db      	adds	r3, r3, r7
 8007152:	2200      	movs	r2, #0
 8007154:	569a      	ldrsb	r2, [r3, r2]
 8007156:	23d6      	movs	r3, #214	; 0xd6
 8007158:	005b      	lsls	r3, r3, #1
 800715a:	195b      	adds	r3, r3, r5
 800715c:	19db      	adds	r3, r3, r7
 800715e:	781b      	ldrb	r3, [r3, #0]
 8007160:	005b      	lsls	r3, r3, #1
 8007162:	b25b      	sxtb	r3, r3
 8007164:	4313      	orrs	r3, r2
 8007166:	b25a      	sxtb	r2, r3
        | command_available_event_pin_mask << ASTRONODE_BIT_OFFSET_CMD_AVA_EVT_PIN_MASK
 8007168:	23d8      	movs	r3, #216	; 0xd8
 800716a:	005b      	lsls	r3, r3, #1
 800716c:	195b      	adds	r3, r3, r5
 800716e:	19db      	adds	r3, r3, r7
 8007170:	781b      	ldrb	r3, [r3, #0]
 8007172:	009b      	lsls	r3, r3, #2
 8007174:	b25b      	sxtb	r3, r3
 8007176:	4313      	orrs	r3, r2
 8007178:	b25a      	sxtb	r2, r3
        | message_tx_event_pin_mask << ASTRONODE_BIT_OFFSET_MSG_TXP_EVT_PIN_MASK;
 800717a:	23da      	movs	r3, #218	; 0xda
 800717c:	005b      	lsls	r3, r3, #1
 800717e:	195b      	adds	r3, r3, r5
 8007180:	19db      	adds	r3, r3, r7
 8007182:	781b      	ldrb	r3, [r3, #0]
 8007184:	00db      	lsls	r3, r3, #3
 8007186:	b25b      	sxtb	r3, r3
 8007188:	4313      	orrs	r3, r2
 800718a:	b25b      	sxtb	r3, r3
 800718c:	b2da      	uxtb	r2, r3
    request.p_payload[ASTRONODE_BYTE_OFFSET_CFG_WR_EVT_PIN_MASK] = message_ack_event_pin_mask << ASTRONODE_BIT_OFFSET_MSG_ACK_EVT_PIN_MASK
 800718e:	187b      	adds	r3, r7, r1
 8007190:	70da      	strb	r2, [r3, #3]

    request.payload_len = 3;
 8007192:	0008      	movs	r0, r1
 8007194:	187b      	adds	r3, r7, r1
 8007196:	22c4      	movs	r2, #196	; 0xc4
 8007198:	2103      	movs	r1, #3
 800719a:	5299      	strh	r1, [r3, r2]

    if (astronode_transport_send_receive(&request, &answer) == RS_SUCCESS)
 800719c:	002b      	movs	r3, r5
 800719e:	18fa      	adds	r2, r7, r3
 80071a0:	183b      	adds	r3, r7, r0
 80071a2:	0011      	movs	r1, r2
 80071a4:	0018      	movs	r0, r3
 80071a6:	f001 f9af 	bl	8008508 <astronode_transport_send_receive>
 80071aa:	0003      	movs	r3, r0
 80071ac:	2b01      	cmp	r3, #1
 80071ae:	d10f      	bne.n	80071d0 <astronode_send_cfg_wr+0x130>
    {
        if (answer.op_code == ASTRONODE_OP_CODE_CFG_WA)
 80071b0:	4b0e      	ldr	r3, [pc, #56]	; (80071ec <astronode_send_cfg_wr+0x14c>)
 80071b2:	191b      	adds	r3, r3, r4
 80071b4:	19db      	adds	r3, r3, r7
 80071b6:	781b      	ldrb	r3, [r3, #0]
 80071b8:	2b85      	cmp	r3, #133	; 0x85
 80071ba:	d105      	bne.n	80071c8 <astronode_send_cfg_wr+0x128>
        {
            send_debug_logs("Astronode configuration successfully set.");
 80071bc:	4b0c      	ldr	r3, [pc, #48]	; (80071f0 <astronode_send_cfg_wr+0x150>)
 80071be:	0018      	movs	r0, r3
 80071c0:	f7fb fee6 	bl	8002f90 <send_debug_logs>
            return true ;
 80071c4:	2301      	movs	r3, #1
 80071c6:	e004      	b.n	80071d2 <astronode_send_cfg_wr+0x132>
        }
        else
        {
            send_debug_logs("Failed to set the Astronode configuration.");
 80071c8:	4b0a      	ldr	r3, [pc, #40]	; (80071f4 <astronode_send_cfg_wr+0x154>)
 80071ca:	0018      	movs	r0, r3
 80071cc:	f7fb fee0 	bl	8002f90 <send_debug_logs>
        }
    }
    return false ;
 80071d0:	2300      	movs	r3, #0
}
 80071d2:	0018      	movs	r0, r3
 80071d4:	46bd      	mov	sp, r7
 80071d6:	b067      	add	sp, #412	; 0x19c
 80071d8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80071da:	46c0      	nop			; (mov r8, r8)
 80071dc:	fffffe6f 	.word	0xfffffe6f
 80071e0:	fffffe6e 	.word	0xfffffe6e
 80071e4:	fffffe6d 	.word	0xfffffe6d
 80071e8:	fffffe6c 	.word	0xfffffe6c
 80071ec:	fffffe70 	.word	0xfffffe70
 80071f0:	0800e368 	.word	0x0800e368
 80071f4:	0800e394 	.word	0x0800e394

080071f8 <astronode_send_mgi_rr>:
        send_debug_logs("Failed to save the Astronode context in NVM.");
    }
}

void astronode_send_mgi_rr(void)
{
 80071f8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80071fa:	b0ed      	sub	sp, #436	; 0x1b4
 80071fc:	af00      	add	r7, sp, #0
    astronode_app_msg_t request = {0};
 80071fe:	21c8      	movs	r1, #200	; 0xc8
 8007200:	2318      	movs	r3, #24
 8007202:	18cb      	adds	r3, r1, r3
 8007204:	19db      	adds	r3, r3, r7
 8007206:	0018      	movs	r0, r3
 8007208:	23c6      	movs	r3, #198	; 0xc6
 800720a:	001a      	movs	r2, r3
 800720c:	2100      	movs	r1, #0
 800720e:	f002 f847 	bl	80092a0 <memset>
    astronode_app_msg_t answer = {0};
 8007212:	4b4a      	ldr	r3, [pc, #296]	; (800733c <astronode_send_mgi_rr+0x144>)
 8007214:	26cc      	movs	r6, #204	; 0xcc
 8007216:	0076      	lsls	r6, r6, #1
 8007218:	199b      	adds	r3, r3, r6
 800721a:	2218      	movs	r2, #24
 800721c:	4694      	mov	ip, r2
 800721e:	44bc      	add	ip, r7
 8007220:	4463      	add	r3, ip
 8007222:	0018      	movs	r0, r3
 8007224:	23c6      	movs	r3, #198	; 0xc6
 8007226:	001a      	movs	r2, r3
 8007228:	2100      	movs	r1, #0
 800722a:	f002 f839 	bl	80092a0 <memset>

    request.op_code = ASTRONODE_OP_CODE_MGI_RR;
 800722e:	21c8      	movs	r1, #200	; 0xc8
 8007230:	2318      	movs	r3, #24
 8007232:	18cb      	adds	r3, r1, r3
 8007234:	19db      	adds	r3, r3, r7
 8007236:	2219      	movs	r2, #25
 8007238:	701a      	strb	r2, [r3, #0]

    if (astronode_transport_send_receive(&request, &answer) == RS_SUCCESS)
 800723a:	2318      	movs	r3, #24
 800723c:	18fa      	adds	r2, r7, r3
 800723e:	2318      	movs	r3, #24
 8007240:	18cb      	adds	r3, r1, r3
 8007242:	19db      	adds	r3, r3, r7
 8007244:	0011      	movs	r1, r2
 8007246:	0018      	movs	r0, r3
 8007248:	f001 f95e 	bl	8008508 <astronode_transport_send_receive>
 800724c:	0003      	movs	r3, r0
 800724e:	2b01      	cmp	r3, #1
 8007250:	d16f      	bne.n	8007332 <astronode_send_mgi_rr+0x13a>
    {
        if (answer.op_code == ASTRONODE_OP_CODE_MGI_RA)
 8007252:	4b3a      	ldr	r3, [pc, #232]	; (800733c <astronode_send_mgi_rr+0x144>)
 8007254:	0032      	movs	r2, r6
 8007256:	189b      	adds	r3, r3, r2
 8007258:	2118      	movs	r1, #24
 800725a:	468c      	mov	ip, r1
 800725c:	44bc      	add	ip, r7
 800725e:	4463      	add	r3, ip
 8007260:	781b      	ldrb	r3, [r3, #0]
 8007262:	2b99      	cmp	r3, #153	; 0x99
 8007264:	d161      	bne.n	800732a <astronode_send_mgi_rr+0x132>
        {
 8007266:	466b      	mov	r3, sp
 8007268:	001e      	movs	r6, r3
            char guid[answer.payload_len];
 800726a:	4b34      	ldr	r3, [pc, #208]	; (800733c <astronode_send_mgi_rr+0x144>)
 800726c:	189b      	adds	r3, r3, r2
 800726e:	2218      	movs	r2, #24
 8007270:	4694      	mov	ip, r2
 8007272:	44bc      	add	ip, r7
 8007274:	4463      	add	r3, ip
 8007276:	22c4      	movs	r2, #196	; 0xc4
 8007278:	5a9b      	ldrh	r3, [r3, r2]
 800727a:	001a      	movs	r2, r3
 800727c:	3a01      	subs	r2, #1
 800727e:	21ca      	movs	r1, #202	; 0xca
 8007280:	0049      	lsls	r1, r1, #1
 8007282:	2018      	movs	r0, #24
 8007284:	1809      	adds	r1, r1, r0
 8007286:	19c9      	adds	r1, r1, r7
 8007288:	600a      	str	r2, [r1, #0]
 800728a:	001c      	movs	r4, r3
 800728c:	2200      	movs	r2, #0
 800728e:	0015      	movs	r5, r2
 8007290:	0020      	movs	r0, r4
 8007292:	0029      	movs	r1, r5
 8007294:	0004      	movs	r4, r0
 8007296:	0f62      	lsrs	r2, r4, #29
 8007298:	000c      	movs	r4, r1
 800729a:	00e4      	lsls	r4, r4, #3
 800729c:	617c      	str	r4, [r7, #20]
 800729e:	697c      	ldr	r4, [r7, #20]
 80072a0:	4314      	orrs	r4, r2
 80072a2:	617c      	str	r4, [r7, #20]
 80072a4:	0001      	movs	r1, r0
 80072a6:	00c9      	lsls	r1, r1, #3
 80072a8:	6139      	str	r1, [r7, #16]
 80072aa:	603b      	str	r3, [r7, #0]
 80072ac:	2200      	movs	r2, #0
 80072ae:	607a      	str	r2, [r7, #4]
 80072b0:	6838      	ldr	r0, [r7, #0]
 80072b2:	6879      	ldr	r1, [r7, #4]
 80072b4:	0004      	movs	r4, r0
 80072b6:	0f62      	lsrs	r2, r4, #29
 80072b8:	000c      	movs	r4, r1
 80072ba:	00e4      	lsls	r4, r4, #3
 80072bc:	60fc      	str	r4, [r7, #12]
 80072be:	68fc      	ldr	r4, [r7, #12]
 80072c0:	4314      	orrs	r4, r2
 80072c2:	60fc      	str	r4, [r7, #12]
 80072c4:	0001      	movs	r1, r0
 80072c6:	00ca      	lsls	r2, r1, #3
 80072c8:	60ba      	str	r2, [r7, #8]
 80072ca:	3307      	adds	r3, #7
 80072cc:	08db      	lsrs	r3, r3, #3
 80072ce:	00db      	lsls	r3, r3, #3
 80072d0:	4669      	mov	r1, sp
 80072d2:	1acb      	subs	r3, r1, r3
 80072d4:	469d      	mov	sp, r3
 80072d6:	466b      	mov	r3, sp
 80072d8:	3300      	adds	r3, #0
 80072da:	24c8      	movs	r4, #200	; 0xc8
 80072dc:	0064      	lsls	r4, r4, #1
 80072de:	2218      	movs	r2, #24
 80072e0:	18a2      	adds	r2, r4, r2
 80072e2:	19d1      	adds	r1, r2, r7
 80072e4:	600b      	str	r3, [r1, #0]
            send_debug_logs("Module GUID is:");
 80072e6:	4b16      	ldr	r3, [pc, #88]	; (8007340 <astronode_send_mgi_rr+0x148>)
 80072e8:	0018      	movs	r0, r3
 80072ea:	f7fb fe51 	bl	8002f90 <send_debug_logs>
            snprintf(guid, answer.payload_len, "%s", answer.p_payload);
 80072ee:	4b13      	ldr	r3, [pc, #76]	; (800733c <astronode_send_mgi_rr+0x144>)
 80072f0:	22cc      	movs	r2, #204	; 0xcc
 80072f2:	0052      	lsls	r2, r2, #1
 80072f4:	189b      	adds	r3, r3, r2
 80072f6:	2218      	movs	r2, #24
 80072f8:	4694      	mov	ip, r2
 80072fa:	44bc      	add	ip, r7
 80072fc:	4463      	add	r3, ip
 80072fe:	22c4      	movs	r2, #196	; 0xc4
 8007300:	5a9b      	ldrh	r3, [r3, r2]
 8007302:	0019      	movs	r1, r3
 8007304:	2318      	movs	r3, #24
 8007306:	18fb      	adds	r3, r7, r3
 8007308:	3301      	adds	r3, #1
 800730a:	4a0e      	ldr	r2, [pc, #56]	; (8007344 <astronode_send_mgi_rr+0x14c>)
 800730c:	2018      	movs	r0, #24
 800730e:	1820      	adds	r0, r4, r0
 8007310:	19c0      	adds	r0, r0, r7
 8007312:	6800      	ldr	r0, [r0, #0]
 8007314:	f001 ff24 	bl	8009160 <snprintf>
            send_debug_logs(guid);
 8007318:	2318      	movs	r3, #24
 800731a:	18e3      	adds	r3, r4, r3
 800731c:	19db      	adds	r3, r3, r7
 800731e:	681b      	ldr	r3, [r3, #0]
 8007320:	0018      	movs	r0, r3
 8007322:	f7fb fe35 	bl	8002f90 <send_debug_logs>
 8007326:	46b5      	mov	sp, r6
        else
        {
            send_debug_logs("Failed to read module GUID.");
        }
    }
}
 8007328:	e003      	b.n	8007332 <astronode_send_mgi_rr+0x13a>
            send_debug_logs("Failed to read module GUID.");
 800732a:	4b07      	ldr	r3, [pc, #28]	; (8007348 <astronode_send_mgi_rr+0x150>)
 800732c:	0018      	movs	r0, r3
 800732e:	f7fb fe2f 	bl	8002f90 <send_debug_logs>
}
 8007332:	46c0      	nop			; (mov r8, r8)
 8007334:	46bd      	mov	sp, r7
 8007336:	b06d      	add	sp, #436	; 0x1b4
 8007338:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800733a:	46c0      	nop			; (mov r8, r8)
 800733c:	fffffe68 	.word	0xfffffe68
 8007340:	0800e420 	.word	0x0800e420
 8007344:	0800e430 	.word	0x0800e430
 8007348:	0800e434 	.word	0x0800e434

0800734c <astronode_send_msn_rr>:

void astronode_send_msn_rr(void)
{
 800734c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800734e:	b0ed      	sub	sp, #436	; 0x1b4
 8007350:	af00      	add	r7, sp, #0
    astronode_app_msg_t request = {0};
 8007352:	21c8      	movs	r1, #200	; 0xc8
 8007354:	2318      	movs	r3, #24
 8007356:	18cb      	adds	r3, r1, r3
 8007358:	19db      	adds	r3, r3, r7
 800735a:	0018      	movs	r0, r3
 800735c:	23c6      	movs	r3, #198	; 0xc6
 800735e:	001a      	movs	r2, r3
 8007360:	2100      	movs	r1, #0
 8007362:	f001 ff9d 	bl	80092a0 <memset>
    astronode_app_msg_t answer = {0};
 8007366:	4b4a      	ldr	r3, [pc, #296]	; (8007490 <astronode_send_msn_rr+0x144>)
 8007368:	26cc      	movs	r6, #204	; 0xcc
 800736a:	0076      	lsls	r6, r6, #1
 800736c:	199b      	adds	r3, r3, r6
 800736e:	2218      	movs	r2, #24
 8007370:	4694      	mov	ip, r2
 8007372:	44bc      	add	ip, r7
 8007374:	4463      	add	r3, ip
 8007376:	0018      	movs	r0, r3
 8007378:	23c6      	movs	r3, #198	; 0xc6
 800737a:	001a      	movs	r2, r3
 800737c:	2100      	movs	r1, #0
 800737e:	f001 ff8f 	bl	80092a0 <memset>

    request.op_code = ASTRONODE_OP_CODE_MSN_RR;
 8007382:	21c8      	movs	r1, #200	; 0xc8
 8007384:	2318      	movs	r3, #24
 8007386:	18cb      	adds	r3, r1, r3
 8007388:	19db      	adds	r3, r3, r7
 800738a:	221a      	movs	r2, #26
 800738c:	701a      	strb	r2, [r3, #0]

    if (astronode_transport_send_receive(&request, &answer) == RS_SUCCESS)
 800738e:	2318      	movs	r3, #24
 8007390:	18fa      	adds	r2, r7, r3
 8007392:	2318      	movs	r3, #24
 8007394:	18cb      	adds	r3, r1, r3
 8007396:	19db      	adds	r3, r3, r7
 8007398:	0011      	movs	r1, r2
 800739a:	0018      	movs	r0, r3
 800739c:	f001 f8b4 	bl	8008508 <astronode_transport_send_receive>
 80073a0:	0003      	movs	r3, r0
 80073a2:	2b01      	cmp	r3, #1
 80073a4:	d16f      	bne.n	8007486 <astronode_send_msn_rr+0x13a>
    {
        if (answer.op_code == ASTRONODE_OP_CODE_MSN_RA)
 80073a6:	4b3a      	ldr	r3, [pc, #232]	; (8007490 <astronode_send_msn_rr+0x144>)
 80073a8:	0032      	movs	r2, r6
 80073aa:	189b      	adds	r3, r3, r2
 80073ac:	2118      	movs	r1, #24
 80073ae:	468c      	mov	ip, r1
 80073b0:	44bc      	add	ip, r7
 80073b2:	4463      	add	r3, ip
 80073b4:	781b      	ldrb	r3, [r3, #0]
 80073b6:	2b9a      	cmp	r3, #154	; 0x9a
 80073b8:	d161      	bne.n	800747e <astronode_send_msn_rr+0x132>
        {
 80073ba:	466b      	mov	r3, sp
 80073bc:	001e      	movs	r6, r3
            char serial_number[answer.payload_len];
 80073be:	4b34      	ldr	r3, [pc, #208]	; (8007490 <astronode_send_msn_rr+0x144>)
 80073c0:	189b      	adds	r3, r3, r2
 80073c2:	2218      	movs	r2, #24
 80073c4:	4694      	mov	ip, r2
 80073c6:	44bc      	add	ip, r7
 80073c8:	4463      	add	r3, ip
 80073ca:	22c4      	movs	r2, #196	; 0xc4
 80073cc:	5a9b      	ldrh	r3, [r3, r2]
 80073ce:	001a      	movs	r2, r3
 80073d0:	3a01      	subs	r2, #1
 80073d2:	21ca      	movs	r1, #202	; 0xca
 80073d4:	0049      	lsls	r1, r1, #1
 80073d6:	2018      	movs	r0, #24
 80073d8:	1809      	adds	r1, r1, r0
 80073da:	19c9      	adds	r1, r1, r7
 80073dc:	600a      	str	r2, [r1, #0]
 80073de:	001c      	movs	r4, r3
 80073e0:	2200      	movs	r2, #0
 80073e2:	0015      	movs	r5, r2
 80073e4:	0020      	movs	r0, r4
 80073e6:	0029      	movs	r1, r5
 80073e8:	0004      	movs	r4, r0
 80073ea:	0f62      	lsrs	r2, r4, #29
 80073ec:	000c      	movs	r4, r1
 80073ee:	00e4      	lsls	r4, r4, #3
 80073f0:	617c      	str	r4, [r7, #20]
 80073f2:	697c      	ldr	r4, [r7, #20]
 80073f4:	4314      	orrs	r4, r2
 80073f6:	617c      	str	r4, [r7, #20]
 80073f8:	0001      	movs	r1, r0
 80073fa:	00c9      	lsls	r1, r1, #3
 80073fc:	6139      	str	r1, [r7, #16]
 80073fe:	603b      	str	r3, [r7, #0]
 8007400:	2200      	movs	r2, #0
 8007402:	607a      	str	r2, [r7, #4]
 8007404:	6838      	ldr	r0, [r7, #0]
 8007406:	6879      	ldr	r1, [r7, #4]
 8007408:	0004      	movs	r4, r0
 800740a:	0f62      	lsrs	r2, r4, #29
 800740c:	000c      	movs	r4, r1
 800740e:	00e4      	lsls	r4, r4, #3
 8007410:	60fc      	str	r4, [r7, #12]
 8007412:	68fc      	ldr	r4, [r7, #12]
 8007414:	4314      	orrs	r4, r2
 8007416:	60fc      	str	r4, [r7, #12]
 8007418:	0001      	movs	r1, r0
 800741a:	00ca      	lsls	r2, r1, #3
 800741c:	60ba      	str	r2, [r7, #8]
 800741e:	3307      	adds	r3, #7
 8007420:	08db      	lsrs	r3, r3, #3
 8007422:	00db      	lsls	r3, r3, #3
 8007424:	4669      	mov	r1, sp
 8007426:	1acb      	subs	r3, r1, r3
 8007428:	469d      	mov	sp, r3
 800742a:	466b      	mov	r3, sp
 800742c:	3300      	adds	r3, #0
 800742e:	24c8      	movs	r4, #200	; 0xc8
 8007430:	0064      	lsls	r4, r4, #1
 8007432:	2218      	movs	r2, #24
 8007434:	18a2      	adds	r2, r4, r2
 8007436:	19d1      	adds	r1, r2, r7
 8007438:	600b      	str	r3, [r1, #0]
            send_debug_logs("Module's Serial Number is:");
 800743a:	4b16      	ldr	r3, [pc, #88]	; (8007494 <astronode_send_msn_rr+0x148>)
 800743c:	0018      	movs	r0, r3
 800743e:	f7fb fda7 	bl	8002f90 <send_debug_logs>
            snprintf(serial_number, answer.payload_len, "%s", answer.p_payload);
 8007442:	4b13      	ldr	r3, [pc, #76]	; (8007490 <astronode_send_msn_rr+0x144>)
 8007444:	22cc      	movs	r2, #204	; 0xcc
 8007446:	0052      	lsls	r2, r2, #1
 8007448:	189b      	adds	r3, r3, r2
 800744a:	2218      	movs	r2, #24
 800744c:	4694      	mov	ip, r2
 800744e:	44bc      	add	ip, r7
 8007450:	4463      	add	r3, ip
 8007452:	22c4      	movs	r2, #196	; 0xc4
 8007454:	5a9b      	ldrh	r3, [r3, r2]
 8007456:	0019      	movs	r1, r3
 8007458:	2318      	movs	r3, #24
 800745a:	18fb      	adds	r3, r7, r3
 800745c:	3301      	adds	r3, #1
 800745e:	4a0e      	ldr	r2, [pc, #56]	; (8007498 <astronode_send_msn_rr+0x14c>)
 8007460:	2018      	movs	r0, #24
 8007462:	1820      	adds	r0, r4, r0
 8007464:	19c0      	adds	r0, r0, r7
 8007466:	6800      	ldr	r0, [r0, #0]
 8007468:	f001 fe7a 	bl	8009160 <snprintf>
            send_debug_logs(serial_number);
 800746c:	2318      	movs	r3, #24
 800746e:	18e3      	adds	r3, r4, r3
 8007470:	19db      	adds	r3, r3, r7
 8007472:	681b      	ldr	r3, [r3, #0]
 8007474:	0018      	movs	r0, r3
 8007476:	f7fb fd8b 	bl	8002f90 <send_debug_logs>
 800747a:	46b5      	mov	sp, r6
        else
        {
            send_debug_logs("Failed to read module Serial Number.");
        }
    }
}
 800747c:	e003      	b.n	8007486 <astronode_send_msn_rr+0x13a>
            send_debug_logs("Failed to read module Serial Number.");
 800747e:	4b07      	ldr	r3, [pc, #28]	; (800749c <astronode_send_msn_rr+0x150>)
 8007480:	0018      	movs	r0, r3
 8007482:	f7fb fd85 	bl	8002f90 <send_debug_logs>
}
 8007486:	46c0      	nop			; (mov r8, r8)
 8007488:	46bd      	mov	sp, r7
 800748a:	b06d      	add	sp, #436	; 0x1b4
 800748c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800748e:	46c0      	nop			; (mov r8, r8)
 8007490:	fffffe68 	.word	0xfffffe68
 8007494:	0800e450 	.word	0x0800e450
 8007498:	0800e430 	.word	0x0800e430
 800749c:	0800e46c 	.word	0x0800e46c

080074a0 <astronode_send_evt_rr>:
    }
    return 0xFFFFFFFF ; // Longest possible time
}

void astronode_send_evt_rr(void)
{
 80074a0:	b5b0      	push	{r4, r5, r7, lr}
 80074a2:	b0e4      	sub	sp, #400	; 0x190
 80074a4:	af00      	add	r7, sp, #0
    astronode_app_msg_t request = {0};
 80074a6:	24c8      	movs	r4, #200	; 0xc8
 80074a8:	193b      	adds	r3, r7, r4
 80074aa:	0018      	movs	r0, r3
 80074ac:	23c6      	movs	r3, #198	; 0xc6
 80074ae:	001a      	movs	r2, r3
 80074b0:	2100      	movs	r1, #0
 80074b2:	f001 fef5 	bl	80092a0 <memset>
    astronode_app_msg_t answer = {0};
 80074b6:	4b31      	ldr	r3, [pc, #196]	; (800757c <astronode_send_evt_rr+0xdc>)
 80074b8:	25c8      	movs	r5, #200	; 0xc8
 80074ba:	006d      	lsls	r5, r5, #1
 80074bc:	195b      	adds	r3, r3, r5
 80074be:	19db      	adds	r3, r3, r7
 80074c0:	0018      	movs	r0, r3
 80074c2:	23c6      	movs	r3, #198	; 0xc6
 80074c4:	001a      	movs	r2, r3
 80074c6:	2100      	movs	r1, #0
 80074c8:	f001 feea 	bl	80092a0 <memset>

    request.op_code = ASTRONODE_OP_CODE_EVT_RR;
 80074cc:	193b      	adds	r3, r7, r4
 80074ce:	2265      	movs	r2, #101	; 0x65
 80074d0:	701a      	strb	r2, [r3, #0]

    if (astronode_transport_send_receive(&request, &answer) == RS_SUCCESS)
 80074d2:	003a      	movs	r2, r7
 80074d4:	193b      	adds	r3, r7, r4
 80074d6:	0011      	movs	r1, r2
 80074d8:	0018      	movs	r0, r3
 80074da:	f001 f815 	bl	8008508 <astronode_transport_send_receive>
 80074de:	0003      	movs	r3, r0
 80074e0:	2b01      	cmp	r3, #1
 80074e2:	d147      	bne.n	8007574 <astronode_send_evt_rr+0xd4>
    {
        if (answer.op_code == ASTRONODE_OP_CODE_EVT_RA)
 80074e4:	4b25      	ldr	r3, [pc, #148]	; (800757c <astronode_send_evt_rr+0xdc>)
 80074e6:	195b      	adds	r3, r3, r5
 80074e8:	19db      	adds	r3, r3, r7
 80074ea:	781b      	ldrb	r3, [r3, #0]
 80074ec:	2be5      	cmp	r3, #229	; 0xe5
 80074ee:	d141      	bne.n	8007574 <astronode_send_evt_rr+0xd4>
        {
            if ((answer.p_payload[ASTRONODE_BYTE_OFFSET_EVT_RR_EVENT]) & (1 << ASTRONODE_BIT_OFFSET_ACK))
 80074f0:	4b22      	ldr	r3, [pc, #136]	; (800757c <astronode_send_evt_rr+0xdc>)
 80074f2:	195b      	adds	r3, r3, r5
 80074f4:	19db      	adds	r3, r3, r7
 80074f6:	785b      	ldrb	r3, [r3, #1]
 80074f8:	001a      	movs	r2, r3
 80074fa:	2301      	movs	r3, #1
 80074fc:	4013      	ands	r3, r2
 80074fe:	d006      	beq.n	800750e <astronode_send_evt_rr+0x6e>
            {
                g_is_sak_available = true;
 8007500:	4b1f      	ldr	r3, [pc, #124]	; (8007580 <astronode_send_evt_rr+0xe0>)
 8007502:	2201      	movs	r2, #1
 8007504:	701a      	strb	r2, [r3, #0]
                send_debug_logs("Message acknowledgment available.");
 8007506:	4b1f      	ldr	r3, [pc, #124]	; (8007584 <astronode_send_evt_rr+0xe4>)
 8007508:	0018      	movs	r0, r3
 800750a:	f7fb fd41 	bl	8002f90 <send_debug_logs>
            }
            if ((answer.p_payload[ASTRONODE_BYTE_OFFSET_EVT_RR_EVENT]) & (1 << ASTRONODE_BIT_OFFSET_RST))
 800750e:	4b1b      	ldr	r3, [pc, #108]	; (800757c <astronode_send_evt_rr+0xdc>)
 8007510:	22c8      	movs	r2, #200	; 0xc8
 8007512:	0052      	lsls	r2, r2, #1
 8007514:	189b      	adds	r3, r3, r2
 8007516:	19db      	adds	r3, r3, r7
 8007518:	785b      	ldrb	r3, [r3, #1]
 800751a:	001a      	movs	r2, r3
 800751c:	2302      	movs	r3, #2
 800751e:	4013      	ands	r3, r2
 8007520:	d006      	beq.n	8007530 <astronode_send_evt_rr+0x90>
            {
                g_is_astronode_reset = true;
 8007522:	4b19      	ldr	r3, [pc, #100]	; (8007588 <astronode_send_evt_rr+0xe8>)
 8007524:	2201      	movs	r2, #1
 8007526:	701a      	strb	r2, [r3, #0]
                send_debug_logs("Astronode has reset.");
 8007528:	4b18      	ldr	r3, [pc, #96]	; (800758c <astronode_send_evt_rr+0xec>)
 800752a:	0018      	movs	r0, r3
 800752c:	f7fb fd30 	bl	8002f90 <send_debug_logs>
            }
            if ((answer.p_payload[ASTRONODE_BYTE_OFFSET_EVT_RR_EVENT]) & (1 << ASTRONODE_BIT_OFFSET_CMD))
 8007530:	4b12      	ldr	r3, [pc, #72]	; (800757c <astronode_send_evt_rr+0xdc>)
 8007532:	22c8      	movs	r2, #200	; 0xc8
 8007534:	0052      	lsls	r2, r2, #1
 8007536:	189b      	adds	r3, r3, r2
 8007538:	19db      	adds	r3, r3, r7
 800753a:	785b      	ldrb	r3, [r3, #1]
 800753c:	001a      	movs	r2, r3
 800753e:	2304      	movs	r3, #4
 8007540:	4013      	ands	r3, r2
 8007542:	d006      	beq.n	8007552 <astronode_send_evt_rr+0xb2>
            {
                g_is_command_available = true;
 8007544:	4b12      	ldr	r3, [pc, #72]	; (8007590 <astronode_send_evt_rr+0xf0>)
 8007546:	2201      	movs	r2, #1
 8007548:	701a      	strb	r2, [r3, #0]
                send_debug_logs("Command available.");
 800754a:	4b12      	ldr	r3, [pc, #72]	; (8007594 <astronode_send_evt_rr+0xf4>)
 800754c:	0018      	movs	r0, r3
 800754e:	f7fb fd1f 	bl	8002f90 <send_debug_logs>
            }
            if ((answer.p_payload[ASTRONODE_BYTE_OFFSET_EVT_RR_EVENT]) & (1 << ASTRONODE_BIT_OFFEST_MSG_TX))
 8007552:	4b0a      	ldr	r3, [pc, #40]	; (800757c <astronode_send_evt_rr+0xdc>)
 8007554:	22c8      	movs	r2, #200	; 0xc8
 8007556:	0052      	lsls	r2, r2, #1
 8007558:	189b      	adds	r3, r3, r2
 800755a:	19db      	adds	r3, r3, r7
 800755c:	785b      	ldrb	r3, [r3, #1]
 800755e:	001a      	movs	r2, r3
 8007560:	2308      	movs	r3, #8
 8007562:	4013      	ands	r3, r2
 8007564:	d006      	beq.n	8007574 <astronode_send_evt_rr+0xd4>
            {
                g_is_tx_msg_pending = true;
 8007566:	4b0c      	ldr	r3, [pc, #48]	; (8007598 <astronode_send_evt_rr+0xf8>)
 8007568:	2201      	movs	r2, #1
 800756a:	701a      	strb	r2, [r3, #0]
                send_debug_logs("TX message pending.");
 800756c:	4b0b      	ldr	r3, [pc, #44]	; (800759c <astronode_send_evt_rr+0xfc>)
 800756e:	0018      	movs	r0, r3
 8007570:	f7fb fd0e 	bl	8002f90 <send_debug_logs>
            }

        }
    }
}
 8007574:	46c0      	nop			; (mov r8, r8)
 8007576:	46bd      	mov	sp, r7
 8007578:	b064      	add	sp, #400	; 0x190
 800757a:	bdb0      	pop	{r4, r5, r7, pc}
 800757c:	fffffe70 	.word	0xfffffe70
 8007580:	200009ec 	.word	0x200009ec
 8007584:	0800e514 	.word	0x0800e514
 8007588:	200009ed 	.word	0x200009ed
 800758c:	0800e538 	.word	0x0800e538
 8007590:	200009ee 	.word	0x200009ee
 8007594:	0800e550 	.word	0x0800e550
 8007598:	200009ef 	.word	0x200009ef
 800759c:	0800e564 	.word	0x0800e564

080075a0 <astronode_send_geo_wr>:

void astronode_send_geo_wr(int32_t latitude, int32_t longitude)
{
 80075a0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80075a2:	b0e7      	sub	sp, #412	; 0x19c
 80075a4:	af00      	add	r7, sp, #0
 80075a6:	6078      	str	r0, [r7, #4]
 80075a8:	6039      	str	r1, [r7, #0]
    astronode_app_msg_t request = {0};
 80075aa:	24d0      	movs	r4, #208	; 0xd0
 80075ac:	193b      	adds	r3, r7, r4
 80075ae:	0018      	movs	r0, r3
 80075b0:	23c6      	movs	r3, #198	; 0xc6
 80075b2:	001a      	movs	r2, r3
 80075b4:	2100      	movs	r1, #0
 80075b6:	f001 fe73 	bl	80092a0 <memset>
    astronode_app_msg_t answer = {0};
 80075ba:	4b56      	ldr	r3, [pc, #344]	; (8007714 <astronode_send_geo_wr+0x174>)
 80075bc:	26cc      	movs	r6, #204	; 0xcc
 80075be:	0076      	lsls	r6, r6, #1
 80075c0:	199b      	adds	r3, r3, r6
 80075c2:	19db      	adds	r3, r3, r7
 80075c4:	0018      	movs	r0, r3
 80075c6:	23c6      	movs	r3, #198	; 0xc6
 80075c8:	001a      	movs	r2, r3
 80075ca:	2100      	movs	r1, #0
 80075cc:	f001 fe68 	bl	80092a0 <memset>

    request.op_code = ASTRONODE_OP_CODE_GEO_WR;
 80075d0:	193b      	adds	r3, r7, r4
 80075d2:	2235      	movs	r2, #53	; 0x35
 80075d4:	701a      	strb	r2, [r3, #0]

    request.p_payload[request.payload_len++] = (uint8_t) latitude;
 80075d6:	193b      	adds	r3, r7, r4
 80075d8:	22c4      	movs	r2, #196	; 0xc4
 80075da:	5a9b      	ldrh	r3, [r3, r2]
 80075dc:	1c5a      	adds	r2, r3, #1
 80075de:	b290      	uxth	r0, r2
 80075e0:	193a      	adds	r2, r7, r4
 80075e2:	21c4      	movs	r1, #196	; 0xc4
 80075e4:	5250      	strh	r0, [r2, r1]
 80075e6:	0019      	movs	r1, r3
 80075e8:	687b      	ldr	r3, [r7, #4]
 80075ea:	b2da      	uxtb	r2, r3
 80075ec:	193b      	adds	r3, r7, r4
 80075ee:	185b      	adds	r3, r3, r1
 80075f0:	705a      	strb	r2, [r3, #1]
    request.p_payload[request.payload_len++] = (uint8_t) (latitude >> 8);
 80075f2:	687b      	ldr	r3, [r7, #4]
 80075f4:	1218      	asrs	r0, r3, #8
 80075f6:	0025      	movs	r5, r4
 80075f8:	197b      	adds	r3, r7, r5
 80075fa:	22c4      	movs	r2, #196	; 0xc4
 80075fc:	5a9b      	ldrh	r3, [r3, r2]
 80075fe:	1c5a      	adds	r2, r3, #1
 8007600:	b294      	uxth	r4, r2
 8007602:	197a      	adds	r2, r7, r5
 8007604:	21c4      	movs	r1, #196	; 0xc4
 8007606:	5254      	strh	r4, [r2, r1]
 8007608:	0019      	movs	r1, r3
 800760a:	b2c2      	uxtb	r2, r0
 800760c:	002c      	movs	r4, r5
 800760e:	193b      	adds	r3, r7, r4
 8007610:	185b      	adds	r3, r3, r1
 8007612:	705a      	strb	r2, [r3, #1]
    request.p_payload[request.payload_len++] = (uint8_t) (latitude >> 16);
 8007614:	687b      	ldr	r3, [r7, #4]
 8007616:	1418      	asrs	r0, r3, #16
 8007618:	0025      	movs	r5, r4
 800761a:	197b      	adds	r3, r7, r5
 800761c:	22c4      	movs	r2, #196	; 0xc4
 800761e:	5a9b      	ldrh	r3, [r3, r2]
 8007620:	1c5a      	adds	r2, r3, #1
 8007622:	b294      	uxth	r4, r2
 8007624:	197a      	adds	r2, r7, r5
 8007626:	21c4      	movs	r1, #196	; 0xc4
 8007628:	5254      	strh	r4, [r2, r1]
 800762a:	0019      	movs	r1, r3
 800762c:	b2c2      	uxtb	r2, r0
 800762e:	002c      	movs	r4, r5
 8007630:	193b      	adds	r3, r7, r4
 8007632:	185b      	adds	r3, r3, r1
 8007634:	705a      	strb	r2, [r3, #1]
    request.p_payload[request.payload_len++] = (uint8_t) (latitude >> 24);
 8007636:	687b      	ldr	r3, [r7, #4]
 8007638:	1618      	asrs	r0, r3, #24
 800763a:	0025      	movs	r5, r4
 800763c:	197b      	adds	r3, r7, r5
 800763e:	22c4      	movs	r2, #196	; 0xc4
 8007640:	5a9b      	ldrh	r3, [r3, r2]
 8007642:	1c5a      	adds	r2, r3, #1
 8007644:	b294      	uxth	r4, r2
 8007646:	197a      	adds	r2, r7, r5
 8007648:	21c4      	movs	r1, #196	; 0xc4
 800764a:	5254      	strh	r4, [r2, r1]
 800764c:	0019      	movs	r1, r3
 800764e:	b2c2      	uxtb	r2, r0
 8007650:	002c      	movs	r4, r5
 8007652:	193b      	adds	r3, r7, r4
 8007654:	185b      	adds	r3, r3, r1
 8007656:	705a      	strb	r2, [r3, #1]

    request.p_payload[request.payload_len++] = (uint8_t) longitude;
 8007658:	193b      	adds	r3, r7, r4
 800765a:	22c4      	movs	r2, #196	; 0xc4
 800765c:	5a9b      	ldrh	r3, [r3, r2]
 800765e:	1c5a      	adds	r2, r3, #1
 8007660:	b290      	uxth	r0, r2
 8007662:	193a      	adds	r2, r7, r4
 8007664:	21c4      	movs	r1, #196	; 0xc4
 8007666:	5250      	strh	r0, [r2, r1]
 8007668:	0019      	movs	r1, r3
 800766a:	683b      	ldr	r3, [r7, #0]
 800766c:	b2da      	uxtb	r2, r3
 800766e:	193b      	adds	r3, r7, r4
 8007670:	185b      	adds	r3, r3, r1
 8007672:	705a      	strb	r2, [r3, #1]
    request.p_payload[request.payload_len++] = (uint8_t) (longitude >> 8);
 8007674:	683b      	ldr	r3, [r7, #0]
 8007676:	1218      	asrs	r0, r3, #8
 8007678:	0025      	movs	r5, r4
 800767a:	197b      	adds	r3, r7, r5
 800767c:	22c4      	movs	r2, #196	; 0xc4
 800767e:	5a9b      	ldrh	r3, [r3, r2]
 8007680:	1c5a      	adds	r2, r3, #1
 8007682:	b294      	uxth	r4, r2
 8007684:	197a      	adds	r2, r7, r5
 8007686:	21c4      	movs	r1, #196	; 0xc4
 8007688:	5254      	strh	r4, [r2, r1]
 800768a:	0019      	movs	r1, r3
 800768c:	b2c2      	uxtb	r2, r0
 800768e:	002c      	movs	r4, r5
 8007690:	193b      	adds	r3, r7, r4
 8007692:	185b      	adds	r3, r3, r1
 8007694:	705a      	strb	r2, [r3, #1]
    request.p_payload[request.payload_len++] = (uint8_t) (longitude >> 16);
 8007696:	683b      	ldr	r3, [r7, #0]
 8007698:	1418      	asrs	r0, r3, #16
 800769a:	0025      	movs	r5, r4
 800769c:	197b      	adds	r3, r7, r5
 800769e:	22c4      	movs	r2, #196	; 0xc4
 80076a0:	5a9b      	ldrh	r3, [r3, r2]
 80076a2:	1c5a      	adds	r2, r3, #1
 80076a4:	b294      	uxth	r4, r2
 80076a6:	197a      	adds	r2, r7, r5
 80076a8:	21c4      	movs	r1, #196	; 0xc4
 80076aa:	5254      	strh	r4, [r2, r1]
 80076ac:	0019      	movs	r1, r3
 80076ae:	b2c2      	uxtb	r2, r0
 80076b0:	002c      	movs	r4, r5
 80076b2:	193b      	adds	r3, r7, r4
 80076b4:	185b      	adds	r3, r3, r1
 80076b6:	705a      	strb	r2, [r3, #1]
    request.p_payload[request.payload_len++] = (uint8_t) (longitude >> 24);
 80076b8:	683b      	ldr	r3, [r7, #0]
 80076ba:	1618      	asrs	r0, r3, #24
 80076bc:	0025      	movs	r5, r4
 80076be:	197b      	adds	r3, r7, r5
 80076c0:	22c4      	movs	r2, #196	; 0xc4
 80076c2:	5a9b      	ldrh	r3, [r3, r2]
 80076c4:	1c5a      	adds	r2, r3, #1
 80076c6:	b294      	uxth	r4, r2
 80076c8:	197a      	adds	r2, r7, r5
 80076ca:	21c4      	movs	r1, #196	; 0xc4
 80076cc:	5254      	strh	r4, [r2, r1]
 80076ce:	0019      	movs	r1, r3
 80076d0:	b2c2      	uxtb	r2, r0
 80076d2:	0028      	movs	r0, r5
 80076d4:	183b      	adds	r3, r7, r0
 80076d6:	185b      	adds	r3, r3, r1
 80076d8:	705a      	strb	r2, [r3, #1]

    if (astronode_transport_send_receive(&request, &answer) == RS_SUCCESS)
 80076da:	2308      	movs	r3, #8
 80076dc:	18fa      	adds	r2, r7, r3
 80076de:	183b      	adds	r3, r7, r0
 80076e0:	0011      	movs	r1, r2
 80076e2:	0018      	movs	r0, r3
 80076e4:	f000 ff10 	bl	8008508 <astronode_transport_send_receive>
 80076e8:	0003      	movs	r3, r0
 80076ea:	2b01      	cmp	r3, #1
 80076ec:	d10e      	bne.n	800770c <astronode_send_geo_wr+0x16c>
    {
        if (answer.op_code == ASTRONODE_OP_CODE_GEO_WA)
 80076ee:	4b09      	ldr	r3, [pc, #36]	; (8007714 <astronode_send_geo_wr+0x174>)
 80076f0:	199b      	adds	r3, r3, r6
 80076f2:	19db      	adds	r3, r3, r7
 80076f4:	781b      	ldrb	r3, [r3, #0]
 80076f6:	2bb5      	cmp	r3, #181	; 0xb5
 80076f8:	d104      	bne.n	8007704 <astronode_send_geo_wr+0x164>
        {
            send_debug_logs("Geolocation values were set successfully.");
 80076fa:	4b07      	ldr	r3, [pc, #28]	; (8007718 <astronode_send_geo_wr+0x178>)
 80076fc:	0018      	movs	r0, r3
 80076fe:	f7fb fc47 	bl	8002f90 <send_debug_logs>
        else
        {
            send_debug_logs("Failed to set the geolocation information.");
        }
    }
}
 8007702:	e003      	b.n	800770c <astronode_send_geo_wr+0x16c>
            send_debug_logs("Failed to set the geolocation information.");
 8007704:	4b05      	ldr	r3, [pc, #20]	; (800771c <astronode_send_geo_wr+0x17c>)
 8007706:	0018      	movs	r0, r3
 8007708:	f7fb fc42 	bl	8002f90 <send_debug_logs>
}
 800770c:	46c0      	nop			; (mov r8, r8)
 800770e:	46bd      	mov	sp, r7
 8007710:	b067      	add	sp, #412	; 0x19c
 8007712:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8007714:	fffffe70 	.word	0xfffffe70
 8007718:	0800e578 	.word	0x0800e578
 800771c:	0800e5a4 	.word	0x0800e5a4

08007720 <astronode_send_pld_er>:
        }
    }
}

bool astronode_send_pld_er ( uint16_t payload_id , char *p_payload , uint16_t payload_length )
{
 8007720:	b5f0      	push	{r4, r5, r6, r7, lr}
 8007722:	b0fb      	sub	sp, #492	; 0x1ec
 8007724:	af00      	add	r7, sp, #0
 8007726:	6039      	str	r1, [r7, #0]
 8007728:	0011      	movs	r1, r2
 800772a:	4b4a      	ldr	r3, [pc, #296]	; (8007854 <astronode_send_pld_er+0x134>)
 800772c:	26f4      	movs	r6, #244	; 0xf4
 800772e:	0076      	lsls	r6, r6, #1
 8007730:	199b      	adds	r3, r3, r6
 8007732:	19db      	adds	r3, r3, r7
 8007734:	1c02      	adds	r2, r0, #0
 8007736:	801a      	strh	r2, [r3, #0]
 8007738:	4b47      	ldr	r3, [pc, #284]	; (8007858 <astronode_send_pld_er+0x138>)
 800773a:	199b      	adds	r3, r3, r6
 800773c:	19db      	adds	r3, r3, r7
 800773e:	1c0a      	adds	r2, r1, #0
 8007740:	801a      	strh	r2, [r3, #0]
    astronode_app_msg_t request = {0};
 8007742:	2490      	movs	r4, #144	; 0x90
 8007744:	0064      	lsls	r4, r4, #1
 8007746:	193b      	adds	r3, r7, r4
 8007748:	0018      	movs	r0, r3
 800774a:	23c6      	movs	r3, #198	; 0xc6
 800774c:	001a      	movs	r2, r3
 800774e:	2100      	movs	r1, #0
 8007750:	f001 fda6 	bl	80092a0 <memset>
    astronode_app_msg_t answer = {0};
 8007754:	4b41      	ldr	r3, [pc, #260]	; (800785c <astronode_send_pld_er+0x13c>)
 8007756:	199b      	adds	r3, r3, r6
 8007758:	19db      	adds	r3, r3, r7
 800775a:	0018      	movs	r0, r3
 800775c:	23c6      	movs	r3, #198	; 0xc6
 800775e:	001a      	movs	r2, r3
 8007760:	2100      	movs	r1, #0
 8007762:	f001 fd9d 	bl	80092a0 <memset>

    request.op_code = ASTRONODE_OP_CODE_PLD_ER;
 8007766:	193b      	adds	r3, r7, r4
 8007768:	2225      	movs	r2, #37	; 0x25
 800776a:	701a      	strb	r2, [r3, #0]

    request.p_payload[request.payload_len++] = (uint8_t) payload_id;
 800776c:	193b      	adds	r3, r7, r4
 800776e:	22c4      	movs	r2, #196	; 0xc4
 8007770:	5a9b      	ldrh	r3, [r3, r2]
 8007772:	1c5a      	adds	r2, r3, #1
 8007774:	b290      	uxth	r0, r2
 8007776:	193a      	adds	r2, r7, r4
 8007778:	21c4      	movs	r1, #196	; 0xc4
 800777a:	5250      	strh	r0, [r2, r1]
 800777c:	0019      	movs	r1, r3
 800777e:	4b35      	ldr	r3, [pc, #212]	; (8007854 <astronode_send_pld_er+0x134>)
 8007780:	199b      	adds	r3, r3, r6
 8007782:	19db      	adds	r3, r3, r7
 8007784:	881b      	ldrh	r3, [r3, #0]
 8007786:	b2da      	uxtb	r2, r3
 8007788:	193b      	adds	r3, r7, r4
 800778a:	185b      	adds	r3, r3, r1
 800778c:	705a      	strb	r2, [r3, #1]
    request.p_payload[request.payload_len++] = (uint8_t) (payload_id >> 8);
 800778e:	4b31      	ldr	r3, [pc, #196]	; (8007854 <astronode_send_pld_er+0x134>)
 8007790:	199b      	adds	r3, r3, r6
 8007792:	19db      	adds	r3, r3, r7
 8007794:	881b      	ldrh	r3, [r3, #0]
 8007796:	0a1b      	lsrs	r3, r3, #8
 8007798:	b298      	uxth	r0, r3
 800779a:	0025      	movs	r5, r4
 800779c:	197b      	adds	r3, r7, r5
 800779e:	22c4      	movs	r2, #196	; 0xc4
 80077a0:	5a9b      	ldrh	r3, [r3, r2]
 80077a2:	1c5a      	adds	r2, r3, #1
 80077a4:	b294      	uxth	r4, r2
 80077a6:	197a      	adds	r2, r7, r5
 80077a8:	21c4      	movs	r1, #196	; 0xc4
 80077aa:	5254      	strh	r4, [r2, r1]
 80077ac:	0019      	movs	r1, r3
 80077ae:	b2c2      	uxtb	r2, r0
 80077b0:	002c      	movs	r4, r5
 80077b2:	193b      	adds	r3, r7, r4
 80077b4:	185b      	adds	r3, r3, r1
 80077b6:	705a      	strb	r2, [r3, #1]

    memcpy(&request.p_payload[request.payload_len], p_payload, payload_length);
 80077b8:	193b      	adds	r3, r7, r4
 80077ba:	22c4      	movs	r2, #196	; 0xc4
 80077bc:	5a9b      	ldrh	r3, [r3, r2]
 80077be:	001a      	movs	r2, r3
 80077c0:	193b      	adds	r3, r7, r4
 80077c2:	189b      	adds	r3, r3, r2
 80077c4:	1c58      	adds	r0, r3, #1
 80077c6:	4b24      	ldr	r3, [pc, #144]	; (8007858 <astronode_send_pld_er+0x138>)
 80077c8:	199b      	adds	r3, r3, r6
 80077ca:	19db      	adds	r3, r3, r7
 80077cc:	881a      	ldrh	r2, [r3, #0]
 80077ce:	683b      	ldr	r3, [r7, #0]
 80077d0:	0019      	movs	r1, r3
 80077d2:	f001 fdf1 	bl	80093b8 <memcpy>
    request.payload_len = 2 + payload_length;
 80077d6:	4b20      	ldr	r3, [pc, #128]	; (8007858 <astronode_send_pld_er+0x138>)
 80077d8:	199b      	adds	r3, r3, r6
 80077da:	19db      	adds	r3, r3, r7
 80077dc:	881b      	ldrh	r3, [r3, #0]
 80077de:	3302      	adds	r3, #2
 80077e0:	b299      	uxth	r1, r3
 80077e2:	193b      	adds	r3, r7, r4
 80077e4:	22c4      	movs	r2, #196	; 0xc4
 80077e6:	5299      	strh	r1, [r3, r2]
    char s[ASTRONODE_UART_DEBUG_BUFFER_LENGTH] ;
    if ( astronode_transport_send_receive ( &request , &answer ) == RS_SUCCESS )
 80077e8:	2358      	movs	r3, #88	; 0x58
 80077ea:	18fa      	adds	r2, r7, r3
 80077ec:	193b      	adds	r3, r7, r4
 80077ee:	0011      	movs	r1, r2
 80077f0:	0018      	movs	r0, r3
 80077f2:	f000 fe89 	bl	8008508 <astronode_transport_send_receive>
 80077f6:	0003      	movs	r3, r0
 80077f8:	2b01      	cmp	r3, #1
 80077fa:	d125      	bne.n	8007848 <astronode_send_pld_er+0x128>
    {
        if (answer.op_code == ASTRONODE_OP_CODE_PLD_EA)
 80077fc:	4b17      	ldr	r3, [pc, #92]	; (800785c <astronode_send_pld_er+0x13c>)
 80077fe:	199b      	adds	r3, r3, r6
 8007800:	19db      	adds	r3, r3, r7
 8007802:	781b      	ldrb	r3, [r3, #0]
 8007804:	2ba5      	cmp	r3, #165	; 0xa5
 8007806:	d10f      	bne.n	8007828 <astronode_send_pld_er+0x108>
        {
        	sprintf ( s , "astronode_application: payload %d queued." , payload_id ) ;
 8007808:	4b12      	ldr	r3, [pc, #72]	; (8007854 <astronode_send_pld_er+0x134>)
 800780a:	199b      	adds	r3, r3, r6
 800780c:	19db      	adds	r3, r3, r7
 800780e:	881a      	ldrh	r2, [r3, #0]
 8007810:	4913      	ldr	r1, [pc, #76]	; (8007860 <astronode_send_pld_er+0x140>)
 8007812:	2408      	movs	r4, #8
 8007814:	193b      	adds	r3, r7, r4
 8007816:	0018      	movs	r0, r3
 8007818:	f001 fcd6 	bl	80091c8 <sprintf>
            send_debug_logs ( s ) ;
 800781c:	193b      	adds	r3, r7, r4
 800781e:	0018      	movs	r0, r3
 8007820:	f7fb fbb6 	bl	8002f90 <send_debug_logs>
            return true ;
 8007824:	2301      	movs	r3, #1
 8007826:	e010      	b.n	800784a <astronode_send_pld_er+0x12a>
        }
        else
        {
            sprintf ( s , "astronode_application: payload %d not queued." , payload_id ) ;
 8007828:	4b0a      	ldr	r3, [pc, #40]	; (8007854 <astronode_send_pld_er+0x134>)
 800782a:	22f4      	movs	r2, #244	; 0xf4
 800782c:	0052      	lsls	r2, r2, #1
 800782e:	189b      	adds	r3, r3, r2
 8007830:	19db      	adds	r3, r3, r7
 8007832:	881a      	ldrh	r2, [r3, #0]
 8007834:	490b      	ldr	r1, [pc, #44]	; (8007864 <astronode_send_pld_er+0x144>)
 8007836:	2408      	movs	r4, #8
 8007838:	193b      	adds	r3, r7, r4
 800783a:	0018      	movs	r0, r3
 800783c:	f001 fcc4 	bl	80091c8 <sprintf>
            send_debug_logs ( s ) ;
 8007840:	193b      	adds	r3, r7, r4
 8007842:	0018      	movs	r0, r3
 8007844:	f7fb fba4 	bl	8002f90 <send_debug_logs>
        }
    }
    return false ;
 8007848:	2300      	movs	r3, #0
}
 800784a:	0018      	movs	r0, r3
 800784c:	46bd      	mov	sp, r7
 800784e:	b07b      	add	sp, #492	; 0x1ec
 8007850:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8007852:	46c0      	nop			; (mov r8, r8)
 8007854:	fffffe1e 	.word	0xfffffe1e
 8007858:	fffffe1c 	.word	0xfffffe1c
 800785c:	fffffe70 	.word	0xfffffe70
 8007860:	0800e61c 	.word	0x0800e61c
 8007864:	0800e648 	.word	0x0800e648

08007868 <astronode_send_pld_fr>:

void astronode_send_pld_fr(void)
{
 8007868:	b5b0      	push	{r4, r5, r7, lr}
 800786a:	b0e4      	sub	sp, #400	; 0x190
 800786c:	af00      	add	r7, sp, #0
    astronode_app_msg_t request = {0};
 800786e:	24c8      	movs	r4, #200	; 0xc8
 8007870:	193b      	adds	r3, r7, r4
 8007872:	0018      	movs	r0, r3
 8007874:	23c6      	movs	r3, #198	; 0xc6
 8007876:	001a      	movs	r2, r3
 8007878:	2100      	movs	r1, #0
 800787a:	f001 fd11 	bl	80092a0 <memset>
    astronode_app_msg_t answer = {0};
 800787e:	4b15      	ldr	r3, [pc, #84]	; (80078d4 <astronode_send_pld_fr+0x6c>)
 8007880:	25c8      	movs	r5, #200	; 0xc8
 8007882:	006d      	lsls	r5, r5, #1
 8007884:	195b      	adds	r3, r3, r5
 8007886:	19db      	adds	r3, r3, r7
 8007888:	0018      	movs	r0, r3
 800788a:	23c6      	movs	r3, #198	; 0xc6
 800788c:	001a      	movs	r2, r3
 800788e:	2100      	movs	r1, #0
 8007890:	f001 fd06 	bl	80092a0 <memset>

    request.op_code = ASTRONODE_OP_CODE_PLD_FR;
 8007894:	193b      	adds	r3, r7, r4
 8007896:	2227      	movs	r2, #39	; 0x27
 8007898:	701a      	strb	r2, [r3, #0]

    if (astronode_transport_send_receive(&request, &answer) == RS_SUCCESS)
 800789a:	003a      	movs	r2, r7
 800789c:	193b      	adds	r3, r7, r4
 800789e:	0011      	movs	r1, r2
 80078a0:	0018      	movs	r0, r3
 80078a2:	f000 fe31 	bl	8008508 <astronode_transport_send_receive>
 80078a6:	0003      	movs	r3, r0
 80078a8:	2b01      	cmp	r3, #1
 80078aa:	d10e      	bne.n	80078ca <astronode_send_pld_fr+0x62>
    {
        if (answer.op_code == ASTRONODE_OP_CODE_PLD_FA)
 80078ac:	4b09      	ldr	r3, [pc, #36]	; (80078d4 <astronode_send_pld_fr+0x6c>)
 80078ae:	195b      	adds	r3, r3, r5
 80078b0:	19db      	adds	r3, r3, r7
 80078b2:	781b      	ldrb	r3, [r3, #0]
 80078b4:	2ba7      	cmp	r3, #167	; 0xa7
 80078b6:	d104      	bne.n	80078c2 <astronode_send_pld_fr+0x5a>
        {
            send_debug_logs("astronode_application: payload queue has been cleared.");
 80078b8:	4b07      	ldr	r3, [pc, #28]	; (80078d8 <astronode_send_pld_fr+0x70>)
 80078ba:	0018      	movs	r0, r3
 80078bc:	f7fb fb68 	bl	8002f90 <send_debug_logs>
        else
        {
            send_debug_logs("astronode_application: Failed to clear the payload queue.");
        }
    }
}
 80078c0:	e003      	b.n	80078ca <astronode_send_pld_fr+0x62>
            send_debug_logs("astronode_application: Failed to clear the payload queue.");
 80078c2:	4b06      	ldr	r3, [pc, #24]	; (80078dc <astronode_send_pld_fr+0x74>)
 80078c4:	0018      	movs	r0, r3
 80078c6:	f7fb fb63 	bl	8002f90 <send_debug_logs>
}
 80078ca:	46c0      	nop			; (mov r8, r8)
 80078cc:	46bd      	mov	sp, r7
 80078ce:	b064      	add	sp, #400	; 0x190
 80078d0:	bdb0      	pop	{r4, r5, r7, pc}
 80078d2:	46c0      	nop			; (mov r8, r8)
 80078d4:	fffffe70 	.word	0xfffffe70
 80078d8:	0800e678 	.word	0x0800e678
 80078dc:	0800e6b0 	.word	0x0800e6b0

080078e0 <astronode_send_res_cr>:

void astronode_send_res_cr(void)
{
 80078e0:	b5b0      	push	{r4, r5, r7, lr}
 80078e2:	b0e4      	sub	sp, #400	; 0x190
 80078e4:	af00      	add	r7, sp, #0
    astronode_app_msg_t request = {0};
 80078e6:	24c8      	movs	r4, #200	; 0xc8
 80078e8:	193b      	adds	r3, r7, r4
 80078ea:	0018      	movs	r0, r3
 80078ec:	23c6      	movs	r3, #198	; 0xc6
 80078ee:	001a      	movs	r2, r3
 80078f0:	2100      	movs	r1, #0
 80078f2:	f001 fcd5 	bl	80092a0 <memset>
    astronode_app_msg_t answer = {0};
 80078f6:	4b16      	ldr	r3, [pc, #88]	; (8007950 <astronode_send_res_cr+0x70>)
 80078f8:	25c8      	movs	r5, #200	; 0xc8
 80078fa:	006d      	lsls	r5, r5, #1
 80078fc:	195b      	adds	r3, r3, r5
 80078fe:	19db      	adds	r3, r3, r7
 8007900:	0018      	movs	r0, r3
 8007902:	23c6      	movs	r3, #198	; 0xc6
 8007904:	001a      	movs	r2, r3
 8007906:	2100      	movs	r1, #0
 8007908:	f001 fcca 	bl	80092a0 <memset>

    request.op_code = ASTRONODE_OP_CODE_RES_CR;
 800790c:	193b      	adds	r3, r7, r4
 800790e:	2255      	movs	r2, #85	; 0x55
 8007910:	701a      	strb	r2, [r3, #0]

    if (astronode_transport_send_receive(&request, &answer) == RS_SUCCESS)
 8007912:	003a      	movs	r2, r7
 8007914:	193b      	adds	r3, r7, r4
 8007916:	0011      	movs	r1, r2
 8007918:	0018      	movs	r0, r3
 800791a:	f000 fdf5 	bl	8008508 <astronode_transport_send_receive>
 800791e:	0003      	movs	r3, r0
 8007920:	2b01      	cmp	r3, #1
 8007922:	d111      	bne.n	8007948 <astronode_send_res_cr+0x68>
    {
        if (answer.op_code == ASTRONODE_OP_CODE_RES_CA)
 8007924:	4b0a      	ldr	r3, [pc, #40]	; (8007950 <astronode_send_res_cr+0x70>)
 8007926:	195b      	adds	r3, r3, r5
 8007928:	19db      	adds	r3, r3, r7
 800792a:	781b      	ldrb	r3, [r3, #0]
 800792c:	2bd5      	cmp	r3, #213	; 0xd5
 800792e:	d107      	bne.n	8007940 <astronode_send_res_cr+0x60>
        {
            g_is_astronode_reset = false;
 8007930:	4b08      	ldr	r3, [pc, #32]	; (8007954 <astronode_send_res_cr+0x74>)
 8007932:	2200      	movs	r2, #0
 8007934:	701a      	strb	r2, [r3, #0]
            send_debug_logs("astronode_application: The reset has been cleared.");
 8007936:	4b08      	ldr	r3, [pc, #32]	; (8007958 <astronode_send_res_cr+0x78>)
 8007938:	0018      	movs	r0, r3
 800793a:	f7fb fb29 	bl	8002f90 <send_debug_logs>
        else
        {
            send_debug_logs("astronode_application: No reset to clear.");
        }
    }
}
 800793e:	e003      	b.n	8007948 <astronode_send_res_cr+0x68>
            send_debug_logs("astronode_application: No reset to clear.");
 8007940:	4b06      	ldr	r3, [pc, #24]	; (800795c <astronode_send_res_cr+0x7c>)
 8007942:	0018      	movs	r0, r3
 8007944:	f7fb fb24 	bl	8002f90 <send_debug_logs>
}
 8007948:	46c0      	nop			; (mov r8, r8)
 800794a:	46bd      	mov	sp, r7
 800794c:	b064      	add	sp, #400	; 0x190
 800794e:	bdb0      	pop	{r4, r5, r7, pc}
 8007950:	fffffe70 	.word	0xfffffe70
 8007954:	200009ed 	.word	0x200009ed
 8007958:	0800e6ec 	.word	0x0800e6ec
 800795c:	0800e720 	.word	0x0800e720

08007960 <astronode_send_rtc_rr>:

uint32_t astronode_send_rtc_rr ( void )
{
 8007960:	b5b0      	push	{r4, r5, r7, lr}
 8007962:	b0fa      	sub	sp, #488	; 0x1e8
 8007964:	af00      	add	r7, sp, #0
    astronode_app_msg_t request = {0} ;
 8007966:	258e      	movs	r5, #142	; 0x8e
 8007968:	006d      	lsls	r5, r5, #1
 800796a:	197b      	adds	r3, r7, r5
 800796c:	0018      	movs	r0, r3
 800796e:	23c6      	movs	r3, #198	; 0xc6
 8007970:	001a      	movs	r2, r3
 8007972:	2100      	movs	r1, #0
 8007974:	f001 fc94 	bl	80092a0 <memset>
    astronode_app_msg_t answer = {0} ;
 8007978:	4b28      	ldr	r3, [pc, #160]	; (8007a1c <astronode_send_rtc_rr+0xbc>)
 800797a:	24f4      	movs	r4, #244	; 0xf4
 800797c:	0064      	lsls	r4, r4, #1
 800797e:	191b      	adds	r3, r3, r4
 8007980:	19db      	adds	r3, r3, r7
 8007982:	0018      	movs	r0, r3
 8007984:	23c6      	movs	r3, #198	; 0xc6
 8007986:	001a      	movs	r2, r3
 8007988:	2100      	movs	r1, #0
 800798a:	f001 fc89 	bl	80092a0 <memset>

    request.op_code = ASTRONODE_OP_CODE_RTC_RR ;
 800798e:	197b      	adds	r3, r7, r5
 8007990:	2217      	movs	r2, #23
 8007992:	701a      	strb	r2, [r3, #0]

    if ( astronode_transport_send_receive ( &request , &answer ) == RS_SUCCESS )
 8007994:	2354      	movs	r3, #84	; 0x54
 8007996:	18fa      	adds	r2, r7, r3
 8007998:	197b      	adds	r3, r7, r5
 800799a:	0011      	movs	r1, r2
 800799c:	0018      	movs	r0, r3
 800799e:	f000 fdb3 	bl	8008508 <astronode_transport_send_receive>
 80079a2:	0003      	movs	r3, r0
 80079a4:	2b01      	cmp	r3, #1
 80079a6:	d133      	bne.n	8007a10 <astronode_send_rtc_rr+0xb0>
    {
        if ( answer.op_code == ASTRONODE_OP_CODE_RTC_RA )
 80079a8:	4b1c      	ldr	r3, [pc, #112]	; (8007a1c <astronode_send_rtc_rr+0xbc>)
 80079aa:	0021      	movs	r1, r4
 80079ac:	185b      	adds	r3, r3, r1
 80079ae:	19db      	adds	r3, r3, r7
 80079b0:	781b      	ldrb	r3, [r3, #0]
 80079b2:	2b97      	cmp	r3, #151	; 0x97
 80079b4:	d128      	bne.n	8007a08 <astronode_send_rtc_rr+0xa8>
        {
            uint32_t rtc_time = answer.p_payload[0]
 80079b6:	4b19      	ldr	r3, [pc, #100]	; (8007a1c <astronode_send_rtc_rr+0xbc>)
 80079b8:	185b      	adds	r3, r3, r1
 80079ba:	19db      	adds	r3, r3, r7
 80079bc:	785b      	ldrb	r3, [r3, #1]
 80079be:	001a      	movs	r2, r3
                                        + ( answer.p_payload[1] << 8 )
 80079c0:	4b16      	ldr	r3, [pc, #88]	; (8007a1c <astronode_send_rtc_rr+0xbc>)
 80079c2:	185b      	adds	r3, r3, r1
 80079c4:	19db      	adds	r3, r3, r7
 80079c6:	789b      	ldrb	r3, [r3, #2]
 80079c8:	021b      	lsls	r3, r3, #8
 80079ca:	18d2      	adds	r2, r2, r3
                                        + ( answer.p_payload[2] << 16 )
 80079cc:	4b13      	ldr	r3, [pc, #76]	; (8007a1c <astronode_send_rtc_rr+0xbc>)
 80079ce:	185b      	adds	r3, r3, r1
 80079d0:	19db      	adds	r3, r3, r7
 80079d2:	78db      	ldrb	r3, [r3, #3]
 80079d4:	041b      	lsls	r3, r3, #16
 80079d6:	18d2      	adds	r2, r2, r3
                                        + ( answer.p_payload[3] << 24 ) ;
 80079d8:	4b10      	ldr	r3, [pc, #64]	; (8007a1c <astronode_send_rtc_rr+0xbc>)
 80079da:	185b      	adds	r3, r3, r1
 80079dc:	19db      	adds	r3, r3, r7
 80079de:	791b      	ldrb	r3, [r3, #4]
 80079e0:	061b      	lsls	r3, r3, #24
 80079e2:	18d3      	adds	r3, r2, r3
            uint32_t rtc_time = answer.p_payload[0]
 80079e4:	24f2      	movs	r4, #242	; 0xf2
 80079e6:	0064      	lsls	r4, r4, #1
 80079e8:	193a      	adds	r2, r7, r4
 80079ea:	6013      	str	r3, [r2, #0]
            char str[ASTRONODE_UART_DEBUG_BUFFER_LENGTH] ;
            sprintf ( str , "RTC time since Astrocast Epoch (2018-01-01 00:00:00 UTC): %lds." , rtc_time ) ;
 80079ec:	193b      	adds	r3, r7, r4
 80079ee:	681a      	ldr	r2, [r3, #0]
 80079f0:	490b      	ldr	r1, [pc, #44]	; (8007a20 <astronode_send_rtc_rr+0xc0>)
 80079f2:	1d3b      	adds	r3, r7, #4
 80079f4:	0018      	movs	r0, r3
 80079f6:	f001 fbe7 	bl	80091c8 <sprintf>
            send_debug_logs ( str ) ;
 80079fa:	1d3b      	adds	r3, r7, #4
 80079fc:	0018      	movs	r0, r3
 80079fe:	f7fb fac7 	bl	8002f90 <send_debug_logs>
            return rtc_time ;
 8007a02:	193b      	adds	r3, r7, r4
 8007a04:	681b      	ldr	r3, [r3, #0]
 8007a06:	e004      	b.n	8007a12 <astronode_send_rtc_rr+0xb2>
        }
        else
        {
            send_debug_logs ( "Failed to read rtc time." ) ;
 8007a08:	4b06      	ldr	r3, [pc, #24]	; (8007a24 <astronode_send_rtc_rr+0xc4>)
 8007a0a:	0018      	movs	r0, r3
 8007a0c:	f7fb fac0 	bl	8002f90 <send_debug_logs>
        }
    }
    return 0 ;
 8007a10:	2300      	movs	r3, #0
}
 8007a12:	0018      	movs	r0, r3
 8007a14:	46bd      	mov	sp, r7
 8007a16:	b07a      	add	sp, #488	; 0x1e8
 8007a18:	bdb0      	pop	{r4, r5, r7, pc}
 8007a1a:	46c0      	nop			; (mov r8, r8)
 8007a1c:	fffffe6c 	.word	0xfffffe6c
 8007a20:	0800e74c 	.word	0x0800e74c
 8007a24:	0800e78c 	.word	0x0800e78c

08007a28 <astronode_send_sak_rr>:

void astronode_send_sak_rr(void)
{
 8007a28:	b5b0      	push	{r4, r5, r7, lr}
 8007a2a:	b0f8      	sub	sp, #480	; 0x1e0
 8007a2c:	af00      	add	r7, sp, #0
    astronode_app_msg_t request = {0};
 8007a2e:	258c      	movs	r5, #140	; 0x8c
 8007a30:	006d      	lsls	r5, r5, #1
 8007a32:	197b      	adds	r3, r7, r5
 8007a34:	0018      	movs	r0, r3
 8007a36:	23c6      	movs	r3, #198	; 0xc6
 8007a38:	001a      	movs	r2, r3
 8007a3a:	2100      	movs	r1, #0
 8007a3c:	f001 fc30 	bl	80092a0 <memset>
    astronode_app_msg_t answer = {0};
 8007a40:	4b21      	ldr	r3, [pc, #132]	; (8007ac8 <astronode_send_sak_rr+0xa0>)
 8007a42:	24f0      	movs	r4, #240	; 0xf0
 8007a44:	0064      	lsls	r4, r4, #1
 8007a46:	191b      	adds	r3, r3, r4
 8007a48:	19db      	adds	r3, r3, r7
 8007a4a:	0018      	movs	r0, r3
 8007a4c:	23c6      	movs	r3, #198	; 0xc6
 8007a4e:	001a      	movs	r2, r3
 8007a50:	2100      	movs	r1, #0
 8007a52:	f001 fc25 	bl	80092a0 <memset>

    request.op_code = ASTRONODE_OP_CODE_SAK_RR;
 8007a56:	197b      	adds	r3, r7, r5
 8007a58:	2245      	movs	r2, #69	; 0x45
 8007a5a:	701a      	strb	r2, [r3, #0]

    if (astronode_transport_send_receive(&request, &answer) == RS_SUCCESS)
 8007a5c:	2350      	movs	r3, #80	; 0x50
 8007a5e:	18fa      	adds	r2, r7, r3
 8007a60:	197b      	adds	r3, r7, r5
 8007a62:	0011      	movs	r1, r2
 8007a64:	0018      	movs	r0, r3
 8007a66:	f000 fd4f 	bl	8008508 <astronode_transport_send_receive>
 8007a6a:	0003      	movs	r3, r0
 8007a6c:	2b01      	cmp	r3, #1
 8007a6e:	d126      	bne.n	8007abe <astronode_send_sak_rr+0x96>
    {
        if (answer.op_code == ASTRONODE_OP_CODE_SAK_RA)
 8007a70:	4b15      	ldr	r3, [pc, #84]	; (8007ac8 <astronode_send_sak_rr+0xa0>)
 8007a72:	191b      	adds	r3, r3, r4
 8007a74:	19db      	adds	r3, r3, r7
 8007a76:	781b      	ldrb	r3, [r3, #0]
 8007a78:	2bc5      	cmp	r3, #197	; 0xc5
 8007a7a:	d11c      	bne.n	8007ab6 <astronode_send_sak_rr+0x8e>
        {
            uint16_t payload_id = answer.p_payload[0] + (answer.p_payload[1] << 8);
 8007a7c:	4b12      	ldr	r3, [pc, #72]	; (8007ac8 <astronode_send_sak_rr+0xa0>)
 8007a7e:	191b      	adds	r3, r3, r4
 8007a80:	19db      	adds	r3, r3, r7
 8007a82:	785b      	ldrb	r3, [r3, #1]
 8007a84:	b299      	uxth	r1, r3
 8007a86:	4b10      	ldr	r3, [pc, #64]	; (8007ac8 <astronode_send_sak_rr+0xa0>)
 8007a88:	191b      	adds	r3, r3, r4
 8007a8a:	19db      	adds	r3, r3, r7
 8007a8c:	789b      	ldrb	r3, [r3, #2]
 8007a8e:	b29b      	uxth	r3, r3
 8007a90:	021b      	lsls	r3, r3, #8
 8007a92:	b29a      	uxth	r2, r3
 8007a94:	20ef      	movs	r0, #239	; 0xef
 8007a96:	0040      	lsls	r0, r0, #1
 8007a98:	183b      	adds	r3, r7, r0
 8007a9a:	188a      	adds	r2, r1, r2
 8007a9c:	801a      	strh	r2, [r3, #0]
            char str[ASTRONODE_UART_DEBUG_BUFFER_LENGTH];
            sprintf(str, "Acknowledgment for payload %d is available.", payload_id);
 8007a9e:	183b      	adds	r3, r7, r0
 8007aa0:	881a      	ldrh	r2, [r3, #0]
 8007aa2:	490a      	ldr	r1, [pc, #40]	; (8007acc <astronode_send_sak_rr+0xa4>)
 8007aa4:	003b      	movs	r3, r7
 8007aa6:	0018      	movs	r0, r3
 8007aa8:	f001 fb8e 	bl	80091c8 <sprintf>
            send_debug_logs(str);
 8007aac:	003b      	movs	r3, r7
 8007aae:	0018      	movs	r0, r3
 8007ab0:	f7fb fa6e 	bl	8002f90 <send_debug_logs>
        else
        {
            send_debug_logs("astronode_application: No acknowledgment available.");
        }
    }
}
 8007ab4:	e003      	b.n	8007abe <astronode_send_sak_rr+0x96>
            send_debug_logs("astronode_application: No acknowledgment available.");
 8007ab6:	4b06      	ldr	r3, [pc, #24]	; (8007ad0 <astronode_send_sak_rr+0xa8>)
 8007ab8:	0018      	movs	r0, r3
 8007aba:	f7fb fa69 	bl	8002f90 <send_debug_logs>
}
 8007abe:	46c0      	nop			; (mov r8, r8)
 8007ac0:	46bd      	mov	sp, r7
 8007ac2:	b078      	add	sp, #480	; 0x1e0
 8007ac4:	bdb0      	pop	{r4, r5, r7, pc}
 8007ac6:	46c0      	nop			; (mov r8, r8)
 8007ac8:	fffffe70 	.word	0xfffffe70
 8007acc:	0800e7a8 	.word	0x0800e7a8
 8007ad0:	0800e7d4 	.word	0x0800e7d4

08007ad4 <astronode_send_sak_cr>:

void astronode_send_sak_cr(void)
{
 8007ad4:	b5b0      	push	{r4, r5, r7, lr}
 8007ad6:	b0e4      	sub	sp, #400	; 0x190
 8007ad8:	af00      	add	r7, sp, #0
    astronode_app_msg_t request = {0};
 8007ada:	24c8      	movs	r4, #200	; 0xc8
 8007adc:	193b      	adds	r3, r7, r4
 8007ade:	0018      	movs	r0, r3
 8007ae0:	23c6      	movs	r3, #198	; 0xc6
 8007ae2:	001a      	movs	r2, r3
 8007ae4:	2100      	movs	r1, #0
 8007ae6:	f001 fbdb 	bl	80092a0 <memset>
    astronode_app_msg_t answer = {0};
 8007aea:	4b16      	ldr	r3, [pc, #88]	; (8007b44 <astronode_send_sak_cr+0x70>)
 8007aec:	25c8      	movs	r5, #200	; 0xc8
 8007aee:	006d      	lsls	r5, r5, #1
 8007af0:	195b      	adds	r3, r3, r5
 8007af2:	19db      	adds	r3, r3, r7
 8007af4:	0018      	movs	r0, r3
 8007af6:	23c6      	movs	r3, #198	; 0xc6
 8007af8:	001a      	movs	r2, r3
 8007afa:	2100      	movs	r1, #0
 8007afc:	f001 fbd0 	bl	80092a0 <memset>

    request.op_code = ASTRONODE_OP_CODE_SAK_CR;
 8007b00:	193b      	adds	r3, r7, r4
 8007b02:	2246      	movs	r2, #70	; 0x46
 8007b04:	701a      	strb	r2, [r3, #0]

    if (astronode_transport_send_receive(&request, &answer) == RS_SUCCESS)
 8007b06:	003a      	movs	r2, r7
 8007b08:	193b      	adds	r3, r7, r4
 8007b0a:	0011      	movs	r1, r2
 8007b0c:	0018      	movs	r0, r3
 8007b0e:	f000 fcfb 	bl	8008508 <astronode_transport_send_receive>
 8007b12:	0003      	movs	r3, r0
 8007b14:	2b01      	cmp	r3, #1
 8007b16:	d111      	bne.n	8007b3c <astronode_send_sak_cr+0x68>
    {
        if (answer.op_code == ASTRONODE_OP_CODE_SAK_CA)
 8007b18:	4b0a      	ldr	r3, [pc, #40]	; (8007b44 <astronode_send_sak_cr+0x70>)
 8007b1a:	195b      	adds	r3, r3, r5
 8007b1c:	19db      	adds	r3, r3, r7
 8007b1e:	781b      	ldrb	r3, [r3, #0]
 8007b20:	2bc6      	cmp	r3, #198	; 0xc6
 8007b22:	d107      	bne.n	8007b34 <astronode_send_sak_cr+0x60>
        {
            g_is_sak_available = false;
 8007b24:	4b08      	ldr	r3, [pc, #32]	; (8007b48 <astronode_send_sak_cr+0x74>)
 8007b26:	2200      	movs	r2, #0
 8007b28:	701a      	strb	r2, [r3, #0]
            send_debug_logs("The acknowledgment has been cleared.");
 8007b2a:	4b08      	ldr	r3, [pc, #32]	; (8007b4c <astronode_send_sak_cr+0x78>)
 8007b2c:	0018      	movs	r0, r3
 8007b2e:	f7fb fa2f 	bl	8002f90 <send_debug_logs>
        else
        {
            send_debug_logs("No acknowledgment available.");
        }
    }
}
 8007b32:	e003      	b.n	8007b3c <astronode_send_sak_cr+0x68>
            send_debug_logs("No acknowledgment available.");
 8007b34:	4b06      	ldr	r3, [pc, #24]	; (8007b50 <astronode_send_sak_cr+0x7c>)
 8007b36:	0018      	movs	r0, r3
 8007b38:	f7fb fa2a 	bl	8002f90 <send_debug_logs>
}
 8007b3c:	46c0      	nop			; (mov r8, r8)
 8007b3e:	46bd      	mov	sp, r7
 8007b40:	b064      	add	sp, #400	; 0x190
 8007b42:	bdb0      	pop	{r4, r5, r7, pc}
 8007b44:	fffffe70 	.word	0xfffffe70
 8007b48:	200009ec 	.word	0x200009ec
 8007b4c:	0800e808 	.word	0x0800e808
 8007b50:	0800e830 	.word	0x0800e830

08007b54 <astronode_send_mpn_rr>:
        }
    }
}

void astronode_send_mpn_rr(void)
{
 8007b54:	b5f0      	push	{r4, r5, r6, r7, lr}
 8007b56:	b0ed      	sub	sp, #436	; 0x1b4
 8007b58:	af00      	add	r7, sp, #0
    astronode_app_msg_t request = {0};
 8007b5a:	21c8      	movs	r1, #200	; 0xc8
 8007b5c:	2318      	movs	r3, #24
 8007b5e:	18cb      	adds	r3, r1, r3
 8007b60:	19db      	adds	r3, r3, r7
 8007b62:	0018      	movs	r0, r3
 8007b64:	23c6      	movs	r3, #198	; 0xc6
 8007b66:	001a      	movs	r2, r3
 8007b68:	2100      	movs	r1, #0
 8007b6a:	f001 fb99 	bl	80092a0 <memset>
    astronode_app_msg_t answer = {0};
 8007b6e:	4b4a      	ldr	r3, [pc, #296]	; (8007c98 <astronode_send_mpn_rr+0x144>)
 8007b70:	26cc      	movs	r6, #204	; 0xcc
 8007b72:	0076      	lsls	r6, r6, #1
 8007b74:	199b      	adds	r3, r3, r6
 8007b76:	2218      	movs	r2, #24
 8007b78:	4694      	mov	ip, r2
 8007b7a:	44bc      	add	ip, r7
 8007b7c:	4463      	add	r3, ip
 8007b7e:	0018      	movs	r0, r3
 8007b80:	23c6      	movs	r3, #198	; 0xc6
 8007b82:	001a      	movs	r2, r3
 8007b84:	2100      	movs	r1, #0
 8007b86:	f001 fb8b 	bl	80092a0 <memset>

    request.op_code = ASTRONODE_OP_CODE_MPN_RR;
 8007b8a:	21c8      	movs	r1, #200	; 0xc8
 8007b8c:	2318      	movs	r3, #24
 8007b8e:	18cb      	adds	r3, r1, r3
 8007b90:	19db      	adds	r3, r3, r7
 8007b92:	221b      	movs	r2, #27
 8007b94:	701a      	strb	r2, [r3, #0]

    if (astronode_transport_send_receive(&request, &answer) == RS_SUCCESS)
 8007b96:	2318      	movs	r3, #24
 8007b98:	18fa      	adds	r2, r7, r3
 8007b9a:	2318      	movs	r3, #24
 8007b9c:	18cb      	adds	r3, r1, r3
 8007b9e:	19db      	adds	r3, r3, r7
 8007ba0:	0011      	movs	r1, r2
 8007ba2:	0018      	movs	r0, r3
 8007ba4:	f000 fcb0 	bl	8008508 <astronode_transport_send_receive>
 8007ba8:	0003      	movs	r3, r0
 8007baa:	2b01      	cmp	r3, #1
 8007bac:	d16f      	bne.n	8007c8e <astronode_send_mpn_rr+0x13a>
    {
        if (answer.op_code == ASTRONODE_OP_CODE_MPN_RA)
 8007bae:	4b3a      	ldr	r3, [pc, #232]	; (8007c98 <astronode_send_mpn_rr+0x144>)
 8007bb0:	0032      	movs	r2, r6
 8007bb2:	189b      	adds	r3, r3, r2
 8007bb4:	2118      	movs	r1, #24
 8007bb6:	468c      	mov	ip, r1
 8007bb8:	44bc      	add	ip, r7
 8007bba:	4463      	add	r3, ip
 8007bbc:	781b      	ldrb	r3, [r3, #0]
 8007bbe:	2b9b      	cmp	r3, #155	; 0x9b
 8007bc0:	d161      	bne.n	8007c86 <astronode_send_mpn_rr+0x132>
        {
 8007bc2:	466b      	mov	r3, sp
 8007bc4:	001e      	movs	r6, r3
            char product_number[answer.payload_len];
 8007bc6:	4b34      	ldr	r3, [pc, #208]	; (8007c98 <astronode_send_mpn_rr+0x144>)
 8007bc8:	189b      	adds	r3, r3, r2
 8007bca:	2218      	movs	r2, #24
 8007bcc:	4694      	mov	ip, r2
 8007bce:	44bc      	add	ip, r7
 8007bd0:	4463      	add	r3, ip
 8007bd2:	22c4      	movs	r2, #196	; 0xc4
 8007bd4:	5a9b      	ldrh	r3, [r3, r2]
 8007bd6:	001a      	movs	r2, r3
 8007bd8:	3a01      	subs	r2, #1
 8007bda:	21ca      	movs	r1, #202	; 0xca
 8007bdc:	0049      	lsls	r1, r1, #1
 8007bde:	2018      	movs	r0, #24
 8007be0:	1809      	adds	r1, r1, r0
 8007be2:	19c9      	adds	r1, r1, r7
 8007be4:	600a      	str	r2, [r1, #0]
 8007be6:	001c      	movs	r4, r3
 8007be8:	2200      	movs	r2, #0
 8007bea:	0015      	movs	r5, r2
 8007bec:	0020      	movs	r0, r4
 8007bee:	0029      	movs	r1, r5
 8007bf0:	0004      	movs	r4, r0
 8007bf2:	0f62      	lsrs	r2, r4, #29
 8007bf4:	000c      	movs	r4, r1
 8007bf6:	00e4      	lsls	r4, r4, #3
 8007bf8:	617c      	str	r4, [r7, #20]
 8007bfa:	697c      	ldr	r4, [r7, #20]
 8007bfc:	4314      	orrs	r4, r2
 8007bfe:	617c      	str	r4, [r7, #20]
 8007c00:	0001      	movs	r1, r0
 8007c02:	00c9      	lsls	r1, r1, #3
 8007c04:	6139      	str	r1, [r7, #16]
 8007c06:	603b      	str	r3, [r7, #0]
 8007c08:	2200      	movs	r2, #0
 8007c0a:	607a      	str	r2, [r7, #4]
 8007c0c:	6838      	ldr	r0, [r7, #0]
 8007c0e:	6879      	ldr	r1, [r7, #4]
 8007c10:	0004      	movs	r4, r0
 8007c12:	0f62      	lsrs	r2, r4, #29
 8007c14:	000c      	movs	r4, r1
 8007c16:	00e4      	lsls	r4, r4, #3
 8007c18:	60fc      	str	r4, [r7, #12]
 8007c1a:	68fc      	ldr	r4, [r7, #12]
 8007c1c:	4314      	orrs	r4, r2
 8007c1e:	60fc      	str	r4, [r7, #12]
 8007c20:	0001      	movs	r1, r0
 8007c22:	00ca      	lsls	r2, r1, #3
 8007c24:	60ba      	str	r2, [r7, #8]
 8007c26:	3307      	adds	r3, #7
 8007c28:	08db      	lsrs	r3, r3, #3
 8007c2a:	00db      	lsls	r3, r3, #3
 8007c2c:	4669      	mov	r1, sp
 8007c2e:	1acb      	subs	r3, r1, r3
 8007c30:	469d      	mov	sp, r3
 8007c32:	466b      	mov	r3, sp
 8007c34:	3300      	adds	r3, #0
 8007c36:	24c8      	movs	r4, #200	; 0xc8
 8007c38:	0064      	lsls	r4, r4, #1
 8007c3a:	2218      	movs	r2, #24
 8007c3c:	18a2      	adds	r2, r4, r2
 8007c3e:	19d1      	adds	r1, r2, r7
 8007c40:	600b      	str	r3, [r1, #0]
            send_debug_logs("Module's product number is:");
 8007c42:	4b16      	ldr	r3, [pc, #88]	; (8007c9c <astronode_send_mpn_rr+0x148>)
 8007c44:	0018      	movs	r0, r3
 8007c46:	f7fb f9a3 	bl	8002f90 <send_debug_logs>
            snprintf(product_number, answer.payload_len, "%s", answer.p_payload);
 8007c4a:	4b13      	ldr	r3, [pc, #76]	; (8007c98 <astronode_send_mpn_rr+0x144>)
 8007c4c:	22cc      	movs	r2, #204	; 0xcc
 8007c4e:	0052      	lsls	r2, r2, #1
 8007c50:	189b      	adds	r3, r3, r2
 8007c52:	2218      	movs	r2, #24
 8007c54:	4694      	mov	ip, r2
 8007c56:	44bc      	add	ip, r7
 8007c58:	4463      	add	r3, ip
 8007c5a:	22c4      	movs	r2, #196	; 0xc4
 8007c5c:	5a9b      	ldrh	r3, [r3, r2]
 8007c5e:	0019      	movs	r1, r3
 8007c60:	2318      	movs	r3, #24
 8007c62:	18fb      	adds	r3, r7, r3
 8007c64:	3301      	adds	r3, #1
 8007c66:	4a0e      	ldr	r2, [pc, #56]	; (8007ca0 <astronode_send_mpn_rr+0x14c>)
 8007c68:	2018      	movs	r0, #24
 8007c6a:	1820      	adds	r0, r4, r0
 8007c6c:	19c0      	adds	r0, r0, r7
 8007c6e:	6800      	ldr	r0, [r0, #0]
 8007c70:	f001 fa76 	bl	8009160 <snprintf>
            send_debug_logs(product_number);
 8007c74:	2318      	movs	r3, #24
 8007c76:	18e3      	adds	r3, r4, r3
 8007c78:	19db      	adds	r3, r3, r7
 8007c7a:	681b      	ldr	r3, [r3, #0]
 8007c7c:	0018      	movs	r0, r3
 8007c7e:	f7fb f987 	bl	8002f90 <send_debug_logs>
 8007c82:	46b5      	mov	sp, r6
        else
        {
            send_debug_logs("Failed to read module Serial Number.");
        }
    }
}
 8007c84:	e003      	b.n	8007c8e <astronode_send_mpn_rr+0x13a>
            send_debug_logs("Failed to read module Serial Number.");
 8007c86:	4b07      	ldr	r3, [pc, #28]	; (8007ca4 <astronode_send_mpn_rr+0x150>)
 8007c88:	0018      	movs	r0, r3
 8007c8a:	f7fb f981 	bl	8002f90 <send_debug_logs>
}
 8007c8e:	46c0      	nop			; (mov r8, r8)
 8007c90:	46bd      	mov	sp, r7
 8007c92:	b06d      	add	sp, #436	; 0x1b4
 8007c94:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8007c96:	46c0      	nop			; (mov r8, r8)
 8007c98:	fffffe68 	.word	0xfffffe68
 8007c9c:	0800e8f8 	.word	0x0800e8f8
 8007ca0:	0800e430 	.word	0x0800e430
 8007ca4:	0800e46c 	.word	0x0800e46c

08007ca8 <astronode_send_cmd_cr>:
        }
    }
}

void astronode_send_cmd_cr(void)
{
 8007ca8:	b5b0      	push	{r4, r5, r7, lr}
 8007caa:	b0e4      	sub	sp, #400	; 0x190
 8007cac:	af00      	add	r7, sp, #0
    astronode_app_msg_t request = {0};
 8007cae:	24c8      	movs	r4, #200	; 0xc8
 8007cb0:	193b      	adds	r3, r7, r4
 8007cb2:	0018      	movs	r0, r3
 8007cb4:	23c6      	movs	r3, #198	; 0xc6
 8007cb6:	001a      	movs	r2, r3
 8007cb8:	2100      	movs	r1, #0
 8007cba:	f001 faf1 	bl	80092a0 <memset>
    astronode_app_msg_t answer = {0};
 8007cbe:	4b16      	ldr	r3, [pc, #88]	; (8007d18 <astronode_send_cmd_cr+0x70>)
 8007cc0:	25c8      	movs	r5, #200	; 0xc8
 8007cc2:	006d      	lsls	r5, r5, #1
 8007cc4:	195b      	adds	r3, r3, r5
 8007cc6:	19db      	adds	r3, r3, r7
 8007cc8:	0018      	movs	r0, r3
 8007cca:	23c6      	movs	r3, #198	; 0xc6
 8007ccc:	001a      	movs	r2, r3
 8007cce:	2100      	movs	r1, #0
 8007cd0:	f001 fae6 	bl	80092a0 <memset>

    request.op_code = ASTRONODE_OP_CODE_CMD_CR;
 8007cd4:	193b      	adds	r3, r7, r4
 8007cd6:	2248      	movs	r2, #72	; 0x48
 8007cd8:	701a      	strb	r2, [r3, #0]

    if (astronode_transport_send_receive(&request, &answer) == RS_SUCCESS)
 8007cda:	003a      	movs	r2, r7
 8007cdc:	193b      	adds	r3, r7, r4
 8007cde:	0011      	movs	r1, r2
 8007ce0:	0018      	movs	r0, r3
 8007ce2:	f000 fc11 	bl	8008508 <astronode_transport_send_receive>
 8007ce6:	0003      	movs	r3, r0
 8007ce8:	2b01      	cmp	r3, #1
 8007cea:	d111      	bne.n	8007d10 <astronode_send_cmd_cr+0x68>
    {
        if (answer.op_code == ASTRONODE_OP_CODE_CMD_CA)
 8007cec:	4b0a      	ldr	r3, [pc, #40]	; (8007d18 <astronode_send_cmd_cr+0x70>)
 8007cee:	195b      	adds	r3, r3, r5
 8007cf0:	19db      	adds	r3, r3, r7
 8007cf2:	781b      	ldrb	r3, [r3, #0]
 8007cf4:	2bc8      	cmp	r3, #200	; 0xc8
 8007cf6:	d107      	bne.n	8007d08 <astronode_send_cmd_cr+0x60>
        {
            g_is_command_available = false;
 8007cf8:	4b08      	ldr	r3, [pc, #32]	; (8007d1c <astronode_send_cmd_cr+0x74>)
 8007cfa:	2200      	movs	r2, #0
 8007cfc:	701a      	strb	r2, [r3, #0]
            send_debug_logs("The command ack has been cleared.");
 8007cfe:	4b08      	ldr	r3, [pc, #32]	; (8007d20 <astronode_send_cmd_cr+0x78>)
 8007d00:	0018      	movs	r0, r3
 8007d02:	f7fb f945 	bl	8002f90 <send_debug_logs>
        else
        {
            send_debug_logs("No command to clear.");
        }
    }
}
 8007d06:	e003      	b.n	8007d10 <astronode_send_cmd_cr+0x68>
            send_debug_logs("No command to clear.");
 8007d08:	4b06      	ldr	r3, [pc, #24]	; (8007d24 <astronode_send_cmd_cr+0x7c>)
 8007d0a:	0018      	movs	r0, r3
 8007d0c:	f7fb f940 	bl	8002f90 <send_debug_logs>
}
 8007d10:	46c0      	nop			; (mov r8, r8)
 8007d12:	46bd      	mov	sp, r7
 8007d14:	b064      	add	sp, #400	; 0x190
 8007d16:	bdb0      	pop	{r4, r5, r7, pc}
 8007d18:	fffffe70 	.word	0xfffffe70
 8007d1c:	200009ee 	.word	0x200009ee
 8007d20:	0800ed48 	.word	0x0800ed48
 8007d24:	0800ed6c 	.word	0x0800ed6c

08007d28 <astronode_send_cmd_rr>:

void astronode_send_cmd_rr(void)
{
 8007d28:	b5f0      	push	{r4, r5, r6, r7, lr}
 8007d2a:	4cac      	ldr	r4, [pc, #688]	; (8007fdc <astronode_send_cmd_rr+0x2b4>)
 8007d2c:	44a5      	add	sp, r4
 8007d2e:	af00      	add	r7, sp, #0
    astronode_app_msg_t request = {0};
 8007d30:	218c      	movs	r1, #140	; 0x8c
 8007d32:	0049      	lsls	r1, r1, #1
 8007d34:	2318      	movs	r3, #24
 8007d36:	18cb      	adds	r3, r1, r3
 8007d38:	19db      	adds	r3, r3, r7
 8007d3a:	0018      	movs	r0, r3
 8007d3c:	23c6      	movs	r3, #198	; 0xc6
 8007d3e:	001a      	movs	r2, r3
 8007d40:	2100      	movs	r1, #0
 8007d42:	f001 faad 	bl	80092a0 <memset>
    astronode_app_msg_t answer = {0};
 8007d46:	4ba6      	ldr	r3, [pc, #664]	; (8007fe0 <astronode_send_cmd_rr+0x2b8>)
 8007d48:	26f8      	movs	r6, #248	; 0xf8
 8007d4a:	0076      	lsls	r6, r6, #1
 8007d4c:	199b      	adds	r3, r3, r6
 8007d4e:	2218      	movs	r2, #24
 8007d50:	4694      	mov	ip, r2
 8007d52:	44bc      	add	ip, r7
 8007d54:	4463      	add	r3, ip
 8007d56:	0018      	movs	r0, r3
 8007d58:	23c6      	movs	r3, #198	; 0xc6
 8007d5a:	001a      	movs	r2, r3
 8007d5c:	2100      	movs	r1, #0
 8007d5e:	f001 fa9f 	bl	80092a0 <memset>

    request.op_code = ASTRONODE_OP_CODE_CMD_RR;
 8007d62:	218c      	movs	r1, #140	; 0x8c
 8007d64:	0049      	lsls	r1, r1, #1
 8007d66:	2318      	movs	r3, #24
 8007d68:	18cb      	adds	r3, r1, r3
 8007d6a:	19db      	adds	r3, r3, r7
 8007d6c:	2247      	movs	r2, #71	; 0x47
 8007d6e:	701a      	strb	r2, [r3, #0]

    if (astronode_transport_send_receive(&request, &answer) == RS_SUCCESS)
 8007d70:	2350      	movs	r3, #80	; 0x50
 8007d72:	2218      	movs	r2, #24
 8007d74:	189b      	adds	r3, r3, r2
 8007d76:	19da      	adds	r2, r3, r7
 8007d78:	2318      	movs	r3, #24
 8007d7a:	18cb      	adds	r3, r1, r3
 8007d7c:	19db      	adds	r3, r3, r7
 8007d7e:	0011      	movs	r1, r2
 8007d80:	0018      	movs	r0, r3
 8007d82:	f000 fbc1 	bl	8008508 <astronode_transport_send_receive>
 8007d86:	0003      	movs	r3, r0
 8007d88:	2b01      	cmp	r3, #1
 8007d8a:	d000      	beq.n	8007d8e <astronode_send_cmd_rr+0x66>
 8007d8c:	e121      	b.n	8007fd2 <astronode_send_cmd_rr+0x2aa>
    {
        if (answer.op_code == ASTRONODE_OP_CODE_CMD_RA)
 8007d8e:	4b94      	ldr	r3, [pc, #592]	; (8007fe0 <astronode_send_cmd_rr+0x2b8>)
 8007d90:	199b      	adds	r3, r3, r6
 8007d92:	2218      	movs	r2, #24
 8007d94:	4694      	mov	ip, r2
 8007d96:	44bc      	add	ip, r7
 8007d98:	4463      	add	r3, ip
 8007d9a:	781b      	ldrb	r3, [r3, #0]
 8007d9c:	2bc7      	cmp	r3, #199	; 0xc7
 8007d9e:	d000      	beq.n	8007da2 <astronode_send_cmd_rr+0x7a>
 8007da0:	e113      	b.n	8007fca <astronode_send_cmd_rr+0x2a2>
        {
 8007da2:	466b      	mov	r3, sp
 8007da4:	001e      	movs	r6, r3
            send_debug_logs("Received downlink command");
 8007da6:	4b8f      	ldr	r3, [pc, #572]	; (8007fe4 <astronode_send_cmd_rr+0x2bc>)
 8007da8:	0018      	movs	r0, r3
 8007daa:	f7fb f8f1 	bl	8002f90 <send_debug_logs>
            uint32_t rtc_time = answer.p_payload[0]
 8007dae:	4b8c      	ldr	r3, [pc, #560]	; (8007fe0 <astronode_send_cmd_rr+0x2b8>)
 8007db0:	21f8      	movs	r1, #248	; 0xf8
 8007db2:	0049      	lsls	r1, r1, #1
 8007db4:	185b      	adds	r3, r3, r1
 8007db6:	2218      	movs	r2, #24
 8007db8:	4694      	mov	ip, r2
 8007dba:	44bc      	add	ip, r7
 8007dbc:	4463      	add	r3, ip
 8007dbe:	785b      	ldrb	r3, [r3, #1]
 8007dc0:	001a      	movs	r2, r3
                                + (answer.p_payload[1] << 8)
 8007dc2:	4b87      	ldr	r3, [pc, #540]	; (8007fe0 <astronode_send_cmd_rr+0x2b8>)
 8007dc4:	185b      	adds	r3, r3, r1
 8007dc6:	2018      	movs	r0, #24
 8007dc8:	4684      	mov	ip, r0
 8007dca:	44bc      	add	ip, r7
 8007dcc:	4463      	add	r3, ip
 8007dce:	789b      	ldrb	r3, [r3, #2]
 8007dd0:	021b      	lsls	r3, r3, #8
 8007dd2:	18d2      	adds	r2, r2, r3
                                + (answer.p_payload[2] << 16)
 8007dd4:	4b82      	ldr	r3, [pc, #520]	; (8007fe0 <astronode_send_cmd_rr+0x2b8>)
 8007dd6:	185b      	adds	r3, r3, r1
 8007dd8:	2018      	movs	r0, #24
 8007dda:	4684      	mov	ip, r0
 8007ddc:	44bc      	add	ip, r7
 8007dde:	4463      	add	r3, ip
 8007de0:	78db      	ldrb	r3, [r3, #3]
 8007de2:	041b      	lsls	r3, r3, #16
 8007de4:	18d2      	adds	r2, r2, r3
                                + (answer.p_payload[3] << 24);
 8007de6:	4b7e      	ldr	r3, [pc, #504]	; (8007fe0 <astronode_send_cmd_rr+0x2b8>)
 8007de8:	185b      	adds	r3, r3, r1
 8007dea:	2118      	movs	r1, #24
 8007dec:	468c      	mov	ip, r1
 8007dee:	44bc      	add	ip, r7
 8007df0:	4463      	add	r3, ip
 8007df2:	791b      	ldrb	r3, [r3, #4]
 8007df4:	061b      	lsls	r3, r3, #24
 8007df6:	18d3      	adds	r3, r2, r3
            uint32_t rtc_time = answer.p_payload[0]
 8007df8:	22f4      	movs	r2, #244	; 0xf4
 8007dfa:	0052      	lsls	r2, r2, #1
 8007dfc:	2118      	movs	r1, #24
 8007dfe:	1851      	adds	r1, r2, r1
 8007e00:	19c8      	adds	r0, r1, r7
 8007e02:	6003      	str	r3, [r0, #0]
            char str[ASTRONODE_UART_DEBUG_BUFFER_LENGTH];
            sprintf(str, "Command created date, Ref is astrocast Epoch (2018-01-01 00:00:00 UTC): %lds.", rtc_time);
 8007e04:	2318      	movs	r3, #24
 8007e06:	18d3      	adds	r3, r2, r3
 8007e08:	19db      	adds	r3, r3, r7
 8007e0a:	681a      	ldr	r2, [r3, #0]
 8007e0c:	4976      	ldr	r1, [pc, #472]	; (8007fe8 <astronode_send_cmd_rr+0x2c0>)
 8007e0e:	2318      	movs	r3, #24
 8007e10:	18fb      	adds	r3, r7, r3
 8007e12:	0018      	movs	r0, r3
 8007e14:	f001 f9d8 	bl	80091c8 <sprintf>
            send_debug_logs(str);
 8007e18:	2318      	movs	r3, #24
 8007e1a:	18fb      	adds	r3, r7, r3
 8007e1c:	0018      	movs	r0, r3
 8007e1e:	f7fb f8b7 	bl	8002f90 <send_debug_logs>

            if (((answer.payload_len - 4) != 40) && ((answer.payload_len - 4) != 8))
 8007e22:	4b6f      	ldr	r3, [pc, #444]	; (8007fe0 <astronode_send_cmd_rr+0x2b8>)
 8007e24:	21f8      	movs	r1, #248	; 0xf8
 8007e26:	0049      	lsls	r1, r1, #1
 8007e28:	185b      	adds	r3, r3, r1
 8007e2a:	2218      	movs	r2, #24
 8007e2c:	4694      	mov	ip, r2
 8007e2e:	44bc      	add	ip, r7
 8007e30:	4463      	add	r3, ip
 8007e32:	22c4      	movs	r2, #196	; 0xc4
 8007e34:	5a9b      	ldrh	r3, [r3, r2]
 8007e36:	2b2c      	cmp	r3, #44	; 0x2c
 8007e38:	d00e      	beq.n	8007e58 <astronode_send_cmd_rr+0x130>
 8007e3a:	4b69      	ldr	r3, [pc, #420]	; (8007fe0 <astronode_send_cmd_rr+0x2b8>)
 8007e3c:	185b      	adds	r3, r3, r1
 8007e3e:	2218      	movs	r2, #24
 8007e40:	4694      	mov	ip, r2
 8007e42:	44bc      	add	ip, r7
 8007e44:	4463      	add	r3, ip
 8007e46:	22c4      	movs	r2, #196	; 0xc4
 8007e48:	5a9b      	ldrh	r3, [r3, r2]
 8007e4a:	2b0c      	cmp	r3, #12
 8007e4c:	d004      	beq.n	8007e58 <astronode_send_cmd_rr+0x130>
            {
                send_debug_logs("Command size error");
 8007e4e:	4b67      	ldr	r3, [pc, #412]	; (8007fec <astronode_send_cmd_rr+0x2c4>)
 8007e50:	0018      	movs	r0, r3
 8007e52:	f7fb f89d 	bl	8002f90 <send_debug_logs>
                return;
 8007e56:	e0b6      	b.n	8007fc6 <astronode_send_cmd_rr+0x29e>
            }

            char command_content[answer.payload_len];
 8007e58:	4b61      	ldr	r3, [pc, #388]	; (8007fe0 <astronode_send_cmd_rr+0x2b8>)
 8007e5a:	22f8      	movs	r2, #248	; 0xf8
 8007e5c:	0052      	lsls	r2, r2, #1
 8007e5e:	189b      	adds	r3, r3, r2
 8007e60:	2218      	movs	r2, #24
 8007e62:	4694      	mov	ip, r2
 8007e64:	44bc      	add	ip, r7
 8007e66:	4463      	add	r3, ip
 8007e68:	22c4      	movs	r2, #196	; 0xc4
 8007e6a:	5a9b      	ldrh	r3, [r3, r2]
 8007e6c:	001a      	movs	r2, r3
 8007e6e:	3a01      	subs	r2, #1
 8007e70:	21f2      	movs	r1, #242	; 0xf2
 8007e72:	0049      	lsls	r1, r1, #1
 8007e74:	2018      	movs	r0, #24
 8007e76:	1809      	adds	r1, r1, r0
 8007e78:	19c9      	adds	r1, r1, r7
 8007e7a:	600a      	str	r2, [r1, #0]
 8007e7c:	001c      	movs	r4, r3
 8007e7e:	2200      	movs	r2, #0
 8007e80:	0015      	movs	r5, r2
 8007e82:	0020      	movs	r0, r4
 8007e84:	0029      	movs	r1, r5
 8007e86:	0004      	movs	r4, r0
 8007e88:	0f62      	lsrs	r2, r4, #29
 8007e8a:	000c      	movs	r4, r1
 8007e8c:	00e4      	lsls	r4, r4, #3
 8007e8e:	617c      	str	r4, [r7, #20]
 8007e90:	697c      	ldr	r4, [r7, #20]
 8007e92:	4314      	orrs	r4, r2
 8007e94:	617c      	str	r4, [r7, #20]
 8007e96:	0001      	movs	r1, r0
 8007e98:	00c9      	lsls	r1, r1, #3
 8007e9a:	6139      	str	r1, [r7, #16]
 8007e9c:	603b      	str	r3, [r7, #0]
 8007e9e:	2200      	movs	r2, #0
 8007ea0:	607a      	str	r2, [r7, #4]
 8007ea2:	6838      	ldr	r0, [r7, #0]
 8007ea4:	6879      	ldr	r1, [r7, #4]
 8007ea6:	0004      	movs	r4, r0
 8007ea8:	0f62      	lsrs	r2, r4, #29
 8007eaa:	000c      	movs	r4, r1
 8007eac:	00e4      	lsls	r4, r4, #3
 8007eae:	60fc      	str	r4, [r7, #12]
 8007eb0:	68fc      	ldr	r4, [r7, #12]
 8007eb2:	4314      	orrs	r4, r2
 8007eb4:	60fc      	str	r4, [r7, #12]
 8007eb6:	0001      	movs	r1, r0
 8007eb8:	00ca      	lsls	r2, r1, #3
 8007eba:	60ba      	str	r2, [r7, #8]
 8007ebc:	3307      	adds	r3, #7
 8007ebe:	08db      	lsrs	r3, r3, #3
 8007ec0:	00db      	lsls	r3, r3, #3
 8007ec2:	4669      	mov	r1, sp
 8007ec4:	1acb      	subs	r3, r1, r3
 8007ec6:	469d      	mov	sp, r3
 8007ec8:	466b      	mov	r3, sp
 8007eca:	3300      	adds	r3, #0
 8007ecc:	20f0      	movs	r0, #240	; 0xf0
 8007ece:	0040      	lsls	r0, r0, #1
 8007ed0:	2218      	movs	r2, #24
 8007ed2:	1882      	adds	r2, r0, r2
 8007ed4:	19d1      	adds	r1, r2, r7
 8007ed6:	600b      	str	r3, [r1, #0]
            uint16_t command_content_size = snprintf(command_content, (answer.payload_len - 4) + 1, "%s", &answer.p_payload[4]);
 8007ed8:	4b41      	ldr	r3, [pc, #260]	; (8007fe0 <astronode_send_cmd_rr+0x2b8>)
 8007eda:	22f8      	movs	r2, #248	; 0xf8
 8007edc:	0052      	lsls	r2, r2, #1
 8007ede:	189b      	adds	r3, r3, r2
 8007ee0:	2218      	movs	r2, #24
 8007ee2:	4694      	mov	ip, r2
 8007ee4:	44bc      	add	ip, r7
 8007ee6:	4463      	add	r3, ip
 8007ee8:	22c4      	movs	r2, #196	; 0xc4
 8007eea:	5a9b      	ldrh	r3, [r3, r2]
 8007eec:	3b03      	subs	r3, #3
 8007eee:	0019      	movs	r1, r3
 8007ef0:	2350      	movs	r3, #80	; 0x50
 8007ef2:	2218      	movs	r2, #24
 8007ef4:	189b      	adds	r3, r3, r2
 8007ef6:	19db      	adds	r3, r3, r7
 8007ef8:	3305      	adds	r3, #5
 8007efa:	4a3d      	ldr	r2, [pc, #244]	; (8007ff0 <astronode_send_cmd_rr+0x2c8>)
 8007efc:	2418      	movs	r4, #24
 8007efe:	1900      	adds	r0, r0, r4
 8007f00:	19c0      	adds	r0, r0, r7
 8007f02:	6800      	ldr	r0, [r0, #0]
 8007f04:	f001 f92c 	bl	8009160 <snprintf>
 8007f08:	0002      	movs	r2, r0
 8007f0a:	23ef      	movs	r3, #239	; 0xef
 8007f0c:	005b      	lsls	r3, r3, #1
 8007f0e:	2118      	movs	r1, #24
 8007f10:	185b      	adds	r3, r3, r1
 8007f12:	19db      	adds	r3, r3, r7
 8007f14:	801a      	strh	r2, [r3, #0]
            for (uint8_t index = 0; index < command_content_size; index++)
 8007f16:	23f0      	movs	r3, #240	; 0xf0
 8007f18:	33ff      	adds	r3, #255	; 0xff
 8007f1a:	2218      	movs	r2, #24
 8007f1c:	189b      	adds	r3, r3, r2
 8007f1e:	19db      	adds	r3, r3, r7
 8007f20:	2200      	movs	r2, #0
 8007f22:	701a      	strb	r2, [r3, #0]
 8007f24:	e024      	b.n	8007f70 <astronode_send_cmd_rr+0x248>
            {
            	if (isprint((unsigned char)command_content[index]) == 0)
 8007f26:	23f0      	movs	r3, #240	; 0xf0
 8007f28:	33ff      	adds	r3, #255	; 0xff
 8007f2a:	2218      	movs	r2, #24
 8007f2c:	189b      	adds	r3, r3, r2
 8007f2e:	19db      	adds	r3, r3, r7
 8007f30:	781b      	ldrb	r3, [r3, #0]
 8007f32:	22f0      	movs	r2, #240	; 0xf0
 8007f34:	0052      	lsls	r2, r2, #1
 8007f36:	2118      	movs	r1, #24
 8007f38:	1852      	adds	r2, r2, r1
 8007f3a:	19d2      	adds	r2, r2, r7
 8007f3c:	6812      	ldr	r2, [r2, #0]
 8007f3e:	5cd3      	ldrb	r3, [r2, r3]
 8007f40:	1c5a      	adds	r2, r3, #1
 8007f42:	4b2c      	ldr	r3, [pc, #176]	; (8007ff4 <astronode_send_cmd_rr+0x2cc>)
 8007f44:	18d3      	adds	r3, r2, r3
 8007f46:	781b      	ldrb	r3, [r3, #0]
 8007f48:	001a      	movs	r2, r3
 8007f4a:	2397      	movs	r3, #151	; 0x97
 8007f4c:	4013      	ands	r3, r2
 8007f4e:	d104      	bne.n	8007f5a <astronode_send_cmd_rr+0x232>
                {
                    send_debug_logs("Command contains non printable characters");
 8007f50:	4b29      	ldr	r3, [pc, #164]	; (8007ff8 <astronode_send_cmd_rr+0x2d0>)
 8007f52:	0018      	movs	r0, r3
 8007f54:	f7fb f81c 	bl	8002f90 <send_debug_logs>
                    return;
 8007f58:	e035      	b.n	8007fc6 <astronode_send_cmd_rr+0x29e>
            for (uint8_t index = 0; index < command_content_size; index++)
 8007f5a:	21f0      	movs	r1, #240	; 0xf0
 8007f5c:	31ff      	adds	r1, #255	; 0xff
 8007f5e:	2318      	movs	r3, #24
 8007f60:	18cb      	adds	r3, r1, r3
 8007f62:	19db      	adds	r3, r3, r7
 8007f64:	781a      	ldrb	r2, [r3, #0]
 8007f66:	2318      	movs	r3, #24
 8007f68:	18cb      	adds	r3, r1, r3
 8007f6a:	19db      	adds	r3, r3, r7
 8007f6c:	3201      	adds	r2, #1
 8007f6e:	701a      	strb	r2, [r3, #0]
 8007f70:	23f0      	movs	r3, #240	; 0xf0
 8007f72:	33ff      	adds	r3, #255	; 0xff
 8007f74:	2218      	movs	r2, #24
 8007f76:	189b      	adds	r3, r3, r2
 8007f78:	19db      	adds	r3, r3, r7
 8007f7a:	781b      	ldrb	r3, [r3, #0]
 8007f7c:	b29b      	uxth	r3, r3
 8007f7e:	22ef      	movs	r2, #239	; 0xef
 8007f80:	0052      	lsls	r2, r2, #1
 8007f82:	2118      	movs	r1, #24
 8007f84:	1852      	adds	r2, r2, r1
 8007f86:	19d2      	adds	r2, r2, r7
 8007f88:	8812      	ldrh	r2, [r2, #0]
 8007f8a:	429a      	cmp	r2, r3
 8007f8c:	d8cb      	bhi.n	8007f26 <astronode_send_cmd_rr+0x1fe>
                }
            }
            send_debug_logs("Command content is: ");
 8007f8e:	4b1b      	ldr	r3, [pc, #108]	; (8007ffc <astronode_send_cmd_rr+0x2d4>)
 8007f90:	0018      	movs	r0, r3
 8007f92:	f7fa fffd 	bl	8002f90 <send_debug_logs>
            sprintf(command_content, "%s ", &answer.p_payload[4]);
 8007f96:	2350      	movs	r3, #80	; 0x50
 8007f98:	2218      	movs	r2, #24
 8007f9a:	189b      	adds	r3, r3, r2
 8007f9c:	19db      	adds	r3, r3, r7
 8007f9e:	1d5a      	adds	r2, r3, #5
 8007fa0:	4917      	ldr	r1, [pc, #92]	; (8008000 <astronode_send_cmd_rr+0x2d8>)
 8007fa2:	24f0      	movs	r4, #240	; 0xf0
 8007fa4:	0064      	lsls	r4, r4, #1
 8007fa6:	2318      	movs	r3, #24
 8007fa8:	18e3      	adds	r3, r4, r3
 8007faa:	19db      	adds	r3, r3, r7
 8007fac:	681b      	ldr	r3, [r3, #0]
 8007fae:	0018      	movs	r0, r3
 8007fb0:	f001 f90a 	bl	80091c8 <sprintf>
            send_debug_logs(command_content);
 8007fb4:	2318      	movs	r3, #24
 8007fb6:	18e3      	adds	r3, r4, r3
 8007fb8:	19db      	adds	r3, r3, r7
 8007fba:	681b      	ldr	r3, [r3, #0]
 8007fbc:	0018      	movs	r0, r3
 8007fbe:	f7fa ffe7 	bl	8002f90 <send_debug_logs>
 8007fc2:	46b5      	mov	sp, r6
 8007fc4:	e005      	b.n	8007fd2 <astronode_send_cmd_rr+0x2aa>
                return;
 8007fc6:	46b5      	mov	sp, r6
 8007fc8:	e003      	b.n	8007fd2 <astronode_send_cmd_rr+0x2aa>
        }
        else
        {
            send_debug_logs("No command available.");
 8007fca:	4b0e      	ldr	r3, [pc, #56]	; (8008004 <astronode_send_cmd_rr+0x2dc>)
 8007fcc:	0018      	movs	r0, r3
 8007fce:	f7fa ffdf 	bl	8002f90 <send_debug_logs>
        }
    }
}
 8007fd2:	46bd      	mov	sp, r7
 8007fd4:	2383      	movs	r3, #131	; 0x83
 8007fd6:	009b      	lsls	r3, r3, #2
 8007fd8:	449d      	add	sp, r3
 8007fda:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8007fdc:	fffffdf4 	.word	0xfffffdf4
 8007fe0:	fffffe60 	.word	0xfffffe60
 8007fe4:	0800ed84 	.word	0x0800ed84
 8007fe8:	0800eda0 	.word	0x0800eda0
 8007fec:	0800edf0 	.word	0x0800edf0
 8007ff0:	0800e430 	.word	0x0800e430
 8007ff4:	0800f8ec 	.word	0x0800f8ec
 8007ff8:	0800ee04 	.word	0x0800ee04
 8007ffc:	0800ee30 	.word	0x0800ee30
 8008000:	0800ee48 	.word	0x0800ee48
 8008004:	0800ee4c 	.word	0x0800ee4c

08008008 <is_sak_available>:
        }
    }
}

bool is_sak_available()
{
 8008008:	b580      	push	{r7, lr}
 800800a:	af00      	add	r7, sp, #0
    return g_is_sak_available;
 800800c:	4b02      	ldr	r3, [pc, #8]	; (8008018 <is_sak_available+0x10>)
 800800e:	781b      	ldrb	r3, [r3, #0]
}
 8008010:	0018      	movs	r0, r3
 8008012:	46bd      	mov	sp, r7
 8008014:	bd80      	pop	{r7, pc}
 8008016:	46c0      	nop			; (mov r8, r8)
 8008018:	200009ec 	.word	0x200009ec

0800801c <is_astronode_reset>:

bool is_astronode_reset()
{
 800801c:	b580      	push	{r7, lr}
 800801e:	af00      	add	r7, sp, #0
    return g_is_astronode_reset;
 8008020:	4b02      	ldr	r3, [pc, #8]	; (800802c <is_astronode_reset+0x10>)
 8008022:	781b      	ldrb	r3, [r3, #0]
}
 8008024:	0018      	movs	r0, r3
 8008026:	46bd      	mov	sp, r7
 8008028:	bd80      	pop	{r7, pc}
 800802a:	46c0      	nop			; (mov r8, r8)
 800802c:	200009ed 	.word	0x200009ed

08008030 <is_command_available>:

bool is_command_available()
{
 8008030:	b580      	push	{r7, lr}
 8008032:	af00      	add	r7, sp, #0
    return g_is_command_available;
 8008034:	4b02      	ldr	r3, [pc, #8]	; (8008040 <is_command_available+0x10>)
 8008036:	781b      	ldrb	r3, [r3, #0]
}
 8008038:	0018      	movs	r0, r3
 800803a:	46bd      	mov	sp, r7
 800803c:	bd80      	pop	{r7, pc}
 800803e:	46c0      	nop			; (mov r8, r8)
 8008040:	200009ee 	.word	0x200009ee

08008044 <ascii_to_value>:

//------------------------------------------------------------------------------
// Function definitions
//------------------------------------------------------------------------------
static bool ascii_to_value(const uint8_t ascii, uint8_t *p_value)
{
 8008044:	b580      	push	{r7, lr}
 8008046:	b082      	sub	sp, #8
 8008048:	af00      	add	r7, sp, #0
 800804a:	0002      	movs	r2, r0
 800804c:	6039      	str	r1, [r7, #0]
 800804e:	1dfb      	adds	r3, r7, #7
 8008050:	701a      	strb	r2, [r3, #0]
    if (ascii >= '0' && ascii <= '9')
 8008052:	1dfb      	adds	r3, r7, #7
 8008054:	781b      	ldrb	r3, [r3, #0]
 8008056:	2b2f      	cmp	r3, #47	; 0x2f
 8008058:	d90b      	bls.n	8008072 <ascii_to_value+0x2e>
 800805a:	1dfb      	adds	r3, r7, #7
 800805c:	781b      	ldrb	r3, [r3, #0]
 800805e:	2b39      	cmp	r3, #57	; 0x39
 8008060:	d807      	bhi.n	8008072 <ascii_to_value+0x2e>
    {
        *p_value = ascii - '0';
 8008062:	1dfb      	adds	r3, r7, #7
 8008064:	781b      	ldrb	r3, [r3, #0]
 8008066:	3b30      	subs	r3, #48	; 0x30
 8008068:	b2da      	uxtb	r2, r3
 800806a:	683b      	ldr	r3, [r7, #0]
 800806c:	701a      	strb	r2, [r3, #0]
        return true;
 800806e:	2301      	movs	r3, #1
 8008070:	e010      	b.n	8008094 <ascii_to_value+0x50>
    }
    else if (ascii >= 'A' && ascii <= 'F')
 8008072:	1dfb      	adds	r3, r7, #7
 8008074:	781b      	ldrb	r3, [r3, #0]
 8008076:	2b40      	cmp	r3, #64	; 0x40
 8008078:	d90b      	bls.n	8008092 <ascii_to_value+0x4e>
 800807a:	1dfb      	adds	r3, r7, #7
 800807c:	781b      	ldrb	r3, [r3, #0]
 800807e:	2b46      	cmp	r3, #70	; 0x46
 8008080:	d807      	bhi.n	8008092 <ascii_to_value+0x4e>
    {
        *p_value = ascii - 'A' + 10;
 8008082:	1dfb      	adds	r3, r7, #7
 8008084:	781b      	ldrb	r3, [r3, #0]
 8008086:	3b37      	subs	r3, #55	; 0x37
 8008088:	b2da      	uxtb	r2, r3
 800808a:	683b      	ldr	r3, [r7, #0]
 800808c:	701a      	strb	r2, [r3, #0]
        return true;
 800808e:	2301      	movs	r3, #1
 8008090:	e000      	b.n	8008094 <ascii_to_value+0x50>
    }
    else
    {
        return false;
 8008092:	2300      	movs	r3, #0
    }
}
 8008094:	0018      	movs	r0, r3
 8008096:	46bd      	mov	sp, r7
 8008098:	b002      	add	sp, #8
 800809a:	bd80      	pop	{r7, pc}

0800809c <astronode_create_request_transport>:

static uint16_t astronode_create_request_transport(astronode_app_msg_t *p_source_message, uint8_t *p_destination_buffer)
{
 800809c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800809e:	b085      	sub	sp, #20
 80080a0:	af00      	add	r7, sp, #0
 80080a2:	6078      	str	r0, [r7, #4]
 80080a4:	6039      	str	r1, [r7, #0]
    uint16_t index = 0;
 80080a6:	250e      	movs	r5, #14
 80080a8:	197b      	adds	r3, r7, r5
 80080aa:	2200      	movs	r2, #0
 80080ac:	801a      	strh	r2, [r3, #0]

    p_destination_buffer[index++] = ASTRONODE_TRANSPORT_STX;
 80080ae:	197b      	adds	r3, r7, r5
 80080b0:	881b      	ldrh	r3, [r3, #0]
 80080b2:	197a      	adds	r2, r7, r5
 80080b4:	1c59      	adds	r1, r3, #1
 80080b6:	8011      	strh	r1, [r2, #0]
 80080b8:	001a      	movs	r2, r3
 80080ba:	683b      	ldr	r3, [r7, #0]
 80080bc:	189b      	adds	r3, r3, r2
 80080be:	2202      	movs	r2, #2
 80080c0:	701a      	strb	r2, [r3, #0]

    uint16_t crc = calculate_crc((const uint8_t *)&p_source_message->op_code, 1, 0xFFFF);
 80080c2:	687b      	ldr	r3, [r7, #4]
 80080c4:	260a      	movs	r6, #10
 80080c6:	19bc      	adds	r4, r7, r6
 80080c8:	4a44      	ldr	r2, [pc, #272]	; (80081dc <astronode_create_request_transport+0x140>)
 80080ca:	2101      	movs	r1, #1
 80080cc:	0018      	movs	r0, r3
 80080ce:	f000 fa7d 	bl	80085cc <calculate_crc>
 80080d2:	0003      	movs	r3, r0
 80080d4:	8023      	strh	r3, [r4, #0]
    crc = calculate_crc((const uint8_t *)&p_source_message->p_payload, p_source_message->payload_len, crc);
 80080d6:	687b      	ldr	r3, [r7, #4]
 80080d8:	1c58      	adds	r0, r3, #1
 80080da:	687b      	ldr	r3, [r7, #4]
 80080dc:	22c4      	movs	r2, #196	; 0xc4
 80080de:	5a99      	ldrh	r1, [r3, r2]
 80080e0:	19bc      	adds	r4, r7, r6
 80080e2:	19bb      	adds	r3, r7, r6
 80080e4:	881b      	ldrh	r3, [r3, #0]
 80080e6:	001a      	movs	r2, r3
 80080e8:	f000 fa70 	bl	80085cc <calculate_crc>
 80080ec:	0003      	movs	r3, r0
 80080ee:	8023      	strh	r3, [r4, #0]
    crc = ((crc << 8) & 0xff00) | ((crc >> 8) & 0x00ff);
 80080f0:	19bb      	adds	r3, r7, r6
 80080f2:	881b      	ldrh	r3, [r3, #0]
 80080f4:	021b      	lsls	r3, r3, #8
 80080f6:	b21a      	sxth	r2, r3
 80080f8:	0031      	movs	r1, r6
 80080fa:	19bb      	adds	r3, r7, r6
 80080fc:	881b      	ldrh	r3, [r3, #0]
 80080fe:	0a1b      	lsrs	r3, r3, #8
 8008100:	b29b      	uxth	r3, r3
 8008102:	b21b      	sxth	r3, r3
 8008104:	4313      	orrs	r3, r2
 8008106:	b21a      	sxth	r2, r3
 8008108:	187b      	adds	r3, r7, r1
 800810a:	801a      	strh	r2, [r3, #0]

    uint8_to_ascii_buffer(p_source_message->op_code, &p_destination_buffer[index]);
 800810c:	687b      	ldr	r3, [r7, #4]
 800810e:	7818      	ldrb	r0, [r3, #0]
 8008110:	197b      	adds	r3, r7, r5
 8008112:	881b      	ldrh	r3, [r3, #0]
 8008114:	683a      	ldr	r2, [r7, #0]
 8008116:	18d3      	adds	r3, r2, r3
 8008118:	0019      	movs	r1, r3
 800811a:	f000 fbeb 	bl	80088f4 <uint8_to_ascii_buffer>
    index += 2;
 800811e:	197b      	adds	r3, r7, r5
 8008120:	197a      	adds	r2, r7, r5
 8008122:	8812      	ldrh	r2, [r2, #0]
 8008124:	3202      	adds	r2, #2
 8008126:	801a      	strh	r2, [r3, #0]

    for (uint16_t i = 0; i < p_source_message->payload_len; i++)
 8008128:	230c      	movs	r3, #12
 800812a:	18fb      	adds	r3, r7, r3
 800812c:	2200      	movs	r2, #0
 800812e:	801a      	strh	r2, [r3, #0]
 8008130:	e017      	b.n	8008162 <astronode_create_request_transport+0xc6>
    {
        uint8_to_ascii_buffer(p_source_message->p_payload[i], &p_destination_buffer[index]);
 8008132:	240c      	movs	r4, #12
 8008134:	193b      	adds	r3, r7, r4
 8008136:	881b      	ldrh	r3, [r3, #0]
 8008138:	687a      	ldr	r2, [r7, #4]
 800813a:	18d3      	adds	r3, r2, r3
 800813c:	7858      	ldrb	r0, [r3, #1]
 800813e:	250e      	movs	r5, #14
 8008140:	197b      	adds	r3, r7, r5
 8008142:	881b      	ldrh	r3, [r3, #0]
 8008144:	683a      	ldr	r2, [r7, #0]
 8008146:	18d3      	adds	r3, r2, r3
 8008148:	0019      	movs	r1, r3
 800814a:	f000 fbd3 	bl	80088f4 <uint8_to_ascii_buffer>
        index += 2;
 800814e:	197b      	adds	r3, r7, r5
 8008150:	197a      	adds	r2, r7, r5
 8008152:	8812      	ldrh	r2, [r2, #0]
 8008154:	3202      	adds	r2, #2
 8008156:	801a      	strh	r2, [r3, #0]
    for (uint16_t i = 0; i < p_source_message->payload_len; i++)
 8008158:	193b      	adds	r3, r7, r4
 800815a:	881a      	ldrh	r2, [r3, #0]
 800815c:	193b      	adds	r3, r7, r4
 800815e:	3201      	adds	r2, #1
 8008160:	801a      	strh	r2, [r3, #0]
 8008162:	687b      	ldr	r3, [r7, #4]
 8008164:	22c4      	movs	r2, #196	; 0xc4
 8008166:	5a9b      	ldrh	r3, [r3, r2]
 8008168:	220c      	movs	r2, #12
 800816a:	18ba      	adds	r2, r7, r2
 800816c:	8812      	ldrh	r2, [r2, #0]
 800816e:	429a      	cmp	r2, r3
 8008170:	d3df      	bcc.n	8008132 <astronode_create_request_transport+0x96>
    }

    uint8_to_ascii_buffer(crc >> 8, &p_destination_buffer[index]);
 8008172:	250a      	movs	r5, #10
 8008174:	197b      	adds	r3, r7, r5
 8008176:	881b      	ldrh	r3, [r3, #0]
 8008178:	0a1b      	lsrs	r3, r3, #8
 800817a:	b29b      	uxth	r3, r3
 800817c:	b2d8      	uxtb	r0, r3
 800817e:	240e      	movs	r4, #14
 8008180:	193b      	adds	r3, r7, r4
 8008182:	881b      	ldrh	r3, [r3, #0]
 8008184:	683a      	ldr	r2, [r7, #0]
 8008186:	18d3      	adds	r3, r2, r3
 8008188:	0019      	movs	r1, r3
 800818a:	f000 fbb3 	bl	80088f4 <uint8_to_ascii_buffer>
    index += 2;
 800818e:	0021      	movs	r1, r4
 8008190:	187b      	adds	r3, r7, r1
 8008192:	187a      	adds	r2, r7, r1
 8008194:	8812      	ldrh	r2, [r2, #0]
 8008196:	3202      	adds	r2, #2
 8008198:	801a      	strh	r2, [r3, #0]
    uint8_to_ascii_buffer(crc & 0xFF, &p_destination_buffer[index]);
 800819a:	197b      	adds	r3, r7, r5
 800819c:	881b      	ldrh	r3, [r3, #0]
 800819e:	b2d8      	uxtb	r0, r3
 80081a0:	000c      	movs	r4, r1
 80081a2:	187b      	adds	r3, r7, r1
 80081a4:	881b      	ldrh	r3, [r3, #0]
 80081a6:	683a      	ldr	r2, [r7, #0]
 80081a8:	18d3      	adds	r3, r2, r3
 80081aa:	0019      	movs	r1, r3
 80081ac:	f000 fba2 	bl	80088f4 <uint8_to_ascii_buffer>
    index += 2;
 80081b0:	0020      	movs	r0, r4
 80081b2:	183b      	adds	r3, r7, r0
 80081b4:	183a      	adds	r2, r7, r0
 80081b6:	8812      	ldrh	r2, [r2, #0]
 80081b8:	3202      	adds	r2, #2
 80081ba:	801a      	strh	r2, [r3, #0]

    p_destination_buffer[index++] = ASTRONODE_TRANSPORT_ETX;
 80081bc:	183b      	adds	r3, r7, r0
 80081be:	881b      	ldrh	r3, [r3, #0]
 80081c0:	183a      	adds	r2, r7, r0
 80081c2:	1c59      	adds	r1, r3, #1
 80081c4:	8011      	strh	r1, [r2, #0]
 80081c6:	001a      	movs	r2, r3
 80081c8:	683b      	ldr	r3, [r7, #0]
 80081ca:	189b      	adds	r3, r3, r2
 80081cc:	2203      	movs	r2, #3
 80081ce:	701a      	strb	r2, [r3, #0]

    return index;
 80081d0:	183b      	adds	r3, r7, r0
 80081d2:	881b      	ldrh	r3, [r3, #0]
}
 80081d4:	0018      	movs	r0, r3
 80081d6:	46bd      	mov	sp, r7
 80081d8:	b005      	add	sp, #20
 80081da:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80081dc:	0000ffff 	.word	0x0000ffff

080081e0 <astronode_decode_answer_transport>:

static return_status_t astronode_decode_answer_transport(uint8_t *p_source_buffer, uint16_t length_buffer, astronode_app_msg_t *p_destination_message)
{
 80081e0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80081e2:	b089      	sub	sp, #36	; 0x24
 80081e4:	af00      	add	r7, sp, #0
 80081e6:	60f8      	str	r0, [r7, #12]
 80081e8:	607a      	str	r2, [r7, #4]
 80081ea:	230a      	movs	r3, #10
 80081ec:	18fb      	adds	r3, r7, r3
 80081ee:	1c0a      	adds	r2, r1, #0
 80081f0:	801a      	strh	r2, [r3, #0]
    if (p_source_buffer[0] != ASTRONODE_TRANSPORT_STX)
 80081f2:	68fb      	ldr	r3, [r7, #12]
 80081f4:	781b      	ldrb	r3, [r3, #0]
 80081f6:	2b02      	cmp	r3, #2
 80081f8:	d005      	beq.n	8008206 <astronode_decode_answer_transport+0x26>
    {
        send_debug_logs("ERROR : Message received from the Astronode does not start with STX character.");
 80081fa:	4bbd      	ldr	r3, [pc, #756]	; (80084f0 <astronode_decode_answer_transport+0x310>)
 80081fc:	0018      	movs	r0, r3
 80081fe:	f7fa fec7 	bl	8002f90 <send_debug_logs>
        return RS_FAILURE;
 8008202:	2300      	movs	r3, #0
 8008204:	e170      	b.n	80084e8 <astronode_decode_answer_transport+0x308>
    }

    if (length_buffer % 2 == 1 || length_buffer < 8) // 8: STX, ETX, 2 x opcode, 4 x CRC
 8008206:	210a      	movs	r1, #10
 8008208:	187b      	adds	r3, r7, r1
 800820a:	881b      	ldrh	r3, [r3, #0]
 800820c:	2201      	movs	r2, #1
 800820e:	4013      	ands	r3, r2
 8008210:	b29b      	uxth	r3, r3
 8008212:	2b00      	cmp	r3, #0
 8008214:	d103      	bne.n	800821e <astronode_decode_answer_transport+0x3e>
 8008216:	187b      	adds	r3, r7, r1
 8008218:	881b      	ldrh	r3, [r3, #0]
 800821a:	2b07      	cmp	r3, #7
 800821c:	d805      	bhi.n	800822a <astronode_decode_answer_transport+0x4a>
    {
        send_debug_logs("ERROR : Message received from the Astronode is missing at least one character.");
 800821e:	4bb5      	ldr	r3, [pc, #724]	; (80084f4 <astronode_decode_answer_transport+0x314>)
 8008220:	0018      	movs	r0, r3
 8008222:	f7fa feb5 	bl	8002f90 <send_debug_logs>
        return RS_FAILURE;
 8008226:	2300      	movs	r3, #0
 8008228:	e15e      	b.n	80084e8 <astronode_decode_answer_transport+0x308>
    }

    p_destination_message->payload_len = (length_buffer - 8) / 2;
 800822a:	230a      	movs	r3, #10
 800822c:	18fb      	adds	r3, r7, r3
 800822e:	881b      	ldrh	r3, [r3, #0]
 8008230:	3b08      	subs	r3, #8
 8008232:	2b00      	cmp	r3, #0
 8008234:	da00      	bge.n	8008238 <astronode_decode_answer_transport+0x58>
 8008236:	3301      	adds	r3, #1
 8008238:	105b      	asrs	r3, r3, #1
 800823a:	b299      	uxth	r1, r3
 800823c:	687b      	ldr	r3, [r7, #4]
 800823e:	22c4      	movs	r2, #196	; 0xc4
 8008240:	5299      	strh	r1, [r3, r2]

    if (p_source_buffer[length_buffer - 1] != ASTRONODE_TRANSPORT_ETX)
 8008242:	230a      	movs	r3, #10
 8008244:	18fb      	adds	r3, r7, r3
 8008246:	881b      	ldrh	r3, [r3, #0]
 8008248:	3b01      	subs	r3, #1
 800824a:	68fa      	ldr	r2, [r7, #12]
 800824c:	18d3      	adds	r3, r2, r3
 800824e:	781b      	ldrb	r3, [r3, #0]
 8008250:	2b03      	cmp	r3, #3
 8008252:	d005      	beq.n	8008260 <astronode_decode_answer_transport+0x80>
    {
        send_debug_logs("ERROR : Message received from the Astronode does not end with ETX character.");
 8008254:	4ba8      	ldr	r3, [pc, #672]	; (80084f8 <astronode_decode_answer_transport+0x318>)
 8008256:	0018      	movs	r0, r3
 8008258:	f7fa fe9a 	bl	8002f90 <send_debug_logs>
        return RS_FAILURE;
 800825c:	2300      	movs	r3, #0
 800825e:	e143      	b.n	80084e8 <astronode_decode_answer_transport+0x308>
    }

    uint8_t nibble_high = 0;
 8008260:	2117      	movs	r1, #23
 8008262:	187b      	adds	r3, r7, r1
 8008264:	2200      	movs	r2, #0
 8008266:	701a      	strb	r2, [r3, #0]
    uint8_t nibble_low = 0;
 8008268:	2416      	movs	r4, #22
 800826a:	193b      	adds	r3, r7, r4
 800826c:	2200      	movs	r2, #0
 800826e:	701a      	strb	r2, [r3, #0]

    // Op code
    if (ascii_to_value(p_source_buffer[1], &nibble_high) == false
 8008270:	68fb      	ldr	r3, [r7, #12]
 8008272:	3301      	adds	r3, #1
 8008274:	781b      	ldrb	r3, [r3, #0]
 8008276:	187a      	adds	r2, r7, r1
 8008278:	0011      	movs	r1, r2
 800827a:	0018      	movs	r0, r3
 800827c:	f7ff fee2 	bl	8008044 <ascii_to_value>
 8008280:	0003      	movs	r3, r0
 8008282:	001a      	movs	r2, r3
 8008284:	2301      	movs	r3, #1
 8008286:	4053      	eors	r3, r2
 8008288:	b2db      	uxtb	r3, r3
 800828a:	2b00      	cmp	r3, #0
 800828c:	d10e      	bne.n	80082ac <astronode_decode_answer_transport+0xcc>
        || ascii_to_value(p_source_buffer[2], &nibble_low) == false)
 800828e:	68fb      	ldr	r3, [r7, #12]
 8008290:	3302      	adds	r3, #2
 8008292:	781b      	ldrb	r3, [r3, #0]
 8008294:	193a      	adds	r2, r7, r4
 8008296:	0011      	movs	r1, r2
 8008298:	0018      	movs	r0, r3
 800829a:	f7ff fed3 	bl	8008044 <ascii_to_value>
 800829e:	0003      	movs	r3, r0
 80082a0:	001a      	movs	r2, r3
 80082a2:	2301      	movs	r3, #1
 80082a4:	4053      	eors	r3, r2
 80082a6:	b2db      	uxtb	r3, r3
 80082a8:	2b00      	cmp	r3, #0
 80082aa:	d005      	beq.n	80082b8 <astronode_decode_answer_transport+0xd8>
    {
        send_debug_logs("ERROR : Message received from the Astronode contains a non-ASCII character.");
 80082ac:	4b93      	ldr	r3, [pc, #588]	; (80084fc <astronode_decode_answer_transport+0x31c>)
 80082ae:	0018      	movs	r0, r3
 80082b0:	f7fa fe6e 	bl	8002f90 <send_debug_logs>
        return RS_FAILURE;
 80082b4:	2300      	movs	r3, #0
 80082b6:	e117      	b.n	80084e8 <astronode_decode_answer_transport+0x308>
    }

    p_destination_message->op_code = (nibble_high << 4) + nibble_low;
 80082b8:	2317      	movs	r3, #23
 80082ba:	18fb      	adds	r3, r7, r3
 80082bc:	781b      	ldrb	r3, [r3, #0]
 80082be:	011b      	lsls	r3, r3, #4
 80082c0:	b2da      	uxtb	r2, r3
 80082c2:	2316      	movs	r3, #22
 80082c4:	18fb      	adds	r3, r7, r3
 80082c6:	781b      	ldrb	r3, [r3, #0]
 80082c8:	18d3      	adds	r3, r2, r3
 80082ca:	b2da      	uxtb	r2, r3
 80082cc:	687b      	ldr	r3, [r7, #4]
 80082ce:	701a      	strb	r2, [r3, #0]

    // Payload
    for (uint16_t i = 3, j = 0; i < length_buffer - 5; i += 2)
 80082d0:	231e      	movs	r3, #30
 80082d2:	18fb      	adds	r3, r7, r3
 80082d4:	2203      	movs	r2, #3
 80082d6:	801a      	strh	r2, [r3, #0]
 80082d8:	231c      	movs	r3, #28
 80082da:	18fb      	adds	r3, r7, r3
 80082dc:	2200      	movs	r2, #0
 80082de:	801a      	strh	r2, [r3, #0]
 80082e0:	e045      	b.n	800836e <astronode_decode_answer_transport+0x18e>
    {
        if (ascii_to_value(p_source_buffer[i], &nibble_high) == false
 80082e2:	241e      	movs	r4, #30
 80082e4:	193b      	adds	r3, r7, r4
 80082e6:	881b      	ldrh	r3, [r3, #0]
 80082e8:	68fa      	ldr	r2, [r7, #12]
 80082ea:	18d3      	adds	r3, r2, r3
 80082ec:	781b      	ldrb	r3, [r3, #0]
 80082ee:	2217      	movs	r2, #23
 80082f0:	18ba      	adds	r2, r7, r2
 80082f2:	0011      	movs	r1, r2
 80082f4:	0018      	movs	r0, r3
 80082f6:	f7ff fea5 	bl	8008044 <ascii_to_value>
 80082fa:	0003      	movs	r3, r0
 80082fc:	001a      	movs	r2, r3
 80082fe:	2301      	movs	r3, #1
 8008300:	4053      	eors	r3, r2
 8008302:	b2db      	uxtb	r3, r3
 8008304:	2b00      	cmp	r3, #0
 8008306:	d112      	bne.n	800832e <astronode_decode_answer_transport+0x14e>
            || ascii_to_value(p_source_buffer[i + 1], &nibble_low) == false)
 8008308:	193b      	adds	r3, r7, r4
 800830a:	881b      	ldrh	r3, [r3, #0]
 800830c:	3301      	adds	r3, #1
 800830e:	68fa      	ldr	r2, [r7, #12]
 8008310:	18d3      	adds	r3, r2, r3
 8008312:	781b      	ldrb	r3, [r3, #0]
 8008314:	2216      	movs	r2, #22
 8008316:	18ba      	adds	r2, r7, r2
 8008318:	0011      	movs	r1, r2
 800831a:	0018      	movs	r0, r3
 800831c:	f7ff fe92 	bl	8008044 <ascii_to_value>
 8008320:	0003      	movs	r3, r0
 8008322:	001a      	movs	r2, r3
 8008324:	2301      	movs	r3, #1
 8008326:	4053      	eors	r3, r2
 8008328:	b2db      	uxtb	r3, r3
 800832a:	2b00      	cmp	r3, #0
 800832c:	d005      	beq.n	800833a <astronode_decode_answer_transport+0x15a>
        {
            send_debug_logs("ERROR : Message received from the Astronode contains a non-ASCII character.");
 800832e:	4b73      	ldr	r3, [pc, #460]	; (80084fc <astronode_decode_answer_transport+0x31c>)
 8008330:	0018      	movs	r0, r3
 8008332:	f7fa fe2d 	bl	8002f90 <send_debug_logs>
            return RS_FAILURE;
 8008336:	2300      	movs	r3, #0
 8008338:	e0d6      	b.n	80084e8 <astronode_decode_answer_transport+0x308>
        }

        p_destination_message->p_payload[j++] = (nibble_high << 4) + nibble_low;
 800833a:	2317      	movs	r3, #23
 800833c:	18fb      	adds	r3, r7, r3
 800833e:	781b      	ldrb	r3, [r3, #0]
 8008340:	011b      	lsls	r3, r3, #4
 8008342:	b2d9      	uxtb	r1, r3
 8008344:	2316      	movs	r3, #22
 8008346:	18fb      	adds	r3, r7, r3
 8008348:	781a      	ldrb	r2, [r3, #0]
 800834a:	201c      	movs	r0, #28
 800834c:	183b      	adds	r3, r7, r0
 800834e:	881b      	ldrh	r3, [r3, #0]
 8008350:	1838      	adds	r0, r7, r0
 8008352:	1c5c      	adds	r4, r3, #1
 8008354:	8004      	strh	r4, [r0, #0]
 8008356:	0018      	movs	r0, r3
 8008358:	188b      	adds	r3, r1, r2
 800835a:	b2da      	uxtb	r2, r3
 800835c:	687b      	ldr	r3, [r7, #4]
 800835e:	181b      	adds	r3, r3, r0
 8008360:	705a      	strb	r2, [r3, #1]
    for (uint16_t i = 3, j = 0; i < length_buffer - 5; i += 2)
 8008362:	221e      	movs	r2, #30
 8008364:	18bb      	adds	r3, r7, r2
 8008366:	18ba      	adds	r2, r7, r2
 8008368:	8812      	ldrh	r2, [r2, #0]
 800836a:	3202      	adds	r2, #2
 800836c:	801a      	strh	r2, [r3, #0]
 800836e:	231e      	movs	r3, #30
 8008370:	18fb      	adds	r3, r7, r3
 8008372:	881a      	ldrh	r2, [r3, #0]
 8008374:	260a      	movs	r6, #10
 8008376:	19bb      	adds	r3, r7, r6
 8008378:	881b      	ldrh	r3, [r3, #0]
 800837a:	3b05      	subs	r3, #5
 800837c:	429a      	cmp	r2, r3
 800837e:	dbb0      	blt.n	80082e2 <astronode_decode_answer_transport+0x102>
    }

    // CRC
    uint16_t crc_calculated = calculate_crc((const uint8_t *)&p_destination_message->op_code, 1, 0xFFFF);
 8008380:	687b      	ldr	r3, [r7, #4]
 8008382:	251a      	movs	r5, #26
 8008384:	197c      	adds	r4, r7, r5
 8008386:	4a5e      	ldr	r2, [pc, #376]	; (8008500 <astronode_decode_answer_transport+0x320>)
 8008388:	2101      	movs	r1, #1
 800838a:	0018      	movs	r0, r3
 800838c:	f000 f91e 	bl	80085cc <calculate_crc>
 8008390:	0003      	movs	r3, r0
 8008392:	8023      	strh	r3, [r4, #0]
    crc_calculated = calculate_crc((const uint8_t *)&p_destination_message->p_payload, p_destination_message->payload_len, crc_calculated);
 8008394:	687b      	ldr	r3, [r7, #4]
 8008396:	1c58      	adds	r0, r3, #1
 8008398:	687b      	ldr	r3, [r7, #4]
 800839a:	22c4      	movs	r2, #196	; 0xc4
 800839c:	5a99      	ldrh	r1, [r3, r2]
 800839e:	197c      	adds	r4, r7, r5
 80083a0:	197b      	adds	r3, r7, r5
 80083a2:	881b      	ldrh	r3, [r3, #0]
 80083a4:	001a      	movs	r2, r3
 80083a6:	f000 f911 	bl	80085cc <calculate_crc>
 80083aa:	0003      	movs	r3, r0
 80083ac:	8023      	strh	r3, [r4, #0]
    crc_calculated = ((crc_calculated << 8) & 0xff00) | ((crc_calculated >> 8) & 0x00ff);
 80083ae:	197b      	adds	r3, r7, r5
 80083b0:	881b      	ldrh	r3, [r3, #0]
 80083b2:	021b      	lsls	r3, r3, #8
 80083b4:	b21a      	sxth	r2, r3
 80083b6:	0029      	movs	r1, r5
 80083b8:	197b      	adds	r3, r7, r5
 80083ba:	881b      	ldrh	r3, [r3, #0]
 80083bc:	0a1b      	lsrs	r3, r3, #8
 80083be:	b29b      	uxth	r3, r3
 80083c0:	b21b      	sxth	r3, r3
 80083c2:	4313      	orrs	r3, r2
 80083c4:	b21a      	sxth	r2, r3
 80083c6:	187b      	adds	r3, r7, r1
 80083c8:	801a      	strh	r2, [r3, #0]


    if (ascii_to_value(p_source_buffer[length_buffer - 5], &nibble_high) == false
 80083ca:	19bb      	adds	r3, r7, r6
 80083cc:	881b      	ldrh	r3, [r3, #0]
 80083ce:	3b05      	subs	r3, #5
 80083d0:	68fa      	ldr	r2, [r7, #12]
 80083d2:	18d3      	adds	r3, r2, r3
 80083d4:	781b      	ldrb	r3, [r3, #0]
 80083d6:	2217      	movs	r2, #23
 80083d8:	18ba      	adds	r2, r7, r2
 80083da:	0011      	movs	r1, r2
 80083dc:	0018      	movs	r0, r3
 80083de:	f7ff fe31 	bl	8008044 <ascii_to_value>
 80083e2:	0003      	movs	r3, r0
 80083e4:	001a      	movs	r2, r3
 80083e6:	2301      	movs	r3, #1
 80083e8:	4053      	eors	r3, r2
 80083ea:	b2db      	uxtb	r3, r3
 80083ec:	2b00      	cmp	r3, #0
 80083ee:	d112      	bne.n	8008416 <astronode_decode_answer_transport+0x236>
        || ascii_to_value(p_source_buffer[length_buffer - 4], &nibble_low) == false)
 80083f0:	19bb      	adds	r3, r7, r6
 80083f2:	881b      	ldrh	r3, [r3, #0]
 80083f4:	3b04      	subs	r3, #4
 80083f6:	68fa      	ldr	r2, [r7, #12]
 80083f8:	18d3      	adds	r3, r2, r3
 80083fa:	781b      	ldrb	r3, [r3, #0]
 80083fc:	2216      	movs	r2, #22
 80083fe:	18ba      	adds	r2, r7, r2
 8008400:	0011      	movs	r1, r2
 8008402:	0018      	movs	r0, r3
 8008404:	f7ff fe1e 	bl	8008044 <ascii_to_value>
 8008408:	0003      	movs	r3, r0
 800840a:	001a      	movs	r2, r3
 800840c:	2301      	movs	r3, #1
 800840e:	4053      	eors	r3, r2
 8008410:	b2db      	uxtb	r3, r3
 8008412:	2b00      	cmp	r3, #0
 8008414:	d005      	beq.n	8008422 <astronode_decode_answer_transport+0x242>
    {
        send_debug_logs("ERROR : Message received from the Astronode contains a non-ASCII character.");
 8008416:	4b39      	ldr	r3, [pc, #228]	; (80084fc <astronode_decode_answer_transport+0x31c>)
 8008418:	0018      	movs	r0, r3
 800841a:	f7fa fdb9 	bl	8002f90 <send_debug_logs>
        return RS_FAILURE;
 800841e:	2300      	movs	r3, #0
 8008420:	e062      	b.n	80084e8 <astronode_decode_answer_transport+0x308>
    }

    uint16_t crc_received = (nibble_high << 12) + (nibble_low << 8);
 8008422:	2017      	movs	r0, #23
 8008424:	183b      	adds	r3, r7, r0
 8008426:	781b      	ldrb	r3, [r3, #0]
 8008428:	b29b      	uxth	r3, r3
 800842a:	031b      	lsls	r3, r3, #12
 800842c:	b299      	uxth	r1, r3
 800842e:	2416      	movs	r4, #22
 8008430:	193b      	adds	r3, r7, r4
 8008432:	781b      	ldrb	r3, [r3, #0]
 8008434:	b29b      	uxth	r3, r3
 8008436:	021b      	lsls	r3, r3, #8
 8008438:	b29a      	uxth	r2, r3
 800843a:	2318      	movs	r3, #24
 800843c:	18fb      	adds	r3, r7, r3
 800843e:	188a      	adds	r2, r1, r2
 8008440:	801a      	strh	r2, [r3, #0]

    if (ascii_to_value(p_source_buffer[length_buffer - 3], &nibble_high) == false
 8008442:	250a      	movs	r5, #10
 8008444:	197b      	adds	r3, r7, r5
 8008446:	881b      	ldrh	r3, [r3, #0]
 8008448:	3b03      	subs	r3, #3
 800844a:	68fa      	ldr	r2, [r7, #12]
 800844c:	18d3      	adds	r3, r2, r3
 800844e:	781b      	ldrb	r3, [r3, #0]
 8008450:	183a      	adds	r2, r7, r0
 8008452:	0011      	movs	r1, r2
 8008454:	0018      	movs	r0, r3
 8008456:	f7ff fdf5 	bl	8008044 <ascii_to_value>
 800845a:	0003      	movs	r3, r0
 800845c:	001a      	movs	r2, r3
 800845e:	2301      	movs	r3, #1
 8008460:	4053      	eors	r3, r2
 8008462:	b2db      	uxtb	r3, r3
 8008464:	2b00      	cmp	r3, #0
 8008466:	d111      	bne.n	800848c <astronode_decode_answer_transport+0x2ac>
        || ascii_to_value(p_source_buffer[length_buffer - 2], &nibble_low) == false)
 8008468:	197b      	adds	r3, r7, r5
 800846a:	881b      	ldrh	r3, [r3, #0]
 800846c:	3b02      	subs	r3, #2
 800846e:	68fa      	ldr	r2, [r7, #12]
 8008470:	18d3      	adds	r3, r2, r3
 8008472:	781b      	ldrb	r3, [r3, #0]
 8008474:	193a      	adds	r2, r7, r4
 8008476:	0011      	movs	r1, r2
 8008478:	0018      	movs	r0, r3
 800847a:	f7ff fde3 	bl	8008044 <ascii_to_value>
 800847e:	0003      	movs	r3, r0
 8008480:	001a      	movs	r2, r3
 8008482:	2301      	movs	r3, #1
 8008484:	4053      	eors	r3, r2
 8008486:	b2db      	uxtb	r3, r3
 8008488:	2b00      	cmp	r3, #0
 800848a:	d005      	beq.n	8008498 <astronode_decode_answer_transport+0x2b8>
    {
        send_debug_logs("ERROR : Message received from the Astronode contains a non-ASCII character.");
 800848c:	4b1b      	ldr	r3, [pc, #108]	; (80084fc <astronode_decode_answer_transport+0x31c>)
 800848e:	0018      	movs	r0, r3
 8008490:	f7fa fd7e 	bl	8002f90 <send_debug_logs>
        return RS_FAILURE;
 8008494:	2300      	movs	r3, #0
 8008496:	e027      	b.n	80084e8 <astronode_decode_answer_transport+0x308>
    }

    crc_received += (nibble_high << 4) + nibble_low;
 8008498:	2317      	movs	r3, #23
 800849a:	18fb      	adds	r3, r7, r3
 800849c:	781b      	ldrb	r3, [r3, #0]
 800849e:	b29b      	uxth	r3, r3
 80084a0:	011b      	lsls	r3, r3, #4
 80084a2:	b29a      	uxth	r2, r3
 80084a4:	2316      	movs	r3, #22
 80084a6:	18fb      	adds	r3, r7, r3
 80084a8:	781b      	ldrb	r3, [r3, #0]
 80084aa:	b29b      	uxth	r3, r3
 80084ac:	18d3      	adds	r3, r2, r3
 80084ae:	b299      	uxth	r1, r3
 80084b0:	2018      	movs	r0, #24
 80084b2:	183b      	adds	r3, r7, r0
 80084b4:	183a      	adds	r2, r7, r0
 80084b6:	8812      	ldrh	r2, [r2, #0]
 80084b8:	188a      	adds	r2, r1, r2
 80084ba:	801a      	strh	r2, [r3, #0]

    if (crc_received != crc_calculated)
 80084bc:	183a      	adds	r2, r7, r0
 80084be:	231a      	movs	r3, #26
 80084c0:	18fb      	adds	r3, r7, r3
 80084c2:	8812      	ldrh	r2, [r2, #0]
 80084c4:	881b      	ldrh	r3, [r3, #0]
 80084c6:	429a      	cmp	r2, r3
 80084c8:	d005      	beq.n	80084d6 <astronode_decode_answer_transport+0x2f6>
    {
        send_debug_logs("ERROR : CRC sent by the Astronode does not match the expected CRC");
 80084ca:	4b0e      	ldr	r3, [pc, #56]	; (8008504 <astronode_decode_answer_transport+0x324>)
 80084cc:	0018      	movs	r0, r3
 80084ce:	f7fa fd5f 	bl	8002f90 <send_debug_logs>
        return RS_FAILURE;
 80084d2:	2300      	movs	r3, #0
 80084d4:	e008      	b.n	80084e8 <astronode_decode_answer_transport+0x308>
    }

    if (p_destination_message->op_code == ASTRONODE_OP_CODE_ERROR)
 80084d6:	687b      	ldr	r3, [r7, #4]
 80084d8:	781b      	ldrb	r3, [r3, #0]
 80084da:	2bff      	cmp	r3, #255	; 0xff
 80084dc:	d103      	bne.n	80084e6 <astronode_decode_answer_transport+0x306>
    {
        check_for_error(p_destination_message);
 80084de:	687b      	ldr	r3, [r7, #4]
 80084e0:	0018      	movs	r0, r3
 80084e2:	f000 f8c3 	bl	800866c <check_for_error>
    }

    return RS_SUCCESS;
 80084e6:	2301      	movs	r3, #1
}
 80084e8:	0018      	movs	r0, r3
 80084ea:	46bd      	mov	sp, r7
 80084ec:	b009      	add	sp, #36	; 0x24
 80084ee:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80084f0:	0800eedc 	.word	0x0800eedc
 80084f4:	0800ef2c 	.word	0x0800ef2c
 80084f8:	0800ef7c 	.word	0x0800ef7c
 80084fc:	0800efcc 	.word	0x0800efcc
 8008500:	0000ffff 	.word	0x0000ffff
 8008504:	0800f018 	.word	0x0800f018

08008508 <astronode_transport_send_receive>:

return_status_t astronode_transport_send_receive(astronode_app_msg_t *p_request, astronode_app_msg_t *p_answer)
{
 8008508:	b5f0      	push	{r4, r5, r6, r7, lr}
 800850a:	4c2b      	ldr	r4, [pc, #172]	; (80085b8 <astronode_transport_send_receive+0xb0>)
 800850c:	44a5      	add	sp, r4
 800850e:	af00      	add	r7, sp, #0
 8008510:	6078      	str	r0, [r7, #4]
 8008512:	6039      	str	r1, [r7, #0]
    uint8_t request_transport[ASTRONODE_TRANSPORT_MSG_MAX_LEN_BYTES] = {0};
 8008514:	4b29      	ldr	r3, [pc, #164]	; (80085bc <astronode_transport_send_receive+0xb4>)
 8008516:	25ca      	movs	r5, #202	; 0xca
 8008518:	00ad      	lsls	r5, r5, #2
 800851a:	195b      	adds	r3, r3, r5
 800851c:	19db      	adds	r3, r3, r7
 800851e:	2200      	movs	r2, #0
 8008520:	601a      	str	r2, [r3, #0]
 8008522:	3304      	adds	r3, #4
 8008524:	22c4      	movs	r2, #196	; 0xc4
 8008526:	0052      	lsls	r2, r2, #1
 8008528:	2100      	movs	r1, #0
 800852a:	0018      	movs	r0, r3
 800852c:	f000 feb8 	bl	80092a0 <memset>
    uint8_t answer_transport[ASTRONODE_TRANSPORT_MSG_MAX_LEN_BYTES] = {0};
 8008530:	4b23      	ldr	r3, [pc, #140]	; (80085c0 <astronode_transport_send_receive+0xb8>)
 8008532:	195b      	adds	r3, r3, r5
 8008534:	19db      	adds	r3, r3, r7
 8008536:	2200      	movs	r2, #0
 8008538:	601a      	str	r2, [r3, #0]
 800853a:	3304      	adds	r3, #4
 800853c:	22c4      	movs	r2, #196	; 0xc4
 800853e:	0052      	lsls	r2, r2, #1
 8008540:	2100      	movs	r1, #0
 8008542:	0018      	movs	r0, r3
 8008544:	f000 feac 	bl	80092a0 <memset>
    uint16_t answer_length =  0;
 8008548:	4b1e      	ldr	r3, [pc, #120]	; (80085c4 <astronode_transport_send_receive+0xbc>)
 800854a:	195b      	adds	r3, r3, r5
 800854c:	19db      	adds	r3, r3, r7
 800854e:	2200      	movs	r2, #0
 8008550:	801a      	strh	r2, [r3, #0]

    uint16_t request_length = astronode_create_request_transport(p_request, request_transport);
 8008552:	4e1d      	ldr	r6, [pc, #116]	; (80085c8 <astronode_transport_send_receive+0xc0>)
 8008554:	19bc      	adds	r4, r7, r6
 8008556:	23cc      	movs	r3, #204	; 0xcc
 8008558:	005b      	lsls	r3, r3, #1
 800855a:	18fa      	adds	r2, r7, r3
 800855c:	687b      	ldr	r3, [r7, #4]
 800855e:	0011      	movs	r1, r2
 8008560:	0018      	movs	r0, r3
 8008562:	f7ff fd9b 	bl	800809c <astronode_create_request_transport>
 8008566:	0003      	movs	r3, r0
 8008568:	8023      	strh	r3, [r4, #0]

    send_astronode_request(request_transport, request_length);
 800856a:	19bb      	adds	r3, r7, r6
 800856c:	881a      	ldrh	r2, [r3, #0]
 800856e:	23cc      	movs	r3, #204	; 0xcc
 8008570:	005b      	lsls	r3, r3, #1
 8008572:	18fb      	adds	r3, r7, r3
 8008574:	0011      	movs	r1, r2
 8008576:	0018      	movs	r0, r3
 8008578:	f7fa fd54 	bl	8003024 <send_astronode_request>
    if(receive_astronode_answer(answer_transport, &answer_length) == RS_SUCCESS)
 800857c:	230a      	movs	r3, #10
 800857e:	18fa      	adds	r2, r7, r3
 8008580:	240c      	movs	r4, #12
 8008582:	193b      	adds	r3, r7, r4
 8008584:	0011      	movs	r1, r2
 8008586:	0018      	movs	r0, r3
 8008588:	f000 f92c 	bl	80087e4 <receive_astronode_answer>
 800858c:	0003      	movs	r3, r0
 800858e:	2b01      	cmp	r3, #1
 8008590:	d10a      	bne.n	80085a8 <astronode_transport_send_receive+0xa0>
    {
        return astronode_decode_answer_transport(answer_transport, answer_length, p_answer);
 8008592:	4b0c      	ldr	r3, [pc, #48]	; (80085c4 <astronode_transport_send_receive+0xbc>)
 8008594:	195b      	adds	r3, r3, r5
 8008596:	19db      	adds	r3, r3, r7
 8008598:	8819      	ldrh	r1, [r3, #0]
 800859a:	683a      	ldr	r2, [r7, #0]
 800859c:	193b      	adds	r3, r7, r4
 800859e:	0018      	movs	r0, r3
 80085a0:	f7ff fe1e 	bl	80081e0 <astronode_decode_answer_transport>
 80085a4:	0003      	movs	r3, r0
 80085a6:	e000      	b.n	80085aa <astronode_transport_send_receive+0xa2>
    }
    else
    {
        return RS_FAILURE;
 80085a8:	2300      	movs	r3, #0
    }
}
 80085aa:	0018      	movs	r0, r3
 80085ac:	46bd      	mov	sp, r7
 80085ae:	23cb      	movs	r3, #203	; 0xcb
 80085b0:	009b      	lsls	r3, r3, #2
 80085b2:	449d      	add	sp, r3
 80085b4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80085b6:	46c0      	nop			; (mov r8, r8)
 80085b8:	fffffcd4 	.word	0xfffffcd4
 80085bc:	fffffe70 	.word	0xfffffe70
 80085c0:	fffffce4 	.word	0xfffffce4
 80085c4:	fffffce2 	.word	0xfffffce2
 80085c8:	00000326 	.word	0x00000326

080085cc <calculate_crc>:

static uint16_t calculate_crc(const uint8_t *p_data, uint16_t data_len, uint16_t init_value)
{
 80085cc:	b590      	push	{r4, r7, lr}
 80085ce:	b085      	sub	sp, #20
 80085d0:	af00      	add	r7, sp, #0
 80085d2:	6078      	str	r0, [r7, #4]
 80085d4:	0008      	movs	r0, r1
 80085d6:	0011      	movs	r1, r2
 80085d8:	1cbb      	adds	r3, r7, #2
 80085da:	1c02      	adds	r2, r0, #0
 80085dc:	801a      	strh	r2, [r3, #0]
 80085de:	003b      	movs	r3, r7
 80085e0:	1c0a      	adds	r2, r1, #0
 80085e2:	801a      	strh	r2, [r3, #0]
    uint16_t crc = init_value;
 80085e4:	230e      	movs	r3, #14
 80085e6:	18fb      	adds	r3, r7, r3
 80085e8:	003a      	movs	r2, r7
 80085ea:	8812      	ldrh	r2, [r2, #0]
 80085ec:	801a      	strh	r2, [r3, #0]

    while (data_len--)
 80085ee:	e02e      	b.n	800864e <calculate_crc+0x82>
    {
        uint16_t x = crc >> 8 ^ *p_data++;
 80085f0:	240e      	movs	r4, #14
 80085f2:	193b      	adds	r3, r7, r4
 80085f4:	881b      	ldrh	r3, [r3, #0]
 80085f6:	0a1b      	lsrs	r3, r3, #8
 80085f8:	b299      	uxth	r1, r3
 80085fa:	687b      	ldr	r3, [r7, #4]
 80085fc:	1c5a      	adds	r2, r3, #1
 80085fe:	607a      	str	r2, [r7, #4]
 8008600:	781b      	ldrb	r3, [r3, #0]
 8008602:	b29a      	uxth	r2, r3
 8008604:	200c      	movs	r0, #12
 8008606:	183b      	adds	r3, r7, r0
 8008608:	404a      	eors	r2, r1
 800860a:	801a      	strh	r2, [r3, #0]
        x ^= x >> 4;
 800860c:	183b      	adds	r3, r7, r0
 800860e:	881b      	ldrh	r3, [r3, #0]
 8008610:	091b      	lsrs	r3, r3, #4
 8008612:	b299      	uxth	r1, r3
 8008614:	183b      	adds	r3, r7, r0
 8008616:	183a      	adds	r2, r7, r0
 8008618:	8812      	ldrh	r2, [r2, #0]
 800861a:	404a      	eors	r2, r1
 800861c:	801a      	strh	r2, [r3, #0]
        crc = (crc << 8) ^ (x << 12) ^ (x << 5) ^ (x);
 800861e:	0021      	movs	r1, r4
 8008620:	187b      	adds	r3, r7, r1
 8008622:	881b      	ldrh	r3, [r3, #0]
 8008624:	021b      	lsls	r3, r3, #8
 8008626:	b21a      	sxth	r2, r3
 8008628:	183b      	adds	r3, r7, r0
 800862a:	881b      	ldrh	r3, [r3, #0]
 800862c:	031b      	lsls	r3, r3, #12
 800862e:	b21b      	sxth	r3, r3
 8008630:	4053      	eors	r3, r2
 8008632:	b21a      	sxth	r2, r3
 8008634:	183b      	adds	r3, r7, r0
 8008636:	881b      	ldrh	r3, [r3, #0]
 8008638:	015b      	lsls	r3, r3, #5
 800863a:	b21b      	sxth	r3, r3
 800863c:	4053      	eors	r3, r2
 800863e:	b21a      	sxth	r2, r3
 8008640:	183b      	adds	r3, r7, r0
 8008642:	2000      	movs	r0, #0
 8008644:	5e1b      	ldrsh	r3, [r3, r0]
 8008646:	4053      	eors	r3, r2
 8008648:	b21a      	sxth	r2, r3
 800864a:	187b      	adds	r3, r7, r1
 800864c:	801a      	strh	r2, [r3, #0]
    while (data_len--)
 800864e:	1cbb      	adds	r3, r7, #2
 8008650:	881b      	ldrh	r3, [r3, #0]
 8008652:	1cba      	adds	r2, r7, #2
 8008654:	1e59      	subs	r1, r3, #1
 8008656:	8011      	strh	r1, [r2, #0]
 8008658:	2b00      	cmp	r3, #0
 800865a:	d1c9      	bne.n	80085f0 <calculate_crc+0x24>
    }
    return crc;
 800865c:	230e      	movs	r3, #14
 800865e:	18fb      	adds	r3, r7, r3
 8008660:	881b      	ldrh	r3, [r3, #0]
}
 8008662:	0018      	movs	r0, r3
 8008664:	46bd      	mov	sp, r7
 8008666:	b005      	add	sp, #20
 8008668:	bd90      	pop	{r4, r7, pc}
	...

0800866c <check_for_error>:

static void check_for_error(astronode_app_msg_t *p_answer)
{
 800866c:	b580      	push	{r7, lr}
 800866e:	b084      	sub	sp, #16
 8008670:	af00      	add	r7, sp, #0
 8008672:	6078      	str	r0, [r7, #4]
    uint16_t error_code = p_answer->p_payload[0] + (p_answer->p_payload[1] << 8);
 8008674:	687b      	ldr	r3, [r7, #4]
 8008676:	785b      	ldrb	r3, [r3, #1]
 8008678:	b299      	uxth	r1, r3
 800867a:	687b      	ldr	r3, [r7, #4]
 800867c:	789b      	ldrb	r3, [r3, #2]
 800867e:	b29b      	uxth	r3, r3
 8008680:	021b      	lsls	r3, r3, #8
 8008682:	b29a      	uxth	r2, r3
 8008684:	200e      	movs	r0, #14
 8008686:	183b      	adds	r3, r7, r0
 8008688:	188a      	adds	r2, r1, r2
 800868a:	801a      	strh	r2, [r3, #0]

    switch (error_code)
 800868c:	183b      	adds	r3, r7, r0
 800868e:	881b      	ldrh	r3, [r3, #0]
 8008690:	4a40      	ldr	r2, [pc, #256]	; (8008794 <check_for_error+0x128>)
 8008692:	4293      	cmp	r3, r2
 8008694:	d100      	bne.n	8008698 <check_for_error+0x2c>
 8008696:	e06f      	b.n	8008778 <check_for_error+0x10c>
 8008698:	4a3e      	ldr	r2, [pc, #248]	; (8008794 <check_for_error+0x128>)
 800869a:	4293      	cmp	r3, r2
 800869c:	dd00      	ble.n	80086a0 <check_for_error+0x34>
 800869e:	e070      	b.n	8008782 <check_for_error+0x116>
 80086a0:	4a3d      	ldr	r2, [pc, #244]	; (8008798 <check_for_error+0x12c>)
 80086a2:	4293      	cmp	r3, r2
 80086a4:	d100      	bne.n	80086a8 <check_for_error+0x3c>
 80086a6:	e062      	b.n	800876e <check_for_error+0x102>
 80086a8:	4a3b      	ldr	r2, [pc, #236]	; (8008798 <check_for_error+0x12c>)
 80086aa:	4293      	cmp	r3, r2
 80086ac:	dd00      	ble.n	80086b0 <check_for_error+0x44>
 80086ae:	e068      	b.n	8008782 <check_for_error+0x116>
 80086b0:	4a3a      	ldr	r2, [pc, #232]	; (800879c <check_for_error+0x130>)
 80086b2:	4293      	cmp	r3, r2
 80086b4:	d056      	beq.n	8008764 <check_for_error+0xf8>
 80086b6:	4a39      	ldr	r2, [pc, #228]	; (800879c <check_for_error+0x130>)
 80086b8:	4293      	cmp	r3, r2
 80086ba:	dd00      	ble.n	80086be <check_for_error+0x52>
 80086bc:	e061      	b.n	8008782 <check_for_error+0x116>
 80086be:	4a38      	ldr	r2, [pc, #224]	; (80087a0 <check_for_error+0x134>)
 80086c0:	4293      	cmp	r3, r2
 80086c2:	d04a      	beq.n	800875a <check_for_error+0xee>
 80086c4:	4a36      	ldr	r2, [pc, #216]	; (80087a0 <check_for_error+0x134>)
 80086c6:	4293      	cmp	r3, r2
 80086c8:	dc5b      	bgt.n	8008782 <check_for_error+0x116>
 80086ca:	4a36      	ldr	r2, [pc, #216]	; (80087a4 <check_for_error+0x138>)
 80086cc:	4293      	cmp	r3, r2
 80086ce:	d03f      	beq.n	8008750 <check_for_error+0xe4>
 80086d0:	4a34      	ldr	r2, [pc, #208]	; (80087a4 <check_for_error+0x138>)
 80086d2:	4293      	cmp	r3, r2
 80086d4:	dc55      	bgt.n	8008782 <check_for_error+0x116>
 80086d6:	4a34      	ldr	r2, [pc, #208]	; (80087a8 <check_for_error+0x13c>)
 80086d8:	4293      	cmp	r3, r2
 80086da:	d034      	beq.n	8008746 <check_for_error+0xda>
 80086dc:	4a32      	ldr	r2, [pc, #200]	; (80087a8 <check_for_error+0x13c>)
 80086de:	4293      	cmp	r3, r2
 80086e0:	dc4f      	bgt.n	8008782 <check_for_error+0x116>
 80086e2:	4a32      	ldr	r2, [pc, #200]	; (80087ac <check_for_error+0x140>)
 80086e4:	4293      	cmp	r3, r2
 80086e6:	d029      	beq.n	800873c <check_for_error+0xd0>
 80086e8:	4a30      	ldr	r2, [pc, #192]	; (80087ac <check_for_error+0x140>)
 80086ea:	4293      	cmp	r3, r2
 80086ec:	dc49      	bgt.n	8008782 <check_for_error+0x116>
 80086ee:	4a30      	ldr	r2, [pc, #192]	; (80087b0 <check_for_error+0x144>)
 80086f0:	4293      	cmp	r3, r2
 80086f2:	d01e      	beq.n	8008732 <check_for_error+0xc6>
 80086f4:	4a2e      	ldr	r2, [pc, #184]	; (80087b0 <check_for_error+0x144>)
 80086f6:	4293      	cmp	r3, r2
 80086f8:	dc43      	bgt.n	8008782 <check_for_error+0x116>
 80086fa:	2222      	movs	r2, #34	; 0x22
 80086fc:	32ff      	adds	r2, #255	; 0xff
 80086fe:	4293      	cmp	r3, r2
 8008700:	d012      	beq.n	8008728 <check_for_error+0xbc>
 8008702:	2291      	movs	r2, #145	; 0x91
 8008704:	0052      	lsls	r2, r2, #1
 8008706:	4293      	cmp	r3, r2
 8008708:	da3b      	bge.n	8008782 <check_for_error+0x116>
 800870a:	2b01      	cmp	r3, #1
 800870c:	d002      	beq.n	8008714 <check_for_error+0xa8>
 800870e:	2b11      	cmp	r3, #17
 8008710:	d005      	beq.n	800871e <check_for_error+0xb2>
 8008712:	e036      	b.n	8008782 <check_for_error+0x116>
    {
        case ASTRONODE_ERR_CODE_CRC_NOT_VALID:
            send_debug_logs("[ERROR] CRC_NOT_VALID : Discrepancy between provided CRC and expected CRC.");
 8008714:	4b27      	ldr	r3, [pc, #156]	; (80087b4 <check_for_error+0x148>)
 8008716:	0018      	movs	r0, r3
 8008718:	f7fa fc3a 	bl	8002f90 <send_debug_logs>
            break;
 800871c:	e036      	b.n	800878c <check_for_error+0x120>

        case ASTRONODE_ERR_CODE_LENGTH_NOT_VALID:
            send_debug_logs("[ERROR] LENGTH_NOT_VALID : Message exceeds the maximum length allowed by the given operation code.");
 800871e:	4b26      	ldr	r3, [pc, #152]	; (80087b8 <check_for_error+0x14c>)
 8008720:	0018      	movs	r0, r3
 8008722:	f7fa fc35 	bl	8002f90 <send_debug_logs>
            break;
 8008726:	e031      	b.n	800878c <check_for_error+0x120>

        case ASTRONODE_ERR_CODE_OPCODE_NOT_VALID:
            send_debug_logs("[ERROR] OPCODE_NOT_VALID : Invalid operation code used.");
 8008728:	4b24      	ldr	r3, [pc, #144]	; (80087bc <check_for_error+0x150>)
 800872a:	0018      	movs	r0, r3
 800872c:	f7fa fc30 	bl	8002f90 <send_debug_logs>
            break;
 8008730:	e02c      	b.n	800878c <check_for_error+0x120>

        case ASTRONODE_ERR_CODE_FORMAT_NOT_VALID:
            send_debug_logs("[ERROR] FORMAT_NOT_VALID : At least one of the fields (SSID, password, token) is not composed of exclusively printable standard ASCII characters (0x20 to 0x7E).");
 8008732:	4b23      	ldr	r3, [pc, #140]	; (80087c0 <check_for_error+0x154>)
 8008734:	0018      	movs	r0, r3
 8008736:	f7fa fc2b 	bl	8002f90 <send_debug_logs>
            break;
 800873a:	e027      	b.n	800878c <check_for_error+0x120>

        case ASTRONODE_ERR_CODE_FLASH_WRITING_FAILED:
            send_debug_logs("[ERROR] FLASH_WRITING_FAILED : Failed to write the Wi-Fi settings (SSID, password, token) to the flash.");
 800873c:	4b21      	ldr	r3, [pc, #132]	; (80087c4 <check_for_error+0x158>)
 800873e:	0018      	movs	r0, r3
 8008740:	f7fa fc26 	bl	8002f90 <send_debug_logs>
            break;
 8008744:	e022      	b.n	800878c <check_for_error+0x120>

        case ASTRONODE_ERR_CODE_BUFFER_FULL:
            send_debug_logs("[ERROR] BUFFER_FULL : Failed to queue the payload because the sending queue is already full.");
 8008746:	4b20      	ldr	r3, [pc, #128]	; (80087c8 <check_for_error+0x15c>)
 8008748:	0018      	movs	r0, r3
 800874a:	f7fa fc21 	bl	8002f90 <send_debug_logs>
            break;
 800874e:	e01d      	b.n	800878c <check_for_error+0x120>

        case ASTRONODE_ERR_CODE_DUPLICATE_ID:
            send_debug_logs("[ERROR] DUPLICATE_ID : Failed to queue the payload because the Payload ID provided by the asset is already in use in the Astronode queue.");
 8008750:	4b1e      	ldr	r3, [pc, #120]	; (80087cc <check_for_error+0x160>)
 8008752:	0018      	movs	r0, r3
 8008754:	f7fa fc1c 	bl	8002f90 <send_debug_logs>
            break;
 8008758:	e018      	b.n	800878c <check_for_error+0x120>

        case ASTRONODE_ERR_CODE_BUFFER_EMPTY:
            send_debug_logs("[ERROR] BUFFER_EMPTY : Failed to dequeue a payload from the buffer because the buffer is empty.");
 800875a:	4b1d      	ldr	r3, [pc, #116]	; (80087d0 <check_for_error+0x164>)
 800875c:	0018      	movs	r0, r3
 800875e:	f7fa fc17 	bl	8002f90 <send_debug_logs>
            break;
 8008762:	e013      	b.n	800878c <check_for_error+0x120>

        case ASTRONODE_ERR_CODE_INVALID_POS:
            send_debug_logs("[ERROR] INVALID_POS : Failed to update the geolocation information. Latitude and longitude fields must in the range [-90,90] degrees and [-180,180] degrees, respectively.");
 8008764:	4b1b      	ldr	r3, [pc, #108]	; (80087d4 <check_for_error+0x168>)
 8008766:	0018      	movs	r0, r3
 8008768:	f7fa fc12 	bl	8002f90 <send_debug_logs>
            break;
 800876c:	e00e      	b.n	800878c <check_for_error+0x120>

        case ASTRONODE_ERR_CODE_NO_ACK:
            send_debug_logs("[ERROR] NO_ACK : No satellite acknowledgement available for any payload.");
 800876e:	4b1a      	ldr	r3, [pc, #104]	; (80087d8 <check_for_error+0x16c>)
 8008770:	0018      	movs	r0, r3
 8008772:	f7fa fc0d 	bl	8002f90 <send_debug_logs>
            break;
 8008776:	e009      	b.n	800878c <check_for_error+0x120>

        case ASTRONODE_ERR_CODE_NO_CLEAR:
            send_debug_logs("[ERROR] NO_CLEAR : No payload ack to clear, or it was already cleared.");
 8008778:	4b18      	ldr	r3, [pc, #96]	; (80087dc <check_for_error+0x170>)
 800877a:	0018      	movs	r0, r3
 800877c:	f7fa fc08 	bl	8002f90 <send_debug_logs>
            break;
 8008780:	e004      	b.n	800878c <check_for_error+0x120>

        default:
            send_debug_logs("[ERROR] error_code is not defined.");
 8008782:	4b17      	ldr	r3, [pc, #92]	; (80087e0 <check_for_error+0x174>)
 8008784:	0018      	movs	r0, r3
 8008786:	f7fa fc03 	bl	8002f90 <send_debug_logs>
            break;
 800878a:	46c0      	nop			; (mov r8, r8)
    }
}
 800878c:	46c0      	nop			; (mov r8, r8)
 800878e:	46bd      	mov	sp, r7
 8008790:	b004      	add	sp, #16
 8008792:	bd80      	pop	{r7, pc}
 8008794:	00004601 	.word	0x00004601
 8008798:	00004501 	.word	0x00004501
 800879c:	00003501 	.word	0x00003501
 80087a0:	00002601 	.word	0x00002601
 80087a4:	00002511 	.word	0x00002511
 80087a8:	00002501 	.word	0x00002501
 80087ac:	00000611 	.word	0x00000611
 80087b0:	00000601 	.word	0x00000601
 80087b4:	0800f05c 	.word	0x0800f05c
 80087b8:	0800f0a8 	.word	0x0800f0a8
 80087bc:	0800f10c 	.word	0x0800f10c
 80087c0:	0800f144 	.word	0x0800f144
 80087c4:	0800f1e8 	.word	0x0800f1e8
 80087c8:	0800f250 	.word	0x0800f250
 80087cc:	0800f2b0 	.word	0x0800f2b0
 80087d0:	0800f33c 	.word	0x0800f33c
 80087d4:	0800f39c 	.word	0x0800f39c
 80087d8:	0800f448 	.word	0x0800f448
 80087dc:	0800f494 	.word	0x0800f494
 80087e0:	0800f4dc 	.word	0x0800f4dc

080087e4 <receive_astronode_answer>:

static return_status_t receive_astronode_answer(uint8_t *p_rx_buffer, uint16_t *p_buffer_length)
{
 80087e4:	b5b0      	push	{r4, r5, r7, lr}
 80087e6:	b086      	sub	sp, #24
 80087e8:	af00      	add	r7, sp, #0
 80087ea:	6078      	str	r0, [r7, #4]
 80087ec:	6039      	str	r1, [r7, #0]
    uint8_t rx_char = 0;
 80087ee:	230f      	movs	r3, #15
 80087f0:	18fb      	adds	r3, r7, r3
 80087f2:	2200      	movs	r2, #0
 80087f4:	701a      	strb	r2, [r3, #0]
    uint16_t length = 0;
 80087f6:	2316      	movs	r3, #22
 80087f8:	18fb      	adds	r3, r7, r3
 80087fa:	2200      	movs	r2, #0
 80087fc:	801a      	strh	r2, [r3, #0]
    uint32_t timeout_answer_received = get_systick();
 80087fe:	f7fa fc55 	bl	80030ac <get_systick>
 8008802:	0003      	movs	r3, r0
 8008804:	613b      	str	r3, [r7, #16]
    bool is_answer_received = false;
 8008806:	2315      	movs	r3, #21
 8008808:	18fb      	adds	r3, r7, r3
 800880a:	2200      	movs	r2, #0
 800880c:	701a      	strb	r2, [r3, #0]

    while (is_answer_received == false)
 800880e:	e054      	b.n	80088ba <receive_astronode_answer+0xd6>
    {
        if (is_systick_timeout_over(timeout_answer_received, ASTRONODE_ANSWER_TIMEOUT_MS))
 8008810:	4a34      	ldr	r2, [pc, #208]	; (80088e4 <receive_astronode_answer+0x100>)
 8008812:	693b      	ldr	r3, [r7, #16]
 8008814:	0011      	movs	r1, r2
 8008816:	0018      	movs	r0, r3
 8008818:	f7fa fc50 	bl	80030bc <is_systick_timeout_over>
 800881c:	1e03      	subs	r3, r0, #0
 800881e:	d005      	beq.n	800882c <receive_astronode_answer+0x48>
        {
            send_debug_logs("ERROR : Received answer timeout..");
 8008820:	4b31      	ldr	r3, [pc, #196]	; (80088e8 <receive_astronode_answer+0x104>)
 8008822:	0018      	movs	r0, r3
 8008824:	f7fa fbb4 	bl	8002f90 <send_debug_logs>
            return RS_FAILURE;
 8008828:	2300      	movs	r3, #0
 800882a:	e057      	b.n	80088dc <receive_astronode_answer+0xf8>
        }
        if (is_astronode_character_received(&rx_char))
 800882c:	250f      	movs	r5, #15
 800882e:	197b      	adds	r3, r7, r5
 8008830:	0018      	movs	r0, r3
 8008832:	f7fa fc15 	bl	8003060 <is_astronode_character_received>
 8008836:	0003      	movs	r3, r0
 8008838:	0019      	movs	r1, r3
 800883a:	2016      	movs	r0, #22
 800883c:	183b      	adds	r3, r7, r0
 800883e:	183a      	adds	r2, r7, r0
 8008840:	8812      	ldrh	r2, [r2, #0]
 8008842:	801a      	strh	r2, [r3, #0]
 8008844:	2415      	movs	r4, #21
 8008846:	193b      	adds	r3, r7, r4
 8008848:	193a      	adds	r2, r7, r4
 800884a:	7812      	ldrb	r2, [r2, #0]
 800884c:	701a      	strb	r2, [r3, #0]
 800884e:	2900      	cmp	r1, #0
 8008850:	d033      	beq.n	80088ba <receive_astronode_answer+0xd6>
        {
            if (rx_char == ASTRONODE_TRANSPORT_STX)
 8008852:	197b      	adds	r3, r7, r5
 8008854:	781b      	ldrb	r3, [r3, #0]
 8008856:	2b02      	cmp	r3, #2
 8008858:	d105      	bne.n	8008866 <receive_astronode_answer+0x82>
            {
                is_answer_received = false;
 800885a:	193b      	adds	r3, r7, r4
 800885c:	2200      	movs	r2, #0
 800885e:	701a      	strb	r2, [r3, #0]
                length = 0;
 8008860:	183b      	adds	r3, r7, r0
 8008862:	2200      	movs	r2, #0
 8008864:	801a      	strh	r2, [r3, #0]
            }

            p_rx_buffer[length] = rx_char;
 8008866:	2116      	movs	r1, #22
 8008868:	187b      	adds	r3, r7, r1
 800886a:	881b      	ldrh	r3, [r3, #0]
 800886c:	687a      	ldr	r2, [r7, #4]
 800886e:	18d3      	adds	r3, r2, r3
 8008870:	220f      	movs	r2, #15
 8008872:	18ba      	adds	r2, r7, r2
 8008874:	7812      	ldrb	r2, [r2, #0]
 8008876:	701a      	strb	r2, [r3, #0]
            length++;
 8008878:	187b      	adds	r3, r7, r1
 800887a:	881a      	ldrh	r2, [r3, #0]
 800887c:	187b      	adds	r3, r7, r1
 800887e:	3201      	adds	r2, #1
 8008880:	801a      	strh	r2, [r3, #0]

            if (length > ASTRONODE_MAX_LENGTH_RESPONSE)
 8008882:	187b      	adds	r3, r7, r1
 8008884:	881b      	ldrh	r3, [r3, #0]
 8008886:	2bb2      	cmp	r3, #178	; 0xb2
 8008888:	d905      	bls.n	8008896 <receive_astronode_answer+0xb2>
            {
                send_debug_logs("ERROR : Message received from the Astronode exceed maximum length allowed.");
 800888a:	4b18      	ldr	r3, [pc, #96]	; (80088ec <receive_astronode_answer+0x108>)
 800888c:	0018      	movs	r0, r3
 800888e:	f7fa fb7f 	bl	8002f90 <send_debug_logs>
                return RS_FAILURE;
 8008892:	2300      	movs	r3, #0
 8008894:	e022      	b.n	80088dc <receive_astronode_answer+0xf8>
            }

            if (rx_char == ASTRONODE_TRANSPORT_ETX)
 8008896:	230f      	movs	r3, #15
 8008898:	18fb      	adds	r3, r7, r3
 800889a:	781b      	ldrb	r3, [r3, #0]
 800889c:	2b03      	cmp	r3, #3
 800889e:	d10c      	bne.n	80088ba <receive_astronode_answer+0xd6>
            {
                if (length > 1)
 80088a0:	2216      	movs	r2, #22
 80088a2:	18bb      	adds	r3, r7, r2
 80088a4:	881b      	ldrh	r3, [r3, #0]
 80088a6:	2b01      	cmp	r3, #1
 80088a8:	d907      	bls.n	80088ba <receive_astronode_answer+0xd6>
                {
                    *p_buffer_length = length;
 80088aa:	683b      	ldr	r3, [r7, #0]
 80088ac:	18ba      	adds	r2, r7, r2
 80088ae:	8812      	ldrh	r2, [r2, #0]
 80088b0:	801a      	strh	r2, [r3, #0]
                    is_answer_received = true;
 80088b2:	2315      	movs	r3, #21
 80088b4:	18fb      	adds	r3, r7, r3
 80088b6:	2201      	movs	r2, #1
 80088b8:	701a      	strb	r2, [r3, #0]
    while (is_answer_received == false)
 80088ba:	2315      	movs	r3, #21
 80088bc:	18fb      	adds	r3, r7, r3
 80088be:	781b      	ldrb	r3, [r3, #0]
 80088c0:	2201      	movs	r2, #1
 80088c2:	4053      	eors	r3, r2
 80088c4:	b2db      	uxtb	r3, r3
 80088c6:	2b00      	cmp	r3, #0
 80088c8:	d1a2      	bne.n	8008810 <receive_astronode_answer+0x2c>
                }
            }
        }
    }
    send_debug_logs("Message received from the Astronode <-- ");
 80088ca:	4b09      	ldr	r3, [pc, #36]	; (80088f0 <receive_astronode_answer+0x10c>)
 80088cc:	0018      	movs	r0, r3
 80088ce:	f7fa fb5f 	bl	8002f90 <send_debug_logs>
    send_debug_logs((char *) p_rx_buffer);
 80088d2:	687b      	ldr	r3, [r7, #4]
 80088d4:	0018      	movs	r0, r3
 80088d6:	f7fa fb5b 	bl	8002f90 <send_debug_logs>

    return RS_SUCCESS;
 80088da:	2301      	movs	r3, #1
}
 80088dc:	0018      	movs	r0, r3
 80088de:	46bd      	mov	sp, r7
 80088e0:	b006      	add	sp, #24
 80088e2:	bdb0      	pop	{r4, r5, r7, pc}
 80088e4:	000005dc 	.word	0x000005dc
 80088e8:	0800f500 	.word	0x0800f500
 80088ec:	0800f524 	.word	0x0800f524
 80088f0:	0800f570 	.word	0x0800f570

080088f4 <uint8_to_ascii_buffer>:

static void uint8_to_ascii_buffer(const uint8_t value, uint8_t *p_target_buffer)
{
 80088f4:	b580      	push	{r7, lr}
 80088f6:	b082      	sub	sp, #8
 80088f8:	af00      	add	r7, sp, #0
 80088fa:	0002      	movs	r2, r0
 80088fc:	6039      	str	r1, [r7, #0]
 80088fe:	1dfb      	adds	r3, r7, #7
 8008900:	701a      	strb	r2, [r3, #0]
    p_target_buffer[0] = g_ascii_lookup[value >> 4];
 8008902:	1dfb      	adds	r3, r7, #7
 8008904:	781b      	ldrb	r3, [r3, #0]
 8008906:	091b      	lsrs	r3, r3, #4
 8008908:	b2db      	uxtb	r3, r3
 800890a:	001a      	movs	r2, r3
 800890c:	4b08      	ldr	r3, [pc, #32]	; (8008930 <uint8_to_ascii_buffer+0x3c>)
 800890e:	5c9a      	ldrb	r2, [r3, r2]
 8008910:	683b      	ldr	r3, [r7, #0]
 8008912:	701a      	strb	r2, [r3, #0]
    p_target_buffer[1] = g_ascii_lookup[value & 0x0F];
 8008914:	1dfb      	adds	r3, r7, #7
 8008916:	781b      	ldrb	r3, [r3, #0]
 8008918:	220f      	movs	r2, #15
 800891a:	401a      	ands	r2, r3
 800891c:	683b      	ldr	r3, [r7, #0]
 800891e:	3301      	adds	r3, #1
 8008920:	4903      	ldr	r1, [pc, #12]	; (8008930 <uint8_to_ascii_buffer+0x3c>)
 8008922:	5c8a      	ldrb	r2, [r1, r2]
 8008924:	701a      	strb	r2, [r3, #0]
}
 8008926:	46c0      	nop			; (mov r8, r8)
 8008928:	46bd      	mov	sp, r7
 800892a:	b002      	add	sp, #8
 800892c:	bd80      	pop	{r7, pc}
 800892e:	46c0      	nop			; (mov r8, r8)
 8008930:	0800f8b8 	.word	0x0800f8b8

08008934 <my_astro_add_payload_2_queue>:
 */
#include "my_astronode.h"


bool my_astro_add_payload_2_queue ( uint16_t id , char* payload )
{
 8008934:	b580      	push	{r7, lr}
 8008936:	b084      	sub	sp, #16
 8008938:	af00      	add	r7, sp, #0
 800893a:	0002      	movs	r2, r0
 800893c:	6039      	str	r1, [r7, #0]
 800893e:	1dbb      	adds	r3, r7, #6
 8008940:	801a      	strh	r2, [r3, #0]
	size_t l = strlen ( payload ) ;
 8008942:	683b      	ldr	r3, [r7, #0]
 8008944:	0018      	movs	r0, r3
 8008946:	f7f7 fbdd 	bl	8000104 <strlen>
 800894a:	0003      	movs	r3, r0
 800894c:	60fb      	str	r3, [r7, #12]
	if ( l <= ASTRONODE_APP_PAYLOAD_MAX_LEN_BYTES )
 800894e:	68fb      	ldr	r3, [r7, #12]
 8008950:	2ba0      	cmp	r3, #160	; 0xa0
 8008952:	d80b      	bhi.n	800896c <my_astro_add_payload_2_queue+0x38>
	{
		if ( astronode_send_pld_er ( id , payload , l ) )
 8008954:	68fb      	ldr	r3, [r7, #12]
 8008956:	b29a      	uxth	r2, r3
 8008958:	6839      	ldr	r1, [r7, #0]
 800895a:	1dbb      	adds	r3, r7, #6
 800895c:	881b      	ldrh	r3, [r3, #0]
 800895e:	0018      	movs	r0, r3
 8008960:	f7fe fede 	bl	8007720 <astronode_send_pld_er>
 8008964:	1e03      	subs	r3, r0, #0
 8008966:	d005      	beq.n	8008974 <my_astro_add_payload_2_queue+0x40>
		{
			return true ;
 8008968:	2301      	movs	r3, #1
 800896a:	e004      	b.n	8008976 <my_astro_add_payload_2_queue+0x42>
		}
	}
	else
	{
		send_debug_logs ( "my_astronode.c,my_astro_add_payload_2_queue,Payload exceeded ASTRONODE_APP_PAYLOAD_MAX_LEN_BYTES value." ) ;
 800896c:	4b04      	ldr	r3, [pc, #16]	; (8008980 <my_astro_add_payload_2_queue+0x4c>)
 800896e:	0018      	movs	r0, r3
 8008970:	f7fa fb0e 	bl	8002f90 <send_debug_logs>
	}
	return false ;
 8008974:	2300      	movs	r3, #0
}
 8008976:	0018      	movs	r0, r3
 8008978:	46bd      	mov	sp, r7
 800897a:	b004      	add	sp, #16
 800897c:	bd80      	pop	{r7, pc}
 800897e:	46c0      	nop			; (mov r8, r8)
 8008980:	0800f59c 	.word	0x0800f59c

08008984 <my_astro_read_evt_reg>:
bool my_astro_read_evt_reg ( void )
{
 8008984:	b580      	push	{r7, lr}
 8008986:	af00      	add	r7, sp, #0
	send_debug_logs ( "my_astronode.c,my_astro_read_evt_reg,evt pin is high." ) ;
 8008988:	4b15      	ldr	r3, [pc, #84]	; (80089e0 <my_astro_read_evt_reg+0x5c>)
 800898a:	0018      	movs	r0, r3
 800898c:	f7fa fb00 	bl	8002f90 <send_debug_logs>
	astronode_send_evt_rr () ;
 8008990:	f7fe fd86 	bl	80074a0 <astronode_send_evt_rr>
	if (is_sak_available () )
 8008994:	f7ff fb38 	bl	8008008 <is_sak_available>
 8008998:	1e03      	subs	r3, r0, #0
 800899a:	d007      	beq.n	80089ac <my_astro_read_evt_reg+0x28>
	{
	  astronode_send_sak_rr () ;
 800899c:	f7ff f844 	bl	8007a28 <astronode_send_sak_rr>
	  astronode_send_sak_cr () ;
 80089a0:	f7ff f898 	bl	8007ad4 <astronode_send_sak_cr>
	  send_debug_logs ( "my_astronode.c,my_astro_read_evt_reg,message has been acknowledged." ) ;
 80089a4:	4b0f      	ldr	r3, [pc, #60]	; (80089e4 <my_astro_read_evt_reg+0x60>)
 80089a6:	0018      	movs	r0, r3
 80089a8:	f7fa faf2 	bl	8002f90 <send_debug_logs>
	  //astronode_send_per_rr () ;
	}
	if ( is_astronode_reset () )
 80089ac:	f7ff fb36 	bl	800801c <is_astronode_reset>
 80089b0:	1e03      	subs	r3, r0, #0
 80089b2:	d005      	beq.n	80089c0 <my_astro_read_evt_reg+0x3c>
	{
	  send_debug_logs ( "my_astronode.c,my_astro_read_evt_reg,terminal has been reset." ) ;
 80089b4:	4b0c      	ldr	r3, [pc, #48]	; (80089e8 <my_astro_read_evt_reg+0x64>)
 80089b6:	0018      	movs	r0, r3
 80089b8:	f7fa faea 	bl	8002f90 <send_debug_logs>
	  astronode_send_res_cr () ;
 80089bc:	f7fe ff90 	bl	80078e0 <astronode_send_res_cr>
	}
	if ( is_command_available () )
 80089c0:	f7ff fb36 	bl	8008030 <is_command_available>
 80089c4:	1e03      	subs	r3, r0, #0
 80089c6:	d007      	beq.n	80089d8 <my_astro_read_evt_reg+0x54>
	{
	  send_debug_logs ( "my_astronode.c,my_astro_read_evt_reg,unicast command is available" ) ;
 80089c8:	4b08      	ldr	r3, [pc, #32]	; (80089ec <my_astro_read_evt_reg+0x68>)
 80089ca:	0018      	movs	r0, r3
 80089cc:	f7fa fae0 	bl	8002f90 <send_debug_logs>
	  astronode_send_cmd_rr () ;
 80089d0:	f7ff f9aa 	bl	8007d28 <astronode_send_cmd_rr>
	  astronode_send_cmd_cr () ;
 80089d4:	f7ff f968 	bl	8007ca8 <astronode_send_cmd_cr>
	}
	return true ;
 80089d8:	2301      	movs	r3, #1
}
 80089da:	0018      	movs	r0, r3
 80089dc:	46bd      	mov	sp, r7
 80089de:	bd80      	pop	{r7, pc}
 80089e0:	0800f604 	.word	0x0800f604
 80089e4:	0800f63c 	.word	0x0800f63c
 80089e8:	0800f680 	.word	0x0800f680
 80089ec:	0800f6c0 	.word	0x0800f6c0

080089f0 <my_astro_write_coordinates>:
	//astronode_send_per_rr () ;
	return true ;
}

void my_astro_write_coordinates ( int32_t astro_geo_wr_latitude , int32_t astro_geo_wr_longitude )
{
 80089f0:	b580      	push	{r7, lr}
 80089f2:	b082      	sub	sp, #8
 80089f4:	af00      	add	r7, sp, #0
 80089f6:	6078      	str	r0, [r7, #4]
 80089f8:	6039      	str	r1, [r7, #0]
	astronode_send_geo_wr ( astro_geo_wr_latitude , astro_geo_wr_longitude ) ;
 80089fa:	683a      	ldr	r2, [r7, #0]
 80089fc:	687b      	ldr	r3, [r7, #4]
 80089fe:	0011      	movs	r1, r2
 8008a00:	0018      	movs	r0, r3
 8008a02:	f7fe fdcd 	bl	80075a0 <astronode_send_geo_wr>
}
 8008a06:	46c0      	nop			; (mov r8, r8)
 8008a08:	46bd      	mov	sp, r7
 8008a0a:	b002      	add	sp, #8
 8008a0c:	bd80      	pop	{r7, pc}
	...

08008a10 <my_rtc_get_dt>:
** Synopsis: $<TalkerID>RMC,<UTC>,<Status>,<Lat>,<N/S>,<Lon>,<E/W>,<SOG>,<COG>,<Date>,<MagVar>,<MagVarDir>,<ModeInd>,<NavStatus>*<Checksum><CR><LF>
** m message example from Quectel L86: "$GPRMC,085151.187,V,,,,,0.00,0.00,291023,,,N,V*3A". \r\n have been wiped out.
*/

void my_rtc_get_dt ( RTC_DateTypeDef* d , RTC_TimeTypeDef* t )
{
 8008a10:	b580      	push	{r7, lr}
 8008a12:	b082      	sub	sp, #8
 8008a14:	af00      	add	r7, sp, #0
 8008a16:	6078      	str	r0, [r7, #4]
 8008a18:	6039      	str	r1, [r7, #0]
	HAL_RTC_GetDate ( &hrtc , d , RTC_FORMAT_BIN ) ;
 8008a1a:	6879      	ldr	r1, [r7, #4]
 8008a1c:	4b07      	ldr	r3, [pc, #28]	; (8008a3c <my_rtc_get_dt+0x2c>)
 8008a1e:	2200      	movs	r2, #0
 8008a20:	0018      	movs	r0, r3
 8008a22:	f7fc fcdd 	bl	80053e0 <HAL_RTC_GetDate>
	HAL_RTC_GetTime ( &hrtc , t , RTC_FORMAT_BIN ) ;
 8008a26:	6839      	ldr	r1, [r7, #0]
 8008a28:	4b04      	ldr	r3, [pc, #16]	; (8008a3c <my_rtc_get_dt+0x2c>)
 8008a2a:	2200      	movs	r2, #0
 8008a2c:	0018      	movs	r0, r3
 8008a2e:	f7fc fbe9 	bl	8005204 <HAL_RTC_GetTime>
}
 8008a32:	46c0      	nop			; (mov r8, r8)
 8008a34:	46bd      	mov	sp, r7
 8008a36:	b002      	add	sp, #8
 8008a38:	bd80      	pop	{r7, pc}
 8008a3a:	46c0      	nop			; (mov r8, r8)
 8008a3c:	200006ec 	.word	0x200006ec

08008a40 <my_rtc_get_dt_s>:
uint16_t my_rtc_get_dt_s ( char* dt_s )
{
 8008a40:	b5f0      	push	{r4, r5, r6, r7, lr}
 8008a42:	b08d      	sub	sp, #52	; 0x34
 8008a44:	af04      	add	r7, sp, #16
 8008a46:	6078      	str	r0, [r7, #4]
	RTC_DateTypeDef gDate;
	RTC_TimeTypeDef gTime;

	//char cdt[20];

	HAL_RTC_GetTime ( &hrtc , &gTime , RTC_FORMAT_BIN ) ;
 8008a48:	2508      	movs	r5, #8
 8008a4a:	1979      	adds	r1, r7, r5
 8008a4c:	4b1b      	ldr	r3, [pc, #108]	; (8008abc <my_rtc_get_dt_s+0x7c>)
 8008a4e:	2200      	movs	r2, #0
 8008a50:	0018      	movs	r0, r3
 8008a52:	f7fc fbd7 	bl	8005204 <HAL_RTC_GetTime>
	HAL_RTC_GetDate ( &hrtc , &gDate , RTC_FORMAT_BIN ) ;
 8008a56:	241c      	movs	r4, #28
 8008a58:	1939      	adds	r1, r7, r4
 8008a5a:	4b18      	ldr	r3, [pc, #96]	; (8008abc <my_rtc_get_dt_s+0x7c>)
 8008a5c:	2200      	movs	r2, #0
 8008a5e:	0018      	movs	r0, r3
 8008a60:	f7fc fcbe 	bl	80053e0 <HAL_RTC_GetDate>

	sprintf ( dt_s , "%4d.%02d.%02d %02d:%02d:%02d" , 2000 + gDate.Year , gDate.Month , gDate.Date , gTime.Hours , gTime.Minutes , gTime.Seconds ) ;
 8008a64:	0021      	movs	r1, r4
 8008a66:	187b      	adds	r3, r7, r1
 8008a68:	78db      	ldrb	r3, [r3, #3]
 8008a6a:	22fa      	movs	r2, #250	; 0xfa
 8008a6c:	00d2      	lsls	r2, r2, #3
 8008a6e:	189a      	adds	r2, r3, r2
 8008a70:	187b      	adds	r3, r7, r1
 8008a72:	785b      	ldrb	r3, [r3, #1]
 8008a74:	469c      	mov	ip, r3
 8008a76:	187b      	adds	r3, r7, r1
 8008a78:	789b      	ldrb	r3, [r3, #2]
 8008a7a:	001c      	movs	r4, r3
 8008a7c:	0028      	movs	r0, r5
 8008a7e:	183b      	adds	r3, r7, r0
 8008a80:	781b      	ldrb	r3, [r3, #0]
 8008a82:	001d      	movs	r5, r3
 8008a84:	183b      	adds	r3, r7, r0
 8008a86:	785b      	ldrb	r3, [r3, #1]
 8008a88:	001e      	movs	r6, r3
 8008a8a:	183b      	adds	r3, r7, r0
 8008a8c:	789b      	ldrb	r3, [r3, #2]
 8008a8e:	490c      	ldr	r1, [pc, #48]	; (8008ac0 <my_rtc_get_dt_s+0x80>)
 8008a90:	6878      	ldr	r0, [r7, #4]
 8008a92:	9303      	str	r3, [sp, #12]
 8008a94:	9602      	str	r6, [sp, #8]
 8008a96:	9501      	str	r5, [sp, #4]
 8008a98:	9400      	str	r4, [sp, #0]
 8008a9a:	4663      	mov	r3, ip
 8008a9c:	f000 fb94 	bl	80091c8 <sprintf>

	return (uint16_t) ( 2000 + gDate.Year ) ;
 8008aa0:	211c      	movs	r1, #28
 8008aa2:	187b      	adds	r3, r7, r1
 8008aa4:	78db      	ldrb	r3, [r3, #3]
 8008aa6:	b29b      	uxth	r3, r3
 8008aa8:	22fa      	movs	r2, #250	; 0xfa
 8008aaa:	00d2      	lsls	r2, r2, #3
 8008aac:	4694      	mov	ip, r2
 8008aae:	4463      	add	r3, ip
 8008ab0:	b29b      	uxth	r3, r3
}
 8008ab2:	0018      	movs	r0, r3
 8008ab4:	46bd      	mov	sp, r7
 8008ab6:	b009      	add	sp, #36	; 0x24
 8008ab8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8008aba:	46c0      	nop			; (mov r8, r8)
 8008abc:	200006ec 	.word	0x200006ec
 8008ac0:	0800f704 	.word	0x0800f704

08008ac4 <my_rtc_set_alarm>:
bool my_rtc_set_alarm ( uint32_t s )
{
 8008ac4:	b5f0      	push	{r4, r5, r6, r7, lr}
 8008ac6:	b0ab      	sub	sp, #172	; 0xac
 8008ac8:	af02      	add	r7, sp, #8
 8008aca:	6078      	str	r0, [r7, #4]
	const char* cf = "my_rtc.c,my_rtc_set_alarm," ;
 8008acc:	4b49      	ldr	r3, [pc, #292]	; (8008bf4 <my_rtc_set_alarm+0x130>)
 8008ace:	229c      	movs	r2, #156	; 0x9c
 8008ad0:	18b9      	adds	r1, r7, r2
 8008ad2:	600b      	str	r3, [r1, #0]
	const char* cdt = "dt," ;
 8008ad4:	4b48      	ldr	r3, [pc, #288]	; (8008bf8 <my_rtc_set_alarm+0x134>)
 8008ad6:	2498      	movs	r4, #152	; 0x98
 8008ad8:	1939      	adds	r1, r7, r4
 8008ada:	600b      	str	r3, [r1, #0]
	const char* cal = "al," ;
 8008adc:	4b47      	ldr	r3, [pc, #284]	; (8008bfc <my_rtc_set_alarm+0x138>)
 8008ade:	2194      	movs	r1, #148	; 0x94
 8008ae0:	1878      	adds	r0, r7, r1
 8008ae2:	6003      	str	r3, [r0, #0]
	char  rtc_dt_s[20] ;
	char  m[52] ;

	tim_seconds = 0 ;
 8008ae4:	4b46      	ldr	r3, [pc, #280]	; (8008c00 <my_rtc_set_alarm+0x13c>)
 8008ae6:	2200      	movs	r2, #0
 8008ae8:	801a      	strh	r2, [r3, #0]

	RTC_DateTypeDef 	d ;
	RTC_TimeTypeDef 	t ;
	RTC_AlarmTypeDef	a ;

	my_rtc_get_dt ( &d , &t ) ;
 8008aea:	2530      	movs	r5, #48	; 0x30
 8008aec:	197a      	adds	r2, r7, r5
 8008aee:	2644      	movs	r6, #68	; 0x44
 8008af0:	19bb      	adds	r3, r7, r6
 8008af2:	0011      	movs	r1, r2
 8008af4:	0018      	movs	r0, r3
 8008af6:	f7ff ff8b 	bl	8008a10 <my_rtc_get_dt>
	my_rtc_get_dt_s ( rtc_dt_s ) ; // Bez tej linii będzie błąd funkcji, która zacznie ustawiać alarm na wartość poprzedniego alarmu i wszystko się zawiesi
 8008afa:	237c      	movs	r3, #124	; 0x7c
 8008afc:	18fb      	adds	r3, r7, r3
 8008afe:	0018      	movs	r0, r3
 8008b00:	f7ff ff9e 	bl	8008a40 <my_rtc_get_dt_s>
	sprintf ( m , "%s%s%s" , cf , cdt , rtc_dt_s ) ;
 8008b04:	1938      	adds	r0, r7, r4
 8008b06:	6804      	ldr	r4, [r0, #0]
 8008b08:	229c      	movs	r2, #156	; 0x9c
 8008b0a:	18b8      	adds	r0, r7, r2
 8008b0c:	6802      	ldr	r2, [r0, #0]
 8008b0e:	493d      	ldr	r1, [pc, #244]	; (8008c04 <my_rtc_set_alarm+0x140>)
 8008b10:	2048      	movs	r0, #72	; 0x48
 8008b12:	1838      	adds	r0, r7, r0
 8008b14:	237c      	movs	r3, #124	; 0x7c
 8008b16:	18fb      	adds	r3, r7, r3
 8008b18:	9300      	str	r3, [sp, #0]
 8008b1a:	0023      	movs	r3, r4
 8008b1c:	f000 fb54 	bl	80091c8 <sprintf>
	send_debug_logs ( m ) ;
 8008b20:	2048      	movs	r0, #72	; 0x48
 8008b22:	183b      	adds	r3, r7, r0
 8008b24:	0018      	movs	r0, r3
 8008b26:	f7fa fa33 	bl	8002f90 <send_debug_logs>
	uint32_t alarm_ts = my_conv_rtc2timestamp ( &d , &t ) + s ;
 8008b2a:	197a      	adds	r2, r7, r5
 8008b2c:	19bb      	adds	r3, r7, r6
 8008b2e:	0011      	movs	r1, r2
 8008b30:	0018      	movs	r0, r3
 8008b32:	f000 f86b 	bl	8008c0c <my_conv_rtc2timestamp>
 8008b36:	0002      	movs	r2, r0
 8008b38:	687b      	ldr	r3, [r7, #4]
 8008b3a:	189b      	adds	r3, r3, r2
 8008b3c:	2490      	movs	r4, #144	; 0x90
 8008b3e:	1938      	adds	r0, r7, r4
 8008b40:	6003      	str	r3, [r0, #0]
	my_conv_timestamp2rtc ( alarm_ts , &d , &t ) ;
 8008b42:	197a      	adds	r2, r7, r5
 8008b44:	19b9      	adds	r1, r7, r6
 8008b46:	193c      	adds	r4, r7, r4
 8008b48:	6823      	ldr	r3, [r4, #0]
 8008b4a:	0018      	movs	r0, r3
 8008b4c:	f000 f8d2 	bl	8008cf4 <my_conv_timestamp2rtc>

	/** Enable the Alarm A		  */
	a.AlarmTime.Hours = t.Hours ;
 8008b50:	002c      	movs	r4, r5
 8008b52:	193b      	adds	r3, r7, r4
 8008b54:	781a      	ldrb	r2, [r3, #0]
 8008b56:	2108      	movs	r1, #8
 8008b58:	187b      	adds	r3, r7, r1
 8008b5a:	701a      	strb	r2, [r3, #0]
	a.AlarmTime.Minutes = t.Minutes ;
 8008b5c:	193b      	adds	r3, r7, r4
 8008b5e:	785a      	ldrb	r2, [r3, #1]
 8008b60:	187b      	adds	r3, r7, r1
 8008b62:	705a      	strb	r2, [r3, #1]
	a.AlarmTime.Seconds = t.Seconds ;
 8008b64:	193b      	adds	r3, r7, r4
 8008b66:	789a      	ldrb	r2, [r3, #2]
 8008b68:	187b      	adds	r3, r7, r1
 8008b6a:	709a      	strb	r2, [r3, #2]
	a.AlarmTime.SubSeconds = 0;
 8008b6c:	0008      	movs	r0, r1
 8008b6e:	183b      	adds	r3, r7, r0
 8008b70:	2200      	movs	r2, #0
 8008b72:	605a      	str	r2, [r3, #4]
	a.AlarmTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE ;
 8008b74:	183b      	adds	r3, r7, r0
 8008b76:	2200      	movs	r2, #0
 8008b78:	60da      	str	r2, [r3, #12]
	a.AlarmTime.StoreOperation = RTC_STOREOPERATION_RESET ;
 8008b7a:	183b      	adds	r3, r7, r0
 8008b7c:	2200      	movs	r2, #0
 8008b7e:	611a      	str	r2, [r3, #16]
	a.AlarmMask = RTC_ALARMMASK_NONE ;
 8008b80:	183b      	adds	r3, r7, r0
 8008b82:	2200      	movs	r2, #0
 8008b84:	615a      	str	r2, [r3, #20]
	a.AlarmSubSecondMask = RTC_ALARMSUBSECONDMASK_ALL ;
 8008b86:	183b      	adds	r3, r7, r0
 8008b88:	2200      	movs	r2, #0
 8008b8a:	619a      	str	r2, [r3, #24]
	a.AlarmDateWeekDaySel = RTC_ALARMDATEWEEKDAYSEL_DATE ;
 8008b8c:	183b      	adds	r3, r7, r0
 8008b8e:	2200      	movs	r2, #0
 8008b90:	61da      	str	r2, [r3, #28]
	a.AlarmDateWeekDay = d.Date ;
 8008b92:	19bb      	adds	r3, r7, r6
 8008b94:	7899      	ldrb	r1, [r3, #2]
 8008b96:	183b      	adds	r3, r7, r0
 8008b98:	2220      	movs	r2, #32
 8008b9a:	5499      	strb	r1, [r3, r2]
	a.Alarm = RTC_ALARM_A ;
 8008b9c:	183b      	adds	r3, r7, r0
 8008b9e:	2280      	movs	r2, #128	; 0x80
 8008ba0:	0052      	lsls	r2, r2, #1
 8008ba2:	625a      	str	r2, [r3, #36]	; 0x24
	if ( HAL_RTC_SetAlarm_IT ( &hrtc , &a , RTC_FORMAT_BIN ) == HAL_OK )
 8008ba4:	1839      	adds	r1, r7, r0
 8008ba6:	4b18      	ldr	r3, [pc, #96]	; (8008c08 <my_rtc_set_alarm+0x144>)
 8008ba8:	2200      	movs	r2, #0
 8008baa:	0018      	movs	r0, r3
 8008bac:	f7fc fc66 	bl	800547c <HAL_RTC_SetAlarm_IT>
 8008bb0:	1e03      	subs	r3, r0, #0
 8008bb2:	d11a      	bne.n	8008bea <my_rtc_set_alarm+0x126>
	{
		my_conv_dt_2_dts ( &d , &t , rtc_dt_s ) ;
 8008bb4:	257c      	movs	r5, #124	; 0x7c
 8008bb6:	197a      	adds	r2, r7, r5
 8008bb8:	1939      	adds	r1, r7, r4
 8008bba:	19bb      	adds	r3, r7, r6
 8008bbc:	0018      	movs	r0, r3
 8008bbe:	f000 f95b 	bl	8008e78 <my_conv_dt_2_dts>
		sprintf ( m , "%s%s%s" , cf , cal , rtc_dt_s ) ;
 8008bc2:	2194      	movs	r1, #148	; 0x94
 8008bc4:	187b      	adds	r3, r7, r1
 8008bc6:	681c      	ldr	r4, [r3, #0]
 8008bc8:	229c      	movs	r2, #156	; 0x9c
 8008bca:	18bb      	adds	r3, r7, r2
 8008bcc:	681a      	ldr	r2, [r3, #0]
 8008bce:	490d      	ldr	r1, [pc, #52]	; (8008c04 <my_rtc_set_alarm+0x140>)
 8008bd0:	2648      	movs	r6, #72	; 0x48
 8008bd2:	19b8      	adds	r0, r7, r6
 8008bd4:	197b      	adds	r3, r7, r5
 8008bd6:	9300      	str	r3, [sp, #0]
 8008bd8:	0023      	movs	r3, r4
 8008bda:	f000 faf5 	bl	80091c8 <sprintf>
		send_debug_logs ( m ) ;
 8008bde:	19bb      	adds	r3, r7, r6
 8008be0:	0018      	movs	r0, r3
 8008be2:	f7fa f9d5 	bl	8002f90 <send_debug_logs>
		return true ;
 8008be6:	2301      	movs	r3, #1
 8008be8:	e000      	b.n	8008bec <my_rtc_set_alarm+0x128>
	}
	return false ;
 8008bea:	2300      	movs	r3, #0
}
 8008bec:	0018      	movs	r0, r3
 8008bee:	46bd      	mov	sp, r7
 8008bf0:	b029      	add	sp, #164	; 0xa4
 8008bf2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8008bf4:	0800f724 	.word	0x0800f724
 8008bf8:	0800f740 	.word	0x0800f740
 8008bfc:	0800f744 	.word	0x0800f744
 8008c00:	20000934 	.word	0x20000934
 8008c04:	0800f748 	.word	0x0800f748
 8008c08:	200006ec 	.word	0x200006ec

08008c0c <my_conv_rtc2timestamp>:
	return i ;
}

// Function converting RTC date and time to Unix timestamp (ts): number of seconds after the Epoch (1970.01.01).
uint32_t my_conv_rtc2timestamp ( RTC_DateTypeDef* d , RTC_TimeTypeDef* t )
{
 8008c0c:	b580      	push	{r7, lr}
 8008c0e:	b086      	sub	sp, #24
 8008c10:	af00      	add	r7, sp, #0
 8008c12:	6078      	str	r0, [r7, #4]
 8008c14:	6039      	str	r1, [r7, #0]
    // Number of days in months (considering leap years).
    static const uint8_t monthDays[12] = { 31 , 28 , 31 , 30 , 31 , 30 , 31 , 31 , 30 , 31 , 30 , 31 } ;

    // Conversion of years into days.
    uint32_t years = d->Year + 2000;  // RTC starts from 20
 8008c16:	687b      	ldr	r3, [r7, #4]
 8008c18:	78db      	ldrb	r3, [r3, #3]
 8008c1a:	22fa      	movs	r2, #250	; 0xfa
 8008c1c:	00d2      	lsls	r2, r2, #3
 8008c1e:	4694      	mov	ip, r2
 8008c20:	4463      	add	r3, ip
 8008c22:	60fb      	str	r3, [r7, #12]
    uint32_t days = ( years - 1970 ) * 365 + ( ( years - 1969 ) / 4 ) ;  // Days for years and leap years.
 8008c24:	68fa      	ldr	r2, [r7, #12]
 8008c26:	0013      	movs	r3, r2
 8008c28:	00db      	lsls	r3, r3, #3
 8008c2a:	189b      	adds	r3, r3, r2
 8008c2c:	00db      	lsls	r3, r3, #3
 8008c2e:	189b      	adds	r3, r3, r2
 8008c30:	009a      	lsls	r2, r3, #2
 8008c32:	189a      	adds	r2, r3, r2
 8008c34:	68fb      	ldr	r3, [r7, #12]
 8008c36:	492c      	ldr	r1, [pc, #176]	; (8008ce8 <my_conv_rtc2timestamp+0xdc>)
 8008c38:	468c      	mov	ip, r1
 8008c3a:	4463      	add	r3, ip
 8008c3c:	089b      	lsrs	r3, r3, #2
 8008c3e:	18d3      	adds	r3, r2, r3
 8008c40:	4a2a      	ldr	r2, [pc, #168]	; (8008cec <my_conv_rtc2timestamp+0xe0>)
 8008c42:	4694      	mov	ip, r2
 8008c44:	4463      	add	r3, ip
 8008c46:	617b      	str	r3, [r7, #20]
    // Conversion of months into days.
    for ( int i = 0 ; i < d->Month - 1 ; i++ )
 8008c48:	2300      	movs	r3, #0
 8008c4a:	613b      	str	r3, [r7, #16]
 8008c4c:	e00a      	b.n	8008c64 <my_conv_rtc2timestamp+0x58>
    {
        days += monthDays[i] ;
 8008c4e:	4a28      	ldr	r2, [pc, #160]	; (8008cf0 <my_conv_rtc2timestamp+0xe4>)
 8008c50:	693b      	ldr	r3, [r7, #16]
 8008c52:	18d3      	adds	r3, r2, r3
 8008c54:	781b      	ldrb	r3, [r3, #0]
 8008c56:	001a      	movs	r2, r3
 8008c58:	697b      	ldr	r3, [r7, #20]
 8008c5a:	189b      	adds	r3, r3, r2
 8008c5c:	617b      	str	r3, [r7, #20]
    for ( int i = 0 ; i < d->Month - 1 ; i++ )
 8008c5e:	693b      	ldr	r3, [r7, #16]
 8008c60:	3301      	adds	r3, #1
 8008c62:	613b      	str	r3, [r7, #16]
 8008c64:	687b      	ldr	r3, [r7, #4]
 8008c66:	785b      	ldrb	r3, [r3, #1]
 8008c68:	3b01      	subs	r3, #1
 8008c6a:	693a      	ldr	r2, [r7, #16]
 8008c6c:	429a      	cmp	r2, r3
 8008c6e:	dbee      	blt.n	8008c4e <my_conv_rtc2timestamp+0x42>
    }
    if ( d->Month > 2 && my_conv_is_leap_year ( years ) )
 8008c70:	687b      	ldr	r3, [r7, #4]
 8008c72:	785b      	ldrb	r3, [r3, #1]
 8008c74:	2b02      	cmp	r3, #2
 8008c76:	d908      	bls.n	8008c8a <my_conv_rtc2timestamp+0x7e>
 8008c78:	68fb      	ldr	r3, [r7, #12]
 8008c7a:	0018      	movs	r0, r3
 8008c7c:	f000 f8de 	bl	8008e3c <my_conv_is_leap_year>
 8008c80:	1e03      	subs	r3, r0, #0
 8008c82:	d002      	beq.n	8008c8a <my_conv_rtc2timestamp+0x7e>
    {
        days++ ;  // Add one day in a leap year.
 8008c84:	697b      	ldr	r3, [r7, #20]
 8008c86:	3301      	adds	r3, #1
 8008c88:	617b      	str	r3, [r7, #20]
    }
    // add the days of the month
    days += d->Date - 1 ;
 8008c8a:	687b      	ldr	r3, [r7, #4]
 8008c8c:	789b      	ldrb	r3, [r3, #2]
 8008c8e:	001a      	movs	r2, r3
 8008c90:	697b      	ldr	r3, [r7, #20]
 8008c92:	18d3      	adds	r3, r2, r3
 8008c94:	3b01      	subs	r3, #1
 8008c96:	617b      	str	r3, [r7, #20]
    // Convert days into seconds and add hours, minutes, seconds.
    uint32_t ts = days * 86400 + t->Hours * 3600 + t->Minutes * 60 + t->Seconds ;
 8008c98:	697a      	ldr	r2, [r7, #20]
 8008c9a:	0013      	movs	r3, r2
 8008c9c:	005b      	lsls	r3, r3, #1
 8008c9e:	189b      	adds	r3, r3, r2
 8008ca0:	011a      	lsls	r2, r3, #4
 8008ca2:	1ad2      	subs	r2, r2, r3
 8008ca4:	0113      	lsls	r3, r2, #4
 8008ca6:	1a9b      	subs	r3, r3, r2
 8008ca8:	01db      	lsls	r3, r3, #7
 8008caa:	0019      	movs	r1, r3
 8008cac:	683b      	ldr	r3, [r7, #0]
 8008cae:	781b      	ldrb	r3, [r3, #0]
 8008cb0:	001a      	movs	r2, r3
 8008cb2:	0013      	movs	r3, r2
 8008cb4:	011b      	lsls	r3, r3, #4
 8008cb6:	1a9b      	subs	r3, r3, r2
 8008cb8:	011a      	lsls	r2, r3, #4
 8008cba:	1ad2      	subs	r2, r2, r3
 8008cbc:	0113      	lsls	r3, r2, #4
 8008cbe:	001a      	movs	r2, r3
 8008cc0:	0013      	movs	r3, r2
 8008cc2:	18ca      	adds	r2, r1, r3
 8008cc4:	683b      	ldr	r3, [r7, #0]
 8008cc6:	785b      	ldrb	r3, [r3, #1]
 8008cc8:	0019      	movs	r1, r3
 8008cca:	000b      	movs	r3, r1
 8008ccc:	011b      	lsls	r3, r3, #4
 8008cce:	1a5b      	subs	r3, r3, r1
 8008cd0:	009b      	lsls	r3, r3, #2
 8008cd2:	18d3      	adds	r3, r2, r3
 8008cd4:	683a      	ldr	r2, [r7, #0]
 8008cd6:	7892      	ldrb	r2, [r2, #2]
 8008cd8:	189b      	adds	r3, r3, r2
 8008cda:	60bb      	str	r3, [r7, #8]

    return ts ;
 8008cdc:	68bb      	ldr	r3, [r7, #8]
}
 8008cde:	0018      	movs	r0, r3
 8008ce0:	46bd      	mov	sp, r7
 8008ce2:	b006      	add	sp, #24
 8008ce4:	bd80      	pop	{r7, pc}
 8008ce6:	46c0      	nop			; (mov r8, r8)
 8008ce8:	fffff84f 	.word	0xfffff84f
 8008cec:	fff50736 	.word	0xfff50736
 8008cf0:	0800f8c8 	.word	0x0800f8c8

08008cf4 <my_conv_timestamp2rtc>:

// Function converting Unix timestamp (ts) to RTC date and time
void my_conv_timestamp2rtc ( uint32_t ts , RTC_DateTypeDef* d , RTC_TimeTypeDef* t )
{
 8008cf4:	b590      	push	{r4, r7, lr}
 8008cf6:	b08b      	sub	sp, #44	; 0x2c
 8008cf8:	af00      	add	r7, sp, #0
 8008cfa:	60f8      	str	r0, [r7, #12]
 8008cfc:	60b9      	str	r1, [r7, #8]
 8008cfe:	607a      	str	r2, [r7, #4]
	static const uint16_t daysInMonth[12] = { 31 , 28 , 31 , 30 , 31 , 30 , 31 , 31 , 30 , 31 , 30 , 31 } ;
	uint32_t seconds = ts % 60 ;
 8008d00:	68fb      	ldr	r3, [r7, #12]
 8008d02:	213c      	movs	r1, #60	; 0x3c
 8008d04:	0018      	movs	r0, r3
 8008d06:	f7f7 fa9f 	bl	8000248 <__aeabi_uidivmod>
 8008d0a:	000b      	movs	r3, r1
 8008d0c:	61bb      	str	r3, [r7, #24]
	uint32_t minutes = ( ts / 60 ) % 60 ;
 8008d0e:	68fb      	ldr	r3, [r7, #12]
 8008d10:	213c      	movs	r1, #60	; 0x3c
 8008d12:	0018      	movs	r0, r3
 8008d14:	f7f7 fa12 	bl	800013c <__udivsi3>
 8008d18:	0003      	movs	r3, r0
 8008d1a:	213c      	movs	r1, #60	; 0x3c
 8008d1c:	0018      	movs	r0, r3
 8008d1e:	f7f7 fa93 	bl	8000248 <__aeabi_uidivmod>
 8008d22:	000b      	movs	r3, r1
 8008d24:	617b      	str	r3, [r7, #20]
	uint32_t hours = ( ts / 3600 ) % 24 ;
 8008d26:	68fb      	ldr	r3, [r7, #12]
 8008d28:	22e1      	movs	r2, #225	; 0xe1
 8008d2a:	0111      	lsls	r1, r2, #4
 8008d2c:	0018      	movs	r0, r3
 8008d2e:	f7f7 fa05 	bl	800013c <__udivsi3>
 8008d32:	0003      	movs	r3, r0
 8008d34:	2118      	movs	r1, #24
 8008d36:	0018      	movs	r0, r3
 8008d38:	f7f7 fa86 	bl	8000248 <__aeabi_uidivmod>
 8008d3c:	000b      	movs	r3, r1
 8008d3e:	613b      	str	r3, [r7, #16]

	// Counting days since Epoch
	uint32_t days = ts / 86400 ;
 8008d40:	68fb      	ldr	r3, [r7, #12]
 8008d42:	493b      	ldr	r1, [pc, #236]	; (8008e30 <my_conv_timestamp2rtc+0x13c>)
 8008d44:	0018      	movs	r0, r3
 8008d46:	f7f7 f9f9 	bl	800013c <__udivsi3>
 8008d4a:	0003      	movs	r3, r0
 8008d4c:	627b      	str	r3, [r7, #36]	; 0x24

	// Calculating the year
	uint32_t year = 1970 ;
 8008d4e:	4b39      	ldr	r3, [pc, #228]	; (8008e34 <my_conv_timestamp2rtc+0x140>)
 8008d50:	623b      	str	r3, [r7, #32]
	while ( days >= 365 + my_conv_is_leap_year ( year ) )
 8008d52:	e00d      	b.n	8008d70 <my_conv_timestamp2rtc+0x7c>
	{
		days -= 365 + my_conv_is_leap_year ( year ) ;
 8008d54:	6a3b      	ldr	r3, [r7, #32]
 8008d56:	0018      	movs	r0, r3
 8008d58:	f000 f870 	bl	8008e3c <my_conv_is_leap_year>
 8008d5c:	0003      	movs	r3, r0
 8008d5e:	336e      	adds	r3, #110	; 0x6e
 8008d60:	33ff      	adds	r3, #255	; 0xff
 8008d62:	001a      	movs	r2, r3
 8008d64:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008d66:	1a9b      	subs	r3, r3, r2
 8008d68:	627b      	str	r3, [r7, #36]	; 0x24
		year++ ;
 8008d6a:	6a3b      	ldr	r3, [r7, #32]
 8008d6c:	3301      	adds	r3, #1
 8008d6e:	623b      	str	r3, [r7, #32]
	while ( days >= 365 + my_conv_is_leap_year ( year ) )
 8008d70:	6a3b      	ldr	r3, [r7, #32]
 8008d72:	0018      	movs	r0, r3
 8008d74:	f000 f862 	bl	8008e3c <my_conv_is_leap_year>
 8008d78:	0003      	movs	r3, r0
 8008d7a:	336e      	adds	r3, #110	; 0x6e
 8008d7c:	33ff      	adds	r3, #255	; 0xff
 8008d7e:	001a      	movs	r2, r3
 8008d80:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008d82:	4293      	cmp	r3, r2
 8008d84:	d2e6      	bcs.n	8008d54 <my_conv_timestamp2rtc+0x60>
	}

	// Calculating the month
	uint32_t month = 0 ;
 8008d86:	2300      	movs	r3, #0
 8008d88:	61fb      	str	r3, [r7, #28]
	while ( days >= daysInMonth[month] + ( month == 1 && my_conv_is_leap_year ( year ) ) ) {
 8008d8a:	e018      	b.n	8008dbe <my_conv_timestamp2rtc+0xca>
		days -= daysInMonth[month] + ( month == 1 && my_conv_is_leap_year ( year ) ) ;
 8008d8c:	4b2a      	ldr	r3, [pc, #168]	; (8008e38 <my_conv_timestamp2rtc+0x144>)
 8008d8e:	69fa      	ldr	r2, [r7, #28]
 8008d90:	0052      	lsls	r2, r2, #1
 8008d92:	5ad3      	ldrh	r3, [r2, r3]
 8008d94:	001c      	movs	r4, r3
 8008d96:	69fb      	ldr	r3, [r7, #28]
 8008d98:	2b01      	cmp	r3, #1
 8008d9a:	d107      	bne.n	8008dac <my_conv_timestamp2rtc+0xb8>
 8008d9c:	6a3b      	ldr	r3, [r7, #32]
 8008d9e:	0018      	movs	r0, r3
 8008da0:	f000 f84c 	bl	8008e3c <my_conv_is_leap_year>
 8008da4:	1e03      	subs	r3, r0, #0
 8008da6:	d001      	beq.n	8008dac <my_conv_timestamp2rtc+0xb8>
 8008da8:	2301      	movs	r3, #1
 8008daa:	e000      	b.n	8008dae <my_conv_timestamp2rtc+0xba>
 8008dac:	2300      	movs	r3, #0
 8008dae:	191b      	adds	r3, r3, r4
 8008db0:	001a      	movs	r2, r3
 8008db2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008db4:	1a9b      	subs	r3, r3, r2
 8008db6:	627b      	str	r3, [r7, #36]	; 0x24
		month++ ;
 8008db8:	69fb      	ldr	r3, [r7, #28]
 8008dba:	3301      	adds	r3, #1
 8008dbc:	61fb      	str	r3, [r7, #28]
	while ( days >= daysInMonth[month] + ( month == 1 && my_conv_is_leap_year ( year ) ) ) {
 8008dbe:	4b1e      	ldr	r3, [pc, #120]	; (8008e38 <my_conv_timestamp2rtc+0x144>)
 8008dc0:	69fa      	ldr	r2, [r7, #28]
 8008dc2:	0052      	lsls	r2, r2, #1
 8008dc4:	5ad3      	ldrh	r3, [r2, r3]
 8008dc6:	001c      	movs	r4, r3
 8008dc8:	69fb      	ldr	r3, [r7, #28]
 8008dca:	2b01      	cmp	r3, #1
 8008dcc:	d107      	bne.n	8008dde <my_conv_timestamp2rtc+0xea>
 8008dce:	6a3b      	ldr	r3, [r7, #32]
 8008dd0:	0018      	movs	r0, r3
 8008dd2:	f000 f833 	bl	8008e3c <my_conv_is_leap_year>
 8008dd6:	1e03      	subs	r3, r0, #0
 8008dd8:	d001      	beq.n	8008dde <my_conv_timestamp2rtc+0xea>
 8008dda:	2301      	movs	r3, #1
 8008ddc:	e000      	b.n	8008de0 <my_conv_timestamp2rtc+0xec>
 8008dde:	2300      	movs	r3, #0
 8008de0:	191b      	adds	r3, r3, r4
 8008de2:	001a      	movs	r2, r3
 8008de4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008de6:	4293      	cmp	r3, r2
 8008de8:	d2d0      	bcs.n	8008d8c <my_conv_timestamp2rtc+0x98>
	}

	// Setting date and time in RTC structures
	d->Year = year - 2000 ; // RTC_DateTypeDef.Year expects years since 2000
 8008dea:	6a3b      	ldr	r3, [r7, #32]
 8008dec:	b2db      	uxtb	r3, r3
 8008dee:	3330      	adds	r3, #48	; 0x30
 8008df0:	b2da      	uxtb	r2, r3
 8008df2:	68bb      	ldr	r3, [r7, #8]
 8008df4:	70da      	strb	r2, [r3, #3]
	d->Month = month + 1 ;  // +1 because month is counted from 0
 8008df6:	69fb      	ldr	r3, [r7, #28]
 8008df8:	b2db      	uxtb	r3, r3
 8008dfa:	3301      	adds	r3, #1
 8008dfc:	b2da      	uxtb	r2, r3
 8008dfe:	68bb      	ldr	r3, [r7, #8]
 8008e00:	705a      	strb	r2, [r3, #1]
	d->Date = days + 1 ;    // +1 because days are counted from 0
 8008e02:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008e04:	b2db      	uxtb	r3, r3
 8008e06:	3301      	adds	r3, #1
 8008e08:	b2da      	uxtb	r2, r3
 8008e0a:	68bb      	ldr	r3, [r7, #8]
 8008e0c:	709a      	strb	r2, [r3, #2]
	t->Hours = hours ;
 8008e0e:	693b      	ldr	r3, [r7, #16]
 8008e10:	b2da      	uxtb	r2, r3
 8008e12:	687b      	ldr	r3, [r7, #4]
 8008e14:	701a      	strb	r2, [r3, #0]
	t->Minutes = minutes ;
 8008e16:	697b      	ldr	r3, [r7, #20]
 8008e18:	b2da      	uxtb	r2, r3
 8008e1a:	687b      	ldr	r3, [r7, #4]
 8008e1c:	705a      	strb	r2, [r3, #1]
	t->Seconds = seconds ;
 8008e1e:	69bb      	ldr	r3, [r7, #24]
 8008e20:	b2da      	uxtb	r2, r3
 8008e22:	687b      	ldr	r3, [r7, #4]
 8008e24:	709a      	strb	r2, [r3, #2]
}
 8008e26:	46c0      	nop			; (mov r8, r8)
 8008e28:	46bd      	mov	sp, r7
 8008e2a:	b00b      	add	sp, #44	; 0x2c
 8008e2c:	bd90      	pop	{r4, r7, pc}
 8008e2e:	46c0      	nop			; (mov r8, r8)
 8008e30:	00015180 	.word	0x00015180
 8008e34:	000007b2 	.word	0x000007b2
 8008e38:	0800f8d4 	.word	0x0800f8d4

08008e3c <my_conv_is_leap_year>:

// Function checking for leap years
int my_conv_is_leap_year ( int yyyy )
{
 8008e3c:	b580      	push	{r7, lr}
 8008e3e:	b082      	sub	sp, #8
 8008e40:	af00      	add	r7, sp, #0
 8008e42:	6078      	str	r0, [r7, #4]
    return ( ( yyyy % 4 == 0 ) && ( yyyy % 100 != 0 ) ) || ( yyyy % 400 == 0 ) ;
 8008e44:	687b      	ldr	r3, [r7, #4]
 8008e46:	2203      	movs	r2, #3
 8008e48:	4013      	ands	r3, r2
 8008e4a:	d106      	bne.n	8008e5a <my_conv_is_leap_year+0x1e>
 8008e4c:	687b      	ldr	r3, [r7, #4]
 8008e4e:	2164      	movs	r1, #100	; 0x64
 8008e50:	0018      	movs	r0, r3
 8008e52:	f7f7 fae3 	bl	800041c <__aeabi_idivmod>
 8008e56:	1e0b      	subs	r3, r1, #0
 8008e58:	d107      	bne.n	8008e6a <my_conv_is_leap_year+0x2e>
 8008e5a:	687b      	ldr	r3, [r7, #4]
 8008e5c:	22c8      	movs	r2, #200	; 0xc8
 8008e5e:	0051      	lsls	r1, r2, #1
 8008e60:	0018      	movs	r0, r3
 8008e62:	f7f7 fadb 	bl	800041c <__aeabi_idivmod>
 8008e66:	1e0b      	subs	r3, r1, #0
 8008e68:	d101      	bne.n	8008e6e <my_conv_is_leap_year+0x32>
 8008e6a:	2301      	movs	r3, #1
 8008e6c:	e000      	b.n	8008e70 <my_conv_is_leap_year+0x34>
 8008e6e:	2300      	movs	r3, #0
}
 8008e70:	0018      	movs	r0, r3
 8008e72:	46bd      	mov	sp, r7
 8008e74:	b002      	add	sp, #8
 8008e76:	bd80      	pop	{r7, pc}

08008e78 <my_conv_dt_2_dts>:

void my_conv_dt_2_dts ( RTC_DateTypeDef* d , RTC_TimeTypeDef* t , char* dt_s )
{
 8008e78:	b5f0      	push	{r4, r5, r6, r7, lr}
 8008e7a:	b089      	sub	sp, #36	; 0x24
 8008e7c:	af04      	add	r7, sp, #16
 8008e7e:	60f8      	str	r0, [r7, #12]
 8008e80:	60b9      	str	r1, [r7, #8]
 8008e82:	607a      	str	r2, [r7, #4]
	sprintf ( dt_s , "%4d.%02d.%02d %02d:%02d:%02d" , 2000 + d->Year , d->Month , d->Date , t->Hours , t->Minutes , t->Seconds ) ;
 8008e84:	68fb      	ldr	r3, [r7, #12]
 8008e86:	78db      	ldrb	r3, [r3, #3]
 8008e88:	22fa      	movs	r2, #250	; 0xfa
 8008e8a:	00d2      	lsls	r2, r2, #3
 8008e8c:	189a      	adds	r2, r3, r2
 8008e8e:	68fb      	ldr	r3, [r7, #12]
 8008e90:	785b      	ldrb	r3, [r3, #1]
 8008e92:	469c      	mov	ip, r3
 8008e94:	68fb      	ldr	r3, [r7, #12]
 8008e96:	789b      	ldrb	r3, [r3, #2]
 8008e98:	001c      	movs	r4, r3
 8008e9a:	68bb      	ldr	r3, [r7, #8]
 8008e9c:	781b      	ldrb	r3, [r3, #0]
 8008e9e:	001d      	movs	r5, r3
 8008ea0:	68bb      	ldr	r3, [r7, #8]
 8008ea2:	785b      	ldrb	r3, [r3, #1]
 8008ea4:	001e      	movs	r6, r3
 8008ea6:	68bb      	ldr	r3, [r7, #8]
 8008ea8:	789b      	ldrb	r3, [r3, #2]
 8008eaa:	4906      	ldr	r1, [pc, #24]	; (8008ec4 <my_conv_dt_2_dts+0x4c>)
 8008eac:	6878      	ldr	r0, [r7, #4]
 8008eae:	9303      	str	r3, [sp, #12]
 8008eb0:	9602      	str	r6, [sp, #8]
 8008eb2:	9501      	str	r5, [sp, #4]
 8008eb4:	9400      	str	r4, [sp, #0]
 8008eb6:	4663      	mov	r3, ip
 8008eb8:	f000 f986 	bl	80091c8 <sprintf>
}
 8008ebc:	46c0      	nop			; (mov r8, r8)
 8008ebe:	46bd      	mov	sp, r7
 8008ec0:	b005      	add	sp, #20
 8008ec2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8008ec4:	0800f750 	.word	0x0800f750

08008ec8 <my_rand_get_coordinates>:

#include "stm32g0xx_hal.h"
#include <stdlib.h>

void my_rand_get_coordinates ( int32_t* last_latitude_astro_geo_wr , int32_t* last_longitude_astro_geo_wr , int32_t* latitude_astro_geo_wr , int32_t* longitude_astro_geo_wr )
{
 8008ec8:	b580      	push	{r7, lr}
 8008eca:	b088      	sub	sp, #32
 8008ecc:	af00      	add	r7, sp, #0
 8008ece:	60f8      	str	r0, [r7, #12]
 8008ed0:	60b9      	str	r1, [r7, #8]
 8008ed2:	607a      	str	r2, [r7, #4]
 8008ed4:	603b      	str	r3, [r7, #0]

    // Wartości współrzędnych przemnożone przez 10000000
    int32_t last_lat = *last_latitude_astro_geo_wr;
 8008ed6:	68fb      	ldr	r3, [r7, #12]
 8008ed8:	681b      	ldr	r3, [r3, #0]
 8008eda:	61fb      	str	r3, [r7, #28]
    int32_t last_lon = *last_longitude_astro_geo_wr;
 8008edc:	68bb      	ldr	r3, [r7, #8]
 8008ede:	681b      	ldr	r3, [r3, #0]
 8008ee0:	61bb      	str	r3, [r7, #24]

    // Losowa odległość w zakresie 0-100 km (jako różnica współrzędnych)
    int32_t delta_lat = rand() % 100000 - 50000;  // zakres: -50000 do 49999
 8008ee2:	f000 f85f 	bl	8008fa4 <rand>
 8008ee6:	0003      	movs	r3, r0
 8008ee8:	4926      	ldr	r1, [pc, #152]	; (8008f84 <my_rand_get_coordinates+0xbc>)
 8008eea:	0018      	movs	r0, r3
 8008eec:	f7f7 fa96 	bl	800041c <__aeabi_idivmod>
 8008ef0:	000b      	movs	r3, r1
 8008ef2:	4a25      	ldr	r2, [pc, #148]	; (8008f88 <my_rand_get_coordinates+0xc0>)
 8008ef4:	4694      	mov	ip, r2
 8008ef6:	4463      	add	r3, ip
 8008ef8:	617b      	str	r3, [r7, #20]
    int32_t delta_lon = rand() % 100000 - 50000;  // zakres: -50000 do 49999
 8008efa:	f000 f853 	bl	8008fa4 <rand>
 8008efe:	0003      	movs	r3, r0
 8008f00:	4920      	ldr	r1, [pc, #128]	; (8008f84 <my_rand_get_coordinates+0xbc>)
 8008f02:	0018      	movs	r0, r3
 8008f04:	f7f7 fa8a 	bl	800041c <__aeabi_idivmod>
 8008f08:	000b      	movs	r3, r1
 8008f0a:	4a1f      	ldr	r2, [pc, #124]	; (8008f88 <my_rand_get_coordinates+0xc0>)
 8008f0c:	4694      	mov	ip, r2
 8008f0e:	4463      	add	r3, ip
 8008f10:	613b      	str	r3, [r7, #16]

    // Nowe współrzędne
    *latitude_astro_geo_wr = last_lat + delta_lat;
 8008f12:	69fa      	ldr	r2, [r7, #28]
 8008f14:	697b      	ldr	r3, [r7, #20]
 8008f16:	18d2      	adds	r2, r2, r3
 8008f18:	687b      	ldr	r3, [r7, #4]
 8008f1a:	601a      	str	r2, [r3, #0]
    *longitude_astro_geo_wr = last_lon + delta_lon;
 8008f1c:	69ba      	ldr	r2, [r7, #24]
 8008f1e:	693b      	ldr	r3, [r7, #16]
 8008f20:	18d2      	adds	r2, r2, r3
 8008f22:	683b      	ldr	r3, [r7, #0]
 8008f24:	601a      	str	r2, [r3, #0]

    // Sprawdź, czy współrzędne są w zakresie poprawnym dla półkul
    if ( *latitude_astro_geo_wr > 900000000 || *latitude_astro_geo_wr < -900000000 )
 8008f26:	687b      	ldr	r3, [r7, #4]
 8008f28:	681b      	ldr	r3, [r3, #0]
 8008f2a:	4a18      	ldr	r2, [pc, #96]	; (8008f8c <my_rand_get_coordinates+0xc4>)
 8008f2c:	4293      	cmp	r3, r2
 8008f2e:	dc04      	bgt.n	8008f3a <my_rand_get_coordinates+0x72>
 8008f30:	687b      	ldr	r3, [r7, #4]
 8008f32:	681b      	ldr	r3, [r3, #0]
 8008f34:	4a16      	ldr	r2, [pc, #88]	; (8008f90 <my_rand_get_coordinates+0xc8>)
 8008f36:	4293      	cmp	r3, r2
 8008f38:	da04      	bge.n	8008f44 <my_rand_get_coordinates+0x7c>
    {
        // Poza zakresem dla półkuli północnej i południowej, więc odwróć znak
        *latitude_astro_geo_wr = -*latitude_astro_geo_wr;
 8008f3a:	687b      	ldr	r3, [r7, #4]
 8008f3c:	681b      	ldr	r3, [r3, #0]
 8008f3e:	425a      	negs	r2, r3
 8008f40:	687b      	ldr	r3, [r7, #4]
 8008f42:	601a      	str	r2, [r3, #0]
    }

    // Zakres dla współrzędnych geograficznych to -1800000000 do 1800000000
    // Zakres dla współrzędnych geograficznych w kodzie zakodowanym * 10000000
    if ( *longitude_astro_geo_wr > 1800000000 )
 8008f44:	683b      	ldr	r3, [r7, #0]
 8008f46:	681b      	ldr	r3, [r3, #0]
 8008f48:	4a12      	ldr	r2, [pc, #72]	; (8008f94 <my_rand_get_coordinates+0xcc>)
 8008f4a:	4293      	cmp	r3, r2
 8008f4c:	dd08      	ble.n	8008f60 <my_rand_get_coordinates+0x98>
    {
        *longitude_astro_geo_wr = *longitude_astro_geo_wr - 3600000000 ;
 8008f4e:	683b      	ldr	r3, [r7, #0]
 8008f50:	681b      	ldr	r3, [r3, #0]
 8008f52:	4a11      	ldr	r2, [pc, #68]	; (8008f98 <my_rand_get_coordinates+0xd0>)
 8008f54:	4694      	mov	ip, r2
 8008f56:	4463      	add	r3, ip
 8008f58:	001a      	movs	r2, r3
 8008f5a:	683b      	ldr	r3, [r7, #0]
 8008f5c:	601a      	str	r2, [r3, #0]
    }
    else if ( *longitude_astro_geo_wr < -1800000000 )
    {
        *longitude_astro_geo_wr = *longitude_astro_geo_wr + 3600000000 ;
    }
}
 8008f5e:	e00c      	b.n	8008f7a <my_rand_get_coordinates+0xb2>
    else if ( *longitude_astro_geo_wr < -1800000000 )
 8008f60:	683b      	ldr	r3, [r7, #0]
 8008f62:	681b      	ldr	r3, [r3, #0]
 8008f64:	4a0d      	ldr	r2, [pc, #52]	; (8008f9c <my_rand_get_coordinates+0xd4>)
 8008f66:	4293      	cmp	r3, r2
 8008f68:	da07      	bge.n	8008f7a <my_rand_get_coordinates+0xb2>
        *longitude_astro_geo_wr = *longitude_astro_geo_wr + 3600000000 ;
 8008f6a:	683b      	ldr	r3, [r7, #0]
 8008f6c:	681b      	ldr	r3, [r3, #0]
 8008f6e:	4a0c      	ldr	r2, [pc, #48]	; (8008fa0 <my_rand_get_coordinates+0xd8>)
 8008f70:	4694      	mov	ip, r2
 8008f72:	4463      	add	r3, ip
 8008f74:	001a      	movs	r2, r3
 8008f76:	683b      	ldr	r3, [r7, #0]
 8008f78:	601a      	str	r2, [r3, #0]
}
 8008f7a:	46c0      	nop			; (mov r8, r8)
 8008f7c:	46bd      	mov	sp, r7
 8008f7e:	b008      	add	sp, #32
 8008f80:	bd80      	pop	{r7, pc}
 8008f82:	46c0      	nop			; (mov r8, r8)
 8008f84:	000186a0 	.word	0x000186a0
 8008f88:	ffff3cb0 	.word	0xffff3cb0
 8008f8c:	35a4e900 	.word	0x35a4e900
 8008f90:	ca5b1700 	.word	0xca5b1700
 8008f94:	6b49d200 	.word	0x6b49d200
 8008f98:	296c5c00 	.word	0x296c5c00
 8008f9c:	94b62e00 	.word	0x94b62e00
 8008fa0:	d693a400 	.word	0xd693a400

08008fa4 <rand>:
 8008fa4:	4b09      	ldr	r3, [pc, #36]	; (8008fcc <rand+0x28>)
 8008fa6:	b510      	push	{r4, lr}
 8008fa8:	681c      	ldr	r4, [r3, #0]
 8008faa:	4a09      	ldr	r2, [pc, #36]	; (8008fd0 <rand+0x2c>)
 8008fac:	3498      	adds	r4, #152	; 0x98
 8008fae:	6820      	ldr	r0, [r4, #0]
 8008fb0:	6861      	ldr	r1, [r4, #4]
 8008fb2:	4b08      	ldr	r3, [pc, #32]	; (8008fd4 <rand+0x30>)
 8008fb4:	f7f7 fa96 	bl	80004e4 <__aeabi_lmul>
 8008fb8:	2201      	movs	r2, #1
 8008fba:	2300      	movs	r3, #0
 8008fbc:	1880      	adds	r0, r0, r2
 8008fbe:	4159      	adcs	r1, r3
 8008fc0:	6020      	str	r0, [r4, #0]
 8008fc2:	6061      	str	r1, [r4, #4]
 8008fc4:	0048      	lsls	r0, r1, #1
 8008fc6:	0840      	lsrs	r0, r0, #1
 8008fc8:	bd10      	pop	{r4, pc}
 8008fca:	46c0      	nop			; (mov r8, r8)
 8008fcc:	200002b8 	.word	0x200002b8
 8008fd0:	4c957f2d 	.word	0x4c957f2d
 8008fd4:	5851f42d 	.word	0x5851f42d

08008fd8 <std>:
 8008fd8:	2300      	movs	r3, #0
 8008fda:	b510      	push	{r4, lr}
 8008fdc:	0004      	movs	r4, r0
 8008fde:	6003      	str	r3, [r0, #0]
 8008fe0:	6043      	str	r3, [r0, #4]
 8008fe2:	6083      	str	r3, [r0, #8]
 8008fe4:	8181      	strh	r1, [r0, #12]
 8008fe6:	6643      	str	r3, [r0, #100]	; 0x64
 8008fe8:	81c2      	strh	r2, [r0, #14]
 8008fea:	6103      	str	r3, [r0, #16]
 8008fec:	6143      	str	r3, [r0, #20]
 8008fee:	6183      	str	r3, [r0, #24]
 8008ff0:	0019      	movs	r1, r3
 8008ff2:	2208      	movs	r2, #8
 8008ff4:	305c      	adds	r0, #92	; 0x5c
 8008ff6:	f000 f953 	bl	80092a0 <memset>
 8008ffa:	4b0b      	ldr	r3, [pc, #44]	; (8009028 <std+0x50>)
 8008ffc:	61e4      	str	r4, [r4, #28]
 8008ffe:	6223      	str	r3, [r4, #32]
 8009000:	4b0a      	ldr	r3, [pc, #40]	; (800902c <std+0x54>)
 8009002:	6263      	str	r3, [r4, #36]	; 0x24
 8009004:	4b0a      	ldr	r3, [pc, #40]	; (8009030 <std+0x58>)
 8009006:	62a3      	str	r3, [r4, #40]	; 0x28
 8009008:	4b0a      	ldr	r3, [pc, #40]	; (8009034 <std+0x5c>)
 800900a:	62e3      	str	r3, [r4, #44]	; 0x2c
 800900c:	4b0a      	ldr	r3, [pc, #40]	; (8009038 <std+0x60>)
 800900e:	429c      	cmp	r4, r3
 8009010:	d005      	beq.n	800901e <std+0x46>
 8009012:	4b0a      	ldr	r3, [pc, #40]	; (800903c <std+0x64>)
 8009014:	429c      	cmp	r4, r3
 8009016:	d002      	beq.n	800901e <std+0x46>
 8009018:	4b09      	ldr	r3, [pc, #36]	; (8009040 <std+0x68>)
 800901a:	429c      	cmp	r4, r3
 800901c:	d103      	bne.n	8009026 <std+0x4e>
 800901e:	0020      	movs	r0, r4
 8009020:	3058      	adds	r0, #88	; 0x58
 8009022:	f000 f9c5 	bl	80093b0 <__retarget_lock_init_recursive>
 8009026:	bd10      	pop	{r4, pc}
 8009028:	08009209 	.word	0x08009209
 800902c:	08009231 	.word	0x08009231
 8009030:	08009269 	.word	0x08009269
 8009034:	08009295 	.word	0x08009295
 8009038:	200009f0 	.word	0x200009f0
 800903c:	20000a58 	.word	0x20000a58
 8009040:	20000ac0 	.word	0x20000ac0

08009044 <stdio_exit_handler>:
 8009044:	b510      	push	{r4, lr}
 8009046:	4a03      	ldr	r2, [pc, #12]	; (8009054 <stdio_exit_handler+0x10>)
 8009048:	4903      	ldr	r1, [pc, #12]	; (8009058 <stdio_exit_handler+0x14>)
 800904a:	4804      	ldr	r0, [pc, #16]	; (800905c <stdio_exit_handler+0x18>)
 800904c:	f000 f86c 	bl	8009128 <_fwalk_sglue>
 8009050:	bd10      	pop	{r4, pc}
 8009052:	46c0      	nop			; (mov r8, r8)
 8009054:	2000001c 	.word	0x2000001c
 8009058:	0800b5a1 	.word	0x0800b5a1
 800905c:	20000198 	.word	0x20000198

08009060 <cleanup_stdio>:
 8009060:	6841      	ldr	r1, [r0, #4]
 8009062:	4b0b      	ldr	r3, [pc, #44]	; (8009090 <cleanup_stdio+0x30>)
 8009064:	b510      	push	{r4, lr}
 8009066:	0004      	movs	r4, r0
 8009068:	4299      	cmp	r1, r3
 800906a:	d001      	beq.n	8009070 <cleanup_stdio+0x10>
 800906c:	f002 fa98 	bl	800b5a0 <_fclose_r>
 8009070:	68a1      	ldr	r1, [r4, #8]
 8009072:	4b08      	ldr	r3, [pc, #32]	; (8009094 <cleanup_stdio+0x34>)
 8009074:	4299      	cmp	r1, r3
 8009076:	d002      	beq.n	800907e <cleanup_stdio+0x1e>
 8009078:	0020      	movs	r0, r4
 800907a:	f002 fa91 	bl	800b5a0 <_fclose_r>
 800907e:	68e1      	ldr	r1, [r4, #12]
 8009080:	4b05      	ldr	r3, [pc, #20]	; (8009098 <cleanup_stdio+0x38>)
 8009082:	4299      	cmp	r1, r3
 8009084:	d002      	beq.n	800908c <cleanup_stdio+0x2c>
 8009086:	0020      	movs	r0, r4
 8009088:	f002 fa8a 	bl	800b5a0 <_fclose_r>
 800908c:	bd10      	pop	{r4, pc}
 800908e:	46c0      	nop			; (mov r8, r8)
 8009090:	200009f0 	.word	0x200009f0
 8009094:	20000a58 	.word	0x20000a58
 8009098:	20000ac0 	.word	0x20000ac0

0800909c <global_stdio_init.part.0>:
 800909c:	b510      	push	{r4, lr}
 800909e:	4b09      	ldr	r3, [pc, #36]	; (80090c4 <global_stdio_init.part.0+0x28>)
 80090a0:	4a09      	ldr	r2, [pc, #36]	; (80090c8 <global_stdio_init.part.0+0x2c>)
 80090a2:	2104      	movs	r1, #4
 80090a4:	601a      	str	r2, [r3, #0]
 80090a6:	4809      	ldr	r0, [pc, #36]	; (80090cc <global_stdio_init.part.0+0x30>)
 80090a8:	2200      	movs	r2, #0
 80090aa:	f7ff ff95 	bl	8008fd8 <std>
 80090ae:	2201      	movs	r2, #1
 80090b0:	2109      	movs	r1, #9
 80090b2:	4807      	ldr	r0, [pc, #28]	; (80090d0 <global_stdio_init.part.0+0x34>)
 80090b4:	f7ff ff90 	bl	8008fd8 <std>
 80090b8:	2202      	movs	r2, #2
 80090ba:	2112      	movs	r1, #18
 80090bc:	4805      	ldr	r0, [pc, #20]	; (80090d4 <global_stdio_init.part.0+0x38>)
 80090be:	f7ff ff8b 	bl	8008fd8 <std>
 80090c2:	bd10      	pop	{r4, pc}
 80090c4:	20000b28 	.word	0x20000b28
 80090c8:	08009045 	.word	0x08009045
 80090cc:	200009f0 	.word	0x200009f0
 80090d0:	20000a58 	.word	0x20000a58
 80090d4:	20000ac0 	.word	0x20000ac0

080090d8 <__sfp_lock_acquire>:
 80090d8:	b510      	push	{r4, lr}
 80090da:	4802      	ldr	r0, [pc, #8]	; (80090e4 <__sfp_lock_acquire+0xc>)
 80090dc:	f000 f96a 	bl	80093b4 <__retarget_lock_acquire_recursive>
 80090e0:	bd10      	pop	{r4, pc}
 80090e2:	46c0      	nop			; (mov r8, r8)
 80090e4:	20000b32 	.word	0x20000b32

080090e8 <__sfp_lock_release>:
 80090e8:	b510      	push	{r4, lr}
 80090ea:	4802      	ldr	r0, [pc, #8]	; (80090f4 <__sfp_lock_release+0xc>)
 80090ec:	f000 f963 	bl	80093b6 <__retarget_lock_release_recursive>
 80090f0:	bd10      	pop	{r4, pc}
 80090f2:	46c0      	nop			; (mov r8, r8)
 80090f4:	20000b32 	.word	0x20000b32

080090f8 <__sinit>:
 80090f8:	b510      	push	{r4, lr}
 80090fa:	0004      	movs	r4, r0
 80090fc:	f7ff ffec 	bl	80090d8 <__sfp_lock_acquire>
 8009100:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8009102:	2b00      	cmp	r3, #0
 8009104:	d002      	beq.n	800910c <__sinit+0x14>
 8009106:	f7ff ffef 	bl	80090e8 <__sfp_lock_release>
 800910a:	bd10      	pop	{r4, pc}
 800910c:	4b04      	ldr	r3, [pc, #16]	; (8009120 <__sinit+0x28>)
 800910e:	6363      	str	r3, [r4, #52]	; 0x34
 8009110:	4b04      	ldr	r3, [pc, #16]	; (8009124 <__sinit+0x2c>)
 8009112:	681b      	ldr	r3, [r3, #0]
 8009114:	2b00      	cmp	r3, #0
 8009116:	d1f6      	bne.n	8009106 <__sinit+0xe>
 8009118:	f7ff ffc0 	bl	800909c <global_stdio_init.part.0>
 800911c:	e7f3      	b.n	8009106 <__sinit+0xe>
 800911e:	46c0      	nop			; (mov r8, r8)
 8009120:	08009061 	.word	0x08009061
 8009124:	20000b28 	.word	0x20000b28

08009128 <_fwalk_sglue>:
 8009128:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800912a:	0014      	movs	r4, r2
 800912c:	2600      	movs	r6, #0
 800912e:	9000      	str	r0, [sp, #0]
 8009130:	9101      	str	r1, [sp, #4]
 8009132:	68a5      	ldr	r5, [r4, #8]
 8009134:	6867      	ldr	r7, [r4, #4]
 8009136:	3f01      	subs	r7, #1
 8009138:	d504      	bpl.n	8009144 <_fwalk_sglue+0x1c>
 800913a:	6824      	ldr	r4, [r4, #0]
 800913c:	2c00      	cmp	r4, #0
 800913e:	d1f8      	bne.n	8009132 <_fwalk_sglue+0xa>
 8009140:	0030      	movs	r0, r6
 8009142:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8009144:	89ab      	ldrh	r3, [r5, #12]
 8009146:	2b01      	cmp	r3, #1
 8009148:	d908      	bls.n	800915c <_fwalk_sglue+0x34>
 800914a:	220e      	movs	r2, #14
 800914c:	5eab      	ldrsh	r3, [r5, r2]
 800914e:	3301      	adds	r3, #1
 8009150:	d004      	beq.n	800915c <_fwalk_sglue+0x34>
 8009152:	0029      	movs	r1, r5
 8009154:	9800      	ldr	r0, [sp, #0]
 8009156:	9b01      	ldr	r3, [sp, #4]
 8009158:	4798      	blx	r3
 800915a:	4306      	orrs	r6, r0
 800915c:	3568      	adds	r5, #104	; 0x68
 800915e:	e7ea      	b.n	8009136 <_fwalk_sglue+0xe>

08009160 <snprintf>:
 8009160:	b40c      	push	{r2, r3}
 8009162:	b530      	push	{r4, r5, lr}
 8009164:	4b17      	ldr	r3, [pc, #92]	; (80091c4 <snprintf+0x64>)
 8009166:	000c      	movs	r4, r1
 8009168:	681d      	ldr	r5, [r3, #0]
 800916a:	b09d      	sub	sp, #116	; 0x74
 800916c:	2900      	cmp	r1, #0
 800916e:	da08      	bge.n	8009182 <snprintf+0x22>
 8009170:	238b      	movs	r3, #139	; 0x8b
 8009172:	2001      	movs	r0, #1
 8009174:	602b      	str	r3, [r5, #0]
 8009176:	4240      	negs	r0, r0
 8009178:	b01d      	add	sp, #116	; 0x74
 800917a:	bc30      	pop	{r4, r5}
 800917c:	bc08      	pop	{r3}
 800917e:	b002      	add	sp, #8
 8009180:	4718      	bx	r3
 8009182:	2382      	movs	r3, #130	; 0x82
 8009184:	466a      	mov	r2, sp
 8009186:	009b      	lsls	r3, r3, #2
 8009188:	8293      	strh	r3, [r2, #20]
 800918a:	2300      	movs	r3, #0
 800918c:	9002      	str	r0, [sp, #8]
 800918e:	9006      	str	r0, [sp, #24]
 8009190:	4299      	cmp	r1, r3
 8009192:	d000      	beq.n	8009196 <snprintf+0x36>
 8009194:	1e4b      	subs	r3, r1, #1
 8009196:	9304      	str	r3, [sp, #16]
 8009198:	9307      	str	r3, [sp, #28]
 800919a:	2301      	movs	r3, #1
 800919c:	466a      	mov	r2, sp
 800919e:	425b      	negs	r3, r3
 80091a0:	82d3      	strh	r3, [r2, #22]
 80091a2:	0028      	movs	r0, r5
 80091a4:	ab21      	add	r3, sp, #132	; 0x84
 80091a6:	9a20      	ldr	r2, [sp, #128]	; 0x80
 80091a8:	a902      	add	r1, sp, #8
 80091aa:	9301      	str	r3, [sp, #4]
 80091ac:	f000 ffb6 	bl	800a11c <_svfprintf_r>
 80091b0:	1c43      	adds	r3, r0, #1
 80091b2:	da01      	bge.n	80091b8 <snprintf+0x58>
 80091b4:	238b      	movs	r3, #139	; 0x8b
 80091b6:	602b      	str	r3, [r5, #0]
 80091b8:	2c00      	cmp	r4, #0
 80091ba:	d0dd      	beq.n	8009178 <snprintf+0x18>
 80091bc:	2200      	movs	r2, #0
 80091be:	9b02      	ldr	r3, [sp, #8]
 80091c0:	701a      	strb	r2, [r3, #0]
 80091c2:	e7d9      	b.n	8009178 <snprintf+0x18>
 80091c4:	200002b8 	.word	0x200002b8

080091c8 <sprintf>:
 80091c8:	b40e      	push	{r1, r2, r3}
 80091ca:	b500      	push	{lr}
 80091cc:	490b      	ldr	r1, [pc, #44]	; (80091fc <sprintf+0x34>)
 80091ce:	b09c      	sub	sp, #112	; 0x70
 80091d0:	ab1d      	add	r3, sp, #116	; 0x74
 80091d2:	9002      	str	r0, [sp, #8]
 80091d4:	9006      	str	r0, [sp, #24]
 80091d6:	9107      	str	r1, [sp, #28]
 80091d8:	9104      	str	r1, [sp, #16]
 80091da:	4809      	ldr	r0, [pc, #36]	; (8009200 <sprintf+0x38>)
 80091dc:	4909      	ldr	r1, [pc, #36]	; (8009204 <sprintf+0x3c>)
 80091de:	cb04      	ldmia	r3!, {r2}
 80091e0:	9105      	str	r1, [sp, #20]
 80091e2:	6800      	ldr	r0, [r0, #0]
 80091e4:	a902      	add	r1, sp, #8
 80091e6:	9301      	str	r3, [sp, #4]
 80091e8:	f000 ff98 	bl	800a11c <_svfprintf_r>
 80091ec:	2200      	movs	r2, #0
 80091ee:	9b02      	ldr	r3, [sp, #8]
 80091f0:	701a      	strb	r2, [r3, #0]
 80091f2:	b01c      	add	sp, #112	; 0x70
 80091f4:	bc08      	pop	{r3}
 80091f6:	b003      	add	sp, #12
 80091f8:	4718      	bx	r3
 80091fa:	46c0      	nop			; (mov r8, r8)
 80091fc:	7fffffff 	.word	0x7fffffff
 8009200:	200002b8 	.word	0x200002b8
 8009204:	ffff0208 	.word	0xffff0208

08009208 <__sread>:
 8009208:	b570      	push	{r4, r5, r6, lr}
 800920a:	000c      	movs	r4, r1
 800920c:	250e      	movs	r5, #14
 800920e:	5f49      	ldrsh	r1, [r1, r5]
 8009210:	f000 f87c 	bl	800930c <_read_r>
 8009214:	2800      	cmp	r0, #0
 8009216:	db03      	blt.n	8009220 <__sread+0x18>
 8009218:	6d23      	ldr	r3, [r4, #80]	; 0x50
 800921a:	181b      	adds	r3, r3, r0
 800921c:	6523      	str	r3, [r4, #80]	; 0x50
 800921e:	bd70      	pop	{r4, r5, r6, pc}
 8009220:	89a3      	ldrh	r3, [r4, #12]
 8009222:	4a02      	ldr	r2, [pc, #8]	; (800922c <__sread+0x24>)
 8009224:	4013      	ands	r3, r2
 8009226:	81a3      	strh	r3, [r4, #12]
 8009228:	e7f9      	b.n	800921e <__sread+0x16>
 800922a:	46c0      	nop			; (mov r8, r8)
 800922c:	ffffefff 	.word	0xffffefff

08009230 <__swrite>:
 8009230:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009232:	001f      	movs	r7, r3
 8009234:	898b      	ldrh	r3, [r1, #12]
 8009236:	0005      	movs	r5, r0
 8009238:	000c      	movs	r4, r1
 800923a:	0016      	movs	r6, r2
 800923c:	05db      	lsls	r3, r3, #23
 800923e:	d505      	bpl.n	800924c <__swrite+0x1c>
 8009240:	230e      	movs	r3, #14
 8009242:	5ec9      	ldrsh	r1, [r1, r3]
 8009244:	2200      	movs	r2, #0
 8009246:	2302      	movs	r3, #2
 8009248:	f000 f84c 	bl	80092e4 <_lseek_r>
 800924c:	89a3      	ldrh	r3, [r4, #12]
 800924e:	4a05      	ldr	r2, [pc, #20]	; (8009264 <__swrite+0x34>)
 8009250:	0028      	movs	r0, r5
 8009252:	4013      	ands	r3, r2
 8009254:	81a3      	strh	r3, [r4, #12]
 8009256:	0032      	movs	r2, r6
 8009258:	230e      	movs	r3, #14
 800925a:	5ee1      	ldrsh	r1, [r4, r3]
 800925c:	003b      	movs	r3, r7
 800925e:	f000 f869 	bl	8009334 <_write_r>
 8009262:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8009264:	ffffefff 	.word	0xffffefff

08009268 <__sseek>:
 8009268:	b570      	push	{r4, r5, r6, lr}
 800926a:	000c      	movs	r4, r1
 800926c:	250e      	movs	r5, #14
 800926e:	5f49      	ldrsh	r1, [r1, r5]
 8009270:	f000 f838 	bl	80092e4 <_lseek_r>
 8009274:	89a3      	ldrh	r3, [r4, #12]
 8009276:	1c42      	adds	r2, r0, #1
 8009278:	d103      	bne.n	8009282 <__sseek+0x1a>
 800927a:	4a05      	ldr	r2, [pc, #20]	; (8009290 <__sseek+0x28>)
 800927c:	4013      	ands	r3, r2
 800927e:	81a3      	strh	r3, [r4, #12]
 8009280:	bd70      	pop	{r4, r5, r6, pc}
 8009282:	2280      	movs	r2, #128	; 0x80
 8009284:	0152      	lsls	r2, r2, #5
 8009286:	4313      	orrs	r3, r2
 8009288:	81a3      	strh	r3, [r4, #12]
 800928a:	6520      	str	r0, [r4, #80]	; 0x50
 800928c:	e7f8      	b.n	8009280 <__sseek+0x18>
 800928e:	46c0      	nop			; (mov r8, r8)
 8009290:	ffffefff 	.word	0xffffefff

08009294 <__sclose>:
 8009294:	b510      	push	{r4, lr}
 8009296:	230e      	movs	r3, #14
 8009298:	5ec9      	ldrsh	r1, [r1, r3]
 800929a:	f000 f811 	bl	80092c0 <_close_r>
 800929e:	bd10      	pop	{r4, pc}

080092a0 <memset>:
 80092a0:	0003      	movs	r3, r0
 80092a2:	1882      	adds	r2, r0, r2
 80092a4:	4293      	cmp	r3, r2
 80092a6:	d100      	bne.n	80092aa <memset+0xa>
 80092a8:	4770      	bx	lr
 80092aa:	7019      	strb	r1, [r3, #0]
 80092ac:	3301      	adds	r3, #1
 80092ae:	e7f9      	b.n	80092a4 <memset+0x4>

080092b0 <__locale_mb_cur_max>:
 80092b0:	2294      	movs	r2, #148	; 0x94
 80092b2:	4b02      	ldr	r3, [pc, #8]	; (80092bc <__locale_mb_cur_max+0xc>)
 80092b4:	0052      	lsls	r2, r2, #1
 80092b6:	5c98      	ldrb	r0, [r3, r2]
 80092b8:	4770      	bx	lr
 80092ba:	46c0      	nop			; (mov r8, r8)
 80092bc:	20000028 	.word	0x20000028

080092c0 <_close_r>:
 80092c0:	2300      	movs	r3, #0
 80092c2:	b570      	push	{r4, r5, r6, lr}
 80092c4:	4d06      	ldr	r5, [pc, #24]	; (80092e0 <_close_r+0x20>)
 80092c6:	0004      	movs	r4, r0
 80092c8:	0008      	movs	r0, r1
 80092ca:	602b      	str	r3, [r5, #0]
 80092cc:	f7fa fa3b 	bl	8003746 <_close>
 80092d0:	1c43      	adds	r3, r0, #1
 80092d2:	d103      	bne.n	80092dc <_close_r+0x1c>
 80092d4:	682b      	ldr	r3, [r5, #0]
 80092d6:	2b00      	cmp	r3, #0
 80092d8:	d000      	beq.n	80092dc <_close_r+0x1c>
 80092da:	6023      	str	r3, [r4, #0]
 80092dc:	bd70      	pop	{r4, r5, r6, pc}
 80092de:	46c0      	nop			; (mov r8, r8)
 80092e0:	20000b2c 	.word	0x20000b2c

080092e4 <_lseek_r>:
 80092e4:	b570      	push	{r4, r5, r6, lr}
 80092e6:	0004      	movs	r4, r0
 80092e8:	0008      	movs	r0, r1
 80092ea:	0011      	movs	r1, r2
 80092ec:	001a      	movs	r2, r3
 80092ee:	2300      	movs	r3, #0
 80092f0:	4d05      	ldr	r5, [pc, #20]	; (8009308 <_lseek_r+0x24>)
 80092f2:	602b      	str	r3, [r5, #0]
 80092f4:	f7fa fa48 	bl	8003788 <_lseek>
 80092f8:	1c43      	adds	r3, r0, #1
 80092fa:	d103      	bne.n	8009304 <_lseek_r+0x20>
 80092fc:	682b      	ldr	r3, [r5, #0]
 80092fe:	2b00      	cmp	r3, #0
 8009300:	d000      	beq.n	8009304 <_lseek_r+0x20>
 8009302:	6023      	str	r3, [r4, #0]
 8009304:	bd70      	pop	{r4, r5, r6, pc}
 8009306:	46c0      	nop			; (mov r8, r8)
 8009308:	20000b2c 	.word	0x20000b2c

0800930c <_read_r>:
 800930c:	b570      	push	{r4, r5, r6, lr}
 800930e:	0004      	movs	r4, r0
 8009310:	0008      	movs	r0, r1
 8009312:	0011      	movs	r1, r2
 8009314:	001a      	movs	r2, r3
 8009316:	2300      	movs	r3, #0
 8009318:	4d05      	ldr	r5, [pc, #20]	; (8009330 <_read_r+0x24>)
 800931a:	602b      	str	r3, [r5, #0]
 800931c:	f7fa f9da 	bl	80036d4 <_read>
 8009320:	1c43      	adds	r3, r0, #1
 8009322:	d103      	bne.n	800932c <_read_r+0x20>
 8009324:	682b      	ldr	r3, [r5, #0]
 8009326:	2b00      	cmp	r3, #0
 8009328:	d000      	beq.n	800932c <_read_r+0x20>
 800932a:	6023      	str	r3, [r4, #0]
 800932c:	bd70      	pop	{r4, r5, r6, pc}
 800932e:	46c0      	nop			; (mov r8, r8)
 8009330:	20000b2c 	.word	0x20000b2c

08009334 <_write_r>:
 8009334:	b570      	push	{r4, r5, r6, lr}
 8009336:	0004      	movs	r4, r0
 8009338:	0008      	movs	r0, r1
 800933a:	0011      	movs	r1, r2
 800933c:	001a      	movs	r2, r3
 800933e:	2300      	movs	r3, #0
 8009340:	4d05      	ldr	r5, [pc, #20]	; (8009358 <_write_r+0x24>)
 8009342:	602b      	str	r3, [r5, #0]
 8009344:	f7fa f9e3 	bl	800370e <_write>
 8009348:	1c43      	adds	r3, r0, #1
 800934a:	d103      	bne.n	8009354 <_write_r+0x20>
 800934c:	682b      	ldr	r3, [r5, #0]
 800934e:	2b00      	cmp	r3, #0
 8009350:	d000      	beq.n	8009354 <_write_r+0x20>
 8009352:	6023      	str	r3, [r4, #0]
 8009354:	bd70      	pop	{r4, r5, r6, pc}
 8009356:	46c0      	nop			; (mov r8, r8)
 8009358:	20000b2c 	.word	0x20000b2c

0800935c <__errno>:
 800935c:	4b01      	ldr	r3, [pc, #4]	; (8009364 <__errno+0x8>)
 800935e:	6818      	ldr	r0, [r3, #0]
 8009360:	4770      	bx	lr
 8009362:	46c0      	nop			; (mov r8, r8)
 8009364:	200002b8 	.word	0x200002b8

08009368 <__libc_init_array>:
 8009368:	b570      	push	{r4, r5, r6, lr}
 800936a:	2600      	movs	r6, #0
 800936c:	4c0c      	ldr	r4, [pc, #48]	; (80093a0 <__libc_init_array+0x38>)
 800936e:	4d0d      	ldr	r5, [pc, #52]	; (80093a4 <__libc_init_array+0x3c>)
 8009370:	1b64      	subs	r4, r4, r5
 8009372:	10a4      	asrs	r4, r4, #2
 8009374:	42a6      	cmp	r6, r4
 8009376:	d109      	bne.n	800938c <__libc_init_array+0x24>
 8009378:	2600      	movs	r6, #0
 800937a:	f004 fced 	bl	800dd58 <_init>
 800937e:	4c0a      	ldr	r4, [pc, #40]	; (80093a8 <__libc_init_array+0x40>)
 8009380:	4d0a      	ldr	r5, [pc, #40]	; (80093ac <__libc_init_array+0x44>)
 8009382:	1b64      	subs	r4, r4, r5
 8009384:	10a4      	asrs	r4, r4, #2
 8009386:	42a6      	cmp	r6, r4
 8009388:	d105      	bne.n	8009396 <__libc_init_array+0x2e>
 800938a:	bd70      	pop	{r4, r5, r6, pc}
 800938c:	00b3      	lsls	r3, r6, #2
 800938e:	58eb      	ldr	r3, [r5, r3]
 8009390:	4798      	blx	r3
 8009392:	3601      	adds	r6, #1
 8009394:	e7ee      	b.n	8009374 <__libc_init_array+0xc>
 8009396:	00b3      	lsls	r3, r6, #2
 8009398:	58eb      	ldr	r3, [r5, r3]
 800939a:	4798      	blx	r3
 800939c:	3601      	adds	r6, #1
 800939e:	e7f2      	b.n	8009386 <__libc_init_array+0x1e>
 80093a0:	0800fc84 	.word	0x0800fc84
 80093a4:	0800fc84 	.word	0x0800fc84
 80093a8:	0800fc8c 	.word	0x0800fc8c
 80093ac:	0800fc84 	.word	0x0800fc84

080093b0 <__retarget_lock_init_recursive>:
 80093b0:	4770      	bx	lr

080093b2 <__retarget_lock_close_recursive>:
 80093b2:	4770      	bx	lr

080093b4 <__retarget_lock_acquire_recursive>:
 80093b4:	4770      	bx	lr

080093b6 <__retarget_lock_release_recursive>:
 80093b6:	4770      	bx	lr

080093b8 <memcpy>:
 80093b8:	2300      	movs	r3, #0
 80093ba:	b510      	push	{r4, lr}
 80093bc:	429a      	cmp	r2, r3
 80093be:	d100      	bne.n	80093c2 <memcpy+0xa>
 80093c0:	bd10      	pop	{r4, pc}
 80093c2:	5ccc      	ldrb	r4, [r1, r3]
 80093c4:	54c4      	strb	r4, [r0, r3]
 80093c6:	3301      	adds	r3, #1
 80093c8:	e7f8      	b.n	80093bc <memcpy+0x4>
	...

080093cc <register_fini>:
 80093cc:	4b03      	ldr	r3, [pc, #12]	; (80093dc <register_fini+0x10>)
 80093ce:	b510      	push	{r4, lr}
 80093d0:	2b00      	cmp	r3, #0
 80093d2:	d002      	beq.n	80093da <register_fini+0xe>
 80093d4:	4802      	ldr	r0, [pc, #8]	; (80093e0 <register_fini+0x14>)
 80093d6:	f000 f805 	bl	80093e4 <atexit>
 80093da:	bd10      	pop	{r4, pc}
 80093dc:	00000000 	.word	0x00000000
 80093e0:	0800b82d 	.word	0x0800b82d

080093e4 <atexit>:
 80093e4:	2300      	movs	r3, #0
 80093e6:	b510      	push	{r4, lr}
 80093e8:	0001      	movs	r1, r0
 80093ea:	001a      	movs	r2, r3
 80093ec:	0018      	movs	r0, r3
 80093ee:	f002 fa79 	bl	800b8e4 <__register_exitproc>
 80093f2:	bd10      	pop	{r4, pc}

080093f4 <_malloc_trim_r>:
 80093f4:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80093f6:	0004      	movs	r4, r0
 80093f8:	2008      	movs	r0, #8
 80093fa:	000d      	movs	r5, r1
 80093fc:	f002 fa2a 	bl	800b854 <sysconf>
 8009400:	0006      	movs	r6, r0
 8009402:	0020      	movs	r0, r4
 8009404:	f000 fb22 	bl	8009a4c <__malloc_lock>
 8009408:	2203      	movs	r2, #3
 800940a:	4f21      	ldr	r7, [pc, #132]	; (8009490 <_malloc_trim_r+0x9c>)
 800940c:	0031      	movs	r1, r6
 800940e:	68bb      	ldr	r3, [r7, #8]
 8009410:	685b      	ldr	r3, [r3, #4]
 8009412:	4393      	bics	r3, r2
 8009414:	1b58      	subs	r0, r3, r5
 8009416:	3811      	subs	r0, #17
 8009418:	1980      	adds	r0, r0, r6
 800941a:	9301      	str	r3, [sp, #4]
 800941c:	f7f6 fe8e 	bl	800013c <__udivsi3>
 8009420:	1e45      	subs	r5, r0, #1
 8009422:	4375      	muls	r5, r6
 8009424:	42ae      	cmp	r6, r5
 8009426:	dd04      	ble.n	8009432 <_malloc_trim_r+0x3e>
 8009428:	0020      	movs	r0, r4
 800942a:	f000 fb17 	bl	8009a5c <__malloc_unlock>
 800942e:	2000      	movs	r0, #0
 8009430:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8009432:	2100      	movs	r1, #0
 8009434:	0020      	movs	r0, r4
 8009436:	f002 f9e7 	bl	800b808 <_sbrk_r>
 800943a:	68bb      	ldr	r3, [r7, #8]
 800943c:	9a01      	ldr	r2, [sp, #4]
 800943e:	189b      	adds	r3, r3, r2
 8009440:	4298      	cmp	r0, r3
 8009442:	d1f1      	bne.n	8009428 <_malloc_trim_r+0x34>
 8009444:	0020      	movs	r0, r4
 8009446:	4269      	negs	r1, r5
 8009448:	f002 f9de 	bl	800b808 <_sbrk_r>
 800944c:	3001      	adds	r0, #1
 800944e:	d110      	bne.n	8009472 <_malloc_trim_r+0x7e>
 8009450:	2100      	movs	r1, #0
 8009452:	0020      	movs	r0, r4
 8009454:	f002 f9d8 	bl	800b808 <_sbrk_r>
 8009458:	68ba      	ldr	r2, [r7, #8]
 800945a:	1a81      	subs	r1, r0, r2
 800945c:	290f      	cmp	r1, #15
 800945e:	dde3      	ble.n	8009428 <_malloc_trim_r+0x34>
 8009460:	4d0c      	ldr	r5, [pc, #48]	; (8009494 <_malloc_trim_r+0xa0>)
 8009462:	4b0d      	ldr	r3, [pc, #52]	; (8009498 <_malloc_trim_r+0xa4>)
 8009464:	682d      	ldr	r5, [r5, #0]
 8009466:	1b40      	subs	r0, r0, r5
 8009468:	6018      	str	r0, [r3, #0]
 800946a:	2301      	movs	r3, #1
 800946c:	430b      	orrs	r3, r1
 800946e:	6053      	str	r3, [r2, #4]
 8009470:	e7da      	b.n	8009428 <_malloc_trim_r+0x34>
 8009472:	2601      	movs	r6, #1
 8009474:	9b01      	ldr	r3, [sp, #4]
 8009476:	68ba      	ldr	r2, [r7, #8]
 8009478:	1b5b      	subs	r3, r3, r5
 800947a:	4333      	orrs	r3, r6
 800947c:	6053      	str	r3, [r2, #4]
 800947e:	4a06      	ldr	r2, [pc, #24]	; (8009498 <_malloc_trim_r+0xa4>)
 8009480:	0020      	movs	r0, r4
 8009482:	6813      	ldr	r3, [r2, #0]
 8009484:	1b5b      	subs	r3, r3, r5
 8009486:	6013      	str	r3, [r2, #0]
 8009488:	f000 fae8 	bl	8009a5c <__malloc_unlock>
 800948c:	0030      	movs	r0, r6
 800948e:	e7cf      	b.n	8009430 <_malloc_trim_r+0x3c>
 8009490:	200002c0 	.word	0x200002c0
 8009494:	200006c8 	.word	0x200006c8
 8009498:	20000b38 	.word	0x20000b38

0800949c <_free_r>:
 800949c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800949e:	1e0d      	subs	r5, r1, #0
 80094a0:	9001      	str	r0, [sp, #4]
 80094a2:	d02d      	beq.n	8009500 <_free_r+0x64>
 80094a4:	f000 fad2 	bl	8009a4c <__malloc_lock>
 80094a8:	2301      	movs	r3, #1
 80094aa:	0029      	movs	r1, r5
 80094ac:	469c      	mov	ip, r3
 80094ae:	3908      	subs	r1, #8
 80094b0:	684f      	ldr	r7, [r1, #4]
 80094b2:	4662      	mov	r2, ip
 80094b4:	003b      	movs	r3, r7
 80094b6:	4664      	mov	r4, ip
 80094b8:	4393      	bics	r3, r2
 80094ba:	18c8      	adds	r0, r1, r3
 80094bc:	6845      	ldr	r5, [r0, #4]
 80094be:	3202      	adds	r2, #2
 80094c0:	4395      	bics	r5, r2
 80094c2:	4a4a      	ldr	r2, [pc, #296]	; (80095ec <_free_r+0x150>)
 80094c4:	4027      	ands	r7, r4
 80094c6:	6896      	ldr	r6, [r2, #8]
 80094c8:	4286      	cmp	r6, r0
 80094ca:	d11a      	bne.n	8009502 <_free_r+0x66>
 80094cc:	195b      	adds	r3, r3, r5
 80094ce:	2f00      	cmp	r7, #0
 80094d0:	d106      	bne.n	80094e0 <_free_r+0x44>
 80094d2:	6808      	ldr	r0, [r1, #0]
 80094d4:	1a09      	subs	r1, r1, r0
 80094d6:	688d      	ldr	r5, [r1, #8]
 80094d8:	181b      	adds	r3, r3, r0
 80094da:	68c8      	ldr	r0, [r1, #12]
 80094dc:	60e8      	str	r0, [r5, #12]
 80094de:	6085      	str	r5, [r0, #8]
 80094e0:	2001      	movs	r0, #1
 80094e2:	4318      	orrs	r0, r3
 80094e4:	6048      	str	r0, [r1, #4]
 80094e6:	6091      	str	r1, [r2, #8]
 80094e8:	4a41      	ldr	r2, [pc, #260]	; (80095f0 <_free_r+0x154>)
 80094ea:	6812      	ldr	r2, [r2, #0]
 80094ec:	429a      	cmp	r2, r3
 80094ee:	d804      	bhi.n	80094fa <_free_r+0x5e>
 80094f0:	4b40      	ldr	r3, [pc, #256]	; (80095f4 <_free_r+0x158>)
 80094f2:	9801      	ldr	r0, [sp, #4]
 80094f4:	6819      	ldr	r1, [r3, #0]
 80094f6:	f7ff ff7d 	bl	80093f4 <_malloc_trim_r>
 80094fa:	9801      	ldr	r0, [sp, #4]
 80094fc:	f000 faae 	bl	8009a5c <__malloc_unlock>
 8009500:	bdf7      	pop	{r0, r1, r2, r4, r5, r6, r7, pc}
 8009502:	2600      	movs	r6, #0
 8009504:	6045      	str	r5, [r0, #4]
 8009506:	42b7      	cmp	r7, r6
 8009508:	d109      	bne.n	800951e <_free_r+0x82>
 800950a:	680f      	ldr	r7, [r1, #0]
 800950c:	4c3a      	ldr	r4, [pc, #232]	; (80095f8 <_free_r+0x15c>)
 800950e:	1bc9      	subs	r1, r1, r7
 8009510:	19db      	adds	r3, r3, r7
 8009512:	688f      	ldr	r7, [r1, #8]
 8009514:	42a7      	cmp	r7, r4
 8009516:	d02c      	beq.n	8009572 <_free_r+0xd6>
 8009518:	68cc      	ldr	r4, [r1, #12]
 800951a:	60fc      	str	r4, [r7, #12]
 800951c:	60a7      	str	r7, [r4, #8]
 800951e:	1947      	adds	r7, r0, r5
 8009520:	687c      	ldr	r4, [r7, #4]
 8009522:	2701      	movs	r7, #1
 8009524:	423c      	tst	r4, r7
 8009526:	d10b      	bne.n	8009540 <_free_r+0xa4>
 8009528:	195b      	adds	r3, r3, r5
 800952a:	6885      	ldr	r5, [r0, #8]
 800952c:	2e00      	cmp	r6, #0
 800952e:	d122      	bne.n	8009576 <_free_r+0xda>
 8009530:	4c31      	ldr	r4, [pc, #196]	; (80095f8 <_free_r+0x15c>)
 8009532:	42a5      	cmp	r5, r4
 8009534:	d11f      	bne.n	8009576 <_free_r+0xda>
 8009536:	003e      	movs	r6, r7
 8009538:	6151      	str	r1, [r2, #20]
 800953a:	6111      	str	r1, [r2, #16]
 800953c:	60cd      	str	r5, [r1, #12]
 800953e:	608d      	str	r5, [r1, #8]
 8009540:	2501      	movs	r5, #1
 8009542:	0028      	movs	r0, r5
 8009544:	4318      	orrs	r0, r3
 8009546:	6048      	str	r0, [r1, #4]
 8009548:	50cb      	str	r3, [r1, r3]
 800954a:	2e00      	cmp	r6, #0
 800954c:	d1d5      	bne.n	80094fa <_free_r+0x5e>
 800954e:	2080      	movs	r0, #128	; 0x80
 8009550:	0080      	lsls	r0, r0, #2
 8009552:	4283      	cmp	r3, r0
 8009554:	d213      	bcs.n	800957e <_free_r+0xe2>
 8009556:	08d8      	lsrs	r0, r3, #3
 8009558:	095b      	lsrs	r3, r3, #5
 800955a:	409d      	lsls	r5, r3
 800955c:	6853      	ldr	r3, [r2, #4]
 800955e:	431d      	orrs	r5, r3
 8009560:	00c3      	lsls	r3, r0, #3
 8009562:	189b      	adds	r3, r3, r2
 8009564:	6055      	str	r5, [r2, #4]
 8009566:	689a      	ldr	r2, [r3, #8]
 8009568:	60cb      	str	r3, [r1, #12]
 800956a:	608a      	str	r2, [r1, #8]
 800956c:	6099      	str	r1, [r3, #8]
 800956e:	60d1      	str	r1, [r2, #12]
 8009570:	e7c3      	b.n	80094fa <_free_r+0x5e>
 8009572:	4666      	mov	r6, ip
 8009574:	e7d3      	b.n	800951e <_free_r+0x82>
 8009576:	68c0      	ldr	r0, [r0, #12]
 8009578:	60e8      	str	r0, [r5, #12]
 800957a:	6085      	str	r5, [r0, #8]
 800957c:	e7e0      	b.n	8009540 <_free_r+0xa4>
 800957e:	0a5d      	lsrs	r5, r3, #9
 8009580:	2d04      	cmp	r5, #4
 8009582:	d812      	bhi.n	80095aa <_free_r+0x10e>
 8009584:	0998      	lsrs	r0, r3, #6
 8009586:	3038      	adds	r0, #56	; 0x38
 8009588:	00c6      	lsls	r6, r0, #3
 800958a:	18b6      	adds	r6, r6, r2
 800958c:	68b5      	ldr	r5, [r6, #8]
 800958e:	2703      	movs	r7, #3
 8009590:	42ae      	cmp	r6, r5
 8009592:	d125      	bne.n	80095e0 <_free_r+0x144>
 8009594:	2301      	movs	r3, #1
 8009596:	1080      	asrs	r0, r0, #2
 8009598:	4083      	lsls	r3, r0
 800959a:	6850      	ldr	r0, [r2, #4]
 800959c:	4303      	orrs	r3, r0
 800959e:	6053      	str	r3, [r2, #4]
 80095a0:	60ce      	str	r6, [r1, #12]
 80095a2:	608d      	str	r5, [r1, #8]
 80095a4:	60b1      	str	r1, [r6, #8]
 80095a6:	60e9      	str	r1, [r5, #12]
 80095a8:	e7a7      	b.n	80094fa <_free_r+0x5e>
 80095aa:	2d14      	cmp	r5, #20
 80095ac:	d802      	bhi.n	80095b4 <_free_r+0x118>
 80095ae:	0028      	movs	r0, r5
 80095b0:	305b      	adds	r0, #91	; 0x5b
 80095b2:	e7e9      	b.n	8009588 <_free_r+0xec>
 80095b4:	2d54      	cmp	r5, #84	; 0x54
 80095b6:	d802      	bhi.n	80095be <_free_r+0x122>
 80095b8:	0b18      	lsrs	r0, r3, #12
 80095ba:	306e      	adds	r0, #110	; 0x6e
 80095bc:	e7e4      	b.n	8009588 <_free_r+0xec>
 80095be:	20aa      	movs	r0, #170	; 0xaa
 80095c0:	0040      	lsls	r0, r0, #1
 80095c2:	4285      	cmp	r5, r0
 80095c4:	d802      	bhi.n	80095cc <_free_r+0x130>
 80095c6:	0bd8      	lsrs	r0, r3, #15
 80095c8:	3077      	adds	r0, #119	; 0x77
 80095ca:	e7dd      	b.n	8009588 <_free_r+0xec>
 80095cc:	4e0b      	ldr	r6, [pc, #44]	; (80095fc <_free_r+0x160>)
 80095ce:	207e      	movs	r0, #126	; 0x7e
 80095d0:	42b5      	cmp	r5, r6
 80095d2:	d8d9      	bhi.n	8009588 <_free_r+0xec>
 80095d4:	0c98      	lsrs	r0, r3, #18
 80095d6:	307c      	adds	r0, #124	; 0x7c
 80095d8:	e7d6      	b.n	8009588 <_free_r+0xec>
 80095da:	68ad      	ldr	r5, [r5, #8]
 80095dc:	42ae      	cmp	r6, r5
 80095de:	d003      	beq.n	80095e8 <_free_r+0x14c>
 80095e0:	686a      	ldr	r2, [r5, #4]
 80095e2:	43ba      	bics	r2, r7
 80095e4:	429a      	cmp	r2, r3
 80095e6:	d8f8      	bhi.n	80095da <_free_r+0x13e>
 80095e8:	68ee      	ldr	r6, [r5, #12]
 80095ea:	e7d9      	b.n	80095a0 <_free_r+0x104>
 80095ec:	200002c0 	.word	0x200002c0
 80095f0:	200006cc 	.word	0x200006cc
 80095f4:	20000b68 	.word	0x20000b68
 80095f8:	200002c8 	.word	0x200002c8
 80095fc:	00000554 	.word	0x00000554

08009600 <_malloc_r>:
 8009600:	b5f0      	push	{r4, r5, r6, r7, lr}
 8009602:	000d      	movs	r5, r1
 8009604:	b087      	sub	sp, #28
 8009606:	350b      	adds	r5, #11
 8009608:	9001      	str	r0, [sp, #4]
 800960a:	2d16      	cmp	r5, #22
 800960c:	d908      	bls.n	8009620 <_malloc_r+0x20>
 800960e:	2207      	movs	r2, #7
 8009610:	4395      	bics	r5, r2
 8009612:	d506      	bpl.n	8009622 <_malloc_r+0x22>
 8009614:	230c      	movs	r3, #12
 8009616:	9a01      	ldr	r2, [sp, #4]
 8009618:	6013      	str	r3, [r2, #0]
 800961a:	2000      	movs	r0, #0
 800961c:	b007      	add	sp, #28
 800961e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8009620:	2510      	movs	r5, #16
 8009622:	42a9      	cmp	r1, r5
 8009624:	d8f6      	bhi.n	8009614 <_malloc_r+0x14>
 8009626:	9801      	ldr	r0, [sp, #4]
 8009628:	f000 fa10 	bl	8009a4c <__malloc_lock>
 800962c:	23fc      	movs	r3, #252	; 0xfc
 800962e:	4ebe      	ldr	r6, [pc, #760]	; (8009928 <_malloc_r+0x328>)
 8009630:	005b      	lsls	r3, r3, #1
 8009632:	429d      	cmp	r5, r3
 8009634:	d219      	bcs.n	800966a <_malloc_r+0x6a>
 8009636:	002a      	movs	r2, r5
 8009638:	3208      	adds	r2, #8
 800963a:	18b2      	adds	r2, r6, r2
 800963c:	0011      	movs	r1, r2
 800963e:	6854      	ldr	r4, [r2, #4]
 8009640:	3908      	subs	r1, #8
 8009642:	08eb      	lsrs	r3, r5, #3
 8009644:	428c      	cmp	r4, r1
 8009646:	d103      	bne.n	8009650 <_malloc_r+0x50>
 8009648:	68d4      	ldr	r4, [r2, #12]
 800964a:	3302      	adds	r3, #2
 800964c:	42a2      	cmp	r2, r4
 800964e:	d022      	beq.n	8009696 <_malloc_r+0x96>
 8009650:	2203      	movs	r2, #3
 8009652:	6863      	ldr	r3, [r4, #4]
 8009654:	68a1      	ldr	r1, [r4, #8]
 8009656:	4393      	bics	r3, r2
 8009658:	68e2      	ldr	r2, [r4, #12]
 800965a:	18e3      	adds	r3, r4, r3
 800965c:	60ca      	str	r2, [r1, #12]
 800965e:	6091      	str	r1, [r2, #8]
 8009660:	2201      	movs	r2, #1
 8009662:	6859      	ldr	r1, [r3, #4]
 8009664:	430a      	orrs	r2, r1
 8009666:	605a      	str	r2, [r3, #4]
 8009668:	e02a      	b.n	80096c0 <_malloc_r+0xc0>
 800966a:	233f      	movs	r3, #63	; 0x3f
 800966c:	0a6a      	lsrs	r2, r5, #9
 800966e:	d003      	beq.n	8009678 <_malloc_r+0x78>
 8009670:	2a04      	cmp	r2, #4
 8009672:	d82b      	bhi.n	80096cc <_malloc_r+0xcc>
 8009674:	09ab      	lsrs	r3, r5, #6
 8009676:	3338      	adds	r3, #56	; 0x38
 8009678:	2203      	movs	r2, #3
 800967a:	4694      	mov	ip, r2
 800967c:	00d9      	lsls	r1, r3, #3
 800967e:	1989      	adds	r1, r1, r6
 8009680:	68cc      	ldr	r4, [r1, #12]
 8009682:	428c      	cmp	r4, r1
 8009684:	d006      	beq.n	8009694 <_malloc_r+0x94>
 8009686:	4660      	mov	r0, ip
 8009688:	6862      	ldr	r2, [r4, #4]
 800968a:	4382      	bics	r2, r0
 800968c:	1b57      	subs	r7, r2, r5
 800968e:	2f0f      	cmp	r7, #15
 8009690:	dd34      	ble.n	80096fc <_malloc_r+0xfc>
 8009692:	3b01      	subs	r3, #1
 8009694:	3301      	adds	r3, #1
 8009696:	6934      	ldr	r4, [r6, #16]
 8009698:	49a4      	ldr	r1, [pc, #656]	; (800992c <_malloc_r+0x32c>)
 800969a:	428c      	cmp	r4, r1
 800969c:	d055      	beq.n	800974a <_malloc_r+0x14a>
 800969e:	2003      	movs	r0, #3
 80096a0:	6862      	ldr	r2, [r4, #4]
 80096a2:	4382      	bics	r2, r0
 80096a4:	1b50      	subs	r0, r2, r5
 80096a6:	280f      	cmp	r0, #15
 80096a8:	dd36      	ble.n	8009718 <_malloc_r+0x118>
 80096aa:	2301      	movs	r3, #1
 80096ac:	1967      	adds	r7, r4, r5
 80096ae:	431d      	orrs	r5, r3
 80096b0:	4303      	orrs	r3, r0
 80096b2:	6065      	str	r5, [r4, #4]
 80096b4:	6177      	str	r7, [r6, #20]
 80096b6:	6137      	str	r7, [r6, #16]
 80096b8:	60f9      	str	r1, [r7, #12]
 80096ba:	60b9      	str	r1, [r7, #8]
 80096bc:	607b      	str	r3, [r7, #4]
 80096be:	50a0      	str	r0, [r4, r2]
 80096c0:	9801      	ldr	r0, [sp, #4]
 80096c2:	f000 f9cb 	bl	8009a5c <__malloc_unlock>
 80096c6:	0020      	movs	r0, r4
 80096c8:	3008      	adds	r0, #8
 80096ca:	e7a7      	b.n	800961c <_malloc_r+0x1c>
 80096cc:	2a14      	cmp	r2, #20
 80096ce:	d802      	bhi.n	80096d6 <_malloc_r+0xd6>
 80096d0:	0013      	movs	r3, r2
 80096d2:	335b      	adds	r3, #91	; 0x5b
 80096d4:	e7d0      	b.n	8009678 <_malloc_r+0x78>
 80096d6:	2a54      	cmp	r2, #84	; 0x54
 80096d8:	d802      	bhi.n	80096e0 <_malloc_r+0xe0>
 80096da:	0b2b      	lsrs	r3, r5, #12
 80096dc:	336e      	adds	r3, #110	; 0x6e
 80096de:	e7cb      	b.n	8009678 <_malloc_r+0x78>
 80096e0:	23aa      	movs	r3, #170	; 0xaa
 80096e2:	005b      	lsls	r3, r3, #1
 80096e4:	429a      	cmp	r2, r3
 80096e6:	d802      	bhi.n	80096ee <_malloc_r+0xee>
 80096e8:	0beb      	lsrs	r3, r5, #15
 80096ea:	3377      	adds	r3, #119	; 0x77
 80096ec:	e7c4      	b.n	8009678 <_malloc_r+0x78>
 80096ee:	4990      	ldr	r1, [pc, #576]	; (8009930 <_malloc_r+0x330>)
 80096f0:	237e      	movs	r3, #126	; 0x7e
 80096f2:	428a      	cmp	r2, r1
 80096f4:	d8c0      	bhi.n	8009678 <_malloc_r+0x78>
 80096f6:	0cab      	lsrs	r3, r5, #18
 80096f8:	337c      	adds	r3, #124	; 0x7c
 80096fa:	e7bd      	b.n	8009678 <_malloc_r+0x78>
 80096fc:	68e0      	ldr	r0, [r4, #12]
 80096fe:	2f00      	cmp	r7, #0
 8009700:	db08      	blt.n	8009714 <_malloc_r+0x114>
 8009702:	68a3      	ldr	r3, [r4, #8]
 8009704:	60d8      	str	r0, [r3, #12]
 8009706:	6083      	str	r3, [r0, #8]
 8009708:	2301      	movs	r3, #1
 800970a:	18a2      	adds	r2, r4, r2
 800970c:	6851      	ldr	r1, [r2, #4]
 800970e:	430b      	orrs	r3, r1
 8009710:	6053      	str	r3, [r2, #4]
 8009712:	e7d5      	b.n	80096c0 <_malloc_r+0xc0>
 8009714:	0004      	movs	r4, r0
 8009716:	e7b4      	b.n	8009682 <_malloc_r+0x82>
 8009718:	6171      	str	r1, [r6, #20]
 800971a:	6131      	str	r1, [r6, #16]
 800971c:	2800      	cmp	r0, #0
 800971e:	daf3      	bge.n	8009708 <_malloc_r+0x108>
 8009720:	6871      	ldr	r1, [r6, #4]
 8009722:	468c      	mov	ip, r1
 8009724:	2180      	movs	r1, #128	; 0x80
 8009726:	0089      	lsls	r1, r1, #2
 8009728:	428a      	cmp	r2, r1
 800972a:	d300      	bcc.n	800972e <_malloc_r+0x12e>
 800972c:	e08c      	b.n	8009848 <_malloc_r+0x248>
 800972e:	08d1      	lsrs	r1, r2, #3
 8009730:	0950      	lsrs	r0, r2, #5
 8009732:	2201      	movs	r2, #1
 8009734:	4082      	lsls	r2, r0
 8009736:	4660      	mov	r0, ip
 8009738:	4302      	orrs	r2, r0
 800973a:	6072      	str	r2, [r6, #4]
 800973c:	00ca      	lsls	r2, r1, #3
 800973e:	1992      	adds	r2, r2, r6
 8009740:	6891      	ldr	r1, [r2, #8]
 8009742:	60e2      	str	r2, [r4, #12]
 8009744:	60a1      	str	r1, [r4, #8]
 8009746:	6094      	str	r4, [r2, #8]
 8009748:	60cc      	str	r4, [r1, #12]
 800974a:	2201      	movs	r2, #1
 800974c:	4876      	ldr	r0, [pc, #472]	; (8009928 <_malloc_r+0x328>)
 800974e:	1099      	asrs	r1, r3, #2
 8009750:	408a      	lsls	r2, r1
 8009752:	6841      	ldr	r1, [r0, #4]
 8009754:	4291      	cmp	r1, r2
 8009756:	d328      	bcc.n	80097aa <_malloc_r+0x1aa>
 8009758:	420a      	tst	r2, r1
 800975a:	d105      	bne.n	8009768 <_malloc_r+0x168>
 800975c:	2403      	movs	r4, #3
 800975e:	43a3      	bics	r3, r4
 8009760:	0052      	lsls	r2, r2, #1
 8009762:	3304      	adds	r3, #4
 8009764:	420a      	tst	r2, r1
 8009766:	d0fb      	beq.n	8009760 <_malloc_r+0x160>
 8009768:	496f      	ldr	r1, [pc, #444]	; (8009928 <_malloc_r+0x328>)
 800976a:	9104      	str	r1, [sp, #16]
 800976c:	00d9      	lsls	r1, r3, #3
 800976e:	1841      	adds	r1, r0, r1
 8009770:	468c      	mov	ip, r1
 8009772:	000f      	movs	r7, r1
 8009774:	9302      	str	r3, [sp, #8]
 8009776:	68fc      	ldr	r4, [r7, #12]
 8009778:	42bc      	cmp	r4, r7
 800977a:	d000      	beq.n	800977e <_malloc_r+0x17e>
 800977c:	e09b      	b.n	80098b6 <_malloc_r+0x2b6>
 800977e:	2403      	movs	r4, #3
 8009780:	9902      	ldr	r1, [sp, #8]
 8009782:	3708      	adds	r7, #8
 8009784:	3101      	adds	r1, #1
 8009786:	9102      	str	r1, [sp, #8]
 8009788:	4221      	tst	r1, r4
 800978a:	d1f4      	bne.n	8009776 <_malloc_r+0x176>
 800978c:	2103      	movs	r1, #3
 800978e:	420b      	tst	r3, r1
 8009790:	d000      	beq.n	8009794 <_malloc_r+0x194>
 8009792:	e0b7      	b.n	8009904 <_malloc_r+0x304>
 8009794:	6843      	ldr	r3, [r0, #4]
 8009796:	4393      	bics	r3, r2
 8009798:	6043      	str	r3, [r0, #4]
 800979a:	9b04      	ldr	r3, [sp, #16]
 800979c:	0052      	lsls	r2, r2, #1
 800979e:	6859      	ldr	r1, [r3, #4]
 80097a0:	4291      	cmp	r1, r2
 80097a2:	d302      	bcc.n	80097aa <_malloc_r+0x1aa>
 80097a4:	2a00      	cmp	r2, #0
 80097a6:	d000      	beq.n	80097aa <_malloc_r+0x1aa>
 80097a8:	e0bb      	b.n	8009922 <_malloc_r+0x322>
 80097aa:	2203      	movs	r2, #3
 80097ac:	6883      	ldr	r3, [r0, #8]
 80097ae:	9302      	str	r3, [sp, #8]
 80097b0:	685b      	ldr	r3, [r3, #4]
 80097b2:	4393      	bics	r3, r2
 80097b4:	9303      	str	r3, [sp, #12]
 80097b6:	42ab      	cmp	r3, r5
 80097b8:	d303      	bcc.n	80097c2 <_malloc_r+0x1c2>
 80097ba:	1b59      	subs	r1, r3, r5
 80097bc:	290f      	cmp	r1, #15
 80097be:	dd00      	ble.n	80097c2 <_malloc_r+0x1c2>
 80097c0:	e123      	b.n	8009a0a <_malloc_r+0x40a>
 80097c2:	9b02      	ldr	r3, [sp, #8]
 80097c4:	9a03      	ldr	r2, [sp, #12]
 80097c6:	2008      	movs	r0, #8
 80097c8:	189e      	adds	r6, r3, r2
 80097ca:	4b5a      	ldr	r3, [pc, #360]	; (8009934 <_malloc_r+0x334>)
 80097cc:	681f      	ldr	r7, [r3, #0]
 80097ce:	f002 f841 	bl	800b854 <sysconf>
 80097d2:	4b59      	ldr	r3, [pc, #356]	; (8009938 <_malloc_r+0x338>)
 80097d4:	3710      	adds	r7, #16
 80097d6:	681b      	ldr	r3, [r3, #0]
 80097d8:	197f      	adds	r7, r7, r5
 80097da:	9004      	str	r0, [sp, #16]
 80097dc:	3301      	adds	r3, #1
 80097de:	d003      	beq.n	80097e8 <_malloc_r+0x1e8>
 80097e0:	1e7b      	subs	r3, r7, #1
 80097e2:	181b      	adds	r3, r3, r0
 80097e4:	4247      	negs	r7, r0
 80097e6:	401f      	ands	r7, r3
 80097e8:	0039      	movs	r1, r7
 80097ea:	9801      	ldr	r0, [sp, #4]
 80097ec:	f002 f80c 	bl	800b808 <_sbrk_r>
 80097f0:	0004      	movs	r4, r0
 80097f2:	1c43      	adds	r3, r0, #1
 80097f4:	d100      	bne.n	80097f8 <_malloc_r+0x1f8>
 80097f6:	e0de      	b.n	80099b6 <_malloc_r+0x3b6>
 80097f8:	4286      	cmp	r6, r0
 80097fa:	d904      	bls.n	8009806 <_malloc_r+0x206>
 80097fc:	4b4a      	ldr	r3, [pc, #296]	; (8009928 <_malloc_r+0x328>)
 80097fe:	9a02      	ldr	r2, [sp, #8]
 8009800:	429a      	cmp	r2, r3
 8009802:	d000      	beq.n	8009806 <_malloc_r+0x206>
 8009804:	e0d7      	b.n	80099b6 <_malloc_r+0x3b6>
 8009806:	4a4d      	ldr	r2, [pc, #308]	; (800993c <_malloc_r+0x33c>)
 8009808:	6813      	ldr	r3, [r2, #0]
 800980a:	18fb      	adds	r3, r7, r3
 800980c:	6013      	str	r3, [r2, #0]
 800980e:	9a04      	ldr	r2, [sp, #16]
 8009810:	3a01      	subs	r2, #1
 8009812:	42a6      	cmp	r6, r4
 8009814:	d000      	beq.n	8009818 <_malloc_r+0x218>
 8009816:	e097      	b.n	8009948 <_malloc_r+0x348>
 8009818:	4216      	tst	r6, r2
 800981a:	d000      	beq.n	800981e <_malloc_r+0x21e>
 800981c:	e094      	b.n	8009948 <_malloc_r+0x348>
 800981e:	4b42      	ldr	r3, [pc, #264]	; (8009928 <_malloc_r+0x328>)
 8009820:	689a      	ldr	r2, [r3, #8]
 8009822:	9b03      	ldr	r3, [sp, #12]
 8009824:	19df      	adds	r7, r3, r7
 8009826:	2301      	movs	r3, #1
 8009828:	433b      	orrs	r3, r7
 800982a:	6053      	str	r3, [r2, #4]
 800982c:	4b43      	ldr	r3, [pc, #268]	; (800993c <_malloc_r+0x33c>)
 800982e:	4a44      	ldr	r2, [pc, #272]	; (8009940 <_malloc_r+0x340>)
 8009830:	681b      	ldr	r3, [r3, #0]
 8009832:	6811      	ldr	r1, [r2, #0]
 8009834:	428b      	cmp	r3, r1
 8009836:	d900      	bls.n	800983a <_malloc_r+0x23a>
 8009838:	6013      	str	r3, [r2, #0]
 800983a:	4a42      	ldr	r2, [pc, #264]	; (8009944 <_malloc_r+0x344>)
 800983c:	6811      	ldr	r1, [r2, #0]
 800983e:	428b      	cmp	r3, r1
 8009840:	d800      	bhi.n	8009844 <_malloc_r+0x244>
 8009842:	e0b8      	b.n	80099b6 <_malloc_r+0x3b6>
 8009844:	6013      	str	r3, [r2, #0]
 8009846:	e0b6      	b.n	80099b6 <_malloc_r+0x3b6>
 8009848:	0a50      	lsrs	r0, r2, #9
 800984a:	2804      	cmp	r0, #4
 800984c:	d811      	bhi.n	8009872 <_malloc_r+0x272>
 800984e:	0991      	lsrs	r1, r2, #6
 8009850:	3138      	adds	r1, #56	; 0x38
 8009852:	00cf      	lsls	r7, r1, #3
 8009854:	19bf      	adds	r7, r7, r6
 8009856:	68b8      	ldr	r0, [r7, #8]
 8009858:	4287      	cmp	r7, r0
 800985a:	d125      	bne.n	80098a8 <_malloc_r+0x2a8>
 800985c:	2201      	movs	r2, #1
 800985e:	1089      	asrs	r1, r1, #2
 8009860:	408a      	lsls	r2, r1
 8009862:	4661      	mov	r1, ip
 8009864:	430a      	orrs	r2, r1
 8009866:	6072      	str	r2, [r6, #4]
 8009868:	60e7      	str	r7, [r4, #12]
 800986a:	60a0      	str	r0, [r4, #8]
 800986c:	60bc      	str	r4, [r7, #8]
 800986e:	60c4      	str	r4, [r0, #12]
 8009870:	e76b      	b.n	800974a <_malloc_r+0x14a>
 8009872:	2814      	cmp	r0, #20
 8009874:	d802      	bhi.n	800987c <_malloc_r+0x27c>
 8009876:	0001      	movs	r1, r0
 8009878:	315b      	adds	r1, #91	; 0x5b
 800987a:	e7ea      	b.n	8009852 <_malloc_r+0x252>
 800987c:	2854      	cmp	r0, #84	; 0x54
 800987e:	d802      	bhi.n	8009886 <_malloc_r+0x286>
 8009880:	0b11      	lsrs	r1, r2, #12
 8009882:	316e      	adds	r1, #110	; 0x6e
 8009884:	e7e5      	b.n	8009852 <_malloc_r+0x252>
 8009886:	21aa      	movs	r1, #170	; 0xaa
 8009888:	0049      	lsls	r1, r1, #1
 800988a:	4288      	cmp	r0, r1
 800988c:	d802      	bhi.n	8009894 <_malloc_r+0x294>
 800988e:	0bd1      	lsrs	r1, r2, #15
 8009890:	3177      	adds	r1, #119	; 0x77
 8009892:	e7de      	b.n	8009852 <_malloc_r+0x252>
 8009894:	4f26      	ldr	r7, [pc, #152]	; (8009930 <_malloc_r+0x330>)
 8009896:	217e      	movs	r1, #126	; 0x7e
 8009898:	42b8      	cmp	r0, r7
 800989a:	d8da      	bhi.n	8009852 <_malloc_r+0x252>
 800989c:	0c91      	lsrs	r1, r2, #18
 800989e:	317c      	adds	r1, #124	; 0x7c
 80098a0:	e7d7      	b.n	8009852 <_malloc_r+0x252>
 80098a2:	6880      	ldr	r0, [r0, #8]
 80098a4:	4287      	cmp	r7, r0
 80098a6:	d004      	beq.n	80098b2 <_malloc_r+0x2b2>
 80098a8:	2603      	movs	r6, #3
 80098aa:	6841      	ldr	r1, [r0, #4]
 80098ac:	43b1      	bics	r1, r6
 80098ae:	4291      	cmp	r1, r2
 80098b0:	d8f7      	bhi.n	80098a2 <_malloc_r+0x2a2>
 80098b2:	68c7      	ldr	r7, [r0, #12]
 80098b4:	e7d8      	b.n	8009868 <_malloc_r+0x268>
 80098b6:	2603      	movs	r6, #3
 80098b8:	6861      	ldr	r1, [r4, #4]
 80098ba:	43b1      	bics	r1, r6
 80098bc:	9103      	str	r1, [sp, #12]
 80098be:	68e6      	ldr	r6, [r4, #12]
 80098c0:	1b49      	subs	r1, r1, r5
 80098c2:	290f      	cmp	r1, #15
 80098c4:	dd10      	ble.n	80098e8 <_malloc_r+0x2e8>
 80098c6:	2201      	movs	r2, #1
 80098c8:	1963      	adds	r3, r4, r5
 80098ca:	4315      	orrs	r5, r2
 80098cc:	6065      	str	r5, [r4, #4]
 80098ce:	68a5      	ldr	r5, [r4, #8]
 80098d0:	430a      	orrs	r2, r1
 80098d2:	60ee      	str	r6, [r5, #12]
 80098d4:	60b5      	str	r5, [r6, #8]
 80098d6:	6143      	str	r3, [r0, #20]
 80098d8:	6103      	str	r3, [r0, #16]
 80098da:	4814      	ldr	r0, [pc, #80]	; (800992c <_malloc_r+0x32c>)
 80098dc:	605a      	str	r2, [r3, #4]
 80098de:	60d8      	str	r0, [r3, #12]
 80098e0:	6098      	str	r0, [r3, #8]
 80098e2:	9b03      	ldr	r3, [sp, #12]
 80098e4:	50e1      	str	r1, [r4, r3]
 80098e6:	e6eb      	b.n	80096c0 <_malloc_r+0xc0>
 80098e8:	2900      	cmp	r1, #0
 80098ea:	db09      	blt.n	8009900 <_malloc_r+0x300>
 80098ec:	9b03      	ldr	r3, [sp, #12]
 80098ee:	18e1      	adds	r1, r4, r3
 80098f0:	2301      	movs	r3, #1
 80098f2:	684a      	ldr	r2, [r1, #4]
 80098f4:	4313      	orrs	r3, r2
 80098f6:	604b      	str	r3, [r1, #4]
 80098f8:	68a3      	ldr	r3, [r4, #8]
 80098fa:	60de      	str	r6, [r3, #12]
 80098fc:	60b3      	str	r3, [r6, #8]
 80098fe:	e6df      	b.n	80096c0 <_malloc_r+0xc0>
 8009900:	0034      	movs	r4, r6
 8009902:	e739      	b.n	8009778 <_malloc_r+0x178>
 8009904:	2108      	movs	r1, #8
 8009906:	4249      	negs	r1, r1
 8009908:	448c      	add	ip, r1
 800990a:	4661      	mov	r1, ip
 800990c:	6889      	ldr	r1, [r1, #8]
 800990e:	3b01      	subs	r3, #1
 8009910:	4561      	cmp	r1, ip
 8009912:	d100      	bne.n	8009916 <_malloc_r+0x316>
 8009914:	e73a      	b.n	800978c <_malloc_r+0x18c>
 8009916:	e740      	b.n	800979a <_malloc_r+0x19a>
 8009918:	3304      	adds	r3, #4
 800991a:	0052      	lsls	r2, r2, #1
 800991c:	420a      	tst	r2, r1
 800991e:	d0fb      	beq.n	8009918 <_malloc_r+0x318>
 8009920:	e724      	b.n	800976c <_malloc_r+0x16c>
 8009922:	9b02      	ldr	r3, [sp, #8]
 8009924:	e7fa      	b.n	800991c <_malloc_r+0x31c>
 8009926:	46c0      	nop			; (mov r8, r8)
 8009928:	200002c0 	.word	0x200002c0
 800992c:	200002c8 	.word	0x200002c8
 8009930:	00000554 	.word	0x00000554
 8009934:	20000b68 	.word	0x20000b68
 8009938:	200006c8 	.word	0x200006c8
 800993c:	20000b38 	.word	0x20000b38
 8009940:	20000b60 	.word	0x20000b60
 8009944:	20000b64 	.word	0x20000b64
 8009948:	4934      	ldr	r1, [pc, #208]	; (8009a1c <_malloc_r+0x41c>)
 800994a:	6808      	ldr	r0, [r1, #0]
 800994c:	3001      	adds	r0, #1
 800994e:	d140      	bne.n	80099d2 <_malloc_r+0x3d2>
 8009950:	600c      	str	r4, [r1, #0]
 8009952:	2107      	movs	r1, #7
 8009954:	0026      	movs	r6, r4
 8009956:	2300      	movs	r3, #0
 8009958:	400e      	ands	r6, r1
 800995a:	420c      	tst	r4, r1
 800995c:	d002      	beq.n	8009964 <_malloc_r+0x364>
 800995e:	3308      	adds	r3, #8
 8009960:	1b9b      	subs	r3, r3, r6
 8009962:	18e4      	adds	r4, r4, r3
 8009964:	19e1      	adds	r1, r4, r7
 8009966:	9105      	str	r1, [sp, #20]
 8009968:	9f05      	ldr	r7, [sp, #20]
 800996a:	9904      	ldr	r1, [sp, #16]
 800996c:	4017      	ands	r7, r2
 800996e:	18cb      	adds	r3, r1, r3
 8009970:	1bdf      	subs	r7, r3, r7
 8009972:	4017      	ands	r7, r2
 8009974:	0039      	movs	r1, r7
 8009976:	9801      	ldr	r0, [sp, #4]
 8009978:	f001 ff46 	bl	800b808 <_sbrk_r>
 800997c:	1c43      	adds	r3, r0, #1
 800997e:	d107      	bne.n	8009990 <_malloc_r+0x390>
 8009980:	1e37      	subs	r7, r6, #0
 8009982:	9805      	ldr	r0, [sp, #20]
 8009984:	d004      	beq.n	8009990 <_malloc_r+0x390>
 8009986:	0030      	movs	r0, r6
 8009988:	2700      	movs	r7, #0
 800998a:	9b05      	ldr	r3, [sp, #20]
 800998c:	3808      	subs	r0, #8
 800998e:	1818      	adds	r0, r3, r0
 8009990:	4a23      	ldr	r2, [pc, #140]	; (8009a20 <_malloc_r+0x420>)
 8009992:	1b00      	subs	r0, r0, r4
 8009994:	6813      	ldr	r3, [r2, #0]
 8009996:	19c0      	adds	r0, r0, r7
 8009998:	19db      	adds	r3, r3, r7
 800999a:	6013      	str	r3, [r2, #0]
 800999c:	2201      	movs	r2, #1
 800999e:	4b21      	ldr	r3, [pc, #132]	; (8009a24 <_malloc_r+0x424>)
 80099a0:	9902      	ldr	r1, [sp, #8]
 80099a2:	4310      	orrs	r0, r2
 80099a4:	609c      	str	r4, [r3, #8]
 80099a6:	6060      	str	r0, [r4, #4]
 80099a8:	4299      	cmp	r1, r3
 80099aa:	d100      	bne.n	80099ae <_malloc_r+0x3ae>
 80099ac:	e73e      	b.n	800982c <_malloc_r+0x22c>
 80099ae:	9b03      	ldr	r3, [sp, #12]
 80099b0:	2b0f      	cmp	r3, #15
 80099b2:	d813      	bhi.n	80099dc <_malloc_r+0x3dc>
 80099b4:	6062      	str	r2, [r4, #4]
 80099b6:	2203      	movs	r2, #3
 80099b8:	4b1a      	ldr	r3, [pc, #104]	; (8009a24 <_malloc_r+0x424>)
 80099ba:	689b      	ldr	r3, [r3, #8]
 80099bc:	685b      	ldr	r3, [r3, #4]
 80099be:	4393      	bics	r3, r2
 80099c0:	1b59      	subs	r1, r3, r5
 80099c2:	42ab      	cmp	r3, r5
 80099c4:	d301      	bcc.n	80099ca <_malloc_r+0x3ca>
 80099c6:	290f      	cmp	r1, #15
 80099c8:	dc1f      	bgt.n	8009a0a <_malloc_r+0x40a>
 80099ca:	9801      	ldr	r0, [sp, #4]
 80099cc:	f000 f846 	bl	8009a5c <__malloc_unlock>
 80099d0:	e623      	b.n	800961a <_malloc_r+0x1a>
 80099d2:	4913      	ldr	r1, [pc, #76]	; (8009a20 <_malloc_r+0x420>)
 80099d4:	1ba6      	subs	r6, r4, r6
 80099d6:	18f6      	adds	r6, r6, r3
 80099d8:	600e      	str	r6, [r1, #0]
 80099da:	e7ba      	b.n	8009952 <_malloc_r+0x352>
 80099dc:	2107      	movs	r1, #7
 80099de:	9b03      	ldr	r3, [sp, #12]
 80099e0:	3b0c      	subs	r3, #12
 80099e2:	438b      	bics	r3, r1
 80099e4:	9902      	ldr	r1, [sp, #8]
 80099e6:	6849      	ldr	r1, [r1, #4]
 80099e8:	400a      	ands	r2, r1
 80099ea:	9902      	ldr	r1, [sp, #8]
 80099ec:	431a      	orrs	r2, r3
 80099ee:	604a      	str	r2, [r1, #4]
 80099f0:	18ca      	adds	r2, r1, r3
 80099f2:	2105      	movs	r1, #5
 80099f4:	6051      	str	r1, [r2, #4]
 80099f6:	6091      	str	r1, [r2, #8]
 80099f8:	2b0f      	cmp	r3, #15
 80099fa:	d800      	bhi.n	80099fe <_malloc_r+0x3fe>
 80099fc:	e716      	b.n	800982c <_malloc_r+0x22c>
 80099fe:	9902      	ldr	r1, [sp, #8]
 8009a00:	9801      	ldr	r0, [sp, #4]
 8009a02:	3108      	adds	r1, #8
 8009a04:	f7ff fd4a 	bl	800949c <_free_r>
 8009a08:	e710      	b.n	800982c <_malloc_r+0x22c>
 8009a0a:	2201      	movs	r2, #1
 8009a0c:	0013      	movs	r3, r2
 8009a0e:	4805      	ldr	r0, [pc, #20]	; (8009a24 <_malloc_r+0x424>)
 8009a10:	432b      	orrs	r3, r5
 8009a12:	6884      	ldr	r4, [r0, #8]
 8009a14:	6063      	str	r3, [r4, #4]
 8009a16:	1963      	adds	r3, r4, r5
 8009a18:	6083      	str	r3, [r0, #8]
 8009a1a:	e623      	b.n	8009664 <_malloc_r+0x64>
 8009a1c:	200006c8 	.word	0x200006c8
 8009a20:	20000b38 	.word	0x20000b38
 8009a24:	200002c0 	.word	0x200002c0

08009a28 <__ascii_mbtowc>:
 8009a28:	b082      	sub	sp, #8
 8009a2a:	2900      	cmp	r1, #0
 8009a2c:	d100      	bne.n	8009a30 <__ascii_mbtowc+0x8>
 8009a2e:	a901      	add	r1, sp, #4
 8009a30:	1e10      	subs	r0, r2, #0
 8009a32:	d006      	beq.n	8009a42 <__ascii_mbtowc+0x1a>
 8009a34:	2b00      	cmp	r3, #0
 8009a36:	d006      	beq.n	8009a46 <__ascii_mbtowc+0x1e>
 8009a38:	7813      	ldrb	r3, [r2, #0]
 8009a3a:	600b      	str	r3, [r1, #0]
 8009a3c:	7810      	ldrb	r0, [r2, #0]
 8009a3e:	1e43      	subs	r3, r0, #1
 8009a40:	4198      	sbcs	r0, r3
 8009a42:	b002      	add	sp, #8
 8009a44:	4770      	bx	lr
 8009a46:	2002      	movs	r0, #2
 8009a48:	4240      	negs	r0, r0
 8009a4a:	e7fa      	b.n	8009a42 <__ascii_mbtowc+0x1a>

08009a4c <__malloc_lock>:
 8009a4c:	b510      	push	{r4, lr}
 8009a4e:	4802      	ldr	r0, [pc, #8]	; (8009a58 <__malloc_lock+0xc>)
 8009a50:	f7ff fcb0 	bl	80093b4 <__retarget_lock_acquire_recursive>
 8009a54:	bd10      	pop	{r4, pc}
 8009a56:	46c0      	nop			; (mov r8, r8)
 8009a58:	20000b31 	.word	0x20000b31

08009a5c <__malloc_unlock>:
 8009a5c:	b510      	push	{r4, lr}
 8009a5e:	4802      	ldr	r0, [pc, #8]	; (8009a68 <__malloc_unlock+0xc>)
 8009a60:	f7ff fca9 	bl	80093b6 <__retarget_lock_release_recursive>
 8009a64:	bd10      	pop	{r4, pc}
 8009a66:	46c0      	nop			; (mov r8, r8)
 8009a68:	20000b31 	.word	0x20000b31

08009a6c <_Balloc>:
 8009a6c:	6c43      	ldr	r3, [r0, #68]	; 0x44
 8009a6e:	b570      	push	{r4, r5, r6, lr}
 8009a70:	0006      	movs	r6, r0
 8009a72:	000c      	movs	r4, r1
 8009a74:	2b00      	cmp	r3, #0
 8009a76:	d012      	beq.n	8009a9e <_Balloc+0x32>
 8009a78:	6c73      	ldr	r3, [r6, #68]	; 0x44
 8009a7a:	00a2      	lsls	r2, r4, #2
 8009a7c:	189b      	adds	r3, r3, r2
 8009a7e:	6818      	ldr	r0, [r3, #0]
 8009a80:	2800      	cmp	r0, #0
 8009a82:	d115      	bne.n	8009ab0 <_Balloc+0x44>
 8009a84:	2101      	movs	r1, #1
 8009a86:	000d      	movs	r5, r1
 8009a88:	40a5      	lsls	r5, r4
 8009a8a:	1d6a      	adds	r2, r5, #5
 8009a8c:	0030      	movs	r0, r6
 8009a8e:	0092      	lsls	r2, r2, #2
 8009a90:	f001 ff86 	bl	800b9a0 <_calloc_r>
 8009a94:	2800      	cmp	r0, #0
 8009a96:	d009      	beq.n	8009aac <_Balloc+0x40>
 8009a98:	6044      	str	r4, [r0, #4]
 8009a9a:	6085      	str	r5, [r0, #8]
 8009a9c:	e00a      	b.n	8009ab4 <_Balloc+0x48>
 8009a9e:	2221      	movs	r2, #33	; 0x21
 8009aa0:	2104      	movs	r1, #4
 8009aa2:	f001 ff7d 	bl	800b9a0 <_calloc_r>
 8009aa6:	6470      	str	r0, [r6, #68]	; 0x44
 8009aa8:	2800      	cmp	r0, #0
 8009aaa:	d1e5      	bne.n	8009a78 <_Balloc+0xc>
 8009aac:	2000      	movs	r0, #0
 8009aae:	bd70      	pop	{r4, r5, r6, pc}
 8009ab0:	6802      	ldr	r2, [r0, #0]
 8009ab2:	601a      	str	r2, [r3, #0]
 8009ab4:	2300      	movs	r3, #0
 8009ab6:	6103      	str	r3, [r0, #16]
 8009ab8:	60c3      	str	r3, [r0, #12]
 8009aba:	e7f8      	b.n	8009aae <_Balloc+0x42>

08009abc <_Bfree>:
 8009abc:	2900      	cmp	r1, #0
 8009abe:	d006      	beq.n	8009ace <_Bfree+0x12>
 8009ac0:	684a      	ldr	r2, [r1, #4]
 8009ac2:	6c43      	ldr	r3, [r0, #68]	; 0x44
 8009ac4:	0092      	lsls	r2, r2, #2
 8009ac6:	189b      	adds	r3, r3, r2
 8009ac8:	681a      	ldr	r2, [r3, #0]
 8009aca:	600a      	str	r2, [r1, #0]
 8009acc:	6019      	str	r1, [r3, #0]
 8009ace:	4770      	bx	lr

08009ad0 <__multadd>:
 8009ad0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8009ad2:	000e      	movs	r6, r1
 8009ad4:	9001      	str	r0, [sp, #4]
 8009ad6:	000c      	movs	r4, r1
 8009ad8:	001d      	movs	r5, r3
 8009ada:	2000      	movs	r0, #0
 8009adc:	690f      	ldr	r7, [r1, #16]
 8009ade:	3614      	adds	r6, #20
 8009ae0:	6833      	ldr	r3, [r6, #0]
 8009ae2:	3001      	adds	r0, #1
 8009ae4:	b299      	uxth	r1, r3
 8009ae6:	4351      	muls	r1, r2
 8009ae8:	0c1b      	lsrs	r3, r3, #16
 8009aea:	4353      	muls	r3, r2
 8009aec:	1949      	adds	r1, r1, r5
 8009aee:	0c0d      	lsrs	r5, r1, #16
 8009af0:	195b      	adds	r3, r3, r5
 8009af2:	0c1d      	lsrs	r5, r3, #16
 8009af4:	b289      	uxth	r1, r1
 8009af6:	041b      	lsls	r3, r3, #16
 8009af8:	185b      	adds	r3, r3, r1
 8009afa:	c608      	stmia	r6!, {r3}
 8009afc:	4287      	cmp	r7, r0
 8009afe:	dcef      	bgt.n	8009ae0 <__multadd+0x10>
 8009b00:	2d00      	cmp	r5, #0
 8009b02:	d022      	beq.n	8009b4a <__multadd+0x7a>
 8009b04:	68a3      	ldr	r3, [r4, #8]
 8009b06:	42bb      	cmp	r3, r7
 8009b08:	dc19      	bgt.n	8009b3e <__multadd+0x6e>
 8009b0a:	6861      	ldr	r1, [r4, #4]
 8009b0c:	9801      	ldr	r0, [sp, #4]
 8009b0e:	3101      	adds	r1, #1
 8009b10:	f7ff ffac 	bl	8009a6c <_Balloc>
 8009b14:	1e06      	subs	r6, r0, #0
 8009b16:	d105      	bne.n	8009b24 <__multadd+0x54>
 8009b18:	0032      	movs	r2, r6
 8009b1a:	21ba      	movs	r1, #186	; 0xba
 8009b1c:	4b0c      	ldr	r3, [pc, #48]	; (8009b50 <__multadd+0x80>)
 8009b1e:	480d      	ldr	r0, [pc, #52]	; (8009b54 <__multadd+0x84>)
 8009b20:	f001 ff20 	bl	800b964 <__assert_func>
 8009b24:	0021      	movs	r1, r4
 8009b26:	6922      	ldr	r2, [r4, #16]
 8009b28:	310c      	adds	r1, #12
 8009b2a:	3202      	adds	r2, #2
 8009b2c:	0092      	lsls	r2, r2, #2
 8009b2e:	300c      	adds	r0, #12
 8009b30:	f7ff fc42 	bl	80093b8 <memcpy>
 8009b34:	0021      	movs	r1, r4
 8009b36:	9801      	ldr	r0, [sp, #4]
 8009b38:	f7ff ffc0 	bl	8009abc <_Bfree>
 8009b3c:	0034      	movs	r4, r6
 8009b3e:	1d3b      	adds	r3, r7, #4
 8009b40:	009b      	lsls	r3, r3, #2
 8009b42:	18e3      	adds	r3, r4, r3
 8009b44:	605d      	str	r5, [r3, #4]
 8009b46:	1c7b      	adds	r3, r7, #1
 8009b48:	6123      	str	r3, [r4, #16]
 8009b4a:	0020      	movs	r0, r4
 8009b4c:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8009b4e:	46c0      	nop			; (mov r8, r8)
 8009b50:	0800f9f7 	.word	0x0800f9f7
 8009b54:	0800fa08 	.word	0x0800fa08

08009b58 <__hi0bits>:
 8009b58:	0003      	movs	r3, r0
 8009b5a:	0c02      	lsrs	r2, r0, #16
 8009b5c:	2000      	movs	r0, #0
 8009b5e:	4282      	cmp	r2, r0
 8009b60:	d101      	bne.n	8009b66 <__hi0bits+0xe>
 8009b62:	041b      	lsls	r3, r3, #16
 8009b64:	3010      	adds	r0, #16
 8009b66:	0e1a      	lsrs	r2, r3, #24
 8009b68:	d101      	bne.n	8009b6e <__hi0bits+0x16>
 8009b6a:	3008      	adds	r0, #8
 8009b6c:	021b      	lsls	r3, r3, #8
 8009b6e:	0f1a      	lsrs	r2, r3, #28
 8009b70:	d101      	bne.n	8009b76 <__hi0bits+0x1e>
 8009b72:	3004      	adds	r0, #4
 8009b74:	011b      	lsls	r3, r3, #4
 8009b76:	0f9a      	lsrs	r2, r3, #30
 8009b78:	d101      	bne.n	8009b7e <__hi0bits+0x26>
 8009b7a:	3002      	adds	r0, #2
 8009b7c:	009b      	lsls	r3, r3, #2
 8009b7e:	2b00      	cmp	r3, #0
 8009b80:	db03      	blt.n	8009b8a <__hi0bits+0x32>
 8009b82:	3001      	adds	r0, #1
 8009b84:	005b      	lsls	r3, r3, #1
 8009b86:	d400      	bmi.n	8009b8a <__hi0bits+0x32>
 8009b88:	2020      	movs	r0, #32
 8009b8a:	4770      	bx	lr

08009b8c <__lo0bits>:
 8009b8c:	6803      	ldr	r3, [r0, #0]
 8009b8e:	0001      	movs	r1, r0
 8009b90:	2207      	movs	r2, #7
 8009b92:	0018      	movs	r0, r3
 8009b94:	4010      	ands	r0, r2
 8009b96:	4213      	tst	r3, r2
 8009b98:	d00d      	beq.n	8009bb6 <__lo0bits+0x2a>
 8009b9a:	3a06      	subs	r2, #6
 8009b9c:	2000      	movs	r0, #0
 8009b9e:	4213      	tst	r3, r2
 8009ba0:	d105      	bne.n	8009bae <__lo0bits+0x22>
 8009ba2:	3002      	adds	r0, #2
 8009ba4:	4203      	tst	r3, r0
 8009ba6:	d003      	beq.n	8009bb0 <__lo0bits+0x24>
 8009ba8:	40d3      	lsrs	r3, r2
 8009baa:	0010      	movs	r0, r2
 8009bac:	600b      	str	r3, [r1, #0]
 8009bae:	4770      	bx	lr
 8009bb0:	089b      	lsrs	r3, r3, #2
 8009bb2:	600b      	str	r3, [r1, #0]
 8009bb4:	e7fb      	b.n	8009bae <__lo0bits+0x22>
 8009bb6:	b29a      	uxth	r2, r3
 8009bb8:	2a00      	cmp	r2, #0
 8009bba:	d101      	bne.n	8009bc0 <__lo0bits+0x34>
 8009bbc:	2010      	movs	r0, #16
 8009bbe:	0c1b      	lsrs	r3, r3, #16
 8009bc0:	b2da      	uxtb	r2, r3
 8009bc2:	2a00      	cmp	r2, #0
 8009bc4:	d101      	bne.n	8009bca <__lo0bits+0x3e>
 8009bc6:	3008      	adds	r0, #8
 8009bc8:	0a1b      	lsrs	r3, r3, #8
 8009bca:	071a      	lsls	r2, r3, #28
 8009bcc:	d101      	bne.n	8009bd2 <__lo0bits+0x46>
 8009bce:	3004      	adds	r0, #4
 8009bd0:	091b      	lsrs	r3, r3, #4
 8009bd2:	079a      	lsls	r2, r3, #30
 8009bd4:	d101      	bne.n	8009bda <__lo0bits+0x4e>
 8009bd6:	3002      	adds	r0, #2
 8009bd8:	089b      	lsrs	r3, r3, #2
 8009bda:	07da      	lsls	r2, r3, #31
 8009bdc:	d4e9      	bmi.n	8009bb2 <__lo0bits+0x26>
 8009bde:	3001      	adds	r0, #1
 8009be0:	085b      	lsrs	r3, r3, #1
 8009be2:	d1e6      	bne.n	8009bb2 <__lo0bits+0x26>
 8009be4:	2020      	movs	r0, #32
 8009be6:	e7e2      	b.n	8009bae <__lo0bits+0x22>

08009be8 <__i2b>:
 8009be8:	b510      	push	{r4, lr}
 8009bea:	000c      	movs	r4, r1
 8009bec:	2101      	movs	r1, #1
 8009bee:	f7ff ff3d 	bl	8009a6c <_Balloc>
 8009bf2:	2800      	cmp	r0, #0
 8009bf4:	d107      	bne.n	8009c06 <__i2b+0x1e>
 8009bf6:	2146      	movs	r1, #70	; 0x46
 8009bf8:	4c05      	ldr	r4, [pc, #20]	; (8009c10 <__i2b+0x28>)
 8009bfa:	0002      	movs	r2, r0
 8009bfc:	4b05      	ldr	r3, [pc, #20]	; (8009c14 <__i2b+0x2c>)
 8009bfe:	0020      	movs	r0, r4
 8009c00:	31ff      	adds	r1, #255	; 0xff
 8009c02:	f001 feaf 	bl	800b964 <__assert_func>
 8009c06:	2301      	movs	r3, #1
 8009c08:	6144      	str	r4, [r0, #20]
 8009c0a:	6103      	str	r3, [r0, #16]
 8009c0c:	bd10      	pop	{r4, pc}
 8009c0e:	46c0      	nop			; (mov r8, r8)
 8009c10:	0800fa08 	.word	0x0800fa08
 8009c14:	0800f9f7 	.word	0x0800f9f7

08009c18 <__multiply>:
 8009c18:	b5f0      	push	{r4, r5, r6, r7, lr}
 8009c1a:	0015      	movs	r5, r2
 8009c1c:	690a      	ldr	r2, [r1, #16]
 8009c1e:	692b      	ldr	r3, [r5, #16]
 8009c20:	000c      	movs	r4, r1
 8009c22:	b08b      	sub	sp, #44	; 0x2c
 8009c24:	429a      	cmp	r2, r3
 8009c26:	da01      	bge.n	8009c2c <__multiply+0x14>
 8009c28:	002c      	movs	r4, r5
 8009c2a:	000d      	movs	r5, r1
 8009c2c:	6927      	ldr	r7, [r4, #16]
 8009c2e:	692e      	ldr	r6, [r5, #16]
 8009c30:	6861      	ldr	r1, [r4, #4]
 8009c32:	19bb      	adds	r3, r7, r6
 8009c34:	9303      	str	r3, [sp, #12]
 8009c36:	68a3      	ldr	r3, [r4, #8]
 8009c38:	19ba      	adds	r2, r7, r6
 8009c3a:	4293      	cmp	r3, r2
 8009c3c:	da00      	bge.n	8009c40 <__multiply+0x28>
 8009c3e:	3101      	adds	r1, #1
 8009c40:	f7ff ff14 	bl	8009a6c <_Balloc>
 8009c44:	9002      	str	r0, [sp, #8]
 8009c46:	2800      	cmp	r0, #0
 8009c48:	d106      	bne.n	8009c58 <__multiply+0x40>
 8009c4a:	21b1      	movs	r1, #177	; 0xb1
 8009c4c:	4b48      	ldr	r3, [pc, #288]	; (8009d70 <__multiply+0x158>)
 8009c4e:	4849      	ldr	r0, [pc, #292]	; (8009d74 <__multiply+0x15c>)
 8009c50:	9a02      	ldr	r2, [sp, #8]
 8009c52:	0049      	lsls	r1, r1, #1
 8009c54:	f001 fe86 	bl	800b964 <__assert_func>
 8009c58:	9b02      	ldr	r3, [sp, #8]
 8009c5a:	2200      	movs	r2, #0
 8009c5c:	3314      	adds	r3, #20
 8009c5e:	469c      	mov	ip, r3
 8009c60:	19bb      	adds	r3, r7, r6
 8009c62:	009b      	lsls	r3, r3, #2
 8009c64:	4463      	add	r3, ip
 8009c66:	9304      	str	r3, [sp, #16]
 8009c68:	4663      	mov	r3, ip
 8009c6a:	9904      	ldr	r1, [sp, #16]
 8009c6c:	428b      	cmp	r3, r1
 8009c6e:	d32a      	bcc.n	8009cc6 <__multiply+0xae>
 8009c70:	0023      	movs	r3, r4
 8009c72:	00bf      	lsls	r7, r7, #2
 8009c74:	3314      	adds	r3, #20
 8009c76:	3514      	adds	r5, #20
 8009c78:	9308      	str	r3, [sp, #32]
 8009c7a:	00b6      	lsls	r6, r6, #2
 8009c7c:	19db      	adds	r3, r3, r7
 8009c7e:	9305      	str	r3, [sp, #20]
 8009c80:	19ab      	adds	r3, r5, r6
 8009c82:	9309      	str	r3, [sp, #36]	; 0x24
 8009c84:	2304      	movs	r3, #4
 8009c86:	9306      	str	r3, [sp, #24]
 8009c88:	0023      	movs	r3, r4
 8009c8a:	9a05      	ldr	r2, [sp, #20]
 8009c8c:	3315      	adds	r3, #21
 8009c8e:	9501      	str	r5, [sp, #4]
 8009c90:	429a      	cmp	r2, r3
 8009c92:	d305      	bcc.n	8009ca0 <__multiply+0x88>
 8009c94:	1b13      	subs	r3, r2, r4
 8009c96:	3b15      	subs	r3, #21
 8009c98:	089b      	lsrs	r3, r3, #2
 8009c9a:	3301      	adds	r3, #1
 8009c9c:	009b      	lsls	r3, r3, #2
 8009c9e:	9306      	str	r3, [sp, #24]
 8009ca0:	9b01      	ldr	r3, [sp, #4]
 8009ca2:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8009ca4:	4293      	cmp	r3, r2
 8009ca6:	d310      	bcc.n	8009cca <__multiply+0xb2>
 8009ca8:	9b03      	ldr	r3, [sp, #12]
 8009caa:	2b00      	cmp	r3, #0
 8009cac:	dd05      	ble.n	8009cba <__multiply+0xa2>
 8009cae:	9b04      	ldr	r3, [sp, #16]
 8009cb0:	3b04      	subs	r3, #4
 8009cb2:	9304      	str	r3, [sp, #16]
 8009cb4:	681b      	ldr	r3, [r3, #0]
 8009cb6:	2b00      	cmp	r3, #0
 8009cb8:	d056      	beq.n	8009d68 <__multiply+0x150>
 8009cba:	9b02      	ldr	r3, [sp, #8]
 8009cbc:	9a03      	ldr	r2, [sp, #12]
 8009cbe:	0018      	movs	r0, r3
 8009cc0:	611a      	str	r2, [r3, #16]
 8009cc2:	b00b      	add	sp, #44	; 0x2c
 8009cc4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8009cc6:	c304      	stmia	r3!, {r2}
 8009cc8:	e7cf      	b.n	8009c6a <__multiply+0x52>
 8009cca:	9b01      	ldr	r3, [sp, #4]
 8009ccc:	6818      	ldr	r0, [r3, #0]
 8009cce:	b280      	uxth	r0, r0
 8009cd0:	2800      	cmp	r0, #0
 8009cd2:	d01e      	beq.n	8009d12 <__multiply+0xfa>
 8009cd4:	4667      	mov	r7, ip
 8009cd6:	2500      	movs	r5, #0
 8009cd8:	9e08      	ldr	r6, [sp, #32]
 8009cda:	ce02      	ldmia	r6!, {r1}
 8009cdc:	683b      	ldr	r3, [r7, #0]
 8009cde:	9307      	str	r3, [sp, #28]
 8009ce0:	b28b      	uxth	r3, r1
 8009ce2:	4343      	muls	r3, r0
 8009ce4:	001a      	movs	r2, r3
 8009ce6:	466b      	mov	r3, sp
 8009ce8:	8b9b      	ldrh	r3, [r3, #28]
 8009cea:	18d3      	adds	r3, r2, r3
 8009cec:	195b      	adds	r3, r3, r5
 8009cee:	0c0d      	lsrs	r5, r1, #16
 8009cf0:	4345      	muls	r5, r0
 8009cf2:	9a07      	ldr	r2, [sp, #28]
 8009cf4:	0c11      	lsrs	r1, r2, #16
 8009cf6:	1869      	adds	r1, r5, r1
 8009cf8:	0c1a      	lsrs	r2, r3, #16
 8009cfa:	188a      	adds	r2, r1, r2
 8009cfc:	b29b      	uxth	r3, r3
 8009cfe:	0c15      	lsrs	r5, r2, #16
 8009d00:	0412      	lsls	r2, r2, #16
 8009d02:	431a      	orrs	r2, r3
 8009d04:	9b05      	ldr	r3, [sp, #20]
 8009d06:	c704      	stmia	r7!, {r2}
 8009d08:	42b3      	cmp	r3, r6
 8009d0a:	d8e6      	bhi.n	8009cda <__multiply+0xc2>
 8009d0c:	4663      	mov	r3, ip
 8009d0e:	9a06      	ldr	r2, [sp, #24]
 8009d10:	509d      	str	r5, [r3, r2]
 8009d12:	9b01      	ldr	r3, [sp, #4]
 8009d14:	6818      	ldr	r0, [r3, #0]
 8009d16:	0c00      	lsrs	r0, r0, #16
 8009d18:	d020      	beq.n	8009d5c <__multiply+0x144>
 8009d1a:	4663      	mov	r3, ip
 8009d1c:	0025      	movs	r5, r4
 8009d1e:	4661      	mov	r1, ip
 8009d20:	2700      	movs	r7, #0
 8009d22:	681b      	ldr	r3, [r3, #0]
 8009d24:	3514      	adds	r5, #20
 8009d26:	682a      	ldr	r2, [r5, #0]
 8009d28:	680e      	ldr	r6, [r1, #0]
 8009d2a:	b292      	uxth	r2, r2
 8009d2c:	4342      	muls	r2, r0
 8009d2e:	0c36      	lsrs	r6, r6, #16
 8009d30:	1992      	adds	r2, r2, r6
 8009d32:	19d2      	adds	r2, r2, r7
 8009d34:	0416      	lsls	r6, r2, #16
 8009d36:	b29b      	uxth	r3, r3
 8009d38:	431e      	orrs	r6, r3
 8009d3a:	600e      	str	r6, [r1, #0]
 8009d3c:	cd40      	ldmia	r5!, {r6}
 8009d3e:	684b      	ldr	r3, [r1, #4]
 8009d40:	0c36      	lsrs	r6, r6, #16
 8009d42:	4346      	muls	r6, r0
 8009d44:	b29b      	uxth	r3, r3
 8009d46:	0c12      	lsrs	r2, r2, #16
 8009d48:	18f3      	adds	r3, r6, r3
 8009d4a:	189b      	adds	r3, r3, r2
 8009d4c:	9a05      	ldr	r2, [sp, #20]
 8009d4e:	0c1f      	lsrs	r7, r3, #16
 8009d50:	3104      	adds	r1, #4
 8009d52:	42aa      	cmp	r2, r5
 8009d54:	d8e7      	bhi.n	8009d26 <__multiply+0x10e>
 8009d56:	4662      	mov	r2, ip
 8009d58:	9906      	ldr	r1, [sp, #24]
 8009d5a:	5053      	str	r3, [r2, r1]
 8009d5c:	9b01      	ldr	r3, [sp, #4]
 8009d5e:	3304      	adds	r3, #4
 8009d60:	9301      	str	r3, [sp, #4]
 8009d62:	2304      	movs	r3, #4
 8009d64:	449c      	add	ip, r3
 8009d66:	e79b      	b.n	8009ca0 <__multiply+0x88>
 8009d68:	9b03      	ldr	r3, [sp, #12]
 8009d6a:	3b01      	subs	r3, #1
 8009d6c:	9303      	str	r3, [sp, #12]
 8009d6e:	e79b      	b.n	8009ca8 <__multiply+0x90>
 8009d70:	0800f9f7 	.word	0x0800f9f7
 8009d74:	0800fa08 	.word	0x0800fa08

08009d78 <__pow5mult>:
 8009d78:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8009d7a:	2303      	movs	r3, #3
 8009d7c:	0015      	movs	r5, r2
 8009d7e:	0007      	movs	r7, r0
 8009d80:	000e      	movs	r6, r1
 8009d82:	401a      	ands	r2, r3
 8009d84:	421d      	tst	r5, r3
 8009d86:	d008      	beq.n	8009d9a <__pow5mult+0x22>
 8009d88:	491a      	ldr	r1, [pc, #104]	; (8009df4 <__pow5mult+0x7c>)
 8009d8a:	3a01      	subs	r2, #1
 8009d8c:	0092      	lsls	r2, r2, #2
 8009d8e:	5852      	ldr	r2, [r2, r1]
 8009d90:	2300      	movs	r3, #0
 8009d92:	0031      	movs	r1, r6
 8009d94:	f7ff fe9c 	bl	8009ad0 <__multadd>
 8009d98:	0006      	movs	r6, r0
 8009d9a:	10ad      	asrs	r5, r5, #2
 8009d9c:	d027      	beq.n	8009dee <__pow5mult+0x76>
 8009d9e:	6c3c      	ldr	r4, [r7, #64]	; 0x40
 8009da0:	2c00      	cmp	r4, #0
 8009da2:	d107      	bne.n	8009db4 <__pow5mult+0x3c>
 8009da4:	0038      	movs	r0, r7
 8009da6:	4914      	ldr	r1, [pc, #80]	; (8009df8 <__pow5mult+0x80>)
 8009da8:	f7ff ff1e 	bl	8009be8 <__i2b>
 8009dac:	2300      	movs	r3, #0
 8009dae:	0004      	movs	r4, r0
 8009db0:	6438      	str	r0, [r7, #64]	; 0x40
 8009db2:	6003      	str	r3, [r0, #0]
 8009db4:	2301      	movs	r3, #1
 8009db6:	421d      	tst	r5, r3
 8009db8:	d00a      	beq.n	8009dd0 <__pow5mult+0x58>
 8009dba:	0031      	movs	r1, r6
 8009dbc:	0022      	movs	r2, r4
 8009dbe:	0038      	movs	r0, r7
 8009dc0:	f7ff ff2a 	bl	8009c18 <__multiply>
 8009dc4:	0031      	movs	r1, r6
 8009dc6:	9001      	str	r0, [sp, #4]
 8009dc8:	0038      	movs	r0, r7
 8009dca:	f7ff fe77 	bl	8009abc <_Bfree>
 8009dce:	9e01      	ldr	r6, [sp, #4]
 8009dd0:	106d      	asrs	r5, r5, #1
 8009dd2:	d00c      	beq.n	8009dee <__pow5mult+0x76>
 8009dd4:	6820      	ldr	r0, [r4, #0]
 8009dd6:	2800      	cmp	r0, #0
 8009dd8:	d107      	bne.n	8009dea <__pow5mult+0x72>
 8009dda:	0022      	movs	r2, r4
 8009ddc:	0021      	movs	r1, r4
 8009dde:	0038      	movs	r0, r7
 8009de0:	f7ff ff1a 	bl	8009c18 <__multiply>
 8009de4:	2300      	movs	r3, #0
 8009de6:	6020      	str	r0, [r4, #0]
 8009de8:	6003      	str	r3, [r0, #0]
 8009dea:	0004      	movs	r4, r0
 8009dec:	e7e2      	b.n	8009db4 <__pow5mult+0x3c>
 8009dee:	0030      	movs	r0, r6
 8009df0:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8009df2:	46c0      	nop			; (mov r8, r8)
 8009df4:	0800fb58 	.word	0x0800fb58
 8009df8:	00000271 	.word	0x00000271

08009dfc <__lshift>:
 8009dfc:	b5f0      	push	{r4, r5, r6, r7, lr}
 8009dfe:	000c      	movs	r4, r1
 8009e00:	0017      	movs	r7, r2
 8009e02:	6923      	ldr	r3, [r4, #16]
 8009e04:	1155      	asrs	r5, r2, #5
 8009e06:	b087      	sub	sp, #28
 8009e08:	18eb      	adds	r3, r5, r3
 8009e0a:	9302      	str	r3, [sp, #8]
 8009e0c:	3301      	adds	r3, #1
 8009e0e:	9301      	str	r3, [sp, #4]
 8009e10:	6849      	ldr	r1, [r1, #4]
 8009e12:	68a3      	ldr	r3, [r4, #8]
 8009e14:	9004      	str	r0, [sp, #16]
 8009e16:	9a01      	ldr	r2, [sp, #4]
 8009e18:	4293      	cmp	r3, r2
 8009e1a:	db10      	blt.n	8009e3e <__lshift+0x42>
 8009e1c:	9804      	ldr	r0, [sp, #16]
 8009e1e:	f7ff fe25 	bl	8009a6c <_Balloc>
 8009e22:	2300      	movs	r3, #0
 8009e24:	0002      	movs	r2, r0
 8009e26:	0006      	movs	r6, r0
 8009e28:	0019      	movs	r1, r3
 8009e2a:	3214      	adds	r2, #20
 8009e2c:	4298      	cmp	r0, r3
 8009e2e:	d10c      	bne.n	8009e4a <__lshift+0x4e>
 8009e30:	31df      	adds	r1, #223	; 0xdf
 8009e32:	0032      	movs	r2, r6
 8009e34:	4b26      	ldr	r3, [pc, #152]	; (8009ed0 <__lshift+0xd4>)
 8009e36:	4827      	ldr	r0, [pc, #156]	; (8009ed4 <__lshift+0xd8>)
 8009e38:	31ff      	adds	r1, #255	; 0xff
 8009e3a:	f001 fd93 	bl	800b964 <__assert_func>
 8009e3e:	3101      	adds	r1, #1
 8009e40:	005b      	lsls	r3, r3, #1
 8009e42:	e7e8      	b.n	8009e16 <__lshift+0x1a>
 8009e44:	0098      	lsls	r0, r3, #2
 8009e46:	5011      	str	r1, [r2, r0]
 8009e48:	3301      	adds	r3, #1
 8009e4a:	42ab      	cmp	r3, r5
 8009e4c:	dbfa      	blt.n	8009e44 <__lshift+0x48>
 8009e4e:	43eb      	mvns	r3, r5
 8009e50:	17db      	asrs	r3, r3, #31
 8009e52:	401d      	ands	r5, r3
 8009e54:	211f      	movs	r1, #31
 8009e56:	0023      	movs	r3, r4
 8009e58:	0038      	movs	r0, r7
 8009e5a:	00ad      	lsls	r5, r5, #2
 8009e5c:	1955      	adds	r5, r2, r5
 8009e5e:	6922      	ldr	r2, [r4, #16]
 8009e60:	3314      	adds	r3, #20
 8009e62:	0092      	lsls	r2, r2, #2
 8009e64:	4008      	ands	r0, r1
 8009e66:	4684      	mov	ip, r0
 8009e68:	189a      	adds	r2, r3, r2
 8009e6a:	420f      	tst	r7, r1
 8009e6c:	d02a      	beq.n	8009ec4 <__lshift+0xc8>
 8009e6e:	3101      	adds	r1, #1
 8009e70:	1a09      	subs	r1, r1, r0
 8009e72:	9105      	str	r1, [sp, #20]
 8009e74:	2100      	movs	r1, #0
 8009e76:	9503      	str	r5, [sp, #12]
 8009e78:	4667      	mov	r7, ip
 8009e7a:	6818      	ldr	r0, [r3, #0]
 8009e7c:	40b8      	lsls	r0, r7
 8009e7e:	4308      	orrs	r0, r1
 8009e80:	9903      	ldr	r1, [sp, #12]
 8009e82:	c101      	stmia	r1!, {r0}
 8009e84:	9103      	str	r1, [sp, #12]
 8009e86:	9805      	ldr	r0, [sp, #20]
 8009e88:	cb02      	ldmia	r3!, {r1}
 8009e8a:	40c1      	lsrs	r1, r0
 8009e8c:	429a      	cmp	r2, r3
 8009e8e:	d8f3      	bhi.n	8009e78 <__lshift+0x7c>
 8009e90:	0020      	movs	r0, r4
 8009e92:	3015      	adds	r0, #21
 8009e94:	2304      	movs	r3, #4
 8009e96:	4282      	cmp	r2, r0
 8009e98:	d304      	bcc.n	8009ea4 <__lshift+0xa8>
 8009e9a:	1b13      	subs	r3, r2, r4
 8009e9c:	3b15      	subs	r3, #21
 8009e9e:	089b      	lsrs	r3, r3, #2
 8009ea0:	3301      	adds	r3, #1
 8009ea2:	009b      	lsls	r3, r3, #2
 8009ea4:	50e9      	str	r1, [r5, r3]
 8009ea6:	2900      	cmp	r1, #0
 8009ea8:	d002      	beq.n	8009eb0 <__lshift+0xb4>
 8009eaa:	9b02      	ldr	r3, [sp, #8]
 8009eac:	3302      	adds	r3, #2
 8009eae:	9301      	str	r3, [sp, #4]
 8009eb0:	9b01      	ldr	r3, [sp, #4]
 8009eb2:	9804      	ldr	r0, [sp, #16]
 8009eb4:	3b01      	subs	r3, #1
 8009eb6:	0021      	movs	r1, r4
 8009eb8:	6133      	str	r3, [r6, #16]
 8009eba:	f7ff fdff 	bl	8009abc <_Bfree>
 8009ebe:	0030      	movs	r0, r6
 8009ec0:	b007      	add	sp, #28
 8009ec2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8009ec4:	cb02      	ldmia	r3!, {r1}
 8009ec6:	c502      	stmia	r5!, {r1}
 8009ec8:	429a      	cmp	r2, r3
 8009eca:	d8fb      	bhi.n	8009ec4 <__lshift+0xc8>
 8009ecc:	e7f0      	b.n	8009eb0 <__lshift+0xb4>
 8009ece:	46c0      	nop			; (mov r8, r8)
 8009ed0:	0800f9f7 	.word	0x0800f9f7
 8009ed4:	0800fa08 	.word	0x0800fa08

08009ed8 <__mcmp>:
 8009ed8:	b530      	push	{r4, r5, lr}
 8009eda:	690b      	ldr	r3, [r1, #16]
 8009edc:	6904      	ldr	r4, [r0, #16]
 8009ede:	0002      	movs	r2, r0
 8009ee0:	1ae0      	subs	r0, r4, r3
 8009ee2:	429c      	cmp	r4, r3
 8009ee4:	d10e      	bne.n	8009f04 <__mcmp+0x2c>
 8009ee6:	3214      	adds	r2, #20
 8009ee8:	009b      	lsls	r3, r3, #2
 8009eea:	3114      	adds	r1, #20
 8009eec:	0014      	movs	r4, r2
 8009eee:	18c9      	adds	r1, r1, r3
 8009ef0:	18d2      	adds	r2, r2, r3
 8009ef2:	3a04      	subs	r2, #4
 8009ef4:	3904      	subs	r1, #4
 8009ef6:	6815      	ldr	r5, [r2, #0]
 8009ef8:	680b      	ldr	r3, [r1, #0]
 8009efa:	429d      	cmp	r5, r3
 8009efc:	d003      	beq.n	8009f06 <__mcmp+0x2e>
 8009efe:	2001      	movs	r0, #1
 8009f00:	429d      	cmp	r5, r3
 8009f02:	d303      	bcc.n	8009f0c <__mcmp+0x34>
 8009f04:	bd30      	pop	{r4, r5, pc}
 8009f06:	4294      	cmp	r4, r2
 8009f08:	d3f3      	bcc.n	8009ef2 <__mcmp+0x1a>
 8009f0a:	e7fb      	b.n	8009f04 <__mcmp+0x2c>
 8009f0c:	4240      	negs	r0, r0
 8009f0e:	e7f9      	b.n	8009f04 <__mcmp+0x2c>

08009f10 <__mdiff>:
 8009f10:	b5f0      	push	{r4, r5, r6, r7, lr}
 8009f12:	000e      	movs	r6, r1
 8009f14:	0007      	movs	r7, r0
 8009f16:	0011      	movs	r1, r2
 8009f18:	0030      	movs	r0, r6
 8009f1a:	b087      	sub	sp, #28
 8009f1c:	0014      	movs	r4, r2
 8009f1e:	f7ff ffdb 	bl	8009ed8 <__mcmp>
 8009f22:	1e05      	subs	r5, r0, #0
 8009f24:	d110      	bne.n	8009f48 <__mdiff+0x38>
 8009f26:	0001      	movs	r1, r0
 8009f28:	0038      	movs	r0, r7
 8009f2a:	f7ff fd9f 	bl	8009a6c <_Balloc>
 8009f2e:	1e02      	subs	r2, r0, #0
 8009f30:	d104      	bne.n	8009f3c <__mdiff+0x2c>
 8009f32:	4b3f      	ldr	r3, [pc, #252]	; (800a030 <__mdiff+0x120>)
 8009f34:	483f      	ldr	r0, [pc, #252]	; (800a034 <__mdiff+0x124>)
 8009f36:	4940      	ldr	r1, [pc, #256]	; (800a038 <__mdiff+0x128>)
 8009f38:	f001 fd14 	bl	800b964 <__assert_func>
 8009f3c:	2301      	movs	r3, #1
 8009f3e:	6145      	str	r5, [r0, #20]
 8009f40:	6103      	str	r3, [r0, #16]
 8009f42:	0010      	movs	r0, r2
 8009f44:	b007      	add	sp, #28
 8009f46:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8009f48:	2301      	movs	r3, #1
 8009f4a:	9301      	str	r3, [sp, #4]
 8009f4c:	2800      	cmp	r0, #0
 8009f4e:	db04      	blt.n	8009f5a <__mdiff+0x4a>
 8009f50:	0023      	movs	r3, r4
 8009f52:	0034      	movs	r4, r6
 8009f54:	001e      	movs	r6, r3
 8009f56:	2300      	movs	r3, #0
 8009f58:	9301      	str	r3, [sp, #4]
 8009f5a:	0038      	movs	r0, r7
 8009f5c:	6861      	ldr	r1, [r4, #4]
 8009f5e:	f7ff fd85 	bl	8009a6c <_Balloc>
 8009f62:	1e02      	subs	r2, r0, #0
 8009f64:	d103      	bne.n	8009f6e <__mdiff+0x5e>
 8009f66:	4b32      	ldr	r3, [pc, #200]	; (800a030 <__mdiff+0x120>)
 8009f68:	4832      	ldr	r0, [pc, #200]	; (800a034 <__mdiff+0x124>)
 8009f6a:	4934      	ldr	r1, [pc, #208]	; (800a03c <__mdiff+0x12c>)
 8009f6c:	e7e4      	b.n	8009f38 <__mdiff+0x28>
 8009f6e:	9b01      	ldr	r3, [sp, #4]
 8009f70:	2700      	movs	r7, #0
 8009f72:	60c3      	str	r3, [r0, #12]
 8009f74:	6920      	ldr	r0, [r4, #16]
 8009f76:	3414      	adds	r4, #20
 8009f78:	0083      	lsls	r3, r0, #2
 8009f7a:	18e3      	adds	r3, r4, r3
 8009f7c:	0021      	movs	r1, r4
 8009f7e:	9401      	str	r4, [sp, #4]
 8009f80:	0034      	movs	r4, r6
 8009f82:	9302      	str	r3, [sp, #8]
 8009f84:	6933      	ldr	r3, [r6, #16]
 8009f86:	3414      	adds	r4, #20
 8009f88:	009b      	lsls	r3, r3, #2
 8009f8a:	18e3      	adds	r3, r4, r3
 8009f8c:	9303      	str	r3, [sp, #12]
 8009f8e:	0013      	movs	r3, r2
 8009f90:	3314      	adds	r3, #20
 8009f92:	469c      	mov	ip, r3
 8009f94:	9305      	str	r3, [sp, #20]
 8009f96:	9104      	str	r1, [sp, #16]
 8009f98:	9b04      	ldr	r3, [sp, #16]
 8009f9a:	cc02      	ldmia	r4!, {r1}
 8009f9c:	cb20      	ldmia	r3!, {r5}
 8009f9e:	9304      	str	r3, [sp, #16]
 8009fa0:	b2ab      	uxth	r3, r5
 8009fa2:	19df      	adds	r7, r3, r7
 8009fa4:	b28b      	uxth	r3, r1
 8009fa6:	1afb      	subs	r3, r7, r3
 8009fa8:	0c09      	lsrs	r1, r1, #16
 8009faa:	0c2d      	lsrs	r5, r5, #16
 8009fac:	1a6d      	subs	r5, r5, r1
 8009fae:	1419      	asrs	r1, r3, #16
 8009fb0:	1869      	adds	r1, r5, r1
 8009fb2:	b29b      	uxth	r3, r3
 8009fb4:	140f      	asrs	r7, r1, #16
 8009fb6:	0409      	lsls	r1, r1, #16
 8009fb8:	4319      	orrs	r1, r3
 8009fba:	4663      	mov	r3, ip
 8009fbc:	c302      	stmia	r3!, {r1}
 8009fbe:	469c      	mov	ip, r3
 8009fc0:	9b03      	ldr	r3, [sp, #12]
 8009fc2:	42a3      	cmp	r3, r4
 8009fc4:	d8e8      	bhi.n	8009f98 <__mdiff+0x88>
 8009fc6:	0031      	movs	r1, r6
 8009fc8:	9c03      	ldr	r4, [sp, #12]
 8009fca:	3115      	adds	r1, #21
 8009fcc:	2304      	movs	r3, #4
 8009fce:	428c      	cmp	r4, r1
 8009fd0:	d304      	bcc.n	8009fdc <__mdiff+0xcc>
 8009fd2:	1ba3      	subs	r3, r4, r6
 8009fd4:	3b15      	subs	r3, #21
 8009fd6:	089b      	lsrs	r3, r3, #2
 8009fd8:	3301      	adds	r3, #1
 8009fda:	009b      	lsls	r3, r3, #2
 8009fdc:	9901      	ldr	r1, [sp, #4]
 8009fde:	18cd      	adds	r5, r1, r3
 8009fe0:	9905      	ldr	r1, [sp, #20]
 8009fe2:	002e      	movs	r6, r5
 8009fe4:	18cb      	adds	r3, r1, r3
 8009fe6:	469c      	mov	ip, r3
 8009fe8:	9902      	ldr	r1, [sp, #8]
 8009fea:	428e      	cmp	r6, r1
 8009fec:	d310      	bcc.n	800a010 <__mdiff+0x100>
 8009fee:	9e02      	ldr	r6, [sp, #8]
 8009ff0:	1ee9      	subs	r1, r5, #3
 8009ff2:	2400      	movs	r4, #0
 8009ff4:	428e      	cmp	r6, r1
 8009ff6:	d304      	bcc.n	800a002 <__mdiff+0xf2>
 8009ff8:	0031      	movs	r1, r6
 8009ffa:	3103      	adds	r1, #3
 8009ffc:	1b49      	subs	r1, r1, r5
 8009ffe:	0889      	lsrs	r1, r1, #2
 800a000:	008c      	lsls	r4, r1, #2
 800a002:	191b      	adds	r3, r3, r4
 800a004:	3b04      	subs	r3, #4
 800a006:	6819      	ldr	r1, [r3, #0]
 800a008:	2900      	cmp	r1, #0
 800a00a:	d00f      	beq.n	800a02c <__mdiff+0x11c>
 800a00c:	6110      	str	r0, [r2, #16]
 800a00e:	e798      	b.n	8009f42 <__mdiff+0x32>
 800a010:	ce02      	ldmia	r6!, {r1}
 800a012:	b28c      	uxth	r4, r1
 800a014:	19e4      	adds	r4, r4, r7
 800a016:	0c0f      	lsrs	r7, r1, #16
 800a018:	1421      	asrs	r1, r4, #16
 800a01a:	1879      	adds	r1, r7, r1
 800a01c:	b2a4      	uxth	r4, r4
 800a01e:	140f      	asrs	r7, r1, #16
 800a020:	0409      	lsls	r1, r1, #16
 800a022:	4321      	orrs	r1, r4
 800a024:	4664      	mov	r4, ip
 800a026:	c402      	stmia	r4!, {r1}
 800a028:	46a4      	mov	ip, r4
 800a02a:	e7dd      	b.n	8009fe8 <__mdiff+0xd8>
 800a02c:	3801      	subs	r0, #1
 800a02e:	e7e9      	b.n	800a004 <__mdiff+0xf4>
 800a030:	0800f9f7 	.word	0x0800f9f7
 800a034:	0800fa08 	.word	0x0800fa08
 800a038:	00000237 	.word	0x00000237
 800a03c:	00000245 	.word	0x00000245

0800a040 <__d2b>:
 800a040:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800a042:	2101      	movs	r1, #1
 800a044:	0014      	movs	r4, r2
 800a046:	001d      	movs	r5, r3
 800a048:	9f08      	ldr	r7, [sp, #32]
 800a04a:	f7ff fd0f 	bl	8009a6c <_Balloc>
 800a04e:	1e06      	subs	r6, r0, #0
 800a050:	d105      	bne.n	800a05e <__d2b+0x1e>
 800a052:	0032      	movs	r2, r6
 800a054:	4b24      	ldr	r3, [pc, #144]	; (800a0e8 <__d2b+0xa8>)
 800a056:	4825      	ldr	r0, [pc, #148]	; (800a0ec <__d2b+0xac>)
 800a058:	4925      	ldr	r1, [pc, #148]	; (800a0f0 <__d2b+0xb0>)
 800a05a:	f001 fc83 	bl	800b964 <__assert_func>
 800a05e:	032b      	lsls	r3, r5, #12
 800a060:	006d      	lsls	r5, r5, #1
 800a062:	0b1b      	lsrs	r3, r3, #12
 800a064:	0d6d      	lsrs	r5, r5, #21
 800a066:	d125      	bne.n	800a0b4 <__d2b+0x74>
 800a068:	9301      	str	r3, [sp, #4]
 800a06a:	2c00      	cmp	r4, #0
 800a06c:	d028      	beq.n	800a0c0 <__d2b+0x80>
 800a06e:	4668      	mov	r0, sp
 800a070:	9400      	str	r4, [sp, #0]
 800a072:	f7ff fd8b 	bl	8009b8c <__lo0bits>
 800a076:	9b01      	ldr	r3, [sp, #4]
 800a078:	9900      	ldr	r1, [sp, #0]
 800a07a:	2800      	cmp	r0, #0
 800a07c:	d01e      	beq.n	800a0bc <__d2b+0x7c>
 800a07e:	2220      	movs	r2, #32
 800a080:	001c      	movs	r4, r3
 800a082:	1a12      	subs	r2, r2, r0
 800a084:	4094      	lsls	r4, r2
 800a086:	0022      	movs	r2, r4
 800a088:	40c3      	lsrs	r3, r0
 800a08a:	430a      	orrs	r2, r1
 800a08c:	6172      	str	r2, [r6, #20]
 800a08e:	9301      	str	r3, [sp, #4]
 800a090:	9c01      	ldr	r4, [sp, #4]
 800a092:	61b4      	str	r4, [r6, #24]
 800a094:	1e63      	subs	r3, r4, #1
 800a096:	419c      	sbcs	r4, r3
 800a098:	3401      	adds	r4, #1
 800a09a:	6134      	str	r4, [r6, #16]
 800a09c:	2d00      	cmp	r5, #0
 800a09e:	d017      	beq.n	800a0d0 <__d2b+0x90>
 800a0a0:	2435      	movs	r4, #53	; 0x35
 800a0a2:	4b14      	ldr	r3, [pc, #80]	; (800a0f4 <__d2b+0xb4>)
 800a0a4:	18ed      	adds	r5, r5, r3
 800a0a6:	182d      	adds	r5, r5, r0
 800a0a8:	603d      	str	r5, [r7, #0]
 800a0aa:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a0ac:	1a24      	subs	r4, r4, r0
 800a0ae:	601c      	str	r4, [r3, #0]
 800a0b0:	0030      	movs	r0, r6
 800a0b2:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 800a0b4:	2280      	movs	r2, #128	; 0x80
 800a0b6:	0352      	lsls	r2, r2, #13
 800a0b8:	4313      	orrs	r3, r2
 800a0ba:	e7d5      	b.n	800a068 <__d2b+0x28>
 800a0bc:	6171      	str	r1, [r6, #20]
 800a0be:	e7e7      	b.n	800a090 <__d2b+0x50>
 800a0c0:	a801      	add	r0, sp, #4
 800a0c2:	f7ff fd63 	bl	8009b8c <__lo0bits>
 800a0c6:	9b01      	ldr	r3, [sp, #4]
 800a0c8:	2401      	movs	r4, #1
 800a0ca:	6173      	str	r3, [r6, #20]
 800a0cc:	3020      	adds	r0, #32
 800a0ce:	e7e4      	b.n	800a09a <__d2b+0x5a>
 800a0d0:	4b09      	ldr	r3, [pc, #36]	; (800a0f8 <__d2b+0xb8>)
 800a0d2:	18c0      	adds	r0, r0, r3
 800a0d4:	4b09      	ldr	r3, [pc, #36]	; (800a0fc <__d2b+0xbc>)
 800a0d6:	6038      	str	r0, [r7, #0]
 800a0d8:	18e3      	adds	r3, r4, r3
 800a0da:	009b      	lsls	r3, r3, #2
 800a0dc:	18f3      	adds	r3, r6, r3
 800a0de:	6958      	ldr	r0, [r3, #20]
 800a0e0:	f7ff fd3a 	bl	8009b58 <__hi0bits>
 800a0e4:	0164      	lsls	r4, r4, #5
 800a0e6:	e7e0      	b.n	800a0aa <__d2b+0x6a>
 800a0e8:	0800f9f7 	.word	0x0800f9f7
 800a0ec:	0800fa08 	.word	0x0800fa08
 800a0f0:	0000030f 	.word	0x0000030f
 800a0f4:	fffffbcd 	.word	0xfffffbcd
 800a0f8:	fffffbce 	.word	0xfffffbce
 800a0fc:	3fffffff 	.word	0x3fffffff

0800a100 <__ascii_wctomb>:
 800a100:	0003      	movs	r3, r0
 800a102:	1e08      	subs	r0, r1, #0
 800a104:	d005      	beq.n	800a112 <__ascii_wctomb+0x12>
 800a106:	2aff      	cmp	r2, #255	; 0xff
 800a108:	d904      	bls.n	800a114 <__ascii_wctomb+0x14>
 800a10a:	228a      	movs	r2, #138	; 0x8a
 800a10c:	2001      	movs	r0, #1
 800a10e:	601a      	str	r2, [r3, #0]
 800a110:	4240      	negs	r0, r0
 800a112:	4770      	bx	lr
 800a114:	2001      	movs	r0, #1
 800a116:	700a      	strb	r2, [r1, #0]
 800a118:	e7fb      	b.n	800a112 <__ascii_wctomb+0x12>
	...

0800a11c <_svfprintf_r>:
 800a11c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800a11e:	b0d9      	sub	sp, #356	; 0x164
 800a120:	001c      	movs	r4, r3
 800a122:	910b      	str	r1, [sp, #44]	; 0x2c
 800a124:	9208      	str	r2, [sp, #32]
 800a126:	900a      	str	r0, [sp, #40]	; 0x28
 800a128:	f001 fb6a 	bl	800b800 <_localeconv_r>
 800a12c:	6803      	ldr	r3, [r0, #0]
 800a12e:	0018      	movs	r0, r3
 800a130:	931c      	str	r3, [sp, #112]	; 0x70
 800a132:	f7f5 ffe7 	bl	8000104 <strlen>
 800a136:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800a138:	9016      	str	r0, [sp, #88]	; 0x58
 800a13a:	899b      	ldrh	r3, [r3, #12]
 800a13c:	061b      	lsls	r3, r3, #24
 800a13e:	d517      	bpl.n	800a170 <_svfprintf_r+0x54>
 800a140:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800a142:	691b      	ldr	r3, [r3, #16]
 800a144:	2b00      	cmp	r3, #0
 800a146:	d113      	bne.n	800a170 <_svfprintf_r+0x54>
 800a148:	2140      	movs	r1, #64	; 0x40
 800a14a:	980a      	ldr	r0, [sp, #40]	; 0x28
 800a14c:	f7ff fa58 	bl	8009600 <_malloc_r>
 800a150:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800a152:	6018      	str	r0, [r3, #0]
 800a154:	6118      	str	r0, [r3, #16]
 800a156:	2800      	cmp	r0, #0
 800a158:	d107      	bne.n	800a16a <_svfprintf_r+0x4e>
 800a15a:	230c      	movs	r3, #12
 800a15c:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800a15e:	6013      	str	r3, [r2, #0]
 800a160:	3b0d      	subs	r3, #13
 800a162:	9317      	str	r3, [sp, #92]	; 0x5c
 800a164:	9817      	ldr	r0, [sp, #92]	; 0x5c
 800a166:	b059      	add	sp, #356	; 0x164
 800a168:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800a16a:	2340      	movs	r3, #64	; 0x40
 800a16c:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800a16e:	6153      	str	r3, [r2, #20]
 800a170:	2300      	movs	r3, #0
 800a172:	2200      	movs	r2, #0
 800a174:	932e      	str	r3, [sp, #184]	; 0xb8
 800a176:	932d      	str	r3, [sp, #180]	; 0xb4
 800a178:	930e      	str	r3, [sp, #56]	; 0x38
 800a17a:	2300      	movs	r3, #0
 800a17c:	9214      	str	r2, [sp, #80]	; 0x50
 800a17e:	9315      	str	r3, [sp, #84]	; 0x54
 800a180:	2300      	movs	r3, #0
 800a182:	af2f      	add	r7, sp, #188	; 0xbc
 800a184:	972c      	str	r7, [sp, #176]	; 0xb0
 800a186:	931f      	str	r3, [sp, #124]	; 0x7c
 800a188:	931e      	str	r3, [sp, #120]	; 0x78
 800a18a:	9312      	str	r3, [sp, #72]	; 0x48
 800a18c:	931b      	str	r3, [sp, #108]	; 0x6c
 800a18e:	931d      	str	r3, [sp, #116]	; 0x74
 800a190:	9317      	str	r3, [sp, #92]	; 0x5c
 800a192:	9d08      	ldr	r5, [sp, #32]
 800a194:	782b      	ldrb	r3, [r5, #0]
 800a196:	2b00      	cmp	r3, #0
 800a198:	d002      	beq.n	800a1a0 <_svfprintf_r+0x84>
 800a19a:	2b25      	cmp	r3, #37	; 0x25
 800a19c:	d000      	beq.n	800a1a0 <_svfprintf_r+0x84>
 800a19e:	e091      	b.n	800a2c4 <_svfprintf_r+0x1a8>
 800a1a0:	9b08      	ldr	r3, [sp, #32]
 800a1a2:	1aee      	subs	r6, r5, r3
 800a1a4:	429d      	cmp	r5, r3
 800a1a6:	d016      	beq.n	800a1d6 <_svfprintf_r+0xba>
 800a1a8:	603b      	str	r3, [r7, #0]
 800a1aa:	9b2e      	ldr	r3, [sp, #184]	; 0xb8
 800a1ac:	607e      	str	r6, [r7, #4]
 800a1ae:	199b      	adds	r3, r3, r6
 800a1b0:	932e      	str	r3, [sp, #184]	; 0xb8
 800a1b2:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
 800a1b4:	3708      	adds	r7, #8
 800a1b6:	3301      	adds	r3, #1
 800a1b8:	932d      	str	r3, [sp, #180]	; 0xb4
 800a1ba:	2b07      	cmp	r3, #7
 800a1bc:	dd08      	ble.n	800a1d0 <_svfprintf_r+0xb4>
 800a1be:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800a1c0:	980a      	ldr	r0, [sp, #40]	; 0x28
 800a1c2:	aa2c      	add	r2, sp, #176	; 0xb0
 800a1c4:	f002 face 	bl	800c764 <__ssprint_r>
 800a1c8:	2800      	cmp	r0, #0
 800a1ca:	d000      	beq.n	800a1ce <_svfprintf_r+0xb2>
 800a1cc:	e1cf      	b.n	800a56e <_svfprintf_r+0x452>
 800a1ce:	af2f      	add	r7, sp, #188	; 0xbc
 800a1d0:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800a1d2:	199b      	adds	r3, r3, r6
 800a1d4:	9317      	str	r3, [sp, #92]	; 0x5c
 800a1d6:	782b      	ldrb	r3, [r5, #0]
 800a1d8:	2b00      	cmp	r3, #0
 800a1da:	d101      	bne.n	800a1e0 <_svfprintf_r+0xc4>
 800a1dc:	f001 f99e 	bl	800b51c <_svfprintf_r+0x1400>
 800a1e0:	221b      	movs	r2, #27
 800a1e2:	2300      	movs	r3, #0
 800a1e4:	a91e      	add	r1, sp, #120	; 0x78
 800a1e6:	1852      	adds	r2, r2, r1
 800a1e8:	7013      	strb	r3, [r2, #0]
 800a1ea:	2201      	movs	r2, #1
 800a1ec:	001e      	movs	r6, r3
 800a1ee:	4252      	negs	r2, r2
 800a1f0:	3501      	adds	r5, #1
 800a1f2:	9209      	str	r2, [sp, #36]	; 0x24
 800a1f4:	9318      	str	r3, [sp, #96]	; 0x60
 800a1f6:	1c6b      	adds	r3, r5, #1
 800a1f8:	9313      	str	r3, [sp, #76]	; 0x4c
 800a1fa:	782b      	ldrb	r3, [r5, #0]
 800a1fc:	930f      	str	r3, [sp, #60]	; 0x3c
 800a1fe:	980f      	ldr	r0, [sp, #60]	; 0x3c
 800a200:	3820      	subs	r0, #32
 800a202:	285a      	cmp	r0, #90	; 0x5a
 800a204:	d901      	bls.n	800a20a <_svfprintf_r+0xee>
 800a206:	f000 fe20 	bl	800ae4a <_svfprintf_r+0xd2e>
 800a20a:	f7f5 ff8d 	bl	8000128 <__gnu_thumb1_case_uhi>
 800a20e:	0078      	.short	0x0078
 800a210:	061e061e 	.word	0x061e061e
 800a214:	061e0082 	.word	0x061e0082
 800a218:	061e061e 	.word	0x061e061e
 800a21c:	061e005d 	.word	0x061e005d
 800a220:	0084061e 	.word	0x0084061e
 800a224:	061e008c 	.word	0x061e008c
 800a228:	0091008a 	.word	0x0091008a
 800a22c:	00b2061e 	.word	0x00b2061e
 800a230:	00b400b4 	.word	0x00b400b4
 800a234:	00b400b4 	.word	0x00b400b4
 800a238:	00b400b4 	.word	0x00b400b4
 800a23c:	00b400b4 	.word	0x00b400b4
 800a240:	061e00b4 	.word	0x061e00b4
 800a244:	061e061e 	.word	0x061e061e
 800a248:	061e061e 	.word	0x061e061e
 800a24c:	061e061e 	.word	0x061e061e
 800a250:	061e013b 	.word	0x061e013b
 800a254:	00f400e0 	.word	0x00f400e0
 800a258:	013b013b 	.word	0x013b013b
 800a25c:	061e013b 	.word	0x061e013b
 800a260:	061e061e 	.word	0x061e061e
 800a264:	00c7061e 	.word	0x00c7061e
 800a268:	061e061e 	.word	0x061e061e
 800a26c:	061e04c7 	.word	0x061e04c7
 800a270:	061e061e 	.word	0x061e061e
 800a274:	061e050a 	.word	0x061e050a
 800a278:	061e052a 	.word	0x061e052a
 800a27c:	055c061e 	.word	0x055c061e
 800a280:	061e061e 	.word	0x061e061e
 800a284:	061e061e 	.word	0x061e061e
 800a288:	061e061e 	.word	0x061e061e
 800a28c:	061e061e 	.word	0x061e061e
 800a290:	061e013b 	.word	0x061e013b
 800a294:	00f600e0 	.word	0x00f600e0
 800a298:	013b013b 	.word	0x013b013b
 800a29c:	00c9013b 	.word	0x00c9013b
 800a2a0:	00dc00f6 	.word	0x00dc00f6
 800a2a4:	00d5061e 	.word	0x00d5061e
 800a2a8:	04a7061e 	.word	0x04a7061e
 800a2ac:	04fa04c9 	.word	0x04fa04c9
 800a2b0:	061e00dc 	.word	0x061e00dc
 800a2b4:	0080050a 	.word	0x0080050a
 800a2b8:	061e052c 	.word	0x061e052c
 800a2bc:	057c061e 	.word	0x057c061e
 800a2c0:	0080061e 	.word	0x0080061e
 800a2c4:	3501      	adds	r5, #1
 800a2c6:	e765      	b.n	800a194 <_svfprintf_r+0x78>
 800a2c8:	980a      	ldr	r0, [sp, #40]	; 0x28
 800a2ca:	f001 fa99 	bl	800b800 <_localeconv_r>
 800a2ce:	6843      	ldr	r3, [r0, #4]
 800a2d0:	0018      	movs	r0, r3
 800a2d2:	931d      	str	r3, [sp, #116]	; 0x74
 800a2d4:	f7f5 ff16 	bl	8000104 <strlen>
 800a2d8:	901b      	str	r0, [sp, #108]	; 0x6c
 800a2da:	980a      	ldr	r0, [sp, #40]	; 0x28
 800a2dc:	f001 fa90 	bl	800b800 <_localeconv_r>
 800a2e0:	6883      	ldr	r3, [r0, #8]
 800a2e2:	9312      	str	r3, [sp, #72]	; 0x48
 800a2e4:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800a2e6:	2b00      	cmp	r3, #0
 800a2e8:	d011      	beq.n	800a30e <_svfprintf_r+0x1f2>
 800a2ea:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800a2ec:	2b00      	cmp	r3, #0
 800a2ee:	d00e      	beq.n	800a30e <_svfprintf_r+0x1f2>
 800a2f0:	781b      	ldrb	r3, [r3, #0]
 800a2f2:	2b00      	cmp	r3, #0
 800a2f4:	d00b      	beq.n	800a30e <_svfprintf_r+0x1f2>
 800a2f6:	2380      	movs	r3, #128	; 0x80
 800a2f8:	00db      	lsls	r3, r3, #3
 800a2fa:	431e      	orrs	r6, r3
 800a2fc:	e007      	b.n	800a30e <_svfprintf_r+0x1f2>
 800a2fe:	231b      	movs	r3, #27
 800a300:	aa1e      	add	r2, sp, #120	; 0x78
 800a302:	189b      	adds	r3, r3, r2
 800a304:	781a      	ldrb	r2, [r3, #0]
 800a306:	2a00      	cmp	r2, #0
 800a308:	d101      	bne.n	800a30e <_svfprintf_r+0x1f2>
 800a30a:	3220      	adds	r2, #32
 800a30c:	701a      	strb	r2, [r3, #0]
 800a30e:	9d13      	ldr	r5, [sp, #76]	; 0x4c
 800a310:	e771      	b.n	800a1f6 <_svfprintf_r+0xda>
 800a312:	2301      	movs	r3, #1
 800a314:	e7f1      	b.n	800a2fa <_svfprintf_r+0x1de>
 800a316:	cc08      	ldmia	r4!, {r3}
 800a318:	9318      	str	r3, [sp, #96]	; 0x60
 800a31a:	2b00      	cmp	r3, #0
 800a31c:	daf7      	bge.n	800a30e <_svfprintf_r+0x1f2>
 800a31e:	425b      	negs	r3, r3
 800a320:	9318      	str	r3, [sp, #96]	; 0x60
 800a322:	2304      	movs	r3, #4
 800a324:	e7e9      	b.n	800a2fa <_svfprintf_r+0x1de>
 800a326:	231b      	movs	r3, #27
 800a328:	aa1e      	add	r2, sp, #120	; 0x78
 800a32a:	189b      	adds	r3, r3, r2
 800a32c:	222b      	movs	r2, #43	; 0x2b
 800a32e:	e7ed      	b.n	800a30c <_svfprintf_r+0x1f0>
 800a330:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 800a332:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800a334:	7812      	ldrb	r2, [r2, #0]
 800a336:	3301      	adds	r3, #1
 800a338:	920f      	str	r2, [sp, #60]	; 0x3c
 800a33a:	2a2a      	cmp	r2, #42	; 0x2a
 800a33c:	d010      	beq.n	800a360 <_svfprintf_r+0x244>
 800a33e:	2200      	movs	r2, #0
 800a340:	9209      	str	r2, [sp, #36]	; 0x24
 800a342:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 800a344:	9313      	str	r3, [sp, #76]	; 0x4c
 800a346:	3a30      	subs	r2, #48	; 0x30
 800a348:	2a09      	cmp	r2, #9
 800a34a:	d900      	bls.n	800a34e <_svfprintf_r+0x232>
 800a34c:	e757      	b.n	800a1fe <_svfprintf_r+0xe2>
 800a34e:	200a      	movs	r0, #10
 800a350:	9909      	ldr	r1, [sp, #36]	; 0x24
 800a352:	4341      	muls	r1, r0
 800a354:	188a      	adds	r2, r1, r2
 800a356:	9209      	str	r2, [sp, #36]	; 0x24
 800a358:	781a      	ldrb	r2, [r3, #0]
 800a35a:	3301      	adds	r3, #1
 800a35c:	920f      	str	r2, [sp, #60]	; 0x3c
 800a35e:	e7f0      	b.n	800a342 <_svfprintf_r+0x226>
 800a360:	cc04      	ldmia	r4!, {r2}
 800a362:	9209      	str	r2, [sp, #36]	; 0x24
 800a364:	2a00      	cmp	r2, #0
 800a366:	da02      	bge.n	800a36e <_svfprintf_r+0x252>
 800a368:	2201      	movs	r2, #1
 800a36a:	4252      	negs	r2, r2
 800a36c:	9209      	str	r2, [sp, #36]	; 0x24
 800a36e:	9313      	str	r3, [sp, #76]	; 0x4c
 800a370:	e7cd      	b.n	800a30e <_svfprintf_r+0x1f2>
 800a372:	2380      	movs	r3, #128	; 0x80
 800a374:	e7c1      	b.n	800a2fa <_svfprintf_r+0x1de>
 800a376:	2200      	movs	r2, #0
 800a378:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800a37a:	9218      	str	r2, [sp, #96]	; 0x60
 800a37c:	210a      	movs	r1, #10
 800a37e:	9a18      	ldr	r2, [sp, #96]	; 0x60
 800a380:	434a      	muls	r2, r1
 800a382:	990f      	ldr	r1, [sp, #60]	; 0x3c
 800a384:	3930      	subs	r1, #48	; 0x30
 800a386:	188a      	adds	r2, r1, r2
 800a388:	9218      	str	r2, [sp, #96]	; 0x60
 800a38a:	001a      	movs	r2, r3
 800a38c:	7812      	ldrb	r2, [r2, #0]
 800a38e:	3301      	adds	r3, #1
 800a390:	920f      	str	r2, [sp, #60]	; 0x3c
 800a392:	3a30      	subs	r2, #48	; 0x30
 800a394:	9313      	str	r3, [sp, #76]	; 0x4c
 800a396:	2a09      	cmp	r2, #9
 800a398:	d9f0      	bls.n	800a37c <_svfprintf_r+0x260>
 800a39a:	e730      	b.n	800a1fe <_svfprintf_r+0xe2>
 800a39c:	2308      	movs	r3, #8
 800a39e:	e7ac      	b.n	800a2fa <_svfprintf_r+0x1de>
 800a3a0:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800a3a2:	781b      	ldrb	r3, [r3, #0]
 800a3a4:	2b68      	cmp	r3, #104	; 0x68
 800a3a6:	d105      	bne.n	800a3b4 <_svfprintf_r+0x298>
 800a3a8:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800a3aa:	3301      	adds	r3, #1
 800a3ac:	9313      	str	r3, [sp, #76]	; 0x4c
 800a3ae:	2380      	movs	r3, #128	; 0x80
 800a3b0:	009b      	lsls	r3, r3, #2
 800a3b2:	e7a2      	b.n	800a2fa <_svfprintf_r+0x1de>
 800a3b4:	2340      	movs	r3, #64	; 0x40
 800a3b6:	e7a0      	b.n	800a2fa <_svfprintf_r+0x1de>
 800a3b8:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800a3ba:	781b      	ldrb	r3, [r3, #0]
 800a3bc:	2b6c      	cmp	r3, #108	; 0x6c
 800a3be:	d104      	bne.n	800a3ca <_svfprintf_r+0x2ae>
 800a3c0:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800a3c2:	3301      	adds	r3, #1
 800a3c4:	9313      	str	r3, [sp, #76]	; 0x4c
 800a3c6:	2320      	movs	r3, #32
 800a3c8:	e797      	b.n	800a2fa <_svfprintf_r+0x1de>
 800a3ca:	2310      	movs	r3, #16
 800a3cc:	e795      	b.n	800a2fa <_svfprintf_r+0x1de>
 800a3ce:	0021      	movs	r1, r4
 800a3d0:	c904      	ldmia	r1!, {r2}
 800a3d2:	ab3f      	add	r3, sp, #252	; 0xfc
 800a3d4:	910d      	str	r1, [sp, #52]	; 0x34
 800a3d6:	211b      	movs	r1, #27
 800a3d8:	701a      	strb	r2, [r3, #0]
 800a3da:	2200      	movs	r2, #0
 800a3dc:	a81e      	add	r0, sp, #120	; 0x78
 800a3de:	1809      	adds	r1, r1, r0
 800a3e0:	700a      	strb	r2, [r1, #0]
 800a3e2:	920c      	str	r2, [sp, #48]	; 0x30
 800a3e4:	3201      	adds	r2, #1
 800a3e6:	9209      	str	r2, [sp, #36]	; 0x24
 800a3e8:	2200      	movs	r2, #0
 800a3ea:	9308      	str	r3, [sp, #32]
 800a3ec:	0015      	movs	r5, r2
 800a3ee:	9219      	str	r2, [sp, #100]	; 0x64
 800a3f0:	9210      	str	r2, [sp, #64]	; 0x40
 800a3f2:	9211      	str	r2, [sp, #68]	; 0x44
 800a3f4:	e1f1      	b.n	800a7da <_svfprintf_r+0x6be>
 800a3f6:	2310      	movs	r3, #16
 800a3f8:	431e      	orrs	r6, r3
 800a3fa:	06b3      	lsls	r3, r6, #26
 800a3fc:	d531      	bpl.n	800a462 <_svfprintf_r+0x346>
 800a3fe:	2307      	movs	r3, #7
 800a400:	3407      	adds	r4, #7
 800a402:	439c      	bics	r4, r3
 800a404:	0022      	movs	r2, r4
 800a406:	ca18      	ldmia	r2!, {r3, r4}
 800a408:	9306      	str	r3, [sp, #24]
 800a40a:	9407      	str	r4, [sp, #28]
 800a40c:	920d      	str	r2, [sp, #52]	; 0x34
 800a40e:	9a07      	ldr	r2, [sp, #28]
 800a410:	2301      	movs	r3, #1
 800a412:	2a00      	cmp	r2, #0
 800a414:	da0b      	bge.n	800a42e <_svfprintf_r+0x312>
 800a416:	9c06      	ldr	r4, [sp, #24]
 800a418:	9d07      	ldr	r5, [sp, #28]
 800a41a:	2200      	movs	r2, #0
 800a41c:	4261      	negs	r1, r4
 800a41e:	41aa      	sbcs	r2, r5
 800a420:	9106      	str	r1, [sp, #24]
 800a422:	9207      	str	r2, [sp, #28]
 800a424:	221b      	movs	r2, #27
 800a426:	a91e      	add	r1, sp, #120	; 0x78
 800a428:	1852      	adds	r2, r2, r1
 800a42a:	212d      	movs	r1, #45	; 0x2d
 800a42c:	7011      	strb	r1, [r2, #0]
 800a42e:	9907      	ldr	r1, [sp, #28]
 800a430:	9a06      	ldr	r2, [sp, #24]
 800a432:	430a      	orrs	r2, r1
 800a434:	9909      	ldr	r1, [sp, #36]	; 0x24
 800a436:	3101      	adds	r1, #1
 800a438:	d101      	bne.n	800a43e <_svfprintf_r+0x322>
 800a43a:	f001 f87b 	bl	800b534 <_svfprintf_r+0x1418>
 800a43e:	2180      	movs	r1, #128	; 0x80
 800a440:	0034      	movs	r4, r6
 800a442:	438c      	bics	r4, r1
 800a444:	2a00      	cmp	r2, #0
 800a446:	d001      	beq.n	800a44c <_svfprintf_r+0x330>
 800a448:	f001 f879 	bl	800b53e <_svfprintf_r+0x1422>
 800a44c:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800a44e:	2a00      	cmp	r2, #0
 800a450:	d101      	bne.n	800a456 <_svfprintf_r+0x33a>
 800a452:	f000 fcef 	bl	800ae34 <_svfprintf_r+0xd18>
 800a456:	2b01      	cmp	r3, #1
 800a458:	d001      	beq.n	800a45e <_svfprintf_r+0x342>
 800a45a:	f001 f874 	bl	800b546 <_svfprintf_r+0x142a>
 800a45e:	f000 fc79 	bl	800ad54 <_svfprintf_r+0xc38>
 800a462:	0022      	movs	r2, r4
 800a464:	ca08      	ldmia	r2!, {r3}
 800a466:	920d      	str	r2, [sp, #52]	; 0x34
 800a468:	06f2      	lsls	r2, r6, #27
 800a46a:	d503      	bpl.n	800a474 <_svfprintf_r+0x358>
 800a46c:	9306      	str	r3, [sp, #24]
 800a46e:	17db      	asrs	r3, r3, #31
 800a470:	9307      	str	r3, [sp, #28]
 800a472:	e7cc      	b.n	800a40e <_svfprintf_r+0x2f2>
 800a474:	0672      	lsls	r2, r6, #25
 800a476:	d501      	bpl.n	800a47c <_svfprintf_r+0x360>
 800a478:	b21b      	sxth	r3, r3
 800a47a:	e7f7      	b.n	800a46c <_svfprintf_r+0x350>
 800a47c:	05b2      	lsls	r2, r6, #22
 800a47e:	d5f5      	bpl.n	800a46c <_svfprintf_r+0x350>
 800a480:	b25b      	sxtb	r3, r3
 800a482:	e7f3      	b.n	800a46c <_svfprintf_r+0x350>
 800a484:	2307      	movs	r3, #7
 800a486:	3407      	adds	r4, #7
 800a488:	439c      	bics	r4, r3
 800a48a:	0022      	movs	r2, r4
 800a48c:	ca18      	ldmia	r2!, {r3, r4}
 800a48e:	920d      	str	r2, [sp, #52]	; 0x34
 800a490:	2201      	movs	r2, #1
 800a492:	9314      	str	r3, [sp, #80]	; 0x50
 800a494:	9415      	str	r4, [sp, #84]	; 0x54
 800a496:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800a498:	9d14      	ldr	r5, [sp, #80]	; 0x50
 800a49a:	005c      	lsls	r4, r3, #1
 800a49c:	0864      	lsrs	r4, r4, #1
 800a49e:	0028      	movs	r0, r5
 800a4a0:	0021      	movs	r1, r4
 800a4a2:	4b3e      	ldr	r3, [pc, #248]	; (800a59c <_svfprintf_r+0x480>)
 800a4a4:	4252      	negs	r2, r2
 800a4a6:	f7f8 f821 	bl	80024ec <__aeabi_dcmpun>
 800a4aa:	2800      	cmp	r0, #0
 800a4ac:	d126      	bne.n	800a4fc <_svfprintf_r+0x3e0>
 800a4ae:	2201      	movs	r2, #1
 800a4b0:	0028      	movs	r0, r5
 800a4b2:	0021      	movs	r1, r4
 800a4b4:	4b39      	ldr	r3, [pc, #228]	; (800a59c <_svfprintf_r+0x480>)
 800a4b6:	4252      	negs	r2, r2
 800a4b8:	f7f5 ffd6 	bl	8000468 <__aeabi_dcmple>
 800a4bc:	2800      	cmp	r0, #0
 800a4be:	d11d      	bne.n	800a4fc <_svfprintf_r+0x3e0>
 800a4c0:	9814      	ldr	r0, [sp, #80]	; 0x50
 800a4c2:	9915      	ldr	r1, [sp, #84]	; 0x54
 800a4c4:	2200      	movs	r2, #0
 800a4c6:	2300      	movs	r3, #0
 800a4c8:	f7f5 ffc4 	bl	8000454 <__aeabi_dcmplt>
 800a4cc:	2800      	cmp	r0, #0
 800a4ce:	d004      	beq.n	800a4da <_svfprintf_r+0x3be>
 800a4d0:	231b      	movs	r3, #27
 800a4d2:	aa1e      	add	r2, sp, #120	; 0x78
 800a4d4:	189b      	adds	r3, r3, r2
 800a4d6:	222d      	movs	r2, #45	; 0x2d
 800a4d8:	701a      	strb	r2, [r3, #0]
 800a4da:	4b31      	ldr	r3, [pc, #196]	; (800a5a0 <_svfprintf_r+0x484>)
 800a4dc:	9308      	str	r3, [sp, #32]
 800a4de:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800a4e0:	2b47      	cmp	r3, #71	; 0x47
 800a4e2:	dd01      	ble.n	800a4e8 <_svfprintf_r+0x3cc>
 800a4e4:	4b2f      	ldr	r3, [pc, #188]	; (800a5a4 <_svfprintf_r+0x488>)
 800a4e6:	9308      	str	r3, [sp, #32]
 800a4e8:	2380      	movs	r3, #128	; 0x80
 800a4ea:	439e      	bics	r6, r3
 800a4ec:	2300      	movs	r3, #0
 800a4ee:	930c      	str	r3, [sp, #48]	; 0x30
 800a4f0:	3303      	adds	r3, #3
 800a4f2:	9309      	str	r3, [sp, #36]	; 0x24
 800a4f4:	2300      	movs	r3, #0
 800a4f6:	9319      	str	r3, [sp, #100]	; 0x64
 800a4f8:	f000 fc78 	bl	800adec <_svfprintf_r+0xcd0>
 800a4fc:	9a14      	ldr	r2, [sp, #80]	; 0x50
 800a4fe:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800a500:	0010      	movs	r0, r2
 800a502:	0019      	movs	r1, r3
 800a504:	f7f7 fff2 	bl	80024ec <__aeabi_dcmpun>
 800a508:	2800      	cmp	r0, #0
 800a50a:	d00e      	beq.n	800a52a <_svfprintf_r+0x40e>
 800a50c:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800a50e:	2b00      	cmp	r3, #0
 800a510:	da04      	bge.n	800a51c <_svfprintf_r+0x400>
 800a512:	231b      	movs	r3, #27
 800a514:	aa1e      	add	r2, sp, #120	; 0x78
 800a516:	189b      	adds	r3, r3, r2
 800a518:	222d      	movs	r2, #45	; 0x2d
 800a51a:	701a      	strb	r2, [r3, #0]
 800a51c:	4b22      	ldr	r3, [pc, #136]	; (800a5a8 <_svfprintf_r+0x48c>)
 800a51e:	9308      	str	r3, [sp, #32]
 800a520:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800a522:	2b47      	cmp	r3, #71	; 0x47
 800a524:	dde0      	ble.n	800a4e8 <_svfprintf_r+0x3cc>
 800a526:	4b21      	ldr	r3, [pc, #132]	; (800a5ac <_svfprintf_r+0x490>)
 800a528:	e7dd      	b.n	800a4e6 <_svfprintf_r+0x3ca>
 800a52a:	2320      	movs	r3, #32
 800a52c:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 800a52e:	439a      	bics	r2, r3
 800a530:	9210      	str	r2, [sp, #64]	; 0x40
 800a532:	2a41      	cmp	r2, #65	; 0x41
 800a534:	d123      	bne.n	800a57e <_svfprintf_r+0x462>
 800a536:	2230      	movs	r2, #48	; 0x30
 800a538:	990f      	ldr	r1, [sp, #60]	; 0x3c
 800a53a:	ab25      	add	r3, sp, #148	; 0x94
 800a53c:	701a      	strb	r2, [r3, #0]
 800a53e:	3248      	adds	r2, #72	; 0x48
 800a540:	2961      	cmp	r1, #97	; 0x61
 800a542:	d000      	beq.n	800a546 <_svfprintf_r+0x42a>
 800a544:	3a20      	subs	r2, #32
 800a546:	705a      	strb	r2, [r3, #1]
 800a548:	2302      	movs	r3, #2
 800a54a:	431e      	orrs	r6, r3
 800a54c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a54e:	2b63      	cmp	r3, #99	; 0x63
 800a550:	dd2e      	ble.n	800a5b0 <_svfprintf_r+0x494>
 800a552:	980a      	ldr	r0, [sp, #40]	; 0x28
 800a554:	1c59      	adds	r1, r3, #1
 800a556:	f7ff f853 	bl	8009600 <_malloc_r>
 800a55a:	9008      	str	r0, [sp, #32]
 800a55c:	2800      	cmp	r0, #0
 800a55e:	d000      	beq.n	800a562 <_svfprintf_r+0x446>
 800a560:	e216      	b.n	800a990 <_svfprintf_r+0x874>
 800a562:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800a564:	899a      	ldrh	r2, [r3, #12]
 800a566:	2340      	movs	r3, #64	; 0x40
 800a568:	4313      	orrs	r3, r2
 800a56a:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800a56c:	8193      	strh	r3, [r2, #12]
 800a56e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800a570:	899b      	ldrh	r3, [r3, #12]
 800a572:	065b      	lsls	r3, r3, #25
 800a574:	d400      	bmi.n	800a578 <_svfprintf_r+0x45c>
 800a576:	e5f5      	b.n	800a164 <_svfprintf_r+0x48>
 800a578:	2301      	movs	r3, #1
 800a57a:	425b      	negs	r3, r3
 800a57c:	e5f1      	b.n	800a162 <_svfprintf_r+0x46>
 800a57e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a580:	900c      	str	r0, [sp, #48]	; 0x30
 800a582:	3301      	adds	r3, #1
 800a584:	d100      	bne.n	800a588 <_svfprintf_r+0x46c>
 800a586:	e206      	b.n	800a996 <_svfprintf_r+0x87a>
 800a588:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800a58a:	2b47      	cmp	r3, #71	; 0x47
 800a58c:	d114      	bne.n	800a5b8 <_svfprintf_r+0x49c>
 800a58e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a590:	2b00      	cmp	r3, #0
 800a592:	d111      	bne.n	800a5b8 <_svfprintf_r+0x49c>
 800a594:	3301      	adds	r3, #1
 800a596:	9309      	str	r3, [sp, #36]	; 0x24
 800a598:	e00e      	b.n	800a5b8 <_svfprintf_r+0x49c>
 800a59a:	46c0      	nop			; (mov r8, r8)
 800a59c:	7fefffff 	.word	0x7fefffff
 800a5a0:	0800fb64 	.word	0x0800fb64
 800a5a4:	0800fb68 	.word	0x0800fb68
 800a5a8:	0800fb6c 	.word	0x0800fb6c
 800a5ac:	0800fb70 	.word	0x0800fb70
 800a5b0:	2300      	movs	r3, #0
 800a5b2:	930c      	str	r3, [sp, #48]	; 0x30
 800a5b4:	ab3f      	add	r3, sp, #252	; 0xfc
 800a5b6:	9308      	str	r3, [sp, #32]
 800a5b8:	2380      	movs	r3, #128	; 0x80
 800a5ba:	005b      	lsls	r3, r3, #1
 800a5bc:	4333      	orrs	r3, r6
 800a5be:	931a      	str	r3, [sp, #104]	; 0x68
 800a5c0:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800a5c2:	9d14      	ldr	r5, [sp, #80]	; 0x50
 800a5c4:	2b00      	cmp	r3, #0
 800a5c6:	db00      	blt.n	800a5ca <_svfprintf_r+0x4ae>
 800a5c8:	e1e7      	b.n	800a99a <_svfprintf_r+0x87e>
 800a5ca:	2280      	movs	r2, #128	; 0x80
 800a5cc:	0612      	lsls	r2, r2, #24
 800a5ce:	4694      	mov	ip, r2
 800a5d0:	4463      	add	r3, ip
 800a5d2:	930e      	str	r3, [sp, #56]	; 0x38
 800a5d4:	232d      	movs	r3, #45	; 0x2d
 800a5d6:	9322      	str	r3, [sp, #136]	; 0x88
 800a5d8:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800a5da:	2b41      	cmp	r3, #65	; 0x41
 800a5dc:	d000      	beq.n	800a5e0 <_svfprintf_r+0x4c4>
 800a5de:	e1f5      	b.n	800a9cc <_svfprintf_r+0x8b0>
 800a5e0:	0028      	movs	r0, r5
 800a5e2:	aa26      	add	r2, sp, #152	; 0x98
 800a5e4:	990e      	ldr	r1, [sp, #56]	; 0x38
 800a5e6:	f001 f94b 	bl	800b880 <frexp>
 800a5ea:	23ff      	movs	r3, #255	; 0xff
 800a5ec:	2200      	movs	r2, #0
 800a5ee:	059b      	lsls	r3, r3, #22
 800a5f0:	f7f7 f938 	bl	8001864 <__aeabi_dmul>
 800a5f4:	2200      	movs	r2, #0
 800a5f6:	2300      	movs	r3, #0
 800a5f8:	0004      	movs	r4, r0
 800a5fa:	000d      	movs	r5, r1
 800a5fc:	f7f5 ff24 	bl	8000448 <__aeabi_dcmpeq>
 800a600:	2800      	cmp	r0, #0
 800a602:	d001      	beq.n	800a608 <_svfprintf_r+0x4ec>
 800a604:	2301      	movs	r3, #1
 800a606:	9326      	str	r3, [sp, #152]	; 0x98
 800a608:	4bda      	ldr	r3, [pc, #872]	; (800a974 <_svfprintf_r+0x858>)
 800a60a:	9319      	str	r3, [sp, #100]	; 0x64
 800a60c:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800a60e:	2b61      	cmp	r3, #97	; 0x61
 800a610:	d001      	beq.n	800a616 <_svfprintf_r+0x4fa>
 800a612:	4bd9      	ldr	r3, [pc, #868]	; (800a978 <_svfprintf_r+0x85c>)
 800a614:	9319      	str	r3, [sp, #100]	; 0x64
 800a616:	9b08      	ldr	r3, [sp, #32]
 800a618:	930e      	str	r3, [sp, #56]	; 0x38
 800a61a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a61c:	3b01      	subs	r3, #1
 800a61e:	9311      	str	r3, [sp, #68]	; 0x44
 800a620:	2200      	movs	r2, #0
 800a622:	4bd6      	ldr	r3, [pc, #856]	; (800a97c <_svfprintf_r+0x860>)
 800a624:	0020      	movs	r0, r4
 800a626:	0029      	movs	r1, r5
 800a628:	f7f7 f91c 	bl	8001864 <__aeabi_dmul>
 800a62c:	000d      	movs	r5, r1
 800a62e:	0004      	movs	r4, r0
 800a630:	f7f7 ff7a 	bl	8002528 <__aeabi_d2iz>
 800a634:	9021      	str	r0, [sp, #132]	; 0x84
 800a636:	f7f7 ffad 	bl	8002594 <__aeabi_i2d>
 800a63a:	0002      	movs	r2, r0
 800a63c:	000b      	movs	r3, r1
 800a63e:	0020      	movs	r0, r4
 800a640:	0029      	movs	r1, r5
 800a642:	f7f7 fbd1 	bl	8001de8 <__aeabi_dsub>
 800a646:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800a648:	000d      	movs	r5, r1
 800a64a:	001a      	movs	r2, r3
 800a64c:	3201      	adds	r2, #1
 800a64e:	9921      	ldr	r1, [sp, #132]	; 0x84
 800a650:	920e      	str	r2, [sp, #56]	; 0x38
 800a652:	9223      	str	r2, [sp, #140]	; 0x8c
 800a654:	9a19      	ldr	r2, [sp, #100]	; 0x64
 800a656:	0004      	movs	r4, r0
 800a658:	5c52      	ldrb	r2, [r2, r1]
 800a65a:	701a      	strb	r2, [r3, #0]
 800a65c:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800a65e:	9320      	str	r3, [sp, #128]	; 0x80
 800a660:	3301      	adds	r3, #1
 800a662:	d00a      	beq.n	800a67a <_svfprintf_r+0x55e>
 800a664:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800a666:	2200      	movs	r2, #0
 800a668:	3b01      	subs	r3, #1
 800a66a:	9311      	str	r3, [sp, #68]	; 0x44
 800a66c:	0020      	movs	r0, r4
 800a66e:	2300      	movs	r3, #0
 800a670:	0029      	movs	r1, r5
 800a672:	f7f5 fee9 	bl	8000448 <__aeabi_dcmpeq>
 800a676:	2800      	cmp	r0, #0
 800a678:	d0d2      	beq.n	800a620 <_svfprintf_r+0x504>
 800a67a:	2200      	movs	r2, #0
 800a67c:	0020      	movs	r0, r4
 800a67e:	0029      	movs	r1, r5
 800a680:	4bbf      	ldr	r3, [pc, #764]	; (800a980 <_svfprintf_r+0x864>)
 800a682:	f7f5 fefb 	bl	800047c <__aeabi_dcmpgt>
 800a686:	2800      	cmp	r0, #0
 800a688:	d10c      	bne.n	800a6a4 <_svfprintf_r+0x588>
 800a68a:	2200      	movs	r2, #0
 800a68c:	0020      	movs	r0, r4
 800a68e:	0029      	movs	r1, r5
 800a690:	4bbb      	ldr	r3, [pc, #748]	; (800a980 <_svfprintf_r+0x864>)
 800a692:	f7f5 fed9 	bl	8000448 <__aeabi_dcmpeq>
 800a696:	2800      	cmp	r0, #0
 800a698:	d100      	bne.n	800a69c <_svfprintf_r+0x580>
 800a69a:	e191      	b.n	800a9c0 <_svfprintf_r+0x8a4>
 800a69c:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800a69e:	07db      	lsls	r3, r3, #31
 800a6a0:	d400      	bmi.n	800a6a4 <_svfprintf_r+0x588>
 800a6a2:	e18d      	b.n	800a9c0 <_svfprintf_r+0x8a4>
 800a6a4:	2030      	movs	r0, #48	; 0x30
 800a6a6:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800a6a8:	932a      	str	r3, [sp, #168]	; 0xa8
 800a6aa:	9b19      	ldr	r3, [sp, #100]	; 0x64
 800a6ac:	7bdb      	ldrb	r3, [r3, #15]
 800a6ae:	9a2a      	ldr	r2, [sp, #168]	; 0xa8
 800a6b0:	3a01      	subs	r2, #1
 800a6b2:	922a      	str	r2, [sp, #168]	; 0xa8
 800a6b4:	7811      	ldrb	r1, [r2, #0]
 800a6b6:	4299      	cmp	r1, r3
 800a6b8:	d100      	bne.n	800a6bc <_svfprintf_r+0x5a0>
 800a6ba:	e171      	b.n	800a9a0 <_svfprintf_r+0x884>
 800a6bc:	1c4b      	adds	r3, r1, #1
 800a6be:	b2db      	uxtb	r3, r3
 800a6c0:	2939      	cmp	r1, #57	; 0x39
 800a6c2:	d101      	bne.n	800a6c8 <_svfprintf_r+0x5ac>
 800a6c4:	9b19      	ldr	r3, [sp, #100]	; 0x64
 800a6c6:	7a9b      	ldrb	r3, [r3, #10]
 800a6c8:	7013      	strb	r3, [r2, #0]
 800a6ca:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 800a6cc:	9a08      	ldr	r2, [sp, #32]
 800a6ce:	9d26      	ldr	r5, [sp, #152]	; 0x98
 800a6d0:	1a9b      	subs	r3, r3, r2
 800a6d2:	930e      	str	r3, [sp, #56]	; 0x38
 800a6d4:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800a6d6:	2b47      	cmp	r3, #71	; 0x47
 800a6d8:	d000      	beq.n	800a6dc <_svfprintf_r+0x5c0>
 800a6da:	e1c4      	b.n	800aa66 <_svfprintf_r+0x94a>
 800a6dc:	1ceb      	adds	r3, r5, #3
 800a6de:	db03      	blt.n	800a6e8 <_svfprintf_r+0x5cc>
 800a6e0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a6e2:	42ab      	cmp	r3, r5
 800a6e4:	db00      	blt.n	800a6e8 <_svfprintf_r+0x5cc>
 800a6e6:	e1e6      	b.n	800aab6 <_svfprintf_r+0x99a>
 800a6e8:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800a6ea:	3b02      	subs	r3, #2
 800a6ec:	930f      	str	r3, [sp, #60]	; 0x3c
 800a6ee:	223c      	movs	r2, #60	; 0x3c
 800a6f0:	466b      	mov	r3, sp
 800a6f2:	990f      	ldr	r1, [sp, #60]	; 0x3c
 800a6f4:	189b      	adds	r3, r3, r2
 800a6f6:	1e6c      	subs	r4, r5, #1
 800a6f8:	3a1c      	subs	r2, #28
 800a6fa:	2000      	movs	r0, #0
 800a6fc:	781b      	ldrb	r3, [r3, #0]
 800a6fe:	9426      	str	r4, [sp, #152]	; 0x98
 800a700:	4391      	bics	r1, r2
 800a702:	2941      	cmp	r1, #65	; 0x41
 800a704:	d102      	bne.n	800a70c <_svfprintf_r+0x5f0>
 800a706:	330f      	adds	r3, #15
 800a708:	b2db      	uxtb	r3, r3
 800a70a:	3001      	adds	r0, #1
 800a70c:	a928      	add	r1, sp, #160	; 0xa0
 800a70e:	700b      	strb	r3, [r1, #0]
 800a710:	232b      	movs	r3, #43	; 0x2b
 800a712:	2c00      	cmp	r4, #0
 800a714:	da02      	bge.n	800a71c <_svfprintf_r+0x600>
 800a716:	2401      	movs	r4, #1
 800a718:	3302      	adds	r3, #2
 800a71a:	1b64      	subs	r4, r4, r5
 800a71c:	704b      	strb	r3, [r1, #1]
 800a71e:	2c09      	cmp	r4, #9
 800a720:	dc00      	bgt.n	800a724 <_svfprintf_r+0x608>
 800a722:	e1ba      	b.n	800aa9a <_svfprintf_r+0x97e>
 800a724:	2337      	movs	r3, #55	; 0x37
 800a726:	250a      	movs	r5, #10
 800a728:	aa1e      	add	r2, sp, #120	; 0x78
 800a72a:	189b      	adds	r3, r3, r2
 800a72c:	9310      	str	r3, [sp, #64]	; 0x40
 800a72e:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800a730:	0020      	movs	r0, r4
 800a732:	9309      	str	r3, [sp, #36]	; 0x24
 800a734:	0029      	movs	r1, r5
 800a736:	3b01      	subs	r3, #1
 800a738:	9310      	str	r3, [sp, #64]	; 0x40
 800a73a:	f7f5 fe6f 	bl	800041c <__aeabi_idivmod>
 800a73e:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800a740:	3130      	adds	r1, #48	; 0x30
 800a742:	7019      	strb	r1, [r3, #0]
 800a744:	0020      	movs	r0, r4
 800a746:	0029      	movs	r1, r5
 800a748:	9411      	str	r4, [sp, #68]	; 0x44
 800a74a:	f7f5 fd81 	bl	8000250 <__divsi3>
 800a74e:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800a750:	0004      	movs	r4, r0
 800a752:	2b63      	cmp	r3, #99	; 0x63
 800a754:	dceb      	bgt.n	800a72e <_svfprintf_r+0x612>
 800a756:	222a      	movs	r2, #42	; 0x2a
 800a758:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a75a:	a81e      	add	r0, sp, #120	; 0x78
 800a75c:	1e99      	subs	r1, r3, #2
 800a75e:	1812      	adds	r2, r2, r0
 800a760:	2037      	movs	r0, #55	; 0x37
 800a762:	000b      	movs	r3, r1
 800a764:	3430      	adds	r4, #48	; 0x30
 800a766:	700c      	strb	r4, [r1, #0]
 800a768:	ac1e      	add	r4, sp, #120	; 0x78
 800a76a:	1900      	adds	r0, r0, r4
 800a76c:	4283      	cmp	r3, r0
 800a76e:	d200      	bcs.n	800a772 <_svfprintf_r+0x656>
 800a770:	e18e      	b.n	800aa90 <_svfprintf_r+0x974>
 800a772:	2300      	movs	r3, #0
 800a774:	4281      	cmp	r1, r0
 800a776:	d804      	bhi.n	800a782 <_svfprintf_r+0x666>
 800a778:	aa1e      	add	r2, sp, #120	; 0x78
 800a77a:	3339      	adds	r3, #57	; 0x39
 800a77c:	189b      	adds	r3, r3, r2
 800a77e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800a780:	1a9b      	subs	r3, r3, r2
 800a782:	222a      	movs	r2, #42	; 0x2a
 800a784:	a91e      	add	r1, sp, #120	; 0x78
 800a786:	1852      	adds	r2, r2, r1
 800a788:	18d3      	adds	r3, r2, r3
 800a78a:	aa28      	add	r2, sp, #160	; 0xa0
 800a78c:	1a9b      	subs	r3, r3, r2
 800a78e:	931e      	str	r3, [sp, #120]	; 0x78
 800a790:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 800a792:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800a794:	4694      	mov	ip, r2
 800a796:	4463      	add	r3, ip
 800a798:	9309      	str	r3, [sp, #36]	; 0x24
 800a79a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800a79c:	2b01      	cmp	r3, #1
 800a79e:	dc01      	bgt.n	800a7a4 <_svfprintf_r+0x688>
 800a7a0:	07f3      	lsls	r3, r6, #31
 800a7a2:	d504      	bpl.n	800a7ae <_svfprintf_r+0x692>
 800a7a4:	9a16      	ldr	r2, [sp, #88]	; 0x58
 800a7a6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a7a8:	4694      	mov	ip, r2
 800a7aa:	4463      	add	r3, ip
 800a7ac:	9309      	str	r3, [sp, #36]	; 0x24
 800a7ae:	2280      	movs	r2, #128	; 0x80
 800a7b0:	4b74      	ldr	r3, [pc, #464]	; (800a984 <_svfprintf_r+0x868>)
 800a7b2:	0052      	lsls	r2, r2, #1
 800a7b4:	4033      	ands	r3, r6
 800a7b6:	431a      	orrs	r2, r3
 800a7b8:	2300      	movs	r3, #0
 800a7ba:	001d      	movs	r5, r3
 800a7bc:	921a      	str	r2, [sp, #104]	; 0x68
 800a7be:	9310      	str	r3, [sp, #64]	; 0x40
 800a7c0:	9311      	str	r3, [sp, #68]	; 0x44
 800a7c2:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800a7c4:	9e1a      	ldr	r6, [sp, #104]	; 0x68
 800a7c6:	9319      	str	r3, [sp, #100]	; 0x64
 800a7c8:	2b00      	cmp	r3, #0
 800a7ca:	d006      	beq.n	800a7da <_svfprintf_r+0x6be>
 800a7cc:	231b      	movs	r3, #27
 800a7ce:	aa1e      	add	r2, sp, #120	; 0x78
 800a7d0:	189b      	adds	r3, r3, r2
 800a7d2:	222d      	movs	r2, #45	; 0x2d
 800a7d4:	701a      	strb	r2, [r3, #0]
 800a7d6:	2300      	movs	r3, #0
 800a7d8:	9319      	str	r3, [sp, #100]	; 0x64
 800a7da:	9b19      	ldr	r3, [sp, #100]	; 0x64
 800a7dc:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800a7de:	931a      	str	r3, [sp, #104]	; 0x68
 800a7e0:	4293      	cmp	r3, r2
 800a7e2:	da00      	bge.n	800a7e6 <_svfprintf_r+0x6ca>
 800a7e4:	921a      	str	r2, [sp, #104]	; 0x68
 800a7e6:	231b      	movs	r3, #27
 800a7e8:	aa1e      	add	r2, sp, #120	; 0x78
 800a7ea:	189b      	adds	r3, r3, r2
 800a7ec:	781b      	ldrb	r3, [r3, #0]
 800a7ee:	1e5a      	subs	r2, r3, #1
 800a7f0:	4193      	sbcs	r3, r2
 800a7f2:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 800a7f4:	18d3      	adds	r3, r2, r3
 800a7f6:	931a      	str	r3, [sp, #104]	; 0x68
 800a7f8:	0032      	movs	r2, r6
 800a7fa:	2302      	movs	r3, #2
 800a7fc:	401a      	ands	r2, r3
 800a7fe:	9220      	str	r2, [sp, #128]	; 0x80
 800a800:	421e      	tst	r6, r3
 800a802:	d002      	beq.n	800a80a <_svfprintf_r+0x6ee>
 800a804:	9b1a      	ldr	r3, [sp, #104]	; 0x68
 800a806:	3302      	adds	r3, #2
 800a808:	931a      	str	r3, [sp, #104]	; 0x68
 800a80a:	2384      	movs	r3, #132	; 0x84
 800a80c:	0032      	movs	r2, r6
 800a80e:	401a      	ands	r2, r3
 800a810:	9221      	str	r2, [sp, #132]	; 0x84
 800a812:	421e      	tst	r6, r3
 800a814:	d11f      	bne.n	800a856 <_svfprintf_r+0x73a>
 800a816:	9b18      	ldr	r3, [sp, #96]	; 0x60
 800a818:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 800a81a:	1a9c      	subs	r4, r3, r2
 800a81c:	2c00      	cmp	r4, #0
 800a81e:	dd1a      	ble.n	800a856 <_svfprintf_r+0x73a>
 800a820:	0039      	movs	r1, r7
 800a822:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
 800a824:	4858      	ldr	r0, [pc, #352]	; (800a988 <_svfprintf_r+0x86c>)
 800a826:	9a2e      	ldr	r2, [sp, #184]	; 0xb8
 800a828:	3301      	adds	r3, #1
 800a82a:	3108      	adds	r1, #8
 800a82c:	6038      	str	r0, [r7, #0]
 800a82e:	2c10      	cmp	r4, #16
 800a830:	dd00      	ble.n	800a834 <_svfprintf_r+0x718>
 800a832:	e31c      	b.n	800ae6e <_svfprintf_r+0xd52>
 800a834:	607c      	str	r4, [r7, #4]
 800a836:	18a4      	adds	r4, r4, r2
 800a838:	000f      	movs	r7, r1
 800a83a:	942e      	str	r4, [sp, #184]	; 0xb8
 800a83c:	932d      	str	r3, [sp, #180]	; 0xb4
 800a83e:	2b07      	cmp	r3, #7
 800a840:	dd09      	ble.n	800a856 <_svfprintf_r+0x73a>
 800a842:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800a844:	980a      	ldr	r0, [sp, #40]	; 0x28
 800a846:	aa2c      	add	r2, sp, #176	; 0xb0
 800a848:	f001 ff8c 	bl	800c764 <__ssprint_r>
 800a84c:	2800      	cmp	r0, #0
 800a84e:	d001      	beq.n	800a854 <_svfprintf_r+0x738>
 800a850:	f000 fe43 	bl	800b4da <_svfprintf_r+0x13be>
 800a854:	af2f      	add	r7, sp, #188	; 0xbc
 800a856:	221b      	movs	r2, #27
 800a858:	a91e      	add	r1, sp, #120	; 0x78
 800a85a:	1852      	adds	r2, r2, r1
 800a85c:	7811      	ldrb	r1, [r2, #0]
 800a85e:	9b2e      	ldr	r3, [sp, #184]	; 0xb8
 800a860:	2900      	cmp	r1, #0
 800a862:	d014      	beq.n	800a88e <_svfprintf_r+0x772>
 800a864:	603a      	str	r2, [r7, #0]
 800a866:	2201      	movs	r2, #1
 800a868:	189b      	adds	r3, r3, r2
 800a86a:	932e      	str	r3, [sp, #184]	; 0xb8
 800a86c:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
 800a86e:	607a      	str	r2, [r7, #4]
 800a870:	189b      	adds	r3, r3, r2
 800a872:	932d      	str	r3, [sp, #180]	; 0xb4
 800a874:	3708      	adds	r7, #8
 800a876:	2b07      	cmp	r3, #7
 800a878:	dd09      	ble.n	800a88e <_svfprintf_r+0x772>
 800a87a:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800a87c:	980a      	ldr	r0, [sp, #40]	; 0x28
 800a87e:	aa2c      	add	r2, sp, #176	; 0xb0
 800a880:	f001 ff70 	bl	800c764 <__ssprint_r>
 800a884:	2800      	cmp	r0, #0
 800a886:	d001      	beq.n	800a88c <_svfprintf_r+0x770>
 800a888:	f000 fe27 	bl	800b4da <_svfprintf_r+0x13be>
 800a88c:	af2f      	add	r7, sp, #188	; 0xbc
 800a88e:	9a20      	ldr	r2, [sp, #128]	; 0x80
 800a890:	9b2e      	ldr	r3, [sp, #184]	; 0xb8
 800a892:	2a00      	cmp	r2, #0
 800a894:	d015      	beq.n	800a8c2 <_svfprintf_r+0x7a6>
 800a896:	aa25      	add	r2, sp, #148	; 0x94
 800a898:	603a      	str	r2, [r7, #0]
 800a89a:	2202      	movs	r2, #2
 800a89c:	189b      	adds	r3, r3, r2
 800a89e:	932e      	str	r3, [sp, #184]	; 0xb8
 800a8a0:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
 800a8a2:	607a      	str	r2, [r7, #4]
 800a8a4:	3301      	adds	r3, #1
 800a8a6:	932d      	str	r3, [sp, #180]	; 0xb4
 800a8a8:	3708      	adds	r7, #8
 800a8aa:	2b07      	cmp	r3, #7
 800a8ac:	dd09      	ble.n	800a8c2 <_svfprintf_r+0x7a6>
 800a8ae:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800a8b0:	980a      	ldr	r0, [sp, #40]	; 0x28
 800a8b2:	aa2c      	add	r2, sp, #176	; 0xb0
 800a8b4:	f001 ff56 	bl	800c764 <__ssprint_r>
 800a8b8:	2800      	cmp	r0, #0
 800a8ba:	d001      	beq.n	800a8c0 <_svfprintf_r+0x7a4>
 800a8bc:	f000 fe0d 	bl	800b4da <_svfprintf_r+0x13be>
 800a8c0:	af2f      	add	r7, sp, #188	; 0xbc
 800a8c2:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800a8c4:	2b80      	cmp	r3, #128	; 0x80
 800a8c6:	d11f      	bne.n	800a908 <_svfprintf_r+0x7ec>
 800a8c8:	9b18      	ldr	r3, [sp, #96]	; 0x60
 800a8ca:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 800a8cc:	1a9c      	subs	r4, r3, r2
 800a8ce:	2c00      	cmp	r4, #0
 800a8d0:	dd1a      	ble.n	800a908 <_svfprintf_r+0x7ec>
 800a8d2:	0039      	movs	r1, r7
 800a8d4:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
 800a8d6:	482d      	ldr	r0, [pc, #180]	; (800a98c <_svfprintf_r+0x870>)
 800a8d8:	9a2e      	ldr	r2, [sp, #184]	; 0xb8
 800a8da:	3301      	adds	r3, #1
 800a8dc:	3108      	adds	r1, #8
 800a8de:	6038      	str	r0, [r7, #0]
 800a8e0:	2c10      	cmp	r4, #16
 800a8e2:	dd00      	ble.n	800a8e6 <_svfprintf_r+0x7ca>
 800a8e4:	e2d6      	b.n	800ae94 <_svfprintf_r+0xd78>
 800a8e6:	607c      	str	r4, [r7, #4]
 800a8e8:	18a4      	adds	r4, r4, r2
 800a8ea:	000f      	movs	r7, r1
 800a8ec:	942e      	str	r4, [sp, #184]	; 0xb8
 800a8ee:	932d      	str	r3, [sp, #180]	; 0xb4
 800a8f0:	2b07      	cmp	r3, #7
 800a8f2:	dd09      	ble.n	800a908 <_svfprintf_r+0x7ec>
 800a8f4:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800a8f6:	980a      	ldr	r0, [sp, #40]	; 0x28
 800a8f8:	aa2c      	add	r2, sp, #176	; 0xb0
 800a8fa:	f001 ff33 	bl	800c764 <__ssprint_r>
 800a8fe:	2800      	cmp	r0, #0
 800a900:	d001      	beq.n	800a906 <_svfprintf_r+0x7ea>
 800a902:	f000 fdea 	bl	800b4da <_svfprintf_r+0x13be>
 800a906:	af2f      	add	r7, sp, #188	; 0xbc
 800a908:	9b19      	ldr	r3, [sp, #100]	; 0x64
 800a90a:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800a90c:	1a9c      	subs	r4, r3, r2
 800a90e:	2c00      	cmp	r4, #0
 800a910:	dd1a      	ble.n	800a948 <_svfprintf_r+0x82c>
 800a912:	0039      	movs	r1, r7
 800a914:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
 800a916:	481d      	ldr	r0, [pc, #116]	; (800a98c <_svfprintf_r+0x870>)
 800a918:	9a2e      	ldr	r2, [sp, #184]	; 0xb8
 800a91a:	3301      	adds	r3, #1
 800a91c:	3108      	adds	r1, #8
 800a91e:	6038      	str	r0, [r7, #0]
 800a920:	2c10      	cmp	r4, #16
 800a922:	dd00      	ble.n	800a926 <_svfprintf_r+0x80a>
 800a924:	e2c9      	b.n	800aeba <_svfprintf_r+0xd9e>
 800a926:	18a2      	adds	r2, r4, r2
 800a928:	607c      	str	r4, [r7, #4]
 800a92a:	922e      	str	r2, [sp, #184]	; 0xb8
 800a92c:	000f      	movs	r7, r1
 800a92e:	932d      	str	r3, [sp, #180]	; 0xb4
 800a930:	2b07      	cmp	r3, #7
 800a932:	dd09      	ble.n	800a948 <_svfprintf_r+0x82c>
 800a934:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800a936:	980a      	ldr	r0, [sp, #40]	; 0x28
 800a938:	aa2c      	add	r2, sp, #176	; 0xb0
 800a93a:	f001 ff13 	bl	800c764 <__ssprint_r>
 800a93e:	2800      	cmp	r0, #0
 800a940:	d001      	beq.n	800a946 <_svfprintf_r+0x82a>
 800a942:	f000 fdca 	bl	800b4da <_svfprintf_r+0x13be>
 800a946:	af2f      	add	r7, sp, #188	; 0xbc
 800a948:	9b2e      	ldr	r3, [sp, #184]	; 0xb8
 800a94a:	9319      	str	r3, [sp, #100]	; 0x64
 800a94c:	05f3      	lsls	r3, r6, #23
 800a94e:	d500      	bpl.n	800a952 <_svfprintf_r+0x836>
 800a950:	e2ce      	b.n	800aef0 <_svfprintf_r+0xdd4>
 800a952:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800a954:	9b08      	ldr	r3, [sp, #32]
 800a956:	4694      	mov	ip, r2
 800a958:	603b      	str	r3, [r7, #0]
 800a95a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a95c:	607b      	str	r3, [r7, #4]
 800a95e:	9b19      	ldr	r3, [sp, #100]	; 0x64
 800a960:	4463      	add	r3, ip
 800a962:	932e      	str	r3, [sp, #184]	; 0xb8
 800a964:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
 800a966:	3301      	adds	r3, #1
 800a968:	932d      	str	r3, [sp, #180]	; 0xb4
 800a96a:	2b07      	cmp	r3, #7
 800a96c:	dd00      	ble.n	800a970 <_svfprintf_r+0x854>
 800a96e:	e3a3      	b.n	800b0b8 <_svfprintf_r+0xf9c>
 800a970:	3708      	adds	r7, #8
 800a972:	e301      	b.n	800af78 <_svfprintf_r+0xe5c>
 800a974:	0800fb74 	.word	0x0800fb74
 800a978:	0800fb85 	.word	0x0800fb85
 800a97c:	40300000 	.word	0x40300000
 800a980:	3fe00000 	.word	0x3fe00000
 800a984:	fffffbff 	.word	0xfffffbff
 800a988:	0800fb98 	.word	0x0800fb98
 800a98c:	0800fba8 	.word	0x0800fba8
 800a990:	9b08      	ldr	r3, [sp, #32]
 800a992:	930c      	str	r3, [sp, #48]	; 0x30
 800a994:	e610      	b.n	800a5b8 <_svfprintf_r+0x49c>
 800a996:	2306      	movs	r3, #6
 800a998:	e5fd      	b.n	800a596 <_svfprintf_r+0x47a>
 800a99a:	930e      	str	r3, [sp, #56]	; 0x38
 800a99c:	2300      	movs	r3, #0
 800a99e:	e61a      	b.n	800a5d6 <_svfprintf_r+0x4ba>
 800a9a0:	7010      	strb	r0, [r2, #0]
 800a9a2:	e684      	b.n	800a6ae <_svfprintf_r+0x592>
 800a9a4:	7018      	strb	r0, [r3, #0]
 800a9a6:	3301      	adds	r3, #1
 800a9a8:	1aca      	subs	r2, r1, r3
 800a9aa:	d5fb      	bpl.n	800a9a4 <_svfprintf_r+0x888>
 800a9ac:	9a20      	ldr	r2, [sp, #128]	; 0x80
 800a9ae:	2300      	movs	r3, #0
 800a9b0:	3201      	adds	r2, #1
 800a9b2:	db01      	blt.n	800a9b8 <_svfprintf_r+0x89c>
 800a9b4:	9b20      	ldr	r3, [sp, #128]	; 0x80
 800a9b6:	3301      	adds	r3, #1
 800a9b8:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800a9ba:	18d3      	adds	r3, r2, r3
 800a9bc:	9323      	str	r3, [sp, #140]	; 0x8c
 800a9be:	e684      	b.n	800a6ca <_svfprintf_r+0x5ae>
 800a9c0:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800a9c2:	9920      	ldr	r1, [sp, #128]	; 0x80
 800a9c4:	2030      	movs	r0, #48	; 0x30
 800a9c6:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800a9c8:	1851      	adds	r1, r2, r1
 800a9ca:	e7ed      	b.n	800a9a8 <_svfprintf_r+0x88c>
 800a9cc:	9a10      	ldr	r2, [sp, #64]	; 0x40
 800a9ce:	2303      	movs	r3, #3
 800a9d0:	9c09      	ldr	r4, [sp, #36]	; 0x24
 800a9d2:	2a46      	cmp	r2, #70	; 0x46
 800a9d4:	d006      	beq.n	800a9e4 <_svfprintf_r+0x8c8>
 800a9d6:	0014      	movs	r4, r2
 800a9d8:	3c45      	subs	r4, #69	; 0x45
 800a9da:	4262      	negs	r2, r4
 800a9dc:	4154      	adcs	r4, r2
 800a9de:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800a9e0:	3b01      	subs	r3, #1
 800a9e2:	1914      	adds	r4, r2, r4
 800a9e4:	aa2a      	add	r2, sp, #168	; 0xa8
 800a9e6:	9204      	str	r2, [sp, #16]
 800a9e8:	aa27      	add	r2, sp, #156	; 0x9c
 800a9ea:	9203      	str	r2, [sp, #12]
 800a9ec:	aa26      	add	r2, sp, #152	; 0x98
 800a9ee:	9202      	str	r2, [sp, #8]
 800a9f0:	9300      	str	r3, [sp, #0]
 800a9f2:	002a      	movs	r2, r5
 800a9f4:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800a9f6:	980a      	ldr	r0, [sp, #40]	; 0x28
 800a9f8:	9401      	str	r4, [sp, #4]
 800a9fa:	f001 f8af 	bl	800bb5c <_dtoa_r>
 800a9fe:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800aa00:	9008      	str	r0, [sp, #32]
 800aa02:	2b47      	cmp	r3, #71	; 0x47
 800aa04:	d103      	bne.n	800aa0e <_svfprintf_r+0x8f2>
 800aa06:	07f3      	lsls	r3, r6, #31
 800aa08:	d401      	bmi.n	800aa0e <_svfprintf_r+0x8f2>
 800aa0a:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
 800aa0c:	e65e      	b.n	800a6cc <_svfprintf_r+0x5b0>
 800aa0e:	9b08      	ldr	r3, [sp, #32]
 800aa10:	191b      	adds	r3, r3, r4
 800aa12:	9311      	str	r3, [sp, #68]	; 0x44
 800aa14:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800aa16:	2b46      	cmp	r3, #70	; 0x46
 800aa18:	d112      	bne.n	800aa40 <_svfprintf_r+0x924>
 800aa1a:	9b08      	ldr	r3, [sp, #32]
 800aa1c:	781b      	ldrb	r3, [r3, #0]
 800aa1e:	2b30      	cmp	r3, #48	; 0x30
 800aa20:	d10a      	bne.n	800aa38 <_svfprintf_r+0x91c>
 800aa22:	2200      	movs	r2, #0
 800aa24:	2300      	movs	r3, #0
 800aa26:	0028      	movs	r0, r5
 800aa28:	990e      	ldr	r1, [sp, #56]	; 0x38
 800aa2a:	f7f5 fd0d 	bl	8000448 <__aeabi_dcmpeq>
 800aa2e:	2800      	cmp	r0, #0
 800aa30:	d102      	bne.n	800aa38 <_svfprintf_r+0x91c>
 800aa32:	2301      	movs	r3, #1
 800aa34:	1b1b      	subs	r3, r3, r4
 800aa36:	9326      	str	r3, [sp, #152]	; 0x98
 800aa38:	9a11      	ldr	r2, [sp, #68]	; 0x44
 800aa3a:	9b26      	ldr	r3, [sp, #152]	; 0x98
 800aa3c:	18d3      	adds	r3, r2, r3
 800aa3e:	9311      	str	r3, [sp, #68]	; 0x44
 800aa40:	2200      	movs	r2, #0
 800aa42:	2300      	movs	r3, #0
 800aa44:	0028      	movs	r0, r5
 800aa46:	990e      	ldr	r1, [sp, #56]	; 0x38
 800aa48:	f7f5 fcfe 	bl	8000448 <__aeabi_dcmpeq>
 800aa4c:	2800      	cmp	r0, #0
 800aa4e:	d001      	beq.n	800aa54 <_svfprintf_r+0x938>
 800aa50:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800aa52:	932a      	str	r3, [sp, #168]	; 0xa8
 800aa54:	2230      	movs	r2, #48	; 0x30
 800aa56:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
 800aa58:	9911      	ldr	r1, [sp, #68]	; 0x44
 800aa5a:	4299      	cmp	r1, r3
 800aa5c:	d9d5      	bls.n	800aa0a <_svfprintf_r+0x8ee>
 800aa5e:	1c59      	adds	r1, r3, #1
 800aa60:	912a      	str	r1, [sp, #168]	; 0xa8
 800aa62:	701a      	strb	r2, [r3, #0]
 800aa64:	e7f7      	b.n	800aa56 <_svfprintf_r+0x93a>
 800aa66:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800aa68:	2b46      	cmp	r3, #70	; 0x46
 800aa6a:	d000      	beq.n	800aa6e <_svfprintf_r+0x952>
 800aa6c:	e63f      	b.n	800a6ee <_svfprintf_r+0x5d2>
 800aa6e:	2201      	movs	r2, #1
 800aa70:	0033      	movs	r3, r6
 800aa72:	9909      	ldr	r1, [sp, #36]	; 0x24
 800aa74:	4013      	ands	r3, r2
 800aa76:	430b      	orrs	r3, r1
 800aa78:	2d00      	cmp	r5, #0
 800aa7a:	dd2c      	ble.n	800aad6 <_svfprintf_r+0x9ba>
 800aa7c:	2b00      	cmp	r3, #0
 800aa7e:	d046      	beq.n	800ab0e <_svfprintf_r+0x9f2>
 800aa80:	000a      	movs	r2, r1
 800aa82:	9b16      	ldr	r3, [sp, #88]	; 0x58
 800aa84:	18eb      	adds	r3, r5, r3
 800aa86:	18d3      	adds	r3, r2, r3
 800aa88:	9309      	str	r3, [sp, #36]	; 0x24
 800aa8a:	2366      	movs	r3, #102	; 0x66
 800aa8c:	930f      	str	r3, [sp, #60]	; 0x3c
 800aa8e:	e030      	b.n	800aaf2 <_svfprintf_r+0x9d6>
 800aa90:	781c      	ldrb	r4, [r3, #0]
 800aa92:	3301      	adds	r3, #1
 800aa94:	7014      	strb	r4, [r2, #0]
 800aa96:	3201      	adds	r2, #1
 800aa98:	e668      	b.n	800a76c <_svfprintf_r+0x650>
 800aa9a:	222a      	movs	r2, #42	; 0x2a
 800aa9c:	ab1e      	add	r3, sp, #120	; 0x78
 800aa9e:	18d2      	adds	r2, r2, r3
 800aaa0:	2800      	cmp	r0, #0
 800aaa2:	d104      	bne.n	800aaae <_svfprintf_r+0x992>
 800aaa4:	2330      	movs	r3, #48	; 0x30
 800aaa6:	222b      	movs	r2, #43	; 0x2b
 800aaa8:	708b      	strb	r3, [r1, #2]
 800aaaa:	ab1e      	add	r3, sp, #120	; 0x78
 800aaac:	18d2      	adds	r2, r2, r3
 800aaae:	3430      	adds	r4, #48	; 0x30
 800aab0:	1c53      	adds	r3, r2, #1
 800aab2:	7014      	strb	r4, [r2, #0]
 800aab4:	e669      	b.n	800a78a <_svfprintf_r+0x66e>
 800aab6:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800aab8:	42ab      	cmp	r3, r5
 800aaba:	dd12      	ble.n	800aae2 <_svfprintf_r+0x9c6>
 800aabc:	9a16      	ldr	r2, [sp, #88]	; 0x58
 800aabe:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800aac0:	4694      	mov	ip, r2
 800aac2:	4463      	add	r3, ip
 800aac4:	9309      	str	r3, [sp, #36]	; 0x24
 800aac6:	2367      	movs	r3, #103	; 0x67
 800aac8:	930f      	str	r3, [sp, #60]	; 0x3c
 800aaca:	2d00      	cmp	r5, #0
 800aacc:	dc11      	bgt.n	800aaf2 <_svfprintf_r+0x9d6>
 800aace:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800aad0:	1b5b      	subs	r3, r3, r5
 800aad2:	3301      	adds	r3, #1
 800aad4:	e00c      	b.n	800aaf0 <_svfprintf_r+0x9d4>
 800aad6:	2b00      	cmp	r3, #0
 800aad8:	d01b      	beq.n	800ab12 <_svfprintf_r+0x9f6>
 800aada:	9b16      	ldr	r3, [sp, #88]	; 0x58
 800aadc:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800aade:	3301      	adds	r3, #1
 800aae0:	e7d1      	b.n	800aa86 <_svfprintf_r+0x96a>
 800aae2:	2367      	movs	r3, #103	; 0x67
 800aae4:	9509      	str	r5, [sp, #36]	; 0x24
 800aae6:	930f      	str	r3, [sp, #60]	; 0x3c
 800aae8:	07f3      	lsls	r3, r6, #31
 800aaea:	d502      	bpl.n	800aaf2 <_svfprintf_r+0x9d6>
 800aaec:	9b16      	ldr	r3, [sp, #88]	; 0x58
 800aaee:	18eb      	adds	r3, r5, r3
 800aaf0:	9309      	str	r3, [sp, #36]	; 0x24
 800aaf2:	2380      	movs	r3, #128	; 0x80
 800aaf4:	0032      	movs	r2, r6
 800aaf6:	00db      	lsls	r3, r3, #3
 800aaf8:	401a      	ands	r2, r3
 800aafa:	9211      	str	r2, [sp, #68]	; 0x44
 800aafc:	2200      	movs	r2, #0
 800aafe:	9210      	str	r2, [sp, #64]	; 0x40
 800ab00:	421e      	tst	r6, r3
 800ab02:	d100      	bne.n	800ab06 <_svfprintf_r+0x9ea>
 800ab04:	e65d      	b.n	800a7c2 <_svfprintf_r+0x6a6>
 800ab06:	4295      	cmp	r5, r2
 800ab08:	dc25      	bgt.n	800ab56 <_svfprintf_r+0xa3a>
 800ab0a:	9211      	str	r2, [sp, #68]	; 0x44
 800ab0c:	e659      	b.n	800a7c2 <_svfprintf_r+0x6a6>
 800ab0e:	9509      	str	r5, [sp, #36]	; 0x24
 800ab10:	e7bb      	b.n	800aa8a <_svfprintf_r+0x96e>
 800ab12:	2366      	movs	r3, #102	; 0x66
 800ab14:	9209      	str	r2, [sp, #36]	; 0x24
 800ab16:	930f      	str	r3, [sp, #60]	; 0x3c
 800ab18:	e7eb      	b.n	800aaf2 <_svfprintf_r+0x9d6>
 800ab1a:	42ab      	cmp	r3, r5
 800ab1c:	da0e      	bge.n	800ab3c <_svfprintf_r+0xa20>
 800ab1e:	1aed      	subs	r5, r5, r3
 800ab20:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800ab22:	785b      	ldrb	r3, [r3, #1]
 800ab24:	2b00      	cmp	r3, #0
 800ab26:	d012      	beq.n	800ab4e <_svfprintf_r+0xa32>
 800ab28:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800ab2a:	3301      	adds	r3, #1
 800ab2c:	9311      	str	r3, [sp, #68]	; 0x44
 800ab2e:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800ab30:	3301      	adds	r3, #1
 800ab32:	9312      	str	r3, [sp, #72]	; 0x48
 800ab34:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800ab36:	781b      	ldrb	r3, [r3, #0]
 800ab38:	2bff      	cmp	r3, #255	; 0xff
 800ab3a:	d1ee      	bne.n	800ab1a <_svfprintf_r+0x9fe>
 800ab3c:	9a10      	ldr	r2, [sp, #64]	; 0x40
 800ab3e:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800ab40:	189b      	adds	r3, r3, r2
 800ab42:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
 800ab44:	4353      	muls	r3, r2
 800ab46:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800ab48:	189b      	adds	r3, r3, r2
 800ab4a:	9309      	str	r3, [sp, #36]	; 0x24
 800ab4c:	e639      	b.n	800a7c2 <_svfprintf_r+0x6a6>
 800ab4e:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800ab50:	3301      	adds	r3, #1
 800ab52:	9310      	str	r3, [sp, #64]	; 0x40
 800ab54:	e7ee      	b.n	800ab34 <_svfprintf_r+0xa18>
 800ab56:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800ab58:	9311      	str	r3, [sp, #68]	; 0x44
 800ab5a:	e7eb      	b.n	800ab34 <_svfprintf_r+0xa18>
 800ab5c:	1d23      	adds	r3, r4, #4
 800ab5e:	930d      	str	r3, [sp, #52]	; 0x34
 800ab60:	06b3      	lsls	r3, r6, #26
 800ab62:	d509      	bpl.n	800ab78 <_svfprintf_r+0xa5c>
 800ab64:	6823      	ldr	r3, [r4, #0]
 800ab66:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 800ab68:	601a      	str	r2, [r3, #0]
 800ab6a:	17d2      	asrs	r2, r2, #31
 800ab6c:	605a      	str	r2, [r3, #4]
 800ab6e:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800ab70:	9c0d      	ldr	r4, [sp, #52]	; 0x34
 800ab72:	9308      	str	r3, [sp, #32]
 800ab74:	f7ff fb0d 	bl	800a192 <_svfprintf_r+0x76>
 800ab78:	06f3      	lsls	r3, r6, #27
 800ab7a:	d503      	bpl.n	800ab84 <_svfprintf_r+0xa68>
 800ab7c:	6823      	ldr	r3, [r4, #0]
 800ab7e:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 800ab80:	601a      	str	r2, [r3, #0]
 800ab82:	e7f4      	b.n	800ab6e <_svfprintf_r+0xa52>
 800ab84:	0673      	lsls	r3, r6, #25
 800ab86:	d503      	bpl.n	800ab90 <_svfprintf_r+0xa74>
 800ab88:	6823      	ldr	r3, [r4, #0]
 800ab8a:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 800ab8c:	801a      	strh	r2, [r3, #0]
 800ab8e:	e7ee      	b.n	800ab6e <_svfprintf_r+0xa52>
 800ab90:	05b6      	lsls	r6, r6, #22
 800ab92:	d5f3      	bpl.n	800ab7c <_svfprintf_r+0xa60>
 800ab94:	6823      	ldr	r3, [r4, #0]
 800ab96:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 800ab98:	701a      	strb	r2, [r3, #0]
 800ab9a:	e7e8      	b.n	800ab6e <_svfprintf_r+0xa52>
 800ab9c:	2310      	movs	r3, #16
 800ab9e:	431e      	orrs	r6, r3
 800aba0:	2320      	movs	r3, #32
 800aba2:	0030      	movs	r0, r6
 800aba4:	4018      	ands	r0, r3
 800aba6:	421e      	tst	r6, r3
 800aba8:	d00f      	beq.n	800abca <_svfprintf_r+0xaae>
 800abaa:	3b19      	subs	r3, #25
 800abac:	3407      	adds	r4, #7
 800abae:	439c      	bics	r4, r3
 800abb0:	0022      	movs	r2, r4
 800abb2:	ca18      	ldmia	r2!, {r3, r4}
 800abb4:	9306      	str	r3, [sp, #24]
 800abb6:	9407      	str	r4, [sp, #28]
 800abb8:	920d      	str	r2, [sp, #52]	; 0x34
 800abba:	4bc9      	ldr	r3, [pc, #804]	; (800aee0 <_svfprintf_r+0xdc4>)
 800abbc:	401e      	ands	r6, r3
 800abbe:	2300      	movs	r3, #0
 800abc0:	221b      	movs	r2, #27
 800abc2:	a91e      	add	r1, sp, #120	; 0x78
 800abc4:	1852      	adds	r2, r2, r1
 800abc6:	2100      	movs	r1, #0
 800abc8:	e430      	b.n	800a42c <_svfprintf_r+0x310>
 800abca:	0022      	movs	r2, r4
 800abcc:	ca08      	ldmia	r2!, {r3}
 800abce:	0031      	movs	r1, r6
 800abd0:	920d      	str	r2, [sp, #52]	; 0x34
 800abd2:	2210      	movs	r2, #16
 800abd4:	4011      	ands	r1, r2
 800abd6:	4216      	tst	r6, r2
 800abd8:	d002      	beq.n	800abe0 <_svfprintf_r+0xac4>
 800abda:	9306      	str	r3, [sp, #24]
 800abdc:	9007      	str	r0, [sp, #28]
 800abde:	e7ec      	b.n	800abba <_svfprintf_r+0xa9e>
 800abe0:	2240      	movs	r2, #64	; 0x40
 800abe2:	0030      	movs	r0, r6
 800abe4:	4010      	ands	r0, r2
 800abe6:	4216      	tst	r6, r2
 800abe8:	d003      	beq.n	800abf2 <_svfprintf_r+0xad6>
 800abea:	b29b      	uxth	r3, r3
 800abec:	9306      	str	r3, [sp, #24]
 800abee:	9107      	str	r1, [sp, #28]
 800abf0:	e7e3      	b.n	800abba <_svfprintf_r+0xa9e>
 800abf2:	2280      	movs	r2, #128	; 0x80
 800abf4:	0031      	movs	r1, r6
 800abf6:	0092      	lsls	r2, r2, #2
 800abf8:	4011      	ands	r1, r2
 800abfa:	4216      	tst	r6, r2
 800abfc:	d0f6      	beq.n	800abec <_svfprintf_r+0xad0>
 800abfe:	b2db      	uxtb	r3, r3
 800ac00:	e7eb      	b.n	800abda <_svfprintf_r+0xabe>
 800ac02:	0023      	movs	r3, r4
 800ac04:	cb04      	ldmia	r3!, {r2}
 800ac06:	49b7      	ldr	r1, [pc, #732]	; (800aee4 <_svfprintf_r+0xdc8>)
 800ac08:	9206      	str	r2, [sp, #24]
 800ac0a:	aa25      	add	r2, sp, #148	; 0x94
 800ac0c:	8011      	strh	r1, [r2, #0]
 800ac0e:	4ab6      	ldr	r2, [pc, #728]	; (800aee8 <_svfprintf_r+0xdcc>)
 800ac10:	930d      	str	r3, [sp, #52]	; 0x34
 800ac12:	2300      	movs	r3, #0
 800ac14:	921f      	str	r2, [sp, #124]	; 0x7c
 800ac16:	2278      	movs	r2, #120	; 0x78
 800ac18:	9307      	str	r3, [sp, #28]
 800ac1a:	3302      	adds	r3, #2
 800ac1c:	431e      	orrs	r6, r3
 800ac1e:	920f      	str	r2, [sp, #60]	; 0x3c
 800ac20:	e7ce      	b.n	800abc0 <_svfprintf_r+0xaa4>
 800ac22:	0023      	movs	r3, r4
 800ac24:	cb04      	ldmia	r3!, {r2}
 800ac26:	2400      	movs	r4, #0
 800ac28:	930d      	str	r3, [sp, #52]	; 0x34
 800ac2a:	231b      	movs	r3, #27
 800ac2c:	9208      	str	r2, [sp, #32]
 800ac2e:	aa1e      	add	r2, sp, #120	; 0x78
 800ac30:	189b      	adds	r3, r3, r2
 800ac32:	701c      	strb	r4, [r3, #0]
 800ac34:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800ac36:	3301      	adds	r3, #1
 800ac38:	d00e      	beq.n	800ac58 <_svfprintf_r+0xb3c>
 800ac3a:	0021      	movs	r1, r4
 800ac3c:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800ac3e:	9808      	ldr	r0, [sp, #32]
 800ac40:	f000 fe13 	bl	800b86a <memchr>
 800ac44:	900c      	str	r0, [sp, #48]	; 0x30
 800ac46:	42a0      	cmp	r0, r4
 800ac48:	d100      	bne.n	800ac4c <_svfprintf_r+0xb30>
 800ac4a:	e10d      	b.n	800ae68 <_svfprintf_r+0xd4c>
 800ac4c:	9a08      	ldr	r2, [sp, #32]
 800ac4e:	1a83      	subs	r3, r0, r2
 800ac50:	9309      	str	r3, [sp, #36]	; 0x24
 800ac52:	0023      	movs	r3, r4
 800ac54:	940c      	str	r4, [sp, #48]	; 0x30
 800ac56:	e44e      	b.n	800a4f6 <_svfprintf_r+0x3da>
 800ac58:	9808      	ldr	r0, [sp, #32]
 800ac5a:	f7f5 fa53 	bl	8000104 <strlen>
 800ac5e:	9009      	str	r0, [sp, #36]	; 0x24
 800ac60:	e7f7      	b.n	800ac52 <_svfprintf_r+0xb36>
 800ac62:	2310      	movs	r3, #16
 800ac64:	431e      	orrs	r6, r3
 800ac66:	2320      	movs	r3, #32
 800ac68:	0030      	movs	r0, r6
 800ac6a:	4018      	ands	r0, r3
 800ac6c:	421e      	tst	r6, r3
 800ac6e:	d009      	beq.n	800ac84 <_svfprintf_r+0xb68>
 800ac70:	3b19      	subs	r3, #25
 800ac72:	3407      	adds	r4, #7
 800ac74:	439c      	bics	r4, r3
 800ac76:	0022      	movs	r2, r4
 800ac78:	ca18      	ldmia	r2!, {r3, r4}
 800ac7a:	9306      	str	r3, [sp, #24]
 800ac7c:	9407      	str	r4, [sp, #28]
 800ac7e:	920d      	str	r2, [sp, #52]	; 0x34
 800ac80:	2301      	movs	r3, #1
 800ac82:	e79d      	b.n	800abc0 <_svfprintf_r+0xaa4>
 800ac84:	0023      	movs	r3, r4
 800ac86:	cb04      	ldmia	r3!, {r2}
 800ac88:	0031      	movs	r1, r6
 800ac8a:	930d      	str	r3, [sp, #52]	; 0x34
 800ac8c:	2310      	movs	r3, #16
 800ac8e:	4019      	ands	r1, r3
 800ac90:	421e      	tst	r6, r3
 800ac92:	d003      	beq.n	800ac9c <_svfprintf_r+0xb80>
 800ac94:	9206      	str	r2, [sp, #24]
 800ac96:	9007      	str	r0, [sp, #28]
 800ac98:	3b0f      	subs	r3, #15
 800ac9a:	e791      	b.n	800abc0 <_svfprintf_r+0xaa4>
 800ac9c:	2340      	movs	r3, #64	; 0x40
 800ac9e:	0030      	movs	r0, r6
 800aca0:	4018      	ands	r0, r3
 800aca2:	421e      	tst	r6, r3
 800aca4:	d003      	beq.n	800acae <_svfprintf_r+0xb92>
 800aca6:	b293      	uxth	r3, r2
 800aca8:	9306      	str	r3, [sp, #24]
 800acaa:	9107      	str	r1, [sp, #28]
 800acac:	e7e8      	b.n	800ac80 <_svfprintf_r+0xb64>
 800acae:	2380      	movs	r3, #128	; 0x80
 800acb0:	0031      	movs	r1, r6
 800acb2:	009b      	lsls	r3, r3, #2
 800acb4:	4019      	ands	r1, r3
 800acb6:	421e      	tst	r6, r3
 800acb8:	d003      	beq.n	800acc2 <_svfprintf_r+0xba6>
 800acba:	b2d3      	uxtb	r3, r2
 800acbc:	9306      	str	r3, [sp, #24]
 800acbe:	9007      	str	r0, [sp, #28]
 800acc0:	e7de      	b.n	800ac80 <_svfprintf_r+0xb64>
 800acc2:	9206      	str	r2, [sp, #24]
 800acc4:	e7f1      	b.n	800acaa <_svfprintf_r+0xb8e>
 800acc6:	4b89      	ldr	r3, [pc, #548]	; (800aeec <_svfprintf_r+0xdd0>)
 800acc8:	0030      	movs	r0, r6
 800acca:	931f      	str	r3, [sp, #124]	; 0x7c
 800accc:	2320      	movs	r3, #32
 800acce:	4018      	ands	r0, r3
 800acd0:	421e      	tst	r6, r3
 800acd2:	d01a      	beq.n	800ad0a <_svfprintf_r+0xbee>
 800acd4:	3b19      	subs	r3, #25
 800acd6:	3407      	adds	r4, #7
 800acd8:	439c      	bics	r4, r3
 800acda:	0022      	movs	r2, r4
 800acdc:	ca18      	ldmia	r2!, {r3, r4}
 800acde:	9306      	str	r3, [sp, #24]
 800ace0:	9407      	str	r4, [sp, #28]
 800ace2:	920d      	str	r2, [sp, #52]	; 0x34
 800ace4:	07f3      	lsls	r3, r6, #31
 800ace6:	d50a      	bpl.n	800acfe <_svfprintf_r+0xbe2>
 800ace8:	9b06      	ldr	r3, [sp, #24]
 800acea:	9a07      	ldr	r2, [sp, #28]
 800acec:	4313      	orrs	r3, r2
 800acee:	d006      	beq.n	800acfe <_svfprintf_r+0xbe2>
 800acf0:	2230      	movs	r2, #48	; 0x30
 800acf2:	ab25      	add	r3, sp, #148	; 0x94
 800acf4:	701a      	strb	r2, [r3, #0]
 800acf6:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 800acf8:	705a      	strb	r2, [r3, #1]
 800acfa:	2302      	movs	r3, #2
 800acfc:	431e      	orrs	r6, r3
 800acfe:	4b78      	ldr	r3, [pc, #480]	; (800aee0 <_svfprintf_r+0xdc4>)
 800ad00:	401e      	ands	r6, r3
 800ad02:	2302      	movs	r3, #2
 800ad04:	e75c      	b.n	800abc0 <_svfprintf_r+0xaa4>
 800ad06:	4b78      	ldr	r3, [pc, #480]	; (800aee8 <_svfprintf_r+0xdcc>)
 800ad08:	e7de      	b.n	800acc8 <_svfprintf_r+0xbac>
 800ad0a:	0023      	movs	r3, r4
 800ad0c:	cb04      	ldmia	r3!, {r2}
 800ad0e:	0031      	movs	r1, r6
 800ad10:	930d      	str	r3, [sp, #52]	; 0x34
 800ad12:	2310      	movs	r3, #16
 800ad14:	4019      	ands	r1, r3
 800ad16:	421e      	tst	r6, r3
 800ad18:	d002      	beq.n	800ad20 <_svfprintf_r+0xc04>
 800ad1a:	9206      	str	r2, [sp, #24]
 800ad1c:	9007      	str	r0, [sp, #28]
 800ad1e:	e7e1      	b.n	800ace4 <_svfprintf_r+0xbc8>
 800ad20:	2340      	movs	r3, #64	; 0x40
 800ad22:	0030      	movs	r0, r6
 800ad24:	4018      	ands	r0, r3
 800ad26:	421e      	tst	r6, r3
 800ad28:	d003      	beq.n	800ad32 <_svfprintf_r+0xc16>
 800ad2a:	b293      	uxth	r3, r2
 800ad2c:	9306      	str	r3, [sp, #24]
 800ad2e:	9107      	str	r1, [sp, #28]
 800ad30:	e7d8      	b.n	800ace4 <_svfprintf_r+0xbc8>
 800ad32:	2380      	movs	r3, #128	; 0x80
 800ad34:	0031      	movs	r1, r6
 800ad36:	009b      	lsls	r3, r3, #2
 800ad38:	4019      	ands	r1, r3
 800ad3a:	421e      	tst	r6, r3
 800ad3c:	d002      	beq.n	800ad44 <_svfprintf_r+0xc28>
 800ad3e:	b2d3      	uxtb	r3, r2
 800ad40:	9306      	str	r3, [sp, #24]
 800ad42:	e7eb      	b.n	800ad1c <_svfprintf_r+0xc00>
 800ad44:	9206      	str	r2, [sp, #24]
 800ad46:	e7f2      	b.n	800ad2e <_svfprintf_r+0xc12>
 800ad48:	9b07      	ldr	r3, [sp, #28]
 800ad4a:	2b00      	cmp	r3, #0
 800ad4c:	d10a      	bne.n	800ad64 <_svfprintf_r+0xc48>
 800ad4e:	9b06      	ldr	r3, [sp, #24]
 800ad50:	2b09      	cmp	r3, #9
 800ad52:	d807      	bhi.n	800ad64 <_svfprintf_r+0xc48>
 800ad54:	23e7      	movs	r3, #231	; 0xe7
 800ad56:	aa1e      	add	r2, sp, #120	; 0x78
 800ad58:	189b      	adds	r3, r3, r2
 800ad5a:	9a06      	ldr	r2, [sp, #24]
 800ad5c:	3230      	adds	r2, #48	; 0x30
 800ad5e:	701a      	strb	r2, [r3, #0]
 800ad60:	f000 fc18 	bl	800b594 <_svfprintf_r+0x1478>
 800ad64:	2680      	movs	r6, #128	; 0x80
 800ad66:	2300      	movs	r3, #0
 800ad68:	00f6      	lsls	r6, r6, #3
 800ad6a:	930e      	str	r3, [sp, #56]	; 0x38
 800ad6c:	ad58      	add	r5, sp, #352	; 0x160
 800ad6e:	4026      	ands	r6, r4
 800ad70:	220a      	movs	r2, #10
 800ad72:	9806      	ldr	r0, [sp, #24]
 800ad74:	9907      	ldr	r1, [sp, #28]
 800ad76:	2300      	movs	r3, #0
 800ad78:	f7f5 fb94 	bl	80004a4 <__aeabi_uldivmod>
 800ad7c:	1e6b      	subs	r3, r5, #1
 800ad7e:	3230      	adds	r2, #48	; 0x30
 800ad80:	9308      	str	r3, [sp, #32]
 800ad82:	701a      	strb	r2, [r3, #0]
 800ad84:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800ad86:	900c      	str	r0, [sp, #48]	; 0x30
 800ad88:	3301      	adds	r3, #1
 800ad8a:	9110      	str	r1, [sp, #64]	; 0x40
 800ad8c:	930e      	str	r3, [sp, #56]	; 0x38
 800ad8e:	2e00      	cmp	r6, #0
 800ad90:	d01d      	beq.n	800adce <_svfprintf_r+0xcb2>
 800ad92:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800ad94:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800ad96:	781b      	ldrb	r3, [r3, #0]
 800ad98:	429a      	cmp	r2, r3
 800ad9a:	d118      	bne.n	800adce <_svfprintf_r+0xcb2>
 800ad9c:	2aff      	cmp	r2, #255	; 0xff
 800ad9e:	d016      	beq.n	800adce <_svfprintf_r+0xcb2>
 800ada0:	9b07      	ldr	r3, [sp, #28]
 800ada2:	2b00      	cmp	r3, #0
 800ada4:	d102      	bne.n	800adac <_svfprintf_r+0xc90>
 800ada6:	9b06      	ldr	r3, [sp, #24]
 800ada8:	2b09      	cmp	r3, #9
 800adaa:	d910      	bls.n	800adce <_svfprintf_r+0xcb2>
 800adac:	9b08      	ldr	r3, [sp, #32]
 800adae:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
 800adb0:	991d      	ldr	r1, [sp, #116]	; 0x74
 800adb2:	1a9b      	subs	r3, r3, r2
 800adb4:	0018      	movs	r0, r3
 800adb6:	9308      	str	r3, [sp, #32]
 800adb8:	f000 fd0e 	bl	800b7d8 <strncpy>
 800adbc:	2200      	movs	r2, #0
 800adbe:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800adc0:	920e      	str	r2, [sp, #56]	; 0x38
 800adc2:	785b      	ldrb	r3, [r3, #1]
 800adc4:	1e5a      	subs	r2, r3, #1
 800adc6:	4193      	sbcs	r3, r2
 800adc8:	9a12      	ldr	r2, [sp, #72]	; 0x48
 800adca:	18d3      	adds	r3, r2, r3
 800adcc:	9312      	str	r3, [sp, #72]	; 0x48
 800adce:	9b07      	ldr	r3, [sp, #28]
 800add0:	2b00      	cmp	r3, #0
 800add2:	d10f      	bne.n	800adf4 <_svfprintf_r+0xcd8>
 800add4:	9b06      	ldr	r3, [sp, #24]
 800add6:	2b09      	cmp	r3, #9
 800add8:	d80c      	bhi.n	800adf4 <_svfprintf_r+0xcd8>
 800adda:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800addc:	9a08      	ldr	r2, [sp, #32]
 800adde:	9319      	str	r3, [sp, #100]	; 0x64
 800ade0:	ab58      	add	r3, sp, #352	; 0x160
 800ade2:	1a9b      	subs	r3, r3, r2
 800ade4:	9309      	str	r3, [sp, #36]	; 0x24
 800ade6:	2300      	movs	r3, #0
 800ade8:	0026      	movs	r6, r4
 800adea:	930c      	str	r3, [sp, #48]	; 0x30
 800adec:	001d      	movs	r5, r3
 800adee:	9310      	str	r3, [sp, #64]	; 0x40
 800adf0:	9311      	str	r3, [sp, #68]	; 0x44
 800adf2:	e4f2      	b.n	800a7da <_svfprintf_r+0x6be>
 800adf4:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800adf6:	9d08      	ldr	r5, [sp, #32]
 800adf8:	9306      	str	r3, [sp, #24]
 800adfa:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800adfc:	9307      	str	r3, [sp, #28]
 800adfe:	e7b7      	b.n	800ad70 <_svfprintf_r+0xc54>
 800ae00:	200f      	movs	r0, #15
 800ae02:	ab58      	add	r3, sp, #352	; 0x160
 800ae04:	9308      	str	r3, [sp, #32]
 800ae06:	9b08      	ldr	r3, [sp, #32]
 800ae08:	9a1f      	ldr	r2, [sp, #124]	; 0x7c
 800ae0a:	3b01      	subs	r3, #1
 800ae0c:	9308      	str	r3, [sp, #32]
 800ae0e:	9b06      	ldr	r3, [sp, #24]
 800ae10:	4003      	ands	r3, r0
 800ae12:	5cd3      	ldrb	r3, [r2, r3]
 800ae14:	9a08      	ldr	r2, [sp, #32]
 800ae16:	7013      	strb	r3, [r2, #0]
 800ae18:	9b07      	ldr	r3, [sp, #28]
 800ae1a:	0719      	lsls	r1, r3, #28
 800ae1c:	9b06      	ldr	r3, [sp, #24]
 800ae1e:	091a      	lsrs	r2, r3, #4
 800ae20:	9b07      	ldr	r3, [sp, #28]
 800ae22:	4311      	orrs	r1, r2
 800ae24:	091b      	lsrs	r3, r3, #4
 800ae26:	9307      	str	r3, [sp, #28]
 800ae28:	000b      	movs	r3, r1
 800ae2a:	9a07      	ldr	r2, [sp, #28]
 800ae2c:	9106      	str	r1, [sp, #24]
 800ae2e:	4313      	orrs	r3, r2
 800ae30:	d1e9      	bne.n	800ae06 <_svfprintf_r+0xcea>
 800ae32:	e7d2      	b.n	800adda <_svfprintf_r+0xcbe>
 800ae34:	aa58      	add	r2, sp, #352	; 0x160
 800ae36:	9208      	str	r2, [sp, #32]
 800ae38:	2b00      	cmp	r3, #0
 800ae3a:	d1ce      	bne.n	800adda <_svfprintf_r+0xcbe>
 800ae3c:	07f6      	lsls	r6, r6, #31
 800ae3e:	d5cc      	bpl.n	800adda <_svfprintf_r+0xcbe>
 800ae40:	aa1e      	add	r2, sp, #120	; 0x78
 800ae42:	33e7      	adds	r3, #231	; 0xe7
 800ae44:	189b      	adds	r3, r3, r2
 800ae46:	2230      	movs	r2, #48	; 0x30
 800ae48:	e789      	b.n	800ad5e <_svfprintf_r+0xc42>
 800ae4a:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800ae4c:	2b00      	cmp	r3, #0
 800ae4e:	d100      	bne.n	800ae52 <_svfprintf_r+0xd36>
 800ae50:	e364      	b.n	800b51c <_svfprintf_r+0x1400>
 800ae52:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 800ae54:	211b      	movs	r1, #27
 800ae56:	ab3f      	add	r3, sp, #252	; 0xfc
 800ae58:	701a      	strb	r2, [r3, #0]
 800ae5a:	2200      	movs	r2, #0
 800ae5c:	a81e      	add	r0, sp, #120	; 0x78
 800ae5e:	1809      	adds	r1, r1, r0
 800ae60:	700a      	strb	r2, [r1, #0]
 800ae62:	940d      	str	r4, [sp, #52]	; 0x34
 800ae64:	f7ff fabd 	bl	800a3e2 <_svfprintf_r+0x2c6>
 800ae68:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800ae6a:	f7ff fb44 	bl	800a4f6 <_svfprintf_r+0x3da>
 800ae6e:	2010      	movs	r0, #16
 800ae70:	1812      	adds	r2, r2, r0
 800ae72:	6078      	str	r0, [r7, #4]
 800ae74:	922e      	str	r2, [sp, #184]	; 0xb8
 800ae76:	932d      	str	r3, [sp, #180]	; 0xb4
 800ae78:	2b07      	cmp	r3, #7
 800ae7a:	dd08      	ble.n	800ae8e <_svfprintf_r+0xd72>
 800ae7c:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800ae7e:	980a      	ldr	r0, [sp, #40]	; 0x28
 800ae80:	aa2c      	add	r2, sp, #176	; 0xb0
 800ae82:	f001 fc6f 	bl	800c764 <__ssprint_r>
 800ae86:	2800      	cmp	r0, #0
 800ae88:	d000      	beq.n	800ae8c <_svfprintf_r+0xd70>
 800ae8a:	e326      	b.n	800b4da <_svfprintf_r+0x13be>
 800ae8c:	a92f      	add	r1, sp, #188	; 0xbc
 800ae8e:	000f      	movs	r7, r1
 800ae90:	3c10      	subs	r4, #16
 800ae92:	e4c5      	b.n	800a820 <_svfprintf_r+0x704>
 800ae94:	2010      	movs	r0, #16
 800ae96:	1812      	adds	r2, r2, r0
 800ae98:	6078      	str	r0, [r7, #4]
 800ae9a:	922e      	str	r2, [sp, #184]	; 0xb8
 800ae9c:	932d      	str	r3, [sp, #180]	; 0xb4
 800ae9e:	2b07      	cmp	r3, #7
 800aea0:	dd08      	ble.n	800aeb4 <_svfprintf_r+0xd98>
 800aea2:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800aea4:	980a      	ldr	r0, [sp, #40]	; 0x28
 800aea6:	aa2c      	add	r2, sp, #176	; 0xb0
 800aea8:	f001 fc5c 	bl	800c764 <__ssprint_r>
 800aeac:	2800      	cmp	r0, #0
 800aeae:	d000      	beq.n	800aeb2 <_svfprintf_r+0xd96>
 800aeb0:	e313      	b.n	800b4da <_svfprintf_r+0x13be>
 800aeb2:	a92f      	add	r1, sp, #188	; 0xbc
 800aeb4:	000f      	movs	r7, r1
 800aeb6:	3c10      	subs	r4, #16
 800aeb8:	e50b      	b.n	800a8d2 <_svfprintf_r+0x7b6>
 800aeba:	2010      	movs	r0, #16
 800aebc:	1812      	adds	r2, r2, r0
 800aebe:	6078      	str	r0, [r7, #4]
 800aec0:	922e      	str	r2, [sp, #184]	; 0xb8
 800aec2:	932d      	str	r3, [sp, #180]	; 0xb4
 800aec4:	2b07      	cmp	r3, #7
 800aec6:	dd08      	ble.n	800aeda <_svfprintf_r+0xdbe>
 800aec8:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800aeca:	980a      	ldr	r0, [sp, #40]	; 0x28
 800aecc:	aa2c      	add	r2, sp, #176	; 0xb0
 800aece:	f001 fc49 	bl	800c764 <__ssprint_r>
 800aed2:	2800      	cmp	r0, #0
 800aed4:	d000      	beq.n	800aed8 <_svfprintf_r+0xdbc>
 800aed6:	e300      	b.n	800b4da <_svfprintf_r+0x13be>
 800aed8:	a92f      	add	r1, sp, #188	; 0xbc
 800aeda:	000f      	movs	r7, r1
 800aedc:	3c10      	subs	r4, #16
 800aede:	e518      	b.n	800a912 <_svfprintf_r+0x7f6>
 800aee0:	fffffbff 	.word	0xfffffbff
 800aee4:	00007830 	.word	0x00007830
 800aee8:	0800fb74 	.word	0x0800fb74
 800aeec:	0800fb85 	.word	0x0800fb85
 800aef0:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800aef2:	2b65      	cmp	r3, #101	; 0x65
 800aef4:	dc00      	bgt.n	800aef8 <_svfprintf_r+0xddc>
 800aef6:	e241      	b.n	800b37c <_svfprintf_r+0x1260>
 800aef8:	9814      	ldr	r0, [sp, #80]	; 0x50
 800aefa:	9915      	ldr	r1, [sp, #84]	; 0x54
 800aefc:	2200      	movs	r2, #0
 800aefe:	2300      	movs	r3, #0
 800af00:	f7f5 faa2 	bl	8000448 <__aeabi_dcmpeq>
 800af04:	2800      	cmp	r0, #0
 800af06:	d077      	beq.n	800aff8 <_svfprintf_r+0xedc>
 800af08:	4bca      	ldr	r3, [pc, #808]	; (800b234 <_svfprintf_r+0x1118>)
 800af0a:	603b      	str	r3, [r7, #0]
 800af0c:	2301      	movs	r3, #1
 800af0e:	607b      	str	r3, [r7, #4]
 800af10:	9b19      	ldr	r3, [sp, #100]	; 0x64
 800af12:	3708      	adds	r7, #8
 800af14:	3301      	adds	r3, #1
 800af16:	932e      	str	r3, [sp, #184]	; 0xb8
 800af18:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
 800af1a:	3301      	adds	r3, #1
 800af1c:	932d      	str	r3, [sp, #180]	; 0xb4
 800af1e:	2b07      	cmp	r3, #7
 800af20:	dd08      	ble.n	800af34 <_svfprintf_r+0xe18>
 800af22:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800af24:	980a      	ldr	r0, [sp, #40]	; 0x28
 800af26:	aa2c      	add	r2, sp, #176	; 0xb0
 800af28:	f001 fc1c 	bl	800c764 <__ssprint_r>
 800af2c:	2800      	cmp	r0, #0
 800af2e:	d000      	beq.n	800af32 <_svfprintf_r+0xe16>
 800af30:	e2d3      	b.n	800b4da <_svfprintf_r+0x13be>
 800af32:	af2f      	add	r7, sp, #188	; 0xbc
 800af34:	9b26      	ldr	r3, [sp, #152]	; 0x98
 800af36:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800af38:	4293      	cmp	r3, r2
 800af3a:	db01      	blt.n	800af40 <_svfprintf_r+0xe24>
 800af3c:	07f3      	lsls	r3, r6, #31
 800af3e:	d51b      	bpl.n	800af78 <_svfprintf_r+0xe5c>
 800af40:	9b1c      	ldr	r3, [sp, #112]	; 0x70
 800af42:	9a16      	ldr	r2, [sp, #88]	; 0x58
 800af44:	603b      	str	r3, [r7, #0]
 800af46:	9b16      	ldr	r3, [sp, #88]	; 0x58
 800af48:	607b      	str	r3, [r7, #4]
 800af4a:	9b2e      	ldr	r3, [sp, #184]	; 0xb8
 800af4c:	3708      	adds	r7, #8
 800af4e:	189b      	adds	r3, r3, r2
 800af50:	932e      	str	r3, [sp, #184]	; 0xb8
 800af52:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
 800af54:	3301      	adds	r3, #1
 800af56:	932d      	str	r3, [sp, #180]	; 0xb4
 800af58:	2b07      	cmp	r3, #7
 800af5a:	dd08      	ble.n	800af6e <_svfprintf_r+0xe52>
 800af5c:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800af5e:	980a      	ldr	r0, [sp, #40]	; 0x28
 800af60:	aa2c      	add	r2, sp, #176	; 0xb0
 800af62:	f001 fbff 	bl	800c764 <__ssprint_r>
 800af66:	2800      	cmp	r0, #0
 800af68:	d000      	beq.n	800af6c <_svfprintf_r+0xe50>
 800af6a:	e2b6      	b.n	800b4da <_svfprintf_r+0x13be>
 800af6c:	af2f      	add	r7, sp, #188	; 0xbc
 800af6e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800af70:	2510      	movs	r5, #16
 800af72:	1e5c      	subs	r4, r3, #1
 800af74:	2c00      	cmp	r4, #0
 800af76:	dc2e      	bgt.n	800afd6 <_svfprintf_r+0xeba>
 800af78:	0776      	lsls	r6, r6, #29
 800af7a:	d500      	bpl.n	800af7e <_svfprintf_r+0xe62>
 800af7c:	e290      	b.n	800b4a0 <_svfprintf_r+0x1384>
 800af7e:	9b18      	ldr	r3, [sp, #96]	; 0x60
 800af80:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 800af82:	4293      	cmp	r3, r2
 800af84:	da00      	bge.n	800af88 <_svfprintf_r+0xe6c>
 800af86:	0013      	movs	r3, r2
 800af88:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 800af8a:	18d3      	adds	r3, r2, r3
 800af8c:	9317      	str	r3, [sp, #92]	; 0x5c
 800af8e:	9b2e      	ldr	r3, [sp, #184]	; 0xb8
 800af90:	2b00      	cmp	r3, #0
 800af92:	d007      	beq.n	800afa4 <_svfprintf_r+0xe88>
 800af94:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800af96:	980a      	ldr	r0, [sp, #40]	; 0x28
 800af98:	aa2c      	add	r2, sp, #176	; 0xb0
 800af9a:	f001 fbe3 	bl	800c764 <__ssprint_r>
 800af9e:	2800      	cmp	r0, #0
 800afa0:	d000      	beq.n	800afa4 <_svfprintf_r+0xe88>
 800afa2:	e29a      	b.n	800b4da <_svfprintf_r+0x13be>
 800afa4:	2300      	movs	r3, #0
 800afa6:	932d      	str	r3, [sp, #180]	; 0xb4
 800afa8:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800afaa:	2b00      	cmp	r3, #0
 800afac:	d000      	beq.n	800afb0 <_svfprintf_r+0xe94>
 800afae:	e2b0      	b.n	800b512 <_svfprintf_r+0x13f6>
 800afb0:	af2f      	add	r7, sp, #188	; 0xbc
 800afb2:	e5dc      	b.n	800ab6e <_svfprintf_r+0xa52>
 800afb4:	3210      	adds	r2, #16
 800afb6:	607d      	str	r5, [r7, #4]
 800afb8:	922e      	str	r2, [sp, #184]	; 0xb8
 800afba:	932d      	str	r3, [sp, #180]	; 0xb4
 800afbc:	2b07      	cmp	r3, #7
 800afbe:	dd08      	ble.n	800afd2 <_svfprintf_r+0xeb6>
 800afc0:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800afc2:	980a      	ldr	r0, [sp, #40]	; 0x28
 800afc4:	aa2c      	add	r2, sp, #176	; 0xb0
 800afc6:	f001 fbcd 	bl	800c764 <__ssprint_r>
 800afca:	2800      	cmp	r0, #0
 800afcc:	d000      	beq.n	800afd0 <_svfprintf_r+0xeb4>
 800afce:	e284      	b.n	800b4da <_svfprintf_r+0x13be>
 800afd0:	a92f      	add	r1, sp, #188	; 0xbc
 800afd2:	000f      	movs	r7, r1
 800afd4:	3c10      	subs	r4, #16
 800afd6:	0039      	movs	r1, r7
 800afd8:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
 800afda:	4897      	ldr	r0, [pc, #604]	; (800b238 <_svfprintf_r+0x111c>)
 800afdc:	9a2e      	ldr	r2, [sp, #184]	; 0xb8
 800afde:	3301      	adds	r3, #1
 800afe0:	3108      	adds	r1, #8
 800afe2:	6038      	str	r0, [r7, #0]
 800afe4:	2c10      	cmp	r4, #16
 800afe6:	dce5      	bgt.n	800afb4 <_svfprintf_r+0xe98>
 800afe8:	607c      	str	r4, [r7, #4]
 800afea:	18a4      	adds	r4, r4, r2
 800afec:	942e      	str	r4, [sp, #184]	; 0xb8
 800afee:	000f      	movs	r7, r1
 800aff0:	932d      	str	r3, [sp, #180]	; 0xb4
 800aff2:	2b07      	cmp	r3, #7
 800aff4:	ddc0      	ble.n	800af78 <_svfprintf_r+0xe5c>
 800aff6:	e05f      	b.n	800b0b8 <_svfprintf_r+0xf9c>
 800aff8:	9b26      	ldr	r3, [sp, #152]	; 0x98
 800affa:	2b00      	cmp	r3, #0
 800affc:	dc78      	bgt.n	800b0f0 <_svfprintf_r+0xfd4>
 800affe:	4b8d      	ldr	r3, [pc, #564]	; (800b234 <_svfprintf_r+0x1118>)
 800b000:	603b      	str	r3, [r7, #0]
 800b002:	2301      	movs	r3, #1
 800b004:	607b      	str	r3, [r7, #4]
 800b006:	9b19      	ldr	r3, [sp, #100]	; 0x64
 800b008:	3708      	adds	r7, #8
 800b00a:	3301      	adds	r3, #1
 800b00c:	932e      	str	r3, [sp, #184]	; 0xb8
 800b00e:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
 800b010:	3301      	adds	r3, #1
 800b012:	932d      	str	r3, [sp, #180]	; 0xb4
 800b014:	2b07      	cmp	r3, #7
 800b016:	dd08      	ble.n	800b02a <_svfprintf_r+0xf0e>
 800b018:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800b01a:	980a      	ldr	r0, [sp, #40]	; 0x28
 800b01c:	aa2c      	add	r2, sp, #176	; 0xb0
 800b01e:	f001 fba1 	bl	800c764 <__ssprint_r>
 800b022:	2800      	cmp	r0, #0
 800b024:	d000      	beq.n	800b028 <_svfprintf_r+0xf0c>
 800b026:	e258      	b.n	800b4da <_svfprintf_r+0x13be>
 800b028:	af2f      	add	r7, sp, #188	; 0xbc
 800b02a:	990e      	ldr	r1, [sp, #56]	; 0x38
 800b02c:	9b26      	ldr	r3, [sp, #152]	; 0x98
 800b02e:	9a2e      	ldr	r2, [sp, #184]	; 0xb8
 800b030:	430b      	orrs	r3, r1
 800b032:	2101      	movs	r1, #1
 800b034:	4031      	ands	r1, r6
 800b036:	430b      	orrs	r3, r1
 800b038:	d09e      	beq.n	800af78 <_svfprintf_r+0xe5c>
 800b03a:	9b1c      	ldr	r3, [sp, #112]	; 0x70
 800b03c:	603b      	str	r3, [r7, #0]
 800b03e:	9b16      	ldr	r3, [sp, #88]	; 0x58
 800b040:	607b      	str	r3, [r7, #4]
 800b042:	189a      	adds	r2, r3, r2
 800b044:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
 800b046:	922e      	str	r2, [sp, #184]	; 0xb8
 800b048:	3301      	adds	r3, #1
 800b04a:	932d      	str	r3, [sp, #180]	; 0xb4
 800b04c:	3708      	adds	r7, #8
 800b04e:	2b07      	cmp	r3, #7
 800b050:	dd08      	ble.n	800b064 <_svfprintf_r+0xf48>
 800b052:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800b054:	980a      	ldr	r0, [sp, #40]	; 0x28
 800b056:	aa2c      	add	r2, sp, #176	; 0xb0
 800b058:	f001 fb84 	bl	800c764 <__ssprint_r>
 800b05c:	2800      	cmp	r0, #0
 800b05e:	d000      	beq.n	800b062 <_svfprintf_r+0xf46>
 800b060:	e23b      	b.n	800b4da <_svfprintf_r+0x13be>
 800b062:	af2f      	add	r7, sp, #188	; 0xbc
 800b064:	9c26      	ldr	r4, [sp, #152]	; 0x98
 800b066:	2c00      	cmp	r4, #0
 800b068:	da19      	bge.n	800b09e <_svfprintf_r+0xf82>
 800b06a:	0038      	movs	r0, r7
 800b06c:	2510      	movs	r5, #16
 800b06e:	4264      	negs	r4, r4
 800b070:	992d      	ldr	r1, [sp, #180]	; 0xb4
 800b072:	4a71      	ldr	r2, [pc, #452]	; (800b238 <_svfprintf_r+0x111c>)
 800b074:	9b2e      	ldr	r3, [sp, #184]	; 0xb8
 800b076:	3101      	adds	r1, #1
 800b078:	3708      	adds	r7, #8
 800b07a:	6002      	str	r2, [r0, #0]
 800b07c:	2c10      	cmp	r4, #16
 800b07e:	dc25      	bgt.n	800b0cc <_svfprintf_r+0xfb0>
 800b080:	6044      	str	r4, [r0, #4]
 800b082:	18e4      	adds	r4, r4, r3
 800b084:	942e      	str	r4, [sp, #184]	; 0xb8
 800b086:	912d      	str	r1, [sp, #180]	; 0xb4
 800b088:	2907      	cmp	r1, #7
 800b08a:	dd08      	ble.n	800b09e <_svfprintf_r+0xf82>
 800b08c:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800b08e:	980a      	ldr	r0, [sp, #40]	; 0x28
 800b090:	aa2c      	add	r2, sp, #176	; 0xb0
 800b092:	f001 fb67 	bl	800c764 <__ssprint_r>
 800b096:	2800      	cmp	r0, #0
 800b098:	d000      	beq.n	800b09c <_svfprintf_r+0xf80>
 800b09a:	e21e      	b.n	800b4da <_svfprintf_r+0x13be>
 800b09c:	af2f      	add	r7, sp, #188	; 0xbc
 800b09e:	9b08      	ldr	r3, [sp, #32]
 800b0a0:	9a2e      	ldr	r2, [sp, #184]	; 0xb8
 800b0a2:	603b      	str	r3, [r7, #0]
 800b0a4:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800b0a6:	18d2      	adds	r2, r2, r3
 800b0a8:	922e      	str	r2, [sp, #184]	; 0xb8
 800b0aa:	9a2d      	ldr	r2, [sp, #180]	; 0xb4
 800b0ac:	607b      	str	r3, [r7, #4]
 800b0ae:	3201      	adds	r2, #1
 800b0b0:	922d      	str	r2, [sp, #180]	; 0xb4
 800b0b2:	2a07      	cmp	r2, #7
 800b0b4:	dc00      	bgt.n	800b0b8 <_svfprintf_r+0xf9c>
 800b0b6:	e45b      	b.n	800a970 <_svfprintf_r+0x854>
 800b0b8:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800b0ba:	980a      	ldr	r0, [sp, #40]	; 0x28
 800b0bc:	aa2c      	add	r2, sp, #176	; 0xb0
 800b0be:	f001 fb51 	bl	800c764 <__ssprint_r>
 800b0c2:	2800      	cmp	r0, #0
 800b0c4:	d000      	beq.n	800b0c8 <_svfprintf_r+0xfac>
 800b0c6:	e208      	b.n	800b4da <_svfprintf_r+0x13be>
 800b0c8:	af2f      	add	r7, sp, #188	; 0xbc
 800b0ca:	e755      	b.n	800af78 <_svfprintf_r+0xe5c>
 800b0cc:	3310      	adds	r3, #16
 800b0ce:	6045      	str	r5, [r0, #4]
 800b0d0:	932e      	str	r3, [sp, #184]	; 0xb8
 800b0d2:	912d      	str	r1, [sp, #180]	; 0xb4
 800b0d4:	2907      	cmp	r1, #7
 800b0d6:	dd08      	ble.n	800b0ea <_svfprintf_r+0xfce>
 800b0d8:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800b0da:	980a      	ldr	r0, [sp, #40]	; 0x28
 800b0dc:	aa2c      	add	r2, sp, #176	; 0xb0
 800b0de:	f001 fb41 	bl	800c764 <__ssprint_r>
 800b0e2:	2800      	cmp	r0, #0
 800b0e4:	d000      	beq.n	800b0e8 <_svfprintf_r+0xfcc>
 800b0e6:	e1f8      	b.n	800b4da <_svfprintf_r+0x13be>
 800b0e8:	af2f      	add	r7, sp, #188	; 0xbc
 800b0ea:	0038      	movs	r0, r7
 800b0ec:	3c10      	subs	r4, #16
 800b0ee:	e7bf      	b.n	800b070 <_svfprintf_r+0xf54>
 800b0f0:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800b0f2:	002c      	movs	r4, r5
 800b0f4:	429d      	cmp	r5, r3
 800b0f6:	dd00      	ble.n	800b0fa <_svfprintf_r+0xfde>
 800b0f8:	001c      	movs	r4, r3
 800b0fa:	2c00      	cmp	r4, #0
 800b0fc:	dd14      	ble.n	800b128 <_svfprintf_r+0x100c>
 800b0fe:	9b08      	ldr	r3, [sp, #32]
 800b100:	607c      	str	r4, [r7, #4]
 800b102:	603b      	str	r3, [r7, #0]
 800b104:	9b19      	ldr	r3, [sp, #100]	; 0x64
 800b106:	3708      	adds	r7, #8
 800b108:	18e3      	adds	r3, r4, r3
 800b10a:	932e      	str	r3, [sp, #184]	; 0xb8
 800b10c:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
 800b10e:	3301      	adds	r3, #1
 800b110:	932d      	str	r3, [sp, #180]	; 0xb4
 800b112:	2b07      	cmp	r3, #7
 800b114:	dd08      	ble.n	800b128 <_svfprintf_r+0x100c>
 800b116:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800b118:	980a      	ldr	r0, [sp, #40]	; 0x28
 800b11a:	aa2c      	add	r2, sp, #176	; 0xb0
 800b11c:	f001 fb22 	bl	800c764 <__ssprint_r>
 800b120:	2800      	cmp	r0, #0
 800b122:	d000      	beq.n	800b126 <_svfprintf_r+0x100a>
 800b124:	e1d9      	b.n	800b4da <_svfprintf_r+0x13be>
 800b126:	af2f      	add	r7, sp, #188	; 0xbc
 800b128:	43e3      	mvns	r3, r4
 800b12a:	17db      	asrs	r3, r3, #31
 800b12c:	401c      	ands	r4, r3
 800b12e:	1b2c      	subs	r4, r5, r4
 800b130:	2c00      	cmp	r4, #0
 800b132:	dd18      	ble.n	800b166 <_svfprintf_r+0x104a>
 800b134:	0039      	movs	r1, r7
 800b136:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
 800b138:	483f      	ldr	r0, [pc, #252]	; (800b238 <_svfprintf_r+0x111c>)
 800b13a:	9a2e      	ldr	r2, [sp, #184]	; 0xb8
 800b13c:	3301      	adds	r3, #1
 800b13e:	3108      	adds	r1, #8
 800b140:	6038      	str	r0, [r7, #0]
 800b142:	2c10      	cmp	r4, #16
 800b144:	dc7a      	bgt.n	800b23c <_svfprintf_r+0x1120>
 800b146:	607c      	str	r4, [r7, #4]
 800b148:	18a4      	adds	r4, r4, r2
 800b14a:	000f      	movs	r7, r1
 800b14c:	942e      	str	r4, [sp, #184]	; 0xb8
 800b14e:	932d      	str	r3, [sp, #180]	; 0xb4
 800b150:	2b07      	cmp	r3, #7
 800b152:	dd08      	ble.n	800b166 <_svfprintf_r+0x104a>
 800b154:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800b156:	980a      	ldr	r0, [sp, #40]	; 0x28
 800b158:	aa2c      	add	r2, sp, #176	; 0xb0
 800b15a:	f001 fb03 	bl	800c764 <__ssprint_r>
 800b15e:	2800      	cmp	r0, #0
 800b160:	d000      	beq.n	800b164 <_svfprintf_r+0x1048>
 800b162:	e1ba      	b.n	800b4da <_svfprintf_r+0x13be>
 800b164:	af2f      	add	r7, sp, #188	; 0xbc
 800b166:	9b08      	ldr	r3, [sp, #32]
 800b168:	195d      	adds	r5, r3, r5
 800b16a:	0573      	lsls	r3, r6, #21
 800b16c:	d50b      	bpl.n	800b186 <_svfprintf_r+0x106a>
 800b16e:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800b170:	2b00      	cmp	r3, #0
 800b172:	d176      	bne.n	800b262 <_svfprintf_r+0x1146>
 800b174:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800b176:	2b00      	cmp	r3, #0
 800b178:	d176      	bne.n	800b268 <_svfprintf_r+0x114c>
 800b17a:	9b08      	ldr	r3, [sp, #32]
 800b17c:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800b17e:	189b      	adds	r3, r3, r2
 800b180:	429d      	cmp	r5, r3
 800b182:	d900      	bls.n	800b186 <_svfprintf_r+0x106a>
 800b184:	001d      	movs	r5, r3
 800b186:	9b26      	ldr	r3, [sp, #152]	; 0x98
 800b188:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800b18a:	4293      	cmp	r3, r2
 800b18c:	db01      	blt.n	800b192 <_svfprintf_r+0x1076>
 800b18e:	07f3      	lsls	r3, r6, #31
 800b190:	d516      	bpl.n	800b1c0 <_svfprintf_r+0x10a4>
 800b192:	9b1c      	ldr	r3, [sp, #112]	; 0x70
 800b194:	9a16      	ldr	r2, [sp, #88]	; 0x58
 800b196:	603b      	str	r3, [r7, #0]
 800b198:	9b16      	ldr	r3, [sp, #88]	; 0x58
 800b19a:	607b      	str	r3, [r7, #4]
 800b19c:	9b2e      	ldr	r3, [sp, #184]	; 0xb8
 800b19e:	3708      	adds	r7, #8
 800b1a0:	189b      	adds	r3, r3, r2
 800b1a2:	932e      	str	r3, [sp, #184]	; 0xb8
 800b1a4:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
 800b1a6:	3301      	adds	r3, #1
 800b1a8:	932d      	str	r3, [sp, #180]	; 0xb4
 800b1aa:	2b07      	cmp	r3, #7
 800b1ac:	dd08      	ble.n	800b1c0 <_svfprintf_r+0x10a4>
 800b1ae:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800b1b0:	980a      	ldr	r0, [sp, #40]	; 0x28
 800b1b2:	aa2c      	add	r2, sp, #176	; 0xb0
 800b1b4:	f001 fad6 	bl	800c764 <__ssprint_r>
 800b1b8:	2800      	cmp	r0, #0
 800b1ba:	d000      	beq.n	800b1be <_svfprintf_r+0x10a2>
 800b1bc:	e18d      	b.n	800b4da <_svfprintf_r+0x13be>
 800b1be:	af2f      	add	r7, sp, #188	; 0xbc
 800b1c0:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800b1c2:	9b08      	ldr	r3, [sp, #32]
 800b1c4:	4694      	mov	ip, r2
 800b1c6:	9c26      	ldr	r4, [sp, #152]	; 0x98
 800b1c8:	4463      	add	r3, ip
 800b1ca:	1b5b      	subs	r3, r3, r5
 800b1cc:	1b14      	subs	r4, r2, r4
 800b1ce:	429c      	cmp	r4, r3
 800b1d0:	dd00      	ble.n	800b1d4 <_svfprintf_r+0x10b8>
 800b1d2:	001c      	movs	r4, r3
 800b1d4:	9b2e      	ldr	r3, [sp, #184]	; 0xb8
 800b1d6:	2c00      	cmp	r4, #0
 800b1d8:	dd12      	ble.n	800b200 <_svfprintf_r+0x10e4>
 800b1da:	18e3      	adds	r3, r4, r3
 800b1dc:	932e      	str	r3, [sp, #184]	; 0xb8
 800b1de:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
 800b1e0:	603d      	str	r5, [r7, #0]
 800b1e2:	3301      	adds	r3, #1
 800b1e4:	607c      	str	r4, [r7, #4]
 800b1e6:	932d      	str	r3, [sp, #180]	; 0xb4
 800b1e8:	3708      	adds	r7, #8
 800b1ea:	2b07      	cmp	r3, #7
 800b1ec:	dd08      	ble.n	800b200 <_svfprintf_r+0x10e4>
 800b1ee:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800b1f0:	980a      	ldr	r0, [sp, #40]	; 0x28
 800b1f2:	aa2c      	add	r2, sp, #176	; 0xb0
 800b1f4:	f001 fab6 	bl	800c764 <__ssprint_r>
 800b1f8:	2800      	cmp	r0, #0
 800b1fa:	d000      	beq.n	800b1fe <_svfprintf_r+0x10e2>
 800b1fc:	e16d      	b.n	800b4da <_svfprintf_r+0x13be>
 800b1fe:	af2f      	add	r7, sp, #188	; 0xbc
 800b200:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800b202:	9b26      	ldr	r3, [sp, #152]	; 0x98
 800b204:	2510      	movs	r5, #16
 800b206:	1ad3      	subs	r3, r2, r3
 800b208:	43e2      	mvns	r2, r4
 800b20a:	17d2      	asrs	r2, r2, #31
 800b20c:	4014      	ands	r4, r2
 800b20e:	1b1c      	subs	r4, r3, r4
 800b210:	2c00      	cmp	r4, #0
 800b212:	dc00      	bgt.n	800b216 <_svfprintf_r+0x10fa>
 800b214:	e6b0      	b.n	800af78 <_svfprintf_r+0xe5c>
 800b216:	0039      	movs	r1, r7
 800b218:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
 800b21a:	4807      	ldr	r0, [pc, #28]	; (800b238 <_svfprintf_r+0x111c>)
 800b21c:	9a2e      	ldr	r2, [sp, #184]	; 0xb8
 800b21e:	3301      	adds	r3, #1
 800b220:	3108      	adds	r1, #8
 800b222:	6038      	str	r0, [r7, #0]
 800b224:	2c10      	cmp	r4, #16
 800b226:	dd00      	ble.n	800b22a <_svfprintf_r+0x110e>
 800b228:	e096      	b.n	800b358 <_svfprintf_r+0x123c>
 800b22a:	1912      	adds	r2, r2, r4
 800b22c:	607c      	str	r4, [r7, #4]
 800b22e:	922e      	str	r2, [sp, #184]	; 0xb8
 800b230:	e6dd      	b.n	800afee <_svfprintf_r+0xed2>
 800b232:	46c0      	nop			; (mov r8, r8)
 800b234:	0800fb96 	.word	0x0800fb96
 800b238:	0800fba8 	.word	0x0800fba8
 800b23c:	2010      	movs	r0, #16
 800b23e:	1812      	adds	r2, r2, r0
 800b240:	6078      	str	r0, [r7, #4]
 800b242:	922e      	str	r2, [sp, #184]	; 0xb8
 800b244:	932d      	str	r3, [sp, #180]	; 0xb4
 800b246:	2b07      	cmp	r3, #7
 800b248:	dd08      	ble.n	800b25c <_svfprintf_r+0x1140>
 800b24a:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800b24c:	980a      	ldr	r0, [sp, #40]	; 0x28
 800b24e:	aa2c      	add	r2, sp, #176	; 0xb0
 800b250:	f001 fa88 	bl	800c764 <__ssprint_r>
 800b254:	2800      	cmp	r0, #0
 800b256:	d000      	beq.n	800b25a <_svfprintf_r+0x113e>
 800b258:	e13f      	b.n	800b4da <_svfprintf_r+0x13be>
 800b25a:	a92f      	add	r1, sp, #188	; 0xbc
 800b25c:	000f      	movs	r7, r1
 800b25e:	3c10      	subs	r4, #16
 800b260:	e768      	b.n	800b134 <_svfprintf_r+0x1018>
 800b262:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800b264:	2b00      	cmp	r3, #0
 800b266:	d05d      	beq.n	800b324 <_svfprintf_r+0x1208>
 800b268:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800b26a:	3b01      	subs	r3, #1
 800b26c:	9310      	str	r3, [sp, #64]	; 0x40
 800b26e:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 800b270:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
 800b272:	603b      	str	r3, [r7, #0]
 800b274:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800b276:	607b      	str	r3, [r7, #4]
 800b278:	9b2e      	ldr	r3, [sp, #184]	; 0xb8
 800b27a:	3708      	adds	r7, #8
 800b27c:	189b      	adds	r3, r3, r2
 800b27e:	932e      	str	r3, [sp, #184]	; 0xb8
 800b280:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
 800b282:	3301      	adds	r3, #1
 800b284:	932d      	str	r3, [sp, #180]	; 0xb4
 800b286:	2b07      	cmp	r3, #7
 800b288:	dd08      	ble.n	800b29c <_svfprintf_r+0x1180>
 800b28a:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800b28c:	980a      	ldr	r0, [sp, #40]	; 0x28
 800b28e:	aa2c      	add	r2, sp, #176	; 0xb0
 800b290:	f001 fa68 	bl	800c764 <__ssprint_r>
 800b294:	2800      	cmp	r0, #0
 800b296:	d000      	beq.n	800b29a <_svfprintf_r+0x117e>
 800b298:	e11f      	b.n	800b4da <_svfprintf_r+0x13be>
 800b29a:	af2f      	add	r7, sp, #188	; 0xbc
 800b29c:	9b08      	ldr	r3, [sp, #32]
 800b29e:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800b2a0:	189c      	adds	r4, r3, r2
 800b2a2:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800b2a4:	1b64      	subs	r4, r4, r5
 800b2a6:	781b      	ldrb	r3, [r3, #0]
 800b2a8:	429c      	cmp	r4, r3
 800b2aa:	dd00      	ble.n	800b2ae <_svfprintf_r+0x1192>
 800b2ac:	001c      	movs	r4, r3
 800b2ae:	9b2e      	ldr	r3, [sp, #184]	; 0xb8
 800b2b0:	2c00      	cmp	r4, #0
 800b2b2:	dd12      	ble.n	800b2da <_svfprintf_r+0x11be>
 800b2b4:	18e3      	adds	r3, r4, r3
 800b2b6:	932e      	str	r3, [sp, #184]	; 0xb8
 800b2b8:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
 800b2ba:	603d      	str	r5, [r7, #0]
 800b2bc:	3301      	adds	r3, #1
 800b2be:	607c      	str	r4, [r7, #4]
 800b2c0:	932d      	str	r3, [sp, #180]	; 0xb4
 800b2c2:	3708      	adds	r7, #8
 800b2c4:	2b07      	cmp	r3, #7
 800b2c6:	dd08      	ble.n	800b2da <_svfprintf_r+0x11be>
 800b2c8:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800b2ca:	980a      	ldr	r0, [sp, #40]	; 0x28
 800b2cc:	aa2c      	add	r2, sp, #176	; 0xb0
 800b2ce:	f001 fa49 	bl	800c764 <__ssprint_r>
 800b2d2:	2800      	cmp	r0, #0
 800b2d4:	d000      	beq.n	800b2d8 <_svfprintf_r+0x11bc>
 800b2d6:	e100      	b.n	800b4da <_svfprintf_r+0x13be>
 800b2d8:	af2f      	add	r7, sp, #188	; 0xbc
 800b2da:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800b2dc:	781a      	ldrb	r2, [r3, #0]
 800b2de:	43e3      	mvns	r3, r4
 800b2e0:	17db      	asrs	r3, r3, #31
 800b2e2:	401c      	ands	r4, r3
 800b2e4:	1b14      	subs	r4, r2, r4
 800b2e6:	2c00      	cmp	r4, #0
 800b2e8:	dd18      	ble.n	800b31c <_svfprintf_r+0x1200>
 800b2ea:	0039      	movs	r1, r7
 800b2ec:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
 800b2ee:	48aa      	ldr	r0, [pc, #680]	; (800b598 <_svfprintf_r+0x147c>)
 800b2f0:	9a2e      	ldr	r2, [sp, #184]	; 0xb8
 800b2f2:	3301      	adds	r3, #1
 800b2f4:	3108      	adds	r1, #8
 800b2f6:	6038      	str	r0, [r7, #0]
 800b2f8:	2c10      	cmp	r4, #16
 800b2fa:	dc1a      	bgt.n	800b332 <_svfprintf_r+0x1216>
 800b2fc:	1912      	adds	r2, r2, r4
 800b2fe:	607c      	str	r4, [r7, #4]
 800b300:	922e      	str	r2, [sp, #184]	; 0xb8
 800b302:	000f      	movs	r7, r1
 800b304:	932d      	str	r3, [sp, #180]	; 0xb4
 800b306:	2b07      	cmp	r3, #7
 800b308:	dd08      	ble.n	800b31c <_svfprintf_r+0x1200>
 800b30a:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800b30c:	980a      	ldr	r0, [sp, #40]	; 0x28
 800b30e:	aa2c      	add	r2, sp, #176	; 0xb0
 800b310:	f001 fa28 	bl	800c764 <__ssprint_r>
 800b314:	2800      	cmp	r0, #0
 800b316:	d000      	beq.n	800b31a <_svfprintf_r+0x11fe>
 800b318:	e0df      	b.n	800b4da <_svfprintf_r+0x13be>
 800b31a:	af2f      	add	r7, sp, #188	; 0xbc
 800b31c:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800b31e:	781b      	ldrb	r3, [r3, #0]
 800b320:	18ed      	adds	r5, r5, r3
 800b322:	e724      	b.n	800b16e <_svfprintf_r+0x1052>
 800b324:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800b326:	3b01      	subs	r3, #1
 800b328:	9312      	str	r3, [sp, #72]	; 0x48
 800b32a:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800b32c:	3b01      	subs	r3, #1
 800b32e:	9311      	str	r3, [sp, #68]	; 0x44
 800b330:	e79d      	b.n	800b26e <_svfprintf_r+0x1152>
 800b332:	2010      	movs	r0, #16
 800b334:	1812      	adds	r2, r2, r0
 800b336:	6078      	str	r0, [r7, #4]
 800b338:	922e      	str	r2, [sp, #184]	; 0xb8
 800b33a:	932d      	str	r3, [sp, #180]	; 0xb4
 800b33c:	2b07      	cmp	r3, #7
 800b33e:	dd08      	ble.n	800b352 <_svfprintf_r+0x1236>
 800b340:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800b342:	980a      	ldr	r0, [sp, #40]	; 0x28
 800b344:	aa2c      	add	r2, sp, #176	; 0xb0
 800b346:	f001 fa0d 	bl	800c764 <__ssprint_r>
 800b34a:	2800      	cmp	r0, #0
 800b34c:	d000      	beq.n	800b350 <_svfprintf_r+0x1234>
 800b34e:	e0c4      	b.n	800b4da <_svfprintf_r+0x13be>
 800b350:	a92f      	add	r1, sp, #188	; 0xbc
 800b352:	000f      	movs	r7, r1
 800b354:	3c10      	subs	r4, #16
 800b356:	e7c8      	b.n	800b2ea <_svfprintf_r+0x11ce>
 800b358:	3210      	adds	r2, #16
 800b35a:	607d      	str	r5, [r7, #4]
 800b35c:	922e      	str	r2, [sp, #184]	; 0xb8
 800b35e:	932d      	str	r3, [sp, #180]	; 0xb4
 800b360:	2b07      	cmp	r3, #7
 800b362:	dd08      	ble.n	800b376 <_svfprintf_r+0x125a>
 800b364:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800b366:	980a      	ldr	r0, [sp, #40]	; 0x28
 800b368:	aa2c      	add	r2, sp, #176	; 0xb0
 800b36a:	f001 f9fb 	bl	800c764 <__ssprint_r>
 800b36e:	2800      	cmp	r0, #0
 800b370:	d000      	beq.n	800b374 <_svfprintf_r+0x1258>
 800b372:	e0b2      	b.n	800b4da <_svfprintf_r+0x13be>
 800b374:	a92f      	add	r1, sp, #188	; 0xbc
 800b376:	000f      	movs	r7, r1
 800b378:	3c10      	subs	r4, #16
 800b37a:	e74c      	b.n	800b216 <_svfprintf_r+0x10fa>
 800b37c:	003c      	movs	r4, r7
 800b37e:	9919      	ldr	r1, [sp, #100]	; 0x64
 800b380:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
 800b382:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800b384:	3101      	adds	r1, #1
 800b386:	3301      	adds	r3, #1
 800b388:	3408      	adds	r4, #8
 800b38a:	2a01      	cmp	r2, #1
 800b38c:	dc03      	bgt.n	800b396 <_svfprintf_r+0x127a>
 800b38e:	2201      	movs	r2, #1
 800b390:	4216      	tst	r6, r2
 800b392:	d100      	bne.n	800b396 <_svfprintf_r+0x127a>
 800b394:	e07f      	b.n	800b496 <_svfprintf_r+0x137a>
 800b396:	9a08      	ldr	r2, [sp, #32]
 800b398:	912e      	str	r1, [sp, #184]	; 0xb8
 800b39a:	603a      	str	r2, [r7, #0]
 800b39c:	2201      	movs	r2, #1
 800b39e:	932d      	str	r3, [sp, #180]	; 0xb4
 800b3a0:	607a      	str	r2, [r7, #4]
 800b3a2:	2b07      	cmp	r3, #7
 800b3a4:	dd08      	ble.n	800b3b8 <_svfprintf_r+0x129c>
 800b3a6:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800b3a8:	980a      	ldr	r0, [sp, #40]	; 0x28
 800b3aa:	aa2c      	add	r2, sp, #176	; 0xb0
 800b3ac:	f001 f9da 	bl	800c764 <__ssprint_r>
 800b3b0:	2800      	cmp	r0, #0
 800b3b2:	d000      	beq.n	800b3b6 <_svfprintf_r+0x129a>
 800b3b4:	e091      	b.n	800b4da <_svfprintf_r+0x13be>
 800b3b6:	ac2f      	add	r4, sp, #188	; 0xbc
 800b3b8:	9b1c      	ldr	r3, [sp, #112]	; 0x70
 800b3ba:	9a16      	ldr	r2, [sp, #88]	; 0x58
 800b3bc:	6023      	str	r3, [r4, #0]
 800b3be:	9b16      	ldr	r3, [sp, #88]	; 0x58
 800b3c0:	6063      	str	r3, [r4, #4]
 800b3c2:	9b2e      	ldr	r3, [sp, #184]	; 0xb8
 800b3c4:	3408      	adds	r4, #8
 800b3c6:	189b      	adds	r3, r3, r2
 800b3c8:	932e      	str	r3, [sp, #184]	; 0xb8
 800b3ca:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
 800b3cc:	3301      	adds	r3, #1
 800b3ce:	932d      	str	r3, [sp, #180]	; 0xb4
 800b3d0:	2b07      	cmp	r3, #7
 800b3d2:	dd07      	ble.n	800b3e4 <_svfprintf_r+0x12c8>
 800b3d4:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800b3d6:	980a      	ldr	r0, [sp, #40]	; 0x28
 800b3d8:	aa2c      	add	r2, sp, #176	; 0xb0
 800b3da:	f001 f9c3 	bl	800c764 <__ssprint_r>
 800b3de:	2800      	cmp	r0, #0
 800b3e0:	d17b      	bne.n	800b4da <_svfprintf_r+0x13be>
 800b3e2:	ac2f      	add	r4, sp, #188	; 0xbc
 800b3e4:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
 800b3e6:	2200      	movs	r2, #0
 800b3e8:	9814      	ldr	r0, [sp, #80]	; 0x50
 800b3ea:	9915      	ldr	r1, [sp, #84]	; 0x54
 800b3ec:	9309      	str	r3, [sp, #36]	; 0x24
 800b3ee:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800b3f0:	9f2e      	ldr	r7, [sp, #184]	; 0xb8
 800b3f2:	1e5d      	subs	r5, r3, #1
 800b3f4:	2300      	movs	r3, #0
 800b3f6:	f7f5 f827 	bl	8000448 <__aeabi_dcmpeq>
 800b3fa:	2800      	cmp	r0, #0
 800b3fc:	d126      	bne.n	800b44c <_svfprintf_r+0x1330>
 800b3fe:	9b08      	ldr	r3, [sp, #32]
 800b400:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800b402:	3301      	adds	r3, #1
 800b404:	990e      	ldr	r1, [sp, #56]	; 0x38
 800b406:	6023      	str	r3, [r4, #0]
 800b408:	1e7b      	subs	r3, r7, #1
 800b40a:	3201      	adds	r2, #1
 800b40c:	185b      	adds	r3, r3, r1
 800b40e:	6065      	str	r5, [r4, #4]
 800b410:	932e      	str	r3, [sp, #184]	; 0xb8
 800b412:	922d      	str	r2, [sp, #180]	; 0xb4
 800b414:	3408      	adds	r4, #8
 800b416:	2a07      	cmp	r2, #7
 800b418:	dd07      	ble.n	800b42a <_svfprintf_r+0x130e>
 800b41a:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800b41c:	980a      	ldr	r0, [sp, #40]	; 0x28
 800b41e:	aa2c      	add	r2, sp, #176	; 0xb0
 800b420:	f001 f9a0 	bl	800c764 <__ssprint_r>
 800b424:	2800      	cmp	r0, #0
 800b426:	d158      	bne.n	800b4da <_svfprintf_r+0x13be>
 800b428:	ac2f      	add	r4, sp, #188	; 0xbc
 800b42a:	ab28      	add	r3, sp, #160	; 0xa0
 800b42c:	6023      	str	r3, [r4, #0]
 800b42e:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 800b430:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 800b432:	6063      	str	r3, [r4, #4]
 800b434:	9b2e      	ldr	r3, [sp, #184]	; 0xb8
 800b436:	189b      	adds	r3, r3, r2
 800b438:	932e      	str	r3, [sp, #184]	; 0xb8
 800b43a:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
 800b43c:	3301      	adds	r3, #1
 800b43e:	932d      	str	r3, [sp, #180]	; 0xb4
 800b440:	2b07      	cmp	r3, #7
 800b442:	dd00      	ble.n	800b446 <_svfprintf_r+0x132a>
 800b444:	e638      	b.n	800b0b8 <_svfprintf_r+0xf9c>
 800b446:	3408      	adds	r4, #8
 800b448:	0027      	movs	r7, r4
 800b44a:	e595      	b.n	800af78 <_svfprintf_r+0xe5c>
 800b44c:	2710      	movs	r7, #16
 800b44e:	2d00      	cmp	r5, #0
 800b450:	ddeb      	ble.n	800b42a <_svfprintf_r+0x130e>
 800b452:	0021      	movs	r1, r4
 800b454:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
 800b456:	4850      	ldr	r0, [pc, #320]	; (800b598 <_svfprintf_r+0x147c>)
 800b458:	9a2e      	ldr	r2, [sp, #184]	; 0xb8
 800b45a:	3301      	adds	r3, #1
 800b45c:	3108      	adds	r1, #8
 800b45e:	6020      	str	r0, [r4, #0]
 800b460:	2d10      	cmp	r5, #16
 800b462:	dc07      	bgt.n	800b474 <_svfprintf_r+0x1358>
 800b464:	6065      	str	r5, [r4, #4]
 800b466:	000c      	movs	r4, r1
 800b468:	18ad      	adds	r5, r5, r2
 800b46a:	952e      	str	r5, [sp, #184]	; 0xb8
 800b46c:	932d      	str	r3, [sp, #180]	; 0xb4
 800b46e:	2b07      	cmp	r3, #7
 800b470:	dddb      	ble.n	800b42a <_svfprintf_r+0x130e>
 800b472:	e7d2      	b.n	800b41a <_svfprintf_r+0x12fe>
 800b474:	3210      	adds	r2, #16
 800b476:	6067      	str	r7, [r4, #4]
 800b478:	922e      	str	r2, [sp, #184]	; 0xb8
 800b47a:	932d      	str	r3, [sp, #180]	; 0xb4
 800b47c:	2b07      	cmp	r3, #7
 800b47e:	dd07      	ble.n	800b490 <_svfprintf_r+0x1374>
 800b480:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800b482:	980a      	ldr	r0, [sp, #40]	; 0x28
 800b484:	aa2c      	add	r2, sp, #176	; 0xb0
 800b486:	f001 f96d 	bl	800c764 <__ssprint_r>
 800b48a:	2800      	cmp	r0, #0
 800b48c:	d125      	bne.n	800b4da <_svfprintf_r+0x13be>
 800b48e:	a92f      	add	r1, sp, #188	; 0xbc
 800b490:	000c      	movs	r4, r1
 800b492:	3d10      	subs	r5, #16
 800b494:	e7dd      	b.n	800b452 <_svfprintf_r+0x1336>
 800b496:	9808      	ldr	r0, [sp, #32]
 800b498:	912e      	str	r1, [sp, #184]	; 0xb8
 800b49a:	c705      	stmia	r7!, {r0, r2}
 800b49c:	932d      	str	r3, [sp, #180]	; 0xb4
 800b49e:	e7e6      	b.n	800b46e <_svfprintf_r+0x1352>
 800b4a0:	9b18      	ldr	r3, [sp, #96]	; 0x60
 800b4a2:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 800b4a4:	2510      	movs	r5, #16
 800b4a6:	1a9c      	subs	r4, r3, r2
 800b4a8:	2c00      	cmp	r4, #0
 800b4aa:	dc00      	bgt.n	800b4ae <_svfprintf_r+0x1392>
 800b4ac:	e567      	b.n	800af7e <_svfprintf_r+0xe62>
 800b4ae:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
 800b4b0:	493a      	ldr	r1, [pc, #232]	; (800b59c <_svfprintf_r+0x1480>)
 800b4b2:	9a2e      	ldr	r2, [sp, #184]	; 0xb8
 800b4b4:	3301      	adds	r3, #1
 800b4b6:	6039      	str	r1, [r7, #0]
 800b4b8:	2c10      	cmp	r4, #16
 800b4ba:	dc19      	bgt.n	800b4f0 <_svfprintf_r+0x13d4>
 800b4bc:	607c      	str	r4, [r7, #4]
 800b4be:	18a4      	adds	r4, r4, r2
 800b4c0:	942e      	str	r4, [sp, #184]	; 0xb8
 800b4c2:	932d      	str	r3, [sp, #180]	; 0xb4
 800b4c4:	2b07      	cmp	r3, #7
 800b4c6:	dc00      	bgt.n	800b4ca <_svfprintf_r+0x13ae>
 800b4c8:	e559      	b.n	800af7e <_svfprintf_r+0xe62>
 800b4ca:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800b4cc:	980a      	ldr	r0, [sp, #40]	; 0x28
 800b4ce:	aa2c      	add	r2, sp, #176	; 0xb0
 800b4d0:	f001 f948 	bl	800c764 <__ssprint_r>
 800b4d4:	2800      	cmp	r0, #0
 800b4d6:	d100      	bne.n	800b4da <_svfprintf_r+0x13be>
 800b4d8:	e551      	b.n	800af7e <_svfprintf_r+0xe62>
 800b4da:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800b4dc:	2b00      	cmp	r3, #0
 800b4de:	d101      	bne.n	800b4e4 <_svfprintf_r+0x13c8>
 800b4e0:	f7ff f845 	bl	800a56e <_svfprintf_r+0x452>
 800b4e4:	0019      	movs	r1, r3
 800b4e6:	980a      	ldr	r0, [sp, #40]	; 0x28
 800b4e8:	f7fd ffd8 	bl	800949c <_free_r>
 800b4ec:	f7ff f83f 	bl	800a56e <_svfprintf_r+0x452>
 800b4f0:	3210      	adds	r2, #16
 800b4f2:	607d      	str	r5, [r7, #4]
 800b4f4:	922e      	str	r2, [sp, #184]	; 0xb8
 800b4f6:	932d      	str	r3, [sp, #180]	; 0xb4
 800b4f8:	3708      	adds	r7, #8
 800b4fa:	2b07      	cmp	r3, #7
 800b4fc:	dd07      	ble.n	800b50e <_svfprintf_r+0x13f2>
 800b4fe:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800b500:	980a      	ldr	r0, [sp, #40]	; 0x28
 800b502:	aa2c      	add	r2, sp, #176	; 0xb0
 800b504:	f001 f92e 	bl	800c764 <__ssprint_r>
 800b508:	2800      	cmp	r0, #0
 800b50a:	d1e6      	bne.n	800b4da <_svfprintf_r+0x13be>
 800b50c:	af2f      	add	r7, sp, #188	; 0xbc
 800b50e:	3c10      	subs	r4, #16
 800b510:	e7cd      	b.n	800b4ae <_svfprintf_r+0x1392>
 800b512:	990c      	ldr	r1, [sp, #48]	; 0x30
 800b514:	980a      	ldr	r0, [sp, #40]	; 0x28
 800b516:	f7fd ffc1 	bl	800949c <_free_r>
 800b51a:	e549      	b.n	800afb0 <_svfprintf_r+0xe94>
 800b51c:	9b2e      	ldr	r3, [sp, #184]	; 0xb8
 800b51e:	2b00      	cmp	r3, #0
 800b520:	d101      	bne.n	800b526 <_svfprintf_r+0x140a>
 800b522:	f7ff f824 	bl	800a56e <_svfprintf_r+0x452>
 800b526:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800b528:	980a      	ldr	r0, [sp, #40]	; 0x28
 800b52a:	aa2c      	add	r2, sp, #176	; 0xb0
 800b52c:	f001 f91a 	bl	800c764 <__ssprint_r>
 800b530:	f7ff f81d 	bl	800a56e <_svfprintf_r+0x452>
 800b534:	0034      	movs	r4, r6
 800b536:	2a00      	cmp	r2, #0
 800b538:	d101      	bne.n	800b53e <_svfprintf_r+0x1422>
 800b53a:	f7fe ff8c 	bl	800a456 <_svfprintf_r+0x33a>
 800b53e:	2b01      	cmp	r3, #1
 800b540:	d101      	bne.n	800b546 <_svfprintf_r+0x142a>
 800b542:	f7ff fc01 	bl	800ad48 <_svfprintf_r+0xc2c>
 800b546:	2b02      	cmp	r3, #2
 800b548:	d100      	bne.n	800b54c <_svfprintf_r+0x1430>
 800b54a:	e459      	b.n	800ae00 <_svfprintf_r+0xce4>
 800b54c:	2507      	movs	r5, #7
 800b54e:	ab58      	add	r3, sp, #352	; 0x160
 800b550:	9308      	str	r3, [sp, #32]
 800b552:	9a08      	ldr	r2, [sp, #32]
 800b554:	0013      	movs	r3, r2
 800b556:	3b01      	subs	r3, #1
 800b558:	9308      	str	r3, [sp, #32]
 800b55a:	9b06      	ldr	r3, [sp, #24]
 800b55c:	9908      	ldr	r1, [sp, #32]
 800b55e:	402b      	ands	r3, r5
 800b560:	3330      	adds	r3, #48	; 0x30
 800b562:	700b      	strb	r3, [r1, #0]
 800b564:	9907      	ldr	r1, [sp, #28]
 800b566:	074e      	lsls	r6, r1, #29
 800b568:	9906      	ldr	r1, [sp, #24]
 800b56a:	08c8      	lsrs	r0, r1, #3
 800b56c:	9907      	ldr	r1, [sp, #28]
 800b56e:	4306      	orrs	r6, r0
 800b570:	08c9      	lsrs	r1, r1, #3
 800b572:	9107      	str	r1, [sp, #28]
 800b574:	0031      	movs	r1, r6
 800b576:	9807      	ldr	r0, [sp, #28]
 800b578:	9606      	str	r6, [sp, #24]
 800b57a:	4301      	orrs	r1, r0
 800b57c:	d1e9      	bne.n	800b552 <_svfprintf_r+0x1436>
 800b57e:	07e1      	lsls	r1, r4, #31
 800b580:	d400      	bmi.n	800b584 <_svfprintf_r+0x1468>
 800b582:	e42a      	b.n	800adda <_svfprintf_r+0xcbe>
 800b584:	2b30      	cmp	r3, #48	; 0x30
 800b586:	d100      	bne.n	800b58a <_svfprintf_r+0x146e>
 800b588:	e427      	b.n	800adda <_svfprintf_r+0xcbe>
 800b58a:	2130      	movs	r1, #48	; 0x30
 800b58c:	9b08      	ldr	r3, [sp, #32]
 800b58e:	3b01      	subs	r3, #1
 800b590:	7019      	strb	r1, [r3, #0]
 800b592:	1e93      	subs	r3, r2, #2
 800b594:	9308      	str	r3, [sp, #32]
 800b596:	e420      	b.n	800adda <_svfprintf_r+0xcbe>
 800b598:	0800fba8 	.word	0x0800fba8
 800b59c:	0800fb98 	.word	0x0800fb98

0800b5a0 <_fclose_r>:
 800b5a0:	b570      	push	{r4, r5, r6, lr}
 800b5a2:	0005      	movs	r5, r0
 800b5a4:	1e0c      	subs	r4, r1, #0
 800b5a6:	d102      	bne.n	800b5ae <_fclose_r+0xe>
 800b5a8:	2600      	movs	r6, #0
 800b5aa:	0030      	movs	r0, r6
 800b5ac:	bd70      	pop	{r4, r5, r6, pc}
 800b5ae:	2800      	cmp	r0, #0
 800b5b0:	d004      	beq.n	800b5bc <_fclose_r+0x1c>
 800b5b2:	6b43      	ldr	r3, [r0, #52]	; 0x34
 800b5b4:	2b00      	cmp	r3, #0
 800b5b6:	d101      	bne.n	800b5bc <_fclose_r+0x1c>
 800b5b8:	f7fd fd9e 	bl	80090f8 <__sinit>
 800b5bc:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800b5be:	07db      	lsls	r3, r3, #31
 800b5c0:	d405      	bmi.n	800b5ce <_fclose_r+0x2e>
 800b5c2:	89a3      	ldrh	r3, [r4, #12]
 800b5c4:	059b      	lsls	r3, r3, #22
 800b5c6:	d402      	bmi.n	800b5ce <_fclose_r+0x2e>
 800b5c8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800b5ca:	f7fd fef3 	bl	80093b4 <__retarget_lock_acquire_recursive>
 800b5ce:	220c      	movs	r2, #12
 800b5d0:	5ea3      	ldrsh	r3, [r4, r2]
 800b5d2:	2b00      	cmp	r3, #0
 800b5d4:	d109      	bne.n	800b5ea <_fclose_r+0x4a>
 800b5d6:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800b5d8:	3301      	adds	r3, #1
 800b5da:	0016      	movs	r6, r2
 800b5dc:	401e      	ands	r6, r3
 800b5de:	421a      	tst	r2, r3
 800b5e0:	d1e2      	bne.n	800b5a8 <_fclose_r+0x8>
 800b5e2:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800b5e4:	f7fd fee7 	bl	80093b6 <__retarget_lock_release_recursive>
 800b5e8:	e7df      	b.n	800b5aa <_fclose_r+0xa>
 800b5ea:	0021      	movs	r1, r4
 800b5ec:	0028      	movs	r0, r5
 800b5ee:	f000 f837 	bl	800b660 <__sflush_r>
 800b5f2:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 800b5f4:	0006      	movs	r6, r0
 800b5f6:	2b00      	cmp	r3, #0
 800b5f8:	d006      	beq.n	800b608 <_fclose_r+0x68>
 800b5fa:	0028      	movs	r0, r5
 800b5fc:	69e1      	ldr	r1, [r4, #28]
 800b5fe:	4798      	blx	r3
 800b600:	2800      	cmp	r0, #0
 800b602:	da01      	bge.n	800b608 <_fclose_r+0x68>
 800b604:	2601      	movs	r6, #1
 800b606:	4276      	negs	r6, r6
 800b608:	89a3      	ldrh	r3, [r4, #12]
 800b60a:	061b      	lsls	r3, r3, #24
 800b60c:	d503      	bpl.n	800b616 <_fclose_r+0x76>
 800b60e:	0028      	movs	r0, r5
 800b610:	6921      	ldr	r1, [r4, #16]
 800b612:	f7fd ff43 	bl	800949c <_free_r>
 800b616:	6b21      	ldr	r1, [r4, #48]	; 0x30
 800b618:	2900      	cmp	r1, #0
 800b61a:	d008      	beq.n	800b62e <_fclose_r+0x8e>
 800b61c:	0023      	movs	r3, r4
 800b61e:	3340      	adds	r3, #64	; 0x40
 800b620:	4299      	cmp	r1, r3
 800b622:	d002      	beq.n	800b62a <_fclose_r+0x8a>
 800b624:	0028      	movs	r0, r5
 800b626:	f7fd ff39 	bl	800949c <_free_r>
 800b62a:	2300      	movs	r3, #0
 800b62c:	6323      	str	r3, [r4, #48]	; 0x30
 800b62e:	6c61      	ldr	r1, [r4, #68]	; 0x44
 800b630:	2900      	cmp	r1, #0
 800b632:	d004      	beq.n	800b63e <_fclose_r+0x9e>
 800b634:	0028      	movs	r0, r5
 800b636:	f7fd ff31 	bl	800949c <_free_r>
 800b63a:	2300      	movs	r3, #0
 800b63c:	6463      	str	r3, [r4, #68]	; 0x44
 800b63e:	f7fd fd4b 	bl	80090d8 <__sfp_lock_acquire>
 800b642:	2300      	movs	r3, #0
 800b644:	81a3      	strh	r3, [r4, #12]
 800b646:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800b648:	07db      	lsls	r3, r3, #31
 800b64a:	d402      	bmi.n	800b652 <_fclose_r+0xb2>
 800b64c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800b64e:	f7fd feb2 	bl	80093b6 <__retarget_lock_release_recursive>
 800b652:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800b654:	f7fd fead 	bl	80093b2 <__retarget_lock_close_recursive>
 800b658:	f7fd fd46 	bl	80090e8 <__sfp_lock_release>
 800b65c:	e7a5      	b.n	800b5aa <_fclose_r+0xa>
	...

0800b660 <__sflush_r>:
 800b660:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800b662:	230c      	movs	r3, #12
 800b664:	5eca      	ldrsh	r2, [r1, r3]
 800b666:	000c      	movs	r4, r1
 800b668:	0005      	movs	r5, r0
 800b66a:	b291      	uxth	r1, r2
 800b66c:	0713      	lsls	r3, r2, #28
 800b66e:	d464      	bmi.n	800b73a <__sflush_r+0xda>
 800b670:	2380      	movs	r3, #128	; 0x80
 800b672:	011b      	lsls	r3, r3, #4
 800b674:	4313      	orrs	r3, r2
 800b676:	6862      	ldr	r2, [r4, #4]
 800b678:	81a3      	strh	r3, [r4, #12]
 800b67a:	2a00      	cmp	r2, #0
 800b67c:	dc04      	bgt.n	800b688 <__sflush_r+0x28>
 800b67e:	6be2      	ldr	r2, [r4, #60]	; 0x3c
 800b680:	2a00      	cmp	r2, #0
 800b682:	dc01      	bgt.n	800b688 <__sflush_r+0x28>
 800b684:	2000      	movs	r0, #0
 800b686:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 800b688:	6aa7      	ldr	r7, [r4, #40]	; 0x28
 800b68a:	2f00      	cmp	r7, #0
 800b68c:	d0fa      	beq.n	800b684 <__sflush_r+0x24>
 800b68e:	2200      	movs	r2, #0
 800b690:	2080      	movs	r0, #128	; 0x80
 800b692:	682e      	ldr	r6, [r5, #0]
 800b694:	602a      	str	r2, [r5, #0]
 800b696:	001a      	movs	r2, r3
 800b698:	0140      	lsls	r0, r0, #5
 800b69a:	69e1      	ldr	r1, [r4, #28]
 800b69c:	4002      	ands	r2, r0
 800b69e:	4203      	tst	r3, r0
 800b6a0:	d038      	beq.n	800b714 <__sflush_r+0xb4>
 800b6a2:	6d20      	ldr	r0, [r4, #80]	; 0x50
 800b6a4:	89a3      	ldrh	r3, [r4, #12]
 800b6a6:	075b      	lsls	r3, r3, #29
 800b6a8:	d506      	bpl.n	800b6b8 <__sflush_r+0x58>
 800b6aa:	6863      	ldr	r3, [r4, #4]
 800b6ac:	1ac0      	subs	r0, r0, r3
 800b6ae:	6b23      	ldr	r3, [r4, #48]	; 0x30
 800b6b0:	2b00      	cmp	r3, #0
 800b6b2:	d001      	beq.n	800b6b8 <__sflush_r+0x58>
 800b6b4:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 800b6b6:	1ac0      	subs	r0, r0, r3
 800b6b8:	0002      	movs	r2, r0
 800b6ba:	2300      	movs	r3, #0
 800b6bc:	0028      	movs	r0, r5
 800b6be:	6aa7      	ldr	r7, [r4, #40]	; 0x28
 800b6c0:	69e1      	ldr	r1, [r4, #28]
 800b6c2:	47b8      	blx	r7
 800b6c4:	89a2      	ldrh	r2, [r4, #12]
 800b6c6:	1c43      	adds	r3, r0, #1
 800b6c8:	d106      	bne.n	800b6d8 <__sflush_r+0x78>
 800b6ca:	6829      	ldr	r1, [r5, #0]
 800b6cc:	291d      	cmp	r1, #29
 800b6ce:	d830      	bhi.n	800b732 <__sflush_r+0xd2>
 800b6d0:	4b2c      	ldr	r3, [pc, #176]	; (800b784 <__sflush_r+0x124>)
 800b6d2:	410b      	asrs	r3, r1
 800b6d4:	07db      	lsls	r3, r3, #31
 800b6d6:	d42c      	bmi.n	800b732 <__sflush_r+0xd2>
 800b6d8:	4b2b      	ldr	r3, [pc, #172]	; (800b788 <__sflush_r+0x128>)
 800b6da:	4013      	ands	r3, r2
 800b6dc:	2200      	movs	r2, #0
 800b6de:	6062      	str	r2, [r4, #4]
 800b6e0:	6922      	ldr	r2, [r4, #16]
 800b6e2:	b21b      	sxth	r3, r3
 800b6e4:	81a3      	strh	r3, [r4, #12]
 800b6e6:	6022      	str	r2, [r4, #0]
 800b6e8:	04db      	lsls	r3, r3, #19
 800b6ea:	d505      	bpl.n	800b6f8 <__sflush_r+0x98>
 800b6ec:	1c43      	adds	r3, r0, #1
 800b6ee:	d102      	bne.n	800b6f6 <__sflush_r+0x96>
 800b6f0:	682b      	ldr	r3, [r5, #0]
 800b6f2:	2b00      	cmp	r3, #0
 800b6f4:	d100      	bne.n	800b6f8 <__sflush_r+0x98>
 800b6f6:	6520      	str	r0, [r4, #80]	; 0x50
 800b6f8:	6b21      	ldr	r1, [r4, #48]	; 0x30
 800b6fa:	602e      	str	r6, [r5, #0]
 800b6fc:	2900      	cmp	r1, #0
 800b6fe:	d0c1      	beq.n	800b684 <__sflush_r+0x24>
 800b700:	0023      	movs	r3, r4
 800b702:	3340      	adds	r3, #64	; 0x40
 800b704:	4299      	cmp	r1, r3
 800b706:	d002      	beq.n	800b70e <__sflush_r+0xae>
 800b708:	0028      	movs	r0, r5
 800b70a:	f7fd fec7 	bl	800949c <_free_r>
 800b70e:	2000      	movs	r0, #0
 800b710:	6320      	str	r0, [r4, #48]	; 0x30
 800b712:	e7b8      	b.n	800b686 <__sflush_r+0x26>
 800b714:	2301      	movs	r3, #1
 800b716:	0028      	movs	r0, r5
 800b718:	47b8      	blx	r7
 800b71a:	1c43      	adds	r3, r0, #1
 800b71c:	d1c2      	bne.n	800b6a4 <__sflush_r+0x44>
 800b71e:	682b      	ldr	r3, [r5, #0]
 800b720:	2b00      	cmp	r3, #0
 800b722:	d0bf      	beq.n	800b6a4 <__sflush_r+0x44>
 800b724:	2b1d      	cmp	r3, #29
 800b726:	d001      	beq.n	800b72c <__sflush_r+0xcc>
 800b728:	2b16      	cmp	r3, #22
 800b72a:	d101      	bne.n	800b730 <__sflush_r+0xd0>
 800b72c:	602e      	str	r6, [r5, #0]
 800b72e:	e7a9      	b.n	800b684 <__sflush_r+0x24>
 800b730:	89a2      	ldrh	r2, [r4, #12]
 800b732:	2340      	movs	r3, #64	; 0x40
 800b734:	4313      	orrs	r3, r2
 800b736:	81a3      	strh	r3, [r4, #12]
 800b738:	e7a5      	b.n	800b686 <__sflush_r+0x26>
 800b73a:	6926      	ldr	r6, [r4, #16]
 800b73c:	2e00      	cmp	r6, #0
 800b73e:	d0a1      	beq.n	800b684 <__sflush_r+0x24>
 800b740:	6827      	ldr	r7, [r4, #0]
 800b742:	6026      	str	r6, [r4, #0]
 800b744:	1bbb      	subs	r3, r7, r6
 800b746:	9301      	str	r3, [sp, #4]
 800b748:	2300      	movs	r3, #0
 800b74a:	0789      	lsls	r1, r1, #30
 800b74c:	d100      	bne.n	800b750 <__sflush_r+0xf0>
 800b74e:	6963      	ldr	r3, [r4, #20]
 800b750:	60a3      	str	r3, [r4, #8]
 800b752:	9b01      	ldr	r3, [sp, #4]
 800b754:	2b00      	cmp	r3, #0
 800b756:	dc00      	bgt.n	800b75a <__sflush_r+0xfa>
 800b758:	e794      	b.n	800b684 <__sflush_r+0x24>
 800b75a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800b75c:	0032      	movs	r2, r6
 800b75e:	001f      	movs	r7, r3
 800b760:	0028      	movs	r0, r5
 800b762:	9b01      	ldr	r3, [sp, #4]
 800b764:	69e1      	ldr	r1, [r4, #28]
 800b766:	47b8      	blx	r7
 800b768:	2800      	cmp	r0, #0
 800b76a:	dc06      	bgt.n	800b77a <__sflush_r+0x11a>
 800b76c:	2340      	movs	r3, #64	; 0x40
 800b76e:	2001      	movs	r0, #1
 800b770:	89a2      	ldrh	r2, [r4, #12]
 800b772:	4240      	negs	r0, r0
 800b774:	4313      	orrs	r3, r2
 800b776:	81a3      	strh	r3, [r4, #12]
 800b778:	e785      	b.n	800b686 <__sflush_r+0x26>
 800b77a:	9b01      	ldr	r3, [sp, #4]
 800b77c:	1836      	adds	r6, r6, r0
 800b77e:	1a1b      	subs	r3, r3, r0
 800b780:	9301      	str	r3, [sp, #4]
 800b782:	e7e6      	b.n	800b752 <__sflush_r+0xf2>
 800b784:	dfbffffe 	.word	0xdfbffffe
 800b788:	fffff7ff 	.word	0xfffff7ff

0800b78c <_fflush_r>:
 800b78c:	b570      	push	{r4, r5, r6, lr}
 800b78e:	0005      	movs	r5, r0
 800b790:	000c      	movs	r4, r1
 800b792:	2800      	cmp	r0, #0
 800b794:	d004      	beq.n	800b7a0 <_fflush_r+0x14>
 800b796:	6b43      	ldr	r3, [r0, #52]	; 0x34
 800b798:	2b00      	cmp	r3, #0
 800b79a:	d101      	bne.n	800b7a0 <_fflush_r+0x14>
 800b79c:	f7fd fcac 	bl	80090f8 <__sinit>
 800b7a0:	220c      	movs	r2, #12
 800b7a2:	5ea3      	ldrsh	r3, [r4, r2]
 800b7a4:	1e1e      	subs	r6, r3, #0
 800b7a6:	d015      	beq.n	800b7d4 <_fflush_r+0x48>
 800b7a8:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800b7aa:	07d2      	lsls	r2, r2, #31
 800b7ac:	d404      	bmi.n	800b7b8 <_fflush_r+0x2c>
 800b7ae:	059b      	lsls	r3, r3, #22
 800b7b0:	d402      	bmi.n	800b7b8 <_fflush_r+0x2c>
 800b7b2:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800b7b4:	f7fd fdfe 	bl	80093b4 <__retarget_lock_acquire_recursive>
 800b7b8:	0021      	movs	r1, r4
 800b7ba:	0028      	movs	r0, r5
 800b7bc:	f7ff ff50 	bl	800b660 <__sflush_r>
 800b7c0:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800b7c2:	0006      	movs	r6, r0
 800b7c4:	07db      	lsls	r3, r3, #31
 800b7c6:	d405      	bmi.n	800b7d4 <_fflush_r+0x48>
 800b7c8:	89a3      	ldrh	r3, [r4, #12]
 800b7ca:	059b      	lsls	r3, r3, #22
 800b7cc:	d402      	bmi.n	800b7d4 <_fflush_r+0x48>
 800b7ce:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800b7d0:	f7fd fdf1 	bl	80093b6 <__retarget_lock_release_recursive>
 800b7d4:	0030      	movs	r0, r6
 800b7d6:	bd70      	pop	{r4, r5, r6, pc}

0800b7d8 <strncpy>:
 800b7d8:	0003      	movs	r3, r0
 800b7da:	b530      	push	{r4, r5, lr}
 800b7dc:	001d      	movs	r5, r3
 800b7de:	2a00      	cmp	r2, #0
 800b7e0:	d006      	beq.n	800b7f0 <strncpy+0x18>
 800b7e2:	780c      	ldrb	r4, [r1, #0]
 800b7e4:	3a01      	subs	r2, #1
 800b7e6:	3301      	adds	r3, #1
 800b7e8:	702c      	strb	r4, [r5, #0]
 800b7ea:	3101      	adds	r1, #1
 800b7ec:	2c00      	cmp	r4, #0
 800b7ee:	d1f5      	bne.n	800b7dc <strncpy+0x4>
 800b7f0:	2100      	movs	r1, #0
 800b7f2:	189a      	adds	r2, r3, r2
 800b7f4:	4293      	cmp	r3, r2
 800b7f6:	d100      	bne.n	800b7fa <strncpy+0x22>
 800b7f8:	bd30      	pop	{r4, r5, pc}
 800b7fa:	7019      	strb	r1, [r3, #0]
 800b7fc:	3301      	adds	r3, #1
 800b7fe:	e7f9      	b.n	800b7f4 <strncpy+0x1c>

0800b800 <_localeconv_r>:
 800b800:	4800      	ldr	r0, [pc, #0]	; (800b804 <_localeconv_r+0x4>)
 800b802:	4770      	bx	lr
 800b804:	20000118 	.word	0x20000118

0800b808 <_sbrk_r>:
 800b808:	2300      	movs	r3, #0
 800b80a:	b570      	push	{r4, r5, r6, lr}
 800b80c:	4d06      	ldr	r5, [pc, #24]	; (800b828 <_sbrk_r+0x20>)
 800b80e:	0004      	movs	r4, r0
 800b810:	0008      	movs	r0, r1
 800b812:	602b      	str	r3, [r5, #0]
 800b814:	f7f7 ffc4 	bl	80037a0 <_sbrk>
 800b818:	1c43      	adds	r3, r0, #1
 800b81a:	d103      	bne.n	800b824 <_sbrk_r+0x1c>
 800b81c:	682b      	ldr	r3, [r5, #0]
 800b81e:	2b00      	cmp	r3, #0
 800b820:	d000      	beq.n	800b824 <_sbrk_r+0x1c>
 800b822:	6023      	str	r3, [r4, #0]
 800b824:	bd70      	pop	{r4, r5, r6, pc}
 800b826:	46c0      	nop			; (mov r8, r8)
 800b828:	20000b2c 	.word	0x20000b2c

0800b82c <__libc_fini_array>:
 800b82c:	b570      	push	{r4, r5, r6, lr}
 800b82e:	4c07      	ldr	r4, [pc, #28]	; (800b84c <__libc_fini_array+0x20>)
 800b830:	4d07      	ldr	r5, [pc, #28]	; (800b850 <__libc_fini_array+0x24>)
 800b832:	1b64      	subs	r4, r4, r5
 800b834:	10a4      	asrs	r4, r4, #2
 800b836:	2c00      	cmp	r4, #0
 800b838:	d102      	bne.n	800b840 <__libc_fini_array+0x14>
 800b83a:	f002 fa93 	bl	800dd64 <_fini>
 800b83e:	bd70      	pop	{r4, r5, r6, pc}
 800b840:	3c01      	subs	r4, #1
 800b842:	00a3      	lsls	r3, r4, #2
 800b844:	58eb      	ldr	r3, [r5, r3]
 800b846:	4798      	blx	r3
 800b848:	e7f5      	b.n	800b836 <__libc_fini_array+0xa>
 800b84a:	46c0      	nop			; (mov r8, r8)
 800b84c:	0800fc90 	.word	0x0800fc90
 800b850:	0800fc8c 	.word	0x0800fc8c

0800b854 <sysconf>:
 800b854:	2380      	movs	r3, #128	; 0x80
 800b856:	b510      	push	{r4, lr}
 800b858:	2808      	cmp	r0, #8
 800b85a:	d004      	beq.n	800b866 <sysconf+0x12>
 800b85c:	f7fd fd7e 	bl	800935c <__errno>
 800b860:	2316      	movs	r3, #22
 800b862:	6003      	str	r3, [r0, #0]
 800b864:	3b17      	subs	r3, #23
 800b866:	0018      	movs	r0, r3
 800b868:	bd10      	pop	{r4, pc}

0800b86a <memchr>:
 800b86a:	b2c9      	uxtb	r1, r1
 800b86c:	1882      	adds	r2, r0, r2
 800b86e:	4290      	cmp	r0, r2
 800b870:	d101      	bne.n	800b876 <memchr+0xc>
 800b872:	2000      	movs	r0, #0
 800b874:	4770      	bx	lr
 800b876:	7803      	ldrb	r3, [r0, #0]
 800b878:	428b      	cmp	r3, r1
 800b87a:	d0fb      	beq.n	800b874 <memchr+0xa>
 800b87c:	3001      	adds	r0, #1
 800b87e:	e7f6      	b.n	800b86e <memchr+0x4>

0800b880 <frexp>:
 800b880:	b570      	push	{r4, r5, r6, lr}
 800b882:	0014      	movs	r4, r2
 800b884:	2500      	movs	r5, #0
 800b886:	6025      	str	r5, [r4, #0]
 800b888:	4d10      	ldr	r5, [pc, #64]	; (800b8cc <frexp+0x4c>)
 800b88a:	004b      	lsls	r3, r1, #1
 800b88c:	000a      	movs	r2, r1
 800b88e:	085b      	lsrs	r3, r3, #1
 800b890:	42ab      	cmp	r3, r5
 800b892:	dc1a      	bgt.n	800b8ca <frexp+0x4a>
 800b894:	001d      	movs	r5, r3
 800b896:	4305      	orrs	r5, r0
 800b898:	d017      	beq.n	800b8ca <frexp+0x4a>
 800b89a:	4d0d      	ldr	r5, [pc, #52]	; (800b8d0 <frexp+0x50>)
 800b89c:	4229      	tst	r1, r5
 800b89e:	d109      	bne.n	800b8b4 <frexp+0x34>
 800b8a0:	2200      	movs	r2, #0
 800b8a2:	4b0c      	ldr	r3, [pc, #48]	; (800b8d4 <frexp+0x54>)
 800b8a4:	f7f5 ffde 	bl	8001864 <__aeabi_dmul>
 800b8a8:	2536      	movs	r5, #54	; 0x36
 800b8aa:	000a      	movs	r2, r1
 800b8ac:	004b      	lsls	r3, r1, #1
 800b8ae:	426d      	negs	r5, r5
 800b8b0:	085b      	lsrs	r3, r3, #1
 800b8b2:	6025      	str	r5, [r4, #0]
 800b8b4:	4d08      	ldr	r5, [pc, #32]	; (800b8d8 <frexp+0x58>)
 800b8b6:	151b      	asrs	r3, r3, #20
 800b8b8:	195b      	adds	r3, r3, r5
 800b8ba:	6825      	ldr	r5, [r4, #0]
 800b8bc:	18eb      	adds	r3, r5, r3
 800b8be:	6023      	str	r3, [r4, #0]
 800b8c0:	4b06      	ldr	r3, [pc, #24]	; (800b8dc <frexp+0x5c>)
 800b8c2:	401a      	ands	r2, r3
 800b8c4:	4b06      	ldr	r3, [pc, #24]	; (800b8e0 <frexp+0x60>)
 800b8c6:	4313      	orrs	r3, r2
 800b8c8:	0019      	movs	r1, r3
 800b8ca:	bd70      	pop	{r4, r5, r6, pc}
 800b8cc:	7fefffff 	.word	0x7fefffff
 800b8d0:	7ff00000 	.word	0x7ff00000
 800b8d4:	43500000 	.word	0x43500000
 800b8d8:	fffffc02 	.word	0xfffffc02
 800b8dc:	800fffff 	.word	0x800fffff
 800b8e0:	3fe00000 	.word	0x3fe00000

0800b8e4 <__register_exitproc>:
 800b8e4:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800b8e6:	4f1c      	ldr	r7, [pc, #112]	; (800b958 <__register_exitproc+0x74>)
 800b8e8:	0004      	movs	r4, r0
 800b8ea:	6838      	ldr	r0, [r7, #0]
 800b8ec:	0016      	movs	r6, r2
 800b8ee:	9301      	str	r3, [sp, #4]
 800b8f0:	9100      	str	r1, [sp, #0]
 800b8f2:	f7fd fd5f 	bl	80093b4 <__retarget_lock_acquire_recursive>
 800b8f6:	4a19      	ldr	r2, [pc, #100]	; (800b95c <__register_exitproc+0x78>)
 800b8f8:	6813      	ldr	r3, [r2, #0]
 800b8fa:	2b00      	cmp	r3, #0
 800b8fc:	d101      	bne.n	800b902 <__register_exitproc+0x1e>
 800b8fe:	4b18      	ldr	r3, [pc, #96]	; (800b960 <__register_exitproc+0x7c>)
 800b900:	6013      	str	r3, [r2, #0]
 800b902:	685a      	ldr	r2, [r3, #4]
 800b904:	6838      	ldr	r0, [r7, #0]
 800b906:	2a1f      	cmp	r2, #31
 800b908:	dd04      	ble.n	800b914 <__register_exitproc+0x30>
 800b90a:	f7fd fd54 	bl	80093b6 <__retarget_lock_release_recursive>
 800b90e:	2001      	movs	r0, #1
 800b910:	4240      	negs	r0, r0
 800b912:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 800b914:	2c00      	cmp	r4, #0
 800b916:	d014      	beq.n	800b942 <__register_exitproc+0x5e>
 800b918:	0091      	lsls	r1, r2, #2
 800b91a:	1859      	adds	r1, r3, r1
 800b91c:	000f      	movs	r7, r1
 800b91e:	3788      	adds	r7, #136	; 0x88
 800b920:	603e      	str	r6, [r7, #0]
 800b922:	2701      	movs	r7, #1
 800b924:	001e      	movs	r6, r3
 800b926:	4097      	lsls	r7, r2
 800b928:	3685      	adds	r6, #133	; 0x85
 800b92a:	36ff      	adds	r6, #255	; 0xff
 800b92c:	6875      	ldr	r5, [r6, #4]
 800b92e:	31fc      	adds	r1, #252	; 0xfc
 800b930:	433d      	orrs	r5, r7
 800b932:	6075      	str	r5, [r6, #4]
 800b934:	9d01      	ldr	r5, [sp, #4]
 800b936:	60cd      	str	r5, [r1, #12]
 800b938:	2c02      	cmp	r4, #2
 800b93a:	d102      	bne.n	800b942 <__register_exitproc+0x5e>
 800b93c:	68b1      	ldr	r1, [r6, #8]
 800b93e:	4339      	orrs	r1, r7
 800b940:	60b1      	str	r1, [r6, #8]
 800b942:	1c51      	adds	r1, r2, #1
 800b944:	6059      	str	r1, [r3, #4]
 800b946:	3202      	adds	r2, #2
 800b948:	9900      	ldr	r1, [sp, #0]
 800b94a:	0092      	lsls	r2, r2, #2
 800b94c:	50d1      	str	r1, [r2, r3]
 800b94e:	f7fd fd32 	bl	80093b6 <__retarget_lock_release_recursive>
 800b952:	2000      	movs	r0, #0
 800b954:	e7dd      	b.n	800b912 <__register_exitproc+0x2e>
 800b956:	46c0      	nop			; (mov r8, r8)
 800b958:	200002bc 	.word	0x200002bc
 800b95c:	20000b34 	.word	0x20000b34
 800b960:	20000b6c 	.word	0x20000b6c

0800b964 <__assert_func>:
 800b964:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
 800b966:	0014      	movs	r4, r2
 800b968:	001a      	movs	r2, r3
 800b96a:	4b09      	ldr	r3, [pc, #36]	; (800b990 <__assert_func+0x2c>)
 800b96c:	0005      	movs	r5, r0
 800b96e:	681b      	ldr	r3, [r3, #0]
 800b970:	000e      	movs	r6, r1
 800b972:	68d8      	ldr	r0, [r3, #12]
 800b974:	4b07      	ldr	r3, [pc, #28]	; (800b994 <__assert_func+0x30>)
 800b976:	2c00      	cmp	r4, #0
 800b978:	d101      	bne.n	800b97e <__assert_func+0x1a>
 800b97a:	4b07      	ldr	r3, [pc, #28]	; (800b998 <__assert_func+0x34>)
 800b97c:	001c      	movs	r4, r3
 800b97e:	4907      	ldr	r1, [pc, #28]	; (800b99c <__assert_func+0x38>)
 800b980:	9301      	str	r3, [sp, #4]
 800b982:	9402      	str	r4, [sp, #8]
 800b984:	002b      	movs	r3, r5
 800b986:	9600      	str	r6, [sp, #0]
 800b988:	f000 fedc 	bl	800c744 <fiprintf>
 800b98c:	f001 fef0 	bl	800d770 <abort>
 800b990:	200002b8 	.word	0x200002b8
 800b994:	0800fbb8 	.word	0x0800fbb8
 800b998:	0800fbf3 	.word	0x0800fbf3
 800b99c:	0800fbc5 	.word	0x0800fbc5

0800b9a0 <_calloc_r>:
 800b9a0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b9a2:	2400      	movs	r4, #0
 800b9a4:	0c0b      	lsrs	r3, r1, #16
 800b9a6:	0c16      	lsrs	r6, r2, #16
 800b9a8:	42a3      	cmp	r3, r4
 800b9aa:	d133      	bne.n	800ba14 <_calloc_r+0x74>
 800b9ac:	42a6      	cmp	r6, r4
 800b9ae:	d121      	bne.n	800b9f4 <_calloc_r+0x54>
 800b9b0:	b28b      	uxth	r3, r1
 800b9b2:	b291      	uxth	r1, r2
 800b9b4:	4359      	muls	r1, r3
 800b9b6:	f7fd fe23 	bl	8009600 <_malloc_r>
 800b9ba:	1e05      	subs	r5, r0, #0
 800b9bc:	d033      	beq.n	800ba26 <_calloc_r+0x86>
 800b9be:	0003      	movs	r3, r0
 800b9c0:	3b08      	subs	r3, #8
 800b9c2:	685a      	ldr	r2, [r3, #4]
 800b9c4:	2303      	movs	r3, #3
 800b9c6:	439a      	bics	r2, r3
 800b9c8:	3a04      	subs	r2, #4
 800b9ca:	2a24      	cmp	r2, #36	; 0x24
 800b9cc:	d832      	bhi.n	800ba34 <_calloc_r+0x94>
 800b9ce:	0003      	movs	r3, r0
 800b9d0:	2a13      	cmp	r2, #19
 800b9d2:	d90a      	bls.n	800b9ea <_calloc_r+0x4a>
 800b9d4:	6004      	str	r4, [r0, #0]
 800b9d6:	6044      	str	r4, [r0, #4]
 800b9d8:	3308      	adds	r3, #8
 800b9da:	2a1b      	cmp	r2, #27
 800b9dc:	d905      	bls.n	800b9ea <_calloc_r+0x4a>
 800b9de:	6084      	str	r4, [r0, #8]
 800b9e0:	60c4      	str	r4, [r0, #12]
 800b9e2:	2a24      	cmp	r2, #36	; 0x24
 800b9e4:	d021      	beq.n	800ba2a <_calloc_r+0x8a>
 800b9e6:	0003      	movs	r3, r0
 800b9e8:	3310      	adds	r3, #16
 800b9ea:	2200      	movs	r2, #0
 800b9ec:	601a      	str	r2, [r3, #0]
 800b9ee:	605a      	str	r2, [r3, #4]
 800b9f0:	609a      	str	r2, [r3, #8]
 800b9f2:	e018      	b.n	800ba26 <_calloc_r+0x86>
 800b9f4:	1c33      	adds	r3, r6, #0
 800b9f6:	1c0d      	adds	r5, r1, #0
 800b9f8:	b289      	uxth	r1, r1
 800b9fa:	b292      	uxth	r2, r2
 800b9fc:	434a      	muls	r2, r1
 800b9fe:	b2ad      	uxth	r5, r5
 800ba00:	b299      	uxth	r1, r3
 800ba02:	4369      	muls	r1, r5
 800ba04:	0c13      	lsrs	r3, r2, #16
 800ba06:	18c9      	adds	r1, r1, r3
 800ba08:	0c0b      	lsrs	r3, r1, #16
 800ba0a:	d107      	bne.n	800ba1c <_calloc_r+0x7c>
 800ba0c:	0409      	lsls	r1, r1, #16
 800ba0e:	b292      	uxth	r2, r2
 800ba10:	4311      	orrs	r1, r2
 800ba12:	e7d0      	b.n	800b9b6 <_calloc_r+0x16>
 800ba14:	2e00      	cmp	r6, #0
 800ba16:	d101      	bne.n	800ba1c <_calloc_r+0x7c>
 800ba18:	1c15      	adds	r5, r2, #0
 800ba1a:	e7ed      	b.n	800b9f8 <_calloc_r+0x58>
 800ba1c:	f7fd fc9e 	bl	800935c <__errno>
 800ba20:	230c      	movs	r3, #12
 800ba22:	2500      	movs	r5, #0
 800ba24:	6003      	str	r3, [r0, #0]
 800ba26:	0028      	movs	r0, r5
 800ba28:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800ba2a:	0003      	movs	r3, r0
 800ba2c:	6104      	str	r4, [r0, #16]
 800ba2e:	3318      	adds	r3, #24
 800ba30:	6144      	str	r4, [r0, #20]
 800ba32:	e7da      	b.n	800b9ea <_calloc_r+0x4a>
 800ba34:	2100      	movs	r1, #0
 800ba36:	f7fd fc33 	bl	80092a0 <memset>
 800ba3a:	e7f4      	b.n	800ba26 <_calloc_r+0x86>

0800ba3c <quorem>:
 800ba3c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800ba3e:	6902      	ldr	r2, [r0, #16]
 800ba40:	690b      	ldr	r3, [r1, #16]
 800ba42:	b089      	sub	sp, #36	; 0x24
 800ba44:	0007      	movs	r7, r0
 800ba46:	9104      	str	r1, [sp, #16]
 800ba48:	2000      	movs	r0, #0
 800ba4a:	429a      	cmp	r2, r3
 800ba4c:	db69      	blt.n	800bb22 <quorem+0xe6>
 800ba4e:	3b01      	subs	r3, #1
 800ba50:	009c      	lsls	r4, r3, #2
 800ba52:	9301      	str	r3, [sp, #4]
 800ba54:	000b      	movs	r3, r1
 800ba56:	3314      	adds	r3, #20
 800ba58:	9306      	str	r3, [sp, #24]
 800ba5a:	191b      	adds	r3, r3, r4
 800ba5c:	9305      	str	r3, [sp, #20]
 800ba5e:	003b      	movs	r3, r7
 800ba60:	3314      	adds	r3, #20
 800ba62:	9303      	str	r3, [sp, #12]
 800ba64:	191c      	adds	r4, r3, r4
 800ba66:	9b05      	ldr	r3, [sp, #20]
 800ba68:	6826      	ldr	r6, [r4, #0]
 800ba6a:	681d      	ldr	r5, [r3, #0]
 800ba6c:	0030      	movs	r0, r6
 800ba6e:	3501      	adds	r5, #1
 800ba70:	0029      	movs	r1, r5
 800ba72:	f7f4 fb63 	bl	800013c <__udivsi3>
 800ba76:	9002      	str	r0, [sp, #8]
 800ba78:	42ae      	cmp	r6, r5
 800ba7a:	d329      	bcc.n	800bad0 <quorem+0x94>
 800ba7c:	9b06      	ldr	r3, [sp, #24]
 800ba7e:	2600      	movs	r6, #0
 800ba80:	469c      	mov	ip, r3
 800ba82:	9d03      	ldr	r5, [sp, #12]
 800ba84:	9606      	str	r6, [sp, #24]
 800ba86:	4662      	mov	r2, ip
 800ba88:	ca08      	ldmia	r2!, {r3}
 800ba8a:	6828      	ldr	r0, [r5, #0]
 800ba8c:	4694      	mov	ip, r2
 800ba8e:	9a02      	ldr	r2, [sp, #8]
 800ba90:	b299      	uxth	r1, r3
 800ba92:	4351      	muls	r1, r2
 800ba94:	0c1b      	lsrs	r3, r3, #16
 800ba96:	4353      	muls	r3, r2
 800ba98:	1989      	adds	r1, r1, r6
 800ba9a:	0c0a      	lsrs	r2, r1, #16
 800ba9c:	189b      	adds	r3, r3, r2
 800ba9e:	9307      	str	r3, [sp, #28]
 800baa0:	0c1e      	lsrs	r6, r3, #16
 800baa2:	9b06      	ldr	r3, [sp, #24]
 800baa4:	b282      	uxth	r2, r0
 800baa6:	18d2      	adds	r2, r2, r3
 800baa8:	466b      	mov	r3, sp
 800baaa:	b289      	uxth	r1, r1
 800baac:	8b9b      	ldrh	r3, [r3, #28]
 800baae:	1a52      	subs	r2, r2, r1
 800bab0:	0c01      	lsrs	r1, r0, #16
 800bab2:	1ac9      	subs	r1, r1, r3
 800bab4:	1413      	asrs	r3, r2, #16
 800bab6:	18cb      	adds	r3, r1, r3
 800bab8:	1419      	asrs	r1, r3, #16
 800baba:	b292      	uxth	r2, r2
 800babc:	041b      	lsls	r3, r3, #16
 800babe:	4313      	orrs	r3, r2
 800bac0:	c508      	stmia	r5!, {r3}
 800bac2:	9b05      	ldr	r3, [sp, #20]
 800bac4:	9106      	str	r1, [sp, #24]
 800bac6:	4563      	cmp	r3, ip
 800bac8:	d2dd      	bcs.n	800ba86 <quorem+0x4a>
 800baca:	6823      	ldr	r3, [r4, #0]
 800bacc:	2b00      	cmp	r3, #0
 800bace:	d030      	beq.n	800bb32 <quorem+0xf6>
 800bad0:	0038      	movs	r0, r7
 800bad2:	9904      	ldr	r1, [sp, #16]
 800bad4:	f7fe fa00 	bl	8009ed8 <__mcmp>
 800bad8:	2800      	cmp	r0, #0
 800bada:	db21      	blt.n	800bb20 <quorem+0xe4>
 800badc:	0038      	movs	r0, r7
 800bade:	2600      	movs	r6, #0
 800bae0:	9b02      	ldr	r3, [sp, #8]
 800bae2:	9c04      	ldr	r4, [sp, #16]
 800bae4:	3301      	adds	r3, #1
 800bae6:	9302      	str	r3, [sp, #8]
 800bae8:	3014      	adds	r0, #20
 800baea:	3414      	adds	r4, #20
 800baec:	6803      	ldr	r3, [r0, #0]
 800baee:	cc02      	ldmia	r4!, {r1}
 800baf0:	b29d      	uxth	r5, r3
 800baf2:	19ad      	adds	r5, r5, r6
 800baf4:	b28a      	uxth	r2, r1
 800baf6:	1aaa      	subs	r2, r5, r2
 800baf8:	0c09      	lsrs	r1, r1, #16
 800bafa:	0c1b      	lsrs	r3, r3, #16
 800bafc:	1a5b      	subs	r3, r3, r1
 800bafe:	1411      	asrs	r1, r2, #16
 800bb00:	185b      	adds	r3, r3, r1
 800bb02:	141e      	asrs	r6, r3, #16
 800bb04:	b292      	uxth	r2, r2
 800bb06:	041b      	lsls	r3, r3, #16
 800bb08:	4313      	orrs	r3, r2
 800bb0a:	c008      	stmia	r0!, {r3}
 800bb0c:	9b05      	ldr	r3, [sp, #20]
 800bb0e:	42a3      	cmp	r3, r4
 800bb10:	d2ec      	bcs.n	800baec <quorem+0xb0>
 800bb12:	9b01      	ldr	r3, [sp, #4]
 800bb14:	9a03      	ldr	r2, [sp, #12]
 800bb16:	009b      	lsls	r3, r3, #2
 800bb18:	18d3      	adds	r3, r2, r3
 800bb1a:	681a      	ldr	r2, [r3, #0]
 800bb1c:	2a00      	cmp	r2, #0
 800bb1e:	d015      	beq.n	800bb4c <quorem+0x110>
 800bb20:	9802      	ldr	r0, [sp, #8]
 800bb22:	b009      	add	sp, #36	; 0x24
 800bb24:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800bb26:	6823      	ldr	r3, [r4, #0]
 800bb28:	2b00      	cmp	r3, #0
 800bb2a:	d106      	bne.n	800bb3a <quorem+0xfe>
 800bb2c:	9b01      	ldr	r3, [sp, #4]
 800bb2e:	3b01      	subs	r3, #1
 800bb30:	9301      	str	r3, [sp, #4]
 800bb32:	9b03      	ldr	r3, [sp, #12]
 800bb34:	3c04      	subs	r4, #4
 800bb36:	42a3      	cmp	r3, r4
 800bb38:	d3f5      	bcc.n	800bb26 <quorem+0xea>
 800bb3a:	9b01      	ldr	r3, [sp, #4]
 800bb3c:	613b      	str	r3, [r7, #16]
 800bb3e:	e7c7      	b.n	800bad0 <quorem+0x94>
 800bb40:	681a      	ldr	r2, [r3, #0]
 800bb42:	2a00      	cmp	r2, #0
 800bb44:	d106      	bne.n	800bb54 <quorem+0x118>
 800bb46:	9a01      	ldr	r2, [sp, #4]
 800bb48:	3a01      	subs	r2, #1
 800bb4a:	9201      	str	r2, [sp, #4]
 800bb4c:	9a03      	ldr	r2, [sp, #12]
 800bb4e:	3b04      	subs	r3, #4
 800bb50:	429a      	cmp	r2, r3
 800bb52:	d3f5      	bcc.n	800bb40 <quorem+0x104>
 800bb54:	9b01      	ldr	r3, [sp, #4]
 800bb56:	613b      	str	r3, [r7, #16]
 800bb58:	e7e2      	b.n	800bb20 <quorem+0xe4>
	...

0800bb5c <_dtoa_r>:
 800bb5c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800bb5e:	0014      	movs	r4, r2
 800bb60:	001d      	movs	r5, r3
 800bb62:	6b81      	ldr	r1, [r0, #56]	; 0x38
 800bb64:	b09d      	sub	sp, #116	; 0x74
 800bb66:	9408      	str	r4, [sp, #32]
 800bb68:	9509      	str	r5, [sp, #36]	; 0x24
 800bb6a:	9e25      	ldr	r6, [sp, #148]	; 0x94
 800bb6c:	9004      	str	r0, [sp, #16]
 800bb6e:	2900      	cmp	r1, #0
 800bb70:	d009      	beq.n	800bb86 <_dtoa_r+0x2a>
 800bb72:	2301      	movs	r3, #1
 800bb74:	6bc2      	ldr	r2, [r0, #60]	; 0x3c
 800bb76:	4093      	lsls	r3, r2
 800bb78:	604a      	str	r2, [r1, #4]
 800bb7a:	608b      	str	r3, [r1, #8]
 800bb7c:	f7fd ff9e 	bl	8009abc <_Bfree>
 800bb80:	2300      	movs	r3, #0
 800bb82:	9a04      	ldr	r2, [sp, #16]
 800bb84:	6393      	str	r3, [r2, #56]	; 0x38
 800bb86:	2d00      	cmp	r5, #0
 800bb88:	da1e      	bge.n	800bbc8 <_dtoa_r+0x6c>
 800bb8a:	2301      	movs	r3, #1
 800bb8c:	6033      	str	r3, [r6, #0]
 800bb8e:	006b      	lsls	r3, r5, #1
 800bb90:	085b      	lsrs	r3, r3, #1
 800bb92:	9309      	str	r3, [sp, #36]	; 0x24
 800bb94:	9f09      	ldr	r7, [sp, #36]	; 0x24
 800bb96:	4bb5      	ldr	r3, [pc, #724]	; (800be6c <_dtoa_r+0x310>)
 800bb98:	4ab4      	ldr	r2, [pc, #720]	; (800be6c <_dtoa_r+0x310>)
 800bb9a:	403b      	ands	r3, r7
 800bb9c:	4293      	cmp	r3, r2
 800bb9e:	d116      	bne.n	800bbce <_dtoa_r+0x72>
 800bba0:	4bb3      	ldr	r3, [pc, #716]	; (800be70 <_dtoa_r+0x314>)
 800bba2:	9a24      	ldr	r2, [sp, #144]	; 0x90
 800bba4:	6013      	str	r3, [r2, #0]
 800bba6:	033b      	lsls	r3, r7, #12
 800bba8:	0b1b      	lsrs	r3, r3, #12
 800bbaa:	4323      	orrs	r3, r4
 800bbac:	d101      	bne.n	800bbb2 <_dtoa_r+0x56>
 800bbae:	f000 fdb2 	bl	800c716 <_dtoa_r+0xbba>
 800bbb2:	4bb0      	ldr	r3, [pc, #704]	; (800be74 <_dtoa_r+0x318>)
 800bbb4:	9a26      	ldr	r2, [sp, #152]	; 0x98
 800bbb6:	9306      	str	r3, [sp, #24]
 800bbb8:	2a00      	cmp	r2, #0
 800bbba:	d002      	beq.n	800bbc2 <_dtoa_r+0x66>
 800bbbc:	4bae      	ldr	r3, [pc, #696]	; (800be78 <_dtoa_r+0x31c>)
 800bbbe:	9a26      	ldr	r2, [sp, #152]	; 0x98
 800bbc0:	6013      	str	r3, [r2, #0]
 800bbc2:	9806      	ldr	r0, [sp, #24]
 800bbc4:	b01d      	add	sp, #116	; 0x74
 800bbc6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800bbc8:	2300      	movs	r3, #0
 800bbca:	6033      	str	r3, [r6, #0]
 800bbcc:	e7e2      	b.n	800bb94 <_dtoa_r+0x38>
 800bbce:	9a08      	ldr	r2, [sp, #32]
 800bbd0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800bbd2:	9210      	str	r2, [sp, #64]	; 0x40
 800bbd4:	9311      	str	r3, [sp, #68]	; 0x44
 800bbd6:	9810      	ldr	r0, [sp, #64]	; 0x40
 800bbd8:	9911      	ldr	r1, [sp, #68]	; 0x44
 800bbda:	2200      	movs	r2, #0
 800bbdc:	2300      	movs	r3, #0
 800bbde:	f7f4 fc33 	bl	8000448 <__aeabi_dcmpeq>
 800bbe2:	1e06      	subs	r6, r0, #0
 800bbe4:	d009      	beq.n	800bbfa <_dtoa_r+0x9e>
 800bbe6:	2301      	movs	r3, #1
 800bbe8:	9a24      	ldr	r2, [sp, #144]	; 0x90
 800bbea:	6013      	str	r3, [r2, #0]
 800bbec:	4ba3      	ldr	r3, [pc, #652]	; (800be7c <_dtoa_r+0x320>)
 800bbee:	9306      	str	r3, [sp, #24]
 800bbf0:	9b26      	ldr	r3, [sp, #152]	; 0x98
 800bbf2:	2b00      	cmp	r3, #0
 800bbf4:	d0e5      	beq.n	800bbc2 <_dtoa_r+0x66>
 800bbf6:	4ba2      	ldr	r3, [pc, #648]	; (800be80 <_dtoa_r+0x324>)
 800bbf8:	e7e1      	b.n	800bbbe <_dtoa_r+0x62>
 800bbfa:	ab1a      	add	r3, sp, #104	; 0x68
 800bbfc:	9301      	str	r3, [sp, #4]
 800bbfe:	ab1b      	add	r3, sp, #108	; 0x6c
 800bc00:	9300      	str	r3, [sp, #0]
 800bc02:	9804      	ldr	r0, [sp, #16]
 800bc04:	9a10      	ldr	r2, [sp, #64]	; 0x40
 800bc06:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800bc08:	f7fe fa1a 	bl	800a040 <__d2b>
 800bc0c:	007a      	lsls	r2, r7, #1
 800bc0e:	9005      	str	r0, [sp, #20]
 800bc10:	0d52      	lsrs	r2, r2, #21
 800bc12:	d100      	bne.n	800bc16 <_dtoa_r+0xba>
 800bc14:	e07b      	b.n	800bd0e <_dtoa_r+0x1b2>
 800bc16:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800bc18:	9617      	str	r6, [sp, #92]	; 0x5c
 800bc1a:	0319      	lsls	r1, r3, #12
 800bc1c:	4b99      	ldr	r3, [pc, #612]	; (800be84 <_dtoa_r+0x328>)
 800bc1e:	0b09      	lsrs	r1, r1, #12
 800bc20:	430b      	orrs	r3, r1
 800bc22:	4999      	ldr	r1, [pc, #612]	; (800be88 <_dtoa_r+0x32c>)
 800bc24:	1857      	adds	r7, r2, r1
 800bc26:	9810      	ldr	r0, [sp, #64]	; 0x40
 800bc28:	9911      	ldr	r1, [sp, #68]	; 0x44
 800bc2a:	0019      	movs	r1, r3
 800bc2c:	2200      	movs	r2, #0
 800bc2e:	4b97      	ldr	r3, [pc, #604]	; (800be8c <_dtoa_r+0x330>)
 800bc30:	f7f6 f8da 	bl	8001de8 <__aeabi_dsub>
 800bc34:	4a96      	ldr	r2, [pc, #600]	; (800be90 <_dtoa_r+0x334>)
 800bc36:	4b97      	ldr	r3, [pc, #604]	; (800be94 <_dtoa_r+0x338>)
 800bc38:	f7f5 fe14 	bl	8001864 <__aeabi_dmul>
 800bc3c:	4a96      	ldr	r2, [pc, #600]	; (800be98 <_dtoa_r+0x33c>)
 800bc3e:	4b97      	ldr	r3, [pc, #604]	; (800be9c <_dtoa_r+0x340>)
 800bc40:	f7f4 feb6 	bl	80009b0 <__aeabi_dadd>
 800bc44:	0004      	movs	r4, r0
 800bc46:	0038      	movs	r0, r7
 800bc48:	000d      	movs	r5, r1
 800bc4a:	f7f6 fca3 	bl	8002594 <__aeabi_i2d>
 800bc4e:	4a94      	ldr	r2, [pc, #592]	; (800bea0 <_dtoa_r+0x344>)
 800bc50:	4b94      	ldr	r3, [pc, #592]	; (800bea4 <_dtoa_r+0x348>)
 800bc52:	f7f5 fe07 	bl	8001864 <__aeabi_dmul>
 800bc56:	0002      	movs	r2, r0
 800bc58:	000b      	movs	r3, r1
 800bc5a:	0020      	movs	r0, r4
 800bc5c:	0029      	movs	r1, r5
 800bc5e:	f7f4 fea7 	bl	80009b0 <__aeabi_dadd>
 800bc62:	0004      	movs	r4, r0
 800bc64:	000d      	movs	r5, r1
 800bc66:	f7f6 fc5f 	bl	8002528 <__aeabi_d2iz>
 800bc6a:	2200      	movs	r2, #0
 800bc6c:	9003      	str	r0, [sp, #12]
 800bc6e:	2300      	movs	r3, #0
 800bc70:	0020      	movs	r0, r4
 800bc72:	0029      	movs	r1, r5
 800bc74:	f7f4 fbee 	bl	8000454 <__aeabi_dcmplt>
 800bc78:	2800      	cmp	r0, #0
 800bc7a:	d00b      	beq.n	800bc94 <_dtoa_r+0x138>
 800bc7c:	9803      	ldr	r0, [sp, #12]
 800bc7e:	f7f6 fc89 	bl	8002594 <__aeabi_i2d>
 800bc82:	002b      	movs	r3, r5
 800bc84:	0022      	movs	r2, r4
 800bc86:	f7f4 fbdf 	bl	8000448 <__aeabi_dcmpeq>
 800bc8a:	4243      	negs	r3, r0
 800bc8c:	4158      	adcs	r0, r3
 800bc8e:	9b03      	ldr	r3, [sp, #12]
 800bc90:	1a1b      	subs	r3, r3, r0
 800bc92:	9303      	str	r3, [sp, #12]
 800bc94:	2301      	movs	r3, #1
 800bc96:	9316      	str	r3, [sp, #88]	; 0x58
 800bc98:	9b03      	ldr	r3, [sp, #12]
 800bc9a:	2b16      	cmp	r3, #22
 800bc9c:	d810      	bhi.n	800bcc0 <_dtoa_r+0x164>
 800bc9e:	9810      	ldr	r0, [sp, #64]	; 0x40
 800bca0:	9911      	ldr	r1, [sp, #68]	; 0x44
 800bca2:	9a03      	ldr	r2, [sp, #12]
 800bca4:	4b80      	ldr	r3, [pc, #512]	; (800bea8 <_dtoa_r+0x34c>)
 800bca6:	00d2      	lsls	r2, r2, #3
 800bca8:	189b      	adds	r3, r3, r2
 800bcaa:	681a      	ldr	r2, [r3, #0]
 800bcac:	685b      	ldr	r3, [r3, #4]
 800bcae:	f7f4 fbd1 	bl	8000454 <__aeabi_dcmplt>
 800bcb2:	2800      	cmp	r0, #0
 800bcb4:	d047      	beq.n	800bd46 <_dtoa_r+0x1ea>
 800bcb6:	9b03      	ldr	r3, [sp, #12]
 800bcb8:	3b01      	subs	r3, #1
 800bcba:	9303      	str	r3, [sp, #12]
 800bcbc:	2300      	movs	r3, #0
 800bcbe:	9316      	str	r3, [sp, #88]	; 0x58
 800bcc0:	2200      	movs	r2, #0
 800bcc2:	9b1a      	ldr	r3, [sp, #104]	; 0x68
 800bcc4:	920a      	str	r2, [sp, #40]	; 0x28
 800bcc6:	1bdb      	subs	r3, r3, r7
 800bcc8:	1e5a      	subs	r2, r3, #1
 800bcca:	d53e      	bpl.n	800bd4a <_dtoa_r+0x1ee>
 800bccc:	2201      	movs	r2, #1
 800bcce:	1ad3      	subs	r3, r2, r3
 800bcd0:	930a      	str	r3, [sp, #40]	; 0x28
 800bcd2:	2300      	movs	r3, #0
 800bcd4:	930c      	str	r3, [sp, #48]	; 0x30
 800bcd6:	9b03      	ldr	r3, [sp, #12]
 800bcd8:	2b00      	cmp	r3, #0
 800bcda:	db38      	blt.n	800bd4e <_dtoa_r+0x1f2>
 800bcdc:	9a03      	ldr	r2, [sp, #12]
 800bcde:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800bce0:	4694      	mov	ip, r2
 800bce2:	4463      	add	r3, ip
 800bce4:	930c      	str	r3, [sp, #48]	; 0x30
 800bce6:	2300      	movs	r3, #0
 800bce8:	9213      	str	r2, [sp, #76]	; 0x4c
 800bcea:	930d      	str	r3, [sp, #52]	; 0x34
 800bcec:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800bcee:	2401      	movs	r4, #1
 800bcf0:	2b09      	cmp	r3, #9
 800bcf2:	d867      	bhi.n	800bdc4 <_dtoa_r+0x268>
 800bcf4:	2b05      	cmp	r3, #5
 800bcf6:	dd02      	ble.n	800bcfe <_dtoa_r+0x1a2>
 800bcf8:	2400      	movs	r4, #0
 800bcfa:	3b04      	subs	r3, #4
 800bcfc:	9322      	str	r3, [sp, #136]	; 0x88
 800bcfe:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800bd00:	1e98      	subs	r0, r3, #2
 800bd02:	2803      	cmp	r0, #3
 800bd04:	d867      	bhi.n	800bdd6 <_dtoa_r+0x27a>
 800bd06:	f7f4 fa05 	bl	8000114 <__gnu_thumb1_case_uqi>
 800bd0a:	3a2b      	.short	0x3a2b
 800bd0c:	5b38      	.short	0x5b38
 800bd0e:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800bd10:	9e1a      	ldr	r6, [sp, #104]	; 0x68
 800bd12:	18f6      	adds	r6, r6, r3
 800bd14:	4b65      	ldr	r3, [pc, #404]	; (800beac <_dtoa_r+0x350>)
 800bd16:	18f2      	adds	r2, r6, r3
 800bd18:	2a20      	cmp	r2, #32
 800bd1a:	dd0f      	ble.n	800bd3c <_dtoa_r+0x1e0>
 800bd1c:	2340      	movs	r3, #64	; 0x40
 800bd1e:	1a9b      	subs	r3, r3, r2
 800bd20:	409f      	lsls	r7, r3
 800bd22:	4b63      	ldr	r3, [pc, #396]	; (800beb0 <_dtoa_r+0x354>)
 800bd24:	0038      	movs	r0, r7
 800bd26:	18f3      	adds	r3, r6, r3
 800bd28:	40dc      	lsrs	r4, r3
 800bd2a:	4320      	orrs	r0, r4
 800bd2c:	f7f6 fc62 	bl	80025f4 <__aeabi_ui2d>
 800bd30:	2201      	movs	r2, #1
 800bd32:	4b60      	ldr	r3, [pc, #384]	; (800beb4 <_dtoa_r+0x358>)
 800bd34:	1e77      	subs	r7, r6, #1
 800bd36:	18cb      	adds	r3, r1, r3
 800bd38:	9217      	str	r2, [sp, #92]	; 0x5c
 800bd3a:	e776      	b.n	800bc2a <_dtoa_r+0xce>
 800bd3c:	2320      	movs	r3, #32
 800bd3e:	0020      	movs	r0, r4
 800bd40:	1a9b      	subs	r3, r3, r2
 800bd42:	4098      	lsls	r0, r3
 800bd44:	e7f2      	b.n	800bd2c <_dtoa_r+0x1d0>
 800bd46:	9016      	str	r0, [sp, #88]	; 0x58
 800bd48:	e7ba      	b.n	800bcc0 <_dtoa_r+0x164>
 800bd4a:	920c      	str	r2, [sp, #48]	; 0x30
 800bd4c:	e7c3      	b.n	800bcd6 <_dtoa_r+0x17a>
 800bd4e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800bd50:	9a03      	ldr	r2, [sp, #12]
 800bd52:	1a9b      	subs	r3, r3, r2
 800bd54:	930a      	str	r3, [sp, #40]	; 0x28
 800bd56:	4253      	negs	r3, r2
 800bd58:	930d      	str	r3, [sp, #52]	; 0x34
 800bd5a:	2300      	movs	r3, #0
 800bd5c:	9313      	str	r3, [sp, #76]	; 0x4c
 800bd5e:	e7c5      	b.n	800bcec <_dtoa_r+0x190>
 800bd60:	2300      	movs	r3, #0
 800bd62:	930f      	str	r3, [sp, #60]	; 0x3c
 800bd64:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 800bd66:	930b      	str	r3, [sp, #44]	; 0x2c
 800bd68:	9307      	str	r3, [sp, #28]
 800bd6a:	2b00      	cmp	r3, #0
 800bd6c:	dc13      	bgt.n	800bd96 <_dtoa_r+0x23a>
 800bd6e:	2301      	movs	r3, #1
 800bd70:	001a      	movs	r2, r3
 800bd72:	930b      	str	r3, [sp, #44]	; 0x2c
 800bd74:	9307      	str	r3, [sp, #28]
 800bd76:	9223      	str	r2, [sp, #140]	; 0x8c
 800bd78:	e00d      	b.n	800bd96 <_dtoa_r+0x23a>
 800bd7a:	2301      	movs	r3, #1
 800bd7c:	e7f1      	b.n	800bd62 <_dtoa_r+0x206>
 800bd7e:	2300      	movs	r3, #0
 800bd80:	9a23      	ldr	r2, [sp, #140]	; 0x8c
 800bd82:	930f      	str	r3, [sp, #60]	; 0x3c
 800bd84:	4694      	mov	ip, r2
 800bd86:	9b03      	ldr	r3, [sp, #12]
 800bd88:	4463      	add	r3, ip
 800bd8a:	930b      	str	r3, [sp, #44]	; 0x2c
 800bd8c:	3301      	adds	r3, #1
 800bd8e:	9307      	str	r3, [sp, #28]
 800bd90:	2b00      	cmp	r3, #0
 800bd92:	dc00      	bgt.n	800bd96 <_dtoa_r+0x23a>
 800bd94:	2301      	movs	r3, #1
 800bd96:	2100      	movs	r1, #0
 800bd98:	2204      	movs	r2, #4
 800bd9a:	0010      	movs	r0, r2
 800bd9c:	3014      	adds	r0, #20
 800bd9e:	4298      	cmp	r0, r3
 800bda0:	d91d      	bls.n	800bdde <_dtoa_r+0x282>
 800bda2:	9b04      	ldr	r3, [sp, #16]
 800bda4:	0018      	movs	r0, r3
 800bda6:	63d9      	str	r1, [r3, #60]	; 0x3c
 800bda8:	f7fd fe60 	bl	8009a6c <_Balloc>
 800bdac:	9006      	str	r0, [sp, #24]
 800bdae:	2800      	cmp	r0, #0
 800bdb0:	d118      	bne.n	800bde4 <_dtoa_r+0x288>
 800bdb2:	21b0      	movs	r1, #176	; 0xb0
 800bdb4:	4b40      	ldr	r3, [pc, #256]	; (800beb8 <_dtoa_r+0x35c>)
 800bdb6:	4841      	ldr	r0, [pc, #260]	; (800bebc <_dtoa_r+0x360>)
 800bdb8:	9a06      	ldr	r2, [sp, #24]
 800bdba:	31ff      	adds	r1, #255	; 0xff
 800bdbc:	f7ff fdd2 	bl	800b964 <__assert_func>
 800bdc0:	2301      	movs	r3, #1
 800bdc2:	e7dd      	b.n	800bd80 <_dtoa_r+0x224>
 800bdc4:	2300      	movs	r3, #0
 800bdc6:	940f      	str	r4, [sp, #60]	; 0x3c
 800bdc8:	9322      	str	r3, [sp, #136]	; 0x88
 800bdca:	3b01      	subs	r3, #1
 800bdcc:	930b      	str	r3, [sp, #44]	; 0x2c
 800bdce:	9307      	str	r3, [sp, #28]
 800bdd0:	2200      	movs	r2, #0
 800bdd2:	3313      	adds	r3, #19
 800bdd4:	e7cf      	b.n	800bd76 <_dtoa_r+0x21a>
 800bdd6:	2301      	movs	r3, #1
 800bdd8:	930f      	str	r3, [sp, #60]	; 0x3c
 800bdda:	3b02      	subs	r3, #2
 800bddc:	e7f6      	b.n	800bdcc <_dtoa_r+0x270>
 800bdde:	3101      	adds	r1, #1
 800bde0:	0052      	lsls	r2, r2, #1
 800bde2:	e7da      	b.n	800bd9a <_dtoa_r+0x23e>
 800bde4:	9b04      	ldr	r3, [sp, #16]
 800bde6:	9a06      	ldr	r2, [sp, #24]
 800bde8:	639a      	str	r2, [r3, #56]	; 0x38
 800bdea:	9b07      	ldr	r3, [sp, #28]
 800bdec:	2b0e      	cmp	r3, #14
 800bdee:	d900      	bls.n	800bdf2 <_dtoa_r+0x296>
 800bdf0:	e0e3      	b.n	800bfba <_dtoa_r+0x45e>
 800bdf2:	2c00      	cmp	r4, #0
 800bdf4:	d100      	bne.n	800bdf8 <_dtoa_r+0x29c>
 800bdf6:	e0e0      	b.n	800bfba <_dtoa_r+0x45e>
 800bdf8:	9b03      	ldr	r3, [sp, #12]
 800bdfa:	2b00      	cmp	r3, #0
 800bdfc:	dd62      	ble.n	800bec4 <_dtoa_r+0x368>
 800bdfe:	210f      	movs	r1, #15
 800be00:	9a03      	ldr	r2, [sp, #12]
 800be02:	4b29      	ldr	r3, [pc, #164]	; (800bea8 <_dtoa_r+0x34c>)
 800be04:	400a      	ands	r2, r1
 800be06:	00d2      	lsls	r2, r2, #3
 800be08:	189b      	adds	r3, r3, r2
 800be0a:	681e      	ldr	r6, [r3, #0]
 800be0c:	685f      	ldr	r7, [r3, #4]
 800be0e:	9b03      	ldr	r3, [sp, #12]
 800be10:	2402      	movs	r4, #2
 800be12:	111d      	asrs	r5, r3, #4
 800be14:	05db      	lsls	r3, r3, #23
 800be16:	d50a      	bpl.n	800be2e <_dtoa_r+0x2d2>
 800be18:	4b29      	ldr	r3, [pc, #164]	; (800bec0 <_dtoa_r+0x364>)
 800be1a:	400d      	ands	r5, r1
 800be1c:	6a1a      	ldr	r2, [r3, #32]
 800be1e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800be20:	9810      	ldr	r0, [sp, #64]	; 0x40
 800be22:	9911      	ldr	r1, [sp, #68]	; 0x44
 800be24:	f7f5 f924 	bl	8001070 <__aeabi_ddiv>
 800be28:	9008      	str	r0, [sp, #32]
 800be2a:	9109      	str	r1, [sp, #36]	; 0x24
 800be2c:	3401      	adds	r4, #1
 800be2e:	4b24      	ldr	r3, [pc, #144]	; (800bec0 <_dtoa_r+0x364>)
 800be30:	930e      	str	r3, [sp, #56]	; 0x38
 800be32:	2d00      	cmp	r5, #0
 800be34:	d108      	bne.n	800be48 <_dtoa_r+0x2ec>
 800be36:	9808      	ldr	r0, [sp, #32]
 800be38:	9909      	ldr	r1, [sp, #36]	; 0x24
 800be3a:	0032      	movs	r2, r6
 800be3c:	003b      	movs	r3, r7
 800be3e:	f7f5 f917 	bl	8001070 <__aeabi_ddiv>
 800be42:	9008      	str	r0, [sp, #32]
 800be44:	9109      	str	r1, [sp, #36]	; 0x24
 800be46:	e058      	b.n	800befa <_dtoa_r+0x39e>
 800be48:	2301      	movs	r3, #1
 800be4a:	421d      	tst	r5, r3
 800be4c:	d009      	beq.n	800be62 <_dtoa_r+0x306>
 800be4e:	18e4      	adds	r4, r4, r3
 800be50:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800be52:	0030      	movs	r0, r6
 800be54:	681a      	ldr	r2, [r3, #0]
 800be56:	685b      	ldr	r3, [r3, #4]
 800be58:	0039      	movs	r1, r7
 800be5a:	f7f5 fd03 	bl	8001864 <__aeabi_dmul>
 800be5e:	0006      	movs	r6, r0
 800be60:	000f      	movs	r7, r1
 800be62:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800be64:	106d      	asrs	r5, r5, #1
 800be66:	3308      	adds	r3, #8
 800be68:	e7e2      	b.n	800be30 <_dtoa_r+0x2d4>
 800be6a:	46c0      	nop			; (mov r8, r8)
 800be6c:	7ff00000 	.word	0x7ff00000
 800be70:	0000270f 	.word	0x0000270f
 800be74:	0800fbfd 	.word	0x0800fbfd
 800be78:	0800fc00 	.word	0x0800fc00
 800be7c:	0800fb96 	.word	0x0800fb96
 800be80:	0800fb97 	.word	0x0800fb97
 800be84:	3ff00000 	.word	0x3ff00000
 800be88:	fffffc01 	.word	0xfffffc01
 800be8c:	3ff80000 	.word	0x3ff80000
 800be90:	636f4361 	.word	0x636f4361
 800be94:	3fd287a7 	.word	0x3fd287a7
 800be98:	8b60c8b3 	.word	0x8b60c8b3
 800be9c:	3fc68a28 	.word	0x3fc68a28
 800bea0:	509f79fb 	.word	0x509f79fb
 800bea4:	3fd34413 	.word	0x3fd34413
 800bea8:	0800fa90 	.word	0x0800fa90
 800beac:	00000432 	.word	0x00000432
 800beb0:	00000412 	.word	0x00000412
 800beb4:	fe100000 	.word	0xfe100000
 800beb8:	0800f9f7 	.word	0x0800f9f7
 800bebc:	0800fc01 	.word	0x0800fc01
 800bec0:	0800fa68 	.word	0x0800fa68
 800bec4:	9b03      	ldr	r3, [sp, #12]
 800bec6:	2402      	movs	r4, #2
 800bec8:	2b00      	cmp	r3, #0
 800beca:	d016      	beq.n	800befa <_dtoa_r+0x39e>
 800becc:	9810      	ldr	r0, [sp, #64]	; 0x40
 800bece:	9911      	ldr	r1, [sp, #68]	; 0x44
 800bed0:	220f      	movs	r2, #15
 800bed2:	425d      	negs	r5, r3
 800bed4:	402a      	ands	r2, r5
 800bed6:	4bdd      	ldr	r3, [pc, #884]	; (800c24c <_dtoa_r+0x6f0>)
 800bed8:	00d2      	lsls	r2, r2, #3
 800beda:	189b      	adds	r3, r3, r2
 800bedc:	681a      	ldr	r2, [r3, #0]
 800bede:	685b      	ldr	r3, [r3, #4]
 800bee0:	f7f5 fcc0 	bl	8001864 <__aeabi_dmul>
 800bee4:	2701      	movs	r7, #1
 800bee6:	2300      	movs	r3, #0
 800bee8:	9008      	str	r0, [sp, #32]
 800beea:	9109      	str	r1, [sp, #36]	; 0x24
 800beec:	4ed8      	ldr	r6, [pc, #864]	; (800c250 <_dtoa_r+0x6f4>)
 800beee:	112d      	asrs	r5, r5, #4
 800bef0:	2d00      	cmp	r5, #0
 800bef2:	d000      	beq.n	800bef6 <_dtoa_r+0x39a>
 800bef4:	e091      	b.n	800c01a <_dtoa_r+0x4be>
 800bef6:	2b00      	cmp	r3, #0
 800bef8:	d1a3      	bne.n	800be42 <_dtoa_r+0x2e6>
 800befa:	9e08      	ldr	r6, [sp, #32]
 800befc:	9f09      	ldr	r7, [sp, #36]	; 0x24
 800befe:	9b16      	ldr	r3, [sp, #88]	; 0x58
 800bf00:	2b00      	cmp	r3, #0
 800bf02:	d100      	bne.n	800bf06 <_dtoa_r+0x3aa>
 800bf04:	e094      	b.n	800c030 <_dtoa_r+0x4d4>
 800bf06:	2200      	movs	r2, #0
 800bf08:	0030      	movs	r0, r6
 800bf0a:	0039      	movs	r1, r7
 800bf0c:	4bd1      	ldr	r3, [pc, #836]	; (800c254 <_dtoa_r+0x6f8>)
 800bf0e:	f7f4 faa1 	bl	8000454 <__aeabi_dcmplt>
 800bf12:	2800      	cmp	r0, #0
 800bf14:	d100      	bne.n	800bf18 <_dtoa_r+0x3bc>
 800bf16:	e08b      	b.n	800c030 <_dtoa_r+0x4d4>
 800bf18:	9b07      	ldr	r3, [sp, #28]
 800bf1a:	2b00      	cmp	r3, #0
 800bf1c:	d100      	bne.n	800bf20 <_dtoa_r+0x3c4>
 800bf1e:	e087      	b.n	800c030 <_dtoa_r+0x4d4>
 800bf20:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800bf22:	2b00      	cmp	r3, #0
 800bf24:	dd45      	ble.n	800bfb2 <_dtoa_r+0x456>
 800bf26:	9b03      	ldr	r3, [sp, #12]
 800bf28:	2200      	movs	r2, #0
 800bf2a:	3b01      	subs	r3, #1
 800bf2c:	930e      	str	r3, [sp, #56]	; 0x38
 800bf2e:	0030      	movs	r0, r6
 800bf30:	4bc9      	ldr	r3, [pc, #804]	; (800c258 <_dtoa_r+0x6fc>)
 800bf32:	0039      	movs	r1, r7
 800bf34:	f7f5 fc96 	bl	8001864 <__aeabi_dmul>
 800bf38:	9008      	str	r0, [sp, #32]
 800bf3a:	9109      	str	r1, [sp, #36]	; 0x24
 800bf3c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800bf3e:	3401      	adds	r4, #1
 800bf40:	0020      	movs	r0, r4
 800bf42:	9e08      	ldr	r6, [sp, #32]
 800bf44:	9f09      	ldr	r7, [sp, #36]	; 0x24
 800bf46:	9312      	str	r3, [sp, #72]	; 0x48
 800bf48:	f7f6 fb24 	bl	8002594 <__aeabi_i2d>
 800bf4c:	0032      	movs	r2, r6
 800bf4e:	003b      	movs	r3, r7
 800bf50:	f7f5 fc88 	bl	8001864 <__aeabi_dmul>
 800bf54:	2200      	movs	r2, #0
 800bf56:	4bc1      	ldr	r3, [pc, #772]	; (800c25c <_dtoa_r+0x700>)
 800bf58:	f7f4 fd2a 	bl	80009b0 <__aeabi_dadd>
 800bf5c:	4ac0      	ldr	r2, [pc, #768]	; (800c260 <_dtoa_r+0x704>)
 800bf5e:	9014      	str	r0, [sp, #80]	; 0x50
 800bf60:	9115      	str	r1, [sp, #84]	; 0x54
 800bf62:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800bf64:	9c15      	ldr	r4, [sp, #84]	; 0x54
 800bf66:	4694      	mov	ip, r2
 800bf68:	9308      	str	r3, [sp, #32]
 800bf6a:	9409      	str	r4, [sp, #36]	; 0x24
 800bf6c:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800bf6e:	4463      	add	r3, ip
 800bf70:	9318      	str	r3, [sp, #96]	; 0x60
 800bf72:	9309      	str	r3, [sp, #36]	; 0x24
 800bf74:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800bf76:	2b00      	cmp	r3, #0
 800bf78:	d15e      	bne.n	800c038 <_dtoa_r+0x4dc>
 800bf7a:	2200      	movs	r2, #0
 800bf7c:	4bb9      	ldr	r3, [pc, #740]	; (800c264 <_dtoa_r+0x708>)
 800bf7e:	0030      	movs	r0, r6
 800bf80:	0039      	movs	r1, r7
 800bf82:	f7f5 ff31 	bl	8001de8 <__aeabi_dsub>
 800bf86:	9a08      	ldr	r2, [sp, #32]
 800bf88:	9b18      	ldr	r3, [sp, #96]	; 0x60
 800bf8a:	0004      	movs	r4, r0
 800bf8c:	000d      	movs	r5, r1
 800bf8e:	f7f4 fa75 	bl	800047c <__aeabi_dcmpgt>
 800bf92:	2800      	cmp	r0, #0
 800bf94:	d000      	beq.n	800bf98 <_dtoa_r+0x43c>
 800bf96:	e2b3      	b.n	800c500 <_dtoa_r+0x9a4>
 800bf98:	48b3      	ldr	r0, [pc, #716]	; (800c268 <_dtoa_r+0x70c>)
 800bf9a:	9915      	ldr	r1, [sp, #84]	; 0x54
 800bf9c:	4684      	mov	ip, r0
 800bf9e:	4461      	add	r1, ip
 800bfa0:	000b      	movs	r3, r1
 800bfa2:	0020      	movs	r0, r4
 800bfa4:	0029      	movs	r1, r5
 800bfa6:	9a08      	ldr	r2, [sp, #32]
 800bfa8:	f7f4 fa54 	bl	8000454 <__aeabi_dcmplt>
 800bfac:	2800      	cmp	r0, #0
 800bfae:	d000      	beq.n	800bfb2 <_dtoa_r+0x456>
 800bfb0:	e2a3      	b.n	800c4fa <_dtoa_r+0x99e>
 800bfb2:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800bfb4:	9c11      	ldr	r4, [sp, #68]	; 0x44
 800bfb6:	9308      	str	r3, [sp, #32]
 800bfb8:	9409      	str	r4, [sp, #36]	; 0x24
 800bfba:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800bfbc:	2b00      	cmp	r3, #0
 800bfbe:	da00      	bge.n	800bfc2 <_dtoa_r+0x466>
 800bfc0:	e179      	b.n	800c2b6 <_dtoa_r+0x75a>
 800bfc2:	9a03      	ldr	r2, [sp, #12]
 800bfc4:	2a0e      	cmp	r2, #14
 800bfc6:	dd00      	ble.n	800bfca <_dtoa_r+0x46e>
 800bfc8:	e175      	b.n	800c2b6 <_dtoa_r+0x75a>
 800bfca:	4ba0      	ldr	r3, [pc, #640]	; (800c24c <_dtoa_r+0x6f0>)
 800bfcc:	00d2      	lsls	r2, r2, #3
 800bfce:	189b      	adds	r3, r3, r2
 800bfd0:	681e      	ldr	r6, [r3, #0]
 800bfd2:	685f      	ldr	r7, [r3, #4]
 800bfd4:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 800bfd6:	2b00      	cmp	r3, #0
 800bfd8:	db00      	blt.n	800bfdc <_dtoa_r+0x480>
 800bfda:	e0e5      	b.n	800c1a8 <_dtoa_r+0x64c>
 800bfdc:	9b07      	ldr	r3, [sp, #28]
 800bfde:	2b00      	cmp	r3, #0
 800bfe0:	dd00      	ble.n	800bfe4 <_dtoa_r+0x488>
 800bfe2:	e0e1      	b.n	800c1a8 <_dtoa_r+0x64c>
 800bfe4:	d000      	beq.n	800bfe8 <_dtoa_r+0x48c>
 800bfe6:	e288      	b.n	800c4fa <_dtoa_r+0x99e>
 800bfe8:	2200      	movs	r2, #0
 800bfea:	0030      	movs	r0, r6
 800bfec:	0039      	movs	r1, r7
 800bfee:	4b9d      	ldr	r3, [pc, #628]	; (800c264 <_dtoa_r+0x708>)
 800bff0:	f7f5 fc38 	bl	8001864 <__aeabi_dmul>
 800bff4:	9a08      	ldr	r2, [sp, #32]
 800bff6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800bff8:	f7f4 fa4a 	bl	8000490 <__aeabi_dcmpge>
 800bffc:	9e07      	ldr	r6, [sp, #28]
 800bffe:	0037      	movs	r7, r6
 800c000:	2800      	cmp	r0, #0
 800c002:	d000      	beq.n	800c006 <_dtoa_r+0x4aa>
 800c004:	e25f      	b.n	800c4c6 <_dtoa_r+0x96a>
 800c006:	9b06      	ldr	r3, [sp, #24]
 800c008:	9a06      	ldr	r2, [sp, #24]
 800c00a:	3301      	adds	r3, #1
 800c00c:	9308      	str	r3, [sp, #32]
 800c00e:	2331      	movs	r3, #49	; 0x31
 800c010:	7013      	strb	r3, [r2, #0]
 800c012:	9b03      	ldr	r3, [sp, #12]
 800c014:	3301      	adds	r3, #1
 800c016:	9303      	str	r3, [sp, #12]
 800c018:	e25a      	b.n	800c4d0 <_dtoa_r+0x974>
 800c01a:	423d      	tst	r5, r7
 800c01c:	d005      	beq.n	800c02a <_dtoa_r+0x4ce>
 800c01e:	6832      	ldr	r2, [r6, #0]
 800c020:	6873      	ldr	r3, [r6, #4]
 800c022:	f7f5 fc1f 	bl	8001864 <__aeabi_dmul>
 800c026:	003b      	movs	r3, r7
 800c028:	3401      	adds	r4, #1
 800c02a:	106d      	asrs	r5, r5, #1
 800c02c:	3608      	adds	r6, #8
 800c02e:	e75f      	b.n	800bef0 <_dtoa_r+0x394>
 800c030:	9b03      	ldr	r3, [sp, #12]
 800c032:	930e      	str	r3, [sp, #56]	; 0x38
 800c034:	9b07      	ldr	r3, [sp, #28]
 800c036:	e783      	b.n	800bf40 <_dtoa_r+0x3e4>
 800c038:	9a12      	ldr	r2, [sp, #72]	; 0x48
 800c03a:	4b84      	ldr	r3, [pc, #528]	; (800c24c <_dtoa_r+0x6f0>)
 800c03c:	3a01      	subs	r2, #1
 800c03e:	00d2      	lsls	r2, r2, #3
 800c040:	990f      	ldr	r1, [sp, #60]	; 0x3c
 800c042:	189b      	adds	r3, r3, r2
 800c044:	9c08      	ldr	r4, [sp, #32]
 800c046:	9d09      	ldr	r5, [sp, #36]	; 0x24
 800c048:	681a      	ldr	r2, [r3, #0]
 800c04a:	685b      	ldr	r3, [r3, #4]
 800c04c:	2900      	cmp	r1, #0
 800c04e:	d051      	beq.n	800c0f4 <_dtoa_r+0x598>
 800c050:	2000      	movs	r0, #0
 800c052:	4986      	ldr	r1, [pc, #536]	; (800c26c <_dtoa_r+0x710>)
 800c054:	f7f5 f80c 	bl	8001070 <__aeabi_ddiv>
 800c058:	0022      	movs	r2, r4
 800c05a:	002b      	movs	r3, r5
 800c05c:	f7f5 fec4 	bl	8001de8 <__aeabi_dsub>
 800c060:	9a06      	ldr	r2, [sp, #24]
 800c062:	0004      	movs	r4, r0
 800c064:	4694      	mov	ip, r2
 800c066:	000d      	movs	r5, r1
 800c068:	9b06      	ldr	r3, [sp, #24]
 800c06a:	9314      	str	r3, [sp, #80]	; 0x50
 800c06c:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800c06e:	4463      	add	r3, ip
 800c070:	9318      	str	r3, [sp, #96]	; 0x60
 800c072:	0039      	movs	r1, r7
 800c074:	0030      	movs	r0, r6
 800c076:	f7f6 fa57 	bl	8002528 <__aeabi_d2iz>
 800c07a:	9012      	str	r0, [sp, #72]	; 0x48
 800c07c:	f7f6 fa8a 	bl	8002594 <__aeabi_i2d>
 800c080:	0002      	movs	r2, r0
 800c082:	000b      	movs	r3, r1
 800c084:	0030      	movs	r0, r6
 800c086:	0039      	movs	r1, r7
 800c088:	f7f5 feae 	bl	8001de8 <__aeabi_dsub>
 800c08c:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800c08e:	9a14      	ldr	r2, [sp, #80]	; 0x50
 800c090:	3301      	adds	r3, #1
 800c092:	9308      	str	r3, [sp, #32]
 800c094:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800c096:	0006      	movs	r6, r0
 800c098:	3330      	adds	r3, #48	; 0x30
 800c09a:	7013      	strb	r3, [r2, #0]
 800c09c:	0022      	movs	r2, r4
 800c09e:	002b      	movs	r3, r5
 800c0a0:	000f      	movs	r7, r1
 800c0a2:	f7f4 f9d7 	bl	8000454 <__aeabi_dcmplt>
 800c0a6:	2800      	cmp	r0, #0
 800c0a8:	d174      	bne.n	800c194 <_dtoa_r+0x638>
 800c0aa:	0032      	movs	r2, r6
 800c0ac:	003b      	movs	r3, r7
 800c0ae:	2000      	movs	r0, #0
 800c0b0:	4968      	ldr	r1, [pc, #416]	; (800c254 <_dtoa_r+0x6f8>)
 800c0b2:	f7f5 fe99 	bl	8001de8 <__aeabi_dsub>
 800c0b6:	0022      	movs	r2, r4
 800c0b8:	002b      	movs	r3, r5
 800c0ba:	f7f4 f9cb 	bl	8000454 <__aeabi_dcmplt>
 800c0be:	2800      	cmp	r0, #0
 800c0c0:	d000      	beq.n	800c0c4 <_dtoa_r+0x568>
 800c0c2:	e0d7      	b.n	800c274 <_dtoa_r+0x718>
 800c0c4:	9b18      	ldr	r3, [sp, #96]	; 0x60
 800c0c6:	9a08      	ldr	r2, [sp, #32]
 800c0c8:	4293      	cmp	r3, r2
 800c0ca:	d100      	bne.n	800c0ce <_dtoa_r+0x572>
 800c0cc:	e771      	b.n	800bfb2 <_dtoa_r+0x456>
 800c0ce:	2200      	movs	r2, #0
 800c0d0:	0020      	movs	r0, r4
 800c0d2:	0029      	movs	r1, r5
 800c0d4:	4b60      	ldr	r3, [pc, #384]	; (800c258 <_dtoa_r+0x6fc>)
 800c0d6:	f7f5 fbc5 	bl	8001864 <__aeabi_dmul>
 800c0da:	4b5f      	ldr	r3, [pc, #380]	; (800c258 <_dtoa_r+0x6fc>)
 800c0dc:	0004      	movs	r4, r0
 800c0de:	000d      	movs	r5, r1
 800c0e0:	0030      	movs	r0, r6
 800c0e2:	0039      	movs	r1, r7
 800c0e4:	2200      	movs	r2, #0
 800c0e6:	f7f5 fbbd 	bl	8001864 <__aeabi_dmul>
 800c0ea:	9b08      	ldr	r3, [sp, #32]
 800c0ec:	0006      	movs	r6, r0
 800c0ee:	000f      	movs	r7, r1
 800c0f0:	9314      	str	r3, [sp, #80]	; 0x50
 800c0f2:	e7be      	b.n	800c072 <_dtoa_r+0x516>
 800c0f4:	0020      	movs	r0, r4
 800c0f6:	0029      	movs	r1, r5
 800c0f8:	f7f5 fbb4 	bl	8001864 <__aeabi_dmul>
 800c0fc:	9a06      	ldr	r2, [sp, #24]
 800c0fe:	9b06      	ldr	r3, [sp, #24]
 800c100:	4694      	mov	ip, r2
 800c102:	9308      	str	r3, [sp, #32]
 800c104:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800c106:	9014      	str	r0, [sp, #80]	; 0x50
 800c108:	9115      	str	r1, [sp, #84]	; 0x54
 800c10a:	4463      	add	r3, ip
 800c10c:	9319      	str	r3, [sp, #100]	; 0x64
 800c10e:	0030      	movs	r0, r6
 800c110:	0039      	movs	r1, r7
 800c112:	f7f6 fa09 	bl	8002528 <__aeabi_d2iz>
 800c116:	9018      	str	r0, [sp, #96]	; 0x60
 800c118:	f7f6 fa3c 	bl	8002594 <__aeabi_i2d>
 800c11c:	0002      	movs	r2, r0
 800c11e:	000b      	movs	r3, r1
 800c120:	0030      	movs	r0, r6
 800c122:	0039      	movs	r1, r7
 800c124:	f7f5 fe60 	bl	8001de8 <__aeabi_dsub>
 800c128:	9e18      	ldr	r6, [sp, #96]	; 0x60
 800c12a:	9b08      	ldr	r3, [sp, #32]
 800c12c:	3630      	adds	r6, #48	; 0x30
 800c12e:	9a19      	ldr	r2, [sp, #100]	; 0x64
 800c130:	701e      	strb	r6, [r3, #0]
 800c132:	3301      	adds	r3, #1
 800c134:	0004      	movs	r4, r0
 800c136:	000d      	movs	r5, r1
 800c138:	9308      	str	r3, [sp, #32]
 800c13a:	4293      	cmp	r3, r2
 800c13c:	d12d      	bne.n	800c19a <_dtoa_r+0x63e>
 800c13e:	9814      	ldr	r0, [sp, #80]	; 0x50
 800c140:	9915      	ldr	r1, [sp, #84]	; 0x54
 800c142:	9a06      	ldr	r2, [sp, #24]
 800c144:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800c146:	4694      	mov	ip, r2
 800c148:	4463      	add	r3, ip
 800c14a:	2200      	movs	r2, #0
 800c14c:	9308      	str	r3, [sp, #32]
 800c14e:	4b47      	ldr	r3, [pc, #284]	; (800c26c <_dtoa_r+0x710>)
 800c150:	f7f4 fc2e 	bl	80009b0 <__aeabi_dadd>
 800c154:	0002      	movs	r2, r0
 800c156:	000b      	movs	r3, r1
 800c158:	0020      	movs	r0, r4
 800c15a:	0029      	movs	r1, r5
 800c15c:	f7f4 f98e 	bl	800047c <__aeabi_dcmpgt>
 800c160:	2800      	cmp	r0, #0
 800c162:	d000      	beq.n	800c166 <_dtoa_r+0x60a>
 800c164:	e086      	b.n	800c274 <_dtoa_r+0x718>
 800c166:	9a14      	ldr	r2, [sp, #80]	; 0x50
 800c168:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800c16a:	2000      	movs	r0, #0
 800c16c:	493f      	ldr	r1, [pc, #252]	; (800c26c <_dtoa_r+0x710>)
 800c16e:	f7f5 fe3b 	bl	8001de8 <__aeabi_dsub>
 800c172:	0002      	movs	r2, r0
 800c174:	000b      	movs	r3, r1
 800c176:	0020      	movs	r0, r4
 800c178:	0029      	movs	r1, r5
 800c17a:	f7f4 f96b 	bl	8000454 <__aeabi_dcmplt>
 800c17e:	2800      	cmp	r0, #0
 800c180:	d100      	bne.n	800c184 <_dtoa_r+0x628>
 800c182:	e716      	b.n	800bfb2 <_dtoa_r+0x456>
 800c184:	9b08      	ldr	r3, [sp, #32]
 800c186:	001a      	movs	r2, r3
 800c188:	3a01      	subs	r2, #1
 800c18a:	9208      	str	r2, [sp, #32]
 800c18c:	7812      	ldrb	r2, [r2, #0]
 800c18e:	2a30      	cmp	r2, #48	; 0x30
 800c190:	d0f8      	beq.n	800c184 <_dtoa_r+0x628>
 800c192:	9308      	str	r3, [sp, #32]
 800c194:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800c196:	9303      	str	r3, [sp, #12]
 800c198:	e046      	b.n	800c228 <_dtoa_r+0x6cc>
 800c19a:	2200      	movs	r2, #0
 800c19c:	4b2e      	ldr	r3, [pc, #184]	; (800c258 <_dtoa_r+0x6fc>)
 800c19e:	f7f5 fb61 	bl	8001864 <__aeabi_dmul>
 800c1a2:	0006      	movs	r6, r0
 800c1a4:	000f      	movs	r7, r1
 800c1a6:	e7b2      	b.n	800c10e <_dtoa_r+0x5b2>
 800c1a8:	9b06      	ldr	r3, [sp, #24]
 800c1aa:	9a06      	ldr	r2, [sp, #24]
 800c1ac:	930a      	str	r3, [sp, #40]	; 0x28
 800c1ae:	9b07      	ldr	r3, [sp, #28]
 800c1b0:	9c08      	ldr	r4, [sp, #32]
 800c1b2:	9d09      	ldr	r5, [sp, #36]	; 0x24
 800c1b4:	3b01      	subs	r3, #1
 800c1b6:	189b      	adds	r3, r3, r2
 800c1b8:	930b      	str	r3, [sp, #44]	; 0x2c
 800c1ba:	0032      	movs	r2, r6
 800c1bc:	003b      	movs	r3, r7
 800c1be:	0020      	movs	r0, r4
 800c1c0:	0029      	movs	r1, r5
 800c1c2:	f7f4 ff55 	bl	8001070 <__aeabi_ddiv>
 800c1c6:	f7f6 f9af 	bl	8002528 <__aeabi_d2iz>
 800c1ca:	9007      	str	r0, [sp, #28]
 800c1cc:	f7f6 f9e2 	bl	8002594 <__aeabi_i2d>
 800c1d0:	0032      	movs	r2, r6
 800c1d2:	003b      	movs	r3, r7
 800c1d4:	f7f5 fb46 	bl	8001864 <__aeabi_dmul>
 800c1d8:	0002      	movs	r2, r0
 800c1da:	000b      	movs	r3, r1
 800c1dc:	0020      	movs	r0, r4
 800c1de:	0029      	movs	r1, r5
 800c1e0:	f7f5 fe02 	bl	8001de8 <__aeabi_dsub>
 800c1e4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800c1e6:	001a      	movs	r2, r3
 800c1e8:	3201      	adds	r2, #1
 800c1ea:	920a      	str	r2, [sp, #40]	; 0x28
 800c1ec:	9208      	str	r2, [sp, #32]
 800c1ee:	9a07      	ldr	r2, [sp, #28]
 800c1f0:	3230      	adds	r2, #48	; 0x30
 800c1f2:	701a      	strb	r2, [r3, #0]
 800c1f4:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800c1f6:	429a      	cmp	r2, r3
 800c1f8:	d14f      	bne.n	800c29a <_dtoa_r+0x73e>
 800c1fa:	0002      	movs	r2, r0
 800c1fc:	000b      	movs	r3, r1
 800c1fe:	f7f4 fbd7 	bl	80009b0 <__aeabi_dadd>
 800c202:	0032      	movs	r2, r6
 800c204:	003b      	movs	r3, r7
 800c206:	0004      	movs	r4, r0
 800c208:	000d      	movs	r5, r1
 800c20a:	f7f4 f937 	bl	800047c <__aeabi_dcmpgt>
 800c20e:	2800      	cmp	r0, #0
 800c210:	d12e      	bne.n	800c270 <_dtoa_r+0x714>
 800c212:	0032      	movs	r2, r6
 800c214:	003b      	movs	r3, r7
 800c216:	0020      	movs	r0, r4
 800c218:	0029      	movs	r1, r5
 800c21a:	f7f4 f915 	bl	8000448 <__aeabi_dcmpeq>
 800c21e:	2800      	cmp	r0, #0
 800c220:	d002      	beq.n	800c228 <_dtoa_r+0x6cc>
 800c222:	9b07      	ldr	r3, [sp, #28]
 800c224:	07de      	lsls	r6, r3, #31
 800c226:	d423      	bmi.n	800c270 <_dtoa_r+0x714>
 800c228:	9905      	ldr	r1, [sp, #20]
 800c22a:	9804      	ldr	r0, [sp, #16]
 800c22c:	f7fd fc46 	bl	8009abc <_Bfree>
 800c230:	2300      	movs	r3, #0
 800c232:	9a08      	ldr	r2, [sp, #32]
 800c234:	7013      	strb	r3, [r2, #0]
 800c236:	9b03      	ldr	r3, [sp, #12]
 800c238:	9a24      	ldr	r2, [sp, #144]	; 0x90
 800c23a:	3301      	adds	r3, #1
 800c23c:	6013      	str	r3, [r2, #0]
 800c23e:	9b26      	ldr	r3, [sp, #152]	; 0x98
 800c240:	2b00      	cmp	r3, #0
 800c242:	d100      	bne.n	800c246 <_dtoa_r+0x6ea>
 800c244:	e4bd      	b.n	800bbc2 <_dtoa_r+0x66>
 800c246:	9a08      	ldr	r2, [sp, #32]
 800c248:	601a      	str	r2, [r3, #0]
 800c24a:	e4ba      	b.n	800bbc2 <_dtoa_r+0x66>
 800c24c:	0800fa90 	.word	0x0800fa90
 800c250:	0800fa68 	.word	0x0800fa68
 800c254:	3ff00000 	.word	0x3ff00000
 800c258:	40240000 	.word	0x40240000
 800c25c:	401c0000 	.word	0x401c0000
 800c260:	fcc00000 	.word	0xfcc00000
 800c264:	40140000 	.word	0x40140000
 800c268:	7cc00000 	.word	0x7cc00000
 800c26c:	3fe00000 	.word	0x3fe00000
 800c270:	9b03      	ldr	r3, [sp, #12]
 800c272:	930e      	str	r3, [sp, #56]	; 0x38
 800c274:	9b08      	ldr	r3, [sp, #32]
 800c276:	9308      	str	r3, [sp, #32]
 800c278:	3b01      	subs	r3, #1
 800c27a:	781a      	ldrb	r2, [r3, #0]
 800c27c:	2a39      	cmp	r2, #57	; 0x39
 800c27e:	d108      	bne.n	800c292 <_dtoa_r+0x736>
 800c280:	9a06      	ldr	r2, [sp, #24]
 800c282:	429a      	cmp	r2, r3
 800c284:	d1f7      	bne.n	800c276 <_dtoa_r+0x71a>
 800c286:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800c288:	9906      	ldr	r1, [sp, #24]
 800c28a:	3201      	adds	r2, #1
 800c28c:	920e      	str	r2, [sp, #56]	; 0x38
 800c28e:	2230      	movs	r2, #48	; 0x30
 800c290:	700a      	strb	r2, [r1, #0]
 800c292:	781a      	ldrb	r2, [r3, #0]
 800c294:	3201      	adds	r2, #1
 800c296:	701a      	strb	r2, [r3, #0]
 800c298:	e77c      	b.n	800c194 <_dtoa_r+0x638>
 800c29a:	2200      	movs	r2, #0
 800c29c:	4ba9      	ldr	r3, [pc, #676]	; (800c544 <_dtoa_r+0x9e8>)
 800c29e:	f7f5 fae1 	bl	8001864 <__aeabi_dmul>
 800c2a2:	2200      	movs	r2, #0
 800c2a4:	2300      	movs	r3, #0
 800c2a6:	0004      	movs	r4, r0
 800c2a8:	000d      	movs	r5, r1
 800c2aa:	f7f4 f8cd 	bl	8000448 <__aeabi_dcmpeq>
 800c2ae:	2800      	cmp	r0, #0
 800c2b0:	d100      	bne.n	800c2b4 <_dtoa_r+0x758>
 800c2b2:	e782      	b.n	800c1ba <_dtoa_r+0x65e>
 800c2b4:	e7b8      	b.n	800c228 <_dtoa_r+0x6cc>
 800c2b6:	9f0f      	ldr	r7, [sp, #60]	; 0x3c
 800c2b8:	9d0d      	ldr	r5, [sp, #52]	; 0x34
 800c2ba:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 800c2bc:	2f00      	cmp	r7, #0
 800c2be:	d012      	beq.n	800c2e6 <_dtoa_r+0x78a>
 800c2c0:	9a22      	ldr	r2, [sp, #136]	; 0x88
 800c2c2:	2a01      	cmp	r2, #1
 800c2c4:	dc6e      	bgt.n	800c3a4 <_dtoa_r+0x848>
 800c2c6:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 800c2c8:	2a00      	cmp	r2, #0
 800c2ca:	d065      	beq.n	800c398 <_dtoa_r+0x83c>
 800c2cc:	4a9e      	ldr	r2, [pc, #632]	; (800c548 <_dtoa_r+0x9ec>)
 800c2ce:	189b      	adds	r3, r3, r2
 800c2d0:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800c2d2:	2101      	movs	r1, #1
 800c2d4:	18d2      	adds	r2, r2, r3
 800c2d6:	920a      	str	r2, [sp, #40]	; 0x28
 800c2d8:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800c2da:	9804      	ldr	r0, [sp, #16]
 800c2dc:	18d3      	adds	r3, r2, r3
 800c2de:	930c      	str	r3, [sp, #48]	; 0x30
 800c2e0:	f7fd fc82 	bl	8009be8 <__i2b>
 800c2e4:	0007      	movs	r7, r0
 800c2e6:	2c00      	cmp	r4, #0
 800c2e8:	d00e      	beq.n	800c308 <_dtoa_r+0x7ac>
 800c2ea:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800c2ec:	2b00      	cmp	r3, #0
 800c2ee:	dd0b      	ble.n	800c308 <_dtoa_r+0x7ac>
 800c2f0:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800c2f2:	0023      	movs	r3, r4
 800c2f4:	4294      	cmp	r4, r2
 800c2f6:	dd00      	ble.n	800c2fa <_dtoa_r+0x79e>
 800c2f8:	0013      	movs	r3, r2
 800c2fa:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800c2fc:	1ae4      	subs	r4, r4, r3
 800c2fe:	1ad2      	subs	r2, r2, r3
 800c300:	920a      	str	r2, [sp, #40]	; 0x28
 800c302:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800c304:	1ad3      	subs	r3, r2, r3
 800c306:	930c      	str	r3, [sp, #48]	; 0x30
 800c308:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800c30a:	2b00      	cmp	r3, #0
 800c30c:	d01e      	beq.n	800c34c <_dtoa_r+0x7f0>
 800c30e:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800c310:	2b00      	cmp	r3, #0
 800c312:	d05c      	beq.n	800c3ce <_dtoa_r+0x872>
 800c314:	2d00      	cmp	r5, #0
 800c316:	dd10      	ble.n	800c33a <_dtoa_r+0x7de>
 800c318:	0039      	movs	r1, r7
 800c31a:	002a      	movs	r2, r5
 800c31c:	9804      	ldr	r0, [sp, #16]
 800c31e:	f7fd fd2b 	bl	8009d78 <__pow5mult>
 800c322:	9a05      	ldr	r2, [sp, #20]
 800c324:	0001      	movs	r1, r0
 800c326:	0007      	movs	r7, r0
 800c328:	9804      	ldr	r0, [sp, #16]
 800c32a:	f7fd fc75 	bl	8009c18 <__multiply>
 800c32e:	0006      	movs	r6, r0
 800c330:	9905      	ldr	r1, [sp, #20]
 800c332:	9804      	ldr	r0, [sp, #16]
 800c334:	f7fd fbc2 	bl	8009abc <_Bfree>
 800c338:	9605      	str	r6, [sp, #20]
 800c33a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800c33c:	1b5a      	subs	r2, r3, r5
 800c33e:	42ab      	cmp	r3, r5
 800c340:	d004      	beq.n	800c34c <_dtoa_r+0x7f0>
 800c342:	9905      	ldr	r1, [sp, #20]
 800c344:	9804      	ldr	r0, [sp, #16]
 800c346:	f7fd fd17 	bl	8009d78 <__pow5mult>
 800c34a:	9005      	str	r0, [sp, #20]
 800c34c:	2101      	movs	r1, #1
 800c34e:	9804      	ldr	r0, [sp, #16]
 800c350:	f7fd fc4a 	bl	8009be8 <__i2b>
 800c354:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800c356:	0006      	movs	r6, r0
 800c358:	2b00      	cmp	r3, #0
 800c35a:	dd3a      	ble.n	800c3d2 <_dtoa_r+0x876>
 800c35c:	001a      	movs	r2, r3
 800c35e:	0001      	movs	r1, r0
 800c360:	9804      	ldr	r0, [sp, #16]
 800c362:	f7fd fd09 	bl	8009d78 <__pow5mult>
 800c366:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800c368:	0006      	movs	r6, r0
 800c36a:	2500      	movs	r5, #0
 800c36c:	2b01      	cmp	r3, #1
 800c36e:	dc38      	bgt.n	800c3e2 <_dtoa_r+0x886>
 800c370:	2500      	movs	r5, #0
 800c372:	9b08      	ldr	r3, [sp, #32]
 800c374:	42ab      	cmp	r3, r5
 800c376:	d130      	bne.n	800c3da <_dtoa_r+0x87e>
 800c378:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800c37a:	031b      	lsls	r3, r3, #12
 800c37c:	42ab      	cmp	r3, r5
 800c37e:	d12c      	bne.n	800c3da <_dtoa_r+0x87e>
 800c380:	4b72      	ldr	r3, [pc, #456]	; (800c54c <_dtoa_r+0x9f0>)
 800c382:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800c384:	4213      	tst	r3, r2
 800c386:	d028      	beq.n	800c3da <_dtoa_r+0x87e>
 800c388:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800c38a:	3501      	adds	r5, #1
 800c38c:	3301      	adds	r3, #1
 800c38e:	930a      	str	r3, [sp, #40]	; 0x28
 800c390:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800c392:	3301      	adds	r3, #1
 800c394:	930c      	str	r3, [sp, #48]	; 0x30
 800c396:	e020      	b.n	800c3da <_dtoa_r+0x87e>
 800c398:	2336      	movs	r3, #54	; 0x36
 800c39a:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 800c39c:	9d0d      	ldr	r5, [sp, #52]	; 0x34
 800c39e:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 800c3a0:	1a9b      	subs	r3, r3, r2
 800c3a2:	e795      	b.n	800c2d0 <_dtoa_r+0x774>
 800c3a4:	9b07      	ldr	r3, [sp, #28]
 800c3a6:	1e5d      	subs	r5, r3, #1
 800c3a8:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800c3aa:	42ab      	cmp	r3, r5
 800c3ac:	db07      	blt.n	800c3be <_dtoa_r+0x862>
 800c3ae:	1b5d      	subs	r5, r3, r5
 800c3b0:	9b07      	ldr	r3, [sp, #28]
 800c3b2:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 800c3b4:	2b00      	cmp	r3, #0
 800c3b6:	da8b      	bge.n	800c2d0 <_dtoa_r+0x774>
 800c3b8:	1ae4      	subs	r4, r4, r3
 800c3ba:	2300      	movs	r3, #0
 800c3bc:	e788      	b.n	800c2d0 <_dtoa_r+0x774>
 800c3be:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800c3c0:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 800c3c2:	1aeb      	subs	r3, r5, r3
 800c3c4:	18d3      	adds	r3, r2, r3
 800c3c6:	950d      	str	r5, [sp, #52]	; 0x34
 800c3c8:	9313      	str	r3, [sp, #76]	; 0x4c
 800c3ca:	2500      	movs	r5, #0
 800c3cc:	e7f0      	b.n	800c3b0 <_dtoa_r+0x854>
 800c3ce:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800c3d0:	e7b7      	b.n	800c342 <_dtoa_r+0x7e6>
 800c3d2:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800c3d4:	2500      	movs	r5, #0
 800c3d6:	2b01      	cmp	r3, #1
 800c3d8:	ddca      	ble.n	800c370 <_dtoa_r+0x814>
 800c3da:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800c3dc:	2001      	movs	r0, #1
 800c3de:	2b00      	cmp	r3, #0
 800c3e0:	d008      	beq.n	800c3f4 <_dtoa_r+0x898>
 800c3e2:	6933      	ldr	r3, [r6, #16]
 800c3e4:	3303      	adds	r3, #3
 800c3e6:	009b      	lsls	r3, r3, #2
 800c3e8:	18f3      	adds	r3, r6, r3
 800c3ea:	6858      	ldr	r0, [r3, #4]
 800c3ec:	f7fd fbb4 	bl	8009b58 <__hi0bits>
 800c3f0:	2320      	movs	r3, #32
 800c3f2:	1a18      	subs	r0, r3, r0
 800c3f4:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800c3f6:	1818      	adds	r0, r3, r0
 800c3f8:	0002      	movs	r2, r0
 800c3fa:	231f      	movs	r3, #31
 800c3fc:	401a      	ands	r2, r3
 800c3fe:	4218      	tst	r0, r3
 800c400:	d047      	beq.n	800c492 <_dtoa_r+0x936>
 800c402:	3301      	adds	r3, #1
 800c404:	1a9b      	subs	r3, r3, r2
 800c406:	2b04      	cmp	r3, #4
 800c408:	dd3f      	ble.n	800c48a <_dtoa_r+0x92e>
 800c40a:	231c      	movs	r3, #28
 800c40c:	1a9b      	subs	r3, r3, r2
 800c40e:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800c410:	18e4      	adds	r4, r4, r3
 800c412:	18d2      	adds	r2, r2, r3
 800c414:	920a      	str	r2, [sp, #40]	; 0x28
 800c416:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800c418:	18d3      	adds	r3, r2, r3
 800c41a:	930c      	str	r3, [sp, #48]	; 0x30
 800c41c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800c41e:	2b00      	cmp	r3, #0
 800c420:	dd05      	ble.n	800c42e <_dtoa_r+0x8d2>
 800c422:	001a      	movs	r2, r3
 800c424:	9905      	ldr	r1, [sp, #20]
 800c426:	9804      	ldr	r0, [sp, #16]
 800c428:	f7fd fce8 	bl	8009dfc <__lshift>
 800c42c:	9005      	str	r0, [sp, #20]
 800c42e:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800c430:	2b00      	cmp	r3, #0
 800c432:	dd05      	ble.n	800c440 <_dtoa_r+0x8e4>
 800c434:	0031      	movs	r1, r6
 800c436:	001a      	movs	r2, r3
 800c438:	9804      	ldr	r0, [sp, #16]
 800c43a:	f7fd fcdf 	bl	8009dfc <__lshift>
 800c43e:	0006      	movs	r6, r0
 800c440:	9b16      	ldr	r3, [sp, #88]	; 0x58
 800c442:	2b00      	cmp	r3, #0
 800c444:	d027      	beq.n	800c496 <_dtoa_r+0x93a>
 800c446:	0031      	movs	r1, r6
 800c448:	9805      	ldr	r0, [sp, #20]
 800c44a:	f7fd fd45 	bl	8009ed8 <__mcmp>
 800c44e:	2800      	cmp	r0, #0
 800c450:	da21      	bge.n	800c496 <_dtoa_r+0x93a>
 800c452:	9b03      	ldr	r3, [sp, #12]
 800c454:	220a      	movs	r2, #10
 800c456:	3b01      	subs	r3, #1
 800c458:	9303      	str	r3, [sp, #12]
 800c45a:	9905      	ldr	r1, [sp, #20]
 800c45c:	2300      	movs	r3, #0
 800c45e:	9804      	ldr	r0, [sp, #16]
 800c460:	f7fd fb36 	bl	8009ad0 <__multadd>
 800c464:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800c466:	9005      	str	r0, [sp, #20]
 800c468:	2b00      	cmp	r3, #0
 800c46a:	d100      	bne.n	800c46e <_dtoa_r+0x912>
 800c46c:	e15d      	b.n	800c72a <_dtoa_r+0xbce>
 800c46e:	2300      	movs	r3, #0
 800c470:	0039      	movs	r1, r7
 800c472:	220a      	movs	r2, #10
 800c474:	9804      	ldr	r0, [sp, #16]
 800c476:	f7fd fb2b 	bl	8009ad0 <__multadd>
 800c47a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800c47c:	0007      	movs	r7, r0
 800c47e:	2b00      	cmp	r3, #0
 800c480:	dc49      	bgt.n	800c516 <_dtoa_r+0x9ba>
 800c482:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800c484:	2b02      	cmp	r3, #2
 800c486:	dc0e      	bgt.n	800c4a6 <_dtoa_r+0x94a>
 800c488:	e045      	b.n	800c516 <_dtoa_r+0x9ba>
 800c48a:	2b04      	cmp	r3, #4
 800c48c:	d0c6      	beq.n	800c41c <_dtoa_r+0x8c0>
 800c48e:	331c      	adds	r3, #28
 800c490:	e7bd      	b.n	800c40e <_dtoa_r+0x8b2>
 800c492:	0013      	movs	r3, r2
 800c494:	e7fb      	b.n	800c48e <_dtoa_r+0x932>
 800c496:	9b07      	ldr	r3, [sp, #28]
 800c498:	2b00      	cmp	r3, #0
 800c49a:	dc36      	bgt.n	800c50a <_dtoa_r+0x9ae>
 800c49c:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800c49e:	2b02      	cmp	r3, #2
 800c4a0:	dd33      	ble.n	800c50a <_dtoa_r+0x9ae>
 800c4a2:	9b07      	ldr	r3, [sp, #28]
 800c4a4:	930b      	str	r3, [sp, #44]	; 0x2c
 800c4a6:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800c4a8:	2b00      	cmp	r3, #0
 800c4aa:	d10c      	bne.n	800c4c6 <_dtoa_r+0x96a>
 800c4ac:	0031      	movs	r1, r6
 800c4ae:	2205      	movs	r2, #5
 800c4b0:	9804      	ldr	r0, [sp, #16]
 800c4b2:	f7fd fb0d 	bl	8009ad0 <__multadd>
 800c4b6:	0006      	movs	r6, r0
 800c4b8:	0001      	movs	r1, r0
 800c4ba:	9805      	ldr	r0, [sp, #20]
 800c4bc:	f7fd fd0c 	bl	8009ed8 <__mcmp>
 800c4c0:	2800      	cmp	r0, #0
 800c4c2:	dd00      	ble.n	800c4c6 <_dtoa_r+0x96a>
 800c4c4:	e59f      	b.n	800c006 <_dtoa_r+0x4aa>
 800c4c6:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 800c4c8:	43db      	mvns	r3, r3
 800c4ca:	9303      	str	r3, [sp, #12]
 800c4cc:	9b06      	ldr	r3, [sp, #24]
 800c4ce:	9308      	str	r3, [sp, #32]
 800c4d0:	2500      	movs	r5, #0
 800c4d2:	0031      	movs	r1, r6
 800c4d4:	9804      	ldr	r0, [sp, #16]
 800c4d6:	f7fd faf1 	bl	8009abc <_Bfree>
 800c4da:	2f00      	cmp	r7, #0
 800c4dc:	d100      	bne.n	800c4e0 <_dtoa_r+0x984>
 800c4de:	e6a3      	b.n	800c228 <_dtoa_r+0x6cc>
 800c4e0:	2d00      	cmp	r5, #0
 800c4e2:	d005      	beq.n	800c4f0 <_dtoa_r+0x994>
 800c4e4:	42bd      	cmp	r5, r7
 800c4e6:	d003      	beq.n	800c4f0 <_dtoa_r+0x994>
 800c4e8:	0029      	movs	r1, r5
 800c4ea:	9804      	ldr	r0, [sp, #16]
 800c4ec:	f7fd fae6 	bl	8009abc <_Bfree>
 800c4f0:	0039      	movs	r1, r7
 800c4f2:	9804      	ldr	r0, [sp, #16]
 800c4f4:	f7fd fae2 	bl	8009abc <_Bfree>
 800c4f8:	e696      	b.n	800c228 <_dtoa_r+0x6cc>
 800c4fa:	2600      	movs	r6, #0
 800c4fc:	0037      	movs	r7, r6
 800c4fe:	e7e2      	b.n	800c4c6 <_dtoa_r+0x96a>
 800c500:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800c502:	9e12      	ldr	r6, [sp, #72]	; 0x48
 800c504:	9303      	str	r3, [sp, #12]
 800c506:	0037      	movs	r7, r6
 800c508:	e57d      	b.n	800c006 <_dtoa_r+0x4aa>
 800c50a:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800c50c:	2b00      	cmp	r3, #0
 800c50e:	d100      	bne.n	800c512 <_dtoa_r+0x9b6>
 800c510:	e0c3      	b.n	800c69a <_dtoa_r+0xb3e>
 800c512:	9b07      	ldr	r3, [sp, #28]
 800c514:	930b      	str	r3, [sp, #44]	; 0x2c
 800c516:	2c00      	cmp	r4, #0
 800c518:	dd05      	ble.n	800c526 <_dtoa_r+0x9ca>
 800c51a:	0039      	movs	r1, r7
 800c51c:	0022      	movs	r2, r4
 800c51e:	9804      	ldr	r0, [sp, #16]
 800c520:	f7fd fc6c 	bl	8009dfc <__lshift>
 800c524:	0007      	movs	r7, r0
 800c526:	0038      	movs	r0, r7
 800c528:	2d00      	cmp	r5, #0
 800c52a:	d024      	beq.n	800c576 <_dtoa_r+0xa1a>
 800c52c:	6879      	ldr	r1, [r7, #4]
 800c52e:	9804      	ldr	r0, [sp, #16]
 800c530:	f7fd fa9c 	bl	8009a6c <_Balloc>
 800c534:	1e04      	subs	r4, r0, #0
 800c536:	d111      	bne.n	800c55c <_dtoa_r+0xa00>
 800c538:	0022      	movs	r2, r4
 800c53a:	4b05      	ldr	r3, [pc, #20]	; (800c550 <_dtoa_r+0x9f4>)
 800c53c:	4805      	ldr	r0, [pc, #20]	; (800c554 <_dtoa_r+0x9f8>)
 800c53e:	4906      	ldr	r1, [pc, #24]	; (800c558 <_dtoa_r+0x9fc>)
 800c540:	e43c      	b.n	800bdbc <_dtoa_r+0x260>
 800c542:	46c0      	nop			; (mov r8, r8)
 800c544:	40240000 	.word	0x40240000
 800c548:	00000433 	.word	0x00000433
 800c54c:	7ff00000 	.word	0x7ff00000
 800c550:	0800f9f7 	.word	0x0800f9f7
 800c554:	0800fc01 	.word	0x0800fc01
 800c558:	000002ef 	.word	0x000002ef
 800c55c:	0039      	movs	r1, r7
 800c55e:	693a      	ldr	r2, [r7, #16]
 800c560:	310c      	adds	r1, #12
 800c562:	3202      	adds	r2, #2
 800c564:	0092      	lsls	r2, r2, #2
 800c566:	300c      	adds	r0, #12
 800c568:	f7fc ff26 	bl	80093b8 <memcpy>
 800c56c:	2201      	movs	r2, #1
 800c56e:	0021      	movs	r1, r4
 800c570:	9804      	ldr	r0, [sp, #16]
 800c572:	f7fd fc43 	bl	8009dfc <__lshift>
 800c576:	9b06      	ldr	r3, [sp, #24]
 800c578:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800c57a:	9307      	str	r3, [sp, #28]
 800c57c:	3b01      	subs	r3, #1
 800c57e:	189b      	adds	r3, r3, r2
 800c580:	2201      	movs	r2, #1
 800c582:	003d      	movs	r5, r7
 800c584:	0007      	movs	r7, r0
 800c586:	930e      	str	r3, [sp, #56]	; 0x38
 800c588:	9b08      	ldr	r3, [sp, #32]
 800c58a:	4013      	ands	r3, r2
 800c58c:	930d      	str	r3, [sp, #52]	; 0x34
 800c58e:	0031      	movs	r1, r6
 800c590:	9805      	ldr	r0, [sp, #20]
 800c592:	f7ff fa53 	bl	800ba3c <quorem>
 800c596:	0029      	movs	r1, r5
 800c598:	0004      	movs	r4, r0
 800c59a:	900b      	str	r0, [sp, #44]	; 0x2c
 800c59c:	9805      	ldr	r0, [sp, #20]
 800c59e:	f7fd fc9b 	bl	8009ed8 <__mcmp>
 800c5a2:	003a      	movs	r2, r7
 800c5a4:	900c      	str	r0, [sp, #48]	; 0x30
 800c5a6:	0031      	movs	r1, r6
 800c5a8:	9804      	ldr	r0, [sp, #16]
 800c5aa:	f7fd fcb1 	bl	8009f10 <__mdiff>
 800c5ae:	2201      	movs	r2, #1
 800c5b0:	68c3      	ldr	r3, [r0, #12]
 800c5b2:	3430      	adds	r4, #48	; 0x30
 800c5b4:	9008      	str	r0, [sp, #32]
 800c5b6:	920a      	str	r2, [sp, #40]	; 0x28
 800c5b8:	2b00      	cmp	r3, #0
 800c5ba:	d104      	bne.n	800c5c6 <_dtoa_r+0xa6a>
 800c5bc:	0001      	movs	r1, r0
 800c5be:	9805      	ldr	r0, [sp, #20]
 800c5c0:	f7fd fc8a 	bl	8009ed8 <__mcmp>
 800c5c4:	900a      	str	r0, [sp, #40]	; 0x28
 800c5c6:	9908      	ldr	r1, [sp, #32]
 800c5c8:	9804      	ldr	r0, [sp, #16]
 800c5ca:	f7fd fa77 	bl	8009abc <_Bfree>
 800c5ce:	9b07      	ldr	r3, [sp, #28]
 800c5d0:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800c5d2:	3301      	adds	r3, #1
 800c5d4:	9308      	str	r3, [sp, #32]
 800c5d6:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800c5d8:	4313      	orrs	r3, r2
 800c5da:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800c5dc:	4313      	orrs	r3, r2
 800c5de:	d109      	bne.n	800c5f4 <_dtoa_r+0xa98>
 800c5e0:	2c39      	cmp	r4, #57	; 0x39
 800c5e2:	d022      	beq.n	800c62a <_dtoa_r+0xace>
 800c5e4:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800c5e6:	2b00      	cmp	r3, #0
 800c5e8:	dd01      	ble.n	800c5ee <_dtoa_r+0xa92>
 800c5ea:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
 800c5ec:	3431      	adds	r4, #49	; 0x31
 800c5ee:	9b07      	ldr	r3, [sp, #28]
 800c5f0:	701c      	strb	r4, [r3, #0]
 800c5f2:	e76e      	b.n	800c4d2 <_dtoa_r+0x976>
 800c5f4:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800c5f6:	2b00      	cmp	r3, #0
 800c5f8:	db04      	blt.n	800c604 <_dtoa_r+0xaa8>
 800c5fa:	9a22      	ldr	r2, [sp, #136]	; 0x88
 800c5fc:	4313      	orrs	r3, r2
 800c5fe:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800c600:	4313      	orrs	r3, r2
 800c602:	d11e      	bne.n	800c642 <_dtoa_r+0xae6>
 800c604:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800c606:	2b00      	cmp	r3, #0
 800c608:	ddf1      	ble.n	800c5ee <_dtoa_r+0xa92>
 800c60a:	9905      	ldr	r1, [sp, #20]
 800c60c:	2201      	movs	r2, #1
 800c60e:	9804      	ldr	r0, [sp, #16]
 800c610:	f7fd fbf4 	bl	8009dfc <__lshift>
 800c614:	0031      	movs	r1, r6
 800c616:	9005      	str	r0, [sp, #20]
 800c618:	f7fd fc5e 	bl	8009ed8 <__mcmp>
 800c61c:	2800      	cmp	r0, #0
 800c61e:	dc02      	bgt.n	800c626 <_dtoa_r+0xaca>
 800c620:	d1e5      	bne.n	800c5ee <_dtoa_r+0xa92>
 800c622:	07e3      	lsls	r3, r4, #31
 800c624:	d5e3      	bpl.n	800c5ee <_dtoa_r+0xa92>
 800c626:	2c39      	cmp	r4, #57	; 0x39
 800c628:	d1df      	bne.n	800c5ea <_dtoa_r+0xa8e>
 800c62a:	2339      	movs	r3, #57	; 0x39
 800c62c:	9a07      	ldr	r2, [sp, #28]
 800c62e:	7013      	strb	r3, [r2, #0]
 800c630:	9b08      	ldr	r3, [sp, #32]
 800c632:	9308      	str	r3, [sp, #32]
 800c634:	3b01      	subs	r3, #1
 800c636:	781a      	ldrb	r2, [r3, #0]
 800c638:	2a39      	cmp	r2, #57	; 0x39
 800c63a:	d063      	beq.n	800c704 <_dtoa_r+0xba8>
 800c63c:	3201      	adds	r2, #1
 800c63e:	701a      	strb	r2, [r3, #0]
 800c640:	e747      	b.n	800c4d2 <_dtoa_r+0x976>
 800c642:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800c644:	2b00      	cmp	r3, #0
 800c646:	dd03      	ble.n	800c650 <_dtoa_r+0xaf4>
 800c648:	2c39      	cmp	r4, #57	; 0x39
 800c64a:	d0ee      	beq.n	800c62a <_dtoa_r+0xace>
 800c64c:	3401      	adds	r4, #1
 800c64e:	e7ce      	b.n	800c5ee <_dtoa_r+0xa92>
 800c650:	9b07      	ldr	r3, [sp, #28]
 800c652:	9a07      	ldr	r2, [sp, #28]
 800c654:	701c      	strb	r4, [r3, #0]
 800c656:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800c658:	4293      	cmp	r3, r2
 800c65a:	d03e      	beq.n	800c6da <_dtoa_r+0xb7e>
 800c65c:	2300      	movs	r3, #0
 800c65e:	220a      	movs	r2, #10
 800c660:	9905      	ldr	r1, [sp, #20]
 800c662:	9804      	ldr	r0, [sp, #16]
 800c664:	f7fd fa34 	bl	8009ad0 <__multadd>
 800c668:	2300      	movs	r3, #0
 800c66a:	9005      	str	r0, [sp, #20]
 800c66c:	220a      	movs	r2, #10
 800c66e:	0029      	movs	r1, r5
 800c670:	9804      	ldr	r0, [sp, #16]
 800c672:	42bd      	cmp	r5, r7
 800c674:	d106      	bne.n	800c684 <_dtoa_r+0xb28>
 800c676:	f7fd fa2b 	bl	8009ad0 <__multadd>
 800c67a:	0005      	movs	r5, r0
 800c67c:	0007      	movs	r7, r0
 800c67e:	9b08      	ldr	r3, [sp, #32]
 800c680:	9307      	str	r3, [sp, #28]
 800c682:	e784      	b.n	800c58e <_dtoa_r+0xa32>
 800c684:	f7fd fa24 	bl	8009ad0 <__multadd>
 800c688:	0039      	movs	r1, r7
 800c68a:	0005      	movs	r5, r0
 800c68c:	2300      	movs	r3, #0
 800c68e:	220a      	movs	r2, #10
 800c690:	9804      	ldr	r0, [sp, #16]
 800c692:	f7fd fa1d 	bl	8009ad0 <__multadd>
 800c696:	0007      	movs	r7, r0
 800c698:	e7f1      	b.n	800c67e <_dtoa_r+0xb22>
 800c69a:	9b07      	ldr	r3, [sp, #28]
 800c69c:	930b      	str	r3, [sp, #44]	; 0x2c
 800c69e:	2500      	movs	r5, #0
 800c6a0:	0031      	movs	r1, r6
 800c6a2:	9805      	ldr	r0, [sp, #20]
 800c6a4:	f7ff f9ca 	bl	800ba3c <quorem>
 800c6a8:	9b06      	ldr	r3, [sp, #24]
 800c6aa:	3030      	adds	r0, #48	; 0x30
 800c6ac:	5558      	strb	r0, [r3, r5]
 800c6ae:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800c6b0:	3501      	adds	r5, #1
 800c6b2:	0004      	movs	r4, r0
 800c6b4:	42ab      	cmp	r3, r5
 800c6b6:	dd07      	ble.n	800c6c8 <_dtoa_r+0xb6c>
 800c6b8:	2300      	movs	r3, #0
 800c6ba:	220a      	movs	r2, #10
 800c6bc:	9905      	ldr	r1, [sp, #20]
 800c6be:	9804      	ldr	r0, [sp, #16]
 800c6c0:	f7fd fa06 	bl	8009ad0 <__multadd>
 800c6c4:	9005      	str	r0, [sp, #20]
 800c6c6:	e7eb      	b.n	800c6a0 <_dtoa_r+0xb44>
 800c6c8:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800c6ca:	2301      	movs	r3, #1
 800c6cc:	2a00      	cmp	r2, #0
 800c6ce:	dd00      	ble.n	800c6d2 <_dtoa_r+0xb76>
 800c6d0:	0013      	movs	r3, r2
 800c6d2:	2500      	movs	r5, #0
 800c6d4:	9a06      	ldr	r2, [sp, #24]
 800c6d6:	18d3      	adds	r3, r2, r3
 800c6d8:	9308      	str	r3, [sp, #32]
 800c6da:	9905      	ldr	r1, [sp, #20]
 800c6dc:	2201      	movs	r2, #1
 800c6de:	9804      	ldr	r0, [sp, #16]
 800c6e0:	f7fd fb8c 	bl	8009dfc <__lshift>
 800c6e4:	0031      	movs	r1, r6
 800c6e6:	9005      	str	r0, [sp, #20]
 800c6e8:	f7fd fbf6 	bl	8009ed8 <__mcmp>
 800c6ec:	2800      	cmp	r0, #0
 800c6ee:	dc9f      	bgt.n	800c630 <_dtoa_r+0xad4>
 800c6f0:	d101      	bne.n	800c6f6 <_dtoa_r+0xb9a>
 800c6f2:	07e4      	lsls	r4, r4, #31
 800c6f4:	d49c      	bmi.n	800c630 <_dtoa_r+0xad4>
 800c6f6:	9b08      	ldr	r3, [sp, #32]
 800c6f8:	9308      	str	r3, [sp, #32]
 800c6fa:	3b01      	subs	r3, #1
 800c6fc:	781a      	ldrb	r2, [r3, #0]
 800c6fe:	2a30      	cmp	r2, #48	; 0x30
 800c700:	d0fa      	beq.n	800c6f8 <_dtoa_r+0xb9c>
 800c702:	e6e6      	b.n	800c4d2 <_dtoa_r+0x976>
 800c704:	9a06      	ldr	r2, [sp, #24]
 800c706:	429a      	cmp	r2, r3
 800c708:	d193      	bne.n	800c632 <_dtoa_r+0xad6>
 800c70a:	9b03      	ldr	r3, [sp, #12]
 800c70c:	3301      	adds	r3, #1
 800c70e:	9303      	str	r3, [sp, #12]
 800c710:	2331      	movs	r3, #49	; 0x31
 800c712:	7013      	strb	r3, [r2, #0]
 800c714:	e6dd      	b.n	800c4d2 <_dtoa_r+0x976>
 800c716:	4b09      	ldr	r3, [pc, #36]	; (800c73c <_dtoa_r+0xbe0>)
 800c718:	9a26      	ldr	r2, [sp, #152]	; 0x98
 800c71a:	9306      	str	r3, [sp, #24]
 800c71c:	4b08      	ldr	r3, [pc, #32]	; (800c740 <_dtoa_r+0xbe4>)
 800c71e:	2a00      	cmp	r2, #0
 800c720:	d001      	beq.n	800c726 <_dtoa_r+0xbca>
 800c722:	f7ff fa4c 	bl	800bbbe <_dtoa_r+0x62>
 800c726:	f7ff fa4c 	bl	800bbc2 <_dtoa_r+0x66>
 800c72a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800c72c:	2b00      	cmp	r3, #0
 800c72e:	dcb6      	bgt.n	800c69e <_dtoa_r+0xb42>
 800c730:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800c732:	2b02      	cmp	r3, #2
 800c734:	dd00      	ble.n	800c738 <_dtoa_r+0xbdc>
 800c736:	e6b6      	b.n	800c4a6 <_dtoa_r+0x94a>
 800c738:	e7b1      	b.n	800c69e <_dtoa_r+0xb42>
 800c73a:	46c0      	nop			; (mov r8, r8)
 800c73c:	0800fbf4 	.word	0x0800fbf4
 800c740:	0800fbfc 	.word	0x0800fbfc

0800c744 <fiprintf>:
 800c744:	b40e      	push	{r1, r2, r3}
 800c746:	b517      	push	{r0, r1, r2, r4, lr}
 800c748:	4c05      	ldr	r4, [pc, #20]	; (800c760 <fiprintf+0x1c>)
 800c74a:	ab05      	add	r3, sp, #20
 800c74c:	cb04      	ldmia	r3!, {r2}
 800c74e:	0001      	movs	r1, r0
 800c750:	6820      	ldr	r0, [r4, #0]
 800c752:	9301      	str	r3, [sp, #4]
 800c754:	f000 f8be 	bl	800c8d4 <_vfiprintf_r>
 800c758:	bc1e      	pop	{r1, r2, r3, r4}
 800c75a:	bc08      	pop	{r3}
 800c75c:	b003      	add	sp, #12
 800c75e:	4718      	bx	r3
 800c760:	200002b8 	.word	0x200002b8

0800c764 <__ssprint_r>:
 800c764:	b5f0      	push	{r4, r5, r6, r7, lr}
 800c766:	6813      	ldr	r3, [r2, #0]
 800c768:	b087      	sub	sp, #28
 800c76a:	0017      	movs	r7, r2
 800c76c:	9303      	str	r3, [sp, #12]
 800c76e:	6893      	ldr	r3, [r2, #8]
 800c770:	2200      	movs	r2, #0
 800c772:	000c      	movs	r4, r1
 800c774:	9005      	str	r0, [sp, #20]
 800c776:	9202      	str	r2, [sp, #8]
 800c778:	9201      	str	r2, [sp, #4]
 800c77a:	4293      	cmp	r3, r2
 800c77c:	d10d      	bne.n	800c79a <__ssprint_r+0x36>
 800c77e:	2000      	movs	r0, #0
 800c780:	2300      	movs	r3, #0
 800c782:	607b      	str	r3, [r7, #4]
 800c784:	b007      	add	sp, #28
 800c786:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800c788:	9b03      	ldr	r3, [sp, #12]
 800c78a:	681b      	ldr	r3, [r3, #0]
 800c78c:	9302      	str	r3, [sp, #8]
 800c78e:	9b03      	ldr	r3, [sp, #12]
 800c790:	685b      	ldr	r3, [r3, #4]
 800c792:	9301      	str	r3, [sp, #4]
 800c794:	9b03      	ldr	r3, [sp, #12]
 800c796:	3308      	adds	r3, #8
 800c798:	9303      	str	r3, [sp, #12]
 800c79a:	9a01      	ldr	r2, [sp, #4]
 800c79c:	68a6      	ldr	r6, [r4, #8]
 800c79e:	6823      	ldr	r3, [r4, #0]
 800c7a0:	2a00      	cmp	r2, #0
 800c7a2:	d0f1      	beq.n	800c788 <__ssprint_r+0x24>
 800c7a4:	42b2      	cmp	r2, r6
 800c7a6:	d32e      	bcc.n	800c806 <__ssprint_r+0xa2>
 800c7a8:	2190      	movs	r1, #144	; 0x90
 800c7aa:	89a2      	ldrh	r2, [r4, #12]
 800c7ac:	00c9      	lsls	r1, r1, #3
 800c7ae:	420a      	tst	r2, r1
 800c7b0:	d029      	beq.n	800c806 <__ssprint_r+0xa2>
 800c7b2:	2003      	movs	r0, #3
 800c7b4:	6921      	ldr	r1, [r4, #16]
 800c7b6:	1a5b      	subs	r3, r3, r1
 800c7b8:	9304      	str	r3, [sp, #16]
 800c7ba:	6963      	ldr	r3, [r4, #20]
 800c7bc:	4343      	muls	r3, r0
 800c7be:	0fdd      	lsrs	r5, r3, #31
 800c7c0:	18ed      	adds	r5, r5, r3
 800c7c2:	9b04      	ldr	r3, [sp, #16]
 800c7c4:	9801      	ldr	r0, [sp, #4]
 800c7c6:	3301      	adds	r3, #1
 800c7c8:	181b      	adds	r3, r3, r0
 800c7ca:	106d      	asrs	r5, r5, #1
 800c7cc:	42ab      	cmp	r3, r5
 800c7ce:	d900      	bls.n	800c7d2 <__ssprint_r+0x6e>
 800c7d0:	001d      	movs	r5, r3
 800c7d2:	0552      	lsls	r2, r2, #21
 800c7d4:	d532      	bpl.n	800c83c <__ssprint_r+0xd8>
 800c7d6:	0029      	movs	r1, r5
 800c7d8:	9805      	ldr	r0, [sp, #20]
 800c7da:	f7fc ff11 	bl	8009600 <_malloc_r>
 800c7de:	1e06      	subs	r6, r0, #0
 800c7e0:	d036      	beq.n	800c850 <__ssprint_r+0xec>
 800c7e2:	9a04      	ldr	r2, [sp, #16]
 800c7e4:	6921      	ldr	r1, [r4, #16]
 800c7e6:	f7fc fde7 	bl	80093b8 <memcpy>
 800c7ea:	89a2      	ldrh	r2, [r4, #12]
 800c7ec:	4b1e      	ldr	r3, [pc, #120]	; (800c868 <__ssprint_r+0x104>)
 800c7ee:	401a      	ands	r2, r3
 800c7f0:	2380      	movs	r3, #128	; 0x80
 800c7f2:	4313      	orrs	r3, r2
 800c7f4:	81a3      	strh	r3, [r4, #12]
 800c7f6:	9b04      	ldr	r3, [sp, #16]
 800c7f8:	6126      	str	r6, [r4, #16]
 800c7fa:	18f6      	adds	r6, r6, r3
 800c7fc:	6026      	str	r6, [r4, #0]
 800c7fe:	6165      	str	r5, [r4, #20]
 800c800:	9e01      	ldr	r6, [sp, #4]
 800c802:	1aed      	subs	r5, r5, r3
 800c804:	60a5      	str	r5, [r4, #8]
 800c806:	9b01      	ldr	r3, [sp, #4]
 800c808:	429e      	cmp	r6, r3
 800c80a:	d900      	bls.n	800c80e <__ssprint_r+0xaa>
 800c80c:	001e      	movs	r6, r3
 800c80e:	0032      	movs	r2, r6
 800c810:	9902      	ldr	r1, [sp, #8]
 800c812:	6820      	ldr	r0, [r4, #0]
 800c814:	f000 ff99 	bl	800d74a <memmove>
 800c818:	9a01      	ldr	r2, [sp, #4]
 800c81a:	68a3      	ldr	r3, [r4, #8]
 800c81c:	4694      	mov	ip, r2
 800c81e:	1b9b      	subs	r3, r3, r6
 800c820:	60a3      	str	r3, [r4, #8]
 800c822:	6823      	ldr	r3, [r4, #0]
 800c824:	199b      	adds	r3, r3, r6
 800c826:	6023      	str	r3, [r4, #0]
 800c828:	9b02      	ldr	r3, [sp, #8]
 800c82a:	4463      	add	r3, ip
 800c82c:	9302      	str	r3, [sp, #8]
 800c82e:	68bb      	ldr	r3, [r7, #8]
 800c830:	1a9b      	subs	r3, r3, r2
 800c832:	60bb      	str	r3, [r7, #8]
 800c834:	d0a3      	beq.n	800c77e <__ssprint_r+0x1a>
 800c836:	2300      	movs	r3, #0
 800c838:	9301      	str	r3, [sp, #4]
 800c83a:	e7ae      	b.n	800c79a <__ssprint_r+0x36>
 800c83c:	002a      	movs	r2, r5
 800c83e:	9805      	ldr	r0, [sp, #20]
 800c840:	f000 ff9e 	bl	800d780 <_realloc_r>
 800c844:	1e06      	subs	r6, r0, #0
 800c846:	d1d6      	bne.n	800c7f6 <__ssprint_r+0x92>
 800c848:	6921      	ldr	r1, [r4, #16]
 800c84a:	9805      	ldr	r0, [sp, #20]
 800c84c:	f7fc fe26 	bl	800949c <_free_r>
 800c850:	230c      	movs	r3, #12
 800c852:	9a05      	ldr	r2, [sp, #20]
 800c854:	2001      	movs	r0, #1
 800c856:	6013      	str	r3, [r2, #0]
 800c858:	89a2      	ldrh	r2, [r4, #12]
 800c85a:	3334      	adds	r3, #52	; 0x34
 800c85c:	4313      	orrs	r3, r2
 800c85e:	81a3      	strh	r3, [r4, #12]
 800c860:	2300      	movs	r3, #0
 800c862:	4240      	negs	r0, r0
 800c864:	60bb      	str	r3, [r7, #8]
 800c866:	e78b      	b.n	800c780 <__ssprint_r+0x1c>
 800c868:	fffffb7f 	.word	0xfffffb7f

0800c86c <__sprint_r>:
 800c86c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800c86e:	6893      	ldr	r3, [r2, #8]
 800c870:	b085      	sub	sp, #20
 800c872:	9001      	str	r0, [sp, #4]
 800c874:	000d      	movs	r5, r1
 800c876:	0014      	movs	r4, r2
 800c878:	1e18      	subs	r0, r3, #0
 800c87a:	d018      	beq.n	800c8ae <__sprint_r+0x42>
 800c87c:	6e4b      	ldr	r3, [r1, #100]	; 0x64
 800c87e:	049b      	lsls	r3, r3, #18
 800c880:	d524      	bpl.n	800c8cc <__sprint_r+0x60>
 800c882:	6817      	ldr	r7, [r2, #0]
 800c884:	2600      	movs	r6, #0
 800c886:	683b      	ldr	r3, [r7, #0]
 800c888:	9302      	str	r3, [sp, #8]
 800c88a:	687b      	ldr	r3, [r7, #4]
 800c88c:	9300      	str	r3, [sp, #0]
 800c88e:	089b      	lsrs	r3, r3, #2
 800c890:	9303      	str	r3, [sp, #12]
 800c892:	9b03      	ldr	r3, [sp, #12]
 800c894:	42b3      	cmp	r3, r6
 800c896:	dc0e      	bgt.n	800c8b6 <__sprint_r+0x4a>
 800c898:	2203      	movs	r2, #3
 800c89a:	9b00      	ldr	r3, [sp, #0]
 800c89c:	68a0      	ldr	r0, [r4, #8]
 800c89e:	4393      	bics	r3, r2
 800c8a0:	1ac0      	subs	r0, r0, r3
 800c8a2:	60a0      	str	r0, [r4, #8]
 800c8a4:	3708      	adds	r7, #8
 800c8a6:	2800      	cmp	r0, #0
 800c8a8:	d1ec      	bne.n	800c884 <__sprint_r+0x18>
 800c8aa:	2300      	movs	r3, #0
 800c8ac:	60a3      	str	r3, [r4, #8]
 800c8ae:	2300      	movs	r3, #0
 800c8b0:	6063      	str	r3, [r4, #4]
 800c8b2:	b005      	add	sp, #20
 800c8b4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800c8b6:	9902      	ldr	r1, [sp, #8]
 800c8b8:	00b3      	lsls	r3, r6, #2
 800c8ba:	58c9      	ldr	r1, [r1, r3]
 800c8bc:	002a      	movs	r2, r5
 800c8be:	9801      	ldr	r0, [sp, #4]
 800c8c0:	f000 ff1a 	bl	800d6f8 <_fputwc_r>
 800c8c4:	1c43      	adds	r3, r0, #1
 800c8c6:	d0f0      	beq.n	800c8aa <__sprint_r+0x3e>
 800c8c8:	3601      	adds	r6, #1
 800c8ca:	e7e2      	b.n	800c892 <__sprint_r+0x26>
 800c8cc:	9801      	ldr	r0, [sp, #4]
 800c8ce:	f000 fd13 	bl	800d2f8 <__sfvwrite_r>
 800c8d2:	e7ea      	b.n	800c8aa <__sprint_r+0x3e>

0800c8d4 <_vfiprintf_r>:
 800c8d4:	b5f0      	push	{r4, r5, r6, r7, lr}
 800c8d6:	b0c1      	sub	sp, #260	; 0x104
 800c8d8:	001c      	movs	r4, r3
 800c8da:	001f      	movs	r7, r3
 800c8dc:	9006      	str	r0, [sp, #24]
 800c8de:	9103      	str	r1, [sp, #12]
 800c8e0:	9207      	str	r2, [sp, #28]
 800c8e2:	2800      	cmp	r0, #0
 800c8e4:	d004      	beq.n	800c8f0 <_vfiprintf_r+0x1c>
 800c8e6:	6b43      	ldr	r3, [r0, #52]	; 0x34
 800c8e8:	2b00      	cmp	r3, #0
 800c8ea:	d101      	bne.n	800c8f0 <_vfiprintf_r+0x1c>
 800c8ec:	f7fc fc04 	bl	80090f8 <__sinit>
 800c8f0:	9b03      	ldr	r3, [sp, #12]
 800c8f2:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800c8f4:	07db      	lsls	r3, r3, #31
 800c8f6:	d407      	bmi.n	800c908 <_vfiprintf_r+0x34>
 800c8f8:	9b03      	ldr	r3, [sp, #12]
 800c8fa:	899b      	ldrh	r3, [r3, #12]
 800c8fc:	059b      	lsls	r3, r3, #22
 800c8fe:	d403      	bmi.n	800c908 <_vfiprintf_r+0x34>
 800c900:	9b03      	ldr	r3, [sp, #12]
 800c902:	6d98      	ldr	r0, [r3, #88]	; 0x58
 800c904:	f7fc fd56 	bl	80093b4 <__retarget_lock_acquire_recursive>
 800c908:	9b03      	ldr	r3, [sp, #12]
 800c90a:	220c      	movs	r2, #12
 800c90c:	5e9a      	ldrsh	r2, [r3, r2]
 800c90e:	2380      	movs	r3, #128	; 0x80
 800c910:	019b      	lsls	r3, r3, #6
 800c912:	421a      	tst	r2, r3
 800c914:	d107      	bne.n	800c926 <_vfiprintf_r+0x52>
 800c916:	4313      	orrs	r3, r2
 800c918:	9a03      	ldr	r2, [sp, #12]
 800c91a:	8193      	strh	r3, [r2, #12]
 800c91c:	6e53      	ldr	r3, [r2, #100]	; 0x64
 800c91e:	4aa3      	ldr	r2, [pc, #652]	; (800cbac <_vfiprintf_r+0x2d8>)
 800c920:	4013      	ands	r3, r2
 800c922:	9a03      	ldr	r2, [sp, #12]
 800c924:	6653      	str	r3, [r2, #100]	; 0x64
 800c926:	9b03      	ldr	r3, [sp, #12]
 800c928:	899b      	ldrh	r3, [r3, #12]
 800c92a:	071b      	lsls	r3, r3, #28
 800c92c:	d503      	bpl.n	800c936 <_vfiprintf_r+0x62>
 800c92e:	9b03      	ldr	r3, [sp, #12]
 800c930:	691b      	ldr	r3, [r3, #16]
 800c932:	2b00      	cmp	r3, #0
 800c934:	d118      	bne.n	800c968 <_vfiprintf_r+0x94>
 800c936:	9903      	ldr	r1, [sp, #12]
 800c938:	9806      	ldr	r0, [sp, #24]
 800c93a:	f000 fe3b 	bl	800d5b4 <__swsetup_r>
 800c93e:	2800      	cmp	r0, #0
 800c940:	d012      	beq.n	800c968 <_vfiprintf_r+0x94>
 800c942:	9b03      	ldr	r3, [sp, #12]
 800c944:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800c946:	07db      	lsls	r3, r3, #31
 800c948:	d505      	bpl.n	800c956 <_vfiprintf_r+0x82>
 800c94a:	2301      	movs	r3, #1
 800c94c:	425b      	negs	r3, r3
 800c94e:	9308      	str	r3, [sp, #32]
 800c950:	9808      	ldr	r0, [sp, #32]
 800c952:	b041      	add	sp, #260	; 0x104
 800c954:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800c956:	9b03      	ldr	r3, [sp, #12]
 800c958:	899b      	ldrh	r3, [r3, #12]
 800c95a:	059b      	lsls	r3, r3, #22
 800c95c:	d4f5      	bmi.n	800c94a <_vfiprintf_r+0x76>
 800c95e:	9b03      	ldr	r3, [sp, #12]
 800c960:	6d98      	ldr	r0, [r3, #88]	; 0x58
 800c962:	f7fc fd28 	bl	80093b6 <__retarget_lock_release_recursive>
 800c966:	e7f0      	b.n	800c94a <_vfiprintf_r+0x76>
 800c968:	221a      	movs	r2, #26
 800c96a:	9b03      	ldr	r3, [sp, #12]
 800c96c:	899b      	ldrh	r3, [r3, #12]
 800c96e:	401a      	ands	r2, r3
 800c970:	2a0a      	cmp	r2, #10
 800c972:	d116      	bne.n	800c9a2 <_vfiprintf_r+0xce>
 800c974:	9a03      	ldr	r2, [sp, #12]
 800c976:	210e      	movs	r1, #14
 800c978:	5e52      	ldrsh	r2, [r2, r1]
 800c97a:	2a00      	cmp	r2, #0
 800c97c:	db11      	blt.n	800c9a2 <_vfiprintf_r+0xce>
 800c97e:	9a03      	ldr	r2, [sp, #12]
 800c980:	6e52      	ldr	r2, [r2, #100]	; 0x64
 800c982:	07d2      	lsls	r2, r2, #31
 800c984:	d405      	bmi.n	800c992 <_vfiprintf_r+0xbe>
 800c986:	059b      	lsls	r3, r3, #22
 800c988:	d403      	bmi.n	800c992 <_vfiprintf_r+0xbe>
 800c98a:	9b03      	ldr	r3, [sp, #12]
 800c98c:	6d98      	ldr	r0, [r3, #88]	; 0x58
 800c98e:	f7fc fd12 	bl	80093b6 <__retarget_lock_release_recursive>
 800c992:	0023      	movs	r3, r4
 800c994:	9a07      	ldr	r2, [sp, #28]
 800c996:	9903      	ldr	r1, [sp, #12]
 800c998:	9806      	ldr	r0, [sp, #24]
 800c99a:	f000 fc69 	bl	800d270 <__sbprintf>
 800c99e:	9008      	str	r0, [sp, #32]
 800c9a0:	e7d6      	b.n	800c950 <_vfiprintf_r+0x7c>
 800c9a2:	2300      	movs	r3, #0
 800c9a4:	ad17      	add	r5, sp, #92	; 0x5c
 800c9a6:	9514      	str	r5, [sp, #80]	; 0x50
 800c9a8:	9316      	str	r3, [sp, #88]	; 0x58
 800c9aa:	9315      	str	r3, [sp, #84]	; 0x54
 800c9ac:	930c      	str	r3, [sp, #48]	; 0x30
 800c9ae:	930d      	str	r3, [sp, #52]	; 0x34
 800c9b0:	930e      	str	r3, [sp, #56]	; 0x38
 800c9b2:	930f      	str	r3, [sp, #60]	; 0x3c
 800c9b4:	9308      	str	r3, [sp, #32]
 800c9b6:	9c07      	ldr	r4, [sp, #28]
 800c9b8:	7823      	ldrb	r3, [r4, #0]
 800c9ba:	2b00      	cmp	r3, #0
 800c9bc:	d002      	beq.n	800c9c4 <_vfiprintf_r+0xf0>
 800c9be:	2b25      	cmp	r3, #37	; 0x25
 800c9c0:	d000      	beq.n	800c9c4 <_vfiprintf_r+0xf0>
 800c9c2:	e08d      	b.n	800cae0 <_vfiprintf_r+0x20c>
 800c9c4:	9b07      	ldr	r3, [sp, #28]
 800c9c6:	1ae6      	subs	r6, r4, r3
 800c9c8:	429c      	cmp	r4, r3
 800c9ca:	d016      	beq.n	800c9fa <_vfiprintf_r+0x126>
 800c9cc:	602b      	str	r3, [r5, #0]
 800c9ce:	9b16      	ldr	r3, [sp, #88]	; 0x58
 800c9d0:	606e      	str	r6, [r5, #4]
 800c9d2:	199b      	adds	r3, r3, r6
 800c9d4:	9316      	str	r3, [sp, #88]	; 0x58
 800c9d6:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800c9d8:	3508      	adds	r5, #8
 800c9da:	3301      	adds	r3, #1
 800c9dc:	9315      	str	r3, [sp, #84]	; 0x54
 800c9de:	2b07      	cmp	r3, #7
 800c9e0:	dd08      	ble.n	800c9f4 <_vfiprintf_r+0x120>
 800c9e2:	9903      	ldr	r1, [sp, #12]
 800c9e4:	9806      	ldr	r0, [sp, #24]
 800c9e6:	aa14      	add	r2, sp, #80	; 0x50
 800c9e8:	f7ff ff40 	bl	800c86c <__sprint_r>
 800c9ec:	2800      	cmp	r0, #0
 800c9ee:	d000      	beq.n	800c9f2 <_vfiprintf_r+0x11e>
 800c9f0:	e3d9      	b.n	800d1a6 <_vfiprintf_r+0x8d2>
 800c9f2:	ad17      	add	r5, sp, #92	; 0x5c
 800c9f4:	9b08      	ldr	r3, [sp, #32]
 800c9f6:	199b      	adds	r3, r3, r6
 800c9f8:	9308      	str	r3, [sp, #32]
 800c9fa:	7823      	ldrb	r3, [r4, #0]
 800c9fc:	2b00      	cmp	r3, #0
 800c9fe:	d101      	bne.n	800ca04 <_vfiprintf_r+0x130>
 800ca00:	f000 fbf6 	bl	800d1f0 <_vfiprintf_r+0x91c>
 800ca04:	2200      	movs	r2, #0
 800ca06:	a912      	add	r1, sp, #72	; 0x48
 800ca08:	70ca      	strb	r2, [r1, #3]
 800ca0a:	2101      	movs	r1, #1
 800ca0c:	1c63      	adds	r3, r4, #1
 800ca0e:	0014      	movs	r4, r2
 800ca10:	4249      	negs	r1, r1
 800ca12:	9105      	str	r1, [sp, #20]
 800ca14:	9209      	str	r2, [sp, #36]	; 0x24
 800ca16:	1c5a      	adds	r2, r3, #1
 800ca18:	781b      	ldrb	r3, [r3, #0]
 800ca1a:	9207      	str	r2, [sp, #28]
 800ca1c:	0018      	movs	r0, r3
 800ca1e:	3820      	subs	r0, #32
 800ca20:	285a      	cmp	r0, #90	; 0x5a
 800ca22:	d900      	bls.n	800ca26 <_vfiprintf_r+0x152>
 800ca24:	e362      	b.n	800d0ec <_vfiprintf_r+0x818>
 800ca26:	f7f3 fb7f 	bl	8000128 <__gnu_thumb1_case_uhi>
 800ca2a:	0078      	.short	0x0078
 800ca2c:	03610361 	.word	0x03610361
 800ca30:	03610081 	.word	0x03610081
 800ca34:	03610361 	.word	0x03610361
 800ca38:	0361005d 	.word	0x0361005d
 800ca3c:	00830361 	.word	0x00830361
 800ca40:	0361008b 	.word	0x0361008b
 800ca44:	008f0089 	.word	0x008f0089
 800ca48:	00ad0361 	.word	0x00ad0361
 800ca4c:	00af00af 	.word	0x00af00af
 800ca50:	00af00af 	.word	0x00af00af
 800ca54:	00af00af 	.word	0x00af00af
 800ca58:	00af00af 	.word	0x00af00af
 800ca5c:	036100af 	.word	0x036100af
 800ca60:	03610361 	.word	0x03610361
 800ca64:	03610361 	.word	0x03610361
 800ca68:	03610361 	.word	0x03610361
 800ca6c:	03610361 	.word	0x03610361
 800ca70:	00e600da 	.word	0x00e600da
 800ca74:	03610361 	.word	0x03610361
 800ca78:	03610361 	.word	0x03610361
 800ca7c:	03610361 	.word	0x03610361
 800ca80:	03610361 	.word	0x03610361
 800ca84:	03610361 	.word	0x03610361
 800ca88:	03610143 	.word	0x03610143
 800ca8c:	03610361 	.word	0x03610361
 800ca90:	03610182 	.word	0x03610182
 800ca94:	0361027c 	.word	0x0361027c
 800ca98:	02ae0361 	.word	0x02ae0361
 800ca9c:	03610361 	.word	0x03610361
 800caa0:	03610361 	.word	0x03610361
 800caa4:	03610361 	.word	0x03610361
 800caa8:	03610361 	.word	0x03610361
 800caac:	03610361 	.word	0x03610361
 800cab0:	00e800da 	.word	0x00e800da
 800cab4:	03610361 	.word	0x03610361
 800cab8:	00c30361 	.word	0x00c30361
 800cabc:	00d600e8 	.word	0x00d600e8
 800cac0:	00cf0361 	.word	0x00cf0361
 800cac4:	01260361 	.word	0x01260361
 800cac8:	01740145 	.word	0x01740145
 800cacc:	036100d6 	.word	0x036100d6
 800cad0:	007f0182 	.word	0x007f0182
 800cad4:	0361027e 	.word	0x0361027e
 800cad8:	02cd0361 	.word	0x02cd0361
 800cadc:	007f0361 	.word	0x007f0361
 800cae0:	3401      	adds	r4, #1
 800cae2:	e769      	b.n	800c9b8 <_vfiprintf_r+0xe4>
 800cae4:	9806      	ldr	r0, [sp, #24]
 800cae6:	f7fe fe8b 	bl	800b800 <_localeconv_r>
 800caea:	6843      	ldr	r3, [r0, #4]
 800caec:	0018      	movs	r0, r3
 800caee:	930f      	str	r3, [sp, #60]	; 0x3c
 800caf0:	f7f3 fb08 	bl	8000104 <strlen>
 800caf4:	900e      	str	r0, [sp, #56]	; 0x38
 800caf6:	9806      	ldr	r0, [sp, #24]
 800caf8:	f7fe fe82 	bl	800b800 <_localeconv_r>
 800cafc:	6883      	ldr	r3, [r0, #8]
 800cafe:	930d      	str	r3, [sp, #52]	; 0x34
 800cb00:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800cb02:	2b00      	cmp	r3, #0
 800cb04:	d010      	beq.n	800cb28 <_vfiprintf_r+0x254>
 800cb06:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800cb08:	2b00      	cmp	r3, #0
 800cb0a:	d00d      	beq.n	800cb28 <_vfiprintf_r+0x254>
 800cb0c:	781b      	ldrb	r3, [r3, #0]
 800cb0e:	2b00      	cmp	r3, #0
 800cb10:	d00a      	beq.n	800cb28 <_vfiprintf_r+0x254>
 800cb12:	2380      	movs	r3, #128	; 0x80
 800cb14:	00db      	lsls	r3, r3, #3
 800cb16:	431c      	orrs	r4, r3
 800cb18:	e006      	b.n	800cb28 <_vfiprintf_r+0x254>
 800cb1a:	ab12      	add	r3, sp, #72	; 0x48
 800cb1c:	78da      	ldrb	r2, [r3, #3]
 800cb1e:	3303      	adds	r3, #3
 800cb20:	2a00      	cmp	r2, #0
 800cb22:	d101      	bne.n	800cb28 <_vfiprintf_r+0x254>
 800cb24:	3220      	adds	r2, #32
 800cb26:	701a      	strb	r2, [r3, #0]
 800cb28:	9b07      	ldr	r3, [sp, #28]
 800cb2a:	e774      	b.n	800ca16 <_vfiprintf_r+0x142>
 800cb2c:	2301      	movs	r3, #1
 800cb2e:	e7f2      	b.n	800cb16 <_vfiprintf_r+0x242>
 800cb30:	cf08      	ldmia	r7!, {r3}
 800cb32:	9309      	str	r3, [sp, #36]	; 0x24
 800cb34:	2b00      	cmp	r3, #0
 800cb36:	daf7      	bge.n	800cb28 <_vfiprintf_r+0x254>
 800cb38:	425b      	negs	r3, r3
 800cb3a:	9309      	str	r3, [sp, #36]	; 0x24
 800cb3c:	2304      	movs	r3, #4
 800cb3e:	e7ea      	b.n	800cb16 <_vfiprintf_r+0x242>
 800cb40:	222b      	movs	r2, #43	; 0x2b
 800cb42:	ab12      	add	r3, sp, #72	; 0x48
 800cb44:	70da      	strb	r2, [r3, #3]
 800cb46:	e7ef      	b.n	800cb28 <_vfiprintf_r+0x254>
 800cb48:	9b07      	ldr	r3, [sp, #28]
 800cb4a:	1c5a      	adds	r2, r3, #1
 800cb4c:	781b      	ldrb	r3, [r3, #0]
 800cb4e:	2b2a      	cmp	r3, #42	; 0x2a
 800cb50:	d00f      	beq.n	800cb72 <_vfiprintf_r+0x29e>
 800cb52:	2100      	movs	r1, #0
 800cb54:	9105      	str	r1, [sp, #20]
 800cb56:	0019      	movs	r1, r3
 800cb58:	3930      	subs	r1, #48	; 0x30
 800cb5a:	9207      	str	r2, [sp, #28]
 800cb5c:	2909      	cmp	r1, #9
 800cb5e:	d900      	bls.n	800cb62 <_vfiprintf_r+0x28e>
 800cb60:	e75c      	b.n	800ca1c <_vfiprintf_r+0x148>
 800cb62:	200a      	movs	r0, #10
 800cb64:	9b05      	ldr	r3, [sp, #20]
 800cb66:	4343      	muls	r3, r0
 800cb68:	185b      	adds	r3, r3, r1
 800cb6a:	9305      	str	r3, [sp, #20]
 800cb6c:	7813      	ldrb	r3, [r2, #0]
 800cb6e:	3201      	adds	r2, #1
 800cb70:	e7f1      	b.n	800cb56 <_vfiprintf_r+0x282>
 800cb72:	cf08      	ldmia	r7!, {r3}
 800cb74:	9305      	str	r3, [sp, #20]
 800cb76:	2b00      	cmp	r3, #0
 800cb78:	da02      	bge.n	800cb80 <_vfiprintf_r+0x2ac>
 800cb7a:	2301      	movs	r3, #1
 800cb7c:	425b      	negs	r3, r3
 800cb7e:	9305      	str	r3, [sp, #20]
 800cb80:	9207      	str	r2, [sp, #28]
 800cb82:	e7d1      	b.n	800cb28 <_vfiprintf_r+0x254>
 800cb84:	2380      	movs	r3, #128	; 0x80
 800cb86:	e7c6      	b.n	800cb16 <_vfiprintf_r+0x242>
 800cb88:	2100      	movs	r1, #0
 800cb8a:	9a07      	ldr	r2, [sp, #28]
 800cb8c:	9109      	str	r1, [sp, #36]	; 0x24
 800cb8e:	200a      	movs	r0, #10
 800cb90:	9909      	ldr	r1, [sp, #36]	; 0x24
 800cb92:	3b30      	subs	r3, #48	; 0x30
 800cb94:	4341      	muls	r1, r0
 800cb96:	185b      	adds	r3, r3, r1
 800cb98:	9309      	str	r3, [sp, #36]	; 0x24
 800cb9a:	0013      	movs	r3, r2
 800cb9c:	781b      	ldrb	r3, [r3, #0]
 800cb9e:	3201      	adds	r2, #1
 800cba0:	0019      	movs	r1, r3
 800cba2:	3930      	subs	r1, #48	; 0x30
 800cba4:	9207      	str	r2, [sp, #28]
 800cba6:	2909      	cmp	r1, #9
 800cba8:	d9f1      	bls.n	800cb8e <_vfiprintf_r+0x2ba>
 800cbaa:	e737      	b.n	800ca1c <_vfiprintf_r+0x148>
 800cbac:	ffffdfff 	.word	0xffffdfff
 800cbb0:	9b07      	ldr	r3, [sp, #28]
 800cbb2:	781b      	ldrb	r3, [r3, #0]
 800cbb4:	2b68      	cmp	r3, #104	; 0x68
 800cbb6:	d105      	bne.n	800cbc4 <_vfiprintf_r+0x2f0>
 800cbb8:	9b07      	ldr	r3, [sp, #28]
 800cbba:	3301      	adds	r3, #1
 800cbbc:	9307      	str	r3, [sp, #28]
 800cbbe:	2380      	movs	r3, #128	; 0x80
 800cbc0:	009b      	lsls	r3, r3, #2
 800cbc2:	e7a8      	b.n	800cb16 <_vfiprintf_r+0x242>
 800cbc4:	2340      	movs	r3, #64	; 0x40
 800cbc6:	e7a6      	b.n	800cb16 <_vfiprintf_r+0x242>
 800cbc8:	9b07      	ldr	r3, [sp, #28]
 800cbca:	781b      	ldrb	r3, [r3, #0]
 800cbcc:	2b6c      	cmp	r3, #108	; 0x6c
 800cbce:	d104      	bne.n	800cbda <_vfiprintf_r+0x306>
 800cbd0:	9b07      	ldr	r3, [sp, #28]
 800cbd2:	3301      	adds	r3, #1
 800cbd4:	9307      	str	r3, [sp, #28]
 800cbd6:	2320      	movs	r3, #32
 800cbd8:	e79d      	b.n	800cb16 <_vfiprintf_r+0x242>
 800cbda:	2310      	movs	r3, #16
 800cbdc:	e79b      	b.n	800cb16 <_vfiprintf_r+0x242>
 800cbde:	003a      	movs	r2, r7
 800cbe0:	ca08      	ldmia	r2!, {r3}
 800cbe2:	ae27      	add	r6, sp, #156	; 0x9c
 800cbe4:	7033      	strb	r3, [r6, #0]
 800cbe6:	2300      	movs	r3, #0
 800cbe8:	9204      	str	r2, [sp, #16]
 800cbea:	aa12      	add	r2, sp, #72	; 0x48
 800cbec:	70d3      	strb	r3, [r2, #3]
 800cbee:	2201      	movs	r2, #1
 800cbf0:	930b      	str	r3, [sp, #44]	; 0x2c
 800cbf2:	9205      	str	r2, [sp, #20]
 800cbf4:	e0b0      	b.n	800cd58 <_vfiprintf_r+0x484>
 800cbf6:	2310      	movs	r3, #16
 800cbf8:	431c      	orrs	r4, r3
 800cbfa:	06a3      	lsls	r3, r4, #26
 800cbfc:	d52a      	bpl.n	800cc54 <_vfiprintf_r+0x380>
 800cbfe:	2307      	movs	r3, #7
 800cc00:	3707      	adds	r7, #7
 800cc02:	439f      	bics	r7, r3
 800cc04:	0039      	movs	r1, r7
 800cc06:	c90c      	ldmia	r1!, {r2, r3}
 800cc08:	9200      	str	r2, [sp, #0]
 800cc0a:	9301      	str	r3, [sp, #4]
 800cc0c:	9104      	str	r1, [sp, #16]
 800cc0e:	9a01      	ldr	r2, [sp, #4]
 800cc10:	2301      	movs	r3, #1
 800cc12:	2a00      	cmp	r2, #0
 800cc14:	da09      	bge.n	800cc2a <_vfiprintf_r+0x356>
 800cc16:	9e00      	ldr	r6, [sp, #0]
 800cc18:	9f01      	ldr	r7, [sp, #4]
 800cc1a:	2200      	movs	r2, #0
 800cc1c:	4271      	negs	r1, r6
 800cc1e:	41ba      	sbcs	r2, r7
 800cc20:	9100      	str	r1, [sp, #0]
 800cc22:	9201      	str	r2, [sp, #4]
 800cc24:	212d      	movs	r1, #45	; 0x2d
 800cc26:	aa12      	add	r2, sp, #72	; 0x48
 800cc28:	70d1      	strb	r1, [r2, #3]
 800cc2a:	9901      	ldr	r1, [sp, #4]
 800cc2c:	9a00      	ldr	r2, [sp, #0]
 800cc2e:	430a      	orrs	r2, r1
 800cc30:	9905      	ldr	r1, [sp, #20]
 800cc32:	3101      	adds	r1, #1
 800cc34:	d100      	bne.n	800cc38 <_vfiprintf_r+0x364>
 800cc36:	e2e9      	b.n	800d20c <_vfiprintf_r+0x938>
 800cc38:	2180      	movs	r1, #128	; 0x80
 800cc3a:	0027      	movs	r7, r4
 800cc3c:	438f      	bics	r7, r1
 800cc3e:	2a00      	cmp	r2, #0
 800cc40:	d000      	beq.n	800cc44 <_vfiprintf_r+0x370>
 800cc42:	e2e7      	b.n	800d214 <_vfiprintf_r+0x940>
 800cc44:	9a05      	ldr	r2, [sp, #20]
 800cc46:	2a00      	cmp	r2, #0
 800cc48:	d100      	bne.n	800cc4c <_vfiprintf_r+0x378>
 800cc4a:	e243      	b.n	800d0d4 <_vfiprintf_r+0x800>
 800cc4c:	2b01      	cmp	r3, #1
 800cc4e:	d000      	beq.n	800cc52 <_vfiprintf_r+0x37e>
 800cc50:	e2e3      	b.n	800d21a <_vfiprintf_r+0x946>
 800cc52:	e1e7      	b.n	800d024 <_vfiprintf_r+0x750>
 800cc54:	003a      	movs	r2, r7
 800cc56:	ca08      	ldmia	r2!, {r3}
 800cc58:	9204      	str	r2, [sp, #16]
 800cc5a:	06e2      	lsls	r2, r4, #27
 800cc5c:	d503      	bpl.n	800cc66 <_vfiprintf_r+0x392>
 800cc5e:	9300      	str	r3, [sp, #0]
 800cc60:	17db      	asrs	r3, r3, #31
 800cc62:	9301      	str	r3, [sp, #4]
 800cc64:	e7d3      	b.n	800cc0e <_vfiprintf_r+0x33a>
 800cc66:	0662      	lsls	r2, r4, #25
 800cc68:	d501      	bpl.n	800cc6e <_vfiprintf_r+0x39a>
 800cc6a:	b21b      	sxth	r3, r3
 800cc6c:	e7f7      	b.n	800cc5e <_vfiprintf_r+0x38a>
 800cc6e:	05a2      	lsls	r2, r4, #22
 800cc70:	d5f5      	bpl.n	800cc5e <_vfiprintf_r+0x38a>
 800cc72:	b25b      	sxtb	r3, r3
 800cc74:	e7f3      	b.n	800cc5e <_vfiprintf_r+0x38a>
 800cc76:	1d3b      	adds	r3, r7, #4
 800cc78:	9304      	str	r3, [sp, #16]
 800cc7a:	06a3      	lsls	r3, r4, #26
 800cc7c:	d506      	bpl.n	800cc8c <_vfiprintf_r+0x3b8>
 800cc7e:	683b      	ldr	r3, [r7, #0]
 800cc80:	9a08      	ldr	r2, [sp, #32]
 800cc82:	601a      	str	r2, [r3, #0]
 800cc84:	17d2      	asrs	r2, r2, #31
 800cc86:	605a      	str	r2, [r3, #4]
 800cc88:	9f04      	ldr	r7, [sp, #16]
 800cc8a:	e694      	b.n	800c9b6 <_vfiprintf_r+0xe2>
 800cc8c:	06e3      	lsls	r3, r4, #27
 800cc8e:	d503      	bpl.n	800cc98 <_vfiprintf_r+0x3c4>
 800cc90:	683b      	ldr	r3, [r7, #0]
 800cc92:	9a08      	ldr	r2, [sp, #32]
 800cc94:	601a      	str	r2, [r3, #0]
 800cc96:	e7f7      	b.n	800cc88 <_vfiprintf_r+0x3b4>
 800cc98:	0663      	lsls	r3, r4, #25
 800cc9a:	d503      	bpl.n	800cca4 <_vfiprintf_r+0x3d0>
 800cc9c:	683b      	ldr	r3, [r7, #0]
 800cc9e:	9a08      	ldr	r2, [sp, #32]
 800cca0:	801a      	strh	r2, [r3, #0]
 800cca2:	e7f1      	b.n	800cc88 <_vfiprintf_r+0x3b4>
 800cca4:	05a4      	lsls	r4, r4, #22
 800cca6:	d5f3      	bpl.n	800cc90 <_vfiprintf_r+0x3bc>
 800cca8:	683b      	ldr	r3, [r7, #0]
 800ccaa:	9a08      	ldr	r2, [sp, #32]
 800ccac:	701a      	strb	r2, [r3, #0]
 800ccae:	e7eb      	b.n	800cc88 <_vfiprintf_r+0x3b4>
 800ccb0:	2310      	movs	r3, #16
 800ccb2:	431c      	orrs	r4, r3
 800ccb4:	2320      	movs	r3, #32
 800ccb6:	0020      	movs	r0, r4
 800ccb8:	4018      	ands	r0, r3
 800ccba:	421c      	tst	r4, r3
 800ccbc:	d00d      	beq.n	800ccda <_vfiprintf_r+0x406>
 800ccbe:	3b19      	subs	r3, #25
 800ccc0:	3707      	adds	r7, #7
 800ccc2:	439f      	bics	r7, r3
 800ccc4:	0039      	movs	r1, r7
 800ccc6:	c90c      	ldmia	r1!, {r2, r3}
 800ccc8:	9200      	str	r2, [sp, #0]
 800ccca:	9301      	str	r3, [sp, #4]
 800cccc:	9104      	str	r1, [sp, #16]
 800ccce:	4bcc      	ldr	r3, [pc, #816]	; (800d000 <_vfiprintf_r+0x72c>)
 800ccd0:	401c      	ands	r4, r3
 800ccd2:	2300      	movs	r3, #0
 800ccd4:	2100      	movs	r1, #0
 800ccd6:	aa12      	add	r2, sp, #72	; 0x48
 800ccd8:	e7a6      	b.n	800cc28 <_vfiprintf_r+0x354>
 800ccda:	003a      	movs	r2, r7
 800ccdc:	ca08      	ldmia	r2!, {r3}
 800ccde:	0021      	movs	r1, r4
 800cce0:	9204      	str	r2, [sp, #16]
 800cce2:	2210      	movs	r2, #16
 800cce4:	4011      	ands	r1, r2
 800cce6:	4214      	tst	r4, r2
 800cce8:	d002      	beq.n	800ccf0 <_vfiprintf_r+0x41c>
 800ccea:	9300      	str	r3, [sp, #0]
 800ccec:	9001      	str	r0, [sp, #4]
 800ccee:	e7ee      	b.n	800ccce <_vfiprintf_r+0x3fa>
 800ccf0:	2240      	movs	r2, #64	; 0x40
 800ccf2:	0020      	movs	r0, r4
 800ccf4:	4010      	ands	r0, r2
 800ccf6:	4214      	tst	r4, r2
 800ccf8:	d003      	beq.n	800cd02 <_vfiprintf_r+0x42e>
 800ccfa:	b29b      	uxth	r3, r3
 800ccfc:	9300      	str	r3, [sp, #0]
 800ccfe:	9101      	str	r1, [sp, #4]
 800cd00:	e7e5      	b.n	800ccce <_vfiprintf_r+0x3fa>
 800cd02:	2280      	movs	r2, #128	; 0x80
 800cd04:	0021      	movs	r1, r4
 800cd06:	0092      	lsls	r2, r2, #2
 800cd08:	4011      	ands	r1, r2
 800cd0a:	4214      	tst	r4, r2
 800cd0c:	d0f6      	beq.n	800ccfc <_vfiprintf_r+0x428>
 800cd0e:	b2db      	uxtb	r3, r3
 800cd10:	e7eb      	b.n	800ccea <_vfiprintf_r+0x416>
 800cd12:	003b      	movs	r3, r7
 800cd14:	cb04      	ldmia	r3!, {r2}
 800cd16:	49bb      	ldr	r1, [pc, #748]	; (800d004 <_vfiprintf_r+0x730>)
 800cd18:	9304      	str	r3, [sp, #16]
 800cd1a:	2300      	movs	r3, #0
 800cd1c:	9200      	str	r2, [sp, #0]
 800cd1e:	aa13      	add	r2, sp, #76	; 0x4c
 800cd20:	8011      	strh	r1, [r2, #0]
 800cd22:	4ab9      	ldr	r2, [pc, #740]	; (800d008 <_vfiprintf_r+0x734>)
 800cd24:	9301      	str	r3, [sp, #4]
 800cd26:	3302      	adds	r3, #2
 800cd28:	431c      	orrs	r4, r3
 800cd2a:	920c      	str	r2, [sp, #48]	; 0x30
 800cd2c:	e7d2      	b.n	800ccd4 <_vfiprintf_r+0x400>
 800cd2e:	003b      	movs	r3, r7
 800cd30:	2700      	movs	r7, #0
 800cd32:	cb40      	ldmia	r3!, {r6}
 800cd34:	9304      	str	r3, [sp, #16]
 800cd36:	ab12      	add	r3, sp, #72	; 0x48
 800cd38:	70df      	strb	r7, [r3, #3]
 800cd3a:	9b05      	ldr	r3, [sp, #20]
 800cd3c:	3301      	adds	r3, #1
 800cd3e:	d100      	bne.n	800cd42 <_vfiprintf_r+0x46e>
 800cd40:	e0ea      	b.n	800cf18 <_vfiprintf_r+0x644>
 800cd42:	0039      	movs	r1, r7
 800cd44:	0030      	movs	r0, r6
 800cd46:	9a05      	ldr	r2, [sp, #20]
 800cd48:	f7fe fd8f 	bl	800b86a <memchr>
 800cd4c:	900b      	str	r0, [sp, #44]	; 0x2c
 800cd4e:	42b8      	cmp	r0, r7
 800cd50:	d002      	beq.n	800cd58 <_vfiprintf_r+0x484>
 800cd52:	1b83      	subs	r3, r0, r6
 800cd54:	9305      	str	r3, [sp, #20]
 800cd56:	970b      	str	r7, [sp, #44]	; 0x2c
 800cd58:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800cd5a:	9a05      	ldr	r2, [sp, #20]
 800cd5c:	930a      	str	r3, [sp, #40]	; 0x28
 800cd5e:	4293      	cmp	r3, r2
 800cd60:	da00      	bge.n	800cd64 <_vfiprintf_r+0x490>
 800cd62:	920a      	str	r2, [sp, #40]	; 0x28
 800cd64:	ab12      	add	r3, sp, #72	; 0x48
 800cd66:	3303      	adds	r3, #3
 800cd68:	781b      	ldrb	r3, [r3, #0]
 800cd6a:	1e5a      	subs	r2, r3, #1
 800cd6c:	4193      	sbcs	r3, r2
 800cd6e:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800cd70:	18d3      	adds	r3, r2, r3
 800cd72:	930a      	str	r3, [sp, #40]	; 0x28
 800cd74:	0022      	movs	r2, r4
 800cd76:	2302      	movs	r3, #2
 800cd78:	401a      	ands	r2, r3
 800cd7a:	9210      	str	r2, [sp, #64]	; 0x40
 800cd7c:	421c      	tst	r4, r3
 800cd7e:	d002      	beq.n	800cd86 <_vfiprintf_r+0x4b2>
 800cd80:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800cd82:	3302      	adds	r3, #2
 800cd84:	930a      	str	r3, [sp, #40]	; 0x28
 800cd86:	2384      	movs	r3, #132	; 0x84
 800cd88:	0022      	movs	r2, r4
 800cd8a:	401a      	ands	r2, r3
 800cd8c:	9211      	str	r2, [sp, #68]	; 0x44
 800cd8e:	421c      	tst	r4, r3
 800cd90:	d11e      	bne.n	800cdd0 <_vfiprintf_r+0x4fc>
 800cd92:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800cd94:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800cd96:	1a9f      	subs	r7, r3, r2
 800cd98:	2f00      	cmp	r7, #0
 800cd9a:	dd19      	ble.n	800cdd0 <_vfiprintf_r+0x4fc>
 800cd9c:	0029      	movs	r1, r5
 800cd9e:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800cda0:	489a      	ldr	r0, [pc, #616]	; (800d00c <_vfiprintf_r+0x738>)
 800cda2:	9a16      	ldr	r2, [sp, #88]	; 0x58
 800cda4:	3301      	adds	r3, #1
 800cda6:	3108      	adds	r1, #8
 800cda8:	6028      	str	r0, [r5, #0]
 800cdaa:	2f10      	cmp	r7, #16
 800cdac:	dd00      	ble.n	800cdb0 <_vfiprintf_r+0x4dc>
 800cdae:	e1a7      	b.n	800d100 <_vfiprintf_r+0x82c>
 800cdb0:	606f      	str	r7, [r5, #4]
 800cdb2:	18bf      	adds	r7, r7, r2
 800cdb4:	000d      	movs	r5, r1
 800cdb6:	9716      	str	r7, [sp, #88]	; 0x58
 800cdb8:	9315      	str	r3, [sp, #84]	; 0x54
 800cdba:	2b07      	cmp	r3, #7
 800cdbc:	dd08      	ble.n	800cdd0 <_vfiprintf_r+0x4fc>
 800cdbe:	9903      	ldr	r1, [sp, #12]
 800cdc0:	9806      	ldr	r0, [sp, #24]
 800cdc2:	aa14      	add	r2, sp, #80	; 0x50
 800cdc4:	f7ff fd52 	bl	800c86c <__sprint_r>
 800cdc8:	2800      	cmp	r0, #0
 800cdca:	d000      	beq.n	800cdce <_vfiprintf_r+0x4fa>
 800cdcc:	e1eb      	b.n	800d1a6 <_vfiprintf_r+0x8d2>
 800cdce:	ad17      	add	r5, sp, #92	; 0x5c
 800cdd0:	a912      	add	r1, sp, #72	; 0x48
 800cdd2:	78c8      	ldrb	r0, [r1, #3]
 800cdd4:	9a16      	ldr	r2, [sp, #88]	; 0x58
 800cdd6:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800cdd8:	3103      	adds	r1, #3
 800cdda:	2800      	cmp	r0, #0
 800cddc:	d012      	beq.n	800ce04 <_vfiprintf_r+0x530>
 800cdde:	6029      	str	r1, [r5, #0]
 800cde0:	2101      	movs	r1, #1
 800cde2:	3301      	adds	r3, #1
 800cde4:	1852      	adds	r2, r2, r1
 800cde6:	6069      	str	r1, [r5, #4]
 800cde8:	9216      	str	r2, [sp, #88]	; 0x58
 800cdea:	9315      	str	r3, [sp, #84]	; 0x54
 800cdec:	3508      	adds	r5, #8
 800cdee:	2b07      	cmp	r3, #7
 800cdf0:	dd08      	ble.n	800ce04 <_vfiprintf_r+0x530>
 800cdf2:	9903      	ldr	r1, [sp, #12]
 800cdf4:	9806      	ldr	r0, [sp, #24]
 800cdf6:	aa14      	add	r2, sp, #80	; 0x50
 800cdf8:	f7ff fd38 	bl	800c86c <__sprint_r>
 800cdfc:	2800      	cmp	r0, #0
 800cdfe:	d000      	beq.n	800ce02 <_vfiprintf_r+0x52e>
 800ce00:	e1d1      	b.n	800d1a6 <_vfiprintf_r+0x8d2>
 800ce02:	ad17      	add	r5, sp, #92	; 0x5c
 800ce04:	9910      	ldr	r1, [sp, #64]	; 0x40
 800ce06:	9a16      	ldr	r2, [sp, #88]	; 0x58
 800ce08:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800ce0a:	2900      	cmp	r1, #0
 800ce0c:	d013      	beq.n	800ce36 <_vfiprintf_r+0x562>
 800ce0e:	a913      	add	r1, sp, #76	; 0x4c
 800ce10:	6029      	str	r1, [r5, #0]
 800ce12:	2102      	movs	r1, #2
 800ce14:	3301      	adds	r3, #1
 800ce16:	1852      	adds	r2, r2, r1
 800ce18:	6069      	str	r1, [r5, #4]
 800ce1a:	9216      	str	r2, [sp, #88]	; 0x58
 800ce1c:	9315      	str	r3, [sp, #84]	; 0x54
 800ce1e:	3508      	adds	r5, #8
 800ce20:	2b07      	cmp	r3, #7
 800ce22:	dd08      	ble.n	800ce36 <_vfiprintf_r+0x562>
 800ce24:	9903      	ldr	r1, [sp, #12]
 800ce26:	9806      	ldr	r0, [sp, #24]
 800ce28:	aa14      	add	r2, sp, #80	; 0x50
 800ce2a:	f7ff fd1f 	bl	800c86c <__sprint_r>
 800ce2e:	2800      	cmp	r0, #0
 800ce30:	d000      	beq.n	800ce34 <_vfiprintf_r+0x560>
 800ce32:	e1b8      	b.n	800d1a6 <_vfiprintf_r+0x8d2>
 800ce34:	ad17      	add	r5, sp, #92	; 0x5c
 800ce36:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800ce38:	2b80      	cmp	r3, #128	; 0x80
 800ce3a:	d11e      	bne.n	800ce7a <_vfiprintf_r+0x5a6>
 800ce3c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800ce3e:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800ce40:	1a9f      	subs	r7, r3, r2
 800ce42:	2f00      	cmp	r7, #0
 800ce44:	dd19      	ble.n	800ce7a <_vfiprintf_r+0x5a6>
 800ce46:	0029      	movs	r1, r5
 800ce48:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800ce4a:	4871      	ldr	r0, [pc, #452]	; (800d010 <_vfiprintf_r+0x73c>)
 800ce4c:	9a16      	ldr	r2, [sp, #88]	; 0x58
 800ce4e:	3301      	adds	r3, #1
 800ce50:	3108      	adds	r1, #8
 800ce52:	6028      	str	r0, [r5, #0]
 800ce54:	2f10      	cmp	r7, #16
 800ce56:	dd00      	ble.n	800ce5a <_vfiprintf_r+0x586>
 800ce58:	e164      	b.n	800d124 <_vfiprintf_r+0x850>
 800ce5a:	606f      	str	r7, [r5, #4]
 800ce5c:	18bf      	adds	r7, r7, r2
 800ce5e:	000d      	movs	r5, r1
 800ce60:	9716      	str	r7, [sp, #88]	; 0x58
 800ce62:	9315      	str	r3, [sp, #84]	; 0x54
 800ce64:	2b07      	cmp	r3, #7
 800ce66:	dd08      	ble.n	800ce7a <_vfiprintf_r+0x5a6>
 800ce68:	9903      	ldr	r1, [sp, #12]
 800ce6a:	9806      	ldr	r0, [sp, #24]
 800ce6c:	aa14      	add	r2, sp, #80	; 0x50
 800ce6e:	f7ff fcfd 	bl	800c86c <__sprint_r>
 800ce72:	2800      	cmp	r0, #0
 800ce74:	d000      	beq.n	800ce78 <_vfiprintf_r+0x5a4>
 800ce76:	e196      	b.n	800d1a6 <_vfiprintf_r+0x8d2>
 800ce78:	ad17      	add	r5, sp, #92	; 0x5c
 800ce7a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800ce7c:	9a05      	ldr	r2, [sp, #20]
 800ce7e:	1a9f      	subs	r7, r3, r2
 800ce80:	2f00      	cmp	r7, #0
 800ce82:	dd19      	ble.n	800ceb8 <_vfiprintf_r+0x5e4>
 800ce84:	0029      	movs	r1, r5
 800ce86:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800ce88:	4861      	ldr	r0, [pc, #388]	; (800d010 <_vfiprintf_r+0x73c>)
 800ce8a:	9a16      	ldr	r2, [sp, #88]	; 0x58
 800ce8c:	3301      	adds	r3, #1
 800ce8e:	3108      	adds	r1, #8
 800ce90:	6028      	str	r0, [r5, #0]
 800ce92:	2f10      	cmp	r7, #16
 800ce94:	dd00      	ble.n	800ce98 <_vfiprintf_r+0x5c4>
 800ce96:	e157      	b.n	800d148 <_vfiprintf_r+0x874>
 800ce98:	606f      	str	r7, [r5, #4]
 800ce9a:	18bf      	adds	r7, r7, r2
 800ce9c:	000d      	movs	r5, r1
 800ce9e:	9716      	str	r7, [sp, #88]	; 0x58
 800cea0:	9315      	str	r3, [sp, #84]	; 0x54
 800cea2:	2b07      	cmp	r3, #7
 800cea4:	dd08      	ble.n	800ceb8 <_vfiprintf_r+0x5e4>
 800cea6:	9903      	ldr	r1, [sp, #12]
 800cea8:	9806      	ldr	r0, [sp, #24]
 800ceaa:	aa14      	add	r2, sp, #80	; 0x50
 800ceac:	f7ff fcde 	bl	800c86c <__sprint_r>
 800ceb0:	2800      	cmp	r0, #0
 800ceb2:	d000      	beq.n	800ceb6 <_vfiprintf_r+0x5e2>
 800ceb4:	e177      	b.n	800d1a6 <_vfiprintf_r+0x8d2>
 800ceb6:	ad17      	add	r5, sp, #92	; 0x5c
 800ceb8:	9b05      	ldr	r3, [sp, #20]
 800ceba:	9a05      	ldr	r2, [sp, #20]
 800cebc:	606b      	str	r3, [r5, #4]
 800cebe:	9b16      	ldr	r3, [sp, #88]	; 0x58
 800cec0:	602e      	str	r6, [r5, #0]
 800cec2:	189b      	adds	r3, r3, r2
 800cec4:	9316      	str	r3, [sp, #88]	; 0x58
 800cec6:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800cec8:	3508      	adds	r5, #8
 800ceca:	3301      	adds	r3, #1
 800cecc:	9315      	str	r3, [sp, #84]	; 0x54
 800cece:	2b07      	cmp	r3, #7
 800ced0:	dd08      	ble.n	800cee4 <_vfiprintf_r+0x610>
 800ced2:	9903      	ldr	r1, [sp, #12]
 800ced4:	9806      	ldr	r0, [sp, #24]
 800ced6:	aa14      	add	r2, sp, #80	; 0x50
 800ced8:	f7ff fcc8 	bl	800c86c <__sprint_r>
 800cedc:	2800      	cmp	r0, #0
 800cede:	d000      	beq.n	800cee2 <_vfiprintf_r+0x60e>
 800cee0:	e161      	b.n	800d1a6 <_vfiprintf_r+0x8d2>
 800cee2:	ad17      	add	r5, sp, #92	; 0x5c
 800cee4:	0764      	lsls	r4, r4, #29
 800cee6:	d500      	bpl.n	800ceea <_vfiprintf_r+0x616>
 800cee8:	e140      	b.n	800d16c <_vfiprintf_r+0x898>
 800ceea:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800ceec:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800ceee:	4293      	cmp	r3, r2
 800cef0:	da00      	bge.n	800cef4 <_vfiprintf_r+0x620>
 800cef2:	0013      	movs	r3, r2
 800cef4:	9a08      	ldr	r2, [sp, #32]
 800cef6:	18d3      	adds	r3, r2, r3
 800cef8:	9308      	str	r3, [sp, #32]
 800cefa:	9b16      	ldr	r3, [sp, #88]	; 0x58
 800cefc:	2b00      	cmp	r3, #0
 800cefe:	d007      	beq.n	800cf10 <_vfiprintf_r+0x63c>
 800cf00:	9903      	ldr	r1, [sp, #12]
 800cf02:	9806      	ldr	r0, [sp, #24]
 800cf04:	aa14      	add	r2, sp, #80	; 0x50
 800cf06:	f7ff fcb1 	bl	800c86c <__sprint_r>
 800cf0a:	2800      	cmp	r0, #0
 800cf0c:	d000      	beq.n	800cf10 <_vfiprintf_r+0x63c>
 800cf0e:	e14a      	b.n	800d1a6 <_vfiprintf_r+0x8d2>
 800cf10:	2300      	movs	r3, #0
 800cf12:	ad17      	add	r5, sp, #92	; 0x5c
 800cf14:	9315      	str	r3, [sp, #84]	; 0x54
 800cf16:	e6b7      	b.n	800cc88 <_vfiprintf_r+0x3b4>
 800cf18:	0030      	movs	r0, r6
 800cf1a:	f7f3 f8f3 	bl	8000104 <strlen>
 800cf1e:	9005      	str	r0, [sp, #20]
 800cf20:	e719      	b.n	800cd56 <_vfiprintf_r+0x482>
 800cf22:	2310      	movs	r3, #16
 800cf24:	431c      	orrs	r4, r3
 800cf26:	2320      	movs	r3, #32
 800cf28:	0020      	movs	r0, r4
 800cf2a:	4018      	ands	r0, r3
 800cf2c:	421c      	tst	r4, r3
 800cf2e:	d009      	beq.n	800cf44 <_vfiprintf_r+0x670>
 800cf30:	3b19      	subs	r3, #25
 800cf32:	3707      	adds	r7, #7
 800cf34:	439f      	bics	r7, r3
 800cf36:	0039      	movs	r1, r7
 800cf38:	c90c      	ldmia	r1!, {r2, r3}
 800cf3a:	9200      	str	r2, [sp, #0]
 800cf3c:	9301      	str	r3, [sp, #4]
 800cf3e:	9104      	str	r1, [sp, #16]
 800cf40:	2301      	movs	r3, #1
 800cf42:	e6c7      	b.n	800ccd4 <_vfiprintf_r+0x400>
 800cf44:	003b      	movs	r3, r7
 800cf46:	cb04      	ldmia	r3!, {r2}
 800cf48:	0021      	movs	r1, r4
 800cf4a:	9304      	str	r3, [sp, #16]
 800cf4c:	2310      	movs	r3, #16
 800cf4e:	4019      	ands	r1, r3
 800cf50:	421c      	tst	r4, r3
 800cf52:	d003      	beq.n	800cf5c <_vfiprintf_r+0x688>
 800cf54:	9200      	str	r2, [sp, #0]
 800cf56:	9001      	str	r0, [sp, #4]
 800cf58:	3b0f      	subs	r3, #15
 800cf5a:	e6bb      	b.n	800ccd4 <_vfiprintf_r+0x400>
 800cf5c:	2340      	movs	r3, #64	; 0x40
 800cf5e:	0020      	movs	r0, r4
 800cf60:	4018      	ands	r0, r3
 800cf62:	421c      	tst	r4, r3
 800cf64:	d003      	beq.n	800cf6e <_vfiprintf_r+0x69a>
 800cf66:	b293      	uxth	r3, r2
 800cf68:	9300      	str	r3, [sp, #0]
 800cf6a:	9101      	str	r1, [sp, #4]
 800cf6c:	e7e8      	b.n	800cf40 <_vfiprintf_r+0x66c>
 800cf6e:	2380      	movs	r3, #128	; 0x80
 800cf70:	0021      	movs	r1, r4
 800cf72:	009b      	lsls	r3, r3, #2
 800cf74:	4019      	ands	r1, r3
 800cf76:	421c      	tst	r4, r3
 800cf78:	d003      	beq.n	800cf82 <_vfiprintf_r+0x6ae>
 800cf7a:	b2d3      	uxtb	r3, r2
 800cf7c:	9300      	str	r3, [sp, #0]
 800cf7e:	9001      	str	r0, [sp, #4]
 800cf80:	e7de      	b.n	800cf40 <_vfiprintf_r+0x66c>
 800cf82:	9200      	str	r2, [sp, #0]
 800cf84:	e7f1      	b.n	800cf6a <_vfiprintf_r+0x696>
 800cf86:	4a23      	ldr	r2, [pc, #140]	; (800d014 <_vfiprintf_r+0x740>)
 800cf88:	0020      	movs	r0, r4
 800cf8a:	920c      	str	r2, [sp, #48]	; 0x30
 800cf8c:	2220      	movs	r2, #32
 800cf8e:	4010      	ands	r0, r2
 800cf90:	4214      	tst	r4, r2
 800cf92:	d019      	beq.n	800cfc8 <_vfiprintf_r+0x6f4>
 800cf94:	3a19      	subs	r2, #25
 800cf96:	3707      	adds	r7, #7
 800cf98:	4397      	bics	r7, r2
 800cf9a:	0038      	movs	r0, r7
 800cf9c:	c806      	ldmia	r0!, {r1, r2}
 800cf9e:	9100      	str	r1, [sp, #0]
 800cfa0:	9201      	str	r2, [sp, #4]
 800cfa2:	9004      	str	r0, [sp, #16]
 800cfa4:	07e2      	lsls	r2, r4, #31
 800cfa6:	d509      	bpl.n	800cfbc <_vfiprintf_r+0x6e8>
 800cfa8:	9a00      	ldr	r2, [sp, #0]
 800cfaa:	9901      	ldr	r1, [sp, #4]
 800cfac:	430a      	orrs	r2, r1
 800cfae:	d005      	beq.n	800cfbc <_vfiprintf_r+0x6e8>
 800cfb0:	aa13      	add	r2, sp, #76	; 0x4c
 800cfb2:	2130      	movs	r1, #48	; 0x30
 800cfb4:	7053      	strb	r3, [r2, #1]
 800cfb6:	2302      	movs	r3, #2
 800cfb8:	7011      	strb	r1, [r2, #0]
 800cfba:	431c      	orrs	r4, r3
 800cfbc:	4b10      	ldr	r3, [pc, #64]	; (800d000 <_vfiprintf_r+0x72c>)
 800cfbe:	401c      	ands	r4, r3
 800cfc0:	2302      	movs	r3, #2
 800cfc2:	e687      	b.n	800ccd4 <_vfiprintf_r+0x400>
 800cfc4:	4a10      	ldr	r2, [pc, #64]	; (800d008 <_vfiprintf_r+0x734>)
 800cfc6:	e7df      	b.n	800cf88 <_vfiprintf_r+0x6b4>
 800cfc8:	0039      	movs	r1, r7
 800cfca:	c904      	ldmia	r1!, {r2}
 800cfcc:	0026      	movs	r6, r4
 800cfce:	9104      	str	r1, [sp, #16]
 800cfd0:	2110      	movs	r1, #16
 800cfd2:	400e      	ands	r6, r1
 800cfd4:	420c      	tst	r4, r1
 800cfd6:	d002      	beq.n	800cfde <_vfiprintf_r+0x70a>
 800cfd8:	9200      	str	r2, [sp, #0]
 800cfda:	9001      	str	r0, [sp, #4]
 800cfdc:	e7e2      	b.n	800cfa4 <_vfiprintf_r+0x6d0>
 800cfde:	2140      	movs	r1, #64	; 0x40
 800cfe0:	0020      	movs	r0, r4
 800cfe2:	4008      	ands	r0, r1
 800cfe4:	420c      	tst	r4, r1
 800cfe6:	d003      	beq.n	800cff0 <_vfiprintf_r+0x71c>
 800cfe8:	b292      	uxth	r2, r2
 800cfea:	9200      	str	r2, [sp, #0]
 800cfec:	9601      	str	r6, [sp, #4]
 800cfee:	e7d9      	b.n	800cfa4 <_vfiprintf_r+0x6d0>
 800cff0:	2180      	movs	r1, #128	; 0x80
 800cff2:	0026      	movs	r6, r4
 800cff4:	0089      	lsls	r1, r1, #2
 800cff6:	400e      	ands	r6, r1
 800cff8:	420c      	tst	r4, r1
 800cffa:	d0f6      	beq.n	800cfea <_vfiprintf_r+0x716>
 800cffc:	b2d2      	uxtb	r2, r2
 800cffe:	e7eb      	b.n	800cfd8 <_vfiprintf_r+0x704>
 800d000:	fffffbff 	.word	0xfffffbff
 800d004:	00007830 	.word	0x00007830
 800d008:	0800fb74 	.word	0x0800fb74
 800d00c:	0800fc59 	.word	0x0800fc59
 800d010:	0800fc69 	.word	0x0800fc69
 800d014:	0800fb85 	.word	0x0800fb85
 800d018:	9b01      	ldr	r3, [sp, #4]
 800d01a:	2b00      	cmp	r3, #0
 800d01c:	d109      	bne.n	800d032 <_vfiprintf_r+0x75e>
 800d01e:	9b00      	ldr	r3, [sp, #0]
 800d020:	2b09      	cmp	r3, #9
 800d022:	d806      	bhi.n	800d032 <_vfiprintf_r+0x75e>
 800d024:	26b7      	movs	r6, #183	; 0xb7
 800d026:	ab12      	add	r3, sp, #72	; 0x48
 800d028:	18f6      	adds	r6, r6, r3
 800d02a:	9b00      	ldr	r3, [sp, #0]
 800d02c:	3330      	adds	r3, #48	; 0x30
 800d02e:	7033      	strb	r3, [r6, #0]
 800d030:	e115      	b.n	800d25e <_vfiprintf_r+0x98a>
 800d032:	2380      	movs	r3, #128	; 0x80
 800d034:	2400      	movs	r4, #0
 800d036:	00db      	lsls	r3, r3, #3
 800d038:	403b      	ands	r3, r7
 800d03a:	ae40      	add	r6, sp, #256	; 0x100
 800d03c:	930a      	str	r3, [sp, #40]	; 0x28
 800d03e:	220a      	movs	r2, #10
 800d040:	9800      	ldr	r0, [sp, #0]
 800d042:	9901      	ldr	r1, [sp, #4]
 800d044:	2300      	movs	r3, #0
 800d046:	f7f3 fa2d 	bl	80004a4 <__aeabi_uldivmod>
 800d04a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800d04c:	3e01      	subs	r6, #1
 800d04e:	3230      	adds	r2, #48	; 0x30
 800d050:	900b      	str	r0, [sp, #44]	; 0x2c
 800d052:	9110      	str	r1, [sp, #64]	; 0x40
 800d054:	7032      	strb	r2, [r6, #0]
 800d056:	3401      	adds	r4, #1
 800d058:	2b00      	cmp	r3, #0
 800d05a:	d01a      	beq.n	800d092 <_vfiprintf_r+0x7be>
 800d05c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800d05e:	781b      	ldrb	r3, [r3, #0]
 800d060:	42a3      	cmp	r3, r4
 800d062:	d116      	bne.n	800d092 <_vfiprintf_r+0x7be>
 800d064:	2cff      	cmp	r4, #255	; 0xff
 800d066:	d014      	beq.n	800d092 <_vfiprintf_r+0x7be>
 800d068:	9b01      	ldr	r3, [sp, #4]
 800d06a:	2b00      	cmp	r3, #0
 800d06c:	d102      	bne.n	800d074 <_vfiprintf_r+0x7a0>
 800d06e:	9b00      	ldr	r3, [sp, #0]
 800d070:	2b09      	cmp	r3, #9
 800d072:	d90e      	bls.n	800d092 <_vfiprintf_r+0x7be>
 800d074:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800d076:	990f      	ldr	r1, [sp, #60]	; 0x3c
 800d078:	1af6      	subs	r6, r6, r3
 800d07a:	001a      	movs	r2, r3
 800d07c:	0030      	movs	r0, r6
 800d07e:	f7fe fbab 	bl	800b7d8 <strncpy>
 800d082:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800d084:	2400      	movs	r4, #0
 800d086:	785b      	ldrb	r3, [r3, #1]
 800d088:	1e5a      	subs	r2, r3, #1
 800d08a:	4193      	sbcs	r3, r2
 800d08c:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800d08e:	18d3      	adds	r3, r2, r3
 800d090:	930d      	str	r3, [sp, #52]	; 0x34
 800d092:	9b01      	ldr	r3, [sp, #4]
 800d094:	2b00      	cmp	r3, #0
 800d096:	d103      	bne.n	800d0a0 <_vfiprintf_r+0x7cc>
 800d098:	9b00      	ldr	r3, [sp, #0]
 800d09a:	2b09      	cmp	r3, #9
 800d09c:	d800      	bhi.n	800d0a0 <_vfiprintf_r+0x7cc>
 800d09e:	e0de      	b.n	800d25e <_vfiprintf_r+0x98a>
 800d0a0:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800d0a2:	9300      	str	r3, [sp, #0]
 800d0a4:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800d0a6:	9301      	str	r3, [sp, #4]
 800d0a8:	e7c9      	b.n	800d03e <_vfiprintf_r+0x76a>
 800d0aa:	200f      	movs	r0, #15
 800d0ac:	9b00      	ldr	r3, [sp, #0]
 800d0ae:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800d0b0:	4003      	ands	r3, r0
 800d0b2:	5cd3      	ldrb	r3, [r2, r3]
 800d0b4:	3e01      	subs	r6, #1
 800d0b6:	7033      	strb	r3, [r6, #0]
 800d0b8:	9b01      	ldr	r3, [sp, #4]
 800d0ba:	0719      	lsls	r1, r3, #28
 800d0bc:	9b00      	ldr	r3, [sp, #0]
 800d0be:	091a      	lsrs	r2, r3, #4
 800d0c0:	9b01      	ldr	r3, [sp, #4]
 800d0c2:	4311      	orrs	r1, r2
 800d0c4:	091b      	lsrs	r3, r3, #4
 800d0c6:	9301      	str	r3, [sp, #4]
 800d0c8:	000b      	movs	r3, r1
 800d0ca:	9a01      	ldr	r2, [sp, #4]
 800d0cc:	9100      	str	r1, [sp, #0]
 800d0ce:	4313      	orrs	r3, r2
 800d0d0:	d1ec      	bne.n	800d0ac <_vfiprintf_r+0x7d8>
 800d0d2:	e0c4      	b.n	800d25e <_vfiprintf_r+0x98a>
 800d0d4:	ae40      	add	r6, sp, #256	; 0x100
 800d0d6:	2b00      	cmp	r3, #0
 800d0d8:	d000      	beq.n	800d0dc <_vfiprintf_r+0x808>
 800d0da:	e0c0      	b.n	800d25e <_vfiprintf_r+0x98a>
 800d0dc:	07e4      	lsls	r4, r4, #31
 800d0de:	d400      	bmi.n	800d0e2 <_vfiprintf_r+0x80e>
 800d0e0:	e0bd      	b.n	800d25e <_vfiprintf_r+0x98a>
 800d0e2:	26b7      	movs	r6, #183	; 0xb7
 800d0e4:	ab12      	add	r3, sp, #72	; 0x48
 800d0e6:	18f6      	adds	r6, r6, r3
 800d0e8:	2330      	movs	r3, #48	; 0x30
 800d0ea:	e7a0      	b.n	800d02e <_vfiprintf_r+0x75a>
 800d0ec:	2b00      	cmp	r3, #0
 800d0ee:	d100      	bne.n	800d0f2 <_vfiprintf_r+0x81e>
 800d0f0:	e07e      	b.n	800d1f0 <_vfiprintf_r+0x91c>
 800d0f2:	ae27      	add	r6, sp, #156	; 0x9c
 800d0f4:	7033      	strb	r3, [r6, #0]
 800d0f6:	2300      	movs	r3, #0
 800d0f8:	aa12      	add	r2, sp, #72	; 0x48
 800d0fa:	70d3      	strb	r3, [r2, #3]
 800d0fc:	9704      	str	r7, [sp, #16]
 800d0fe:	e576      	b.n	800cbee <_vfiprintf_r+0x31a>
 800d100:	2010      	movs	r0, #16
 800d102:	1812      	adds	r2, r2, r0
 800d104:	6068      	str	r0, [r5, #4]
 800d106:	9216      	str	r2, [sp, #88]	; 0x58
 800d108:	9315      	str	r3, [sp, #84]	; 0x54
 800d10a:	2b07      	cmp	r3, #7
 800d10c:	dd07      	ble.n	800d11e <_vfiprintf_r+0x84a>
 800d10e:	9903      	ldr	r1, [sp, #12]
 800d110:	9806      	ldr	r0, [sp, #24]
 800d112:	aa14      	add	r2, sp, #80	; 0x50
 800d114:	f7ff fbaa 	bl	800c86c <__sprint_r>
 800d118:	2800      	cmp	r0, #0
 800d11a:	d144      	bne.n	800d1a6 <_vfiprintf_r+0x8d2>
 800d11c:	a917      	add	r1, sp, #92	; 0x5c
 800d11e:	000d      	movs	r5, r1
 800d120:	3f10      	subs	r7, #16
 800d122:	e63b      	b.n	800cd9c <_vfiprintf_r+0x4c8>
 800d124:	2010      	movs	r0, #16
 800d126:	1812      	adds	r2, r2, r0
 800d128:	6068      	str	r0, [r5, #4]
 800d12a:	9216      	str	r2, [sp, #88]	; 0x58
 800d12c:	9315      	str	r3, [sp, #84]	; 0x54
 800d12e:	2b07      	cmp	r3, #7
 800d130:	dd07      	ble.n	800d142 <_vfiprintf_r+0x86e>
 800d132:	9903      	ldr	r1, [sp, #12]
 800d134:	9806      	ldr	r0, [sp, #24]
 800d136:	aa14      	add	r2, sp, #80	; 0x50
 800d138:	f7ff fb98 	bl	800c86c <__sprint_r>
 800d13c:	2800      	cmp	r0, #0
 800d13e:	d132      	bne.n	800d1a6 <_vfiprintf_r+0x8d2>
 800d140:	a917      	add	r1, sp, #92	; 0x5c
 800d142:	000d      	movs	r5, r1
 800d144:	3f10      	subs	r7, #16
 800d146:	e67e      	b.n	800ce46 <_vfiprintf_r+0x572>
 800d148:	2010      	movs	r0, #16
 800d14a:	1812      	adds	r2, r2, r0
 800d14c:	6068      	str	r0, [r5, #4]
 800d14e:	9216      	str	r2, [sp, #88]	; 0x58
 800d150:	9315      	str	r3, [sp, #84]	; 0x54
 800d152:	2b07      	cmp	r3, #7
 800d154:	dd07      	ble.n	800d166 <_vfiprintf_r+0x892>
 800d156:	9903      	ldr	r1, [sp, #12]
 800d158:	9806      	ldr	r0, [sp, #24]
 800d15a:	aa14      	add	r2, sp, #80	; 0x50
 800d15c:	f7ff fb86 	bl	800c86c <__sprint_r>
 800d160:	2800      	cmp	r0, #0
 800d162:	d120      	bne.n	800d1a6 <_vfiprintf_r+0x8d2>
 800d164:	a917      	add	r1, sp, #92	; 0x5c
 800d166:	000d      	movs	r5, r1
 800d168:	3f10      	subs	r7, #16
 800d16a:	e68b      	b.n	800ce84 <_vfiprintf_r+0x5b0>
 800d16c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800d16e:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800d170:	2610      	movs	r6, #16
 800d172:	1a9c      	subs	r4, r3, r2
 800d174:	2c00      	cmp	r4, #0
 800d176:	dc00      	bgt.n	800d17a <_vfiprintf_r+0x8a6>
 800d178:	e6b7      	b.n	800ceea <_vfiprintf_r+0x616>
 800d17a:	9915      	ldr	r1, [sp, #84]	; 0x54
 800d17c:	4a3b      	ldr	r2, [pc, #236]	; (800d26c <_vfiprintf_r+0x998>)
 800d17e:	9b16      	ldr	r3, [sp, #88]	; 0x58
 800d180:	3101      	adds	r1, #1
 800d182:	602a      	str	r2, [r5, #0]
 800d184:	2c10      	cmp	r4, #16
 800d186:	dc22      	bgt.n	800d1ce <_vfiprintf_r+0x8fa>
 800d188:	606c      	str	r4, [r5, #4]
 800d18a:	18e4      	adds	r4, r4, r3
 800d18c:	9416      	str	r4, [sp, #88]	; 0x58
 800d18e:	9115      	str	r1, [sp, #84]	; 0x54
 800d190:	2907      	cmp	r1, #7
 800d192:	dc00      	bgt.n	800d196 <_vfiprintf_r+0x8c2>
 800d194:	e6a9      	b.n	800ceea <_vfiprintf_r+0x616>
 800d196:	9903      	ldr	r1, [sp, #12]
 800d198:	9806      	ldr	r0, [sp, #24]
 800d19a:	aa14      	add	r2, sp, #80	; 0x50
 800d19c:	f7ff fb66 	bl	800c86c <__sprint_r>
 800d1a0:	2800      	cmp	r0, #0
 800d1a2:	d100      	bne.n	800d1a6 <_vfiprintf_r+0x8d2>
 800d1a4:	e6a1      	b.n	800ceea <_vfiprintf_r+0x616>
 800d1a6:	9b03      	ldr	r3, [sp, #12]
 800d1a8:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800d1aa:	07db      	lsls	r3, r3, #31
 800d1ac:	d407      	bmi.n	800d1be <_vfiprintf_r+0x8ea>
 800d1ae:	9b03      	ldr	r3, [sp, #12]
 800d1b0:	899b      	ldrh	r3, [r3, #12]
 800d1b2:	059b      	lsls	r3, r3, #22
 800d1b4:	d403      	bmi.n	800d1be <_vfiprintf_r+0x8ea>
 800d1b6:	9b03      	ldr	r3, [sp, #12]
 800d1b8:	6d98      	ldr	r0, [r3, #88]	; 0x58
 800d1ba:	f7fc f8fc 	bl	80093b6 <__retarget_lock_release_recursive>
 800d1be:	9b03      	ldr	r3, [sp, #12]
 800d1c0:	899b      	ldrh	r3, [r3, #12]
 800d1c2:	065b      	lsls	r3, r3, #25
 800d1c4:	d401      	bmi.n	800d1ca <_vfiprintf_r+0x8f6>
 800d1c6:	f7ff fbc3 	bl	800c950 <_vfiprintf_r+0x7c>
 800d1ca:	f7ff fbbe 	bl	800c94a <_vfiprintf_r+0x76>
 800d1ce:	3310      	adds	r3, #16
 800d1d0:	606e      	str	r6, [r5, #4]
 800d1d2:	9316      	str	r3, [sp, #88]	; 0x58
 800d1d4:	9115      	str	r1, [sp, #84]	; 0x54
 800d1d6:	3508      	adds	r5, #8
 800d1d8:	2907      	cmp	r1, #7
 800d1da:	dd07      	ble.n	800d1ec <_vfiprintf_r+0x918>
 800d1dc:	9903      	ldr	r1, [sp, #12]
 800d1de:	9806      	ldr	r0, [sp, #24]
 800d1e0:	aa14      	add	r2, sp, #80	; 0x50
 800d1e2:	f7ff fb43 	bl	800c86c <__sprint_r>
 800d1e6:	2800      	cmp	r0, #0
 800d1e8:	d1dd      	bne.n	800d1a6 <_vfiprintf_r+0x8d2>
 800d1ea:	ad17      	add	r5, sp, #92	; 0x5c
 800d1ec:	3c10      	subs	r4, #16
 800d1ee:	e7c4      	b.n	800d17a <_vfiprintf_r+0x8a6>
 800d1f0:	9b16      	ldr	r3, [sp, #88]	; 0x58
 800d1f2:	2b00      	cmp	r3, #0
 800d1f4:	d102      	bne.n	800d1fc <_vfiprintf_r+0x928>
 800d1f6:	2300      	movs	r3, #0
 800d1f8:	9315      	str	r3, [sp, #84]	; 0x54
 800d1fa:	e7d4      	b.n	800d1a6 <_vfiprintf_r+0x8d2>
 800d1fc:	9903      	ldr	r1, [sp, #12]
 800d1fe:	9806      	ldr	r0, [sp, #24]
 800d200:	aa14      	add	r2, sp, #80	; 0x50
 800d202:	f7ff fb33 	bl	800c86c <__sprint_r>
 800d206:	2800      	cmp	r0, #0
 800d208:	d0f5      	beq.n	800d1f6 <_vfiprintf_r+0x922>
 800d20a:	e7cc      	b.n	800d1a6 <_vfiprintf_r+0x8d2>
 800d20c:	0027      	movs	r7, r4
 800d20e:	2a00      	cmp	r2, #0
 800d210:	d100      	bne.n	800d214 <_vfiprintf_r+0x940>
 800d212:	e51b      	b.n	800cc4c <_vfiprintf_r+0x378>
 800d214:	2b01      	cmp	r3, #1
 800d216:	d100      	bne.n	800d21a <_vfiprintf_r+0x946>
 800d218:	e6fe      	b.n	800d018 <_vfiprintf_r+0x744>
 800d21a:	ae40      	add	r6, sp, #256	; 0x100
 800d21c:	2b02      	cmp	r3, #2
 800d21e:	d100      	bne.n	800d222 <_vfiprintf_r+0x94e>
 800d220:	e743      	b.n	800d0aa <_vfiprintf_r+0x7d6>
 800d222:	2307      	movs	r3, #7
 800d224:	469c      	mov	ip, r3
 800d226:	4663      	mov	r3, ip
 800d228:	9900      	ldr	r1, [sp, #0]
 800d22a:	0032      	movs	r2, r6
 800d22c:	400b      	ands	r3, r1
 800d22e:	9901      	ldr	r1, [sp, #4]
 800d230:	3e01      	subs	r6, #1
 800d232:	074c      	lsls	r4, r1, #29
 800d234:	9900      	ldr	r1, [sp, #0]
 800d236:	3330      	adds	r3, #48	; 0x30
 800d238:	08c8      	lsrs	r0, r1, #3
 800d23a:	9901      	ldr	r1, [sp, #4]
 800d23c:	4304      	orrs	r4, r0
 800d23e:	08c9      	lsrs	r1, r1, #3
 800d240:	9101      	str	r1, [sp, #4]
 800d242:	0021      	movs	r1, r4
 800d244:	9801      	ldr	r0, [sp, #4]
 800d246:	7033      	strb	r3, [r6, #0]
 800d248:	9400      	str	r4, [sp, #0]
 800d24a:	4301      	orrs	r1, r0
 800d24c:	d1eb      	bne.n	800d226 <_vfiprintf_r+0x952>
 800d24e:	07f9      	lsls	r1, r7, #31
 800d250:	d505      	bpl.n	800d25e <_vfiprintf_r+0x98a>
 800d252:	2b30      	cmp	r3, #48	; 0x30
 800d254:	d003      	beq.n	800d25e <_vfiprintf_r+0x98a>
 800d256:	2330      	movs	r3, #48	; 0x30
 800d258:	3e01      	subs	r6, #1
 800d25a:	7033      	strb	r3, [r6, #0]
 800d25c:	1e96      	subs	r6, r2, #2
 800d25e:	9b05      	ldr	r3, [sp, #20]
 800d260:	003c      	movs	r4, r7
 800d262:	930b      	str	r3, [sp, #44]	; 0x2c
 800d264:	ab40      	add	r3, sp, #256	; 0x100
 800d266:	1b9b      	subs	r3, r3, r6
 800d268:	9305      	str	r3, [sp, #20]
 800d26a:	e575      	b.n	800cd58 <_vfiprintf_r+0x484>
 800d26c:	0800fc59 	.word	0x0800fc59

0800d270 <__sbprintf>:
 800d270:	b5f0      	push	{r4, r5, r6, r7, lr}
 800d272:	0015      	movs	r5, r2
 800d274:	2202      	movs	r2, #2
 800d276:	4c1e      	ldr	r4, [pc, #120]	; (800d2f0 <__sbprintf+0x80>)
 800d278:	001f      	movs	r7, r3
 800d27a:	898b      	ldrh	r3, [r1, #12]
 800d27c:	44a5      	add	sp, r4
 800d27e:	4393      	bics	r3, r2
 800d280:	466a      	mov	r2, sp
 800d282:	8193      	strh	r3, [r2, #12]
 800d284:	6e4b      	ldr	r3, [r1, #100]	; 0x64
 800d286:	0006      	movs	r6, r0
 800d288:	9319      	str	r3, [sp, #100]	; 0x64
 800d28a:	89cb      	ldrh	r3, [r1, #14]
 800d28c:	a816      	add	r0, sp, #88	; 0x58
 800d28e:	81d3      	strh	r3, [r2, #14]
 800d290:	69cb      	ldr	r3, [r1, #28]
 800d292:	000c      	movs	r4, r1
 800d294:	9307      	str	r3, [sp, #28]
 800d296:	6a4b      	ldr	r3, [r1, #36]	; 0x24
 800d298:	9309      	str	r3, [sp, #36]	; 0x24
 800d29a:	ab1a      	add	r3, sp, #104	; 0x68
 800d29c:	9300      	str	r3, [sp, #0]
 800d29e:	9304      	str	r3, [sp, #16]
 800d2a0:	2380      	movs	r3, #128	; 0x80
 800d2a2:	00db      	lsls	r3, r3, #3
 800d2a4:	9302      	str	r3, [sp, #8]
 800d2a6:	9305      	str	r3, [sp, #20]
 800d2a8:	2300      	movs	r3, #0
 800d2aa:	9306      	str	r3, [sp, #24]
 800d2ac:	f7fc f880 	bl	80093b0 <__retarget_lock_init_recursive>
 800d2b0:	002a      	movs	r2, r5
 800d2b2:	003b      	movs	r3, r7
 800d2b4:	4669      	mov	r1, sp
 800d2b6:	0030      	movs	r0, r6
 800d2b8:	f7ff fb0c 	bl	800c8d4 <_vfiprintf_r>
 800d2bc:	1e05      	subs	r5, r0, #0
 800d2be:	db07      	blt.n	800d2d0 <__sbprintf+0x60>
 800d2c0:	4669      	mov	r1, sp
 800d2c2:	0030      	movs	r0, r6
 800d2c4:	f7fe fa62 	bl	800b78c <_fflush_r>
 800d2c8:	2800      	cmp	r0, #0
 800d2ca:	d001      	beq.n	800d2d0 <__sbprintf+0x60>
 800d2cc:	2501      	movs	r5, #1
 800d2ce:	426d      	negs	r5, r5
 800d2d0:	466b      	mov	r3, sp
 800d2d2:	899a      	ldrh	r2, [r3, #12]
 800d2d4:	2340      	movs	r3, #64	; 0x40
 800d2d6:	421a      	tst	r2, r3
 800d2d8:	d002      	beq.n	800d2e0 <__sbprintf+0x70>
 800d2da:	89a2      	ldrh	r2, [r4, #12]
 800d2dc:	4313      	orrs	r3, r2
 800d2de:	81a3      	strh	r3, [r4, #12]
 800d2e0:	9816      	ldr	r0, [sp, #88]	; 0x58
 800d2e2:	f7fc f866 	bl	80093b2 <__retarget_lock_close_recursive>
 800d2e6:	0028      	movs	r0, r5
 800d2e8:	4b02      	ldr	r3, [pc, #8]	; (800d2f4 <__sbprintf+0x84>)
 800d2ea:	449d      	add	sp, r3
 800d2ec:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800d2ee:	46c0      	nop			; (mov r8, r8)
 800d2f0:	fffffb94 	.word	0xfffffb94
 800d2f4:	0000046c 	.word	0x0000046c

0800d2f8 <__sfvwrite_r>:
 800d2f8:	b5f0      	push	{r4, r5, r6, r7, lr}
 800d2fa:	6893      	ldr	r3, [r2, #8]
 800d2fc:	b087      	sub	sp, #28
 800d2fe:	000c      	movs	r4, r1
 800d300:	9002      	str	r0, [sp, #8]
 800d302:	9204      	str	r2, [sp, #16]
 800d304:	2b00      	cmp	r3, #0
 800d306:	d102      	bne.n	800d30e <__sfvwrite_r+0x16>
 800d308:	2000      	movs	r0, #0
 800d30a:	b007      	add	sp, #28
 800d30c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800d30e:	898b      	ldrh	r3, [r1, #12]
 800d310:	071b      	lsls	r3, r3, #28
 800d312:	d557      	bpl.n	800d3c4 <__sfvwrite_r+0xcc>
 800d314:	690b      	ldr	r3, [r1, #16]
 800d316:	2b00      	cmp	r3, #0
 800d318:	d054      	beq.n	800d3c4 <__sfvwrite_r+0xcc>
 800d31a:	9b04      	ldr	r3, [sp, #16]
 800d31c:	2202      	movs	r2, #2
 800d31e:	681b      	ldr	r3, [r3, #0]
 800d320:	9301      	str	r3, [sp, #4]
 800d322:	89a3      	ldrh	r3, [r4, #12]
 800d324:	001f      	movs	r7, r3
 800d326:	4017      	ands	r7, r2
 800d328:	4213      	tst	r3, r2
 800d32a:	d171      	bne.n	800d410 <__sfvwrite_r+0x118>
 800d32c:	2201      	movs	r2, #1
 800d32e:	2101      	movs	r1, #1
 800d330:	401a      	ands	r2, r3
 800d332:	420b      	tst	r3, r1
 800d334:	d100      	bne.n	800d338 <__sfvwrite_r+0x40>
 800d336:	e0a5      	b.n	800d484 <__sfvwrite_r+0x18c>
 800d338:	0038      	movs	r0, r7
 800d33a:	003e      	movs	r6, r7
 800d33c:	9703      	str	r7, [sp, #12]
 800d33e:	9b03      	ldr	r3, [sp, #12]
 800d340:	2b00      	cmp	r3, #0
 800d342:	d100      	bne.n	800d346 <__sfvwrite_r+0x4e>
 800d344:	e10b      	b.n	800d55e <__sfvwrite_r+0x266>
 800d346:	2800      	cmp	r0, #0
 800d348:	d10a      	bne.n	800d360 <__sfvwrite_r+0x68>
 800d34a:	001a      	movs	r2, r3
 800d34c:	210a      	movs	r1, #10
 800d34e:	0030      	movs	r0, r6
 800d350:	f7fe fa8b 	bl	800b86a <memchr>
 800d354:	9b03      	ldr	r3, [sp, #12]
 800d356:	1c5f      	adds	r7, r3, #1
 800d358:	2800      	cmp	r0, #0
 800d35a:	d001      	beq.n	800d360 <__sfvwrite_r+0x68>
 800d35c:	3001      	adds	r0, #1
 800d35e:	1b87      	subs	r7, r0, r6
 800d360:	9b03      	ldr	r3, [sp, #12]
 800d362:	9705      	str	r7, [sp, #20]
 800d364:	429f      	cmp	r7, r3
 800d366:	d900      	bls.n	800d36a <__sfvwrite_r+0x72>
 800d368:	9305      	str	r3, [sp, #20]
 800d36a:	6820      	ldr	r0, [r4, #0]
 800d36c:	6922      	ldr	r2, [r4, #16]
 800d36e:	68a5      	ldr	r5, [r4, #8]
 800d370:	6963      	ldr	r3, [r4, #20]
 800d372:	4290      	cmp	r0, r2
 800d374:	d800      	bhi.n	800d378 <__sfvwrite_r+0x80>
 800d376:	e0fb      	b.n	800d570 <__sfvwrite_r+0x278>
 800d378:	9a05      	ldr	r2, [sp, #20]
 800d37a:	18ed      	adds	r5, r5, r3
 800d37c:	42aa      	cmp	r2, r5
 800d37e:	dc00      	bgt.n	800d382 <__sfvwrite_r+0x8a>
 800d380:	e0f6      	b.n	800d570 <__sfvwrite_r+0x278>
 800d382:	0031      	movs	r1, r6
 800d384:	002a      	movs	r2, r5
 800d386:	f000 f9e0 	bl	800d74a <memmove>
 800d38a:	6823      	ldr	r3, [r4, #0]
 800d38c:	0021      	movs	r1, r4
 800d38e:	195b      	adds	r3, r3, r5
 800d390:	9802      	ldr	r0, [sp, #8]
 800d392:	6023      	str	r3, [r4, #0]
 800d394:	f7fe f9fa 	bl	800b78c <_fflush_r>
 800d398:	2800      	cmp	r0, #0
 800d39a:	d16e      	bne.n	800d47a <__sfvwrite_r+0x182>
 800d39c:	2001      	movs	r0, #1
 800d39e:	1b7f      	subs	r7, r7, r5
 800d3a0:	d105      	bne.n	800d3ae <__sfvwrite_r+0xb6>
 800d3a2:	0021      	movs	r1, r4
 800d3a4:	9802      	ldr	r0, [sp, #8]
 800d3a6:	f7fe f9f1 	bl	800b78c <_fflush_r>
 800d3aa:	2800      	cmp	r0, #0
 800d3ac:	d165      	bne.n	800d47a <__sfvwrite_r+0x182>
 800d3ae:	9b03      	ldr	r3, [sp, #12]
 800d3b0:	9a04      	ldr	r2, [sp, #16]
 800d3b2:	1b5b      	subs	r3, r3, r5
 800d3b4:	9303      	str	r3, [sp, #12]
 800d3b6:	9b04      	ldr	r3, [sp, #16]
 800d3b8:	1976      	adds	r6, r6, r5
 800d3ba:	689b      	ldr	r3, [r3, #8]
 800d3bc:	1b5b      	subs	r3, r3, r5
 800d3be:	6093      	str	r3, [r2, #8]
 800d3c0:	d1bd      	bne.n	800d33e <__sfvwrite_r+0x46>
 800d3c2:	e7a1      	b.n	800d308 <__sfvwrite_r+0x10>
 800d3c4:	0021      	movs	r1, r4
 800d3c6:	9802      	ldr	r0, [sp, #8]
 800d3c8:	f000 f8f4 	bl	800d5b4 <__swsetup_r>
 800d3cc:	2800      	cmp	r0, #0
 800d3ce:	d0a4      	beq.n	800d31a <__sfvwrite_r+0x22>
 800d3d0:	2001      	movs	r0, #1
 800d3d2:	4240      	negs	r0, r0
 800d3d4:	e799      	b.n	800d30a <__sfvwrite_r+0x12>
 800d3d6:	9b01      	ldr	r3, [sp, #4]
 800d3d8:	681e      	ldr	r6, [r3, #0]
 800d3da:	685d      	ldr	r5, [r3, #4]
 800d3dc:	3308      	adds	r3, #8
 800d3de:	9301      	str	r3, [sp, #4]
 800d3e0:	6a67      	ldr	r7, [r4, #36]	; 0x24
 800d3e2:	69e1      	ldr	r1, [r4, #28]
 800d3e4:	2d00      	cmp	r5, #0
 800d3e6:	d0f6      	beq.n	800d3d6 <__sfvwrite_r+0xde>
 800d3e8:	4a6e      	ldr	r2, [pc, #440]	; (800d5a4 <__sfvwrite_r+0x2ac>)
 800d3ea:	002b      	movs	r3, r5
 800d3ec:	4295      	cmp	r5, r2
 800d3ee:	d900      	bls.n	800d3f2 <__sfvwrite_r+0xfa>
 800d3f0:	0013      	movs	r3, r2
 800d3f2:	0032      	movs	r2, r6
 800d3f4:	9802      	ldr	r0, [sp, #8]
 800d3f6:	47b8      	blx	r7
 800d3f8:	2800      	cmp	r0, #0
 800d3fa:	dd3e      	ble.n	800d47a <__sfvwrite_r+0x182>
 800d3fc:	9b04      	ldr	r3, [sp, #16]
 800d3fe:	9a04      	ldr	r2, [sp, #16]
 800d400:	689b      	ldr	r3, [r3, #8]
 800d402:	1836      	adds	r6, r6, r0
 800d404:	1a1b      	subs	r3, r3, r0
 800d406:	1a2d      	subs	r5, r5, r0
 800d408:	6093      	str	r3, [r2, #8]
 800d40a:	2b00      	cmp	r3, #0
 800d40c:	d1e8      	bne.n	800d3e0 <__sfvwrite_r+0xe8>
 800d40e:	e77b      	b.n	800d308 <__sfvwrite_r+0x10>
 800d410:	2600      	movs	r6, #0
 800d412:	0035      	movs	r5, r6
 800d414:	e7e4      	b.n	800d3e0 <__sfvwrite_r+0xe8>
 800d416:	9b01      	ldr	r3, [sp, #4]
 800d418:	681b      	ldr	r3, [r3, #0]
 800d41a:	9303      	str	r3, [sp, #12]
 800d41c:	9b01      	ldr	r3, [sp, #4]
 800d41e:	685d      	ldr	r5, [r3, #4]
 800d420:	3308      	adds	r3, #8
 800d422:	9301      	str	r3, [sp, #4]
 800d424:	220c      	movs	r2, #12
 800d426:	5ea3      	ldrsh	r3, [r4, r2]
 800d428:	6820      	ldr	r0, [r4, #0]
 800d42a:	68a6      	ldr	r6, [r4, #8]
 800d42c:	2d00      	cmp	r5, #0
 800d42e:	d0f2      	beq.n	800d416 <__sfvwrite_r+0x11e>
 800d430:	2180      	movs	r1, #128	; 0x80
 800d432:	0089      	lsls	r1, r1, #2
 800d434:	b29a      	uxth	r2, r3
 800d436:	420b      	tst	r3, r1
 800d438:	d062      	beq.n	800d500 <__sfvwrite_r+0x208>
 800d43a:	42ae      	cmp	r6, r5
 800d43c:	d837      	bhi.n	800d4ae <__sfvwrite_r+0x1b6>
 800d43e:	2390      	movs	r3, #144	; 0x90
 800d440:	00db      	lsls	r3, r3, #3
 800d442:	421a      	tst	r2, r3
 800d444:	d033      	beq.n	800d4ae <__sfvwrite_r+0x1b6>
 800d446:	6921      	ldr	r1, [r4, #16]
 800d448:	1a43      	subs	r3, r0, r1
 800d44a:	2003      	movs	r0, #3
 800d44c:	9305      	str	r3, [sp, #20]
 800d44e:	6963      	ldr	r3, [r4, #20]
 800d450:	4343      	muls	r3, r0
 800d452:	0fdf      	lsrs	r7, r3, #31
 800d454:	18ff      	adds	r7, r7, r3
 800d456:	9b05      	ldr	r3, [sp, #20]
 800d458:	107f      	asrs	r7, r7, #1
 800d45a:	3301      	adds	r3, #1
 800d45c:	195b      	adds	r3, r3, r5
 800d45e:	42bb      	cmp	r3, r7
 800d460:	d900      	bls.n	800d464 <__sfvwrite_r+0x16c>
 800d462:	001f      	movs	r7, r3
 800d464:	0552      	lsls	r2, r2, #21
 800d466:	d53c      	bpl.n	800d4e2 <__sfvwrite_r+0x1ea>
 800d468:	0039      	movs	r1, r7
 800d46a:	9802      	ldr	r0, [sp, #8]
 800d46c:	f7fc f8c8 	bl	8009600 <_malloc_r>
 800d470:	1e06      	subs	r6, r0, #0
 800d472:	d10a      	bne.n	800d48a <__sfvwrite_r+0x192>
 800d474:	230c      	movs	r3, #12
 800d476:	9a02      	ldr	r2, [sp, #8]
 800d478:	6013      	str	r3, [r2, #0]
 800d47a:	2340      	movs	r3, #64	; 0x40
 800d47c:	89a2      	ldrh	r2, [r4, #12]
 800d47e:	4313      	orrs	r3, r2
 800d480:	81a3      	strh	r3, [r4, #12]
 800d482:	e7a5      	b.n	800d3d0 <__sfvwrite_r+0xd8>
 800d484:	0015      	movs	r5, r2
 800d486:	9203      	str	r2, [sp, #12]
 800d488:	e7cc      	b.n	800d424 <__sfvwrite_r+0x12c>
 800d48a:	9a05      	ldr	r2, [sp, #20]
 800d48c:	6921      	ldr	r1, [r4, #16]
 800d48e:	f7fb ff93 	bl	80093b8 <memcpy>
 800d492:	89a2      	ldrh	r2, [r4, #12]
 800d494:	4b44      	ldr	r3, [pc, #272]	; (800d5a8 <__sfvwrite_r+0x2b0>)
 800d496:	401a      	ands	r2, r3
 800d498:	2380      	movs	r3, #128	; 0x80
 800d49a:	4313      	orrs	r3, r2
 800d49c:	81a3      	strh	r3, [r4, #12]
 800d49e:	9b05      	ldr	r3, [sp, #20]
 800d4a0:	6126      	str	r6, [r4, #16]
 800d4a2:	18f6      	adds	r6, r6, r3
 800d4a4:	6026      	str	r6, [r4, #0]
 800d4a6:	002e      	movs	r6, r5
 800d4a8:	6167      	str	r7, [r4, #20]
 800d4aa:	1aff      	subs	r7, r7, r3
 800d4ac:	60a7      	str	r7, [r4, #8]
 800d4ae:	002f      	movs	r7, r5
 800d4b0:	42ae      	cmp	r6, r5
 800d4b2:	d900      	bls.n	800d4b6 <__sfvwrite_r+0x1be>
 800d4b4:	002e      	movs	r6, r5
 800d4b6:	0032      	movs	r2, r6
 800d4b8:	9903      	ldr	r1, [sp, #12]
 800d4ba:	6820      	ldr	r0, [r4, #0]
 800d4bc:	f000 f945 	bl	800d74a <memmove>
 800d4c0:	68a3      	ldr	r3, [r4, #8]
 800d4c2:	1b9b      	subs	r3, r3, r6
 800d4c4:	60a3      	str	r3, [r4, #8]
 800d4c6:	6823      	ldr	r3, [r4, #0]
 800d4c8:	199b      	adds	r3, r3, r6
 800d4ca:	6023      	str	r3, [r4, #0]
 800d4cc:	9b03      	ldr	r3, [sp, #12]
 800d4ce:	9a04      	ldr	r2, [sp, #16]
 800d4d0:	19db      	adds	r3, r3, r7
 800d4d2:	9303      	str	r3, [sp, #12]
 800d4d4:	9b04      	ldr	r3, [sp, #16]
 800d4d6:	1bed      	subs	r5, r5, r7
 800d4d8:	689b      	ldr	r3, [r3, #8]
 800d4da:	1bdb      	subs	r3, r3, r7
 800d4dc:	6093      	str	r3, [r2, #8]
 800d4de:	d1a1      	bne.n	800d424 <__sfvwrite_r+0x12c>
 800d4e0:	e712      	b.n	800d308 <__sfvwrite_r+0x10>
 800d4e2:	003a      	movs	r2, r7
 800d4e4:	9802      	ldr	r0, [sp, #8]
 800d4e6:	f000 f94b 	bl	800d780 <_realloc_r>
 800d4ea:	1e06      	subs	r6, r0, #0
 800d4ec:	d1d7      	bne.n	800d49e <__sfvwrite_r+0x1a6>
 800d4ee:	6921      	ldr	r1, [r4, #16]
 800d4f0:	9802      	ldr	r0, [sp, #8]
 800d4f2:	f7fb ffd3 	bl	800949c <_free_r>
 800d4f6:	2280      	movs	r2, #128	; 0x80
 800d4f8:	89a3      	ldrh	r3, [r4, #12]
 800d4fa:	4393      	bics	r3, r2
 800d4fc:	81a3      	strh	r3, [r4, #12]
 800d4fe:	e7b9      	b.n	800d474 <__sfvwrite_r+0x17c>
 800d500:	6923      	ldr	r3, [r4, #16]
 800d502:	4283      	cmp	r3, r0
 800d504:	d302      	bcc.n	800d50c <__sfvwrite_r+0x214>
 800d506:	6967      	ldr	r7, [r4, #20]
 800d508:	42af      	cmp	r7, r5
 800d50a:	d916      	bls.n	800d53a <__sfvwrite_r+0x242>
 800d50c:	42ae      	cmp	r6, r5
 800d50e:	d900      	bls.n	800d512 <__sfvwrite_r+0x21a>
 800d510:	002e      	movs	r6, r5
 800d512:	0032      	movs	r2, r6
 800d514:	9903      	ldr	r1, [sp, #12]
 800d516:	f000 f918 	bl	800d74a <memmove>
 800d51a:	68a3      	ldr	r3, [r4, #8]
 800d51c:	6822      	ldr	r2, [r4, #0]
 800d51e:	1b9b      	subs	r3, r3, r6
 800d520:	1992      	adds	r2, r2, r6
 800d522:	0037      	movs	r7, r6
 800d524:	60a3      	str	r3, [r4, #8]
 800d526:	6022      	str	r2, [r4, #0]
 800d528:	2b00      	cmp	r3, #0
 800d52a:	d1cf      	bne.n	800d4cc <__sfvwrite_r+0x1d4>
 800d52c:	0021      	movs	r1, r4
 800d52e:	9802      	ldr	r0, [sp, #8]
 800d530:	f7fe f92c 	bl	800b78c <_fflush_r>
 800d534:	2800      	cmp	r0, #0
 800d536:	d0c9      	beq.n	800d4cc <__sfvwrite_r+0x1d4>
 800d538:	e79f      	b.n	800d47a <__sfvwrite_r+0x182>
 800d53a:	4b1c      	ldr	r3, [pc, #112]	; (800d5ac <__sfvwrite_r+0x2b4>)
 800d53c:	0028      	movs	r0, r5
 800d53e:	429d      	cmp	r5, r3
 800d540:	d900      	bls.n	800d544 <__sfvwrite_r+0x24c>
 800d542:	481b      	ldr	r0, [pc, #108]	; (800d5b0 <__sfvwrite_r+0x2b8>)
 800d544:	0039      	movs	r1, r7
 800d546:	f7f2 fe83 	bl	8000250 <__divsi3>
 800d54a:	003b      	movs	r3, r7
 800d54c:	6a66      	ldr	r6, [r4, #36]	; 0x24
 800d54e:	4343      	muls	r3, r0
 800d550:	9a03      	ldr	r2, [sp, #12]
 800d552:	69e1      	ldr	r1, [r4, #28]
 800d554:	9802      	ldr	r0, [sp, #8]
 800d556:	47b0      	blx	r6
 800d558:	1e07      	subs	r7, r0, #0
 800d55a:	dcb7      	bgt.n	800d4cc <__sfvwrite_r+0x1d4>
 800d55c:	e78d      	b.n	800d47a <__sfvwrite_r+0x182>
 800d55e:	9b01      	ldr	r3, [sp, #4]
 800d560:	2000      	movs	r0, #0
 800d562:	681e      	ldr	r6, [r3, #0]
 800d564:	685b      	ldr	r3, [r3, #4]
 800d566:	9303      	str	r3, [sp, #12]
 800d568:	9b01      	ldr	r3, [sp, #4]
 800d56a:	3308      	adds	r3, #8
 800d56c:	9301      	str	r3, [sp, #4]
 800d56e:	e6e6      	b.n	800d33e <__sfvwrite_r+0x46>
 800d570:	9a05      	ldr	r2, [sp, #20]
 800d572:	4293      	cmp	r3, r2
 800d574:	dc08      	bgt.n	800d588 <__sfvwrite_r+0x290>
 800d576:	6a65      	ldr	r5, [r4, #36]	; 0x24
 800d578:	0032      	movs	r2, r6
 800d57a:	69e1      	ldr	r1, [r4, #28]
 800d57c:	9802      	ldr	r0, [sp, #8]
 800d57e:	47a8      	blx	r5
 800d580:	1e05      	subs	r5, r0, #0
 800d582:	dd00      	ble.n	800d586 <__sfvwrite_r+0x28e>
 800d584:	e70a      	b.n	800d39c <__sfvwrite_r+0xa4>
 800d586:	e778      	b.n	800d47a <__sfvwrite_r+0x182>
 800d588:	9a05      	ldr	r2, [sp, #20]
 800d58a:	0031      	movs	r1, r6
 800d58c:	f000 f8dd 	bl	800d74a <memmove>
 800d590:	9a05      	ldr	r2, [sp, #20]
 800d592:	68a3      	ldr	r3, [r4, #8]
 800d594:	0015      	movs	r5, r2
 800d596:	1a9b      	subs	r3, r3, r2
 800d598:	60a3      	str	r3, [r4, #8]
 800d59a:	6823      	ldr	r3, [r4, #0]
 800d59c:	189b      	adds	r3, r3, r2
 800d59e:	6023      	str	r3, [r4, #0]
 800d5a0:	e6fc      	b.n	800d39c <__sfvwrite_r+0xa4>
 800d5a2:	46c0      	nop			; (mov r8, r8)
 800d5a4:	7ffffc00 	.word	0x7ffffc00
 800d5a8:	fffffb7f 	.word	0xfffffb7f
 800d5ac:	7ffffffe 	.word	0x7ffffffe
 800d5b0:	7fffffff 	.word	0x7fffffff

0800d5b4 <__swsetup_r>:
 800d5b4:	4b30      	ldr	r3, [pc, #192]	; (800d678 <__swsetup_r+0xc4>)
 800d5b6:	b570      	push	{r4, r5, r6, lr}
 800d5b8:	0005      	movs	r5, r0
 800d5ba:	6818      	ldr	r0, [r3, #0]
 800d5bc:	000c      	movs	r4, r1
 800d5be:	2800      	cmp	r0, #0
 800d5c0:	d004      	beq.n	800d5cc <__swsetup_r+0x18>
 800d5c2:	6b43      	ldr	r3, [r0, #52]	; 0x34
 800d5c4:	2b00      	cmp	r3, #0
 800d5c6:	d101      	bne.n	800d5cc <__swsetup_r+0x18>
 800d5c8:	f7fb fd96 	bl	80090f8 <__sinit>
 800d5cc:	230c      	movs	r3, #12
 800d5ce:	5ee2      	ldrsh	r2, [r4, r3]
 800d5d0:	b293      	uxth	r3, r2
 800d5d2:	0711      	lsls	r1, r2, #28
 800d5d4:	d423      	bmi.n	800d61e <__swsetup_r+0x6a>
 800d5d6:	06d9      	lsls	r1, r3, #27
 800d5d8:	d407      	bmi.n	800d5ea <__swsetup_r+0x36>
 800d5da:	2309      	movs	r3, #9
 800d5dc:	2001      	movs	r0, #1
 800d5de:	602b      	str	r3, [r5, #0]
 800d5e0:	3337      	adds	r3, #55	; 0x37
 800d5e2:	4313      	orrs	r3, r2
 800d5e4:	81a3      	strh	r3, [r4, #12]
 800d5e6:	4240      	negs	r0, r0
 800d5e8:	bd70      	pop	{r4, r5, r6, pc}
 800d5ea:	075b      	lsls	r3, r3, #29
 800d5ec:	d513      	bpl.n	800d616 <__swsetup_r+0x62>
 800d5ee:	6b21      	ldr	r1, [r4, #48]	; 0x30
 800d5f0:	2900      	cmp	r1, #0
 800d5f2:	d008      	beq.n	800d606 <__swsetup_r+0x52>
 800d5f4:	0023      	movs	r3, r4
 800d5f6:	3340      	adds	r3, #64	; 0x40
 800d5f8:	4299      	cmp	r1, r3
 800d5fa:	d002      	beq.n	800d602 <__swsetup_r+0x4e>
 800d5fc:	0028      	movs	r0, r5
 800d5fe:	f7fb ff4d 	bl	800949c <_free_r>
 800d602:	2300      	movs	r3, #0
 800d604:	6323      	str	r3, [r4, #48]	; 0x30
 800d606:	2224      	movs	r2, #36	; 0x24
 800d608:	89a3      	ldrh	r3, [r4, #12]
 800d60a:	4393      	bics	r3, r2
 800d60c:	81a3      	strh	r3, [r4, #12]
 800d60e:	2300      	movs	r3, #0
 800d610:	6063      	str	r3, [r4, #4]
 800d612:	6923      	ldr	r3, [r4, #16]
 800d614:	6023      	str	r3, [r4, #0]
 800d616:	2308      	movs	r3, #8
 800d618:	89a2      	ldrh	r2, [r4, #12]
 800d61a:	4313      	orrs	r3, r2
 800d61c:	81a3      	strh	r3, [r4, #12]
 800d61e:	6923      	ldr	r3, [r4, #16]
 800d620:	2b00      	cmp	r3, #0
 800d622:	d10b      	bne.n	800d63c <__swsetup_r+0x88>
 800d624:	21a0      	movs	r1, #160	; 0xa0
 800d626:	2280      	movs	r2, #128	; 0x80
 800d628:	89a3      	ldrh	r3, [r4, #12]
 800d62a:	0089      	lsls	r1, r1, #2
 800d62c:	0092      	lsls	r2, r2, #2
 800d62e:	400b      	ands	r3, r1
 800d630:	4293      	cmp	r3, r2
 800d632:	d003      	beq.n	800d63c <__swsetup_r+0x88>
 800d634:	0021      	movs	r1, r4
 800d636:	0028      	movs	r0, r5
 800d638:	f000 fa8e 	bl	800db58 <__smakebuf_r>
 800d63c:	220c      	movs	r2, #12
 800d63e:	5ea3      	ldrsh	r3, [r4, r2]
 800d640:	2001      	movs	r0, #1
 800d642:	001a      	movs	r2, r3
 800d644:	b299      	uxth	r1, r3
 800d646:	4002      	ands	r2, r0
 800d648:	4203      	tst	r3, r0
 800d64a:	d00f      	beq.n	800d66c <__swsetup_r+0xb8>
 800d64c:	2200      	movs	r2, #0
 800d64e:	60a2      	str	r2, [r4, #8]
 800d650:	6962      	ldr	r2, [r4, #20]
 800d652:	4252      	negs	r2, r2
 800d654:	61a2      	str	r2, [r4, #24]
 800d656:	2000      	movs	r0, #0
 800d658:	6922      	ldr	r2, [r4, #16]
 800d65a:	4282      	cmp	r2, r0
 800d65c:	d1c4      	bne.n	800d5e8 <__swsetup_r+0x34>
 800d65e:	0609      	lsls	r1, r1, #24
 800d660:	d5c2      	bpl.n	800d5e8 <__swsetup_r+0x34>
 800d662:	2240      	movs	r2, #64	; 0x40
 800d664:	4313      	orrs	r3, r2
 800d666:	81a3      	strh	r3, [r4, #12]
 800d668:	3801      	subs	r0, #1
 800d66a:	e7bd      	b.n	800d5e8 <__swsetup_r+0x34>
 800d66c:	0788      	lsls	r0, r1, #30
 800d66e:	d400      	bmi.n	800d672 <__swsetup_r+0xbe>
 800d670:	6962      	ldr	r2, [r4, #20]
 800d672:	60a2      	str	r2, [r4, #8]
 800d674:	e7ef      	b.n	800d656 <__swsetup_r+0xa2>
 800d676:	46c0      	nop			; (mov r8, r8)
 800d678:	200002b8 	.word	0x200002b8

0800d67c <__fputwc>:
 800d67c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800d67e:	b085      	sub	sp, #20
 800d680:	000e      	movs	r6, r1
 800d682:	0015      	movs	r5, r2
 800d684:	9001      	str	r0, [sp, #4]
 800d686:	f7fb fe13 	bl	80092b0 <__locale_mb_cur_max>
 800d68a:	0004      	movs	r4, r0
 800d68c:	2801      	cmp	r0, #1
 800d68e:	d119      	bne.n	800d6c4 <__fputwc+0x48>
 800d690:	1e73      	subs	r3, r6, #1
 800d692:	2bfe      	cmp	r3, #254	; 0xfe
 800d694:	d816      	bhi.n	800d6c4 <__fputwc+0x48>
 800d696:	ab02      	add	r3, sp, #8
 800d698:	711e      	strb	r6, [r3, #4]
 800d69a:	2700      	movs	r7, #0
 800d69c:	42a7      	cmp	r7, r4
 800d69e:	d020      	beq.n	800d6e2 <__fputwc+0x66>
 800d6a0:	ab03      	add	r3, sp, #12
 800d6a2:	5dd9      	ldrb	r1, [r3, r7]
 800d6a4:	68ab      	ldr	r3, [r5, #8]
 800d6a6:	3b01      	subs	r3, #1
 800d6a8:	60ab      	str	r3, [r5, #8]
 800d6aa:	2b00      	cmp	r3, #0
 800d6ac:	da04      	bge.n	800d6b8 <__fputwc+0x3c>
 800d6ae:	69aa      	ldr	r2, [r5, #24]
 800d6b0:	4293      	cmp	r3, r2
 800d6b2:	db19      	blt.n	800d6e8 <__fputwc+0x6c>
 800d6b4:	290a      	cmp	r1, #10
 800d6b6:	d017      	beq.n	800d6e8 <__fputwc+0x6c>
 800d6b8:	682b      	ldr	r3, [r5, #0]
 800d6ba:	1c5a      	adds	r2, r3, #1
 800d6bc:	602a      	str	r2, [r5, #0]
 800d6be:	7019      	strb	r1, [r3, #0]
 800d6c0:	3701      	adds	r7, #1
 800d6c2:	e7eb      	b.n	800d69c <__fputwc+0x20>
 800d6c4:	002b      	movs	r3, r5
 800d6c6:	0032      	movs	r2, r6
 800d6c8:	9801      	ldr	r0, [sp, #4]
 800d6ca:	335c      	adds	r3, #92	; 0x5c
 800d6cc:	a903      	add	r1, sp, #12
 800d6ce:	f000 f9fd 	bl	800dacc <_wcrtomb_r>
 800d6d2:	0004      	movs	r4, r0
 800d6d4:	1c43      	adds	r3, r0, #1
 800d6d6:	d1e0      	bne.n	800d69a <__fputwc+0x1e>
 800d6d8:	2340      	movs	r3, #64	; 0x40
 800d6da:	0006      	movs	r6, r0
 800d6dc:	89aa      	ldrh	r2, [r5, #12]
 800d6de:	4313      	orrs	r3, r2
 800d6e0:	81ab      	strh	r3, [r5, #12]
 800d6e2:	0030      	movs	r0, r6
 800d6e4:	b005      	add	sp, #20
 800d6e6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800d6e8:	002a      	movs	r2, r5
 800d6ea:	9801      	ldr	r0, [sp, #4]
 800d6ec:	f000 fa72 	bl	800dbd4 <__swbuf_r>
 800d6f0:	1c43      	adds	r3, r0, #1
 800d6f2:	d1e5      	bne.n	800d6c0 <__fputwc+0x44>
 800d6f4:	0006      	movs	r6, r0
 800d6f6:	e7f4      	b.n	800d6e2 <__fputwc+0x66>

0800d6f8 <_fputwc_r>:
 800d6f8:	6e53      	ldr	r3, [r2, #100]	; 0x64
 800d6fa:	b570      	push	{r4, r5, r6, lr}
 800d6fc:	0005      	movs	r5, r0
 800d6fe:	000e      	movs	r6, r1
 800d700:	0014      	movs	r4, r2
 800d702:	07db      	lsls	r3, r3, #31
 800d704:	d405      	bmi.n	800d712 <_fputwc_r+0x1a>
 800d706:	8993      	ldrh	r3, [r2, #12]
 800d708:	059b      	lsls	r3, r3, #22
 800d70a:	d402      	bmi.n	800d712 <_fputwc_r+0x1a>
 800d70c:	6d90      	ldr	r0, [r2, #88]	; 0x58
 800d70e:	f7fb fe51 	bl	80093b4 <__retarget_lock_acquire_recursive>
 800d712:	230c      	movs	r3, #12
 800d714:	5ee2      	ldrsh	r2, [r4, r3]
 800d716:	2380      	movs	r3, #128	; 0x80
 800d718:	019b      	lsls	r3, r3, #6
 800d71a:	421a      	tst	r2, r3
 800d71c:	d104      	bne.n	800d728 <_fputwc_r+0x30>
 800d71e:	431a      	orrs	r2, r3
 800d720:	81a2      	strh	r2, [r4, #12]
 800d722:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800d724:	4313      	orrs	r3, r2
 800d726:	6663      	str	r3, [r4, #100]	; 0x64
 800d728:	0028      	movs	r0, r5
 800d72a:	0022      	movs	r2, r4
 800d72c:	0031      	movs	r1, r6
 800d72e:	f7ff ffa5 	bl	800d67c <__fputwc>
 800d732:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800d734:	0005      	movs	r5, r0
 800d736:	07db      	lsls	r3, r3, #31
 800d738:	d405      	bmi.n	800d746 <_fputwc_r+0x4e>
 800d73a:	89a3      	ldrh	r3, [r4, #12]
 800d73c:	059b      	lsls	r3, r3, #22
 800d73e:	d402      	bmi.n	800d746 <_fputwc_r+0x4e>
 800d740:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800d742:	f7fb fe38 	bl	80093b6 <__retarget_lock_release_recursive>
 800d746:	0028      	movs	r0, r5
 800d748:	bd70      	pop	{r4, r5, r6, pc}

0800d74a <memmove>:
 800d74a:	b510      	push	{r4, lr}
 800d74c:	4288      	cmp	r0, r1
 800d74e:	d902      	bls.n	800d756 <memmove+0xc>
 800d750:	188b      	adds	r3, r1, r2
 800d752:	4298      	cmp	r0, r3
 800d754:	d303      	bcc.n	800d75e <memmove+0x14>
 800d756:	2300      	movs	r3, #0
 800d758:	e007      	b.n	800d76a <memmove+0x20>
 800d75a:	5c8b      	ldrb	r3, [r1, r2]
 800d75c:	5483      	strb	r3, [r0, r2]
 800d75e:	3a01      	subs	r2, #1
 800d760:	d2fb      	bcs.n	800d75a <memmove+0x10>
 800d762:	bd10      	pop	{r4, pc}
 800d764:	5ccc      	ldrb	r4, [r1, r3]
 800d766:	54c4      	strb	r4, [r0, r3]
 800d768:	3301      	adds	r3, #1
 800d76a:	429a      	cmp	r2, r3
 800d76c:	d1fa      	bne.n	800d764 <memmove+0x1a>
 800d76e:	e7f8      	b.n	800d762 <memmove+0x18>

0800d770 <abort>:
 800d770:	2006      	movs	r0, #6
 800d772:	b510      	push	{r4, lr}
 800d774:	f000 faac 	bl	800dcd0 <raise>
 800d778:	2001      	movs	r0, #1
 800d77a:	f7f5 ff9f 	bl	80036bc <_exit>
	...

0800d780 <_realloc_r>:
 800d780:	b5f0      	push	{r4, r5, r6, r7, lr}
 800d782:	b087      	sub	sp, #28
 800d784:	1e0c      	subs	r4, r1, #0
 800d786:	9001      	str	r0, [sp, #4]
 800d788:	9205      	str	r2, [sp, #20]
 800d78a:	d106      	bne.n	800d79a <_realloc_r+0x1a>
 800d78c:	0011      	movs	r1, r2
 800d78e:	f7fb ff37 	bl	8009600 <_malloc_r>
 800d792:	0007      	movs	r7, r0
 800d794:	0038      	movs	r0, r7
 800d796:	b007      	add	sp, #28
 800d798:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800d79a:	9801      	ldr	r0, [sp, #4]
 800d79c:	f7fc f956 	bl	8009a4c <__malloc_lock>
 800d7a0:	0023      	movs	r3, r4
 800d7a2:	3b08      	subs	r3, #8
 800d7a4:	685f      	ldr	r7, [r3, #4]
 800d7a6:	9304      	str	r3, [sp, #16]
 800d7a8:	9b05      	ldr	r3, [sp, #20]
 800d7aa:	330b      	adds	r3, #11
 800d7ac:	2b16      	cmp	r3, #22
 800d7ae:	d908      	bls.n	800d7c2 <_realloc_r+0x42>
 800d7b0:	2207      	movs	r2, #7
 800d7b2:	4393      	bics	r3, r2
 800d7b4:	9300      	str	r3, [sp, #0]
 800d7b6:	d506      	bpl.n	800d7c6 <_realloc_r+0x46>
 800d7b8:	230c      	movs	r3, #12
 800d7ba:	9a01      	ldr	r2, [sp, #4]
 800d7bc:	2700      	movs	r7, #0
 800d7be:	6013      	str	r3, [r2, #0]
 800d7c0:	e7e8      	b.n	800d794 <_realloc_r+0x14>
 800d7c2:	2310      	movs	r3, #16
 800d7c4:	9300      	str	r3, [sp, #0]
 800d7c6:	9b00      	ldr	r3, [sp, #0]
 800d7c8:	9a05      	ldr	r2, [sp, #20]
 800d7ca:	4293      	cmp	r3, r2
 800d7cc:	d3f4      	bcc.n	800d7b8 <_realloc_r+0x38>
 800d7ce:	9b04      	ldr	r3, [sp, #16]
 800d7d0:	003a      	movs	r2, r7
 800d7d2:	9302      	str	r3, [sp, #8]
 800d7d4:	2303      	movs	r3, #3
 800d7d6:	439a      	bics	r2, r3
 800d7d8:	9b00      	ldr	r3, [sp, #0]
 800d7da:	9203      	str	r2, [sp, #12]
 800d7dc:	4293      	cmp	r3, r2
 800d7de:	dc00      	bgt.n	800d7e2 <_realloc_r+0x62>
 800d7e0:	e169      	b.n	800dab6 <_realloc_r+0x336>
 800d7e2:	9b04      	ldr	r3, [sp, #16]
 800d7e4:	48b8      	ldr	r0, [pc, #736]	; (800dac8 <_realloc_r+0x348>)
 800d7e6:	189b      	adds	r3, r3, r2
 800d7e8:	6882      	ldr	r2, [r0, #8]
 800d7ea:	4694      	mov	ip, r2
 800d7ec:	685a      	ldr	r2, [r3, #4]
 800d7ee:	459c      	cmp	ip, r3
 800d7f0:	d006      	beq.n	800d800 <_realloc_r+0x80>
 800d7f2:	2501      	movs	r5, #1
 800d7f4:	0011      	movs	r1, r2
 800d7f6:	43a9      	bics	r1, r5
 800d7f8:	1859      	adds	r1, r3, r1
 800d7fa:	6849      	ldr	r1, [r1, #4]
 800d7fc:	4229      	tst	r1, r5
 800d7fe:	d144      	bne.n	800d88a <_realloc_r+0x10a>
 800d800:	2103      	movs	r1, #3
 800d802:	438a      	bics	r2, r1
 800d804:	9903      	ldr	r1, [sp, #12]
 800d806:	188e      	adds	r6, r1, r2
 800d808:	9900      	ldr	r1, [sp, #0]
 800d80a:	459c      	cmp	ip, r3
 800d80c:	d117      	bne.n	800d83e <_realloc_r+0xbe>
 800d80e:	3110      	adds	r1, #16
 800d810:	42b1      	cmp	r1, r6
 800d812:	dc3c      	bgt.n	800d88e <_realloc_r+0x10e>
 800d814:	9a00      	ldr	r2, [sp, #0]
 800d816:	2101      	movs	r1, #1
 800d818:	4694      	mov	ip, r2
 800d81a:	1ab6      	subs	r6, r6, r2
 800d81c:	0022      	movs	r2, r4
 800d81e:	9b04      	ldr	r3, [sp, #16]
 800d820:	430e      	orrs	r6, r1
 800d822:	4463      	add	r3, ip
 800d824:	6083      	str	r3, [r0, #8]
 800d826:	3a08      	subs	r2, #8
 800d828:	605e      	str	r6, [r3, #4]
 800d82a:	6853      	ldr	r3, [r2, #4]
 800d82c:	9801      	ldr	r0, [sp, #4]
 800d82e:	400b      	ands	r3, r1
 800d830:	4661      	mov	r1, ip
 800d832:	430b      	orrs	r3, r1
 800d834:	6053      	str	r3, [r2, #4]
 800d836:	f7fc f911 	bl	8009a5c <__malloc_unlock>
 800d83a:	0027      	movs	r7, r4
 800d83c:	e7aa      	b.n	800d794 <_realloc_r+0x14>
 800d83e:	42b1      	cmp	r1, r6
 800d840:	dc25      	bgt.n	800d88e <_realloc_r+0x10e>
 800d842:	68da      	ldr	r2, [r3, #12]
 800d844:	689b      	ldr	r3, [r3, #8]
 800d846:	60da      	str	r2, [r3, #12]
 800d848:	6093      	str	r3, [r2, #8]
 800d84a:	9b00      	ldr	r3, [sp, #0]
 800d84c:	9a02      	ldr	r2, [sp, #8]
 800d84e:	1af4      	subs	r4, r6, r3
 800d850:	9b02      	ldr	r3, [sp, #8]
 800d852:	1992      	adds	r2, r2, r6
 800d854:	6858      	ldr	r0, [r3, #4]
 800d856:	2301      	movs	r3, #1
 800d858:	4018      	ands	r0, r3
 800d85a:	2c0f      	cmp	r4, #15
 800d85c:	d800      	bhi.n	800d860 <_realloc_r+0xe0>
 800d85e:	e12c      	b.n	800daba <_realloc_r+0x33a>
 800d860:	9d00      	ldr	r5, [sp, #0]
 800d862:	9902      	ldr	r1, [sp, #8]
 800d864:	4328      	orrs	r0, r5
 800d866:	1949      	adds	r1, r1, r5
 800d868:	9d02      	ldr	r5, [sp, #8]
 800d86a:	431c      	orrs	r4, r3
 800d86c:	6068      	str	r0, [r5, #4]
 800d86e:	604c      	str	r4, [r1, #4]
 800d870:	6850      	ldr	r0, [r2, #4]
 800d872:	3108      	adds	r1, #8
 800d874:	4303      	orrs	r3, r0
 800d876:	6053      	str	r3, [r2, #4]
 800d878:	9801      	ldr	r0, [sp, #4]
 800d87a:	f7fb fe0f 	bl	800949c <_free_r>
 800d87e:	9801      	ldr	r0, [sp, #4]
 800d880:	f7fc f8ec 	bl	8009a5c <__malloc_unlock>
 800d884:	9f02      	ldr	r7, [sp, #8]
 800d886:	3708      	adds	r7, #8
 800d888:	e784      	b.n	800d794 <_realloc_r+0x14>
 800d88a:	2200      	movs	r2, #0
 800d88c:	0013      	movs	r3, r2
 800d88e:	07ff      	lsls	r7, r7, #31
 800d890:	d500      	bpl.n	800d894 <_realloc_r+0x114>
 800d892:	e0c6      	b.n	800da22 <_realloc_r+0x2a2>
 800d894:	0021      	movs	r1, r4
 800d896:	2003      	movs	r0, #3
 800d898:	3908      	subs	r1, #8
 800d89a:	680d      	ldr	r5, [r1, #0]
 800d89c:	9904      	ldr	r1, [sp, #16]
 800d89e:	1b4d      	subs	r5, r1, r5
 800d8a0:	6869      	ldr	r1, [r5, #4]
 800d8a2:	4381      	bics	r1, r0
 800d8a4:	9803      	ldr	r0, [sp, #12]
 800d8a6:	180f      	adds	r7, r1, r0
 800d8a8:	2b00      	cmp	r3, #0
 800d8aa:	d100      	bne.n	800d8ae <_realloc_r+0x12e>
 800d8ac:	e084      	b.n	800d9b8 <_realloc_r+0x238>
 800d8ae:	19d6      	adds	r6, r2, r7
 800d8b0:	459c      	cmp	ip, r3
 800d8b2:	d148      	bne.n	800d946 <_realloc_r+0x1c6>
 800d8b4:	9b00      	ldr	r3, [sp, #0]
 800d8b6:	3310      	adds	r3, #16
 800d8b8:	42b3      	cmp	r3, r6
 800d8ba:	dc7d      	bgt.n	800d9b8 <_realloc_r+0x238>
 800d8bc:	68aa      	ldr	r2, [r5, #8]
 800d8be:	68eb      	ldr	r3, [r5, #12]
 800d8c0:	002f      	movs	r7, r5
 800d8c2:	60d3      	str	r3, [r2, #12]
 800d8c4:	609a      	str	r2, [r3, #8]
 800d8c6:	0002      	movs	r2, r0
 800d8c8:	3a04      	subs	r2, #4
 800d8ca:	3708      	adds	r7, #8
 800d8cc:	2a24      	cmp	r2, #36	; 0x24
 800d8ce:	d835      	bhi.n	800d93c <_realloc_r+0x1bc>
 800d8d0:	003b      	movs	r3, r7
 800d8d2:	2a13      	cmp	r2, #19
 800d8d4:	d908      	bls.n	800d8e8 <_realloc_r+0x168>
 800d8d6:	6823      	ldr	r3, [r4, #0]
 800d8d8:	60ab      	str	r3, [r5, #8]
 800d8da:	6863      	ldr	r3, [r4, #4]
 800d8dc:	60eb      	str	r3, [r5, #12]
 800d8de:	2a1b      	cmp	r2, #27
 800d8e0:	d81a      	bhi.n	800d918 <_realloc_r+0x198>
 800d8e2:	002b      	movs	r3, r5
 800d8e4:	3408      	adds	r4, #8
 800d8e6:	3310      	adds	r3, #16
 800d8e8:	6822      	ldr	r2, [r4, #0]
 800d8ea:	601a      	str	r2, [r3, #0]
 800d8ec:	6862      	ldr	r2, [r4, #4]
 800d8ee:	605a      	str	r2, [r3, #4]
 800d8f0:	68a2      	ldr	r2, [r4, #8]
 800d8f2:	609a      	str	r2, [r3, #8]
 800d8f4:	9b00      	ldr	r3, [sp, #0]
 800d8f6:	4a74      	ldr	r2, [pc, #464]	; (800dac8 <_realloc_r+0x348>)
 800d8f8:	18eb      	adds	r3, r5, r3
 800d8fa:	6093      	str	r3, [r2, #8]
 800d8fc:	9a00      	ldr	r2, [sp, #0]
 800d8fe:	1ab6      	subs	r6, r6, r2
 800d900:	2201      	movs	r2, #1
 800d902:	4316      	orrs	r6, r2
 800d904:	605e      	str	r6, [r3, #4]
 800d906:	686b      	ldr	r3, [r5, #4]
 800d908:	4013      	ands	r3, r2
 800d90a:	9a00      	ldr	r2, [sp, #0]
 800d90c:	4313      	orrs	r3, r2
 800d90e:	606b      	str	r3, [r5, #4]
 800d910:	9801      	ldr	r0, [sp, #4]
 800d912:	f7fc f8a3 	bl	8009a5c <__malloc_unlock>
 800d916:	e73d      	b.n	800d794 <_realloc_r+0x14>
 800d918:	68a3      	ldr	r3, [r4, #8]
 800d91a:	612b      	str	r3, [r5, #16]
 800d91c:	68e3      	ldr	r3, [r4, #12]
 800d91e:	616b      	str	r3, [r5, #20]
 800d920:	2a24      	cmp	r2, #36	; 0x24
 800d922:	d003      	beq.n	800d92c <_realloc_r+0x1ac>
 800d924:	002b      	movs	r3, r5
 800d926:	3410      	adds	r4, #16
 800d928:	3318      	adds	r3, #24
 800d92a:	e7dd      	b.n	800d8e8 <_realloc_r+0x168>
 800d92c:	6923      	ldr	r3, [r4, #16]
 800d92e:	61ab      	str	r3, [r5, #24]
 800d930:	002b      	movs	r3, r5
 800d932:	6962      	ldr	r2, [r4, #20]
 800d934:	3320      	adds	r3, #32
 800d936:	61ea      	str	r2, [r5, #28]
 800d938:	3418      	adds	r4, #24
 800d93a:	e7d5      	b.n	800d8e8 <_realloc_r+0x168>
 800d93c:	0021      	movs	r1, r4
 800d93e:	0038      	movs	r0, r7
 800d940:	f7ff ff03 	bl	800d74a <memmove>
 800d944:	e7d6      	b.n	800d8f4 <_realloc_r+0x174>
 800d946:	9a00      	ldr	r2, [sp, #0]
 800d948:	42b2      	cmp	r2, r6
 800d94a:	dc35      	bgt.n	800d9b8 <_realloc_r+0x238>
 800d94c:	0028      	movs	r0, r5
 800d94e:	68da      	ldr	r2, [r3, #12]
 800d950:	689b      	ldr	r3, [r3, #8]
 800d952:	3008      	adds	r0, #8
 800d954:	60da      	str	r2, [r3, #12]
 800d956:	6093      	str	r3, [r2, #8]
 800d958:	68aa      	ldr	r2, [r5, #8]
 800d95a:	68eb      	ldr	r3, [r5, #12]
 800d95c:	60d3      	str	r3, [r2, #12]
 800d95e:	609a      	str	r2, [r3, #8]
 800d960:	9a03      	ldr	r2, [sp, #12]
 800d962:	3a04      	subs	r2, #4
 800d964:	2a24      	cmp	r2, #36	; 0x24
 800d966:	d823      	bhi.n	800d9b0 <_realloc_r+0x230>
 800d968:	2a13      	cmp	r2, #19
 800d96a:	d907      	bls.n	800d97c <_realloc_r+0x1fc>
 800d96c:	6823      	ldr	r3, [r4, #0]
 800d96e:	60ab      	str	r3, [r5, #8]
 800d970:	6863      	ldr	r3, [r4, #4]
 800d972:	60eb      	str	r3, [r5, #12]
 800d974:	2a1b      	cmp	r2, #27
 800d976:	d809      	bhi.n	800d98c <_realloc_r+0x20c>
 800d978:	3408      	adds	r4, #8
 800d97a:	3008      	adds	r0, #8
 800d97c:	6823      	ldr	r3, [r4, #0]
 800d97e:	6003      	str	r3, [r0, #0]
 800d980:	6863      	ldr	r3, [r4, #4]
 800d982:	6043      	str	r3, [r0, #4]
 800d984:	68a3      	ldr	r3, [r4, #8]
 800d986:	6083      	str	r3, [r0, #8]
 800d988:	9502      	str	r5, [sp, #8]
 800d98a:	e75e      	b.n	800d84a <_realloc_r+0xca>
 800d98c:	68a3      	ldr	r3, [r4, #8]
 800d98e:	612b      	str	r3, [r5, #16]
 800d990:	68e3      	ldr	r3, [r4, #12]
 800d992:	616b      	str	r3, [r5, #20]
 800d994:	2a24      	cmp	r2, #36	; 0x24
 800d996:	d003      	beq.n	800d9a0 <_realloc_r+0x220>
 800d998:	0028      	movs	r0, r5
 800d99a:	3410      	adds	r4, #16
 800d99c:	3018      	adds	r0, #24
 800d99e:	e7ed      	b.n	800d97c <_realloc_r+0x1fc>
 800d9a0:	0028      	movs	r0, r5
 800d9a2:	6923      	ldr	r3, [r4, #16]
 800d9a4:	3020      	adds	r0, #32
 800d9a6:	61ab      	str	r3, [r5, #24]
 800d9a8:	6963      	ldr	r3, [r4, #20]
 800d9aa:	3418      	adds	r4, #24
 800d9ac:	61eb      	str	r3, [r5, #28]
 800d9ae:	e7e5      	b.n	800d97c <_realloc_r+0x1fc>
 800d9b0:	0021      	movs	r1, r4
 800d9b2:	f7ff feca 	bl	800d74a <memmove>
 800d9b6:	e7e7      	b.n	800d988 <_realloc_r+0x208>
 800d9b8:	9b00      	ldr	r3, [sp, #0]
 800d9ba:	42bb      	cmp	r3, r7
 800d9bc:	dc31      	bgt.n	800da22 <_realloc_r+0x2a2>
 800d9be:	0028      	movs	r0, r5
 800d9c0:	68aa      	ldr	r2, [r5, #8]
 800d9c2:	68eb      	ldr	r3, [r5, #12]
 800d9c4:	3008      	adds	r0, #8
 800d9c6:	60d3      	str	r3, [r2, #12]
 800d9c8:	609a      	str	r2, [r3, #8]
 800d9ca:	9a03      	ldr	r2, [sp, #12]
 800d9cc:	3a04      	subs	r2, #4
 800d9ce:	2a24      	cmp	r2, #36	; 0x24
 800d9d0:	d823      	bhi.n	800da1a <_realloc_r+0x29a>
 800d9d2:	2a13      	cmp	r2, #19
 800d9d4:	d907      	bls.n	800d9e6 <_realloc_r+0x266>
 800d9d6:	6823      	ldr	r3, [r4, #0]
 800d9d8:	60ab      	str	r3, [r5, #8]
 800d9da:	6863      	ldr	r3, [r4, #4]
 800d9dc:	60eb      	str	r3, [r5, #12]
 800d9de:	2a1b      	cmp	r2, #27
 800d9e0:	d809      	bhi.n	800d9f6 <_realloc_r+0x276>
 800d9e2:	3408      	adds	r4, #8
 800d9e4:	3008      	adds	r0, #8
 800d9e6:	6823      	ldr	r3, [r4, #0]
 800d9e8:	6003      	str	r3, [r0, #0]
 800d9ea:	6863      	ldr	r3, [r4, #4]
 800d9ec:	6043      	str	r3, [r0, #4]
 800d9ee:	68a3      	ldr	r3, [r4, #8]
 800d9f0:	6083      	str	r3, [r0, #8]
 800d9f2:	003e      	movs	r6, r7
 800d9f4:	e7c8      	b.n	800d988 <_realloc_r+0x208>
 800d9f6:	68a3      	ldr	r3, [r4, #8]
 800d9f8:	612b      	str	r3, [r5, #16]
 800d9fa:	68e3      	ldr	r3, [r4, #12]
 800d9fc:	616b      	str	r3, [r5, #20]
 800d9fe:	2a24      	cmp	r2, #36	; 0x24
 800da00:	d003      	beq.n	800da0a <_realloc_r+0x28a>
 800da02:	0028      	movs	r0, r5
 800da04:	3410      	adds	r4, #16
 800da06:	3018      	adds	r0, #24
 800da08:	e7ed      	b.n	800d9e6 <_realloc_r+0x266>
 800da0a:	0028      	movs	r0, r5
 800da0c:	6923      	ldr	r3, [r4, #16]
 800da0e:	3020      	adds	r0, #32
 800da10:	61ab      	str	r3, [r5, #24]
 800da12:	6963      	ldr	r3, [r4, #20]
 800da14:	3418      	adds	r4, #24
 800da16:	61eb      	str	r3, [r5, #28]
 800da18:	e7e5      	b.n	800d9e6 <_realloc_r+0x266>
 800da1a:	0021      	movs	r1, r4
 800da1c:	f7ff fe95 	bl	800d74a <memmove>
 800da20:	e7e7      	b.n	800d9f2 <_realloc_r+0x272>
 800da22:	9905      	ldr	r1, [sp, #20]
 800da24:	9801      	ldr	r0, [sp, #4]
 800da26:	f7fb fdeb 	bl	8009600 <_malloc_r>
 800da2a:	1e07      	subs	r7, r0, #0
 800da2c:	d100      	bne.n	800da30 <_realloc_r+0x2b0>
 800da2e:	e76f      	b.n	800d910 <_realloc_r+0x190>
 800da30:	0023      	movs	r3, r4
 800da32:	2201      	movs	r2, #1
 800da34:	3b08      	subs	r3, #8
 800da36:	685b      	ldr	r3, [r3, #4]
 800da38:	4393      	bics	r3, r2
 800da3a:	9a04      	ldr	r2, [sp, #16]
 800da3c:	18d3      	adds	r3, r2, r3
 800da3e:	0002      	movs	r2, r0
 800da40:	3a08      	subs	r2, #8
 800da42:	4293      	cmp	r3, r2
 800da44:	d105      	bne.n	800da52 <_realloc_r+0x2d2>
 800da46:	685e      	ldr	r6, [r3, #4]
 800da48:	2303      	movs	r3, #3
 800da4a:	439e      	bics	r6, r3
 800da4c:	9b03      	ldr	r3, [sp, #12]
 800da4e:	18f6      	adds	r6, r6, r3
 800da50:	e6fb      	b.n	800d84a <_realloc_r+0xca>
 800da52:	9a03      	ldr	r2, [sp, #12]
 800da54:	3a04      	subs	r2, #4
 800da56:	2a24      	cmp	r2, #36	; 0x24
 800da58:	d829      	bhi.n	800daae <_realloc_r+0x32e>
 800da5a:	0003      	movs	r3, r0
 800da5c:	0021      	movs	r1, r4
 800da5e:	2a13      	cmp	r2, #19
 800da60:	d908      	bls.n	800da74 <_realloc_r+0x2f4>
 800da62:	6823      	ldr	r3, [r4, #0]
 800da64:	6003      	str	r3, [r0, #0]
 800da66:	6863      	ldr	r3, [r4, #4]
 800da68:	6043      	str	r3, [r0, #4]
 800da6a:	2a1b      	cmp	r2, #27
 800da6c:	d80d      	bhi.n	800da8a <_realloc_r+0x30a>
 800da6e:	0003      	movs	r3, r0
 800da70:	3108      	adds	r1, #8
 800da72:	3308      	adds	r3, #8
 800da74:	680a      	ldr	r2, [r1, #0]
 800da76:	601a      	str	r2, [r3, #0]
 800da78:	684a      	ldr	r2, [r1, #4]
 800da7a:	605a      	str	r2, [r3, #4]
 800da7c:	688a      	ldr	r2, [r1, #8]
 800da7e:	609a      	str	r2, [r3, #8]
 800da80:	0021      	movs	r1, r4
 800da82:	9801      	ldr	r0, [sp, #4]
 800da84:	f7fb fd0a 	bl	800949c <_free_r>
 800da88:	e742      	b.n	800d910 <_realloc_r+0x190>
 800da8a:	68a3      	ldr	r3, [r4, #8]
 800da8c:	6083      	str	r3, [r0, #8]
 800da8e:	68e3      	ldr	r3, [r4, #12]
 800da90:	60c3      	str	r3, [r0, #12]
 800da92:	2a24      	cmp	r2, #36	; 0x24
 800da94:	d003      	beq.n	800da9e <_realloc_r+0x31e>
 800da96:	0003      	movs	r3, r0
 800da98:	3110      	adds	r1, #16
 800da9a:	3310      	adds	r3, #16
 800da9c:	e7ea      	b.n	800da74 <_realloc_r+0x2f4>
 800da9e:	6923      	ldr	r3, [r4, #16]
 800daa0:	3118      	adds	r1, #24
 800daa2:	6103      	str	r3, [r0, #16]
 800daa4:	0003      	movs	r3, r0
 800daa6:	6962      	ldr	r2, [r4, #20]
 800daa8:	3318      	adds	r3, #24
 800daaa:	6142      	str	r2, [r0, #20]
 800daac:	e7e2      	b.n	800da74 <_realloc_r+0x2f4>
 800daae:	0021      	movs	r1, r4
 800dab0:	f7ff fe4b 	bl	800d74a <memmove>
 800dab4:	e7e4      	b.n	800da80 <_realloc_r+0x300>
 800dab6:	9e03      	ldr	r6, [sp, #12]
 800dab8:	e6c7      	b.n	800d84a <_realloc_r+0xca>
 800daba:	9902      	ldr	r1, [sp, #8]
 800dabc:	4306      	orrs	r6, r0
 800dabe:	604e      	str	r6, [r1, #4]
 800dac0:	6851      	ldr	r1, [r2, #4]
 800dac2:	430b      	orrs	r3, r1
 800dac4:	6053      	str	r3, [r2, #4]
 800dac6:	e6da      	b.n	800d87e <_realloc_r+0xfe>
 800dac8:	200002c0 	.word	0x200002c0

0800dacc <_wcrtomb_r>:
 800dacc:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
 800dace:	001d      	movs	r5, r3
 800dad0:	4b09      	ldr	r3, [pc, #36]	; (800daf8 <_wcrtomb_r+0x2c>)
 800dad2:	0004      	movs	r4, r0
 800dad4:	33e0      	adds	r3, #224	; 0xe0
 800dad6:	681e      	ldr	r6, [r3, #0]
 800dad8:	002b      	movs	r3, r5
 800dada:	2900      	cmp	r1, #0
 800dadc:	d101      	bne.n	800dae2 <_wcrtomb_r+0x16>
 800dade:	000a      	movs	r2, r1
 800dae0:	a901      	add	r1, sp, #4
 800dae2:	0020      	movs	r0, r4
 800dae4:	47b0      	blx	r6
 800dae6:	1c43      	adds	r3, r0, #1
 800dae8:	d103      	bne.n	800daf2 <_wcrtomb_r+0x26>
 800daea:	2300      	movs	r3, #0
 800daec:	602b      	str	r3, [r5, #0]
 800daee:	338a      	adds	r3, #138	; 0x8a
 800daf0:	6023      	str	r3, [r4, #0]
 800daf2:	b004      	add	sp, #16
 800daf4:	bd70      	pop	{r4, r5, r6, pc}
 800daf6:	46c0      	nop			; (mov r8, r8)
 800daf8:	20000028 	.word	0x20000028

0800dafc <__swhatbuf_r>:
 800dafc:	b570      	push	{r4, r5, r6, lr}
 800dafe:	000e      	movs	r6, r1
 800db00:	001d      	movs	r5, r3
 800db02:	230e      	movs	r3, #14
 800db04:	5ec9      	ldrsh	r1, [r1, r3]
 800db06:	0014      	movs	r4, r2
 800db08:	b096      	sub	sp, #88	; 0x58
 800db0a:	2900      	cmp	r1, #0
 800db0c:	da09      	bge.n	800db22 <__swhatbuf_r+0x26>
 800db0e:	89b2      	ldrh	r2, [r6, #12]
 800db10:	2380      	movs	r3, #128	; 0x80
 800db12:	0011      	movs	r1, r2
 800db14:	4019      	ands	r1, r3
 800db16:	421a      	tst	r2, r3
 800db18:	d018      	beq.n	800db4c <__swhatbuf_r+0x50>
 800db1a:	2100      	movs	r1, #0
 800db1c:	3b40      	subs	r3, #64	; 0x40
 800db1e:	0008      	movs	r0, r1
 800db20:	e010      	b.n	800db44 <__swhatbuf_r+0x48>
 800db22:	466a      	mov	r2, sp
 800db24:	f000 f8de 	bl	800dce4 <_fstat_r>
 800db28:	2800      	cmp	r0, #0
 800db2a:	dbf0      	blt.n	800db0e <__swhatbuf_r+0x12>
 800db2c:	23f0      	movs	r3, #240	; 0xf0
 800db2e:	9901      	ldr	r1, [sp, #4]
 800db30:	021b      	lsls	r3, r3, #8
 800db32:	4019      	ands	r1, r3
 800db34:	4b07      	ldr	r3, [pc, #28]	; (800db54 <__swhatbuf_r+0x58>)
 800db36:	2080      	movs	r0, #128	; 0x80
 800db38:	18c9      	adds	r1, r1, r3
 800db3a:	424b      	negs	r3, r1
 800db3c:	4159      	adcs	r1, r3
 800db3e:	2380      	movs	r3, #128	; 0x80
 800db40:	0100      	lsls	r0, r0, #4
 800db42:	00db      	lsls	r3, r3, #3
 800db44:	6029      	str	r1, [r5, #0]
 800db46:	6023      	str	r3, [r4, #0]
 800db48:	b016      	add	sp, #88	; 0x58
 800db4a:	bd70      	pop	{r4, r5, r6, pc}
 800db4c:	2380      	movs	r3, #128	; 0x80
 800db4e:	00db      	lsls	r3, r3, #3
 800db50:	e7e5      	b.n	800db1e <__swhatbuf_r+0x22>
 800db52:	46c0      	nop			; (mov r8, r8)
 800db54:	ffffe000 	.word	0xffffe000

0800db58 <__smakebuf_r>:
 800db58:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800db5a:	2602      	movs	r6, #2
 800db5c:	898b      	ldrh	r3, [r1, #12]
 800db5e:	0005      	movs	r5, r0
 800db60:	000c      	movs	r4, r1
 800db62:	4233      	tst	r3, r6
 800db64:	d006      	beq.n	800db74 <__smakebuf_r+0x1c>
 800db66:	0023      	movs	r3, r4
 800db68:	3343      	adds	r3, #67	; 0x43
 800db6a:	6023      	str	r3, [r4, #0]
 800db6c:	6123      	str	r3, [r4, #16]
 800db6e:	2301      	movs	r3, #1
 800db70:	6163      	str	r3, [r4, #20]
 800db72:	bdf7      	pop	{r0, r1, r2, r4, r5, r6, r7, pc}
 800db74:	466a      	mov	r2, sp
 800db76:	ab01      	add	r3, sp, #4
 800db78:	f7ff ffc0 	bl	800dafc <__swhatbuf_r>
 800db7c:	9900      	ldr	r1, [sp, #0]
 800db7e:	0007      	movs	r7, r0
 800db80:	0028      	movs	r0, r5
 800db82:	f7fb fd3d 	bl	8009600 <_malloc_r>
 800db86:	2800      	cmp	r0, #0
 800db88:	d108      	bne.n	800db9c <__smakebuf_r+0x44>
 800db8a:	220c      	movs	r2, #12
 800db8c:	5ea3      	ldrsh	r3, [r4, r2]
 800db8e:	059a      	lsls	r2, r3, #22
 800db90:	d4ef      	bmi.n	800db72 <__smakebuf_r+0x1a>
 800db92:	2203      	movs	r2, #3
 800db94:	4393      	bics	r3, r2
 800db96:	431e      	orrs	r6, r3
 800db98:	81a6      	strh	r6, [r4, #12]
 800db9a:	e7e4      	b.n	800db66 <__smakebuf_r+0xe>
 800db9c:	2380      	movs	r3, #128	; 0x80
 800db9e:	89a2      	ldrh	r2, [r4, #12]
 800dba0:	6020      	str	r0, [r4, #0]
 800dba2:	4313      	orrs	r3, r2
 800dba4:	81a3      	strh	r3, [r4, #12]
 800dba6:	9b00      	ldr	r3, [sp, #0]
 800dba8:	6120      	str	r0, [r4, #16]
 800dbaa:	6163      	str	r3, [r4, #20]
 800dbac:	9b01      	ldr	r3, [sp, #4]
 800dbae:	2b00      	cmp	r3, #0
 800dbb0:	d00c      	beq.n	800dbcc <__smakebuf_r+0x74>
 800dbb2:	0028      	movs	r0, r5
 800dbb4:	230e      	movs	r3, #14
 800dbb6:	5ee1      	ldrsh	r1, [r4, r3]
 800dbb8:	f000 f8a6 	bl	800dd08 <_isatty_r>
 800dbbc:	2800      	cmp	r0, #0
 800dbbe:	d005      	beq.n	800dbcc <__smakebuf_r+0x74>
 800dbc0:	2303      	movs	r3, #3
 800dbc2:	89a2      	ldrh	r2, [r4, #12]
 800dbc4:	439a      	bics	r2, r3
 800dbc6:	3b02      	subs	r3, #2
 800dbc8:	4313      	orrs	r3, r2
 800dbca:	81a3      	strh	r3, [r4, #12]
 800dbcc:	89a3      	ldrh	r3, [r4, #12]
 800dbce:	433b      	orrs	r3, r7
 800dbd0:	81a3      	strh	r3, [r4, #12]
 800dbd2:	e7ce      	b.n	800db72 <__smakebuf_r+0x1a>

0800dbd4 <__swbuf_r>:
 800dbd4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800dbd6:	0006      	movs	r6, r0
 800dbd8:	000d      	movs	r5, r1
 800dbda:	0014      	movs	r4, r2
 800dbdc:	2800      	cmp	r0, #0
 800dbde:	d004      	beq.n	800dbea <__swbuf_r+0x16>
 800dbe0:	6b43      	ldr	r3, [r0, #52]	; 0x34
 800dbe2:	2b00      	cmp	r3, #0
 800dbe4:	d101      	bne.n	800dbea <__swbuf_r+0x16>
 800dbe6:	f7fb fa87 	bl	80090f8 <__sinit>
 800dbea:	69a3      	ldr	r3, [r4, #24]
 800dbec:	60a3      	str	r3, [r4, #8]
 800dbee:	89a3      	ldrh	r3, [r4, #12]
 800dbf0:	071b      	lsls	r3, r3, #28
 800dbf2:	d52e      	bpl.n	800dc52 <__swbuf_r+0x7e>
 800dbf4:	6923      	ldr	r3, [r4, #16]
 800dbf6:	2b00      	cmp	r3, #0
 800dbf8:	d02b      	beq.n	800dc52 <__swbuf_r+0x7e>
 800dbfa:	230c      	movs	r3, #12
 800dbfc:	5ee2      	ldrsh	r2, [r4, r3]
 800dbfe:	2380      	movs	r3, #128	; 0x80
 800dc00:	019b      	lsls	r3, r3, #6
 800dc02:	b2ef      	uxtb	r7, r5
 800dc04:	b2ed      	uxtb	r5, r5
 800dc06:	421a      	tst	r2, r3
 800dc08:	d02c      	beq.n	800dc64 <__swbuf_r+0x90>
 800dc0a:	6923      	ldr	r3, [r4, #16]
 800dc0c:	6820      	ldr	r0, [r4, #0]
 800dc0e:	1ac0      	subs	r0, r0, r3
 800dc10:	6963      	ldr	r3, [r4, #20]
 800dc12:	4283      	cmp	r3, r0
 800dc14:	dc05      	bgt.n	800dc22 <__swbuf_r+0x4e>
 800dc16:	0021      	movs	r1, r4
 800dc18:	0030      	movs	r0, r6
 800dc1a:	f7fd fdb7 	bl	800b78c <_fflush_r>
 800dc1e:	2800      	cmp	r0, #0
 800dc20:	d11d      	bne.n	800dc5e <__swbuf_r+0x8a>
 800dc22:	68a3      	ldr	r3, [r4, #8]
 800dc24:	3001      	adds	r0, #1
 800dc26:	3b01      	subs	r3, #1
 800dc28:	60a3      	str	r3, [r4, #8]
 800dc2a:	6823      	ldr	r3, [r4, #0]
 800dc2c:	1c5a      	adds	r2, r3, #1
 800dc2e:	6022      	str	r2, [r4, #0]
 800dc30:	701f      	strb	r7, [r3, #0]
 800dc32:	6963      	ldr	r3, [r4, #20]
 800dc34:	4283      	cmp	r3, r0
 800dc36:	d004      	beq.n	800dc42 <__swbuf_r+0x6e>
 800dc38:	89a3      	ldrh	r3, [r4, #12]
 800dc3a:	07db      	lsls	r3, r3, #31
 800dc3c:	d507      	bpl.n	800dc4e <__swbuf_r+0x7a>
 800dc3e:	2d0a      	cmp	r5, #10
 800dc40:	d105      	bne.n	800dc4e <__swbuf_r+0x7a>
 800dc42:	0021      	movs	r1, r4
 800dc44:	0030      	movs	r0, r6
 800dc46:	f7fd fda1 	bl	800b78c <_fflush_r>
 800dc4a:	2800      	cmp	r0, #0
 800dc4c:	d107      	bne.n	800dc5e <__swbuf_r+0x8a>
 800dc4e:	0028      	movs	r0, r5
 800dc50:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800dc52:	0021      	movs	r1, r4
 800dc54:	0030      	movs	r0, r6
 800dc56:	f7ff fcad 	bl	800d5b4 <__swsetup_r>
 800dc5a:	2800      	cmp	r0, #0
 800dc5c:	d0cd      	beq.n	800dbfa <__swbuf_r+0x26>
 800dc5e:	2501      	movs	r5, #1
 800dc60:	426d      	negs	r5, r5
 800dc62:	e7f4      	b.n	800dc4e <__swbuf_r+0x7a>
 800dc64:	4313      	orrs	r3, r2
 800dc66:	81a3      	strh	r3, [r4, #12]
 800dc68:	4a02      	ldr	r2, [pc, #8]	; (800dc74 <__swbuf_r+0xa0>)
 800dc6a:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800dc6c:	4013      	ands	r3, r2
 800dc6e:	6663      	str	r3, [r4, #100]	; 0x64
 800dc70:	e7cb      	b.n	800dc0a <__swbuf_r+0x36>
 800dc72:	46c0      	nop			; (mov r8, r8)
 800dc74:	ffffdfff 	.word	0xffffdfff

0800dc78 <_raise_r>:
 800dc78:	b570      	push	{r4, r5, r6, lr}
 800dc7a:	0004      	movs	r4, r0
 800dc7c:	000d      	movs	r5, r1
 800dc7e:	291f      	cmp	r1, #31
 800dc80:	d904      	bls.n	800dc8c <_raise_r+0x14>
 800dc82:	2316      	movs	r3, #22
 800dc84:	6003      	str	r3, [r0, #0]
 800dc86:	2001      	movs	r0, #1
 800dc88:	4240      	negs	r0, r0
 800dc8a:	bd70      	pop	{r4, r5, r6, pc}
 800dc8c:	0003      	movs	r3, r0
 800dc8e:	33fc      	adds	r3, #252	; 0xfc
 800dc90:	69db      	ldr	r3, [r3, #28]
 800dc92:	2b00      	cmp	r3, #0
 800dc94:	d004      	beq.n	800dca0 <_raise_r+0x28>
 800dc96:	008a      	lsls	r2, r1, #2
 800dc98:	189b      	adds	r3, r3, r2
 800dc9a:	681a      	ldr	r2, [r3, #0]
 800dc9c:	2a00      	cmp	r2, #0
 800dc9e:	d108      	bne.n	800dcb2 <_raise_r+0x3a>
 800dca0:	0020      	movs	r0, r4
 800dca2:	f000 f855 	bl	800dd50 <_getpid_r>
 800dca6:	002a      	movs	r2, r5
 800dca8:	0001      	movs	r1, r0
 800dcaa:	0020      	movs	r0, r4
 800dcac:	f000 f83e 	bl	800dd2c <_kill_r>
 800dcb0:	e7eb      	b.n	800dc8a <_raise_r+0x12>
 800dcb2:	2000      	movs	r0, #0
 800dcb4:	2a01      	cmp	r2, #1
 800dcb6:	d0e8      	beq.n	800dc8a <_raise_r+0x12>
 800dcb8:	1c51      	adds	r1, r2, #1
 800dcba:	d103      	bne.n	800dcc4 <_raise_r+0x4c>
 800dcbc:	2316      	movs	r3, #22
 800dcbe:	3001      	adds	r0, #1
 800dcc0:	6023      	str	r3, [r4, #0]
 800dcc2:	e7e2      	b.n	800dc8a <_raise_r+0x12>
 800dcc4:	2400      	movs	r4, #0
 800dcc6:	0028      	movs	r0, r5
 800dcc8:	601c      	str	r4, [r3, #0]
 800dcca:	4790      	blx	r2
 800dccc:	0020      	movs	r0, r4
 800dcce:	e7dc      	b.n	800dc8a <_raise_r+0x12>

0800dcd0 <raise>:
 800dcd0:	b510      	push	{r4, lr}
 800dcd2:	4b03      	ldr	r3, [pc, #12]	; (800dce0 <raise+0x10>)
 800dcd4:	0001      	movs	r1, r0
 800dcd6:	6818      	ldr	r0, [r3, #0]
 800dcd8:	f7ff ffce 	bl	800dc78 <_raise_r>
 800dcdc:	bd10      	pop	{r4, pc}
 800dcde:	46c0      	nop			; (mov r8, r8)
 800dce0:	200002b8 	.word	0x200002b8

0800dce4 <_fstat_r>:
 800dce4:	2300      	movs	r3, #0
 800dce6:	b570      	push	{r4, r5, r6, lr}
 800dce8:	4d06      	ldr	r5, [pc, #24]	; (800dd04 <_fstat_r+0x20>)
 800dcea:	0004      	movs	r4, r0
 800dcec:	0008      	movs	r0, r1
 800dcee:	0011      	movs	r1, r2
 800dcf0:	602b      	str	r3, [r5, #0]
 800dcf2:	f7f5 fd32 	bl	800375a <_fstat>
 800dcf6:	1c43      	adds	r3, r0, #1
 800dcf8:	d103      	bne.n	800dd02 <_fstat_r+0x1e>
 800dcfa:	682b      	ldr	r3, [r5, #0]
 800dcfc:	2b00      	cmp	r3, #0
 800dcfe:	d000      	beq.n	800dd02 <_fstat_r+0x1e>
 800dd00:	6023      	str	r3, [r4, #0]
 800dd02:	bd70      	pop	{r4, r5, r6, pc}
 800dd04:	20000b2c 	.word	0x20000b2c

0800dd08 <_isatty_r>:
 800dd08:	2300      	movs	r3, #0
 800dd0a:	b570      	push	{r4, r5, r6, lr}
 800dd0c:	4d06      	ldr	r5, [pc, #24]	; (800dd28 <_isatty_r+0x20>)
 800dd0e:	0004      	movs	r4, r0
 800dd10:	0008      	movs	r0, r1
 800dd12:	602b      	str	r3, [r5, #0]
 800dd14:	f7f5 fd2f 	bl	8003776 <_isatty>
 800dd18:	1c43      	adds	r3, r0, #1
 800dd1a:	d103      	bne.n	800dd24 <_isatty_r+0x1c>
 800dd1c:	682b      	ldr	r3, [r5, #0]
 800dd1e:	2b00      	cmp	r3, #0
 800dd20:	d000      	beq.n	800dd24 <_isatty_r+0x1c>
 800dd22:	6023      	str	r3, [r4, #0]
 800dd24:	bd70      	pop	{r4, r5, r6, pc}
 800dd26:	46c0      	nop			; (mov r8, r8)
 800dd28:	20000b2c 	.word	0x20000b2c

0800dd2c <_kill_r>:
 800dd2c:	2300      	movs	r3, #0
 800dd2e:	b570      	push	{r4, r5, r6, lr}
 800dd30:	4d06      	ldr	r5, [pc, #24]	; (800dd4c <_kill_r+0x20>)
 800dd32:	0004      	movs	r4, r0
 800dd34:	0008      	movs	r0, r1
 800dd36:	0011      	movs	r1, r2
 800dd38:	602b      	str	r3, [r5, #0]
 800dd3a:	f7f5 fcaf 	bl	800369c <_kill>
 800dd3e:	1c43      	adds	r3, r0, #1
 800dd40:	d103      	bne.n	800dd4a <_kill_r+0x1e>
 800dd42:	682b      	ldr	r3, [r5, #0]
 800dd44:	2b00      	cmp	r3, #0
 800dd46:	d000      	beq.n	800dd4a <_kill_r+0x1e>
 800dd48:	6023      	str	r3, [r4, #0]
 800dd4a:	bd70      	pop	{r4, r5, r6, pc}
 800dd4c:	20000b2c 	.word	0x20000b2c

0800dd50 <_getpid_r>:
 800dd50:	b510      	push	{r4, lr}
 800dd52:	f7f5 fc9d 	bl	8003690 <_getpid>
 800dd56:	bd10      	pop	{r4, pc}

0800dd58 <_init>:
 800dd58:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800dd5a:	46c0      	nop			; (mov r8, r8)
 800dd5c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800dd5e:	bc08      	pop	{r3}
 800dd60:	469e      	mov	lr, r3
 800dd62:	4770      	bx	lr

0800dd64 <_fini>:
 800dd64:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800dd66:	46c0      	nop			; (mov r8, r8)
 800dd68:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800dd6a:	bc08      	pop	{r3}
 800dd6c:	469e      	mov	lr, r3
 800dd6e:	4770      	bx	lr
