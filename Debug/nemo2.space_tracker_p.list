
nemo2.space_tracker_p.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000bc  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000cff0  080000bc  080000bc  000100bc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00001d44  0800d0b0  0800d0b0  0001d0b0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800edf4  0800edf4  000206c0  2**0
                  CONTENTS
  4 .ARM          00000008  0800edf4  0800edf4  0001edf4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800edfc  0800edfc  000206c0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000008  0800edfc  0800edfc  0001edfc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800ee04  0800ee04  0001ee04  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000006c0  20000000  0800ee08  00020000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000004ec  200006c0  0800f4c8  000206c0  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000bac  0800f4c8  00020bac  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  000206c0  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  000206e8  2**0
                  CONTENTS, READONLY
 13 .debug_info   00015096  00000000  00000000  0002072b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000030c5  00000000  00000000  000357c1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001338  00000000  00000000  00038888  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000f1e  00000000  00000000  00039bc0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0001fa7b  00000000  00000000  0003aade  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00018341  00000000  00000000  0005a559  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000c522d  00000000  00000000  0007289a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00005818  00000000  00000000  00137ac8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000005c  00000000  00000000  0013d2e0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000bc <__do_global_dtors_aux>:
 80000bc:	b510      	push	{r4, lr}
 80000be:	4c06      	ldr	r4, [pc, #24]	; (80000d8 <__do_global_dtors_aux+0x1c>)
 80000c0:	7823      	ldrb	r3, [r4, #0]
 80000c2:	2b00      	cmp	r3, #0
 80000c4:	d107      	bne.n	80000d6 <__do_global_dtors_aux+0x1a>
 80000c6:	4b05      	ldr	r3, [pc, #20]	; (80000dc <__do_global_dtors_aux+0x20>)
 80000c8:	2b00      	cmp	r3, #0
 80000ca:	d002      	beq.n	80000d2 <__do_global_dtors_aux+0x16>
 80000cc:	4804      	ldr	r0, [pc, #16]	; (80000e0 <__do_global_dtors_aux+0x24>)
 80000ce:	e000      	b.n	80000d2 <__do_global_dtors_aux+0x16>
 80000d0:	bf00      	nop
 80000d2:	2301      	movs	r3, #1
 80000d4:	7023      	strb	r3, [r4, #0]
 80000d6:	bd10      	pop	{r4, pc}
 80000d8:	200006c0 	.word	0x200006c0
 80000dc:	00000000 	.word	0x00000000
 80000e0:	0800d094 	.word	0x0800d094

080000e4 <frame_dummy>:
 80000e4:	4b04      	ldr	r3, [pc, #16]	; (80000f8 <frame_dummy+0x14>)
 80000e6:	b510      	push	{r4, lr}
 80000e8:	2b00      	cmp	r3, #0
 80000ea:	d003      	beq.n	80000f4 <frame_dummy+0x10>
 80000ec:	4903      	ldr	r1, [pc, #12]	; (80000fc <frame_dummy+0x18>)
 80000ee:	4804      	ldr	r0, [pc, #16]	; (8000100 <frame_dummy+0x1c>)
 80000f0:	e000      	b.n	80000f4 <frame_dummy+0x10>
 80000f2:	bf00      	nop
 80000f4:	bd10      	pop	{r4, pc}
 80000f6:	46c0      	nop			; (mov r8, r8)
 80000f8:	00000000 	.word	0x00000000
 80000fc:	200006c4 	.word	0x200006c4
 8000100:	0800d094 	.word	0x0800d094

08000104 <strlen>:
 8000104:	2300      	movs	r3, #0
 8000106:	5cc2      	ldrb	r2, [r0, r3]
 8000108:	3301      	adds	r3, #1
 800010a:	2a00      	cmp	r2, #0
 800010c:	d1fb      	bne.n	8000106 <strlen+0x2>
 800010e:	1e58      	subs	r0, r3, #1
 8000110:	4770      	bx	lr
	...

08000114 <__gnu_thumb1_case_uqi>:
 8000114:	b402      	push	{r1}
 8000116:	4671      	mov	r1, lr
 8000118:	0849      	lsrs	r1, r1, #1
 800011a:	0049      	lsls	r1, r1, #1
 800011c:	5c09      	ldrb	r1, [r1, r0]
 800011e:	0049      	lsls	r1, r1, #1
 8000120:	448e      	add	lr, r1
 8000122:	bc02      	pop	{r1}
 8000124:	4770      	bx	lr
 8000126:	46c0      	nop			; (mov r8, r8)

08000128 <__gnu_thumb1_case_uhi>:
 8000128:	b403      	push	{r0, r1}
 800012a:	4671      	mov	r1, lr
 800012c:	0849      	lsrs	r1, r1, #1
 800012e:	0040      	lsls	r0, r0, #1
 8000130:	0049      	lsls	r1, r1, #1
 8000132:	5a09      	ldrh	r1, [r1, r0]
 8000134:	0049      	lsls	r1, r1, #1
 8000136:	448e      	add	lr, r1
 8000138:	bc03      	pop	{r0, r1}
 800013a:	4770      	bx	lr

0800013c <__udivsi3>:
 800013c:	2200      	movs	r2, #0
 800013e:	0843      	lsrs	r3, r0, #1
 8000140:	428b      	cmp	r3, r1
 8000142:	d374      	bcc.n	800022e <__udivsi3+0xf2>
 8000144:	0903      	lsrs	r3, r0, #4
 8000146:	428b      	cmp	r3, r1
 8000148:	d35f      	bcc.n	800020a <__udivsi3+0xce>
 800014a:	0a03      	lsrs	r3, r0, #8
 800014c:	428b      	cmp	r3, r1
 800014e:	d344      	bcc.n	80001da <__udivsi3+0x9e>
 8000150:	0b03      	lsrs	r3, r0, #12
 8000152:	428b      	cmp	r3, r1
 8000154:	d328      	bcc.n	80001a8 <__udivsi3+0x6c>
 8000156:	0c03      	lsrs	r3, r0, #16
 8000158:	428b      	cmp	r3, r1
 800015a:	d30d      	bcc.n	8000178 <__udivsi3+0x3c>
 800015c:	22ff      	movs	r2, #255	; 0xff
 800015e:	0209      	lsls	r1, r1, #8
 8000160:	ba12      	rev	r2, r2
 8000162:	0c03      	lsrs	r3, r0, #16
 8000164:	428b      	cmp	r3, r1
 8000166:	d302      	bcc.n	800016e <__udivsi3+0x32>
 8000168:	1212      	asrs	r2, r2, #8
 800016a:	0209      	lsls	r1, r1, #8
 800016c:	d065      	beq.n	800023a <__udivsi3+0xfe>
 800016e:	0b03      	lsrs	r3, r0, #12
 8000170:	428b      	cmp	r3, r1
 8000172:	d319      	bcc.n	80001a8 <__udivsi3+0x6c>
 8000174:	e000      	b.n	8000178 <__udivsi3+0x3c>
 8000176:	0a09      	lsrs	r1, r1, #8
 8000178:	0bc3      	lsrs	r3, r0, #15
 800017a:	428b      	cmp	r3, r1
 800017c:	d301      	bcc.n	8000182 <__udivsi3+0x46>
 800017e:	03cb      	lsls	r3, r1, #15
 8000180:	1ac0      	subs	r0, r0, r3
 8000182:	4152      	adcs	r2, r2
 8000184:	0b83      	lsrs	r3, r0, #14
 8000186:	428b      	cmp	r3, r1
 8000188:	d301      	bcc.n	800018e <__udivsi3+0x52>
 800018a:	038b      	lsls	r3, r1, #14
 800018c:	1ac0      	subs	r0, r0, r3
 800018e:	4152      	adcs	r2, r2
 8000190:	0b43      	lsrs	r3, r0, #13
 8000192:	428b      	cmp	r3, r1
 8000194:	d301      	bcc.n	800019a <__udivsi3+0x5e>
 8000196:	034b      	lsls	r3, r1, #13
 8000198:	1ac0      	subs	r0, r0, r3
 800019a:	4152      	adcs	r2, r2
 800019c:	0b03      	lsrs	r3, r0, #12
 800019e:	428b      	cmp	r3, r1
 80001a0:	d301      	bcc.n	80001a6 <__udivsi3+0x6a>
 80001a2:	030b      	lsls	r3, r1, #12
 80001a4:	1ac0      	subs	r0, r0, r3
 80001a6:	4152      	adcs	r2, r2
 80001a8:	0ac3      	lsrs	r3, r0, #11
 80001aa:	428b      	cmp	r3, r1
 80001ac:	d301      	bcc.n	80001b2 <__udivsi3+0x76>
 80001ae:	02cb      	lsls	r3, r1, #11
 80001b0:	1ac0      	subs	r0, r0, r3
 80001b2:	4152      	adcs	r2, r2
 80001b4:	0a83      	lsrs	r3, r0, #10
 80001b6:	428b      	cmp	r3, r1
 80001b8:	d301      	bcc.n	80001be <__udivsi3+0x82>
 80001ba:	028b      	lsls	r3, r1, #10
 80001bc:	1ac0      	subs	r0, r0, r3
 80001be:	4152      	adcs	r2, r2
 80001c0:	0a43      	lsrs	r3, r0, #9
 80001c2:	428b      	cmp	r3, r1
 80001c4:	d301      	bcc.n	80001ca <__udivsi3+0x8e>
 80001c6:	024b      	lsls	r3, r1, #9
 80001c8:	1ac0      	subs	r0, r0, r3
 80001ca:	4152      	adcs	r2, r2
 80001cc:	0a03      	lsrs	r3, r0, #8
 80001ce:	428b      	cmp	r3, r1
 80001d0:	d301      	bcc.n	80001d6 <__udivsi3+0x9a>
 80001d2:	020b      	lsls	r3, r1, #8
 80001d4:	1ac0      	subs	r0, r0, r3
 80001d6:	4152      	adcs	r2, r2
 80001d8:	d2cd      	bcs.n	8000176 <__udivsi3+0x3a>
 80001da:	09c3      	lsrs	r3, r0, #7
 80001dc:	428b      	cmp	r3, r1
 80001de:	d301      	bcc.n	80001e4 <__udivsi3+0xa8>
 80001e0:	01cb      	lsls	r3, r1, #7
 80001e2:	1ac0      	subs	r0, r0, r3
 80001e4:	4152      	adcs	r2, r2
 80001e6:	0983      	lsrs	r3, r0, #6
 80001e8:	428b      	cmp	r3, r1
 80001ea:	d301      	bcc.n	80001f0 <__udivsi3+0xb4>
 80001ec:	018b      	lsls	r3, r1, #6
 80001ee:	1ac0      	subs	r0, r0, r3
 80001f0:	4152      	adcs	r2, r2
 80001f2:	0943      	lsrs	r3, r0, #5
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d301      	bcc.n	80001fc <__udivsi3+0xc0>
 80001f8:	014b      	lsls	r3, r1, #5
 80001fa:	1ac0      	subs	r0, r0, r3
 80001fc:	4152      	adcs	r2, r2
 80001fe:	0903      	lsrs	r3, r0, #4
 8000200:	428b      	cmp	r3, r1
 8000202:	d301      	bcc.n	8000208 <__udivsi3+0xcc>
 8000204:	010b      	lsls	r3, r1, #4
 8000206:	1ac0      	subs	r0, r0, r3
 8000208:	4152      	adcs	r2, r2
 800020a:	08c3      	lsrs	r3, r0, #3
 800020c:	428b      	cmp	r3, r1
 800020e:	d301      	bcc.n	8000214 <__udivsi3+0xd8>
 8000210:	00cb      	lsls	r3, r1, #3
 8000212:	1ac0      	subs	r0, r0, r3
 8000214:	4152      	adcs	r2, r2
 8000216:	0883      	lsrs	r3, r0, #2
 8000218:	428b      	cmp	r3, r1
 800021a:	d301      	bcc.n	8000220 <__udivsi3+0xe4>
 800021c:	008b      	lsls	r3, r1, #2
 800021e:	1ac0      	subs	r0, r0, r3
 8000220:	4152      	adcs	r2, r2
 8000222:	0843      	lsrs	r3, r0, #1
 8000224:	428b      	cmp	r3, r1
 8000226:	d301      	bcc.n	800022c <__udivsi3+0xf0>
 8000228:	004b      	lsls	r3, r1, #1
 800022a:	1ac0      	subs	r0, r0, r3
 800022c:	4152      	adcs	r2, r2
 800022e:	1a41      	subs	r1, r0, r1
 8000230:	d200      	bcs.n	8000234 <__udivsi3+0xf8>
 8000232:	4601      	mov	r1, r0
 8000234:	4152      	adcs	r2, r2
 8000236:	4610      	mov	r0, r2
 8000238:	4770      	bx	lr
 800023a:	e7ff      	b.n	800023c <__udivsi3+0x100>
 800023c:	b501      	push	{r0, lr}
 800023e:	2000      	movs	r0, #0
 8000240:	f000 f8f0 	bl	8000424 <__aeabi_idiv0>
 8000244:	bd02      	pop	{r1, pc}
 8000246:	46c0      	nop			; (mov r8, r8)

08000248 <__aeabi_uidivmod>:
 8000248:	2900      	cmp	r1, #0
 800024a:	d0f7      	beq.n	800023c <__udivsi3+0x100>
 800024c:	e776      	b.n	800013c <__udivsi3>
 800024e:	4770      	bx	lr

08000250 <__divsi3>:
 8000250:	4603      	mov	r3, r0
 8000252:	430b      	orrs	r3, r1
 8000254:	d47f      	bmi.n	8000356 <__divsi3+0x106>
 8000256:	2200      	movs	r2, #0
 8000258:	0843      	lsrs	r3, r0, #1
 800025a:	428b      	cmp	r3, r1
 800025c:	d374      	bcc.n	8000348 <__divsi3+0xf8>
 800025e:	0903      	lsrs	r3, r0, #4
 8000260:	428b      	cmp	r3, r1
 8000262:	d35f      	bcc.n	8000324 <__divsi3+0xd4>
 8000264:	0a03      	lsrs	r3, r0, #8
 8000266:	428b      	cmp	r3, r1
 8000268:	d344      	bcc.n	80002f4 <__divsi3+0xa4>
 800026a:	0b03      	lsrs	r3, r0, #12
 800026c:	428b      	cmp	r3, r1
 800026e:	d328      	bcc.n	80002c2 <__divsi3+0x72>
 8000270:	0c03      	lsrs	r3, r0, #16
 8000272:	428b      	cmp	r3, r1
 8000274:	d30d      	bcc.n	8000292 <__divsi3+0x42>
 8000276:	22ff      	movs	r2, #255	; 0xff
 8000278:	0209      	lsls	r1, r1, #8
 800027a:	ba12      	rev	r2, r2
 800027c:	0c03      	lsrs	r3, r0, #16
 800027e:	428b      	cmp	r3, r1
 8000280:	d302      	bcc.n	8000288 <__divsi3+0x38>
 8000282:	1212      	asrs	r2, r2, #8
 8000284:	0209      	lsls	r1, r1, #8
 8000286:	d065      	beq.n	8000354 <__divsi3+0x104>
 8000288:	0b03      	lsrs	r3, r0, #12
 800028a:	428b      	cmp	r3, r1
 800028c:	d319      	bcc.n	80002c2 <__divsi3+0x72>
 800028e:	e000      	b.n	8000292 <__divsi3+0x42>
 8000290:	0a09      	lsrs	r1, r1, #8
 8000292:	0bc3      	lsrs	r3, r0, #15
 8000294:	428b      	cmp	r3, r1
 8000296:	d301      	bcc.n	800029c <__divsi3+0x4c>
 8000298:	03cb      	lsls	r3, r1, #15
 800029a:	1ac0      	subs	r0, r0, r3
 800029c:	4152      	adcs	r2, r2
 800029e:	0b83      	lsrs	r3, r0, #14
 80002a0:	428b      	cmp	r3, r1
 80002a2:	d301      	bcc.n	80002a8 <__divsi3+0x58>
 80002a4:	038b      	lsls	r3, r1, #14
 80002a6:	1ac0      	subs	r0, r0, r3
 80002a8:	4152      	adcs	r2, r2
 80002aa:	0b43      	lsrs	r3, r0, #13
 80002ac:	428b      	cmp	r3, r1
 80002ae:	d301      	bcc.n	80002b4 <__divsi3+0x64>
 80002b0:	034b      	lsls	r3, r1, #13
 80002b2:	1ac0      	subs	r0, r0, r3
 80002b4:	4152      	adcs	r2, r2
 80002b6:	0b03      	lsrs	r3, r0, #12
 80002b8:	428b      	cmp	r3, r1
 80002ba:	d301      	bcc.n	80002c0 <__divsi3+0x70>
 80002bc:	030b      	lsls	r3, r1, #12
 80002be:	1ac0      	subs	r0, r0, r3
 80002c0:	4152      	adcs	r2, r2
 80002c2:	0ac3      	lsrs	r3, r0, #11
 80002c4:	428b      	cmp	r3, r1
 80002c6:	d301      	bcc.n	80002cc <__divsi3+0x7c>
 80002c8:	02cb      	lsls	r3, r1, #11
 80002ca:	1ac0      	subs	r0, r0, r3
 80002cc:	4152      	adcs	r2, r2
 80002ce:	0a83      	lsrs	r3, r0, #10
 80002d0:	428b      	cmp	r3, r1
 80002d2:	d301      	bcc.n	80002d8 <__divsi3+0x88>
 80002d4:	028b      	lsls	r3, r1, #10
 80002d6:	1ac0      	subs	r0, r0, r3
 80002d8:	4152      	adcs	r2, r2
 80002da:	0a43      	lsrs	r3, r0, #9
 80002dc:	428b      	cmp	r3, r1
 80002de:	d301      	bcc.n	80002e4 <__divsi3+0x94>
 80002e0:	024b      	lsls	r3, r1, #9
 80002e2:	1ac0      	subs	r0, r0, r3
 80002e4:	4152      	adcs	r2, r2
 80002e6:	0a03      	lsrs	r3, r0, #8
 80002e8:	428b      	cmp	r3, r1
 80002ea:	d301      	bcc.n	80002f0 <__divsi3+0xa0>
 80002ec:	020b      	lsls	r3, r1, #8
 80002ee:	1ac0      	subs	r0, r0, r3
 80002f0:	4152      	adcs	r2, r2
 80002f2:	d2cd      	bcs.n	8000290 <__divsi3+0x40>
 80002f4:	09c3      	lsrs	r3, r0, #7
 80002f6:	428b      	cmp	r3, r1
 80002f8:	d301      	bcc.n	80002fe <__divsi3+0xae>
 80002fa:	01cb      	lsls	r3, r1, #7
 80002fc:	1ac0      	subs	r0, r0, r3
 80002fe:	4152      	adcs	r2, r2
 8000300:	0983      	lsrs	r3, r0, #6
 8000302:	428b      	cmp	r3, r1
 8000304:	d301      	bcc.n	800030a <__divsi3+0xba>
 8000306:	018b      	lsls	r3, r1, #6
 8000308:	1ac0      	subs	r0, r0, r3
 800030a:	4152      	adcs	r2, r2
 800030c:	0943      	lsrs	r3, r0, #5
 800030e:	428b      	cmp	r3, r1
 8000310:	d301      	bcc.n	8000316 <__divsi3+0xc6>
 8000312:	014b      	lsls	r3, r1, #5
 8000314:	1ac0      	subs	r0, r0, r3
 8000316:	4152      	adcs	r2, r2
 8000318:	0903      	lsrs	r3, r0, #4
 800031a:	428b      	cmp	r3, r1
 800031c:	d301      	bcc.n	8000322 <__divsi3+0xd2>
 800031e:	010b      	lsls	r3, r1, #4
 8000320:	1ac0      	subs	r0, r0, r3
 8000322:	4152      	adcs	r2, r2
 8000324:	08c3      	lsrs	r3, r0, #3
 8000326:	428b      	cmp	r3, r1
 8000328:	d301      	bcc.n	800032e <__divsi3+0xde>
 800032a:	00cb      	lsls	r3, r1, #3
 800032c:	1ac0      	subs	r0, r0, r3
 800032e:	4152      	adcs	r2, r2
 8000330:	0883      	lsrs	r3, r0, #2
 8000332:	428b      	cmp	r3, r1
 8000334:	d301      	bcc.n	800033a <__divsi3+0xea>
 8000336:	008b      	lsls	r3, r1, #2
 8000338:	1ac0      	subs	r0, r0, r3
 800033a:	4152      	adcs	r2, r2
 800033c:	0843      	lsrs	r3, r0, #1
 800033e:	428b      	cmp	r3, r1
 8000340:	d301      	bcc.n	8000346 <__divsi3+0xf6>
 8000342:	004b      	lsls	r3, r1, #1
 8000344:	1ac0      	subs	r0, r0, r3
 8000346:	4152      	adcs	r2, r2
 8000348:	1a41      	subs	r1, r0, r1
 800034a:	d200      	bcs.n	800034e <__divsi3+0xfe>
 800034c:	4601      	mov	r1, r0
 800034e:	4152      	adcs	r2, r2
 8000350:	4610      	mov	r0, r2
 8000352:	4770      	bx	lr
 8000354:	e05d      	b.n	8000412 <__divsi3+0x1c2>
 8000356:	0fca      	lsrs	r2, r1, #31
 8000358:	d000      	beq.n	800035c <__divsi3+0x10c>
 800035a:	4249      	negs	r1, r1
 800035c:	1003      	asrs	r3, r0, #32
 800035e:	d300      	bcc.n	8000362 <__divsi3+0x112>
 8000360:	4240      	negs	r0, r0
 8000362:	4053      	eors	r3, r2
 8000364:	2200      	movs	r2, #0
 8000366:	469c      	mov	ip, r3
 8000368:	0903      	lsrs	r3, r0, #4
 800036a:	428b      	cmp	r3, r1
 800036c:	d32d      	bcc.n	80003ca <__divsi3+0x17a>
 800036e:	0a03      	lsrs	r3, r0, #8
 8000370:	428b      	cmp	r3, r1
 8000372:	d312      	bcc.n	800039a <__divsi3+0x14a>
 8000374:	22fc      	movs	r2, #252	; 0xfc
 8000376:	0189      	lsls	r1, r1, #6
 8000378:	ba12      	rev	r2, r2
 800037a:	0a03      	lsrs	r3, r0, #8
 800037c:	428b      	cmp	r3, r1
 800037e:	d30c      	bcc.n	800039a <__divsi3+0x14a>
 8000380:	0189      	lsls	r1, r1, #6
 8000382:	1192      	asrs	r2, r2, #6
 8000384:	428b      	cmp	r3, r1
 8000386:	d308      	bcc.n	800039a <__divsi3+0x14a>
 8000388:	0189      	lsls	r1, r1, #6
 800038a:	1192      	asrs	r2, r2, #6
 800038c:	428b      	cmp	r3, r1
 800038e:	d304      	bcc.n	800039a <__divsi3+0x14a>
 8000390:	0189      	lsls	r1, r1, #6
 8000392:	d03a      	beq.n	800040a <__divsi3+0x1ba>
 8000394:	1192      	asrs	r2, r2, #6
 8000396:	e000      	b.n	800039a <__divsi3+0x14a>
 8000398:	0989      	lsrs	r1, r1, #6
 800039a:	09c3      	lsrs	r3, r0, #7
 800039c:	428b      	cmp	r3, r1
 800039e:	d301      	bcc.n	80003a4 <__divsi3+0x154>
 80003a0:	01cb      	lsls	r3, r1, #7
 80003a2:	1ac0      	subs	r0, r0, r3
 80003a4:	4152      	adcs	r2, r2
 80003a6:	0983      	lsrs	r3, r0, #6
 80003a8:	428b      	cmp	r3, r1
 80003aa:	d301      	bcc.n	80003b0 <__divsi3+0x160>
 80003ac:	018b      	lsls	r3, r1, #6
 80003ae:	1ac0      	subs	r0, r0, r3
 80003b0:	4152      	adcs	r2, r2
 80003b2:	0943      	lsrs	r3, r0, #5
 80003b4:	428b      	cmp	r3, r1
 80003b6:	d301      	bcc.n	80003bc <__divsi3+0x16c>
 80003b8:	014b      	lsls	r3, r1, #5
 80003ba:	1ac0      	subs	r0, r0, r3
 80003bc:	4152      	adcs	r2, r2
 80003be:	0903      	lsrs	r3, r0, #4
 80003c0:	428b      	cmp	r3, r1
 80003c2:	d301      	bcc.n	80003c8 <__divsi3+0x178>
 80003c4:	010b      	lsls	r3, r1, #4
 80003c6:	1ac0      	subs	r0, r0, r3
 80003c8:	4152      	adcs	r2, r2
 80003ca:	08c3      	lsrs	r3, r0, #3
 80003cc:	428b      	cmp	r3, r1
 80003ce:	d301      	bcc.n	80003d4 <__divsi3+0x184>
 80003d0:	00cb      	lsls	r3, r1, #3
 80003d2:	1ac0      	subs	r0, r0, r3
 80003d4:	4152      	adcs	r2, r2
 80003d6:	0883      	lsrs	r3, r0, #2
 80003d8:	428b      	cmp	r3, r1
 80003da:	d301      	bcc.n	80003e0 <__divsi3+0x190>
 80003dc:	008b      	lsls	r3, r1, #2
 80003de:	1ac0      	subs	r0, r0, r3
 80003e0:	4152      	adcs	r2, r2
 80003e2:	d2d9      	bcs.n	8000398 <__divsi3+0x148>
 80003e4:	0843      	lsrs	r3, r0, #1
 80003e6:	428b      	cmp	r3, r1
 80003e8:	d301      	bcc.n	80003ee <__divsi3+0x19e>
 80003ea:	004b      	lsls	r3, r1, #1
 80003ec:	1ac0      	subs	r0, r0, r3
 80003ee:	4152      	adcs	r2, r2
 80003f0:	1a41      	subs	r1, r0, r1
 80003f2:	d200      	bcs.n	80003f6 <__divsi3+0x1a6>
 80003f4:	4601      	mov	r1, r0
 80003f6:	4663      	mov	r3, ip
 80003f8:	4152      	adcs	r2, r2
 80003fa:	105b      	asrs	r3, r3, #1
 80003fc:	4610      	mov	r0, r2
 80003fe:	d301      	bcc.n	8000404 <__divsi3+0x1b4>
 8000400:	4240      	negs	r0, r0
 8000402:	2b00      	cmp	r3, #0
 8000404:	d500      	bpl.n	8000408 <__divsi3+0x1b8>
 8000406:	4249      	negs	r1, r1
 8000408:	4770      	bx	lr
 800040a:	4663      	mov	r3, ip
 800040c:	105b      	asrs	r3, r3, #1
 800040e:	d300      	bcc.n	8000412 <__divsi3+0x1c2>
 8000410:	4240      	negs	r0, r0
 8000412:	b501      	push	{r0, lr}
 8000414:	2000      	movs	r0, #0
 8000416:	f000 f805 	bl	8000424 <__aeabi_idiv0>
 800041a:	bd02      	pop	{r1, pc}

0800041c <__aeabi_idivmod>:
 800041c:	2900      	cmp	r1, #0
 800041e:	d0f8      	beq.n	8000412 <__divsi3+0x1c2>
 8000420:	e716      	b.n	8000250 <__divsi3>
 8000422:	4770      	bx	lr

08000424 <__aeabi_idiv0>:
 8000424:	4770      	bx	lr
 8000426:	46c0      	nop			; (mov r8, r8)

08000428 <__aeabi_cdrcmple>:
 8000428:	4684      	mov	ip, r0
 800042a:	0010      	movs	r0, r2
 800042c:	4662      	mov	r2, ip
 800042e:	468c      	mov	ip, r1
 8000430:	0019      	movs	r1, r3
 8000432:	4663      	mov	r3, ip
 8000434:	e000      	b.n	8000438 <__aeabi_cdcmpeq>
 8000436:	46c0      	nop			; (mov r8, r8)

08000438 <__aeabi_cdcmpeq>:
 8000438:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800043a:	f001 f815 	bl	8001468 <__ledf2>
 800043e:	2800      	cmp	r0, #0
 8000440:	d401      	bmi.n	8000446 <__aeabi_cdcmpeq+0xe>
 8000442:	2100      	movs	r1, #0
 8000444:	42c8      	cmn	r0, r1
 8000446:	bd1f      	pop	{r0, r1, r2, r3, r4, pc}

08000448 <__aeabi_dcmpeq>:
 8000448:	b510      	push	{r4, lr}
 800044a:	f000 ff65 	bl	8001318 <__eqdf2>
 800044e:	4240      	negs	r0, r0
 8000450:	3001      	adds	r0, #1
 8000452:	bd10      	pop	{r4, pc}

08000454 <__aeabi_dcmplt>:
 8000454:	b510      	push	{r4, lr}
 8000456:	f001 f807 	bl	8001468 <__ledf2>
 800045a:	2800      	cmp	r0, #0
 800045c:	db01      	blt.n	8000462 <__aeabi_dcmplt+0xe>
 800045e:	2000      	movs	r0, #0
 8000460:	bd10      	pop	{r4, pc}
 8000462:	2001      	movs	r0, #1
 8000464:	bd10      	pop	{r4, pc}
 8000466:	46c0      	nop			; (mov r8, r8)

08000468 <__aeabi_dcmple>:
 8000468:	b510      	push	{r4, lr}
 800046a:	f000 fffd 	bl	8001468 <__ledf2>
 800046e:	2800      	cmp	r0, #0
 8000470:	dd01      	ble.n	8000476 <__aeabi_dcmple+0xe>
 8000472:	2000      	movs	r0, #0
 8000474:	bd10      	pop	{r4, pc}
 8000476:	2001      	movs	r0, #1
 8000478:	bd10      	pop	{r4, pc}
 800047a:	46c0      	nop			; (mov r8, r8)

0800047c <__aeabi_dcmpgt>:
 800047c:	b510      	push	{r4, lr}
 800047e:	f000 ff8d 	bl	800139c <__gedf2>
 8000482:	2800      	cmp	r0, #0
 8000484:	dc01      	bgt.n	800048a <__aeabi_dcmpgt+0xe>
 8000486:	2000      	movs	r0, #0
 8000488:	bd10      	pop	{r4, pc}
 800048a:	2001      	movs	r0, #1
 800048c:	bd10      	pop	{r4, pc}
 800048e:	46c0      	nop			; (mov r8, r8)

08000490 <__aeabi_dcmpge>:
 8000490:	b510      	push	{r4, lr}
 8000492:	f000 ff83 	bl	800139c <__gedf2>
 8000496:	2800      	cmp	r0, #0
 8000498:	da01      	bge.n	800049e <__aeabi_dcmpge+0xe>
 800049a:	2000      	movs	r0, #0
 800049c:	bd10      	pop	{r4, pc}
 800049e:	2001      	movs	r0, #1
 80004a0:	bd10      	pop	{r4, pc}
 80004a2:	46c0      	nop			; (mov r8, r8)

080004a4 <__aeabi_uldivmod>:
 80004a4:	2b00      	cmp	r3, #0
 80004a6:	d111      	bne.n	80004cc <__aeabi_uldivmod+0x28>
 80004a8:	2a00      	cmp	r2, #0
 80004aa:	d10f      	bne.n	80004cc <__aeabi_uldivmod+0x28>
 80004ac:	2900      	cmp	r1, #0
 80004ae:	d100      	bne.n	80004b2 <__aeabi_uldivmod+0xe>
 80004b0:	2800      	cmp	r0, #0
 80004b2:	d002      	beq.n	80004ba <__aeabi_uldivmod+0x16>
 80004b4:	2100      	movs	r1, #0
 80004b6:	43c9      	mvns	r1, r1
 80004b8:	0008      	movs	r0, r1
 80004ba:	b407      	push	{r0, r1, r2}
 80004bc:	4802      	ldr	r0, [pc, #8]	; (80004c8 <__aeabi_uldivmod+0x24>)
 80004be:	a102      	add	r1, pc, #8	; (adr r1, 80004c8 <__aeabi_uldivmod+0x24>)
 80004c0:	1840      	adds	r0, r0, r1
 80004c2:	9002      	str	r0, [sp, #8]
 80004c4:	bd03      	pop	{r0, r1, pc}
 80004c6:	46c0      	nop			; (mov r8, r8)
 80004c8:	ffffff5d 	.word	0xffffff5d
 80004cc:	b403      	push	{r0, r1}
 80004ce:	4668      	mov	r0, sp
 80004d0:	b501      	push	{r0, lr}
 80004d2:	9802      	ldr	r0, [sp, #8]
 80004d4:	f000 f806 	bl	80004e4 <__udivmoddi4>
 80004d8:	9b01      	ldr	r3, [sp, #4]
 80004da:	469e      	mov	lr, r3
 80004dc:	b002      	add	sp, #8
 80004de:	bc0c      	pop	{r2, r3}
 80004e0:	4770      	bx	lr
 80004e2:	46c0      	nop			; (mov r8, r8)

080004e4 <__udivmoddi4>:
 80004e4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80004e6:	4657      	mov	r7, sl
 80004e8:	464e      	mov	r6, r9
 80004ea:	4645      	mov	r5, r8
 80004ec:	46de      	mov	lr, fp
 80004ee:	b5e0      	push	{r5, r6, r7, lr}
 80004f0:	0004      	movs	r4, r0
 80004f2:	000d      	movs	r5, r1
 80004f4:	4692      	mov	sl, r2
 80004f6:	4699      	mov	r9, r3
 80004f8:	b083      	sub	sp, #12
 80004fa:	428b      	cmp	r3, r1
 80004fc:	d830      	bhi.n	8000560 <__udivmoddi4+0x7c>
 80004fe:	d02d      	beq.n	800055c <__udivmoddi4+0x78>
 8000500:	4649      	mov	r1, r9
 8000502:	4650      	mov	r0, sl
 8000504:	f001 ff20 	bl	8002348 <__clzdi2>
 8000508:	0029      	movs	r1, r5
 800050a:	0006      	movs	r6, r0
 800050c:	0020      	movs	r0, r4
 800050e:	f001 ff1b 	bl	8002348 <__clzdi2>
 8000512:	1a33      	subs	r3, r6, r0
 8000514:	4698      	mov	r8, r3
 8000516:	3b20      	subs	r3, #32
 8000518:	d434      	bmi.n	8000584 <__udivmoddi4+0xa0>
 800051a:	469b      	mov	fp, r3
 800051c:	4653      	mov	r3, sl
 800051e:	465a      	mov	r2, fp
 8000520:	4093      	lsls	r3, r2
 8000522:	4642      	mov	r2, r8
 8000524:	001f      	movs	r7, r3
 8000526:	4653      	mov	r3, sl
 8000528:	4093      	lsls	r3, r2
 800052a:	001e      	movs	r6, r3
 800052c:	42af      	cmp	r7, r5
 800052e:	d83b      	bhi.n	80005a8 <__udivmoddi4+0xc4>
 8000530:	42af      	cmp	r7, r5
 8000532:	d100      	bne.n	8000536 <__udivmoddi4+0x52>
 8000534:	e079      	b.n	800062a <__udivmoddi4+0x146>
 8000536:	465b      	mov	r3, fp
 8000538:	1ba4      	subs	r4, r4, r6
 800053a:	41bd      	sbcs	r5, r7
 800053c:	2b00      	cmp	r3, #0
 800053e:	da00      	bge.n	8000542 <__udivmoddi4+0x5e>
 8000540:	e076      	b.n	8000630 <__udivmoddi4+0x14c>
 8000542:	2200      	movs	r2, #0
 8000544:	2300      	movs	r3, #0
 8000546:	9200      	str	r2, [sp, #0]
 8000548:	9301      	str	r3, [sp, #4]
 800054a:	2301      	movs	r3, #1
 800054c:	465a      	mov	r2, fp
 800054e:	4093      	lsls	r3, r2
 8000550:	9301      	str	r3, [sp, #4]
 8000552:	2301      	movs	r3, #1
 8000554:	4642      	mov	r2, r8
 8000556:	4093      	lsls	r3, r2
 8000558:	9300      	str	r3, [sp, #0]
 800055a:	e029      	b.n	80005b0 <__udivmoddi4+0xcc>
 800055c:	4282      	cmp	r2, r0
 800055e:	d9cf      	bls.n	8000500 <__udivmoddi4+0x1c>
 8000560:	2200      	movs	r2, #0
 8000562:	2300      	movs	r3, #0
 8000564:	9200      	str	r2, [sp, #0]
 8000566:	9301      	str	r3, [sp, #4]
 8000568:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800056a:	2b00      	cmp	r3, #0
 800056c:	d001      	beq.n	8000572 <__udivmoddi4+0x8e>
 800056e:	601c      	str	r4, [r3, #0]
 8000570:	605d      	str	r5, [r3, #4]
 8000572:	9800      	ldr	r0, [sp, #0]
 8000574:	9901      	ldr	r1, [sp, #4]
 8000576:	b003      	add	sp, #12
 8000578:	bcf0      	pop	{r4, r5, r6, r7}
 800057a:	46bb      	mov	fp, r7
 800057c:	46b2      	mov	sl, r6
 800057e:	46a9      	mov	r9, r5
 8000580:	46a0      	mov	r8, r4
 8000582:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000584:	4642      	mov	r2, r8
 8000586:	469b      	mov	fp, r3
 8000588:	2320      	movs	r3, #32
 800058a:	1a9b      	subs	r3, r3, r2
 800058c:	4652      	mov	r2, sl
 800058e:	40da      	lsrs	r2, r3
 8000590:	4641      	mov	r1, r8
 8000592:	0013      	movs	r3, r2
 8000594:	464a      	mov	r2, r9
 8000596:	408a      	lsls	r2, r1
 8000598:	0017      	movs	r7, r2
 800059a:	4642      	mov	r2, r8
 800059c:	431f      	orrs	r7, r3
 800059e:	4653      	mov	r3, sl
 80005a0:	4093      	lsls	r3, r2
 80005a2:	001e      	movs	r6, r3
 80005a4:	42af      	cmp	r7, r5
 80005a6:	d9c3      	bls.n	8000530 <__udivmoddi4+0x4c>
 80005a8:	2200      	movs	r2, #0
 80005aa:	2300      	movs	r3, #0
 80005ac:	9200      	str	r2, [sp, #0]
 80005ae:	9301      	str	r3, [sp, #4]
 80005b0:	4643      	mov	r3, r8
 80005b2:	2b00      	cmp	r3, #0
 80005b4:	d0d8      	beq.n	8000568 <__udivmoddi4+0x84>
 80005b6:	07fb      	lsls	r3, r7, #31
 80005b8:	0872      	lsrs	r2, r6, #1
 80005ba:	431a      	orrs	r2, r3
 80005bc:	4646      	mov	r6, r8
 80005be:	087b      	lsrs	r3, r7, #1
 80005c0:	e00e      	b.n	80005e0 <__udivmoddi4+0xfc>
 80005c2:	42ab      	cmp	r3, r5
 80005c4:	d101      	bne.n	80005ca <__udivmoddi4+0xe6>
 80005c6:	42a2      	cmp	r2, r4
 80005c8:	d80c      	bhi.n	80005e4 <__udivmoddi4+0x100>
 80005ca:	1aa4      	subs	r4, r4, r2
 80005cc:	419d      	sbcs	r5, r3
 80005ce:	2001      	movs	r0, #1
 80005d0:	1924      	adds	r4, r4, r4
 80005d2:	416d      	adcs	r5, r5
 80005d4:	2100      	movs	r1, #0
 80005d6:	3e01      	subs	r6, #1
 80005d8:	1824      	adds	r4, r4, r0
 80005da:	414d      	adcs	r5, r1
 80005dc:	2e00      	cmp	r6, #0
 80005de:	d006      	beq.n	80005ee <__udivmoddi4+0x10a>
 80005e0:	42ab      	cmp	r3, r5
 80005e2:	d9ee      	bls.n	80005c2 <__udivmoddi4+0xde>
 80005e4:	3e01      	subs	r6, #1
 80005e6:	1924      	adds	r4, r4, r4
 80005e8:	416d      	adcs	r5, r5
 80005ea:	2e00      	cmp	r6, #0
 80005ec:	d1f8      	bne.n	80005e0 <__udivmoddi4+0xfc>
 80005ee:	9800      	ldr	r0, [sp, #0]
 80005f0:	9901      	ldr	r1, [sp, #4]
 80005f2:	465b      	mov	r3, fp
 80005f4:	1900      	adds	r0, r0, r4
 80005f6:	4169      	adcs	r1, r5
 80005f8:	2b00      	cmp	r3, #0
 80005fa:	db24      	blt.n	8000646 <__udivmoddi4+0x162>
 80005fc:	002b      	movs	r3, r5
 80005fe:	465a      	mov	r2, fp
 8000600:	4644      	mov	r4, r8
 8000602:	40d3      	lsrs	r3, r2
 8000604:	002a      	movs	r2, r5
 8000606:	40e2      	lsrs	r2, r4
 8000608:	001c      	movs	r4, r3
 800060a:	465b      	mov	r3, fp
 800060c:	0015      	movs	r5, r2
 800060e:	2b00      	cmp	r3, #0
 8000610:	db2a      	blt.n	8000668 <__udivmoddi4+0x184>
 8000612:	0026      	movs	r6, r4
 8000614:	409e      	lsls	r6, r3
 8000616:	0033      	movs	r3, r6
 8000618:	0026      	movs	r6, r4
 800061a:	4647      	mov	r7, r8
 800061c:	40be      	lsls	r6, r7
 800061e:	0032      	movs	r2, r6
 8000620:	1a80      	subs	r0, r0, r2
 8000622:	4199      	sbcs	r1, r3
 8000624:	9000      	str	r0, [sp, #0]
 8000626:	9101      	str	r1, [sp, #4]
 8000628:	e79e      	b.n	8000568 <__udivmoddi4+0x84>
 800062a:	42a3      	cmp	r3, r4
 800062c:	d8bc      	bhi.n	80005a8 <__udivmoddi4+0xc4>
 800062e:	e782      	b.n	8000536 <__udivmoddi4+0x52>
 8000630:	4642      	mov	r2, r8
 8000632:	2320      	movs	r3, #32
 8000634:	2100      	movs	r1, #0
 8000636:	1a9b      	subs	r3, r3, r2
 8000638:	2200      	movs	r2, #0
 800063a:	9100      	str	r1, [sp, #0]
 800063c:	9201      	str	r2, [sp, #4]
 800063e:	2201      	movs	r2, #1
 8000640:	40da      	lsrs	r2, r3
 8000642:	9201      	str	r2, [sp, #4]
 8000644:	e785      	b.n	8000552 <__udivmoddi4+0x6e>
 8000646:	4642      	mov	r2, r8
 8000648:	2320      	movs	r3, #32
 800064a:	1a9b      	subs	r3, r3, r2
 800064c:	002a      	movs	r2, r5
 800064e:	4646      	mov	r6, r8
 8000650:	409a      	lsls	r2, r3
 8000652:	0023      	movs	r3, r4
 8000654:	40f3      	lsrs	r3, r6
 8000656:	4644      	mov	r4, r8
 8000658:	4313      	orrs	r3, r2
 800065a:	002a      	movs	r2, r5
 800065c:	40e2      	lsrs	r2, r4
 800065e:	001c      	movs	r4, r3
 8000660:	465b      	mov	r3, fp
 8000662:	0015      	movs	r5, r2
 8000664:	2b00      	cmp	r3, #0
 8000666:	dad4      	bge.n	8000612 <__udivmoddi4+0x12e>
 8000668:	4642      	mov	r2, r8
 800066a:	002f      	movs	r7, r5
 800066c:	2320      	movs	r3, #32
 800066e:	0026      	movs	r6, r4
 8000670:	4097      	lsls	r7, r2
 8000672:	1a9b      	subs	r3, r3, r2
 8000674:	40de      	lsrs	r6, r3
 8000676:	003b      	movs	r3, r7
 8000678:	4333      	orrs	r3, r6
 800067a:	e7cd      	b.n	8000618 <__udivmoddi4+0x134>

0800067c <__aeabi_dadd>:
 800067c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800067e:	464f      	mov	r7, r9
 8000680:	4646      	mov	r6, r8
 8000682:	46d6      	mov	lr, sl
 8000684:	0004      	movs	r4, r0
 8000686:	b5c0      	push	{r6, r7, lr}
 8000688:	001f      	movs	r7, r3
 800068a:	030b      	lsls	r3, r1, #12
 800068c:	0010      	movs	r0, r2
 800068e:	004e      	lsls	r6, r1, #1
 8000690:	0a5b      	lsrs	r3, r3, #9
 8000692:	0fcd      	lsrs	r5, r1, #31
 8000694:	0f61      	lsrs	r1, r4, #29
 8000696:	007a      	lsls	r2, r7, #1
 8000698:	4319      	orrs	r1, r3
 800069a:	00e3      	lsls	r3, r4, #3
 800069c:	033c      	lsls	r4, r7, #12
 800069e:	0fff      	lsrs	r7, r7, #31
 80006a0:	46bc      	mov	ip, r7
 80006a2:	0a64      	lsrs	r4, r4, #9
 80006a4:	0f47      	lsrs	r7, r0, #29
 80006a6:	4327      	orrs	r7, r4
 80006a8:	0d76      	lsrs	r6, r6, #21
 80006aa:	0d52      	lsrs	r2, r2, #21
 80006ac:	00c0      	lsls	r0, r0, #3
 80006ae:	46b9      	mov	r9, r7
 80006b0:	4680      	mov	r8, r0
 80006b2:	1ab7      	subs	r7, r6, r2
 80006b4:	4565      	cmp	r5, ip
 80006b6:	d100      	bne.n	80006ba <__aeabi_dadd+0x3e>
 80006b8:	e09b      	b.n	80007f2 <__aeabi_dadd+0x176>
 80006ba:	2f00      	cmp	r7, #0
 80006bc:	dc00      	bgt.n	80006c0 <__aeabi_dadd+0x44>
 80006be:	e084      	b.n	80007ca <__aeabi_dadd+0x14e>
 80006c0:	2a00      	cmp	r2, #0
 80006c2:	d100      	bne.n	80006c6 <__aeabi_dadd+0x4a>
 80006c4:	e0be      	b.n	8000844 <__aeabi_dadd+0x1c8>
 80006c6:	4ac8      	ldr	r2, [pc, #800]	; (80009e8 <__aeabi_dadd+0x36c>)
 80006c8:	4296      	cmp	r6, r2
 80006ca:	d100      	bne.n	80006ce <__aeabi_dadd+0x52>
 80006cc:	e124      	b.n	8000918 <__aeabi_dadd+0x29c>
 80006ce:	2280      	movs	r2, #128	; 0x80
 80006d0:	464c      	mov	r4, r9
 80006d2:	0412      	lsls	r2, r2, #16
 80006d4:	4314      	orrs	r4, r2
 80006d6:	46a1      	mov	r9, r4
 80006d8:	2f38      	cmp	r7, #56	; 0x38
 80006da:	dd00      	ble.n	80006de <__aeabi_dadd+0x62>
 80006dc:	e167      	b.n	80009ae <__aeabi_dadd+0x332>
 80006de:	2f1f      	cmp	r7, #31
 80006e0:	dd00      	ble.n	80006e4 <__aeabi_dadd+0x68>
 80006e2:	e1d6      	b.n	8000a92 <__aeabi_dadd+0x416>
 80006e4:	2220      	movs	r2, #32
 80006e6:	464c      	mov	r4, r9
 80006e8:	1bd2      	subs	r2, r2, r7
 80006ea:	4094      	lsls	r4, r2
 80006ec:	46a2      	mov	sl, r4
 80006ee:	4644      	mov	r4, r8
 80006f0:	40fc      	lsrs	r4, r7
 80006f2:	0020      	movs	r0, r4
 80006f4:	4654      	mov	r4, sl
 80006f6:	4304      	orrs	r4, r0
 80006f8:	4640      	mov	r0, r8
 80006fa:	4090      	lsls	r0, r2
 80006fc:	1e42      	subs	r2, r0, #1
 80006fe:	4190      	sbcs	r0, r2
 8000700:	464a      	mov	r2, r9
 8000702:	40fa      	lsrs	r2, r7
 8000704:	4304      	orrs	r4, r0
 8000706:	1a89      	subs	r1, r1, r2
 8000708:	1b1c      	subs	r4, r3, r4
 800070a:	42a3      	cmp	r3, r4
 800070c:	4192      	sbcs	r2, r2
 800070e:	4252      	negs	r2, r2
 8000710:	1a8b      	subs	r3, r1, r2
 8000712:	469a      	mov	sl, r3
 8000714:	4653      	mov	r3, sl
 8000716:	021b      	lsls	r3, r3, #8
 8000718:	d400      	bmi.n	800071c <__aeabi_dadd+0xa0>
 800071a:	e0d4      	b.n	80008c6 <__aeabi_dadd+0x24a>
 800071c:	4653      	mov	r3, sl
 800071e:	025a      	lsls	r2, r3, #9
 8000720:	0a53      	lsrs	r3, r2, #9
 8000722:	469a      	mov	sl, r3
 8000724:	4653      	mov	r3, sl
 8000726:	2b00      	cmp	r3, #0
 8000728:	d100      	bne.n	800072c <__aeabi_dadd+0xb0>
 800072a:	e104      	b.n	8000936 <__aeabi_dadd+0x2ba>
 800072c:	4650      	mov	r0, sl
 800072e:	f001 fded 	bl	800230c <__clzsi2>
 8000732:	0003      	movs	r3, r0
 8000734:	3b08      	subs	r3, #8
 8000736:	2220      	movs	r2, #32
 8000738:	0020      	movs	r0, r4
 800073a:	1ad2      	subs	r2, r2, r3
 800073c:	4651      	mov	r1, sl
 800073e:	40d0      	lsrs	r0, r2
 8000740:	4099      	lsls	r1, r3
 8000742:	0002      	movs	r2, r0
 8000744:	409c      	lsls	r4, r3
 8000746:	430a      	orrs	r2, r1
 8000748:	42b3      	cmp	r3, r6
 800074a:	da00      	bge.n	800074e <__aeabi_dadd+0xd2>
 800074c:	e102      	b.n	8000954 <__aeabi_dadd+0x2d8>
 800074e:	1b9b      	subs	r3, r3, r6
 8000750:	1c59      	adds	r1, r3, #1
 8000752:	291f      	cmp	r1, #31
 8000754:	dd00      	ble.n	8000758 <__aeabi_dadd+0xdc>
 8000756:	e0a7      	b.n	80008a8 <__aeabi_dadd+0x22c>
 8000758:	2320      	movs	r3, #32
 800075a:	0010      	movs	r0, r2
 800075c:	0026      	movs	r6, r4
 800075e:	1a5b      	subs	r3, r3, r1
 8000760:	409c      	lsls	r4, r3
 8000762:	4098      	lsls	r0, r3
 8000764:	40ce      	lsrs	r6, r1
 8000766:	40ca      	lsrs	r2, r1
 8000768:	1e63      	subs	r3, r4, #1
 800076a:	419c      	sbcs	r4, r3
 800076c:	4330      	orrs	r0, r6
 800076e:	4692      	mov	sl, r2
 8000770:	2600      	movs	r6, #0
 8000772:	4304      	orrs	r4, r0
 8000774:	0763      	lsls	r3, r4, #29
 8000776:	d009      	beq.n	800078c <__aeabi_dadd+0x110>
 8000778:	230f      	movs	r3, #15
 800077a:	4023      	ands	r3, r4
 800077c:	2b04      	cmp	r3, #4
 800077e:	d005      	beq.n	800078c <__aeabi_dadd+0x110>
 8000780:	1d23      	adds	r3, r4, #4
 8000782:	42a3      	cmp	r3, r4
 8000784:	41a4      	sbcs	r4, r4
 8000786:	4264      	negs	r4, r4
 8000788:	44a2      	add	sl, r4
 800078a:	001c      	movs	r4, r3
 800078c:	4653      	mov	r3, sl
 800078e:	021b      	lsls	r3, r3, #8
 8000790:	d400      	bmi.n	8000794 <__aeabi_dadd+0x118>
 8000792:	e09b      	b.n	80008cc <__aeabi_dadd+0x250>
 8000794:	4b94      	ldr	r3, [pc, #592]	; (80009e8 <__aeabi_dadd+0x36c>)
 8000796:	3601      	adds	r6, #1
 8000798:	429e      	cmp	r6, r3
 800079a:	d100      	bne.n	800079e <__aeabi_dadd+0x122>
 800079c:	e0b8      	b.n	8000910 <__aeabi_dadd+0x294>
 800079e:	4653      	mov	r3, sl
 80007a0:	4992      	ldr	r1, [pc, #584]	; (80009ec <__aeabi_dadd+0x370>)
 80007a2:	08e4      	lsrs	r4, r4, #3
 80007a4:	400b      	ands	r3, r1
 80007a6:	0019      	movs	r1, r3
 80007a8:	075b      	lsls	r3, r3, #29
 80007aa:	4323      	orrs	r3, r4
 80007ac:	0572      	lsls	r2, r6, #21
 80007ae:	024c      	lsls	r4, r1, #9
 80007b0:	0b24      	lsrs	r4, r4, #12
 80007b2:	0d52      	lsrs	r2, r2, #21
 80007b4:	0512      	lsls	r2, r2, #20
 80007b6:	07ed      	lsls	r5, r5, #31
 80007b8:	4322      	orrs	r2, r4
 80007ba:	432a      	orrs	r2, r5
 80007bc:	0018      	movs	r0, r3
 80007be:	0011      	movs	r1, r2
 80007c0:	bce0      	pop	{r5, r6, r7}
 80007c2:	46ba      	mov	sl, r7
 80007c4:	46b1      	mov	r9, r6
 80007c6:	46a8      	mov	r8, r5
 80007c8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80007ca:	2f00      	cmp	r7, #0
 80007cc:	d048      	beq.n	8000860 <__aeabi_dadd+0x1e4>
 80007ce:	1b97      	subs	r7, r2, r6
 80007d0:	2e00      	cmp	r6, #0
 80007d2:	d000      	beq.n	80007d6 <__aeabi_dadd+0x15a>
 80007d4:	e10e      	b.n	80009f4 <__aeabi_dadd+0x378>
 80007d6:	000c      	movs	r4, r1
 80007d8:	431c      	orrs	r4, r3
 80007da:	d100      	bne.n	80007de <__aeabi_dadd+0x162>
 80007dc:	e1b7      	b.n	8000b4e <__aeabi_dadd+0x4d2>
 80007de:	1e7c      	subs	r4, r7, #1
 80007e0:	2f01      	cmp	r7, #1
 80007e2:	d100      	bne.n	80007e6 <__aeabi_dadd+0x16a>
 80007e4:	e226      	b.n	8000c34 <__aeabi_dadd+0x5b8>
 80007e6:	4d80      	ldr	r5, [pc, #512]	; (80009e8 <__aeabi_dadd+0x36c>)
 80007e8:	42af      	cmp	r7, r5
 80007ea:	d100      	bne.n	80007ee <__aeabi_dadd+0x172>
 80007ec:	e1d5      	b.n	8000b9a <__aeabi_dadd+0x51e>
 80007ee:	0027      	movs	r7, r4
 80007f0:	e107      	b.n	8000a02 <__aeabi_dadd+0x386>
 80007f2:	2f00      	cmp	r7, #0
 80007f4:	dc00      	bgt.n	80007f8 <__aeabi_dadd+0x17c>
 80007f6:	e0b2      	b.n	800095e <__aeabi_dadd+0x2e2>
 80007f8:	2a00      	cmp	r2, #0
 80007fa:	d047      	beq.n	800088c <__aeabi_dadd+0x210>
 80007fc:	4a7a      	ldr	r2, [pc, #488]	; (80009e8 <__aeabi_dadd+0x36c>)
 80007fe:	4296      	cmp	r6, r2
 8000800:	d100      	bne.n	8000804 <__aeabi_dadd+0x188>
 8000802:	e089      	b.n	8000918 <__aeabi_dadd+0x29c>
 8000804:	2280      	movs	r2, #128	; 0x80
 8000806:	464c      	mov	r4, r9
 8000808:	0412      	lsls	r2, r2, #16
 800080a:	4314      	orrs	r4, r2
 800080c:	46a1      	mov	r9, r4
 800080e:	2f38      	cmp	r7, #56	; 0x38
 8000810:	dc6b      	bgt.n	80008ea <__aeabi_dadd+0x26e>
 8000812:	2f1f      	cmp	r7, #31
 8000814:	dc00      	bgt.n	8000818 <__aeabi_dadd+0x19c>
 8000816:	e16e      	b.n	8000af6 <__aeabi_dadd+0x47a>
 8000818:	003a      	movs	r2, r7
 800081a:	4648      	mov	r0, r9
 800081c:	3a20      	subs	r2, #32
 800081e:	40d0      	lsrs	r0, r2
 8000820:	4684      	mov	ip, r0
 8000822:	2f20      	cmp	r7, #32
 8000824:	d007      	beq.n	8000836 <__aeabi_dadd+0x1ba>
 8000826:	2240      	movs	r2, #64	; 0x40
 8000828:	4648      	mov	r0, r9
 800082a:	1bd2      	subs	r2, r2, r7
 800082c:	4090      	lsls	r0, r2
 800082e:	0002      	movs	r2, r0
 8000830:	4640      	mov	r0, r8
 8000832:	4310      	orrs	r0, r2
 8000834:	4680      	mov	r8, r0
 8000836:	4640      	mov	r0, r8
 8000838:	1e42      	subs	r2, r0, #1
 800083a:	4190      	sbcs	r0, r2
 800083c:	4662      	mov	r2, ip
 800083e:	0004      	movs	r4, r0
 8000840:	4314      	orrs	r4, r2
 8000842:	e057      	b.n	80008f4 <__aeabi_dadd+0x278>
 8000844:	464a      	mov	r2, r9
 8000846:	4302      	orrs	r2, r0
 8000848:	d100      	bne.n	800084c <__aeabi_dadd+0x1d0>
 800084a:	e103      	b.n	8000a54 <__aeabi_dadd+0x3d8>
 800084c:	1e7a      	subs	r2, r7, #1
 800084e:	2f01      	cmp	r7, #1
 8000850:	d100      	bne.n	8000854 <__aeabi_dadd+0x1d8>
 8000852:	e193      	b.n	8000b7c <__aeabi_dadd+0x500>
 8000854:	4c64      	ldr	r4, [pc, #400]	; (80009e8 <__aeabi_dadd+0x36c>)
 8000856:	42a7      	cmp	r7, r4
 8000858:	d100      	bne.n	800085c <__aeabi_dadd+0x1e0>
 800085a:	e18a      	b.n	8000b72 <__aeabi_dadd+0x4f6>
 800085c:	0017      	movs	r7, r2
 800085e:	e73b      	b.n	80006d8 <__aeabi_dadd+0x5c>
 8000860:	4c63      	ldr	r4, [pc, #396]	; (80009f0 <__aeabi_dadd+0x374>)
 8000862:	1c72      	adds	r2, r6, #1
 8000864:	4222      	tst	r2, r4
 8000866:	d000      	beq.n	800086a <__aeabi_dadd+0x1ee>
 8000868:	e0e0      	b.n	8000a2c <__aeabi_dadd+0x3b0>
 800086a:	000a      	movs	r2, r1
 800086c:	431a      	orrs	r2, r3
 800086e:	2e00      	cmp	r6, #0
 8000870:	d000      	beq.n	8000874 <__aeabi_dadd+0x1f8>
 8000872:	e174      	b.n	8000b5e <__aeabi_dadd+0x4e2>
 8000874:	2a00      	cmp	r2, #0
 8000876:	d100      	bne.n	800087a <__aeabi_dadd+0x1fe>
 8000878:	e1d0      	b.n	8000c1c <__aeabi_dadd+0x5a0>
 800087a:	464a      	mov	r2, r9
 800087c:	4302      	orrs	r2, r0
 800087e:	d000      	beq.n	8000882 <__aeabi_dadd+0x206>
 8000880:	e1e3      	b.n	8000c4a <__aeabi_dadd+0x5ce>
 8000882:	074a      	lsls	r2, r1, #29
 8000884:	08db      	lsrs	r3, r3, #3
 8000886:	4313      	orrs	r3, r2
 8000888:	08c9      	lsrs	r1, r1, #3
 800088a:	e029      	b.n	80008e0 <__aeabi_dadd+0x264>
 800088c:	464a      	mov	r2, r9
 800088e:	4302      	orrs	r2, r0
 8000890:	d100      	bne.n	8000894 <__aeabi_dadd+0x218>
 8000892:	e17d      	b.n	8000b90 <__aeabi_dadd+0x514>
 8000894:	1e7a      	subs	r2, r7, #1
 8000896:	2f01      	cmp	r7, #1
 8000898:	d100      	bne.n	800089c <__aeabi_dadd+0x220>
 800089a:	e0e0      	b.n	8000a5e <__aeabi_dadd+0x3e2>
 800089c:	4c52      	ldr	r4, [pc, #328]	; (80009e8 <__aeabi_dadd+0x36c>)
 800089e:	42a7      	cmp	r7, r4
 80008a0:	d100      	bne.n	80008a4 <__aeabi_dadd+0x228>
 80008a2:	e166      	b.n	8000b72 <__aeabi_dadd+0x4f6>
 80008a4:	0017      	movs	r7, r2
 80008a6:	e7b2      	b.n	800080e <__aeabi_dadd+0x192>
 80008a8:	0010      	movs	r0, r2
 80008aa:	3b1f      	subs	r3, #31
 80008ac:	40d8      	lsrs	r0, r3
 80008ae:	2920      	cmp	r1, #32
 80008b0:	d003      	beq.n	80008ba <__aeabi_dadd+0x23e>
 80008b2:	2340      	movs	r3, #64	; 0x40
 80008b4:	1a5b      	subs	r3, r3, r1
 80008b6:	409a      	lsls	r2, r3
 80008b8:	4314      	orrs	r4, r2
 80008ba:	1e63      	subs	r3, r4, #1
 80008bc:	419c      	sbcs	r4, r3
 80008be:	2300      	movs	r3, #0
 80008c0:	2600      	movs	r6, #0
 80008c2:	469a      	mov	sl, r3
 80008c4:	4304      	orrs	r4, r0
 80008c6:	0763      	lsls	r3, r4, #29
 80008c8:	d000      	beq.n	80008cc <__aeabi_dadd+0x250>
 80008ca:	e755      	b.n	8000778 <__aeabi_dadd+0xfc>
 80008cc:	4652      	mov	r2, sl
 80008ce:	08e3      	lsrs	r3, r4, #3
 80008d0:	0752      	lsls	r2, r2, #29
 80008d2:	4313      	orrs	r3, r2
 80008d4:	4652      	mov	r2, sl
 80008d6:	0037      	movs	r7, r6
 80008d8:	08d1      	lsrs	r1, r2, #3
 80008da:	4a43      	ldr	r2, [pc, #268]	; (80009e8 <__aeabi_dadd+0x36c>)
 80008dc:	4297      	cmp	r7, r2
 80008de:	d01f      	beq.n	8000920 <__aeabi_dadd+0x2a4>
 80008e0:	0309      	lsls	r1, r1, #12
 80008e2:	057a      	lsls	r2, r7, #21
 80008e4:	0b0c      	lsrs	r4, r1, #12
 80008e6:	0d52      	lsrs	r2, r2, #21
 80008e8:	e764      	b.n	80007b4 <__aeabi_dadd+0x138>
 80008ea:	4642      	mov	r2, r8
 80008ec:	464c      	mov	r4, r9
 80008ee:	4314      	orrs	r4, r2
 80008f0:	1e62      	subs	r2, r4, #1
 80008f2:	4194      	sbcs	r4, r2
 80008f4:	18e4      	adds	r4, r4, r3
 80008f6:	429c      	cmp	r4, r3
 80008f8:	4192      	sbcs	r2, r2
 80008fa:	4252      	negs	r2, r2
 80008fc:	4692      	mov	sl, r2
 80008fe:	448a      	add	sl, r1
 8000900:	4653      	mov	r3, sl
 8000902:	021b      	lsls	r3, r3, #8
 8000904:	d5df      	bpl.n	80008c6 <__aeabi_dadd+0x24a>
 8000906:	4b38      	ldr	r3, [pc, #224]	; (80009e8 <__aeabi_dadd+0x36c>)
 8000908:	3601      	adds	r6, #1
 800090a:	429e      	cmp	r6, r3
 800090c:	d000      	beq.n	8000910 <__aeabi_dadd+0x294>
 800090e:	e0b3      	b.n	8000a78 <__aeabi_dadd+0x3fc>
 8000910:	0032      	movs	r2, r6
 8000912:	2400      	movs	r4, #0
 8000914:	2300      	movs	r3, #0
 8000916:	e74d      	b.n	80007b4 <__aeabi_dadd+0x138>
 8000918:	074a      	lsls	r2, r1, #29
 800091a:	08db      	lsrs	r3, r3, #3
 800091c:	4313      	orrs	r3, r2
 800091e:	08c9      	lsrs	r1, r1, #3
 8000920:	001a      	movs	r2, r3
 8000922:	430a      	orrs	r2, r1
 8000924:	d100      	bne.n	8000928 <__aeabi_dadd+0x2ac>
 8000926:	e200      	b.n	8000d2a <__aeabi_dadd+0x6ae>
 8000928:	2480      	movs	r4, #128	; 0x80
 800092a:	0324      	lsls	r4, r4, #12
 800092c:	430c      	orrs	r4, r1
 800092e:	0324      	lsls	r4, r4, #12
 8000930:	4a2d      	ldr	r2, [pc, #180]	; (80009e8 <__aeabi_dadd+0x36c>)
 8000932:	0b24      	lsrs	r4, r4, #12
 8000934:	e73e      	b.n	80007b4 <__aeabi_dadd+0x138>
 8000936:	0020      	movs	r0, r4
 8000938:	f001 fce8 	bl	800230c <__clzsi2>
 800093c:	0003      	movs	r3, r0
 800093e:	3318      	adds	r3, #24
 8000940:	2b1f      	cmp	r3, #31
 8000942:	dc00      	bgt.n	8000946 <__aeabi_dadd+0x2ca>
 8000944:	e6f7      	b.n	8000736 <__aeabi_dadd+0xba>
 8000946:	0022      	movs	r2, r4
 8000948:	3808      	subs	r0, #8
 800094a:	4082      	lsls	r2, r0
 800094c:	2400      	movs	r4, #0
 800094e:	42b3      	cmp	r3, r6
 8000950:	db00      	blt.n	8000954 <__aeabi_dadd+0x2d8>
 8000952:	e6fc      	b.n	800074e <__aeabi_dadd+0xd2>
 8000954:	1af6      	subs	r6, r6, r3
 8000956:	4b25      	ldr	r3, [pc, #148]	; (80009ec <__aeabi_dadd+0x370>)
 8000958:	401a      	ands	r2, r3
 800095a:	4692      	mov	sl, r2
 800095c:	e70a      	b.n	8000774 <__aeabi_dadd+0xf8>
 800095e:	2f00      	cmp	r7, #0
 8000960:	d02b      	beq.n	80009ba <__aeabi_dadd+0x33e>
 8000962:	1b97      	subs	r7, r2, r6
 8000964:	2e00      	cmp	r6, #0
 8000966:	d100      	bne.n	800096a <__aeabi_dadd+0x2ee>
 8000968:	e0b8      	b.n	8000adc <__aeabi_dadd+0x460>
 800096a:	4c1f      	ldr	r4, [pc, #124]	; (80009e8 <__aeabi_dadd+0x36c>)
 800096c:	42a2      	cmp	r2, r4
 800096e:	d100      	bne.n	8000972 <__aeabi_dadd+0x2f6>
 8000970:	e11c      	b.n	8000bac <__aeabi_dadd+0x530>
 8000972:	2480      	movs	r4, #128	; 0x80
 8000974:	0424      	lsls	r4, r4, #16
 8000976:	4321      	orrs	r1, r4
 8000978:	2f38      	cmp	r7, #56	; 0x38
 800097a:	dd00      	ble.n	800097e <__aeabi_dadd+0x302>
 800097c:	e11e      	b.n	8000bbc <__aeabi_dadd+0x540>
 800097e:	2f1f      	cmp	r7, #31
 8000980:	dd00      	ble.n	8000984 <__aeabi_dadd+0x308>
 8000982:	e19e      	b.n	8000cc2 <__aeabi_dadd+0x646>
 8000984:	2620      	movs	r6, #32
 8000986:	000c      	movs	r4, r1
 8000988:	1bf6      	subs	r6, r6, r7
 800098a:	0018      	movs	r0, r3
 800098c:	40b3      	lsls	r3, r6
 800098e:	40b4      	lsls	r4, r6
 8000990:	40f8      	lsrs	r0, r7
 8000992:	1e5e      	subs	r6, r3, #1
 8000994:	41b3      	sbcs	r3, r6
 8000996:	40f9      	lsrs	r1, r7
 8000998:	4304      	orrs	r4, r0
 800099a:	431c      	orrs	r4, r3
 800099c:	4489      	add	r9, r1
 800099e:	4444      	add	r4, r8
 80009a0:	4544      	cmp	r4, r8
 80009a2:	419b      	sbcs	r3, r3
 80009a4:	425b      	negs	r3, r3
 80009a6:	444b      	add	r3, r9
 80009a8:	469a      	mov	sl, r3
 80009aa:	0016      	movs	r6, r2
 80009ac:	e7a8      	b.n	8000900 <__aeabi_dadd+0x284>
 80009ae:	4642      	mov	r2, r8
 80009b0:	464c      	mov	r4, r9
 80009b2:	4314      	orrs	r4, r2
 80009b4:	1e62      	subs	r2, r4, #1
 80009b6:	4194      	sbcs	r4, r2
 80009b8:	e6a6      	b.n	8000708 <__aeabi_dadd+0x8c>
 80009ba:	4c0d      	ldr	r4, [pc, #52]	; (80009f0 <__aeabi_dadd+0x374>)
 80009bc:	1c72      	adds	r2, r6, #1
 80009be:	4222      	tst	r2, r4
 80009c0:	d000      	beq.n	80009c4 <__aeabi_dadd+0x348>
 80009c2:	e0a8      	b.n	8000b16 <__aeabi_dadd+0x49a>
 80009c4:	000a      	movs	r2, r1
 80009c6:	431a      	orrs	r2, r3
 80009c8:	2e00      	cmp	r6, #0
 80009ca:	d000      	beq.n	80009ce <__aeabi_dadd+0x352>
 80009cc:	e10a      	b.n	8000be4 <__aeabi_dadd+0x568>
 80009ce:	2a00      	cmp	r2, #0
 80009d0:	d100      	bne.n	80009d4 <__aeabi_dadd+0x358>
 80009d2:	e15e      	b.n	8000c92 <__aeabi_dadd+0x616>
 80009d4:	464a      	mov	r2, r9
 80009d6:	4302      	orrs	r2, r0
 80009d8:	d000      	beq.n	80009dc <__aeabi_dadd+0x360>
 80009da:	e161      	b.n	8000ca0 <__aeabi_dadd+0x624>
 80009dc:	074a      	lsls	r2, r1, #29
 80009de:	08db      	lsrs	r3, r3, #3
 80009e0:	4313      	orrs	r3, r2
 80009e2:	08c9      	lsrs	r1, r1, #3
 80009e4:	e77c      	b.n	80008e0 <__aeabi_dadd+0x264>
 80009e6:	46c0      	nop			; (mov r8, r8)
 80009e8:	000007ff 	.word	0x000007ff
 80009ec:	ff7fffff 	.word	0xff7fffff
 80009f0:	000007fe 	.word	0x000007fe
 80009f4:	4ccf      	ldr	r4, [pc, #828]	; (8000d34 <__aeabi_dadd+0x6b8>)
 80009f6:	42a2      	cmp	r2, r4
 80009f8:	d100      	bne.n	80009fc <__aeabi_dadd+0x380>
 80009fa:	e0ce      	b.n	8000b9a <__aeabi_dadd+0x51e>
 80009fc:	2480      	movs	r4, #128	; 0x80
 80009fe:	0424      	lsls	r4, r4, #16
 8000a00:	4321      	orrs	r1, r4
 8000a02:	2f38      	cmp	r7, #56	; 0x38
 8000a04:	dc5b      	bgt.n	8000abe <__aeabi_dadd+0x442>
 8000a06:	2f1f      	cmp	r7, #31
 8000a08:	dd00      	ble.n	8000a0c <__aeabi_dadd+0x390>
 8000a0a:	e0dc      	b.n	8000bc6 <__aeabi_dadd+0x54a>
 8000a0c:	2520      	movs	r5, #32
 8000a0e:	000c      	movs	r4, r1
 8000a10:	1bed      	subs	r5, r5, r7
 8000a12:	001e      	movs	r6, r3
 8000a14:	40ab      	lsls	r3, r5
 8000a16:	40ac      	lsls	r4, r5
 8000a18:	40fe      	lsrs	r6, r7
 8000a1a:	1e5d      	subs	r5, r3, #1
 8000a1c:	41ab      	sbcs	r3, r5
 8000a1e:	4334      	orrs	r4, r6
 8000a20:	40f9      	lsrs	r1, r7
 8000a22:	431c      	orrs	r4, r3
 8000a24:	464b      	mov	r3, r9
 8000a26:	1a5b      	subs	r3, r3, r1
 8000a28:	4699      	mov	r9, r3
 8000a2a:	e04c      	b.n	8000ac6 <__aeabi_dadd+0x44a>
 8000a2c:	464a      	mov	r2, r9
 8000a2e:	1a1c      	subs	r4, r3, r0
 8000a30:	1a88      	subs	r0, r1, r2
 8000a32:	42a3      	cmp	r3, r4
 8000a34:	4192      	sbcs	r2, r2
 8000a36:	4252      	negs	r2, r2
 8000a38:	4692      	mov	sl, r2
 8000a3a:	0002      	movs	r2, r0
 8000a3c:	4650      	mov	r0, sl
 8000a3e:	1a12      	subs	r2, r2, r0
 8000a40:	4692      	mov	sl, r2
 8000a42:	0212      	lsls	r2, r2, #8
 8000a44:	d478      	bmi.n	8000b38 <__aeabi_dadd+0x4bc>
 8000a46:	4653      	mov	r3, sl
 8000a48:	4323      	orrs	r3, r4
 8000a4a:	d000      	beq.n	8000a4e <__aeabi_dadd+0x3d2>
 8000a4c:	e66a      	b.n	8000724 <__aeabi_dadd+0xa8>
 8000a4e:	2100      	movs	r1, #0
 8000a50:	2500      	movs	r5, #0
 8000a52:	e745      	b.n	80008e0 <__aeabi_dadd+0x264>
 8000a54:	074a      	lsls	r2, r1, #29
 8000a56:	08db      	lsrs	r3, r3, #3
 8000a58:	4313      	orrs	r3, r2
 8000a5a:	08c9      	lsrs	r1, r1, #3
 8000a5c:	e73d      	b.n	80008da <__aeabi_dadd+0x25e>
 8000a5e:	181c      	adds	r4, r3, r0
 8000a60:	429c      	cmp	r4, r3
 8000a62:	419b      	sbcs	r3, r3
 8000a64:	4449      	add	r1, r9
 8000a66:	468a      	mov	sl, r1
 8000a68:	425b      	negs	r3, r3
 8000a6a:	449a      	add	sl, r3
 8000a6c:	4653      	mov	r3, sl
 8000a6e:	2601      	movs	r6, #1
 8000a70:	021b      	lsls	r3, r3, #8
 8000a72:	d400      	bmi.n	8000a76 <__aeabi_dadd+0x3fa>
 8000a74:	e727      	b.n	80008c6 <__aeabi_dadd+0x24a>
 8000a76:	2602      	movs	r6, #2
 8000a78:	4652      	mov	r2, sl
 8000a7a:	4baf      	ldr	r3, [pc, #700]	; (8000d38 <__aeabi_dadd+0x6bc>)
 8000a7c:	2101      	movs	r1, #1
 8000a7e:	401a      	ands	r2, r3
 8000a80:	0013      	movs	r3, r2
 8000a82:	4021      	ands	r1, r4
 8000a84:	0862      	lsrs	r2, r4, #1
 8000a86:	430a      	orrs	r2, r1
 8000a88:	07dc      	lsls	r4, r3, #31
 8000a8a:	085b      	lsrs	r3, r3, #1
 8000a8c:	469a      	mov	sl, r3
 8000a8e:	4314      	orrs	r4, r2
 8000a90:	e670      	b.n	8000774 <__aeabi_dadd+0xf8>
 8000a92:	003a      	movs	r2, r7
 8000a94:	464c      	mov	r4, r9
 8000a96:	3a20      	subs	r2, #32
 8000a98:	40d4      	lsrs	r4, r2
 8000a9a:	46a4      	mov	ip, r4
 8000a9c:	2f20      	cmp	r7, #32
 8000a9e:	d007      	beq.n	8000ab0 <__aeabi_dadd+0x434>
 8000aa0:	2240      	movs	r2, #64	; 0x40
 8000aa2:	4648      	mov	r0, r9
 8000aa4:	1bd2      	subs	r2, r2, r7
 8000aa6:	4090      	lsls	r0, r2
 8000aa8:	0002      	movs	r2, r0
 8000aaa:	4640      	mov	r0, r8
 8000aac:	4310      	orrs	r0, r2
 8000aae:	4680      	mov	r8, r0
 8000ab0:	4640      	mov	r0, r8
 8000ab2:	1e42      	subs	r2, r0, #1
 8000ab4:	4190      	sbcs	r0, r2
 8000ab6:	4662      	mov	r2, ip
 8000ab8:	0004      	movs	r4, r0
 8000aba:	4314      	orrs	r4, r2
 8000abc:	e624      	b.n	8000708 <__aeabi_dadd+0x8c>
 8000abe:	4319      	orrs	r1, r3
 8000ac0:	000c      	movs	r4, r1
 8000ac2:	1e63      	subs	r3, r4, #1
 8000ac4:	419c      	sbcs	r4, r3
 8000ac6:	4643      	mov	r3, r8
 8000ac8:	1b1c      	subs	r4, r3, r4
 8000aca:	45a0      	cmp	r8, r4
 8000acc:	419b      	sbcs	r3, r3
 8000ace:	4649      	mov	r1, r9
 8000ad0:	425b      	negs	r3, r3
 8000ad2:	1acb      	subs	r3, r1, r3
 8000ad4:	469a      	mov	sl, r3
 8000ad6:	4665      	mov	r5, ip
 8000ad8:	0016      	movs	r6, r2
 8000ada:	e61b      	b.n	8000714 <__aeabi_dadd+0x98>
 8000adc:	000c      	movs	r4, r1
 8000ade:	431c      	orrs	r4, r3
 8000ae0:	d100      	bne.n	8000ae4 <__aeabi_dadd+0x468>
 8000ae2:	e0c7      	b.n	8000c74 <__aeabi_dadd+0x5f8>
 8000ae4:	1e7c      	subs	r4, r7, #1
 8000ae6:	2f01      	cmp	r7, #1
 8000ae8:	d100      	bne.n	8000aec <__aeabi_dadd+0x470>
 8000aea:	e0f9      	b.n	8000ce0 <__aeabi_dadd+0x664>
 8000aec:	4e91      	ldr	r6, [pc, #580]	; (8000d34 <__aeabi_dadd+0x6b8>)
 8000aee:	42b7      	cmp	r7, r6
 8000af0:	d05c      	beq.n	8000bac <__aeabi_dadd+0x530>
 8000af2:	0027      	movs	r7, r4
 8000af4:	e740      	b.n	8000978 <__aeabi_dadd+0x2fc>
 8000af6:	2220      	movs	r2, #32
 8000af8:	464c      	mov	r4, r9
 8000afa:	4640      	mov	r0, r8
 8000afc:	1bd2      	subs	r2, r2, r7
 8000afe:	4094      	lsls	r4, r2
 8000b00:	40f8      	lsrs	r0, r7
 8000b02:	4304      	orrs	r4, r0
 8000b04:	4640      	mov	r0, r8
 8000b06:	4090      	lsls	r0, r2
 8000b08:	1e42      	subs	r2, r0, #1
 8000b0a:	4190      	sbcs	r0, r2
 8000b0c:	464a      	mov	r2, r9
 8000b0e:	40fa      	lsrs	r2, r7
 8000b10:	4304      	orrs	r4, r0
 8000b12:	1889      	adds	r1, r1, r2
 8000b14:	e6ee      	b.n	80008f4 <__aeabi_dadd+0x278>
 8000b16:	4c87      	ldr	r4, [pc, #540]	; (8000d34 <__aeabi_dadd+0x6b8>)
 8000b18:	42a2      	cmp	r2, r4
 8000b1a:	d100      	bne.n	8000b1e <__aeabi_dadd+0x4a2>
 8000b1c:	e6f9      	b.n	8000912 <__aeabi_dadd+0x296>
 8000b1e:	1818      	adds	r0, r3, r0
 8000b20:	4298      	cmp	r0, r3
 8000b22:	419b      	sbcs	r3, r3
 8000b24:	4449      	add	r1, r9
 8000b26:	425b      	negs	r3, r3
 8000b28:	18cb      	adds	r3, r1, r3
 8000b2a:	07dc      	lsls	r4, r3, #31
 8000b2c:	0840      	lsrs	r0, r0, #1
 8000b2e:	085b      	lsrs	r3, r3, #1
 8000b30:	469a      	mov	sl, r3
 8000b32:	0016      	movs	r6, r2
 8000b34:	4304      	orrs	r4, r0
 8000b36:	e6c6      	b.n	80008c6 <__aeabi_dadd+0x24a>
 8000b38:	4642      	mov	r2, r8
 8000b3a:	1ad4      	subs	r4, r2, r3
 8000b3c:	45a0      	cmp	r8, r4
 8000b3e:	4180      	sbcs	r0, r0
 8000b40:	464b      	mov	r3, r9
 8000b42:	4240      	negs	r0, r0
 8000b44:	1a59      	subs	r1, r3, r1
 8000b46:	1a0b      	subs	r3, r1, r0
 8000b48:	469a      	mov	sl, r3
 8000b4a:	4665      	mov	r5, ip
 8000b4c:	e5ea      	b.n	8000724 <__aeabi_dadd+0xa8>
 8000b4e:	464b      	mov	r3, r9
 8000b50:	464a      	mov	r2, r9
 8000b52:	08c0      	lsrs	r0, r0, #3
 8000b54:	075b      	lsls	r3, r3, #29
 8000b56:	4665      	mov	r5, ip
 8000b58:	4303      	orrs	r3, r0
 8000b5a:	08d1      	lsrs	r1, r2, #3
 8000b5c:	e6bd      	b.n	80008da <__aeabi_dadd+0x25e>
 8000b5e:	2a00      	cmp	r2, #0
 8000b60:	d000      	beq.n	8000b64 <__aeabi_dadd+0x4e8>
 8000b62:	e08e      	b.n	8000c82 <__aeabi_dadd+0x606>
 8000b64:	464b      	mov	r3, r9
 8000b66:	4303      	orrs	r3, r0
 8000b68:	d117      	bne.n	8000b9a <__aeabi_dadd+0x51e>
 8000b6a:	2180      	movs	r1, #128	; 0x80
 8000b6c:	2500      	movs	r5, #0
 8000b6e:	0309      	lsls	r1, r1, #12
 8000b70:	e6da      	b.n	8000928 <__aeabi_dadd+0x2ac>
 8000b72:	074a      	lsls	r2, r1, #29
 8000b74:	08db      	lsrs	r3, r3, #3
 8000b76:	4313      	orrs	r3, r2
 8000b78:	08c9      	lsrs	r1, r1, #3
 8000b7a:	e6d1      	b.n	8000920 <__aeabi_dadd+0x2a4>
 8000b7c:	1a1c      	subs	r4, r3, r0
 8000b7e:	464a      	mov	r2, r9
 8000b80:	42a3      	cmp	r3, r4
 8000b82:	419b      	sbcs	r3, r3
 8000b84:	1a89      	subs	r1, r1, r2
 8000b86:	425b      	negs	r3, r3
 8000b88:	1acb      	subs	r3, r1, r3
 8000b8a:	469a      	mov	sl, r3
 8000b8c:	2601      	movs	r6, #1
 8000b8e:	e5c1      	b.n	8000714 <__aeabi_dadd+0x98>
 8000b90:	074a      	lsls	r2, r1, #29
 8000b92:	08db      	lsrs	r3, r3, #3
 8000b94:	4313      	orrs	r3, r2
 8000b96:	08c9      	lsrs	r1, r1, #3
 8000b98:	e69f      	b.n	80008da <__aeabi_dadd+0x25e>
 8000b9a:	4643      	mov	r3, r8
 8000b9c:	08d8      	lsrs	r0, r3, #3
 8000b9e:	464b      	mov	r3, r9
 8000ba0:	464a      	mov	r2, r9
 8000ba2:	075b      	lsls	r3, r3, #29
 8000ba4:	4665      	mov	r5, ip
 8000ba6:	4303      	orrs	r3, r0
 8000ba8:	08d1      	lsrs	r1, r2, #3
 8000baa:	e6b9      	b.n	8000920 <__aeabi_dadd+0x2a4>
 8000bac:	4643      	mov	r3, r8
 8000bae:	08d8      	lsrs	r0, r3, #3
 8000bb0:	464b      	mov	r3, r9
 8000bb2:	464a      	mov	r2, r9
 8000bb4:	075b      	lsls	r3, r3, #29
 8000bb6:	4303      	orrs	r3, r0
 8000bb8:	08d1      	lsrs	r1, r2, #3
 8000bba:	e6b1      	b.n	8000920 <__aeabi_dadd+0x2a4>
 8000bbc:	4319      	orrs	r1, r3
 8000bbe:	000c      	movs	r4, r1
 8000bc0:	1e63      	subs	r3, r4, #1
 8000bc2:	419c      	sbcs	r4, r3
 8000bc4:	e6eb      	b.n	800099e <__aeabi_dadd+0x322>
 8000bc6:	003c      	movs	r4, r7
 8000bc8:	000d      	movs	r5, r1
 8000bca:	3c20      	subs	r4, #32
 8000bcc:	40e5      	lsrs	r5, r4
 8000bce:	2f20      	cmp	r7, #32
 8000bd0:	d003      	beq.n	8000bda <__aeabi_dadd+0x55e>
 8000bd2:	2440      	movs	r4, #64	; 0x40
 8000bd4:	1be4      	subs	r4, r4, r7
 8000bd6:	40a1      	lsls	r1, r4
 8000bd8:	430b      	orrs	r3, r1
 8000bda:	001c      	movs	r4, r3
 8000bdc:	1e63      	subs	r3, r4, #1
 8000bde:	419c      	sbcs	r4, r3
 8000be0:	432c      	orrs	r4, r5
 8000be2:	e770      	b.n	8000ac6 <__aeabi_dadd+0x44a>
 8000be4:	2a00      	cmp	r2, #0
 8000be6:	d0e1      	beq.n	8000bac <__aeabi_dadd+0x530>
 8000be8:	464a      	mov	r2, r9
 8000bea:	4302      	orrs	r2, r0
 8000bec:	d0c1      	beq.n	8000b72 <__aeabi_dadd+0x4f6>
 8000bee:	074a      	lsls	r2, r1, #29
 8000bf0:	08db      	lsrs	r3, r3, #3
 8000bf2:	4313      	orrs	r3, r2
 8000bf4:	2280      	movs	r2, #128	; 0x80
 8000bf6:	08c9      	lsrs	r1, r1, #3
 8000bf8:	0312      	lsls	r2, r2, #12
 8000bfa:	4211      	tst	r1, r2
 8000bfc:	d008      	beq.n	8000c10 <__aeabi_dadd+0x594>
 8000bfe:	4648      	mov	r0, r9
 8000c00:	08c4      	lsrs	r4, r0, #3
 8000c02:	4214      	tst	r4, r2
 8000c04:	d104      	bne.n	8000c10 <__aeabi_dadd+0x594>
 8000c06:	4643      	mov	r3, r8
 8000c08:	0021      	movs	r1, r4
 8000c0a:	08db      	lsrs	r3, r3, #3
 8000c0c:	0742      	lsls	r2, r0, #29
 8000c0e:	4313      	orrs	r3, r2
 8000c10:	0f5a      	lsrs	r2, r3, #29
 8000c12:	00db      	lsls	r3, r3, #3
 8000c14:	0752      	lsls	r2, r2, #29
 8000c16:	08db      	lsrs	r3, r3, #3
 8000c18:	4313      	orrs	r3, r2
 8000c1a:	e681      	b.n	8000920 <__aeabi_dadd+0x2a4>
 8000c1c:	464b      	mov	r3, r9
 8000c1e:	4303      	orrs	r3, r0
 8000c20:	d100      	bne.n	8000c24 <__aeabi_dadd+0x5a8>
 8000c22:	e714      	b.n	8000a4e <__aeabi_dadd+0x3d2>
 8000c24:	464b      	mov	r3, r9
 8000c26:	464a      	mov	r2, r9
 8000c28:	08c0      	lsrs	r0, r0, #3
 8000c2a:	075b      	lsls	r3, r3, #29
 8000c2c:	4665      	mov	r5, ip
 8000c2e:	4303      	orrs	r3, r0
 8000c30:	08d1      	lsrs	r1, r2, #3
 8000c32:	e655      	b.n	80008e0 <__aeabi_dadd+0x264>
 8000c34:	1ac4      	subs	r4, r0, r3
 8000c36:	45a0      	cmp	r8, r4
 8000c38:	4180      	sbcs	r0, r0
 8000c3a:	464b      	mov	r3, r9
 8000c3c:	4240      	negs	r0, r0
 8000c3e:	1a59      	subs	r1, r3, r1
 8000c40:	1a0b      	subs	r3, r1, r0
 8000c42:	469a      	mov	sl, r3
 8000c44:	4665      	mov	r5, ip
 8000c46:	2601      	movs	r6, #1
 8000c48:	e564      	b.n	8000714 <__aeabi_dadd+0x98>
 8000c4a:	1a1c      	subs	r4, r3, r0
 8000c4c:	464a      	mov	r2, r9
 8000c4e:	42a3      	cmp	r3, r4
 8000c50:	4180      	sbcs	r0, r0
 8000c52:	1a8a      	subs	r2, r1, r2
 8000c54:	4240      	negs	r0, r0
 8000c56:	1a12      	subs	r2, r2, r0
 8000c58:	4692      	mov	sl, r2
 8000c5a:	0212      	lsls	r2, r2, #8
 8000c5c:	d549      	bpl.n	8000cf2 <__aeabi_dadd+0x676>
 8000c5e:	4642      	mov	r2, r8
 8000c60:	1ad4      	subs	r4, r2, r3
 8000c62:	45a0      	cmp	r8, r4
 8000c64:	4180      	sbcs	r0, r0
 8000c66:	464b      	mov	r3, r9
 8000c68:	4240      	negs	r0, r0
 8000c6a:	1a59      	subs	r1, r3, r1
 8000c6c:	1a0b      	subs	r3, r1, r0
 8000c6e:	469a      	mov	sl, r3
 8000c70:	4665      	mov	r5, ip
 8000c72:	e57f      	b.n	8000774 <__aeabi_dadd+0xf8>
 8000c74:	464b      	mov	r3, r9
 8000c76:	464a      	mov	r2, r9
 8000c78:	08c0      	lsrs	r0, r0, #3
 8000c7a:	075b      	lsls	r3, r3, #29
 8000c7c:	4303      	orrs	r3, r0
 8000c7e:	08d1      	lsrs	r1, r2, #3
 8000c80:	e62b      	b.n	80008da <__aeabi_dadd+0x25e>
 8000c82:	464a      	mov	r2, r9
 8000c84:	08db      	lsrs	r3, r3, #3
 8000c86:	4302      	orrs	r2, r0
 8000c88:	d138      	bne.n	8000cfc <__aeabi_dadd+0x680>
 8000c8a:	074a      	lsls	r2, r1, #29
 8000c8c:	4313      	orrs	r3, r2
 8000c8e:	08c9      	lsrs	r1, r1, #3
 8000c90:	e646      	b.n	8000920 <__aeabi_dadd+0x2a4>
 8000c92:	464b      	mov	r3, r9
 8000c94:	464a      	mov	r2, r9
 8000c96:	08c0      	lsrs	r0, r0, #3
 8000c98:	075b      	lsls	r3, r3, #29
 8000c9a:	4303      	orrs	r3, r0
 8000c9c:	08d1      	lsrs	r1, r2, #3
 8000c9e:	e61f      	b.n	80008e0 <__aeabi_dadd+0x264>
 8000ca0:	181c      	adds	r4, r3, r0
 8000ca2:	429c      	cmp	r4, r3
 8000ca4:	419b      	sbcs	r3, r3
 8000ca6:	4449      	add	r1, r9
 8000ca8:	468a      	mov	sl, r1
 8000caa:	425b      	negs	r3, r3
 8000cac:	449a      	add	sl, r3
 8000cae:	4653      	mov	r3, sl
 8000cb0:	021b      	lsls	r3, r3, #8
 8000cb2:	d400      	bmi.n	8000cb6 <__aeabi_dadd+0x63a>
 8000cb4:	e607      	b.n	80008c6 <__aeabi_dadd+0x24a>
 8000cb6:	4652      	mov	r2, sl
 8000cb8:	4b1f      	ldr	r3, [pc, #124]	; (8000d38 <__aeabi_dadd+0x6bc>)
 8000cba:	2601      	movs	r6, #1
 8000cbc:	401a      	ands	r2, r3
 8000cbe:	4692      	mov	sl, r2
 8000cc0:	e601      	b.n	80008c6 <__aeabi_dadd+0x24a>
 8000cc2:	003c      	movs	r4, r7
 8000cc4:	000e      	movs	r6, r1
 8000cc6:	3c20      	subs	r4, #32
 8000cc8:	40e6      	lsrs	r6, r4
 8000cca:	2f20      	cmp	r7, #32
 8000ccc:	d003      	beq.n	8000cd6 <__aeabi_dadd+0x65a>
 8000cce:	2440      	movs	r4, #64	; 0x40
 8000cd0:	1be4      	subs	r4, r4, r7
 8000cd2:	40a1      	lsls	r1, r4
 8000cd4:	430b      	orrs	r3, r1
 8000cd6:	001c      	movs	r4, r3
 8000cd8:	1e63      	subs	r3, r4, #1
 8000cda:	419c      	sbcs	r4, r3
 8000cdc:	4334      	orrs	r4, r6
 8000cde:	e65e      	b.n	800099e <__aeabi_dadd+0x322>
 8000ce0:	4443      	add	r3, r8
 8000ce2:	4283      	cmp	r3, r0
 8000ce4:	4180      	sbcs	r0, r0
 8000ce6:	4449      	add	r1, r9
 8000ce8:	468a      	mov	sl, r1
 8000cea:	4240      	negs	r0, r0
 8000cec:	001c      	movs	r4, r3
 8000cee:	4482      	add	sl, r0
 8000cf0:	e6bc      	b.n	8000a6c <__aeabi_dadd+0x3f0>
 8000cf2:	4653      	mov	r3, sl
 8000cf4:	4323      	orrs	r3, r4
 8000cf6:	d100      	bne.n	8000cfa <__aeabi_dadd+0x67e>
 8000cf8:	e6a9      	b.n	8000a4e <__aeabi_dadd+0x3d2>
 8000cfa:	e5e4      	b.n	80008c6 <__aeabi_dadd+0x24a>
 8000cfc:	074a      	lsls	r2, r1, #29
 8000cfe:	4313      	orrs	r3, r2
 8000d00:	2280      	movs	r2, #128	; 0x80
 8000d02:	08c9      	lsrs	r1, r1, #3
 8000d04:	0312      	lsls	r2, r2, #12
 8000d06:	4211      	tst	r1, r2
 8000d08:	d009      	beq.n	8000d1e <__aeabi_dadd+0x6a2>
 8000d0a:	4648      	mov	r0, r9
 8000d0c:	08c4      	lsrs	r4, r0, #3
 8000d0e:	4214      	tst	r4, r2
 8000d10:	d105      	bne.n	8000d1e <__aeabi_dadd+0x6a2>
 8000d12:	4643      	mov	r3, r8
 8000d14:	4665      	mov	r5, ip
 8000d16:	0021      	movs	r1, r4
 8000d18:	08db      	lsrs	r3, r3, #3
 8000d1a:	0742      	lsls	r2, r0, #29
 8000d1c:	4313      	orrs	r3, r2
 8000d1e:	0f5a      	lsrs	r2, r3, #29
 8000d20:	00db      	lsls	r3, r3, #3
 8000d22:	08db      	lsrs	r3, r3, #3
 8000d24:	0752      	lsls	r2, r2, #29
 8000d26:	4313      	orrs	r3, r2
 8000d28:	e5fa      	b.n	8000920 <__aeabi_dadd+0x2a4>
 8000d2a:	2300      	movs	r3, #0
 8000d2c:	4a01      	ldr	r2, [pc, #4]	; (8000d34 <__aeabi_dadd+0x6b8>)
 8000d2e:	001c      	movs	r4, r3
 8000d30:	e540      	b.n	80007b4 <__aeabi_dadd+0x138>
 8000d32:	46c0      	nop			; (mov r8, r8)
 8000d34:	000007ff 	.word	0x000007ff
 8000d38:	ff7fffff 	.word	0xff7fffff

08000d3c <__aeabi_ddiv>:
 8000d3c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000d3e:	4657      	mov	r7, sl
 8000d40:	464e      	mov	r6, r9
 8000d42:	4645      	mov	r5, r8
 8000d44:	46de      	mov	lr, fp
 8000d46:	b5e0      	push	{r5, r6, r7, lr}
 8000d48:	030c      	lsls	r4, r1, #12
 8000d4a:	001f      	movs	r7, r3
 8000d4c:	004b      	lsls	r3, r1, #1
 8000d4e:	4681      	mov	r9, r0
 8000d50:	4692      	mov	sl, r2
 8000d52:	0005      	movs	r5, r0
 8000d54:	b085      	sub	sp, #20
 8000d56:	0b24      	lsrs	r4, r4, #12
 8000d58:	0d5b      	lsrs	r3, r3, #21
 8000d5a:	0fce      	lsrs	r6, r1, #31
 8000d5c:	2b00      	cmp	r3, #0
 8000d5e:	d100      	bne.n	8000d62 <__aeabi_ddiv+0x26>
 8000d60:	e152      	b.n	8001008 <__aeabi_ddiv+0x2cc>
 8000d62:	4ad2      	ldr	r2, [pc, #840]	; (80010ac <__aeabi_ddiv+0x370>)
 8000d64:	4293      	cmp	r3, r2
 8000d66:	d100      	bne.n	8000d6a <__aeabi_ddiv+0x2e>
 8000d68:	e16e      	b.n	8001048 <__aeabi_ddiv+0x30c>
 8000d6a:	0f42      	lsrs	r2, r0, #29
 8000d6c:	00e4      	lsls	r4, r4, #3
 8000d6e:	4314      	orrs	r4, r2
 8000d70:	2280      	movs	r2, #128	; 0x80
 8000d72:	0412      	lsls	r2, r2, #16
 8000d74:	4322      	orrs	r2, r4
 8000d76:	4690      	mov	r8, r2
 8000d78:	4acd      	ldr	r2, [pc, #820]	; (80010b0 <__aeabi_ddiv+0x374>)
 8000d7a:	00c5      	lsls	r5, r0, #3
 8000d7c:	4693      	mov	fp, r2
 8000d7e:	449b      	add	fp, r3
 8000d80:	2300      	movs	r3, #0
 8000d82:	4699      	mov	r9, r3
 8000d84:	9300      	str	r3, [sp, #0]
 8000d86:	033c      	lsls	r4, r7, #12
 8000d88:	007b      	lsls	r3, r7, #1
 8000d8a:	4650      	mov	r0, sl
 8000d8c:	0b24      	lsrs	r4, r4, #12
 8000d8e:	0d5b      	lsrs	r3, r3, #21
 8000d90:	0fff      	lsrs	r7, r7, #31
 8000d92:	2b00      	cmp	r3, #0
 8000d94:	d100      	bne.n	8000d98 <__aeabi_ddiv+0x5c>
 8000d96:	e11a      	b.n	8000fce <__aeabi_ddiv+0x292>
 8000d98:	4ac4      	ldr	r2, [pc, #784]	; (80010ac <__aeabi_ddiv+0x370>)
 8000d9a:	4293      	cmp	r3, r2
 8000d9c:	d100      	bne.n	8000da0 <__aeabi_ddiv+0x64>
 8000d9e:	e15e      	b.n	800105e <__aeabi_ddiv+0x322>
 8000da0:	0f42      	lsrs	r2, r0, #29
 8000da2:	00e4      	lsls	r4, r4, #3
 8000da4:	4322      	orrs	r2, r4
 8000da6:	2480      	movs	r4, #128	; 0x80
 8000da8:	0424      	lsls	r4, r4, #16
 8000daa:	4314      	orrs	r4, r2
 8000dac:	4ac0      	ldr	r2, [pc, #768]	; (80010b0 <__aeabi_ddiv+0x374>)
 8000dae:	00c1      	lsls	r1, r0, #3
 8000db0:	4694      	mov	ip, r2
 8000db2:	465a      	mov	r2, fp
 8000db4:	4463      	add	r3, ip
 8000db6:	1ad3      	subs	r3, r2, r3
 8000db8:	469b      	mov	fp, r3
 8000dba:	2000      	movs	r0, #0
 8000dbc:	0033      	movs	r3, r6
 8000dbe:	407b      	eors	r3, r7
 8000dc0:	469a      	mov	sl, r3
 8000dc2:	464b      	mov	r3, r9
 8000dc4:	2b0f      	cmp	r3, #15
 8000dc6:	d827      	bhi.n	8000e18 <__aeabi_ddiv+0xdc>
 8000dc8:	4aba      	ldr	r2, [pc, #744]	; (80010b4 <__aeabi_ddiv+0x378>)
 8000dca:	009b      	lsls	r3, r3, #2
 8000dcc:	58d3      	ldr	r3, [r2, r3]
 8000dce:	469f      	mov	pc, r3
 8000dd0:	46b2      	mov	sl, r6
 8000dd2:	9b00      	ldr	r3, [sp, #0]
 8000dd4:	2b02      	cmp	r3, #2
 8000dd6:	d016      	beq.n	8000e06 <__aeabi_ddiv+0xca>
 8000dd8:	2b03      	cmp	r3, #3
 8000dda:	d100      	bne.n	8000dde <__aeabi_ddiv+0xa2>
 8000ddc:	e287      	b.n	80012ee <__aeabi_ddiv+0x5b2>
 8000dde:	2b01      	cmp	r3, #1
 8000de0:	d000      	beq.n	8000de4 <__aeabi_ddiv+0xa8>
 8000de2:	e0d5      	b.n	8000f90 <__aeabi_ddiv+0x254>
 8000de4:	2300      	movs	r3, #0
 8000de6:	2200      	movs	r2, #0
 8000de8:	2500      	movs	r5, #0
 8000dea:	051b      	lsls	r3, r3, #20
 8000dec:	4313      	orrs	r3, r2
 8000dee:	4652      	mov	r2, sl
 8000df0:	07d2      	lsls	r2, r2, #31
 8000df2:	4313      	orrs	r3, r2
 8000df4:	0028      	movs	r0, r5
 8000df6:	0019      	movs	r1, r3
 8000df8:	b005      	add	sp, #20
 8000dfa:	bcf0      	pop	{r4, r5, r6, r7}
 8000dfc:	46bb      	mov	fp, r7
 8000dfe:	46b2      	mov	sl, r6
 8000e00:	46a9      	mov	r9, r5
 8000e02:	46a0      	mov	r8, r4
 8000e04:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000e06:	2200      	movs	r2, #0
 8000e08:	2500      	movs	r5, #0
 8000e0a:	4ba8      	ldr	r3, [pc, #672]	; (80010ac <__aeabi_ddiv+0x370>)
 8000e0c:	e7ed      	b.n	8000dea <__aeabi_ddiv+0xae>
 8000e0e:	46ba      	mov	sl, r7
 8000e10:	46a0      	mov	r8, r4
 8000e12:	000d      	movs	r5, r1
 8000e14:	9000      	str	r0, [sp, #0]
 8000e16:	e7dc      	b.n	8000dd2 <__aeabi_ddiv+0x96>
 8000e18:	4544      	cmp	r4, r8
 8000e1a:	d200      	bcs.n	8000e1e <__aeabi_ddiv+0xe2>
 8000e1c:	e1c4      	b.n	80011a8 <__aeabi_ddiv+0x46c>
 8000e1e:	d100      	bne.n	8000e22 <__aeabi_ddiv+0xe6>
 8000e20:	e1bf      	b.n	80011a2 <__aeabi_ddiv+0x466>
 8000e22:	2301      	movs	r3, #1
 8000e24:	425b      	negs	r3, r3
 8000e26:	469c      	mov	ip, r3
 8000e28:	002e      	movs	r6, r5
 8000e2a:	4640      	mov	r0, r8
 8000e2c:	2500      	movs	r5, #0
 8000e2e:	44e3      	add	fp, ip
 8000e30:	0223      	lsls	r3, r4, #8
 8000e32:	0e0c      	lsrs	r4, r1, #24
 8000e34:	431c      	orrs	r4, r3
 8000e36:	0c1b      	lsrs	r3, r3, #16
 8000e38:	4699      	mov	r9, r3
 8000e3a:	0423      	lsls	r3, r4, #16
 8000e3c:	020a      	lsls	r2, r1, #8
 8000e3e:	0c1f      	lsrs	r7, r3, #16
 8000e40:	4649      	mov	r1, r9
 8000e42:	9200      	str	r2, [sp, #0]
 8000e44:	9701      	str	r7, [sp, #4]
 8000e46:	f7ff f9ff 	bl	8000248 <__aeabi_uidivmod>
 8000e4a:	0002      	movs	r2, r0
 8000e4c:	437a      	muls	r2, r7
 8000e4e:	040b      	lsls	r3, r1, #16
 8000e50:	0c31      	lsrs	r1, r6, #16
 8000e52:	4680      	mov	r8, r0
 8000e54:	4319      	orrs	r1, r3
 8000e56:	428a      	cmp	r2, r1
 8000e58:	d907      	bls.n	8000e6a <__aeabi_ddiv+0x12e>
 8000e5a:	2301      	movs	r3, #1
 8000e5c:	425b      	negs	r3, r3
 8000e5e:	469c      	mov	ip, r3
 8000e60:	1909      	adds	r1, r1, r4
 8000e62:	44e0      	add	r8, ip
 8000e64:	428c      	cmp	r4, r1
 8000e66:	d800      	bhi.n	8000e6a <__aeabi_ddiv+0x12e>
 8000e68:	e201      	b.n	800126e <__aeabi_ddiv+0x532>
 8000e6a:	1a88      	subs	r0, r1, r2
 8000e6c:	4649      	mov	r1, r9
 8000e6e:	f7ff f9eb 	bl	8000248 <__aeabi_uidivmod>
 8000e72:	9a01      	ldr	r2, [sp, #4]
 8000e74:	0436      	lsls	r6, r6, #16
 8000e76:	4342      	muls	r2, r0
 8000e78:	0409      	lsls	r1, r1, #16
 8000e7a:	0c36      	lsrs	r6, r6, #16
 8000e7c:	0003      	movs	r3, r0
 8000e7e:	430e      	orrs	r6, r1
 8000e80:	42b2      	cmp	r2, r6
 8000e82:	d904      	bls.n	8000e8e <__aeabi_ddiv+0x152>
 8000e84:	1936      	adds	r6, r6, r4
 8000e86:	3b01      	subs	r3, #1
 8000e88:	42b4      	cmp	r4, r6
 8000e8a:	d800      	bhi.n	8000e8e <__aeabi_ddiv+0x152>
 8000e8c:	e1e9      	b.n	8001262 <__aeabi_ddiv+0x526>
 8000e8e:	1ab0      	subs	r0, r6, r2
 8000e90:	4642      	mov	r2, r8
 8000e92:	9e00      	ldr	r6, [sp, #0]
 8000e94:	0412      	lsls	r2, r2, #16
 8000e96:	431a      	orrs	r2, r3
 8000e98:	0c33      	lsrs	r3, r6, #16
 8000e9a:	001f      	movs	r7, r3
 8000e9c:	0c11      	lsrs	r1, r2, #16
 8000e9e:	4690      	mov	r8, r2
 8000ea0:	9302      	str	r3, [sp, #8]
 8000ea2:	0413      	lsls	r3, r2, #16
 8000ea4:	0432      	lsls	r2, r6, #16
 8000ea6:	0c16      	lsrs	r6, r2, #16
 8000ea8:	0032      	movs	r2, r6
 8000eaa:	0c1b      	lsrs	r3, r3, #16
 8000eac:	435a      	muls	r2, r3
 8000eae:	9603      	str	r6, [sp, #12]
 8000eb0:	437b      	muls	r3, r7
 8000eb2:	434e      	muls	r6, r1
 8000eb4:	4379      	muls	r1, r7
 8000eb6:	0c17      	lsrs	r7, r2, #16
 8000eb8:	46bc      	mov	ip, r7
 8000eba:	199b      	adds	r3, r3, r6
 8000ebc:	4463      	add	r3, ip
 8000ebe:	429e      	cmp	r6, r3
 8000ec0:	d903      	bls.n	8000eca <__aeabi_ddiv+0x18e>
 8000ec2:	2680      	movs	r6, #128	; 0x80
 8000ec4:	0276      	lsls	r6, r6, #9
 8000ec6:	46b4      	mov	ip, r6
 8000ec8:	4461      	add	r1, ip
 8000eca:	0c1e      	lsrs	r6, r3, #16
 8000ecc:	1871      	adds	r1, r6, r1
 8000ece:	0416      	lsls	r6, r2, #16
 8000ed0:	041b      	lsls	r3, r3, #16
 8000ed2:	0c36      	lsrs	r6, r6, #16
 8000ed4:	199e      	adds	r6, r3, r6
 8000ed6:	4288      	cmp	r0, r1
 8000ed8:	d302      	bcc.n	8000ee0 <__aeabi_ddiv+0x1a4>
 8000eda:	d112      	bne.n	8000f02 <__aeabi_ddiv+0x1c6>
 8000edc:	42b5      	cmp	r5, r6
 8000ede:	d210      	bcs.n	8000f02 <__aeabi_ddiv+0x1c6>
 8000ee0:	4643      	mov	r3, r8
 8000ee2:	1e5a      	subs	r2, r3, #1
 8000ee4:	9b00      	ldr	r3, [sp, #0]
 8000ee6:	469c      	mov	ip, r3
 8000ee8:	4465      	add	r5, ip
 8000eea:	001f      	movs	r7, r3
 8000eec:	429d      	cmp	r5, r3
 8000eee:	419b      	sbcs	r3, r3
 8000ef0:	425b      	negs	r3, r3
 8000ef2:	191b      	adds	r3, r3, r4
 8000ef4:	18c0      	adds	r0, r0, r3
 8000ef6:	4284      	cmp	r4, r0
 8000ef8:	d200      	bcs.n	8000efc <__aeabi_ddiv+0x1c0>
 8000efa:	e19e      	b.n	800123a <__aeabi_ddiv+0x4fe>
 8000efc:	d100      	bne.n	8000f00 <__aeabi_ddiv+0x1c4>
 8000efe:	e199      	b.n	8001234 <__aeabi_ddiv+0x4f8>
 8000f00:	4690      	mov	r8, r2
 8000f02:	1bae      	subs	r6, r5, r6
 8000f04:	42b5      	cmp	r5, r6
 8000f06:	41ad      	sbcs	r5, r5
 8000f08:	1a40      	subs	r0, r0, r1
 8000f0a:	426d      	negs	r5, r5
 8000f0c:	1b40      	subs	r0, r0, r5
 8000f0e:	4284      	cmp	r4, r0
 8000f10:	d100      	bne.n	8000f14 <__aeabi_ddiv+0x1d8>
 8000f12:	e1d2      	b.n	80012ba <__aeabi_ddiv+0x57e>
 8000f14:	4649      	mov	r1, r9
 8000f16:	f7ff f997 	bl	8000248 <__aeabi_uidivmod>
 8000f1a:	9a01      	ldr	r2, [sp, #4]
 8000f1c:	040b      	lsls	r3, r1, #16
 8000f1e:	4342      	muls	r2, r0
 8000f20:	0c31      	lsrs	r1, r6, #16
 8000f22:	0005      	movs	r5, r0
 8000f24:	4319      	orrs	r1, r3
 8000f26:	428a      	cmp	r2, r1
 8000f28:	d900      	bls.n	8000f2c <__aeabi_ddiv+0x1f0>
 8000f2a:	e16c      	b.n	8001206 <__aeabi_ddiv+0x4ca>
 8000f2c:	1a88      	subs	r0, r1, r2
 8000f2e:	4649      	mov	r1, r9
 8000f30:	f7ff f98a 	bl	8000248 <__aeabi_uidivmod>
 8000f34:	9a01      	ldr	r2, [sp, #4]
 8000f36:	0436      	lsls	r6, r6, #16
 8000f38:	4342      	muls	r2, r0
 8000f3a:	0409      	lsls	r1, r1, #16
 8000f3c:	0c36      	lsrs	r6, r6, #16
 8000f3e:	0003      	movs	r3, r0
 8000f40:	430e      	orrs	r6, r1
 8000f42:	42b2      	cmp	r2, r6
 8000f44:	d900      	bls.n	8000f48 <__aeabi_ddiv+0x20c>
 8000f46:	e153      	b.n	80011f0 <__aeabi_ddiv+0x4b4>
 8000f48:	9803      	ldr	r0, [sp, #12]
 8000f4a:	1ab6      	subs	r6, r6, r2
 8000f4c:	0002      	movs	r2, r0
 8000f4e:	042d      	lsls	r5, r5, #16
 8000f50:	431d      	orrs	r5, r3
 8000f52:	9f02      	ldr	r7, [sp, #8]
 8000f54:	042b      	lsls	r3, r5, #16
 8000f56:	0c1b      	lsrs	r3, r3, #16
 8000f58:	435a      	muls	r2, r3
 8000f5a:	437b      	muls	r3, r7
 8000f5c:	469c      	mov	ip, r3
 8000f5e:	0c29      	lsrs	r1, r5, #16
 8000f60:	4348      	muls	r0, r1
 8000f62:	0c13      	lsrs	r3, r2, #16
 8000f64:	4484      	add	ip, r0
 8000f66:	4463      	add	r3, ip
 8000f68:	4379      	muls	r1, r7
 8000f6a:	4298      	cmp	r0, r3
 8000f6c:	d903      	bls.n	8000f76 <__aeabi_ddiv+0x23a>
 8000f6e:	2080      	movs	r0, #128	; 0x80
 8000f70:	0240      	lsls	r0, r0, #9
 8000f72:	4684      	mov	ip, r0
 8000f74:	4461      	add	r1, ip
 8000f76:	0c18      	lsrs	r0, r3, #16
 8000f78:	0412      	lsls	r2, r2, #16
 8000f7a:	041b      	lsls	r3, r3, #16
 8000f7c:	0c12      	lsrs	r2, r2, #16
 8000f7e:	1840      	adds	r0, r0, r1
 8000f80:	189b      	adds	r3, r3, r2
 8000f82:	4286      	cmp	r6, r0
 8000f84:	d200      	bcs.n	8000f88 <__aeabi_ddiv+0x24c>
 8000f86:	e100      	b.n	800118a <__aeabi_ddiv+0x44e>
 8000f88:	d100      	bne.n	8000f8c <__aeabi_ddiv+0x250>
 8000f8a:	e0fb      	b.n	8001184 <__aeabi_ddiv+0x448>
 8000f8c:	2301      	movs	r3, #1
 8000f8e:	431d      	orrs	r5, r3
 8000f90:	4b49      	ldr	r3, [pc, #292]	; (80010b8 <__aeabi_ddiv+0x37c>)
 8000f92:	445b      	add	r3, fp
 8000f94:	2b00      	cmp	r3, #0
 8000f96:	dc00      	bgt.n	8000f9a <__aeabi_ddiv+0x25e>
 8000f98:	e0aa      	b.n	80010f0 <__aeabi_ddiv+0x3b4>
 8000f9a:	076a      	lsls	r2, r5, #29
 8000f9c:	d000      	beq.n	8000fa0 <__aeabi_ddiv+0x264>
 8000f9e:	e13d      	b.n	800121c <__aeabi_ddiv+0x4e0>
 8000fa0:	08e9      	lsrs	r1, r5, #3
 8000fa2:	4642      	mov	r2, r8
 8000fa4:	01d2      	lsls	r2, r2, #7
 8000fa6:	d506      	bpl.n	8000fb6 <__aeabi_ddiv+0x27a>
 8000fa8:	4642      	mov	r2, r8
 8000faa:	4b44      	ldr	r3, [pc, #272]	; (80010bc <__aeabi_ddiv+0x380>)
 8000fac:	401a      	ands	r2, r3
 8000fae:	2380      	movs	r3, #128	; 0x80
 8000fb0:	4690      	mov	r8, r2
 8000fb2:	00db      	lsls	r3, r3, #3
 8000fb4:	445b      	add	r3, fp
 8000fb6:	4a42      	ldr	r2, [pc, #264]	; (80010c0 <__aeabi_ddiv+0x384>)
 8000fb8:	4293      	cmp	r3, r2
 8000fba:	dd00      	ble.n	8000fbe <__aeabi_ddiv+0x282>
 8000fbc:	e723      	b.n	8000e06 <__aeabi_ddiv+0xca>
 8000fbe:	4642      	mov	r2, r8
 8000fc0:	055b      	lsls	r3, r3, #21
 8000fc2:	0755      	lsls	r5, r2, #29
 8000fc4:	0252      	lsls	r2, r2, #9
 8000fc6:	430d      	orrs	r5, r1
 8000fc8:	0b12      	lsrs	r2, r2, #12
 8000fca:	0d5b      	lsrs	r3, r3, #21
 8000fcc:	e70d      	b.n	8000dea <__aeabi_ddiv+0xae>
 8000fce:	4651      	mov	r1, sl
 8000fd0:	4321      	orrs	r1, r4
 8000fd2:	d100      	bne.n	8000fd6 <__aeabi_ddiv+0x29a>
 8000fd4:	e07c      	b.n	80010d0 <__aeabi_ddiv+0x394>
 8000fd6:	2c00      	cmp	r4, #0
 8000fd8:	d100      	bne.n	8000fdc <__aeabi_ddiv+0x2a0>
 8000fda:	e0fb      	b.n	80011d4 <__aeabi_ddiv+0x498>
 8000fdc:	0020      	movs	r0, r4
 8000fde:	f001 f995 	bl	800230c <__clzsi2>
 8000fe2:	0002      	movs	r2, r0
 8000fe4:	3a0b      	subs	r2, #11
 8000fe6:	231d      	movs	r3, #29
 8000fe8:	1a9b      	subs	r3, r3, r2
 8000fea:	4652      	mov	r2, sl
 8000fec:	0001      	movs	r1, r0
 8000fee:	40da      	lsrs	r2, r3
 8000ff0:	4653      	mov	r3, sl
 8000ff2:	3908      	subs	r1, #8
 8000ff4:	408b      	lsls	r3, r1
 8000ff6:	408c      	lsls	r4, r1
 8000ff8:	0019      	movs	r1, r3
 8000ffa:	4314      	orrs	r4, r2
 8000ffc:	4b31      	ldr	r3, [pc, #196]	; (80010c4 <__aeabi_ddiv+0x388>)
 8000ffe:	4458      	add	r0, fp
 8001000:	469b      	mov	fp, r3
 8001002:	4483      	add	fp, r0
 8001004:	2000      	movs	r0, #0
 8001006:	e6d9      	b.n	8000dbc <__aeabi_ddiv+0x80>
 8001008:	0003      	movs	r3, r0
 800100a:	4323      	orrs	r3, r4
 800100c:	4698      	mov	r8, r3
 800100e:	d044      	beq.n	800109a <__aeabi_ddiv+0x35e>
 8001010:	2c00      	cmp	r4, #0
 8001012:	d100      	bne.n	8001016 <__aeabi_ddiv+0x2da>
 8001014:	e0cf      	b.n	80011b6 <__aeabi_ddiv+0x47a>
 8001016:	0020      	movs	r0, r4
 8001018:	f001 f978 	bl	800230c <__clzsi2>
 800101c:	0001      	movs	r1, r0
 800101e:	0002      	movs	r2, r0
 8001020:	390b      	subs	r1, #11
 8001022:	231d      	movs	r3, #29
 8001024:	1a5b      	subs	r3, r3, r1
 8001026:	4649      	mov	r1, r9
 8001028:	0010      	movs	r0, r2
 800102a:	40d9      	lsrs	r1, r3
 800102c:	3808      	subs	r0, #8
 800102e:	4084      	lsls	r4, r0
 8001030:	000b      	movs	r3, r1
 8001032:	464d      	mov	r5, r9
 8001034:	4323      	orrs	r3, r4
 8001036:	4698      	mov	r8, r3
 8001038:	4085      	lsls	r5, r0
 800103a:	4b23      	ldr	r3, [pc, #140]	; (80010c8 <__aeabi_ddiv+0x38c>)
 800103c:	1a9b      	subs	r3, r3, r2
 800103e:	469b      	mov	fp, r3
 8001040:	2300      	movs	r3, #0
 8001042:	4699      	mov	r9, r3
 8001044:	9300      	str	r3, [sp, #0]
 8001046:	e69e      	b.n	8000d86 <__aeabi_ddiv+0x4a>
 8001048:	0002      	movs	r2, r0
 800104a:	4322      	orrs	r2, r4
 800104c:	4690      	mov	r8, r2
 800104e:	d11d      	bne.n	800108c <__aeabi_ddiv+0x350>
 8001050:	2208      	movs	r2, #8
 8001052:	469b      	mov	fp, r3
 8001054:	2302      	movs	r3, #2
 8001056:	2500      	movs	r5, #0
 8001058:	4691      	mov	r9, r2
 800105a:	9300      	str	r3, [sp, #0]
 800105c:	e693      	b.n	8000d86 <__aeabi_ddiv+0x4a>
 800105e:	4651      	mov	r1, sl
 8001060:	4321      	orrs	r1, r4
 8001062:	d109      	bne.n	8001078 <__aeabi_ddiv+0x33c>
 8001064:	2302      	movs	r3, #2
 8001066:	464a      	mov	r2, r9
 8001068:	431a      	orrs	r2, r3
 800106a:	4b18      	ldr	r3, [pc, #96]	; (80010cc <__aeabi_ddiv+0x390>)
 800106c:	4691      	mov	r9, r2
 800106e:	469c      	mov	ip, r3
 8001070:	2400      	movs	r4, #0
 8001072:	2002      	movs	r0, #2
 8001074:	44e3      	add	fp, ip
 8001076:	e6a1      	b.n	8000dbc <__aeabi_ddiv+0x80>
 8001078:	2303      	movs	r3, #3
 800107a:	464a      	mov	r2, r9
 800107c:	431a      	orrs	r2, r3
 800107e:	4b13      	ldr	r3, [pc, #76]	; (80010cc <__aeabi_ddiv+0x390>)
 8001080:	4691      	mov	r9, r2
 8001082:	469c      	mov	ip, r3
 8001084:	4651      	mov	r1, sl
 8001086:	2003      	movs	r0, #3
 8001088:	44e3      	add	fp, ip
 800108a:	e697      	b.n	8000dbc <__aeabi_ddiv+0x80>
 800108c:	220c      	movs	r2, #12
 800108e:	469b      	mov	fp, r3
 8001090:	2303      	movs	r3, #3
 8001092:	46a0      	mov	r8, r4
 8001094:	4691      	mov	r9, r2
 8001096:	9300      	str	r3, [sp, #0]
 8001098:	e675      	b.n	8000d86 <__aeabi_ddiv+0x4a>
 800109a:	2304      	movs	r3, #4
 800109c:	4699      	mov	r9, r3
 800109e:	2300      	movs	r3, #0
 80010a0:	469b      	mov	fp, r3
 80010a2:	3301      	adds	r3, #1
 80010a4:	2500      	movs	r5, #0
 80010a6:	9300      	str	r3, [sp, #0]
 80010a8:	e66d      	b.n	8000d86 <__aeabi_ddiv+0x4a>
 80010aa:	46c0      	nop			; (mov r8, r8)
 80010ac:	000007ff 	.word	0x000007ff
 80010b0:	fffffc01 	.word	0xfffffc01
 80010b4:	0800e96c 	.word	0x0800e96c
 80010b8:	000003ff 	.word	0x000003ff
 80010bc:	feffffff 	.word	0xfeffffff
 80010c0:	000007fe 	.word	0x000007fe
 80010c4:	000003f3 	.word	0x000003f3
 80010c8:	fffffc0d 	.word	0xfffffc0d
 80010cc:	fffff801 	.word	0xfffff801
 80010d0:	464a      	mov	r2, r9
 80010d2:	2301      	movs	r3, #1
 80010d4:	431a      	orrs	r2, r3
 80010d6:	4691      	mov	r9, r2
 80010d8:	2400      	movs	r4, #0
 80010da:	2001      	movs	r0, #1
 80010dc:	e66e      	b.n	8000dbc <__aeabi_ddiv+0x80>
 80010de:	2300      	movs	r3, #0
 80010e0:	2280      	movs	r2, #128	; 0x80
 80010e2:	469a      	mov	sl, r3
 80010e4:	2500      	movs	r5, #0
 80010e6:	4b88      	ldr	r3, [pc, #544]	; (8001308 <__aeabi_ddiv+0x5cc>)
 80010e8:	0312      	lsls	r2, r2, #12
 80010ea:	e67e      	b.n	8000dea <__aeabi_ddiv+0xae>
 80010ec:	2501      	movs	r5, #1
 80010ee:	426d      	negs	r5, r5
 80010f0:	2201      	movs	r2, #1
 80010f2:	1ad2      	subs	r2, r2, r3
 80010f4:	2a38      	cmp	r2, #56	; 0x38
 80010f6:	dd00      	ble.n	80010fa <__aeabi_ddiv+0x3be>
 80010f8:	e674      	b.n	8000de4 <__aeabi_ddiv+0xa8>
 80010fa:	2a1f      	cmp	r2, #31
 80010fc:	dc00      	bgt.n	8001100 <__aeabi_ddiv+0x3c4>
 80010fe:	e0bd      	b.n	800127c <__aeabi_ddiv+0x540>
 8001100:	211f      	movs	r1, #31
 8001102:	4249      	negs	r1, r1
 8001104:	1acb      	subs	r3, r1, r3
 8001106:	4641      	mov	r1, r8
 8001108:	40d9      	lsrs	r1, r3
 800110a:	000b      	movs	r3, r1
 800110c:	2a20      	cmp	r2, #32
 800110e:	d004      	beq.n	800111a <__aeabi_ddiv+0x3de>
 8001110:	4641      	mov	r1, r8
 8001112:	4a7e      	ldr	r2, [pc, #504]	; (800130c <__aeabi_ddiv+0x5d0>)
 8001114:	445a      	add	r2, fp
 8001116:	4091      	lsls	r1, r2
 8001118:	430d      	orrs	r5, r1
 800111a:	0029      	movs	r1, r5
 800111c:	1e4a      	subs	r2, r1, #1
 800111e:	4191      	sbcs	r1, r2
 8001120:	4319      	orrs	r1, r3
 8001122:	2307      	movs	r3, #7
 8001124:	001d      	movs	r5, r3
 8001126:	2200      	movs	r2, #0
 8001128:	400d      	ands	r5, r1
 800112a:	420b      	tst	r3, r1
 800112c:	d100      	bne.n	8001130 <__aeabi_ddiv+0x3f4>
 800112e:	e0d0      	b.n	80012d2 <__aeabi_ddiv+0x596>
 8001130:	220f      	movs	r2, #15
 8001132:	2300      	movs	r3, #0
 8001134:	400a      	ands	r2, r1
 8001136:	2a04      	cmp	r2, #4
 8001138:	d100      	bne.n	800113c <__aeabi_ddiv+0x400>
 800113a:	e0c7      	b.n	80012cc <__aeabi_ddiv+0x590>
 800113c:	1d0a      	adds	r2, r1, #4
 800113e:	428a      	cmp	r2, r1
 8001140:	4189      	sbcs	r1, r1
 8001142:	4249      	negs	r1, r1
 8001144:	185b      	adds	r3, r3, r1
 8001146:	0011      	movs	r1, r2
 8001148:	021a      	lsls	r2, r3, #8
 800114a:	d400      	bmi.n	800114e <__aeabi_ddiv+0x412>
 800114c:	e0be      	b.n	80012cc <__aeabi_ddiv+0x590>
 800114e:	2301      	movs	r3, #1
 8001150:	2200      	movs	r2, #0
 8001152:	2500      	movs	r5, #0
 8001154:	e649      	b.n	8000dea <__aeabi_ddiv+0xae>
 8001156:	2280      	movs	r2, #128	; 0x80
 8001158:	4643      	mov	r3, r8
 800115a:	0312      	lsls	r2, r2, #12
 800115c:	4213      	tst	r3, r2
 800115e:	d008      	beq.n	8001172 <__aeabi_ddiv+0x436>
 8001160:	4214      	tst	r4, r2
 8001162:	d106      	bne.n	8001172 <__aeabi_ddiv+0x436>
 8001164:	4322      	orrs	r2, r4
 8001166:	0312      	lsls	r2, r2, #12
 8001168:	46ba      	mov	sl, r7
 800116a:	000d      	movs	r5, r1
 800116c:	4b66      	ldr	r3, [pc, #408]	; (8001308 <__aeabi_ddiv+0x5cc>)
 800116e:	0b12      	lsrs	r2, r2, #12
 8001170:	e63b      	b.n	8000dea <__aeabi_ddiv+0xae>
 8001172:	2280      	movs	r2, #128	; 0x80
 8001174:	4643      	mov	r3, r8
 8001176:	0312      	lsls	r2, r2, #12
 8001178:	431a      	orrs	r2, r3
 800117a:	0312      	lsls	r2, r2, #12
 800117c:	46b2      	mov	sl, r6
 800117e:	4b62      	ldr	r3, [pc, #392]	; (8001308 <__aeabi_ddiv+0x5cc>)
 8001180:	0b12      	lsrs	r2, r2, #12
 8001182:	e632      	b.n	8000dea <__aeabi_ddiv+0xae>
 8001184:	2b00      	cmp	r3, #0
 8001186:	d100      	bne.n	800118a <__aeabi_ddiv+0x44e>
 8001188:	e702      	b.n	8000f90 <__aeabi_ddiv+0x254>
 800118a:	19a6      	adds	r6, r4, r6
 800118c:	1e6a      	subs	r2, r5, #1
 800118e:	42a6      	cmp	r6, r4
 8001190:	d200      	bcs.n	8001194 <__aeabi_ddiv+0x458>
 8001192:	e089      	b.n	80012a8 <__aeabi_ddiv+0x56c>
 8001194:	4286      	cmp	r6, r0
 8001196:	d200      	bcs.n	800119a <__aeabi_ddiv+0x45e>
 8001198:	e09f      	b.n	80012da <__aeabi_ddiv+0x59e>
 800119a:	d100      	bne.n	800119e <__aeabi_ddiv+0x462>
 800119c:	e0af      	b.n	80012fe <__aeabi_ddiv+0x5c2>
 800119e:	0015      	movs	r5, r2
 80011a0:	e6f4      	b.n	8000f8c <__aeabi_ddiv+0x250>
 80011a2:	42a9      	cmp	r1, r5
 80011a4:	d900      	bls.n	80011a8 <__aeabi_ddiv+0x46c>
 80011a6:	e63c      	b.n	8000e22 <__aeabi_ddiv+0xe6>
 80011a8:	4643      	mov	r3, r8
 80011aa:	07de      	lsls	r6, r3, #31
 80011ac:	0858      	lsrs	r0, r3, #1
 80011ae:	086b      	lsrs	r3, r5, #1
 80011b0:	431e      	orrs	r6, r3
 80011b2:	07ed      	lsls	r5, r5, #31
 80011b4:	e63c      	b.n	8000e30 <__aeabi_ddiv+0xf4>
 80011b6:	f001 f8a9 	bl	800230c <__clzsi2>
 80011ba:	0001      	movs	r1, r0
 80011bc:	0002      	movs	r2, r0
 80011be:	3115      	adds	r1, #21
 80011c0:	3220      	adds	r2, #32
 80011c2:	291c      	cmp	r1, #28
 80011c4:	dc00      	bgt.n	80011c8 <__aeabi_ddiv+0x48c>
 80011c6:	e72c      	b.n	8001022 <__aeabi_ddiv+0x2e6>
 80011c8:	464b      	mov	r3, r9
 80011ca:	3808      	subs	r0, #8
 80011cc:	4083      	lsls	r3, r0
 80011ce:	2500      	movs	r5, #0
 80011d0:	4698      	mov	r8, r3
 80011d2:	e732      	b.n	800103a <__aeabi_ddiv+0x2fe>
 80011d4:	f001 f89a 	bl	800230c <__clzsi2>
 80011d8:	0003      	movs	r3, r0
 80011da:	001a      	movs	r2, r3
 80011dc:	3215      	adds	r2, #21
 80011de:	3020      	adds	r0, #32
 80011e0:	2a1c      	cmp	r2, #28
 80011e2:	dc00      	bgt.n	80011e6 <__aeabi_ddiv+0x4aa>
 80011e4:	e6ff      	b.n	8000fe6 <__aeabi_ddiv+0x2aa>
 80011e6:	4654      	mov	r4, sl
 80011e8:	3b08      	subs	r3, #8
 80011ea:	2100      	movs	r1, #0
 80011ec:	409c      	lsls	r4, r3
 80011ee:	e705      	b.n	8000ffc <__aeabi_ddiv+0x2c0>
 80011f0:	1936      	adds	r6, r6, r4
 80011f2:	3b01      	subs	r3, #1
 80011f4:	42b4      	cmp	r4, r6
 80011f6:	d900      	bls.n	80011fa <__aeabi_ddiv+0x4be>
 80011f8:	e6a6      	b.n	8000f48 <__aeabi_ddiv+0x20c>
 80011fa:	42b2      	cmp	r2, r6
 80011fc:	d800      	bhi.n	8001200 <__aeabi_ddiv+0x4c4>
 80011fe:	e6a3      	b.n	8000f48 <__aeabi_ddiv+0x20c>
 8001200:	1e83      	subs	r3, r0, #2
 8001202:	1936      	adds	r6, r6, r4
 8001204:	e6a0      	b.n	8000f48 <__aeabi_ddiv+0x20c>
 8001206:	1909      	adds	r1, r1, r4
 8001208:	3d01      	subs	r5, #1
 800120a:	428c      	cmp	r4, r1
 800120c:	d900      	bls.n	8001210 <__aeabi_ddiv+0x4d4>
 800120e:	e68d      	b.n	8000f2c <__aeabi_ddiv+0x1f0>
 8001210:	428a      	cmp	r2, r1
 8001212:	d800      	bhi.n	8001216 <__aeabi_ddiv+0x4da>
 8001214:	e68a      	b.n	8000f2c <__aeabi_ddiv+0x1f0>
 8001216:	1e85      	subs	r5, r0, #2
 8001218:	1909      	adds	r1, r1, r4
 800121a:	e687      	b.n	8000f2c <__aeabi_ddiv+0x1f0>
 800121c:	220f      	movs	r2, #15
 800121e:	402a      	ands	r2, r5
 8001220:	2a04      	cmp	r2, #4
 8001222:	d100      	bne.n	8001226 <__aeabi_ddiv+0x4ea>
 8001224:	e6bc      	b.n	8000fa0 <__aeabi_ddiv+0x264>
 8001226:	1d29      	adds	r1, r5, #4
 8001228:	42a9      	cmp	r1, r5
 800122a:	41ad      	sbcs	r5, r5
 800122c:	426d      	negs	r5, r5
 800122e:	08c9      	lsrs	r1, r1, #3
 8001230:	44a8      	add	r8, r5
 8001232:	e6b6      	b.n	8000fa2 <__aeabi_ddiv+0x266>
 8001234:	42af      	cmp	r7, r5
 8001236:	d900      	bls.n	800123a <__aeabi_ddiv+0x4fe>
 8001238:	e662      	b.n	8000f00 <__aeabi_ddiv+0x1c4>
 800123a:	4281      	cmp	r1, r0
 800123c:	d804      	bhi.n	8001248 <__aeabi_ddiv+0x50c>
 800123e:	d000      	beq.n	8001242 <__aeabi_ddiv+0x506>
 8001240:	e65e      	b.n	8000f00 <__aeabi_ddiv+0x1c4>
 8001242:	42ae      	cmp	r6, r5
 8001244:	d800      	bhi.n	8001248 <__aeabi_ddiv+0x50c>
 8001246:	e65b      	b.n	8000f00 <__aeabi_ddiv+0x1c4>
 8001248:	2302      	movs	r3, #2
 800124a:	425b      	negs	r3, r3
 800124c:	469c      	mov	ip, r3
 800124e:	9b00      	ldr	r3, [sp, #0]
 8001250:	44e0      	add	r8, ip
 8001252:	469c      	mov	ip, r3
 8001254:	4465      	add	r5, ip
 8001256:	429d      	cmp	r5, r3
 8001258:	419b      	sbcs	r3, r3
 800125a:	425b      	negs	r3, r3
 800125c:	191b      	adds	r3, r3, r4
 800125e:	18c0      	adds	r0, r0, r3
 8001260:	e64f      	b.n	8000f02 <__aeabi_ddiv+0x1c6>
 8001262:	42b2      	cmp	r2, r6
 8001264:	d800      	bhi.n	8001268 <__aeabi_ddiv+0x52c>
 8001266:	e612      	b.n	8000e8e <__aeabi_ddiv+0x152>
 8001268:	1e83      	subs	r3, r0, #2
 800126a:	1936      	adds	r6, r6, r4
 800126c:	e60f      	b.n	8000e8e <__aeabi_ddiv+0x152>
 800126e:	428a      	cmp	r2, r1
 8001270:	d800      	bhi.n	8001274 <__aeabi_ddiv+0x538>
 8001272:	e5fa      	b.n	8000e6a <__aeabi_ddiv+0x12e>
 8001274:	1e83      	subs	r3, r0, #2
 8001276:	4698      	mov	r8, r3
 8001278:	1909      	adds	r1, r1, r4
 800127a:	e5f6      	b.n	8000e6a <__aeabi_ddiv+0x12e>
 800127c:	4b24      	ldr	r3, [pc, #144]	; (8001310 <__aeabi_ddiv+0x5d4>)
 800127e:	0028      	movs	r0, r5
 8001280:	445b      	add	r3, fp
 8001282:	4641      	mov	r1, r8
 8001284:	409d      	lsls	r5, r3
 8001286:	4099      	lsls	r1, r3
 8001288:	40d0      	lsrs	r0, r2
 800128a:	1e6b      	subs	r3, r5, #1
 800128c:	419d      	sbcs	r5, r3
 800128e:	4643      	mov	r3, r8
 8001290:	4301      	orrs	r1, r0
 8001292:	4329      	orrs	r1, r5
 8001294:	40d3      	lsrs	r3, r2
 8001296:	074a      	lsls	r2, r1, #29
 8001298:	d100      	bne.n	800129c <__aeabi_ddiv+0x560>
 800129a:	e755      	b.n	8001148 <__aeabi_ddiv+0x40c>
 800129c:	220f      	movs	r2, #15
 800129e:	400a      	ands	r2, r1
 80012a0:	2a04      	cmp	r2, #4
 80012a2:	d000      	beq.n	80012a6 <__aeabi_ddiv+0x56a>
 80012a4:	e74a      	b.n	800113c <__aeabi_ddiv+0x400>
 80012a6:	e74f      	b.n	8001148 <__aeabi_ddiv+0x40c>
 80012a8:	0015      	movs	r5, r2
 80012aa:	4286      	cmp	r6, r0
 80012ac:	d000      	beq.n	80012b0 <__aeabi_ddiv+0x574>
 80012ae:	e66d      	b.n	8000f8c <__aeabi_ddiv+0x250>
 80012b0:	9a00      	ldr	r2, [sp, #0]
 80012b2:	429a      	cmp	r2, r3
 80012b4:	d000      	beq.n	80012b8 <__aeabi_ddiv+0x57c>
 80012b6:	e669      	b.n	8000f8c <__aeabi_ddiv+0x250>
 80012b8:	e66a      	b.n	8000f90 <__aeabi_ddiv+0x254>
 80012ba:	4b16      	ldr	r3, [pc, #88]	; (8001314 <__aeabi_ddiv+0x5d8>)
 80012bc:	445b      	add	r3, fp
 80012be:	2b00      	cmp	r3, #0
 80012c0:	dc00      	bgt.n	80012c4 <__aeabi_ddiv+0x588>
 80012c2:	e713      	b.n	80010ec <__aeabi_ddiv+0x3b0>
 80012c4:	2501      	movs	r5, #1
 80012c6:	2100      	movs	r1, #0
 80012c8:	44a8      	add	r8, r5
 80012ca:	e66a      	b.n	8000fa2 <__aeabi_ddiv+0x266>
 80012cc:	075d      	lsls	r5, r3, #29
 80012ce:	025b      	lsls	r3, r3, #9
 80012d0:	0b1a      	lsrs	r2, r3, #12
 80012d2:	08c9      	lsrs	r1, r1, #3
 80012d4:	2300      	movs	r3, #0
 80012d6:	430d      	orrs	r5, r1
 80012d8:	e587      	b.n	8000dea <__aeabi_ddiv+0xae>
 80012da:	9900      	ldr	r1, [sp, #0]
 80012dc:	3d02      	subs	r5, #2
 80012de:	004a      	lsls	r2, r1, #1
 80012e0:	428a      	cmp	r2, r1
 80012e2:	41bf      	sbcs	r7, r7
 80012e4:	427f      	negs	r7, r7
 80012e6:	193f      	adds	r7, r7, r4
 80012e8:	19f6      	adds	r6, r6, r7
 80012ea:	9200      	str	r2, [sp, #0]
 80012ec:	e7dd      	b.n	80012aa <__aeabi_ddiv+0x56e>
 80012ee:	2280      	movs	r2, #128	; 0x80
 80012f0:	4643      	mov	r3, r8
 80012f2:	0312      	lsls	r2, r2, #12
 80012f4:	431a      	orrs	r2, r3
 80012f6:	0312      	lsls	r2, r2, #12
 80012f8:	4b03      	ldr	r3, [pc, #12]	; (8001308 <__aeabi_ddiv+0x5cc>)
 80012fa:	0b12      	lsrs	r2, r2, #12
 80012fc:	e575      	b.n	8000dea <__aeabi_ddiv+0xae>
 80012fe:	9900      	ldr	r1, [sp, #0]
 8001300:	4299      	cmp	r1, r3
 8001302:	d3ea      	bcc.n	80012da <__aeabi_ddiv+0x59e>
 8001304:	0015      	movs	r5, r2
 8001306:	e7d3      	b.n	80012b0 <__aeabi_ddiv+0x574>
 8001308:	000007ff 	.word	0x000007ff
 800130c:	0000043e 	.word	0x0000043e
 8001310:	0000041e 	.word	0x0000041e
 8001314:	000003ff 	.word	0x000003ff

08001318 <__eqdf2>:
 8001318:	b5f0      	push	{r4, r5, r6, r7, lr}
 800131a:	464e      	mov	r6, r9
 800131c:	4645      	mov	r5, r8
 800131e:	46de      	mov	lr, fp
 8001320:	4657      	mov	r7, sl
 8001322:	4690      	mov	r8, r2
 8001324:	b5e0      	push	{r5, r6, r7, lr}
 8001326:	0017      	movs	r7, r2
 8001328:	031a      	lsls	r2, r3, #12
 800132a:	0b12      	lsrs	r2, r2, #12
 800132c:	0005      	movs	r5, r0
 800132e:	4684      	mov	ip, r0
 8001330:	4819      	ldr	r0, [pc, #100]	; (8001398 <__eqdf2+0x80>)
 8001332:	030e      	lsls	r6, r1, #12
 8001334:	004c      	lsls	r4, r1, #1
 8001336:	4691      	mov	r9, r2
 8001338:	005a      	lsls	r2, r3, #1
 800133a:	0fdb      	lsrs	r3, r3, #31
 800133c:	469b      	mov	fp, r3
 800133e:	0b36      	lsrs	r6, r6, #12
 8001340:	0d64      	lsrs	r4, r4, #21
 8001342:	0fc9      	lsrs	r1, r1, #31
 8001344:	0d52      	lsrs	r2, r2, #21
 8001346:	4284      	cmp	r4, r0
 8001348:	d019      	beq.n	800137e <__eqdf2+0x66>
 800134a:	4282      	cmp	r2, r0
 800134c:	d010      	beq.n	8001370 <__eqdf2+0x58>
 800134e:	2001      	movs	r0, #1
 8001350:	4294      	cmp	r4, r2
 8001352:	d10e      	bne.n	8001372 <__eqdf2+0x5a>
 8001354:	454e      	cmp	r6, r9
 8001356:	d10c      	bne.n	8001372 <__eqdf2+0x5a>
 8001358:	2001      	movs	r0, #1
 800135a:	45c4      	cmp	ip, r8
 800135c:	d109      	bne.n	8001372 <__eqdf2+0x5a>
 800135e:	4559      	cmp	r1, fp
 8001360:	d017      	beq.n	8001392 <__eqdf2+0x7a>
 8001362:	2c00      	cmp	r4, #0
 8001364:	d105      	bne.n	8001372 <__eqdf2+0x5a>
 8001366:	0030      	movs	r0, r6
 8001368:	4328      	orrs	r0, r5
 800136a:	1e43      	subs	r3, r0, #1
 800136c:	4198      	sbcs	r0, r3
 800136e:	e000      	b.n	8001372 <__eqdf2+0x5a>
 8001370:	2001      	movs	r0, #1
 8001372:	bcf0      	pop	{r4, r5, r6, r7}
 8001374:	46bb      	mov	fp, r7
 8001376:	46b2      	mov	sl, r6
 8001378:	46a9      	mov	r9, r5
 800137a:	46a0      	mov	r8, r4
 800137c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800137e:	0033      	movs	r3, r6
 8001380:	2001      	movs	r0, #1
 8001382:	432b      	orrs	r3, r5
 8001384:	d1f5      	bne.n	8001372 <__eqdf2+0x5a>
 8001386:	42a2      	cmp	r2, r4
 8001388:	d1f3      	bne.n	8001372 <__eqdf2+0x5a>
 800138a:	464b      	mov	r3, r9
 800138c:	433b      	orrs	r3, r7
 800138e:	d1f0      	bne.n	8001372 <__eqdf2+0x5a>
 8001390:	e7e2      	b.n	8001358 <__eqdf2+0x40>
 8001392:	2000      	movs	r0, #0
 8001394:	e7ed      	b.n	8001372 <__eqdf2+0x5a>
 8001396:	46c0      	nop			; (mov r8, r8)
 8001398:	000007ff 	.word	0x000007ff

0800139c <__gedf2>:
 800139c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800139e:	4647      	mov	r7, r8
 80013a0:	46ce      	mov	lr, r9
 80013a2:	0004      	movs	r4, r0
 80013a4:	0018      	movs	r0, r3
 80013a6:	0016      	movs	r6, r2
 80013a8:	031b      	lsls	r3, r3, #12
 80013aa:	0b1b      	lsrs	r3, r3, #12
 80013ac:	4d2d      	ldr	r5, [pc, #180]	; (8001464 <__gedf2+0xc8>)
 80013ae:	004a      	lsls	r2, r1, #1
 80013b0:	4699      	mov	r9, r3
 80013b2:	b580      	push	{r7, lr}
 80013b4:	0043      	lsls	r3, r0, #1
 80013b6:	030f      	lsls	r7, r1, #12
 80013b8:	46a4      	mov	ip, r4
 80013ba:	46b0      	mov	r8, r6
 80013bc:	0b3f      	lsrs	r7, r7, #12
 80013be:	0d52      	lsrs	r2, r2, #21
 80013c0:	0fc9      	lsrs	r1, r1, #31
 80013c2:	0d5b      	lsrs	r3, r3, #21
 80013c4:	0fc0      	lsrs	r0, r0, #31
 80013c6:	42aa      	cmp	r2, r5
 80013c8:	d021      	beq.n	800140e <__gedf2+0x72>
 80013ca:	42ab      	cmp	r3, r5
 80013cc:	d013      	beq.n	80013f6 <__gedf2+0x5a>
 80013ce:	2a00      	cmp	r2, #0
 80013d0:	d122      	bne.n	8001418 <__gedf2+0x7c>
 80013d2:	433c      	orrs	r4, r7
 80013d4:	2b00      	cmp	r3, #0
 80013d6:	d102      	bne.n	80013de <__gedf2+0x42>
 80013d8:	464d      	mov	r5, r9
 80013da:	432e      	orrs	r6, r5
 80013dc:	d022      	beq.n	8001424 <__gedf2+0x88>
 80013de:	2c00      	cmp	r4, #0
 80013e0:	d010      	beq.n	8001404 <__gedf2+0x68>
 80013e2:	4281      	cmp	r1, r0
 80013e4:	d022      	beq.n	800142c <__gedf2+0x90>
 80013e6:	2002      	movs	r0, #2
 80013e8:	3901      	subs	r1, #1
 80013ea:	4008      	ands	r0, r1
 80013ec:	3801      	subs	r0, #1
 80013ee:	bcc0      	pop	{r6, r7}
 80013f0:	46b9      	mov	r9, r7
 80013f2:	46b0      	mov	r8, r6
 80013f4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80013f6:	464d      	mov	r5, r9
 80013f8:	432e      	orrs	r6, r5
 80013fa:	d129      	bne.n	8001450 <__gedf2+0xb4>
 80013fc:	2a00      	cmp	r2, #0
 80013fe:	d1f0      	bne.n	80013e2 <__gedf2+0x46>
 8001400:	433c      	orrs	r4, r7
 8001402:	d1ee      	bne.n	80013e2 <__gedf2+0x46>
 8001404:	2800      	cmp	r0, #0
 8001406:	d1f2      	bne.n	80013ee <__gedf2+0x52>
 8001408:	2001      	movs	r0, #1
 800140a:	4240      	negs	r0, r0
 800140c:	e7ef      	b.n	80013ee <__gedf2+0x52>
 800140e:	003d      	movs	r5, r7
 8001410:	4325      	orrs	r5, r4
 8001412:	d11d      	bne.n	8001450 <__gedf2+0xb4>
 8001414:	4293      	cmp	r3, r2
 8001416:	d0ee      	beq.n	80013f6 <__gedf2+0x5a>
 8001418:	2b00      	cmp	r3, #0
 800141a:	d1e2      	bne.n	80013e2 <__gedf2+0x46>
 800141c:	464c      	mov	r4, r9
 800141e:	4326      	orrs	r6, r4
 8001420:	d1df      	bne.n	80013e2 <__gedf2+0x46>
 8001422:	e7e0      	b.n	80013e6 <__gedf2+0x4a>
 8001424:	2000      	movs	r0, #0
 8001426:	2c00      	cmp	r4, #0
 8001428:	d0e1      	beq.n	80013ee <__gedf2+0x52>
 800142a:	e7dc      	b.n	80013e6 <__gedf2+0x4a>
 800142c:	429a      	cmp	r2, r3
 800142e:	dc0a      	bgt.n	8001446 <__gedf2+0xaa>
 8001430:	dbe8      	blt.n	8001404 <__gedf2+0x68>
 8001432:	454f      	cmp	r7, r9
 8001434:	d8d7      	bhi.n	80013e6 <__gedf2+0x4a>
 8001436:	d00e      	beq.n	8001456 <__gedf2+0xba>
 8001438:	2000      	movs	r0, #0
 800143a:	454f      	cmp	r7, r9
 800143c:	d2d7      	bcs.n	80013ee <__gedf2+0x52>
 800143e:	2900      	cmp	r1, #0
 8001440:	d0e2      	beq.n	8001408 <__gedf2+0x6c>
 8001442:	0008      	movs	r0, r1
 8001444:	e7d3      	b.n	80013ee <__gedf2+0x52>
 8001446:	4243      	negs	r3, r0
 8001448:	4158      	adcs	r0, r3
 800144a:	0040      	lsls	r0, r0, #1
 800144c:	3801      	subs	r0, #1
 800144e:	e7ce      	b.n	80013ee <__gedf2+0x52>
 8001450:	2002      	movs	r0, #2
 8001452:	4240      	negs	r0, r0
 8001454:	e7cb      	b.n	80013ee <__gedf2+0x52>
 8001456:	45c4      	cmp	ip, r8
 8001458:	d8c5      	bhi.n	80013e6 <__gedf2+0x4a>
 800145a:	2000      	movs	r0, #0
 800145c:	45c4      	cmp	ip, r8
 800145e:	d2c6      	bcs.n	80013ee <__gedf2+0x52>
 8001460:	e7ed      	b.n	800143e <__gedf2+0xa2>
 8001462:	46c0      	nop			; (mov r8, r8)
 8001464:	000007ff 	.word	0x000007ff

08001468 <__ledf2>:
 8001468:	b5f0      	push	{r4, r5, r6, r7, lr}
 800146a:	4647      	mov	r7, r8
 800146c:	46ce      	mov	lr, r9
 800146e:	0004      	movs	r4, r0
 8001470:	0018      	movs	r0, r3
 8001472:	0016      	movs	r6, r2
 8001474:	031b      	lsls	r3, r3, #12
 8001476:	0b1b      	lsrs	r3, r3, #12
 8001478:	4d2c      	ldr	r5, [pc, #176]	; (800152c <__ledf2+0xc4>)
 800147a:	004a      	lsls	r2, r1, #1
 800147c:	4699      	mov	r9, r3
 800147e:	b580      	push	{r7, lr}
 8001480:	0043      	lsls	r3, r0, #1
 8001482:	030f      	lsls	r7, r1, #12
 8001484:	46a4      	mov	ip, r4
 8001486:	46b0      	mov	r8, r6
 8001488:	0b3f      	lsrs	r7, r7, #12
 800148a:	0d52      	lsrs	r2, r2, #21
 800148c:	0fc9      	lsrs	r1, r1, #31
 800148e:	0d5b      	lsrs	r3, r3, #21
 8001490:	0fc0      	lsrs	r0, r0, #31
 8001492:	42aa      	cmp	r2, r5
 8001494:	d00d      	beq.n	80014b2 <__ledf2+0x4a>
 8001496:	42ab      	cmp	r3, r5
 8001498:	d010      	beq.n	80014bc <__ledf2+0x54>
 800149a:	2a00      	cmp	r2, #0
 800149c:	d127      	bne.n	80014ee <__ledf2+0x86>
 800149e:	433c      	orrs	r4, r7
 80014a0:	2b00      	cmp	r3, #0
 80014a2:	d111      	bne.n	80014c8 <__ledf2+0x60>
 80014a4:	464d      	mov	r5, r9
 80014a6:	432e      	orrs	r6, r5
 80014a8:	d10e      	bne.n	80014c8 <__ledf2+0x60>
 80014aa:	2000      	movs	r0, #0
 80014ac:	2c00      	cmp	r4, #0
 80014ae:	d015      	beq.n	80014dc <__ledf2+0x74>
 80014b0:	e00e      	b.n	80014d0 <__ledf2+0x68>
 80014b2:	003d      	movs	r5, r7
 80014b4:	4325      	orrs	r5, r4
 80014b6:	d110      	bne.n	80014da <__ledf2+0x72>
 80014b8:	4293      	cmp	r3, r2
 80014ba:	d118      	bne.n	80014ee <__ledf2+0x86>
 80014bc:	464d      	mov	r5, r9
 80014be:	432e      	orrs	r6, r5
 80014c0:	d10b      	bne.n	80014da <__ledf2+0x72>
 80014c2:	2a00      	cmp	r2, #0
 80014c4:	d102      	bne.n	80014cc <__ledf2+0x64>
 80014c6:	433c      	orrs	r4, r7
 80014c8:	2c00      	cmp	r4, #0
 80014ca:	d00b      	beq.n	80014e4 <__ledf2+0x7c>
 80014cc:	4281      	cmp	r1, r0
 80014ce:	d014      	beq.n	80014fa <__ledf2+0x92>
 80014d0:	2002      	movs	r0, #2
 80014d2:	3901      	subs	r1, #1
 80014d4:	4008      	ands	r0, r1
 80014d6:	3801      	subs	r0, #1
 80014d8:	e000      	b.n	80014dc <__ledf2+0x74>
 80014da:	2002      	movs	r0, #2
 80014dc:	bcc0      	pop	{r6, r7}
 80014de:	46b9      	mov	r9, r7
 80014e0:	46b0      	mov	r8, r6
 80014e2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80014e4:	2800      	cmp	r0, #0
 80014e6:	d1f9      	bne.n	80014dc <__ledf2+0x74>
 80014e8:	2001      	movs	r0, #1
 80014ea:	4240      	negs	r0, r0
 80014ec:	e7f6      	b.n	80014dc <__ledf2+0x74>
 80014ee:	2b00      	cmp	r3, #0
 80014f0:	d1ec      	bne.n	80014cc <__ledf2+0x64>
 80014f2:	464c      	mov	r4, r9
 80014f4:	4326      	orrs	r6, r4
 80014f6:	d1e9      	bne.n	80014cc <__ledf2+0x64>
 80014f8:	e7ea      	b.n	80014d0 <__ledf2+0x68>
 80014fa:	429a      	cmp	r2, r3
 80014fc:	dd04      	ble.n	8001508 <__ledf2+0xa0>
 80014fe:	4243      	negs	r3, r0
 8001500:	4158      	adcs	r0, r3
 8001502:	0040      	lsls	r0, r0, #1
 8001504:	3801      	subs	r0, #1
 8001506:	e7e9      	b.n	80014dc <__ledf2+0x74>
 8001508:	429a      	cmp	r2, r3
 800150a:	dbeb      	blt.n	80014e4 <__ledf2+0x7c>
 800150c:	454f      	cmp	r7, r9
 800150e:	d8df      	bhi.n	80014d0 <__ledf2+0x68>
 8001510:	d006      	beq.n	8001520 <__ledf2+0xb8>
 8001512:	2000      	movs	r0, #0
 8001514:	454f      	cmp	r7, r9
 8001516:	d2e1      	bcs.n	80014dc <__ledf2+0x74>
 8001518:	2900      	cmp	r1, #0
 800151a:	d0e5      	beq.n	80014e8 <__ledf2+0x80>
 800151c:	0008      	movs	r0, r1
 800151e:	e7dd      	b.n	80014dc <__ledf2+0x74>
 8001520:	45c4      	cmp	ip, r8
 8001522:	d8d5      	bhi.n	80014d0 <__ledf2+0x68>
 8001524:	2000      	movs	r0, #0
 8001526:	45c4      	cmp	ip, r8
 8001528:	d2d8      	bcs.n	80014dc <__ledf2+0x74>
 800152a:	e7f5      	b.n	8001518 <__ledf2+0xb0>
 800152c:	000007ff 	.word	0x000007ff

08001530 <__aeabi_dmul>:
 8001530:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001532:	4645      	mov	r5, r8
 8001534:	46de      	mov	lr, fp
 8001536:	4657      	mov	r7, sl
 8001538:	464e      	mov	r6, r9
 800153a:	b5e0      	push	{r5, r6, r7, lr}
 800153c:	001f      	movs	r7, r3
 800153e:	030b      	lsls	r3, r1, #12
 8001540:	0b1b      	lsrs	r3, r3, #12
 8001542:	469b      	mov	fp, r3
 8001544:	004d      	lsls	r5, r1, #1
 8001546:	0fcb      	lsrs	r3, r1, #31
 8001548:	0004      	movs	r4, r0
 800154a:	4691      	mov	r9, r2
 800154c:	4698      	mov	r8, r3
 800154e:	b087      	sub	sp, #28
 8001550:	0d6d      	lsrs	r5, r5, #21
 8001552:	d100      	bne.n	8001556 <__aeabi_dmul+0x26>
 8001554:	e1cd      	b.n	80018f2 <__aeabi_dmul+0x3c2>
 8001556:	4bce      	ldr	r3, [pc, #824]	; (8001890 <__aeabi_dmul+0x360>)
 8001558:	429d      	cmp	r5, r3
 800155a:	d100      	bne.n	800155e <__aeabi_dmul+0x2e>
 800155c:	e1e9      	b.n	8001932 <__aeabi_dmul+0x402>
 800155e:	465a      	mov	r2, fp
 8001560:	0f43      	lsrs	r3, r0, #29
 8001562:	00d2      	lsls	r2, r2, #3
 8001564:	4313      	orrs	r3, r2
 8001566:	2280      	movs	r2, #128	; 0x80
 8001568:	0412      	lsls	r2, r2, #16
 800156a:	431a      	orrs	r2, r3
 800156c:	00c3      	lsls	r3, r0, #3
 800156e:	469a      	mov	sl, r3
 8001570:	4bc8      	ldr	r3, [pc, #800]	; (8001894 <__aeabi_dmul+0x364>)
 8001572:	4693      	mov	fp, r2
 8001574:	469c      	mov	ip, r3
 8001576:	2300      	movs	r3, #0
 8001578:	2600      	movs	r6, #0
 800157a:	4465      	add	r5, ip
 800157c:	9300      	str	r3, [sp, #0]
 800157e:	033c      	lsls	r4, r7, #12
 8001580:	007b      	lsls	r3, r7, #1
 8001582:	4648      	mov	r0, r9
 8001584:	0b24      	lsrs	r4, r4, #12
 8001586:	0d5b      	lsrs	r3, r3, #21
 8001588:	0fff      	lsrs	r7, r7, #31
 800158a:	2b00      	cmp	r3, #0
 800158c:	d100      	bne.n	8001590 <__aeabi_dmul+0x60>
 800158e:	e189      	b.n	80018a4 <__aeabi_dmul+0x374>
 8001590:	4abf      	ldr	r2, [pc, #764]	; (8001890 <__aeabi_dmul+0x360>)
 8001592:	4293      	cmp	r3, r2
 8001594:	d019      	beq.n	80015ca <__aeabi_dmul+0x9a>
 8001596:	0f42      	lsrs	r2, r0, #29
 8001598:	00e4      	lsls	r4, r4, #3
 800159a:	4322      	orrs	r2, r4
 800159c:	2480      	movs	r4, #128	; 0x80
 800159e:	0424      	lsls	r4, r4, #16
 80015a0:	4314      	orrs	r4, r2
 80015a2:	4abc      	ldr	r2, [pc, #752]	; (8001894 <__aeabi_dmul+0x364>)
 80015a4:	2100      	movs	r1, #0
 80015a6:	4694      	mov	ip, r2
 80015a8:	4642      	mov	r2, r8
 80015aa:	4463      	add	r3, ip
 80015ac:	195b      	adds	r3, r3, r5
 80015ae:	9301      	str	r3, [sp, #4]
 80015b0:	9b01      	ldr	r3, [sp, #4]
 80015b2:	407a      	eors	r2, r7
 80015b4:	3301      	adds	r3, #1
 80015b6:	00c0      	lsls	r0, r0, #3
 80015b8:	b2d2      	uxtb	r2, r2
 80015ba:	9302      	str	r3, [sp, #8]
 80015bc:	2e0a      	cmp	r6, #10
 80015be:	dd1c      	ble.n	80015fa <__aeabi_dmul+0xca>
 80015c0:	003a      	movs	r2, r7
 80015c2:	2e0b      	cmp	r6, #11
 80015c4:	d05e      	beq.n	8001684 <__aeabi_dmul+0x154>
 80015c6:	4647      	mov	r7, r8
 80015c8:	e056      	b.n	8001678 <__aeabi_dmul+0x148>
 80015ca:	4649      	mov	r1, r9
 80015cc:	4bb0      	ldr	r3, [pc, #704]	; (8001890 <__aeabi_dmul+0x360>)
 80015ce:	4321      	orrs	r1, r4
 80015d0:	18eb      	adds	r3, r5, r3
 80015d2:	9301      	str	r3, [sp, #4]
 80015d4:	2900      	cmp	r1, #0
 80015d6:	d12a      	bne.n	800162e <__aeabi_dmul+0xfe>
 80015d8:	2080      	movs	r0, #128	; 0x80
 80015da:	2202      	movs	r2, #2
 80015dc:	0100      	lsls	r0, r0, #4
 80015de:	002b      	movs	r3, r5
 80015e0:	4684      	mov	ip, r0
 80015e2:	4316      	orrs	r6, r2
 80015e4:	4642      	mov	r2, r8
 80015e6:	4463      	add	r3, ip
 80015e8:	407a      	eors	r2, r7
 80015ea:	b2d2      	uxtb	r2, r2
 80015ec:	9302      	str	r3, [sp, #8]
 80015ee:	2e0a      	cmp	r6, #10
 80015f0:	dd00      	ble.n	80015f4 <__aeabi_dmul+0xc4>
 80015f2:	e231      	b.n	8001a58 <__aeabi_dmul+0x528>
 80015f4:	2000      	movs	r0, #0
 80015f6:	2400      	movs	r4, #0
 80015f8:	2102      	movs	r1, #2
 80015fa:	2e02      	cmp	r6, #2
 80015fc:	dc26      	bgt.n	800164c <__aeabi_dmul+0x11c>
 80015fe:	3e01      	subs	r6, #1
 8001600:	2e01      	cmp	r6, #1
 8001602:	d852      	bhi.n	80016aa <__aeabi_dmul+0x17a>
 8001604:	2902      	cmp	r1, #2
 8001606:	d04c      	beq.n	80016a2 <__aeabi_dmul+0x172>
 8001608:	2901      	cmp	r1, #1
 800160a:	d000      	beq.n	800160e <__aeabi_dmul+0xde>
 800160c:	e118      	b.n	8001840 <__aeabi_dmul+0x310>
 800160e:	2300      	movs	r3, #0
 8001610:	2400      	movs	r4, #0
 8001612:	2500      	movs	r5, #0
 8001614:	051b      	lsls	r3, r3, #20
 8001616:	4323      	orrs	r3, r4
 8001618:	07d2      	lsls	r2, r2, #31
 800161a:	4313      	orrs	r3, r2
 800161c:	0028      	movs	r0, r5
 800161e:	0019      	movs	r1, r3
 8001620:	b007      	add	sp, #28
 8001622:	bcf0      	pop	{r4, r5, r6, r7}
 8001624:	46bb      	mov	fp, r7
 8001626:	46b2      	mov	sl, r6
 8001628:	46a9      	mov	r9, r5
 800162a:	46a0      	mov	r8, r4
 800162c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800162e:	2180      	movs	r1, #128	; 0x80
 8001630:	2203      	movs	r2, #3
 8001632:	0109      	lsls	r1, r1, #4
 8001634:	002b      	movs	r3, r5
 8001636:	468c      	mov	ip, r1
 8001638:	4316      	orrs	r6, r2
 800163a:	4642      	mov	r2, r8
 800163c:	4463      	add	r3, ip
 800163e:	407a      	eors	r2, r7
 8001640:	b2d2      	uxtb	r2, r2
 8001642:	9302      	str	r3, [sp, #8]
 8001644:	2e0a      	cmp	r6, #10
 8001646:	dd00      	ble.n	800164a <__aeabi_dmul+0x11a>
 8001648:	e228      	b.n	8001a9c <__aeabi_dmul+0x56c>
 800164a:	2103      	movs	r1, #3
 800164c:	2501      	movs	r5, #1
 800164e:	40b5      	lsls	r5, r6
 8001650:	46ac      	mov	ip, r5
 8001652:	26a6      	movs	r6, #166	; 0xa6
 8001654:	4663      	mov	r3, ip
 8001656:	00f6      	lsls	r6, r6, #3
 8001658:	4035      	ands	r5, r6
 800165a:	4233      	tst	r3, r6
 800165c:	d10b      	bne.n	8001676 <__aeabi_dmul+0x146>
 800165e:	2690      	movs	r6, #144	; 0x90
 8001660:	00b6      	lsls	r6, r6, #2
 8001662:	4233      	tst	r3, r6
 8001664:	d118      	bne.n	8001698 <__aeabi_dmul+0x168>
 8001666:	3eb9      	subs	r6, #185	; 0xb9
 8001668:	3eff      	subs	r6, #255	; 0xff
 800166a:	421e      	tst	r6, r3
 800166c:	d01d      	beq.n	80016aa <__aeabi_dmul+0x17a>
 800166e:	46a3      	mov	fp, r4
 8001670:	4682      	mov	sl, r0
 8001672:	9100      	str	r1, [sp, #0]
 8001674:	e000      	b.n	8001678 <__aeabi_dmul+0x148>
 8001676:	0017      	movs	r7, r2
 8001678:	9900      	ldr	r1, [sp, #0]
 800167a:	003a      	movs	r2, r7
 800167c:	2902      	cmp	r1, #2
 800167e:	d010      	beq.n	80016a2 <__aeabi_dmul+0x172>
 8001680:	465c      	mov	r4, fp
 8001682:	4650      	mov	r0, sl
 8001684:	2903      	cmp	r1, #3
 8001686:	d1bf      	bne.n	8001608 <__aeabi_dmul+0xd8>
 8001688:	2380      	movs	r3, #128	; 0x80
 800168a:	031b      	lsls	r3, r3, #12
 800168c:	431c      	orrs	r4, r3
 800168e:	0324      	lsls	r4, r4, #12
 8001690:	0005      	movs	r5, r0
 8001692:	4b7f      	ldr	r3, [pc, #508]	; (8001890 <__aeabi_dmul+0x360>)
 8001694:	0b24      	lsrs	r4, r4, #12
 8001696:	e7bd      	b.n	8001614 <__aeabi_dmul+0xe4>
 8001698:	2480      	movs	r4, #128	; 0x80
 800169a:	2200      	movs	r2, #0
 800169c:	4b7c      	ldr	r3, [pc, #496]	; (8001890 <__aeabi_dmul+0x360>)
 800169e:	0324      	lsls	r4, r4, #12
 80016a0:	e7b8      	b.n	8001614 <__aeabi_dmul+0xe4>
 80016a2:	2400      	movs	r4, #0
 80016a4:	2500      	movs	r5, #0
 80016a6:	4b7a      	ldr	r3, [pc, #488]	; (8001890 <__aeabi_dmul+0x360>)
 80016a8:	e7b4      	b.n	8001614 <__aeabi_dmul+0xe4>
 80016aa:	4653      	mov	r3, sl
 80016ac:	041e      	lsls	r6, r3, #16
 80016ae:	0c36      	lsrs	r6, r6, #16
 80016b0:	0c1f      	lsrs	r7, r3, #16
 80016b2:	0033      	movs	r3, r6
 80016b4:	0c01      	lsrs	r1, r0, #16
 80016b6:	0400      	lsls	r0, r0, #16
 80016b8:	0c00      	lsrs	r0, r0, #16
 80016ba:	4343      	muls	r3, r0
 80016bc:	4698      	mov	r8, r3
 80016be:	0003      	movs	r3, r0
 80016c0:	437b      	muls	r3, r7
 80016c2:	4699      	mov	r9, r3
 80016c4:	0033      	movs	r3, r6
 80016c6:	434b      	muls	r3, r1
 80016c8:	469c      	mov	ip, r3
 80016ca:	4643      	mov	r3, r8
 80016cc:	000d      	movs	r5, r1
 80016ce:	0c1b      	lsrs	r3, r3, #16
 80016d0:	469a      	mov	sl, r3
 80016d2:	437d      	muls	r5, r7
 80016d4:	44cc      	add	ip, r9
 80016d6:	44d4      	add	ip, sl
 80016d8:	9500      	str	r5, [sp, #0]
 80016da:	45e1      	cmp	r9, ip
 80016dc:	d904      	bls.n	80016e8 <__aeabi_dmul+0x1b8>
 80016de:	2380      	movs	r3, #128	; 0x80
 80016e0:	025b      	lsls	r3, r3, #9
 80016e2:	4699      	mov	r9, r3
 80016e4:	444d      	add	r5, r9
 80016e6:	9500      	str	r5, [sp, #0]
 80016e8:	4663      	mov	r3, ip
 80016ea:	0c1b      	lsrs	r3, r3, #16
 80016ec:	001d      	movs	r5, r3
 80016ee:	4663      	mov	r3, ip
 80016f0:	041b      	lsls	r3, r3, #16
 80016f2:	469c      	mov	ip, r3
 80016f4:	4643      	mov	r3, r8
 80016f6:	041b      	lsls	r3, r3, #16
 80016f8:	0c1b      	lsrs	r3, r3, #16
 80016fa:	4698      	mov	r8, r3
 80016fc:	4663      	mov	r3, ip
 80016fe:	4443      	add	r3, r8
 8001700:	9303      	str	r3, [sp, #12]
 8001702:	0c23      	lsrs	r3, r4, #16
 8001704:	4698      	mov	r8, r3
 8001706:	0033      	movs	r3, r6
 8001708:	0424      	lsls	r4, r4, #16
 800170a:	0c24      	lsrs	r4, r4, #16
 800170c:	4363      	muls	r3, r4
 800170e:	469c      	mov	ip, r3
 8001710:	0023      	movs	r3, r4
 8001712:	437b      	muls	r3, r7
 8001714:	4699      	mov	r9, r3
 8001716:	4643      	mov	r3, r8
 8001718:	435e      	muls	r6, r3
 800171a:	435f      	muls	r7, r3
 800171c:	444e      	add	r6, r9
 800171e:	4663      	mov	r3, ip
 8001720:	46b2      	mov	sl, r6
 8001722:	0c1e      	lsrs	r6, r3, #16
 8001724:	4456      	add	r6, sl
 8001726:	45b1      	cmp	r9, r6
 8001728:	d903      	bls.n	8001732 <__aeabi_dmul+0x202>
 800172a:	2380      	movs	r3, #128	; 0x80
 800172c:	025b      	lsls	r3, r3, #9
 800172e:	4699      	mov	r9, r3
 8001730:	444f      	add	r7, r9
 8001732:	0c33      	lsrs	r3, r6, #16
 8001734:	4699      	mov	r9, r3
 8001736:	003b      	movs	r3, r7
 8001738:	444b      	add	r3, r9
 800173a:	9305      	str	r3, [sp, #20]
 800173c:	4663      	mov	r3, ip
 800173e:	46ac      	mov	ip, r5
 8001740:	041f      	lsls	r7, r3, #16
 8001742:	0c3f      	lsrs	r7, r7, #16
 8001744:	0436      	lsls	r6, r6, #16
 8001746:	19f6      	adds	r6, r6, r7
 8001748:	44b4      	add	ip, r6
 800174a:	4663      	mov	r3, ip
 800174c:	9304      	str	r3, [sp, #16]
 800174e:	465b      	mov	r3, fp
 8001750:	0c1b      	lsrs	r3, r3, #16
 8001752:	469c      	mov	ip, r3
 8001754:	465b      	mov	r3, fp
 8001756:	041f      	lsls	r7, r3, #16
 8001758:	0c3f      	lsrs	r7, r7, #16
 800175a:	003b      	movs	r3, r7
 800175c:	4343      	muls	r3, r0
 800175e:	4699      	mov	r9, r3
 8001760:	4663      	mov	r3, ip
 8001762:	4343      	muls	r3, r0
 8001764:	469a      	mov	sl, r3
 8001766:	464b      	mov	r3, r9
 8001768:	4660      	mov	r0, ip
 800176a:	0c1b      	lsrs	r3, r3, #16
 800176c:	469b      	mov	fp, r3
 800176e:	4348      	muls	r0, r1
 8001770:	4379      	muls	r1, r7
 8001772:	4451      	add	r1, sl
 8001774:	4459      	add	r1, fp
 8001776:	458a      	cmp	sl, r1
 8001778:	d903      	bls.n	8001782 <__aeabi_dmul+0x252>
 800177a:	2380      	movs	r3, #128	; 0x80
 800177c:	025b      	lsls	r3, r3, #9
 800177e:	469a      	mov	sl, r3
 8001780:	4450      	add	r0, sl
 8001782:	0c0b      	lsrs	r3, r1, #16
 8001784:	469a      	mov	sl, r3
 8001786:	464b      	mov	r3, r9
 8001788:	041b      	lsls	r3, r3, #16
 800178a:	0c1b      	lsrs	r3, r3, #16
 800178c:	4699      	mov	r9, r3
 800178e:	003b      	movs	r3, r7
 8001790:	4363      	muls	r3, r4
 8001792:	0409      	lsls	r1, r1, #16
 8001794:	4645      	mov	r5, r8
 8001796:	4449      	add	r1, r9
 8001798:	4699      	mov	r9, r3
 800179a:	4663      	mov	r3, ip
 800179c:	435c      	muls	r4, r3
 800179e:	436b      	muls	r3, r5
 80017a0:	469c      	mov	ip, r3
 80017a2:	464b      	mov	r3, r9
 80017a4:	0c1b      	lsrs	r3, r3, #16
 80017a6:	4698      	mov	r8, r3
 80017a8:	436f      	muls	r7, r5
 80017aa:	193f      	adds	r7, r7, r4
 80017ac:	4447      	add	r7, r8
 80017ae:	4450      	add	r0, sl
 80017b0:	42bc      	cmp	r4, r7
 80017b2:	d903      	bls.n	80017bc <__aeabi_dmul+0x28c>
 80017b4:	2380      	movs	r3, #128	; 0x80
 80017b6:	025b      	lsls	r3, r3, #9
 80017b8:	4698      	mov	r8, r3
 80017ba:	44c4      	add	ip, r8
 80017bc:	9b04      	ldr	r3, [sp, #16]
 80017be:	9d00      	ldr	r5, [sp, #0]
 80017c0:	4698      	mov	r8, r3
 80017c2:	4445      	add	r5, r8
 80017c4:	42b5      	cmp	r5, r6
 80017c6:	41b6      	sbcs	r6, r6
 80017c8:	4273      	negs	r3, r6
 80017ca:	4698      	mov	r8, r3
 80017cc:	464b      	mov	r3, r9
 80017ce:	041e      	lsls	r6, r3, #16
 80017d0:	9b05      	ldr	r3, [sp, #20]
 80017d2:	043c      	lsls	r4, r7, #16
 80017d4:	4699      	mov	r9, r3
 80017d6:	0c36      	lsrs	r6, r6, #16
 80017d8:	19a4      	adds	r4, r4, r6
 80017da:	444c      	add	r4, r9
 80017dc:	46a1      	mov	r9, r4
 80017de:	4683      	mov	fp, r0
 80017e0:	186e      	adds	r6, r5, r1
 80017e2:	44c1      	add	r9, r8
 80017e4:	428e      	cmp	r6, r1
 80017e6:	4189      	sbcs	r1, r1
 80017e8:	44cb      	add	fp, r9
 80017ea:	465d      	mov	r5, fp
 80017ec:	4249      	negs	r1, r1
 80017ee:	186d      	adds	r5, r5, r1
 80017f0:	429c      	cmp	r4, r3
 80017f2:	41a4      	sbcs	r4, r4
 80017f4:	45c1      	cmp	r9, r8
 80017f6:	419b      	sbcs	r3, r3
 80017f8:	4583      	cmp	fp, r0
 80017fa:	4180      	sbcs	r0, r0
 80017fc:	428d      	cmp	r5, r1
 80017fe:	4189      	sbcs	r1, r1
 8001800:	425b      	negs	r3, r3
 8001802:	4264      	negs	r4, r4
 8001804:	431c      	orrs	r4, r3
 8001806:	4240      	negs	r0, r0
 8001808:	9b03      	ldr	r3, [sp, #12]
 800180a:	4249      	negs	r1, r1
 800180c:	4301      	orrs	r1, r0
 800180e:	0270      	lsls	r0, r6, #9
 8001810:	0c3f      	lsrs	r7, r7, #16
 8001812:	4318      	orrs	r0, r3
 8001814:	19e4      	adds	r4, r4, r7
 8001816:	1e47      	subs	r7, r0, #1
 8001818:	41b8      	sbcs	r0, r7
 800181a:	1864      	adds	r4, r4, r1
 800181c:	4464      	add	r4, ip
 800181e:	0df6      	lsrs	r6, r6, #23
 8001820:	0261      	lsls	r1, r4, #9
 8001822:	4330      	orrs	r0, r6
 8001824:	0dec      	lsrs	r4, r5, #23
 8001826:	026e      	lsls	r6, r5, #9
 8001828:	430c      	orrs	r4, r1
 800182a:	4330      	orrs	r0, r6
 800182c:	01c9      	lsls	r1, r1, #7
 800182e:	d400      	bmi.n	8001832 <__aeabi_dmul+0x302>
 8001830:	e0f1      	b.n	8001a16 <__aeabi_dmul+0x4e6>
 8001832:	2101      	movs	r1, #1
 8001834:	0843      	lsrs	r3, r0, #1
 8001836:	4001      	ands	r1, r0
 8001838:	430b      	orrs	r3, r1
 800183a:	07e0      	lsls	r0, r4, #31
 800183c:	4318      	orrs	r0, r3
 800183e:	0864      	lsrs	r4, r4, #1
 8001840:	4915      	ldr	r1, [pc, #84]	; (8001898 <__aeabi_dmul+0x368>)
 8001842:	9b02      	ldr	r3, [sp, #8]
 8001844:	468c      	mov	ip, r1
 8001846:	4463      	add	r3, ip
 8001848:	2b00      	cmp	r3, #0
 800184a:	dc00      	bgt.n	800184e <__aeabi_dmul+0x31e>
 800184c:	e097      	b.n	800197e <__aeabi_dmul+0x44e>
 800184e:	0741      	lsls	r1, r0, #29
 8001850:	d009      	beq.n	8001866 <__aeabi_dmul+0x336>
 8001852:	210f      	movs	r1, #15
 8001854:	4001      	ands	r1, r0
 8001856:	2904      	cmp	r1, #4
 8001858:	d005      	beq.n	8001866 <__aeabi_dmul+0x336>
 800185a:	1d01      	adds	r1, r0, #4
 800185c:	4281      	cmp	r1, r0
 800185e:	4180      	sbcs	r0, r0
 8001860:	4240      	negs	r0, r0
 8001862:	1824      	adds	r4, r4, r0
 8001864:	0008      	movs	r0, r1
 8001866:	01e1      	lsls	r1, r4, #7
 8001868:	d506      	bpl.n	8001878 <__aeabi_dmul+0x348>
 800186a:	2180      	movs	r1, #128	; 0x80
 800186c:	00c9      	lsls	r1, r1, #3
 800186e:	468c      	mov	ip, r1
 8001870:	4b0a      	ldr	r3, [pc, #40]	; (800189c <__aeabi_dmul+0x36c>)
 8001872:	401c      	ands	r4, r3
 8001874:	9b02      	ldr	r3, [sp, #8]
 8001876:	4463      	add	r3, ip
 8001878:	4909      	ldr	r1, [pc, #36]	; (80018a0 <__aeabi_dmul+0x370>)
 800187a:	428b      	cmp	r3, r1
 800187c:	dd00      	ble.n	8001880 <__aeabi_dmul+0x350>
 800187e:	e710      	b.n	80016a2 <__aeabi_dmul+0x172>
 8001880:	0761      	lsls	r1, r4, #29
 8001882:	08c5      	lsrs	r5, r0, #3
 8001884:	0264      	lsls	r4, r4, #9
 8001886:	055b      	lsls	r3, r3, #21
 8001888:	430d      	orrs	r5, r1
 800188a:	0b24      	lsrs	r4, r4, #12
 800188c:	0d5b      	lsrs	r3, r3, #21
 800188e:	e6c1      	b.n	8001614 <__aeabi_dmul+0xe4>
 8001890:	000007ff 	.word	0x000007ff
 8001894:	fffffc01 	.word	0xfffffc01
 8001898:	000003ff 	.word	0x000003ff
 800189c:	feffffff 	.word	0xfeffffff
 80018a0:	000007fe 	.word	0x000007fe
 80018a4:	464b      	mov	r3, r9
 80018a6:	4323      	orrs	r3, r4
 80018a8:	d059      	beq.n	800195e <__aeabi_dmul+0x42e>
 80018aa:	2c00      	cmp	r4, #0
 80018ac:	d100      	bne.n	80018b0 <__aeabi_dmul+0x380>
 80018ae:	e0a3      	b.n	80019f8 <__aeabi_dmul+0x4c8>
 80018b0:	0020      	movs	r0, r4
 80018b2:	f000 fd2b 	bl	800230c <__clzsi2>
 80018b6:	0001      	movs	r1, r0
 80018b8:	0003      	movs	r3, r0
 80018ba:	390b      	subs	r1, #11
 80018bc:	221d      	movs	r2, #29
 80018be:	1a52      	subs	r2, r2, r1
 80018c0:	4649      	mov	r1, r9
 80018c2:	0018      	movs	r0, r3
 80018c4:	40d1      	lsrs	r1, r2
 80018c6:	464a      	mov	r2, r9
 80018c8:	3808      	subs	r0, #8
 80018ca:	4082      	lsls	r2, r0
 80018cc:	4084      	lsls	r4, r0
 80018ce:	0010      	movs	r0, r2
 80018d0:	430c      	orrs	r4, r1
 80018d2:	4a74      	ldr	r2, [pc, #464]	; (8001aa4 <__aeabi_dmul+0x574>)
 80018d4:	1aeb      	subs	r3, r5, r3
 80018d6:	4694      	mov	ip, r2
 80018d8:	4642      	mov	r2, r8
 80018da:	4463      	add	r3, ip
 80018dc:	9301      	str	r3, [sp, #4]
 80018de:	9b01      	ldr	r3, [sp, #4]
 80018e0:	407a      	eors	r2, r7
 80018e2:	3301      	adds	r3, #1
 80018e4:	2100      	movs	r1, #0
 80018e6:	b2d2      	uxtb	r2, r2
 80018e8:	9302      	str	r3, [sp, #8]
 80018ea:	2e0a      	cmp	r6, #10
 80018ec:	dd00      	ble.n	80018f0 <__aeabi_dmul+0x3c0>
 80018ee:	e667      	b.n	80015c0 <__aeabi_dmul+0x90>
 80018f0:	e683      	b.n	80015fa <__aeabi_dmul+0xca>
 80018f2:	465b      	mov	r3, fp
 80018f4:	4303      	orrs	r3, r0
 80018f6:	469a      	mov	sl, r3
 80018f8:	d02a      	beq.n	8001950 <__aeabi_dmul+0x420>
 80018fa:	465b      	mov	r3, fp
 80018fc:	2b00      	cmp	r3, #0
 80018fe:	d06d      	beq.n	80019dc <__aeabi_dmul+0x4ac>
 8001900:	4658      	mov	r0, fp
 8001902:	f000 fd03 	bl	800230c <__clzsi2>
 8001906:	0001      	movs	r1, r0
 8001908:	0003      	movs	r3, r0
 800190a:	390b      	subs	r1, #11
 800190c:	221d      	movs	r2, #29
 800190e:	1a52      	subs	r2, r2, r1
 8001910:	0021      	movs	r1, r4
 8001912:	0018      	movs	r0, r3
 8001914:	465d      	mov	r5, fp
 8001916:	40d1      	lsrs	r1, r2
 8001918:	3808      	subs	r0, #8
 800191a:	4085      	lsls	r5, r0
 800191c:	000a      	movs	r2, r1
 800191e:	4084      	lsls	r4, r0
 8001920:	432a      	orrs	r2, r5
 8001922:	4693      	mov	fp, r2
 8001924:	46a2      	mov	sl, r4
 8001926:	4d5f      	ldr	r5, [pc, #380]	; (8001aa4 <__aeabi_dmul+0x574>)
 8001928:	2600      	movs	r6, #0
 800192a:	1aed      	subs	r5, r5, r3
 800192c:	2300      	movs	r3, #0
 800192e:	9300      	str	r3, [sp, #0]
 8001930:	e625      	b.n	800157e <__aeabi_dmul+0x4e>
 8001932:	465b      	mov	r3, fp
 8001934:	4303      	orrs	r3, r0
 8001936:	469a      	mov	sl, r3
 8001938:	d105      	bne.n	8001946 <__aeabi_dmul+0x416>
 800193a:	2300      	movs	r3, #0
 800193c:	469b      	mov	fp, r3
 800193e:	3302      	adds	r3, #2
 8001940:	2608      	movs	r6, #8
 8001942:	9300      	str	r3, [sp, #0]
 8001944:	e61b      	b.n	800157e <__aeabi_dmul+0x4e>
 8001946:	2303      	movs	r3, #3
 8001948:	4682      	mov	sl, r0
 800194a:	260c      	movs	r6, #12
 800194c:	9300      	str	r3, [sp, #0]
 800194e:	e616      	b.n	800157e <__aeabi_dmul+0x4e>
 8001950:	2300      	movs	r3, #0
 8001952:	469b      	mov	fp, r3
 8001954:	3301      	adds	r3, #1
 8001956:	2604      	movs	r6, #4
 8001958:	2500      	movs	r5, #0
 800195a:	9300      	str	r3, [sp, #0]
 800195c:	e60f      	b.n	800157e <__aeabi_dmul+0x4e>
 800195e:	4642      	mov	r2, r8
 8001960:	3301      	adds	r3, #1
 8001962:	9501      	str	r5, [sp, #4]
 8001964:	431e      	orrs	r6, r3
 8001966:	9b01      	ldr	r3, [sp, #4]
 8001968:	407a      	eors	r2, r7
 800196a:	3301      	adds	r3, #1
 800196c:	2400      	movs	r4, #0
 800196e:	2000      	movs	r0, #0
 8001970:	2101      	movs	r1, #1
 8001972:	b2d2      	uxtb	r2, r2
 8001974:	9302      	str	r3, [sp, #8]
 8001976:	2e0a      	cmp	r6, #10
 8001978:	dd00      	ble.n	800197c <__aeabi_dmul+0x44c>
 800197a:	e621      	b.n	80015c0 <__aeabi_dmul+0x90>
 800197c:	e63d      	b.n	80015fa <__aeabi_dmul+0xca>
 800197e:	2101      	movs	r1, #1
 8001980:	1ac9      	subs	r1, r1, r3
 8001982:	2938      	cmp	r1, #56	; 0x38
 8001984:	dd00      	ble.n	8001988 <__aeabi_dmul+0x458>
 8001986:	e642      	b.n	800160e <__aeabi_dmul+0xde>
 8001988:	291f      	cmp	r1, #31
 800198a:	dd47      	ble.n	8001a1c <__aeabi_dmul+0x4ec>
 800198c:	261f      	movs	r6, #31
 800198e:	0025      	movs	r5, r4
 8001990:	4276      	negs	r6, r6
 8001992:	1af3      	subs	r3, r6, r3
 8001994:	40dd      	lsrs	r5, r3
 8001996:	002b      	movs	r3, r5
 8001998:	2920      	cmp	r1, #32
 800199a:	d005      	beq.n	80019a8 <__aeabi_dmul+0x478>
 800199c:	4942      	ldr	r1, [pc, #264]	; (8001aa8 <__aeabi_dmul+0x578>)
 800199e:	9d02      	ldr	r5, [sp, #8]
 80019a0:	468c      	mov	ip, r1
 80019a2:	4465      	add	r5, ip
 80019a4:	40ac      	lsls	r4, r5
 80019a6:	4320      	orrs	r0, r4
 80019a8:	1e41      	subs	r1, r0, #1
 80019aa:	4188      	sbcs	r0, r1
 80019ac:	4318      	orrs	r0, r3
 80019ae:	2307      	movs	r3, #7
 80019b0:	001d      	movs	r5, r3
 80019b2:	2400      	movs	r4, #0
 80019b4:	4005      	ands	r5, r0
 80019b6:	4203      	tst	r3, r0
 80019b8:	d04a      	beq.n	8001a50 <__aeabi_dmul+0x520>
 80019ba:	230f      	movs	r3, #15
 80019bc:	2400      	movs	r4, #0
 80019be:	4003      	ands	r3, r0
 80019c0:	2b04      	cmp	r3, #4
 80019c2:	d042      	beq.n	8001a4a <__aeabi_dmul+0x51a>
 80019c4:	1d03      	adds	r3, r0, #4
 80019c6:	4283      	cmp	r3, r0
 80019c8:	4180      	sbcs	r0, r0
 80019ca:	4240      	negs	r0, r0
 80019cc:	1824      	adds	r4, r4, r0
 80019ce:	0018      	movs	r0, r3
 80019d0:	0223      	lsls	r3, r4, #8
 80019d2:	d53a      	bpl.n	8001a4a <__aeabi_dmul+0x51a>
 80019d4:	2301      	movs	r3, #1
 80019d6:	2400      	movs	r4, #0
 80019d8:	2500      	movs	r5, #0
 80019da:	e61b      	b.n	8001614 <__aeabi_dmul+0xe4>
 80019dc:	f000 fc96 	bl	800230c <__clzsi2>
 80019e0:	0001      	movs	r1, r0
 80019e2:	0003      	movs	r3, r0
 80019e4:	3115      	adds	r1, #21
 80019e6:	3320      	adds	r3, #32
 80019e8:	291c      	cmp	r1, #28
 80019ea:	dd8f      	ble.n	800190c <__aeabi_dmul+0x3dc>
 80019ec:	3808      	subs	r0, #8
 80019ee:	2200      	movs	r2, #0
 80019f0:	4084      	lsls	r4, r0
 80019f2:	4692      	mov	sl, r2
 80019f4:	46a3      	mov	fp, r4
 80019f6:	e796      	b.n	8001926 <__aeabi_dmul+0x3f6>
 80019f8:	f000 fc88 	bl	800230c <__clzsi2>
 80019fc:	0001      	movs	r1, r0
 80019fe:	0003      	movs	r3, r0
 8001a00:	3115      	adds	r1, #21
 8001a02:	3320      	adds	r3, #32
 8001a04:	291c      	cmp	r1, #28
 8001a06:	dc00      	bgt.n	8001a0a <__aeabi_dmul+0x4da>
 8001a08:	e758      	b.n	80018bc <__aeabi_dmul+0x38c>
 8001a0a:	0002      	movs	r2, r0
 8001a0c:	464c      	mov	r4, r9
 8001a0e:	3a08      	subs	r2, #8
 8001a10:	2000      	movs	r0, #0
 8001a12:	4094      	lsls	r4, r2
 8001a14:	e75d      	b.n	80018d2 <__aeabi_dmul+0x3a2>
 8001a16:	9b01      	ldr	r3, [sp, #4]
 8001a18:	9302      	str	r3, [sp, #8]
 8001a1a:	e711      	b.n	8001840 <__aeabi_dmul+0x310>
 8001a1c:	4b23      	ldr	r3, [pc, #140]	; (8001aac <__aeabi_dmul+0x57c>)
 8001a1e:	0026      	movs	r6, r4
 8001a20:	469c      	mov	ip, r3
 8001a22:	0003      	movs	r3, r0
 8001a24:	9d02      	ldr	r5, [sp, #8]
 8001a26:	40cb      	lsrs	r3, r1
 8001a28:	4465      	add	r5, ip
 8001a2a:	40ae      	lsls	r6, r5
 8001a2c:	431e      	orrs	r6, r3
 8001a2e:	0003      	movs	r3, r0
 8001a30:	40ab      	lsls	r3, r5
 8001a32:	1e58      	subs	r0, r3, #1
 8001a34:	4183      	sbcs	r3, r0
 8001a36:	0030      	movs	r0, r6
 8001a38:	4318      	orrs	r0, r3
 8001a3a:	40cc      	lsrs	r4, r1
 8001a3c:	0743      	lsls	r3, r0, #29
 8001a3e:	d0c7      	beq.n	80019d0 <__aeabi_dmul+0x4a0>
 8001a40:	230f      	movs	r3, #15
 8001a42:	4003      	ands	r3, r0
 8001a44:	2b04      	cmp	r3, #4
 8001a46:	d1bd      	bne.n	80019c4 <__aeabi_dmul+0x494>
 8001a48:	e7c2      	b.n	80019d0 <__aeabi_dmul+0x4a0>
 8001a4a:	0765      	lsls	r5, r4, #29
 8001a4c:	0264      	lsls	r4, r4, #9
 8001a4e:	0b24      	lsrs	r4, r4, #12
 8001a50:	08c0      	lsrs	r0, r0, #3
 8001a52:	2300      	movs	r3, #0
 8001a54:	4305      	orrs	r5, r0
 8001a56:	e5dd      	b.n	8001614 <__aeabi_dmul+0xe4>
 8001a58:	2500      	movs	r5, #0
 8001a5a:	2302      	movs	r3, #2
 8001a5c:	2e0f      	cmp	r6, #15
 8001a5e:	d10c      	bne.n	8001a7a <__aeabi_dmul+0x54a>
 8001a60:	2480      	movs	r4, #128	; 0x80
 8001a62:	465b      	mov	r3, fp
 8001a64:	0324      	lsls	r4, r4, #12
 8001a66:	4223      	tst	r3, r4
 8001a68:	d00e      	beq.n	8001a88 <__aeabi_dmul+0x558>
 8001a6a:	4221      	tst	r1, r4
 8001a6c:	d10c      	bne.n	8001a88 <__aeabi_dmul+0x558>
 8001a6e:	430c      	orrs	r4, r1
 8001a70:	0324      	lsls	r4, r4, #12
 8001a72:	003a      	movs	r2, r7
 8001a74:	4b0e      	ldr	r3, [pc, #56]	; (8001ab0 <__aeabi_dmul+0x580>)
 8001a76:	0b24      	lsrs	r4, r4, #12
 8001a78:	e5cc      	b.n	8001614 <__aeabi_dmul+0xe4>
 8001a7a:	2e0b      	cmp	r6, #11
 8001a7c:	d000      	beq.n	8001a80 <__aeabi_dmul+0x550>
 8001a7e:	e5a2      	b.n	80015c6 <__aeabi_dmul+0x96>
 8001a80:	468b      	mov	fp, r1
 8001a82:	46aa      	mov	sl, r5
 8001a84:	9300      	str	r3, [sp, #0]
 8001a86:	e5f7      	b.n	8001678 <__aeabi_dmul+0x148>
 8001a88:	2480      	movs	r4, #128	; 0x80
 8001a8a:	465b      	mov	r3, fp
 8001a8c:	0324      	lsls	r4, r4, #12
 8001a8e:	431c      	orrs	r4, r3
 8001a90:	0324      	lsls	r4, r4, #12
 8001a92:	4642      	mov	r2, r8
 8001a94:	4655      	mov	r5, sl
 8001a96:	4b06      	ldr	r3, [pc, #24]	; (8001ab0 <__aeabi_dmul+0x580>)
 8001a98:	0b24      	lsrs	r4, r4, #12
 8001a9a:	e5bb      	b.n	8001614 <__aeabi_dmul+0xe4>
 8001a9c:	464d      	mov	r5, r9
 8001a9e:	0021      	movs	r1, r4
 8001aa0:	2303      	movs	r3, #3
 8001aa2:	e7db      	b.n	8001a5c <__aeabi_dmul+0x52c>
 8001aa4:	fffffc0d 	.word	0xfffffc0d
 8001aa8:	0000043e 	.word	0x0000043e
 8001aac:	0000041e 	.word	0x0000041e
 8001ab0:	000007ff 	.word	0x000007ff

08001ab4 <__aeabi_dsub>:
 8001ab4:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001ab6:	4657      	mov	r7, sl
 8001ab8:	464e      	mov	r6, r9
 8001aba:	4645      	mov	r5, r8
 8001abc:	46de      	mov	lr, fp
 8001abe:	b5e0      	push	{r5, r6, r7, lr}
 8001ac0:	000d      	movs	r5, r1
 8001ac2:	0004      	movs	r4, r0
 8001ac4:	0019      	movs	r1, r3
 8001ac6:	0010      	movs	r0, r2
 8001ac8:	032b      	lsls	r3, r5, #12
 8001aca:	0a5b      	lsrs	r3, r3, #9
 8001acc:	0f62      	lsrs	r2, r4, #29
 8001ace:	431a      	orrs	r2, r3
 8001ad0:	00e3      	lsls	r3, r4, #3
 8001ad2:	030c      	lsls	r4, r1, #12
 8001ad4:	0a64      	lsrs	r4, r4, #9
 8001ad6:	0f47      	lsrs	r7, r0, #29
 8001ad8:	4327      	orrs	r7, r4
 8001ada:	4cd0      	ldr	r4, [pc, #832]	; (8001e1c <__aeabi_dsub+0x368>)
 8001adc:	006e      	lsls	r6, r5, #1
 8001ade:	4691      	mov	r9, r2
 8001ae0:	b083      	sub	sp, #12
 8001ae2:	004a      	lsls	r2, r1, #1
 8001ae4:	00c0      	lsls	r0, r0, #3
 8001ae6:	4698      	mov	r8, r3
 8001ae8:	46a2      	mov	sl, r4
 8001aea:	0d76      	lsrs	r6, r6, #21
 8001aec:	0fed      	lsrs	r5, r5, #31
 8001aee:	0d52      	lsrs	r2, r2, #21
 8001af0:	0fc9      	lsrs	r1, r1, #31
 8001af2:	9001      	str	r0, [sp, #4]
 8001af4:	42a2      	cmp	r2, r4
 8001af6:	d100      	bne.n	8001afa <__aeabi_dsub+0x46>
 8001af8:	e0b9      	b.n	8001c6e <__aeabi_dsub+0x1ba>
 8001afa:	2401      	movs	r4, #1
 8001afc:	4061      	eors	r1, r4
 8001afe:	468b      	mov	fp, r1
 8001b00:	428d      	cmp	r5, r1
 8001b02:	d100      	bne.n	8001b06 <__aeabi_dsub+0x52>
 8001b04:	e08d      	b.n	8001c22 <__aeabi_dsub+0x16e>
 8001b06:	1ab4      	subs	r4, r6, r2
 8001b08:	46a4      	mov	ip, r4
 8001b0a:	2c00      	cmp	r4, #0
 8001b0c:	dc00      	bgt.n	8001b10 <__aeabi_dsub+0x5c>
 8001b0e:	e0b7      	b.n	8001c80 <__aeabi_dsub+0x1cc>
 8001b10:	2a00      	cmp	r2, #0
 8001b12:	d100      	bne.n	8001b16 <__aeabi_dsub+0x62>
 8001b14:	e0cb      	b.n	8001cae <__aeabi_dsub+0x1fa>
 8001b16:	4ac1      	ldr	r2, [pc, #772]	; (8001e1c <__aeabi_dsub+0x368>)
 8001b18:	4296      	cmp	r6, r2
 8001b1a:	d100      	bne.n	8001b1e <__aeabi_dsub+0x6a>
 8001b1c:	e186      	b.n	8001e2c <__aeabi_dsub+0x378>
 8001b1e:	2280      	movs	r2, #128	; 0x80
 8001b20:	0412      	lsls	r2, r2, #16
 8001b22:	4317      	orrs	r7, r2
 8001b24:	4662      	mov	r2, ip
 8001b26:	2a38      	cmp	r2, #56	; 0x38
 8001b28:	dd00      	ble.n	8001b2c <__aeabi_dsub+0x78>
 8001b2a:	e1a4      	b.n	8001e76 <__aeabi_dsub+0x3c2>
 8001b2c:	2a1f      	cmp	r2, #31
 8001b2e:	dd00      	ble.n	8001b32 <__aeabi_dsub+0x7e>
 8001b30:	e21d      	b.n	8001f6e <__aeabi_dsub+0x4ba>
 8001b32:	4661      	mov	r1, ip
 8001b34:	2220      	movs	r2, #32
 8001b36:	003c      	movs	r4, r7
 8001b38:	1a52      	subs	r2, r2, r1
 8001b3a:	0001      	movs	r1, r0
 8001b3c:	4090      	lsls	r0, r2
 8001b3e:	4094      	lsls	r4, r2
 8001b40:	1e42      	subs	r2, r0, #1
 8001b42:	4190      	sbcs	r0, r2
 8001b44:	4662      	mov	r2, ip
 8001b46:	46a0      	mov	r8, r4
 8001b48:	4664      	mov	r4, ip
 8001b4a:	40d7      	lsrs	r7, r2
 8001b4c:	464a      	mov	r2, r9
 8001b4e:	40e1      	lsrs	r1, r4
 8001b50:	4644      	mov	r4, r8
 8001b52:	1bd2      	subs	r2, r2, r7
 8001b54:	4691      	mov	r9, r2
 8001b56:	430c      	orrs	r4, r1
 8001b58:	4304      	orrs	r4, r0
 8001b5a:	1b1c      	subs	r4, r3, r4
 8001b5c:	42a3      	cmp	r3, r4
 8001b5e:	4192      	sbcs	r2, r2
 8001b60:	464b      	mov	r3, r9
 8001b62:	4252      	negs	r2, r2
 8001b64:	1a9b      	subs	r3, r3, r2
 8001b66:	469a      	mov	sl, r3
 8001b68:	4653      	mov	r3, sl
 8001b6a:	021b      	lsls	r3, r3, #8
 8001b6c:	d400      	bmi.n	8001b70 <__aeabi_dsub+0xbc>
 8001b6e:	e12b      	b.n	8001dc8 <__aeabi_dsub+0x314>
 8001b70:	4653      	mov	r3, sl
 8001b72:	025a      	lsls	r2, r3, #9
 8001b74:	0a53      	lsrs	r3, r2, #9
 8001b76:	469a      	mov	sl, r3
 8001b78:	4653      	mov	r3, sl
 8001b7a:	2b00      	cmp	r3, #0
 8001b7c:	d100      	bne.n	8001b80 <__aeabi_dsub+0xcc>
 8001b7e:	e166      	b.n	8001e4e <__aeabi_dsub+0x39a>
 8001b80:	4650      	mov	r0, sl
 8001b82:	f000 fbc3 	bl	800230c <__clzsi2>
 8001b86:	0003      	movs	r3, r0
 8001b88:	3b08      	subs	r3, #8
 8001b8a:	2220      	movs	r2, #32
 8001b8c:	0020      	movs	r0, r4
 8001b8e:	1ad2      	subs	r2, r2, r3
 8001b90:	4651      	mov	r1, sl
 8001b92:	40d0      	lsrs	r0, r2
 8001b94:	4099      	lsls	r1, r3
 8001b96:	0002      	movs	r2, r0
 8001b98:	409c      	lsls	r4, r3
 8001b9a:	430a      	orrs	r2, r1
 8001b9c:	429e      	cmp	r6, r3
 8001b9e:	dd00      	ble.n	8001ba2 <__aeabi_dsub+0xee>
 8001ba0:	e164      	b.n	8001e6c <__aeabi_dsub+0x3b8>
 8001ba2:	1b9b      	subs	r3, r3, r6
 8001ba4:	1c59      	adds	r1, r3, #1
 8001ba6:	291f      	cmp	r1, #31
 8001ba8:	dd00      	ble.n	8001bac <__aeabi_dsub+0xf8>
 8001baa:	e0fe      	b.n	8001daa <__aeabi_dsub+0x2f6>
 8001bac:	2320      	movs	r3, #32
 8001bae:	0010      	movs	r0, r2
 8001bb0:	0026      	movs	r6, r4
 8001bb2:	1a5b      	subs	r3, r3, r1
 8001bb4:	409c      	lsls	r4, r3
 8001bb6:	4098      	lsls	r0, r3
 8001bb8:	40ce      	lsrs	r6, r1
 8001bba:	40ca      	lsrs	r2, r1
 8001bbc:	1e63      	subs	r3, r4, #1
 8001bbe:	419c      	sbcs	r4, r3
 8001bc0:	4330      	orrs	r0, r6
 8001bc2:	4692      	mov	sl, r2
 8001bc4:	2600      	movs	r6, #0
 8001bc6:	4304      	orrs	r4, r0
 8001bc8:	0763      	lsls	r3, r4, #29
 8001bca:	d009      	beq.n	8001be0 <__aeabi_dsub+0x12c>
 8001bcc:	230f      	movs	r3, #15
 8001bce:	4023      	ands	r3, r4
 8001bd0:	2b04      	cmp	r3, #4
 8001bd2:	d005      	beq.n	8001be0 <__aeabi_dsub+0x12c>
 8001bd4:	1d23      	adds	r3, r4, #4
 8001bd6:	42a3      	cmp	r3, r4
 8001bd8:	41a4      	sbcs	r4, r4
 8001bda:	4264      	negs	r4, r4
 8001bdc:	44a2      	add	sl, r4
 8001bde:	001c      	movs	r4, r3
 8001be0:	4653      	mov	r3, sl
 8001be2:	021b      	lsls	r3, r3, #8
 8001be4:	d400      	bmi.n	8001be8 <__aeabi_dsub+0x134>
 8001be6:	e0f2      	b.n	8001dce <__aeabi_dsub+0x31a>
 8001be8:	4b8c      	ldr	r3, [pc, #560]	; (8001e1c <__aeabi_dsub+0x368>)
 8001bea:	3601      	adds	r6, #1
 8001bec:	429e      	cmp	r6, r3
 8001bee:	d100      	bne.n	8001bf2 <__aeabi_dsub+0x13e>
 8001bf0:	e10f      	b.n	8001e12 <__aeabi_dsub+0x35e>
 8001bf2:	4653      	mov	r3, sl
 8001bf4:	498a      	ldr	r1, [pc, #552]	; (8001e20 <__aeabi_dsub+0x36c>)
 8001bf6:	08e4      	lsrs	r4, r4, #3
 8001bf8:	400b      	ands	r3, r1
 8001bfa:	0019      	movs	r1, r3
 8001bfc:	075b      	lsls	r3, r3, #29
 8001bfe:	4323      	orrs	r3, r4
 8001c00:	0572      	lsls	r2, r6, #21
 8001c02:	024c      	lsls	r4, r1, #9
 8001c04:	0b24      	lsrs	r4, r4, #12
 8001c06:	0d52      	lsrs	r2, r2, #21
 8001c08:	0512      	lsls	r2, r2, #20
 8001c0a:	4322      	orrs	r2, r4
 8001c0c:	07ed      	lsls	r5, r5, #31
 8001c0e:	432a      	orrs	r2, r5
 8001c10:	0018      	movs	r0, r3
 8001c12:	0011      	movs	r1, r2
 8001c14:	b003      	add	sp, #12
 8001c16:	bcf0      	pop	{r4, r5, r6, r7}
 8001c18:	46bb      	mov	fp, r7
 8001c1a:	46b2      	mov	sl, r6
 8001c1c:	46a9      	mov	r9, r5
 8001c1e:	46a0      	mov	r8, r4
 8001c20:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001c22:	1ab4      	subs	r4, r6, r2
 8001c24:	46a4      	mov	ip, r4
 8001c26:	2c00      	cmp	r4, #0
 8001c28:	dd59      	ble.n	8001cde <__aeabi_dsub+0x22a>
 8001c2a:	2a00      	cmp	r2, #0
 8001c2c:	d100      	bne.n	8001c30 <__aeabi_dsub+0x17c>
 8001c2e:	e0b0      	b.n	8001d92 <__aeabi_dsub+0x2de>
 8001c30:	4556      	cmp	r6, sl
 8001c32:	d100      	bne.n	8001c36 <__aeabi_dsub+0x182>
 8001c34:	e0fa      	b.n	8001e2c <__aeabi_dsub+0x378>
 8001c36:	2280      	movs	r2, #128	; 0x80
 8001c38:	0412      	lsls	r2, r2, #16
 8001c3a:	4317      	orrs	r7, r2
 8001c3c:	4662      	mov	r2, ip
 8001c3e:	2a38      	cmp	r2, #56	; 0x38
 8001c40:	dd00      	ble.n	8001c44 <__aeabi_dsub+0x190>
 8001c42:	e0d4      	b.n	8001dee <__aeabi_dsub+0x33a>
 8001c44:	2a1f      	cmp	r2, #31
 8001c46:	dc00      	bgt.n	8001c4a <__aeabi_dsub+0x196>
 8001c48:	e1c0      	b.n	8001fcc <__aeabi_dsub+0x518>
 8001c4a:	0039      	movs	r1, r7
 8001c4c:	3a20      	subs	r2, #32
 8001c4e:	40d1      	lsrs	r1, r2
 8001c50:	4662      	mov	r2, ip
 8001c52:	2a20      	cmp	r2, #32
 8001c54:	d006      	beq.n	8001c64 <__aeabi_dsub+0x1b0>
 8001c56:	4664      	mov	r4, ip
 8001c58:	2240      	movs	r2, #64	; 0x40
 8001c5a:	1b12      	subs	r2, r2, r4
 8001c5c:	003c      	movs	r4, r7
 8001c5e:	4094      	lsls	r4, r2
 8001c60:	4304      	orrs	r4, r0
 8001c62:	9401      	str	r4, [sp, #4]
 8001c64:	9c01      	ldr	r4, [sp, #4]
 8001c66:	1e62      	subs	r2, r4, #1
 8001c68:	4194      	sbcs	r4, r2
 8001c6a:	430c      	orrs	r4, r1
 8001c6c:	e0c3      	b.n	8001df6 <__aeabi_dsub+0x342>
 8001c6e:	003c      	movs	r4, r7
 8001c70:	4304      	orrs	r4, r0
 8001c72:	d02b      	beq.n	8001ccc <__aeabi_dsub+0x218>
 8001c74:	468b      	mov	fp, r1
 8001c76:	428d      	cmp	r5, r1
 8001c78:	d02e      	beq.n	8001cd8 <__aeabi_dsub+0x224>
 8001c7a:	4c6a      	ldr	r4, [pc, #424]	; (8001e24 <__aeabi_dsub+0x370>)
 8001c7c:	46a4      	mov	ip, r4
 8001c7e:	44b4      	add	ip, r6
 8001c80:	4664      	mov	r4, ip
 8001c82:	2c00      	cmp	r4, #0
 8001c84:	d05f      	beq.n	8001d46 <__aeabi_dsub+0x292>
 8001c86:	1b94      	subs	r4, r2, r6
 8001c88:	46a4      	mov	ip, r4
 8001c8a:	2e00      	cmp	r6, #0
 8001c8c:	d000      	beq.n	8001c90 <__aeabi_dsub+0x1dc>
 8001c8e:	e120      	b.n	8001ed2 <__aeabi_dsub+0x41e>
 8001c90:	464c      	mov	r4, r9
 8001c92:	431c      	orrs	r4, r3
 8001c94:	d100      	bne.n	8001c98 <__aeabi_dsub+0x1e4>
 8001c96:	e1c7      	b.n	8002028 <__aeabi_dsub+0x574>
 8001c98:	4661      	mov	r1, ip
 8001c9a:	1e4c      	subs	r4, r1, #1
 8001c9c:	2901      	cmp	r1, #1
 8001c9e:	d100      	bne.n	8001ca2 <__aeabi_dsub+0x1ee>
 8001ca0:	e223      	b.n	80020ea <__aeabi_dsub+0x636>
 8001ca2:	4d5e      	ldr	r5, [pc, #376]	; (8001e1c <__aeabi_dsub+0x368>)
 8001ca4:	45ac      	cmp	ip, r5
 8001ca6:	d100      	bne.n	8001caa <__aeabi_dsub+0x1f6>
 8001ca8:	e1d8      	b.n	800205c <__aeabi_dsub+0x5a8>
 8001caa:	46a4      	mov	ip, r4
 8001cac:	e11a      	b.n	8001ee4 <__aeabi_dsub+0x430>
 8001cae:	003a      	movs	r2, r7
 8001cb0:	4302      	orrs	r2, r0
 8001cb2:	d100      	bne.n	8001cb6 <__aeabi_dsub+0x202>
 8001cb4:	e0e4      	b.n	8001e80 <__aeabi_dsub+0x3cc>
 8001cb6:	0022      	movs	r2, r4
 8001cb8:	3a01      	subs	r2, #1
 8001cba:	2c01      	cmp	r4, #1
 8001cbc:	d100      	bne.n	8001cc0 <__aeabi_dsub+0x20c>
 8001cbe:	e1c3      	b.n	8002048 <__aeabi_dsub+0x594>
 8001cc0:	4956      	ldr	r1, [pc, #344]	; (8001e1c <__aeabi_dsub+0x368>)
 8001cc2:	428c      	cmp	r4, r1
 8001cc4:	d100      	bne.n	8001cc8 <__aeabi_dsub+0x214>
 8001cc6:	e0b1      	b.n	8001e2c <__aeabi_dsub+0x378>
 8001cc8:	4694      	mov	ip, r2
 8001cca:	e72b      	b.n	8001b24 <__aeabi_dsub+0x70>
 8001ccc:	2401      	movs	r4, #1
 8001cce:	4061      	eors	r1, r4
 8001cd0:	468b      	mov	fp, r1
 8001cd2:	428d      	cmp	r5, r1
 8001cd4:	d000      	beq.n	8001cd8 <__aeabi_dsub+0x224>
 8001cd6:	e716      	b.n	8001b06 <__aeabi_dsub+0x52>
 8001cd8:	4952      	ldr	r1, [pc, #328]	; (8001e24 <__aeabi_dsub+0x370>)
 8001cda:	468c      	mov	ip, r1
 8001cdc:	44b4      	add	ip, r6
 8001cde:	4664      	mov	r4, ip
 8001ce0:	2c00      	cmp	r4, #0
 8001ce2:	d100      	bne.n	8001ce6 <__aeabi_dsub+0x232>
 8001ce4:	e0d3      	b.n	8001e8e <__aeabi_dsub+0x3da>
 8001ce6:	1b91      	subs	r1, r2, r6
 8001ce8:	468c      	mov	ip, r1
 8001cea:	2e00      	cmp	r6, #0
 8001cec:	d100      	bne.n	8001cf0 <__aeabi_dsub+0x23c>
 8001cee:	e15e      	b.n	8001fae <__aeabi_dsub+0x4fa>
 8001cf0:	494a      	ldr	r1, [pc, #296]	; (8001e1c <__aeabi_dsub+0x368>)
 8001cf2:	428a      	cmp	r2, r1
 8001cf4:	d100      	bne.n	8001cf8 <__aeabi_dsub+0x244>
 8001cf6:	e1be      	b.n	8002076 <__aeabi_dsub+0x5c2>
 8001cf8:	2180      	movs	r1, #128	; 0x80
 8001cfa:	464c      	mov	r4, r9
 8001cfc:	0409      	lsls	r1, r1, #16
 8001cfe:	430c      	orrs	r4, r1
 8001d00:	46a1      	mov	r9, r4
 8001d02:	4661      	mov	r1, ip
 8001d04:	2938      	cmp	r1, #56	; 0x38
 8001d06:	dd00      	ble.n	8001d0a <__aeabi_dsub+0x256>
 8001d08:	e1ba      	b.n	8002080 <__aeabi_dsub+0x5cc>
 8001d0a:	291f      	cmp	r1, #31
 8001d0c:	dd00      	ble.n	8001d10 <__aeabi_dsub+0x25c>
 8001d0e:	e227      	b.n	8002160 <__aeabi_dsub+0x6ac>
 8001d10:	2420      	movs	r4, #32
 8001d12:	1a64      	subs	r4, r4, r1
 8001d14:	4649      	mov	r1, r9
 8001d16:	40a1      	lsls	r1, r4
 8001d18:	001e      	movs	r6, r3
 8001d1a:	4688      	mov	r8, r1
 8001d1c:	4661      	mov	r1, ip
 8001d1e:	40a3      	lsls	r3, r4
 8001d20:	40ce      	lsrs	r6, r1
 8001d22:	4641      	mov	r1, r8
 8001d24:	1e5c      	subs	r4, r3, #1
 8001d26:	41a3      	sbcs	r3, r4
 8001d28:	4331      	orrs	r1, r6
 8001d2a:	4319      	orrs	r1, r3
 8001d2c:	000c      	movs	r4, r1
 8001d2e:	4663      	mov	r3, ip
 8001d30:	4649      	mov	r1, r9
 8001d32:	40d9      	lsrs	r1, r3
 8001d34:	187f      	adds	r7, r7, r1
 8001d36:	1824      	adds	r4, r4, r0
 8001d38:	4284      	cmp	r4, r0
 8001d3a:	419b      	sbcs	r3, r3
 8001d3c:	425b      	negs	r3, r3
 8001d3e:	469a      	mov	sl, r3
 8001d40:	0016      	movs	r6, r2
 8001d42:	44ba      	add	sl, r7
 8001d44:	e05d      	b.n	8001e02 <__aeabi_dsub+0x34e>
 8001d46:	4c38      	ldr	r4, [pc, #224]	; (8001e28 <__aeabi_dsub+0x374>)
 8001d48:	1c72      	adds	r2, r6, #1
 8001d4a:	4222      	tst	r2, r4
 8001d4c:	d000      	beq.n	8001d50 <__aeabi_dsub+0x29c>
 8001d4e:	e0df      	b.n	8001f10 <__aeabi_dsub+0x45c>
 8001d50:	464a      	mov	r2, r9
 8001d52:	431a      	orrs	r2, r3
 8001d54:	2e00      	cmp	r6, #0
 8001d56:	d000      	beq.n	8001d5a <__aeabi_dsub+0x2a6>
 8001d58:	e15c      	b.n	8002014 <__aeabi_dsub+0x560>
 8001d5a:	2a00      	cmp	r2, #0
 8001d5c:	d100      	bne.n	8001d60 <__aeabi_dsub+0x2ac>
 8001d5e:	e1cf      	b.n	8002100 <__aeabi_dsub+0x64c>
 8001d60:	003a      	movs	r2, r7
 8001d62:	4302      	orrs	r2, r0
 8001d64:	d100      	bne.n	8001d68 <__aeabi_dsub+0x2b4>
 8001d66:	e17f      	b.n	8002068 <__aeabi_dsub+0x5b4>
 8001d68:	1a1c      	subs	r4, r3, r0
 8001d6a:	464a      	mov	r2, r9
 8001d6c:	42a3      	cmp	r3, r4
 8001d6e:	4189      	sbcs	r1, r1
 8001d70:	1bd2      	subs	r2, r2, r7
 8001d72:	4249      	negs	r1, r1
 8001d74:	1a52      	subs	r2, r2, r1
 8001d76:	4692      	mov	sl, r2
 8001d78:	0212      	lsls	r2, r2, #8
 8001d7a:	d400      	bmi.n	8001d7e <__aeabi_dsub+0x2ca>
 8001d7c:	e20a      	b.n	8002194 <__aeabi_dsub+0x6e0>
 8001d7e:	1ac4      	subs	r4, r0, r3
 8001d80:	42a0      	cmp	r0, r4
 8001d82:	4180      	sbcs	r0, r0
 8001d84:	464b      	mov	r3, r9
 8001d86:	4240      	negs	r0, r0
 8001d88:	1aff      	subs	r7, r7, r3
 8001d8a:	1a3b      	subs	r3, r7, r0
 8001d8c:	469a      	mov	sl, r3
 8001d8e:	465d      	mov	r5, fp
 8001d90:	e71a      	b.n	8001bc8 <__aeabi_dsub+0x114>
 8001d92:	003a      	movs	r2, r7
 8001d94:	4302      	orrs	r2, r0
 8001d96:	d073      	beq.n	8001e80 <__aeabi_dsub+0x3cc>
 8001d98:	0022      	movs	r2, r4
 8001d9a:	3a01      	subs	r2, #1
 8001d9c:	2c01      	cmp	r4, #1
 8001d9e:	d100      	bne.n	8001da2 <__aeabi_dsub+0x2ee>
 8001da0:	e0cb      	b.n	8001f3a <__aeabi_dsub+0x486>
 8001da2:	4554      	cmp	r4, sl
 8001da4:	d042      	beq.n	8001e2c <__aeabi_dsub+0x378>
 8001da6:	4694      	mov	ip, r2
 8001da8:	e748      	b.n	8001c3c <__aeabi_dsub+0x188>
 8001daa:	0010      	movs	r0, r2
 8001dac:	3b1f      	subs	r3, #31
 8001dae:	40d8      	lsrs	r0, r3
 8001db0:	2920      	cmp	r1, #32
 8001db2:	d003      	beq.n	8001dbc <__aeabi_dsub+0x308>
 8001db4:	2340      	movs	r3, #64	; 0x40
 8001db6:	1a5b      	subs	r3, r3, r1
 8001db8:	409a      	lsls	r2, r3
 8001dba:	4314      	orrs	r4, r2
 8001dbc:	1e63      	subs	r3, r4, #1
 8001dbe:	419c      	sbcs	r4, r3
 8001dc0:	2300      	movs	r3, #0
 8001dc2:	2600      	movs	r6, #0
 8001dc4:	469a      	mov	sl, r3
 8001dc6:	4304      	orrs	r4, r0
 8001dc8:	0763      	lsls	r3, r4, #29
 8001dca:	d000      	beq.n	8001dce <__aeabi_dsub+0x31a>
 8001dcc:	e6fe      	b.n	8001bcc <__aeabi_dsub+0x118>
 8001dce:	4652      	mov	r2, sl
 8001dd0:	08e3      	lsrs	r3, r4, #3
 8001dd2:	0752      	lsls	r2, r2, #29
 8001dd4:	4313      	orrs	r3, r2
 8001dd6:	4652      	mov	r2, sl
 8001dd8:	46b4      	mov	ip, r6
 8001dda:	08d2      	lsrs	r2, r2, #3
 8001ddc:	490f      	ldr	r1, [pc, #60]	; (8001e1c <__aeabi_dsub+0x368>)
 8001dde:	458c      	cmp	ip, r1
 8001de0:	d02a      	beq.n	8001e38 <__aeabi_dsub+0x384>
 8001de2:	0312      	lsls	r2, r2, #12
 8001de4:	0b14      	lsrs	r4, r2, #12
 8001de6:	4662      	mov	r2, ip
 8001de8:	0552      	lsls	r2, r2, #21
 8001dea:	0d52      	lsrs	r2, r2, #21
 8001dec:	e70c      	b.n	8001c08 <__aeabi_dsub+0x154>
 8001dee:	003c      	movs	r4, r7
 8001df0:	4304      	orrs	r4, r0
 8001df2:	1e62      	subs	r2, r4, #1
 8001df4:	4194      	sbcs	r4, r2
 8001df6:	18e4      	adds	r4, r4, r3
 8001df8:	429c      	cmp	r4, r3
 8001dfa:	4192      	sbcs	r2, r2
 8001dfc:	4252      	negs	r2, r2
 8001dfe:	444a      	add	r2, r9
 8001e00:	4692      	mov	sl, r2
 8001e02:	4653      	mov	r3, sl
 8001e04:	021b      	lsls	r3, r3, #8
 8001e06:	d5df      	bpl.n	8001dc8 <__aeabi_dsub+0x314>
 8001e08:	4b04      	ldr	r3, [pc, #16]	; (8001e1c <__aeabi_dsub+0x368>)
 8001e0a:	3601      	adds	r6, #1
 8001e0c:	429e      	cmp	r6, r3
 8001e0e:	d000      	beq.n	8001e12 <__aeabi_dsub+0x35e>
 8001e10:	e0a0      	b.n	8001f54 <__aeabi_dsub+0x4a0>
 8001e12:	0032      	movs	r2, r6
 8001e14:	2400      	movs	r4, #0
 8001e16:	2300      	movs	r3, #0
 8001e18:	e6f6      	b.n	8001c08 <__aeabi_dsub+0x154>
 8001e1a:	46c0      	nop			; (mov r8, r8)
 8001e1c:	000007ff 	.word	0x000007ff
 8001e20:	ff7fffff 	.word	0xff7fffff
 8001e24:	fffff801 	.word	0xfffff801
 8001e28:	000007fe 	.word	0x000007fe
 8001e2c:	08db      	lsrs	r3, r3, #3
 8001e2e:	464a      	mov	r2, r9
 8001e30:	0752      	lsls	r2, r2, #29
 8001e32:	4313      	orrs	r3, r2
 8001e34:	464a      	mov	r2, r9
 8001e36:	08d2      	lsrs	r2, r2, #3
 8001e38:	0019      	movs	r1, r3
 8001e3a:	4311      	orrs	r1, r2
 8001e3c:	d100      	bne.n	8001e40 <__aeabi_dsub+0x38c>
 8001e3e:	e1b5      	b.n	80021ac <__aeabi_dsub+0x6f8>
 8001e40:	2480      	movs	r4, #128	; 0x80
 8001e42:	0324      	lsls	r4, r4, #12
 8001e44:	4314      	orrs	r4, r2
 8001e46:	0324      	lsls	r4, r4, #12
 8001e48:	4ad5      	ldr	r2, [pc, #852]	; (80021a0 <__aeabi_dsub+0x6ec>)
 8001e4a:	0b24      	lsrs	r4, r4, #12
 8001e4c:	e6dc      	b.n	8001c08 <__aeabi_dsub+0x154>
 8001e4e:	0020      	movs	r0, r4
 8001e50:	f000 fa5c 	bl	800230c <__clzsi2>
 8001e54:	0003      	movs	r3, r0
 8001e56:	3318      	adds	r3, #24
 8001e58:	2b1f      	cmp	r3, #31
 8001e5a:	dc00      	bgt.n	8001e5e <__aeabi_dsub+0x3aa>
 8001e5c:	e695      	b.n	8001b8a <__aeabi_dsub+0xd6>
 8001e5e:	0022      	movs	r2, r4
 8001e60:	3808      	subs	r0, #8
 8001e62:	4082      	lsls	r2, r0
 8001e64:	2400      	movs	r4, #0
 8001e66:	429e      	cmp	r6, r3
 8001e68:	dc00      	bgt.n	8001e6c <__aeabi_dsub+0x3b8>
 8001e6a:	e69a      	b.n	8001ba2 <__aeabi_dsub+0xee>
 8001e6c:	1af6      	subs	r6, r6, r3
 8001e6e:	4bcd      	ldr	r3, [pc, #820]	; (80021a4 <__aeabi_dsub+0x6f0>)
 8001e70:	401a      	ands	r2, r3
 8001e72:	4692      	mov	sl, r2
 8001e74:	e6a8      	b.n	8001bc8 <__aeabi_dsub+0x114>
 8001e76:	003c      	movs	r4, r7
 8001e78:	4304      	orrs	r4, r0
 8001e7a:	1e62      	subs	r2, r4, #1
 8001e7c:	4194      	sbcs	r4, r2
 8001e7e:	e66c      	b.n	8001b5a <__aeabi_dsub+0xa6>
 8001e80:	464a      	mov	r2, r9
 8001e82:	08db      	lsrs	r3, r3, #3
 8001e84:	0752      	lsls	r2, r2, #29
 8001e86:	4313      	orrs	r3, r2
 8001e88:	464a      	mov	r2, r9
 8001e8a:	08d2      	lsrs	r2, r2, #3
 8001e8c:	e7a6      	b.n	8001ddc <__aeabi_dsub+0x328>
 8001e8e:	4cc6      	ldr	r4, [pc, #792]	; (80021a8 <__aeabi_dsub+0x6f4>)
 8001e90:	1c72      	adds	r2, r6, #1
 8001e92:	4222      	tst	r2, r4
 8001e94:	d000      	beq.n	8001e98 <__aeabi_dsub+0x3e4>
 8001e96:	e0ac      	b.n	8001ff2 <__aeabi_dsub+0x53e>
 8001e98:	464a      	mov	r2, r9
 8001e9a:	431a      	orrs	r2, r3
 8001e9c:	2e00      	cmp	r6, #0
 8001e9e:	d000      	beq.n	8001ea2 <__aeabi_dsub+0x3ee>
 8001ea0:	e105      	b.n	80020ae <__aeabi_dsub+0x5fa>
 8001ea2:	2a00      	cmp	r2, #0
 8001ea4:	d100      	bne.n	8001ea8 <__aeabi_dsub+0x3f4>
 8001ea6:	e156      	b.n	8002156 <__aeabi_dsub+0x6a2>
 8001ea8:	003a      	movs	r2, r7
 8001eaa:	4302      	orrs	r2, r0
 8001eac:	d100      	bne.n	8001eb0 <__aeabi_dsub+0x3fc>
 8001eae:	e0db      	b.n	8002068 <__aeabi_dsub+0x5b4>
 8001eb0:	181c      	adds	r4, r3, r0
 8001eb2:	429c      	cmp	r4, r3
 8001eb4:	419b      	sbcs	r3, r3
 8001eb6:	444f      	add	r7, r9
 8001eb8:	46ba      	mov	sl, r7
 8001eba:	425b      	negs	r3, r3
 8001ebc:	449a      	add	sl, r3
 8001ebe:	4653      	mov	r3, sl
 8001ec0:	021b      	lsls	r3, r3, #8
 8001ec2:	d400      	bmi.n	8001ec6 <__aeabi_dsub+0x412>
 8001ec4:	e780      	b.n	8001dc8 <__aeabi_dsub+0x314>
 8001ec6:	4652      	mov	r2, sl
 8001ec8:	4bb6      	ldr	r3, [pc, #728]	; (80021a4 <__aeabi_dsub+0x6f0>)
 8001eca:	2601      	movs	r6, #1
 8001ecc:	401a      	ands	r2, r3
 8001ece:	4692      	mov	sl, r2
 8001ed0:	e77a      	b.n	8001dc8 <__aeabi_dsub+0x314>
 8001ed2:	4cb3      	ldr	r4, [pc, #716]	; (80021a0 <__aeabi_dsub+0x6ec>)
 8001ed4:	42a2      	cmp	r2, r4
 8001ed6:	d100      	bne.n	8001eda <__aeabi_dsub+0x426>
 8001ed8:	e0c0      	b.n	800205c <__aeabi_dsub+0x5a8>
 8001eda:	2480      	movs	r4, #128	; 0x80
 8001edc:	464d      	mov	r5, r9
 8001ede:	0424      	lsls	r4, r4, #16
 8001ee0:	4325      	orrs	r5, r4
 8001ee2:	46a9      	mov	r9, r5
 8001ee4:	4664      	mov	r4, ip
 8001ee6:	2c38      	cmp	r4, #56	; 0x38
 8001ee8:	dc53      	bgt.n	8001f92 <__aeabi_dsub+0x4de>
 8001eea:	4661      	mov	r1, ip
 8001eec:	2c1f      	cmp	r4, #31
 8001eee:	dd00      	ble.n	8001ef2 <__aeabi_dsub+0x43e>
 8001ef0:	e0cd      	b.n	800208e <__aeabi_dsub+0x5da>
 8001ef2:	2520      	movs	r5, #32
 8001ef4:	001e      	movs	r6, r3
 8001ef6:	1b2d      	subs	r5, r5, r4
 8001ef8:	464c      	mov	r4, r9
 8001efa:	40ab      	lsls	r3, r5
 8001efc:	40ac      	lsls	r4, r5
 8001efe:	40ce      	lsrs	r6, r1
 8001f00:	1e5d      	subs	r5, r3, #1
 8001f02:	41ab      	sbcs	r3, r5
 8001f04:	4334      	orrs	r4, r6
 8001f06:	4323      	orrs	r3, r4
 8001f08:	464c      	mov	r4, r9
 8001f0a:	40cc      	lsrs	r4, r1
 8001f0c:	1b3f      	subs	r7, r7, r4
 8001f0e:	e045      	b.n	8001f9c <__aeabi_dsub+0x4e8>
 8001f10:	464a      	mov	r2, r9
 8001f12:	1a1c      	subs	r4, r3, r0
 8001f14:	1bd1      	subs	r1, r2, r7
 8001f16:	42a3      	cmp	r3, r4
 8001f18:	4192      	sbcs	r2, r2
 8001f1a:	4252      	negs	r2, r2
 8001f1c:	4692      	mov	sl, r2
 8001f1e:	000a      	movs	r2, r1
 8001f20:	4651      	mov	r1, sl
 8001f22:	1a52      	subs	r2, r2, r1
 8001f24:	4692      	mov	sl, r2
 8001f26:	0212      	lsls	r2, r2, #8
 8001f28:	d500      	bpl.n	8001f2c <__aeabi_dsub+0x478>
 8001f2a:	e083      	b.n	8002034 <__aeabi_dsub+0x580>
 8001f2c:	4653      	mov	r3, sl
 8001f2e:	4323      	orrs	r3, r4
 8001f30:	d000      	beq.n	8001f34 <__aeabi_dsub+0x480>
 8001f32:	e621      	b.n	8001b78 <__aeabi_dsub+0xc4>
 8001f34:	2200      	movs	r2, #0
 8001f36:	2500      	movs	r5, #0
 8001f38:	e753      	b.n	8001de2 <__aeabi_dsub+0x32e>
 8001f3a:	181c      	adds	r4, r3, r0
 8001f3c:	429c      	cmp	r4, r3
 8001f3e:	419b      	sbcs	r3, r3
 8001f40:	444f      	add	r7, r9
 8001f42:	46ba      	mov	sl, r7
 8001f44:	425b      	negs	r3, r3
 8001f46:	449a      	add	sl, r3
 8001f48:	4653      	mov	r3, sl
 8001f4a:	2601      	movs	r6, #1
 8001f4c:	021b      	lsls	r3, r3, #8
 8001f4e:	d400      	bmi.n	8001f52 <__aeabi_dsub+0x49e>
 8001f50:	e73a      	b.n	8001dc8 <__aeabi_dsub+0x314>
 8001f52:	2602      	movs	r6, #2
 8001f54:	4652      	mov	r2, sl
 8001f56:	4b93      	ldr	r3, [pc, #588]	; (80021a4 <__aeabi_dsub+0x6f0>)
 8001f58:	2101      	movs	r1, #1
 8001f5a:	401a      	ands	r2, r3
 8001f5c:	0013      	movs	r3, r2
 8001f5e:	4021      	ands	r1, r4
 8001f60:	0862      	lsrs	r2, r4, #1
 8001f62:	430a      	orrs	r2, r1
 8001f64:	07dc      	lsls	r4, r3, #31
 8001f66:	085b      	lsrs	r3, r3, #1
 8001f68:	469a      	mov	sl, r3
 8001f6a:	4314      	orrs	r4, r2
 8001f6c:	e62c      	b.n	8001bc8 <__aeabi_dsub+0x114>
 8001f6e:	0039      	movs	r1, r7
 8001f70:	3a20      	subs	r2, #32
 8001f72:	40d1      	lsrs	r1, r2
 8001f74:	4662      	mov	r2, ip
 8001f76:	2a20      	cmp	r2, #32
 8001f78:	d006      	beq.n	8001f88 <__aeabi_dsub+0x4d4>
 8001f7a:	4664      	mov	r4, ip
 8001f7c:	2240      	movs	r2, #64	; 0x40
 8001f7e:	1b12      	subs	r2, r2, r4
 8001f80:	003c      	movs	r4, r7
 8001f82:	4094      	lsls	r4, r2
 8001f84:	4304      	orrs	r4, r0
 8001f86:	9401      	str	r4, [sp, #4]
 8001f88:	9c01      	ldr	r4, [sp, #4]
 8001f8a:	1e62      	subs	r2, r4, #1
 8001f8c:	4194      	sbcs	r4, r2
 8001f8e:	430c      	orrs	r4, r1
 8001f90:	e5e3      	b.n	8001b5a <__aeabi_dsub+0xa6>
 8001f92:	4649      	mov	r1, r9
 8001f94:	4319      	orrs	r1, r3
 8001f96:	000b      	movs	r3, r1
 8001f98:	1e5c      	subs	r4, r3, #1
 8001f9a:	41a3      	sbcs	r3, r4
 8001f9c:	1ac4      	subs	r4, r0, r3
 8001f9e:	42a0      	cmp	r0, r4
 8001fa0:	419b      	sbcs	r3, r3
 8001fa2:	425b      	negs	r3, r3
 8001fa4:	1afb      	subs	r3, r7, r3
 8001fa6:	469a      	mov	sl, r3
 8001fa8:	465d      	mov	r5, fp
 8001faa:	0016      	movs	r6, r2
 8001fac:	e5dc      	b.n	8001b68 <__aeabi_dsub+0xb4>
 8001fae:	4649      	mov	r1, r9
 8001fb0:	4319      	orrs	r1, r3
 8001fb2:	d100      	bne.n	8001fb6 <__aeabi_dsub+0x502>
 8001fb4:	e0ae      	b.n	8002114 <__aeabi_dsub+0x660>
 8001fb6:	4661      	mov	r1, ip
 8001fb8:	4664      	mov	r4, ip
 8001fba:	3901      	subs	r1, #1
 8001fbc:	2c01      	cmp	r4, #1
 8001fbe:	d100      	bne.n	8001fc2 <__aeabi_dsub+0x50e>
 8001fc0:	e0e0      	b.n	8002184 <__aeabi_dsub+0x6d0>
 8001fc2:	4c77      	ldr	r4, [pc, #476]	; (80021a0 <__aeabi_dsub+0x6ec>)
 8001fc4:	45a4      	cmp	ip, r4
 8001fc6:	d056      	beq.n	8002076 <__aeabi_dsub+0x5c2>
 8001fc8:	468c      	mov	ip, r1
 8001fca:	e69a      	b.n	8001d02 <__aeabi_dsub+0x24e>
 8001fcc:	4661      	mov	r1, ip
 8001fce:	2220      	movs	r2, #32
 8001fd0:	003c      	movs	r4, r7
 8001fd2:	1a52      	subs	r2, r2, r1
 8001fd4:	4094      	lsls	r4, r2
 8001fd6:	0001      	movs	r1, r0
 8001fd8:	4090      	lsls	r0, r2
 8001fda:	46a0      	mov	r8, r4
 8001fdc:	4664      	mov	r4, ip
 8001fde:	1e42      	subs	r2, r0, #1
 8001fe0:	4190      	sbcs	r0, r2
 8001fe2:	4662      	mov	r2, ip
 8001fe4:	40e1      	lsrs	r1, r4
 8001fe6:	4644      	mov	r4, r8
 8001fe8:	40d7      	lsrs	r7, r2
 8001fea:	430c      	orrs	r4, r1
 8001fec:	4304      	orrs	r4, r0
 8001fee:	44b9      	add	r9, r7
 8001ff0:	e701      	b.n	8001df6 <__aeabi_dsub+0x342>
 8001ff2:	496b      	ldr	r1, [pc, #428]	; (80021a0 <__aeabi_dsub+0x6ec>)
 8001ff4:	428a      	cmp	r2, r1
 8001ff6:	d100      	bne.n	8001ffa <__aeabi_dsub+0x546>
 8001ff8:	e70c      	b.n	8001e14 <__aeabi_dsub+0x360>
 8001ffa:	1818      	adds	r0, r3, r0
 8001ffc:	4298      	cmp	r0, r3
 8001ffe:	419b      	sbcs	r3, r3
 8002000:	444f      	add	r7, r9
 8002002:	425b      	negs	r3, r3
 8002004:	18fb      	adds	r3, r7, r3
 8002006:	07dc      	lsls	r4, r3, #31
 8002008:	0840      	lsrs	r0, r0, #1
 800200a:	085b      	lsrs	r3, r3, #1
 800200c:	469a      	mov	sl, r3
 800200e:	0016      	movs	r6, r2
 8002010:	4304      	orrs	r4, r0
 8002012:	e6d9      	b.n	8001dc8 <__aeabi_dsub+0x314>
 8002014:	2a00      	cmp	r2, #0
 8002016:	d000      	beq.n	800201a <__aeabi_dsub+0x566>
 8002018:	e081      	b.n	800211e <__aeabi_dsub+0x66a>
 800201a:	003b      	movs	r3, r7
 800201c:	4303      	orrs	r3, r0
 800201e:	d11d      	bne.n	800205c <__aeabi_dsub+0x5a8>
 8002020:	2280      	movs	r2, #128	; 0x80
 8002022:	2500      	movs	r5, #0
 8002024:	0312      	lsls	r2, r2, #12
 8002026:	e70b      	b.n	8001e40 <__aeabi_dsub+0x38c>
 8002028:	08c0      	lsrs	r0, r0, #3
 800202a:	077b      	lsls	r3, r7, #29
 800202c:	465d      	mov	r5, fp
 800202e:	4303      	orrs	r3, r0
 8002030:	08fa      	lsrs	r2, r7, #3
 8002032:	e6d3      	b.n	8001ddc <__aeabi_dsub+0x328>
 8002034:	1ac4      	subs	r4, r0, r3
 8002036:	42a0      	cmp	r0, r4
 8002038:	4180      	sbcs	r0, r0
 800203a:	464b      	mov	r3, r9
 800203c:	4240      	negs	r0, r0
 800203e:	1aff      	subs	r7, r7, r3
 8002040:	1a3b      	subs	r3, r7, r0
 8002042:	469a      	mov	sl, r3
 8002044:	465d      	mov	r5, fp
 8002046:	e597      	b.n	8001b78 <__aeabi_dsub+0xc4>
 8002048:	1a1c      	subs	r4, r3, r0
 800204a:	464a      	mov	r2, r9
 800204c:	42a3      	cmp	r3, r4
 800204e:	419b      	sbcs	r3, r3
 8002050:	1bd7      	subs	r7, r2, r7
 8002052:	425b      	negs	r3, r3
 8002054:	1afb      	subs	r3, r7, r3
 8002056:	469a      	mov	sl, r3
 8002058:	2601      	movs	r6, #1
 800205a:	e585      	b.n	8001b68 <__aeabi_dsub+0xb4>
 800205c:	08c0      	lsrs	r0, r0, #3
 800205e:	077b      	lsls	r3, r7, #29
 8002060:	465d      	mov	r5, fp
 8002062:	4303      	orrs	r3, r0
 8002064:	08fa      	lsrs	r2, r7, #3
 8002066:	e6e7      	b.n	8001e38 <__aeabi_dsub+0x384>
 8002068:	464a      	mov	r2, r9
 800206a:	08db      	lsrs	r3, r3, #3
 800206c:	0752      	lsls	r2, r2, #29
 800206e:	4313      	orrs	r3, r2
 8002070:	464a      	mov	r2, r9
 8002072:	08d2      	lsrs	r2, r2, #3
 8002074:	e6b5      	b.n	8001de2 <__aeabi_dsub+0x32e>
 8002076:	08c0      	lsrs	r0, r0, #3
 8002078:	077b      	lsls	r3, r7, #29
 800207a:	4303      	orrs	r3, r0
 800207c:	08fa      	lsrs	r2, r7, #3
 800207e:	e6db      	b.n	8001e38 <__aeabi_dsub+0x384>
 8002080:	4649      	mov	r1, r9
 8002082:	4319      	orrs	r1, r3
 8002084:	000b      	movs	r3, r1
 8002086:	1e59      	subs	r1, r3, #1
 8002088:	418b      	sbcs	r3, r1
 800208a:	001c      	movs	r4, r3
 800208c:	e653      	b.n	8001d36 <__aeabi_dsub+0x282>
 800208e:	464d      	mov	r5, r9
 8002090:	3c20      	subs	r4, #32
 8002092:	40e5      	lsrs	r5, r4
 8002094:	2920      	cmp	r1, #32
 8002096:	d005      	beq.n	80020a4 <__aeabi_dsub+0x5f0>
 8002098:	2440      	movs	r4, #64	; 0x40
 800209a:	1a64      	subs	r4, r4, r1
 800209c:	4649      	mov	r1, r9
 800209e:	40a1      	lsls	r1, r4
 80020a0:	430b      	orrs	r3, r1
 80020a2:	4698      	mov	r8, r3
 80020a4:	4643      	mov	r3, r8
 80020a6:	1e5c      	subs	r4, r3, #1
 80020a8:	41a3      	sbcs	r3, r4
 80020aa:	432b      	orrs	r3, r5
 80020ac:	e776      	b.n	8001f9c <__aeabi_dsub+0x4e8>
 80020ae:	2a00      	cmp	r2, #0
 80020b0:	d0e1      	beq.n	8002076 <__aeabi_dsub+0x5c2>
 80020b2:	003a      	movs	r2, r7
 80020b4:	08db      	lsrs	r3, r3, #3
 80020b6:	4302      	orrs	r2, r0
 80020b8:	d100      	bne.n	80020bc <__aeabi_dsub+0x608>
 80020ba:	e6b8      	b.n	8001e2e <__aeabi_dsub+0x37a>
 80020bc:	464a      	mov	r2, r9
 80020be:	0752      	lsls	r2, r2, #29
 80020c0:	2480      	movs	r4, #128	; 0x80
 80020c2:	4313      	orrs	r3, r2
 80020c4:	464a      	mov	r2, r9
 80020c6:	0324      	lsls	r4, r4, #12
 80020c8:	08d2      	lsrs	r2, r2, #3
 80020ca:	4222      	tst	r2, r4
 80020cc:	d007      	beq.n	80020de <__aeabi_dsub+0x62a>
 80020ce:	08fe      	lsrs	r6, r7, #3
 80020d0:	4226      	tst	r6, r4
 80020d2:	d104      	bne.n	80020de <__aeabi_dsub+0x62a>
 80020d4:	465d      	mov	r5, fp
 80020d6:	0032      	movs	r2, r6
 80020d8:	08c3      	lsrs	r3, r0, #3
 80020da:	077f      	lsls	r7, r7, #29
 80020dc:	433b      	orrs	r3, r7
 80020de:	0f59      	lsrs	r1, r3, #29
 80020e0:	00db      	lsls	r3, r3, #3
 80020e2:	0749      	lsls	r1, r1, #29
 80020e4:	08db      	lsrs	r3, r3, #3
 80020e6:	430b      	orrs	r3, r1
 80020e8:	e6a6      	b.n	8001e38 <__aeabi_dsub+0x384>
 80020ea:	1ac4      	subs	r4, r0, r3
 80020ec:	42a0      	cmp	r0, r4
 80020ee:	4180      	sbcs	r0, r0
 80020f0:	464b      	mov	r3, r9
 80020f2:	4240      	negs	r0, r0
 80020f4:	1aff      	subs	r7, r7, r3
 80020f6:	1a3b      	subs	r3, r7, r0
 80020f8:	469a      	mov	sl, r3
 80020fa:	465d      	mov	r5, fp
 80020fc:	2601      	movs	r6, #1
 80020fe:	e533      	b.n	8001b68 <__aeabi_dsub+0xb4>
 8002100:	003b      	movs	r3, r7
 8002102:	4303      	orrs	r3, r0
 8002104:	d100      	bne.n	8002108 <__aeabi_dsub+0x654>
 8002106:	e715      	b.n	8001f34 <__aeabi_dsub+0x480>
 8002108:	08c0      	lsrs	r0, r0, #3
 800210a:	077b      	lsls	r3, r7, #29
 800210c:	465d      	mov	r5, fp
 800210e:	4303      	orrs	r3, r0
 8002110:	08fa      	lsrs	r2, r7, #3
 8002112:	e666      	b.n	8001de2 <__aeabi_dsub+0x32e>
 8002114:	08c0      	lsrs	r0, r0, #3
 8002116:	077b      	lsls	r3, r7, #29
 8002118:	4303      	orrs	r3, r0
 800211a:	08fa      	lsrs	r2, r7, #3
 800211c:	e65e      	b.n	8001ddc <__aeabi_dsub+0x328>
 800211e:	003a      	movs	r2, r7
 8002120:	08db      	lsrs	r3, r3, #3
 8002122:	4302      	orrs	r2, r0
 8002124:	d100      	bne.n	8002128 <__aeabi_dsub+0x674>
 8002126:	e682      	b.n	8001e2e <__aeabi_dsub+0x37a>
 8002128:	464a      	mov	r2, r9
 800212a:	0752      	lsls	r2, r2, #29
 800212c:	2480      	movs	r4, #128	; 0x80
 800212e:	4313      	orrs	r3, r2
 8002130:	464a      	mov	r2, r9
 8002132:	0324      	lsls	r4, r4, #12
 8002134:	08d2      	lsrs	r2, r2, #3
 8002136:	4222      	tst	r2, r4
 8002138:	d007      	beq.n	800214a <__aeabi_dsub+0x696>
 800213a:	08fe      	lsrs	r6, r7, #3
 800213c:	4226      	tst	r6, r4
 800213e:	d104      	bne.n	800214a <__aeabi_dsub+0x696>
 8002140:	465d      	mov	r5, fp
 8002142:	0032      	movs	r2, r6
 8002144:	08c3      	lsrs	r3, r0, #3
 8002146:	077f      	lsls	r7, r7, #29
 8002148:	433b      	orrs	r3, r7
 800214a:	0f59      	lsrs	r1, r3, #29
 800214c:	00db      	lsls	r3, r3, #3
 800214e:	08db      	lsrs	r3, r3, #3
 8002150:	0749      	lsls	r1, r1, #29
 8002152:	430b      	orrs	r3, r1
 8002154:	e670      	b.n	8001e38 <__aeabi_dsub+0x384>
 8002156:	08c0      	lsrs	r0, r0, #3
 8002158:	077b      	lsls	r3, r7, #29
 800215a:	4303      	orrs	r3, r0
 800215c:	08fa      	lsrs	r2, r7, #3
 800215e:	e640      	b.n	8001de2 <__aeabi_dsub+0x32e>
 8002160:	464c      	mov	r4, r9
 8002162:	3920      	subs	r1, #32
 8002164:	40cc      	lsrs	r4, r1
 8002166:	4661      	mov	r1, ip
 8002168:	2920      	cmp	r1, #32
 800216a:	d006      	beq.n	800217a <__aeabi_dsub+0x6c6>
 800216c:	4666      	mov	r6, ip
 800216e:	2140      	movs	r1, #64	; 0x40
 8002170:	1b89      	subs	r1, r1, r6
 8002172:	464e      	mov	r6, r9
 8002174:	408e      	lsls	r6, r1
 8002176:	4333      	orrs	r3, r6
 8002178:	4698      	mov	r8, r3
 800217a:	4643      	mov	r3, r8
 800217c:	1e59      	subs	r1, r3, #1
 800217e:	418b      	sbcs	r3, r1
 8002180:	431c      	orrs	r4, r3
 8002182:	e5d8      	b.n	8001d36 <__aeabi_dsub+0x282>
 8002184:	181c      	adds	r4, r3, r0
 8002186:	4284      	cmp	r4, r0
 8002188:	4180      	sbcs	r0, r0
 800218a:	444f      	add	r7, r9
 800218c:	46ba      	mov	sl, r7
 800218e:	4240      	negs	r0, r0
 8002190:	4482      	add	sl, r0
 8002192:	e6d9      	b.n	8001f48 <__aeabi_dsub+0x494>
 8002194:	4653      	mov	r3, sl
 8002196:	4323      	orrs	r3, r4
 8002198:	d100      	bne.n	800219c <__aeabi_dsub+0x6e8>
 800219a:	e6cb      	b.n	8001f34 <__aeabi_dsub+0x480>
 800219c:	e614      	b.n	8001dc8 <__aeabi_dsub+0x314>
 800219e:	46c0      	nop			; (mov r8, r8)
 80021a0:	000007ff 	.word	0x000007ff
 80021a4:	ff7fffff 	.word	0xff7fffff
 80021a8:	000007fe 	.word	0x000007fe
 80021ac:	2300      	movs	r3, #0
 80021ae:	4a01      	ldr	r2, [pc, #4]	; (80021b4 <__aeabi_dsub+0x700>)
 80021b0:	001c      	movs	r4, r3
 80021b2:	e529      	b.n	8001c08 <__aeabi_dsub+0x154>
 80021b4:	000007ff 	.word	0x000007ff

080021b8 <__aeabi_dcmpun>:
 80021b8:	b570      	push	{r4, r5, r6, lr}
 80021ba:	0005      	movs	r5, r0
 80021bc:	480c      	ldr	r0, [pc, #48]	; (80021f0 <__aeabi_dcmpun+0x38>)
 80021be:	031c      	lsls	r4, r3, #12
 80021c0:	0016      	movs	r6, r2
 80021c2:	005b      	lsls	r3, r3, #1
 80021c4:	030a      	lsls	r2, r1, #12
 80021c6:	0049      	lsls	r1, r1, #1
 80021c8:	0b12      	lsrs	r2, r2, #12
 80021ca:	0d49      	lsrs	r1, r1, #21
 80021cc:	0b24      	lsrs	r4, r4, #12
 80021ce:	0d5b      	lsrs	r3, r3, #21
 80021d0:	4281      	cmp	r1, r0
 80021d2:	d008      	beq.n	80021e6 <__aeabi_dcmpun+0x2e>
 80021d4:	4a06      	ldr	r2, [pc, #24]	; (80021f0 <__aeabi_dcmpun+0x38>)
 80021d6:	2000      	movs	r0, #0
 80021d8:	4293      	cmp	r3, r2
 80021da:	d103      	bne.n	80021e4 <__aeabi_dcmpun+0x2c>
 80021dc:	0020      	movs	r0, r4
 80021de:	4330      	orrs	r0, r6
 80021e0:	1e43      	subs	r3, r0, #1
 80021e2:	4198      	sbcs	r0, r3
 80021e4:	bd70      	pop	{r4, r5, r6, pc}
 80021e6:	2001      	movs	r0, #1
 80021e8:	432a      	orrs	r2, r5
 80021ea:	d1fb      	bne.n	80021e4 <__aeabi_dcmpun+0x2c>
 80021ec:	e7f2      	b.n	80021d4 <__aeabi_dcmpun+0x1c>
 80021ee:	46c0      	nop			; (mov r8, r8)
 80021f0:	000007ff 	.word	0x000007ff

080021f4 <__aeabi_d2iz>:
 80021f4:	000a      	movs	r2, r1
 80021f6:	b530      	push	{r4, r5, lr}
 80021f8:	4c13      	ldr	r4, [pc, #76]	; (8002248 <__aeabi_d2iz+0x54>)
 80021fa:	0053      	lsls	r3, r2, #1
 80021fc:	0309      	lsls	r1, r1, #12
 80021fe:	0005      	movs	r5, r0
 8002200:	0b09      	lsrs	r1, r1, #12
 8002202:	2000      	movs	r0, #0
 8002204:	0d5b      	lsrs	r3, r3, #21
 8002206:	0fd2      	lsrs	r2, r2, #31
 8002208:	42a3      	cmp	r3, r4
 800220a:	dd04      	ble.n	8002216 <__aeabi_d2iz+0x22>
 800220c:	480f      	ldr	r0, [pc, #60]	; (800224c <__aeabi_d2iz+0x58>)
 800220e:	4283      	cmp	r3, r0
 8002210:	dd02      	ble.n	8002218 <__aeabi_d2iz+0x24>
 8002212:	4b0f      	ldr	r3, [pc, #60]	; (8002250 <__aeabi_d2iz+0x5c>)
 8002214:	18d0      	adds	r0, r2, r3
 8002216:	bd30      	pop	{r4, r5, pc}
 8002218:	2080      	movs	r0, #128	; 0x80
 800221a:	0340      	lsls	r0, r0, #13
 800221c:	4301      	orrs	r1, r0
 800221e:	480d      	ldr	r0, [pc, #52]	; (8002254 <__aeabi_d2iz+0x60>)
 8002220:	1ac0      	subs	r0, r0, r3
 8002222:	281f      	cmp	r0, #31
 8002224:	dd08      	ble.n	8002238 <__aeabi_d2iz+0x44>
 8002226:	480c      	ldr	r0, [pc, #48]	; (8002258 <__aeabi_d2iz+0x64>)
 8002228:	1ac3      	subs	r3, r0, r3
 800222a:	40d9      	lsrs	r1, r3
 800222c:	000b      	movs	r3, r1
 800222e:	4258      	negs	r0, r3
 8002230:	2a00      	cmp	r2, #0
 8002232:	d1f0      	bne.n	8002216 <__aeabi_d2iz+0x22>
 8002234:	0018      	movs	r0, r3
 8002236:	e7ee      	b.n	8002216 <__aeabi_d2iz+0x22>
 8002238:	4c08      	ldr	r4, [pc, #32]	; (800225c <__aeabi_d2iz+0x68>)
 800223a:	40c5      	lsrs	r5, r0
 800223c:	46a4      	mov	ip, r4
 800223e:	4463      	add	r3, ip
 8002240:	4099      	lsls	r1, r3
 8002242:	000b      	movs	r3, r1
 8002244:	432b      	orrs	r3, r5
 8002246:	e7f2      	b.n	800222e <__aeabi_d2iz+0x3a>
 8002248:	000003fe 	.word	0x000003fe
 800224c:	0000041d 	.word	0x0000041d
 8002250:	7fffffff 	.word	0x7fffffff
 8002254:	00000433 	.word	0x00000433
 8002258:	00000413 	.word	0x00000413
 800225c:	fffffbed 	.word	0xfffffbed

08002260 <__aeabi_i2d>:
 8002260:	b570      	push	{r4, r5, r6, lr}
 8002262:	2800      	cmp	r0, #0
 8002264:	d016      	beq.n	8002294 <__aeabi_i2d+0x34>
 8002266:	17c3      	asrs	r3, r0, #31
 8002268:	18c5      	adds	r5, r0, r3
 800226a:	405d      	eors	r5, r3
 800226c:	0fc4      	lsrs	r4, r0, #31
 800226e:	0028      	movs	r0, r5
 8002270:	f000 f84c 	bl	800230c <__clzsi2>
 8002274:	4b11      	ldr	r3, [pc, #68]	; (80022bc <__aeabi_i2d+0x5c>)
 8002276:	1a1b      	subs	r3, r3, r0
 8002278:	280a      	cmp	r0, #10
 800227a:	dc16      	bgt.n	80022aa <__aeabi_i2d+0x4a>
 800227c:	0002      	movs	r2, r0
 800227e:	002e      	movs	r6, r5
 8002280:	3215      	adds	r2, #21
 8002282:	4096      	lsls	r6, r2
 8002284:	220b      	movs	r2, #11
 8002286:	1a12      	subs	r2, r2, r0
 8002288:	40d5      	lsrs	r5, r2
 800228a:	055b      	lsls	r3, r3, #21
 800228c:	032d      	lsls	r5, r5, #12
 800228e:	0b2d      	lsrs	r5, r5, #12
 8002290:	0d5b      	lsrs	r3, r3, #21
 8002292:	e003      	b.n	800229c <__aeabi_i2d+0x3c>
 8002294:	2400      	movs	r4, #0
 8002296:	2300      	movs	r3, #0
 8002298:	2500      	movs	r5, #0
 800229a:	2600      	movs	r6, #0
 800229c:	051b      	lsls	r3, r3, #20
 800229e:	432b      	orrs	r3, r5
 80022a0:	07e4      	lsls	r4, r4, #31
 80022a2:	4323      	orrs	r3, r4
 80022a4:	0030      	movs	r0, r6
 80022a6:	0019      	movs	r1, r3
 80022a8:	bd70      	pop	{r4, r5, r6, pc}
 80022aa:	380b      	subs	r0, #11
 80022ac:	4085      	lsls	r5, r0
 80022ae:	055b      	lsls	r3, r3, #21
 80022b0:	032d      	lsls	r5, r5, #12
 80022b2:	2600      	movs	r6, #0
 80022b4:	0b2d      	lsrs	r5, r5, #12
 80022b6:	0d5b      	lsrs	r3, r3, #21
 80022b8:	e7f0      	b.n	800229c <__aeabi_i2d+0x3c>
 80022ba:	46c0      	nop			; (mov r8, r8)
 80022bc:	0000041e 	.word	0x0000041e

080022c0 <__aeabi_ui2d>:
 80022c0:	b510      	push	{r4, lr}
 80022c2:	1e04      	subs	r4, r0, #0
 80022c4:	d010      	beq.n	80022e8 <__aeabi_ui2d+0x28>
 80022c6:	f000 f821 	bl	800230c <__clzsi2>
 80022ca:	4b0f      	ldr	r3, [pc, #60]	; (8002308 <__aeabi_ui2d+0x48>)
 80022cc:	1a1b      	subs	r3, r3, r0
 80022ce:	280a      	cmp	r0, #10
 80022d0:	dc11      	bgt.n	80022f6 <__aeabi_ui2d+0x36>
 80022d2:	220b      	movs	r2, #11
 80022d4:	0021      	movs	r1, r4
 80022d6:	1a12      	subs	r2, r2, r0
 80022d8:	40d1      	lsrs	r1, r2
 80022da:	3015      	adds	r0, #21
 80022dc:	030a      	lsls	r2, r1, #12
 80022de:	055b      	lsls	r3, r3, #21
 80022e0:	4084      	lsls	r4, r0
 80022e2:	0b12      	lsrs	r2, r2, #12
 80022e4:	0d5b      	lsrs	r3, r3, #21
 80022e6:	e001      	b.n	80022ec <__aeabi_ui2d+0x2c>
 80022e8:	2300      	movs	r3, #0
 80022ea:	2200      	movs	r2, #0
 80022ec:	051b      	lsls	r3, r3, #20
 80022ee:	4313      	orrs	r3, r2
 80022f0:	0020      	movs	r0, r4
 80022f2:	0019      	movs	r1, r3
 80022f4:	bd10      	pop	{r4, pc}
 80022f6:	0022      	movs	r2, r4
 80022f8:	380b      	subs	r0, #11
 80022fa:	4082      	lsls	r2, r0
 80022fc:	055b      	lsls	r3, r3, #21
 80022fe:	0312      	lsls	r2, r2, #12
 8002300:	2400      	movs	r4, #0
 8002302:	0b12      	lsrs	r2, r2, #12
 8002304:	0d5b      	lsrs	r3, r3, #21
 8002306:	e7f1      	b.n	80022ec <__aeabi_ui2d+0x2c>
 8002308:	0000041e 	.word	0x0000041e

0800230c <__clzsi2>:
 800230c:	211c      	movs	r1, #28
 800230e:	2301      	movs	r3, #1
 8002310:	041b      	lsls	r3, r3, #16
 8002312:	4298      	cmp	r0, r3
 8002314:	d301      	bcc.n	800231a <__clzsi2+0xe>
 8002316:	0c00      	lsrs	r0, r0, #16
 8002318:	3910      	subs	r1, #16
 800231a:	0a1b      	lsrs	r3, r3, #8
 800231c:	4298      	cmp	r0, r3
 800231e:	d301      	bcc.n	8002324 <__clzsi2+0x18>
 8002320:	0a00      	lsrs	r0, r0, #8
 8002322:	3908      	subs	r1, #8
 8002324:	091b      	lsrs	r3, r3, #4
 8002326:	4298      	cmp	r0, r3
 8002328:	d301      	bcc.n	800232e <__clzsi2+0x22>
 800232a:	0900      	lsrs	r0, r0, #4
 800232c:	3904      	subs	r1, #4
 800232e:	a202      	add	r2, pc, #8	; (adr r2, 8002338 <__clzsi2+0x2c>)
 8002330:	5c10      	ldrb	r0, [r2, r0]
 8002332:	1840      	adds	r0, r0, r1
 8002334:	4770      	bx	lr
 8002336:	46c0      	nop			; (mov r8, r8)
 8002338:	02020304 	.word	0x02020304
 800233c:	01010101 	.word	0x01010101
	...

08002348 <__clzdi2>:
 8002348:	b510      	push	{r4, lr}
 800234a:	2900      	cmp	r1, #0
 800234c:	d103      	bne.n	8002356 <__clzdi2+0xe>
 800234e:	f7ff ffdd 	bl	800230c <__clzsi2>
 8002352:	3020      	adds	r0, #32
 8002354:	e002      	b.n	800235c <__clzdi2+0x14>
 8002356:	0008      	movs	r0, r1
 8002358:	f7ff ffd8 	bl	800230c <__clzsi2>
 800235c:	bd10      	pop	{r4, pc}
 800235e:	46c0      	nop			; (mov r8, r8)

08002360 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8002360:	b590      	push	{r4, r7, lr}
 8002362:	b091      	sub	sp, #68	; 0x44
 8002364:	af10      	add	r7, sp, #64	; 0x40
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8002366:	f000 ff05 	bl	8003174 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800236a:	f000 f8a5 	bl	80024b8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800236e:	f000 fa6d 	bl	800284c <MX_GPIO_Init>
  MX_USART2_UART_Init();
 8002372:	f000 f9cf 	bl	8002714 <MX_USART2_UART_Init>
  MX_RTC_Init();
 8002376:	f000 f8eb 	bl	8002550 <MX_RTC_Init>
  MX_TIM6_Init();
 800237a:	f000 f98d 	bl	8002698 <MX_TIM6_Init>
  MX_USART3_UART_Init();
 800237e:	f000 fa17 	bl	80027b0 <MX_USART3_UART_Init>
  /* USER CODE BEGIN 2 */

  // System hello
  HAL_UART_Transmit ( HUART_DBG , (uint8_t*) hello , strlen (hello) , UART_TIMEOUT ) ;
 8002382:	4b45      	ldr	r3, [pc, #276]	; (8002498 <main+0x138>)
 8002384:	681c      	ldr	r4, [r3, #0]
 8002386:	4b44      	ldr	r3, [pc, #272]	; (8002498 <main+0x138>)
 8002388:	681b      	ldr	r3, [r3, #0]
 800238a:	0018      	movs	r0, r3
 800238c:	f7fd feba 	bl	8000104 <strlen>
 8002390:	0003      	movs	r3, r0
 8002392:	b29a      	uxth	r2, r3
 8002394:	23fa      	movs	r3, #250	; 0xfa
 8002396:	009b      	lsls	r3, r3, #2
 8002398:	4840      	ldr	r0, [pc, #256]	; (800249c <main+0x13c>)
 800239a:	0021      	movs	r1, r4
 800239c:	f003 faa6 	bl	80058ec <HAL_UART_Transmit>

  // System Init
  my_tim_init ( HTIM ) ;
 80023a0:	4c3f      	ldr	r4, [pc, #252]	; (80024a0 <main+0x140>)
 80023a2:	466b      	mov	r3, sp
 80023a4:	0018      	movs	r0, r3
 80023a6:	0023      	movs	r3, r4
 80023a8:	3310      	adds	r3, #16
 80023aa:	223c      	movs	r2, #60	; 0x3c
 80023ac:	0019      	movs	r1, r3
 80023ae:	f006 f9a1 	bl	80086f4 <memcpy>
 80023b2:	6820      	ldr	r0, [r4, #0]
 80023b4:	6861      	ldr	r1, [r4, #4]
 80023b6:	68a2      	ldr	r2, [r4, #8]
 80023b8:	68e3      	ldr	r3, [r4, #12]
 80023ba:	f000 fb81 	bl	8002ac0 <my_tim_init>

  if ( !is_system_initialized () )
 80023be:	f000 fc31 	bl	8002c24 <is_system_initialized>
 80023c2:	0003      	movs	r3, r0
 80023c4:	001a      	movs	r2, r3
 80023c6:	2301      	movs	r3, #1
 80023c8:	4053      	eors	r3, r2
 80023ca:	b2db      	uxtb	r3, r3
 80023cc:	2b00      	cmp	r3, #0
 80023ce:	d017      	beq.n	8002400 <main+0xa0>
	  if ( !my_astro_init ( htim6 ) )
 80023d0:	4c33      	ldr	r4, [pc, #204]	; (80024a0 <main+0x140>)
 80023d2:	466b      	mov	r3, sp
 80023d4:	0018      	movs	r0, r3
 80023d6:	0023      	movs	r3, r4
 80023d8:	3310      	adds	r3, #16
 80023da:	223c      	movs	r2, #60	; 0x3c
 80023dc:	0019      	movs	r1, r3
 80023de:	f006 f989 	bl	80086f4 <memcpy>
 80023e2:	6820      	ldr	r0, [r4, #0]
 80023e4:	6861      	ldr	r1, [r4, #4]
 80023e6:	68a2      	ldr	r2, [r4, #8]
 80023e8:	68e3      	ldr	r3, [r4, #12]
 80023ea:	f000 fbab 	bl	8002b44 <my_astro_init>
 80023ee:	0003      	movs	r3, r0
 80023f0:	001a      	movs	r2, r3
 80023f2:	2301      	movs	r3, #1
 80023f4:	4053      	eors	r3, r2
 80023f6:	b2db      	uxtb	r3, r3
 80023f8:	2b00      	cmp	r3, #0
 80023fa:	d001      	beq.n	8002400 <main+0xa0>
		  HAL_NVIC_SystemReset () ;
 80023fc:	f001 f879 	bl	80034f2 <HAL_NVIC_SystemReset>

  if ( my_rtc_set_alarm ( 20 ) )
 8002400:	2014      	movs	r0, #20
 8002402:	f005 fdd9 	bl	8007fb8 <my_rtc_set_alarm>
 8002406:	1e03      	subs	r3, r0, #0
 8002408:	d014      	beq.n	8002434 <main+0xd4>
  {
	  //HAL_Delay ( 8000 ) ;
	  //my_rtc_get_dt_s ( rtc_dt_s ) ;
	  //send_debug_logs ( rtc_dt_s ) ;
	  HAL_SuspendTick () ; // Jak nie wyłączę to mnie przerwanie SysTick od razu wybudzi!!!
 800240a:	f000 ff5d 	bl	80032c8 <HAL_SuspendTick>
	  HAL_PWR_EnterSTOPMode ( PWR_LOWPOWERREGULATOR_ON , PWR_STOPENTRY_WFE ) ;
 800240e:	2380      	movs	r3, #128	; 0x80
 8002410:	01db      	lsls	r3, r3, #7
 8002412:	2102      	movs	r1, #2
 8002414:	0018      	movs	r0, r3
 8002416:	f001 fa57 	bl	80038c8 <HAL_PWR_EnterSTOPMode>
	  HAL_ResumeTick () ;
 800241a:	f000 ff63 	bl	80032e4 <HAL_ResumeTick>
	  if ( is_rtc_alarm_a_flag )
 800241e:	4b21      	ldr	r3, [pc, #132]	; (80024a4 <main+0x144>)
 8002420:	781b      	ldrb	r3, [r3, #0]
 8002422:	2b00      	cmp	r3, #0
 8002424:	d006      	beq.n	8002434 <main+0xd4>
	  {
		  send_debug_logs ( "main.c - running sm: RTC AlarmA happened. " ) ;
 8002426:	4b20      	ldr	r3, [pc, #128]	; (80024a8 <main+0x148>)
 8002428:	0018      	movs	r0, r3
 800242a:	f000 fa9d 	bl	8002968 <send_debug_logs>
		  is_rtc_alarm_a_flag = false ;
 800242e:	4b1d      	ldr	r3, [pc, #116]	; (80024a4 <main+0x144>)
 8002430:	2200      	movs	r2, #0
 8002432:	701a      	strb	r2, [r3, #0]

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  if ( is_astro_evt_flag ) // W takim układzie nowe przerwanie w trakcie obługi starego nie spowoduje, ze coś pominę
 8002434:	4b1d      	ldr	r3, [pc, #116]	; (80024ac <main+0x14c>)
 8002436:	781b      	ldrb	r3, [r3, #0]
 8002438:	2b00      	cmp	r3, #0
 800243a:	d00d      	beq.n	8002458 <main+0xf8>
	  {
		  while ( is_evt_pin_high() )
 800243c:	e005      	b.n	800244a <main+0xea>
		  {
			  send_debug_logs ( "main.c - running sm: is_evt_pin_high" ) ;
 800243e:	4b1c      	ldr	r3, [pc, #112]	; (80024b0 <main+0x150>)
 8002440:	0018      	movs	r0, r3
 8002442:	f000 fa91 	bl	8002968 <send_debug_logs>
			  my_astro_read_evt_reg () ;
 8002446:	f005 fd27 	bl	8007e98 <my_astro_read_evt_reg>
		  while ( is_evt_pin_high() )
 800244a:	f000 fb09 	bl	8002a60 <is_evt_pin_high>
 800244e:	1e03      	subs	r3, r0, #0
 8002450:	d1f5      	bne.n	800243e <main+0xde>
		  }
	  	  is_astro_evt_flag = false ;
 8002452:	4b16      	ldr	r3, [pc, #88]	; (80024ac <main+0x14c>)
 8002454:	2200      	movs	r2, #0
 8002456:	701a      	strb	r2, [r3, #0]
	  }
	  send_debug_logs ( "main.c - running sm: nothing to do! Going to stop for 10 s" ) ;
 8002458:	4b16      	ldr	r3, [pc, #88]	; (80024b4 <main+0x154>)
 800245a:	0018      	movs	r0, r3
 800245c:	f000 fa84 	bl	8002968 <send_debug_logs>
	  if ( my_rtc_set_alarm ( 20 ) )
 8002460:	2014      	movs	r0, #20
 8002462:	f005 fda9 	bl	8007fb8 <my_rtc_set_alarm>
 8002466:	1e03      	subs	r3, r0, #0
 8002468:	d0e4      	beq.n	8002434 <main+0xd4>
	  {
		  HAL_SuspendTick () ; // Jak nie wyłączę to mnie przerwanie SysTick od razu wybudzi!!!
 800246a:	f000 ff2d 	bl	80032c8 <HAL_SuspendTick>
		  HAL_PWR_EnterSTOPMode ( PWR_LOWPOWERREGULATOR_ON , PWR_STOPENTRY_WFE ) ;
 800246e:	2380      	movs	r3, #128	; 0x80
 8002470:	01db      	lsls	r3, r3, #7
 8002472:	2102      	movs	r1, #2
 8002474:	0018      	movs	r0, r3
 8002476:	f001 fa27 	bl	80038c8 <HAL_PWR_EnterSTOPMode>
		  HAL_ResumeTick () ;
 800247a:	f000 ff33 	bl	80032e4 <HAL_ResumeTick>
		  if ( is_rtc_alarm_a_flag )
 800247e:	4b09      	ldr	r3, [pc, #36]	; (80024a4 <main+0x144>)
 8002480:	781b      	ldrb	r3, [r3, #0]
 8002482:	2b00      	cmp	r3, #0
 8002484:	d0d6      	beq.n	8002434 <main+0xd4>
		  {
			  send_debug_logs ( "main.c - running sm: RTC AlarmA happened. " ) ;
 8002486:	4b08      	ldr	r3, [pc, #32]	; (80024a8 <main+0x148>)
 8002488:	0018      	movs	r0, r3
 800248a:	f000 fa6d 	bl	8002968 <send_debug_logs>
			  is_rtc_alarm_a_flag = false ;
 800248e:	4b05      	ldr	r3, [pc, #20]	; (80024a4 <main+0x144>)
 8002490:	2200      	movs	r2, #0
 8002492:	701a      	strb	r2, [r3, #0]
	  if ( is_astro_evt_flag ) // W takim układzie nowe przerwanie w trakcie obługi starego nie spowoduje, ze coś pominę
 8002494:	e7ce      	b.n	8002434 <main+0xd4>
 8002496:	46c0      	nop			; (mov r8, r8)
 8002498:	20000000 	.word	0x20000000
 800249c:	20000754 	.word	0x20000754
 80024a0:	20000708 	.word	0x20000708
 80024a4:	20000893 	.word	0x20000893
 80024a8:	0800d0d0 	.word	0x0800d0d0
 80024ac:	20000892 	.word	0x20000892
 80024b0:	0800d0fc 	.word	0x0800d0fc
 80024b4:	0800d124 	.word	0x0800d124

080024b8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80024b8:	b590      	push	{r4, r7, lr}
 80024ba:	b095      	sub	sp, #84	; 0x54
 80024bc:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80024be:	2414      	movs	r4, #20
 80024c0:	193b      	adds	r3, r7, r4
 80024c2:	0018      	movs	r0, r3
 80024c4:	233c      	movs	r3, #60	; 0x3c
 80024c6:	001a      	movs	r2, r3
 80024c8:	2100      	movs	r1, #0
 80024ca:	f006 f887 	bl	80085dc <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80024ce:	1d3b      	adds	r3, r7, #4
 80024d0:	0018      	movs	r0, r3
 80024d2:	2310      	movs	r3, #16
 80024d4:	001a      	movs	r2, r3
 80024d6:	2100      	movs	r1, #0
 80024d8:	f006 f880 	bl	80085dc <memset>

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1);
 80024dc:	2380      	movs	r3, #128	; 0x80
 80024de:	009b      	lsls	r3, r3, #2
 80024e0:	0018      	movs	r0, r3
 80024e2:	f001 fa29 	bl	8003938 <HAL_PWREx_ControlVoltageScaling>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_LSI;
 80024e6:	193b      	adds	r3, r7, r4
 80024e8:	220a      	movs	r2, #10
 80024ea:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80024ec:	193b      	adds	r3, r7, r4
 80024ee:	2280      	movs	r2, #128	; 0x80
 80024f0:	0052      	lsls	r2, r2, #1
 80024f2:	60da      	str	r2, [r3, #12]
  RCC_OscInitStruct.HSIDiv = RCC_HSI_DIV1;
 80024f4:	0021      	movs	r1, r4
 80024f6:	187b      	adds	r3, r7, r1
 80024f8:	2200      	movs	r2, #0
 80024fa:	611a      	str	r2, [r3, #16]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80024fc:	187b      	adds	r3, r7, r1
 80024fe:	2240      	movs	r2, #64	; 0x40
 8002500:	615a      	str	r2, [r3, #20]
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 8002502:	187b      	adds	r3, r7, r1
 8002504:	2201      	movs	r2, #1
 8002506:	619a      	str	r2, [r3, #24]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8002508:	187b      	adds	r3, r7, r1
 800250a:	2200      	movs	r2, #0
 800250c:	621a      	str	r2, [r3, #32]
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800250e:	187b      	adds	r3, r7, r1
 8002510:	0018      	movs	r0, r3
 8002512:	f001 fa5d 	bl	80039d0 <HAL_RCC_OscConfig>
 8002516:	1e03      	subs	r3, r0, #0
 8002518:	d001      	beq.n	800251e <SystemClock_Config+0x66>
  {
    Error_Handler();
 800251a:	f000 fbd5 	bl	8002cc8 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800251e:	1d3b      	adds	r3, r7, #4
 8002520:	2207      	movs	r2, #7
 8002522:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8002524:	1d3b      	adds	r3, r7, #4
 8002526:	2200      	movs	r2, #0
 8002528:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800252a:	1d3b      	adds	r3, r7, #4
 800252c:	2200      	movs	r2, #0
 800252e:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8002530:	1d3b      	adds	r3, r7, #4
 8002532:	2200      	movs	r2, #0
 8002534:	60da      	str	r2, [r3, #12]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8002536:	1d3b      	adds	r3, r7, #4
 8002538:	2100      	movs	r1, #0
 800253a:	0018      	movs	r0, r3
 800253c:	f001 fda8 	bl	8004090 <HAL_RCC_ClockConfig>
 8002540:	1e03      	subs	r3, r0, #0
 8002542:	d001      	beq.n	8002548 <SystemClock_Config+0x90>
  {
    Error_Handler();
 8002544:	f000 fbc0 	bl	8002cc8 <Error_Handler>
  }
}
 8002548:	46c0      	nop			; (mov r8, r8)
 800254a:	46bd      	mov	sp, r7
 800254c:	b015      	add	sp, #84	; 0x54
 800254e:	bd90      	pop	{r4, r7, pc}

08002550 <MX_RTC_Init>:
  * @brief RTC Initialization Function
  * @param None
  * @retval None
  */
static void MX_RTC_Init(void)
{
 8002550:	b580      	push	{r7, lr}
 8002552:	b090      	sub	sp, #64	; 0x40
 8002554:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN RTC_Init 0 */

  /* USER CODE END RTC_Init 0 */

  RTC_TimeTypeDef sTime = {0};
 8002556:	232c      	movs	r3, #44	; 0x2c
 8002558:	18fb      	adds	r3, r7, r3
 800255a:	0018      	movs	r0, r3
 800255c:	2314      	movs	r3, #20
 800255e:	001a      	movs	r2, r3
 8002560:	2100      	movs	r1, #0
 8002562:	f006 f83b 	bl	80085dc <memset>
  RTC_DateTypeDef sDate = {0};
 8002566:	2328      	movs	r3, #40	; 0x28
 8002568:	18fb      	adds	r3, r7, r3
 800256a:	2200      	movs	r2, #0
 800256c:	601a      	str	r2, [r3, #0]
  RTC_AlarmTypeDef sAlarm = {0};
 800256e:	003b      	movs	r3, r7
 8002570:	0018      	movs	r0, r3
 8002572:	2328      	movs	r3, #40	; 0x28
 8002574:	001a      	movs	r2, r3
 8002576:	2100      	movs	r1, #0
 8002578:	f006 f830 	bl	80085dc <memset>

  /* USER CODE END RTC_Init 1 */

  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 800257c:	4b44      	ldr	r3, [pc, #272]	; (8002690 <MX_RTC_Init+0x140>)
 800257e:	4a45      	ldr	r2, [pc, #276]	; (8002694 <MX_RTC_Init+0x144>)
 8002580:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 8002582:	4b43      	ldr	r3, [pc, #268]	; (8002690 <MX_RTC_Init+0x140>)
 8002584:	2200      	movs	r2, #0
 8002586:	609a      	str	r2, [r3, #8]
  hrtc.Init.AsynchPrediv = 127;
 8002588:	4b41      	ldr	r3, [pc, #260]	; (8002690 <MX_RTC_Init+0x140>)
 800258a:	227f      	movs	r2, #127	; 0x7f
 800258c:	60da      	str	r2, [r3, #12]
  hrtc.Init.SynchPrediv = 255;
 800258e:	4b40      	ldr	r3, [pc, #256]	; (8002690 <MX_RTC_Init+0x140>)
 8002590:	22ff      	movs	r2, #255	; 0xff
 8002592:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 8002594:	4b3e      	ldr	r3, [pc, #248]	; (8002690 <MX_RTC_Init+0x140>)
 8002596:	2200      	movs	r2, #0
 8002598:	615a      	str	r2, [r3, #20]
  hrtc.Init.OutPutRemap = RTC_OUTPUT_REMAP_NONE;
 800259a:	4b3d      	ldr	r3, [pc, #244]	; (8002690 <MX_RTC_Init+0x140>)
 800259c:	2200      	movs	r2, #0
 800259e:	619a      	str	r2, [r3, #24]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 80025a0:	4b3b      	ldr	r3, [pc, #236]	; (8002690 <MX_RTC_Init+0x140>)
 80025a2:	2200      	movs	r2, #0
 80025a4:	61da      	str	r2, [r3, #28]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 80025a6:	4b3a      	ldr	r3, [pc, #232]	; (8002690 <MX_RTC_Init+0x140>)
 80025a8:	2280      	movs	r2, #128	; 0x80
 80025aa:	05d2      	lsls	r2, r2, #23
 80025ac:	621a      	str	r2, [r3, #32]
  hrtc.Init.OutPutPullUp = RTC_OUTPUT_PULLUP_NONE;
 80025ae:	4b38      	ldr	r3, [pc, #224]	; (8002690 <MX_RTC_Init+0x140>)
 80025b0:	2200      	movs	r2, #0
 80025b2:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 80025b4:	4b36      	ldr	r3, [pc, #216]	; (8002690 <MX_RTC_Init+0x140>)
 80025b6:	0018      	movs	r0, r3
 80025b8:	f002 f950 	bl	800485c <HAL_RTC_Init>
 80025bc:	1e03      	subs	r3, r0, #0
 80025be:	d001      	beq.n	80025c4 <MX_RTC_Init+0x74>
  {
    Error_Handler();
 80025c0:	f000 fb82 	bl	8002cc8 <Error_Handler>

  /* USER CODE END Check_RTC_BKUP */

  /** Initialize RTC and set the Time and Date
  */
  sTime.Hours = 0;
 80025c4:	212c      	movs	r1, #44	; 0x2c
 80025c6:	187b      	adds	r3, r7, r1
 80025c8:	2200      	movs	r2, #0
 80025ca:	701a      	strb	r2, [r3, #0]
  sTime.Minutes = 0;
 80025cc:	187b      	adds	r3, r7, r1
 80025ce:	2200      	movs	r2, #0
 80025d0:	705a      	strb	r2, [r3, #1]
  sTime.Seconds = 0;
 80025d2:	187b      	adds	r3, r7, r1
 80025d4:	2200      	movs	r2, #0
 80025d6:	709a      	strb	r2, [r3, #2]
  sTime.SubSeconds = 0;
 80025d8:	187b      	adds	r3, r7, r1
 80025da:	2200      	movs	r2, #0
 80025dc:	605a      	str	r2, [r3, #4]
  sTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 80025de:	187b      	adds	r3, r7, r1
 80025e0:	2200      	movs	r2, #0
 80025e2:	60da      	str	r2, [r3, #12]
  sTime.StoreOperation = RTC_STOREOPERATION_RESET;
 80025e4:	187b      	adds	r3, r7, r1
 80025e6:	2200      	movs	r2, #0
 80025e8:	611a      	str	r2, [r3, #16]
  if (HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BIN) != HAL_OK)
 80025ea:	1879      	adds	r1, r7, r1
 80025ec:	4b28      	ldr	r3, [pc, #160]	; (8002690 <MX_RTC_Init+0x140>)
 80025ee:	2200      	movs	r2, #0
 80025f0:	0018      	movs	r0, r3
 80025f2:	f002 f9d5 	bl	80049a0 <HAL_RTC_SetTime>
 80025f6:	1e03      	subs	r3, r0, #0
 80025f8:	d001      	beq.n	80025fe <MX_RTC_Init+0xae>
  {
    Error_Handler();
 80025fa:	f000 fb65 	bl	8002cc8 <Error_Handler>
  }
  sDate.WeekDay = RTC_WEEKDAY_SATURDAY;
 80025fe:	2128      	movs	r1, #40	; 0x28
 8002600:	187b      	adds	r3, r7, r1
 8002602:	2206      	movs	r2, #6
 8002604:	701a      	strb	r2, [r3, #0]
  sDate.Month = RTC_MONTH_JANUARY;
 8002606:	187b      	adds	r3, r7, r1
 8002608:	2201      	movs	r2, #1
 800260a:	705a      	strb	r2, [r3, #1]
  sDate.Date = 1;
 800260c:	187b      	adds	r3, r7, r1
 800260e:	2201      	movs	r2, #1
 8002610:	709a      	strb	r2, [r3, #2]
  sDate.Year = 0;
 8002612:	187b      	adds	r3, r7, r1
 8002614:	2200      	movs	r2, #0
 8002616:	70da      	strb	r2, [r3, #3]

  if (HAL_RTC_SetDate(&hrtc, &sDate, RTC_FORMAT_BIN) != HAL_OK)
 8002618:	1879      	adds	r1, r7, r1
 800261a:	4b1d      	ldr	r3, [pc, #116]	; (8002690 <MX_RTC_Init+0x140>)
 800261c:	2200      	movs	r2, #0
 800261e:	0018      	movs	r0, r3
 8002620:	f002 fac2 	bl	8004ba8 <HAL_RTC_SetDate>
 8002624:	1e03      	subs	r3, r0, #0
 8002626:	d001      	beq.n	800262c <MX_RTC_Init+0xdc>
  {
    Error_Handler();
 8002628:	f000 fb4e 	bl	8002cc8 <Error_Handler>
  }

  /** Enable the Alarm A
  */
  sAlarm.AlarmTime.Hours = 0;
 800262c:	003b      	movs	r3, r7
 800262e:	2200      	movs	r2, #0
 8002630:	701a      	strb	r2, [r3, #0]
  sAlarm.AlarmTime.Minutes = 0;
 8002632:	003b      	movs	r3, r7
 8002634:	2200      	movs	r2, #0
 8002636:	705a      	strb	r2, [r3, #1]
  sAlarm.AlarmTime.Seconds = 0;
 8002638:	003b      	movs	r3, r7
 800263a:	2200      	movs	r2, #0
 800263c:	709a      	strb	r2, [r3, #2]
  sAlarm.AlarmTime.SubSeconds = 0;
 800263e:	003b      	movs	r3, r7
 8002640:	2200      	movs	r2, #0
 8002642:	605a      	str	r2, [r3, #4]
  sAlarm.AlarmTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 8002644:	003b      	movs	r3, r7
 8002646:	2200      	movs	r2, #0
 8002648:	60da      	str	r2, [r3, #12]
  sAlarm.AlarmTime.StoreOperation = RTC_STOREOPERATION_RESET;
 800264a:	003b      	movs	r3, r7
 800264c:	2200      	movs	r2, #0
 800264e:	611a      	str	r2, [r3, #16]
  sAlarm.AlarmMask = RTC_ALARMMASK_NONE;
 8002650:	003b      	movs	r3, r7
 8002652:	2200      	movs	r2, #0
 8002654:	615a      	str	r2, [r3, #20]
  sAlarm.AlarmSubSecondMask = RTC_ALARMSUBSECONDMASK_ALL;
 8002656:	003b      	movs	r3, r7
 8002658:	2200      	movs	r2, #0
 800265a:	619a      	str	r2, [r3, #24]
  sAlarm.AlarmDateWeekDaySel = RTC_ALARMDATEWEEKDAYSEL_DATE;
 800265c:	003b      	movs	r3, r7
 800265e:	2200      	movs	r2, #0
 8002660:	61da      	str	r2, [r3, #28]
  sAlarm.AlarmDateWeekDay = 1;
 8002662:	003b      	movs	r3, r7
 8002664:	2220      	movs	r2, #32
 8002666:	2101      	movs	r1, #1
 8002668:	5499      	strb	r1, [r3, r2]
  sAlarm.Alarm = RTC_ALARM_A;
 800266a:	003b      	movs	r3, r7
 800266c:	2280      	movs	r2, #128	; 0x80
 800266e:	0052      	lsls	r2, r2, #1
 8002670:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_RTC_SetAlarm(&hrtc, &sAlarm, RTC_FORMAT_BIN) != HAL_OK)
 8002672:	0039      	movs	r1, r7
 8002674:	4b06      	ldr	r3, [pc, #24]	; (8002690 <MX_RTC_Init+0x140>)
 8002676:	2200      	movs	r2, #0
 8002678:	0018      	movs	r0, r3
 800267a:	f002 fb75 	bl	8004d68 <HAL_RTC_SetAlarm>
 800267e:	1e03      	subs	r3, r0, #0
 8002680:	d001      	beq.n	8002686 <MX_RTC_Init+0x136>
  {
    Error_Handler();
 8002682:	f000 fb21 	bl	8002cc8 <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 8002686:	46c0      	nop			; (mov r8, r8)
 8002688:	46bd      	mov	sp, r7
 800268a:	b010      	add	sp, #64	; 0x40
 800268c:	bd80      	pop	{r7, pc}
 800268e:	46c0      	nop			; (mov r8, r8)
 8002690:	200006dc 	.word	0x200006dc
 8002694:	40002800 	.word	0x40002800

08002698 <MX_TIM6_Init>:
  * @brief TIM6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM6_Init(void)
{
 8002698:	b580      	push	{r7, lr}
 800269a:	b084      	sub	sp, #16
 800269c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM6_Init 0 */

  /* USER CODE END TIM6_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800269e:	1d3b      	adds	r3, r7, #4
 80026a0:	0018      	movs	r0, r3
 80026a2:	230c      	movs	r3, #12
 80026a4:	001a      	movs	r2, r3
 80026a6:	2100      	movs	r1, #0
 80026a8:	f005 ff98 	bl	80085dc <memset>

  /* USER CODE BEGIN TIM6_Init 1 */

  /* USER CODE END TIM6_Init 1 */
  htim6.Instance = TIM6;
 80026ac:	4b15      	ldr	r3, [pc, #84]	; (8002704 <MX_TIM6_Init+0x6c>)
 80026ae:	4a16      	ldr	r2, [pc, #88]	; (8002708 <MX_TIM6_Init+0x70>)
 80026b0:	601a      	str	r2, [r3, #0]
  htim6.Init.Prescaler = 16000-1;
 80026b2:	4b14      	ldr	r3, [pc, #80]	; (8002704 <MX_TIM6_Init+0x6c>)
 80026b4:	4a15      	ldr	r2, [pc, #84]	; (800270c <MX_TIM6_Init+0x74>)
 80026b6:	605a      	str	r2, [r3, #4]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 80026b8:	4b12      	ldr	r3, [pc, #72]	; (8002704 <MX_TIM6_Init+0x6c>)
 80026ba:	2200      	movs	r2, #0
 80026bc:	609a      	str	r2, [r3, #8]
  htim6.Init.Period = 1000-1;
 80026be:	4b11      	ldr	r3, [pc, #68]	; (8002704 <MX_TIM6_Init+0x6c>)
 80026c0:	4a13      	ldr	r2, [pc, #76]	; (8002710 <MX_TIM6_Init+0x78>)
 80026c2:	60da      	str	r2, [r3, #12]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80026c4:	4b0f      	ldr	r3, [pc, #60]	; (8002704 <MX_TIM6_Init+0x6c>)
 80026c6:	2200      	movs	r2, #0
 80026c8:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 80026ca:	4b0e      	ldr	r3, [pc, #56]	; (8002704 <MX_TIM6_Init+0x6c>)
 80026cc:	0018      	movs	r0, r3
 80026ce:	f002 fd64 	bl	800519a <HAL_TIM_Base_Init>
 80026d2:	1e03      	subs	r3, r0, #0
 80026d4:	d001      	beq.n	80026da <MX_TIM6_Init+0x42>
  {
    Error_Handler();
 80026d6:	f000 faf7 	bl	8002cc8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80026da:	1d3b      	adds	r3, r7, #4
 80026dc:	2200      	movs	r2, #0
 80026de:	601a      	str	r2, [r3, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80026e0:	1d3b      	adds	r3, r7, #4
 80026e2:	2200      	movs	r2, #0
 80026e4:	609a      	str	r2, [r3, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 80026e6:	1d3a      	adds	r2, r7, #4
 80026e8:	4b06      	ldr	r3, [pc, #24]	; (8002704 <MX_TIM6_Init+0x6c>)
 80026ea:	0011      	movs	r1, r2
 80026ec:	0018      	movs	r0, r3
 80026ee:	f003 f819 	bl	8005724 <HAL_TIMEx_MasterConfigSynchronization>
 80026f2:	1e03      	subs	r3, r0, #0
 80026f4:	d001      	beq.n	80026fa <MX_TIM6_Init+0x62>
  {
    Error_Handler();
 80026f6:	f000 fae7 	bl	8002cc8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM6_Init 2 */

  /* USER CODE END TIM6_Init 2 */

}
 80026fa:	46c0      	nop			; (mov r8, r8)
 80026fc:	46bd      	mov	sp, r7
 80026fe:	b004      	add	sp, #16
 8002700:	bd80      	pop	{r7, pc}
 8002702:	46c0      	nop			; (mov r8, r8)
 8002704:	20000708 	.word	0x20000708
 8002708:	40001000 	.word	0x40001000
 800270c:	00003e7f 	.word	0x00003e7f
 8002710:	000003e7 	.word	0x000003e7

08002714 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8002714:	b580      	push	{r7, lr}
 8002716:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8002718:	4b23      	ldr	r3, [pc, #140]	; (80027a8 <MX_USART2_UART_Init+0x94>)
 800271a:	4a24      	ldr	r2, [pc, #144]	; (80027ac <MX_USART2_UART_Init+0x98>)
 800271c:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 800271e:	4b22      	ldr	r3, [pc, #136]	; (80027a8 <MX_USART2_UART_Init+0x94>)
 8002720:	22e1      	movs	r2, #225	; 0xe1
 8002722:	0252      	lsls	r2, r2, #9
 8002724:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8002726:	4b20      	ldr	r3, [pc, #128]	; (80027a8 <MX_USART2_UART_Init+0x94>)
 8002728:	2200      	movs	r2, #0
 800272a:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 800272c:	4b1e      	ldr	r3, [pc, #120]	; (80027a8 <MX_USART2_UART_Init+0x94>)
 800272e:	2200      	movs	r2, #0
 8002730:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8002732:	4b1d      	ldr	r3, [pc, #116]	; (80027a8 <MX_USART2_UART_Init+0x94>)
 8002734:	2200      	movs	r2, #0
 8002736:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8002738:	4b1b      	ldr	r3, [pc, #108]	; (80027a8 <MX_USART2_UART_Init+0x94>)
 800273a:	220c      	movs	r2, #12
 800273c:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800273e:	4b1a      	ldr	r3, [pc, #104]	; (80027a8 <MX_USART2_UART_Init+0x94>)
 8002740:	2200      	movs	r2, #0
 8002742:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8002744:	4b18      	ldr	r3, [pc, #96]	; (80027a8 <MX_USART2_UART_Init+0x94>)
 8002746:	2200      	movs	r2, #0
 8002748:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800274a:	4b17      	ldr	r3, [pc, #92]	; (80027a8 <MX_USART2_UART_Init+0x94>)
 800274c:	2200      	movs	r2, #0
 800274e:	621a      	str	r2, [r3, #32]
  huart2.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8002750:	4b15      	ldr	r3, [pc, #84]	; (80027a8 <MX_USART2_UART_Init+0x94>)
 8002752:	2200      	movs	r2, #0
 8002754:	625a      	str	r2, [r3, #36]	; 0x24
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8002756:	4b14      	ldr	r3, [pc, #80]	; (80027a8 <MX_USART2_UART_Init+0x94>)
 8002758:	2200      	movs	r2, #0
 800275a:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800275c:	4b12      	ldr	r3, [pc, #72]	; (80027a8 <MX_USART2_UART_Init+0x94>)
 800275e:	0018      	movs	r0, r3
 8002760:	f003 f86e 	bl	8005840 <HAL_UART_Init>
 8002764:	1e03      	subs	r3, r0, #0
 8002766:	d001      	beq.n	800276c <MX_USART2_UART_Init+0x58>
  {
    Error_Handler();
 8002768:	f000 faae 	bl	8002cc8 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart2, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 800276c:	4b0e      	ldr	r3, [pc, #56]	; (80027a8 <MX_USART2_UART_Init+0x94>)
 800276e:	2100      	movs	r1, #0
 8002770:	0018      	movs	r0, r3
 8002772:	f003 ff93 	bl	800669c <HAL_UARTEx_SetTxFifoThreshold>
 8002776:	1e03      	subs	r3, r0, #0
 8002778:	d001      	beq.n	800277e <MX_USART2_UART_Init+0x6a>
  {
    Error_Handler();
 800277a:	f000 faa5 	bl	8002cc8 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart2, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 800277e:	4b0a      	ldr	r3, [pc, #40]	; (80027a8 <MX_USART2_UART_Init+0x94>)
 8002780:	2100      	movs	r1, #0
 8002782:	0018      	movs	r0, r3
 8002784:	f003 ffca 	bl	800671c <HAL_UARTEx_SetRxFifoThreshold>
 8002788:	1e03      	subs	r3, r0, #0
 800278a:	d001      	beq.n	8002790 <MX_USART2_UART_Init+0x7c>
  {
    Error_Handler();
 800278c:	f000 fa9c 	bl	8002cc8 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart2) != HAL_OK)
 8002790:	4b05      	ldr	r3, [pc, #20]	; (80027a8 <MX_USART2_UART_Init+0x94>)
 8002792:	0018      	movs	r0, r3
 8002794:	f003 ff48 	bl	8006628 <HAL_UARTEx_DisableFifoMode>
 8002798:	1e03      	subs	r3, r0, #0
 800279a:	d001      	beq.n	80027a0 <MX_USART2_UART_Init+0x8c>
  {
    Error_Handler();
 800279c:	f000 fa94 	bl	8002cc8 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80027a0:	46c0      	nop			; (mov r8, r8)
 80027a2:	46bd      	mov	sp, r7
 80027a4:	bd80      	pop	{r7, pc}
 80027a6:	46c0      	nop			; (mov r8, r8)
 80027a8:	20000754 	.word	0x20000754
 80027ac:	40004400 	.word	0x40004400

080027b0 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 80027b0:	b580      	push	{r7, lr}
 80027b2:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 80027b4:	4b23      	ldr	r3, [pc, #140]	; (8002844 <MX_USART3_UART_Init+0x94>)
 80027b6:	4a24      	ldr	r2, [pc, #144]	; (8002848 <MX_USART3_UART_Init+0x98>)
 80027b8:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 9600;
 80027ba:	4b22      	ldr	r3, [pc, #136]	; (8002844 <MX_USART3_UART_Init+0x94>)
 80027bc:	2296      	movs	r2, #150	; 0x96
 80027be:	0192      	lsls	r2, r2, #6
 80027c0:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 80027c2:	4b20      	ldr	r3, [pc, #128]	; (8002844 <MX_USART3_UART_Init+0x94>)
 80027c4:	2200      	movs	r2, #0
 80027c6:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 80027c8:	4b1e      	ldr	r3, [pc, #120]	; (8002844 <MX_USART3_UART_Init+0x94>)
 80027ca:	2200      	movs	r2, #0
 80027cc:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 80027ce:	4b1d      	ldr	r3, [pc, #116]	; (8002844 <MX_USART3_UART_Init+0x94>)
 80027d0:	2200      	movs	r2, #0
 80027d2:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 80027d4:	4b1b      	ldr	r3, [pc, #108]	; (8002844 <MX_USART3_UART_Init+0x94>)
 80027d6:	220c      	movs	r2, #12
 80027d8:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80027da:	4b1a      	ldr	r3, [pc, #104]	; (8002844 <MX_USART3_UART_Init+0x94>)
 80027dc:	2200      	movs	r2, #0
 80027de:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 80027e0:	4b18      	ldr	r3, [pc, #96]	; (8002844 <MX_USART3_UART_Init+0x94>)
 80027e2:	2200      	movs	r2, #0
 80027e4:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80027e6:	4b17      	ldr	r3, [pc, #92]	; (8002844 <MX_USART3_UART_Init+0x94>)
 80027e8:	2200      	movs	r2, #0
 80027ea:	621a      	str	r2, [r3, #32]
  huart3.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 80027ec:	4b15      	ldr	r3, [pc, #84]	; (8002844 <MX_USART3_UART_Init+0x94>)
 80027ee:	2200      	movs	r2, #0
 80027f0:	625a      	str	r2, [r3, #36]	; 0x24
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80027f2:	4b14      	ldr	r3, [pc, #80]	; (8002844 <MX_USART3_UART_Init+0x94>)
 80027f4:	2200      	movs	r2, #0
 80027f6:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart3) != HAL_OK)
 80027f8:	4b12      	ldr	r3, [pc, #72]	; (8002844 <MX_USART3_UART_Init+0x94>)
 80027fa:	0018      	movs	r0, r3
 80027fc:	f003 f820 	bl	8005840 <HAL_UART_Init>
 8002800:	1e03      	subs	r3, r0, #0
 8002802:	d001      	beq.n	8002808 <MX_USART3_UART_Init+0x58>
  {
    Error_Handler();
 8002804:	f000 fa60 	bl	8002cc8 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart3, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8002808:	4b0e      	ldr	r3, [pc, #56]	; (8002844 <MX_USART3_UART_Init+0x94>)
 800280a:	2100      	movs	r1, #0
 800280c:	0018      	movs	r0, r3
 800280e:	f003 ff45 	bl	800669c <HAL_UARTEx_SetTxFifoThreshold>
 8002812:	1e03      	subs	r3, r0, #0
 8002814:	d001      	beq.n	800281a <MX_USART3_UART_Init+0x6a>
  {
    Error_Handler();
 8002816:	f000 fa57 	bl	8002cc8 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart3, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 800281a:	4b0a      	ldr	r3, [pc, #40]	; (8002844 <MX_USART3_UART_Init+0x94>)
 800281c:	2100      	movs	r1, #0
 800281e:	0018      	movs	r0, r3
 8002820:	f003 ff7c 	bl	800671c <HAL_UARTEx_SetRxFifoThreshold>
 8002824:	1e03      	subs	r3, r0, #0
 8002826:	d001      	beq.n	800282c <MX_USART3_UART_Init+0x7c>
  {
    Error_Handler();
 8002828:	f000 fa4e 	bl	8002cc8 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart3) != HAL_OK)
 800282c:	4b05      	ldr	r3, [pc, #20]	; (8002844 <MX_USART3_UART_Init+0x94>)
 800282e:	0018      	movs	r0, r3
 8002830:	f003 fefa 	bl	8006628 <HAL_UARTEx_DisableFifoMode>
 8002834:	1e03      	subs	r3, r0, #0
 8002836:	d001      	beq.n	800283c <MX_USART3_UART_Init+0x8c>
  {
    Error_Handler();
 8002838:	f000 fa46 	bl	8002cc8 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 800283c:	46c0      	nop			; (mov r8, r8)
 800283e:	46bd      	mov	sp, r7
 8002840:	bd80      	pop	{r7, pc}
 8002842:	46c0      	nop			; (mov r8, r8)
 8002844:	200007e8 	.word	0x200007e8
 8002848:	40004800 	.word	0x40004800

0800284c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800284c:	b590      	push	{r4, r7, lr}
 800284e:	b08b      	sub	sp, #44	; 0x2c
 8002850:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002852:	2414      	movs	r4, #20
 8002854:	193b      	adds	r3, r7, r4
 8002856:	0018      	movs	r0, r3
 8002858:	2314      	movs	r3, #20
 800285a:	001a      	movs	r2, r3
 800285c:	2100      	movs	r1, #0
 800285e:	f005 febd 	bl	80085dc <memset>
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8002862:	4b3f      	ldr	r3, [pc, #252]	; (8002960 <MX_GPIO_Init+0x114>)
 8002864:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002866:	4b3e      	ldr	r3, [pc, #248]	; (8002960 <MX_GPIO_Init+0x114>)
 8002868:	2104      	movs	r1, #4
 800286a:	430a      	orrs	r2, r1
 800286c:	635a      	str	r2, [r3, #52]	; 0x34
 800286e:	4b3c      	ldr	r3, [pc, #240]	; (8002960 <MX_GPIO_Init+0x114>)
 8002870:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002872:	2204      	movs	r2, #4
 8002874:	4013      	ands	r3, r2
 8002876:	613b      	str	r3, [r7, #16]
 8002878:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 800287a:	4b39      	ldr	r3, [pc, #228]	; (8002960 <MX_GPIO_Init+0x114>)
 800287c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800287e:	4b38      	ldr	r3, [pc, #224]	; (8002960 <MX_GPIO_Init+0x114>)
 8002880:	2120      	movs	r1, #32
 8002882:	430a      	orrs	r2, r1
 8002884:	635a      	str	r2, [r3, #52]	; 0x34
 8002886:	4b36      	ldr	r3, [pc, #216]	; (8002960 <MX_GPIO_Init+0x114>)
 8002888:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800288a:	2220      	movs	r2, #32
 800288c:	4013      	ands	r3, r2
 800288e:	60fb      	str	r3, [r7, #12]
 8002890:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8002892:	4b33      	ldr	r3, [pc, #204]	; (8002960 <MX_GPIO_Init+0x114>)
 8002894:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002896:	4b32      	ldr	r3, [pc, #200]	; (8002960 <MX_GPIO_Init+0x114>)
 8002898:	2101      	movs	r1, #1
 800289a:	430a      	orrs	r2, r1
 800289c:	635a      	str	r2, [r3, #52]	; 0x34
 800289e:	4b30      	ldr	r3, [pc, #192]	; (8002960 <MX_GPIO_Init+0x114>)
 80028a0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80028a2:	2201      	movs	r2, #1
 80028a4:	4013      	ands	r3, r2
 80028a6:	60bb      	str	r3, [r7, #8]
 80028a8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80028aa:	4b2d      	ldr	r3, [pc, #180]	; (8002960 <MX_GPIO_Init+0x114>)
 80028ac:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80028ae:	4b2c      	ldr	r3, [pc, #176]	; (8002960 <MX_GPIO_Init+0x114>)
 80028b0:	2102      	movs	r1, #2
 80028b2:	430a      	orrs	r2, r1
 80028b4:	635a      	str	r2, [r3, #52]	; 0x34
 80028b6:	4b2a      	ldr	r3, [pc, #168]	; (8002960 <MX_GPIO_Init+0x114>)
 80028b8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80028ba:	2202      	movs	r2, #2
 80028bc:	4013      	ands	r3, r2
 80028be:	607b      	str	r3, [r7, #4]
 80028c0:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LDG_GPIO_Port, LDG_Pin, GPIO_PIN_RESET);
 80028c2:	23a0      	movs	r3, #160	; 0xa0
 80028c4:	05db      	lsls	r3, r3, #23
 80028c6:	2200      	movs	r2, #0
 80028c8:	2120      	movs	r1, #32
 80028ca:	0018      	movs	r0, r3
 80028cc:	f000 ffab 	bl	8003826 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, ASTRO_WKUP_Pin|ASTRO_RST_Pin, GPIO_PIN_RESET);
 80028d0:	4b24      	ldr	r3, [pc, #144]	; (8002964 <MX_GPIO_Init+0x118>)
 80028d2:	2200      	movs	r2, #0
 80028d4:	2103      	movs	r1, #3
 80028d6:	0018      	movs	r0, r3
 80028d8:	f000 ffa5 	bl	8003826 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : LDG_Pin */
  GPIO_InitStruct.Pin = LDG_Pin;
 80028dc:	193b      	adds	r3, r7, r4
 80028de:	2220      	movs	r2, #32
 80028e0:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80028e2:	193b      	adds	r3, r7, r4
 80028e4:	2201      	movs	r2, #1
 80028e6:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80028e8:	193b      	adds	r3, r7, r4
 80028ea:	2200      	movs	r2, #0
 80028ec:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80028ee:	193b      	adds	r3, r7, r4
 80028f0:	2202      	movs	r2, #2
 80028f2:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(LDG_GPIO_Port, &GPIO_InitStruct);
 80028f4:	193a      	adds	r2, r7, r4
 80028f6:	23a0      	movs	r3, #160	; 0xa0
 80028f8:	05db      	lsls	r3, r3, #23
 80028fa:	0011      	movs	r1, r2
 80028fc:	0018      	movs	r0, r3
 80028fe:	f000 fe09 	bl	8003514 <HAL_GPIO_Init>

  /*Configure GPIO pins : ASTRO_WKUP_Pin ASTRO_RST_Pin */
  GPIO_InitStruct.Pin = ASTRO_WKUP_Pin|ASTRO_RST_Pin;
 8002902:	193b      	adds	r3, r7, r4
 8002904:	2203      	movs	r2, #3
 8002906:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002908:	193b      	adds	r3, r7, r4
 800290a:	2201      	movs	r2, #1
 800290c:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800290e:	193b      	adds	r3, r7, r4
 8002910:	2200      	movs	r2, #0
 8002912:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002914:	193b      	adds	r3, r7, r4
 8002916:	2200      	movs	r2, #0
 8002918:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800291a:	193b      	adds	r3, r7, r4
 800291c:	4a11      	ldr	r2, [pc, #68]	; (8002964 <MX_GPIO_Init+0x118>)
 800291e:	0019      	movs	r1, r3
 8002920:	0010      	movs	r0, r2
 8002922:	f000 fdf7 	bl	8003514 <HAL_GPIO_Init>

  /*Configure GPIO pin : ASTRO_EVT_IT2_Pin */
  GPIO_InitStruct.Pin = ASTRO_EVT_IT2_Pin;
 8002926:	0021      	movs	r1, r4
 8002928:	187b      	adds	r3, r7, r1
 800292a:	2204      	movs	r2, #4
 800292c:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 800292e:	187b      	adds	r3, r7, r1
 8002930:	2288      	movs	r2, #136	; 0x88
 8002932:	0352      	lsls	r2, r2, #13
 8002934:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002936:	187b      	adds	r3, r7, r1
 8002938:	2200      	movs	r2, #0
 800293a:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(ASTRO_EVT_IT2_GPIO_Port, &GPIO_InitStruct);
 800293c:	187b      	adds	r3, r7, r1
 800293e:	4a09      	ldr	r2, [pc, #36]	; (8002964 <MX_GPIO_Init+0x118>)
 8002940:	0019      	movs	r1, r3
 8002942:	0010      	movs	r0, r2
 8002944:	f000 fde6 	bl	8003514 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI2_3_IRQn, 3, 0);
 8002948:	2200      	movs	r2, #0
 800294a:	2103      	movs	r1, #3
 800294c:	2006      	movs	r0, #6
 800294e:	f000 fdab 	bl	80034a8 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI2_3_IRQn);
 8002952:	2006      	movs	r0, #6
 8002954:	f000 fdbd 	bl	80034d2 <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8002958:	46c0      	nop			; (mov r8, r8)
 800295a:	46bd      	mov	sp, r7
 800295c:	b00b      	add	sp, #44	; 0x2c
 800295e:	bd90      	pop	{r4, r7, pc}
 8002960:	40021000 	.word	0x40021000
 8002964:	50000400 	.word	0x50000400

08002968 <send_debug_logs>:

/* USER CODE BEGIN 4 */
void send_debug_logs ( char* p_tx_buffer )
{
 8002968:	b580      	push	{r7, lr}
 800296a:	b084      	sub	sp, #16
 800296c:	af00      	add	r7, sp, #0
 800296e:	6078      	str	r0, [r7, #4]
    uint32_t length = strlen ( p_tx_buffer ) ;
 8002970:	687b      	ldr	r3, [r7, #4]
 8002972:	0018      	movs	r0, r3
 8002974:	f7fd fbc6 	bl	8000104 <strlen>
 8002978:	0003      	movs	r3, r0
 800297a:	60fb      	str	r3, [r7, #12]

    if ( length > UART_TX_MAX_BUFF_SIZE )
 800297c:	68fb      	ldr	r3, [r7, #12]
 800297e:	2bfa      	cmp	r3, #250	; 0xfa
 8002980:	d908      	bls.n	8002994 <send_debug_logs+0x2c>
    {
        HAL_UART_Transmit ( HUART_DBG , ( uint8_t* ) "[ERROR] UART buffer reached max length.\n" , 42 , 1000 ) ;
 8002982:	23fa      	movs	r3, #250	; 0xfa
 8002984:	009b      	lsls	r3, r3, #2
 8002986:	490d      	ldr	r1, [pc, #52]	; (80029bc <send_debug_logs+0x54>)
 8002988:	480d      	ldr	r0, [pc, #52]	; (80029c0 <send_debug_logs+0x58>)
 800298a:	222a      	movs	r2, #42	; 0x2a
 800298c:	f002 ffae 	bl	80058ec <HAL_UART_Transmit>
        length = UART_TX_MAX_BUFF_SIZE;
 8002990:	23fa      	movs	r3, #250	; 0xfa
 8002992:	60fb      	str	r3, [r7, #12]
    }

    HAL_UART_Transmit ( HUART_DBG , ( uint8_t* ) p_tx_buffer , length , 1000 ) ;
 8002994:	68fb      	ldr	r3, [r7, #12]
 8002996:	b29a      	uxth	r2, r3
 8002998:	23fa      	movs	r3, #250	; 0xfa
 800299a:	009b      	lsls	r3, r3, #2
 800299c:	6879      	ldr	r1, [r7, #4]
 800299e:	4808      	ldr	r0, [pc, #32]	; (80029c0 <send_debug_logs+0x58>)
 80029a0:	f002 ffa4 	bl	80058ec <HAL_UART_Transmit>
    HAL_UART_Transmit ( HUART_DBG , ( uint8_t* ) "\n" , 1 , 1000 ) ;
 80029a4:	23fa      	movs	r3, #250	; 0xfa
 80029a6:	009b      	lsls	r3, r3, #2
 80029a8:	4906      	ldr	r1, [pc, #24]	; (80029c4 <send_debug_logs+0x5c>)
 80029aa:	4805      	ldr	r0, [pc, #20]	; (80029c0 <send_debug_logs+0x58>)
 80029ac:	2201      	movs	r2, #1
 80029ae:	f002 ff9d 	bl	80058ec <HAL_UART_Transmit>
}
 80029b2:	46c0      	nop			; (mov r8, r8)
 80029b4:	46bd      	mov	sp, r7
 80029b6:	b004      	add	sp, #16
 80029b8:	bd80      	pop	{r7, pc}
 80029ba:	46c0      	nop			; (mov r8, r8)
 80029bc:	0800d160 	.word	0x0800d160
 80029c0:	20000754 	.word	0x20000754
 80029c4:	0800d18c 	.word	0x0800d18c

080029c8 <reset_astronode>:
void reset_astronode ( void )
{
 80029c8:	b580      	push	{r7, lr}
 80029ca:	af00      	add	r7, sp, #0
    HAL_GPIO_WritePin ( ASTRO_RST_GPIO_Port , ASTRO_RST_Pin , GPIO_PIN_SET ) ;
 80029cc:	4b0a      	ldr	r3, [pc, #40]	; (80029f8 <reset_astronode+0x30>)
 80029ce:	2201      	movs	r2, #1
 80029d0:	2102      	movs	r1, #2
 80029d2:	0018      	movs	r0, r3
 80029d4:	f000 ff27 	bl	8003826 <HAL_GPIO_WritePin>
    HAL_Delay ( 1 ) ;
 80029d8:	2001      	movs	r0, #1
 80029da:	f000 fc51 	bl	8003280 <HAL_Delay>
    HAL_GPIO_WritePin ( ASTRO_RST_GPIO_Port , ASTRO_RST_Pin , GPIO_PIN_RESET ) ;
 80029de:	4b06      	ldr	r3, [pc, #24]	; (80029f8 <reset_astronode+0x30>)
 80029e0:	2200      	movs	r2, #0
 80029e2:	2102      	movs	r1, #2
 80029e4:	0018      	movs	r0, r3
 80029e6:	f000 ff1e 	bl	8003826 <HAL_GPIO_WritePin>
    HAL_Delay ( 250 ) ;
 80029ea:	20fa      	movs	r0, #250	; 0xfa
 80029ec:	f000 fc48 	bl	8003280 <HAL_Delay>
}
 80029f0:	46c0      	nop			; (mov r8, r8)
 80029f2:	46bd      	mov	sp, r7
 80029f4:	bd80      	pop	{r7, pc}
 80029f6:	46c0      	nop			; (mov r8, r8)
 80029f8:	50000400 	.word	0x50000400

080029fc <send_astronode_request>:
void send_astronode_request ( uint8_t* p_tx_buffer , uint32_t length )
{
 80029fc:	b580      	push	{r7, lr}
 80029fe:	b082      	sub	sp, #8
 8002a00:	af00      	add	r7, sp, #0
 8002a02:	6078      	str	r0, [r7, #4]
 8002a04:	6039      	str	r1, [r7, #0]
    send_debug_logs ( "Message sent to the Astronode --> " ) ;
 8002a06:	4b0a      	ldr	r3, [pc, #40]	; (8002a30 <send_astronode_request+0x34>)
 8002a08:	0018      	movs	r0, r3
 8002a0a:	f7ff ffad 	bl	8002968 <send_debug_logs>
    send_debug_logs ( ( char* ) p_tx_buffer ) ;
 8002a0e:	687b      	ldr	r3, [r7, #4]
 8002a10:	0018      	movs	r0, r3
 8002a12:	f7ff ffa9 	bl	8002968 <send_debug_logs>

    HAL_UART_Transmit ( HUART_ASTRO , p_tx_buffer , length , 1000 ) ;
 8002a16:	683b      	ldr	r3, [r7, #0]
 8002a18:	b29a      	uxth	r2, r3
 8002a1a:	23fa      	movs	r3, #250	; 0xfa
 8002a1c:	009b      	lsls	r3, r3, #2
 8002a1e:	6879      	ldr	r1, [r7, #4]
 8002a20:	4804      	ldr	r0, [pc, #16]	; (8002a34 <send_astronode_request+0x38>)
 8002a22:	f002 ff63 	bl	80058ec <HAL_UART_Transmit>
}
 8002a26:	46c0      	nop			; (mov r8, r8)
 8002a28:	46bd      	mov	sp, r7
 8002a2a:	b002      	add	sp, #8
 8002a2c:	bd80      	pop	{r7, pc}
 8002a2e:	46c0      	nop			; (mov r8, r8)
 8002a30:	0800d190 	.word	0x0800d190
 8002a34:	200007e8 	.word	0x200007e8

08002a38 <is_astronode_character_received>:
bool is_astronode_character_received ( uint8_t* p_rx_char )
{
 8002a38:	b580      	push	{r7, lr}
 8002a3a:	b082      	sub	sp, #8
 8002a3c:	af00      	add	r7, sp, #0
 8002a3e:	6078      	str	r0, [r7, #4]
    return ( HAL_UART_Receive ( HUART_ASTRO , p_rx_char , 1 , 100 ) == HAL_OK ? true : false ) ;
 8002a40:	6879      	ldr	r1, [r7, #4]
 8002a42:	4806      	ldr	r0, [pc, #24]	; (8002a5c <is_astronode_character_received+0x24>)
 8002a44:	2364      	movs	r3, #100	; 0x64
 8002a46:	2201      	movs	r2, #1
 8002a48:	f002 ffec 	bl	8005a24 <HAL_UART_Receive>
 8002a4c:	0003      	movs	r3, r0
 8002a4e:	425a      	negs	r2, r3
 8002a50:	4153      	adcs	r3, r2
 8002a52:	b2db      	uxtb	r3, r3
}
 8002a54:	0018      	movs	r0, r3
 8002a56:	46bd      	mov	sp, r7
 8002a58:	b002      	add	sp, #8
 8002a5a:	bd80      	pop	{r7, pc}
 8002a5c:	200007e8 	.word	0x200007e8

08002a60 <is_evt_pin_high>:
bool is_evt_pin_high ( void )
{
 8002a60:	b580      	push	{r7, lr}
 8002a62:	af00      	add	r7, sp, #0
	return ( HAL_GPIO_ReadPin ( /*GPIOA*/ ASTRO_EVT_IT2_GPIO_Port , ASTRO_EVT_IT2_Pin ) == GPIO_PIN_SET ? true : false);
 8002a64:	4b06      	ldr	r3, [pc, #24]	; (8002a80 <is_evt_pin_high+0x20>)
 8002a66:	2104      	movs	r1, #4
 8002a68:	0018      	movs	r0, r3
 8002a6a:	f000 febf 	bl	80037ec <HAL_GPIO_ReadPin>
 8002a6e:	0003      	movs	r3, r0
 8002a70:	3b01      	subs	r3, #1
 8002a72:	425a      	negs	r2, r3
 8002a74:	4153      	adcs	r3, r2
 8002a76:	b2db      	uxtb	r3, r3
}
 8002a78:	0018      	movs	r0, r3
 8002a7a:	46bd      	mov	sp, r7
 8002a7c:	bd80      	pop	{r7, pc}
 8002a7e:	46c0      	nop			; (mov r8, r8)
 8002a80:	50000400 	.word	0x50000400

08002a84 <get_systick>:
uint32_t get_systick ( void )
{
 8002a84:	b580      	push	{r7, lr}
 8002a86:	af00      	add	r7, sp, #0
    return HAL_GetTick() ;
 8002a88:	f000 fbf0 	bl	800326c <HAL_GetTick>
 8002a8c:	0003      	movs	r3, r0
}
 8002a8e:	0018      	movs	r0, r3
 8002a90:	46bd      	mov	sp, r7
 8002a92:	bd80      	pop	{r7, pc}

08002a94 <is_systick_timeout_over>:
bool is_systick_timeout_over ( uint32_t starting_value , uint16_t duration )
{
 8002a94:	b580      	push	{r7, lr}
 8002a96:	b082      	sub	sp, #8
 8002a98:	af00      	add	r7, sp, #0
 8002a9a:	6078      	str	r0, [r7, #4]
 8002a9c:	000a      	movs	r2, r1
 8002a9e:	1cbb      	adds	r3, r7, #2
 8002aa0:	801a      	strh	r2, [r3, #0]
    return ( get_systick () - starting_value > duration ) ? true : false ;
 8002aa2:	f7ff ffef 	bl	8002a84 <get_systick>
 8002aa6:	0002      	movs	r2, r0
 8002aa8:	687b      	ldr	r3, [r7, #4]
 8002aaa:	1ad3      	subs	r3, r2, r3
 8002aac:	1cba      	adds	r2, r7, #2
 8002aae:	8812      	ldrh	r2, [r2, #0]
 8002ab0:	429a      	cmp	r2, r3
 8002ab2:	419b      	sbcs	r3, r3
 8002ab4:	425b      	negs	r3, r3
 8002ab6:	b2db      	uxtb	r3, r3
}
 8002ab8:	0018      	movs	r0, r3
 8002aba:	46bd      	mov	sp, r7
 8002abc:	b002      	add	sp, #8
 8002abe:	bd80      	pop	{r7, pc}

08002ac0 <my_tim_init>:

// TIM functions
void my_tim_init ( TIM_HandleTypeDef htim )
{
 8002ac0:	b084      	sub	sp, #16
 8002ac2:	b5b0      	push	{r4, r5, r7, lr}
 8002ac4:	af00      	add	r7, sp, #0
 8002ac6:	250c      	movs	r5, #12
 8002ac8:	1d2c      	adds	r4, r5, #4
 8002aca:	19e4      	adds	r4, r4, r7
 8002acc:	6020      	str	r0, [r4, #0]
 8002ace:	6061      	str	r1, [r4, #4]
 8002ad0:	60a2      	str	r2, [r4, #8]
 8002ad2:	60e3      	str	r3, [r4, #12]
	__HAL_TIM_CLEAR_IT ( &htim , TIM_IT_UPDATE ) ;
 8002ad4:	1d2b      	adds	r3, r5, #4
 8002ad6:	19db      	adds	r3, r3, r7
 8002ad8:	681b      	ldr	r3, [r3, #0]
 8002ada:	2202      	movs	r2, #2
 8002adc:	4252      	negs	r2, r2
 8002ade:	611a      	str	r2, [r3, #16]
}
 8002ae0:	46c0      	nop			; (mov r8, r8)
 8002ae2:	46bd      	mov	sp, r7
 8002ae4:	bcb0      	pop	{r4, r5, r7}
 8002ae6:	bc08      	pop	{r3}
 8002ae8:	b004      	add	sp, #16
 8002aea:	4718      	bx	r3

08002aec <my_tim_start>:

void my_tim_start ( TIM_HandleTypeDef htim )
{
 8002aec:	b084      	sub	sp, #16
 8002aee:	b5b0      	push	{r4, r5, r7, lr}
 8002af0:	af00      	add	r7, sp, #0
 8002af2:	2510      	movs	r5, #16
 8002af4:	197c      	adds	r4, r7, r5
 8002af6:	6020      	str	r0, [r4, #0]
 8002af8:	6061      	str	r1, [r4, #4]
 8002afa:	60a2      	str	r2, [r4, #8]
 8002afc:	60e3      	str	r3, [r4, #12]
	tim_seconds = 0 ;
 8002afe:	4b06      	ldr	r3, [pc, #24]	; (8002b18 <my_tim_start+0x2c>)
 8002b00:	2200      	movs	r2, #0
 8002b02:	801a      	strh	r2, [r3, #0]
	HAL_TIM_Base_Start_IT ( &htim ) ;
 8002b04:	197b      	adds	r3, r7, r5
 8002b06:	0018      	movs	r0, r3
 8002b08:	f002 fba0 	bl	800524c <HAL_TIM_Base_Start_IT>
}
 8002b0c:	46c0      	nop			; (mov r8, r8)
 8002b0e:	46bd      	mov	sp, r7
 8002b10:	bcb0      	pop	{r4, r5, r7}
 8002b12:	bc08      	pop	{r3}
 8002b14:	b004      	add	sp, #16
 8002b16:	4718      	bx	r3
 8002b18:	20000890 	.word	0x20000890

08002b1c <my_tim_stop>:

void my_tim_stop ( TIM_HandleTypeDef htim )
{
 8002b1c:	b084      	sub	sp, #16
 8002b1e:	b5b0      	push	{r4, r5, r7, lr}
 8002b20:	af00      	add	r7, sp, #0
 8002b22:	2510      	movs	r5, #16
 8002b24:	197c      	adds	r4, r7, r5
 8002b26:	6020      	str	r0, [r4, #0]
 8002b28:	6061      	str	r1, [r4, #4]
 8002b2a:	60a2      	str	r2, [r4, #8]
 8002b2c:	60e3      	str	r3, [r4, #12]
	HAL_TIM_Base_Stop_IT ( &htim ) ;
 8002b2e:	197b      	adds	r3, r7, r5
 8002b30:	0018      	movs	r0, r3
 8002b32:	f002 fbed 	bl	8005310 <HAL_TIM_Base_Stop_IT>
}
 8002b36:	46c0      	nop			; (mov r8, r8)
 8002b38:	46bd      	mov	sp, r7
 8002b3a:	bcb0      	pop	{r4, r5, r7}
 8002b3c:	bc08      	pop	{r3}
 8002b3e:	b004      	add	sp, #16
 8002b40:	4718      	bx	r3
	...

08002b44 <my_astro_init>:

// Astronode functions
bool my_astro_init ( TIM_HandleTypeDef htim )
{
 8002b44:	b084      	sub	sp, #16
 8002b46:	b5b0      	push	{r4, r5, r7, lr}
 8002b48:	b092      	sub	sp, #72	; 0x48
 8002b4a:	af10      	add	r7, sp, #64	; 0x40
 8002b4c:	2518      	movs	r5, #24
 8002b4e:	197c      	adds	r4, r7, r5
 8002b50:	6020      	str	r0, [r4, #0]
 8002b52:	6061      	str	r1, [r4, #4]
 8002b54:	60a2      	str	r2, [r4, #8]
 8002b56:	60e3      	str	r3, [r4, #12]
	bool cfg_wr = false ;
 8002b58:	1dfb      	adds	r3, r7, #7
 8002b5a:	2200      	movs	r2, #0
 8002b5c:	701a      	strb	r2, [r3, #0]
	tim_seconds = 0 ;
 8002b5e:	4b30      	ldr	r3, [pc, #192]	; (8002c20 <my_astro_init+0xdc>)
 8002b60:	2200      	movs	r2, #0
 8002b62:	801a      	strh	r2, [r3, #0]

	my_tim_start ( htim ) ;
 8002b64:	197c      	adds	r4, r7, r5
 8002b66:	466b      	mov	r3, sp
 8002b68:	0018      	movs	r0, r3
 8002b6a:	0023      	movs	r3, r4
 8002b6c:	3310      	adds	r3, #16
 8002b6e:	223c      	movs	r2, #60	; 0x3c
 8002b70:	0019      	movs	r1, r3
 8002b72:	f005 fdbf 	bl	80086f4 <memcpy>
 8002b76:	6820      	ldr	r0, [r4, #0]
 8002b78:	6861      	ldr	r1, [r4, #4]
 8002b7a:	68a2      	ldr	r2, [r4, #8]
 8002b7c:	68e3      	ldr	r3, [r4, #12]
 8002b7e:	f7ff ffb5 	bl	8002aec <my_tim_start>
	while ( tim_seconds < MY_ASTRO_INIT_TIME && !cfg_wr )
 8002b82:	e015      	b.n	8002bb0 <my_astro_init+0x6c>
	{
		reset_astronode () ;
 8002b84:	f7ff ff20 	bl	80029c8 <reset_astronode>
		HAL_Delay ( 100 ) ;
 8002b88:	2064      	movs	r0, #100	; 0x64
 8002b8a:	f000 fb79 	bl	8003280 <HAL_Delay>
		// Deep Sleep Mode (false) NOT used
		// Satellite Ack Event Pin Mask (true): EVT pin shows EVT register Payload Ack bit state
		// Reset Notification Event Pin Mask (true):  EVT pin shows EVT register Reset Event Notification bit state
		// Command Available Event Pin Mask (true): EVT pin shows EVT register Command Available bit state
		// Message Transmission (Tx) Pending Event Pin Mask (false):  EVT pin does not show EVT register Msg Tx Pending bit state
		cfg_wr = astronode_send_cfg_wr ( true , true , true , false , true , true , true , false  ) ;
 8002b8e:	1dfc      	adds	r4, r7, #7
 8002b90:	2300      	movs	r3, #0
 8002b92:	9303      	str	r3, [sp, #12]
 8002b94:	2301      	movs	r3, #1
 8002b96:	9302      	str	r3, [sp, #8]
 8002b98:	2301      	movs	r3, #1
 8002b9a:	9301      	str	r3, [sp, #4]
 8002b9c:	2301      	movs	r3, #1
 8002b9e:	9300      	str	r3, [sp, #0]
 8002ba0:	2300      	movs	r3, #0
 8002ba2:	2201      	movs	r2, #1
 8002ba4:	2101      	movs	r1, #1
 8002ba6:	2001      	movs	r0, #1
 8002ba8:	f003 fe90 	bl	80068cc <astronode_send_cfg_wr>
 8002bac:	0003      	movs	r3, r0
 8002bae:	7023      	strb	r3, [r4, #0]
	while ( tim_seconds < MY_ASTRO_INIT_TIME && !cfg_wr )
 8002bb0:	4b1b      	ldr	r3, [pc, #108]	; (8002c20 <my_astro_init+0xdc>)
 8002bb2:	881b      	ldrh	r3, [r3, #0]
 8002bb4:	2b09      	cmp	r3, #9
 8002bb6:	d806      	bhi.n	8002bc6 <my_astro_init+0x82>
 8002bb8:	1dfb      	adds	r3, r7, #7
 8002bba:	781b      	ldrb	r3, [r3, #0]
 8002bbc:	2201      	movs	r2, #1
 8002bbe:	4053      	eors	r3, r2
 8002bc0:	b2db      	uxtb	r3, r3
 8002bc2:	2b00      	cmp	r3, #0
 8002bc4:	d1de      	bne.n	8002b84 <my_astro_init+0x40>
	}
	tim_seconds = 0 ;
 8002bc6:	4b16      	ldr	r3, [pc, #88]	; (8002c20 <my_astro_init+0xdc>)
 8002bc8:	2200      	movs	r2, #0
 8002bca:	801a      	strh	r2, [r3, #0]
	my_tim_stop ( htim ) ;
 8002bcc:	2318      	movs	r3, #24
 8002bce:	18fc      	adds	r4, r7, r3
 8002bd0:	466b      	mov	r3, sp
 8002bd2:	0018      	movs	r0, r3
 8002bd4:	0023      	movs	r3, r4
 8002bd6:	3310      	adds	r3, #16
 8002bd8:	223c      	movs	r2, #60	; 0x3c
 8002bda:	0019      	movs	r1, r3
 8002bdc:	f005 fd8a 	bl	80086f4 <memcpy>
 8002be0:	6820      	ldr	r0, [r4, #0]
 8002be2:	6861      	ldr	r1, [r4, #4]
 8002be4:	68a2      	ldr	r2, [r4, #8]
 8002be6:	68e3      	ldr	r3, [r4, #12]
 8002be8:	f7ff ff98 	bl	8002b1c <my_tim_stop>
	if ( cfg_wr )
 8002bec:	1dfb      	adds	r3, r7, #7
 8002bee:	781b      	ldrb	r3, [r3, #0]
 8002bf0:	2b00      	cmp	r3, #0
 8002bf2:	d00d      	beq.n	8002c10 <my_astro_init+0xcc>
	{
		astronode_send_rtc_rr () ;
 8002bf4:	f004 f966 	bl	8006ec4 <astronode_send_rtc_rr>
		astronode_send_cfg_sr () ;
 8002bf8:	f003 fe30 	bl	800685c <astronode_send_cfg_sr>
		astronode_send_mpn_rr () ;
 8002bfc:	f004 fa5c 	bl	80070b8 <astronode_send_mpn_rr>
		astronode_send_msn_rr () ;
 8002c00:	f003 ffba 	bl	8006b78 <astronode_send_msn_rr>
		astronode_send_mgi_rr () ;
 8002c04:	f003 ff0e 	bl	8006a24 <astronode_send_mgi_rr>
		astronode_send_pld_fr () ;
 8002c08:	f004 f8e0 	bl	8006dcc <astronode_send_pld_fr>
		return true ;
 8002c0c:	2301      	movs	r3, #1
 8002c0e:	e000      	b.n	8002c12 <my_astro_init+0xce>
	}
	else
	{
		return false ;
 8002c10:	2300      	movs	r3, #0
	}
}
 8002c12:	0018      	movs	r0, r3
 8002c14:	46bd      	mov	sp, r7
 8002c16:	b002      	add	sp, #8
 8002c18:	bcb0      	pop	{r4, r5, r7}
 8002c1a:	bc08      	pop	{r3}
 8002c1c:	b004      	add	sp, #16
 8002c1e:	4718      	bx	r3
 8002c20:	20000890 	.word	0x20000890

08002c24 <is_system_initialized>:


// System functions
bool is_system_initialized ( void )
{
 8002c24:	b590      	push	{r4, r7, lr}
 8002c26:	b083      	sub	sp, #12
 8002c28:	af00      	add	r7, sp, #0
	// Nie próbuj robić nic z Astronode, bo nie wiesz czy nie trzeba go zainicjować restartem. Ogranicz się do samego systemu.
	uint16_t yyyy = my_rtc_get_dt_s ( rtc_dt_s ) ;
 8002c2a:	1dbc      	adds	r4, r7, #6
 8002c2c:	4b0a      	ldr	r3, [pc, #40]	; (8002c58 <is_system_initialized+0x34>)
 8002c2e:	0018      	movs	r0, r3
 8002c30:	f005 f980 	bl	8007f34 <my_rtc_get_dt_s>
 8002c34:	0003      	movs	r3, r0
 8002c36:	8023      	strh	r3, [r4, #0]
	send_debug_logs ( rtc_dt_s ) ;
 8002c38:	4b07      	ldr	r3, [pc, #28]	; (8002c58 <is_system_initialized+0x34>)
 8002c3a:	0018      	movs	r0, r3
 8002c3c:	f7ff fe94 	bl	8002968 <send_debug_logs>
	return ( yyyy >= FIRMWARE_RELEASE_YEAR ) ? true : false ;
 8002c40:	1dbb      	adds	r3, r7, #6
 8002c42:	881b      	ldrh	r3, [r3, #0]
 8002c44:	4a05      	ldr	r2, [pc, #20]	; (8002c5c <is_system_initialized+0x38>)
 8002c46:	429a      	cmp	r2, r3
 8002c48:	419b      	sbcs	r3, r3
 8002c4a:	425b      	negs	r3, r3
 8002c4c:	b2db      	uxtb	r3, r3
}
 8002c4e:	0018      	movs	r0, r3
 8002c50:	46bd      	mov	sp, r7
 8002c52:	b003      	add	sp, #12
 8002c54:	bd90      	pop	{r4, r7, pc}
 8002c56:	46c0      	nop			; (mov r8, r8)
 8002c58:	2000087c 	.word	0x2000087c
 8002c5c:	000007e6 	.word	0x000007e6

08002c60 <HAL_TIM_PeriodElapsedCallback>:
}

// TIM Callbacks

void HAL_TIM_PeriodElapsedCallback ( TIM_HandleTypeDef *htim )
{
 8002c60:	b580      	push	{r7, lr}
 8002c62:	b082      	sub	sp, #8
 8002c64:	af00      	add	r7, sp, #0
 8002c66:	6078      	str	r0, [r7, #4]
	if ( htim->Instance == TIM6 )
 8002c68:	687b      	ldr	r3, [r7, #4]
 8002c6a:	681b      	ldr	r3, [r3, #0]
 8002c6c:	4a0a      	ldr	r2, [pc, #40]	; (8002c98 <HAL_TIM_PeriodElapsedCallback+0x38>)
 8002c6e:	4293      	cmp	r3, r2
 8002c70:	d10d      	bne.n	8002c8e <HAL_TIM_PeriodElapsedCallback+0x2e>
	{
		tim_seconds++ ;
 8002c72:	4b0a      	ldr	r3, [pc, #40]	; (8002c9c <HAL_TIM_PeriodElapsedCallback+0x3c>)
 8002c74:	881b      	ldrh	r3, [r3, #0]
 8002c76:	3301      	adds	r3, #1
 8002c78:	b29a      	uxth	r2, r3
 8002c7a:	4b08      	ldr	r3, [pc, #32]	; (8002c9c <HAL_TIM_PeriodElapsedCallback+0x3c>)
 8002c7c:	801a      	strh	r2, [r3, #0]
		if ( tim_seconds > TIM_SECONDS_THS_SYSTEM_RESET )
 8002c7e:	4b07      	ldr	r3, [pc, #28]	; (8002c9c <HAL_TIM_PeriodElapsedCallback+0x3c>)
 8002c80:	881a      	ldrh	r2, [r3, #0]
 8002c82:	2396      	movs	r3, #150	; 0x96
 8002c84:	005b      	lsls	r3, r3, #1
 8002c86:	429a      	cmp	r2, r3
 8002c88:	d901      	bls.n	8002c8e <HAL_TIM_PeriodElapsedCallback+0x2e>
		  {
			  HAL_NVIC_SystemReset () ;
 8002c8a:	f000 fc32 	bl	80034f2 <HAL_NVIC_SystemReset>
		  }
	}
}
 8002c8e:	46c0      	nop			; (mov r8, r8)
 8002c90:	46bd      	mov	sp, r7
 8002c92:	b002      	add	sp, #8
 8002c94:	bd80      	pop	{r7, pc}
 8002c96:	46c0      	nop			; (mov r8, r8)
 8002c98:	40001000 	.word	0x40001000
 8002c9c:	20000890 	.word	0x20000890

08002ca0 <HAL_GPIO_EXTI_Rising_Callback>:

// EXTI Callbacks
void HAL_GPIO_EXTI_Rising_Callback ( uint16_t GPIO_Pin )
{
 8002ca0:	b580      	push	{r7, lr}
 8002ca2:	b082      	sub	sp, #8
 8002ca4:	af00      	add	r7, sp, #0
 8002ca6:	0002      	movs	r2, r0
 8002ca8:	1dbb      	adds	r3, r7, #6
 8002caa:	801a      	strh	r2, [r3, #0]
	//zamiast poniższego może lepiej wrócić do pierwotnego przeglądania GPIO w trybie input bez przerwania
	if ( GPIO_Pin == 0x4 ) // ASTRO_EVT_Pin = 0x1000
 8002cac:	1dbb      	adds	r3, r7, #6
 8002cae:	881b      	ldrh	r3, [r3, #0]
 8002cb0:	2b04      	cmp	r3, #4
 8002cb2:	d102      	bne.n	8002cba <HAL_GPIO_EXTI_Rising_Callback+0x1a>
	{
		is_astro_evt_flag = true ;
 8002cb4:	4b03      	ldr	r3, [pc, #12]	; (8002cc4 <HAL_GPIO_EXTI_Rising_Callback+0x24>)
 8002cb6:	2201      	movs	r2, #1
 8002cb8:	701a      	strb	r2, [r3, #0]
	}
}
 8002cba:	46c0      	nop			; (mov r8, r8)
 8002cbc:	46bd      	mov	sp, r7
 8002cbe:	b002      	add	sp, #8
 8002cc0:	bd80      	pop	{r7, pc}
 8002cc2:	46c0      	nop			; (mov r8, r8)
 8002cc4:	20000892 	.word	0x20000892

08002cc8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8002cc8:	b580      	push	{r7, lr}
 8002cca:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8002ccc:	b672      	cpsid	i
}
 8002cce:	46c0      	nop			; (mov r8, r8)
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8002cd0:	e7fe      	b.n	8002cd0 <Error_Handler+0x8>
	...

08002cd4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002cd4:	b580      	push	{r7, lr}
 8002cd6:	b082      	sub	sp, #8
 8002cd8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002cda:	4b11      	ldr	r3, [pc, #68]	; (8002d20 <HAL_MspInit+0x4c>)
 8002cdc:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002cde:	4b10      	ldr	r3, [pc, #64]	; (8002d20 <HAL_MspInit+0x4c>)
 8002ce0:	2101      	movs	r1, #1
 8002ce2:	430a      	orrs	r2, r1
 8002ce4:	641a      	str	r2, [r3, #64]	; 0x40
 8002ce6:	4b0e      	ldr	r3, [pc, #56]	; (8002d20 <HAL_MspInit+0x4c>)
 8002ce8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002cea:	2201      	movs	r2, #1
 8002cec:	4013      	ands	r3, r2
 8002cee:	607b      	str	r3, [r7, #4]
 8002cf0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8002cf2:	4b0b      	ldr	r3, [pc, #44]	; (8002d20 <HAL_MspInit+0x4c>)
 8002cf4:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8002cf6:	4b0a      	ldr	r3, [pc, #40]	; (8002d20 <HAL_MspInit+0x4c>)
 8002cf8:	2180      	movs	r1, #128	; 0x80
 8002cfa:	0549      	lsls	r1, r1, #21
 8002cfc:	430a      	orrs	r2, r1
 8002cfe:	63da      	str	r2, [r3, #60]	; 0x3c
 8002d00:	4b07      	ldr	r3, [pc, #28]	; (8002d20 <HAL_MspInit+0x4c>)
 8002d02:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8002d04:	2380      	movs	r3, #128	; 0x80
 8002d06:	055b      	lsls	r3, r3, #21
 8002d08:	4013      	ands	r3, r2
 8002d0a:	603b      	str	r3, [r7, #0]
 8002d0c:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  /** Disable the internal Pull-Up in Dead Battery pins of UCPD peripheral
  */
  HAL_SYSCFG_StrobeDBattpinsConfig(SYSCFG_CFGR1_UCPD1_STROBE | SYSCFG_CFGR1_UCPD2_STROBE);
 8002d0e:	23c0      	movs	r3, #192	; 0xc0
 8002d10:	00db      	lsls	r3, r3, #3
 8002d12:	0018      	movs	r0, r3
 8002d14:	f000 faf4 	bl	8003300 <HAL_SYSCFG_StrobeDBattpinsConfig>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002d18:	46c0      	nop			; (mov r8, r8)
 8002d1a:	46bd      	mov	sp, r7
 8002d1c:	b002      	add	sp, #8
 8002d1e:	bd80      	pop	{r7, pc}
 8002d20:	40021000 	.word	0x40021000

08002d24 <HAL_RTC_MspInit>:
* This function configures the hardware resources used in this example
* @param hrtc: RTC handle pointer
* @retval None
*/
void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{
 8002d24:	b590      	push	{r4, r7, lr}
 8002d26:	b097      	sub	sp, #92	; 0x5c
 8002d28:	af00      	add	r7, sp, #0
 8002d2a:	6078      	str	r0, [r7, #4]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8002d2c:	240c      	movs	r4, #12
 8002d2e:	193b      	adds	r3, r7, r4
 8002d30:	0018      	movs	r0, r3
 8002d32:	234c      	movs	r3, #76	; 0x4c
 8002d34:	001a      	movs	r2, r3
 8002d36:	2100      	movs	r1, #0
 8002d38:	f005 fc50 	bl	80085dc <memset>
  if(hrtc->Instance==RTC)
 8002d3c:	687b      	ldr	r3, [r7, #4]
 8002d3e:	681b      	ldr	r3, [r3, #0]
 8002d40:	4a15      	ldr	r2, [pc, #84]	; (8002d98 <HAL_RTC_MspInit+0x74>)
 8002d42:	4293      	cmp	r3, r2
 8002d44:	d124      	bne.n	8002d90 <HAL_RTC_MspInit+0x6c>

  /* USER CODE END RTC_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 8002d46:	193b      	adds	r3, r7, r4
 8002d48:	2280      	movs	r2, #128	; 0x80
 8002d4a:	0292      	lsls	r2, r2, #10
 8002d4c:	601a      	str	r2, [r3, #0]
    PeriphClkInit.RTCClockSelection = RCC_RTCCLKSOURCE_LSI;
 8002d4e:	193b      	adds	r3, r7, r4
 8002d50:	2280      	movs	r2, #128	; 0x80
 8002d52:	0092      	lsls	r2, r2, #2
 8002d54:	641a      	str	r2, [r3, #64]	; 0x40
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8002d56:	193b      	adds	r3, r7, r4
 8002d58:	0018      	movs	r0, r3
 8002d5a:	f001 fb43 	bl	80043e4 <HAL_RCCEx_PeriphCLKConfig>
 8002d5e:	1e03      	subs	r3, r0, #0
 8002d60:	d001      	beq.n	8002d66 <HAL_RTC_MspInit+0x42>
    {
      Error_Handler();
 8002d62:	f7ff ffb1 	bl	8002cc8 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_RTC_ENABLE();
 8002d66:	4b0d      	ldr	r3, [pc, #52]	; (8002d9c <HAL_RTC_MspInit+0x78>)
 8002d68:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8002d6a:	4b0c      	ldr	r3, [pc, #48]	; (8002d9c <HAL_RTC_MspInit+0x78>)
 8002d6c:	2180      	movs	r1, #128	; 0x80
 8002d6e:	0209      	lsls	r1, r1, #8
 8002d70:	430a      	orrs	r2, r1
 8002d72:	65da      	str	r2, [r3, #92]	; 0x5c
    __HAL_RCC_RTCAPB_CLK_ENABLE();
 8002d74:	4b09      	ldr	r3, [pc, #36]	; (8002d9c <HAL_RTC_MspInit+0x78>)
 8002d76:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8002d78:	4b08      	ldr	r3, [pc, #32]	; (8002d9c <HAL_RTC_MspInit+0x78>)
 8002d7a:	2180      	movs	r1, #128	; 0x80
 8002d7c:	00c9      	lsls	r1, r1, #3
 8002d7e:	430a      	orrs	r2, r1
 8002d80:	63da      	str	r2, [r3, #60]	; 0x3c
 8002d82:	4b06      	ldr	r3, [pc, #24]	; (8002d9c <HAL_RTC_MspInit+0x78>)
 8002d84:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8002d86:	2380      	movs	r3, #128	; 0x80
 8002d88:	00db      	lsls	r3, r3, #3
 8002d8a:	4013      	ands	r3, r2
 8002d8c:	60bb      	str	r3, [r7, #8]
 8002d8e:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }

}
 8002d90:	46c0      	nop			; (mov r8, r8)
 8002d92:	46bd      	mov	sp, r7
 8002d94:	b017      	add	sp, #92	; 0x5c
 8002d96:	bd90      	pop	{r4, r7, pc}
 8002d98:	40002800 	.word	0x40002800
 8002d9c:	40021000 	.word	0x40021000

08002da0 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8002da0:	b580      	push	{r7, lr}
 8002da2:	b084      	sub	sp, #16
 8002da4:	af00      	add	r7, sp, #0
 8002da6:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM6)
 8002da8:	687b      	ldr	r3, [r7, #4]
 8002daa:	681b      	ldr	r3, [r3, #0]
 8002dac:	4a0d      	ldr	r2, [pc, #52]	; (8002de4 <HAL_TIM_Base_MspInit+0x44>)
 8002dae:	4293      	cmp	r3, r2
 8002db0:	d113      	bne.n	8002dda <HAL_TIM_Base_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM6_MspInit 0 */

  /* USER CODE END TIM6_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM6_CLK_ENABLE();
 8002db2:	4b0d      	ldr	r3, [pc, #52]	; (8002de8 <HAL_TIM_Base_MspInit+0x48>)
 8002db4:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8002db6:	4b0c      	ldr	r3, [pc, #48]	; (8002de8 <HAL_TIM_Base_MspInit+0x48>)
 8002db8:	2110      	movs	r1, #16
 8002dba:	430a      	orrs	r2, r1
 8002dbc:	63da      	str	r2, [r3, #60]	; 0x3c
 8002dbe:	4b0a      	ldr	r3, [pc, #40]	; (8002de8 <HAL_TIM_Base_MspInit+0x48>)
 8002dc0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002dc2:	2210      	movs	r2, #16
 8002dc4:	4013      	ands	r3, r2
 8002dc6:	60fb      	str	r3, [r7, #12]
 8002dc8:	68fb      	ldr	r3, [r7, #12]
    /* TIM6 interrupt Init */
    HAL_NVIC_SetPriority(TIM6_DAC_LPTIM1_IRQn, 2, 0);
 8002dca:	2200      	movs	r2, #0
 8002dcc:	2102      	movs	r1, #2
 8002dce:	2011      	movs	r0, #17
 8002dd0:	f000 fb6a 	bl	80034a8 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM6_DAC_LPTIM1_IRQn);
 8002dd4:	2011      	movs	r0, #17
 8002dd6:	f000 fb7c 	bl	80034d2 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM6_MspInit 1 */

  /* USER CODE END TIM6_MspInit 1 */
  }

}
 8002dda:	46c0      	nop			; (mov r8, r8)
 8002ddc:	46bd      	mov	sp, r7
 8002dde:	b004      	add	sp, #16
 8002de0:	bd80      	pop	{r7, pc}
 8002de2:	46c0      	nop			; (mov r8, r8)
 8002de4:	40001000 	.word	0x40001000
 8002de8:	40021000 	.word	0x40021000

08002dec <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8002dec:	b590      	push	{r4, r7, lr}
 8002dee:	b09f      	sub	sp, #124	; 0x7c
 8002df0:	af00      	add	r7, sp, #0
 8002df2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002df4:	2364      	movs	r3, #100	; 0x64
 8002df6:	18fb      	adds	r3, r7, r3
 8002df8:	0018      	movs	r0, r3
 8002dfa:	2314      	movs	r3, #20
 8002dfc:	001a      	movs	r2, r3
 8002dfe:	2100      	movs	r1, #0
 8002e00:	f005 fbec 	bl	80085dc <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8002e04:	2418      	movs	r4, #24
 8002e06:	193b      	adds	r3, r7, r4
 8002e08:	0018      	movs	r0, r3
 8002e0a:	234c      	movs	r3, #76	; 0x4c
 8002e0c:	001a      	movs	r2, r3
 8002e0e:	2100      	movs	r1, #0
 8002e10:	f005 fbe4 	bl	80085dc <memset>
  if(huart->Instance==USART2)
 8002e14:	687b      	ldr	r3, [r7, #4]
 8002e16:	681b      	ldr	r3, [r3, #0]
 8002e18:	4a45      	ldr	r2, [pc, #276]	; (8002f30 <HAL_UART_MspInit+0x144>)
 8002e1a:	4293      	cmp	r3, r2
 8002e1c:	d13f      	bne.n	8002e9e <HAL_UART_MspInit+0xb2>

  /* USER CODE END USART2_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8002e1e:	193b      	adds	r3, r7, r4
 8002e20:	2202      	movs	r2, #2
 8002e22:	601a      	str	r2, [r3, #0]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8002e24:	193b      	adds	r3, r7, r4
 8002e26:	2200      	movs	r2, #0
 8002e28:	609a      	str	r2, [r3, #8]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8002e2a:	193b      	adds	r3, r7, r4
 8002e2c:	0018      	movs	r0, r3
 8002e2e:	f001 fad9 	bl	80043e4 <HAL_RCCEx_PeriphCLKConfig>
 8002e32:	1e03      	subs	r3, r0, #0
 8002e34:	d001      	beq.n	8002e3a <HAL_UART_MspInit+0x4e>
    {
      Error_Handler();
 8002e36:	f7ff ff47 	bl	8002cc8 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8002e3a:	4b3e      	ldr	r3, [pc, #248]	; (8002f34 <HAL_UART_MspInit+0x148>)
 8002e3c:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8002e3e:	4b3d      	ldr	r3, [pc, #244]	; (8002f34 <HAL_UART_MspInit+0x148>)
 8002e40:	2180      	movs	r1, #128	; 0x80
 8002e42:	0289      	lsls	r1, r1, #10
 8002e44:	430a      	orrs	r2, r1
 8002e46:	63da      	str	r2, [r3, #60]	; 0x3c
 8002e48:	4b3a      	ldr	r3, [pc, #232]	; (8002f34 <HAL_UART_MspInit+0x148>)
 8002e4a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8002e4c:	2380      	movs	r3, #128	; 0x80
 8002e4e:	029b      	lsls	r3, r3, #10
 8002e50:	4013      	ands	r3, r2
 8002e52:	617b      	str	r3, [r7, #20]
 8002e54:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002e56:	4b37      	ldr	r3, [pc, #220]	; (8002f34 <HAL_UART_MspInit+0x148>)
 8002e58:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002e5a:	4b36      	ldr	r3, [pc, #216]	; (8002f34 <HAL_UART_MspInit+0x148>)
 8002e5c:	2101      	movs	r1, #1
 8002e5e:	430a      	orrs	r2, r1
 8002e60:	635a      	str	r2, [r3, #52]	; 0x34
 8002e62:	4b34      	ldr	r3, [pc, #208]	; (8002f34 <HAL_UART_MspInit+0x148>)
 8002e64:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002e66:	2201      	movs	r2, #1
 8002e68:	4013      	ands	r3, r2
 8002e6a:	613b      	str	r3, [r7, #16]
 8002e6c:	693b      	ldr	r3, [r7, #16]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = DBG_TX_Pin|DBG_RX_Pin;
 8002e6e:	2164      	movs	r1, #100	; 0x64
 8002e70:	187b      	adds	r3, r7, r1
 8002e72:	220c      	movs	r2, #12
 8002e74:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002e76:	187b      	adds	r3, r7, r1
 8002e78:	2202      	movs	r2, #2
 8002e7a:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002e7c:	187b      	adds	r3, r7, r1
 8002e7e:	2200      	movs	r2, #0
 8002e80:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002e82:	187b      	adds	r3, r7, r1
 8002e84:	2200      	movs	r2, #0
 8002e86:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_USART2;
 8002e88:	187b      	adds	r3, r7, r1
 8002e8a:	2201      	movs	r2, #1
 8002e8c:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002e8e:	187a      	adds	r2, r7, r1
 8002e90:	23a0      	movs	r3, #160	; 0xa0
 8002e92:	05db      	lsls	r3, r3, #23
 8002e94:	0011      	movs	r1, r2
 8002e96:	0018      	movs	r0, r3
 8002e98:	f000 fb3c 	bl	8003514 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 8002e9c:	e044      	b.n	8002f28 <HAL_UART_MspInit+0x13c>
  else if(huart->Instance==USART3)
 8002e9e:	687b      	ldr	r3, [r7, #4]
 8002ea0:	681b      	ldr	r3, [r3, #0]
 8002ea2:	4a25      	ldr	r2, [pc, #148]	; (8002f38 <HAL_UART_MspInit+0x14c>)
 8002ea4:	4293      	cmp	r3, r2
 8002ea6:	d13f      	bne.n	8002f28 <HAL_UART_MspInit+0x13c>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 8002ea8:	2118      	movs	r1, #24
 8002eaa:	187b      	adds	r3, r7, r1
 8002eac:	2204      	movs	r2, #4
 8002eae:	601a      	str	r2, [r3, #0]
    PeriphClkInit.Usart3ClockSelection = RCC_USART3CLKSOURCE_PCLK1;
 8002eb0:	187b      	adds	r3, r7, r1
 8002eb2:	2200      	movs	r2, #0
 8002eb4:	60da      	str	r2, [r3, #12]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8002eb6:	187b      	adds	r3, r7, r1
 8002eb8:	0018      	movs	r0, r3
 8002eba:	f001 fa93 	bl	80043e4 <HAL_RCCEx_PeriphCLKConfig>
 8002ebe:	1e03      	subs	r3, r0, #0
 8002ec0:	d001      	beq.n	8002ec6 <HAL_UART_MspInit+0xda>
      Error_Handler();
 8002ec2:	f7ff ff01 	bl	8002cc8 <Error_Handler>
    __HAL_RCC_USART3_CLK_ENABLE();
 8002ec6:	4b1b      	ldr	r3, [pc, #108]	; (8002f34 <HAL_UART_MspInit+0x148>)
 8002ec8:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8002eca:	4b1a      	ldr	r3, [pc, #104]	; (8002f34 <HAL_UART_MspInit+0x148>)
 8002ecc:	2180      	movs	r1, #128	; 0x80
 8002ece:	02c9      	lsls	r1, r1, #11
 8002ed0:	430a      	orrs	r2, r1
 8002ed2:	63da      	str	r2, [r3, #60]	; 0x3c
 8002ed4:	4b17      	ldr	r3, [pc, #92]	; (8002f34 <HAL_UART_MspInit+0x148>)
 8002ed6:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8002ed8:	2380      	movs	r3, #128	; 0x80
 8002eda:	02db      	lsls	r3, r3, #11
 8002edc:	4013      	ands	r3, r2
 8002ede:	60fb      	str	r3, [r7, #12]
 8002ee0:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002ee2:	4b14      	ldr	r3, [pc, #80]	; (8002f34 <HAL_UART_MspInit+0x148>)
 8002ee4:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002ee6:	4b13      	ldr	r3, [pc, #76]	; (8002f34 <HAL_UART_MspInit+0x148>)
 8002ee8:	2102      	movs	r1, #2
 8002eea:	430a      	orrs	r2, r1
 8002eec:	635a      	str	r2, [r3, #52]	; 0x34
 8002eee:	4b11      	ldr	r3, [pc, #68]	; (8002f34 <HAL_UART_MspInit+0x148>)
 8002ef0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002ef2:	2202      	movs	r2, #2
 8002ef4:	4013      	ands	r3, r2
 8002ef6:	60bb      	str	r3, [r7, #8]
 8002ef8:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = ASTRO_TX_Pin|ASTRO_RX_Pin;
 8002efa:	2164      	movs	r1, #100	; 0x64
 8002efc:	187b      	adds	r3, r7, r1
 8002efe:	22c0      	movs	r2, #192	; 0xc0
 8002f00:	0092      	lsls	r2, r2, #2
 8002f02:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002f04:	187b      	adds	r3, r7, r1
 8002f06:	2202      	movs	r2, #2
 8002f08:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002f0a:	187b      	adds	r3, r7, r1
 8002f0c:	2200      	movs	r2, #0
 8002f0e:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002f10:	187b      	adds	r3, r7, r1
 8002f12:	2200      	movs	r2, #0
 8002f14:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF4_USART3;
 8002f16:	187b      	adds	r3, r7, r1
 8002f18:	2204      	movs	r2, #4
 8002f1a:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002f1c:	187b      	adds	r3, r7, r1
 8002f1e:	4a07      	ldr	r2, [pc, #28]	; (8002f3c <HAL_UART_MspInit+0x150>)
 8002f20:	0019      	movs	r1, r3
 8002f22:	0010      	movs	r0, r2
 8002f24:	f000 faf6 	bl	8003514 <HAL_GPIO_Init>
}
 8002f28:	46c0      	nop			; (mov r8, r8)
 8002f2a:	46bd      	mov	sp, r7
 8002f2c:	b01f      	add	sp, #124	; 0x7c
 8002f2e:	bd90      	pop	{r4, r7, pc}
 8002f30:	40004400 	.word	0x40004400
 8002f34:	40021000 	.word	0x40021000
 8002f38:	40004800 	.word	0x40004800
 8002f3c:	50000400 	.word	0x50000400

08002f40 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002f40:	b580      	push	{r7, lr}
 8002f42:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8002f44:	e7fe      	b.n	8002f44 <NMI_Handler+0x4>

08002f46 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002f46:	b580      	push	{r7, lr}
 8002f48:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002f4a:	e7fe      	b.n	8002f4a <HardFault_Handler+0x4>

08002f4c <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8002f4c:	b580      	push	{r7, lr}
 8002f4e:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 8002f50:	46c0      	nop			; (mov r8, r8)
 8002f52:	46bd      	mov	sp, r7
 8002f54:	bd80      	pop	{r7, pc}

08002f56 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8002f56:	b580      	push	{r7, lr}
 8002f58:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8002f5a:	46c0      	nop			; (mov r8, r8)
 8002f5c:	46bd      	mov	sp, r7
 8002f5e:	bd80      	pop	{r7, pc}

08002f60 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002f60:	b580      	push	{r7, lr}
 8002f62:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002f64:	f000 f970 	bl	8003248 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002f68:	46c0      	nop			; (mov r8, r8)
 8002f6a:	46bd      	mov	sp, r7
 8002f6c:	bd80      	pop	{r7, pc}

08002f6e <EXTI2_3_IRQHandler>:

/**
  * @brief This function handles EXTI line 2 and line 3 interrupts.
  */
void EXTI2_3_IRQHandler(void)
{
 8002f6e:	b580      	push	{r7, lr}
 8002f70:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI2_3_IRQn 0 */

  /* USER CODE END EXTI2_3_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(ASTRO_EVT_IT2_Pin);
 8002f72:	2004      	movs	r0, #4
 8002f74:	f000 fc74 	bl	8003860 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI2_3_IRQn 1 */

  /* USER CODE END EXTI2_3_IRQn 1 */
}
 8002f78:	46c0      	nop			; (mov r8, r8)
 8002f7a:	46bd      	mov	sp, r7
 8002f7c:	bd80      	pop	{r7, pc}
	...

08002f80 <TIM6_DAC_LPTIM1_IRQHandler>:

/**
  * @brief This function handles TIM6, DAC and LPTIM1 global Interrupts.
  */
void TIM6_DAC_LPTIM1_IRQHandler(void)
{
 8002f80:	b580      	push	{r7, lr}
 8002f82:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_LPTIM1_IRQn 0 */

  /* USER CODE END TIM6_DAC_LPTIM1_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8002f84:	4b03      	ldr	r3, [pc, #12]	; (8002f94 <TIM6_DAC_LPTIM1_IRQHandler+0x14>)
 8002f86:	0018      	movs	r0, r3
 8002f88:	f002 f9f0 	bl	800536c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_LPTIM1_IRQn 1 */

  /* USER CODE END TIM6_DAC_LPTIM1_IRQn 1 */
}
 8002f8c:	46c0      	nop			; (mov r8, r8)
 8002f8e:	46bd      	mov	sp, r7
 8002f90:	bd80      	pop	{r7, pc}
 8002f92:	46c0      	nop			; (mov r8, r8)
 8002f94:	20000708 	.word	0x20000708

08002f98 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8002f98:	b580      	push	{r7, lr}
 8002f9a:	af00      	add	r7, sp, #0
  return 1;
 8002f9c:	2301      	movs	r3, #1
}
 8002f9e:	0018      	movs	r0, r3
 8002fa0:	46bd      	mov	sp, r7
 8002fa2:	bd80      	pop	{r7, pc}

08002fa4 <_kill>:

int _kill(int pid, int sig)
{
 8002fa4:	b580      	push	{r7, lr}
 8002fa6:	b082      	sub	sp, #8
 8002fa8:	af00      	add	r7, sp, #0
 8002faa:	6078      	str	r0, [r7, #4]
 8002fac:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8002fae:	f005 fb73 	bl	8008698 <__errno>
 8002fb2:	0003      	movs	r3, r0
 8002fb4:	2216      	movs	r2, #22
 8002fb6:	601a      	str	r2, [r3, #0]
  return -1;
 8002fb8:	2301      	movs	r3, #1
 8002fba:	425b      	negs	r3, r3
}
 8002fbc:	0018      	movs	r0, r3
 8002fbe:	46bd      	mov	sp, r7
 8002fc0:	b002      	add	sp, #8
 8002fc2:	bd80      	pop	{r7, pc}

08002fc4 <_exit>:

void _exit (int status)
{
 8002fc4:	b580      	push	{r7, lr}
 8002fc6:	b082      	sub	sp, #8
 8002fc8:	af00      	add	r7, sp, #0
 8002fca:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8002fcc:	2301      	movs	r3, #1
 8002fce:	425a      	negs	r2, r3
 8002fd0:	687b      	ldr	r3, [r7, #4]
 8002fd2:	0011      	movs	r1, r2
 8002fd4:	0018      	movs	r0, r3
 8002fd6:	f7ff ffe5 	bl	8002fa4 <_kill>
  while (1) {}    /* Make sure we hang here */
 8002fda:	e7fe      	b.n	8002fda <_exit+0x16>

08002fdc <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8002fdc:	b580      	push	{r7, lr}
 8002fde:	b086      	sub	sp, #24
 8002fe0:	af00      	add	r7, sp, #0
 8002fe2:	60f8      	str	r0, [r7, #12]
 8002fe4:	60b9      	str	r1, [r7, #8]
 8002fe6:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002fe8:	2300      	movs	r3, #0
 8002fea:	617b      	str	r3, [r7, #20]
 8002fec:	e00a      	b.n	8003004 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8002fee:	e000      	b.n	8002ff2 <_read+0x16>
 8002ff0:	bf00      	nop
 8002ff2:	0001      	movs	r1, r0
 8002ff4:	68bb      	ldr	r3, [r7, #8]
 8002ff6:	1c5a      	adds	r2, r3, #1
 8002ff8:	60ba      	str	r2, [r7, #8]
 8002ffa:	b2ca      	uxtb	r2, r1
 8002ffc:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002ffe:	697b      	ldr	r3, [r7, #20]
 8003000:	3301      	adds	r3, #1
 8003002:	617b      	str	r3, [r7, #20]
 8003004:	697a      	ldr	r2, [r7, #20]
 8003006:	687b      	ldr	r3, [r7, #4]
 8003008:	429a      	cmp	r2, r3
 800300a:	dbf0      	blt.n	8002fee <_read+0x12>
  }

  return len;
 800300c:	687b      	ldr	r3, [r7, #4]
}
 800300e:	0018      	movs	r0, r3
 8003010:	46bd      	mov	sp, r7
 8003012:	b006      	add	sp, #24
 8003014:	bd80      	pop	{r7, pc}

08003016 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8003016:	b580      	push	{r7, lr}
 8003018:	b086      	sub	sp, #24
 800301a:	af00      	add	r7, sp, #0
 800301c:	60f8      	str	r0, [r7, #12]
 800301e:	60b9      	str	r1, [r7, #8]
 8003020:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003022:	2300      	movs	r3, #0
 8003024:	617b      	str	r3, [r7, #20]
 8003026:	e009      	b.n	800303c <_write+0x26>
  {
    __io_putchar(*ptr++);
 8003028:	68bb      	ldr	r3, [r7, #8]
 800302a:	1c5a      	adds	r2, r3, #1
 800302c:	60ba      	str	r2, [r7, #8]
 800302e:	781b      	ldrb	r3, [r3, #0]
 8003030:	0018      	movs	r0, r3
 8003032:	e000      	b.n	8003036 <_write+0x20>
 8003034:	bf00      	nop
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003036:	697b      	ldr	r3, [r7, #20]
 8003038:	3301      	adds	r3, #1
 800303a:	617b      	str	r3, [r7, #20]
 800303c:	697a      	ldr	r2, [r7, #20]
 800303e:	687b      	ldr	r3, [r7, #4]
 8003040:	429a      	cmp	r2, r3
 8003042:	dbf1      	blt.n	8003028 <_write+0x12>
  }
  return len;
 8003044:	687b      	ldr	r3, [r7, #4]
}
 8003046:	0018      	movs	r0, r3
 8003048:	46bd      	mov	sp, r7
 800304a:	b006      	add	sp, #24
 800304c:	bd80      	pop	{r7, pc}

0800304e <_close>:

int _close(int file)
{
 800304e:	b580      	push	{r7, lr}
 8003050:	b082      	sub	sp, #8
 8003052:	af00      	add	r7, sp, #0
 8003054:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8003056:	2301      	movs	r3, #1
 8003058:	425b      	negs	r3, r3
}
 800305a:	0018      	movs	r0, r3
 800305c:	46bd      	mov	sp, r7
 800305e:	b002      	add	sp, #8
 8003060:	bd80      	pop	{r7, pc}

08003062 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8003062:	b580      	push	{r7, lr}
 8003064:	b082      	sub	sp, #8
 8003066:	af00      	add	r7, sp, #0
 8003068:	6078      	str	r0, [r7, #4]
 800306a:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 800306c:	683b      	ldr	r3, [r7, #0]
 800306e:	2280      	movs	r2, #128	; 0x80
 8003070:	0192      	lsls	r2, r2, #6
 8003072:	605a      	str	r2, [r3, #4]
  return 0;
 8003074:	2300      	movs	r3, #0
}
 8003076:	0018      	movs	r0, r3
 8003078:	46bd      	mov	sp, r7
 800307a:	b002      	add	sp, #8
 800307c:	bd80      	pop	{r7, pc}

0800307e <_isatty>:

int _isatty(int file)
{
 800307e:	b580      	push	{r7, lr}
 8003080:	b082      	sub	sp, #8
 8003082:	af00      	add	r7, sp, #0
 8003084:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8003086:	2301      	movs	r3, #1
}
 8003088:	0018      	movs	r0, r3
 800308a:	46bd      	mov	sp, r7
 800308c:	b002      	add	sp, #8
 800308e:	bd80      	pop	{r7, pc}

08003090 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8003090:	b580      	push	{r7, lr}
 8003092:	b084      	sub	sp, #16
 8003094:	af00      	add	r7, sp, #0
 8003096:	60f8      	str	r0, [r7, #12]
 8003098:	60b9      	str	r1, [r7, #8]
 800309a:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 800309c:	2300      	movs	r3, #0
}
 800309e:	0018      	movs	r0, r3
 80030a0:	46bd      	mov	sp, r7
 80030a2:	b004      	add	sp, #16
 80030a4:	bd80      	pop	{r7, pc}
	...

080030a8 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80030a8:	b580      	push	{r7, lr}
 80030aa:	b086      	sub	sp, #24
 80030ac:	af00      	add	r7, sp, #0
 80030ae:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80030b0:	4a14      	ldr	r2, [pc, #80]	; (8003104 <_sbrk+0x5c>)
 80030b2:	4b15      	ldr	r3, [pc, #84]	; (8003108 <_sbrk+0x60>)
 80030b4:	1ad3      	subs	r3, r2, r3
 80030b6:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80030b8:	697b      	ldr	r3, [r7, #20]
 80030ba:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80030bc:	4b13      	ldr	r3, [pc, #76]	; (800310c <_sbrk+0x64>)
 80030be:	681b      	ldr	r3, [r3, #0]
 80030c0:	2b00      	cmp	r3, #0
 80030c2:	d102      	bne.n	80030ca <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80030c4:	4b11      	ldr	r3, [pc, #68]	; (800310c <_sbrk+0x64>)
 80030c6:	4a12      	ldr	r2, [pc, #72]	; (8003110 <_sbrk+0x68>)
 80030c8:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80030ca:	4b10      	ldr	r3, [pc, #64]	; (800310c <_sbrk+0x64>)
 80030cc:	681a      	ldr	r2, [r3, #0]
 80030ce:	687b      	ldr	r3, [r7, #4]
 80030d0:	18d3      	adds	r3, r2, r3
 80030d2:	693a      	ldr	r2, [r7, #16]
 80030d4:	429a      	cmp	r2, r3
 80030d6:	d207      	bcs.n	80030e8 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80030d8:	f005 fade 	bl	8008698 <__errno>
 80030dc:	0003      	movs	r3, r0
 80030de:	220c      	movs	r2, #12
 80030e0:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80030e2:	2301      	movs	r3, #1
 80030e4:	425b      	negs	r3, r3
 80030e6:	e009      	b.n	80030fc <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80030e8:	4b08      	ldr	r3, [pc, #32]	; (800310c <_sbrk+0x64>)
 80030ea:	681b      	ldr	r3, [r3, #0]
 80030ec:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80030ee:	4b07      	ldr	r3, [pc, #28]	; (800310c <_sbrk+0x64>)
 80030f0:	681a      	ldr	r2, [r3, #0]
 80030f2:	687b      	ldr	r3, [r7, #4]
 80030f4:	18d2      	adds	r2, r2, r3
 80030f6:	4b05      	ldr	r3, [pc, #20]	; (800310c <_sbrk+0x64>)
 80030f8:	601a      	str	r2, [r3, #0]

  return (void *)prev_heap_end;
 80030fa:	68fb      	ldr	r3, [r7, #12]
}
 80030fc:	0018      	movs	r0, r3
 80030fe:	46bd      	mov	sp, r7
 8003100:	b006      	add	sp, #24
 8003102:	bd80      	pop	{r7, pc}
 8003104:	20024000 	.word	0x20024000
 8003108:	00000400 	.word	0x00000400
 800310c:	20000894 	.word	0x20000894
 8003110:	20000bb0 	.word	0x20000bb0

08003114 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8003114:	b580      	push	{r7, lr}
 8003116:	af00      	add	r7, sp, #0
  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8003118:	46c0      	nop			; (mov r8, r8)
 800311a:	46bd      	mov	sp, r7
 800311c:	bd80      	pop	{r7, pc}
	...

08003120 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8003120:	480d      	ldr	r0, [pc, #52]	; (8003158 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8003122:	4685      	mov	sp, r0

/* Call the clock system initialization function.*/
  bl  SystemInit
 8003124:	f7ff fff6 	bl	8003114 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8003128:	480c      	ldr	r0, [pc, #48]	; (800315c <LoopForever+0x6>)
  ldr r1, =_edata
 800312a:	490d      	ldr	r1, [pc, #52]	; (8003160 <LoopForever+0xa>)
  ldr r2, =_sidata
 800312c:	4a0d      	ldr	r2, [pc, #52]	; (8003164 <LoopForever+0xe>)
  movs r3, #0
 800312e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8003130:	e002      	b.n	8003138 <LoopCopyDataInit>

08003132 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8003132:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8003134:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8003136:	3304      	adds	r3, #4

08003138 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8003138:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800313a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800313c:	d3f9      	bcc.n	8003132 <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800313e:	4a0a      	ldr	r2, [pc, #40]	; (8003168 <LoopForever+0x12>)
  ldr r4, =_ebss
 8003140:	4c0a      	ldr	r4, [pc, #40]	; (800316c <LoopForever+0x16>)
  movs r3, #0
 8003142:	2300      	movs	r3, #0
  b LoopFillZerobss
 8003144:	e001      	b.n	800314a <LoopFillZerobss>

08003146 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8003146:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8003148:	3204      	adds	r2, #4

0800314a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800314a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800314c:	d3fb      	bcc.n	8003146 <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 800314e:	f005 faa9 	bl	80086a4 <__libc_init_array>
/* Call the application s entry point.*/
  bl main
 8003152:	f7ff f905 	bl	8002360 <main>

08003156 <LoopForever>:

LoopForever:
  b LoopForever
 8003156:	e7fe      	b.n	8003156 <LoopForever>
  ldr   r0, =_estack
 8003158:	20024000 	.word	0x20024000
  ldr r0, =_sdata
 800315c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8003160:	200006c0 	.word	0x200006c0
  ldr r2, =_sidata
 8003164:	0800ee08 	.word	0x0800ee08
  ldr r2, =_sbss
 8003168:	200006c0 	.word	0x200006c0
  ldr r4, =_ebss
 800316c:	20000bac 	.word	0x20000bac

08003170 <ADC1_COMP_IRQHandler>:
 * @retval None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8003170:	e7fe      	b.n	8003170 <ADC1_COMP_IRQHandler>
	...

08003174 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8003174:	b580      	push	{r7, lr}
 8003176:	b082      	sub	sp, #8
 8003178:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 800317a:	1dfb      	adds	r3, r7, #7
 800317c:	2200      	movs	r2, #0
 800317e:	701a      	strb	r2, [r3, #0]
#if (INSTRUCTION_CACHE_ENABLE == 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_DISABLE();
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8003180:	4b0b      	ldr	r3, [pc, #44]	; (80031b0 <HAL_Init+0x3c>)
 8003182:	681a      	ldr	r2, [r3, #0]
 8003184:	4b0a      	ldr	r3, [pc, #40]	; (80031b0 <HAL_Init+0x3c>)
 8003186:	2180      	movs	r1, #128	; 0x80
 8003188:	0049      	lsls	r1, r1, #1
 800318a:	430a      	orrs	r2, r1
 800318c:	601a      	str	r2, [r3, #0]
#endif /* PREFETCH_ENABLE */

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 800318e:	2000      	movs	r0, #0
 8003190:	f000 f810 	bl	80031b4 <HAL_InitTick>
 8003194:	1e03      	subs	r3, r0, #0
 8003196:	d003      	beq.n	80031a0 <HAL_Init+0x2c>
  {
    status = HAL_ERROR;
 8003198:	1dfb      	adds	r3, r7, #7
 800319a:	2201      	movs	r2, #1
 800319c:	701a      	strb	r2, [r3, #0]
 800319e:	e001      	b.n	80031a4 <HAL_Init+0x30>
  }
  else
  {
  /* Init the low level hardware */
  HAL_MspInit();
 80031a0:	f7ff fd98 	bl	8002cd4 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 80031a4:	1dfb      	adds	r3, r7, #7
 80031a6:	781b      	ldrb	r3, [r3, #0]
}
 80031a8:	0018      	movs	r0, r3
 80031aa:	46bd      	mov	sp, r7
 80031ac:	b002      	add	sp, #8
 80031ae:	bd80      	pop	{r7, pc}
 80031b0:	40022000 	.word	0x40022000

080031b4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80031b4:	b590      	push	{r4, r7, lr}
 80031b6:	b085      	sub	sp, #20
 80031b8:	af00      	add	r7, sp, #0
 80031ba:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 80031bc:	230f      	movs	r3, #15
 80031be:	18fb      	adds	r3, r7, r3
 80031c0:	2200      	movs	r2, #0
 80031c2:	701a      	strb	r2, [r3, #0]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/ 
  if ((uint32_t)uwTickFreq != 0U)
 80031c4:	4b1d      	ldr	r3, [pc, #116]	; (800323c <HAL_InitTick+0x88>)
 80031c6:	781b      	ldrb	r3, [r3, #0]
 80031c8:	2b00      	cmp	r3, #0
 80031ca:	d02b      	beq.n	8003224 <HAL_InitTick+0x70>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U /(uint32_t)uwTickFreq)) == 0U)
 80031cc:	4b1c      	ldr	r3, [pc, #112]	; (8003240 <HAL_InitTick+0x8c>)
 80031ce:	681c      	ldr	r4, [r3, #0]
 80031d0:	4b1a      	ldr	r3, [pc, #104]	; (800323c <HAL_InitTick+0x88>)
 80031d2:	781b      	ldrb	r3, [r3, #0]
 80031d4:	0019      	movs	r1, r3
 80031d6:	23fa      	movs	r3, #250	; 0xfa
 80031d8:	0098      	lsls	r0, r3, #2
 80031da:	f7fc ffaf 	bl	800013c <__udivsi3>
 80031de:	0003      	movs	r3, r0
 80031e0:	0019      	movs	r1, r3
 80031e2:	0020      	movs	r0, r4
 80031e4:	f7fc ffaa 	bl	800013c <__udivsi3>
 80031e8:	0003      	movs	r3, r0
 80031ea:	0018      	movs	r0, r3
 80031ec:	f000 f985 	bl	80034fa <HAL_SYSTICK_Config>
 80031f0:	1e03      	subs	r3, r0, #0
 80031f2:	d112      	bne.n	800321a <HAL_InitTick+0x66>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80031f4:	687b      	ldr	r3, [r7, #4]
 80031f6:	2b03      	cmp	r3, #3
 80031f8:	d80a      	bhi.n	8003210 <HAL_InitTick+0x5c>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80031fa:	6879      	ldr	r1, [r7, #4]
 80031fc:	2301      	movs	r3, #1
 80031fe:	425b      	negs	r3, r3
 8003200:	2200      	movs	r2, #0
 8003202:	0018      	movs	r0, r3
 8003204:	f000 f950 	bl	80034a8 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8003208:	4b0e      	ldr	r3, [pc, #56]	; (8003244 <HAL_InitTick+0x90>)
 800320a:	687a      	ldr	r2, [r7, #4]
 800320c:	601a      	str	r2, [r3, #0]
 800320e:	e00d      	b.n	800322c <HAL_InitTick+0x78>
      }
      else
      {
        status = HAL_ERROR;
 8003210:	230f      	movs	r3, #15
 8003212:	18fb      	adds	r3, r7, r3
 8003214:	2201      	movs	r2, #1
 8003216:	701a      	strb	r2, [r3, #0]
 8003218:	e008      	b.n	800322c <HAL_InitTick+0x78>
      }
    }
    else
    {
      status = HAL_ERROR;
 800321a:	230f      	movs	r3, #15
 800321c:	18fb      	adds	r3, r7, r3
 800321e:	2201      	movs	r2, #1
 8003220:	701a      	strb	r2, [r3, #0]
 8003222:	e003      	b.n	800322c <HAL_InitTick+0x78>
    }
  }
  else
  {
    status = HAL_ERROR;
 8003224:	230f      	movs	r3, #15
 8003226:	18fb      	adds	r3, r7, r3
 8003228:	2201      	movs	r2, #1
 800322a:	701a      	strb	r2, [r3, #0]
  }

  /* Return function status */
  return status;
 800322c:	230f      	movs	r3, #15
 800322e:	18fb      	adds	r3, r7, r3
 8003230:	781b      	ldrb	r3, [r3, #0]
}
 8003232:	0018      	movs	r0, r3
 8003234:	46bd      	mov	sp, r7
 8003236:	b005      	add	sp, #20
 8003238:	bd90      	pop	{r4, r7, pc}
 800323a:	46c0      	nop			; (mov r8, r8)
 800323c:	2000000c 	.word	0x2000000c
 8003240:	20000004 	.word	0x20000004
 8003244:	20000008 	.word	0x20000008

08003248 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8003248:	b580      	push	{r7, lr}
 800324a:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 800324c:	4b05      	ldr	r3, [pc, #20]	; (8003264 <HAL_IncTick+0x1c>)
 800324e:	781b      	ldrb	r3, [r3, #0]
 8003250:	001a      	movs	r2, r3
 8003252:	4b05      	ldr	r3, [pc, #20]	; (8003268 <HAL_IncTick+0x20>)
 8003254:	681b      	ldr	r3, [r3, #0]
 8003256:	18d2      	adds	r2, r2, r3
 8003258:	4b03      	ldr	r3, [pc, #12]	; (8003268 <HAL_IncTick+0x20>)
 800325a:	601a      	str	r2, [r3, #0]
}
 800325c:	46c0      	nop			; (mov r8, r8)
 800325e:	46bd      	mov	sp, r7
 8003260:	bd80      	pop	{r7, pc}
 8003262:	46c0      	nop			; (mov r8, r8)
 8003264:	2000000c 	.word	0x2000000c
 8003268:	20000898 	.word	0x20000898

0800326c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800326c:	b580      	push	{r7, lr}
 800326e:	af00      	add	r7, sp, #0
  return uwTick;
 8003270:	4b02      	ldr	r3, [pc, #8]	; (800327c <HAL_GetTick+0x10>)
 8003272:	681b      	ldr	r3, [r3, #0]
}
 8003274:	0018      	movs	r0, r3
 8003276:	46bd      	mov	sp, r7
 8003278:	bd80      	pop	{r7, pc}
 800327a:	46c0      	nop			; (mov r8, r8)
 800327c:	20000898 	.word	0x20000898

08003280 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8003280:	b580      	push	{r7, lr}
 8003282:	b084      	sub	sp, #16
 8003284:	af00      	add	r7, sp, #0
 8003286:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8003288:	f7ff fff0 	bl	800326c <HAL_GetTick>
 800328c:	0003      	movs	r3, r0
 800328e:	60bb      	str	r3, [r7, #8]
  uint32_t wait = Delay;
 8003290:	687b      	ldr	r3, [r7, #4]
 8003292:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8003294:	68fb      	ldr	r3, [r7, #12]
 8003296:	3301      	adds	r3, #1
 8003298:	d005      	beq.n	80032a6 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800329a:	4b0a      	ldr	r3, [pc, #40]	; (80032c4 <HAL_Delay+0x44>)
 800329c:	781b      	ldrb	r3, [r3, #0]
 800329e:	001a      	movs	r2, r3
 80032a0:	68fb      	ldr	r3, [r7, #12]
 80032a2:	189b      	adds	r3, r3, r2
 80032a4:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80032a6:	46c0      	nop			; (mov r8, r8)
 80032a8:	f7ff ffe0 	bl	800326c <HAL_GetTick>
 80032ac:	0002      	movs	r2, r0
 80032ae:	68bb      	ldr	r3, [r7, #8]
 80032b0:	1ad3      	subs	r3, r2, r3
 80032b2:	68fa      	ldr	r2, [r7, #12]
 80032b4:	429a      	cmp	r2, r3
 80032b6:	d8f7      	bhi.n	80032a8 <HAL_Delay+0x28>
  {
  }
}
 80032b8:	46c0      	nop			; (mov r8, r8)
 80032ba:	46c0      	nop			; (mov r8, r8)
 80032bc:	46bd      	mov	sp, r7
 80032be:	b004      	add	sp, #16
 80032c0:	bd80      	pop	{r7, pc}
 80032c2:	46c0      	nop			; (mov r8, r8)
 80032c4:	2000000c 	.word	0x2000000c

080032c8 <HAL_SuspendTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval None
  */
__weak void HAL_SuspendTick(void)
{
 80032c8:	b580      	push	{r7, lr}
 80032ca:	af00      	add	r7, sp, #0
  /* Disable SysTick Interrupt */
  CLEAR_BIT(SysTick->CTRL,SysTick_CTRL_TICKINT_Msk);
 80032cc:	4b04      	ldr	r3, [pc, #16]	; (80032e0 <HAL_SuspendTick+0x18>)
 80032ce:	681a      	ldr	r2, [r3, #0]
 80032d0:	4b03      	ldr	r3, [pc, #12]	; (80032e0 <HAL_SuspendTick+0x18>)
 80032d2:	2102      	movs	r1, #2
 80032d4:	438a      	bics	r2, r1
 80032d6:	601a      	str	r2, [r3, #0]
}
 80032d8:	46c0      	nop			; (mov r8, r8)
 80032da:	46bd      	mov	sp, r7
 80032dc:	bd80      	pop	{r7, pc}
 80032de:	46c0      	nop			; (mov r8, r8)
 80032e0:	e000e010 	.word	0xe000e010

080032e4 <HAL_ResumeTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval None
  */
__weak void HAL_ResumeTick(void)
{
 80032e4:	b580      	push	{r7, lr}
 80032e6:	af00      	add	r7, sp, #0
  /* Enable SysTick Interrupt */
  SET_BIT(SysTick->CTRL, SysTick_CTRL_TICKINT_Msk);
 80032e8:	4b04      	ldr	r3, [pc, #16]	; (80032fc <HAL_ResumeTick+0x18>)
 80032ea:	681a      	ldr	r2, [r3, #0]
 80032ec:	4b03      	ldr	r3, [pc, #12]	; (80032fc <HAL_ResumeTick+0x18>)
 80032ee:	2102      	movs	r1, #2
 80032f0:	430a      	orrs	r2, r1
 80032f2:	601a      	str	r2, [r3, #0]
}
 80032f4:	46c0      	nop			; (mov r8, r8)
 80032f6:	46bd      	mov	sp, r7
 80032f8:	bd80      	pop	{r7, pc}
 80032fa:	46c0      	nop			; (mov r8, r8)
 80032fc:	e000e010 	.word	0xe000e010

08003300 <HAL_SYSCFG_StrobeDBattpinsConfig>:
  *         @arg @ref SYSCFG_UCPD1_STROBE
  *         @arg @ref SYSCFG_UCPD2_STROBE
  * @retval None
  */
void HAL_SYSCFG_StrobeDBattpinsConfig(uint32_t ConfigDeadBattery)
{
 8003300:	b580      	push	{r7, lr}
 8003302:	b082      	sub	sp, #8
 8003304:	af00      	add	r7, sp, #0
 8003306:	6078      	str	r0, [r7, #4]
  assert_param(IS_SYSCFG_DBATT_CONFIG(ConfigDeadBattery));

  /* Change strobe configuration of GPIO depending on UCPDx dead battery settings */
  MODIFY_REG(SYSCFG->CFGR1, (SYSCFG_CFGR1_UCPD1_STROBE | SYSCFG_CFGR1_UCPD2_STROBE), ConfigDeadBattery);
 8003308:	4b06      	ldr	r3, [pc, #24]	; (8003324 <HAL_SYSCFG_StrobeDBattpinsConfig+0x24>)
 800330a:	681b      	ldr	r3, [r3, #0]
 800330c:	4a06      	ldr	r2, [pc, #24]	; (8003328 <HAL_SYSCFG_StrobeDBattpinsConfig+0x28>)
 800330e:	4013      	ands	r3, r2
 8003310:	0019      	movs	r1, r3
 8003312:	4b04      	ldr	r3, [pc, #16]	; (8003324 <HAL_SYSCFG_StrobeDBattpinsConfig+0x24>)
 8003314:	687a      	ldr	r2, [r7, #4]
 8003316:	430a      	orrs	r2, r1
 8003318:	601a      	str	r2, [r3, #0]
}
 800331a:	46c0      	nop			; (mov r8, r8)
 800331c:	46bd      	mov	sp, r7
 800331e:	b002      	add	sp, #8
 8003320:	bd80      	pop	{r7, pc}
 8003322:	46c0      	nop			; (mov r8, r8)
 8003324:	40010000 	.word	0x40010000
 8003328:	fffff9ff 	.word	0xfffff9ff

0800332c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800332c:	b580      	push	{r7, lr}
 800332e:	b082      	sub	sp, #8
 8003330:	af00      	add	r7, sp, #0
 8003332:	0002      	movs	r2, r0
 8003334:	1dfb      	adds	r3, r7, #7
 8003336:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8003338:	1dfb      	adds	r3, r7, #7
 800333a:	781b      	ldrb	r3, [r3, #0]
 800333c:	2b7f      	cmp	r3, #127	; 0x7f
 800333e:	d809      	bhi.n	8003354 <__NVIC_EnableIRQ+0x28>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003340:	1dfb      	adds	r3, r7, #7
 8003342:	781b      	ldrb	r3, [r3, #0]
 8003344:	001a      	movs	r2, r3
 8003346:	231f      	movs	r3, #31
 8003348:	401a      	ands	r2, r3
 800334a:	4b04      	ldr	r3, [pc, #16]	; (800335c <__NVIC_EnableIRQ+0x30>)
 800334c:	2101      	movs	r1, #1
 800334e:	4091      	lsls	r1, r2
 8003350:	000a      	movs	r2, r1
 8003352:	601a      	str	r2, [r3, #0]
    __COMPILER_BARRIER();
  }
}
 8003354:	46c0      	nop			; (mov r8, r8)
 8003356:	46bd      	mov	sp, r7
 8003358:	b002      	add	sp, #8
 800335a:	bd80      	pop	{r7, pc}
 800335c:	e000e100 	.word	0xe000e100

08003360 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8003360:	b590      	push	{r4, r7, lr}
 8003362:	b083      	sub	sp, #12
 8003364:	af00      	add	r7, sp, #0
 8003366:	0002      	movs	r2, r0
 8003368:	6039      	str	r1, [r7, #0]
 800336a:	1dfb      	adds	r3, r7, #7
 800336c:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 800336e:	1dfb      	adds	r3, r7, #7
 8003370:	781b      	ldrb	r3, [r3, #0]
 8003372:	2b7f      	cmp	r3, #127	; 0x7f
 8003374:	d828      	bhi.n	80033c8 <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8003376:	4a2f      	ldr	r2, [pc, #188]	; (8003434 <__NVIC_SetPriority+0xd4>)
 8003378:	1dfb      	adds	r3, r7, #7
 800337a:	781b      	ldrb	r3, [r3, #0]
 800337c:	b25b      	sxtb	r3, r3
 800337e:	089b      	lsrs	r3, r3, #2
 8003380:	33c0      	adds	r3, #192	; 0xc0
 8003382:	009b      	lsls	r3, r3, #2
 8003384:	589b      	ldr	r3, [r3, r2]
 8003386:	1dfa      	adds	r2, r7, #7
 8003388:	7812      	ldrb	r2, [r2, #0]
 800338a:	0011      	movs	r1, r2
 800338c:	2203      	movs	r2, #3
 800338e:	400a      	ands	r2, r1
 8003390:	00d2      	lsls	r2, r2, #3
 8003392:	21ff      	movs	r1, #255	; 0xff
 8003394:	4091      	lsls	r1, r2
 8003396:	000a      	movs	r2, r1
 8003398:	43d2      	mvns	r2, r2
 800339a:	401a      	ands	r2, r3
 800339c:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 800339e:	683b      	ldr	r3, [r7, #0]
 80033a0:	019b      	lsls	r3, r3, #6
 80033a2:	22ff      	movs	r2, #255	; 0xff
 80033a4:	401a      	ands	r2, r3
 80033a6:	1dfb      	adds	r3, r7, #7
 80033a8:	781b      	ldrb	r3, [r3, #0]
 80033aa:	0018      	movs	r0, r3
 80033ac:	2303      	movs	r3, #3
 80033ae:	4003      	ands	r3, r0
 80033b0:	00db      	lsls	r3, r3, #3
 80033b2:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80033b4:	481f      	ldr	r0, [pc, #124]	; (8003434 <__NVIC_SetPriority+0xd4>)
 80033b6:	1dfb      	adds	r3, r7, #7
 80033b8:	781b      	ldrb	r3, [r3, #0]
 80033ba:	b25b      	sxtb	r3, r3
 80033bc:	089b      	lsrs	r3, r3, #2
 80033be:	430a      	orrs	r2, r1
 80033c0:	33c0      	adds	r3, #192	; 0xc0
 80033c2:	009b      	lsls	r3, r3, #2
 80033c4:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 80033c6:	e031      	b.n	800342c <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80033c8:	4a1b      	ldr	r2, [pc, #108]	; (8003438 <__NVIC_SetPriority+0xd8>)
 80033ca:	1dfb      	adds	r3, r7, #7
 80033cc:	781b      	ldrb	r3, [r3, #0]
 80033ce:	0019      	movs	r1, r3
 80033d0:	230f      	movs	r3, #15
 80033d2:	400b      	ands	r3, r1
 80033d4:	3b08      	subs	r3, #8
 80033d6:	089b      	lsrs	r3, r3, #2
 80033d8:	3306      	adds	r3, #6
 80033da:	009b      	lsls	r3, r3, #2
 80033dc:	18d3      	adds	r3, r2, r3
 80033de:	3304      	adds	r3, #4
 80033e0:	681b      	ldr	r3, [r3, #0]
 80033e2:	1dfa      	adds	r2, r7, #7
 80033e4:	7812      	ldrb	r2, [r2, #0]
 80033e6:	0011      	movs	r1, r2
 80033e8:	2203      	movs	r2, #3
 80033ea:	400a      	ands	r2, r1
 80033ec:	00d2      	lsls	r2, r2, #3
 80033ee:	21ff      	movs	r1, #255	; 0xff
 80033f0:	4091      	lsls	r1, r2
 80033f2:	000a      	movs	r2, r1
 80033f4:	43d2      	mvns	r2, r2
 80033f6:	401a      	ands	r2, r3
 80033f8:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 80033fa:	683b      	ldr	r3, [r7, #0]
 80033fc:	019b      	lsls	r3, r3, #6
 80033fe:	22ff      	movs	r2, #255	; 0xff
 8003400:	401a      	ands	r2, r3
 8003402:	1dfb      	adds	r3, r7, #7
 8003404:	781b      	ldrb	r3, [r3, #0]
 8003406:	0018      	movs	r0, r3
 8003408:	2303      	movs	r3, #3
 800340a:	4003      	ands	r3, r0
 800340c:	00db      	lsls	r3, r3, #3
 800340e:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8003410:	4809      	ldr	r0, [pc, #36]	; (8003438 <__NVIC_SetPriority+0xd8>)
 8003412:	1dfb      	adds	r3, r7, #7
 8003414:	781b      	ldrb	r3, [r3, #0]
 8003416:	001c      	movs	r4, r3
 8003418:	230f      	movs	r3, #15
 800341a:	4023      	ands	r3, r4
 800341c:	3b08      	subs	r3, #8
 800341e:	089b      	lsrs	r3, r3, #2
 8003420:	430a      	orrs	r2, r1
 8003422:	3306      	adds	r3, #6
 8003424:	009b      	lsls	r3, r3, #2
 8003426:	18c3      	adds	r3, r0, r3
 8003428:	3304      	adds	r3, #4
 800342a:	601a      	str	r2, [r3, #0]
}
 800342c:	46c0      	nop			; (mov r8, r8)
 800342e:	46bd      	mov	sp, r7
 8003430:	b003      	add	sp, #12
 8003432:	bd90      	pop	{r4, r7, pc}
 8003434:	e000e100 	.word	0xe000e100
 8003438:	e000ed00 	.word	0xe000ed00

0800343c <__NVIC_SystemReset>:
/**
  \brief   System Reset
  \details Initiates a system reset request to reset the MCU.
 */
__NO_RETURN __STATIC_INLINE void __NVIC_SystemReset(void)
{
 800343c:	b580      	push	{r7, lr}
 800343e:	af00      	add	r7, sp, #0
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8003440:	f3bf 8f4f 	dsb	sy
}
 8003444:	46c0      	nop			; (mov r8, r8)
  __DSB();                                                          /* Ensure all outstanding memory accesses included
                                                                       buffered write are completed before reset */
  SCB->AIRCR  = ((0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003446:	4b04      	ldr	r3, [pc, #16]	; (8003458 <__NVIC_SystemReset+0x1c>)
 8003448:	4a04      	ldr	r2, [pc, #16]	; (800345c <__NVIC_SystemReset+0x20>)
 800344a:	60da      	str	r2, [r3, #12]
  __ASM volatile ("dsb 0xF":::"memory");
 800344c:	f3bf 8f4f 	dsb	sy
}
 8003450:	46c0      	nop			; (mov r8, r8)
                 SCB_AIRCR_SYSRESETREQ_Msk);
  __DSB();                                                          /* Ensure completion of memory access */

  for(;;)                                                           /* wait until reset */
  {
    __NOP();
 8003452:	46c0      	nop			; (mov r8, r8)
 8003454:	e7fd      	b.n	8003452 <__NVIC_SystemReset+0x16>
 8003456:	46c0      	nop			; (mov r8, r8)
 8003458:	e000ed00 	.word	0xe000ed00
 800345c:	05fa0004 	.word	0x05fa0004

08003460 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8003460:	b580      	push	{r7, lr}
 8003462:	b082      	sub	sp, #8
 8003464:	af00      	add	r7, sp, #0
 8003466:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8003468:	687b      	ldr	r3, [r7, #4]
 800346a:	1e5a      	subs	r2, r3, #1
 800346c:	2380      	movs	r3, #128	; 0x80
 800346e:	045b      	lsls	r3, r3, #17
 8003470:	429a      	cmp	r2, r3
 8003472:	d301      	bcc.n	8003478 <SysTick_Config+0x18>
  {
    return (1UL);                                                   /* Reload value impossible */
 8003474:	2301      	movs	r3, #1
 8003476:	e010      	b.n	800349a <SysTick_Config+0x3a>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8003478:	4b0a      	ldr	r3, [pc, #40]	; (80034a4 <SysTick_Config+0x44>)
 800347a:	687a      	ldr	r2, [r7, #4]
 800347c:	3a01      	subs	r2, #1
 800347e:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8003480:	2301      	movs	r3, #1
 8003482:	425b      	negs	r3, r3
 8003484:	2103      	movs	r1, #3
 8003486:	0018      	movs	r0, r3
 8003488:	f7ff ff6a 	bl	8003360 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800348c:	4b05      	ldr	r3, [pc, #20]	; (80034a4 <SysTick_Config+0x44>)
 800348e:	2200      	movs	r2, #0
 8003490:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8003492:	4b04      	ldr	r3, [pc, #16]	; (80034a4 <SysTick_Config+0x44>)
 8003494:	2207      	movs	r2, #7
 8003496:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8003498:	2300      	movs	r3, #0
}
 800349a:	0018      	movs	r0, r3
 800349c:	46bd      	mov	sp, r7
 800349e:	b002      	add	sp, #8
 80034a0:	bd80      	pop	{r7, pc}
 80034a2:	46c0      	nop			; (mov r8, r8)
 80034a4:	e000e010 	.word	0xe000e010

080034a8 <HAL_NVIC_SetPriority>:
  *         with stm32g0xx devices, this parameter is a dummy value and it is ignored, because
  *         no subpriority supported in Cortex M0+ based products.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80034a8:	b580      	push	{r7, lr}
 80034aa:	b084      	sub	sp, #16
 80034ac:	af00      	add	r7, sp, #0
 80034ae:	60b9      	str	r1, [r7, #8]
 80034b0:	607a      	str	r2, [r7, #4]
 80034b2:	210f      	movs	r1, #15
 80034b4:	187b      	adds	r3, r7, r1
 80034b6:	1c02      	adds	r2, r0, #0
 80034b8:	701a      	strb	r2, [r3, #0]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(SubPriority);

  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn, PreemptPriority);
 80034ba:	68ba      	ldr	r2, [r7, #8]
 80034bc:	187b      	adds	r3, r7, r1
 80034be:	781b      	ldrb	r3, [r3, #0]
 80034c0:	b25b      	sxtb	r3, r3
 80034c2:	0011      	movs	r1, r2
 80034c4:	0018      	movs	r0, r3
 80034c6:	f7ff ff4b 	bl	8003360 <__NVIC_SetPriority>
}
 80034ca:	46c0      	nop			; (mov r8, r8)
 80034cc:	46bd      	mov	sp, r7
 80034ce:	b004      	add	sp, #16
 80034d0:	bd80      	pop	{r7, pc}

080034d2 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g0xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80034d2:	b580      	push	{r7, lr}
 80034d4:	b082      	sub	sp, #8
 80034d6:	af00      	add	r7, sp, #0
 80034d8:	0002      	movs	r2, r0
 80034da:	1dfb      	adds	r3, r7, #7
 80034dc:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80034de:	1dfb      	adds	r3, r7, #7
 80034e0:	781b      	ldrb	r3, [r3, #0]
 80034e2:	b25b      	sxtb	r3, r3
 80034e4:	0018      	movs	r0, r3
 80034e6:	f7ff ff21 	bl	800332c <__NVIC_EnableIRQ>
}
 80034ea:	46c0      	nop			; (mov r8, r8)
 80034ec:	46bd      	mov	sp, r7
 80034ee:	b002      	add	sp, #8
 80034f0:	bd80      	pop	{r7, pc}

080034f2 <HAL_NVIC_SystemReset>:
/**
  * @brief  Initiate a system reset request to reset the MCU.
  * @retval None
  */
void HAL_NVIC_SystemReset(void)
{
 80034f2:	b580      	push	{r7, lr}
 80034f4:	af00      	add	r7, sp, #0
  /* System Reset */
  NVIC_SystemReset();
 80034f6:	f7ff ffa1 	bl	800343c <__NVIC_SystemReset>

080034fa <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80034fa:	b580      	push	{r7, lr}
 80034fc:	b082      	sub	sp, #8
 80034fe:	af00      	add	r7, sp, #0
 8003500:	6078      	str	r0, [r7, #4]
  return SysTick_Config(TicksNumb);
 8003502:	687b      	ldr	r3, [r7, #4]
 8003504:	0018      	movs	r0, r3
 8003506:	f7ff ffab 	bl	8003460 <SysTick_Config>
 800350a:	0003      	movs	r3, r0
}
 800350c:	0018      	movs	r0, r3
 800350e:	46bd      	mov	sp, r7
 8003510:	b002      	add	sp, #8
 8003512:	bd80      	pop	{r7, pc}

08003514 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003514:	b580      	push	{r7, lr}
 8003516:	b086      	sub	sp, #24
 8003518:	af00      	add	r7, sp, #0
 800351a:	6078      	str	r0, [r7, #4]
 800351c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800351e:	2300      	movs	r3, #0
 8003520:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8003522:	e14d      	b.n	80037c0 <HAL_GPIO_Init+0x2ac>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8003524:	683b      	ldr	r3, [r7, #0]
 8003526:	681b      	ldr	r3, [r3, #0]
 8003528:	2101      	movs	r1, #1
 800352a:	697a      	ldr	r2, [r7, #20]
 800352c:	4091      	lsls	r1, r2
 800352e:	000a      	movs	r2, r1
 8003530:	4013      	ands	r3, r2
 8003532:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8003534:	68fb      	ldr	r3, [r7, #12]
 8003536:	2b00      	cmp	r3, #0
 8003538:	d100      	bne.n	800353c <HAL_GPIO_Init+0x28>
 800353a:	e13e      	b.n	80037ba <HAL_GPIO_Init+0x2a6>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 800353c:	683b      	ldr	r3, [r7, #0]
 800353e:	685b      	ldr	r3, [r3, #4]
 8003540:	2203      	movs	r2, #3
 8003542:	4013      	ands	r3, r2
 8003544:	2b01      	cmp	r3, #1
 8003546:	d005      	beq.n	8003554 <HAL_GPIO_Init+0x40>
 8003548:	683b      	ldr	r3, [r7, #0]
 800354a:	685b      	ldr	r3, [r3, #4]
 800354c:	2203      	movs	r2, #3
 800354e:	4013      	ands	r3, r2
 8003550:	2b02      	cmp	r3, #2
 8003552:	d130      	bne.n	80035b6 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8003554:	687b      	ldr	r3, [r7, #4]
 8003556:	689b      	ldr	r3, [r3, #8]
 8003558:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 800355a:	697b      	ldr	r3, [r7, #20]
 800355c:	005b      	lsls	r3, r3, #1
 800355e:	2203      	movs	r2, #3
 8003560:	409a      	lsls	r2, r3
 8003562:	0013      	movs	r3, r2
 8003564:	43da      	mvns	r2, r3
 8003566:	693b      	ldr	r3, [r7, #16]
 8003568:	4013      	ands	r3, r2
 800356a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 800356c:	683b      	ldr	r3, [r7, #0]
 800356e:	68da      	ldr	r2, [r3, #12]
 8003570:	697b      	ldr	r3, [r7, #20]
 8003572:	005b      	lsls	r3, r3, #1
 8003574:	409a      	lsls	r2, r3
 8003576:	0013      	movs	r3, r2
 8003578:	693a      	ldr	r2, [r7, #16]
 800357a:	4313      	orrs	r3, r2
 800357c:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 800357e:	687b      	ldr	r3, [r7, #4]
 8003580:	693a      	ldr	r2, [r7, #16]
 8003582:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8003584:	687b      	ldr	r3, [r7, #4]
 8003586:	685b      	ldr	r3, [r3, #4]
 8003588:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 800358a:	2201      	movs	r2, #1
 800358c:	697b      	ldr	r3, [r7, #20]
 800358e:	409a      	lsls	r2, r3
 8003590:	0013      	movs	r3, r2
 8003592:	43da      	mvns	r2, r3
 8003594:	693b      	ldr	r3, [r7, #16]
 8003596:	4013      	ands	r3, r2
 8003598:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800359a:	683b      	ldr	r3, [r7, #0]
 800359c:	685b      	ldr	r3, [r3, #4]
 800359e:	091b      	lsrs	r3, r3, #4
 80035a0:	2201      	movs	r2, #1
 80035a2:	401a      	ands	r2, r3
 80035a4:	697b      	ldr	r3, [r7, #20]
 80035a6:	409a      	lsls	r2, r3
 80035a8:	0013      	movs	r3, r2
 80035aa:	693a      	ldr	r2, [r7, #16]
 80035ac:	4313      	orrs	r3, r2
 80035ae:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80035b0:	687b      	ldr	r3, [r7, #4]
 80035b2:	693a      	ldr	r2, [r7, #16]
 80035b4:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80035b6:	683b      	ldr	r3, [r7, #0]
 80035b8:	685b      	ldr	r3, [r3, #4]
 80035ba:	2203      	movs	r2, #3
 80035bc:	4013      	ands	r3, r2
 80035be:	2b03      	cmp	r3, #3
 80035c0:	d017      	beq.n	80035f2 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80035c2:	687b      	ldr	r3, [r7, #4]
 80035c4:	68db      	ldr	r3, [r3, #12]
 80035c6:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 80035c8:	697b      	ldr	r3, [r7, #20]
 80035ca:	005b      	lsls	r3, r3, #1
 80035cc:	2203      	movs	r2, #3
 80035ce:	409a      	lsls	r2, r3
 80035d0:	0013      	movs	r3, r2
 80035d2:	43da      	mvns	r2, r3
 80035d4:	693b      	ldr	r3, [r7, #16]
 80035d6:	4013      	ands	r3, r2
 80035d8:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 80035da:	683b      	ldr	r3, [r7, #0]
 80035dc:	689a      	ldr	r2, [r3, #8]
 80035de:	697b      	ldr	r3, [r7, #20]
 80035e0:	005b      	lsls	r3, r3, #1
 80035e2:	409a      	lsls	r2, r3
 80035e4:	0013      	movs	r3, r2
 80035e6:	693a      	ldr	r2, [r7, #16]
 80035e8:	4313      	orrs	r3, r2
 80035ea:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 80035ec:	687b      	ldr	r3, [r7, #4]
 80035ee:	693a      	ldr	r2, [r7, #16]
 80035f0:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80035f2:	683b      	ldr	r3, [r7, #0]
 80035f4:	685b      	ldr	r3, [r3, #4]
 80035f6:	2203      	movs	r2, #3
 80035f8:	4013      	ands	r3, r2
 80035fa:	2b02      	cmp	r3, #2
 80035fc:	d123      	bne.n	8003646 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 80035fe:	697b      	ldr	r3, [r7, #20]
 8003600:	08da      	lsrs	r2, r3, #3
 8003602:	687b      	ldr	r3, [r7, #4]
 8003604:	3208      	adds	r2, #8
 8003606:	0092      	lsls	r2, r2, #2
 8003608:	58d3      	ldr	r3, [r2, r3]
 800360a:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 800360c:	697b      	ldr	r3, [r7, #20]
 800360e:	2207      	movs	r2, #7
 8003610:	4013      	ands	r3, r2
 8003612:	009b      	lsls	r3, r3, #2
 8003614:	220f      	movs	r2, #15
 8003616:	409a      	lsls	r2, r3
 8003618:	0013      	movs	r3, r2
 800361a:	43da      	mvns	r2, r3
 800361c:	693b      	ldr	r3, [r7, #16]
 800361e:	4013      	ands	r3, r2
 8003620:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8003622:	683b      	ldr	r3, [r7, #0]
 8003624:	691a      	ldr	r2, [r3, #16]
 8003626:	697b      	ldr	r3, [r7, #20]
 8003628:	2107      	movs	r1, #7
 800362a:	400b      	ands	r3, r1
 800362c:	009b      	lsls	r3, r3, #2
 800362e:	409a      	lsls	r2, r3
 8003630:	0013      	movs	r3, r2
 8003632:	693a      	ldr	r2, [r7, #16]
 8003634:	4313      	orrs	r3, r2
 8003636:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8003638:	697b      	ldr	r3, [r7, #20]
 800363a:	08da      	lsrs	r2, r3, #3
 800363c:	687b      	ldr	r3, [r7, #4]
 800363e:	3208      	adds	r2, #8
 8003640:	0092      	lsls	r2, r2, #2
 8003642:	6939      	ldr	r1, [r7, #16]
 8003644:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003646:	687b      	ldr	r3, [r7, #4]
 8003648:	681b      	ldr	r3, [r3, #0]
 800364a:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 800364c:	697b      	ldr	r3, [r7, #20]
 800364e:	005b      	lsls	r3, r3, #1
 8003650:	2203      	movs	r2, #3
 8003652:	409a      	lsls	r2, r3
 8003654:	0013      	movs	r3, r2
 8003656:	43da      	mvns	r2, r3
 8003658:	693b      	ldr	r3, [r7, #16]
 800365a:	4013      	ands	r3, r2
 800365c:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 800365e:	683b      	ldr	r3, [r7, #0]
 8003660:	685b      	ldr	r3, [r3, #4]
 8003662:	2203      	movs	r2, #3
 8003664:	401a      	ands	r2, r3
 8003666:	697b      	ldr	r3, [r7, #20]
 8003668:	005b      	lsls	r3, r3, #1
 800366a:	409a      	lsls	r2, r3
 800366c:	0013      	movs	r3, r2
 800366e:	693a      	ldr	r2, [r7, #16]
 8003670:	4313      	orrs	r3, r2
 8003672:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8003674:	687b      	ldr	r3, [r7, #4]
 8003676:	693a      	ldr	r2, [r7, #16]
 8003678:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 800367a:	683b      	ldr	r3, [r7, #0]
 800367c:	685a      	ldr	r2, [r3, #4]
 800367e:	23c0      	movs	r3, #192	; 0xc0
 8003680:	029b      	lsls	r3, r3, #10
 8003682:	4013      	ands	r3, r2
 8003684:	d100      	bne.n	8003688 <HAL_GPIO_Init+0x174>
 8003686:	e098      	b.n	80037ba <HAL_GPIO_Init+0x2a6>
      {
        temp = EXTI->EXTICR[position >> 2u];
 8003688:	4a53      	ldr	r2, [pc, #332]	; (80037d8 <HAL_GPIO_Init+0x2c4>)
 800368a:	697b      	ldr	r3, [r7, #20]
 800368c:	089b      	lsrs	r3, r3, #2
 800368e:	3318      	adds	r3, #24
 8003690:	009b      	lsls	r3, r3, #2
 8003692:	589b      	ldr	r3, [r3, r2]
 8003694:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (8u * (position & 0x03u)));
 8003696:	697b      	ldr	r3, [r7, #20]
 8003698:	2203      	movs	r2, #3
 800369a:	4013      	ands	r3, r2
 800369c:	00db      	lsls	r3, r3, #3
 800369e:	220f      	movs	r2, #15
 80036a0:	409a      	lsls	r2, r3
 80036a2:	0013      	movs	r3, r2
 80036a4:	43da      	mvns	r2, r3
 80036a6:	693b      	ldr	r3, [r7, #16]
 80036a8:	4013      	ands	r3, r2
 80036aa:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (8u * (position & 0x03u)));
 80036ac:	687a      	ldr	r2, [r7, #4]
 80036ae:	23a0      	movs	r3, #160	; 0xa0
 80036b0:	05db      	lsls	r3, r3, #23
 80036b2:	429a      	cmp	r2, r3
 80036b4:	d019      	beq.n	80036ea <HAL_GPIO_Init+0x1d6>
 80036b6:	687b      	ldr	r3, [r7, #4]
 80036b8:	4a48      	ldr	r2, [pc, #288]	; (80037dc <HAL_GPIO_Init+0x2c8>)
 80036ba:	4293      	cmp	r3, r2
 80036bc:	d013      	beq.n	80036e6 <HAL_GPIO_Init+0x1d2>
 80036be:	687b      	ldr	r3, [r7, #4]
 80036c0:	4a47      	ldr	r2, [pc, #284]	; (80037e0 <HAL_GPIO_Init+0x2cc>)
 80036c2:	4293      	cmp	r3, r2
 80036c4:	d00d      	beq.n	80036e2 <HAL_GPIO_Init+0x1ce>
 80036c6:	687b      	ldr	r3, [r7, #4]
 80036c8:	4a46      	ldr	r2, [pc, #280]	; (80037e4 <HAL_GPIO_Init+0x2d0>)
 80036ca:	4293      	cmp	r3, r2
 80036cc:	d007      	beq.n	80036de <HAL_GPIO_Init+0x1ca>
 80036ce:	687b      	ldr	r3, [r7, #4]
 80036d0:	4a45      	ldr	r2, [pc, #276]	; (80037e8 <HAL_GPIO_Init+0x2d4>)
 80036d2:	4293      	cmp	r3, r2
 80036d4:	d101      	bne.n	80036da <HAL_GPIO_Init+0x1c6>
 80036d6:	2304      	movs	r3, #4
 80036d8:	e008      	b.n	80036ec <HAL_GPIO_Init+0x1d8>
 80036da:	2305      	movs	r3, #5
 80036dc:	e006      	b.n	80036ec <HAL_GPIO_Init+0x1d8>
 80036de:	2303      	movs	r3, #3
 80036e0:	e004      	b.n	80036ec <HAL_GPIO_Init+0x1d8>
 80036e2:	2302      	movs	r3, #2
 80036e4:	e002      	b.n	80036ec <HAL_GPIO_Init+0x1d8>
 80036e6:	2301      	movs	r3, #1
 80036e8:	e000      	b.n	80036ec <HAL_GPIO_Init+0x1d8>
 80036ea:	2300      	movs	r3, #0
 80036ec:	697a      	ldr	r2, [r7, #20]
 80036ee:	2103      	movs	r1, #3
 80036f0:	400a      	ands	r2, r1
 80036f2:	00d2      	lsls	r2, r2, #3
 80036f4:	4093      	lsls	r3, r2
 80036f6:	693a      	ldr	r2, [r7, #16]
 80036f8:	4313      	orrs	r3, r2
 80036fa:	613b      	str	r3, [r7, #16]
        EXTI->EXTICR[position >> 2u] = temp;
 80036fc:	4936      	ldr	r1, [pc, #216]	; (80037d8 <HAL_GPIO_Init+0x2c4>)
 80036fe:	697b      	ldr	r3, [r7, #20]
 8003700:	089b      	lsrs	r3, r3, #2
 8003702:	3318      	adds	r3, #24
 8003704:	009b      	lsls	r3, r3, #2
 8003706:	693a      	ldr	r2, [r7, #16]
 8003708:	505a      	str	r2, [r3, r1]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 800370a:	4b33      	ldr	r3, [pc, #204]	; (80037d8 <HAL_GPIO_Init+0x2c4>)
 800370c:	681b      	ldr	r3, [r3, #0]
 800370e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003710:	68fb      	ldr	r3, [r7, #12]
 8003712:	43da      	mvns	r2, r3
 8003714:	693b      	ldr	r3, [r7, #16]
 8003716:	4013      	ands	r3, r2
 8003718:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 800371a:	683b      	ldr	r3, [r7, #0]
 800371c:	685a      	ldr	r2, [r3, #4]
 800371e:	2380      	movs	r3, #128	; 0x80
 8003720:	035b      	lsls	r3, r3, #13
 8003722:	4013      	ands	r3, r2
 8003724:	d003      	beq.n	800372e <HAL_GPIO_Init+0x21a>
        {
          temp |= iocurrent;
 8003726:	693a      	ldr	r2, [r7, #16]
 8003728:	68fb      	ldr	r3, [r7, #12]
 800372a:	4313      	orrs	r3, r2
 800372c:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 800372e:	4b2a      	ldr	r3, [pc, #168]	; (80037d8 <HAL_GPIO_Init+0x2c4>)
 8003730:	693a      	ldr	r2, [r7, #16]
 8003732:	601a      	str	r2, [r3, #0]

        temp = EXTI->FTSR1;
 8003734:	4b28      	ldr	r3, [pc, #160]	; (80037d8 <HAL_GPIO_Init+0x2c4>)
 8003736:	685b      	ldr	r3, [r3, #4]
 8003738:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800373a:	68fb      	ldr	r3, [r7, #12]
 800373c:	43da      	mvns	r2, r3
 800373e:	693b      	ldr	r3, [r7, #16]
 8003740:	4013      	ands	r3, r2
 8003742:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8003744:	683b      	ldr	r3, [r7, #0]
 8003746:	685a      	ldr	r2, [r3, #4]
 8003748:	2380      	movs	r3, #128	; 0x80
 800374a:	039b      	lsls	r3, r3, #14
 800374c:	4013      	ands	r3, r2
 800374e:	d003      	beq.n	8003758 <HAL_GPIO_Init+0x244>
        {
          temp |= iocurrent;
 8003750:	693a      	ldr	r2, [r7, #16]
 8003752:	68fb      	ldr	r3, [r7, #12]
 8003754:	4313      	orrs	r3, r2
 8003756:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8003758:	4b1f      	ldr	r3, [pc, #124]	; (80037d8 <HAL_GPIO_Init+0x2c4>)
 800375a:	693a      	ldr	r2, [r7, #16]
 800375c:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 800375e:	4a1e      	ldr	r2, [pc, #120]	; (80037d8 <HAL_GPIO_Init+0x2c4>)
 8003760:	2384      	movs	r3, #132	; 0x84
 8003762:	58d3      	ldr	r3, [r2, r3]
 8003764:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003766:	68fb      	ldr	r3, [r7, #12]
 8003768:	43da      	mvns	r2, r3
 800376a:	693b      	ldr	r3, [r7, #16]
 800376c:	4013      	ands	r3, r2
 800376e:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8003770:	683b      	ldr	r3, [r7, #0]
 8003772:	685a      	ldr	r2, [r3, #4]
 8003774:	2380      	movs	r3, #128	; 0x80
 8003776:	029b      	lsls	r3, r3, #10
 8003778:	4013      	ands	r3, r2
 800377a:	d003      	beq.n	8003784 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 800377c:	693a      	ldr	r2, [r7, #16]
 800377e:	68fb      	ldr	r3, [r7, #12]
 8003780:	4313      	orrs	r3, r2
 8003782:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8003784:	4914      	ldr	r1, [pc, #80]	; (80037d8 <HAL_GPIO_Init+0x2c4>)
 8003786:	2284      	movs	r2, #132	; 0x84
 8003788:	693b      	ldr	r3, [r7, #16]
 800378a:	508b      	str	r3, [r1, r2]

        temp = EXTI->IMR1;
 800378c:	4a12      	ldr	r2, [pc, #72]	; (80037d8 <HAL_GPIO_Init+0x2c4>)
 800378e:	2380      	movs	r3, #128	; 0x80
 8003790:	58d3      	ldr	r3, [r2, r3]
 8003792:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003794:	68fb      	ldr	r3, [r7, #12]
 8003796:	43da      	mvns	r2, r3
 8003798:	693b      	ldr	r3, [r7, #16]
 800379a:	4013      	ands	r3, r2
 800379c:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 800379e:	683b      	ldr	r3, [r7, #0]
 80037a0:	685a      	ldr	r2, [r3, #4]
 80037a2:	2380      	movs	r3, #128	; 0x80
 80037a4:	025b      	lsls	r3, r3, #9
 80037a6:	4013      	ands	r3, r2
 80037a8:	d003      	beq.n	80037b2 <HAL_GPIO_Init+0x29e>
        {
          temp |= iocurrent;
 80037aa:	693a      	ldr	r2, [r7, #16]
 80037ac:	68fb      	ldr	r3, [r7, #12]
 80037ae:	4313      	orrs	r3, r2
 80037b0:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 80037b2:	4909      	ldr	r1, [pc, #36]	; (80037d8 <HAL_GPIO_Init+0x2c4>)
 80037b4:	2280      	movs	r2, #128	; 0x80
 80037b6:	693b      	ldr	r3, [r7, #16]
 80037b8:	508b      	str	r3, [r1, r2]
      }
    }

    position++;
 80037ba:	697b      	ldr	r3, [r7, #20]
 80037bc:	3301      	adds	r3, #1
 80037be:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80037c0:	683b      	ldr	r3, [r7, #0]
 80037c2:	681a      	ldr	r2, [r3, #0]
 80037c4:	697b      	ldr	r3, [r7, #20]
 80037c6:	40da      	lsrs	r2, r3
 80037c8:	1e13      	subs	r3, r2, #0
 80037ca:	d000      	beq.n	80037ce <HAL_GPIO_Init+0x2ba>
 80037cc:	e6aa      	b.n	8003524 <HAL_GPIO_Init+0x10>
  }
}
 80037ce:	46c0      	nop			; (mov r8, r8)
 80037d0:	46c0      	nop			; (mov r8, r8)
 80037d2:	46bd      	mov	sp, r7
 80037d4:	b006      	add	sp, #24
 80037d6:	bd80      	pop	{r7, pc}
 80037d8:	40021800 	.word	0x40021800
 80037dc:	50000400 	.word	0x50000400
 80037e0:	50000800 	.word	0x50000800
 80037e4:	50000c00 	.word	0x50000c00
 80037e8:	50001000 	.word	0x50001000

080037ec <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 80037ec:	b580      	push	{r7, lr}
 80037ee:	b084      	sub	sp, #16
 80037f0:	af00      	add	r7, sp, #0
 80037f2:	6078      	str	r0, [r7, #4]
 80037f4:	000a      	movs	r2, r1
 80037f6:	1cbb      	adds	r3, r7, #2
 80037f8:	801a      	strh	r2, [r3, #0]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00u)
 80037fa:	687b      	ldr	r3, [r7, #4]
 80037fc:	691b      	ldr	r3, [r3, #16]
 80037fe:	1cba      	adds	r2, r7, #2
 8003800:	8812      	ldrh	r2, [r2, #0]
 8003802:	4013      	ands	r3, r2
 8003804:	d004      	beq.n	8003810 <HAL_GPIO_ReadPin+0x24>
  {
    bitstatus = GPIO_PIN_SET;
 8003806:	230f      	movs	r3, #15
 8003808:	18fb      	adds	r3, r7, r3
 800380a:	2201      	movs	r2, #1
 800380c:	701a      	strb	r2, [r3, #0]
 800380e:	e003      	b.n	8003818 <HAL_GPIO_ReadPin+0x2c>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8003810:	230f      	movs	r3, #15
 8003812:	18fb      	adds	r3, r7, r3
 8003814:	2200      	movs	r2, #0
 8003816:	701a      	strb	r2, [r3, #0]
  }
  return bitstatus;
 8003818:	230f      	movs	r3, #15
 800381a:	18fb      	adds	r3, r7, r3
 800381c:	781b      	ldrb	r3, [r3, #0]
}
 800381e:	0018      	movs	r0, r3
 8003820:	46bd      	mov	sp, r7
 8003822:	b004      	add	sp, #16
 8003824:	bd80      	pop	{r7, pc}

08003826 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003826:	b580      	push	{r7, lr}
 8003828:	b082      	sub	sp, #8
 800382a:	af00      	add	r7, sp, #0
 800382c:	6078      	str	r0, [r7, #4]
 800382e:	0008      	movs	r0, r1
 8003830:	0011      	movs	r1, r2
 8003832:	1cbb      	adds	r3, r7, #2
 8003834:	1c02      	adds	r2, r0, #0
 8003836:	801a      	strh	r2, [r3, #0]
 8003838:	1c7b      	adds	r3, r7, #1
 800383a:	1c0a      	adds	r2, r1, #0
 800383c:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 800383e:	1c7b      	adds	r3, r7, #1
 8003840:	781b      	ldrb	r3, [r3, #0]
 8003842:	2b00      	cmp	r3, #0
 8003844:	d004      	beq.n	8003850 <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8003846:	1cbb      	adds	r3, r7, #2
 8003848:	881a      	ldrh	r2, [r3, #0]
 800384a:	687b      	ldr	r3, [r7, #4]
 800384c:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 800384e:	e003      	b.n	8003858 <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8003850:	1cbb      	adds	r3, r7, #2
 8003852:	881a      	ldrh	r2, [r3, #0]
 8003854:	687b      	ldr	r3, [r7, #4]
 8003856:	629a      	str	r2, [r3, #40]	; 0x28
}
 8003858:	46c0      	nop			; (mov r8, r8)
 800385a:	46bd      	mov	sp, r7
 800385c:	b002      	add	sp, #8
 800385e:	bd80      	pop	{r7, pc}

08003860 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8003860:	b580      	push	{r7, lr}
 8003862:	b082      	sub	sp, #8
 8003864:	af00      	add	r7, sp, #0
 8003866:	0002      	movs	r2, r0
 8003868:	1dbb      	adds	r3, r7, #6
 800386a:	801a      	strh	r2, [r3, #0]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_RISING_IT(GPIO_Pin) != 0x00u)
 800386c:	4b10      	ldr	r3, [pc, #64]	; (80038b0 <HAL_GPIO_EXTI_IRQHandler+0x50>)
 800386e:	68db      	ldr	r3, [r3, #12]
 8003870:	1dba      	adds	r2, r7, #6
 8003872:	8812      	ldrh	r2, [r2, #0]
 8003874:	4013      	ands	r3, r2
 8003876:	d008      	beq.n	800388a <HAL_GPIO_EXTI_IRQHandler+0x2a>
  {
    __HAL_GPIO_EXTI_CLEAR_RISING_IT(GPIO_Pin);
 8003878:	4b0d      	ldr	r3, [pc, #52]	; (80038b0 <HAL_GPIO_EXTI_IRQHandler+0x50>)
 800387a:	1dba      	adds	r2, r7, #6
 800387c:	8812      	ldrh	r2, [r2, #0]
 800387e:	60da      	str	r2, [r3, #12]
    HAL_GPIO_EXTI_Rising_Callback(GPIO_Pin);
 8003880:	1dbb      	adds	r3, r7, #6
 8003882:	881b      	ldrh	r3, [r3, #0]
 8003884:	0018      	movs	r0, r3
 8003886:	f7ff fa0b 	bl	8002ca0 <HAL_GPIO_EXTI_Rising_Callback>
  }

  if (__HAL_GPIO_EXTI_GET_FALLING_IT(GPIO_Pin) != 0x00u)
 800388a:	4b09      	ldr	r3, [pc, #36]	; (80038b0 <HAL_GPIO_EXTI_IRQHandler+0x50>)
 800388c:	691b      	ldr	r3, [r3, #16]
 800388e:	1dba      	adds	r2, r7, #6
 8003890:	8812      	ldrh	r2, [r2, #0]
 8003892:	4013      	ands	r3, r2
 8003894:	d008      	beq.n	80038a8 <HAL_GPIO_EXTI_IRQHandler+0x48>
  {
    __HAL_GPIO_EXTI_CLEAR_FALLING_IT(GPIO_Pin);
 8003896:	4b06      	ldr	r3, [pc, #24]	; (80038b0 <HAL_GPIO_EXTI_IRQHandler+0x50>)
 8003898:	1dba      	adds	r2, r7, #6
 800389a:	8812      	ldrh	r2, [r2, #0]
 800389c:	611a      	str	r2, [r3, #16]
    HAL_GPIO_EXTI_Falling_Callback(GPIO_Pin);
 800389e:	1dbb      	adds	r3, r7, #6
 80038a0:	881b      	ldrh	r3, [r3, #0]
 80038a2:	0018      	movs	r0, r3
 80038a4:	f000 f806 	bl	80038b4 <HAL_GPIO_EXTI_Falling_Callback>
  }
}
 80038a8:	46c0      	nop			; (mov r8, r8)
 80038aa:	46bd      	mov	sp, r7
 80038ac:	b002      	add	sp, #8
 80038ae:	bd80      	pop	{r7, pc}
 80038b0:	40021800 	.word	0x40021800

080038b4 <HAL_GPIO_EXTI_Falling_Callback>:
  * @brief  EXTI line detection callback.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Falling_Callback(uint16_t GPIO_Pin)
{
 80038b4:	b580      	push	{r7, lr}
 80038b6:	b082      	sub	sp, #8
 80038b8:	af00      	add	r7, sp, #0
 80038ba:	0002      	movs	r2, r0
 80038bc:	1dbb      	adds	r3, r7, #6
 80038be:	801a      	strh	r2, [r3, #0]
  UNUSED(GPIO_Pin);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Falling_Callback could be implemented in the user file
   */
}
 80038c0:	46c0      	nop			; (mov r8, r8)
 80038c2:	46bd      	mov	sp, r7
 80038c4:	b002      	add	sp, #8
 80038c6:	bd80      	pop	{r7, pc}

080038c8 <HAL_PWR_EnterSTOPMode>:
  *            @arg @ref PWR_STOPENTRY_WFE  Enter Stop 0 or Stop 1 mode with WFE
  *                                         instruction.
  * @retval None
  */
void HAL_PWR_EnterSTOPMode(uint32_t Regulator, uint8_t STOPEntry)
{
 80038c8:	b580      	push	{r7, lr}
 80038ca:	b082      	sub	sp, #8
 80038cc:	af00      	add	r7, sp, #0
 80038ce:	6078      	str	r0, [r7, #4]
 80038d0:	000a      	movs	r2, r1
 80038d2:	1cfb      	adds	r3, r7, #3
 80038d4:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_PWR_REGULATOR(Regulator));
  assert_param(IS_PWR_STOP_ENTRY(STOPEntry));

  if (Regulator != PWR_MAINREGULATOR_ON)
 80038d6:	687b      	ldr	r3, [r7, #4]
 80038d8:	2b00      	cmp	r3, #0
 80038da:	d009      	beq.n	80038f0 <HAL_PWR_EnterSTOPMode+0x28>
  {
    /* Stop mode with Low-Power Regulator */
    MODIFY_REG(PWR->CR1, PWR_CR1_LPMS, PWR_LOWPOWERMODE_STOP1);
 80038dc:	4b14      	ldr	r3, [pc, #80]	; (8003930 <HAL_PWR_EnterSTOPMode+0x68>)
 80038de:	681b      	ldr	r3, [r3, #0]
 80038e0:	2207      	movs	r2, #7
 80038e2:	4393      	bics	r3, r2
 80038e4:	001a      	movs	r2, r3
 80038e6:	4b12      	ldr	r3, [pc, #72]	; (8003930 <HAL_PWR_EnterSTOPMode+0x68>)
 80038e8:	2101      	movs	r1, #1
 80038ea:	430a      	orrs	r2, r1
 80038ec:	601a      	str	r2, [r3, #0]
 80038ee:	e005      	b.n	80038fc <HAL_PWR_EnterSTOPMode+0x34>
  }
  else
  {
    /* Stop mode with Main Regulator */
    MODIFY_REG(PWR->CR1, PWR_CR1_LPMS, PWR_LOWPOWERMODE_STOP0);
 80038f0:	4b0f      	ldr	r3, [pc, #60]	; (8003930 <HAL_PWR_EnterSTOPMode+0x68>)
 80038f2:	681a      	ldr	r2, [r3, #0]
 80038f4:	4b0e      	ldr	r3, [pc, #56]	; (8003930 <HAL_PWR_EnterSTOPMode+0x68>)
 80038f6:	2107      	movs	r1, #7
 80038f8:	438a      	bics	r2, r1
 80038fa:	601a      	str	r2, [r3, #0]
  }

  /* Set SLEEPDEEP bit of Cortex System Control Register */
  SET_BIT(SCB->SCR, ((uint32_t)SCB_SCR_SLEEPDEEP_Msk));
 80038fc:	4b0d      	ldr	r3, [pc, #52]	; (8003934 <HAL_PWR_EnterSTOPMode+0x6c>)
 80038fe:	691a      	ldr	r2, [r3, #16]
 8003900:	4b0c      	ldr	r3, [pc, #48]	; (8003934 <HAL_PWR_EnterSTOPMode+0x6c>)
 8003902:	2104      	movs	r1, #4
 8003904:	430a      	orrs	r2, r1
 8003906:	611a      	str	r2, [r3, #16]

  /* Select Stop mode entry --------------------------------------------------*/
  if (STOPEntry == PWR_STOPENTRY_WFI)
 8003908:	1cfb      	adds	r3, r7, #3
 800390a:	781b      	ldrb	r3, [r3, #0]
 800390c:	2b01      	cmp	r3, #1
 800390e:	d101      	bne.n	8003914 <HAL_PWR_EnterSTOPMode+0x4c>
  {
    /* Request Wait For Interrupt */
    __WFI();
 8003910:	bf30      	wfi
 8003912:	e002      	b.n	800391a <HAL_PWR_EnterSTOPMode+0x52>
  }
  else
  {
    /* Request Wait For Event */
    __SEV();
 8003914:	bf40      	sev
    __WFE();
 8003916:	bf20      	wfe
    __WFE();
 8003918:	bf20      	wfe
  }

  /* Reset SLEEPDEEP bit of Cortex System Control Register */
  CLEAR_BIT(SCB->SCR, ((uint32_t)SCB_SCR_SLEEPDEEP_Msk));
 800391a:	4b06      	ldr	r3, [pc, #24]	; (8003934 <HAL_PWR_EnterSTOPMode+0x6c>)
 800391c:	691a      	ldr	r2, [r3, #16]
 800391e:	4b05      	ldr	r3, [pc, #20]	; (8003934 <HAL_PWR_EnterSTOPMode+0x6c>)
 8003920:	2104      	movs	r1, #4
 8003922:	438a      	bics	r2, r1
 8003924:	611a      	str	r2, [r3, #16]
}
 8003926:	46c0      	nop			; (mov r8, r8)
 8003928:	46bd      	mov	sp, r7
 800392a:	b002      	add	sp, #8
 800392c:	bd80      	pop	{r7, pc}
 800392e:	46c0      	nop			; (mov r8, r8)
 8003930:	40007000 	.word	0x40007000
 8003934:	e000ed00 	.word	0xe000ed00

08003938 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        6 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8003938:	b580      	push	{r7, lr}
 800393a:	b084      	sub	sp, #16
 800393c:	af00      	add	r7, sp, #0
 800393e:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  /* Modify voltage scaling range */
  MODIFY_REG(PWR->CR1, PWR_CR1_VOS, VoltageScaling);
 8003940:	4b19      	ldr	r3, [pc, #100]	; (80039a8 <HAL_PWREx_ControlVoltageScaling+0x70>)
 8003942:	681b      	ldr	r3, [r3, #0]
 8003944:	4a19      	ldr	r2, [pc, #100]	; (80039ac <HAL_PWREx_ControlVoltageScaling+0x74>)
 8003946:	4013      	ands	r3, r2
 8003948:	0019      	movs	r1, r3
 800394a:	4b17      	ldr	r3, [pc, #92]	; (80039a8 <HAL_PWREx_ControlVoltageScaling+0x70>)
 800394c:	687a      	ldr	r2, [r7, #4]
 800394e:	430a      	orrs	r2, r1
 8003950:	601a      	str	r2, [r3, #0]

  /* In case of Range 1 selected, we need to ensure that main regulator reaches new value */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8003952:	687a      	ldr	r2, [r7, #4]
 8003954:	2380      	movs	r3, #128	; 0x80
 8003956:	009b      	lsls	r3, r3, #2
 8003958:	429a      	cmp	r2, r3
 800395a:	d11f      	bne.n	800399c <HAL_PWREx_ControlVoltageScaling+0x64>
  {
    /* Set timeout value */
    wait_loop_index = ((PWR_VOSF_SETTING_DELAY_6_US * SystemCoreClock) / 1000000U) + 1U;
 800395c:	4b14      	ldr	r3, [pc, #80]	; (80039b0 <HAL_PWREx_ControlVoltageScaling+0x78>)
 800395e:	681a      	ldr	r2, [r3, #0]
 8003960:	0013      	movs	r3, r2
 8003962:	005b      	lsls	r3, r3, #1
 8003964:	189b      	adds	r3, r3, r2
 8003966:	005b      	lsls	r3, r3, #1
 8003968:	4912      	ldr	r1, [pc, #72]	; (80039b4 <HAL_PWREx_ControlVoltageScaling+0x7c>)
 800396a:	0018      	movs	r0, r3
 800396c:	f7fc fbe6 	bl	800013c <__udivsi3>
 8003970:	0003      	movs	r3, r0
 8003972:	3301      	adds	r3, #1
 8003974:	60fb      	str	r3, [r7, #12]

    /* Wait until VOSF is reset */
    while (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8003976:	e008      	b.n	800398a <HAL_PWREx_ControlVoltageScaling+0x52>
    {
      if (wait_loop_index != 0U)
 8003978:	68fb      	ldr	r3, [r7, #12]
 800397a:	2b00      	cmp	r3, #0
 800397c:	d003      	beq.n	8003986 <HAL_PWREx_ControlVoltageScaling+0x4e>
      {
        wait_loop_index--;
 800397e:	68fb      	ldr	r3, [r7, #12]
 8003980:	3b01      	subs	r3, #1
 8003982:	60fb      	str	r3, [r7, #12]
 8003984:	e001      	b.n	800398a <HAL_PWREx_ControlVoltageScaling+0x52>
      }
      else
      {
        return HAL_TIMEOUT;
 8003986:	2303      	movs	r3, #3
 8003988:	e009      	b.n	800399e <HAL_PWREx_ControlVoltageScaling+0x66>
    while (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 800398a:	4b07      	ldr	r3, [pc, #28]	; (80039a8 <HAL_PWREx_ControlVoltageScaling+0x70>)
 800398c:	695a      	ldr	r2, [r3, #20]
 800398e:	2380      	movs	r3, #128	; 0x80
 8003990:	00db      	lsls	r3, r3, #3
 8003992:	401a      	ands	r2, r3
 8003994:	2380      	movs	r3, #128	; 0x80
 8003996:	00db      	lsls	r3, r3, #3
 8003998:	429a      	cmp	r2, r3
 800399a:	d0ed      	beq.n	8003978 <HAL_PWREx_ControlVoltageScaling+0x40>
      }
    }
  }

  return HAL_OK;
 800399c:	2300      	movs	r3, #0
}
 800399e:	0018      	movs	r0, r3
 80039a0:	46bd      	mov	sp, r7
 80039a2:	b004      	add	sp, #16
 80039a4:	bd80      	pop	{r7, pc}
 80039a6:	46c0      	nop			; (mov r8, r8)
 80039a8:	40007000 	.word	0x40007000
 80039ac:	fffff9ff 	.word	0xfffff9ff
 80039b0:	20000004 	.word	0x20000004
 80039b4:	000f4240 	.word	0x000f4240

080039b8 <LL_RCC_GetAPB1Prescaler>:
  *         @arg @ref LL_RCC_APB1_DIV_4
  *         @arg @ref LL_RCC_APB1_DIV_8
  *         @arg @ref LL_RCC_APB1_DIV_16
  */
__STATIC_INLINE uint32_t LL_RCC_GetAPB1Prescaler(void)
{
 80039b8:	b580      	push	{r7, lr}
 80039ba:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE));
 80039bc:	4b03      	ldr	r3, [pc, #12]	; (80039cc <LL_RCC_GetAPB1Prescaler+0x14>)
 80039be:	689a      	ldr	r2, [r3, #8]
 80039c0:	23e0      	movs	r3, #224	; 0xe0
 80039c2:	01db      	lsls	r3, r3, #7
 80039c4:	4013      	ands	r3, r2
}
 80039c6:	0018      	movs	r0, r3
 80039c8:	46bd      	mov	sp, r7
 80039ca:	bd80      	pop	{r7, pc}
 80039cc:	40021000 	.word	0x40021000

080039d0 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to LSE Off
  *         first and then to LSE On or LSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80039d0:	b580      	push	{r7, lr}
 80039d2:	b088      	sub	sp, #32
 80039d4:	af00      	add	r7, sp, #0
 80039d6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80039d8:	687b      	ldr	r3, [r7, #4]
 80039da:	2b00      	cmp	r3, #0
 80039dc:	d102      	bne.n	80039e4 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 80039de:	2301      	movs	r3, #1
 80039e0:	f000 fb50 	bl	8004084 <HAL_RCC_OscConfig+0x6b4>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80039e4:	687b      	ldr	r3, [r7, #4]
 80039e6:	681b      	ldr	r3, [r3, #0]
 80039e8:	2201      	movs	r2, #1
 80039ea:	4013      	ands	r3, r2
 80039ec:	d100      	bne.n	80039f0 <HAL_RCC_OscConfig+0x20>
 80039ee:	e07c      	b.n	8003aea <HAL_RCC_OscConfig+0x11a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80039f0:	4bc3      	ldr	r3, [pc, #780]	; (8003d00 <HAL_RCC_OscConfig+0x330>)
 80039f2:	689b      	ldr	r3, [r3, #8]
 80039f4:	2238      	movs	r2, #56	; 0x38
 80039f6:	4013      	ands	r3, r2
 80039f8:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 80039fa:	4bc1      	ldr	r3, [pc, #772]	; (8003d00 <HAL_RCC_OscConfig+0x330>)
 80039fc:	68db      	ldr	r3, [r3, #12]
 80039fe:	2203      	movs	r2, #3
 8003a00:	4013      	ands	r3, r2
 8003a02:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckcfg == RCC_PLLSOURCE_HSE))
 8003a04:	69bb      	ldr	r3, [r7, #24]
 8003a06:	2b10      	cmp	r3, #16
 8003a08:	d102      	bne.n	8003a10 <HAL_RCC_OscConfig+0x40>
 8003a0a:	697b      	ldr	r3, [r7, #20]
 8003a0c:	2b03      	cmp	r3, #3
 8003a0e:	d002      	beq.n	8003a16 <HAL_RCC_OscConfig+0x46>
        || (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSE))
 8003a10:	69bb      	ldr	r3, [r7, #24]
 8003a12:	2b08      	cmp	r3, #8
 8003a14:	d10b      	bne.n	8003a2e <HAL_RCC_OscConfig+0x5e>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003a16:	4bba      	ldr	r3, [pc, #744]	; (8003d00 <HAL_RCC_OscConfig+0x330>)
 8003a18:	681a      	ldr	r2, [r3, #0]
 8003a1a:	2380      	movs	r3, #128	; 0x80
 8003a1c:	029b      	lsls	r3, r3, #10
 8003a1e:	4013      	ands	r3, r2
 8003a20:	d062      	beq.n	8003ae8 <HAL_RCC_OscConfig+0x118>
 8003a22:	687b      	ldr	r3, [r7, #4]
 8003a24:	685b      	ldr	r3, [r3, #4]
 8003a26:	2b00      	cmp	r3, #0
 8003a28:	d15e      	bne.n	8003ae8 <HAL_RCC_OscConfig+0x118>
      {
        return HAL_ERROR;
 8003a2a:	2301      	movs	r3, #1
 8003a2c:	e32a      	b.n	8004084 <HAL_RCC_OscConfig+0x6b4>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003a2e:	687b      	ldr	r3, [r7, #4]
 8003a30:	685a      	ldr	r2, [r3, #4]
 8003a32:	2380      	movs	r3, #128	; 0x80
 8003a34:	025b      	lsls	r3, r3, #9
 8003a36:	429a      	cmp	r2, r3
 8003a38:	d107      	bne.n	8003a4a <HAL_RCC_OscConfig+0x7a>
 8003a3a:	4bb1      	ldr	r3, [pc, #708]	; (8003d00 <HAL_RCC_OscConfig+0x330>)
 8003a3c:	681a      	ldr	r2, [r3, #0]
 8003a3e:	4bb0      	ldr	r3, [pc, #704]	; (8003d00 <HAL_RCC_OscConfig+0x330>)
 8003a40:	2180      	movs	r1, #128	; 0x80
 8003a42:	0249      	lsls	r1, r1, #9
 8003a44:	430a      	orrs	r2, r1
 8003a46:	601a      	str	r2, [r3, #0]
 8003a48:	e020      	b.n	8003a8c <HAL_RCC_OscConfig+0xbc>
 8003a4a:	687b      	ldr	r3, [r7, #4]
 8003a4c:	685a      	ldr	r2, [r3, #4]
 8003a4e:	23a0      	movs	r3, #160	; 0xa0
 8003a50:	02db      	lsls	r3, r3, #11
 8003a52:	429a      	cmp	r2, r3
 8003a54:	d10e      	bne.n	8003a74 <HAL_RCC_OscConfig+0xa4>
 8003a56:	4baa      	ldr	r3, [pc, #680]	; (8003d00 <HAL_RCC_OscConfig+0x330>)
 8003a58:	681a      	ldr	r2, [r3, #0]
 8003a5a:	4ba9      	ldr	r3, [pc, #676]	; (8003d00 <HAL_RCC_OscConfig+0x330>)
 8003a5c:	2180      	movs	r1, #128	; 0x80
 8003a5e:	02c9      	lsls	r1, r1, #11
 8003a60:	430a      	orrs	r2, r1
 8003a62:	601a      	str	r2, [r3, #0]
 8003a64:	4ba6      	ldr	r3, [pc, #664]	; (8003d00 <HAL_RCC_OscConfig+0x330>)
 8003a66:	681a      	ldr	r2, [r3, #0]
 8003a68:	4ba5      	ldr	r3, [pc, #660]	; (8003d00 <HAL_RCC_OscConfig+0x330>)
 8003a6a:	2180      	movs	r1, #128	; 0x80
 8003a6c:	0249      	lsls	r1, r1, #9
 8003a6e:	430a      	orrs	r2, r1
 8003a70:	601a      	str	r2, [r3, #0]
 8003a72:	e00b      	b.n	8003a8c <HAL_RCC_OscConfig+0xbc>
 8003a74:	4ba2      	ldr	r3, [pc, #648]	; (8003d00 <HAL_RCC_OscConfig+0x330>)
 8003a76:	681a      	ldr	r2, [r3, #0]
 8003a78:	4ba1      	ldr	r3, [pc, #644]	; (8003d00 <HAL_RCC_OscConfig+0x330>)
 8003a7a:	49a2      	ldr	r1, [pc, #648]	; (8003d04 <HAL_RCC_OscConfig+0x334>)
 8003a7c:	400a      	ands	r2, r1
 8003a7e:	601a      	str	r2, [r3, #0]
 8003a80:	4b9f      	ldr	r3, [pc, #636]	; (8003d00 <HAL_RCC_OscConfig+0x330>)
 8003a82:	681a      	ldr	r2, [r3, #0]
 8003a84:	4b9e      	ldr	r3, [pc, #632]	; (8003d00 <HAL_RCC_OscConfig+0x330>)
 8003a86:	49a0      	ldr	r1, [pc, #640]	; (8003d08 <HAL_RCC_OscConfig+0x338>)
 8003a88:	400a      	ands	r2, r1
 8003a8a:	601a      	str	r2, [r3, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8003a8c:	687b      	ldr	r3, [r7, #4]
 8003a8e:	685b      	ldr	r3, [r3, #4]
 8003a90:	2b00      	cmp	r3, #0
 8003a92:	d014      	beq.n	8003abe <HAL_RCC_OscConfig+0xee>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003a94:	f7ff fbea 	bl	800326c <HAL_GetTick>
 8003a98:	0003      	movs	r3, r0
 8003a9a:	613b      	str	r3, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003a9c:	e008      	b.n	8003ab0 <HAL_RCC_OscConfig+0xe0>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003a9e:	f7ff fbe5 	bl	800326c <HAL_GetTick>
 8003aa2:	0002      	movs	r2, r0
 8003aa4:	693b      	ldr	r3, [r7, #16]
 8003aa6:	1ad3      	subs	r3, r2, r3
 8003aa8:	2b64      	cmp	r3, #100	; 0x64
 8003aaa:	d901      	bls.n	8003ab0 <HAL_RCC_OscConfig+0xe0>
          {
            return HAL_TIMEOUT;
 8003aac:	2303      	movs	r3, #3
 8003aae:	e2e9      	b.n	8004084 <HAL_RCC_OscConfig+0x6b4>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003ab0:	4b93      	ldr	r3, [pc, #588]	; (8003d00 <HAL_RCC_OscConfig+0x330>)
 8003ab2:	681a      	ldr	r2, [r3, #0]
 8003ab4:	2380      	movs	r3, #128	; 0x80
 8003ab6:	029b      	lsls	r3, r3, #10
 8003ab8:	4013      	ands	r3, r2
 8003aba:	d0f0      	beq.n	8003a9e <HAL_RCC_OscConfig+0xce>
 8003abc:	e015      	b.n	8003aea <HAL_RCC_OscConfig+0x11a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003abe:	f7ff fbd5 	bl	800326c <HAL_GetTick>
 8003ac2:	0003      	movs	r3, r0
 8003ac4:	613b      	str	r3, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8003ac6:	e008      	b.n	8003ada <HAL_RCC_OscConfig+0x10a>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003ac8:	f7ff fbd0 	bl	800326c <HAL_GetTick>
 8003acc:	0002      	movs	r2, r0
 8003ace:	693b      	ldr	r3, [r7, #16]
 8003ad0:	1ad3      	subs	r3, r2, r3
 8003ad2:	2b64      	cmp	r3, #100	; 0x64
 8003ad4:	d901      	bls.n	8003ada <HAL_RCC_OscConfig+0x10a>
          {
            return HAL_TIMEOUT;
 8003ad6:	2303      	movs	r3, #3
 8003ad8:	e2d4      	b.n	8004084 <HAL_RCC_OscConfig+0x6b4>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8003ada:	4b89      	ldr	r3, [pc, #548]	; (8003d00 <HAL_RCC_OscConfig+0x330>)
 8003adc:	681a      	ldr	r2, [r3, #0]
 8003ade:	2380      	movs	r3, #128	; 0x80
 8003ae0:	029b      	lsls	r3, r3, #10
 8003ae2:	4013      	ands	r3, r2
 8003ae4:	d1f0      	bne.n	8003ac8 <HAL_RCC_OscConfig+0xf8>
 8003ae6:	e000      	b.n	8003aea <HAL_RCC_OscConfig+0x11a>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003ae8:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003aea:	687b      	ldr	r3, [r7, #4]
 8003aec:	681b      	ldr	r3, [r3, #0]
 8003aee:	2202      	movs	r2, #2
 8003af0:	4013      	ands	r3, r2
 8003af2:	d100      	bne.n	8003af6 <HAL_RCC_OscConfig+0x126>
 8003af4:	e099      	b.n	8003c2a <HAL_RCC_OscConfig+0x25a>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    assert_param(IS_RCC_HSIDIV(RCC_OscInitStruct->HSIDiv));

    /* Check if HSI16 is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003af6:	4b82      	ldr	r3, [pc, #520]	; (8003d00 <HAL_RCC_OscConfig+0x330>)
 8003af8:	689b      	ldr	r3, [r3, #8]
 8003afa:	2238      	movs	r2, #56	; 0x38
 8003afc:	4013      	ands	r3, r2
 8003afe:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8003b00:	4b7f      	ldr	r3, [pc, #508]	; (8003d00 <HAL_RCC_OscConfig+0x330>)
 8003b02:	68db      	ldr	r3, [r3, #12]
 8003b04:	2203      	movs	r2, #3
 8003b06:	4013      	ands	r3, r2
 8003b08:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckcfg == RCC_PLLSOURCE_HSI))
 8003b0a:	69bb      	ldr	r3, [r7, #24]
 8003b0c:	2b10      	cmp	r3, #16
 8003b0e:	d102      	bne.n	8003b16 <HAL_RCC_OscConfig+0x146>
 8003b10:	697b      	ldr	r3, [r7, #20]
 8003b12:	2b02      	cmp	r3, #2
 8003b14:	d002      	beq.n	8003b1c <HAL_RCC_OscConfig+0x14c>
        || (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI))
 8003b16:	69bb      	ldr	r3, [r7, #24]
 8003b18:	2b00      	cmp	r3, #0
 8003b1a:	d135      	bne.n	8003b88 <HAL_RCC_OscConfig+0x1b8>
    {
      /* When HSI is used as system clock or as PLL input clock it can not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003b1c:	4b78      	ldr	r3, [pc, #480]	; (8003d00 <HAL_RCC_OscConfig+0x330>)
 8003b1e:	681a      	ldr	r2, [r3, #0]
 8003b20:	2380      	movs	r3, #128	; 0x80
 8003b22:	00db      	lsls	r3, r3, #3
 8003b24:	4013      	ands	r3, r2
 8003b26:	d005      	beq.n	8003b34 <HAL_RCC_OscConfig+0x164>
 8003b28:	687b      	ldr	r3, [r7, #4]
 8003b2a:	68db      	ldr	r3, [r3, #12]
 8003b2c:	2b00      	cmp	r3, #0
 8003b2e:	d101      	bne.n	8003b34 <HAL_RCC_OscConfig+0x164>
      {
        return HAL_ERROR;
 8003b30:	2301      	movs	r3, #1
 8003b32:	e2a7      	b.n	8004084 <HAL_RCC_OscConfig+0x6b4>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003b34:	4b72      	ldr	r3, [pc, #456]	; (8003d00 <HAL_RCC_OscConfig+0x330>)
 8003b36:	685b      	ldr	r3, [r3, #4]
 8003b38:	4a74      	ldr	r2, [pc, #464]	; (8003d0c <HAL_RCC_OscConfig+0x33c>)
 8003b3a:	4013      	ands	r3, r2
 8003b3c:	0019      	movs	r1, r3
 8003b3e:	687b      	ldr	r3, [r7, #4]
 8003b40:	695b      	ldr	r3, [r3, #20]
 8003b42:	021a      	lsls	r2, r3, #8
 8003b44:	4b6e      	ldr	r3, [pc, #440]	; (8003d00 <HAL_RCC_OscConfig+0x330>)
 8003b46:	430a      	orrs	r2, r1
 8003b48:	605a      	str	r2, [r3, #4]

        if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI)
 8003b4a:	69bb      	ldr	r3, [r7, #24]
 8003b4c:	2b00      	cmp	r3, #0
 8003b4e:	d112      	bne.n	8003b76 <HAL_RCC_OscConfig+0x1a6>
        {
          /* Adjust the HSI16 division factor */
          __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 8003b50:	4b6b      	ldr	r3, [pc, #428]	; (8003d00 <HAL_RCC_OscConfig+0x330>)
 8003b52:	681b      	ldr	r3, [r3, #0]
 8003b54:	4a6e      	ldr	r2, [pc, #440]	; (8003d10 <HAL_RCC_OscConfig+0x340>)
 8003b56:	4013      	ands	r3, r2
 8003b58:	0019      	movs	r1, r3
 8003b5a:	687b      	ldr	r3, [r7, #4]
 8003b5c:	691a      	ldr	r2, [r3, #16]
 8003b5e:	4b68      	ldr	r3, [pc, #416]	; (8003d00 <HAL_RCC_OscConfig+0x330>)
 8003b60:	430a      	orrs	r2, r1
 8003b62:	601a      	str	r2, [r3, #0]

          /* Update the SystemCoreClock global variable with HSISYS value  */
          SystemCoreClock = (HSI_VALUE / (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos)));
 8003b64:	4b66      	ldr	r3, [pc, #408]	; (8003d00 <HAL_RCC_OscConfig+0x330>)
 8003b66:	681b      	ldr	r3, [r3, #0]
 8003b68:	0adb      	lsrs	r3, r3, #11
 8003b6a:	2207      	movs	r2, #7
 8003b6c:	4013      	ands	r3, r2
 8003b6e:	4a69      	ldr	r2, [pc, #420]	; (8003d14 <HAL_RCC_OscConfig+0x344>)
 8003b70:	40da      	lsrs	r2, r3
 8003b72:	4b69      	ldr	r3, [pc, #420]	; (8003d18 <HAL_RCC_OscConfig+0x348>)
 8003b74:	601a      	str	r2, [r3, #0]
        }

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8003b76:	4b69      	ldr	r3, [pc, #420]	; (8003d1c <HAL_RCC_OscConfig+0x34c>)
 8003b78:	681b      	ldr	r3, [r3, #0]
 8003b7a:	0018      	movs	r0, r3
 8003b7c:	f7ff fb1a 	bl	80031b4 <HAL_InitTick>
 8003b80:	1e03      	subs	r3, r0, #0
 8003b82:	d051      	beq.n	8003c28 <HAL_RCC_OscConfig+0x258>
        {
          return HAL_ERROR;
 8003b84:	2301      	movs	r3, #1
 8003b86:	e27d      	b.n	8004084 <HAL_RCC_OscConfig+0x6b4>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8003b88:	687b      	ldr	r3, [r7, #4]
 8003b8a:	68db      	ldr	r3, [r3, #12]
 8003b8c:	2b00      	cmp	r3, #0
 8003b8e:	d030      	beq.n	8003bf2 <HAL_RCC_OscConfig+0x222>
      {
        /* Configure the HSI16 division factor */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 8003b90:	4b5b      	ldr	r3, [pc, #364]	; (8003d00 <HAL_RCC_OscConfig+0x330>)
 8003b92:	681b      	ldr	r3, [r3, #0]
 8003b94:	4a5e      	ldr	r2, [pc, #376]	; (8003d10 <HAL_RCC_OscConfig+0x340>)
 8003b96:	4013      	ands	r3, r2
 8003b98:	0019      	movs	r1, r3
 8003b9a:	687b      	ldr	r3, [r7, #4]
 8003b9c:	691a      	ldr	r2, [r3, #16]
 8003b9e:	4b58      	ldr	r3, [pc, #352]	; (8003d00 <HAL_RCC_OscConfig+0x330>)
 8003ba0:	430a      	orrs	r2, r1
 8003ba2:	601a      	str	r2, [r3, #0]

        /* Enable the Internal High Speed oscillator (HSI16). */
        __HAL_RCC_HSI_ENABLE();
 8003ba4:	4b56      	ldr	r3, [pc, #344]	; (8003d00 <HAL_RCC_OscConfig+0x330>)
 8003ba6:	681a      	ldr	r2, [r3, #0]
 8003ba8:	4b55      	ldr	r3, [pc, #340]	; (8003d00 <HAL_RCC_OscConfig+0x330>)
 8003baa:	2180      	movs	r1, #128	; 0x80
 8003bac:	0049      	lsls	r1, r1, #1
 8003bae:	430a      	orrs	r2, r1
 8003bb0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003bb2:	f7ff fb5b 	bl	800326c <HAL_GetTick>
 8003bb6:	0003      	movs	r3, r0
 8003bb8:	613b      	str	r3, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003bba:	e008      	b.n	8003bce <HAL_RCC_OscConfig+0x1fe>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003bbc:	f7ff fb56 	bl	800326c <HAL_GetTick>
 8003bc0:	0002      	movs	r2, r0
 8003bc2:	693b      	ldr	r3, [r7, #16]
 8003bc4:	1ad3      	subs	r3, r2, r3
 8003bc6:	2b02      	cmp	r3, #2
 8003bc8:	d901      	bls.n	8003bce <HAL_RCC_OscConfig+0x1fe>
          {
            return HAL_TIMEOUT;
 8003bca:	2303      	movs	r3, #3
 8003bcc:	e25a      	b.n	8004084 <HAL_RCC_OscConfig+0x6b4>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003bce:	4b4c      	ldr	r3, [pc, #304]	; (8003d00 <HAL_RCC_OscConfig+0x330>)
 8003bd0:	681a      	ldr	r2, [r3, #0]
 8003bd2:	2380      	movs	r3, #128	; 0x80
 8003bd4:	00db      	lsls	r3, r3, #3
 8003bd6:	4013      	ands	r3, r2
 8003bd8:	d0f0      	beq.n	8003bbc <HAL_RCC_OscConfig+0x1ec>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003bda:	4b49      	ldr	r3, [pc, #292]	; (8003d00 <HAL_RCC_OscConfig+0x330>)
 8003bdc:	685b      	ldr	r3, [r3, #4]
 8003bde:	4a4b      	ldr	r2, [pc, #300]	; (8003d0c <HAL_RCC_OscConfig+0x33c>)
 8003be0:	4013      	ands	r3, r2
 8003be2:	0019      	movs	r1, r3
 8003be4:	687b      	ldr	r3, [r7, #4]
 8003be6:	695b      	ldr	r3, [r3, #20]
 8003be8:	021a      	lsls	r2, r3, #8
 8003bea:	4b45      	ldr	r3, [pc, #276]	; (8003d00 <HAL_RCC_OscConfig+0x330>)
 8003bec:	430a      	orrs	r2, r1
 8003bee:	605a      	str	r2, [r3, #4]
 8003bf0:	e01b      	b.n	8003c2a <HAL_RCC_OscConfig+0x25a>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI16). */
        __HAL_RCC_HSI_DISABLE();
 8003bf2:	4b43      	ldr	r3, [pc, #268]	; (8003d00 <HAL_RCC_OscConfig+0x330>)
 8003bf4:	681a      	ldr	r2, [r3, #0]
 8003bf6:	4b42      	ldr	r3, [pc, #264]	; (8003d00 <HAL_RCC_OscConfig+0x330>)
 8003bf8:	4949      	ldr	r1, [pc, #292]	; (8003d20 <HAL_RCC_OscConfig+0x350>)
 8003bfa:	400a      	ands	r2, r1
 8003bfc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003bfe:	f7ff fb35 	bl	800326c <HAL_GetTick>
 8003c02:	0003      	movs	r3, r0
 8003c04:	613b      	str	r3, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8003c06:	e008      	b.n	8003c1a <HAL_RCC_OscConfig+0x24a>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003c08:	f7ff fb30 	bl	800326c <HAL_GetTick>
 8003c0c:	0002      	movs	r2, r0
 8003c0e:	693b      	ldr	r3, [r7, #16]
 8003c10:	1ad3      	subs	r3, r2, r3
 8003c12:	2b02      	cmp	r3, #2
 8003c14:	d901      	bls.n	8003c1a <HAL_RCC_OscConfig+0x24a>
          {
            return HAL_TIMEOUT;
 8003c16:	2303      	movs	r3, #3
 8003c18:	e234      	b.n	8004084 <HAL_RCC_OscConfig+0x6b4>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8003c1a:	4b39      	ldr	r3, [pc, #228]	; (8003d00 <HAL_RCC_OscConfig+0x330>)
 8003c1c:	681a      	ldr	r2, [r3, #0]
 8003c1e:	2380      	movs	r3, #128	; 0x80
 8003c20:	00db      	lsls	r3, r3, #3
 8003c22:	4013      	ands	r3, r2
 8003c24:	d1f0      	bne.n	8003c08 <HAL_RCC_OscConfig+0x238>
 8003c26:	e000      	b.n	8003c2a <HAL_RCC_OscConfig+0x25a>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003c28:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003c2a:	687b      	ldr	r3, [r7, #4]
 8003c2c:	681b      	ldr	r3, [r3, #0]
 8003c2e:	2208      	movs	r2, #8
 8003c30:	4013      	ands	r3, r2
 8003c32:	d047      	beq.n	8003cc4 <HAL_RCC_OscConfig+0x2f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check if LSI is used as system clock */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSI)
 8003c34:	4b32      	ldr	r3, [pc, #200]	; (8003d00 <HAL_RCC_OscConfig+0x330>)
 8003c36:	689b      	ldr	r3, [r3, #8]
 8003c38:	2238      	movs	r2, #56	; 0x38
 8003c3a:	4013      	ands	r3, r2
 8003c3c:	2b18      	cmp	r3, #24
 8003c3e:	d10a      	bne.n	8003c56 <HAL_RCC_OscConfig+0x286>
    {
      /* When LSI is used as system clock it will not be disabled */
      if ((((RCC->CSR) & RCC_CSR_LSIRDY) != 0U) && (RCC_OscInitStruct->LSIState == RCC_LSI_OFF))
 8003c40:	4b2f      	ldr	r3, [pc, #188]	; (8003d00 <HAL_RCC_OscConfig+0x330>)
 8003c42:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003c44:	2202      	movs	r2, #2
 8003c46:	4013      	ands	r3, r2
 8003c48:	d03c      	beq.n	8003cc4 <HAL_RCC_OscConfig+0x2f4>
 8003c4a:	687b      	ldr	r3, [r7, #4]
 8003c4c:	699b      	ldr	r3, [r3, #24]
 8003c4e:	2b00      	cmp	r3, #0
 8003c50:	d138      	bne.n	8003cc4 <HAL_RCC_OscConfig+0x2f4>
      {
        return HAL_ERROR;
 8003c52:	2301      	movs	r3, #1
 8003c54:	e216      	b.n	8004084 <HAL_RCC_OscConfig+0x6b4>
      }
    }
    else
    {
      /* Check the LSI State */
      if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8003c56:	687b      	ldr	r3, [r7, #4]
 8003c58:	699b      	ldr	r3, [r3, #24]
 8003c5a:	2b00      	cmp	r3, #0
 8003c5c:	d019      	beq.n	8003c92 <HAL_RCC_OscConfig+0x2c2>
      {
        /* Enable the Internal Low Speed oscillator (LSI). */
        __HAL_RCC_LSI_ENABLE();
 8003c5e:	4b28      	ldr	r3, [pc, #160]	; (8003d00 <HAL_RCC_OscConfig+0x330>)
 8003c60:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8003c62:	4b27      	ldr	r3, [pc, #156]	; (8003d00 <HAL_RCC_OscConfig+0x330>)
 8003c64:	2101      	movs	r1, #1
 8003c66:	430a      	orrs	r2, r1
 8003c68:	661a      	str	r2, [r3, #96]	; 0x60

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003c6a:	f7ff faff 	bl	800326c <HAL_GetTick>
 8003c6e:	0003      	movs	r3, r0
 8003c70:	613b      	str	r3, [r7, #16]

        /* Wait till LSI is ready */
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8003c72:	e008      	b.n	8003c86 <HAL_RCC_OscConfig+0x2b6>
        {
          if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003c74:	f7ff fafa 	bl	800326c <HAL_GetTick>
 8003c78:	0002      	movs	r2, r0
 8003c7a:	693b      	ldr	r3, [r7, #16]
 8003c7c:	1ad3      	subs	r3, r2, r3
 8003c7e:	2b02      	cmp	r3, #2
 8003c80:	d901      	bls.n	8003c86 <HAL_RCC_OscConfig+0x2b6>
          {
            return HAL_TIMEOUT;
 8003c82:	2303      	movs	r3, #3
 8003c84:	e1fe      	b.n	8004084 <HAL_RCC_OscConfig+0x6b4>
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8003c86:	4b1e      	ldr	r3, [pc, #120]	; (8003d00 <HAL_RCC_OscConfig+0x330>)
 8003c88:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003c8a:	2202      	movs	r2, #2
 8003c8c:	4013      	ands	r3, r2
 8003c8e:	d0f1      	beq.n	8003c74 <HAL_RCC_OscConfig+0x2a4>
 8003c90:	e018      	b.n	8003cc4 <HAL_RCC_OscConfig+0x2f4>
        }
      }
      else
      {
        /* Disable the Internal Low Speed oscillator (LSI). */
        __HAL_RCC_LSI_DISABLE();
 8003c92:	4b1b      	ldr	r3, [pc, #108]	; (8003d00 <HAL_RCC_OscConfig+0x330>)
 8003c94:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8003c96:	4b1a      	ldr	r3, [pc, #104]	; (8003d00 <HAL_RCC_OscConfig+0x330>)
 8003c98:	2101      	movs	r1, #1
 8003c9a:	438a      	bics	r2, r1
 8003c9c:	661a      	str	r2, [r3, #96]	; 0x60

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003c9e:	f7ff fae5 	bl	800326c <HAL_GetTick>
 8003ca2:	0003      	movs	r3, r0
 8003ca4:	613b      	str	r3, [r7, #16]

        /* Wait till LSI is disabled */
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8003ca6:	e008      	b.n	8003cba <HAL_RCC_OscConfig+0x2ea>
        {
          if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003ca8:	f7ff fae0 	bl	800326c <HAL_GetTick>
 8003cac:	0002      	movs	r2, r0
 8003cae:	693b      	ldr	r3, [r7, #16]
 8003cb0:	1ad3      	subs	r3, r2, r3
 8003cb2:	2b02      	cmp	r3, #2
 8003cb4:	d901      	bls.n	8003cba <HAL_RCC_OscConfig+0x2ea>
          {
            return HAL_TIMEOUT;
 8003cb6:	2303      	movs	r3, #3
 8003cb8:	e1e4      	b.n	8004084 <HAL_RCC_OscConfig+0x6b4>
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8003cba:	4b11      	ldr	r3, [pc, #68]	; (8003d00 <HAL_RCC_OscConfig+0x330>)
 8003cbc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003cbe:	2202      	movs	r2, #2
 8003cc0:	4013      	ands	r3, r2
 8003cc2:	d1f1      	bne.n	8003ca8 <HAL_RCC_OscConfig+0x2d8>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003cc4:	687b      	ldr	r3, [r7, #4]
 8003cc6:	681b      	ldr	r3, [r3, #0]
 8003cc8:	2204      	movs	r2, #4
 8003cca:	4013      	ands	r3, r2
 8003ccc:	d100      	bne.n	8003cd0 <HAL_RCC_OscConfig+0x300>
 8003cce:	e0c7      	b.n	8003e60 <HAL_RCC_OscConfig+0x490>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003cd0:	231f      	movs	r3, #31
 8003cd2:	18fb      	adds	r3, r7, r3
 8003cd4:	2200      	movs	r2, #0
 8003cd6:	701a      	strb	r2, [r3, #0]

    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* When the LSE is used as system clock, it is not allowed disable it */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSE)
 8003cd8:	4b09      	ldr	r3, [pc, #36]	; (8003d00 <HAL_RCC_OscConfig+0x330>)
 8003cda:	689b      	ldr	r3, [r3, #8]
 8003cdc:	2238      	movs	r2, #56	; 0x38
 8003cde:	4013      	ands	r3, r2
 8003ce0:	2b20      	cmp	r3, #32
 8003ce2:	d11f      	bne.n	8003d24 <HAL_RCC_OscConfig+0x354>
    {
      if ((((RCC->BDCR) & RCC_BDCR_LSERDY) != 0U) && (RCC_OscInitStruct->LSEState == RCC_LSE_OFF))
 8003ce4:	4b06      	ldr	r3, [pc, #24]	; (8003d00 <HAL_RCC_OscConfig+0x330>)
 8003ce6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003ce8:	2202      	movs	r2, #2
 8003cea:	4013      	ands	r3, r2
 8003cec:	d100      	bne.n	8003cf0 <HAL_RCC_OscConfig+0x320>
 8003cee:	e0b7      	b.n	8003e60 <HAL_RCC_OscConfig+0x490>
 8003cf0:	687b      	ldr	r3, [r7, #4]
 8003cf2:	689b      	ldr	r3, [r3, #8]
 8003cf4:	2b00      	cmp	r3, #0
 8003cf6:	d000      	beq.n	8003cfa <HAL_RCC_OscConfig+0x32a>
 8003cf8:	e0b2      	b.n	8003e60 <HAL_RCC_OscConfig+0x490>
      {
        return HAL_ERROR;
 8003cfa:	2301      	movs	r3, #1
 8003cfc:	e1c2      	b.n	8004084 <HAL_RCC_OscConfig+0x6b4>
 8003cfe:	46c0      	nop			; (mov r8, r8)
 8003d00:	40021000 	.word	0x40021000
 8003d04:	fffeffff 	.word	0xfffeffff
 8003d08:	fffbffff 	.word	0xfffbffff
 8003d0c:	ffff80ff 	.word	0xffff80ff
 8003d10:	ffffc7ff 	.word	0xffffc7ff
 8003d14:	00f42400 	.word	0x00f42400
 8003d18:	20000004 	.word	0x20000004
 8003d1c:	20000008 	.word	0x20000008
 8003d20:	fffffeff 	.word	0xfffffeff
    }
    else
    {
      /* Update LSE configuration in Backup Domain control register    */
      /* Requires to enable write access to Backup Domain of necessary */
      if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8003d24:	4bb5      	ldr	r3, [pc, #724]	; (8003ffc <HAL_RCC_OscConfig+0x62c>)
 8003d26:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8003d28:	2380      	movs	r3, #128	; 0x80
 8003d2a:	055b      	lsls	r3, r3, #21
 8003d2c:	4013      	ands	r3, r2
 8003d2e:	d101      	bne.n	8003d34 <HAL_RCC_OscConfig+0x364>
 8003d30:	2301      	movs	r3, #1
 8003d32:	e000      	b.n	8003d36 <HAL_RCC_OscConfig+0x366>
 8003d34:	2300      	movs	r3, #0
 8003d36:	2b00      	cmp	r3, #0
 8003d38:	d011      	beq.n	8003d5e <HAL_RCC_OscConfig+0x38e>
      {
        __HAL_RCC_PWR_CLK_ENABLE();
 8003d3a:	4bb0      	ldr	r3, [pc, #704]	; (8003ffc <HAL_RCC_OscConfig+0x62c>)
 8003d3c:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8003d3e:	4baf      	ldr	r3, [pc, #700]	; (8003ffc <HAL_RCC_OscConfig+0x62c>)
 8003d40:	2180      	movs	r1, #128	; 0x80
 8003d42:	0549      	lsls	r1, r1, #21
 8003d44:	430a      	orrs	r2, r1
 8003d46:	63da      	str	r2, [r3, #60]	; 0x3c
 8003d48:	4bac      	ldr	r3, [pc, #688]	; (8003ffc <HAL_RCC_OscConfig+0x62c>)
 8003d4a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8003d4c:	2380      	movs	r3, #128	; 0x80
 8003d4e:	055b      	lsls	r3, r3, #21
 8003d50:	4013      	ands	r3, r2
 8003d52:	60fb      	str	r3, [r7, #12]
 8003d54:	68fb      	ldr	r3, [r7, #12]
        pwrclkchanged = SET;
 8003d56:	231f      	movs	r3, #31
 8003d58:	18fb      	adds	r3, r7, r3
 8003d5a:	2201      	movs	r2, #1
 8003d5c:	701a      	strb	r2, [r3, #0]
      }

      if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003d5e:	4ba8      	ldr	r3, [pc, #672]	; (8004000 <HAL_RCC_OscConfig+0x630>)
 8003d60:	681a      	ldr	r2, [r3, #0]
 8003d62:	2380      	movs	r3, #128	; 0x80
 8003d64:	005b      	lsls	r3, r3, #1
 8003d66:	4013      	ands	r3, r2
 8003d68:	d11a      	bne.n	8003da0 <HAL_RCC_OscConfig+0x3d0>
      {
        /* Enable write access to Backup domain */
        SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8003d6a:	4ba5      	ldr	r3, [pc, #660]	; (8004000 <HAL_RCC_OscConfig+0x630>)
 8003d6c:	681a      	ldr	r2, [r3, #0]
 8003d6e:	4ba4      	ldr	r3, [pc, #656]	; (8004000 <HAL_RCC_OscConfig+0x630>)
 8003d70:	2180      	movs	r1, #128	; 0x80
 8003d72:	0049      	lsls	r1, r1, #1
 8003d74:	430a      	orrs	r2, r1
 8003d76:	601a      	str	r2, [r3, #0]

        /* Wait for Backup domain Write protection disable */
        tickstart = HAL_GetTick();
 8003d78:	f7ff fa78 	bl	800326c <HAL_GetTick>
 8003d7c:	0003      	movs	r3, r0
 8003d7e:	613b      	str	r3, [r7, #16]

        while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003d80:	e008      	b.n	8003d94 <HAL_RCC_OscConfig+0x3c4>
        {
          if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003d82:	f7ff fa73 	bl	800326c <HAL_GetTick>
 8003d86:	0002      	movs	r2, r0
 8003d88:	693b      	ldr	r3, [r7, #16]
 8003d8a:	1ad3      	subs	r3, r2, r3
 8003d8c:	2b02      	cmp	r3, #2
 8003d8e:	d901      	bls.n	8003d94 <HAL_RCC_OscConfig+0x3c4>
          {
            return HAL_TIMEOUT;
 8003d90:	2303      	movs	r3, #3
 8003d92:	e177      	b.n	8004084 <HAL_RCC_OscConfig+0x6b4>
        while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003d94:	4b9a      	ldr	r3, [pc, #616]	; (8004000 <HAL_RCC_OscConfig+0x630>)
 8003d96:	681a      	ldr	r2, [r3, #0]
 8003d98:	2380      	movs	r3, #128	; 0x80
 8003d9a:	005b      	lsls	r3, r3, #1
 8003d9c:	4013      	ands	r3, r2
 8003d9e:	d0f0      	beq.n	8003d82 <HAL_RCC_OscConfig+0x3b2>
          }
        }
      }

      /* Set the new LSE configuration -----------------------------------------*/
      __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003da0:	687b      	ldr	r3, [r7, #4]
 8003da2:	689b      	ldr	r3, [r3, #8]
 8003da4:	2b01      	cmp	r3, #1
 8003da6:	d106      	bne.n	8003db6 <HAL_RCC_OscConfig+0x3e6>
 8003da8:	4b94      	ldr	r3, [pc, #592]	; (8003ffc <HAL_RCC_OscConfig+0x62c>)
 8003daa:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8003dac:	4b93      	ldr	r3, [pc, #588]	; (8003ffc <HAL_RCC_OscConfig+0x62c>)
 8003dae:	2101      	movs	r1, #1
 8003db0:	430a      	orrs	r2, r1
 8003db2:	65da      	str	r2, [r3, #92]	; 0x5c
 8003db4:	e01c      	b.n	8003df0 <HAL_RCC_OscConfig+0x420>
 8003db6:	687b      	ldr	r3, [r7, #4]
 8003db8:	689b      	ldr	r3, [r3, #8]
 8003dba:	2b05      	cmp	r3, #5
 8003dbc:	d10c      	bne.n	8003dd8 <HAL_RCC_OscConfig+0x408>
 8003dbe:	4b8f      	ldr	r3, [pc, #572]	; (8003ffc <HAL_RCC_OscConfig+0x62c>)
 8003dc0:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8003dc2:	4b8e      	ldr	r3, [pc, #568]	; (8003ffc <HAL_RCC_OscConfig+0x62c>)
 8003dc4:	2104      	movs	r1, #4
 8003dc6:	430a      	orrs	r2, r1
 8003dc8:	65da      	str	r2, [r3, #92]	; 0x5c
 8003dca:	4b8c      	ldr	r3, [pc, #560]	; (8003ffc <HAL_RCC_OscConfig+0x62c>)
 8003dcc:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8003dce:	4b8b      	ldr	r3, [pc, #556]	; (8003ffc <HAL_RCC_OscConfig+0x62c>)
 8003dd0:	2101      	movs	r1, #1
 8003dd2:	430a      	orrs	r2, r1
 8003dd4:	65da      	str	r2, [r3, #92]	; 0x5c
 8003dd6:	e00b      	b.n	8003df0 <HAL_RCC_OscConfig+0x420>
 8003dd8:	4b88      	ldr	r3, [pc, #544]	; (8003ffc <HAL_RCC_OscConfig+0x62c>)
 8003dda:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8003ddc:	4b87      	ldr	r3, [pc, #540]	; (8003ffc <HAL_RCC_OscConfig+0x62c>)
 8003dde:	2101      	movs	r1, #1
 8003de0:	438a      	bics	r2, r1
 8003de2:	65da      	str	r2, [r3, #92]	; 0x5c
 8003de4:	4b85      	ldr	r3, [pc, #532]	; (8003ffc <HAL_RCC_OscConfig+0x62c>)
 8003de6:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8003de8:	4b84      	ldr	r3, [pc, #528]	; (8003ffc <HAL_RCC_OscConfig+0x62c>)
 8003dea:	2104      	movs	r1, #4
 8003dec:	438a      	bics	r2, r1
 8003dee:	65da      	str	r2, [r3, #92]	; 0x5c

      /* Check the LSE State */
      if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8003df0:	687b      	ldr	r3, [r7, #4]
 8003df2:	689b      	ldr	r3, [r3, #8]
 8003df4:	2b00      	cmp	r3, #0
 8003df6:	d014      	beq.n	8003e22 <HAL_RCC_OscConfig+0x452>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003df8:	f7ff fa38 	bl	800326c <HAL_GetTick>
 8003dfc:	0003      	movs	r3, r0
 8003dfe:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003e00:	e009      	b.n	8003e16 <HAL_RCC_OscConfig+0x446>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003e02:	f7ff fa33 	bl	800326c <HAL_GetTick>
 8003e06:	0002      	movs	r2, r0
 8003e08:	693b      	ldr	r3, [r7, #16]
 8003e0a:	1ad3      	subs	r3, r2, r3
 8003e0c:	4a7d      	ldr	r2, [pc, #500]	; (8004004 <HAL_RCC_OscConfig+0x634>)
 8003e0e:	4293      	cmp	r3, r2
 8003e10:	d901      	bls.n	8003e16 <HAL_RCC_OscConfig+0x446>
          {
            return HAL_TIMEOUT;
 8003e12:	2303      	movs	r3, #3
 8003e14:	e136      	b.n	8004084 <HAL_RCC_OscConfig+0x6b4>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003e16:	4b79      	ldr	r3, [pc, #484]	; (8003ffc <HAL_RCC_OscConfig+0x62c>)
 8003e18:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003e1a:	2202      	movs	r2, #2
 8003e1c:	4013      	ands	r3, r2
 8003e1e:	d0f0      	beq.n	8003e02 <HAL_RCC_OscConfig+0x432>
 8003e20:	e013      	b.n	8003e4a <HAL_RCC_OscConfig+0x47a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003e22:	f7ff fa23 	bl	800326c <HAL_GetTick>
 8003e26:	0003      	movs	r3, r0
 8003e28:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is disabled */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8003e2a:	e009      	b.n	8003e40 <HAL_RCC_OscConfig+0x470>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003e2c:	f7ff fa1e 	bl	800326c <HAL_GetTick>
 8003e30:	0002      	movs	r2, r0
 8003e32:	693b      	ldr	r3, [r7, #16]
 8003e34:	1ad3      	subs	r3, r2, r3
 8003e36:	4a73      	ldr	r2, [pc, #460]	; (8004004 <HAL_RCC_OscConfig+0x634>)
 8003e38:	4293      	cmp	r3, r2
 8003e3a:	d901      	bls.n	8003e40 <HAL_RCC_OscConfig+0x470>
          {
            return HAL_TIMEOUT;
 8003e3c:	2303      	movs	r3, #3
 8003e3e:	e121      	b.n	8004084 <HAL_RCC_OscConfig+0x6b4>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8003e40:	4b6e      	ldr	r3, [pc, #440]	; (8003ffc <HAL_RCC_OscConfig+0x62c>)
 8003e42:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003e44:	2202      	movs	r2, #2
 8003e46:	4013      	ands	r3, r2
 8003e48:	d1f0      	bne.n	8003e2c <HAL_RCC_OscConfig+0x45c>
          }
        }
      }

      /* Restore clock configuration if changed */
      if (pwrclkchanged == SET)
 8003e4a:	231f      	movs	r3, #31
 8003e4c:	18fb      	adds	r3, r7, r3
 8003e4e:	781b      	ldrb	r3, [r3, #0]
 8003e50:	2b01      	cmp	r3, #1
 8003e52:	d105      	bne.n	8003e60 <HAL_RCC_OscConfig+0x490>
      {
        __HAL_RCC_PWR_CLK_DISABLE();
 8003e54:	4b69      	ldr	r3, [pc, #420]	; (8003ffc <HAL_RCC_OscConfig+0x62c>)
 8003e56:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8003e58:	4b68      	ldr	r3, [pc, #416]	; (8003ffc <HAL_RCC_OscConfig+0x62c>)
 8003e5a:	496b      	ldr	r1, [pc, #428]	; (8004008 <HAL_RCC_OscConfig+0x638>)
 8003e5c:	400a      	ands	r2, r1
 8003e5e:	63da      	str	r2, [r3, #60]	; 0x3c
      }
    }
  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8003e60:	687b      	ldr	r3, [r7, #4]
 8003e62:	681b      	ldr	r3, [r3, #0]
 8003e64:	2220      	movs	r2, #32
 8003e66:	4013      	ands	r3, r2
 8003e68:	d039      	beq.n	8003ede <HAL_RCC_OscConfig+0x50e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if (RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8003e6a:	687b      	ldr	r3, [r7, #4]
 8003e6c:	69db      	ldr	r3, [r3, #28]
 8003e6e:	2b00      	cmp	r3, #0
 8003e70:	d01b      	beq.n	8003eaa <HAL_RCC_OscConfig+0x4da>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8003e72:	4b62      	ldr	r3, [pc, #392]	; (8003ffc <HAL_RCC_OscConfig+0x62c>)
 8003e74:	681a      	ldr	r2, [r3, #0]
 8003e76:	4b61      	ldr	r3, [pc, #388]	; (8003ffc <HAL_RCC_OscConfig+0x62c>)
 8003e78:	2180      	movs	r1, #128	; 0x80
 8003e7a:	03c9      	lsls	r1, r1, #15
 8003e7c:	430a      	orrs	r2, r1
 8003e7e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003e80:	f7ff f9f4 	bl	800326c <HAL_GetTick>
 8003e84:	0003      	movs	r3, r0
 8003e86:	613b      	str	r3, [r7, #16]

      /* Wait till HSI48 is ready */
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) == 0U)
 8003e88:	e008      	b.n	8003e9c <HAL_RCC_OscConfig+0x4cc>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8003e8a:	f7ff f9ef 	bl	800326c <HAL_GetTick>
 8003e8e:	0002      	movs	r2, r0
 8003e90:	693b      	ldr	r3, [r7, #16]
 8003e92:	1ad3      	subs	r3, r2, r3
 8003e94:	2b02      	cmp	r3, #2
 8003e96:	d901      	bls.n	8003e9c <HAL_RCC_OscConfig+0x4cc>
        {
          return HAL_TIMEOUT;
 8003e98:	2303      	movs	r3, #3
 8003e9a:	e0f3      	b.n	8004084 <HAL_RCC_OscConfig+0x6b4>
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) == 0U)
 8003e9c:	4b57      	ldr	r3, [pc, #348]	; (8003ffc <HAL_RCC_OscConfig+0x62c>)
 8003e9e:	681a      	ldr	r2, [r3, #0]
 8003ea0:	2380      	movs	r3, #128	; 0x80
 8003ea2:	041b      	lsls	r3, r3, #16
 8003ea4:	4013      	ands	r3, r2
 8003ea6:	d0f0      	beq.n	8003e8a <HAL_RCC_OscConfig+0x4ba>
 8003ea8:	e019      	b.n	8003ede <HAL_RCC_OscConfig+0x50e>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8003eaa:	4b54      	ldr	r3, [pc, #336]	; (8003ffc <HAL_RCC_OscConfig+0x62c>)
 8003eac:	681a      	ldr	r2, [r3, #0]
 8003eae:	4b53      	ldr	r3, [pc, #332]	; (8003ffc <HAL_RCC_OscConfig+0x62c>)
 8003eb0:	4956      	ldr	r1, [pc, #344]	; (800400c <HAL_RCC_OscConfig+0x63c>)
 8003eb2:	400a      	ands	r2, r1
 8003eb4:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003eb6:	f7ff f9d9 	bl	800326c <HAL_GetTick>
 8003eba:	0003      	movs	r3, r0
 8003ebc:	613b      	str	r3, [r7, #16]

      /* Wait till HSI48 is disabled */
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) != 0U)
 8003ebe:	e008      	b.n	8003ed2 <HAL_RCC_OscConfig+0x502>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8003ec0:	f7ff f9d4 	bl	800326c <HAL_GetTick>
 8003ec4:	0002      	movs	r2, r0
 8003ec6:	693b      	ldr	r3, [r7, #16]
 8003ec8:	1ad3      	subs	r3, r2, r3
 8003eca:	2b02      	cmp	r3, #2
 8003ecc:	d901      	bls.n	8003ed2 <HAL_RCC_OscConfig+0x502>
        {
          return HAL_TIMEOUT;
 8003ece:	2303      	movs	r3, #3
 8003ed0:	e0d8      	b.n	8004084 <HAL_RCC_OscConfig+0x6b4>
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) != 0U)
 8003ed2:	4b4a      	ldr	r3, [pc, #296]	; (8003ffc <HAL_RCC_OscConfig+0x62c>)
 8003ed4:	681a      	ldr	r2, [r3, #0]
 8003ed6:	2380      	movs	r3, #128	; 0x80
 8003ed8:	041b      	lsls	r3, r3, #16
 8003eda:	4013      	ands	r3, r2
 8003edc:	d1f0      	bne.n	8003ec0 <HAL_RCC_OscConfig+0x4f0>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8003ede:	687b      	ldr	r3, [r7, #4]
 8003ee0:	6a1b      	ldr	r3, [r3, #32]
 8003ee2:	2b00      	cmp	r3, #0
 8003ee4:	d100      	bne.n	8003ee8 <HAL_RCC_OscConfig+0x518>
 8003ee6:	e0cc      	b.n	8004082 <HAL_RCC_OscConfig+0x6b2>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8003ee8:	4b44      	ldr	r3, [pc, #272]	; (8003ffc <HAL_RCC_OscConfig+0x62c>)
 8003eea:	689b      	ldr	r3, [r3, #8]
 8003eec:	2238      	movs	r2, #56	; 0x38
 8003eee:	4013      	ands	r3, r2
 8003ef0:	2b10      	cmp	r3, #16
 8003ef2:	d100      	bne.n	8003ef6 <HAL_RCC_OscConfig+0x526>
 8003ef4:	e07b      	b.n	8003fee <HAL_RCC_OscConfig+0x61e>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8003ef6:	687b      	ldr	r3, [r7, #4]
 8003ef8:	6a1b      	ldr	r3, [r3, #32]
 8003efa:	2b02      	cmp	r3, #2
 8003efc:	d156      	bne.n	8003fac <HAL_RCC_OscConfig+0x5dc>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
#endif /* RCC_PLLQ_SUPPORT */
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003efe:	4b3f      	ldr	r3, [pc, #252]	; (8003ffc <HAL_RCC_OscConfig+0x62c>)
 8003f00:	681a      	ldr	r2, [r3, #0]
 8003f02:	4b3e      	ldr	r3, [pc, #248]	; (8003ffc <HAL_RCC_OscConfig+0x62c>)
 8003f04:	4942      	ldr	r1, [pc, #264]	; (8004010 <HAL_RCC_OscConfig+0x640>)
 8003f06:	400a      	ands	r2, r1
 8003f08:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003f0a:	f7ff f9af 	bl	800326c <HAL_GetTick>
 8003f0e:	0003      	movs	r3, r0
 8003f10:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003f12:	e008      	b.n	8003f26 <HAL_RCC_OscConfig+0x556>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003f14:	f7ff f9aa 	bl	800326c <HAL_GetTick>
 8003f18:	0002      	movs	r2, r0
 8003f1a:	693b      	ldr	r3, [r7, #16]
 8003f1c:	1ad3      	subs	r3, r2, r3
 8003f1e:	2b02      	cmp	r3, #2
 8003f20:	d901      	bls.n	8003f26 <HAL_RCC_OscConfig+0x556>
          {
            return HAL_TIMEOUT;
 8003f22:	2303      	movs	r3, #3
 8003f24:	e0ae      	b.n	8004084 <HAL_RCC_OscConfig+0x6b4>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003f26:	4b35      	ldr	r3, [pc, #212]	; (8003ffc <HAL_RCC_OscConfig+0x62c>)
 8003f28:	681a      	ldr	r2, [r3, #0]
 8003f2a:	2380      	movs	r3, #128	; 0x80
 8003f2c:	049b      	lsls	r3, r3, #18
 8003f2e:	4013      	ands	r3, r2
 8003f30:	d1f0      	bne.n	8003f14 <HAL_RCC_OscConfig+0x544>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLQ_SUPPORT)
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003f32:	4b32      	ldr	r3, [pc, #200]	; (8003ffc <HAL_RCC_OscConfig+0x62c>)
 8003f34:	68db      	ldr	r3, [r3, #12]
 8003f36:	4a37      	ldr	r2, [pc, #220]	; (8004014 <HAL_RCC_OscConfig+0x644>)
 8003f38:	4013      	ands	r3, r2
 8003f3a:	0019      	movs	r1, r3
 8003f3c:	687b      	ldr	r3, [r7, #4]
 8003f3e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8003f40:	687b      	ldr	r3, [r7, #4]
 8003f42:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003f44:	431a      	orrs	r2, r3
 8003f46:	687b      	ldr	r3, [r7, #4]
 8003f48:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003f4a:	021b      	lsls	r3, r3, #8
 8003f4c:	431a      	orrs	r2, r3
 8003f4e:	687b      	ldr	r3, [r7, #4]
 8003f50:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003f52:	431a      	orrs	r2, r3
 8003f54:	687b      	ldr	r3, [r7, #4]
 8003f56:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003f58:	431a      	orrs	r2, r3
 8003f5a:	687b      	ldr	r3, [r7, #4]
 8003f5c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003f5e:	431a      	orrs	r2, r3
 8003f60:	4b26      	ldr	r3, [pc, #152]	; (8003ffc <HAL_RCC_OscConfig+0x62c>)
 8003f62:	430a      	orrs	r2, r1
 8003f64:	60da      	str	r2, [r3, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLR);
#endif /* RCC_PLLQ_SUPPORT */

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003f66:	4b25      	ldr	r3, [pc, #148]	; (8003ffc <HAL_RCC_OscConfig+0x62c>)
 8003f68:	681a      	ldr	r2, [r3, #0]
 8003f6a:	4b24      	ldr	r3, [pc, #144]	; (8003ffc <HAL_RCC_OscConfig+0x62c>)
 8003f6c:	2180      	movs	r1, #128	; 0x80
 8003f6e:	0449      	lsls	r1, r1, #17
 8003f70:	430a      	orrs	r2, r1
 8003f72:	601a      	str	r2, [r3, #0]

        /* Enable PLLR Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLRCLK);
 8003f74:	4b21      	ldr	r3, [pc, #132]	; (8003ffc <HAL_RCC_OscConfig+0x62c>)
 8003f76:	68da      	ldr	r2, [r3, #12]
 8003f78:	4b20      	ldr	r3, [pc, #128]	; (8003ffc <HAL_RCC_OscConfig+0x62c>)
 8003f7a:	2180      	movs	r1, #128	; 0x80
 8003f7c:	0549      	lsls	r1, r1, #21
 8003f7e:	430a      	orrs	r2, r1
 8003f80:	60da      	str	r2, [r3, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003f82:	f7ff f973 	bl	800326c <HAL_GetTick>
 8003f86:	0003      	movs	r3, r0
 8003f88:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003f8a:	e008      	b.n	8003f9e <HAL_RCC_OscConfig+0x5ce>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003f8c:	f7ff f96e 	bl	800326c <HAL_GetTick>
 8003f90:	0002      	movs	r2, r0
 8003f92:	693b      	ldr	r3, [r7, #16]
 8003f94:	1ad3      	subs	r3, r2, r3
 8003f96:	2b02      	cmp	r3, #2
 8003f98:	d901      	bls.n	8003f9e <HAL_RCC_OscConfig+0x5ce>
          {
            return HAL_TIMEOUT;
 8003f9a:	2303      	movs	r3, #3
 8003f9c:	e072      	b.n	8004084 <HAL_RCC_OscConfig+0x6b4>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003f9e:	4b17      	ldr	r3, [pc, #92]	; (8003ffc <HAL_RCC_OscConfig+0x62c>)
 8003fa0:	681a      	ldr	r2, [r3, #0]
 8003fa2:	2380      	movs	r3, #128	; 0x80
 8003fa4:	049b      	lsls	r3, r3, #18
 8003fa6:	4013      	ands	r3, r2
 8003fa8:	d0f0      	beq.n	8003f8c <HAL_RCC_OscConfig+0x5bc>
 8003faa:	e06a      	b.n	8004082 <HAL_RCC_OscConfig+0x6b2>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003fac:	4b13      	ldr	r3, [pc, #76]	; (8003ffc <HAL_RCC_OscConfig+0x62c>)
 8003fae:	681a      	ldr	r2, [r3, #0]
 8003fb0:	4b12      	ldr	r3, [pc, #72]	; (8003ffc <HAL_RCC_OscConfig+0x62c>)
 8003fb2:	4917      	ldr	r1, [pc, #92]	; (8004010 <HAL_RCC_OscConfig+0x640>)
 8003fb4:	400a      	ands	r2, r1
 8003fb6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003fb8:	f7ff f958 	bl	800326c <HAL_GetTick>
 8003fbc:	0003      	movs	r3, r0
 8003fbe:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003fc0:	e008      	b.n	8003fd4 <HAL_RCC_OscConfig+0x604>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003fc2:	f7ff f953 	bl	800326c <HAL_GetTick>
 8003fc6:	0002      	movs	r2, r0
 8003fc8:	693b      	ldr	r3, [r7, #16]
 8003fca:	1ad3      	subs	r3, r2, r3
 8003fcc:	2b02      	cmp	r3, #2
 8003fce:	d901      	bls.n	8003fd4 <HAL_RCC_OscConfig+0x604>
          {
            return HAL_TIMEOUT;
 8003fd0:	2303      	movs	r3, #3
 8003fd2:	e057      	b.n	8004084 <HAL_RCC_OscConfig+0x6b4>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003fd4:	4b09      	ldr	r3, [pc, #36]	; (8003ffc <HAL_RCC_OscConfig+0x62c>)
 8003fd6:	681a      	ldr	r2, [r3, #0]
 8003fd8:	2380      	movs	r3, #128	; 0x80
 8003fda:	049b      	lsls	r3, r3, #18
 8003fdc:	4013      	ands	r3, r2
 8003fde:	d1f0      	bne.n	8003fc2 <HAL_RCC_OscConfig+0x5f2>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLQ_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLPEN | RCC_PLLCFGR_PLLQEN | RCC_PLLCFGR_PLLREN);
 8003fe0:	4b06      	ldr	r3, [pc, #24]	; (8003ffc <HAL_RCC_OscConfig+0x62c>)
 8003fe2:	68da      	ldr	r2, [r3, #12]
 8003fe4:	4b05      	ldr	r3, [pc, #20]	; (8003ffc <HAL_RCC_OscConfig+0x62c>)
 8003fe6:	490c      	ldr	r1, [pc, #48]	; (8004018 <HAL_RCC_OscConfig+0x648>)
 8003fe8:	400a      	ands	r2, r1
 8003fea:	60da      	str	r2, [r3, #12]
 8003fec:	e049      	b.n	8004082 <HAL_RCC_OscConfig+0x6b2>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003fee:	687b      	ldr	r3, [r7, #4]
 8003ff0:	6a1b      	ldr	r3, [r3, #32]
 8003ff2:	2b01      	cmp	r3, #1
 8003ff4:	d112      	bne.n	800401c <HAL_RCC_OscConfig+0x64c>
      {
        return HAL_ERROR;
 8003ff6:	2301      	movs	r3, #1
 8003ff8:	e044      	b.n	8004084 <HAL_RCC_OscConfig+0x6b4>
 8003ffa:	46c0      	nop			; (mov r8, r8)
 8003ffc:	40021000 	.word	0x40021000
 8004000:	40007000 	.word	0x40007000
 8004004:	00001388 	.word	0x00001388
 8004008:	efffffff 	.word	0xefffffff
 800400c:	ffbfffff 	.word	0xffbfffff
 8004010:	feffffff 	.word	0xfeffffff
 8004014:	11c1808c 	.word	0x11c1808c
 8004018:	eefefffc 	.word	0xeefefffc
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        temp_pllckcfg = RCC->PLLCFGR;
 800401c:	4b1b      	ldr	r3, [pc, #108]	; (800408c <HAL_RCC_OscConfig+0x6bc>)
 800401e:	68db      	ldr	r3, [r3, #12]
 8004020:	617b      	str	r3, [r7, #20]
        if ((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004022:	697b      	ldr	r3, [r7, #20]
 8004024:	2203      	movs	r2, #3
 8004026:	401a      	ands	r2, r3
 8004028:	687b      	ldr	r3, [r7, #4]
 800402a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800402c:	429a      	cmp	r2, r3
 800402e:	d126      	bne.n	800407e <HAL_RCC_OscConfig+0x6ae>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8004030:	697b      	ldr	r3, [r7, #20]
 8004032:	2270      	movs	r2, #112	; 0x70
 8004034:	401a      	ands	r2, r3
 8004036:	687b      	ldr	r3, [r7, #4]
 8004038:	6a9b      	ldr	r3, [r3, #40]	; 0x28
        if ((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800403a:	429a      	cmp	r2, r3
 800403c:	d11f      	bne.n	800407e <HAL_RCC_OscConfig+0x6ae>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800403e:	697a      	ldr	r2, [r7, #20]
 8004040:	23fe      	movs	r3, #254	; 0xfe
 8004042:	01db      	lsls	r3, r3, #7
 8004044:	401a      	ands	r2, r3
 8004046:	687b      	ldr	r3, [r7, #4]
 8004048:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800404a:	021b      	lsls	r3, r3, #8
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 800404c:	429a      	cmp	r2, r3
 800404e:	d116      	bne.n	800407e <HAL_RCC_OscConfig+0x6ae>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8004050:	697a      	ldr	r2, [r7, #20]
 8004052:	23f8      	movs	r3, #248	; 0xf8
 8004054:	039b      	lsls	r3, r3, #14
 8004056:	401a      	ands	r2, r3
 8004058:	687b      	ldr	r3, [r7, #4]
 800405a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800405c:	429a      	cmp	r2, r3
 800405e:	d10e      	bne.n	800407e <HAL_RCC_OscConfig+0x6ae>
#if defined (RCC_PLLQ_SUPPORT)
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
 8004060:	697a      	ldr	r2, [r7, #20]
 8004062:	23e0      	movs	r3, #224	; 0xe0
 8004064:	051b      	lsls	r3, r3, #20
 8004066:	401a      	ands	r2, r3
 8004068:	687b      	ldr	r3, [r7, #4]
 800406a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 800406c:	429a      	cmp	r2, r3
 800406e:	d106      	bne.n	800407e <HAL_RCC_OscConfig+0x6ae>
#endif /* RCC_PLLQ_SUPPORT */
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != RCC_OscInitStruct->PLL.PLLR))
 8004070:	697b      	ldr	r3, [r7, #20]
 8004072:	0f5b      	lsrs	r3, r3, #29
 8004074:	075a      	lsls	r2, r3, #29
 8004076:	687b      	ldr	r3, [r7, #4]
 8004078:	6b9b      	ldr	r3, [r3, #56]	; 0x38
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
 800407a:	429a      	cmp	r2, r3
 800407c:	d001      	beq.n	8004082 <HAL_RCC_OscConfig+0x6b2>
        {
          return HAL_ERROR;
 800407e:	2301      	movs	r3, #1
 8004080:	e000      	b.n	8004084 <HAL_RCC_OscConfig+0x6b4>
        }
      }
    }
  }
  return HAL_OK;
 8004082:	2300      	movs	r3, #0
}
 8004084:	0018      	movs	r0, r3
 8004086:	46bd      	mov	sp, r7
 8004088:	b008      	add	sp, #32
 800408a:	bd80      	pop	{r7, pc}
 800408c:	40021000 	.word	0x40021000

08004090 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004090:	b580      	push	{r7, lr}
 8004092:	b084      	sub	sp, #16
 8004094:	af00      	add	r7, sp, #0
 8004096:	6078      	str	r0, [r7, #4]
 8004098:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800409a:	687b      	ldr	r3, [r7, #4]
 800409c:	2b00      	cmp	r3, #0
 800409e:	d101      	bne.n	80040a4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80040a0:	2301      	movs	r3, #1
 80040a2:	e0e9      	b.n	8004278 <HAL_RCC_ClockConfig+0x1e8>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the FLASH clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80040a4:	4b76      	ldr	r3, [pc, #472]	; (8004280 <HAL_RCC_ClockConfig+0x1f0>)
 80040a6:	681b      	ldr	r3, [r3, #0]
 80040a8:	2207      	movs	r2, #7
 80040aa:	4013      	ands	r3, r2
 80040ac:	683a      	ldr	r2, [r7, #0]
 80040ae:	429a      	cmp	r2, r3
 80040b0:	d91e      	bls.n	80040f0 <HAL_RCC_ClockConfig+0x60>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80040b2:	4b73      	ldr	r3, [pc, #460]	; (8004280 <HAL_RCC_ClockConfig+0x1f0>)
 80040b4:	681b      	ldr	r3, [r3, #0]
 80040b6:	2207      	movs	r2, #7
 80040b8:	4393      	bics	r3, r2
 80040ba:	0019      	movs	r1, r3
 80040bc:	4b70      	ldr	r3, [pc, #448]	; (8004280 <HAL_RCC_ClockConfig+0x1f0>)
 80040be:	683a      	ldr	r2, [r7, #0]
 80040c0:	430a      	orrs	r2, r1
 80040c2:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 80040c4:	f7ff f8d2 	bl	800326c <HAL_GetTick>
 80040c8:	0003      	movs	r3, r0
 80040ca:	60fb      	str	r3, [r7, #12]

    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 80040cc:	e009      	b.n	80040e2 <HAL_RCC_ClockConfig+0x52>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80040ce:	f7ff f8cd 	bl	800326c <HAL_GetTick>
 80040d2:	0002      	movs	r2, r0
 80040d4:	68fb      	ldr	r3, [r7, #12]
 80040d6:	1ad3      	subs	r3, r2, r3
 80040d8:	4a6a      	ldr	r2, [pc, #424]	; (8004284 <HAL_RCC_ClockConfig+0x1f4>)
 80040da:	4293      	cmp	r3, r2
 80040dc:	d901      	bls.n	80040e2 <HAL_RCC_ClockConfig+0x52>
      {
        return HAL_TIMEOUT;
 80040de:	2303      	movs	r3, #3
 80040e0:	e0ca      	b.n	8004278 <HAL_RCC_ClockConfig+0x1e8>
    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 80040e2:	4b67      	ldr	r3, [pc, #412]	; (8004280 <HAL_RCC_ClockConfig+0x1f0>)
 80040e4:	681b      	ldr	r3, [r3, #0]
 80040e6:	2207      	movs	r2, #7
 80040e8:	4013      	ands	r3, r2
 80040ea:	683a      	ldr	r2, [r7, #0]
 80040ec:	429a      	cmp	r2, r3
 80040ee:	d1ee      	bne.n	80040ce <HAL_RCC_ClockConfig+0x3e>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80040f0:	687b      	ldr	r3, [r7, #4]
 80040f2:	681b      	ldr	r3, [r3, #0]
 80040f4:	2202      	movs	r2, #2
 80040f6:	4013      	ands	r3, r2
 80040f8:	d015      	beq.n	8004126 <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80040fa:	687b      	ldr	r3, [r7, #4]
 80040fc:	681b      	ldr	r3, [r3, #0]
 80040fe:	2204      	movs	r2, #4
 8004100:	4013      	ands	r3, r2
 8004102:	d006      	beq.n	8004112 <HAL_RCC_ClockConfig+0x82>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_HCLK_DIV16);
 8004104:	4b60      	ldr	r3, [pc, #384]	; (8004288 <HAL_RCC_ClockConfig+0x1f8>)
 8004106:	689a      	ldr	r2, [r3, #8]
 8004108:	4b5f      	ldr	r3, [pc, #380]	; (8004288 <HAL_RCC_ClockConfig+0x1f8>)
 800410a:	21e0      	movs	r1, #224	; 0xe0
 800410c:	01c9      	lsls	r1, r1, #7
 800410e:	430a      	orrs	r2, r1
 8004110:	609a      	str	r2, [r3, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004112:	4b5d      	ldr	r3, [pc, #372]	; (8004288 <HAL_RCC_ClockConfig+0x1f8>)
 8004114:	689b      	ldr	r3, [r3, #8]
 8004116:	4a5d      	ldr	r2, [pc, #372]	; (800428c <HAL_RCC_ClockConfig+0x1fc>)
 8004118:	4013      	ands	r3, r2
 800411a:	0019      	movs	r1, r3
 800411c:	687b      	ldr	r3, [r7, #4]
 800411e:	689a      	ldr	r2, [r3, #8]
 8004120:	4b59      	ldr	r3, [pc, #356]	; (8004288 <HAL_RCC_ClockConfig+0x1f8>)
 8004122:	430a      	orrs	r2, r1
 8004124:	609a      	str	r2, [r3, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004126:	687b      	ldr	r3, [r7, #4]
 8004128:	681b      	ldr	r3, [r3, #0]
 800412a:	2201      	movs	r2, #1
 800412c:	4013      	ands	r3, r2
 800412e:	d057      	beq.n	80041e0 <HAL_RCC_ClockConfig+0x150>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004130:	687b      	ldr	r3, [r7, #4]
 8004132:	685b      	ldr	r3, [r3, #4]
 8004134:	2b01      	cmp	r3, #1
 8004136:	d107      	bne.n	8004148 <HAL_RCC_ClockConfig+0xb8>
    {
      /* Check the HSE ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8004138:	4b53      	ldr	r3, [pc, #332]	; (8004288 <HAL_RCC_ClockConfig+0x1f8>)
 800413a:	681a      	ldr	r2, [r3, #0]
 800413c:	2380      	movs	r3, #128	; 0x80
 800413e:	029b      	lsls	r3, r3, #10
 8004140:	4013      	ands	r3, r2
 8004142:	d12b      	bne.n	800419c <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8004144:	2301      	movs	r3, #1
 8004146:	e097      	b.n	8004278 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8004148:	687b      	ldr	r3, [r7, #4]
 800414a:	685b      	ldr	r3, [r3, #4]
 800414c:	2b02      	cmp	r3, #2
 800414e:	d107      	bne.n	8004160 <HAL_RCC_ClockConfig+0xd0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004150:	4b4d      	ldr	r3, [pc, #308]	; (8004288 <HAL_RCC_ClockConfig+0x1f8>)
 8004152:	681a      	ldr	r2, [r3, #0]
 8004154:	2380      	movs	r3, #128	; 0x80
 8004156:	049b      	lsls	r3, r3, #18
 8004158:	4013      	ands	r3, r2
 800415a:	d11f      	bne.n	800419c <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 800415c:	2301      	movs	r3, #1
 800415e:	e08b      	b.n	8004278 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* HSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 8004160:	687b      	ldr	r3, [r7, #4]
 8004162:	685b      	ldr	r3, [r3, #4]
 8004164:	2b00      	cmp	r3, #0
 8004166:	d107      	bne.n	8004178 <HAL_RCC_ClockConfig+0xe8>
    {
      /* Check the HSI ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8004168:	4b47      	ldr	r3, [pc, #284]	; (8004288 <HAL_RCC_ClockConfig+0x1f8>)
 800416a:	681a      	ldr	r2, [r3, #0]
 800416c:	2380      	movs	r3, #128	; 0x80
 800416e:	00db      	lsls	r3, r3, #3
 8004170:	4013      	ands	r3, r2
 8004172:	d113      	bne.n	800419c <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8004174:	2301      	movs	r3, #1
 8004176:	e07f      	b.n	8004278 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* LSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_LSI)
 8004178:	687b      	ldr	r3, [r7, #4]
 800417a:	685b      	ldr	r3, [r3, #4]
 800417c:	2b03      	cmp	r3, #3
 800417e:	d106      	bne.n	800418e <HAL_RCC_ClockConfig+0xfe>
    {
      /* Check the LSI ready flag */
      if (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8004180:	4b41      	ldr	r3, [pc, #260]	; (8004288 <HAL_RCC_ClockConfig+0x1f8>)
 8004182:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004184:	2202      	movs	r2, #2
 8004186:	4013      	ands	r3, r2
 8004188:	d108      	bne.n	800419c <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 800418a:	2301      	movs	r3, #1
 800418c:	e074      	b.n	8004278 <HAL_RCC_ClockConfig+0x1e8>
    }
    /* LSE is selected as System Clock Source */
    else
    {
      /* Check the LSE ready flag */
      if (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800418e:	4b3e      	ldr	r3, [pc, #248]	; (8004288 <HAL_RCC_ClockConfig+0x1f8>)
 8004190:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004192:	2202      	movs	r2, #2
 8004194:	4013      	ands	r3, r2
 8004196:	d101      	bne.n	800419c <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8004198:	2301      	movs	r3, #1
 800419a:	e06d      	b.n	8004278 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 800419c:	4b3a      	ldr	r3, [pc, #232]	; (8004288 <HAL_RCC_ClockConfig+0x1f8>)
 800419e:	689b      	ldr	r3, [r3, #8]
 80041a0:	2207      	movs	r2, #7
 80041a2:	4393      	bics	r3, r2
 80041a4:	0019      	movs	r1, r3
 80041a6:	687b      	ldr	r3, [r7, #4]
 80041a8:	685a      	ldr	r2, [r3, #4]
 80041aa:	4b37      	ldr	r3, [pc, #220]	; (8004288 <HAL_RCC_ClockConfig+0x1f8>)
 80041ac:	430a      	orrs	r2, r1
 80041ae:	609a      	str	r2, [r3, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80041b0:	f7ff f85c 	bl	800326c <HAL_GetTick>
 80041b4:	0003      	movs	r3, r0
 80041b6:	60fb      	str	r3, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80041b8:	e009      	b.n	80041ce <HAL_RCC_ClockConfig+0x13e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80041ba:	f7ff f857 	bl	800326c <HAL_GetTick>
 80041be:	0002      	movs	r2, r0
 80041c0:	68fb      	ldr	r3, [r7, #12]
 80041c2:	1ad3      	subs	r3, r2, r3
 80041c4:	4a2f      	ldr	r2, [pc, #188]	; (8004284 <HAL_RCC_ClockConfig+0x1f4>)
 80041c6:	4293      	cmp	r3, r2
 80041c8:	d901      	bls.n	80041ce <HAL_RCC_ClockConfig+0x13e>
      {
        return HAL_TIMEOUT;
 80041ca:	2303      	movs	r3, #3
 80041cc:	e054      	b.n	8004278 <HAL_RCC_ClockConfig+0x1e8>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80041ce:	4b2e      	ldr	r3, [pc, #184]	; (8004288 <HAL_RCC_ClockConfig+0x1f8>)
 80041d0:	689b      	ldr	r3, [r3, #8]
 80041d2:	2238      	movs	r2, #56	; 0x38
 80041d4:	401a      	ands	r2, r3
 80041d6:	687b      	ldr	r3, [r7, #4]
 80041d8:	685b      	ldr	r3, [r3, #4]
 80041da:	00db      	lsls	r3, r3, #3
 80041dc:	429a      	cmp	r2, r3
 80041de:	d1ec      	bne.n	80041ba <HAL_RCC_ClockConfig+0x12a>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80041e0:	4b27      	ldr	r3, [pc, #156]	; (8004280 <HAL_RCC_ClockConfig+0x1f0>)
 80041e2:	681b      	ldr	r3, [r3, #0]
 80041e4:	2207      	movs	r2, #7
 80041e6:	4013      	ands	r3, r2
 80041e8:	683a      	ldr	r2, [r7, #0]
 80041ea:	429a      	cmp	r2, r3
 80041ec:	d21e      	bcs.n	800422c <HAL_RCC_ClockConfig+0x19c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80041ee:	4b24      	ldr	r3, [pc, #144]	; (8004280 <HAL_RCC_ClockConfig+0x1f0>)
 80041f0:	681b      	ldr	r3, [r3, #0]
 80041f2:	2207      	movs	r2, #7
 80041f4:	4393      	bics	r3, r2
 80041f6:	0019      	movs	r1, r3
 80041f8:	4b21      	ldr	r3, [pc, #132]	; (8004280 <HAL_RCC_ClockConfig+0x1f0>)
 80041fa:	683a      	ldr	r2, [r7, #0]
 80041fc:	430a      	orrs	r2, r1
 80041fe:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8004200:	f7ff f834 	bl	800326c <HAL_GetTick>
 8004204:	0003      	movs	r3, r0
 8004206:	60fb      	str	r3, [r7, #12]

    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8004208:	e009      	b.n	800421e <HAL_RCC_ClockConfig+0x18e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800420a:	f7ff f82f 	bl	800326c <HAL_GetTick>
 800420e:	0002      	movs	r2, r0
 8004210:	68fb      	ldr	r3, [r7, #12]
 8004212:	1ad3      	subs	r3, r2, r3
 8004214:	4a1b      	ldr	r2, [pc, #108]	; (8004284 <HAL_RCC_ClockConfig+0x1f4>)
 8004216:	4293      	cmp	r3, r2
 8004218:	d901      	bls.n	800421e <HAL_RCC_ClockConfig+0x18e>
      {
        return HAL_TIMEOUT;
 800421a:	2303      	movs	r3, #3
 800421c:	e02c      	b.n	8004278 <HAL_RCC_ClockConfig+0x1e8>
    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 800421e:	4b18      	ldr	r3, [pc, #96]	; (8004280 <HAL_RCC_ClockConfig+0x1f0>)
 8004220:	681b      	ldr	r3, [r3, #0]
 8004222:	2207      	movs	r2, #7
 8004224:	4013      	ands	r3, r2
 8004226:	683a      	ldr	r2, [r7, #0]
 8004228:	429a      	cmp	r2, r3
 800422a:	d1ee      	bne.n	800420a <HAL_RCC_ClockConfig+0x17a>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800422c:	687b      	ldr	r3, [r7, #4]
 800422e:	681b      	ldr	r3, [r3, #0]
 8004230:	2204      	movs	r2, #4
 8004232:	4013      	ands	r3, r2
 8004234:	d009      	beq.n	800424a <HAL_RCC_ClockConfig+0x1ba>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 8004236:	4b14      	ldr	r3, [pc, #80]	; (8004288 <HAL_RCC_ClockConfig+0x1f8>)
 8004238:	689b      	ldr	r3, [r3, #8]
 800423a:	4a15      	ldr	r2, [pc, #84]	; (8004290 <HAL_RCC_ClockConfig+0x200>)
 800423c:	4013      	ands	r3, r2
 800423e:	0019      	movs	r1, r3
 8004240:	687b      	ldr	r3, [r7, #4]
 8004242:	68da      	ldr	r2, [r3, #12]
 8004244:	4b10      	ldr	r3, [pc, #64]	; (8004288 <HAL_RCC_ClockConfig+0x1f8>)
 8004246:	430a      	orrs	r2, r1
 8004248:	609a      	str	r2, [r3, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = (HAL_RCC_GetSysClockFreq() >> ((AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos]) & 0x1FU));
 800424a:	f000 f829 	bl	80042a0 <HAL_RCC_GetSysClockFreq>
 800424e:	0001      	movs	r1, r0
 8004250:	4b0d      	ldr	r3, [pc, #52]	; (8004288 <HAL_RCC_ClockConfig+0x1f8>)
 8004252:	689b      	ldr	r3, [r3, #8]
 8004254:	0a1b      	lsrs	r3, r3, #8
 8004256:	220f      	movs	r2, #15
 8004258:	401a      	ands	r2, r3
 800425a:	4b0e      	ldr	r3, [pc, #56]	; (8004294 <HAL_RCC_ClockConfig+0x204>)
 800425c:	0092      	lsls	r2, r2, #2
 800425e:	58d3      	ldr	r3, [r2, r3]
 8004260:	221f      	movs	r2, #31
 8004262:	4013      	ands	r3, r2
 8004264:	000a      	movs	r2, r1
 8004266:	40da      	lsrs	r2, r3
 8004268:	4b0b      	ldr	r3, [pc, #44]	; (8004298 <HAL_RCC_ClockConfig+0x208>)
 800426a:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 800426c:	4b0b      	ldr	r3, [pc, #44]	; (800429c <HAL_RCC_ClockConfig+0x20c>)
 800426e:	681b      	ldr	r3, [r3, #0]
 8004270:	0018      	movs	r0, r3
 8004272:	f7fe ff9f 	bl	80031b4 <HAL_InitTick>
 8004276:	0003      	movs	r3, r0
}
 8004278:	0018      	movs	r0, r3
 800427a:	46bd      	mov	sp, r7
 800427c:	b004      	add	sp, #16
 800427e:	bd80      	pop	{r7, pc}
 8004280:	40022000 	.word	0x40022000
 8004284:	00001388 	.word	0x00001388
 8004288:	40021000 	.word	0x40021000
 800428c:	fffff0ff 	.word	0xfffff0ff
 8004290:	ffff8fff 	.word	0xffff8fff
 8004294:	0800e9ac 	.word	0x0800e9ac
 8004298:	20000004 	.word	0x20000004
 800429c:	20000008 	.word	0x20000008

080042a0 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80042a0:	b580      	push	{r7, lr}
 80042a2:	b086      	sub	sp, #24
 80042a4:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm, hsidiv;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 80042a6:	4b3c      	ldr	r3, [pc, #240]	; (8004398 <HAL_RCC_GetSysClockFreq+0xf8>)
 80042a8:	689b      	ldr	r3, [r3, #8]
 80042aa:	2238      	movs	r2, #56	; 0x38
 80042ac:	4013      	ands	r3, r2
 80042ae:	d10f      	bne.n	80042d0 <HAL_RCC_GetSysClockFreq+0x30>
  {
    /* HSISYS can be derived for HSI16 */
    hsidiv = (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos));
 80042b0:	4b39      	ldr	r3, [pc, #228]	; (8004398 <HAL_RCC_GetSysClockFreq+0xf8>)
 80042b2:	681b      	ldr	r3, [r3, #0]
 80042b4:	0adb      	lsrs	r3, r3, #11
 80042b6:	2207      	movs	r2, #7
 80042b8:	4013      	ands	r3, r2
 80042ba:	2201      	movs	r2, #1
 80042bc:	409a      	lsls	r2, r3
 80042be:	0013      	movs	r3, r2
 80042c0:	603b      	str	r3, [r7, #0]

    /* HSI used as system clock source */
    sysclockfreq = (HSI_VALUE / hsidiv);
 80042c2:	6839      	ldr	r1, [r7, #0]
 80042c4:	4835      	ldr	r0, [pc, #212]	; (800439c <HAL_RCC_GetSysClockFreq+0xfc>)
 80042c6:	f7fb ff39 	bl	800013c <__udivsi3>
 80042ca:	0003      	movs	r3, r0
 80042cc:	613b      	str	r3, [r7, #16]
 80042ce:	e05d      	b.n	800438c <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 80042d0:	4b31      	ldr	r3, [pc, #196]	; (8004398 <HAL_RCC_GetSysClockFreq+0xf8>)
 80042d2:	689b      	ldr	r3, [r3, #8]
 80042d4:	2238      	movs	r2, #56	; 0x38
 80042d6:	4013      	ands	r3, r2
 80042d8:	2b08      	cmp	r3, #8
 80042da:	d102      	bne.n	80042e2 <HAL_RCC_GetSysClockFreq+0x42>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 80042dc:	4b30      	ldr	r3, [pc, #192]	; (80043a0 <HAL_RCC_GetSysClockFreq+0x100>)
 80042de:	613b      	str	r3, [r7, #16]
 80042e0:	e054      	b.n	800438c <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80042e2:	4b2d      	ldr	r3, [pc, #180]	; (8004398 <HAL_RCC_GetSysClockFreq+0xf8>)
 80042e4:	689b      	ldr	r3, [r3, #8]
 80042e6:	2238      	movs	r2, #56	; 0x38
 80042e8:	4013      	ands	r3, r2
 80042ea:	2b10      	cmp	r3, #16
 80042ec:	d138      	bne.n	8004360 <HAL_RCC_GetSysClockFreq+0xc0>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC);
 80042ee:	4b2a      	ldr	r3, [pc, #168]	; (8004398 <HAL_RCC_GetSysClockFreq+0xf8>)
 80042f0:	68db      	ldr	r3, [r3, #12]
 80042f2:	2203      	movs	r2, #3
 80042f4:	4013      	ands	r3, r2
 80042f6:	60fb      	str	r3, [r7, #12]
    pllm = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 80042f8:	4b27      	ldr	r3, [pc, #156]	; (8004398 <HAL_RCC_GetSysClockFreq+0xf8>)
 80042fa:	68db      	ldr	r3, [r3, #12]
 80042fc:	091b      	lsrs	r3, r3, #4
 80042fe:	2207      	movs	r2, #7
 8004300:	4013      	ands	r3, r2
 8004302:	3301      	adds	r3, #1
 8004304:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8004306:	68fb      	ldr	r3, [r7, #12]
 8004308:	2b03      	cmp	r3, #3
 800430a:	d10d      	bne.n	8004328 <HAL_RCC_GetSysClockFreq+0x88>
    {
      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = (HSE_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 800430c:	68b9      	ldr	r1, [r7, #8]
 800430e:	4824      	ldr	r0, [pc, #144]	; (80043a0 <HAL_RCC_GetSysClockFreq+0x100>)
 8004310:	f7fb ff14 	bl	800013c <__udivsi3>
 8004314:	0003      	movs	r3, r0
 8004316:	0019      	movs	r1, r3
 8004318:	4b1f      	ldr	r3, [pc, #124]	; (8004398 <HAL_RCC_GetSysClockFreq+0xf8>)
 800431a:	68db      	ldr	r3, [r3, #12]
 800431c:	0a1b      	lsrs	r3, r3, #8
 800431e:	227f      	movs	r2, #127	; 0x7f
 8004320:	4013      	ands	r3, r2
 8004322:	434b      	muls	r3, r1
 8004324:	617b      	str	r3, [r7, #20]
        break;
 8004326:	e00d      	b.n	8004344 <HAL_RCC_GetSysClockFreq+0xa4>

      case RCC_PLLSOURCE_HSI:  /* HSI16 used as PLL clock source */
      default:                 /* HSI16 used as PLL clock source */
        pllvco = (HSI_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos) ;
 8004328:	68b9      	ldr	r1, [r7, #8]
 800432a:	481c      	ldr	r0, [pc, #112]	; (800439c <HAL_RCC_GetSysClockFreq+0xfc>)
 800432c:	f7fb ff06 	bl	800013c <__udivsi3>
 8004330:	0003      	movs	r3, r0
 8004332:	0019      	movs	r1, r3
 8004334:	4b18      	ldr	r3, [pc, #96]	; (8004398 <HAL_RCC_GetSysClockFreq+0xf8>)
 8004336:	68db      	ldr	r3, [r3, #12]
 8004338:	0a1b      	lsrs	r3, r3, #8
 800433a:	227f      	movs	r2, #127	; 0x7f
 800433c:	4013      	ands	r3, r2
 800433e:	434b      	muls	r3, r1
 8004340:	617b      	str	r3, [r7, #20]
        break;
 8004342:	46c0      	nop			; (mov r8, r8)
    }
    pllr = (((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U);
 8004344:	4b14      	ldr	r3, [pc, #80]	; (8004398 <HAL_RCC_GetSysClockFreq+0xf8>)
 8004346:	68db      	ldr	r3, [r3, #12]
 8004348:	0f5b      	lsrs	r3, r3, #29
 800434a:	2207      	movs	r2, #7
 800434c:	4013      	ands	r3, r2
 800434e:	3301      	adds	r3, #1
 8004350:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco / pllr;
 8004352:	6879      	ldr	r1, [r7, #4]
 8004354:	6978      	ldr	r0, [r7, #20]
 8004356:	f7fb fef1 	bl	800013c <__udivsi3>
 800435a:	0003      	movs	r3, r0
 800435c:	613b      	str	r3, [r7, #16]
 800435e:	e015      	b.n	800438c <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSE)
 8004360:	4b0d      	ldr	r3, [pc, #52]	; (8004398 <HAL_RCC_GetSysClockFreq+0xf8>)
 8004362:	689b      	ldr	r3, [r3, #8]
 8004364:	2238      	movs	r2, #56	; 0x38
 8004366:	4013      	ands	r3, r2
 8004368:	2b20      	cmp	r3, #32
 800436a:	d103      	bne.n	8004374 <HAL_RCC_GetSysClockFreq+0xd4>
  {
    /* LSE used as system clock source */
    sysclockfreq = LSE_VALUE;
 800436c:	2380      	movs	r3, #128	; 0x80
 800436e:	021b      	lsls	r3, r3, #8
 8004370:	613b      	str	r3, [r7, #16]
 8004372:	e00b      	b.n	800438c <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSI)
 8004374:	4b08      	ldr	r3, [pc, #32]	; (8004398 <HAL_RCC_GetSysClockFreq+0xf8>)
 8004376:	689b      	ldr	r3, [r3, #8]
 8004378:	2238      	movs	r2, #56	; 0x38
 800437a:	4013      	ands	r3, r2
 800437c:	2b18      	cmp	r3, #24
 800437e:	d103      	bne.n	8004388 <HAL_RCC_GetSysClockFreq+0xe8>
  {
    /* LSI used as system clock source */
    sysclockfreq = LSI_VALUE;
 8004380:	23fa      	movs	r3, #250	; 0xfa
 8004382:	01db      	lsls	r3, r3, #7
 8004384:	613b      	str	r3, [r7, #16]
 8004386:	e001      	b.n	800438c <HAL_RCC_GetSysClockFreq+0xec>
  }
  else
  {
    sysclockfreq = 0U;
 8004388:	2300      	movs	r3, #0
 800438a:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 800438c:	693b      	ldr	r3, [r7, #16]
}
 800438e:	0018      	movs	r0, r3
 8004390:	46bd      	mov	sp, r7
 8004392:	b006      	add	sp, #24
 8004394:	bd80      	pop	{r7, pc}
 8004396:	46c0      	nop			; (mov r8, r8)
 8004398:	40021000 	.word	0x40021000
 800439c:	00f42400 	.word	0x00f42400
 80043a0:	007a1200 	.word	0x007a1200

080043a4 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80043a4:	b580      	push	{r7, lr}
 80043a6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80043a8:	4b02      	ldr	r3, [pc, #8]	; (80043b4 <HAL_RCC_GetHCLKFreq+0x10>)
 80043aa:	681b      	ldr	r3, [r3, #0]
}
 80043ac:	0018      	movs	r0, r3
 80043ae:	46bd      	mov	sp, r7
 80043b0:	bd80      	pop	{r7, pc}
 80043b2:	46c0      	nop			; (mov r8, r8)
 80043b4:	20000004 	.word	0x20000004

080043b8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80043b8:	b5b0      	push	{r4, r5, r7, lr}
 80043ba:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_PCLK1_FREQ(HAL_RCC_GetHCLKFreq(), LL_RCC_GetAPB1Prescaler())));
 80043bc:	f7ff fff2 	bl	80043a4 <HAL_RCC_GetHCLKFreq>
 80043c0:	0004      	movs	r4, r0
 80043c2:	f7ff faf9 	bl	80039b8 <LL_RCC_GetAPB1Prescaler>
 80043c6:	0003      	movs	r3, r0
 80043c8:	0b1a      	lsrs	r2, r3, #12
 80043ca:	4b05      	ldr	r3, [pc, #20]	; (80043e0 <HAL_RCC_GetPCLK1Freq+0x28>)
 80043cc:	0092      	lsls	r2, r2, #2
 80043ce:	58d3      	ldr	r3, [r2, r3]
 80043d0:	221f      	movs	r2, #31
 80043d2:	4013      	ands	r3, r2
 80043d4:	40dc      	lsrs	r4, r3
 80043d6:	0023      	movs	r3, r4
}
 80043d8:	0018      	movs	r0, r3
 80043da:	46bd      	mov	sp, r7
 80043dc:	bdb0      	pop	{r4, r5, r7, pc}
 80043de:	46c0      	nop			; (mov r8, r8)
 80043e0:	0800e9ec 	.word	0x0800e9ec

080043e4 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80043e4:	b580      	push	{r7, lr}
 80043e6:	b086      	sub	sp, #24
 80043e8:	af00      	add	r7, sp, #0
 80043ea:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret    = HAL_OK;   /* Intermediate status */
 80043ec:	2313      	movs	r3, #19
 80043ee:	18fb      	adds	r3, r7, r3
 80043f0:	2200      	movs	r2, #0
 80043f2:	701a      	strb	r2, [r3, #0]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 80043f4:	2312      	movs	r3, #18
 80043f6:	18fb      	adds	r3, r7, r3
 80043f8:	2200      	movs	r2, #0
 80043fa:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80043fc:	687b      	ldr	r3, [r7, #4]
 80043fe:	681a      	ldr	r2, [r3, #0]
 8004400:	2380      	movs	r3, #128	; 0x80
 8004402:	029b      	lsls	r3, r3, #10
 8004404:	4013      	ands	r3, r2
 8004406:	d100      	bne.n	800440a <HAL_RCCEx_PeriphCLKConfig+0x26>
 8004408:	e0ad      	b.n	8004566 <HAL_RCCEx_PeriphCLKConfig+0x182>
  {
    FlagStatus       pwrclkchanged = RESET;
 800440a:	2011      	movs	r0, #17
 800440c:	183b      	adds	r3, r7, r0
 800440e:	2200      	movs	r2, #0
 8004410:	701a      	strb	r2, [r3, #0]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004412:	4b47      	ldr	r3, [pc, #284]	; (8004530 <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 8004414:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8004416:	2380      	movs	r3, #128	; 0x80
 8004418:	055b      	lsls	r3, r3, #21
 800441a:	4013      	ands	r3, r2
 800441c:	d110      	bne.n	8004440 <HAL_RCCEx_PeriphCLKConfig+0x5c>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800441e:	4b44      	ldr	r3, [pc, #272]	; (8004530 <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 8004420:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8004422:	4b43      	ldr	r3, [pc, #268]	; (8004530 <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 8004424:	2180      	movs	r1, #128	; 0x80
 8004426:	0549      	lsls	r1, r1, #21
 8004428:	430a      	orrs	r2, r1
 800442a:	63da      	str	r2, [r3, #60]	; 0x3c
 800442c:	4b40      	ldr	r3, [pc, #256]	; (8004530 <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 800442e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8004430:	2380      	movs	r3, #128	; 0x80
 8004432:	055b      	lsls	r3, r3, #21
 8004434:	4013      	ands	r3, r2
 8004436:	60bb      	str	r3, [r7, #8]
 8004438:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800443a:	183b      	adds	r3, r7, r0
 800443c:	2201      	movs	r2, #1
 800443e:	701a      	strb	r2, [r3, #0]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8004440:	4b3c      	ldr	r3, [pc, #240]	; (8004534 <HAL_RCCEx_PeriphCLKConfig+0x150>)
 8004442:	681a      	ldr	r2, [r3, #0]
 8004444:	4b3b      	ldr	r3, [pc, #236]	; (8004534 <HAL_RCCEx_PeriphCLKConfig+0x150>)
 8004446:	2180      	movs	r1, #128	; 0x80
 8004448:	0049      	lsls	r1, r1, #1
 800444a:	430a      	orrs	r2, r1
 800444c:	601a      	str	r2, [r3, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800444e:	f7fe ff0d 	bl	800326c <HAL_GetTick>
 8004452:	0003      	movs	r3, r0
 8004454:	60fb      	str	r3, [r7, #12]

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8004456:	e00b      	b.n	8004470 <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004458:	f7fe ff08 	bl	800326c <HAL_GetTick>
 800445c:	0002      	movs	r2, r0
 800445e:	68fb      	ldr	r3, [r7, #12]
 8004460:	1ad3      	subs	r3, r2, r3
 8004462:	2b02      	cmp	r3, #2
 8004464:	d904      	bls.n	8004470 <HAL_RCCEx_PeriphCLKConfig+0x8c>
      {
        ret = HAL_TIMEOUT;
 8004466:	2313      	movs	r3, #19
 8004468:	18fb      	adds	r3, r7, r3
 800446a:	2203      	movs	r2, #3
 800446c:	701a      	strb	r2, [r3, #0]
        break;
 800446e:	e005      	b.n	800447c <HAL_RCCEx_PeriphCLKConfig+0x98>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8004470:	4b30      	ldr	r3, [pc, #192]	; (8004534 <HAL_RCCEx_PeriphCLKConfig+0x150>)
 8004472:	681a      	ldr	r2, [r3, #0]
 8004474:	2380      	movs	r3, #128	; 0x80
 8004476:	005b      	lsls	r3, r3, #1
 8004478:	4013      	ands	r3, r2
 800447a:	d0ed      	beq.n	8004458 <HAL_RCCEx_PeriphCLKConfig+0x74>
      }
    }

    if (ret == HAL_OK)
 800447c:	2313      	movs	r3, #19
 800447e:	18fb      	adds	r3, r7, r3
 8004480:	781b      	ldrb	r3, [r3, #0]
 8004482:	2b00      	cmp	r3, #0
 8004484:	d15e      	bne.n	8004544 <HAL_RCCEx_PeriphCLKConfig+0x160>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8004486:	4b2a      	ldr	r3, [pc, #168]	; (8004530 <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 8004488:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800448a:	23c0      	movs	r3, #192	; 0xc0
 800448c:	009b      	lsls	r3, r3, #2
 800448e:	4013      	ands	r3, r2
 8004490:	617b      	str	r3, [r7, #20]

      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8004492:	697b      	ldr	r3, [r7, #20]
 8004494:	2b00      	cmp	r3, #0
 8004496:	d019      	beq.n	80044cc <HAL_RCCEx_PeriphCLKConfig+0xe8>
 8004498:	687b      	ldr	r3, [r7, #4]
 800449a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800449c:	697a      	ldr	r2, [r7, #20]
 800449e:	429a      	cmp	r2, r3
 80044a0:	d014      	beq.n	80044cc <HAL_RCCEx_PeriphCLKConfig+0xe8>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 80044a2:	4b23      	ldr	r3, [pc, #140]	; (8004530 <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 80044a4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80044a6:	4a24      	ldr	r2, [pc, #144]	; (8004538 <HAL_RCCEx_PeriphCLKConfig+0x154>)
 80044a8:	4013      	ands	r3, r2
 80044aa:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 80044ac:	4b20      	ldr	r3, [pc, #128]	; (8004530 <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 80044ae:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 80044b0:	4b1f      	ldr	r3, [pc, #124]	; (8004530 <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 80044b2:	2180      	movs	r1, #128	; 0x80
 80044b4:	0249      	lsls	r1, r1, #9
 80044b6:	430a      	orrs	r2, r1
 80044b8:	65da      	str	r2, [r3, #92]	; 0x5c
        __HAL_RCC_BACKUPRESET_RELEASE();
 80044ba:	4b1d      	ldr	r3, [pc, #116]	; (8004530 <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 80044bc:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 80044be:	4b1c      	ldr	r3, [pc, #112]	; (8004530 <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 80044c0:	491e      	ldr	r1, [pc, #120]	; (800453c <HAL_RCCEx_PeriphCLKConfig+0x158>)
 80044c2:	400a      	ands	r2, r1
 80044c4:	65da      	str	r2, [r3, #92]	; 0x5c
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 80044c6:	4b1a      	ldr	r3, [pc, #104]	; (8004530 <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 80044c8:	697a      	ldr	r2, [r7, #20]
 80044ca:	65da      	str	r2, [r3, #92]	; 0x5c
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 80044cc:	697b      	ldr	r3, [r7, #20]
 80044ce:	2201      	movs	r2, #1
 80044d0:	4013      	ands	r3, r2
 80044d2:	d016      	beq.n	8004502 <HAL_RCCEx_PeriphCLKConfig+0x11e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80044d4:	f7fe feca 	bl	800326c <HAL_GetTick>
 80044d8:	0003      	movs	r3, r0
 80044da:	60fb      	str	r3, [r7, #12]

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80044dc:	e00c      	b.n	80044f8 <HAL_RCCEx_PeriphCLKConfig+0x114>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80044de:	f7fe fec5 	bl	800326c <HAL_GetTick>
 80044e2:	0002      	movs	r2, r0
 80044e4:	68fb      	ldr	r3, [r7, #12]
 80044e6:	1ad3      	subs	r3, r2, r3
 80044e8:	4a15      	ldr	r2, [pc, #84]	; (8004540 <HAL_RCCEx_PeriphCLKConfig+0x15c>)
 80044ea:	4293      	cmp	r3, r2
 80044ec:	d904      	bls.n	80044f8 <HAL_RCCEx_PeriphCLKConfig+0x114>
          {
            ret = HAL_TIMEOUT;
 80044ee:	2313      	movs	r3, #19
 80044f0:	18fb      	adds	r3, r7, r3
 80044f2:	2203      	movs	r2, #3
 80044f4:	701a      	strb	r2, [r3, #0]
            break;
 80044f6:	e004      	b.n	8004502 <HAL_RCCEx_PeriphCLKConfig+0x11e>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80044f8:	4b0d      	ldr	r3, [pc, #52]	; (8004530 <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 80044fa:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80044fc:	2202      	movs	r2, #2
 80044fe:	4013      	ands	r3, r2
 8004500:	d0ed      	beq.n	80044de <HAL_RCCEx_PeriphCLKConfig+0xfa>
          }
        }
      }

      if (ret == HAL_OK)
 8004502:	2313      	movs	r3, #19
 8004504:	18fb      	adds	r3, r7, r3
 8004506:	781b      	ldrb	r3, [r3, #0]
 8004508:	2b00      	cmp	r3, #0
 800450a:	d10a      	bne.n	8004522 <HAL_RCCEx_PeriphCLKConfig+0x13e>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800450c:	4b08      	ldr	r3, [pc, #32]	; (8004530 <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 800450e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004510:	4a09      	ldr	r2, [pc, #36]	; (8004538 <HAL_RCCEx_PeriphCLKConfig+0x154>)
 8004512:	4013      	ands	r3, r2
 8004514:	0019      	movs	r1, r3
 8004516:	687b      	ldr	r3, [r7, #4]
 8004518:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800451a:	4b05      	ldr	r3, [pc, #20]	; (8004530 <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 800451c:	430a      	orrs	r2, r1
 800451e:	65da      	str	r2, [r3, #92]	; 0x5c
 8004520:	e016      	b.n	8004550 <HAL_RCCEx_PeriphCLKConfig+0x16c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8004522:	2312      	movs	r3, #18
 8004524:	18fb      	adds	r3, r7, r3
 8004526:	2213      	movs	r2, #19
 8004528:	18ba      	adds	r2, r7, r2
 800452a:	7812      	ldrb	r2, [r2, #0]
 800452c:	701a      	strb	r2, [r3, #0]
 800452e:	e00f      	b.n	8004550 <HAL_RCCEx_PeriphCLKConfig+0x16c>
 8004530:	40021000 	.word	0x40021000
 8004534:	40007000 	.word	0x40007000
 8004538:	fffffcff 	.word	0xfffffcff
 800453c:	fffeffff 	.word	0xfffeffff
 8004540:	00001388 	.word	0x00001388
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004544:	2312      	movs	r3, #18
 8004546:	18fb      	adds	r3, r7, r3
 8004548:	2213      	movs	r2, #19
 800454a:	18ba      	adds	r2, r7, r2
 800454c:	7812      	ldrb	r2, [r2, #0]
 800454e:	701a      	strb	r2, [r3, #0]
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8004550:	2311      	movs	r3, #17
 8004552:	18fb      	adds	r3, r7, r3
 8004554:	781b      	ldrb	r3, [r3, #0]
 8004556:	2b01      	cmp	r3, #1
 8004558:	d105      	bne.n	8004566 <HAL_RCCEx_PeriphCLKConfig+0x182>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800455a:	4bb6      	ldr	r3, [pc, #728]	; (8004834 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 800455c:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800455e:	4bb5      	ldr	r3, [pc, #724]	; (8004834 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8004560:	49b5      	ldr	r1, [pc, #724]	; (8004838 <HAL_RCCEx_PeriphCLKConfig+0x454>)
 8004562:	400a      	ands	r2, r1
 8004564:	63da      	str	r2, [r3, #60]	; 0x3c
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8004566:	687b      	ldr	r3, [r7, #4]
 8004568:	681b      	ldr	r3, [r3, #0]
 800456a:	2201      	movs	r2, #1
 800456c:	4013      	ands	r3, r2
 800456e:	d009      	beq.n	8004584 <HAL_RCCEx_PeriphCLKConfig+0x1a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8004570:	4bb0      	ldr	r3, [pc, #704]	; (8004834 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8004572:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004574:	2203      	movs	r2, #3
 8004576:	4393      	bics	r3, r2
 8004578:	0019      	movs	r1, r3
 800457a:	687b      	ldr	r3, [r7, #4]
 800457c:	685a      	ldr	r2, [r3, #4]
 800457e:	4bad      	ldr	r3, [pc, #692]	; (8004834 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8004580:	430a      	orrs	r2, r1
 8004582:	655a      	str	r2, [r3, #84]	; 0x54
  }

#if defined(RCC_CCIPR_USART2SEL)
  /*-------------------------- USART2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8004584:	687b      	ldr	r3, [r7, #4]
 8004586:	681b      	ldr	r3, [r3, #0]
 8004588:	2202      	movs	r2, #2
 800458a:	4013      	ands	r3, r2
 800458c:	d009      	beq.n	80045a2 <HAL_RCCEx_PeriphCLKConfig+0x1be>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 800458e:	4ba9      	ldr	r3, [pc, #676]	; (8004834 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8004590:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004592:	220c      	movs	r2, #12
 8004594:	4393      	bics	r3, r2
 8004596:	0019      	movs	r1, r3
 8004598:	687b      	ldr	r3, [r7, #4]
 800459a:	689a      	ldr	r2, [r3, #8]
 800459c:	4ba5      	ldr	r3, [pc, #660]	; (8004834 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 800459e:	430a      	orrs	r2, r1
 80045a0:	655a      	str	r2, [r3, #84]	; 0x54
  }
#endif /* RCC_CCIPR_USART2SEL */

#if defined(RCC_CCIPR_USART3SEL)
  /*-------------------------- USART3 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 80045a2:	687b      	ldr	r3, [r7, #4]
 80045a4:	681b      	ldr	r3, [r3, #0]
 80045a6:	2204      	movs	r2, #4
 80045a8:	4013      	ands	r3, r2
 80045aa:	d009      	beq.n	80045c0 <HAL_RCCEx_PeriphCLKConfig+0x1dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 80045ac:	4ba1      	ldr	r3, [pc, #644]	; (8004834 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 80045ae:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80045b0:	2230      	movs	r2, #48	; 0x30
 80045b2:	4393      	bics	r3, r2
 80045b4:	0019      	movs	r1, r3
 80045b6:	687b      	ldr	r3, [r7, #4]
 80045b8:	68da      	ldr	r2, [r3, #12]
 80045ba:	4b9e      	ldr	r3, [pc, #632]	; (8004834 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 80045bc:	430a      	orrs	r2, r1
 80045be:	655a      	str	r2, [r3, #84]	; 0x54
  }
#endif /* RCC_CCIPR_USART3SEL */

#if defined(LPUART1)
  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80045c0:	687b      	ldr	r3, [r7, #4]
 80045c2:	681b      	ldr	r3, [r3, #0]
 80045c4:	2210      	movs	r2, #16
 80045c6:	4013      	ands	r3, r2
 80045c8:	d009      	beq.n	80045de <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 80045ca:	4b9a      	ldr	r3, [pc, #616]	; (8004834 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 80045cc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80045ce:	4a9b      	ldr	r2, [pc, #620]	; (800483c <HAL_RCCEx_PeriphCLKConfig+0x458>)
 80045d0:	4013      	ands	r3, r2
 80045d2:	0019      	movs	r1, r3
 80045d4:	687b      	ldr	r3, [r7, #4]
 80045d6:	691a      	ldr	r2, [r3, #16]
 80045d8:	4b96      	ldr	r3, [pc, #600]	; (8004834 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 80045da:	430a      	orrs	r2, r1
 80045dc:	655a      	str	r2, [r3, #84]	; 0x54
  }
#endif /* LPUART1 */

#if defined(LPUART2)
  /*-------------------------- LPUART2 clock source configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART2) == RCC_PERIPHCLK_LPUART2)
 80045de:	687b      	ldr	r3, [r7, #4]
 80045e0:	681a      	ldr	r2, [r3, #0]
 80045e2:	2380      	movs	r3, #128	; 0x80
 80045e4:	015b      	lsls	r3, r3, #5
 80045e6:	4013      	ands	r3, r2
 80045e8:	d009      	beq.n	80045fe <HAL_RCCEx_PeriphCLKConfig+0x21a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART2CLKSOURCE(PeriphClkInit->Lpuart2ClockSelection));

    /* Configure the LPUART clock source */
    __HAL_RCC_LPUART2_CONFIG(PeriphClkInit->Lpuart2ClockSelection);
 80045ea:	4b92      	ldr	r3, [pc, #584]	; (8004834 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 80045ec:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80045ee:	4a94      	ldr	r2, [pc, #592]	; (8004840 <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 80045f0:	4013      	ands	r3, r2
 80045f2:	0019      	movs	r1, r3
 80045f4:	687b      	ldr	r3, [r7, #4]
 80045f6:	695a      	ldr	r2, [r3, #20]
 80045f8:	4b8e      	ldr	r3, [pc, #568]	; (8004834 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 80045fa:	430a      	orrs	r2, r1
 80045fc:	655a      	str	r2, [r3, #84]	; 0x54
  }
#endif /* LPUART2 */

#if defined(RCC_CCIPR_LPTIM1SEL)
  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 80045fe:	687b      	ldr	r3, [r7, #4]
 8004600:	681a      	ldr	r2, [r3, #0]
 8004602:	2380      	movs	r3, #128	; 0x80
 8004604:	009b      	lsls	r3, r3, #2
 8004606:	4013      	ands	r3, r2
 8004608:	d009      	beq.n	800461e <HAL_RCCEx_PeriphCLKConfig+0x23a>
  {
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800460a:	4b8a      	ldr	r3, [pc, #552]	; (8004834 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 800460c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800460e:	4a8d      	ldr	r2, [pc, #564]	; (8004844 <HAL_RCCEx_PeriphCLKConfig+0x460>)
 8004610:	4013      	ands	r3, r2
 8004612:	0019      	movs	r1, r3
 8004614:	687b      	ldr	r3, [r7, #4]
 8004616:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8004618:	4b86      	ldr	r3, [pc, #536]	; (8004834 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 800461a:	430a      	orrs	r2, r1
 800461c:	655a      	str	r2, [r3, #84]	; 0x54
  }
#endif /* RCC_CCIPR_LPTIM1SEL */

#if defined(RCC_CCIPR_LPTIM2SEL)
  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 800461e:	687b      	ldr	r3, [r7, #4]
 8004620:	681a      	ldr	r2, [r3, #0]
 8004622:	2380      	movs	r3, #128	; 0x80
 8004624:	00db      	lsls	r3, r3, #3
 8004626:	4013      	ands	r3, r2
 8004628:	d009      	beq.n	800463e <HAL_RCCEx_PeriphCLKConfig+0x25a>
  {
    assert_param(IS_RCC_LPTIM2CLKSOURCE(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 800462a:	4b82      	ldr	r3, [pc, #520]	; (8004834 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 800462c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800462e:	4a86      	ldr	r2, [pc, #536]	; (8004848 <HAL_RCCEx_PeriphCLKConfig+0x464>)
 8004630:	4013      	ands	r3, r2
 8004632:	0019      	movs	r1, r3
 8004634:	687b      	ldr	r3, [r7, #4]
 8004636:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004638:	4b7e      	ldr	r3, [pc, #504]	; (8004834 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 800463a:	430a      	orrs	r2, r1
 800463c:	655a      	str	r2, [r3, #84]	; 0x54
  }
#endif /* RCC_CCIPR_LPTIM2SEL */

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800463e:	687b      	ldr	r3, [r7, #4]
 8004640:	681b      	ldr	r3, [r3, #0]
 8004642:	2220      	movs	r2, #32
 8004644:	4013      	ands	r3, r2
 8004646:	d009      	beq.n	800465c <HAL_RCCEx_PeriphCLKConfig+0x278>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8004648:	4b7a      	ldr	r3, [pc, #488]	; (8004834 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 800464a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800464c:	4a7f      	ldr	r2, [pc, #508]	; (800484c <HAL_RCCEx_PeriphCLKConfig+0x468>)
 800464e:	4013      	ands	r3, r2
 8004650:	0019      	movs	r1, r3
 8004652:	687b      	ldr	r3, [r7, #4]
 8004654:	699a      	ldr	r2, [r3, #24]
 8004656:	4b77      	ldr	r3, [pc, #476]	; (8004834 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8004658:	430a      	orrs	r2, r1
 800465a:	655a      	str	r2, [r3, #84]	; 0x54
  }

#if defined(RCC_CCIPR_I2C2SEL)
  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 800465c:	687b      	ldr	r3, [r7, #4]
 800465e:	681b      	ldr	r3, [r3, #0]
 8004660:	2240      	movs	r2, #64	; 0x40
 8004662:	4013      	ands	r3, r2
 8004664:	d009      	beq.n	800467a <HAL_RCCEx_PeriphCLKConfig+0x296>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8004666:	4b73      	ldr	r3, [pc, #460]	; (8004834 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8004668:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800466a:	4a79      	ldr	r2, [pc, #484]	; (8004850 <HAL_RCCEx_PeriphCLKConfig+0x46c>)
 800466c:	4013      	ands	r3, r2
 800466e:	0019      	movs	r1, r3
 8004670:	687b      	ldr	r3, [r7, #4]
 8004672:	69da      	ldr	r2, [r3, #28]
 8004674:	4b6f      	ldr	r3, [pc, #444]	; (8004834 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8004676:	430a      	orrs	r2, r1
 8004678:	655a      	str	r2, [r3, #84]	; 0x54
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
    }
  }
#endif /* RNG */
  /*-------------------------- ADC clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 800467a:	687b      	ldr	r3, [r7, #4]
 800467c:	681a      	ldr	r2, [r3, #0]
 800467e:	2380      	movs	r3, #128	; 0x80
 8004680:	01db      	lsls	r3, r3, #7
 8004682:	4013      	ands	r3, r2
 8004684:	d015      	beq.n	80046b2 <HAL_RCCEx_PeriphCLKConfig+0x2ce>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8004686:	4b6b      	ldr	r3, [pc, #428]	; (8004834 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8004688:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800468a:	009b      	lsls	r3, r3, #2
 800468c:	0899      	lsrs	r1, r3, #2
 800468e:	687b      	ldr	r3, [r7, #4]
 8004690:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004692:	4b68      	ldr	r3, [pc, #416]	; (8004834 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8004694:	430a      	orrs	r2, r1
 8004696:	655a      	str	r2, [r3, #84]	; 0x54

    if (PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLADC)
 8004698:	687b      	ldr	r3, [r7, #4]
 800469a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800469c:	2380      	movs	r3, #128	; 0x80
 800469e:	05db      	lsls	r3, r3, #23
 80046a0:	429a      	cmp	r2, r3
 80046a2:	d106      	bne.n	80046b2 <HAL_RCCEx_PeriphCLKConfig+0x2ce>
    {
      /* Enable PLLPCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLPCLK);
 80046a4:	4b63      	ldr	r3, [pc, #396]	; (8004834 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 80046a6:	68da      	ldr	r2, [r3, #12]
 80046a8:	4b62      	ldr	r3, [pc, #392]	; (8004834 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 80046aa:	2180      	movs	r1, #128	; 0x80
 80046ac:	0249      	lsls	r1, r1, #9
 80046ae:	430a      	orrs	r2, r1
 80046b0:	60da      	str	r2, [r3, #12]
    }
  }

#if defined(CEC)
  /*-------------------------- CEC clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 80046b2:	687b      	ldr	r3, [r7, #4]
 80046b4:	681a      	ldr	r2, [r3, #0]
 80046b6:	2380      	movs	r3, #128	; 0x80
 80046b8:	031b      	lsls	r3, r3, #12
 80046ba:	4013      	ands	r3, r2
 80046bc:	d009      	beq.n	80046d2 <HAL_RCCEx_PeriphCLKConfig+0x2ee>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 80046be:	4b5d      	ldr	r3, [pc, #372]	; (8004834 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 80046c0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80046c2:	2240      	movs	r2, #64	; 0x40
 80046c4:	4393      	bics	r3, r2
 80046c6:	0019      	movs	r1, r3
 80046c8:	687b      	ldr	r3, [r7, #4]
 80046ca:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80046cc:	4b59      	ldr	r3, [pc, #356]	; (8004834 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 80046ce:	430a      	orrs	r2, r1
 80046d0:	655a      	str	r2, [r3, #84]	; 0x54
  }
#endif /* CEC */

#if defined(RCC_CCIPR_TIM1SEL)
  /*-------------------------- TIM1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM1) == RCC_PERIPHCLK_TIM1)
 80046d2:	687b      	ldr	r3, [r7, #4]
 80046d4:	681a      	ldr	r2, [r3, #0]
 80046d6:	2380      	movs	r3, #128	; 0x80
 80046d8:	039b      	lsls	r3, r3, #14
 80046da:	4013      	ands	r3, r2
 80046dc:	d016      	beq.n	800470c <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM1CLKSOURCE(PeriphClkInit->Tim1ClockSelection));

    /* Configure the TIM1 clock source */
    __HAL_RCC_TIM1_CONFIG(PeriphClkInit->Tim1ClockSelection);
 80046de:	4b55      	ldr	r3, [pc, #340]	; (8004834 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 80046e0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80046e2:	4a5c      	ldr	r2, [pc, #368]	; (8004854 <HAL_RCCEx_PeriphCLKConfig+0x470>)
 80046e4:	4013      	ands	r3, r2
 80046e6:	0019      	movs	r1, r3
 80046e8:	687b      	ldr	r3, [r7, #4]
 80046ea:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80046ec:	4b51      	ldr	r3, [pc, #324]	; (8004834 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 80046ee:	430a      	orrs	r2, r1
 80046f0:	655a      	str	r2, [r3, #84]	; 0x54

    if (PeriphClkInit->Tim1ClockSelection == RCC_TIM1CLKSOURCE_PLL)
 80046f2:	687b      	ldr	r3, [r7, #4]
 80046f4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80046f6:	2380      	movs	r3, #128	; 0x80
 80046f8:	03db      	lsls	r3, r3, #15
 80046fa:	429a      	cmp	r2, r3
 80046fc:	d106      	bne.n	800470c <HAL_RCCEx_PeriphCLKConfig+0x328>
    {
      /* Enable PLLQCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
 80046fe:	4b4d      	ldr	r3, [pc, #308]	; (8004834 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8004700:	68da      	ldr	r2, [r3, #12]
 8004702:	4b4c      	ldr	r3, [pc, #304]	; (8004834 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8004704:	2180      	movs	r1, #128	; 0x80
 8004706:	0449      	lsls	r1, r1, #17
 8004708:	430a      	orrs	r2, r1
 800470a:	60da      	str	r2, [r3, #12]
  }
#endif /* RCC_CCIPR_TIM1SEL */

#if defined(RCC_CCIPR_TIM15SEL)
  /*-------------------------- TIM15 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM15) == RCC_PERIPHCLK_TIM15)
 800470c:	687b      	ldr	r3, [r7, #4]
 800470e:	681a      	ldr	r2, [r3, #0]
 8004710:	2380      	movs	r3, #128	; 0x80
 8004712:	03db      	lsls	r3, r3, #15
 8004714:	4013      	ands	r3, r2
 8004716:	d016      	beq.n	8004746 <HAL_RCCEx_PeriphCLKConfig+0x362>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM15CLKSOURCE(PeriphClkInit->Tim15ClockSelection));

    /* Configure the TIM15 clock source */
    __HAL_RCC_TIM15_CONFIG(PeriphClkInit->Tim15ClockSelection);
 8004718:	4b46      	ldr	r3, [pc, #280]	; (8004834 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 800471a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800471c:	4a4e      	ldr	r2, [pc, #312]	; (8004858 <HAL_RCCEx_PeriphCLKConfig+0x474>)
 800471e:	4013      	ands	r3, r2
 8004720:	0019      	movs	r1, r3
 8004722:	687b      	ldr	r3, [r7, #4]
 8004724:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8004726:	4b43      	ldr	r3, [pc, #268]	; (8004834 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8004728:	430a      	orrs	r2, r1
 800472a:	655a      	str	r2, [r3, #84]	; 0x54

    if (PeriphClkInit->Tim15ClockSelection == RCC_TIM15CLKSOURCE_PLL)
 800472c:	687b      	ldr	r3, [r7, #4]
 800472e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8004730:	2380      	movs	r3, #128	; 0x80
 8004732:	045b      	lsls	r3, r3, #17
 8004734:	429a      	cmp	r2, r3
 8004736:	d106      	bne.n	8004746 <HAL_RCCEx_PeriphCLKConfig+0x362>
    {
      /* Enable PLLQCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
 8004738:	4b3e      	ldr	r3, [pc, #248]	; (8004834 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 800473a:	68da      	ldr	r2, [r3, #12]
 800473c:	4b3d      	ldr	r3, [pc, #244]	; (8004834 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 800473e:	2180      	movs	r1, #128	; 0x80
 8004740:	0449      	lsls	r1, r1, #17
 8004742:	430a      	orrs	r2, r1
 8004744:	60da      	str	r2, [r3, #12]
    }
  }
#endif /* RCC_CCIPR_TIM15SEL */

  /*-------------------------- I2S1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S1) == RCC_PERIPHCLK_I2S1)
 8004746:	687b      	ldr	r3, [r7, #4]
 8004748:	681a      	ldr	r2, [r3, #0]
 800474a:	2380      	movs	r3, #128	; 0x80
 800474c:	011b      	lsls	r3, r3, #4
 800474e:	4013      	ands	r3, r2
 8004750:	d014      	beq.n	800477c <HAL_RCCEx_PeriphCLKConfig+0x398>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2S1CLKSOURCE(PeriphClkInit->I2s1ClockSelection));

    /* Configure the I2S1 clock source */
    __HAL_RCC_I2S1_CONFIG(PeriphClkInit->I2s1ClockSelection);
 8004752:	4b38      	ldr	r3, [pc, #224]	; (8004834 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8004754:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004756:	2203      	movs	r2, #3
 8004758:	4393      	bics	r3, r2
 800475a:	0019      	movs	r1, r3
 800475c:	687b      	ldr	r3, [r7, #4]
 800475e:	6a1a      	ldr	r2, [r3, #32]
 8004760:	4b34      	ldr	r3, [pc, #208]	; (8004834 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8004762:	430a      	orrs	r2, r1
 8004764:	659a      	str	r2, [r3, #88]	; 0x58

    if (PeriphClkInit->I2s1ClockSelection == RCC_I2S1CLKSOURCE_PLL)
 8004766:	687b      	ldr	r3, [r7, #4]
 8004768:	6a1b      	ldr	r3, [r3, #32]
 800476a:	2b01      	cmp	r3, #1
 800476c:	d106      	bne.n	800477c <HAL_RCCEx_PeriphCLKConfig+0x398>
    {
      /* Enable PLLPCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLPCLK);
 800476e:	4b31      	ldr	r3, [pc, #196]	; (8004834 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8004770:	68da      	ldr	r2, [r3, #12]
 8004772:	4b30      	ldr	r3, [pc, #192]	; (8004834 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8004774:	2180      	movs	r1, #128	; 0x80
 8004776:	0249      	lsls	r1, r1, #9
 8004778:	430a      	orrs	r2, r1
 800477a:	60da      	str	r2, [r3, #12]
    }
  }

#if defined(RCC_CCIPR2_I2S2SEL)
  /*-------------------------- I2S2 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S2) == RCC_PERIPHCLK_I2S2)
 800477c:	687b      	ldr	r3, [r7, #4]
 800477e:	681a      	ldr	r2, [r3, #0]
 8004780:	2380      	movs	r3, #128	; 0x80
 8004782:	019b      	lsls	r3, r3, #6
 8004784:	4013      	ands	r3, r2
 8004786:	d014      	beq.n	80047b2 <HAL_RCCEx_PeriphCLKConfig+0x3ce>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2S2CLKSOURCE(PeriphClkInit->I2s2ClockSelection));

    /* Configure the I2S2 clock source */
    __HAL_RCC_I2S2_CONFIG(PeriphClkInit->I2s2ClockSelection);
 8004788:	4b2a      	ldr	r3, [pc, #168]	; (8004834 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 800478a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800478c:	220c      	movs	r2, #12
 800478e:	4393      	bics	r3, r2
 8004790:	0019      	movs	r1, r3
 8004792:	687b      	ldr	r3, [r7, #4]
 8004794:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8004796:	4b27      	ldr	r3, [pc, #156]	; (8004834 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8004798:	430a      	orrs	r2, r1
 800479a:	659a      	str	r2, [r3, #88]	; 0x58

    if (PeriphClkInit->I2s2ClockSelection == RCC_I2S2CLKSOURCE_PLL)
 800479c:	687b      	ldr	r3, [r7, #4]
 800479e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80047a0:	2b04      	cmp	r3, #4
 80047a2:	d106      	bne.n	80047b2 <HAL_RCCEx_PeriphCLKConfig+0x3ce>
    {
      /* Enable PLLPCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLPCLK);
 80047a4:	4b23      	ldr	r3, [pc, #140]	; (8004834 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 80047a6:	68da      	ldr	r2, [r3, #12]
 80047a8:	4b22      	ldr	r3, [pc, #136]	; (8004834 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 80047aa:	2180      	movs	r1, #128	; 0x80
 80047ac:	0249      	lsls	r1, r1, #9
 80047ae:	430a      	orrs	r2, r1
 80047b0:	60da      	str	r2, [r3, #12]
  }
#endif /* RCC_CCIPR2_I2S2SEL */

#if defined(STM32G0C1xx) || defined(STM32G0B1xx)  || defined(STM32G0B0xx)
  /*-------------------------- USB clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 80047b2:	687b      	ldr	r3, [r7, #4]
 80047b4:	681a      	ldr	r2, [r3, #0]
 80047b6:	2380      	movs	r3, #128	; 0x80
 80047b8:	045b      	lsls	r3, r3, #17
 80047ba:	4013      	ands	r3, r2
 80047bc:	d016      	beq.n	80047ec <HAL_RCCEx_PeriphCLKConfig+0x408>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80047be:	4b1d      	ldr	r3, [pc, #116]	; (8004834 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 80047c0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80047c2:	4a22      	ldr	r2, [pc, #136]	; (800484c <HAL_RCCEx_PeriphCLKConfig+0x468>)
 80047c4:	4013      	ands	r3, r2
 80047c6:	0019      	movs	r1, r3
 80047c8:	687b      	ldr	r3, [r7, #4]
 80047ca:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80047cc:	4b19      	ldr	r3, [pc, #100]	; (8004834 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 80047ce:	430a      	orrs	r2, r1
 80047d0:	659a      	str	r2, [r3, #88]	; 0x58

    if (PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 80047d2:	687b      	ldr	r3, [r7, #4]
 80047d4:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80047d6:	2380      	movs	r3, #128	; 0x80
 80047d8:	019b      	lsls	r3, r3, #6
 80047da:	429a      	cmp	r2, r3
 80047dc:	d106      	bne.n	80047ec <HAL_RCCEx_PeriphCLKConfig+0x408>
    {
      /* Enable PLLQCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
 80047de:	4b15      	ldr	r3, [pc, #84]	; (8004834 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 80047e0:	68da      	ldr	r2, [r3, #12]
 80047e2:	4b14      	ldr	r3, [pc, #80]	; (8004834 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 80047e4:	2180      	movs	r1, #128	; 0x80
 80047e6:	0449      	lsls	r1, r1, #17
 80047e8:	430a      	orrs	r2, r1
 80047ea:	60da      	str	r2, [r3, #12]
  }
#endif /* STM32G0C1xx || STM32G0B1xx || STM32G0B0xx */

#if defined(FDCAN1) || defined(FDCAN2)
  /*-------------------------- FDCAN clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 80047ec:	687b      	ldr	r3, [r7, #4]
 80047ee:	681a      	ldr	r2, [r3, #0]
 80047f0:	2380      	movs	r3, #128	; 0x80
 80047f2:	049b      	lsls	r3, r3, #18
 80047f4:	4013      	ands	r3, r2
 80047f6:	d016      	beq.n	8004826 <HAL_RCCEx_PeriphCLKConfig+0x442>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FDCANCLKSOURCE(PeriphClkInit->FdcanClockSelection));

    /* Configure the FDCAN clock source */
    __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 80047f8:	4b0e      	ldr	r3, [pc, #56]	; (8004834 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 80047fa:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80047fc:	4a10      	ldr	r2, [pc, #64]	; (8004840 <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 80047fe:	4013      	ands	r3, r2
 8004800:	0019      	movs	r1, r3
 8004802:	687b      	ldr	r3, [r7, #4]
 8004804:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8004806:	4b0b      	ldr	r3, [pc, #44]	; (8004834 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8004808:	430a      	orrs	r2, r1
 800480a:	659a      	str	r2, [r3, #88]	; 0x58

    if (PeriphClkInit->FdcanClockSelection == RCC_FDCANCLKSOURCE_PLL)
 800480c:	687b      	ldr	r3, [r7, #4]
 800480e:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8004810:	2380      	movs	r3, #128	; 0x80
 8004812:	005b      	lsls	r3, r3, #1
 8004814:	429a      	cmp	r2, r3
 8004816:	d106      	bne.n	8004826 <HAL_RCCEx_PeriphCLKConfig+0x442>
    {
      /* Enable PLLQCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
 8004818:	4b06      	ldr	r3, [pc, #24]	; (8004834 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 800481a:	68da      	ldr	r2, [r3, #12]
 800481c:	4b05      	ldr	r3, [pc, #20]	; (8004834 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 800481e:	2180      	movs	r1, #128	; 0x80
 8004820:	0449      	lsls	r1, r1, #17
 8004822:	430a      	orrs	r2, r1
 8004824:	60da      	str	r2, [r3, #12]
    }
  }
#endif /* FDCAN1 || FDCAN2 */

  return status;
 8004826:	2312      	movs	r3, #18
 8004828:	18fb      	adds	r3, r7, r3
 800482a:	781b      	ldrb	r3, [r3, #0]
}
 800482c:	0018      	movs	r0, r3
 800482e:	46bd      	mov	sp, r7
 8004830:	b006      	add	sp, #24
 8004832:	bd80      	pop	{r7, pc}
 8004834:	40021000 	.word	0x40021000
 8004838:	efffffff 	.word	0xefffffff
 800483c:	fffff3ff 	.word	0xfffff3ff
 8004840:	fffffcff 	.word	0xfffffcff
 8004844:	fff3ffff 	.word	0xfff3ffff
 8004848:	ffcfffff 	.word	0xffcfffff
 800484c:	ffffcfff 	.word	0xffffcfff
 8004850:	ffff3fff 	.word	0xffff3fff
 8004854:	ffbfffff 	.word	0xffbfffff
 8004858:	feffffff 	.word	0xfeffffff

0800485c <HAL_RTC_Init>:
  * @brief  Initialize the RTC peripheral
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 800485c:	b5b0      	push	{r4, r5, r7, lr}
 800485e:	b084      	sub	sp, #16
 8004860:	af00      	add	r7, sp, #0
 8004862:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_ERROR;
 8004864:	230f      	movs	r3, #15
 8004866:	18fb      	adds	r3, r7, r3
 8004868:	2201      	movs	r2, #1
 800486a:	701a      	strb	r2, [r3, #0]

  /* Check the RTC peripheral state */
  if(hrtc != NULL)
 800486c:	687b      	ldr	r3, [r7, #4]
 800486e:	2b00      	cmp	r3, #0
 8004870:	d100      	bne.n	8004874 <HAL_RTC_Init+0x18>
 8004872:	e08c      	b.n	800498e <HAL_RTC_Init+0x132>
    assert_param(IS_RTC_OUTPUT_REMAP(hrtc->Init.OutPutRemap));
    assert_param(IS_RTC_OUTPUT_POL(hrtc->Init.OutPutPolarity));
    assert_param(IS_RTC_OUTPUT_TYPE(hrtc->Init.OutPutType));
    assert_param(IS_RTC_OUTPUT_PULLUP(hrtc->Init.OutPutPullUp));

    if(hrtc->State == HAL_RTC_STATE_RESET)
 8004874:	687b      	ldr	r3, [r7, #4]
 8004876:	2229      	movs	r2, #41	; 0x29
 8004878:	5c9b      	ldrb	r3, [r3, r2]
 800487a:	b2db      	uxtb	r3, r3
 800487c:	2b00      	cmp	r3, #0
 800487e:	d10b      	bne.n	8004898 <HAL_RTC_Init+0x3c>
    {
      /* Allocate lock resource and initialize it */
      hrtc->Lock = HAL_UNLOCKED;
 8004880:	687b      	ldr	r3, [r7, #4]
 8004882:	2228      	movs	r2, #40	; 0x28
 8004884:	2100      	movs	r1, #0
 8004886:	5499      	strb	r1, [r3, r2]

      /* Process TAMP peripheral offset from RTC one */
      hrtc->TampOffset = (TAMP_BASE - RTC_BASE);
 8004888:	687b      	ldr	r3, [r7, #4]
 800488a:	2288      	movs	r2, #136	; 0x88
 800488c:	0212      	lsls	r2, r2, #8
 800488e:	605a      	str	r2, [r3, #4]
      {
        hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
      }
#else
      /* Initialize RTC MSP */
      HAL_RTC_MspInit(hrtc);
 8004890:	687b      	ldr	r3, [r7, #4]
 8004892:	0018      	movs	r0, r3
 8004894:	f7fe fa46 	bl	8002d24 <HAL_RTC_MspInit>
#endif /* (USE_HAL_RTC_REGISTER_CALLBACKS) */
    }

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_BUSY;
 8004898:	687b      	ldr	r3, [r7, #4]
 800489a:	2229      	movs	r2, #41	; 0x29
 800489c:	2102      	movs	r1, #2
 800489e:	5499      	strb	r1, [r3, r2]

    /* Check whether the calendar needs to be initialized */
    if (__HAL_RTC_IS_CALENDAR_INITIALIZED(hrtc) == 0U)
 80048a0:	687b      	ldr	r3, [r7, #4]
 80048a2:	681b      	ldr	r3, [r3, #0]
 80048a4:	68db      	ldr	r3, [r3, #12]
 80048a6:	2210      	movs	r2, #16
 80048a8:	4013      	ands	r3, r2
 80048aa:	2b10      	cmp	r3, #16
 80048ac:	d062      	beq.n	8004974 <HAL_RTC_Init+0x118>
    {
      /* Disable the write protection for RTC registers */
      __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 80048ae:	687b      	ldr	r3, [r7, #4]
 80048b0:	681b      	ldr	r3, [r3, #0]
 80048b2:	22ca      	movs	r2, #202	; 0xca
 80048b4:	625a      	str	r2, [r3, #36]	; 0x24
 80048b6:	687b      	ldr	r3, [r7, #4]
 80048b8:	681b      	ldr	r3, [r3, #0]
 80048ba:	2253      	movs	r2, #83	; 0x53
 80048bc:	625a      	str	r2, [r3, #36]	; 0x24

      /* Enter Initialization mode */
      status = RTC_EnterInitMode(hrtc);
 80048be:	250f      	movs	r5, #15
 80048c0:	197c      	adds	r4, r7, r5
 80048c2:	687b      	ldr	r3, [r7, #4]
 80048c4:	0018      	movs	r0, r3
 80048c6:	f000 fb9c 	bl	8005002 <RTC_EnterInitMode>
 80048ca:	0003      	movs	r3, r0
 80048cc:	7023      	strb	r3, [r4, #0]

      if(status == HAL_OK)
 80048ce:	0028      	movs	r0, r5
 80048d0:	183b      	adds	r3, r7, r0
 80048d2:	781b      	ldrb	r3, [r3, #0]
 80048d4:	2b00      	cmp	r3, #0
 80048d6:	d12c      	bne.n	8004932 <HAL_RTC_Init+0xd6>
      {
        /* Clear RTC_CR FMT, OSEL and POL Bits */
        hrtc->Instance->CR &= ~(RTC_CR_FMT | RTC_CR_POL | RTC_CR_OSEL | RTC_CR_TAMPOE);
 80048d8:	687b      	ldr	r3, [r7, #4]
 80048da:	681b      	ldr	r3, [r3, #0]
 80048dc:	699a      	ldr	r2, [r3, #24]
 80048de:	687b      	ldr	r3, [r7, #4]
 80048e0:	681b      	ldr	r3, [r3, #0]
 80048e2:	492e      	ldr	r1, [pc, #184]	; (800499c <HAL_RTC_Init+0x140>)
 80048e4:	400a      	ands	r2, r1
 80048e6:	619a      	str	r2, [r3, #24]
        /* Set RTC_CR register */
        hrtc->Instance->CR |= (hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 80048e8:	687b      	ldr	r3, [r7, #4]
 80048ea:	681b      	ldr	r3, [r3, #0]
 80048ec:	6999      	ldr	r1, [r3, #24]
 80048ee:	687b      	ldr	r3, [r7, #4]
 80048f0:	689a      	ldr	r2, [r3, #8]
 80048f2:	687b      	ldr	r3, [r7, #4]
 80048f4:	695b      	ldr	r3, [r3, #20]
 80048f6:	431a      	orrs	r2, r3
 80048f8:	687b      	ldr	r3, [r7, #4]
 80048fa:	69db      	ldr	r3, [r3, #28]
 80048fc:	431a      	orrs	r2, r3
 80048fe:	687b      	ldr	r3, [r7, #4]
 8004900:	681b      	ldr	r3, [r3, #0]
 8004902:	430a      	orrs	r2, r1
 8004904:	619a      	str	r2, [r3, #24]

        /* Configure the RTC PRER */
        hrtc->Instance->PRER = (hrtc->Init.SynchPrediv);
 8004906:	687b      	ldr	r3, [r7, #4]
 8004908:	681b      	ldr	r3, [r3, #0]
 800490a:	687a      	ldr	r2, [r7, #4]
 800490c:	6912      	ldr	r2, [r2, #16]
 800490e:	611a      	str	r2, [r3, #16]
        hrtc->Instance->PRER |= (hrtc->Init.AsynchPrediv << RTC_PRER_PREDIV_A_Pos);
 8004910:	687b      	ldr	r3, [r7, #4]
 8004912:	681b      	ldr	r3, [r3, #0]
 8004914:	6919      	ldr	r1, [r3, #16]
 8004916:	687b      	ldr	r3, [r7, #4]
 8004918:	68db      	ldr	r3, [r3, #12]
 800491a:	041a      	lsls	r2, r3, #16
 800491c:	687b      	ldr	r3, [r7, #4]
 800491e:	681b      	ldr	r3, [r3, #0]
 8004920:	430a      	orrs	r2, r1
 8004922:	611a      	str	r2, [r3, #16]

        /* Exit Initialization mode */
        status = RTC_ExitInitMode(hrtc);
 8004924:	183c      	adds	r4, r7, r0
 8004926:	687b      	ldr	r3, [r7, #4]
 8004928:	0018      	movs	r0, r3
 800492a:	f000 fbad 	bl	8005088 <RTC_ExitInitMode>
 800492e:	0003      	movs	r3, r0
 8004930:	7023      	strb	r3, [r4, #0]
      }

      if (status == HAL_OK)
 8004932:	230f      	movs	r3, #15
 8004934:	18fb      	adds	r3, r7, r3
 8004936:	781b      	ldrb	r3, [r3, #0]
 8004938:	2b00      	cmp	r3, #0
 800493a:	d116      	bne.n	800496a <HAL_RTC_Init+0x10e>
      {
        hrtc->Instance->CR &= ~(RTC_CR_TAMPALRM_PU |RTC_CR_TAMPALRM_TYPE | RTC_CR_OUT2EN);
 800493c:	687b      	ldr	r3, [r7, #4]
 800493e:	681b      	ldr	r3, [r3, #0]
 8004940:	699a      	ldr	r2, [r3, #24]
 8004942:	687b      	ldr	r3, [r7, #4]
 8004944:	681b      	ldr	r3, [r3, #0]
 8004946:	00d2      	lsls	r2, r2, #3
 8004948:	08d2      	lsrs	r2, r2, #3
 800494a:	619a      	str	r2, [r3, #24]
        hrtc->Instance->CR |= (hrtc->Init.OutPutPullUp | hrtc->Init.OutPutType | hrtc->Init.OutPutRemap);
 800494c:	687b      	ldr	r3, [r7, #4]
 800494e:	681b      	ldr	r3, [r3, #0]
 8004950:	6999      	ldr	r1, [r3, #24]
 8004952:	687b      	ldr	r3, [r7, #4]
 8004954:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8004956:	687b      	ldr	r3, [r7, #4]
 8004958:	6a1b      	ldr	r3, [r3, #32]
 800495a:	431a      	orrs	r2, r3
 800495c:	687b      	ldr	r3, [r7, #4]
 800495e:	699b      	ldr	r3, [r3, #24]
 8004960:	431a      	orrs	r2, r3
 8004962:	687b      	ldr	r3, [r7, #4]
 8004964:	681b      	ldr	r3, [r3, #0]
 8004966:	430a      	orrs	r2, r1
 8004968:	619a      	str	r2, [r3, #24]
      }

      /* Enable the write protection for RTC registers */
      __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800496a:	687b      	ldr	r3, [r7, #4]
 800496c:	681b      	ldr	r3, [r3, #0]
 800496e:	22ff      	movs	r2, #255	; 0xff
 8004970:	625a      	str	r2, [r3, #36]	; 0x24
 8004972:	e003      	b.n	800497c <HAL_RTC_Init+0x120>
    }
    else
    {
      /* The calendar is already initialized */
      status = HAL_OK;
 8004974:	230f      	movs	r3, #15
 8004976:	18fb      	adds	r3, r7, r3
 8004978:	2200      	movs	r2, #0
 800497a:	701a      	strb	r2, [r3, #0]
    }

    if (status == HAL_OK)
 800497c:	230f      	movs	r3, #15
 800497e:	18fb      	adds	r3, r7, r3
 8004980:	781b      	ldrb	r3, [r3, #0]
 8004982:	2b00      	cmp	r3, #0
 8004984:	d103      	bne.n	800498e <HAL_RTC_Init+0x132>
    {
      hrtc->State = HAL_RTC_STATE_READY;
 8004986:	687b      	ldr	r3, [r7, #4]
 8004988:	2229      	movs	r2, #41	; 0x29
 800498a:	2101      	movs	r1, #1
 800498c:	5499      	strb	r1, [r3, r2]
    }
  }

  return status;
 800498e:	230f      	movs	r3, #15
 8004990:	18fb      	adds	r3, r7, r3
 8004992:	781b      	ldrb	r3, [r3, #0]
}
 8004994:	0018      	movs	r0, r3
 8004996:	46bd      	mov	sp, r7
 8004998:	b004      	add	sp, #16
 800499a:	bdb0      	pop	{r4, r5, r7, pc}
 800499c:	fb8fffbf 	.word	0xfb8fffbf

080049a0 <HAL_RTC_SetTime>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 80049a0:	b5b0      	push	{r4, r5, r7, lr}
 80049a2:	b086      	sub	sp, #24
 80049a4:	af00      	add	r7, sp, #0
 80049a6:	60f8      	str	r0, [r7, #12]
 80049a8:	60b9      	str	r1, [r7, #8]
 80049aa:	607a      	str	r2, [r7, #4]
  assert_param(IS_RTC_FORMAT(Format));
  assert_param(IS_RTC_DAYLIGHT_SAVING(sTime->DayLightSaving));
  assert_param(IS_RTC_STORE_OPERATION(sTime->StoreOperation));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 80049ac:	68fb      	ldr	r3, [r7, #12]
 80049ae:	2228      	movs	r2, #40	; 0x28
 80049b0:	5c9b      	ldrb	r3, [r3, r2]
 80049b2:	2b01      	cmp	r3, #1
 80049b4:	d101      	bne.n	80049ba <HAL_RTC_SetTime+0x1a>
 80049b6:	2302      	movs	r3, #2
 80049b8:	e092      	b.n	8004ae0 <HAL_RTC_SetTime+0x140>
 80049ba:	68fb      	ldr	r3, [r7, #12]
 80049bc:	2228      	movs	r2, #40	; 0x28
 80049be:	2101      	movs	r1, #1
 80049c0:	5499      	strb	r1, [r3, r2]

  hrtc->State = HAL_RTC_STATE_BUSY;
 80049c2:	68fb      	ldr	r3, [r7, #12]
 80049c4:	2229      	movs	r2, #41	; 0x29
 80049c6:	2102      	movs	r1, #2
 80049c8:	5499      	strb	r1, [r3, r2]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 80049ca:	68fb      	ldr	r3, [r7, #12]
 80049cc:	681b      	ldr	r3, [r3, #0]
 80049ce:	22ca      	movs	r2, #202	; 0xca
 80049d0:	625a      	str	r2, [r3, #36]	; 0x24
 80049d2:	68fb      	ldr	r3, [r7, #12]
 80049d4:	681b      	ldr	r3, [r3, #0]
 80049d6:	2253      	movs	r2, #83	; 0x53
 80049d8:	625a      	str	r2, [r3, #36]	; 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 80049da:	2513      	movs	r5, #19
 80049dc:	197c      	adds	r4, r7, r5
 80049de:	68fb      	ldr	r3, [r7, #12]
 80049e0:	0018      	movs	r0, r3
 80049e2:	f000 fb0e 	bl	8005002 <RTC_EnterInitMode>
 80049e6:	0003      	movs	r3, r0
 80049e8:	7023      	strb	r3, [r4, #0]
  if(status == HAL_OK)
 80049ea:	197b      	adds	r3, r7, r5
 80049ec:	781b      	ldrb	r3, [r3, #0]
 80049ee:	2b00      	cmp	r3, #0
 80049f0:	d162      	bne.n	8004ab8 <HAL_RTC_SetTime+0x118>
  {
    if(Format == RTC_FORMAT_BIN)
 80049f2:	687b      	ldr	r3, [r7, #4]
 80049f4:	2b00      	cmp	r3, #0
 80049f6:	d125      	bne.n	8004a44 <HAL_RTC_SetTime+0xa4>
    {
    if((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 80049f8:	68fb      	ldr	r3, [r7, #12]
 80049fa:	681b      	ldr	r3, [r3, #0]
 80049fc:	699b      	ldr	r3, [r3, #24]
 80049fe:	2240      	movs	r2, #64	; 0x40
 8004a00:	4013      	ands	r3, r2
 8004a02:	d102      	bne.n	8004a0a <HAL_RTC_SetTime+0x6a>
        assert_param(IS_RTC_HOUR12(sTime->Hours));
        assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
      }
      else
      {
        sTime->TimeFormat = 0x00U;
 8004a04:	68bb      	ldr	r3, [r7, #8]
 8004a06:	2200      	movs	r2, #0
 8004a08:	70da      	strb	r2, [r3, #3]
        assert_param(IS_RTC_HOUR24(sTime->Hours));
      }
      assert_param(IS_RTC_MINUTES(sTime->Minutes));
      assert_param(IS_RTC_SECONDS(sTime->Seconds));

      tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << RTC_TR_HU_Pos) | \
 8004a0a:	68bb      	ldr	r3, [r7, #8]
 8004a0c:	781b      	ldrb	r3, [r3, #0]
 8004a0e:	0018      	movs	r0, r3
 8004a10:	f000 fb7e 	bl	8005110 <RTC_ByteToBcd2>
 8004a14:	0003      	movs	r3, r0
 8004a16:	041c      	lsls	r4, r3, #16
                          ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 8004a18:	68bb      	ldr	r3, [r7, #8]
 8004a1a:	785b      	ldrb	r3, [r3, #1]
 8004a1c:	0018      	movs	r0, r3
 8004a1e:	f000 fb77 	bl	8005110 <RTC_ByteToBcd2>
 8004a22:	0003      	movs	r3, r0
 8004a24:	021b      	lsls	r3, r3, #8
      tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << RTC_TR_HU_Pos) | \
 8004a26:	431c      	orrs	r4, r3
                          ((uint32_t)RTC_ByteToBcd2(sTime->Seconds) << RTC_TR_SU_Pos) | \
 8004a28:	68bb      	ldr	r3, [r7, #8]
 8004a2a:	789b      	ldrb	r3, [r3, #2]
 8004a2c:	0018      	movs	r0, r3
 8004a2e:	f000 fb6f 	bl	8005110 <RTC_ByteToBcd2>
 8004a32:	0003      	movs	r3, r0
                          ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 8004a34:	0022      	movs	r2, r4
 8004a36:	431a      	orrs	r2, r3
                          (((uint32_t)sTime->TimeFormat) << RTC_TR_PM_Pos));
 8004a38:	68bb      	ldr	r3, [r7, #8]
 8004a3a:	78db      	ldrb	r3, [r3, #3]
 8004a3c:	059b      	lsls	r3, r3, #22
      tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << RTC_TR_HU_Pos) | \
 8004a3e:	4313      	orrs	r3, r2
 8004a40:	617b      	str	r3, [r7, #20]
 8004a42:	e017      	b.n	8004a74 <HAL_RTC_SetTime+0xd4>
    }
    else
    {
    if((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 8004a44:	68fb      	ldr	r3, [r7, #12]
 8004a46:	681b      	ldr	r3, [r3, #0]
 8004a48:	699b      	ldr	r3, [r3, #24]
 8004a4a:	2240      	movs	r2, #64	; 0x40
 8004a4c:	4013      	ands	r3, r2
 8004a4e:	d102      	bne.n	8004a56 <HAL_RTC_SetTime+0xb6>
        assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sTime->Hours)));
        assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
      }
      else
      {
        sTime->TimeFormat = 0x00U;
 8004a50:	68bb      	ldr	r3, [r7, #8]
 8004a52:	2200      	movs	r2, #0
 8004a54:	70da      	strb	r2, [r3, #3]
        assert_param(IS_RTC_HOUR24(RTC_Bcd2ToByte(sTime->Hours)));
      }
      assert_param(IS_RTC_MINUTES(RTC_Bcd2ToByte(sTime->Minutes)));
      assert_param(IS_RTC_SECONDS(RTC_Bcd2ToByte(sTime->Seconds)));
      tmpreg = (((uint32_t)(sTime->Hours) << RTC_TR_HU_Pos) | \
 8004a56:	68bb      	ldr	r3, [r7, #8]
 8004a58:	781b      	ldrb	r3, [r3, #0]
 8004a5a:	041a      	lsls	r2, r3, #16
                ((uint32_t)(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 8004a5c:	68bb      	ldr	r3, [r7, #8]
 8004a5e:	785b      	ldrb	r3, [r3, #1]
 8004a60:	021b      	lsls	r3, r3, #8
      tmpreg = (((uint32_t)(sTime->Hours) << RTC_TR_HU_Pos) | \
 8004a62:	4313      	orrs	r3, r2
                ((uint32_t)(sTime->Seconds) << RTC_TR_SU_Pos) | \
 8004a64:	68ba      	ldr	r2, [r7, #8]
 8004a66:	7892      	ldrb	r2, [r2, #2]
                ((uint32_t)(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 8004a68:	431a      	orrs	r2, r3
                ((uint32_t)(sTime->TimeFormat) << RTC_TR_PM_Pos));
 8004a6a:	68bb      	ldr	r3, [r7, #8]
 8004a6c:	78db      	ldrb	r3, [r3, #3]
 8004a6e:	059b      	lsls	r3, r3, #22
      tmpreg = (((uint32_t)(sTime->Hours) << RTC_TR_HU_Pos) | \
 8004a70:	4313      	orrs	r3, r2
 8004a72:	617b      	str	r3, [r7, #20]
    }

    /* Set the RTC_TR register */
    hrtc->Instance->TR = (uint32_t)(tmpreg & RTC_TR_RESERVED_MASK);
 8004a74:	68fb      	ldr	r3, [r7, #12]
 8004a76:	681b      	ldr	r3, [r3, #0]
 8004a78:	697a      	ldr	r2, [r7, #20]
 8004a7a:	491b      	ldr	r1, [pc, #108]	; (8004ae8 <HAL_RTC_SetTime+0x148>)
 8004a7c:	400a      	ands	r2, r1
 8004a7e:	601a      	str	r2, [r3, #0]

    /* This interface is deprecated. To manage Daylight Saving Time, please use HAL_RTC_DST_xxx functions */
    hrtc->Instance->CR &= ((uint32_t)~RTC_CR_BKP);
 8004a80:	68fb      	ldr	r3, [r7, #12]
 8004a82:	681b      	ldr	r3, [r3, #0]
 8004a84:	699a      	ldr	r2, [r3, #24]
 8004a86:	68fb      	ldr	r3, [r7, #12]
 8004a88:	681b      	ldr	r3, [r3, #0]
 8004a8a:	4918      	ldr	r1, [pc, #96]	; (8004aec <HAL_RTC_SetTime+0x14c>)
 8004a8c:	400a      	ands	r2, r1
 8004a8e:	619a      	str	r2, [r3, #24]

    /* This interface is deprecated. To manage Daylight Saving Time, please use HAL_RTC_DST_xxx functions */
    hrtc->Instance->CR |= (uint32_t)(sTime->DayLightSaving | sTime->StoreOperation);
 8004a90:	68fb      	ldr	r3, [r7, #12]
 8004a92:	681b      	ldr	r3, [r3, #0]
 8004a94:	6999      	ldr	r1, [r3, #24]
 8004a96:	68bb      	ldr	r3, [r7, #8]
 8004a98:	68da      	ldr	r2, [r3, #12]
 8004a9a:	68bb      	ldr	r3, [r7, #8]
 8004a9c:	691b      	ldr	r3, [r3, #16]
 8004a9e:	431a      	orrs	r2, r3
 8004aa0:	68fb      	ldr	r3, [r7, #12]
 8004aa2:	681b      	ldr	r3, [r3, #0]
 8004aa4:	430a      	orrs	r2, r1
 8004aa6:	619a      	str	r2, [r3, #24]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 8004aa8:	2313      	movs	r3, #19
 8004aaa:	18fc      	adds	r4, r7, r3
 8004aac:	68fb      	ldr	r3, [r7, #12]
 8004aae:	0018      	movs	r0, r3
 8004ab0:	f000 faea 	bl	8005088 <RTC_ExitInitMode>
 8004ab4:	0003      	movs	r3, r0
 8004ab6:	7023      	strb	r3, [r4, #0]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8004ab8:	68fb      	ldr	r3, [r7, #12]
 8004aba:	681b      	ldr	r3, [r3, #0]
 8004abc:	22ff      	movs	r2, #255	; 0xff
 8004abe:	625a      	str	r2, [r3, #36]	; 0x24
  
  if (status == HAL_OK)
 8004ac0:	2313      	movs	r3, #19
 8004ac2:	18fb      	adds	r3, r7, r3
 8004ac4:	781b      	ldrb	r3, [r3, #0]
 8004ac6:	2b00      	cmp	r3, #0
 8004ac8:	d103      	bne.n	8004ad2 <HAL_RTC_SetTime+0x132>
  {
   hrtc->State = HAL_RTC_STATE_READY;
 8004aca:	68fb      	ldr	r3, [r7, #12]
 8004acc:	2229      	movs	r2, #41	; 0x29
 8004ace:	2101      	movs	r1, #1
 8004ad0:	5499      	strb	r1, [r3, r2]
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8004ad2:	68fb      	ldr	r3, [r7, #12]
 8004ad4:	2228      	movs	r2, #40	; 0x28
 8004ad6:	2100      	movs	r1, #0
 8004ad8:	5499      	strb	r1, [r3, r2]

  return status;
 8004ada:	2313      	movs	r3, #19
 8004adc:	18fb      	adds	r3, r7, r3
 8004ade:	781b      	ldrb	r3, [r3, #0]
}
 8004ae0:	0018      	movs	r0, r3
 8004ae2:	46bd      	mov	sp, r7
 8004ae4:	b006      	add	sp, #24
 8004ae6:	bdb0      	pop	{r4, r5, r7, pc}
 8004ae8:	007f7f7f 	.word	0x007f7f7f
 8004aec:	fffbffff 	.word	0xfffbffff

08004af0 <HAL_RTC_GetTime>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 8004af0:	b580      	push	{r7, lr}
 8004af2:	b086      	sub	sp, #24
 8004af4:	af00      	add	r7, sp, #0
 8004af6:	60f8      	str	r0, [r7, #12]
 8004af8:	60b9      	str	r1, [r7, #8]
 8004afa:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Get subseconds structure field from the corresponding register*/
  sTime->SubSeconds = (uint32_t)(hrtc->Instance->SSR);
 8004afc:	68fb      	ldr	r3, [r7, #12]
 8004afe:	681b      	ldr	r3, [r3, #0]
 8004b00:	689a      	ldr	r2, [r3, #8]
 8004b02:	68bb      	ldr	r3, [r7, #8]
 8004b04:	605a      	str	r2, [r3, #4]

  /* Get SecondFraction structure field from the corresponding register field*/
  sTime->SecondFraction = (uint32_t)(hrtc->Instance->PRER & RTC_PRER_PREDIV_S);
 8004b06:	68fb      	ldr	r3, [r7, #12]
 8004b08:	681b      	ldr	r3, [r3, #0]
 8004b0a:	691b      	ldr	r3, [r3, #16]
 8004b0c:	045b      	lsls	r3, r3, #17
 8004b0e:	0c5a      	lsrs	r2, r3, #17
 8004b10:	68bb      	ldr	r3, [r7, #8]
 8004b12:	609a      	str	r2, [r3, #8]

  /* Get the TR register */
  tmpreg = (uint32_t)(hrtc->Instance->TR & RTC_TR_RESERVED_MASK);
 8004b14:	68fb      	ldr	r3, [r7, #12]
 8004b16:	681b      	ldr	r3, [r3, #0]
 8004b18:	681b      	ldr	r3, [r3, #0]
 8004b1a:	4a22      	ldr	r2, [pc, #136]	; (8004ba4 <HAL_RTC_GetTime+0xb4>)
 8004b1c:	4013      	ands	r3, r2
 8004b1e:	617b      	str	r3, [r7, #20]

  /* Fill the structure fields with the read parameters */
  sTime->Hours = (uint8_t)((tmpreg & (RTC_TR_HT | RTC_TR_HU)) >> RTC_TR_HU_Pos);
 8004b20:	697b      	ldr	r3, [r7, #20]
 8004b22:	0c1b      	lsrs	r3, r3, #16
 8004b24:	b2db      	uxtb	r3, r3
 8004b26:	223f      	movs	r2, #63	; 0x3f
 8004b28:	4013      	ands	r3, r2
 8004b2a:	b2da      	uxtb	r2, r3
 8004b2c:	68bb      	ldr	r3, [r7, #8]
 8004b2e:	701a      	strb	r2, [r3, #0]
  sTime->Minutes = (uint8_t)((tmpreg & (RTC_TR_MNT | RTC_TR_MNU)) >> RTC_TR_MNU_Pos);
 8004b30:	697b      	ldr	r3, [r7, #20]
 8004b32:	0a1b      	lsrs	r3, r3, #8
 8004b34:	b2db      	uxtb	r3, r3
 8004b36:	227f      	movs	r2, #127	; 0x7f
 8004b38:	4013      	ands	r3, r2
 8004b3a:	b2da      	uxtb	r2, r3
 8004b3c:	68bb      	ldr	r3, [r7, #8]
 8004b3e:	705a      	strb	r2, [r3, #1]
  sTime->Seconds = (uint8_t)((tmpreg & (RTC_TR_ST | RTC_TR_SU)) >> RTC_TR_SU_Pos);
 8004b40:	697b      	ldr	r3, [r7, #20]
 8004b42:	b2db      	uxtb	r3, r3
 8004b44:	227f      	movs	r2, #127	; 0x7f
 8004b46:	4013      	ands	r3, r2
 8004b48:	b2da      	uxtb	r2, r3
 8004b4a:	68bb      	ldr	r3, [r7, #8]
 8004b4c:	709a      	strb	r2, [r3, #2]
  sTime->TimeFormat = (uint8_t)((tmpreg & (RTC_TR_PM)) >> RTC_TR_PM_Pos);
 8004b4e:	697b      	ldr	r3, [r7, #20]
 8004b50:	0d9b      	lsrs	r3, r3, #22
 8004b52:	b2db      	uxtb	r3, r3
 8004b54:	2201      	movs	r2, #1
 8004b56:	4013      	ands	r3, r2
 8004b58:	b2da      	uxtb	r2, r3
 8004b5a:	68bb      	ldr	r3, [r7, #8]
 8004b5c:	70da      	strb	r2, [r3, #3]

  /* Check the input parameters format */
  if(Format == RTC_FORMAT_BIN)
 8004b5e:	687b      	ldr	r3, [r7, #4]
 8004b60:	2b00      	cmp	r3, #0
 8004b62:	d11a      	bne.n	8004b9a <HAL_RTC_GetTime+0xaa>
  {
    /* Convert the time structure parameters to Binary format */
    sTime->Hours = (uint8_t)RTC_Bcd2ToByte(sTime->Hours);
 8004b64:	68bb      	ldr	r3, [r7, #8]
 8004b66:	781b      	ldrb	r3, [r3, #0]
 8004b68:	0018      	movs	r0, r3
 8004b6a:	f000 faf9 	bl	8005160 <RTC_Bcd2ToByte>
 8004b6e:	0003      	movs	r3, r0
 8004b70:	001a      	movs	r2, r3
 8004b72:	68bb      	ldr	r3, [r7, #8]
 8004b74:	701a      	strb	r2, [r3, #0]
    sTime->Minutes = (uint8_t)RTC_Bcd2ToByte(sTime->Minutes);
 8004b76:	68bb      	ldr	r3, [r7, #8]
 8004b78:	785b      	ldrb	r3, [r3, #1]
 8004b7a:	0018      	movs	r0, r3
 8004b7c:	f000 faf0 	bl	8005160 <RTC_Bcd2ToByte>
 8004b80:	0003      	movs	r3, r0
 8004b82:	001a      	movs	r2, r3
 8004b84:	68bb      	ldr	r3, [r7, #8]
 8004b86:	705a      	strb	r2, [r3, #1]
    sTime->Seconds = (uint8_t)RTC_Bcd2ToByte(sTime->Seconds);
 8004b88:	68bb      	ldr	r3, [r7, #8]
 8004b8a:	789b      	ldrb	r3, [r3, #2]
 8004b8c:	0018      	movs	r0, r3
 8004b8e:	f000 fae7 	bl	8005160 <RTC_Bcd2ToByte>
 8004b92:	0003      	movs	r3, r0
 8004b94:	001a      	movs	r2, r3
 8004b96:	68bb      	ldr	r3, [r7, #8]
 8004b98:	709a      	strb	r2, [r3, #2]
  }

  return HAL_OK;
 8004b9a:	2300      	movs	r3, #0
}
 8004b9c:	0018      	movs	r0, r3
 8004b9e:	46bd      	mov	sp, r7
 8004ba0:	b006      	add	sp, #24
 8004ba2:	bd80      	pop	{r7, pc}
 8004ba4:	007f7f7f 	.word	0x007f7f7f

08004ba8 <HAL_RTC_SetDate>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 8004ba8:	b5b0      	push	{r4, r5, r7, lr}
 8004baa:	b086      	sub	sp, #24
 8004bac:	af00      	add	r7, sp, #0
 8004bae:	60f8      	str	r0, [r7, #12]
 8004bb0:	60b9      	str	r1, [r7, #8]
 8004bb2:	607a      	str	r2, [r7, #4]

 /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

 /* Process Locked */
 __HAL_LOCK(hrtc);
 8004bb4:	68fb      	ldr	r3, [r7, #12]
 8004bb6:	2228      	movs	r2, #40	; 0x28
 8004bb8:	5c9b      	ldrb	r3, [r3, r2]
 8004bba:	2b01      	cmp	r3, #1
 8004bbc:	d101      	bne.n	8004bc2 <HAL_RTC_SetDate+0x1a>
 8004bbe:	2302      	movs	r3, #2
 8004bc0:	e07e      	b.n	8004cc0 <HAL_RTC_SetDate+0x118>
 8004bc2:	68fb      	ldr	r3, [r7, #12]
 8004bc4:	2228      	movs	r2, #40	; 0x28
 8004bc6:	2101      	movs	r1, #1
 8004bc8:	5499      	strb	r1, [r3, r2]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8004bca:	68fb      	ldr	r3, [r7, #12]
 8004bcc:	2229      	movs	r2, #41	; 0x29
 8004bce:	2102      	movs	r1, #2
 8004bd0:	5499      	strb	r1, [r3, r2]

  if((Format == RTC_FORMAT_BIN) && ((sDate->Month & 0x10U) == 0x10U))
 8004bd2:	687b      	ldr	r3, [r7, #4]
 8004bd4:	2b00      	cmp	r3, #0
 8004bd6:	d10e      	bne.n	8004bf6 <HAL_RTC_SetDate+0x4e>
 8004bd8:	68bb      	ldr	r3, [r7, #8]
 8004bda:	785b      	ldrb	r3, [r3, #1]
 8004bdc:	001a      	movs	r2, r3
 8004bde:	2310      	movs	r3, #16
 8004be0:	4013      	ands	r3, r2
 8004be2:	d008      	beq.n	8004bf6 <HAL_RTC_SetDate+0x4e>
  {
    sDate->Month = (uint8_t)((sDate->Month & (uint8_t)~(0x10U)) + (uint8_t)0x0AU);
 8004be4:	68bb      	ldr	r3, [r7, #8]
 8004be6:	785b      	ldrb	r3, [r3, #1]
 8004be8:	2210      	movs	r2, #16
 8004bea:	4393      	bics	r3, r2
 8004bec:	b2db      	uxtb	r3, r3
 8004bee:	330a      	adds	r3, #10
 8004bf0:	b2da      	uxtb	r2, r3
 8004bf2:	68bb      	ldr	r3, [r7, #8]
 8004bf4:	705a      	strb	r2, [r3, #1]
  }

  assert_param(IS_RTC_WEEKDAY(sDate->WeekDay));

  if(Format == RTC_FORMAT_BIN)
 8004bf6:	687b      	ldr	r3, [r7, #4]
 8004bf8:	2b00      	cmp	r3, #0
 8004bfa:	d11c      	bne.n	8004c36 <HAL_RTC_SetDate+0x8e>
  {
    assert_param(IS_RTC_YEAR(sDate->Year));
    assert_param(IS_RTC_MONTH(sDate->Month));
    assert_param(IS_RTC_DATE(sDate->Date));

   datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 8004bfc:	68bb      	ldr	r3, [r7, #8]
 8004bfe:	78db      	ldrb	r3, [r3, #3]
 8004c00:	0018      	movs	r0, r3
 8004c02:	f000 fa85 	bl	8005110 <RTC_ByteToBcd2>
 8004c06:	0003      	movs	r3, r0
 8004c08:	041c      	lsls	r4, r3, #16
                 ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 8004c0a:	68bb      	ldr	r3, [r7, #8]
 8004c0c:	785b      	ldrb	r3, [r3, #1]
 8004c0e:	0018      	movs	r0, r3
 8004c10:	f000 fa7e 	bl	8005110 <RTC_ByteToBcd2>
 8004c14:	0003      	movs	r3, r0
 8004c16:	021b      	lsls	r3, r3, #8
   datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 8004c18:	431c      	orrs	r4, r3
                 ((uint32_t)RTC_ByteToBcd2(sDate->Date)  << RTC_DR_DU_Pos) | \
 8004c1a:	68bb      	ldr	r3, [r7, #8]
 8004c1c:	789b      	ldrb	r3, [r3, #2]
 8004c1e:	0018      	movs	r0, r3
 8004c20:	f000 fa76 	bl	8005110 <RTC_ByteToBcd2>
 8004c24:	0003      	movs	r3, r0
                 ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 8004c26:	0022      	movs	r2, r4
 8004c28:	431a      	orrs	r2, r3
                 ((uint32_t)sDate->WeekDay << RTC_DR_WDU_Pos));
 8004c2a:	68bb      	ldr	r3, [r7, #8]
 8004c2c:	781b      	ldrb	r3, [r3, #0]
 8004c2e:	035b      	lsls	r3, r3, #13
   datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 8004c30:	4313      	orrs	r3, r2
 8004c32:	617b      	str	r3, [r7, #20]
 8004c34:	e00e      	b.n	8004c54 <HAL_RTC_SetDate+0xac>
  {
    assert_param(IS_RTC_YEAR(RTC_Bcd2ToByte(sDate->Year)));
    assert_param(IS_RTC_MONTH(RTC_Bcd2ToByte(sDate->Month)));
    assert_param(IS_RTC_DATE(RTC_Bcd2ToByte(sDate->Date)));

    datetmpreg = ((((uint32_t)sDate->Year) << RTC_DR_YU_Pos) | \
 8004c36:	68bb      	ldr	r3, [r7, #8]
 8004c38:	78db      	ldrb	r3, [r3, #3]
 8004c3a:	041a      	lsls	r2, r3, #16
                  (((uint32_t)sDate->Month) << RTC_DR_MU_Pos) | \
 8004c3c:	68bb      	ldr	r3, [r7, #8]
 8004c3e:	785b      	ldrb	r3, [r3, #1]
 8004c40:	021b      	lsls	r3, r3, #8
    datetmpreg = ((((uint32_t)sDate->Year) << RTC_DR_YU_Pos) | \
 8004c42:	4313      	orrs	r3, r2
                  (((uint32_t)sDate->Date) << RTC_DR_DU_Pos)| \
 8004c44:	68ba      	ldr	r2, [r7, #8]
 8004c46:	7892      	ldrb	r2, [r2, #2]
                  (((uint32_t)sDate->Month) << RTC_DR_MU_Pos) | \
 8004c48:	431a      	orrs	r2, r3
                  (((uint32_t)sDate->WeekDay) << RTC_DR_WDU_Pos));
 8004c4a:	68bb      	ldr	r3, [r7, #8]
 8004c4c:	781b      	ldrb	r3, [r3, #0]
 8004c4e:	035b      	lsls	r3, r3, #13
    datetmpreg = ((((uint32_t)sDate->Year) << RTC_DR_YU_Pos) | \
 8004c50:	4313      	orrs	r3, r2
 8004c52:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8004c54:	68fb      	ldr	r3, [r7, #12]
 8004c56:	681b      	ldr	r3, [r3, #0]
 8004c58:	22ca      	movs	r2, #202	; 0xca
 8004c5a:	625a      	str	r2, [r3, #36]	; 0x24
 8004c5c:	68fb      	ldr	r3, [r7, #12]
 8004c5e:	681b      	ldr	r3, [r3, #0]
 8004c60:	2253      	movs	r2, #83	; 0x53
 8004c62:	625a      	str	r2, [r3, #36]	; 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 8004c64:	2513      	movs	r5, #19
 8004c66:	197c      	adds	r4, r7, r5
 8004c68:	68fb      	ldr	r3, [r7, #12]
 8004c6a:	0018      	movs	r0, r3
 8004c6c:	f000 f9c9 	bl	8005002 <RTC_EnterInitMode>
 8004c70:	0003      	movs	r3, r0
 8004c72:	7023      	strb	r3, [r4, #0]
  if(status == HAL_OK)
 8004c74:	0028      	movs	r0, r5
 8004c76:	183b      	adds	r3, r7, r0
 8004c78:	781b      	ldrb	r3, [r3, #0]
 8004c7a:	2b00      	cmp	r3, #0
 8004c7c:	d10c      	bne.n	8004c98 <HAL_RTC_SetDate+0xf0>
  {
    /* Set the RTC_DR register */
    hrtc->Instance->DR = (uint32_t)(datetmpreg & RTC_DR_RESERVED_MASK);
 8004c7e:	68fb      	ldr	r3, [r7, #12]
 8004c80:	681b      	ldr	r3, [r3, #0]
 8004c82:	697a      	ldr	r2, [r7, #20]
 8004c84:	4910      	ldr	r1, [pc, #64]	; (8004cc8 <HAL_RTC_SetDate+0x120>)
 8004c86:	400a      	ands	r2, r1
 8004c88:	605a      	str	r2, [r3, #4]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 8004c8a:	183c      	adds	r4, r7, r0
 8004c8c:	68fb      	ldr	r3, [r7, #12]
 8004c8e:	0018      	movs	r0, r3
 8004c90:	f000 f9fa 	bl	8005088 <RTC_ExitInitMode>
 8004c94:	0003      	movs	r3, r0
 8004c96:	7023      	strb	r3, [r4, #0]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8004c98:	68fb      	ldr	r3, [r7, #12]
 8004c9a:	681b      	ldr	r3, [r3, #0]
 8004c9c:	22ff      	movs	r2, #255	; 0xff
 8004c9e:	625a      	str	r2, [r3, #36]	; 0x24

  if (status == HAL_OK)
 8004ca0:	2313      	movs	r3, #19
 8004ca2:	18fb      	adds	r3, r7, r3
 8004ca4:	781b      	ldrb	r3, [r3, #0]
 8004ca6:	2b00      	cmp	r3, #0
 8004ca8:	d103      	bne.n	8004cb2 <HAL_RTC_SetDate+0x10a>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 8004caa:	68fb      	ldr	r3, [r7, #12]
 8004cac:	2229      	movs	r2, #41	; 0x29
 8004cae:	2101      	movs	r1, #1
 8004cb0:	5499      	strb	r1, [r3, r2]
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8004cb2:	68fb      	ldr	r3, [r7, #12]
 8004cb4:	2228      	movs	r2, #40	; 0x28
 8004cb6:	2100      	movs	r1, #0
 8004cb8:	5499      	strb	r1, [r3, r2]

  return status;
 8004cba:	2313      	movs	r3, #19
 8004cbc:	18fb      	adds	r3, r7, r3
 8004cbe:	781b      	ldrb	r3, [r3, #0]
}
 8004cc0:	0018      	movs	r0, r3
 8004cc2:	46bd      	mov	sp, r7
 8004cc4:	b006      	add	sp, #24
 8004cc6:	bdb0      	pop	{r4, r5, r7, pc}
 8004cc8:	00ffff3f 	.word	0x00ffff3f

08004ccc <HAL_RTC_GetDate>:
  *            @arg RTC_FORMAT_BIN:  Binary data format
  *            @arg RTC_FORMAT_BCD:  BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 8004ccc:	b580      	push	{r7, lr}
 8004cce:	b086      	sub	sp, #24
 8004cd0:	af00      	add	r7, sp, #0
 8004cd2:	60f8      	str	r0, [r7, #12]
 8004cd4:	60b9      	str	r1, [r7, #8]
 8004cd6:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Get the DR register */
  datetmpreg = (uint32_t)(hrtc->Instance->DR & RTC_DR_RESERVED_MASK);
 8004cd8:	68fb      	ldr	r3, [r7, #12]
 8004cda:	681b      	ldr	r3, [r3, #0]
 8004cdc:	685b      	ldr	r3, [r3, #4]
 8004cde:	4a21      	ldr	r2, [pc, #132]	; (8004d64 <HAL_RTC_GetDate+0x98>)
 8004ce0:	4013      	ands	r3, r2
 8004ce2:	617b      	str	r3, [r7, #20]

  /* Fill the structure fields with the read parameters */
  sDate->Year = (uint8_t)((datetmpreg & (RTC_DR_YT | RTC_DR_YU)) >> RTC_DR_YU_Pos);
 8004ce4:	697b      	ldr	r3, [r7, #20]
 8004ce6:	0c1b      	lsrs	r3, r3, #16
 8004ce8:	b2da      	uxtb	r2, r3
 8004cea:	68bb      	ldr	r3, [r7, #8]
 8004cec:	70da      	strb	r2, [r3, #3]
  sDate->Month = (uint8_t)((datetmpreg & (RTC_DR_MT | RTC_DR_MU)) >> RTC_DR_MU_Pos);
 8004cee:	697b      	ldr	r3, [r7, #20]
 8004cf0:	0a1b      	lsrs	r3, r3, #8
 8004cf2:	b2db      	uxtb	r3, r3
 8004cf4:	221f      	movs	r2, #31
 8004cf6:	4013      	ands	r3, r2
 8004cf8:	b2da      	uxtb	r2, r3
 8004cfa:	68bb      	ldr	r3, [r7, #8]
 8004cfc:	705a      	strb	r2, [r3, #1]
  sDate->Date = (uint8_t)((datetmpreg & (RTC_DR_DT | RTC_DR_DU)) >> RTC_DR_DU_Pos);
 8004cfe:	697b      	ldr	r3, [r7, #20]
 8004d00:	b2db      	uxtb	r3, r3
 8004d02:	223f      	movs	r2, #63	; 0x3f
 8004d04:	4013      	ands	r3, r2
 8004d06:	b2da      	uxtb	r2, r3
 8004d08:	68bb      	ldr	r3, [r7, #8]
 8004d0a:	709a      	strb	r2, [r3, #2]
  sDate->WeekDay = (uint8_t)((datetmpreg & (RTC_DR_WDU)) >> RTC_DR_WDU_Pos);
 8004d0c:	697b      	ldr	r3, [r7, #20]
 8004d0e:	0b5b      	lsrs	r3, r3, #13
 8004d10:	b2db      	uxtb	r3, r3
 8004d12:	2207      	movs	r2, #7
 8004d14:	4013      	ands	r3, r2
 8004d16:	b2da      	uxtb	r2, r3
 8004d18:	68bb      	ldr	r3, [r7, #8]
 8004d1a:	701a      	strb	r2, [r3, #0]

  /* Check the input parameters format */
  if(Format == RTC_FORMAT_BIN)
 8004d1c:	687b      	ldr	r3, [r7, #4]
 8004d1e:	2b00      	cmp	r3, #0
 8004d20:	d11a      	bne.n	8004d58 <HAL_RTC_GetDate+0x8c>
  {
    /* Convert the date structure parameters to Binary format */
    sDate->Year = (uint8_t)RTC_Bcd2ToByte(sDate->Year);
 8004d22:	68bb      	ldr	r3, [r7, #8]
 8004d24:	78db      	ldrb	r3, [r3, #3]
 8004d26:	0018      	movs	r0, r3
 8004d28:	f000 fa1a 	bl	8005160 <RTC_Bcd2ToByte>
 8004d2c:	0003      	movs	r3, r0
 8004d2e:	001a      	movs	r2, r3
 8004d30:	68bb      	ldr	r3, [r7, #8]
 8004d32:	70da      	strb	r2, [r3, #3]
    sDate->Month = (uint8_t)RTC_Bcd2ToByte(sDate->Month);
 8004d34:	68bb      	ldr	r3, [r7, #8]
 8004d36:	785b      	ldrb	r3, [r3, #1]
 8004d38:	0018      	movs	r0, r3
 8004d3a:	f000 fa11 	bl	8005160 <RTC_Bcd2ToByte>
 8004d3e:	0003      	movs	r3, r0
 8004d40:	001a      	movs	r2, r3
 8004d42:	68bb      	ldr	r3, [r7, #8]
 8004d44:	705a      	strb	r2, [r3, #1]
    sDate->Date = (uint8_t)RTC_Bcd2ToByte(sDate->Date);
 8004d46:	68bb      	ldr	r3, [r7, #8]
 8004d48:	789b      	ldrb	r3, [r3, #2]
 8004d4a:	0018      	movs	r0, r3
 8004d4c:	f000 fa08 	bl	8005160 <RTC_Bcd2ToByte>
 8004d50:	0003      	movs	r3, r0
 8004d52:	001a      	movs	r2, r3
 8004d54:	68bb      	ldr	r3, [r7, #8]
 8004d56:	709a      	strb	r2, [r3, #2]
  }
  return HAL_OK;
 8004d58:	2300      	movs	r3, #0
}
 8004d5a:	0018      	movs	r0, r3
 8004d5c:	46bd      	mov	sp, r7
 8004d5e:	b006      	add	sp, #24
 8004d60:	bd80      	pop	{r7, pc}
 8004d62:	46c0      	nop			; (mov r8, r8)
 8004d64:	00ffff3f 	.word	0x00ffff3f

08004d68 <HAL_RTC_SetAlarm>:
  *             @arg RTC_FORMAT_BIN: Binary data format
  *             @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetAlarm(RTC_HandleTypeDef *hrtc, RTC_AlarmTypeDef *sAlarm, uint32_t Format)
{
 8004d68:	b590      	push	{r4, r7, lr}
 8004d6a:	b089      	sub	sp, #36	; 0x24
 8004d6c:	af00      	add	r7, sp, #0
 8004d6e:	60f8      	str	r0, [r7, #12]
 8004d70:	60b9      	str	r1, [r7, #8]
 8004d72:	607a      	str	r2, [r7, #4]
  assert_param(IS_RTC_ALARM_DATE_WEEKDAY_SEL(sAlarm->AlarmDateWeekDaySel));
  assert_param(IS_RTC_ALARM_SUB_SECOND_VALUE(sAlarm->AlarmTime.SubSeconds));
  assert_param(IS_RTC_ALARM_SUB_SECOND_MASK(sAlarm->AlarmSubSecondMask));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8004d74:	68fb      	ldr	r3, [r7, #12]
 8004d76:	2228      	movs	r2, #40	; 0x28
 8004d78:	5c9b      	ldrb	r3, [r3, r2]
 8004d7a:	2b01      	cmp	r3, #1
 8004d7c:	d101      	bne.n	8004d82 <HAL_RTC_SetAlarm+0x1a>
 8004d7e:	2302      	movs	r3, #2
 8004d80:	e10c      	b.n	8004f9c <HAL_RTC_SetAlarm+0x234>
 8004d82:	68fb      	ldr	r3, [r7, #12]
 8004d84:	2228      	movs	r2, #40	; 0x28
 8004d86:	2101      	movs	r1, #1
 8004d88:	5499      	strb	r1, [r3, r2]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8004d8a:	68fb      	ldr	r3, [r7, #12]
 8004d8c:	2229      	movs	r2, #41	; 0x29
 8004d8e:	2102      	movs	r1, #2
 8004d90:	5499      	strb	r1, [r3, r2]

  if(Format == RTC_FORMAT_BIN)
 8004d92:	687b      	ldr	r3, [r7, #4]
 8004d94:	2b00      	cmp	r3, #0
 8004d96:	d136      	bne.n	8004e06 <HAL_RTC_SetAlarm+0x9e>
  {
    if((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 8004d98:	68fb      	ldr	r3, [r7, #12]
 8004d9a:	681b      	ldr	r3, [r3, #0]
 8004d9c:	699b      	ldr	r3, [r3, #24]
 8004d9e:	2240      	movs	r2, #64	; 0x40
 8004da0:	4013      	ands	r3, r2
 8004da2:	d102      	bne.n	8004daa <HAL_RTC_SetAlarm+0x42>
      assert_param(IS_RTC_HOUR12(sAlarm->AlarmTime.Hours));
      assert_param(IS_RTC_HOURFORMAT12(sAlarm->AlarmTime.TimeFormat));
    }
    else
    {
      sAlarm->AlarmTime.TimeFormat = 0x00U;
 8004da4:	68bb      	ldr	r3, [r7, #8]
 8004da6:	2200      	movs	r2, #0
 8004da8:	70da      	strb	r2, [r3, #3]
    else
    {
      assert_param(IS_RTC_ALARM_DATE_WEEKDAY_WEEKDAY(sAlarm->AlarmDateWeekDay));
    }

    tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours) << RTC_ALRMAR_HU_Pos) | \
 8004daa:	68bb      	ldr	r3, [r7, #8]
 8004dac:	781b      	ldrb	r3, [r3, #0]
 8004dae:	0018      	movs	r0, r3
 8004db0:	f000 f9ae 	bl	8005110 <RTC_ByteToBcd2>
 8004db4:	0003      	movs	r3, r0
 8004db6:	041c      	lsls	r4, r3, #16
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Minutes) << RTC_ALRMAR_MNU_Pos) | \
 8004db8:	68bb      	ldr	r3, [r7, #8]
 8004dba:	785b      	ldrb	r3, [r3, #1]
 8004dbc:	0018      	movs	r0, r3
 8004dbe:	f000 f9a7 	bl	8005110 <RTC_ByteToBcd2>
 8004dc2:	0003      	movs	r3, r0
 8004dc4:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours) << RTC_ALRMAR_HU_Pos) | \
 8004dc6:	431c      	orrs	r4, r3
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Seconds) << RTC_ALRMAR_SU_Pos) | \
 8004dc8:	68bb      	ldr	r3, [r7, #8]
 8004dca:	789b      	ldrb	r3, [r3, #2]
 8004dcc:	0018      	movs	r0, r3
 8004dce:	f000 f99f 	bl	8005110 <RTC_ByteToBcd2>
 8004dd2:	0003      	movs	r3, r0
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Minutes) << RTC_ALRMAR_MNU_Pos) | \
 8004dd4:	0022      	movs	r2, r4
 8004dd6:	431a      	orrs	r2, r3
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << RTC_ALRMAR_PM_Pos) | \
 8004dd8:	68bb      	ldr	r3, [r7, #8]
 8004dda:	78db      	ldrb	r3, [r3, #3]
 8004ddc:	059b      	lsls	r3, r3, #22
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Seconds) << RTC_ALRMAR_SU_Pos) | \
 8004dde:	431a      	orrs	r2, r3
 8004de0:	0014      	movs	r4, r2
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmDateWeekDay) << RTC_ALRMAR_DU_Pos) | \
 8004de2:	68bb      	ldr	r3, [r7, #8]
 8004de4:	2220      	movs	r2, #32
 8004de6:	5c9b      	ldrb	r3, [r3, r2]
 8004de8:	0018      	movs	r0, r3
 8004dea:	f000 f991 	bl	8005110 <RTC_ByteToBcd2>
 8004dee:	0003      	movs	r3, r0
 8004df0:	061b      	lsls	r3, r3, #24
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << RTC_ALRMAR_PM_Pos) | \
 8004df2:	0022      	movs	r2, r4
 8004df4:	431a      	orrs	r2, r3
              ((uint32_t)sAlarm->AlarmDateWeekDaySel) | \
 8004df6:	68bb      	ldr	r3, [r7, #8]
 8004df8:	69db      	ldr	r3, [r3, #28]
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmDateWeekDay) << RTC_ALRMAR_DU_Pos) | \
 8004dfa:	431a      	orrs	r2, r3
              ((uint32_t)sAlarm->AlarmMask));
 8004dfc:	68bb      	ldr	r3, [r7, #8]
 8004dfe:	695b      	ldr	r3, [r3, #20]
    tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours) << RTC_ALRMAR_HU_Pos) | \
 8004e00:	4313      	orrs	r3, r2
 8004e02:	61fb      	str	r3, [r7, #28]
 8004e04:	e022      	b.n	8004e4c <HAL_RTC_SetAlarm+0xe4>
  }
  else
  {
    if((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 8004e06:	68fb      	ldr	r3, [r7, #12]
 8004e08:	681b      	ldr	r3, [r3, #0]
 8004e0a:	699b      	ldr	r3, [r3, #24]
 8004e0c:	2240      	movs	r2, #64	; 0x40
 8004e0e:	4013      	ands	r3, r2
 8004e10:	d102      	bne.n	8004e18 <HAL_RTC_SetAlarm+0xb0>
      assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sAlarm->AlarmTime.Hours)));
      assert_param(IS_RTC_HOURFORMAT12(sAlarm->AlarmTime.TimeFormat));
    }
    else
    {
      sAlarm->AlarmTime.TimeFormat = 0x00U;
 8004e12:	68bb      	ldr	r3, [r7, #8]
 8004e14:	2200      	movs	r2, #0
 8004e16:	70da      	strb	r2, [r3, #3]
    else
    {
      assert_param(IS_RTC_ALARM_DATE_WEEKDAY_WEEKDAY(RTC_Bcd2ToByte(sAlarm->AlarmDateWeekDay)));
    }

    tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours) << RTC_ALRMAR_HU_Pos) | \
 8004e18:	68bb      	ldr	r3, [r7, #8]
 8004e1a:	781b      	ldrb	r3, [r3, #0]
 8004e1c:	041a      	lsls	r2, r3, #16
              ((uint32_t)(sAlarm->AlarmTime.Minutes) << RTC_ALRMAR_MNU_Pos) | \
 8004e1e:	68bb      	ldr	r3, [r7, #8]
 8004e20:	785b      	ldrb	r3, [r3, #1]
 8004e22:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours) << RTC_ALRMAR_HU_Pos) | \
 8004e24:	4313      	orrs	r3, r2
              ((uint32_t)(sAlarm->AlarmTime.Seconds) << RTC_ALRMAR_SU_Pos) | \
 8004e26:	68ba      	ldr	r2, [r7, #8]
 8004e28:	7892      	ldrb	r2, [r2, #2]
              ((uint32_t)(sAlarm->AlarmTime.Minutes) << RTC_ALRMAR_MNU_Pos) | \
 8004e2a:	431a      	orrs	r2, r3
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << RTC_ALRMAR_PM_Pos) | \
 8004e2c:	68bb      	ldr	r3, [r7, #8]
 8004e2e:	78db      	ldrb	r3, [r3, #3]
 8004e30:	059b      	lsls	r3, r3, #22
              ((uint32_t)(sAlarm->AlarmTime.Seconds) << RTC_ALRMAR_SU_Pos) | \
 8004e32:	431a      	orrs	r2, r3
              ((uint32_t)(sAlarm->AlarmDateWeekDay) << RTC_ALRMAR_DU_Pos) | \
 8004e34:	68bb      	ldr	r3, [r7, #8]
 8004e36:	2120      	movs	r1, #32
 8004e38:	5c5b      	ldrb	r3, [r3, r1]
 8004e3a:	061b      	lsls	r3, r3, #24
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << RTC_ALRMAR_PM_Pos) | \
 8004e3c:	431a      	orrs	r2, r3
              ((uint32_t)sAlarm->AlarmDateWeekDaySel) | \
 8004e3e:	68bb      	ldr	r3, [r7, #8]
 8004e40:	69db      	ldr	r3, [r3, #28]
              ((uint32_t)(sAlarm->AlarmDateWeekDay) << RTC_ALRMAR_DU_Pos) | \
 8004e42:	431a      	orrs	r2, r3
              ((uint32_t)sAlarm->AlarmMask));
 8004e44:	68bb      	ldr	r3, [r7, #8]
 8004e46:	695b      	ldr	r3, [r3, #20]
    tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours) << RTC_ALRMAR_HU_Pos) | \
 8004e48:	4313      	orrs	r3, r2
 8004e4a:	61fb      	str	r3, [r7, #28]
  }

  /* Configure the Alarm A or Alarm B Sub Second registers */
  subsecondtmpreg = (uint32_t)((uint32_t)(sAlarm->AlarmTime.SubSeconds) | (uint32_t)(sAlarm->AlarmSubSecondMask));
 8004e4c:	68bb      	ldr	r3, [r7, #8]
 8004e4e:	685a      	ldr	r2, [r3, #4]
 8004e50:	68bb      	ldr	r3, [r7, #8]
 8004e52:	699b      	ldr	r3, [r3, #24]
 8004e54:	4313      	orrs	r3, r2
 8004e56:	61bb      	str	r3, [r7, #24]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8004e58:	68fb      	ldr	r3, [r7, #12]
 8004e5a:	681b      	ldr	r3, [r3, #0]
 8004e5c:	22ca      	movs	r2, #202	; 0xca
 8004e5e:	625a      	str	r2, [r3, #36]	; 0x24
 8004e60:	68fb      	ldr	r3, [r7, #12]
 8004e62:	681b      	ldr	r3, [r3, #0]
 8004e64:	2253      	movs	r2, #83	; 0x53
 8004e66:	625a      	str	r2, [r3, #36]	; 0x24

  /* Configure the Alarm register */
  if(sAlarm->Alarm == RTC_ALARM_A)
 8004e68:	68bb      	ldr	r3, [r7, #8]
 8004e6a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8004e6c:	2380      	movs	r3, #128	; 0x80
 8004e6e:	005b      	lsls	r3, r3, #1
 8004e70:	429a      	cmp	r2, r3
 8004e72:	d143      	bne.n	8004efc <HAL_RTC_SetAlarm+0x194>
  {
    /* Disable the Alarm A interrupt */
    __HAL_RTC_ALARMA_DISABLE(hrtc);
 8004e74:	68fb      	ldr	r3, [r7, #12]
 8004e76:	681b      	ldr	r3, [r3, #0]
 8004e78:	699a      	ldr	r2, [r3, #24]
 8004e7a:	68fb      	ldr	r3, [r7, #12]
 8004e7c:	681b      	ldr	r3, [r3, #0]
 8004e7e:	4949      	ldr	r1, [pc, #292]	; (8004fa4 <HAL_RTC_SetAlarm+0x23c>)
 8004e80:	400a      	ands	r2, r1
 8004e82:	619a      	str	r2, [r3, #24]

    /* In case of interrupt mode is used, the interrupt source must disabled */
    __HAL_RTC_ALARM_DISABLE_IT(hrtc, RTC_IT_ALRA);
 8004e84:	68fb      	ldr	r3, [r7, #12]
 8004e86:	681b      	ldr	r3, [r3, #0]
 8004e88:	699a      	ldr	r2, [r3, #24]
 8004e8a:	68fb      	ldr	r3, [r7, #12]
 8004e8c:	681b      	ldr	r3, [r3, #0]
 8004e8e:	4946      	ldr	r1, [pc, #280]	; (8004fa8 <HAL_RTC_SetAlarm+0x240>)
 8004e90:	400a      	ands	r2, r1
 8004e92:	619a      	str	r2, [r3, #24]

    tickstart = HAL_GetTick();
 8004e94:	f7fe f9ea 	bl	800326c <HAL_GetTick>
 8004e98:	0003      	movs	r3, r0
 8004e9a:	617b      	str	r3, [r7, #20]
    /* Wait till RTC ALRAWF flag is set and if Time out is reached exit */
    while(__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRAWF) == 0U)
 8004e9c:	e016      	b.n	8004ecc <HAL_RTC_SetAlarm+0x164>
    {
      if((HAL_GetTick() - tickstart ) > RTC_TIMEOUT_VALUE)
 8004e9e:	f7fe f9e5 	bl	800326c <HAL_GetTick>
 8004ea2:	0002      	movs	r2, r0
 8004ea4:	697b      	ldr	r3, [r7, #20]
 8004ea6:	1ad2      	subs	r2, r2, r3
 8004ea8:	23fa      	movs	r3, #250	; 0xfa
 8004eaa:	009b      	lsls	r3, r3, #2
 8004eac:	429a      	cmp	r2, r3
 8004eae:	d90d      	bls.n	8004ecc <HAL_RTC_SetAlarm+0x164>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8004eb0:	68fb      	ldr	r3, [r7, #12]
 8004eb2:	681b      	ldr	r3, [r3, #0]
 8004eb4:	22ff      	movs	r2, #255	; 0xff
 8004eb6:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8004eb8:	68fb      	ldr	r3, [r7, #12]
 8004eba:	2229      	movs	r2, #41	; 0x29
 8004ebc:	2103      	movs	r1, #3
 8004ebe:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 8004ec0:	68fb      	ldr	r3, [r7, #12]
 8004ec2:	2228      	movs	r2, #40	; 0x28
 8004ec4:	2100      	movs	r1, #0
 8004ec6:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 8004ec8:	2303      	movs	r3, #3
 8004eca:	e067      	b.n	8004f9c <HAL_RTC_SetAlarm+0x234>
    while(__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRAWF) == 0U)
 8004ecc:	68fb      	ldr	r3, [r7, #12]
 8004ece:	681b      	ldr	r3, [r3, #0]
 8004ed0:	68db      	ldr	r3, [r3, #12]
 8004ed2:	2201      	movs	r2, #1
 8004ed4:	4013      	ands	r3, r2
 8004ed6:	d0e2      	beq.n	8004e9e <HAL_RTC_SetAlarm+0x136>
      }
    }

    hrtc->Instance->ALRMAR = (uint32_t)tmpreg;
 8004ed8:	68fb      	ldr	r3, [r7, #12]
 8004eda:	681b      	ldr	r3, [r3, #0]
 8004edc:	69fa      	ldr	r2, [r7, #28]
 8004ede:	641a      	str	r2, [r3, #64]	; 0x40
    /* Configure the Alarm A Sub Second register */
    hrtc->Instance->ALRMASSR = subsecondtmpreg;
 8004ee0:	68fb      	ldr	r3, [r7, #12]
 8004ee2:	681b      	ldr	r3, [r3, #0]
 8004ee4:	69ba      	ldr	r2, [r7, #24]
 8004ee6:	645a      	str	r2, [r3, #68]	; 0x44
    /* Configure the Alarm state: Enable Alarm */
    __HAL_RTC_ALARMA_ENABLE(hrtc);
 8004ee8:	68fb      	ldr	r3, [r7, #12]
 8004eea:	681b      	ldr	r3, [r3, #0]
 8004eec:	699a      	ldr	r2, [r3, #24]
 8004eee:	68fb      	ldr	r3, [r7, #12]
 8004ef0:	681b      	ldr	r3, [r3, #0]
 8004ef2:	2180      	movs	r1, #128	; 0x80
 8004ef4:	0049      	lsls	r1, r1, #1
 8004ef6:	430a      	orrs	r2, r1
 8004ef8:	619a      	str	r2, [r3, #24]
 8004efa:	e042      	b.n	8004f82 <HAL_RTC_SetAlarm+0x21a>
  }
  else
  {
    /* Disable the Alarm B interrupt */
    __HAL_RTC_ALARMB_DISABLE(hrtc);
 8004efc:	68fb      	ldr	r3, [r7, #12]
 8004efe:	681b      	ldr	r3, [r3, #0]
 8004f00:	699a      	ldr	r2, [r3, #24]
 8004f02:	68fb      	ldr	r3, [r7, #12]
 8004f04:	681b      	ldr	r3, [r3, #0]
 8004f06:	4929      	ldr	r1, [pc, #164]	; (8004fac <HAL_RTC_SetAlarm+0x244>)
 8004f08:	400a      	ands	r2, r1
 8004f0a:	619a      	str	r2, [r3, #24]

    /* In case of interrupt mode is used, the interrupt source must disabled */
    __HAL_RTC_ALARM_DISABLE_IT(hrtc, RTC_IT_ALRB);
 8004f0c:	68fb      	ldr	r3, [r7, #12]
 8004f0e:	681b      	ldr	r3, [r3, #0]
 8004f10:	699a      	ldr	r2, [r3, #24]
 8004f12:	68fb      	ldr	r3, [r7, #12]
 8004f14:	681b      	ldr	r3, [r3, #0]
 8004f16:	4926      	ldr	r1, [pc, #152]	; (8004fb0 <HAL_RTC_SetAlarm+0x248>)
 8004f18:	400a      	ands	r2, r1
 8004f1a:	619a      	str	r2, [r3, #24]

    tickstart = HAL_GetTick();
 8004f1c:	f7fe f9a6 	bl	800326c <HAL_GetTick>
 8004f20:	0003      	movs	r3, r0
 8004f22:	617b      	str	r3, [r7, #20]
    /* Wait till RTC ALRBWF flag is set and if Time out is reached exit */
    while(__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRBWF) == 0U)
 8004f24:	e016      	b.n	8004f54 <HAL_RTC_SetAlarm+0x1ec>
    {
      if((HAL_GetTick() - tickstart ) > RTC_TIMEOUT_VALUE)
 8004f26:	f7fe f9a1 	bl	800326c <HAL_GetTick>
 8004f2a:	0002      	movs	r2, r0
 8004f2c:	697b      	ldr	r3, [r7, #20]
 8004f2e:	1ad2      	subs	r2, r2, r3
 8004f30:	23fa      	movs	r3, #250	; 0xfa
 8004f32:	009b      	lsls	r3, r3, #2
 8004f34:	429a      	cmp	r2, r3
 8004f36:	d90d      	bls.n	8004f54 <HAL_RTC_SetAlarm+0x1ec>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8004f38:	68fb      	ldr	r3, [r7, #12]
 8004f3a:	681b      	ldr	r3, [r3, #0]
 8004f3c:	22ff      	movs	r2, #255	; 0xff
 8004f3e:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8004f40:	68fb      	ldr	r3, [r7, #12]
 8004f42:	2229      	movs	r2, #41	; 0x29
 8004f44:	2103      	movs	r1, #3
 8004f46:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 8004f48:	68fb      	ldr	r3, [r7, #12]
 8004f4a:	2228      	movs	r2, #40	; 0x28
 8004f4c:	2100      	movs	r1, #0
 8004f4e:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 8004f50:	2303      	movs	r3, #3
 8004f52:	e023      	b.n	8004f9c <HAL_RTC_SetAlarm+0x234>
    while(__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRBWF) == 0U)
 8004f54:	68fb      	ldr	r3, [r7, #12]
 8004f56:	681b      	ldr	r3, [r3, #0]
 8004f58:	68db      	ldr	r3, [r3, #12]
 8004f5a:	2202      	movs	r2, #2
 8004f5c:	4013      	ands	r3, r2
 8004f5e:	d0e2      	beq.n	8004f26 <HAL_RTC_SetAlarm+0x1be>
      }
    }

    hrtc->Instance->ALRMBR = (uint32_t)tmpreg;
 8004f60:	68fb      	ldr	r3, [r7, #12]
 8004f62:	681b      	ldr	r3, [r3, #0]
 8004f64:	69fa      	ldr	r2, [r7, #28]
 8004f66:	649a      	str	r2, [r3, #72]	; 0x48
    /* Configure the Alarm B Sub Second register */
    hrtc->Instance->ALRMBSSR = subsecondtmpreg;
 8004f68:	68fb      	ldr	r3, [r7, #12]
 8004f6a:	681b      	ldr	r3, [r3, #0]
 8004f6c:	69ba      	ldr	r2, [r7, #24]
 8004f6e:	64da      	str	r2, [r3, #76]	; 0x4c
    /* Configure the Alarm state: Enable Alarm */
    __HAL_RTC_ALARMB_ENABLE(hrtc);
 8004f70:	68fb      	ldr	r3, [r7, #12]
 8004f72:	681b      	ldr	r3, [r3, #0]
 8004f74:	699a      	ldr	r2, [r3, #24]
 8004f76:	68fb      	ldr	r3, [r7, #12]
 8004f78:	681b      	ldr	r3, [r3, #0]
 8004f7a:	2180      	movs	r1, #128	; 0x80
 8004f7c:	0089      	lsls	r1, r1, #2
 8004f7e:	430a      	orrs	r2, r1
 8004f80:	619a      	str	r2, [r3, #24]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8004f82:	68fb      	ldr	r3, [r7, #12]
 8004f84:	681b      	ldr	r3, [r3, #0]
 8004f86:	22ff      	movs	r2, #255	; 0xff
 8004f88:	625a      	str	r2, [r3, #36]	; 0x24

  /* Change RTC state */
  hrtc->State = HAL_RTC_STATE_READY;
 8004f8a:	68fb      	ldr	r3, [r7, #12]
 8004f8c:	2229      	movs	r2, #41	; 0x29
 8004f8e:	2101      	movs	r1, #1
 8004f90:	5499      	strb	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8004f92:	68fb      	ldr	r3, [r7, #12]
 8004f94:	2228      	movs	r2, #40	; 0x28
 8004f96:	2100      	movs	r1, #0
 8004f98:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8004f9a:	2300      	movs	r3, #0
}
 8004f9c:	0018      	movs	r0, r3
 8004f9e:	46bd      	mov	sp, r7
 8004fa0:	b009      	add	sp, #36	; 0x24
 8004fa2:	bd90      	pop	{r4, r7, pc}
 8004fa4:	fffffeff 	.word	0xfffffeff
 8004fa8:	ffffefff 	.word	0xffffefff
 8004fac:	fffffdff 	.word	0xfffffdff
 8004fb0:	ffffdfff 	.word	0xffffdfff

08004fb4 <HAL_RTC_WaitForSynchro>:
  *         correctly copied into the RTC_TR and RTC_DR shadow registers.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef* hrtc)
{
 8004fb4:	b580      	push	{r7, lr}
 8004fb6:	b084      	sub	sp, #16
 8004fb8:	af00      	add	r7, sp, #0
 8004fba:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Clear RSF flag */
  hrtc->Instance->ICSR &= (uint32_t)RTC_RSF_MASK;
 8004fbc:	687b      	ldr	r3, [r7, #4]
 8004fbe:	681b      	ldr	r3, [r3, #0]
 8004fc0:	68da      	ldr	r2, [r3, #12]
 8004fc2:	687b      	ldr	r3, [r7, #4]
 8004fc4:	681b      	ldr	r3, [r3, #0]
 8004fc6:	21a0      	movs	r1, #160	; 0xa0
 8004fc8:	438a      	bics	r2, r1
 8004fca:	60da      	str	r2, [r3, #12]

  tickstart = HAL_GetTick();
 8004fcc:	f7fe f94e 	bl	800326c <HAL_GetTick>
 8004fd0:	0003      	movs	r3, r0
 8004fd2:	60fb      	str	r3, [r7, #12]

  /* Wait the registers to be synchronised */
  while((hrtc->Instance->ICSR & RTC_ICSR_RSF) == 0U)
 8004fd4:	e00a      	b.n	8004fec <HAL_RTC_WaitForSynchro+0x38>
  {
    if((HAL_GetTick() - tickstart ) > RTC_TIMEOUT_VALUE)
 8004fd6:	f7fe f949 	bl	800326c <HAL_GetTick>
 8004fda:	0002      	movs	r2, r0
 8004fdc:	68fb      	ldr	r3, [r7, #12]
 8004fde:	1ad2      	subs	r2, r2, r3
 8004fe0:	23fa      	movs	r3, #250	; 0xfa
 8004fe2:	009b      	lsls	r3, r3, #2
 8004fe4:	429a      	cmp	r2, r3
 8004fe6:	d901      	bls.n	8004fec <HAL_RTC_WaitForSynchro+0x38>
    {
      return HAL_TIMEOUT;
 8004fe8:	2303      	movs	r3, #3
 8004fea:	e006      	b.n	8004ffa <HAL_RTC_WaitForSynchro+0x46>
  while((hrtc->Instance->ICSR & RTC_ICSR_RSF) == 0U)
 8004fec:	687b      	ldr	r3, [r7, #4]
 8004fee:	681b      	ldr	r3, [r3, #0]
 8004ff0:	68db      	ldr	r3, [r3, #12]
 8004ff2:	2220      	movs	r2, #32
 8004ff4:	4013      	ands	r3, r2
 8004ff6:	d0ee      	beq.n	8004fd6 <HAL_RTC_WaitForSynchro+0x22>
    }
  }

  return HAL_OK;
 8004ff8:	2300      	movs	r3, #0
}
 8004ffa:	0018      	movs	r0, r3
 8004ffc:	46bd      	mov	sp, r7
 8004ffe:	b004      	add	sp, #16
 8005000:	bd80      	pop	{r7, pc}

08005002 <RTC_EnterInitMode>:
  *         __HAL_RTC_WRITEPROTECTION_DISABLE() before calling this function.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef* hrtc)
{
 8005002:	b580      	push	{r7, lr}
 8005004:	b084      	sub	sp, #16
 8005006:	af00      	add	r7, sp, #0
 8005008:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;  
 800500a:	230f      	movs	r3, #15
 800500c:	18fb      	adds	r3, r7, r3
 800500e:	2200      	movs	r2, #0
 8005010:	701a      	strb	r2, [r3, #0]

  /* Check if the Initialization mode is set */
  if((hrtc->Instance->ICSR & RTC_ICSR_INITF) == 0U)
 8005012:	687b      	ldr	r3, [r7, #4]
 8005014:	681b      	ldr	r3, [r3, #0]
 8005016:	68db      	ldr	r3, [r3, #12]
 8005018:	2240      	movs	r2, #64	; 0x40
 800501a:	4013      	ands	r3, r2
 800501c:	d12c      	bne.n	8005078 <RTC_EnterInitMode+0x76>
  {
    /* Set the Initialization mode */
    SET_BIT(hrtc->Instance->ICSR, RTC_ICSR_INIT);
 800501e:	687b      	ldr	r3, [r7, #4]
 8005020:	681b      	ldr	r3, [r3, #0]
 8005022:	68da      	ldr	r2, [r3, #12]
 8005024:	687b      	ldr	r3, [r7, #4]
 8005026:	681b      	ldr	r3, [r3, #0]
 8005028:	2180      	movs	r1, #128	; 0x80
 800502a:	430a      	orrs	r2, r1
 800502c:	60da      	str	r2, [r3, #12]

    tickstart = HAL_GetTick();
 800502e:	f7fe f91d 	bl	800326c <HAL_GetTick>
 8005032:	0003      	movs	r3, r0
 8005034:	60bb      	str	r3, [r7, #8]
    /* Wait till RTC is in INIT state and if Time out is reached exit */
    while(((hrtc->Instance->ICSR & RTC_ICSR_INITF) == 0U) && (status != HAL_TIMEOUT))
 8005036:	e014      	b.n	8005062 <RTC_EnterInitMode+0x60>
    {
      if((HAL_GetTick()  - tickstart ) > RTC_TIMEOUT_VALUE)
 8005038:	f7fe f918 	bl	800326c <HAL_GetTick>
 800503c:	0002      	movs	r2, r0
 800503e:	68bb      	ldr	r3, [r7, #8]
 8005040:	1ad2      	subs	r2, r2, r3
 8005042:	200f      	movs	r0, #15
 8005044:	183b      	adds	r3, r7, r0
 8005046:	1839      	adds	r1, r7, r0
 8005048:	7809      	ldrb	r1, [r1, #0]
 800504a:	7019      	strb	r1, [r3, #0]
 800504c:	23fa      	movs	r3, #250	; 0xfa
 800504e:	009b      	lsls	r3, r3, #2
 8005050:	429a      	cmp	r2, r3
 8005052:	d906      	bls.n	8005062 <RTC_EnterInitMode+0x60>
      {
        status = HAL_TIMEOUT;
 8005054:	183b      	adds	r3, r7, r0
 8005056:	2203      	movs	r2, #3
 8005058:	701a      	strb	r2, [r3, #0]
        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 800505a:	687b      	ldr	r3, [r7, #4]
 800505c:	2229      	movs	r2, #41	; 0x29
 800505e:	2103      	movs	r1, #3
 8005060:	5499      	strb	r1, [r3, r2]
    while(((hrtc->Instance->ICSR & RTC_ICSR_INITF) == 0U) && (status != HAL_TIMEOUT))
 8005062:	687b      	ldr	r3, [r7, #4]
 8005064:	681b      	ldr	r3, [r3, #0]
 8005066:	68db      	ldr	r3, [r3, #12]
 8005068:	2240      	movs	r2, #64	; 0x40
 800506a:	4013      	ands	r3, r2
 800506c:	d104      	bne.n	8005078 <RTC_EnterInitMode+0x76>
 800506e:	230f      	movs	r3, #15
 8005070:	18fb      	adds	r3, r7, r3
 8005072:	781b      	ldrb	r3, [r3, #0]
 8005074:	2b03      	cmp	r3, #3
 8005076:	d1df      	bne.n	8005038 <RTC_EnterInitMode+0x36>
      }
    }
  }

  return status;
 8005078:	230f      	movs	r3, #15
 800507a:	18fb      	adds	r3, r7, r3
 800507c:	781b      	ldrb	r3, [r3, #0]
}
 800507e:	0018      	movs	r0, r3
 8005080:	46bd      	mov	sp, r7
 8005082:	b004      	add	sp, #16
 8005084:	bd80      	pop	{r7, pc}
	...

08005088 <RTC_ExitInitMode>:
  * @brief  Exit the RTC Initialization mode.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_ExitInitMode(RTC_HandleTypeDef *hrtc)
{
 8005088:	b590      	push	{r4, r7, lr}
 800508a:	b085      	sub	sp, #20
 800508c:	af00      	add	r7, sp, #0
 800508e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8005090:	240f      	movs	r4, #15
 8005092:	193b      	adds	r3, r7, r4
 8005094:	2200      	movs	r2, #0
 8005096:	701a      	strb	r2, [r3, #0]

  /* Exit Initialization mode */
  CLEAR_BIT(RTC->ICSR, RTC_ICSR_INIT);
 8005098:	4b1c      	ldr	r3, [pc, #112]	; (800510c <RTC_ExitInitMode+0x84>)
 800509a:	68da      	ldr	r2, [r3, #12]
 800509c:	4b1b      	ldr	r3, [pc, #108]	; (800510c <RTC_ExitInitMode+0x84>)
 800509e:	2180      	movs	r1, #128	; 0x80
 80050a0:	438a      	bics	r2, r1
 80050a2:	60da      	str	r2, [r3, #12]

  /* If CR_BYPSHAD bit = 0, wait for synchro */
  if (READ_BIT(RTC->CR, RTC_CR_BYPSHAD) == 0U)
 80050a4:	4b19      	ldr	r3, [pc, #100]	; (800510c <RTC_ExitInitMode+0x84>)
 80050a6:	699b      	ldr	r3, [r3, #24]
 80050a8:	2220      	movs	r2, #32
 80050aa:	4013      	ands	r3, r2
 80050ac:	d10d      	bne.n	80050ca <RTC_ExitInitMode+0x42>
  {
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 80050ae:	687b      	ldr	r3, [r7, #4]
 80050b0:	0018      	movs	r0, r3
 80050b2:	f7ff ff7f 	bl	8004fb4 <HAL_RTC_WaitForSynchro>
 80050b6:	1e03      	subs	r3, r0, #0
 80050b8:	d021      	beq.n	80050fe <RTC_ExitInitMode+0x76>
    {
      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 80050ba:	687b      	ldr	r3, [r7, #4]
 80050bc:	2229      	movs	r2, #41	; 0x29
 80050be:	2103      	movs	r1, #3
 80050c0:	5499      	strb	r1, [r3, r2]
      status = HAL_TIMEOUT;
 80050c2:	193b      	adds	r3, r7, r4
 80050c4:	2203      	movs	r2, #3
 80050c6:	701a      	strb	r2, [r3, #0]
 80050c8:	e019      	b.n	80050fe <RTC_ExitInitMode+0x76>
  }
  else /* WA 2.7.1 Calendar initialization may fail in case of consecutive INIT mode entry.
          Please look at STM32G0 Errata sheet on the internet for details. */
  {
    /* Clear BYPSHAD bit */
    CLEAR_BIT(RTC->CR, RTC_CR_BYPSHAD);
 80050ca:	4b10      	ldr	r3, [pc, #64]	; (800510c <RTC_ExitInitMode+0x84>)
 80050cc:	699a      	ldr	r2, [r3, #24]
 80050ce:	4b0f      	ldr	r3, [pc, #60]	; (800510c <RTC_ExitInitMode+0x84>)
 80050d0:	2120      	movs	r1, #32
 80050d2:	438a      	bics	r2, r1
 80050d4:	619a      	str	r2, [r3, #24]
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 80050d6:	687b      	ldr	r3, [r7, #4]
 80050d8:	0018      	movs	r0, r3
 80050da:	f7ff ff6b 	bl	8004fb4 <HAL_RTC_WaitForSynchro>
 80050de:	1e03      	subs	r3, r0, #0
 80050e0:	d007      	beq.n	80050f2 <RTC_ExitInitMode+0x6a>
    {
      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 80050e2:	687b      	ldr	r3, [r7, #4]
 80050e4:	2229      	movs	r2, #41	; 0x29
 80050e6:	2103      	movs	r1, #3
 80050e8:	5499      	strb	r1, [r3, r2]
      status = HAL_TIMEOUT;
 80050ea:	230f      	movs	r3, #15
 80050ec:	18fb      	adds	r3, r7, r3
 80050ee:	2203      	movs	r2, #3
 80050f0:	701a      	strb	r2, [r3, #0]
    }
    /* Restore BYPSHAD bit */
    SET_BIT(RTC->CR, RTC_CR_BYPSHAD);
 80050f2:	4b06      	ldr	r3, [pc, #24]	; (800510c <RTC_ExitInitMode+0x84>)
 80050f4:	699a      	ldr	r2, [r3, #24]
 80050f6:	4b05      	ldr	r3, [pc, #20]	; (800510c <RTC_ExitInitMode+0x84>)
 80050f8:	2120      	movs	r1, #32
 80050fa:	430a      	orrs	r2, r1
 80050fc:	619a      	str	r2, [r3, #24]
  }

  return status;
 80050fe:	230f      	movs	r3, #15
 8005100:	18fb      	adds	r3, r7, r3
 8005102:	781b      	ldrb	r3, [r3, #0]
}
 8005104:	0018      	movs	r0, r3
 8005106:	46bd      	mov	sp, r7
 8005108:	b005      	add	sp, #20
 800510a:	bd90      	pop	{r4, r7, pc}
 800510c:	40002800 	.word	0x40002800

08005110 <RTC_ByteToBcd2>:
  * @brief  Convert a 2 digit decimal to BCD format.
  * @param  Value Byte to be converted
  * @retval Converted byte
  */
uint8_t RTC_ByteToBcd2(uint8_t Value)
{
 8005110:	b580      	push	{r7, lr}
 8005112:	b084      	sub	sp, #16
 8005114:	af00      	add	r7, sp, #0
 8005116:	0002      	movs	r2, r0
 8005118:	1dfb      	adds	r3, r7, #7
 800511a:	701a      	strb	r2, [r3, #0]
  uint32_t bcdhigh = 0U;
 800511c:	2300      	movs	r3, #0
 800511e:	60fb      	str	r3, [r7, #12]
  uint8_t Param = Value;
 8005120:	230b      	movs	r3, #11
 8005122:	18fb      	adds	r3, r7, r3
 8005124:	1dfa      	adds	r2, r7, #7
 8005126:	7812      	ldrb	r2, [r2, #0]
 8005128:	701a      	strb	r2, [r3, #0]

  while(Param >= 10U)
 800512a:	e008      	b.n	800513e <RTC_ByteToBcd2+0x2e>
  {
    bcdhigh++;
 800512c:	68fb      	ldr	r3, [r7, #12]
 800512e:	3301      	adds	r3, #1
 8005130:	60fb      	str	r3, [r7, #12]
    Param -= 10U;
 8005132:	220b      	movs	r2, #11
 8005134:	18bb      	adds	r3, r7, r2
 8005136:	18ba      	adds	r2, r7, r2
 8005138:	7812      	ldrb	r2, [r2, #0]
 800513a:	3a0a      	subs	r2, #10
 800513c:	701a      	strb	r2, [r3, #0]
  while(Param >= 10U)
 800513e:	210b      	movs	r1, #11
 8005140:	187b      	adds	r3, r7, r1
 8005142:	781b      	ldrb	r3, [r3, #0]
 8005144:	2b09      	cmp	r3, #9
 8005146:	d8f1      	bhi.n	800512c <RTC_ByteToBcd2+0x1c>
  }

  return  ((uint8_t)(bcdhigh << 4U) | Param);
 8005148:	68fb      	ldr	r3, [r7, #12]
 800514a:	b2db      	uxtb	r3, r3
 800514c:	011b      	lsls	r3, r3, #4
 800514e:	b2da      	uxtb	r2, r3
 8005150:	187b      	adds	r3, r7, r1
 8005152:	781b      	ldrb	r3, [r3, #0]
 8005154:	4313      	orrs	r3, r2
 8005156:	b2db      	uxtb	r3, r3
}
 8005158:	0018      	movs	r0, r3
 800515a:	46bd      	mov	sp, r7
 800515c:	b004      	add	sp, #16
 800515e:	bd80      	pop	{r7, pc}

08005160 <RTC_Bcd2ToByte>:
  * @brief  Convert from 2 digit BCD to Binary.
  * @param  Value BCD value to be converted
  * @retval Converted word
  */
uint8_t RTC_Bcd2ToByte(uint8_t Value)
{
 8005160:	b580      	push	{r7, lr}
 8005162:	b084      	sub	sp, #16
 8005164:	af00      	add	r7, sp, #0
 8005166:	0002      	movs	r2, r0
 8005168:	1dfb      	adds	r3, r7, #7
 800516a:	701a      	strb	r2, [r3, #0]
  uint32_t tmp;
  tmp = (((uint32_t)Value & 0xF0U) >> 4U) * 10U;
 800516c:	1dfb      	adds	r3, r7, #7
 800516e:	781b      	ldrb	r3, [r3, #0]
 8005170:	091b      	lsrs	r3, r3, #4
 8005172:	b2db      	uxtb	r3, r3
 8005174:	001a      	movs	r2, r3
 8005176:	0013      	movs	r3, r2
 8005178:	009b      	lsls	r3, r3, #2
 800517a:	189b      	adds	r3, r3, r2
 800517c:	005b      	lsls	r3, r3, #1
 800517e:	60fb      	str	r3, [r7, #12]
  return (uint8_t)(tmp + ((uint32_t)Value & 0x0FU));
 8005180:	68fb      	ldr	r3, [r7, #12]
 8005182:	b2da      	uxtb	r2, r3
 8005184:	1dfb      	adds	r3, r7, #7
 8005186:	781b      	ldrb	r3, [r3, #0]
 8005188:	210f      	movs	r1, #15
 800518a:	400b      	ands	r3, r1
 800518c:	b2db      	uxtb	r3, r3
 800518e:	18d3      	adds	r3, r2, r3
 8005190:	b2db      	uxtb	r3, r3
}
 8005192:	0018      	movs	r0, r3
 8005194:	46bd      	mov	sp, r7
 8005196:	b004      	add	sp, #16
 8005198:	bd80      	pop	{r7, pc}

0800519a <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800519a:	b580      	push	{r7, lr}
 800519c:	b082      	sub	sp, #8
 800519e:	af00      	add	r7, sp, #0
 80051a0:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80051a2:	687b      	ldr	r3, [r7, #4]
 80051a4:	2b00      	cmp	r3, #0
 80051a6:	d101      	bne.n	80051ac <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80051a8:	2301      	movs	r3, #1
 80051aa:	e04a      	b.n	8005242 <HAL_TIM_Base_Init+0xa8>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80051ac:	687b      	ldr	r3, [r7, #4]
 80051ae:	223d      	movs	r2, #61	; 0x3d
 80051b0:	5c9b      	ldrb	r3, [r3, r2]
 80051b2:	b2db      	uxtb	r3, r3
 80051b4:	2b00      	cmp	r3, #0
 80051b6:	d107      	bne.n	80051c8 <HAL_TIM_Base_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80051b8:	687b      	ldr	r3, [r7, #4]
 80051ba:	223c      	movs	r2, #60	; 0x3c
 80051bc:	2100      	movs	r1, #0
 80051be:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80051c0:	687b      	ldr	r3, [r7, #4]
 80051c2:	0018      	movs	r0, r3
 80051c4:	f7fd fdec 	bl	8002da0 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80051c8:	687b      	ldr	r3, [r7, #4]
 80051ca:	223d      	movs	r2, #61	; 0x3d
 80051cc:	2102      	movs	r1, #2
 80051ce:	5499      	strb	r1, [r3, r2]

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80051d0:	687b      	ldr	r3, [r7, #4]
 80051d2:	681a      	ldr	r2, [r3, #0]
 80051d4:	687b      	ldr	r3, [r7, #4]
 80051d6:	3304      	adds	r3, #4
 80051d8:	0019      	movs	r1, r3
 80051da:	0010      	movs	r0, r2
 80051dc:	f000 fa18 	bl	8005610 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80051e0:	687b      	ldr	r3, [r7, #4]
 80051e2:	2248      	movs	r2, #72	; 0x48
 80051e4:	2101      	movs	r1, #1
 80051e6:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80051e8:	687b      	ldr	r3, [r7, #4]
 80051ea:	223e      	movs	r2, #62	; 0x3e
 80051ec:	2101      	movs	r1, #1
 80051ee:	5499      	strb	r1, [r3, r2]
 80051f0:	687b      	ldr	r3, [r7, #4]
 80051f2:	223f      	movs	r2, #63	; 0x3f
 80051f4:	2101      	movs	r1, #1
 80051f6:	5499      	strb	r1, [r3, r2]
 80051f8:	687b      	ldr	r3, [r7, #4]
 80051fa:	2240      	movs	r2, #64	; 0x40
 80051fc:	2101      	movs	r1, #1
 80051fe:	5499      	strb	r1, [r3, r2]
 8005200:	687b      	ldr	r3, [r7, #4]
 8005202:	2241      	movs	r2, #65	; 0x41
 8005204:	2101      	movs	r1, #1
 8005206:	5499      	strb	r1, [r3, r2]
 8005208:	687b      	ldr	r3, [r7, #4]
 800520a:	2242      	movs	r2, #66	; 0x42
 800520c:	2101      	movs	r1, #1
 800520e:	5499      	strb	r1, [r3, r2]
 8005210:	687b      	ldr	r3, [r7, #4]
 8005212:	2243      	movs	r2, #67	; 0x43
 8005214:	2101      	movs	r1, #1
 8005216:	5499      	strb	r1, [r3, r2]
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005218:	687b      	ldr	r3, [r7, #4]
 800521a:	2244      	movs	r2, #68	; 0x44
 800521c:	2101      	movs	r1, #1
 800521e:	5499      	strb	r1, [r3, r2]
 8005220:	687b      	ldr	r3, [r7, #4]
 8005222:	2245      	movs	r2, #69	; 0x45
 8005224:	2101      	movs	r1, #1
 8005226:	5499      	strb	r1, [r3, r2]
 8005228:	687b      	ldr	r3, [r7, #4]
 800522a:	2246      	movs	r2, #70	; 0x46
 800522c:	2101      	movs	r1, #1
 800522e:	5499      	strb	r1, [r3, r2]
 8005230:	687b      	ldr	r3, [r7, #4]
 8005232:	2247      	movs	r2, #71	; 0x47
 8005234:	2101      	movs	r1, #1
 8005236:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005238:	687b      	ldr	r3, [r7, #4]
 800523a:	223d      	movs	r2, #61	; 0x3d
 800523c:	2101      	movs	r1, #1
 800523e:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8005240:	2300      	movs	r3, #0
}
 8005242:	0018      	movs	r0, r3
 8005244:	46bd      	mov	sp, r7
 8005246:	b002      	add	sp, #8
 8005248:	bd80      	pop	{r7, pc}
	...

0800524c <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800524c:	b580      	push	{r7, lr}
 800524e:	b084      	sub	sp, #16
 8005250:	af00      	add	r7, sp, #0
 8005252:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8005254:	687b      	ldr	r3, [r7, #4]
 8005256:	223d      	movs	r2, #61	; 0x3d
 8005258:	5c9b      	ldrb	r3, [r3, r2]
 800525a:	b2db      	uxtb	r3, r3
 800525c:	2b01      	cmp	r3, #1
 800525e:	d001      	beq.n	8005264 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8005260:	2301      	movs	r3, #1
 8005262:	e047      	b.n	80052f4 <HAL_TIM_Base_Start_IT+0xa8>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005264:	687b      	ldr	r3, [r7, #4]
 8005266:	223d      	movs	r2, #61	; 0x3d
 8005268:	2102      	movs	r1, #2
 800526a:	5499      	strb	r1, [r3, r2]

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800526c:	687b      	ldr	r3, [r7, #4]
 800526e:	681b      	ldr	r3, [r3, #0]
 8005270:	68da      	ldr	r2, [r3, #12]
 8005272:	687b      	ldr	r3, [r7, #4]
 8005274:	681b      	ldr	r3, [r3, #0]
 8005276:	2101      	movs	r1, #1
 8005278:	430a      	orrs	r2, r1
 800527a:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800527c:	687b      	ldr	r3, [r7, #4]
 800527e:	681b      	ldr	r3, [r3, #0]
 8005280:	4a1e      	ldr	r2, [pc, #120]	; (80052fc <HAL_TIM_Base_Start_IT+0xb0>)
 8005282:	4293      	cmp	r3, r2
 8005284:	d014      	beq.n	80052b0 <HAL_TIM_Base_Start_IT+0x64>
 8005286:	687b      	ldr	r3, [r7, #4]
 8005288:	681a      	ldr	r2, [r3, #0]
 800528a:	2380      	movs	r3, #128	; 0x80
 800528c:	05db      	lsls	r3, r3, #23
 800528e:	429a      	cmp	r2, r3
 8005290:	d00e      	beq.n	80052b0 <HAL_TIM_Base_Start_IT+0x64>
 8005292:	687b      	ldr	r3, [r7, #4]
 8005294:	681b      	ldr	r3, [r3, #0]
 8005296:	4a1a      	ldr	r2, [pc, #104]	; (8005300 <HAL_TIM_Base_Start_IT+0xb4>)
 8005298:	4293      	cmp	r3, r2
 800529a:	d009      	beq.n	80052b0 <HAL_TIM_Base_Start_IT+0x64>
 800529c:	687b      	ldr	r3, [r7, #4]
 800529e:	681b      	ldr	r3, [r3, #0]
 80052a0:	4a18      	ldr	r2, [pc, #96]	; (8005304 <HAL_TIM_Base_Start_IT+0xb8>)
 80052a2:	4293      	cmp	r3, r2
 80052a4:	d004      	beq.n	80052b0 <HAL_TIM_Base_Start_IT+0x64>
 80052a6:	687b      	ldr	r3, [r7, #4]
 80052a8:	681b      	ldr	r3, [r3, #0]
 80052aa:	4a17      	ldr	r2, [pc, #92]	; (8005308 <HAL_TIM_Base_Start_IT+0xbc>)
 80052ac:	4293      	cmp	r3, r2
 80052ae:	d116      	bne.n	80052de <HAL_TIM_Base_Start_IT+0x92>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80052b0:	687b      	ldr	r3, [r7, #4]
 80052b2:	681b      	ldr	r3, [r3, #0]
 80052b4:	689b      	ldr	r3, [r3, #8]
 80052b6:	4a15      	ldr	r2, [pc, #84]	; (800530c <HAL_TIM_Base_Start_IT+0xc0>)
 80052b8:	4013      	ands	r3, r2
 80052ba:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80052bc:	68fb      	ldr	r3, [r7, #12]
 80052be:	2b06      	cmp	r3, #6
 80052c0:	d016      	beq.n	80052f0 <HAL_TIM_Base_Start_IT+0xa4>
 80052c2:	68fa      	ldr	r2, [r7, #12]
 80052c4:	2380      	movs	r3, #128	; 0x80
 80052c6:	025b      	lsls	r3, r3, #9
 80052c8:	429a      	cmp	r2, r3
 80052ca:	d011      	beq.n	80052f0 <HAL_TIM_Base_Start_IT+0xa4>
    {
      __HAL_TIM_ENABLE(htim);
 80052cc:	687b      	ldr	r3, [r7, #4]
 80052ce:	681b      	ldr	r3, [r3, #0]
 80052d0:	681a      	ldr	r2, [r3, #0]
 80052d2:	687b      	ldr	r3, [r7, #4]
 80052d4:	681b      	ldr	r3, [r3, #0]
 80052d6:	2101      	movs	r1, #1
 80052d8:	430a      	orrs	r2, r1
 80052da:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80052dc:	e008      	b.n	80052f0 <HAL_TIM_Base_Start_IT+0xa4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80052de:	687b      	ldr	r3, [r7, #4]
 80052e0:	681b      	ldr	r3, [r3, #0]
 80052e2:	681a      	ldr	r2, [r3, #0]
 80052e4:	687b      	ldr	r3, [r7, #4]
 80052e6:	681b      	ldr	r3, [r3, #0]
 80052e8:	2101      	movs	r1, #1
 80052ea:	430a      	orrs	r2, r1
 80052ec:	601a      	str	r2, [r3, #0]
 80052ee:	e000      	b.n	80052f2 <HAL_TIM_Base_Start_IT+0xa6>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80052f0:	46c0      	nop			; (mov r8, r8)
  }

  /* Return function status */
  return HAL_OK;
 80052f2:	2300      	movs	r3, #0
}
 80052f4:	0018      	movs	r0, r3
 80052f6:	46bd      	mov	sp, r7
 80052f8:	b004      	add	sp, #16
 80052fa:	bd80      	pop	{r7, pc}
 80052fc:	40012c00 	.word	0x40012c00
 8005300:	40000400 	.word	0x40000400
 8005304:	40000800 	.word	0x40000800
 8005308:	40014000 	.word	0x40014000
 800530c:	00010007 	.word	0x00010007

08005310 <HAL_TIM_Base_Stop_IT>:
  * @brief  Stops the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Stop_IT(TIM_HandleTypeDef *htim)
{
 8005310:	b580      	push	{r7, lr}
 8005312:	b082      	sub	sp, #8
 8005314:	af00      	add	r7, sp, #0
 8005316:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Disable the TIM Update interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_UPDATE);
 8005318:	687b      	ldr	r3, [r7, #4]
 800531a:	681b      	ldr	r3, [r3, #0]
 800531c:	68da      	ldr	r2, [r3, #12]
 800531e:	687b      	ldr	r3, [r7, #4]
 8005320:	681b      	ldr	r3, [r3, #0]
 8005322:	2101      	movs	r1, #1
 8005324:	438a      	bics	r2, r1
 8005326:	60da      	str	r2, [r3, #12]

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8005328:	687b      	ldr	r3, [r7, #4]
 800532a:	681b      	ldr	r3, [r3, #0]
 800532c:	6a1b      	ldr	r3, [r3, #32]
 800532e:	4a0d      	ldr	r2, [pc, #52]	; (8005364 <HAL_TIM_Base_Stop_IT+0x54>)
 8005330:	4013      	ands	r3, r2
 8005332:	d10d      	bne.n	8005350 <HAL_TIM_Base_Stop_IT+0x40>
 8005334:	687b      	ldr	r3, [r7, #4]
 8005336:	681b      	ldr	r3, [r3, #0]
 8005338:	6a1b      	ldr	r3, [r3, #32]
 800533a:	4a0b      	ldr	r2, [pc, #44]	; (8005368 <HAL_TIM_Base_Stop_IT+0x58>)
 800533c:	4013      	ands	r3, r2
 800533e:	d107      	bne.n	8005350 <HAL_TIM_Base_Stop_IT+0x40>
 8005340:	687b      	ldr	r3, [r7, #4]
 8005342:	681b      	ldr	r3, [r3, #0]
 8005344:	681a      	ldr	r2, [r3, #0]
 8005346:	687b      	ldr	r3, [r7, #4]
 8005348:	681b      	ldr	r3, [r3, #0]
 800534a:	2101      	movs	r1, #1
 800534c:	438a      	bics	r2, r1
 800534e:	601a      	str	r2, [r3, #0]

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_READY;
 8005350:	687b      	ldr	r3, [r7, #4]
 8005352:	223d      	movs	r2, #61	; 0x3d
 8005354:	2101      	movs	r1, #1
 8005356:	5499      	strb	r1, [r3, r2]

  /* Return function status */
  return HAL_OK;
 8005358:	2300      	movs	r3, #0
}
 800535a:	0018      	movs	r0, r3
 800535c:	46bd      	mov	sp, r7
 800535e:	b002      	add	sp, #8
 8005360:	bd80      	pop	{r7, pc}
 8005362:	46c0      	nop			; (mov r8, r8)
 8005364:	00001111 	.word	0x00001111
 8005368:	00000444 	.word	0x00000444

0800536c <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800536c:	b580      	push	{r7, lr}
 800536e:	b082      	sub	sp, #8
 8005370:	af00      	add	r7, sp, #0
 8005372:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8005374:	687b      	ldr	r3, [r7, #4]
 8005376:	681b      	ldr	r3, [r3, #0]
 8005378:	691b      	ldr	r3, [r3, #16]
 800537a:	2202      	movs	r2, #2
 800537c:	4013      	ands	r3, r2
 800537e:	2b02      	cmp	r3, #2
 8005380:	d124      	bne.n	80053cc <HAL_TIM_IRQHandler+0x60>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8005382:	687b      	ldr	r3, [r7, #4]
 8005384:	681b      	ldr	r3, [r3, #0]
 8005386:	68db      	ldr	r3, [r3, #12]
 8005388:	2202      	movs	r2, #2
 800538a:	4013      	ands	r3, r2
 800538c:	2b02      	cmp	r3, #2
 800538e:	d11d      	bne.n	80053cc <HAL_TIM_IRQHandler+0x60>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8005390:	687b      	ldr	r3, [r7, #4]
 8005392:	681b      	ldr	r3, [r3, #0]
 8005394:	2203      	movs	r2, #3
 8005396:	4252      	negs	r2, r2
 8005398:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800539a:	687b      	ldr	r3, [r7, #4]
 800539c:	2201      	movs	r2, #1
 800539e:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80053a0:	687b      	ldr	r3, [r7, #4]
 80053a2:	681b      	ldr	r3, [r3, #0]
 80053a4:	699b      	ldr	r3, [r3, #24]
 80053a6:	2203      	movs	r2, #3
 80053a8:	4013      	ands	r3, r2
 80053aa:	d004      	beq.n	80053b6 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80053ac:	687b      	ldr	r3, [r7, #4]
 80053ae:	0018      	movs	r0, r3
 80053b0:	f000 f916 	bl	80055e0 <HAL_TIM_IC_CaptureCallback>
 80053b4:	e007      	b.n	80053c6 <HAL_TIM_IRQHandler+0x5a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80053b6:	687b      	ldr	r3, [r7, #4]
 80053b8:	0018      	movs	r0, r3
 80053ba:	f000 f909 	bl	80055d0 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80053be:	687b      	ldr	r3, [r7, #4]
 80053c0:	0018      	movs	r0, r3
 80053c2:	f000 f915 	bl	80055f0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80053c6:	687b      	ldr	r3, [r7, #4]
 80053c8:	2200      	movs	r2, #0
 80053ca:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80053cc:	687b      	ldr	r3, [r7, #4]
 80053ce:	681b      	ldr	r3, [r3, #0]
 80053d0:	691b      	ldr	r3, [r3, #16]
 80053d2:	2204      	movs	r2, #4
 80053d4:	4013      	ands	r3, r2
 80053d6:	2b04      	cmp	r3, #4
 80053d8:	d125      	bne.n	8005426 <HAL_TIM_IRQHandler+0xba>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80053da:	687b      	ldr	r3, [r7, #4]
 80053dc:	681b      	ldr	r3, [r3, #0]
 80053de:	68db      	ldr	r3, [r3, #12]
 80053e0:	2204      	movs	r2, #4
 80053e2:	4013      	ands	r3, r2
 80053e4:	2b04      	cmp	r3, #4
 80053e6:	d11e      	bne.n	8005426 <HAL_TIM_IRQHandler+0xba>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80053e8:	687b      	ldr	r3, [r7, #4]
 80053ea:	681b      	ldr	r3, [r3, #0]
 80053ec:	2205      	movs	r2, #5
 80053ee:	4252      	negs	r2, r2
 80053f0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80053f2:	687b      	ldr	r3, [r7, #4]
 80053f4:	2202      	movs	r2, #2
 80053f6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80053f8:	687b      	ldr	r3, [r7, #4]
 80053fa:	681b      	ldr	r3, [r3, #0]
 80053fc:	699a      	ldr	r2, [r3, #24]
 80053fe:	23c0      	movs	r3, #192	; 0xc0
 8005400:	009b      	lsls	r3, r3, #2
 8005402:	4013      	ands	r3, r2
 8005404:	d004      	beq.n	8005410 <HAL_TIM_IRQHandler+0xa4>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005406:	687b      	ldr	r3, [r7, #4]
 8005408:	0018      	movs	r0, r3
 800540a:	f000 f8e9 	bl	80055e0 <HAL_TIM_IC_CaptureCallback>
 800540e:	e007      	b.n	8005420 <HAL_TIM_IRQHandler+0xb4>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005410:	687b      	ldr	r3, [r7, #4]
 8005412:	0018      	movs	r0, r3
 8005414:	f000 f8dc 	bl	80055d0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005418:	687b      	ldr	r3, [r7, #4]
 800541a:	0018      	movs	r0, r3
 800541c:	f000 f8e8 	bl	80055f0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005420:	687b      	ldr	r3, [r7, #4]
 8005422:	2200      	movs	r2, #0
 8005424:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8005426:	687b      	ldr	r3, [r7, #4]
 8005428:	681b      	ldr	r3, [r3, #0]
 800542a:	691b      	ldr	r3, [r3, #16]
 800542c:	2208      	movs	r2, #8
 800542e:	4013      	ands	r3, r2
 8005430:	2b08      	cmp	r3, #8
 8005432:	d124      	bne.n	800547e <HAL_TIM_IRQHandler+0x112>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8005434:	687b      	ldr	r3, [r7, #4]
 8005436:	681b      	ldr	r3, [r3, #0]
 8005438:	68db      	ldr	r3, [r3, #12]
 800543a:	2208      	movs	r2, #8
 800543c:	4013      	ands	r3, r2
 800543e:	2b08      	cmp	r3, #8
 8005440:	d11d      	bne.n	800547e <HAL_TIM_IRQHandler+0x112>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8005442:	687b      	ldr	r3, [r7, #4]
 8005444:	681b      	ldr	r3, [r3, #0]
 8005446:	2209      	movs	r2, #9
 8005448:	4252      	negs	r2, r2
 800544a:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800544c:	687b      	ldr	r3, [r7, #4]
 800544e:	2204      	movs	r2, #4
 8005450:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8005452:	687b      	ldr	r3, [r7, #4]
 8005454:	681b      	ldr	r3, [r3, #0]
 8005456:	69db      	ldr	r3, [r3, #28]
 8005458:	2203      	movs	r2, #3
 800545a:	4013      	ands	r3, r2
 800545c:	d004      	beq.n	8005468 <HAL_TIM_IRQHandler+0xfc>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800545e:	687b      	ldr	r3, [r7, #4]
 8005460:	0018      	movs	r0, r3
 8005462:	f000 f8bd 	bl	80055e0 <HAL_TIM_IC_CaptureCallback>
 8005466:	e007      	b.n	8005478 <HAL_TIM_IRQHandler+0x10c>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005468:	687b      	ldr	r3, [r7, #4]
 800546a:	0018      	movs	r0, r3
 800546c:	f000 f8b0 	bl	80055d0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005470:	687b      	ldr	r3, [r7, #4]
 8005472:	0018      	movs	r0, r3
 8005474:	f000 f8bc 	bl	80055f0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005478:	687b      	ldr	r3, [r7, #4]
 800547a:	2200      	movs	r2, #0
 800547c:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800547e:	687b      	ldr	r3, [r7, #4]
 8005480:	681b      	ldr	r3, [r3, #0]
 8005482:	691b      	ldr	r3, [r3, #16]
 8005484:	2210      	movs	r2, #16
 8005486:	4013      	ands	r3, r2
 8005488:	2b10      	cmp	r3, #16
 800548a:	d125      	bne.n	80054d8 <HAL_TIM_IRQHandler+0x16c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800548c:	687b      	ldr	r3, [r7, #4]
 800548e:	681b      	ldr	r3, [r3, #0]
 8005490:	68db      	ldr	r3, [r3, #12]
 8005492:	2210      	movs	r2, #16
 8005494:	4013      	ands	r3, r2
 8005496:	2b10      	cmp	r3, #16
 8005498:	d11e      	bne.n	80054d8 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800549a:	687b      	ldr	r3, [r7, #4]
 800549c:	681b      	ldr	r3, [r3, #0]
 800549e:	2211      	movs	r2, #17
 80054a0:	4252      	negs	r2, r2
 80054a2:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80054a4:	687b      	ldr	r3, [r7, #4]
 80054a6:	2208      	movs	r2, #8
 80054a8:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80054aa:	687b      	ldr	r3, [r7, #4]
 80054ac:	681b      	ldr	r3, [r3, #0]
 80054ae:	69da      	ldr	r2, [r3, #28]
 80054b0:	23c0      	movs	r3, #192	; 0xc0
 80054b2:	009b      	lsls	r3, r3, #2
 80054b4:	4013      	ands	r3, r2
 80054b6:	d004      	beq.n	80054c2 <HAL_TIM_IRQHandler+0x156>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80054b8:	687b      	ldr	r3, [r7, #4]
 80054ba:	0018      	movs	r0, r3
 80054bc:	f000 f890 	bl	80055e0 <HAL_TIM_IC_CaptureCallback>
 80054c0:	e007      	b.n	80054d2 <HAL_TIM_IRQHandler+0x166>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80054c2:	687b      	ldr	r3, [r7, #4]
 80054c4:	0018      	movs	r0, r3
 80054c6:	f000 f883 	bl	80055d0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80054ca:	687b      	ldr	r3, [r7, #4]
 80054cc:	0018      	movs	r0, r3
 80054ce:	f000 f88f 	bl	80055f0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80054d2:	687b      	ldr	r3, [r7, #4]
 80054d4:	2200      	movs	r2, #0
 80054d6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80054d8:	687b      	ldr	r3, [r7, #4]
 80054da:	681b      	ldr	r3, [r3, #0]
 80054dc:	691b      	ldr	r3, [r3, #16]
 80054de:	2201      	movs	r2, #1
 80054e0:	4013      	ands	r3, r2
 80054e2:	2b01      	cmp	r3, #1
 80054e4:	d10f      	bne.n	8005506 <HAL_TIM_IRQHandler+0x19a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80054e6:	687b      	ldr	r3, [r7, #4]
 80054e8:	681b      	ldr	r3, [r3, #0]
 80054ea:	68db      	ldr	r3, [r3, #12]
 80054ec:	2201      	movs	r2, #1
 80054ee:	4013      	ands	r3, r2
 80054f0:	2b01      	cmp	r3, #1
 80054f2:	d108      	bne.n	8005506 <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80054f4:	687b      	ldr	r3, [r7, #4]
 80054f6:	681b      	ldr	r3, [r3, #0]
 80054f8:	2202      	movs	r2, #2
 80054fa:	4252      	negs	r2, r2
 80054fc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80054fe:	687b      	ldr	r3, [r7, #4]
 8005500:	0018      	movs	r0, r3
 8005502:	f7fd fbad 	bl	8002c60 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8005506:	687b      	ldr	r3, [r7, #4]
 8005508:	681b      	ldr	r3, [r3, #0]
 800550a:	691b      	ldr	r3, [r3, #16]
 800550c:	2280      	movs	r2, #128	; 0x80
 800550e:	4013      	ands	r3, r2
 8005510:	2b80      	cmp	r3, #128	; 0x80
 8005512:	d10f      	bne.n	8005534 <HAL_TIM_IRQHandler+0x1c8>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8005514:	687b      	ldr	r3, [r7, #4]
 8005516:	681b      	ldr	r3, [r3, #0]
 8005518:	68db      	ldr	r3, [r3, #12]
 800551a:	2280      	movs	r2, #128	; 0x80
 800551c:	4013      	ands	r3, r2
 800551e:	2b80      	cmp	r3, #128	; 0x80
 8005520:	d108      	bne.n	8005534 <HAL_TIM_IRQHandler+0x1c8>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8005522:	687b      	ldr	r3, [r7, #4]
 8005524:	681b      	ldr	r3, [r3, #0]
 8005526:	2281      	movs	r2, #129	; 0x81
 8005528:	4252      	negs	r2, r2
 800552a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800552c:	687b      	ldr	r3, [r7, #4]
 800552e:	0018      	movs	r0, r3
 8005530:	f000 f976 	bl	8005820 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8005534:	687b      	ldr	r3, [r7, #4]
 8005536:	681b      	ldr	r3, [r3, #0]
 8005538:	691a      	ldr	r2, [r3, #16]
 800553a:	2380      	movs	r3, #128	; 0x80
 800553c:	005b      	lsls	r3, r3, #1
 800553e:	401a      	ands	r2, r3
 8005540:	2380      	movs	r3, #128	; 0x80
 8005542:	005b      	lsls	r3, r3, #1
 8005544:	429a      	cmp	r2, r3
 8005546:	d10e      	bne.n	8005566 <HAL_TIM_IRQHandler+0x1fa>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8005548:	687b      	ldr	r3, [r7, #4]
 800554a:	681b      	ldr	r3, [r3, #0]
 800554c:	68db      	ldr	r3, [r3, #12]
 800554e:	2280      	movs	r2, #128	; 0x80
 8005550:	4013      	ands	r3, r2
 8005552:	2b80      	cmp	r3, #128	; 0x80
 8005554:	d107      	bne.n	8005566 <HAL_TIM_IRQHandler+0x1fa>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8005556:	687b      	ldr	r3, [r7, #4]
 8005558:	681b      	ldr	r3, [r3, #0]
 800555a:	4a1c      	ldr	r2, [pc, #112]	; (80055cc <HAL_TIM_IRQHandler+0x260>)
 800555c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 800555e:	687b      	ldr	r3, [r7, #4]
 8005560:	0018      	movs	r0, r3
 8005562:	f000 f965 	bl	8005830 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8005566:	687b      	ldr	r3, [r7, #4]
 8005568:	681b      	ldr	r3, [r3, #0]
 800556a:	691b      	ldr	r3, [r3, #16]
 800556c:	2240      	movs	r2, #64	; 0x40
 800556e:	4013      	ands	r3, r2
 8005570:	2b40      	cmp	r3, #64	; 0x40
 8005572:	d10f      	bne.n	8005594 <HAL_TIM_IRQHandler+0x228>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8005574:	687b      	ldr	r3, [r7, #4]
 8005576:	681b      	ldr	r3, [r3, #0]
 8005578:	68db      	ldr	r3, [r3, #12]
 800557a:	2240      	movs	r2, #64	; 0x40
 800557c:	4013      	ands	r3, r2
 800557e:	2b40      	cmp	r3, #64	; 0x40
 8005580:	d108      	bne.n	8005594 <HAL_TIM_IRQHandler+0x228>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8005582:	687b      	ldr	r3, [r7, #4]
 8005584:	681b      	ldr	r3, [r3, #0]
 8005586:	2241      	movs	r2, #65	; 0x41
 8005588:	4252      	negs	r2, r2
 800558a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800558c:	687b      	ldr	r3, [r7, #4]
 800558e:	0018      	movs	r0, r3
 8005590:	f000 f836 	bl	8005600 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8005594:	687b      	ldr	r3, [r7, #4]
 8005596:	681b      	ldr	r3, [r3, #0]
 8005598:	691b      	ldr	r3, [r3, #16]
 800559a:	2220      	movs	r2, #32
 800559c:	4013      	ands	r3, r2
 800559e:	2b20      	cmp	r3, #32
 80055a0:	d10f      	bne.n	80055c2 <HAL_TIM_IRQHandler+0x256>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80055a2:	687b      	ldr	r3, [r7, #4]
 80055a4:	681b      	ldr	r3, [r3, #0]
 80055a6:	68db      	ldr	r3, [r3, #12]
 80055a8:	2220      	movs	r2, #32
 80055aa:	4013      	ands	r3, r2
 80055ac:	2b20      	cmp	r3, #32
 80055ae:	d108      	bne.n	80055c2 <HAL_TIM_IRQHandler+0x256>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80055b0:	687b      	ldr	r3, [r7, #4]
 80055b2:	681b      	ldr	r3, [r3, #0]
 80055b4:	2221      	movs	r2, #33	; 0x21
 80055b6:	4252      	negs	r2, r2
 80055b8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80055ba:	687b      	ldr	r3, [r7, #4]
 80055bc:	0018      	movs	r0, r3
 80055be:	f000 f927 	bl	8005810 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80055c2:	46c0      	nop			; (mov r8, r8)
 80055c4:	46bd      	mov	sp, r7
 80055c6:	b002      	add	sp, #8
 80055c8:	bd80      	pop	{r7, pc}
 80055ca:	46c0      	nop			; (mov r8, r8)
 80055cc:	fffffeff 	.word	0xfffffeff

080055d0 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80055d0:	b580      	push	{r7, lr}
 80055d2:	b082      	sub	sp, #8
 80055d4:	af00      	add	r7, sp, #0
 80055d6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80055d8:	46c0      	nop			; (mov r8, r8)
 80055da:	46bd      	mov	sp, r7
 80055dc:	b002      	add	sp, #8
 80055de:	bd80      	pop	{r7, pc}

080055e0 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80055e0:	b580      	push	{r7, lr}
 80055e2:	b082      	sub	sp, #8
 80055e4:	af00      	add	r7, sp, #0
 80055e6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80055e8:	46c0      	nop			; (mov r8, r8)
 80055ea:	46bd      	mov	sp, r7
 80055ec:	b002      	add	sp, #8
 80055ee:	bd80      	pop	{r7, pc}

080055f0 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80055f0:	b580      	push	{r7, lr}
 80055f2:	b082      	sub	sp, #8
 80055f4:	af00      	add	r7, sp, #0
 80055f6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80055f8:	46c0      	nop			; (mov r8, r8)
 80055fa:	46bd      	mov	sp, r7
 80055fc:	b002      	add	sp, #8
 80055fe:	bd80      	pop	{r7, pc}

08005600 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8005600:	b580      	push	{r7, lr}
 8005602:	b082      	sub	sp, #8
 8005604:	af00      	add	r7, sp, #0
 8005606:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8005608:	46c0      	nop			; (mov r8, r8)
 800560a:	46bd      	mov	sp, r7
 800560c:	b002      	add	sp, #8
 800560e:	bd80      	pop	{r7, pc}

08005610 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8005610:	b580      	push	{r7, lr}
 8005612:	b084      	sub	sp, #16
 8005614:	af00      	add	r7, sp, #0
 8005616:	6078      	str	r0, [r7, #4]
 8005618:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800561a:	687b      	ldr	r3, [r7, #4]
 800561c:	681b      	ldr	r3, [r3, #0]
 800561e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8005620:	687b      	ldr	r3, [r7, #4]
 8005622:	4a38      	ldr	r2, [pc, #224]	; (8005704 <TIM_Base_SetConfig+0xf4>)
 8005624:	4293      	cmp	r3, r2
 8005626:	d00c      	beq.n	8005642 <TIM_Base_SetConfig+0x32>
 8005628:	687a      	ldr	r2, [r7, #4]
 800562a:	2380      	movs	r3, #128	; 0x80
 800562c:	05db      	lsls	r3, r3, #23
 800562e:	429a      	cmp	r2, r3
 8005630:	d007      	beq.n	8005642 <TIM_Base_SetConfig+0x32>
 8005632:	687b      	ldr	r3, [r7, #4]
 8005634:	4a34      	ldr	r2, [pc, #208]	; (8005708 <TIM_Base_SetConfig+0xf8>)
 8005636:	4293      	cmp	r3, r2
 8005638:	d003      	beq.n	8005642 <TIM_Base_SetConfig+0x32>
 800563a:	687b      	ldr	r3, [r7, #4]
 800563c:	4a33      	ldr	r2, [pc, #204]	; (800570c <TIM_Base_SetConfig+0xfc>)
 800563e:	4293      	cmp	r3, r2
 8005640:	d108      	bne.n	8005654 <TIM_Base_SetConfig+0x44>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8005642:	68fb      	ldr	r3, [r7, #12]
 8005644:	2270      	movs	r2, #112	; 0x70
 8005646:	4393      	bics	r3, r2
 8005648:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800564a:	683b      	ldr	r3, [r7, #0]
 800564c:	685b      	ldr	r3, [r3, #4]
 800564e:	68fa      	ldr	r2, [r7, #12]
 8005650:	4313      	orrs	r3, r2
 8005652:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8005654:	687b      	ldr	r3, [r7, #4]
 8005656:	4a2b      	ldr	r2, [pc, #172]	; (8005704 <TIM_Base_SetConfig+0xf4>)
 8005658:	4293      	cmp	r3, r2
 800565a:	d01c      	beq.n	8005696 <TIM_Base_SetConfig+0x86>
 800565c:	687a      	ldr	r2, [r7, #4]
 800565e:	2380      	movs	r3, #128	; 0x80
 8005660:	05db      	lsls	r3, r3, #23
 8005662:	429a      	cmp	r2, r3
 8005664:	d017      	beq.n	8005696 <TIM_Base_SetConfig+0x86>
 8005666:	687b      	ldr	r3, [r7, #4]
 8005668:	4a27      	ldr	r2, [pc, #156]	; (8005708 <TIM_Base_SetConfig+0xf8>)
 800566a:	4293      	cmp	r3, r2
 800566c:	d013      	beq.n	8005696 <TIM_Base_SetConfig+0x86>
 800566e:	687b      	ldr	r3, [r7, #4]
 8005670:	4a26      	ldr	r2, [pc, #152]	; (800570c <TIM_Base_SetConfig+0xfc>)
 8005672:	4293      	cmp	r3, r2
 8005674:	d00f      	beq.n	8005696 <TIM_Base_SetConfig+0x86>
 8005676:	687b      	ldr	r3, [r7, #4]
 8005678:	4a25      	ldr	r2, [pc, #148]	; (8005710 <TIM_Base_SetConfig+0x100>)
 800567a:	4293      	cmp	r3, r2
 800567c:	d00b      	beq.n	8005696 <TIM_Base_SetConfig+0x86>
 800567e:	687b      	ldr	r3, [r7, #4]
 8005680:	4a24      	ldr	r2, [pc, #144]	; (8005714 <TIM_Base_SetConfig+0x104>)
 8005682:	4293      	cmp	r3, r2
 8005684:	d007      	beq.n	8005696 <TIM_Base_SetConfig+0x86>
 8005686:	687b      	ldr	r3, [r7, #4]
 8005688:	4a23      	ldr	r2, [pc, #140]	; (8005718 <TIM_Base_SetConfig+0x108>)
 800568a:	4293      	cmp	r3, r2
 800568c:	d003      	beq.n	8005696 <TIM_Base_SetConfig+0x86>
 800568e:	687b      	ldr	r3, [r7, #4]
 8005690:	4a22      	ldr	r2, [pc, #136]	; (800571c <TIM_Base_SetConfig+0x10c>)
 8005692:	4293      	cmp	r3, r2
 8005694:	d108      	bne.n	80056a8 <TIM_Base_SetConfig+0x98>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8005696:	68fb      	ldr	r3, [r7, #12]
 8005698:	4a21      	ldr	r2, [pc, #132]	; (8005720 <TIM_Base_SetConfig+0x110>)
 800569a:	4013      	ands	r3, r2
 800569c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800569e:	683b      	ldr	r3, [r7, #0]
 80056a0:	68db      	ldr	r3, [r3, #12]
 80056a2:	68fa      	ldr	r2, [r7, #12]
 80056a4:	4313      	orrs	r3, r2
 80056a6:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80056a8:	68fb      	ldr	r3, [r7, #12]
 80056aa:	2280      	movs	r2, #128	; 0x80
 80056ac:	4393      	bics	r3, r2
 80056ae:	001a      	movs	r2, r3
 80056b0:	683b      	ldr	r3, [r7, #0]
 80056b2:	695b      	ldr	r3, [r3, #20]
 80056b4:	4313      	orrs	r3, r2
 80056b6:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80056b8:	687b      	ldr	r3, [r7, #4]
 80056ba:	68fa      	ldr	r2, [r7, #12]
 80056bc:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80056be:	683b      	ldr	r3, [r7, #0]
 80056c0:	689a      	ldr	r2, [r3, #8]
 80056c2:	687b      	ldr	r3, [r7, #4]
 80056c4:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80056c6:	683b      	ldr	r3, [r7, #0]
 80056c8:	681a      	ldr	r2, [r3, #0]
 80056ca:	687b      	ldr	r3, [r7, #4]
 80056cc:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80056ce:	687b      	ldr	r3, [r7, #4]
 80056d0:	4a0c      	ldr	r2, [pc, #48]	; (8005704 <TIM_Base_SetConfig+0xf4>)
 80056d2:	4293      	cmp	r3, r2
 80056d4:	d00b      	beq.n	80056ee <TIM_Base_SetConfig+0xde>
 80056d6:	687b      	ldr	r3, [r7, #4]
 80056d8:	4a0e      	ldr	r2, [pc, #56]	; (8005714 <TIM_Base_SetConfig+0x104>)
 80056da:	4293      	cmp	r3, r2
 80056dc:	d007      	beq.n	80056ee <TIM_Base_SetConfig+0xde>
 80056de:	687b      	ldr	r3, [r7, #4]
 80056e0:	4a0d      	ldr	r2, [pc, #52]	; (8005718 <TIM_Base_SetConfig+0x108>)
 80056e2:	4293      	cmp	r3, r2
 80056e4:	d003      	beq.n	80056ee <TIM_Base_SetConfig+0xde>
 80056e6:	687b      	ldr	r3, [r7, #4]
 80056e8:	4a0c      	ldr	r2, [pc, #48]	; (800571c <TIM_Base_SetConfig+0x10c>)
 80056ea:	4293      	cmp	r3, r2
 80056ec:	d103      	bne.n	80056f6 <TIM_Base_SetConfig+0xe6>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80056ee:	683b      	ldr	r3, [r7, #0]
 80056f0:	691a      	ldr	r2, [r3, #16]
 80056f2:	687b      	ldr	r3, [r7, #4]
 80056f4:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80056f6:	687b      	ldr	r3, [r7, #4]
 80056f8:	2201      	movs	r2, #1
 80056fa:	615a      	str	r2, [r3, #20]
}
 80056fc:	46c0      	nop			; (mov r8, r8)
 80056fe:	46bd      	mov	sp, r7
 8005700:	b004      	add	sp, #16
 8005702:	bd80      	pop	{r7, pc}
 8005704:	40012c00 	.word	0x40012c00
 8005708:	40000400 	.word	0x40000400
 800570c:	40000800 	.word	0x40000800
 8005710:	40002000 	.word	0x40002000
 8005714:	40014000 	.word	0x40014000
 8005718:	40014400 	.word	0x40014400
 800571c:	40014800 	.word	0x40014800
 8005720:	fffffcff 	.word	0xfffffcff

08005724 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8005724:	b580      	push	{r7, lr}
 8005726:	b084      	sub	sp, #16
 8005728:	af00      	add	r7, sp, #0
 800572a:	6078      	str	r0, [r7, #4]
 800572c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800572e:	687b      	ldr	r3, [r7, #4]
 8005730:	223c      	movs	r2, #60	; 0x3c
 8005732:	5c9b      	ldrb	r3, [r3, r2]
 8005734:	2b01      	cmp	r3, #1
 8005736:	d101      	bne.n	800573c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8005738:	2302      	movs	r3, #2
 800573a:	e05a      	b.n	80057f2 <HAL_TIMEx_MasterConfigSynchronization+0xce>
 800573c:	687b      	ldr	r3, [r7, #4]
 800573e:	223c      	movs	r2, #60	; 0x3c
 8005740:	2101      	movs	r1, #1
 8005742:	5499      	strb	r1, [r3, r2]

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005744:	687b      	ldr	r3, [r7, #4]
 8005746:	223d      	movs	r2, #61	; 0x3d
 8005748:	2102      	movs	r1, #2
 800574a:	5499      	strb	r1, [r3, r2]

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800574c:	687b      	ldr	r3, [r7, #4]
 800574e:	681b      	ldr	r3, [r3, #0]
 8005750:	685b      	ldr	r3, [r3, #4]
 8005752:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8005754:	687b      	ldr	r3, [r7, #4]
 8005756:	681b      	ldr	r3, [r3, #0]
 8005758:	689b      	ldr	r3, [r3, #8]
 800575a:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 800575c:	687b      	ldr	r3, [r7, #4]
 800575e:	681b      	ldr	r3, [r3, #0]
 8005760:	4a26      	ldr	r2, [pc, #152]	; (80057fc <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 8005762:	4293      	cmp	r3, r2
 8005764:	d108      	bne.n	8005778 <HAL_TIMEx_MasterConfigSynchronization+0x54>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8005766:	68fb      	ldr	r3, [r7, #12]
 8005768:	4a25      	ldr	r2, [pc, #148]	; (8005800 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 800576a:	4013      	ands	r3, r2
 800576c:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 800576e:	683b      	ldr	r3, [r7, #0]
 8005770:	685b      	ldr	r3, [r3, #4]
 8005772:	68fa      	ldr	r2, [r7, #12]
 8005774:	4313      	orrs	r3, r2
 8005776:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8005778:	68fb      	ldr	r3, [r7, #12]
 800577a:	2270      	movs	r2, #112	; 0x70
 800577c:	4393      	bics	r3, r2
 800577e:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8005780:	683b      	ldr	r3, [r7, #0]
 8005782:	681b      	ldr	r3, [r3, #0]
 8005784:	68fa      	ldr	r2, [r7, #12]
 8005786:	4313      	orrs	r3, r2
 8005788:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800578a:	687b      	ldr	r3, [r7, #4]
 800578c:	681b      	ldr	r3, [r3, #0]
 800578e:	68fa      	ldr	r2, [r7, #12]
 8005790:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005792:	687b      	ldr	r3, [r7, #4]
 8005794:	681b      	ldr	r3, [r3, #0]
 8005796:	4a19      	ldr	r2, [pc, #100]	; (80057fc <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 8005798:	4293      	cmp	r3, r2
 800579a:	d014      	beq.n	80057c6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800579c:	687b      	ldr	r3, [r7, #4]
 800579e:	681a      	ldr	r2, [r3, #0]
 80057a0:	2380      	movs	r3, #128	; 0x80
 80057a2:	05db      	lsls	r3, r3, #23
 80057a4:	429a      	cmp	r2, r3
 80057a6:	d00e      	beq.n	80057c6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80057a8:	687b      	ldr	r3, [r7, #4]
 80057aa:	681b      	ldr	r3, [r3, #0]
 80057ac:	4a15      	ldr	r2, [pc, #84]	; (8005804 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 80057ae:	4293      	cmp	r3, r2
 80057b0:	d009      	beq.n	80057c6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80057b2:	687b      	ldr	r3, [r7, #4]
 80057b4:	681b      	ldr	r3, [r3, #0]
 80057b6:	4a14      	ldr	r2, [pc, #80]	; (8005808 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 80057b8:	4293      	cmp	r3, r2
 80057ba:	d004      	beq.n	80057c6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80057bc:	687b      	ldr	r3, [r7, #4]
 80057be:	681b      	ldr	r3, [r3, #0]
 80057c0:	4a12      	ldr	r2, [pc, #72]	; (800580c <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 80057c2:	4293      	cmp	r3, r2
 80057c4:	d10c      	bne.n	80057e0 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80057c6:	68bb      	ldr	r3, [r7, #8]
 80057c8:	2280      	movs	r2, #128	; 0x80
 80057ca:	4393      	bics	r3, r2
 80057cc:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80057ce:	683b      	ldr	r3, [r7, #0]
 80057d0:	689b      	ldr	r3, [r3, #8]
 80057d2:	68ba      	ldr	r2, [r7, #8]
 80057d4:	4313      	orrs	r3, r2
 80057d6:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80057d8:	687b      	ldr	r3, [r7, #4]
 80057da:	681b      	ldr	r3, [r3, #0]
 80057dc:	68ba      	ldr	r2, [r7, #8]
 80057de:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80057e0:	687b      	ldr	r3, [r7, #4]
 80057e2:	223d      	movs	r2, #61	; 0x3d
 80057e4:	2101      	movs	r1, #1
 80057e6:	5499      	strb	r1, [r3, r2]

  __HAL_UNLOCK(htim);
 80057e8:	687b      	ldr	r3, [r7, #4]
 80057ea:	223c      	movs	r2, #60	; 0x3c
 80057ec:	2100      	movs	r1, #0
 80057ee:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80057f0:	2300      	movs	r3, #0
}
 80057f2:	0018      	movs	r0, r3
 80057f4:	46bd      	mov	sp, r7
 80057f6:	b004      	add	sp, #16
 80057f8:	bd80      	pop	{r7, pc}
 80057fa:	46c0      	nop			; (mov r8, r8)
 80057fc:	40012c00 	.word	0x40012c00
 8005800:	ff0fffff 	.word	0xff0fffff
 8005804:	40000400 	.word	0x40000400
 8005808:	40000800 	.word	0x40000800
 800580c:	40014000 	.word	0x40014000

08005810 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8005810:	b580      	push	{r7, lr}
 8005812:	b082      	sub	sp, #8
 8005814:	af00      	add	r7, sp, #0
 8005816:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8005818:	46c0      	nop			; (mov r8, r8)
 800581a:	46bd      	mov	sp, r7
 800581c:	b002      	add	sp, #8
 800581e:	bd80      	pop	{r7, pc}

08005820 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8005820:	b580      	push	{r7, lr}
 8005822:	b082      	sub	sp, #8
 8005824:	af00      	add	r7, sp, #0
 8005826:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8005828:	46c0      	nop			; (mov r8, r8)
 800582a:	46bd      	mov	sp, r7
 800582c:	b002      	add	sp, #8
 800582e:	bd80      	pop	{r7, pc}

08005830 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8005830:	b580      	push	{r7, lr}
 8005832:	b082      	sub	sp, #8
 8005834:	af00      	add	r7, sp, #0
 8005836:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8005838:	46c0      	nop			; (mov r8, r8)
 800583a:	46bd      	mov	sp, r7
 800583c:	b002      	add	sp, #8
 800583e:	bd80      	pop	{r7, pc}

08005840 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8005840:	b580      	push	{r7, lr}
 8005842:	b082      	sub	sp, #8
 8005844:	af00      	add	r7, sp, #0
 8005846:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8005848:	687b      	ldr	r3, [r7, #4]
 800584a:	2b00      	cmp	r3, #0
 800584c:	d101      	bne.n	8005852 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800584e:	2301      	movs	r3, #1
 8005850:	e046      	b.n	80058e0 <HAL_UART_Init+0xa0>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8005852:	687b      	ldr	r3, [r7, #4]
 8005854:	2288      	movs	r2, #136	; 0x88
 8005856:	589b      	ldr	r3, [r3, r2]
 8005858:	2b00      	cmp	r3, #0
 800585a:	d107      	bne.n	800586c <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800585c:	687b      	ldr	r3, [r7, #4]
 800585e:	2284      	movs	r2, #132	; 0x84
 8005860:	2100      	movs	r1, #0
 8005862:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8005864:	687b      	ldr	r3, [r7, #4]
 8005866:	0018      	movs	r0, r3
 8005868:	f7fd fac0 	bl	8002dec <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800586c:	687b      	ldr	r3, [r7, #4]
 800586e:	2288      	movs	r2, #136	; 0x88
 8005870:	2124      	movs	r1, #36	; 0x24
 8005872:	5099      	str	r1, [r3, r2]

  __HAL_UART_DISABLE(huart);
 8005874:	687b      	ldr	r3, [r7, #4]
 8005876:	681b      	ldr	r3, [r3, #0]
 8005878:	681a      	ldr	r2, [r3, #0]
 800587a:	687b      	ldr	r3, [r7, #4]
 800587c:	681b      	ldr	r3, [r3, #0]
 800587e:	2101      	movs	r1, #1
 8005880:	438a      	bics	r2, r1
 8005882:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8005884:	687b      	ldr	r3, [r7, #4]
 8005886:	0018      	movs	r0, r3
 8005888:	f000 f9ae 	bl	8005be8 <UART_SetConfig>
 800588c:	0003      	movs	r3, r0
 800588e:	2b01      	cmp	r3, #1
 8005890:	d101      	bne.n	8005896 <HAL_UART_Init+0x56>
  {
    return HAL_ERROR;
 8005892:	2301      	movs	r3, #1
 8005894:	e024      	b.n	80058e0 <HAL_UART_Init+0xa0>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8005896:	687b      	ldr	r3, [r7, #4]
 8005898:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800589a:	2b00      	cmp	r3, #0
 800589c:	d003      	beq.n	80058a6 <HAL_UART_Init+0x66>
  {
    UART_AdvFeatureConfig(huart);
 800589e:	687b      	ldr	r3, [r7, #4]
 80058a0:	0018      	movs	r0, r3
 80058a2:	f000 fcf7 	bl	8006294 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80058a6:	687b      	ldr	r3, [r7, #4]
 80058a8:	681b      	ldr	r3, [r3, #0]
 80058aa:	685a      	ldr	r2, [r3, #4]
 80058ac:	687b      	ldr	r3, [r7, #4]
 80058ae:	681b      	ldr	r3, [r3, #0]
 80058b0:	490d      	ldr	r1, [pc, #52]	; (80058e8 <HAL_UART_Init+0xa8>)
 80058b2:	400a      	ands	r2, r1
 80058b4:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80058b6:	687b      	ldr	r3, [r7, #4]
 80058b8:	681b      	ldr	r3, [r3, #0]
 80058ba:	689a      	ldr	r2, [r3, #8]
 80058bc:	687b      	ldr	r3, [r7, #4]
 80058be:	681b      	ldr	r3, [r3, #0]
 80058c0:	212a      	movs	r1, #42	; 0x2a
 80058c2:	438a      	bics	r2, r1
 80058c4:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80058c6:	687b      	ldr	r3, [r7, #4]
 80058c8:	681b      	ldr	r3, [r3, #0]
 80058ca:	681a      	ldr	r2, [r3, #0]
 80058cc:	687b      	ldr	r3, [r7, #4]
 80058ce:	681b      	ldr	r3, [r3, #0]
 80058d0:	2101      	movs	r1, #1
 80058d2:	430a      	orrs	r2, r1
 80058d4:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80058d6:	687b      	ldr	r3, [r7, #4]
 80058d8:	0018      	movs	r0, r3
 80058da:	f000 fd8f 	bl	80063fc <UART_CheckIdleState>
 80058de:	0003      	movs	r3, r0
}
 80058e0:	0018      	movs	r0, r3
 80058e2:	46bd      	mov	sp, r7
 80058e4:	b002      	add	sp, #8
 80058e6:	bd80      	pop	{r7, pc}
 80058e8:	ffffb7ff 	.word	0xffffb7ff

080058ec <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80058ec:	b580      	push	{r7, lr}
 80058ee:	b08a      	sub	sp, #40	; 0x28
 80058f0:	af02      	add	r7, sp, #8
 80058f2:	60f8      	str	r0, [r7, #12]
 80058f4:	60b9      	str	r1, [r7, #8]
 80058f6:	603b      	str	r3, [r7, #0]
 80058f8:	1dbb      	adds	r3, r7, #6
 80058fa:	801a      	strh	r2, [r3, #0]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80058fc:	68fb      	ldr	r3, [r7, #12]
 80058fe:	2288      	movs	r2, #136	; 0x88
 8005900:	589b      	ldr	r3, [r3, r2]
 8005902:	2b20      	cmp	r3, #32
 8005904:	d000      	beq.n	8005908 <HAL_UART_Transmit+0x1c>
 8005906:	e088      	b.n	8005a1a <HAL_UART_Transmit+0x12e>
  {
    if ((pData == NULL) || (Size == 0U))
 8005908:	68bb      	ldr	r3, [r7, #8]
 800590a:	2b00      	cmp	r3, #0
 800590c:	d003      	beq.n	8005916 <HAL_UART_Transmit+0x2a>
 800590e:	1dbb      	adds	r3, r7, #6
 8005910:	881b      	ldrh	r3, [r3, #0]
 8005912:	2b00      	cmp	r3, #0
 8005914:	d101      	bne.n	800591a <HAL_UART_Transmit+0x2e>
    {
      return  HAL_ERROR;
 8005916:	2301      	movs	r3, #1
 8005918:	e080      	b.n	8005a1c <HAL_UART_Transmit+0x130>
    }

    /* In case of 9bits/No Parity transfer, pData buffer provided as input parameter
       should be aligned on a u16 frontier, as data to be filled into TDR will be
       handled through a u16 cast. */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800591a:	68fb      	ldr	r3, [r7, #12]
 800591c:	689a      	ldr	r2, [r3, #8]
 800591e:	2380      	movs	r3, #128	; 0x80
 8005920:	015b      	lsls	r3, r3, #5
 8005922:	429a      	cmp	r2, r3
 8005924:	d109      	bne.n	800593a <HAL_UART_Transmit+0x4e>
 8005926:	68fb      	ldr	r3, [r7, #12]
 8005928:	691b      	ldr	r3, [r3, #16]
 800592a:	2b00      	cmp	r3, #0
 800592c:	d105      	bne.n	800593a <HAL_UART_Transmit+0x4e>
    {
      if ((((uint32_t)pData) & 1U) != 0U)
 800592e:	68bb      	ldr	r3, [r7, #8]
 8005930:	2201      	movs	r2, #1
 8005932:	4013      	ands	r3, r2
 8005934:	d001      	beq.n	800593a <HAL_UART_Transmit+0x4e>
      {
        return  HAL_ERROR;
 8005936:	2301      	movs	r3, #1
 8005938:	e070      	b.n	8005a1c <HAL_UART_Transmit+0x130>
      }
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800593a:	68fb      	ldr	r3, [r7, #12]
 800593c:	2290      	movs	r2, #144	; 0x90
 800593e:	2100      	movs	r1, #0
 8005940:	5099      	str	r1, [r3, r2]
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8005942:	68fb      	ldr	r3, [r7, #12]
 8005944:	2288      	movs	r2, #136	; 0x88
 8005946:	2121      	movs	r1, #33	; 0x21
 8005948:	5099      	str	r1, [r3, r2]

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800594a:	f7fd fc8f 	bl	800326c <HAL_GetTick>
 800594e:	0003      	movs	r3, r0
 8005950:	617b      	str	r3, [r7, #20]

    huart->TxXferSize  = Size;
 8005952:	68fb      	ldr	r3, [r7, #12]
 8005954:	1dba      	adds	r2, r7, #6
 8005956:	2154      	movs	r1, #84	; 0x54
 8005958:	8812      	ldrh	r2, [r2, #0]
 800595a:	525a      	strh	r2, [r3, r1]
    huart->TxXferCount = Size;
 800595c:	68fb      	ldr	r3, [r7, #12]
 800595e:	1dba      	adds	r2, r7, #6
 8005960:	2156      	movs	r1, #86	; 0x56
 8005962:	8812      	ldrh	r2, [r2, #0]
 8005964:	525a      	strh	r2, [r3, r1]

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005966:	68fb      	ldr	r3, [r7, #12]
 8005968:	689a      	ldr	r2, [r3, #8]
 800596a:	2380      	movs	r3, #128	; 0x80
 800596c:	015b      	lsls	r3, r3, #5
 800596e:	429a      	cmp	r2, r3
 8005970:	d108      	bne.n	8005984 <HAL_UART_Transmit+0x98>
 8005972:	68fb      	ldr	r3, [r7, #12]
 8005974:	691b      	ldr	r3, [r3, #16]
 8005976:	2b00      	cmp	r3, #0
 8005978:	d104      	bne.n	8005984 <HAL_UART_Transmit+0x98>
    {
      pdata8bits  = NULL;
 800597a:	2300      	movs	r3, #0
 800597c:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800597e:	68bb      	ldr	r3, [r7, #8]
 8005980:	61bb      	str	r3, [r7, #24]
 8005982:	e003      	b.n	800598c <HAL_UART_Transmit+0xa0>
    }
    else
    {
      pdata8bits  = pData;
 8005984:	68bb      	ldr	r3, [r7, #8]
 8005986:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8005988:	2300      	movs	r3, #0
 800598a:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 800598c:	e02c      	b.n	80059e8 <HAL_UART_Transmit+0xfc>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800598e:	697a      	ldr	r2, [r7, #20]
 8005990:	68f8      	ldr	r0, [r7, #12]
 8005992:	683b      	ldr	r3, [r7, #0]
 8005994:	9300      	str	r3, [sp, #0]
 8005996:	0013      	movs	r3, r2
 8005998:	2200      	movs	r2, #0
 800599a:	2180      	movs	r1, #128	; 0x80
 800599c:	f000 fd7c 	bl	8006498 <UART_WaitOnFlagUntilTimeout>
 80059a0:	1e03      	subs	r3, r0, #0
 80059a2:	d001      	beq.n	80059a8 <HAL_UART_Transmit+0xbc>
      {
        return HAL_TIMEOUT;
 80059a4:	2303      	movs	r3, #3
 80059a6:	e039      	b.n	8005a1c <HAL_UART_Transmit+0x130>
      }
      if (pdata8bits == NULL)
 80059a8:	69fb      	ldr	r3, [r7, #28]
 80059aa:	2b00      	cmp	r3, #0
 80059ac:	d10b      	bne.n	80059c6 <HAL_UART_Transmit+0xda>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 80059ae:	69bb      	ldr	r3, [r7, #24]
 80059b0:	881b      	ldrh	r3, [r3, #0]
 80059b2:	001a      	movs	r2, r3
 80059b4:	68fb      	ldr	r3, [r7, #12]
 80059b6:	681b      	ldr	r3, [r3, #0]
 80059b8:	05d2      	lsls	r2, r2, #23
 80059ba:	0dd2      	lsrs	r2, r2, #23
 80059bc:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 80059be:	69bb      	ldr	r3, [r7, #24]
 80059c0:	3302      	adds	r3, #2
 80059c2:	61bb      	str	r3, [r7, #24]
 80059c4:	e007      	b.n	80059d6 <HAL_UART_Transmit+0xea>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 80059c6:	69fb      	ldr	r3, [r7, #28]
 80059c8:	781a      	ldrb	r2, [r3, #0]
 80059ca:	68fb      	ldr	r3, [r7, #12]
 80059cc:	681b      	ldr	r3, [r3, #0]
 80059ce:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 80059d0:	69fb      	ldr	r3, [r7, #28]
 80059d2:	3301      	adds	r3, #1
 80059d4:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80059d6:	68fb      	ldr	r3, [r7, #12]
 80059d8:	2256      	movs	r2, #86	; 0x56
 80059da:	5a9b      	ldrh	r3, [r3, r2]
 80059dc:	b29b      	uxth	r3, r3
 80059de:	3b01      	subs	r3, #1
 80059e0:	b299      	uxth	r1, r3
 80059e2:	68fb      	ldr	r3, [r7, #12]
 80059e4:	2256      	movs	r2, #86	; 0x56
 80059e6:	5299      	strh	r1, [r3, r2]
    while (huart->TxXferCount > 0U)
 80059e8:	68fb      	ldr	r3, [r7, #12]
 80059ea:	2256      	movs	r2, #86	; 0x56
 80059ec:	5a9b      	ldrh	r3, [r3, r2]
 80059ee:	b29b      	uxth	r3, r3
 80059f0:	2b00      	cmp	r3, #0
 80059f2:	d1cc      	bne.n	800598e <HAL_UART_Transmit+0xa2>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80059f4:	697a      	ldr	r2, [r7, #20]
 80059f6:	68f8      	ldr	r0, [r7, #12]
 80059f8:	683b      	ldr	r3, [r7, #0]
 80059fa:	9300      	str	r3, [sp, #0]
 80059fc:	0013      	movs	r3, r2
 80059fe:	2200      	movs	r2, #0
 8005a00:	2140      	movs	r1, #64	; 0x40
 8005a02:	f000 fd49 	bl	8006498 <UART_WaitOnFlagUntilTimeout>
 8005a06:	1e03      	subs	r3, r0, #0
 8005a08:	d001      	beq.n	8005a0e <HAL_UART_Transmit+0x122>
    {
      return HAL_TIMEOUT;
 8005a0a:	2303      	movs	r3, #3
 8005a0c:	e006      	b.n	8005a1c <HAL_UART_Transmit+0x130>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8005a0e:	68fb      	ldr	r3, [r7, #12]
 8005a10:	2288      	movs	r2, #136	; 0x88
 8005a12:	2120      	movs	r1, #32
 8005a14:	5099      	str	r1, [r3, r2]

    return HAL_OK;
 8005a16:	2300      	movs	r3, #0
 8005a18:	e000      	b.n	8005a1c <HAL_UART_Transmit+0x130>
  }
  else
  {
    return HAL_BUSY;
 8005a1a:	2302      	movs	r3, #2
  }
}
 8005a1c:	0018      	movs	r0, r3
 8005a1e:	46bd      	mov	sp, r7
 8005a20:	b008      	add	sp, #32
 8005a22:	bd80      	pop	{r7, pc}

08005a24 <HAL_UART_Receive>:
  * @param Size    Amount of data elements (u8 or u16) to be received.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005a24:	b580      	push	{r7, lr}
 8005a26:	b08a      	sub	sp, #40	; 0x28
 8005a28:	af02      	add	r7, sp, #8
 8005a2a:	60f8      	str	r0, [r7, #12]
 8005a2c:	60b9      	str	r1, [r7, #8]
 8005a2e:	603b      	str	r3, [r7, #0]
 8005a30:	1dbb      	adds	r3, r7, #6
 8005a32:	801a      	strh	r2, [r3, #0]
  uint16_t *pdata16bits;
  uint16_t uhMask;
  uint32_t tickstart;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8005a34:	68fb      	ldr	r3, [r7, #12]
 8005a36:	228c      	movs	r2, #140	; 0x8c
 8005a38:	589b      	ldr	r3, [r3, r2]
 8005a3a:	2b20      	cmp	r3, #32
 8005a3c:	d000      	beq.n	8005a40 <HAL_UART_Receive+0x1c>
 8005a3e:	e0cc      	b.n	8005bda <HAL_UART_Receive+0x1b6>
  {
    if ((pData == NULL) || (Size == 0U))
 8005a40:	68bb      	ldr	r3, [r7, #8]
 8005a42:	2b00      	cmp	r3, #0
 8005a44:	d003      	beq.n	8005a4e <HAL_UART_Receive+0x2a>
 8005a46:	1dbb      	adds	r3, r7, #6
 8005a48:	881b      	ldrh	r3, [r3, #0]
 8005a4a:	2b00      	cmp	r3, #0
 8005a4c:	d101      	bne.n	8005a52 <HAL_UART_Receive+0x2e>
    {
      return  HAL_ERROR;
 8005a4e:	2301      	movs	r3, #1
 8005a50:	e0c4      	b.n	8005bdc <HAL_UART_Receive+0x1b8>
    }

    /* In case of 9bits/No Parity transfer, pData buffer provided as input parameter
       should be aligned on a u16 frontier, as data to be received from RDR will be
       handled through a u16 cast. */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005a52:	68fb      	ldr	r3, [r7, #12]
 8005a54:	689a      	ldr	r2, [r3, #8]
 8005a56:	2380      	movs	r3, #128	; 0x80
 8005a58:	015b      	lsls	r3, r3, #5
 8005a5a:	429a      	cmp	r2, r3
 8005a5c:	d109      	bne.n	8005a72 <HAL_UART_Receive+0x4e>
 8005a5e:	68fb      	ldr	r3, [r7, #12]
 8005a60:	691b      	ldr	r3, [r3, #16]
 8005a62:	2b00      	cmp	r3, #0
 8005a64:	d105      	bne.n	8005a72 <HAL_UART_Receive+0x4e>
    {
      if ((((uint32_t)pData) & 1U) != 0U)
 8005a66:	68bb      	ldr	r3, [r7, #8]
 8005a68:	2201      	movs	r2, #1
 8005a6a:	4013      	ands	r3, r2
 8005a6c:	d001      	beq.n	8005a72 <HAL_UART_Receive+0x4e>
      {
        return  HAL_ERROR;
 8005a6e:	2301      	movs	r3, #1
 8005a70:	e0b4      	b.n	8005bdc <HAL_UART_Receive+0x1b8>
      }
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005a72:	68fb      	ldr	r3, [r7, #12]
 8005a74:	2290      	movs	r2, #144	; 0x90
 8005a76:	2100      	movs	r1, #0
 8005a78:	5099      	str	r1, [r3, r2]
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8005a7a:	68fb      	ldr	r3, [r7, #12]
 8005a7c:	228c      	movs	r2, #140	; 0x8c
 8005a7e:	2122      	movs	r1, #34	; 0x22
 8005a80:	5099      	str	r1, [r3, r2]
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005a82:	68fb      	ldr	r3, [r7, #12]
 8005a84:	2200      	movs	r2, #0
 8005a86:	66da      	str	r2, [r3, #108]	; 0x6c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8005a88:	f7fd fbf0 	bl	800326c <HAL_GetTick>
 8005a8c:	0003      	movs	r3, r0
 8005a8e:	617b      	str	r3, [r7, #20]

    huart->RxXferSize  = Size;
 8005a90:	68fb      	ldr	r3, [r7, #12]
 8005a92:	1dba      	adds	r2, r7, #6
 8005a94:	215c      	movs	r1, #92	; 0x5c
 8005a96:	8812      	ldrh	r2, [r2, #0]
 8005a98:	525a      	strh	r2, [r3, r1]
    huart->RxXferCount = Size;
 8005a9a:	68fb      	ldr	r3, [r7, #12]
 8005a9c:	1dba      	adds	r2, r7, #6
 8005a9e:	215e      	movs	r1, #94	; 0x5e
 8005aa0:	8812      	ldrh	r2, [r2, #0]
 8005aa2:	525a      	strh	r2, [r3, r1]

    /* Computation of UART mask to apply to RDR register */
    UART_MASK_COMPUTATION(huart);
 8005aa4:	68fb      	ldr	r3, [r7, #12]
 8005aa6:	689a      	ldr	r2, [r3, #8]
 8005aa8:	2380      	movs	r3, #128	; 0x80
 8005aaa:	015b      	lsls	r3, r3, #5
 8005aac:	429a      	cmp	r2, r3
 8005aae:	d10d      	bne.n	8005acc <HAL_UART_Receive+0xa8>
 8005ab0:	68fb      	ldr	r3, [r7, #12]
 8005ab2:	691b      	ldr	r3, [r3, #16]
 8005ab4:	2b00      	cmp	r3, #0
 8005ab6:	d104      	bne.n	8005ac2 <HAL_UART_Receive+0x9e>
 8005ab8:	68fb      	ldr	r3, [r7, #12]
 8005aba:	2260      	movs	r2, #96	; 0x60
 8005abc:	4949      	ldr	r1, [pc, #292]	; (8005be4 <HAL_UART_Receive+0x1c0>)
 8005abe:	5299      	strh	r1, [r3, r2]
 8005ac0:	e02e      	b.n	8005b20 <HAL_UART_Receive+0xfc>
 8005ac2:	68fb      	ldr	r3, [r7, #12]
 8005ac4:	2260      	movs	r2, #96	; 0x60
 8005ac6:	21ff      	movs	r1, #255	; 0xff
 8005ac8:	5299      	strh	r1, [r3, r2]
 8005aca:	e029      	b.n	8005b20 <HAL_UART_Receive+0xfc>
 8005acc:	68fb      	ldr	r3, [r7, #12]
 8005ace:	689b      	ldr	r3, [r3, #8]
 8005ad0:	2b00      	cmp	r3, #0
 8005ad2:	d10d      	bne.n	8005af0 <HAL_UART_Receive+0xcc>
 8005ad4:	68fb      	ldr	r3, [r7, #12]
 8005ad6:	691b      	ldr	r3, [r3, #16]
 8005ad8:	2b00      	cmp	r3, #0
 8005ada:	d104      	bne.n	8005ae6 <HAL_UART_Receive+0xc2>
 8005adc:	68fb      	ldr	r3, [r7, #12]
 8005ade:	2260      	movs	r2, #96	; 0x60
 8005ae0:	21ff      	movs	r1, #255	; 0xff
 8005ae2:	5299      	strh	r1, [r3, r2]
 8005ae4:	e01c      	b.n	8005b20 <HAL_UART_Receive+0xfc>
 8005ae6:	68fb      	ldr	r3, [r7, #12]
 8005ae8:	2260      	movs	r2, #96	; 0x60
 8005aea:	217f      	movs	r1, #127	; 0x7f
 8005aec:	5299      	strh	r1, [r3, r2]
 8005aee:	e017      	b.n	8005b20 <HAL_UART_Receive+0xfc>
 8005af0:	68fb      	ldr	r3, [r7, #12]
 8005af2:	689a      	ldr	r2, [r3, #8]
 8005af4:	2380      	movs	r3, #128	; 0x80
 8005af6:	055b      	lsls	r3, r3, #21
 8005af8:	429a      	cmp	r2, r3
 8005afa:	d10d      	bne.n	8005b18 <HAL_UART_Receive+0xf4>
 8005afc:	68fb      	ldr	r3, [r7, #12]
 8005afe:	691b      	ldr	r3, [r3, #16]
 8005b00:	2b00      	cmp	r3, #0
 8005b02:	d104      	bne.n	8005b0e <HAL_UART_Receive+0xea>
 8005b04:	68fb      	ldr	r3, [r7, #12]
 8005b06:	2260      	movs	r2, #96	; 0x60
 8005b08:	217f      	movs	r1, #127	; 0x7f
 8005b0a:	5299      	strh	r1, [r3, r2]
 8005b0c:	e008      	b.n	8005b20 <HAL_UART_Receive+0xfc>
 8005b0e:	68fb      	ldr	r3, [r7, #12]
 8005b10:	2260      	movs	r2, #96	; 0x60
 8005b12:	213f      	movs	r1, #63	; 0x3f
 8005b14:	5299      	strh	r1, [r3, r2]
 8005b16:	e003      	b.n	8005b20 <HAL_UART_Receive+0xfc>
 8005b18:	68fb      	ldr	r3, [r7, #12]
 8005b1a:	2260      	movs	r2, #96	; 0x60
 8005b1c:	2100      	movs	r1, #0
 8005b1e:	5299      	strh	r1, [r3, r2]
    uhMask = huart->Mask;
 8005b20:	2312      	movs	r3, #18
 8005b22:	18fb      	adds	r3, r7, r3
 8005b24:	68fa      	ldr	r2, [r7, #12]
 8005b26:	2160      	movs	r1, #96	; 0x60
 8005b28:	5a52      	ldrh	r2, [r2, r1]
 8005b2a:	801a      	strh	r2, [r3, #0]

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005b2c:	68fb      	ldr	r3, [r7, #12]
 8005b2e:	689a      	ldr	r2, [r3, #8]
 8005b30:	2380      	movs	r3, #128	; 0x80
 8005b32:	015b      	lsls	r3, r3, #5
 8005b34:	429a      	cmp	r2, r3
 8005b36:	d108      	bne.n	8005b4a <HAL_UART_Receive+0x126>
 8005b38:	68fb      	ldr	r3, [r7, #12]
 8005b3a:	691b      	ldr	r3, [r3, #16]
 8005b3c:	2b00      	cmp	r3, #0
 8005b3e:	d104      	bne.n	8005b4a <HAL_UART_Receive+0x126>
    {
      pdata8bits  = NULL;
 8005b40:	2300      	movs	r3, #0
 8005b42:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8005b44:	68bb      	ldr	r3, [r7, #8]
 8005b46:	61bb      	str	r3, [r7, #24]
 8005b48:	e003      	b.n	8005b52 <HAL_UART_Receive+0x12e>
    }
    else
    {
      pdata8bits  = pData;
 8005b4a:	68bb      	ldr	r3, [r7, #8]
 8005b4c:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8005b4e:	2300      	movs	r3, #0
 8005b50:	61bb      	str	r3, [r7, #24]
    }

    /* as long as data have to be received */
    while (huart->RxXferCount > 0U)
 8005b52:	e036      	b.n	8005bc2 <HAL_UART_Receive+0x19e>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 8005b54:	697a      	ldr	r2, [r7, #20]
 8005b56:	68f8      	ldr	r0, [r7, #12]
 8005b58:	683b      	ldr	r3, [r7, #0]
 8005b5a:	9300      	str	r3, [sp, #0]
 8005b5c:	0013      	movs	r3, r2
 8005b5e:	2200      	movs	r2, #0
 8005b60:	2120      	movs	r1, #32
 8005b62:	f000 fc99 	bl	8006498 <UART_WaitOnFlagUntilTimeout>
 8005b66:	1e03      	subs	r3, r0, #0
 8005b68:	d001      	beq.n	8005b6e <HAL_UART_Receive+0x14a>
      {
        return HAL_TIMEOUT;
 8005b6a:	2303      	movs	r3, #3
 8005b6c:	e036      	b.n	8005bdc <HAL_UART_Receive+0x1b8>
      }
      if (pdata8bits == NULL)
 8005b6e:	69fb      	ldr	r3, [r7, #28]
 8005b70:	2b00      	cmp	r3, #0
 8005b72:	d10e      	bne.n	8005b92 <HAL_UART_Receive+0x16e>
      {
        *pdata16bits = (uint16_t)(huart->Instance->RDR & uhMask);
 8005b74:	68fb      	ldr	r3, [r7, #12]
 8005b76:	681b      	ldr	r3, [r3, #0]
 8005b78:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005b7a:	b29b      	uxth	r3, r3
 8005b7c:	2212      	movs	r2, #18
 8005b7e:	18ba      	adds	r2, r7, r2
 8005b80:	8812      	ldrh	r2, [r2, #0]
 8005b82:	4013      	ands	r3, r2
 8005b84:	b29a      	uxth	r2, r3
 8005b86:	69bb      	ldr	r3, [r7, #24]
 8005b88:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 8005b8a:	69bb      	ldr	r3, [r7, #24]
 8005b8c:	3302      	adds	r3, #2
 8005b8e:	61bb      	str	r3, [r7, #24]
 8005b90:	e00e      	b.n	8005bb0 <HAL_UART_Receive+0x18c>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->RDR & (uint8_t)uhMask);
 8005b92:	68fb      	ldr	r3, [r7, #12]
 8005b94:	681b      	ldr	r3, [r3, #0]
 8005b96:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005b98:	b2db      	uxtb	r3, r3
 8005b9a:	2212      	movs	r2, #18
 8005b9c:	18ba      	adds	r2, r7, r2
 8005b9e:	8812      	ldrh	r2, [r2, #0]
 8005ba0:	b2d2      	uxtb	r2, r2
 8005ba2:	4013      	ands	r3, r2
 8005ba4:	b2da      	uxtb	r2, r3
 8005ba6:	69fb      	ldr	r3, [r7, #28]
 8005ba8:	701a      	strb	r2, [r3, #0]
        pdata8bits++;
 8005baa:	69fb      	ldr	r3, [r7, #28]
 8005bac:	3301      	adds	r3, #1
 8005bae:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 8005bb0:	68fb      	ldr	r3, [r7, #12]
 8005bb2:	225e      	movs	r2, #94	; 0x5e
 8005bb4:	5a9b      	ldrh	r3, [r3, r2]
 8005bb6:	b29b      	uxth	r3, r3
 8005bb8:	3b01      	subs	r3, #1
 8005bba:	b299      	uxth	r1, r3
 8005bbc:	68fb      	ldr	r3, [r7, #12]
 8005bbe:	225e      	movs	r2, #94	; 0x5e
 8005bc0:	5299      	strh	r1, [r3, r2]
    while (huart->RxXferCount > 0U)
 8005bc2:	68fb      	ldr	r3, [r7, #12]
 8005bc4:	225e      	movs	r2, #94	; 0x5e
 8005bc6:	5a9b      	ldrh	r3, [r3, r2]
 8005bc8:	b29b      	uxth	r3, r3
 8005bca:	2b00      	cmp	r3, #0
 8005bcc:	d1c2      	bne.n	8005b54 <HAL_UART_Receive+0x130>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8005bce:	68fb      	ldr	r3, [r7, #12]
 8005bd0:	228c      	movs	r2, #140	; 0x8c
 8005bd2:	2120      	movs	r1, #32
 8005bd4:	5099      	str	r1, [r3, r2]

    return HAL_OK;
 8005bd6:	2300      	movs	r3, #0
 8005bd8:	e000      	b.n	8005bdc <HAL_UART_Receive+0x1b8>
  }
  else
  {
    return HAL_BUSY;
 8005bda:	2302      	movs	r3, #2
  }
}
 8005bdc:	0018      	movs	r0, r3
 8005bde:	46bd      	mov	sp, r7
 8005be0:	b008      	add	sp, #32
 8005be2:	bd80      	pop	{r7, pc}
 8005be4:	000001ff 	.word	0x000001ff

08005be8 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8005be8:	b5b0      	push	{r4, r5, r7, lr}
 8005bea:	b090      	sub	sp, #64	; 0x40
 8005bec:	af00      	add	r7, sp, #0
 8005bee:	6278      	str	r0, [r7, #36]	; 0x24
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8005bf0:	231a      	movs	r3, #26
 8005bf2:	2220      	movs	r2, #32
 8005bf4:	189b      	adds	r3, r3, r2
 8005bf6:	19db      	adds	r3, r3, r7
 8005bf8:	2200      	movs	r2, #0
 8005bfa:	701a      	strb	r2, [r3, #0]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8005bfc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005bfe:	689a      	ldr	r2, [r3, #8]
 8005c00:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005c02:	691b      	ldr	r3, [r3, #16]
 8005c04:	431a      	orrs	r2, r3
 8005c06:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005c08:	695b      	ldr	r3, [r3, #20]
 8005c0a:	431a      	orrs	r2, r3
 8005c0c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005c0e:	69db      	ldr	r3, [r3, #28]
 8005c10:	4313      	orrs	r3, r2
 8005c12:	63fb      	str	r3, [r7, #60]	; 0x3c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8005c14:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005c16:	681b      	ldr	r3, [r3, #0]
 8005c18:	681b      	ldr	r3, [r3, #0]
 8005c1a:	4ac1      	ldr	r2, [pc, #772]	; (8005f20 <UART_SetConfig+0x338>)
 8005c1c:	4013      	ands	r3, r2
 8005c1e:	0019      	movs	r1, r3
 8005c20:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005c22:	681a      	ldr	r2, [r3, #0]
 8005c24:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005c26:	430b      	orrs	r3, r1
 8005c28:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8005c2a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005c2c:	681b      	ldr	r3, [r3, #0]
 8005c2e:	685b      	ldr	r3, [r3, #4]
 8005c30:	4abc      	ldr	r2, [pc, #752]	; (8005f24 <UART_SetConfig+0x33c>)
 8005c32:	4013      	ands	r3, r2
 8005c34:	0018      	movs	r0, r3
 8005c36:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005c38:	68d9      	ldr	r1, [r3, #12]
 8005c3a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005c3c:	681a      	ldr	r2, [r3, #0]
 8005c3e:	0003      	movs	r3, r0
 8005c40:	430b      	orrs	r3, r1
 8005c42:	6053      	str	r3, [r2, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8005c44:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005c46:	699b      	ldr	r3, [r3, #24]
 8005c48:	63fb      	str	r3, [r7, #60]	; 0x3c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8005c4a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005c4c:	681b      	ldr	r3, [r3, #0]
 8005c4e:	4ab6      	ldr	r2, [pc, #728]	; (8005f28 <UART_SetConfig+0x340>)
 8005c50:	4293      	cmp	r3, r2
 8005c52:	d009      	beq.n	8005c68 <UART_SetConfig+0x80>
 8005c54:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005c56:	681b      	ldr	r3, [r3, #0]
 8005c58:	4ab4      	ldr	r2, [pc, #720]	; (8005f2c <UART_SetConfig+0x344>)
 8005c5a:	4293      	cmp	r3, r2
 8005c5c:	d004      	beq.n	8005c68 <UART_SetConfig+0x80>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8005c5e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005c60:	6a1b      	ldr	r3, [r3, #32]
 8005c62:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8005c64:	4313      	orrs	r3, r2
 8005c66:	63fb      	str	r3, [r7, #60]	; 0x3c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8005c68:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005c6a:	681b      	ldr	r3, [r3, #0]
 8005c6c:	689b      	ldr	r3, [r3, #8]
 8005c6e:	4ab0      	ldr	r2, [pc, #704]	; (8005f30 <UART_SetConfig+0x348>)
 8005c70:	4013      	ands	r3, r2
 8005c72:	0019      	movs	r1, r3
 8005c74:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005c76:	681a      	ldr	r2, [r3, #0]
 8005c78:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005c7a:	430b      	orrs	r3, r1
 8005c7c:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8005c7e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005c80:	681b      	ldr	r3, [r3, #0]
 8005c82:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005c84:	220f      	movs	r2, #15
 8005c86:	4393      	bics	r3, r2
 8005c88:	0018      	movs	r0, r3
 8005c8a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005c8c:	6a59      	ldr	r1, [r3, #36]	; 0x24
 8005c8e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005c90:	681a      	ldr	r2, [r3, #0]
 8005c92:	0003      	movs	r3, r0
 8005c94:	430b      	orrs	r3, r1
 8005c96:	62d3      	str	r3, [r2, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8005c98:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005c9a:	681b      	ldr	r3, [r3, #0]
 8005c9c:	4aa5      	ldr	r2, [pc, #660]	; (8005f34 <UART_SetConfig+0x34c>)
 8005c9e:	4293      	cmp	r3, r2
 8005ca0:	d131      	bne.n	8005d06 <UART_SetConfig+0x11e>
 8005ca2:	4ba5      	ldr	r3, [pc, #660]	; (8005f38 <UART_SetConfig+0x350>)
 8005ca4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005ca6:	2203      	movs	r2, #3
 8005ca8:	4013      	ands	r3, r2
 8005caa:	2b03      	cmp	r3, #3
 8005cac:	d01d      	beq.n	8005cea <UART_SetConfig+0x102>
 8005cae:	d823      	bhi.n	8005cf8 <UART_SetConfig+0x110>
 8005cb0:	2b02      	cmp	r3, #2
 8005cb2:	d00c      	beq.n	8005cce <UART_SetConfig+0xe6>
 8005cb4:	d820      	bhi.n	8005cf8 <UART_SetConfig+0x110>
 8005cb6:	2b00      	cmp	r3, #0
 8005cb8:	d002      	beq.n	8005cc0 <UART_SetConfig+0xd8>
 8005cba:	2b01      	cmp	r3, #1
 8005cbc:	d00e      	beq.n	8005cdc <UART_SetConfig+0xf4>
 8005cbe:	e01b      	b.n	8005cf8 <UART_SetConfig+0x110>
 8005cc0:	231b      	movs	r3, #27
 8005cc2:	2220      	movs	r2, #32
 8005cc4:	189b      	adds	r3, r3, r2
 8005cc6:	19db      	adds	r3, r3, r7
 8005cc8:	2200      	movs	r2, #0
 8005cca:	701a      	strb	r2, [r3, #0]
 8005ccc:	e154      	b.n	8005f78 <UART_SetConfig+0x390>
 8005cce:	231b      	movs	r3, #27
 8005cd0:	2220      	movs	r2, #32
 8005cd2:	189b      	adds	r3, r3, r2
 8005cd4:	19db      	adds	r3, r3, r7
 8005cd6:	2202      	movs	r2, #2
 8005cd8:	701a      	strb	r2, [r3, #0]
 8005cda:	e14d      	b.n	8005f78 <UART_SetConfig+0x390>
 8005cdc:	231b      	movs	r3, #27
 8005cde:	2220      	movs	r2, #32
 8005ce0:	189b      	adds	r3, r3, r2
 8005ce2:	19db      	adds	r3, r3, r7
 8005ce4:	2204      	movs	r2, #4
 8005ce6:	701a      	strb	r2, [r3, #0]
 8005ce8:	e146      	b.n	8005f78 <UART_SetConfig+0x390>
 8005cea:	231b      	movs	r3, #27
 8005cec:	2220      	movs	r2, #32
 8005cee:	189b      	adds	r3, r3, r2
 8005cf0:	19db      	adds	r3, r3, r7
 8005cf2:	2208      	movs	r2, #8
 8005cf4:	701a      	strb	r2, [r3, #0]
 8005cf6:	e13f      	b.n	8005f78 <UART_SetConfig+0x390>
 8005cf8:	231b      	movs	r3, #27
 8005cfa:	2220      	movs	r2, #32
 8005cfc:	189b      	adds	r3, r3, r2
 8005cfe:	19db      	adds	r3, r3, r7
 8005d00:	2210      	movs	r2, #16
 8005d02:	701a      	strb	r2, [r3, #0]
 8005d04:	e138      	b.n	8005f78 <UART_SetConfig+0x390>
 8005d06:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005d08:	681b      	ldr	r3, [r3, #0]
 8005d0a:	4a8c      	ldr	r2, [pc, #560]	; (8005f3c <UART_SetConfig+0x354>)
 8005d0c:	4293      	cmp	r3, r2
 8005d0e:	d131      	bne.n	8005d74 <UART_SetConfig+0x18c>
 8005d10:	4b89      	ldr	r3, [pc, #548]	; (8005f38 <UART_SetConfig+0x350>)
 8005d12:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005d14:	220c      	movs	r2, #12
 8005d16:	4013      	ands	r3, r2
 8005d18:	2b0c      	cmp	r3, #12
 8005d1a:	d01d      	beq.n	8005d58 <UART_SetConfig+0x170>
 8005d1c:	d823      	bhi.n	8005d66 <UART_SetConfig+0x17e>
 8005d1e:	2b08      	cmp	r3, #8
 8005d20:	d00c      	beq.n	8005d3c <UART_SetConfig+0x154>
 8005d22:	d820      	bhi.n	8005d66 <UART_SetConfig+0x17e>
 8005d24:	2b00      	cmp	r3, #0
 8005d26:	d002      	beq.n	8005d2e <UART_SetConfig+0x146>
 8005d28:	2b04      	cmp	r3, #4
 8005d2a:	d00e      	beq.n	8005d4a <UART_SetConfig+0x162>
 8005d2c:	e01b      	b.n	8005d66 <UART_SetConfig+0x17e>
 8005d2e:	231b      	movs	r3, #27
 8005d30:	2220      	movs	r2, #32
 8005d32:	189b      	adds	r3, r3, r2
 8005d34:	19db      	adds	r3, r3, r7
 8005d36:	2200      	movs	r2, #0
 8005d38:	701a      	strb	r2, [r3, #0]
 8005d3a:	e11d      	b.n	8005f78 <UART_SetConfig+0x390>
 8005d3c:	231b      	movs	r3, #27
 8005d3e:	2220      	movs	r2, #32
 8005d40:	189b      	adds	r3, r3, r2
 8005d42:	19db      	adds	r3, r3, r7
 8005d44:	2202      	movs	r2, #2
 8005d46:	701a      	strb	r2, [r3, #0]
 8005d48:	e116      	b.n	8005f78 <UART_SetConfig+0x390>
 8005d4a:	231b      	movs	r3, #27
 8005d4c:	2220      	movs	r2, #32
 8005d4e:	189b      	adds	r3, r3, r2
 8005d50:	19db      	adds	r3, r3, r7
 8005d52:	2204      	movs	r2, #4
 8005d54:	701a      	strb	r2, [r3, #0]
 8005d56:	e10f      	b.n	8005f78 <UART_SetConfig+0x390>
 8005d58:	231b      	movs	r3, #27
 8005d5a:	2220      	movs	r2, #32
 8005d5c:	189b      	adds	r3, r3, r2
 8005d5e:	19db      	adds	r3, r3, r7
 8005d60:	2208      	movs	r2, #8
 8005d62:	701a      	strb	r2, [r3, #0]
 8005d64:	e108      	b.n	8005f78 <UART_SetConfig+0x390>
 8005d66:	231b      	movs	r3, #27
 8005d68:	2220      	movs	r2, #32
 8005d6a:	189b      	adds	r3, r3, r2
 8005d6c:	19db      	adds	r3, r3, r7
 8005d6e:	2210      	movs	r2, #16
 8005d70:	701a      	strb	r2, [r3, #0]
 8005d72:	e101      	b.n	8005f78 <UART_SetConfig+0x390>
 8005d74:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005d76:	681b      	ldr	r3, [r3, #0]
 8005d78:	4a71      	ldr	r2, [pc, #452]	; (8005f40 <UART_SetConfig+0x358>)
 8005d7a:	4293      	cmp	r3, r2
 8005d7c:	d131      	bne.n	8005de2 <UART_SetConfig+0x1fa>
 8005d7e:	4b6e      	ldr	r3, [pc, #440]	; (8005f38 <UART_SetConfig+0x350>)
 8005d80:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005d82:	2230      	movs	r2, #48	; 0x30
 8005d84:	4013      	ands	r3, r2
 8005d86:	2b30      	cmp	r3, #48	; 0x30
 8005d88:	d01d      	beq.n	8005dc6 <UART_SetConfig+0x1de>
 8005d8a:	d823      	bhi.n	8005dd4 <UART_SetConfig+0x1ec>
 8005d8c:	2b20      	cmp	r3, #32
 8005d8e:	d00c      	beq.n	8005daa <UART_SetConfig+0x1c2>
 8005d90:	d820      	bhi.n	8005dd4 <UART_SetConfig+0x1ec>
 8005d92:	2b00      	cmp	r3, #0
 8005d94:	d002      	beq.n	8005d9c <UART_SetConfig+0x1b4>
 8005d96:	2b10      	cmp	r3, #16
 8005d98:	d00e      	beq.n	8005db8 <UART_SetConfig+0x1d0>
 8005d9a:	e01b      	b.n	8005dd4 <UART_SetConfig+0x1ec>
 8005d9c:	231b      	movs	r3, #27
 8005d9e:	2220      	movs	r2, #32
 8005da0:	189b      	adds	r3, r3, r2
 8005da2:	19db      	adds	r3, r3, r7
 8005da4:	2200      	movs	r2, #0
 8005da6:	701a      	strb	r2, [r3, #0]
 8005da8:	e0e6      	b.n	8005f78 <UART_SetConfig+0x390>
 8005daa:	231b      	movs	r3, #27
 8005dac:	2220      	movs	r2, #32
 8005dae:	189b      	adds	r3, r3, r2
 8005db0:	19db      	adds	r3, r3, r7
 8005db2:	2202      	movs	r2, #2
 8005db4:	701a      	strb	r2, [r3, #0]
 8005db6:	e0df      	b.n	8005f78 <UART_SetConfig+0x390>
 8005db8:	231b      	movs	r3, #27
 8005dba:	2220      	movs	r2, #32
 8005dbc:	189b      	adds	r3, r3, r2
 8005dbe:	19db      	adds	r3, r3, r7
 8005dc0:	2204      	movs	r2, #4
 8005dc2:	701a      	strb	r2, [r3, #0]
 8005dc4:	e0d8      	b.n	8005f78 <UART_SetConfig+0x390>
 8005dc6:	231b      	movs	r3, #27
 8005dc8:	2220      	movs	r2, #32
 8005dca:	189b      	adds	r3, r3, r2
 8005dcc:	19db      	adds	r3, r3, r7
 8005dce:	2208      	movs	r2, #8
 8005dd0:	701a      	strb	r2, [r3, #0]
 8005dd2:	e0d1      	b.n	8005f78 <UART_SetConfig+0x390>
 8005dd4:	231b      	movs	r3, #27
 8005dd6:	2220      	movs	r2, #32
 8005dd8:	189b      	adds	r3, r3, r2
 8005dda:	19db      	adds	r3, r3, r7
 8005ddc:	2210      	movs	r2, #16
 8005dde:	701a      	strb	r2, [r3, #0]
 8005de0:	e0ca      	b.n	8005f78 <UART_SetConfig+0x390>
 8005de2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005de4:	681b      	ldr	r3, [r3, #0]
 8005de6:	4a57      	ldr	r2, [pc, #348]	; (8005f44 <UART_SetConfig+0x35c>)
 8005de8:	4293      	cmp	r3, r2
 8005dea:	d106      	bne.n	8005dfa <UART_SetConfig+0x212>
 8005dec:	231b      	movs	r3, #27
 8005dee:	2220      	movs	r2, #32
 8005df0:	189b      	adds	r3, r3, r2
 8005df2:	19db      	adds	r3, r3, r7
 8005df4:	2200      	movs	r2, #0
 8005df6:	701a      	strb	r2, [r3, #0]
 8005df8:	e0be      	b.n	8005f78 <UART_SetConfig+0x390>
 8005dfa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005dfc:	681b      	ldr	r3, [r3, #0]
 8005dfe:	4a52      	ldr	r2, [pc, #328]	; (8005f48 <UART_SetConfig+0x360>)
 8005e00:	4293      	cmp	r3, r2
 8005e02:	d106      	bne.n	8005e12 <UART_SetConfig+0x22a>
 8005e04:	231b      	movs	r3, #27
 8005e06:	2220      	movs	r2, #32
 8005e08:	189b      	adds	r3, r3, r2
 8005e0a:	19db      	adds	r3, r3, r7
 8005e0c:	2200      	movs	r2, #0
 8005e0e:	701a      	strb	r2, [r3, #0]
 8005e10:	e0b2      	b.n	8005f78 <UART_SetConfig+0x390>
 8005e12:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005e14:	681b      	ldr	r3, [r3, #0]
 8005e16:	4a4d      	ldr	r2, [pc, #308]	; (8005f4c <UART_SetConfig+0x364>)
 8005e18:	4293      	cmp	r3, r2
 8005e1a:	d106      	bne.n	8005e2a <UART_SetConfig+0x242>
 8005e1c:	231b      	movs	r3, #27
 8005e1e:	2220      	movs	r2, #32
 8005e20:	189b      	adds	r3, r3, r2
 8005e22:	19db      	adds	r3, r3, r7
 8005e24:	2200      	movs	r2, #0
 8005e26:	701a      	strb	r2, [r3, #0]
 8005e28:	e0a6      	b.n	8005f78 <UART_SetConfig+0x390>
 8005e2a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005e2c:	681b      	ldr	r3, [r3, #0]
 8005e2e:	4a3e      	ldr	r2, [pc, #248]	; (8005f28 <UART_SetConfig+0x340>)
 8005e30:	4293      	cmp	r3, r2
 8005e32:	d13e      	bne.n	8005eb2 <UART_SetConfig+0x2ca>
 8005e34:	4b40      	ldr	r3, [pc, #256]	; (8005f38 <UART_SetConfig+0x350>)
 8005e36:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8005e38:	23c0      	movs	r3, #192	; 0xc0
 8005e3a:	011b      	lsls	r3, r3, #4
 8005e3c:	4013      	ands	r3, r2
 8005e3e:	22c0      	movs	r2, #192	; 0xc0
 8005e40:	0112      	lsls	r2, r2, #4
 8005e42:	4293      	cmp	r3, r2
 8005e44:	d027      	beq.n	8005e96 <UART_SetConfig+0x2ae>
 8005e46:	22c0      	movs	r2, #192	; 0xc0
 8005e48:	0112      	lsls	r2, r2, #4
 8005e4a:	4293      	cmp	r3, r2
 8005e4c:	d82a      	bhi.n	8005ea4 <UART_SetConfig+0x2bc>
 8005e4e:	2280      	movs	r2, #128	; 0x80
 8005e50:	0112      	lsls	r2, r2, #4
 8005e52:	4293      	cmp	r3, r2
 8005e54:	d011      	beq.n	8005e7a <UART_SetConfig+0x292>
 8005e56:	2280      	movs	r2, #128	; 0x80
 8005e58:	0112      	lsls	r2, r2, #4
 8005e5a:	4293      	cmp	r3, r2
 8005e5c:	d822      	bhi.n	8005ea4 <UART_SetConfig+0x2bc>
 8005e5e:	2b00      	cmp	r3, #0
 8005e60:	d004      	beq.n	8005e6c <UART_SetConfig+0x284>
 8005e62:	2280      	movs	r2, #128	; 0x80
 8005e64:	00d2      	lsls	r2, r2, #3
 8005e66:	4293      	cmp	r3, r2
 8005e68:	d00e      	beq.n	8005e88 <UART_SetConfig+0x2a0>
 8005e6a:	e01b      	b.n	8005ea4 <UART_SetConfig+0x2bc>
 8005e6c:	231b      	movs	r3, #27
 8005e6e:	2220      	movs	r2, #32
 8005e70:	189b      	adds	r3, r3, r2
 8005e72:	19db      	adds	r3, r3, r7
 8005e74:	2200      	movs	r2, #0
 8005e76:	701a      	strb	r2, [r3, #0]
 8005e78:	e07e      	b.n	8005f78 <UART_SetConfig+0x390>
 8005e7a:	231b      	movs	r3, #27
 8005e7c:	2220      	movs	r2, #32
 8005e7e:	189b      	adds	r3, r3, r2
 8005e80:	19db      	adds	r3, r3, r7
 8005e82:	2202      	movs	r2, #2
 8005e84:	701a      	strb	r2, [r3, #0]
 8005e86:	e077      	b.n	8005f78 <UART_SetConfig+0x390>
 8005e88:	231b      	movs	r3, #27
 8005e8a:	2220      	movs	r2, #32
 8005e8c:	189b      	adds	r3, r3, r2
 8005e8e:	19db      	adds	r3, r3, r7
 8005e90:	2204      	movs	r2, #4
 8005e92:	701a      	strb	r2, [r3, #0]
 8005e94:	e070      	b.n	8005f78 <UART_SetConfig+0x390>
 8005e96:	231b      	movs	r3, #27
 8005e98:	2220      	movs	r2, #32
 8005e9a:	189b      	adds	r3, r3, r2
 8005e9c:	19db      	adds	r3, r3, r7
 8005e9e:	2208      	movs	r2, #8
 8005ea0:	701a      	strb	r2, [r3, #0]
 8005ea2:	e069      	b.n	8005f78 <UART_SetConfig+0x390>
 8005ea4:	231b      	movs	r3, #27
 8005ea6:	2220      	movs	r2, #32
 8005ea8:	189b      	adds	r3, r3, r2
 8005eaa:	19db      	adds	r3, r3, r7
 8005eac:	2210      	movs	r2, #16
 8005eae:	701a      	strb	r2, [r3, #0]
 8005eb0:	e062      	b.n	8005f78 <UART_SetConfig+0x390>
 8005eb2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005eb4:	681b      	ldr	r3, [r3, #0]
 8005eb6:	4a1d      	ldr	r2, [pc, #116]	; (8005f2c <UART_SetConfig+0x344>)
 8005eb8:	4293      	cmp	r3, r2
 8005eba:	d157      	bne.n	8005f6c <UART_SetConfig+0x384>
 8005ebc:	4b1e      	ldr	r3, [pc, #120]	; (8005f38 <UART_SetConfig+0x350>)
 8005ebe:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8005ec0:	23c0      	movs	r3, #192	; 0xc0
 8005ec2:	009b      	lsls	r3, r3, #2
 8005ec4:	4013      	ands	r3, r2
 8005ec6:	22c0      	movs	r2, #192	; 0xc0
 8005ec8:	0092      	lsls	r2, r2, #2
 8005eca:	4293      	cmp	r3, r2
 8005ecc:	d040      	beq.n	8005f50 <UART_SetConfig+0x368>
 8005ece:	22c0      	movs	r2, #192	; 0xc0
 8005ed0:	0092      	lsls	r2, r2, #2
 8005ed2:	4293      	cmp	r3, r2
 8005ed4:	d843      	bhi.n	8005f5e <UART_SetConfig+0x376>
 8005ed6:	2280      	movs	r2, #128	; 0x80
 8005ed8:	0092      	lsls	r2, r2, #2
 8005eda:	4293      	cmp	r3, r2
 8005edc:	d011      	beq.n	8005f02 <UART_SetConfig+0x31a>
 8005ede:	2280      	movs	r2, #128	; 0x80
 8005ee0:	0092      	lsls	r2, r2, #2
 8005ee2:	4293      	cmp	r3, r2
 8005ee4:	d83b      	bhi.n	8005f5e <UART_SetConfig+0x376>
 8005ee6:	2b00      	cmp	r3, #0
 8005ee8:	d004      	beq.n	8005ef4 <UART_SetConfig+0x30c>
 8005eea:	2280      	movs	r2, #128	; 0x80
 8005eec:	0052      	lsls	r2, r2, #1
 8005eee:	4293      	cmp	r3, r2
 8005ef0:	d00e      	beq.n	8005f10 <UART_SetConfig+0x328>
 8005ef2:	e034      	b.n	8005f5e <UART_SetConfig+0x376>
 8005ef4:	231b      	movs	r3, #27
 8005ef6:	2220      	movs	r2, #32
 8005ef8:	189b      	adds	r3, r3, r2
 8005efa:	19db      	adds	r3, r3, r7
 8005efc:	2200      	movs	r2, #0
 8005efe:	701a      	strb	r2, [r3, #0]
 8005f00:	e03a      	b.n	8005f78 <UART_SetConfig+0x390>
 8005f02:	231b      	movs	r3, #27
 8005f04:	2220      	movs	r2, #32
 8005f06:	189b      	adds	r3, r3, r2
 8005f08:	19db      	adds	r3, r3, r7
 8005f0a:	2202      	movs	r2, #2
 8005f0c:	701a      	strb	r2, [r3, #0]
 8005f0e:	e033      	b.n	8005f78 <UART_SetConfig+0x390>
 8005f10:	231b      	movs	r3, #27
 8005f12:	2220      	movs	r2, #32
 8005f14:	189b      	adds	r3, r3, r2
 8005f16:	19db      	adds	r3, r3, r7
 8005f18:	2204      	movs	r2, #4
 8005f1a:	701a      	strb	r2, [r3, #0]
 8005f1c:	e02c      	b.n	8005f78 <UART_SetConfig+0x390>
 8005f1e:	46c0      	nop			; (mov r8, r8)
 8005f20:	cfff69f3 	.word	0xcfff69f3
 8005f24:	ffffcfff 	.word	0xffffcfff
 8005f28:	40008000 	.word	0x40008000
 8005f2c:	40008400 	.word	0x40008400
 8005f30:	11fff4ff 	.word	0x11fff4ff
 8005f34:	40013800 	.word	0x40013800
 8005f38:	40021000 	.word	0x40021000
 8005f3c:	40004400 	.word	0x40004400
 8005f40:	40004800 	.word	0x40004800
 8005f44:	40004c00 	.word	0x40004c00
 8005f48:	40005000 	.word	0x40005000
 8005f4c:	40013c00 	.word	0x40013c00
 8005f50:	231b      	movs	r3, #27
 8005f52:	2220      	movs	r2, #32
 8005f54:	189b      	adds	r3, r3, r2
 8005f56:	19db      	adds	r3, r3, r7
 8005f58:	2208      	movs	r2, #8
 8005f5a:	701a      	strb	r2, [r3, #0]
 8005f5c:	e00c      	b.n	8005f78 <UART_SetConfig+0x390>
 8005f5e:	231b      	movs	r3, #27
 8005f60:	2220      	movs	r2, #32
 8005f62:	189b      	adds	r3, r3, r2
 8005f64:	19db      	adds	r3, r3, r7
 8005f66:	2210      	movs	r2, #16
 8005f68:	701a      	strb	r2, [r3, #0]
 8005f6a:	e005      	b.n	8005f78 <UART_SetConfig+0x390>
 8005f6c:	231b      	movs	r3, #27
 8005f6e:	2220      	movs	r2, #32
 8005f70:	189b      	adds	r3, r3, r2
 8005f72:	19db      	adds	r3, r3, r7
 8005f74:	2210      	movs	r2, #16
 8005f76:	701a      	strb	r2, [r3, #0]

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8005f78:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005f7a:	681b      	ldr	r3, [r3, #0]
 8005f7c:	4ac1      	ldr	r2, [pc, #772]	; (8006284 <UART_SetConfig+0x69c>)
 8005f7e:	4293      	cmp	r3, r2
 8005f80:	d005      	beq.n	8005f8e <UART_SetConfig+0x3a6>
 8005f82:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005f84:	681b      	ldr	r3, [r3, #0]
 8005f86:	4ac0      	ldr	r2, [pc, #768]	; (8006288 <UART_SetConfig+0x6a0>)
 8005f88:	4293      	cmp	r3, r2
 8005f8a:	d000      	beq.n	8005f8e <UART_SetConfig+0x3a6>
 8005f8c:	e093      	b.n	80060b6 <UART_SetConfig+0x4ce>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8005f8e:	231b      	movs	r3, #27
 8005f90:	2220      	movs	r2, #32
 8005f92:	189b      	adds	r3, r3, r2
 8005f94:	19db      	adds	r3, r3, r7
 8005f96:	781b      	ldrb	r3, [r3, #0]
 8005f98:	2b08      	cmp	r3, #8
 8005f9a:	d015      	beq.n	8005fc8 <UART_SetConfig+0x3e0>
 8005f9c:	dc18      	bgt.n	8005fd0 <UART_SetConfig+0x3e8>
 8005f9e:	2b04      	cmp	r3, #4
 8005fa0:	d00d      	beq.n	8005fbe <UART_SetConfig+0x3d6>
 8005fa2:	dc15      	bgt.n	8005fd0 <UART_SetConfig+0x3e8>
 8005fa4:	2b00      	cmp	r3, #0
 8005fa6:	d002      	beq.n	8005fae <UART_SetConfig+0x3c6>
 8005fa8:	2b02      	cmp	r3, #2
 8005faa:	d005      	beq.n	8005fb8 <UART_SetConfig+0x3d0>
 8005fac:	e010      	b.n	8005fd0 <UART_SetConfig+0x3e8>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005fae:	f7fe fa03 	bl	80043b8 <HAL_RCC_GetPCLK1Freq>
 8005fb2:	0003      	movs	r3, r0
 8005fb4:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8005fb6:	e014      	b.n	8005fe2 <UART_SetConfig+0x3fa>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8005fb8:	4bb4      	ldr	r3, [pc, #720]	; (800628c <UART_SetConfig+0x6a4>)
 8005fba:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8005fbc:	e011      	b.n	8005fe2 <UART_SetConfig+0x3fa>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8005fbe:	f7fe f96f 	bl	80042a0 <HAL_RCC_GetSysClockFreq>
 8005fc2:	0003      	movs	r3, r0
 8005fc4:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8005fc6:	e00c      	b.n	8005fe2 <UART_SetConfig+0x3fa>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8005fc8:	2380      	movs	r3, #128	; 0x80
 8005fca:	021b      	lsls	r3, r3, #8
 8005fcc:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8005fce:	e008      	b.n	8005fe2 <UART_SetConfig+0x3fa>
      default:
        pclk = 0U;
 8005fd0:	2300      	movs	r3, #0
 8005fd2:	637b      	str	r3, [r7, #52]	; 0x34
        ret = HAL_ERROR;
 8005fd4:	231a      	movs	r3, #26
 8005fd6:	2220      	movs	r2, #32
 8005fd8:	189b      	adds	r3, r3, r2
 8005fda:	19db      	adds	r3, r3, r7
 8005fdc:	2201      	movs	r2, #1
 8005fde:	701a      	strb	r2, [r3, #0]
        break;
 8005fe0:	46c0      	nop			; (mov r8, r8)
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8005fe2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005fe4:	2b00      	cmp	r3, #0
 8005fe6:	d100      	bne.n	8005fea <UART_SetConfig+0x402>
 8005fe8:	e135      	b.n	8006256 <UART_SetConfig+0x66e>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8005fea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005fec:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8005fee:	4ba8      	ldr	r3, [pc, #672]	; (8006290 <UART_SetConfig+0x6a8>)
 8005ff0:	0052      	lsls	r2, r2, #1
 8005ff2:	5ad3      	ldrh	r3, [r2, r3]
 8005ff4:	0019      	movs	r1, r3
 8005ff6:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8005ff8:	f7fa f8a0 	bl	800013c <__udivsi3>
 8005ffc:	0003      	movs	r3, r0
 8005ffe:	62bb      	str	r3, [r7, #40]	; 0x28

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8006000:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006002:	685a      	ldr	r2, [r3, #4]
 8006004:	0013      	movs	r3, r2
 8006006:	005b      	lsls	r3, r3, #1
 8006008:	189b      	adds	r3, r3, r2
 800600a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800600c:	429a      	cmp	r2, r3
 800600e:	d305      	bcc.n	800601c <UART_SetConfig+0x434>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8006010:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006012:	685b      	ldr	r3, [r3, #4]
 8006014:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8006016:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8006018:	429a      	cmp	r2, r3
 800601a:	d906      	bls.n	800602a <UART_SetConfig+0x442>
      {
        ret = HAL_ERROR;
 800601c:	231a      	movs	r3, #26
 800601e:	2220      	movs	r2, #32
 8006020:	189b      	adds	r3, r3, r2
 8006022:	19db      	adds	r3, r3, r7
 8006024:	2201      	movs	r2, #1
 8006026:	701a      	strb	r2, [r3, #0]
 8006028:	e044      	b.n	80060b4 <UART_SetConfig+0x4cc>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800602a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800602c:	61bb      	str	r3, [r7, #24]
 800602e:	2300      	movs	r3, #0
 8006030:	61fb      	str	r3, [r7, #28]
 8006032:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006034:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8006036:	4b96      	ldr	r3, [pc, #600]	; (8006290 <UART_SetConfig+0x6a8>)
 8006038:	0052      	lsls	r2, r2, #1
 800603a:	5ad3      	ldrh	r3, [r2, r3]
 800603c:	613b      	str	r3, [r7, #16]
 800603e:	2300      	movs	r3, #0
 8006040:	617b      	str	r3, [r7, #20]
 8006042:	693a      	ldr	r2, [r7, #16]
 8006044:	697b      	ldr	r3, [r7, #20]
 8006046:	69b8      	ldr	r0, [r7, #24]
 8006048:	69f9      	ldr	r1, [r7, #28]
 800604a:	f7fa fa2b 	bl	80004a4 <__aeabi_uldivmod>
 800604e:	0002      	movs	r2, r0
 8006050:	000b      	movs	r3, r1
 8006052:	0e11      	lsrs	r1, r2, #24
 8006054:	021d      	lsls	r5, r3, #8
 8006056:	430d      	orrs	r5, r1
 8006058:	0214      	lsls	r4, r2, #8
 800605a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800605c:	685b      	ldr	r3, [r3, #4]
 800605e:	085b      	lsrs	r3, r3, #1
 8006060:	60bb      	str	r3, [r7, #8]
 8006062:	2300      	movs	r3, #0
 8006064:	60fb      	str	r3, [r7, #12]
 8006066:	68b8      	ldr	r0, [r7, #8]
 8006068:	68f9      	ldr	r1, [r7, #12]
 800606a:	1900      	adds	r0, r0, r4
 800606c:	4169      	adcs	r1, r5
 800606e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006070:	685b      	ldr	r3, [r3, #4]
 8006072:	603b      	str	r3, [r7, #0]
 8006074:	2300      	movs	r3, #0
 8006076:	607b      	str	r3, [r7, #4]
 8006078:	683a      	ldr	r2, [r7, #0]
 800607a:	687b      	ldr	r3, [r7, #4]
 800607c:	f7fa fa12 	bl	80004a4 <__aeabi_uldivmod>
 8006080:	0002      	movs	r2, r0
 8006082:	000b      	movs	r3, r1
 8006084:	0013      	movs	r3, r2
 8006086:	633b      	str	r3, [r7, #48]	; 0x30
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8006088:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800608a:	23c0      	movs	r3, #192	; 0xc0
 800608c:	009b      	lsls	r3, r3, #2
 800608e:	429a      	cmp	r2, r3
 8006090:	d309      	bcc.n	80060a6 <UART_SetConfig+0x4be>
 8006092:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006094:	2380      	movs	r3, #128	; 0x80
 8006096:	035b      	lsls	r3, r3, #13
 8006098:	429a      	cmp	r2, r3
 800609a:	d204      	bcs.n	80060a6 <UART_SetConfig+0x4be>
        {
          huart->Instance->BRR = usartdiv;
 800609c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800609e:	681b      	ldr	r3, [r3, #0]
 80060a0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80060a2:	60da      	str	r2, [r3, #12]
 80060a4:	e006      	b.n	80060b4 <UART_SetConfig+0x4cc>
        }
        else
        {
          ret = HAL_ERROR;
 80060a6:	231a      	movs	r3, #26
 80060a8:	2220      	movs	r2, #32
 80060aa:	189b      	adds	r3, r3, r2
 80060ac:	19db      	adds	r3, r3, r7
 80060ae:	2201      	movs	r2, #1
 80060b0:	701a      	strb	r2, [r3, #0]
    if (pclk != 0U)
 80060b2:	e0d0      	b.n	8006256 <UART_SetConfig+0x66e>
 80060b4:	e0cf      	b.n	8006256 <UART_SetConfig+0x66e>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80060b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80060b8:	69da      	ldr	r2, [r3, #28]
 80060ba:	2380      	movs	r3, #128	; 0x80
 80060bc:	021b      	lsls	r3, r3, #8
 80060be:	429a      	cmp	r2, r3
 80060c0:	d000      	beq.n	80060c4 <UART_SetConfig+0x4dc>
 80060c2:	e070      	b.n	80061a6 <UART_SetConfig+0x5be>
  {
    switch (clocksource)
 80060c4:	231b      	movs	r3, #27
 80060c6:	2220      	movs	r2, #32
 80060c8:	189b      	adds	r3, r3, r2
 80060ca:	19db      	adds	r3, r3, r7
 80060cc:	781b      	ldrb	r3, [r3, #0]
 80060ce:	2b08      	cmp	r3, #8
 80060d0:	d015      	beq.n	80060fe <UART_SetConfig+0x516>
 80060d2:	dc18      	bgt.n	8006106 <UART_SetConfig+0x51e>
 80060d4:	2b04      	cmp	r3, #4
 80060d6:	d00d      	beq.n	80060f4 <UART_SetConfig+0x50c>
 80060d8:	dc15      	bgt.n	8006106 <UART_SetConfig+0x51e>
 80060da:	2b00      	cmp	r3, #0
 80060dc:	d002      	beq.n	80060e4 <UART_SetConfig+0x4fc>
 80060de:	2b02      	cmp	r3, #2
 80060e0:	d005      	beq.n	80060ee <UART_SetConfig+0x506>
 80060e2:	e010      	b.n	8006106 <UART_SetConfig+0x51e>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80060e4:	f7fe f968 	bl	80043b8 <HAL_RCC_GetPCLK1Freq>
 80060e8:	0003      	movs	r3, r0
 80060ea:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 80060ec:	e014      	b.n	8006118 <UART_SetConfig+0x530>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80060ee:	4b67      	ldr	r3, [pc, #412]	; (800628c <UART_SetConfig+0x6a4>)
 80060f0:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 80060f2:	e011      	b.n	8006118 <UART_SetConfig+0x530>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80060f4:	f7fe f8d4 	bl	80042a0 <HAL_RCC_GetSysClockFreq>
 80060f8:	0003      	movs	r3, r0
 80060fa:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 80060fc:	e00c      	b.n	8006118 <UART_SetConfig+0x530>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80060fe:	2380      	movs	r3, #128	; 0x80
 8006100:	021b      	lsls	r3, r3, #8
 8006102:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8006104:	e008      	b.n	8006118 <UART_SetConfig+0x530>
      default:
        pclk = 0U;
 8006106:	2300      	movs	r3, #0
 8006108:	637b      	str	r3, [r7, #52]	; 0x34
        ret = HAL_ERROR;
 800610a:	231a      	movs	r3, #26
 800610c:	2220      	movs	r2, #32
 800610e:	189b      	adds	r3, r3, r2
 8006110:	19db      	adds	r3, r3, r7
 8006112:	2201      	movs	r2, #1
 8006114:	701a      	strb	r2, [r3, #0]
        break;
 8006116:	46c0      	nop			; (mov r8, r8)
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8006118:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800611a:	2b00      	cmp	r3, #0
 800611c:	d100      	bne.n	8006120 <UART_SetConfig+0x538>
 800611e:	e09a      	b.n	8006256 <UART_SetConfig+0x66e>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8006120:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006122:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8006124:	4b5a      	ldr	r3, [pc, #360]	; (8006290 <UART_SetConfig+0x6a8>)
 8006126:	0052      	lsls	r2, r2, #1
 8006128:	5ad3      	ldrh	r3, [r2, r3]
 800612a:	0019      	movs	r1, r3
 800612c:	6b78      	ldr	r0, [r7, #52]	; 0x34
 800612e:	f7fa f805 	bl	800013c <__udivsi3>
 8006132:	0003      	movs	r3, r0
 8006134:	005a      	lsls	r2, r3, #1
 8006136:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006138:	685b      	ldr	r3, [r3, #4]
 800613a:	085b      	lsrs	r3, r3, #1
 800613c:	18d2      	adds	r2, r2, r3
 800613e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006140:	685b      	ldr	r3, [r3, #4]
 8006142:	0019      	movs	r1, r3
 8006144:	0010      	movs	r0, r2
 8006146:	f7f9 fff9 	bl	800013c <__udivsi3>
 800614a:	0003      	movs	r3, r0
 800614c:	633b      	str	r3, [r7, #48]	; 0x30
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800614e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006150:	2b0f      	cmp	r3, #15
 8006152:	d921      	bls.n	8006198 <UART_SetConfig+0x5b0>
 8006154:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006156:	2380      	movs	r3, #128	; 0x80
 8006158:	025b      	lsls	r3, r3, #9
 800615a:	429a      	cmp	r2, r3
 800615c:	d21c      	bcs.n	8006198 <UART_SetConfig+0x5b0>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800615e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006160:	b29a      	uxth	r2, r3
 8006162:	200e      	movs	r0, #14
 8006164:	2420      	movs	r4, #32
 8006166:	1903      	adds	r3, r0, r4
 8006168:	19db      	adds	r3, r3, r7
 800616a:	210f      	movs	r1, #15
 800616c:	438a      	bics	r2, r1
 800616e:	801a      	strh	r2, [r3, #0]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8006170:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006172:	085b      	lsrs	r3, r3, #1
 8006174:	b29b      	uxth	r3, r3
 8006176:	2207      	movs	r2, #7
 8006178:	4013      	ands	r3, r2
 800617a:	b299      	uxth	r1, r3
 800617c:	1903      	adds	r3, r0, r4
 800617e:	19db      	adds	r3, r3, r7
 8006180:	1902      	adds	r2, r0, r4
 8006182:	19d2      	adds	r2, r2, r7
 8006184:	8812      	ldrh	r2, [r2, #0]
 8006186:	430a      	orrs	r2, r1
 8006188:	801a      	strh	r2, [r3, #0]
        huart->Instance->BRR = brrtemp;
 800618a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800618c:	681b      	ldr	r3, [r3, #0]
 800618e:	1902      	adds	r2, r0, r4
 8006190:	19d2      	adds	r2, r2, r7
 8006192:	8812      	ldrh	r2, [r2, #0]
 8006194:	60da      	str	r2, [r3, #12]
 8006196:	e05e      	b.n	8006256 <UART_SetConfig+0x66e>
      }
      else
      {
        ret = HAL_ERROR;
 8006198:	231a      	movs	r3, #26
 800619a:	2220      	movs	r2, #32
 800619c:	189b      	adds	r3, r3, r2
 800619e:	19db      	adds	r3, r3, r7
 80061a0:	2201      	movs	r2, #1
 80061a2:	701a      	strb	r2, [r3, #0]
 80061a4:	e057      	b.n	8006256 <UART_SetConfig+0x66e>
      }
    }
  }
  else
  {
    switch (clocksource)
 80061a6:	231b      	movs	r3, #27
 80061a8:	2220      	movs	r2, #32
 80061aa:	189b      	adds	r3, r3, r2
 80061ac:	19db      	adds	r3, r3, r7
 80061ae:	781b      	ldrb	r3, [r3, #0]
 80061b0:	2b08      	cmp	r3, #8
 80061b2:	d015      	beq.n	80061e0 <UART_SetConfig+0x5f8>
 80061b4:	dc18      	bgt.n	80061e8 <UART_SetConfig+0x600>
 80061b6:	2b04      	cmp	r3, #4
 80061b8:	d00d      	beq.n	80061d6 <UART_SetConfig+0x5ee>
 80061ba:	dc15      	bgt.n	80061e8 <UART_SetConfig+0x600>
 80061bc:	2b00      	cmp	r3, #0
 80061be:	d002      	beq.n	80061c6 <UART_SetConfig+0x5de>
 80061c0:	2b02      	cmp	r3, #2
 80061c2:	d005      	beq.n	80061d0 <UART_SetConfig+0x5e8>
 80061c4:	e010      	b.n	80061e8 <UART_SetConfig+0x600>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80061c6:	f7fe f8f7 	bl	80043b8 <HAL_RCC_GetPCLK1Freq>
 80061ca:	0003      	movs	r3, r0
 80061cc:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 80061ce:	e014      	b.n	80061fa <UART_SetConfig+0x612>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80061d0:	4b2e      	ldr	r3, [pc, #184]	; (800628c <UART_SetConfig+0x6a4>)
 80061d2:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 80061d4:	e011      	b.n	80061fa <UART_SetConfig+0x612>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80061d6:	f7fe f863 	bl	80042a0 <HAL_RCC_GetSysClockFreq>
 80061da:	0003      	movs	r3, r0
 80061dc:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 80061de:	e00c      	b.n	80061fa <UART_SetConfig+0x612>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80061e0:	2380      	movs	r3, #128	; 0x80
 80061e2:	021b      	lsls	r3, r3, #8
 80061e4:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 80061e6:	e008      	b.n	80061fa <UART_SetConfig+0x612>
      default:
        pclk = 0U;
 80061e8:	2300      	movs	r3, #0
 80061ea:	637b      	str	r3, [r7, #52]	; 0x34
        ret = HAL_ERROR;
 80061ec:	231a      	movs	r3, #26
 80061ee:	2220      	movs	r2, #32
 80061f0:	189b      	adds	r3, r3, r2
 80061f2:	19db      	adds	r3, r3, r7
 80061f4:	2201      	movs	r2, #1
 80061f6:	701a      	strb	r2, [r3, #0]
        break;
 80061f8:	46c0      	nop			; (mov r8, r8)
    }

    if (pclk != 0U)
 80061fa:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80061fc:	2b00      	cmp	r3, #0
 80061fe:	d02a      	beq.n	8006256 <UART_SetConfig+0x66e>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8006200:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006202:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8006204:	4b22      	ldr	r3, [pc, #136]	; (8006290 <UART_SetConfig+0x6a8>)
 8006206:	0052      	lsls	r2, r2, #1
 8006208:	5ad3      	ldrh	r3, [r2, r3]
 800620a:	0019      	movs	r1, r3
 800620c:	6b78      	ldr	r0, [r7, #52]	; 0x34
 800620e:	f7f9 ff95 	bl	800013c <__udivsi3>
 8006212:	0003      	movs	r3, r0
 8006214:	001a      	movs	r2, r3
 8006216:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006218:	685b      	ldr	r3, [r3, #4]
 800621a:	085b      	lsrs	r3, r3, #1
 800621c:	18d2      	adds	r2, r2, r3
 800621e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006220:	685b      	ldr	r3, [r3, #4]
 8006222:	0019      	movs	r1, r3
 8006224:	0010      	movs	r0, r2
 8006226:	f7f9 ff89 	bl	800013c <__udivsi3>
 800622a:	0003      	movs	r3, r0
 800622c:	633b      	str	r3, [r7, #48]	; 0x30
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800622e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006230:	2b0f      	cmp	r3, #15
 8006232:	d90a      	bls.n	800624a <UART_SetConfig+0x662>
 8006234:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006236:	2380      	movs	r3, #128	; 0x80
 8006238:	025b      	lsls	r3, r3, #9
 800623a:	429a      	cmp	r2, r3
 800623c:	d205      	bcs.n	800624a <UART_SetConfig+0x662>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800623e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006240:	b29a      	uxth	r2, r3
 8006242:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006244:	681b      	ldr	r3, [r3, #0]
 8006246:	60da      	str	r2, [r3, #12]
 8006248:	e005      	b.n	8006256 <UART_SetConfig+0x66e>
      }
      else
      {
        ret = HAL_ERROR;
 800624a:	231a      	movs	r3, #26
 800624c:	2220      	movs	r2, #32
 800624e:	189b      	adds	r3, r3, r2
 8006250:	19db      	adds	r3, r3, r7
 8006252:	2201      	movs	r2, #1
 8006254:	701a      	strb	r2, [r3, #0]
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8006256:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006258:	226a      	movs	r2, #106	; 0x6a
 800625a:	2101      	movs	r1, #1
 800625c:	5299      	strh	r1, [r3, r2]
  huart->NbRxDataToProcess = 1;
 800625e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006260:	2268      	movs	r2, #104	; 0x68
 8006262:	2101      	movs	r1, #1
 8006264:	5299      	strh	r1, [r3, r2]

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8006266:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006268:	2200      	movs	r2, #0
 800626a:	675a      	str	r2, [r3, #116]	; 0x74
  huart->TxISR = NULL;
 800626c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800626e:	2200      	movs	r2, #0
 8006270:	679a      	str	r2, [r3, #120]	; 0x78

  return ret;
 8006272:	231a      	movs	r3, #26
 8006274:	2220      	movs	r2, #32
 8006276:	189b      	adds	r3, r3, r2
 8006278:	19db      	adds	r3, r3, r7
 800627a:	781b      	ldrb	r3, [r3, #0]
}
 800627c:	0018      	movs	r0, r3
 800627e:	46bd      	mov	sp, r7
 8006280:	b010      	add	sp, #64	; 0x40
 8006282:	bdb0      	pop	{r4, r5, r7, pc}
 8006284:	40008000 	.word	0x40008000
 8006288:	40008400 	.word	0x40008400
 800628c:	00f42400 	.word	0x00f42400
 8006290:	0800ea0c 	.word	0x0800ea0c

08006294 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8006294:	b580      	push	{r7, lr}
 8006296:	b082      	sub	sp, #8
 8006298:	af00      	add	r7, sp, #0
 800629a:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800629c:	687b      	ldr	r3, [r7, #4]
 800629e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80062a0:	2201      	movs	r2, #1
 80062a2:	4013      	ands	r3, r2
 80062a4:	d00b      	beq.n	80062be <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80062a6:	687b      	ldr	r3, [r7, #4]
 80062a8:	681b      	ldr	r3, [r3, #0]
 80062aa:	685b      	ldr	r3, [r3, #4]
 80062ac:	4a4a      	ldr	r2, [pc, #296]	; (80063d8 <UART_AdvFeatureConfig+0x144>)
 80062ae:	4013      	ands	r3, r2
 80062b0:	0019      	movs	r1, r3
 80062b2:	687b      	ldr	r3, [r7, #4]
 80062b4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80062b6:	687b      	ldr	r3, [r7, #4]
 80062b8:	681b      	ldr	r3, [r3, #0]
 80062ba:	430a      	orrs	r2, r1
 80062bc:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80062be:	687b      	ldr	r3, [r7, #4]
 80062c0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80062c2:	2202      	movs	r2, #2
 80062c4:	4013      	ands	r3, r2
 80062c6:	d00b      	beq.n	80062e0 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80062c8:	687b      	ldr	r3, [r7, #4]
 80062ca:	681b      	ldr	r3, [r3, #0]
 80062cc:	685b      	ldr	r3, [r3, #4]
 80062ce:	4a43      	ldr	r2, [pc, #268]	; (80063dc <UART_AdvFeatureConfig+0x148>)
 80062d0:	4013      	ands	r3, r2
 80062d2:	0019      	movs	r1, r3
 80062d4:	687b      	ldr	r3, [r7, #4]
 80062d6:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80062d8:	687b      	ldr	r3, [r7, #4]
 80062da:	681b      	ldr	r3, [r3, #0]
 80062dc:	430a      	orrs	r2, r1
 80062de:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80062e0:	687b      	ldr	r3, [r7, #4]
 80062e2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80062e4:	2204      	movs	r2, #4
 80062e6:	4013      	ands	r3, r2
 80062e8:	d00b      	beq.n	8006302 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80062ea:	687b      	ldr	r3, [r7, #4]
 80062ec:	681b      	ldr	r3, [r3, #0]
 80062ee:	685b      	ldr	r3, [r3, #4]
 80062f0:	4a3b      	ldr	r2, [pc, #236]	; (80063e0 <UART_AdvFeatureConfig+0x14c>)
 80062f2:	4013      	ands	r3, r2
 80062f4:	0019      	movs	r1, r3
 80062f6:	687b      	ldr	r3, [r7, #4]
 80062f8:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80062fa:	687b      	ldr	r3, [r7, #4]
 80062fc:	681b      	ldr	r3, [r3, #0]
 80062fe:	430a      	orrs	r2, r1
 8006300:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8006302:	687b      	ldr	r3, [r7, #4]
 8006304:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006306:	2208      	movs	r2, #8
 8006308:	4013      	ands	r3, r2
 800630a:	d00b      	beq.n	8006324 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800630c:	687b      	ldr	r3, [r7, #4]
 800630e:	681b      	ldr	r3, [r3, #0]
 8006310:	685b      	ldr	r3, [r3, #4]
 8006312:	4a34      	ldr	r2, [pc, #208]	; (80063e4 <UART_AdvFeatureConfig+0x150>)
 8006314:	4013      	ands	r3, r2
 8006316:	0019      	movs	r1, r3
 8006318:	687b      	ldr	r3, [r7, #4]
 800631a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800631c:	687b      	ldr	r3, [r7, #4]
 800631e:	681b      	ldr	r3, [r3, #0]
 8006320:	430a      	orrs	r2, r1
 8006322:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8006324:	687b      	ldr	r3, [r7, #4]
 8006326:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006328:	2210      	movs	r2, #16
 800632a:	4013      	ands	r3, r2
 800632c:	d00b      	beq.n	8006346 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800632e:	687b      	ldr	r3, [r7, #4]
 8006330:	681b      	ldr	r3, [r3, #0]
 8006332:	689b      	ldr	r3, [r3, #8]
 8006334:	4a2c      	ldr	r2, [pc, #176]	; (80063e8 <UART_AdvFeatureConfig+0x154>)
 8006336:	4013      	ands	r3, r2
 8006338:	0019      	movs	r1, r3
 800633a:	687b      	ldr	r3, [r7, #4]
 800633c:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800633e:	687b      	ldr	r3, [r7, #4]
 8006340:	681b      	ldr	r3, [r3, #0]
 8006342:	430a      	orrs	r2, r1
 8006344:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8006346:	687b      	ldr	r3, [r7, #4]
 8006348:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800634a:	2220      	movs	r2, #32
 800634c:	4013      	ands	r3, r2
 800634e:	d00b      	beq.n	8006368 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8006350:	687b      	ldr	r3, [r7, #4]
 8006352:	681b      	ldr	r3, [r3, #0]
 8006354:	689b      	ldr	r3, [r3, #8]
 8006356:	4a25      	ldr	r2, [pc, #148]	; (80063ec <UART_AdvFeatureConfig+0x158>)
 8006358:	4013      	ands	r3, r2
 800635a:	0019      	movs	r1, r3
 800635c:	687b      	ldr	r3, [r7, #4]
 800635e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8006360:	687b      	ldr	r3, [r7, #4]
 8006362:	681b      	ldr	r3, [r3, #0]
 8006364:	430a      	orrs	r2, r1
 8006366:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8006368:	687b      	ldr	r3, [r7, #4]
 800636a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800636c:	2240      	movs	r2, #64	; 0x40
 800636e:	4013      	ands	r3, r2
 8006370:	d01d      	beq.n	80063ae <UART_AdvFeatureConfig+0x11a>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8006372:	687b      	ldr	r3, [r7, #4]
 8006374:	681b      	ldr	r3, [r3, #0]
 8006376:	685b      	ldr	r3, [r3, #4]
 8006378:	4a1d      	ldr	r2, [pc, #116]	; (80063f0 <UART_AdvFeatureConfig+0x15c>)
 800637a:	4013      	ands	r3, r2
 800637c:	0019      	movs	r1, r3
 800637e:	687b      	ldr	r3, [r7, #4]
 8006380:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8006382:	687b      	ldr	r3, [r7, #4]
 8006384:	681b      	ldr	r3, [r3, #0]
 8006386:	430a      	orrs	r2, r1
 8006388:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800638a:	687b      	ldr	r3, [r7, #4]
 800638c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800638e:	2380      	movs	r3, #128	; 0x80
 8006390:	035b      	lsls	r3, r3, #13
 8006392:	429a      	cmp	r2, r3
 8006394:	d10b      	bne.n	80063ae <UART_AdvFeatureConfig+0x11a>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8006396:	687b      	ldr	r3, [r7, #4]
 8006398:	681b      	ldr	r3, [r3, #0]
 800639a:	685b      	ldr	r3, [r3, #4]
 800639c:	4a15      	ldr	r2, [pc, #84]	; (80063f4 <UART_AdvFeatureConfig+0x160>)
 800639e:	4013      	ands	r3, r2
 80063a0:	0019      	movs	r1, r3
 80063a2:	687b      	ldr	r3, [r7, #4]
 80063a4:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80063a6:	687b      	ldr	r3, [r7, #4]
 80063a8:	681b      	ldr	r3, [r3, #0]
 80063aa:	430a      	orrs	r2, r1
 80063ac:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80063ae:	687b      	ldr	r3, [r7, #4]
 80063b0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80063b2:	2280      	movs	r2, #128	; 0x80
 80063b4:	4013      	ands	r3, r2
 80063b6:	d00b      	beq.n	80063d0 <UART_AdvFeatureConfig+0x13c>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80063b8:	687b      	ldr	r3, [r7, #4]
 80063ba:	681b      	ldr	r3, [r3, #0]
 80063bc:	685b      	ldr	r3, [r3, #4]
 80063be:	4a0e      	ldr	r2, [pc, #56]	; (80063f8 <UART_AdvFeatureConfig+0x164>)
 80063c0:	4013      	ands	r3, r2
 80063c2:	0019      	movs	r1, r3
 80063c4:	687b      	ldr	r3, [r7, #4]
 80063c6:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80063c8:	687b      	ldr	r3, [r7, #4]
 80063ca:	681b      	ldr	r3, [r3, #0]
 80063cc:	430a      	orrs	r2, r1
 80063ce:	605a      	str	r2, [r3, #4]
  }
}
 80063d0:	46c0      	nop			; (mov r8, r8)
 80063d2:	46bd      	mov	sp, r7
 80063d4:	b002      	add	sp, #8
 80063d6:	bd80      	pop	{r7, pc}
 80063d8:	fffdffff 	.word	0xfffdffff
 80063dc:	fffeffff 	.word	0xfffeffff
 80063e0:	fffbffff 	.word	0xfffbffff
 80063e4:	ffff7fff 	.word	0xffff7fff
 80063e8:	ffffefff 	.word	0xffffefff
 80063ec:	ffffdfff 	.word	0xffffdfff
 80063f0:	ffefffff 	.word	0xffefffff
 80063f4:	ff9fffff 	.word	0xff9fffff
 80063f8:	fff7ffff 	.word	0xfff7ffff

080063fc <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80063fc:	b580      	push	{r7, lr}
 80063fe:	b086      	sub	sp, #24
 8006400:	af02      	add	r7, sp, #8
 8006402:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006404:	687b      	ldr	r3, [r7, #4]
 8006406:	2290      	movs	r2, #144	; 0x90
 8006408:	2100      	movs	r1, #0
 800640a:	5099      	str	r1, [r3, r2]

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800640c:	f7fc ff2e 	bl	800326c <HAL_GetTick>
 8006410:	0003      	movs	r3, r0
 8006412:	60fb      	str	r3, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8006414:	687b      	ldr	r3, [r7, #4]
 8006416:	681b      	ldr	r3, [r3, #0]
 8006418:	681b      	ldr	r3, [r3, #0]
 800641a:	2208      	movs	r2, #8
 800641c:	4013      	ands	r3, r2
 800641e:	2b08      	cmp	r3, #8
 8006420:	d10c      	bne.n	800643c <UART_CheckIdleState+0x40>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8006422:	68fb      	ldr	r3, [r7, #12]
 8006424:	2280      	movs	r2, #128	; 0x80
 8006426:	0391      	lsls	r1, r2, #14
 8006428:	6878      	ldr	r0, [r7, #4]
 800642a:	4a1a      	ldr	r2, [pc, #104]	; (8006494 <UART_CheckIdleState+0x98>)
 800642c:	9200      	str	r2, [sp, #0]
 800642e:	2200      	movs	r2, #0
 8006430:	f000 f832 	bl	8006498 <UART_WaitOnFlagUntilTimeout>
 8006434:	1e03      	subs	r3, r0, #0
 8006436:	d001      	beq.n	800643c <UART_CheckIdleState+0x40>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8006438:	2303      	movs	r3, #3
 800643a:	e026      	b.n	800648a <UART_CheckIdleState+0x8e>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800643c:	687b      	ldr	r3, [r7, #4]
 800643e:	681b      	ldr	r3, [r3, #0]
 8006440:	681b      	ldr	r3, [r3, #0]
 8006442:	2204      	movs	r2, #4
 8006444:	4013      	ands	r3, r2
 8006446:	2b04      	cmp	r3, #4
 8006448:	d10c      	bne.n	8006464 <UART_CheckIdleState+0x68>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800644a:	68fb      	ldr	r3, [r7, #12]
 800644c:	2280      	movs	r2, #128	; 0x80
 800644e:	03d1      	lsls	r1, r2, #15
 8006450:	6878      	ldr	r0, [r7, #4]
 8006452:	4a10      	ldr	r2, [pc, #64]	; (8006494 <UART_CheckIdleState+0x98>)
 8006454:	9200      	str	r2, [sp, #0]
 8006456:	2200      	movs	r2, #0
 8006458:	f000 f81e 	bl	8006498 <UART_WaitOnFlagUntilTimeout>
 800645c:	1e03      	subs	r3, r0, #0
 800645e:	d001      	beq.n	8006464 <UART_CheckIdleState+0x68>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8006460:	2303      	movs	r3, #3
 8006462:	e012      	b.n	800648a <UART_CheckIdleState+0x8e>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8006464:	687b      	ldr	r3, [r7, #4]
 8006466:	2288      	movs	r2, #136	; 0x88
 8006468:	2120      	movs	r1, #32
 800646a:	5099      	str	r1, [r3, r2]
  huart->RxState = HAL_UART_STATE_READY;
 800646c:	687b      	ldr	r3, [r7, #4]
 800646e:	228c      	movs	r2, #140	; 0x8c
 8006470:	2120      	movs	r1, #32
 8006472:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006474:	687b      	ldr	r3, [r7, #4]
 8006476:	2200      	movs	r2, #0
 8006478:	66da      	str	r2, [r3, #108]	; 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800647a:	687b      	ldr	r3, [r7, #4]
 800647c:	2200      	movs	r2, #0
 800647e:	671a      	str	r2, [r3, #112]	; 0x70

  __HAL_UNLOCK(huart);
 8006480:	687b      	ldr	r3, [r7, #4]
 8006482:	2284      	movs	r2, #132	; 0x84
 8006484:	2100      	movs	r1, #0
 8006486:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8006488:	2300      	movs	r3, #0
}
 800648a:	0018      	movs	r0, r3
 800648c:	46bd      	mov	sp, r7
 800648e:	b004      	add	sp, #16
 8006490:	bd80      	pop	{r7, pc}
 8006492:	46c0      	nop			; (mov r8, r8)
 8006494:	01ffffff 	.word	0x01ffffff

08006498 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8006498:	b580      	push	{r7, lr}
 800649a:	b094      	sub	sp, #80	; 0x50
 800649c:	af00      	add	r7, sp, #0
 800649e:	60f8      	str	r0, [r7, #12]
 80064a0:	60b9      	str	r1, [r7, #8]
 80064a2:	603b      	str	r3, [r7, #0]
 80064a4:	1dfb      	adds	r3, r7, #7
 80064a6:	701a      	strb	r2, [r3, #0]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80064a8:	e0a7      	b.n	80065fa <UART_WaitOnFlagUntilTimeout+0x162>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80064aa:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80064ac:	3301      	adds	r3, #1
 80064ae:	d100      	bne.n	80064b2 <UART_WaitOnFlagUntilTimeout+0x1a>
 80064b0:	e0a3      	b.n	80065fa <UART_WaitOnFlagUntilTimeout+0x162>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80064b2:	f7fc fedb 	bl	800326c <HAL_GetTick>
 80064b6:	0002      	movs	r2, r0
 80064b8:	683b      	ldr	r3, [r7, #0]
 80064ba:	1ad3      	subs	r3, r2, r3
 80064bc:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80064be:	429a      	cmp	r2, r3
 80064c0:	d302      	bcc.n	80064c8 <UART_WaitOnFlagUntilTimeout+0x30>
 80064c2:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80064c4:	2b00      	cmp	r3, #0
 80064c6:	d13f      	bne.n	8006548 <UART_WaitOnFlagUntilTimeout+0xb0>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80064c8:	f3ef 8310 	mrs	r3, PRIMASK
 80064cc:	62bb      	str	r3, [r7, #40]	; 0x28
  return(result);
 80064ce:	6abb      	ldr	r3, [r7, #40]	; 0x28
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 80064d0:	647b      	str	r3, [r7, #68]	; 0x44
 80064d2:	2301      	movs	r3, #1
 80064d4:	62fb      	str	r3, [r7, #44]	; 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80064d6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80064d8:	f383 8810 	msr	PRIMASK, r3
}
 80064dc:	46c0      	nop			; (mov r8, r8)
 80064de:	68fb      	ldr	r3, [r7, #12]
 80064e0:	681b      	ldr	r3, [r3, #0]
 80064e2:	681a      	ldr	r2, [r3, #0]
 80064e4:	68fb      	ldr	r3, [r7, #12]
 80064e6:	681b      	ldr	r3, [r3, #0]
 80064e8:	494e      	ldr	r1, [pc, #312]	; (8006624 <UART_WaitOnFlagUntilTimeout+0x18c>)
 80064ea:	400a      	ands	r2, r1
 80064ec:	601a      	str	r2, [r3, #0]
 80064ee:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80064f0:	633b      	str	r3, [r7, #48]	; 0x30
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80064f2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80064f4:	f383 8810 	msr	PRIMASK, r3
}
 80064f8:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80064fa:	f3ef 8310 	mrs	r3, PRIMASK
 80064fe:	637b      	str	r3, [r7, #52]	; 0x34
  return(result);
 8006500:	6b7b      	ldr	r3, [r7, #52]	; 0x34
                                                USART_CR1_TXEIE_TXFNFIE));
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006502:	643b      	str	r3, [r7, #64]	; 0x40
 8006504:	2301      	movs	r3, #1
 8006506:	63bb      	str	r3, [r7, #56]	; 0x38
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006508:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800650a:	f383 8810 	msr	PRIMASK, r3
}
 800650e:	46c0      	nop			; (mov r8, r8)
 8006510:	68fb      	ldr	r3, [r7, #12]
 8006512:	681b      	ldr	r3, [r3, #0]
 8006514:	689a      	ldr	r2, [r3, #8]
 8006516:	68fb      	ldr	r3, [r7, #12]
 8006518:	681b      	ldr	r3, [r3, #0]
 800651a:	2101      	movs	r1, #1
 800651c:	438a      	bics	r2, r1
 800651e:	609a      	str	r2, [r3, #8]
 8006520:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006522:	63fb      	str	r3, [r7, #60]	; 0x3c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006524:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006526:	f383 8810 	msr	PRIMASK, r3
}
 800652a:	46c0      	nop			; (mov r8, r8)

        huart->gState = HAL_UART_STATE_READY;
 800652c:	68fb      	ldr	r3, [r7, #12]
 800652e:	2288      	movs	r2, #136	; 0x88
 8006530:	2120      	movs	r1, #32
 8006532:	5099      	str	r1, [r3, r2]
        huart->RxState = HAL_UART_STATE_READY;
 8006534:	68fb      	ldr	r3, [r7, #12]
 8006536:	228c      	movs	r2, #140	; 0x8c
 8006538:	2120      	movs	r1, #32
 800653a:	5099      	str	r1, [r3, r2]

        __HAL_UNLOCK(huart);
 800653c:	68fb      	ldr	r3, [r7, #12]
 800653e:	2284      	movs	r2, #132	; 0x84
 8006540:	2100      	movs	r1, #0
 8006542:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 8006544:	2303      	movs	r3, #3
 8006546:	e069      	b.n	800661c <UART_WaitOnFlagUntilTimeout+0x184>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8006548:	68fb      	ldr	r3, [r7, #12]
 800654a:	681b      	ldr	r3, [r3, #0]
 800654c:	681b      	ldr	r3, [r3, #0]
 800654e:	2204      	movs	r2, #4
 8006550:	4013      	ands	r3, r2
 8006552:	d052      	beq.n	80065fa <UART_WaitOnFlagUntilTimeout+0x162>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8006554:	68fb      	ldr	r3, [r7, #12]
 8006556:	681b      	ldr	r3, [r3, #0]
 8006558:	69da      	ldr	r2, [r3, #28]
 800655a:	2380      	movs	r3, #128	; 0x80
 800655c:	011b      	lsls	r3, r3, #4
 800655e:	401a      	ands	r2, r3
 8006560:	2380      	movs	r3, #128	; 0x80
 8006562:	011b      	lsls	r3, r3, #4
 8006564:	429a      	cmp	r2, r3
 8006566:	d148      	bne.n	80065fa <UART_WaitOnFlagUntilTimeout+0x162>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8006568:	68fb      	ldr	r3, [r7, #12]
 800656a:	681b      	ldr	r3, [r3, #0]
 800656c:	2280      	movs	r2, #128	; 0x80
 800656e:	0112      	lsls	r2, r2, #4
 8006570:	621a      	str	r2, [r3, #32]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8006572:	f3ef 8310 	mrs	r3, PRIMASK
 8006576:	613b      	str	r3, [r7, #16]
  return(result);
 8006578:	693b      	ldr	r3, [r7, #16]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 800657a:	64fb      	str	r3, [r7, #76]	; 0x4c
 800657c:	2301      	movs	r3, #1
 800657e:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006580:	697b      	ldr	r3, [r7, #20]
 8006582:	f383 8810 	msr	PRIMASK, r3
}
 8006586:	46c0      	nop			; (mov r8, r8)
 8006588:	68fb      	ldr	r3, [r7, #12]
 800658a:	681b      	ldr	r3, [r3, #0]
 800658c:	681a      	ldr	r2, [r3, #0]
 800658e:	68fb      	ldr	r3, [r7, #12]
 8006590:	681b      	ldr	r3, [r3, #0]
 8006592:	4924      	ldr	r1, [pc, #144]	; (8006624 <UART_WaitOnFlagUntilTimeout+0x18c>)
 8006594:	400a      	ands	r2, r1
 8006596:	601a      	str	r2, [r3, #0]
 8006598:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800659a:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800659c:	69bb      	ldr	r3, [r7, #24]
 800659e:	f383 8810 	msr	PRIMASK, r3
}
 80065a2:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80065a4:	f3ef 8310 	mrs	r3, PRIMASK
 80065a8:	61fb      	str	r3, [r7, #28]
  return(result);
 80065aa:	69fb      	ldr	r3, [r7, #28]
                                                  USART_CR1_TXEIE_TXFNFIE));
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80065ac:	64bb      	str	r3, [r7, #72]	; 0x48
 80065ae:	2301      	movs	r3, #1
 80065b0:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80065b2:	6a3b      	ldr	r3, [r7, #32]
 80065b4:	f383 8810 	msr	PRIMASK, r3
}
 80065b8:	46c0      	nop			; (mov r8, r8)
 80065ba:	68fb      	ldr	r3, [r7, #12]
 80065bc:	681b      	ldr	r3, [r3, #0]
 80065be:	689a      	ldr	r2, [r3, #8]
 80065c0:	68fb      	ldr	r3, [r7, #12]
 80065c2:	681b      	ldr	r3, [r3, #0]
 80065c4:	2101      	movs	r1, #1
 80065c6:	438a      	bics	r2, r1
 80065c8:	609a      	str	r2, [r3, #8]
 80065ca:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80065cc:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80065ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80065d0:	f383 8810 	msr	PRIMASK, r3
}
 80065d4:	46c0      	nop			; (mov r8, r8)

          huart->gState = HAL_UART_STATE_READY;
 80065d6:	68fb      	ldr	r3, [r7, #12]
 80065d8:	2288      	movs	r2, #136	; 0x88
 80065da:	2120      	movs	r1, #32
 80065dc:	5099      	str	r1, [r3, r2]
          huart->RxState = HAL_UART_STATE_READY;
 80065de:	68fb      	ldr	r3, [r7, #12]
 80065e0:	228c      	movs	r2, #140	; 0x8c
 80065e2:	2120      	movs	r1, #32
 80065e4:	5099      	str	r1, [r3, r2]
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80065e6:	68fb      	ldr	r3, [r7, #12]
 80065e8:	2290      	movs	r2, #144	; 0x90
 80065ea:	2120      	movs	r1, #32
 80065ec:	5099      	str	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80065ee:	68fb      	ldr	r3, [r7, #12]
 80065f0:	2284      	movs	r2, #132	; 0x84
 80065f2:	2100      	movs	r1, #0
 80065f4:	5499      	strb	r1, [r3, r2]

          return HAL_TIMEOUT;
 80065f6:	2303      	movs	r3, #3
 80065f8:	e010      	b.n	800661c <UART_WaitOnFlagUntilTimeout+0x184>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80065fa:	68fb      	ldr	r3, [r7, #12]
 80065fc:	681b      	ldr	r3, [r3, #0]
 80065fe:	69db      	ldr	r3, [r3, #28]
 8006600:	68ba      	ldr	r2, [r7, #8]
 8006602:	4013      	ands	r3, r2
 8006604:	68ba      	ldr	r2, [r7, #8]
 8006606:	1ad3      	subs	r3, r2, r3
 8006608:	425a      	negs	r2, r3
 800660a:	4153      	adcs	r3, r2
 800660c:	b2db      	uxtb	r3, r3
 800660e:	001a      	movs	r2, r3
 8006610:	1dfb      	adds	r3, r7, #7
 8006612:	781b      	ldrb	r3, [r3, #0]
 8006614:	429a      	cmp	r2, r3
 8006616:	d100      	bne.n	800661a <UART_WaitOnFlagUntilTimeout+0x182>
 8006618:	e747      	b.n	80064aa <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800661a:	2300      	movs	r3, #0
}
 800661c:	0018      	movs	r0, r3
 800661e:	46bd      	mov	sp, r7
 8006620:	b014      	add	sp, #80	; 0x50
 8006622:	bd80      	pop	{r7, pc}
 8006624:	fffffe5f 	.word	0xfffffe5f

08006628 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8006628:	b580      	push	{r7, lr}
 800662a:	b084      	sub	sp, #16
 800662c:	af00      	add	r7, sp, #0
 800662e:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8006630:	687b      	ldr	r3, [r7, #4]
 8006632:	2284      	movs	r2, #132	; 0x84
 8006634:	5c9b      	ldrb	r3, [r3, r2]
 8006636:	2b01      	cmp	r3, #1
 8006638:	d101      	bne.n	800663e <HAL_UARTEx_DisableFifoMode+0x16>
 800663a:	2302      	movs	r3, #2
 800663c:	e027      	b.n	800668e <HAL_UARTEx_DisableFifoMode+0x66>
 800663e:	687b      	ldr	r3, [r7, #4]
 8006640:	2284      	movs	r2, #132	; 0x84
 8006642:	2101      	movs	r1, #1
 8006644:	5499      	strb	r1, [r3, r2]

  huart->gState = HAL_UART_STATE_BUSY;
 8006646:	687b      	ldr	r3, [r7, #4]
 8006648:	2288      	movs	r2, #136	; 0x88
 800664a:	2124      	movs	r1, #36	; 0x24
 800664c:	5099      	str	r1, [r3, r2]

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800664e:	687b      	ldr	r3, [r7, #4]
 8006650:	681b      	ldr	r3, [r3, #0]
 8006652:	681b      	ldr	r3, [r3, #0]
 8006654:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8006656:	687b      	ldr	r3, [r7, #4]
 8006658:	681b      	ldr	r3, [r3, #0]
 800665a:	681a      	ldr	r2, [r3, #0]
 800665c:	687b      	ldr	r3, [r7, #4]
 800665e:	681b      	ldr	r3, [r3, #0]
 8006660:	2101      	movs	r1, #1
 8006662:	438a      	bics	r2, r1
 8006664:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8006666:	68fb      	ldr	r3, [r7, #12]
 8006668:	4a0b      	ldr	r2, [pc, #44]	; (8006698 <HAL_UARTEx_DisableFifoMode+0x70>)
 800666a:	4013      	ands	r3, r2
 800666c:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 800666e:	687b      	ldr	r3, [r7, #4]
 8006670:	2200      	movs	r2, #0
 8006672:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8006674:	687b      	ldr	r3, [r7, #4]
 8006676:	681b      	ldr	r3, [r3, #0]
 8006678:	68fa      	ldr	r2, [r7, #12]
 800667a:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800667c:	687b      	ldr	r3, [r7, #4]
 800667e:	2288      	movs	r2, #136	; 0x88
 8006680:	2120      	movs	r1, #32
 8006682:	5099      	str	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8006684:	687b      	ldr	r3, [r7, #4]
 8006686:	2284      	movs	r2, #132	; 0x84
 8006688:	2100      	movs	r1, #0
 800668a:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800668c:	2300      	movs	r3, #0
}
 800668e:	0018      	movs	r0, r3
 8006690:	46bd      	mov	sp, r7
 8006692:	b004      	add	sp, #16
 8006694:	bd80      	pop	{r7, pc}
 8006696:	46c0      	nop			; (mov r8, r8)
 8006698:	dfffffff 	.word	0xdfffffff

0800669c <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800669c:	b580      	push	{r7, lr}
 800669e:	b084      	sub	sp, #16
 80066a0:	af00      	add	r7, sp, #0
 80066a2:	6078      	str	r0, [r7, #4]
 80066a4:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 80066a6:	687b      	ldr	r3, [r7, #4]
 80066a8:	2284      	movs	r2, #132	; 0x84
 80066aa:	5c9b      	ldrb	r3, [r3, r2]
 80066ac:	2b01      	cmp	r3, #1
 80066ae:	d101      	bne.n	80066b4 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 80066b0:	2302      	movs	r3, #2
 80066b2:	e02e      	b.n	8006712 <HAL_UARTEx_SetTxFifoThreshold+0x76>
 80066b4:	687b      	ldr	r3, [r7, #4]
 80066b6:	2284      	movs	r2, #132	; 0x84
 80066b8:	2101      	movs	r1, #1
 80066ba:	5499      	strb	r1, [r3, r2]

  huart->gState = HAL_UART_STATE_BUSY;
 80066bc:	687b      	ldr	r3, [r7, #4]
 80066be:	2288      	movs	r2, #136	; 0x88
 80066c0:	2124      	movs	r1, #36	; 0x24
 80066c2:	5099      	str	r1, [r3, r2]

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80066c4:	687b      	ldr	r3, [r7, #4]
 80066c6:	681b      	ldr	r3, [r3, #0]
 80066c8:	681b      	ldr	r3, [r3, #0]
 80066ca:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80066cc:	687b      	ldr	r3, [r7, #4]
 80066ce:	681b      	ldr	r3, [r3, #0]
 80066d0:	681a      	ldr	r2, [r3, #0]
 80066d2:	687b      	ldr	r3, [r7, #4]
 80066d4:	681b      	ldr	r3, [r3, #0]
 80066d6:	2101      	movs	r1, #1
 80066d8:	438a      	bics	r2, r1
 80066da:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 80066dc:	687b      	ldr	r3, [r7, #4]
 80066de:	681b      	ldr	r3, [r3, #0]
 80066e0:	689b      	ldr	r3, [r3, #8]
 80066e2:	00db      	lsls	r3, r3, #3
 80066e4:	08d9      	lsrs	r1, r3, #3
 80066e6:	687b      	ldr	r3, [r7, #4]
 80066e8:	681b      	ldr	r3, [r3, #0]
 80066ea:	683a      	ldr	r2, [r7, #0]
 80066ec:	430a      	orrs	r2, r1
 80066ee:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 80066f0:	687b      	ldr	r3, [r7, #4]
 80066f2:	0018      	movs	r0, r3
 80066f4:	f000 f854 	bl	80067a0 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80066f8:	687b      	ldr	r3, [r7, #4]
 80066fa:	681b      	ldr	r3, [r3, #0]
 80066fc:	68fa      	ldr	r2, [r7, #12]
 80066fe:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8006700:	687b      	ldr	r3, [r7, #4]
 8006702:	2288      	movs	r2, #136	; 0x88
 8006704:	2120      	movs	r1, #32
 8006706:	5099      	str	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8006708:	687b      	ldr	r3, [r7, #4]
 800670a:	2284      	movs	r2, #132	; 0x84
 800670c:	2100      	movs	r1, #0
 800670e:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8006710:	2300      	movs	r3, #0
}
 8006712:	0018      	movs	r0, r3
 8006714:	46bd      	mov	sp, r7
 8006716:	b004      	add	sp, #16
 8006718:	bd80      	pop	{r7, pc}
	...

0800671c <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800671c:	b580      	push	{r7, lr}
 800671e:	b084      	sub	sp, #16
 8006720:	af00      	add	r7, sp, #0
 8006722:	6078      	str	r0, [r7, #4]
 8006724:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8006726:	687b      	ldr	r3, [r7, #4]
 8006728:	2284      	movs	r2, #132	; 0x84
 800672a:	5c9b      	ldrb	r3, [r3, r2]
 800672c:	2b01      	cmp	r3, #1
 800672e:	d101      	bne.n	8006734 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8006730:	2302      	movs	r3, #2
 8006732:	e02f      	b.n	8006794 <HAL_UARTEx_SetRxFifoThreshold+0x78>
 8006734:	687b      	ldr	r3, [r7, #4]
 8006736:	2284      	movs	r2, #132	; 0x84
 8006738:	2101      	movs	r1, #1
 800673a:	5499      	strb	r1, [r3, r2]

  huart->gState = HAL_UART_STATE_BUSY;
 800673c:	687b      	ldr	r3, [r7, #4]
 800673e:	2288      	movs	r2, #136	; 0x88
 8006740:	2124      	movs	r1, #36	; 0x24
 8006742:	5099      	str	r1, [r3, r2]

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8006744:	687b      	ldr	r3, [r7, #4]
 8006746:	681b      	ldr	r3, [r3, #0]
 8006748:	681b      	ldr	r3, [r3, #0]
 800674a:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800674c:	687b      	ldr	r3, [r7, #4]
 800674e:	681b      	ldr	r3, [r3, #0]
 8006750:	681a      	ldr	r2, [r3, #0]
 8006752:	687b      	ldr	r3, [r7, #4]
 8006754:	681b      	ldr	r3, [r3, #0]
 8006756:	2101      	movs	r1, #1
 8006758:	438a      	bics	r2, r1
 800675a:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 800675c:	687b      	ldr	r3, [r7, #4]
 800675e:	681b      	ldr	r3, [r3, #0]
 8006760:	689b      	ldr	r3, [r3, #8]
 8006762:	4a0e      	ldr	r2, [pc, #56]	; (800679c <HAL_UARTEx_SetRxFifoThreshold+0x80>)
 8006764:	4013      	ands	r3, r2
 8006766:	0019      	movs	r1, r3
 8006768:	687b      	ldr	r3, [r7, #4]
 800676a:	681b      	ldr	r3, [r3, #0]
 800676c:	683a      	ldr	r2, [r7, #0]
 800676e:	430a      	orrs	r2, r1
 8006770:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8006772:	687b      	ldr	r3, [r7, #4]
 8006774:	0018      	movs	r0, r3
 8006776:	f000 f813 	bl	80067a0 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800677a:	687b      	ldr	r3, [r7, #4]
 800677c:	681b      	ldr	r3, [r3, #0]
 800677e:	68fa      	ldr	r2, [r7, #12]
 8006780:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8006782:	687b      	ldr	r3, [r7, #4]
 8006784:	2288      	movs	r2, #136	; 0x88
 8006786:	2120      	movs	r1, #32
 8006788:	5099      	str	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800678a:	687b      	ldr	r3, [r7, #4]
 800678c:	2284      	movs	r2, #132	; 0x84
 800678e:	2100      	movs	r1, #0
 8006790:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8006792:	2300      	movs	r3, #0
}
 8006794:	0018      	movs	r0, r3
 8006796:	46bd      	mov	sp, r7
 8006798:	b004      	add	sp, #16
 800679a:	bd80      	pop	{r7, pc}
 800679c:	f1ffffff 	.word	0xf1ffffff

080067a0 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 80067a0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80067a2:	b085      	sub	sp, #20
 80067a4:	af00      	add	r7, sp, #0
 80067a6:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 80067a8:	687b      	ldr	r3, [r7, #4]
 80067aa:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80067ac:	2b00      	cmp	r3, #0
 80067ae:	d108      	bne.n	80067c2 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 80067b0:	687b      	ldr	r3, [r7, #4]
 80067b2:	226a      	movs	r2, #106	; 0x6a
 80067b4:	2101      	movs	r1, #1
 80067b6:	5299      	strh	r1, [r3, r2]
    huart->NbRxDataToProcess = 1U;
 80067b8:	687b      	ldr	r3, [r7, #4]
 80067ba:	2268      	movs	r2, #104	; 0x68
 80067bc:	2101      	movs	r1, #1
 80067be:	5299      	strh	r1, [r3, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 80067c0:	e043      	b.n	800684a <UARTEx_SetNbDataToProcess+0xaa>
    rx_fifo_depth = RX_FIFO_DEPTH;
 80067c2:	260f      	movs	r6, #15
 80067c4:	19bb      	adds	r3, r7, r6
 80067c6:	2208      	movs	r2, #8
 80067c8:	701a      	strb	r2, [r3, #0]
    tx_fifo_depth = TX_FIFO_DEPTH;
 80067ca:	200e      	movs	r0, #14
 80067cc:	183b      	adds	r3, r7, r0
 80067ce:	2208      	movs	r2, #8
 80067d0:	701a      	strb	r2, [r3, #0]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 80067d2:	687b      	ldr	r3, [r7, #4]
 80067d4:	681b      	ldr	r3, [r3, #0]
 80067d6:	689b      	ldr	r3, [r3, #8]
 80067d8:	0e5b      	lsrs	r3, r3, #25
 80067da:	b2da      	uxtb	r2, r3
 80067dc:	240d      	movs	r4, #13
 80067de:	193b      	adds	r3, r7, r4
 80067e0:	2107      	movs	r1, #7
 80067e2:	400a      	ands	r2, r1
 80067e4:	701a      	strb	r2, [r3, #0]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 80067e6:	687b      	ldr	r3, [r7, #4]
 80067e8:	681b      	ldr	r3, [r3, #0]
 80067ea:	689b      	ldr	r3, [r3, #8]
 80067ec:	0f5b      	lsrs	r3, r3, #29
 80067ee:	b2da      	uxtb	r2, r3
 80067f0:	250c      	movs	r5, #12
 80067f2:	197b      	adds	r3, r7, r5
 80067f4:	2107      	movs	r1, #7
 80067f6:	400a      	ands	r2, r1
 80067f8:	701a      	strb	r2, [r3, #0]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 80067fa:	183b      	adds	r3, r7, r0
 80067fc:	781b      	ldrb	r3, [r3, #0]
 80067fe:	197a      	adds	r2, r7, r5
 8006800:	7812      	ldrb	r2, [r2, #0]
 8006802:	4914      	ldr	r1, [pc, #80]	; (8006854 <UARTEx_SetNbDataToProcess+0xb4>)
 8006804:	5c8a      	ldrb	r2, [r1, r2]
 8006806:	435a      	muls	r2, r3
 8006808:	0010      	movs	r0, r2
                               (uint16_t)denominator[tx_fifo_threshold];
 800680a:	197b      	adds	r3, r7, r5
 800680c:	781b      	ldrb	r3, [r3, #0]
 800680e:	4a12      	ldr	r2, [pc, #72]	; (8006858 <UARTEx_SetNbDataToProcess+0xb8>)
 8006810:	5cd3      	ldrb	r3, [r2, r3]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8006812:	0019      	movs	r1, r3
 8006814:	f7f9 fd1c 	bl	8000250 <__divsi3>
 8006818:	0003      	movs	r3, r0
 800681a:	b299      	uxth	r1, r3
 800681c:	687b      	ldr	r3, [r7, #4]
 800681e:	226a      	movs	r2, #106	; 0x6a
 8006820:	5299      	strh	r1, [r3, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8006822:	19bb      	adds	r3, r7, r6
 8006824:	781b      	ldrb	r3, [r3, #0]
 8006826:	193a      	adds	r2, r7, r4
 8006828:	7812      	ldrb	r2, [r2, #0]
 800682a:	490a      	ldr	r1, [pc, #40]	; (8006854 <UARTEx_SetNbDataToProcess+0xb4>)
 800682c:	5c8a      	ldrb	r2, [r1, r2]
 800682e:	435a      	muls	r2, r3
 8006830:	0010      	movs	r0, r2
                               (uint16_t)denominator[rx_fifo_threshold];
 8006832:	193b      	adds	r3, r7, r4
 8006834:	781b      	ldrb	r3, [r3, #0]
 8006836:	4a08      	ldr	r2, [pc, #32]	; (8006858 <UARTEx_SetNbDataToProcess+0xb8>)
 8006838:	5cd3      	ldrb	r3, [r2, r3]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800683a:	0019      	movs	r1, r3
 800683c:	f7f9 fd08 	bl	8000250 <__divsi3>
 8006840:	0003      	movs	r3, r0
 8006842:	b299      	uxth	r1, r3
 8006844:	687b      	ldr	r3, [r7, #4]
 8006846:	2268      	movs	r2, #104	; 0x68
 8006848:	5299      	strh	r1, [r3, r2]
}
 800684a:	46c0      	nop			; (mov r8, r8)
 800684c:	46bd      	mov	sp, r7
 800684e:	b005      	add	sp, #20
 8006850:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8006852:	46c0      	nop			; (mov r8, r8)
 8006854:	0800ea24 	.word	0x0800ea24
 8006858:	0800ea2c 	.word	0x0800ea2c

0800685c <astronode_send_cfg_sr>:
        }
    }
}

void astronode_send_cfg_sr(void)
{
 800685c:	b5b0      	push	{r4, r5, r7, lr}
 800685e:	b0e4      	sub	sp, #400	; 0x190
 8006860:	af00      	add	r7, sp, #0
    astronode_app_msg_t request = {0};
 8006862:	24c8      	movs	r4, #200	; 0xc8
 8006864:	193b      	adds	r3, r7, r4
 8006866:	0018      	movs	r0, r3
 8006868:	23c6      	movs	r3, #198	; 0xc6
 800686a:	001a      	movs	r2, r3
 800686c:	2100      	movs	r1, #0
 800686e:	f001 feb5 	bl	80085dc <memset>
    astronode_app_msg_t answer = {0};
 8006872:	4b13      	ldr	r3, [pc, #76]	; (80068c0 <astronode_send_cfg_sr+0x64>)
 8006874:	25c8      	movs	r5, #200	; 0xc8
 8006876:	006d      	lsls	r5, r5, #1
 8006878:	195b      	adds	r3, r3, r5
 800687a:	19db      	adds	r3, r3, r7
 800687c:	0018      	movs	r0, r3
 800687e:	23c6      	movs	r3, #198	; 0xc6
 8006880:	001a      	movs	r2, r3
 8006882:	2100      	movs	r1, #0
 8006884:	f001 feaa 	bl	80085dc <memset>

    request.op_code = ASTRONODE_OP_CODE_CFG_SR;
 8006888:	193b      	adds	r3, r7, r4
 800688a:	2210      	movs	r2, #16
 800688c:	701a      	strb	r2, [r3, #0]

    astronode_transport_send_receive(&request, &answer);
 800688e:	003a      	movs	r2, r7
 8006890:	193b      	adds	r3, r7, r4
 8006892:	0011      	movs	r1, r2
 8006894:	0018      	movs	r0, r3
 8006896:	f001 f8e9 	bl	8007a6c <astronode_transport_send_receive>

    if (answer.op_code == ASTRONODE_OP_CODE_CFG_SA)
 800689a:	4b09      	ldr	r3, [pc, #36]	; (80068c0 <astronode_send_cfg_sr+0x64>)
 800689c:	195b      	adds	r3, r3, r5
 800689e:	19db      	adds	r3, r3, r7
 80068a0:	781b      	ldrb	r3, [r3, #0]
 80068a2:	2b90      	cmp	r3, #144	; 0x90
 80068a4:	d104      	bne.n	80068b0 <astronode_send_cfg_sr+0x54>
    {
        send_debug_logs("Astronode configuration successfully saved in NVM.");
 80068a6:	4b07      	ldr	r3, [pc, #28]	; (80068c4 <astronode_send_cfg_sr+0x68>)
 80068a8:	0018      	movs	r0, r3
 80068aa:	f7fc f85d 	bl	8002968 <send_debug_logs>
    }
    else
    {
        send_debug_logs("Failed to save the Astronode configuration in NVM.");
    }
}
 80068ae:	e003      	b.n	80068b8 <astronode_send_cfg_sr+0x5c>
        send_debug_logs("Failed to save the Astronode configuration in NVM.");
 80068b0:	4b05      	ldr	r3, [pc, #20]	; (80068c8 <astronode_send_cfg_sr+0x6c>)
 80068b2:	0018      	movs	r0, r3
 80068b4:	f7fc f858 	bl	8002968 <send_debug_logs>
}
 80068b8:	46c0      	nop			; (mov r8, r8)
 80068ba:	46bd      	mov	sp, r7
 80068bc:	b064      	add	sp, #400	; 0x190
 80068be:	bdb0      	pop	{r4, r5, r7, pc}
 80068c0:	fffffe70 	.word	0xfffffe70
 80068c4:	0800d5c4 	.word	0x0800d5c4
 80068c8:	0800d5f8 	.word	0x0800d5f8

080068cc <astronode_send_cfg_wr>:
                            bool deep_sleep_mode,
                            bool message_ack_event_pin_mask,
                            bool reset_notification_event_pin_mask,
							bool command_available_event_pin_mask,
							bool message_tx_event_pin_mask)
{
 80068cc:	b5f0      	push	{r4, r5, r6, r7, lr}
 80068ce:	b0e7      	sub	sp, #412	; 0x19c
 80068d0:	af00      	add	r7, sp, #0
 80068d2:	0005      	movs	r5, r0
 80068d4:	000c      	movs	r4, r1
 80068d6:	0010      	movs	r0, r2
 80068d8:	0019      	movs	r1, r3
 80068da:	4b4b      	ldr	r3, [pc, #300]	; (8006a08 <astronode_send_cfg_wr+0x13c>)
 80068dc:	26cc      	movs	r6, #204	; 0xcc
 80068de:	0076      	lsls	r6, r6, #1
 80068e0:	199b      	adds	r3, r3, r6
 80068e2:	19db      	adds	r3, r3, r7
 80068e4:	1c2a      	adds	r2, r5, #0
 80068e6:	701a      	strb	r2, [r3, #0]
 80068e8:	4b48      	ldr	r3, [pc, #288]	; (8006a0c <astronode_send_cfg_wr+0x140>)
 80068ea:	0035      	movs	r5, r6
 80068ec:	195b      	adds	r3, r3, r5
 80068ee:	19db      	adds	r3, r3, r7
 80068f0:	1c22      	adds	r2, r4, #0
 80068f2:	701a      	strb	r2, [r3, #0]
 80068f4:	4b46      	ldr	r3, [pc, #280]	; (8006a10 <astronode_send_cfg_wr+0x144>)
 80068f6:	002c      	movs	r4, r5
 80068f8:	191b      	adds	r3, r3, r4
 80068fa:	19db      	adds	r3, r3, r7
 80068fc:	1c02      	adds	r2, r0, #0
 80068fe:	701a      	strb	r2, [r3, #0]
 8006900:	4b44      	ldr	r3, [pc, #272]	; (8006a14 <astronode_send_cfg_wr+0x148>)
 8006902:	191b      	adds	r3, r3, r4
 8006904:	19db      	adds	r3, r3, r7
 8006906:	1c0a      	adds	r2, r1, #0
 8006908:	701a      	strb	r2, [r3, #0]
    astronode_app_msg_t request = {0};
 800690a:	25d0      	movs	r5, #208	; 0xd0
 800690c:	197b      	adds	r3, r7, r5
 800690e:	0018      	movs	r0, r3
 8006910:	23c6      	movs	r3, #198	; 0xc6
 8006912:	001a      	movs	r2, r3
 8006914:	2100      	movs	r1, #0
 8006916:	f001 fe61 	bl	80085dc <memset>
    astronode_app_msg_t answer = {0};
 800691a:	4b3f      	ldr	r3, [pc, #252]	; (8006a18 <astronode_send_cfg_wr+0x14c>)
 800691c:	191b      	adds	r3, r3, r4
 800691e:	19db      	adds	r3, r3, r7
 8006920:	0018      	movs	r0, r3
 8006922:	23c6      	movs	r3, #198	; 0xc6
 8006924:	001a      	movs	r2, r3
 8006926:	2100      	movs	r1, #0
 8006928:	f001 fe58 	bl	80085dc <memset>

    request.op_code = ASTRONODE_OP_CODE_CFG_WR;
 800692c:	0029      	movs	r1, r5
 800692e:	187b      	adds	r3, r7, r1
 8006930:	2205      	movs	r2, #5
 8006932:	701a      	strb	r2, [r3, #0]

    request.p_payload[ASTRONODE_BYTE_OFFSET_CFG_WR_CONFIG] = payload_acknowledgment << ASTRONODE_BIT_OFFSET_PAYLOAD_ACK
        | add_geolocation << ASTRONODE_BIT_OFFSET_ADD_GEO
 8006934:	4b34      	ldr	r3, [pc, #208]	; (8006a08 <astronode_send_cfg_wr+0x13c>)
 8006936:	191b      	adds	r3, r3, r4
 8006938:	19db      	adds	r3, r3, r7
 800693a:	2200      	movs	r2, #0
 800693c:	569a      	ldrsb	r2, [r3, r2]
 800693e:	4b33      	ldr	r3, [pc, #204]	; (8006a0c <astronode_send_cfg_wr+0x140>)
 8006940:	191b      	adds	r3, r3, r4
 8006942:	19db      	adds	r3, r3, r7
 8006944:	781b      	ldrb	r3, [r3, #0]
 8006946:	005b      	lsls	r3, r3, #1
 8006948:	b25b      	sxtb	r3, r3
 800694a:	4313      	orrs	r3, r2
 800694c:	b25a      	sxtb	r2, r3
        | enable_ephemeris << ASTRONODE_BIT_OFFSET_ENABLE_EPH
 800694e:	4b30      	ldr	r3, [pc, #192]	; (8006a10 <astronode_send_cfg_wr+0x144>)
 8006950:	191b      	adds	r3, r3, r4
 8006952:	19db      	adds	r3, r3, r7
 8006954:	781b      	ldrb	r3, [r3, #0]
 8006956:	009b      	lsls	r3, r3, #2
 8006958:	b25b      	sxtb	r3, r3
 800695a:	4313      	orrs	r3, r2
 800695c:	b25a      	sxtb	r2, r3
        | deep_sleep_mode << ASTRONODE_BIT_OFFSET_DEEP_SLEEP_MODE;
 800695e:	4b2d      	ldr	r3, [pc, #180]	; (8006a14 <astronode_send_cfg_wr+0x148>)
 8006960:	191b      	adds	r3, r3, r4
 8006962:	19db      	adds	r3, r3, r7
 8006964:	781b      	ldrb	r3, [r3, #0]
 8006966:	00db      	lsls	r3, r3, #3
 8006968:	b25b      	sxtb	r3, r3
 800696a:	4313      	orrs	r3, r2
 800696c:	b25b      	sxtb	r3, r3
 800696e:	b2da      	uxtb	r2, r3
    request.p_payload[ASTRONODE_BYTE_OFFSET_CFG_WR_CONFIG] = payload_acknowledgment << ASTRONODE_BIT_OFFSET_PAYLOAD_ACK
 8006970:	187b      	adds	r3, r7, r1
 8006972:	705a      	strb	r2, [r3, #1]

    request.p_payload[ASTRONODE_BYTE_OFFSET_CFG_WR_EVT_PIN_MASK] = message_ack_event_pin_mask << ASTRONODE_BIT_OFFSET_MSG_ACK_EVT_PIN_MASK
        | reset_notification_event_pin_mask << ASTRONODE_BIT_OFFSET_RST_NTF_EVT_PIN_MASK
 8006974:	23d4      	movs	r3, #212	; 0xd4
 8006976:	005b      	lsls	r3, r3, #1
 8006978:	2508      	movs	r5, #8
 800697a:	195b      	adds	r3, r3, r5
 800697c:	19db      	adds	r3, r3, r7
 800697e:	2200      	movs	r2, #0
 8006980:	569a      	ldrsb	r2, [r3, r2]
 8006982:	23d6      	movs	r3, #214	; 0xd6
 8006984:	005b      	lsls	r3, r3, #1
 8006986:	195b      	adds	r3, r3, r5
 8006988:	19db      	adds	r3, r3, r7
 800698a:	781b      	ldrb	r3, [r3, #0]
 800698c:	005b      	lsls	r3, r3, #1
 800698e:	b25b      	sxtb	r3, r3
 8006990:	4313      	orrs	r3, r2
 8006992:	b25a      	sxtb	r2, r3
        | command_available_event_pin_mask << ASTRONODE_BIT_OFFSET_CMD_AVA_EVT_PIN_MASK
 8006994:	23d8      	movs	r3, #216	; 0xd8
 8006996:	005b      	lsls	r3, r3, #1
 8006998:	195b      	adds	r3, r3, r5
 800699a:	19db      	adds	r3, r3, r7
 800699c:	781b      	ldrb	r3, [r3, #0]
 800699e:	009b      	lsls	r3, r3, #2
 80069a0:	b25b      	sxtb	r3, r3
 80069a2:	4313      	orrs	r3, r2
 80069a4:	b25a      	sxtb	r2, r3
        | message_tx_event_pin_mask << ASTRONODE_BIT_OFFSET_MSG_TXP_EVT_PIN_MASK;
 80069a6:	23da      	movs	r3, #218	; 0xda
 80069a8:	005b      	lsls	r3, r3, #1
 80069aa:	195b      	adds	r3, r3, r5
 80069ac:	19db      	adds	r3, r3, r7
 80069ae:	781b      	ldrb	r3, [r3, #0]
 80069b0:	00db      	lsls	r3, r3, #3
 80069b2:	b25b      	sxtb	r3, r3
 80069b4:	4313      	orrs	r3, r2
 80069b6:	b25b      	sxtb	r3, r3
 80069b8:	b2da      	uxtb	r2, r3
    request.p_payload[ASTRONODE_BYTE_OFFSET_CFG_WR_EVT_PIN_MASK] = message_ack_event_pin_mask << ASTRONODE_BIT_OFFSET_MSG_ACK_EVT_PIN_MASK
 80069ba:	187b      	adds	r3, r7, r1
 80069bc:	70da      	strb	r2, [r3, #3]

    request.payload_len = 3;
 80069be:	0008      	movs	r0, r1
 80069c0:	187b      	adds	r3, r7, r1
 80069c2:	22c4      	movs	r2, #196	; 0xc4
 80069c4:	2103      	movs	r1, #3
 80069c6:	5299      	strh	r1, [r3, r2]

    if (astronode_transport_send_receive(&request, &answer) == RS_SUCCESS)
 80069c8:	002b      	movs	r3, r5
 80069ca:	18fa      	adds	r2, r7, r3
 80069cc:	183b      	adds	r3, r7, r0
 80069ce:	0011      	movs	r1, r2
 80069d0:	0018      	movs	r0, r3
 80069d2:	f001 f84b 	bl	8007a6c <astronode_transport_send_receive>
 80069d6:	0003      	movs	r3, r0
 80069d8:	2b01      	cmp	r3, #1
 80069da:	d10f      	bne.n	80069fc <astronode_send_cfg_wr+0x130>
    {
        if (answer.op_code == ASTRONODE_OP_CODE_CFG_WA)
 80069dc:	4b0e      	ldr	r3, [pc, #56]	; (8006a18 <astronode_send_cfg_wr+0x14c>)
 80069de:	191b      	adds	r3, r3, r4
 80069e0:	19db      	adds	r3, r3, r7
 80069e2:	781b      	ldrb	r3, [r3, #0]
 80069e4:	2b85      	cmp	r3, #133	; 0x85
 80069e6:	d105      	bne.n	80069f4 <astronode_send_cfg_wr+0x128>
        {
            send_debug_logs("Astronode configuration successfully set.");
 80069e8:	4b0c      	ldr	r3, [pc, #48]	; (8006a1c <astronode_send_cfg_wr+0x150>)
 80069ea:	0018      	movs	r0, r3
 80069ec:	f7fb ffbc 	bl	8002968 <send_debug_logs>
            return true ;
 80069f0:	2301      	movs	r3, #1
 80069f2:	e004      	b.n	80069fe <astronode_send_cfg_wr+0x132>
        }
        else
        {
            send_debug_logs("Failed to set the Astronode configuration.");
 80069f4:	4b0a      	ldr	r3, [pc, #40]	; (8006a20 <astronode_send_cfg_wr+0x154>)
 80069f6:	0018      	movs	r0, r3
 80069f8:	f7fb ffb6 	bl	8002968 <send_debug_logs>
        }
    }
    return false ;
 80069fc:	2300      	movs	r3, #0
}
 80069fe:	0018      	movs	r0, r3
 8006a00:	46bd      	mov	sp, r7
 8006a02:	b067      	add	sp, #412	; 0x19c
 8006a04:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8006a06:	46c0      	nop			; (mov r8, r8)
 8006a08:	fffffe6f 	.word	0xfffffe6f
 8006a0c:	fffffe6e 	.word	0xfffffe6e
 8006a10:	fffffe6d 	.word	0xfffffe6d
 8006a14:	fffffe6c 	.word	0xfffffe6c
 8006a18:	fffffe70 	.word	0xfffffe70
 8006a1c:	0800d62c 	.word	0x0800d62c
 8006a20:	0800d658 	.word	0x0800d658

08006a24 <astronode_send_mgi_rr>:
        send_debug_logs("Failed to save the Astronode context in NVM.");
    }
}

void astronode_send_mgi_rr(void)
{
 8006a24:	b5f0      	push	{r4, r5, r6, r7, lr}
 8006a26:	b0ed      	sub	sp, #436	; 0x1b4
 8006a28:	af00      	add	r7, sp, #0
    astronode_app_msg_t request = {0};
 8006a2a:	21c8      	movs	r1, #200	; 0xc8
 8006a2c:	2318      	movs	r3, #24
 8006a2e:	18cb      	adds	r3, r1, r3
 8006a30:	19db      	adds	r3, r3, r7
 8006a32:	0018      	movs	r0, r3
 8006a34:	23c6      	movs	r3, #198	; 0xc6
 8006a36:	001a      	movs	r2, r3
 8006a38:	2100      	movs	r1, #0
 8006a3a:	f001 fdcf 	bl	80085dc <memset>
    astronode_app_msg_t answer = {0};
 8006a3e:	4b4a      	ldr	r3, [pc, #296]	; (8006b68 <astronode_send_mgi_rr+0x144>)
 8006a40:	26cc      	movs	r6, #204	; 0xcc
 8006a42:	0076      	lsls	r6, r6, #1
 8006a44:	199b      	adds	r3, r3, r6
 8006a46:	2218      	movs	r2, #24
 8006a48:	4694      	mov	ip, r2
 8006a4a:	44bc      	add	ip, r7
 8006a4c:	4463      	add	r3, ip
 8006a4e:	0018      	movs	r0, r3
 8006a50:	23c6      	movs	r3, #198	; 0xc6
 8006a52:	001a      	movs	r2, r3
 8006a54:	2100      	movs	r1, #0
 8006a56:	f001 fdc1 	bl	80085dc <memset>

    request.op_code = ASTRONODE_OP_CODE_MGI_RR;
 8006a5a:	21c8      	movs	r1, #200	; 0xc8
 8006a5c:	2318      	movs	r3, #24
 8006a5e:	18cb      	adds	r3, r1, r3
 8006a60:	19db      	adds	r3, r3, r7
 8006a62:	2219      	movs	r2, #25
 8006a64:	701a      	strb	r2, [r3, #0]

    if (astronode_transport_send_receive(&request, &answer) == RS_SUCCESS)
 8006a66:	2318      	movs	r3, #24
 8006a68:	18fa      	adds	r2, r7, r3
 8006a6a:	2318      	movs	r3, #24
 8006a6c:	18cb      	adds	r3, r1, r3
 8006a6e:	19db      	adds	r3, r3, r7
 8006a70:	0011      	movs	r1, r2
 8006a72:	0018      	movs	r0, r3
 8006a74:	f000 fffa 	bl	8007a6c <astronode_transport_send_receive>
 8006a78:	0003      	movs	r3, r0
 8006a7a:	2b01      	cmp	r3, #1
 8006a7c:	d16f      	bne.n	8006b5e <astronode_send_mgi_rr+0x13a>
    {
        if (answer.op_code == ASTRONODE_OP_CODE_MGI_RA)
 8006a7e:	4b3a      	ldr	r3, [pc, #232]	; (8006b68 <astronode_send_mgi_rr+0x144>)
 8006a80:	0032      	movs	r2, r6
 8006a82:	189b      	adds	r3, r3, r2
 8006a84:	2118      	movs	r1, #24
 8006a86:	468c      	mov	ip, r1
 8006a88:	44bc      	add	ip, r7
 8006a8a:	4463      	add	r3, ip
 8006a8c:	781b      	ldrb	r3, [r3, #0]
 8006a8e:	2b99      	cmp	r3, #153	; 0x99
 8006a90:	d161      	bne.n	8006b56 <astronode_send_mgi_rr+0x132>
        {
 8006a92:	466b      	mov	r3, sp
 8006a94:	001e      	movs	r6, r3
            char guid[answer.payload_len];
 8006a96:	4b34      	ldr	r3, [pc, #208]	; (8006b68 <astronode_send_mgi_rr+0x144>)
 8006a98:	189b      	adds	r3, r3, r2
 8006a9a:	2218      	movs	r2, #24
 8006a9c:	4694      	mov	ip, r2
 8006a9e:	44bc      	add	ip, r7
 8006aa0:	4463      	add	r3, ip
 8006aa2:	22c4      	movs	r2, #196	; 0xc4
 8006aa4:	5a9b      	ldrh	r3, [r3, r2]
 8006aa6:	001a      	movs	r2, r3
 8006aa8:	3a01      	subs	r2, #1
 8006aaa:	21ca      	movs	r1, #202	; 0xca
 8006aac:	0049      	lsls	r1, r1, #1
 8006aae:	2018      	movs	r0, #24
 8006ab0:	1809      	adds	r1, r1, r0
 8006ab2:	19c9      	adds	r1, r1, r7
 8006ab4:	600a      	str	r2, [r1, #0]
 8006ab6:	001c      	movs	r4, r3
 8006ab8:	2200      	movs	r2, #0
 8006aba:	0015      	movs	r5, r2
 8006abc:	0020      	movs	r0, r4
 8006abe:	0029      	movs	r1, r5
 8006ac0:	0004      	movs	r4, r0
 8006ac2:	0f62      	lsrs	r2, r4, #29
 8006ac4:	000c      	movs	r4, r1
 8006ac6:	00e4      	lsls	r4, r4, #3
 8006ac8:	617c      	str	r4, [r7, #20]
 8006aca:	697c      	ldr	r4, [r7, #20]
 8006acc:	4314      	orrs	r4, r2
 8006ace:	617c      	str	r4, [r7, #20]
 8006ad0:	0001      	movs	r1, r0
 8006ad2:	00c9      	lsls	r1, r1, #3
 8006ad4:	6139      	str	r1, [r7, #16]
 8006ad6:	603b      	str	r3, [r7, #0]
 8006ad8:	2200      	movs	r2, #0
 8006ada:	607a      	str	r2, [r7, #4]
 8006adc:	6838      	ldr	r0, [r7, #0]
 8006ade:	6879      	ldr	r1, [r7, #4]
 8006ae0:	0004      	movs	r4, r0
 8006ae2:	0f62      	lsrs	r2, r4, #29
 8006ae4:	000c      	movs	r4, r1
 8006ae6:	00e4      	lsls	r4, r4, #3
 8006ae8:	60fc      	str	r4, [r7, #12]
 8006aea:	68fc      	ldr	r4, [r7, #12]
 8006aec:	4314      	orrs	r4, r2
 8006aee:	60fc      	str	r4, [r7, #12]
 8006af0:	0001      	movs	r1, r0
 8006af2:	00ca      	lsls	r2, r1, #3
 8006af4:	60ba      	str	r2, [r7, #8]
 8006af6:	3307      	adds	r3, #7
 8006af8:	08db      	lsrs	r3, r3, #3
 8006afa:	00db      	lsls	r3, r3, #3
 8006afc:	4669      	mov	r1, sp
 8006afe:	1acb      	subs	r3, r1, r3
 8006b00:	469d      	mov	sp, r3
 8006b02:	466b      	mov	r3, sp
 8006b04:	3300      	adds	r3, #0
 8006b06:	24c8      	movs	r4, #200	; 0xc8
 8006b08:	0064      	lsls	r4, r4, #1
 8006b0a:	2218      	movs	r2, #24
 8006b0c:	18a2      	adds	r2, r4, r2
 8006b0e:	19d1      	adds	r1, r2, r7
 8006b10:	600b      	str	r3, [r1, #0]
            send_debug_logs("Module GUID is:");
 8006b12:	4b16      	ldr	r3, [pc, #88]	; (8006b6c <astronode_send_mgi_rr+0x148>)
 8006b14:	0018      	movs	r0, r3
 8006b16:	f7fb ff27 	bl	8002968 <send_debug_logs>
            snprintf(guid, answer.payload_len, "%s", answer.p_payload);
 8006b1a:	4b13      	ldr	r3, [pc, #76]	; (8006b68 <astronode_send_mgi_rr+0x144>)
 8006b1c:	22cc      	movs	r2, #204	; 0xcc
 8006b1e:	0052      	lsls	r2, r2, #1
 8006b20:	189b      	adds	r3, r3, r2
 8006b22:	2218      	movs	r2, #24
 8006b24:	4694      	mov	ip, r2
 8006b26:	44bc      	add	ip, r7
 8006b28:	4463      	add	r3, ip
 8006b2a:	22c4      	movs	r2, #196	; 0xc4
 8006b2c:	5a9b      	ldrh	r3, [r3, r2]
 8006b2e:	0019      	movs	r1, r3
 8006b30:	2318      	movs	r3, #24
 8006b32:	18fb      	adds	r3, r7, r3
 8006b34:	3301      	adds	r3, #1
 8006b36:	4a0e      	ldr	r2, [pc, #56]	; (8006b70 <astronode_send_mgi_rr+0x14c>)
 8006b38:	2018      	movs	r0, #24
 8006b3a:	1820      	adds	r0, r4, r0
 8006b3c:	19c0      	adds	r0, r0, r7
 8006b3e:	6800      	ldr	r0, [r0, #0]
 8006b40:	f001 fcac 	bl	800849c <snprintf>
            send_debug_logs(guid);
 8006b44:	2318      	movs	r3, #24
 8006b46:	18e3      	adds	r3, r4, r3
 8006b48:	19db      	adds	r3, r3, r7
 8006b4a:	681b      	ldr	r3, [r3, #0]
 8006b4c:	0018      	movs	r0, r3
 8006b4e:	f7fb ff0b 	bl	8002968 <send_debug_logs>
 8006b52:	46b5      	mov	sp, r6
        else
        {
            send_debug_logs("Failed to read module GUID.");
        }
    }
}
 8006b54:	e003      	b.n	8006b5e <astronode_send_mgi_rr+0x13a>
            send_debug_logs("Failed to read module GUID.");
 8006b56:	4b07      	ldr	r3, [pc, #28]	; (8006b74 <astronode_send_mgi_rr+0x150>)
 8006b58:	0018      	movs	r0, r3
 8006b5a:	f7fb ff05 	bl	8002968 <send_debug_logs>
}
 8006b5e:	46c0      	nop			; (mov r8, r8)
 8006b60:	46bd      	mov	sp, r7
 8006b62:	b06d      	add	sp, #436	; 0x1b4
 8006b64:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8006b66:	46c0      	nop			; (mov r8, r8)
 8006b68:	fffffe68 	.word	0xfffffe68
 8006b6c:	0800d6e4 	.word	0x0800d6e4
 8006b70:	0800d6f4 	.word	0x0800d6f4
 8006b74:	0800d6f8 	.word	0x0800d6f8

08006b78 <astronode_send_msn_rr>:

void astronode_send_msn_rr(void)
{
 8006b78:	b5f0      	push	{r4, r5, r6, r7, lr}
 8006b7a:	b0ed      	sub	sp, #436	; 0x1b4
 8006b7c:	af00      	add	r7, sp, #0
    astronode_app_msg_t request = {0};
 8006b7e:	21c8      	movs	r1, #200	; 0xc8
 8006b80:	2318      	movs	r3, #24
 8006b82:	18cb      	adds	r3, r1, r3
 8006b84:	19db      	adds	r3, r3, r7
 8006b86:	0018      	movs	r0, r3
 8006b88:	23c6      	movs	r3, #198	; 0xc6
 8006b8a:	001a      	movs	r2, r3
 8006b8c:	2100      	movs	r1, #0
 8006b8e:	f001 fd25 	bl	80085dc <memset>
    astronode_app_msg_t answer = {0};
 8006b92:	4b4a      	ldr	r3, [pc, #296]	; (8006cbc <astronode_send_msn_rr+0x144>)
 8006b94:	26cc      	movs	r6, #204	; 0xcc
 8006b96:	0076      	lsls	r6, r6, #1
 8006b98:	199b      	adds	r3, r3, r6
 8006b9a:	2218      	movs	r2, #24
 8006b9c:	4694      	mov	ip, r2
 8006b9e:	44bc      	add	ip, r7
 8006ba0:	4463      	add	r3, ip
 8006ba2:	0018      	movs	r0, r3
 8006ba4:	23c6      	movs	r3, #198	; 0xc6
 8006ba6:	001a      	movs	r2, r3
 8006ba8:	2100      	movs	r1, #0
 8006baa:	f001 fd17 	bl	80085dc <memset>

    request.op_code = ASTRONODE_OP_CODE_MSN_RR;
 8006bae:	21c8      	movs	r1, #200	; 0xc8
 8006bb0:	2318      	movs	r3, #24
 8006bb2:	18cb      	adds	r3, r1, r3
 8006bb4:	19db      	adds	r3, r3, r7
 8006bb6:	221a      	movs	r2, #26
 8006bb8:	701a      	strb	r2, [r3, #0]

    if (astronode_transport_send_receive(&request, &answer) == RS_SUCCESS)
 8006bba:	2318      	movs	r3, #24
 8006bbc:	18fa      	adds	r2, r7, r3
 8006bbe:	2318      	movs	r3, #24
 8006bc0:	18cb      	adds	r3, r1, r3
 8006bc2:	19db      	adds	r3, r3, r7
 8006bc4:	0011      	movs	r1, r2
 8006bc6:	0018      	movs	r0, r3
 8006bc8:	f000 ff50 	bl	8007a6c <astronode_transport_send_receive>
 8006bcc:	0003      	movs	r3, r0
 8006bce:	2b01      	cmp	r3, #1
 8006bd0:	d16f      	bne.n	8006cb2 <astronode_send_msn_rr+0x13a>
    {
        if (answer.op_code == ASTRONODE_OP_CODE_MSN_RA)
 8006bd2:	4b3a      	ldr	r3, [pc, #232]	; (8006cbc <astronode_send_msn_rr+0x144>)
 8006bd4:	0032      	movs	r2, r6
 8006bd6:	189b      	adds	r3, r3, r2
 8006bd8:	2118      	movs	r1, #24
 8006bda:	468c      	mov	ip, r1
 8006bdc:	44bc      	add	ip, r7
 8006bde:	4463      	add	r3, ip
 8006be0:	781b      	ldrb	r3, [r3, #0]
 8006be2:	2b9a      	cmp	r3, #154	; 0x9a
 8006be4:	d161      	bne.n	8006caa <astronode_send_msn_rr+0x132>
        {
 8006be6:	466b      	mov	r3, sp
 8006be8:	001e      	movs	r6, r3
            char serial_number[answer.payload_len];
 8006bea:	4b34      	ldr	r3, [pc, #208]	; (8006cbc <astronode_send_msn_rr+0x144>)
 8006bec:	189b      	adds	r3, r3, r2
 8006bee:	2218      	movs	r2, #24
 8006bf0:	4694      	mov	ip, r2
 8006bf2:	44bc      	add	ip, r7
 8006bf4:	4463      	add	r3, ip
 8006bf6:	22c4      	movs	r2, #196	; 0xc4
 8006bf8:	5a9b      	ldrh	r3, [r3, r2]
 8006bfa:	001a      	movs	r2, r3
 8006bfc:	3a01      	subs	r2, #1
 8006bfe:	21ca      	movs	r1, #202	; 0xca
 8006c00:	0049      	lsls	r1, r1, #1
 8006c02:	2018      	movs	r0, #24
 8006c04:	1809      	adds	r1, r1, r0
 8006c06:	19c9      	adds	r1, r1, r7
 8006c08:	600a      	str	r2, [r1, #0]
 8006c0a:	001c      	movs	r4, r3
 8006c0c:	2200      	movs	r2, #0
 8006c0e:	0015      	movs	r5, r2
 8006c10:	0020      	movs	r0, r4
 8006c12:	0029      	movs	r1, r5
 8006c14:	0004      	movs	r4, r0
 8006c16:	0f62      	lsrs	r2, r4, #29
 8006c18:	000c      	movs	r4, r1
 8006c1a:	00e4      	lsls	r4, r4, #3
 8006c1c:	617c      	str	r4, [r7, #20]
 8006c1e:	697c      	ldr	r4, [r7, #20]
 8006c20:	4314      	orrs	r4, r2
 8006c22:	617c      	str	r4, [r7, #20]
 8006c24:	0001      	movs	r1, r0
 8006c26:	00c9      	lsls	r1, r1, #3
 8006c28:	6139      	str	r1, [r7, #16]
 8006c2a:	603b      	str	r3, [r7, #0]
 8006c2c:	2200      	movs	r2, #0
 8006c2e:	607a      	str	r2, [r7, #4]
 8006c30:	6838      	ldr	r0, [r7, #0]
 8006c32:	6879      	ldr	r1, [r7, #4]
 8006c34:	0004      	movs	r4, r0
 8006c36:	0f62      	lsrs	r2, r4, #29
 8006c38:	000c      	movs	r4, r1
 8006c3a:	00e4      	lsls	r4, r4, #3
 8006c3c:	60fc      	str	r4, [r7, #12]
 8006c3e:	68fc      	ldr	r4, [r7, #12]
 8006c40:	4314      	orrs	r4, r2
 8006c42:	60fc      	str	r4, [r7, #12]
 8006c44:	0001      	movs	r1, r0
 8006c46:	00ca      	lsls	r2, r1, #3
 8006c48:	60ba      	str	r2, [r7, #8]
 8006c4a:	3307      	adds	r3, #7
 8006c4c:	08db      	lsrs	r3, r3, #3
 8006c4e:	00db      	lsls	r3, r3, #3
 8006c50:	4669      	mov	r1, sp
 8006c52:	1acb      	subs	r3, r1, r3
 8006c54:	469d      	mov	sp, r3
 8006c56:	466b      	mov	r3, sp
 8006c58:	3300      	adds	r3, #0
 8006c5a:	24c8      	movs	r4, #200	; 0xc8
 8006c5c:	0064      	lsls	r4, r4, #1
 8006c5e:	2218      	movs	r2, #24
 8006c60:	18a2      	adds	r2, r4, r2
 8006c62:	19d1      	adds	r1, r2, r7
 8006c64:	600b      	str	r3, [r1, #0]
            send_debug_logs("Module's Serial Number is:");
 8006c66:	4b16      	ldr	r3, [pc, #88]	; (8006cc0 <astronode_send_msn_rr+0x148>)
 8006c68:	0018      	movs	r0, r3
 8006c6a:	f7fb fe7d 	bl	8002968 <send_debug_logs>
            snprintf(serial_number, answer.payload_len, "%s", answer.p_payload);
 8006c6e:	4b13      	ldr	r3, [pc, #76]	; (8006cbc <astronode_send_msn_rr+0x144>)
 8006c70:	22cc      	movs	r2, #204	; 0xcc
 8006c72:	0052      	lsls	r2, r2, #1
 8006c74:	189b      	adds	r3, r3, r2
 8006c76:	2218      	movs	r2, #24
 8006c78:	4694      	mov	ip, r2
 8006c7a:	44bc      	add	ip, r7
 8006c7c:	4463      	add	r3, ip
 8006c7e:	22c4      	movs	r2, #196	; 0xc4
 8006c80:	5a9b      	ldrh	r3, [r3, r2]
 8006c82:	0019      	movs	r1, r3
 8006c84:	2318      	movs	r3, #24
 8006c86:	18fb      	adds	r3, r7, r3
 8006c88:	3301      	adds	r3, #1
 8006c8a:	4a0e      	ldr	r2, [pc, #56]	; (8006cc4 <astronode_send_msn_rr+0x14c>)
 8006c8c:	2018      	movs	r0, #24
 8006c8e:	1820      	adds	r0, r4, r0
 8006c90:	19c0      	adds	r0, r0, r7
 8006c92:	6800      	ldr	r0, [r0, #0]
 8006c94:	f001 fc02 	bl	800849c <snprintf>
            send_debug_logs(serial_number);
 8006c98:	2318      	movs	r3, #24
 8006c9a:	18e3      	adds	r3, r4, r3
 8006c9c:	19db      	adds	r3, r3, r7
 8006c9e:	681b      	ldr	r3, [r3, #0]
 8006ca0:	0018      	movs	r0, r3
 8006ca2:	f7fb fe61 	bl	8002968 <send_debug_logs>
 8006ca6:	46b5      	mov	sp, r6
        else
        {
            send_debug_logs("Failed to read module Serial Number.");
        }
    }
}
 8006ca8:	e003      	b.n	8006cb2 <astronode_send_msn_rr+0x13a>
            send_debug_logs("Failed to read module Serial Number.");
 8006caa:	4b07      	ldr	r3, [pc, #28]	; (8006cc8 <astronode_send_msn_rr+0x150>)
 8006cac:	0018      	movs	r0, r3
 8006cae:	f7fb fe5b 	bl	8002968 <send_debug_logs>
}
 8006cb2:	46c0      	nop			; (mov r8, r8)
 8006cb4:	46bd      	mov	sp, r7
 8006cb6:	b06d      	add	sp, #436	; 0x1b4
 8006cb8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8006cba:	46c0      	nop			; (mov r8, r8)
 8006cbc:	fffffe68 	.word	0xfffffe68
 8006cc0:	0800d714 	.word	0x0800d714
 8006cc4:	0800d6f4 	.word	0x0800d6f4
 8006cc8:	0800d730 	.word	0x0800d730

08006ccc <astronode_send_evt_rr>:
    }
    return 0xFFFFFFFF ; // Longest possible time
}

void astronode_send_evt_rr(void)
{
 8006ccc:	b5b0      	push	{r4, r5, r7, lr}
 8006cce:	b0e4      	sub	sp, #400	; 0x190
 8006cd0:	af00      	add	r7, sp, #0
    astronode_app_msg_t request = {0};
 8006cd2:	24c8      	movs	r4, #200	; 0xc8
 8006cd4:	193b      	adds	r3, r7, r4
 8006cd6:	0018      	movs	r0, r3
 8006cd8:	23c6      	movs	r3, #198	; 0xc6
 8006cda:	001a      	movs	r2, r3
 8006cdc:	2100      	movs	r1, #0
 8006cde:	f001 fc7d 	bl	80085dc <memset>
    astronode_app_msg_t answer = {0};
 8006ce2:	4b31      	ldr	r3, [pc, #196]	; (8006da8 <astronode_send_evt_rr+0xdc>)
 8006ce4:	25c8      	movs	r5, #200	; 0xc8
 8006ce6:	006d      	lsls	r5, r5, #1
 8006ce8:	195b      	adds	r3, r3, r5
 8006cea:	19db      	adds	r3, r3, r7
 8006cec:	0018      	movs	r0, r3
 8006cee:	23c6      	movs	r3, #198	; 0xc6
 8006cf0:	001a      	movs	r2, r3
 8006cf2:	2100      	movs	r1, #0
 8006cf4:	f001 fc72 	bl	80085dc <memset>

    request.op_code = ASTRONODE_OP_CODE_EVT_RR;
 8006cf8:	193b      	adds	r3, r7, r4
 8006cfa:	2265      	movs	r2, #101	; 0x65
 8006cfc:	701a      	strb	r2, [r3, #0]

    if (astronode_transport_send_receive(&request, &answer) == RS_SUCCESS)
 8006cfe:	003a      	movs	r2, r7
 8006d00:	193b      	adds	r3, r7, r4
 8006d02:	0011      	movs	r1, r2
 8006d04:	0018      	movs	r0, r3
 8006d06:	f000 feb1 	bl	8007a6c <astronode_transport_send_receive>
 8006d0a:	0003      	movs	r3, r0
 8006d0c:	2b01      	cmp	r3, #1
 8006d0e:	d147      	bne.n	8006da0 <astronode_send_evt_rr+0xd4>
    {
        if (answer.op_code == ASTRONODE_OP_CODE_EVT_RA)
 8006d10:	4b25      	ldr	r3, [pc, #148]	; (8006da8 <astronode_send_evt_rr+0xdc>)
 8006d12:	195b      	adds	r3, r3, r5
 8006d14:	19db      	adds	r3, r3, r7
 8006d16:	781b      	ldrb	r3, [r3, #0]
 8006d18:	2be5      	cmp	r3, #229	; 0xe5
 8006d1a:	d141      	bne.n	8006da0 <astronode_send_evt_rr+0xd4>
        {
            if ((answer.p_payload[ASTRONODE_BYTE_OFFSET_EVT_RR_EVENT]) & (1 << ASTRONODE_BIT_OFFSET_ACK))
 8006d1c:	4b22      	ldr	r3, [pc, #136]	; (8006da8 <astronode_send_evt_rr+0xdc>)
 8006d1e:	195b      	adds	r3, r3, r5
 8006d20:	19db      	adds	r3, r3, r7
 8006d22:	785b      	ldrb	r3, [r3, #1]
 8006d24:	001a      	movs	r2, r3
 8006d26:	2301      	movs	r3, #1
 8006d28:	4013      	ands	r3, r2
 8006d2a:	d006      	beq.n	8006d3a <astronode_send_evt_rr+0x6e>
            {
                g_is_sak_available = true;
 8006d2c:	4b1f      	ldr	r3, [pc, #124]	; (8006dac <astronode_send_evt_rr+0xe0>)
 8006d2e:	2201      	movs	r2, #1
 8006d30:	701a      	strb	r2, [r3, #0]
                send_debug_logs("Message acknowledgment available.");
 8006d32:	4b1f      	ldr	r3, [pc, #124]	; (8006db0 <astronode_send_evt_rr+0xe4>)
 8006d34:	0018      	movs	r0, r3
 8006d36:	f7fb fe17 	bl	8002968 <send_debug_logs>
            }
            if ((answer.p_payload[ASTRONODE_BYTE_OFFSET_EVT_RR_EVENT]) & (1 << ASTRONODE_BIT_OFFSET_RST))
 8006d3a:	4b1b      	ldr	r3, [pc, #108]	; (8006da8 <astronode_send_evt_rr+0xdc>)
 8006d3c:	22c8      	movs	r2, #200	; 0xc8
 8006d3e:	0052      	lsls	r2, r2, #1
 8006d40:	189b      	adds	r3, r3, r2
 8006d42:	19db      	adds	r3, r3, r7
 8006d44:	785b      	ldrb	r3, [r3, #1]
 8006d46:	001a      	movs	r2, r3
 8006d48:	2302      	movs	r3, #2
 8006d4a:	4013      	ands	r3, r2
 8006d4c:	d006      	beq.n	8006d5c <astronode_send_evt_rr+0x90>
            {
                g_is_astronode_reset = true;
 8006d4e:	4b19      	ldr	r3, [pc, #100]	; (8006db4 <astronode_send_evt_rr+0xe8>)
 8006d50:	2201      	movs	r2, #1
 8006d52:	701a      	strb	r2, [r3, #0]
                send_debug_logs("Astronode has reset.");
 8006d54:	4b18      	ldr	r3, [pc, #96]	; (8006db8 <astronode_send_evt_rr+0xec>)
 8006d56:	0018      	movs	r0, r3
 8006d58:	f7fb fe06 	bl	8002968 <send_debug_logs>
            }
            if ((answer.p_payload[ASTRONODE_BYTE_OFFSET_EVT_RR_EVENT]) & (1 << ASTRONODE_BIT_OFFSET_CMD))
 8006d5c:	4b12      	ldr	r3, [pc, #72]	; (8006da8 <astronode_send_evt_rr+0xdc>)
 8006d5e:	22c8      	movs	r2, #200	; 0xc8
 8006d60:	0052      	lsls	r2, r2, #1
 8006d62:	189b      	adds	r3, r3, r2
 8006d64:	19db      	adds	r3, r3, r7
 8006d66:	785b      	ldrb	r3, [r3, #1]
 8006d68:	001a      	movs	r2, r3
 8006d6a:	2304      	movs	r3, #4
 8006d6c:	4013      	ands	r3, r2
 8006d6e:	d006      	beq.n	8006d7e <astronode_send_evt_rr+0xb2>
            {
                g_is_command_available = true;
 8006d70:	4b12      	ldr	r3, [pc, #72]	; (8006dbc <astronode_send_evt_rr+0xf0>)
 8006d72:	2201      	movs	r2, #1
 8006d74:	701a      	strb	r2, [r3, #0]
                send_debug_logs("Command available.");
 8006d76:	4b12      	ldr	r3, [pc, #72]	; (8006dc0 <astronode_send_evt_rr+0xf4>)
 8006d78:	0018      	movs	r0, r3
 8006d7a:	f7fb fdf5 	bl	8002968 <send_debug_logs>
            }
            if ((answer.p_payload[ASTRONODE_BYTE_OFFSET_EVT_RR_EVENT]) & (1 << ASTRONODE_BIT_OFFEST_MSG_TX))
 8006d7e:	4b0a      	ldr	r3, [pc, #40]	; (8006da8 <astronode_send_evt_rr+0xdc>)
 8006d80:	22c8      	movs	r2, #200	; 0xc8
 8006d82:	0052      	lsls	r2, r2, #1
 8006d84:	189b      	adds	r3, r3, r2
 8006d86:	19db      	adds	r3, r3, r7
 8006d88:	785b      	ldrb	r3, [r3, #1]
 8006d8a:	001a      	movs	r2, r3
 8006d8c:	2308      	movs	r3, #8
 8006d8e:	4013      	ands	r3, r2
 8006d90:	d006      	beq.n	8006da0 <astronode_send_evt_rr+0xd4>
            {
                g_is_tx_msg_pending = true;
 8006d92:	4b0c      	ldr	r3, [pc, #48]	; (8006dc4 <astronode_send_evt_rr+0xf8>)
 8006d94:	2201      	movs	r2, #1
 8006d96:	701a      	strb	r2, [r3, #0]
                send_debug_logs("TX message pending.");
 8006d98:	4b0b      	ldr	r3, [pc, #44]	; (8006dc8 <astronode_send_evt_rr+0xfc>)
 8006d9a:	0018      	movs	r0, r3
 8006d9c:	f7fb fde4 	bl	8002968 <send_debug_logs>
            }

        }
    }
}
 8006da0:	46c0      	nop			; (mov r8, r8)
 8006da2:	46bd      	mov	sp, r7
 8006da4:	b064      	add	sp, #400	; 0x190
 8006da6:	bdb0      	pop	{r4, r5, r7, pc}
 8006da8:	fffffe70 	.word	0xfffffe70
 8006dac:	2000089c 	.word	0x2000089c
 8006db0:	0800d7d8 	.word	0x0800d7d8
 8006db4:	2000089d 	.word	0x2000089d
 8006db8:	0800d7fc 	.word	0x0800d7fc
 8006dbc:	2000089e 	.word	0x2000089e
 8006dc0:	0800d814 	.word	0x0800d814
 8006dc4:	2000089f 	.word	0x2000089f
 8006dc8:	0800d828 	.word	0x0800d828

08006dcc <astronode_send_pld_fr>:
    }
    return false ;
}

void astronode_send_pld_fr(void)
{
 8006dcc:	b5b0      	push	{r4, r5, r7, lr}
 8006dce:	b0e4      	sub	sp, #400	; 0x190
 8006dd0:	af00      	add	r7, sp, #0
    astronode_app_msg_t request = {0};
 8006dd2:	24c8      	movs	r4, #200	; 0xc8
 8006dd4:	193b      	adds	r3, r7, r4
 8006dd6:	0018      	movs	r0, r3
 8006dd8:	23c6      	movs	r3, #198	; 0xc6
 8006dda:	001a      	movs	r2, r3
 8006ddc:	2100      	movs	r1, #0
 8006dde:	f001 fbfd 	bl	80085dc <memset>
    astronode_app_msg_t answer = {0};
 8006de2:	4b15      	ldr	r3, [pc, #84]	; (8006e38 <astronode_send_pld_fr+0x6c>)
 8006de4:	25c8      	movs	r5, #200	; 0xc8
 8006de6:	006d      	lsls	r5, r5, #1
 8006de8:	195b      	adds	r3, r3, r5
 8006dea:	19db      	adds	r3, r3, r7
 8006dec:	0018      	movs	r0, r3
 8006dee:	23c6      	movs	r3, #198	; 0xc6
 8006df0:	001a      	movs	r2, r3
 8006df2:	2100      	movs	r1, #0
 8006df4:	f001 fbf2 	bl	80085dc <memset>

    request.op_code = ASTRONODE_OP_CODE_PLD_FR;
 8006df8:	193b      	adds	r3, r7, r4
 8006dfa:	2227      	movs	r2, #39	; 0x27
 8006dfc:	701a      	strb	r2, [r3, #0]

    if (astronode_transport_send_receive(&request, &answer) == RS_SUCCESS)
 8006dfe:	003a      	movs	r2, r7
 8006e00:	193b      	adds	r3, r7, r4
 8006e02:	0011      	movs	r1, r2
 8006e04:	0018      	movs	r0, r3
 8006e06:	f000 fe31 	bl	8007a6c <astronode_transport_send_receive>
 8006e0a:	0003      	movs	r3, r0
 8006e0c:	2b01      	cmp	r3, #1
 8006e0e:	d10e      	bne.n	8006e2e <astronode_send_pld_fr+0x62>
    {
        if (answer.op_code == ASTRONODE_OP_CODE_PLD_FA)
 8006e10:	4b09      	ldr	r3, [pc, #36]	; (8006e38 <astronode_send_pld_fr+0x6c>)
 8006e12:	195b      	adds	r3, r3, r5
 8006e14:	19db      	adds	r3, r3, r7
 8006e16:	781b      	ldrb	r3, [r3, #0]
 8006e18:	2ba7      	cmp	r3, #167	; 0xa7
 8006e1a:	d104      	bne.n	8006e26 <astronode_send_pld_fr+0x5a>
        {
            send_debug_logs("astronode_application: payload queue has been cleared.");
 8006e1c:	4b07      	ldr	r3, [pc, #28]	; (8006e3c <astronode_send_pld_fr+0x70>)
 8006e1e:	0018      	movs	r0, r3
 8006e20:	f7fb fda2 	bl	8002968 <send_debug_logs>
        else
        {
            send_debug_logs("astronode_application: Failed to clear the payload queue.");
        }
    }
}
 8006e24:	e003      	b.n	8006e2e <astronode_send_pld_fr+0x62>
            send_debug_logs("astronode_application: Failed to clear the payload queue.");
 8006e26:	4b06      	ldr	r3, [pc, #24]	; (8006e40 <astronode_send_pld_fr+0x74>)
 8006e28:	0018      	movs	r0, r3
 8006e2a:	f7fb fd9d 	bl	8002968 <send_debug_logs>
}
 8006e2e:	46c0      	nop			; (mov r8, r8)
 8006e30:	46bd      	mov	sp, r7
 8006e32:	b064      	add	sp, #400	; 0x190
 8006e34:	bdb0      	pop	{r4, r5, r7, pc}
 8006e36:	46c0      	nop			; (mov r8, r8)
 8006e38:	fffffe70 	.word	0xfffffe70
 8006e3c:	0800d93c 	.word	0x0800d93c
 8006e40:	0800d974 	.word	0x0800d974

08006e44 <astronode_send_res_cr>:

void astronode_send_res_cr(void)
{
 8006e44:	b5b0      	push	{r4, r5, r7, lr}
 8006e46:	b0e4      	sub	sp, #400	; 0x190
 8006e48:	af00      	add	r7, sp, #0
    astronode_app_msg_t request = {0};
 8006e4a:	24c8      	movs	r4, #200	; 0xc8
 8006e4c:	193b      	adds	r3, r7, r4
 8006e4e:	0018      	movs	r0, r3
 8006e50:	23c6      	movs	r3, #198	; 0xc6
 8006e52:	001a      	movs	r2, r3
 8006e54:	2100      	movs	r1, #0
 8006e56:	f001 fbc1 	bl	80085dc <memset>
    astronode_app_msg_t answer = {0};
 8006e5a:	4b16      	ldr	r3, [pc, #88]	; (8006eb4 <astronode_send_res_cr+0x70>)
 8006e5c:	25c8      	movs	r5, #200	; 0xc8
 8006e5e:	006d      	lsls	r5, r5, #1
 8006e60:	195b      	adds	r3, r3, r5
 8006e62:	19db      	adds	r3, r3, r7
 8006e64:	0018      	movs	r0, r3
 8006e66:	23c6      	movs	r3, #198	; 0xc6
 8006e68:	001a      	movs	r2, r3
 8006e6a:	2100      	movs	r1, #0
 8006e6c:	f001 fbb6 	bl	80085dc <memset>

    request.op_code = ASTRONODE_OP_CODE_RES_CR;
 8006e70:	193b      	adds	r3, r7, r4
 8006e72:	2255      	movs	r2, #85	; 0x55
 8006e74:	701a      	strb	r2, [r3, #0]

    if (astronode_transport_send_receive(&request, &answer) == RS_SUCCESS)
 8006e76:	003a      	movs	r2, r7
 8006e78:	193b      	adds	r3, r7, r4
 8006e7a:	0011      	movs	r1, r2
 8006e7c:	0018      	movs	r0, r3
 8006e7e:	f000 fdf5 	bl	8007a6c <astronode_transport_send_receive>
 8006e82:	0003      	movs	r3, r0
 8006e84:	2b01      	cmp	r3, #1
 8006e86:	d111      	bne.n	8006eac <astronode_send_res_cr+0x68>
    {
        if (answer.op_code == ASTRONODE_OP_CODE_RES_CA)
 8006e88:	4b0a      	ldr	r3, [pc, #40]	; (8006eb4 <astronode_send_res_cr+0x70>)
 8006e8a:	195b      	adds	r3, r3, r5
 8006e8c:	19db      	adds	r3, r3, r7
 8006e8e:	781b      	ldrb	r3, [r3, #0]
 8006e90:	2bd5      	cmp	r3, #213	; 0xd5
 8006e92:	d107      	bne.n	8006ea4 <astronode_send_res_cr+0x60>
        {
            g_is_astronode_reset = false;
 8006e94:	4b08      	ldr	r3, [pc, #32]	; (8006eb8 <astronode_send_res_cr+0x74>)
 8006e96:	2200      	movs	r2, #0
 8006e98:	701a      	strb	r2, [r3, #0]
            send_debug_logs("astronode_application: The reset has been cleared.");
 8006e9a:	4b08      	ldr	r3, [pc, #32]	; (8006ebc <astronode_send_res_cr+0x78>)
 8006e9c:	0018      	movs	r0, r3
 8006e9e:	f7fb fd63 	bl	8002968 <send_debug_logs>
        else
        {
            send_debug_logs("astronode_application: No reset to clear.");
        }
    }
}
 8006ea2:	e003      	b.n	8006eac <astronode_send_res_cr+0x68>
            send_debug_logs("astronode_application: No reset to clear.");
 8006ea4:	4b06      	ldr	r3, [pc, #24]	; (8006ec0 <astronode_send_res_cr+0x7c>)
 8006ea6:	0018      	movs	r0, r3
 8006ea8:	f7fb fd5e 	bl	8002968 <send_debug_logs>
}
 8006eac:	46c0      	nop			; (mov r8, r8)
 8006eae:	46bd      	mov	sp, r7
 8006eb0:	b064      	add	sp, #400	; 0x190
 8006eb2:	bdb0      	pop	{r4, r5, r7, pc}
 8006eb4:	fffffe70 	.word	0xfffffe70
 8006eb8:	2000089d 	.word	0x2000089d
 8006ebc:	0800d9b0 	.word	0x0800d9b0
 8006ec0:	0800d9e4 	.word	0x0800d9e4

08006ec4 <astronode_send_rtc_rr>:

uint32_t astronode_send_rtc_rr ( void )
{
 8006ec4:	b5b0      	push	{r4, r5, r7, lr}
 8006ec6:	b0fa      	sub	sp, #488	; 0x1e8
 8006ec8:	af00      	add	r7, sp, #0
    astronode_app_msg_t request = {0} ;
 8006eca:	258e      	movs	r5, #142	; 0x8e
 8006ecc:	006d      	lsls	r5, r5, #1
 8006ece:	197b      	adds	r3, r7, r5
 8006ed0:	0018      	movs	r0, r3
 8006ed2:	23c6      	movs	r3, #198	; 0xc6
 8006ed4:	001a      	movs	r2, r3
 8006ed6:	2100      	movs	r1, #0
 8006ed8:	f001 fb80 	bl	80085dc <memset>
    astronode_app_msg_t answer = {0} ;
 8006edc:	4b28      	ldr	r3, [pc, #160]	; (8006f80 <astronode_send_rtc_rr+0xbc>)
 8006ede:	24f4      	movs	r4, #244	; 0xf4
 8006ee0:	0064      	lsls	r4, r4, #1
 8006ee2:	191b      	adds	r3, r3, r4
 8006ee4:	19db      	adds	r3, r3, r7
 8006ee6:	0018      	movs	r0, r3
 8006ee8:	23c6      	movs	r3, #198	; 0xc6
 8006eea:	001a      	movs	r2, r3
 8006eec:	2100      	movs	r1, #0
 8006eee:	f001 fb75 	bl	80085dc <memset>

    request.op_code = ASTRONODE_OP_CODE_RTC_RR ;
 8006ef2:	197b      	adds	r3, r7, r5
 8006ef4:	2217      	movs	r2, #23
 8006ef6:	701a      	strb	r2, [r3, #0]

    if ( astronode_transport_send_receive ( &request , &answer ) == RS_SUCCESS )
 8006ef8:	2354      	movs	r3, #84	; 0x54
 8006efa:	18fa      	adds	r2, r7, r3
 8006efc:	197b      	adds	r3, r7, r5
 8006efe:	0011      	movs	r1, r2
 8006f00:	0018      	movs	r0, r3
 8006f02:	f000 fdb3 	bl	8007a6c <astronode_transport_send_receive>
 8006f06:	0003      	movs	r3, r0
 8006f08:	2b01      	cmp	r3, #1
 8006f0a:	d133      	bne.n	8006f74 <astronode_send_rtc_rr+0xb0>
    {
        if ( answer.op_code == ASTRONODE_OP_CODE_RTC_RA )
 8006f0c:	4b1c      	ldr	r3, [pc, #112]	; (8006f80 <astronode_send_rtc_rr+0xbc>)
 8006f0e:	0021      	movs	r1, r4
 8006f10:	185b      	adds	r3, r3, r1
 8006f12:	19db      	adds	r3, r3, r7
 8006f14:	781b      	ldrb	r3, [r3, #0]
 8006f16:	2b97      	cmp	r3, #151	; 0x97
 8006f18:	d128      	bne.n	8006f6c <astronode_send_rtc_rr+0xa8>
        {
            uint32_t rtc_time = answer.p_payload[0]
 8006f1a:	4b19      	ldr	r3, [pc, #100]	; (8006f80 <astronode_send_rtc_rr+0xbc>)
 8006f1c:	185b      	adds	r3, r3, r1
 8006f1e:	19db      	adds	r3, r3, r7
 8006f20:	785b      	ldrb	r3, [r3, #1]
 8006f22:	001a      	movs	r2, r3
                                        + ( answer.p_payload[1] << 8 )
 8006f24:	4b16      	ldr	r3, [pc, #88]	; (8006f80 <astronode_send_rtc_rr+0xbc>)
 8006f26:	185b      	adds	r3, r3, r1
 8006f28:	19db      	adds	r3, r3, r7
 8006f2a:	789b      	ldrb	r3, [r3, #2]
 8006f2c:	021b      	lsls	r3, r3, #8
 8006f2e:	18d2      	adds	r2, r2, r3
                                        + ( answer.p_payload[2] << 16 )
 8006f30:	4b13      	ldr	r3, [pc, #76]	; (8006f80 <astronode_send_rtc_rr+0xbc>)
 8006f32:	185b      	adds	r3, r3, r1
 8006f34:	19db      	adds	r3, r3, r7
 8006f36:	78db      	ldrb	r3, [r3, #3]
 8006f38:	041b      	lsls	r3, r3, #16
 8006f3a:	18d2      	adds	r2, r2, r3
                                        + ( answer.p_payload[3] << 24 ) ;
 8006f3c:	4b10      	ldr	r3, [pc, #64]	; (8006f80 <astronode_send_rtc_rr+0xbc>)
 8006f3e:	185b      	adds	r3, r3, r1
 8006f40:	19db      	adds	r3, r3, r7
 8006f42:	791b      	ldrb	r3, [r3, #4]
 8006f44:	061b      	lsls	r3, r3, #24
 8006f46:	18d3      	adds	r3, r2, r3
            uint32_t rtc_time = answer.p_payload[0]
 8006f48:	24f2      	movs	r4, #242	; 0xf2
 8006f4a:	0064      	lsls	r4, r4, #1
 8006f4c:	193a      	adds	r2, r7, r4
 8006f4e:	6013      	str	r3, [r2, #0]
            char str[ASTRONODE_UART_DEBUG_BUFFER_LENGTH] ;
            sprintf ( str , "RTC time since Astrocast Epoch (2018-01-01 00:00:00 UTC): %lds." , rtc_time ) ;
 8006f50:	193b      	adds	r3, r7, r4
 8006f52:	681a      	ldr	r2, [r3, #0]
 8006f54:	490b      	ldr	r1, [pc, #44]	; (8006f84 <astronode_send_rtc_rr+0xc0>)
 8006f56:	1d3b      	adds	r3, r7, #4
 8006f58:	0018      	movs	r0, r3
 8006f5a:	f001 fad3 	bl	8008504 <sprintf>
            send_debug_logs ( str ) ;
 8006f5e:	1d3b      	adds	r3, r7, #4
 8006f60:	0018      	movs	r0, r3
 8006f62:	f7fb fd01 	bl	8002968 <send_debug_logs>
            return rtc_time ;
 8006f66:	193b      	adds	r3, r7, r4
 8006f68:	681b      	ldr	r3, [r3, #0]
 8006f6a:	e004      	b.n	8006f76 <astronode_send_rtc_rr+0xb2>
        }
        else
        {
            send_debug_logs ( "Failed to read rtc time." ) ;
 8006f6c:	4b06      	ldr	r3, [pc, #24]	; (8006f88 <astronode_send_rtc_rr+0xc4>)
 8006f6e:	0018      	movs	r0, r3
 8006f70:	f7fb fcfa 	bl	8002968 <send_debug_logs>
        }
    }
    return 0 ;
 8006f74:	2300      	movs	r3, #0
}
 8006f76:	0018      	movs	r0, r3
 8006f78:	46bd      	mov	sp, r7
 8006f7a:	b07a      	add	sp, #488	; 0x1e8
 8006f7c:	bdb0      	pop	{r4, r5, r7, pc}
 8006f7e:	46c0      	nop			; (mov r8, r8)
 8006f80:	fffffe6c 	.word	0xfffffe6c
 8006f84:	0800da10 	.word	0x0800da10
 8006f88:	0800da50 	.word	0x0800da50

08006f8c <astronode_send_sak_rr>:

void astronode_send_sak_rr(void)
{
 8006f8c:	b5b0      	push	{r4, r5, r7, lr}
 8006f8e:	b0f8      	sub	sp, #480	; 0x1e0
 8006f90:	af00      	add	r7, sp, #0
    astronode_app_msg_t request = {0};
 8006f92:	258c      	movs	r5, #140	; 0x8c
 8006f94:	006d      	lsls	r5, r5, #1
 8006f96:	197b      	adds	r3, r7, r5
 8006f98:	0018      	movs	r0, r3
 8006f9a:	23c6      	movs	r3, #198	; 0xc6
 8006f9c:	001a      	movs	r2, r3
 8006f9e:	2100      	movs	r1, #0
 8006fa0:	f001 fb1c 	bl	80085dc <memset>
    astronode_app_msg_t answer = {0};
 8006fa4:	4b21      	ldr	r3, [pc, #132]	; (800702c <astronode_send_sak_rr+0xa0>)
 8006fa6:	24f0      	movs	r4, #240	; 0xf0
 8006fa8:	0064      	lsls	r4, r4, #1
 8006faa:	191b      	adds	r3, r3, r4
 8006fac:	19db      	adds	r3, r3, r7
 8006fae:	0018      	movs	r0, r3
 8006fb0:	23c6      	movs	r3, #198	; 0xc6
 8006fb2:	001a      	movs	r2, r3
 8006fb4:	2100      	movs	r1, #0
 8006fb6:	f001 fb11 	bl	80085dc <memset>

    request.op_code = ASTRONODE_OP_CODE_SAK_RR;
 8006fba:	197b      	adds	r3, r7, r5
 8006fbc:	2245      	movs	r2, #69	; 0x45
 8006fbe:	701a      	strb	r2, [r3, #0]

    if (astronode_transport_send_receive(&request, &answer) == RS_SUCCESS)
 8006fc0:	2350      	movs	r3, #80	; 0x50
 8006fc2:	18fa      	adds	r2, r7, r3
 8006fc4:	197b      	adds	r3, r7, r5
 8006fc6:	0011      	movs	r1, r2
 8006fc8:	0018      	movs	r0, r3
 8006fca:	f000 fd4f 	bl	8007a6c <astronode_transport_send_receive>
 8006fce:	0003      	movs	r3, r0
 8006fd0:	2b01      	cmp	r3, #1
 8006fd2:	d126      	bne.n	8007022 <astronode_send_sak_rr+0x96>
    {
        if (answer.op_code == ASTRONODE_OP_CODE_SAK_RA)
 8006fd4:	4b15      	ldr	r3, [pc, #84]	; (800702c <astronode_send_sak_rr+0xa0>)
 8006fd6:	191b      	adds	r3, r3, r4
 8006fd8:	19db      	adds	r3, r3, r7
 8006fda:	781b      	ldrb	r3, [r3, #0]
 8006fdc:	2bc5      	cmp	r3, #197	; 0xc5
 8006fde:	d11c      	bne.n	800701a <astronode_send_sak_rr+0x8e>
        {
            uint16_t payload_id = answer.p_payload[0] + (answer.p_payload[1] << 8);
 8006fe0:	4b12      	ldr	r3, [pc, #72]	; (800702c <astronode_send_sak_rr+0xa0>)
 8006fe2:	191b      	adds	r3, r3, r4
 8006fe4:	19db      	adds	r3, r3, r7
 8006fe6:	785b      	ldrb	r3, [r3, #1]
 8006fe8:	b299      	uxth	r1, r3
 8006fea:	4b10      	ldr	r3, [pc, #64]	; (800702c <astronode_send_sak_rr+0xa0>)
 8006fec:	191b      	adds	r3, r3, r4
 8006fee:	19db      	adds	r3, r3, r7
 8006ff0:	789b      	ldrb	r3, [r3, #2]
 8006ff2:	b29b      	uxth	r3, r3
 8006ff4:	021b      	lsls	r3, r3, #8
 8006ff6:	b29a      	uxth	r2, r3
 8006ff8:	20ef      	movs	r0, #239	; 0xef
 8006ffa:	0040      	lsls	r0, r0, #1
 8006ffc:	183b      	adds	r3, r7, r0
 8006ffe:	188a      	adds	r2, r1, r2
 8007000:	801a      	strh	r2, [r3, #0]
            char str[ASTRONODE_UART_DEBUG_BUFFER_LENGTH];
            sprintf(str, "Acknowledgment for payload %d is available.", payload_id);
 8007002:	183b      	adds	r3, r7, r0
 8007004:	881a      	ldrh	r2, [r3, #0]
 8007006:	490a      	ldr	r1, [pc, #40]	; (8007030 <astronode_send_sak_rr+0xa4>)
 8007008:	003b      	movs	r3, r7
 800700a:	0018      	movs	r0, r3
 800700c:	f001 fa7a 	bl	8008504 <sprintf>
            send_debug_logs(str);
 8007010:	003b      	movs	r3, r7
 8007012:	0018      	movs	r0, r3
 8007014:	f7fb fca8 	bl	8002968 <send_debug_logs>
        else
        {
            send_debug_logs("astronode_application: No acknowledgment available.");
        }
    }
}
 8007018:	e003      	b.n	8007022 <astronode_send_sak_rr+0x96>
            send_debug_logs("astronode_application: No acknowledgment available.");
 800701a:	4b06      	ldr	r3, [pc, #24]	; (8007034 <astronode_send_sak_rr+0xa8>)
 800701c:	0018      	movs	r0, r3
 800701e:	f7fb fca3 	bl	8002968 <send_debug_logs>
}
 8007022:	46c0      	nop			; (mov r8, r8)
 8007024:	46bd      	mov	sp, r7
 8007026:	b078      	add	sp, #480	; 0x1e0
 8007028:	bdb0      	pop	{r4, r5, r7, pc}
 800702a:	46c0      	nop			; (mov r8, r8)
 800702c:	fffffe70 	.word	0xfffffe70
 8007030:	0800da6c 	.word	0x0800da6c
 8007034:	0800da98 	.word	0x0800da98

08007038 <astronode_send_sak_cr>:

void astronode_send_sak_cr(void)
{
 8007038:	b5b0      	push	{r4, r5, r7, lr}
 800703a:	b0e4      	sub	sp, #400	; 0x190
 800703c:	af00      	add	r7, sp, #0
    astronode_app_msg_t request = {0};
 800703e:	24c8      	movs	r4, #200	; 0xc8
 8007040:	193b      	adds	r3, r7, r4
 8007042:	0018      	movs	r0, r3
 8007044:	23c6      	movs	r3, #198	; 0xc6
 8007046:	001a      	movs	r2, r3
 8007048:	2100      	movs	r1, #0
 800704a:	f001 fac7 	bl	80085dc <memset>
    astronode_app_msg_t answer = {0};
 800704e:	4b16      	ldr	r3, [pc, #88]	; (80070a8 <astronode_send_sak_cr+0x70>)
 8007050:	25c8      	movs	r5, #200	; 0xc8
 8007052:	006d      	lsls	r5, r5, #1
 8007054:	195b      	adds	r3, r3, r5
 8007056:	19db      	adds	r3, r3, r7
 8007058:	0018      	movs	r0, r3
 800705a:	23c6      	movs	r3, #198	; 0xc6
 800705c:	001a      	movs	r2, r3
 800705e:	2100      	movs	r1, #0
 8007060:	f001 fabc 	bl	80085dc <memset>

    request.op_code = ASTRONODE_OP_CODE_SAK_CR;
 8007064:	193b      	adds	r3, r7, r4
 8007066:	2246      	movs	r2, #70	; 0x46
 8007068:	701a      	strb	r2, [r3, #0]

    if (astronode_transport_send_receive(&request, &answer) == RS_SUCCESS)
 800706a:	003a      	movs	r2, r7
 800706c:	193b      	adds	r3, r7, r4
 800706e:	0011      	movs	r1, r2
 8007070:	0018      	movs	r0, r3
 8007072:	f000 fcfb 	bl	8007a6c <astronode_transport_send_receive>
 8007076:	0003      	movs	r3, r0
 8007078:	2b01      	cmp	r3, #1
 800707a:	d111      	bne.n	80070a0 <astronode_send_sak_cr+0x68>
    {
        if (answer.op_code == ASTRONODE_OP_CODE_SAK_CA)
 800707c:	4b0a      	ldr	r3, [pc, #40]	; (80070a8 <astronode_send_sak_cr+0x70>)
 800707e:	195b      	adds	r3, r3, r5
 8007080:	19db      	adds	r3, r3, r7
 8007082:	781b      	ldrb	r3, [r3, #0]
 8007084:	2bc6      	cmp	r3, #198	; 0xc6
 8007086:	d107      	bne.n	8007098 <astronode_send_sak_cr+0x60>
        {
            g_is_sak_available = false;
 8007088:	4b08      	ldr	r3, [pc, #32]	; (80070ac <astronode_send_sak_cr+0x74>)
 800708a:	2200      	movs	r2, #0
 800708c:	701a      	strb	r2, [r3, #0]
            send_debug_logs("The acknowledgment has been cleared.");
 800708e:	4b08      	ldr	r3, [pc, #32]	; (80070b0 <astronode_send_sak_cr+0x78>)
 8007090:	0018      	movs	r0, r3
 8007092:	f7fb fc69 	bl	8002968 <send_debug_logs>
        else
        {
            send_debug_logs("No acknowledgment available.");
        }
    }
}
 8007096:	e003      	b.n	80070a0 <astronode_send_sak_cr+0x68>
            send_debug_logs("No acknowledgment available.");
 8007098:	4b06      	ldr	r3, [pc, #24]	; (80070b4 <astronode_send_sak_cr+0x7c>)
 800709a:	0018      	movs	r0, r3
 800709c:	f7fb fc64 	bl	8002968 <send_debug_logs>
}
 80070a0:	46c0      	nop			; (mov r8, r8)
 80070a2:	46bd      	mov	sp, r7
 80070a4:	b064      	add	sp, #400	; 0x190
 80070a6:	bdb0      	pop	{r4, r5, r7, pc}
 80070a8:	fffffe70 	.word	0xfffffe70
 80070ac:	2000089c 	.word	0x2000089c
 80070b0:	0800dacc 	.word	0x0800dacc
 80070b4:	0800daf4 	.word	0x0800daf4

080070b8 <astronode_send_mpn_rr>:
        }
    }
}

void astronode_send_mpn_rr(void)
{
 80070b8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80070ba:	b0ed      	sub	sp, #436	; 0x1b4
 80070bc:	af00      	add	r7, sp, #0
    astronode_app_msg_t request = {0};
 80070be:	21c8      	movs	r1, #200	; 0xc8
 80070c0:	2318      	movs	r3, #24
 80070c2:	18cb      	adds	r3, r1, r3
 80070c4:	19db      	adds	r3, r3, r7
 80070c6:	0018      	movs	r0, r3
 80070c8:	23c6      	movs	r3, #198	; 0xc6
 80070ca:	001a      	movs	r2, r3
 80070cc:	2100      	movs	r1, #0
 80070ce:	f001 fa85 	bl	80085dc <memset>
    astronode_app_msg_t answer = {0};
 80070d2:	4b4a      	ldr	r3, [pc, #296]	; (80071fc <astronode_send_mpn_rr+0x144>)
 80070d4:	26cc      	movs	r6, #204	; 0xcc
 80070d6:	0076      	lsls	r6, r6, #1
 80070d8:	199b      	adds	r3, r3, r6
 80070da:	2218      	movs	r2, #24
 80070dc:	4694      	mov	ip, r2
 80070de:	44bc      	add	ip, r7
 80070e0:	4463      	add	r3, ip
 80070e2:	0018      	movs	r0, r3
 80070e4:	23c6      	movs	r3, #198	; 0xc6
 80070e6:	001a      	movs	r2, r3
 80070e8:	2100      	movs	r1, #0
 80070ea:	f001 fa77 	bl	80085dc <memset>

    request.op_code = ASTRONODE_OP_CODE_MPN_RR;
 80070ee:	21c8      	movs	r1, #200	; 0xc8
 80070f0:	2318      	movs	r3, #24
 80070f2:	18cb      	adds	r3, r1, r3
 80070f4:	19db      	adds	r3, r3, r7
 80070f6:	221b      	movs	r2, #27
 80070f8:	701a      	strb	r2, [r3, #0]

    if (astronode_transport_send_receive(&request, &answer) == RS_SUCCESS)
 80070fa:	2318      	movs	r3, #24
 80070fc:	18fa      	adds	r2, r7, r3
 80070fe:	2318      	movs	r3, #24
 8007100:	18cb      	adds	r3, r1, r3
 8007102:	19db      	adds	r3, r3, r7
 8007104:	0011      	movs	r1, r2
 8007106:	0018      	movs	r0, r3
 8007108:	f000 fcb0 	bl	8007a6c <astronode_transport_send_receive>
 800710c:	0003      	movs	r3, r0
 800710e:	2b01      	cmp	r3, #1
 8007110:	d16f      	bne.n	80071f2 <astronode_send_mpn_rr+0x13a>
    {
        if (answer.op_code == ASTRONODE_OP_CODE_MPN_RA)
 8007112:	4b3a      	ldr	r3, [pc, #232]	; (80071fc <astronode_send_mpn_rr+0x144>)
 8007114:	0032      	movs	r2, r6
 8007116:	189b      	adds	r3, r3, r2
 8007118:	2118      	movs	r1, #24
 800711a:	468c      	mov	ip, r1
 800711c:	44bc      	add	ip, r7
 800711e:	4463      	add	r3, ip
 8007120:	781b      	ldrb	r3, [r3, #0]
 8007122:	2b9b      	cmp	r3, #155	; 0x9b
 8007124:	d161      	bne.n	80071ea <astronode_send_mpn_rr+0x132>
        {
 8007126:	466b      	mov	r3, sp
 8007128:	001e      	movs	r6, r3
            char product_number[answer.payload_len];
 800712a:	4b34      	ldr	r3, [pc, #208]	; (80071fc <astronode_send_mpn_rr+0x144>)
 800712c:	189b      	adds	r3, r3, r2
 800712e:	2218      	movs	r2, #24
 8007130:	4694      	mov	ip, r2
 8007132:	44bc      	add	ip, r7
 8007134:	4463      	add	r3, ip
 8007136:	22c4      	movs	r2, #196	; 0xc4
 8007138:	5a9b      	ldrh	r3, [r3, r2]
 800713a:	001a      	movs	r2, r3
 800713c:	3a01      	subs	r2, #1
 800713e:	21ca      	movs	r1, #202	; 0xca
 8007140:	0049      	lsls	r1, r1, #1
 8007142:	2018      	movs	r0, #24
 8007144:	1809      	adds	r1, r1, r0
 8007146:	19c9      	adds	r1, r1, r7
 8007148:	600a      	str	r2, [r1, #0]
 800714a:	001c      	movs	r4, r3
 800714c:	2200      	movs	r2, #0
 800714e:	0015      	movs	r5, r2
 8007150:	0020      	movs	r0, r4
 8007152:	0029      	movs	r1, r5
 8007154:	0004      	movs	r4, r0
 8007156:	0f62      	lsrs	r2, r4, #29
 8007158:	000c      	movs	r4, r1
 800715a:	00e4      	lsls	r4, r4, #3
 800715c:	617c      	str	r4, [r7, #20]
 800715e:	697c      	ldr	r4, [r7, #20]
 8007160:	4314      	orrs	r4, r2
 8007162:	617c      	str	r4, [r7, #20]
 8007164:	0001      	movs	r1, r0
 8007166:	00c9      	lsls	r1, r1, #3
 8007168:	6139      	str	r1, [r7, #16]
 800716a:	603b      	str	r3, [r7, #0]
 800716c:	2200      	movs	r2, #0
 800716e:	607a      	str	r2, [r7, #4]
 8007170:	6838      	ldr	r0, [r7, #0]
 8007172:	6879      	ldr	r1, [r7, #4]
 8007174:	0004      	movs	r4, r0
 8007176:	0f62      	lsrs	r2, r4, #29
 8007178:	000c      	movs	r4, r1
 800717a:	00e4      	lsls	r4, r4, #3
 800717c:	60fc      	str	r4, [r7, #12]
 800717e:	68fc      	ldr	r4, [r7, #12]
 8007180:	4314      	orrs	r4, r2
 8007182:	60fc      	str	r4, [r7, #12]
 8007184:	0001      	movs	r1, r0
 8007186:	00ca      	lsls	r2, r1, #3
 8007188:	60ba      	str	r2, [r7, #8]
 800718a:	3307      	adds	r3, #7
 800718c:	08db      	lsrs	r3, r3, #3
 800718e:	00db      	lsls	r3, r3, #3
 8007190:	4669      	mov	r1, sp
 8007192:	1acb      	subs	r3, r1, r3
 8007194:	469d      	mov	sp, r3
 8007196:	466b      	mov	r3, sp
 8007198:	3300      	adds	r3, #0
 800719a:	24c8      	movs	r4, #200	; 0xc8
 800719c:	0064      	lsls	r4, r4, #1
 800719e:	2218      	movs	r2, #24
 80071a0:	18a2      	adds	r2, r4, r2
 80071a2:	19d1      	adds	r1, r2, r7
 80071a4:	600b      	str	r3, [r1, #0]
            send_debug_logs("Module's product number is:");
 80071a6:	4b16      	ldr	r3, [pc, #88]	; (8007200 <astronode_send_mpn_rr+0x148>)
 80071a8:	0018      	movs	r0, r3
 80071aa:	f7fb fbdd 	bl	8002968 <send_debug_logs>
            snprintf(product_number, answer.payload_len, "%s", answer.p_payload);
 80071ae:	4b13      	ldr	r3, [pc, #76]	; (80071fc <astronode_send_mpn_rr+0x144>)
 80071b0:	22cc      	movs	r2, #204	; 0xcc
 80071b2:	0052      	lsls	r2, r2, #1
 80071b4:	189b      	adds	r3, r3, r2
 80071b6:	2218      	movs	r2, #24
 80071b8:	4694      	mov	ip, r2
 80071ba:	44bc      	add	ip, r7
 80071bc:	4463      	add	r3, ip
 80071be:	22c4      	movs	r2, #196	; 0xc4
 80071c0:	5a9b      	ldrh	r3, [r3, r2]
 80071c2:	0019      	movs	r1, r3
 80071c4:	2318      	movs	r3, #24
 80071c6:	18fb      	adds	r3, r7, r3
 80071c8:	3301      	adds	r3, #1
 80071ca:	4a0e      	ldr	r2, [pc, #56]	; (8007204 <astronode_send_mpn_rr+0x14c>)
 80071cc:	2018      	movs	r0, #24
 80071ce:	1820      	adds	r0, r4, r0
 80071d0:	19c0      	adds	r0, r0, r7
 80071d2:	6800      	ldr	r0, [r0, #0]
 80071d4:	f001 f962 	bl	800849c <snprintf>
            send_debug_logs(product_number);
 80071d8:	2318      	movs	r3, #24
 80071da:	18e3      	adds	r3, r4, r3
 80071dc:	19db      	adds	r3, r3, r7
 80071de:	681b      	ldr	r3, [r3, #0]
 80071e0:	0018      	movs	r0, r3
 80071e2:	f7fb fbc1 	bl	8002968 <send_debug_logs>
 80071e6:	46b5      	mov	sp, r6
        else
        {
            send_debug_logs("Failed to read module Serial Number.");
        }
    }
}
 80071e8:	e003      	b.n	80071f2 <astronode_send_mpn_rr+0x13a>
            send_debug_logs("Failed to read module Serial Number.");
 80071ea:	4b07      	ldr	r3, [pc, #28]	; (8007208 <astronode_send_mpn_rr+0x150>)
 80071ec:	0018      	movs	r0, r3
 80071ee:	f7fb fbbb 	bl	8002968 <send_debug_logs>
}
 80071f2:	46c0      	nop			; (mov r8, r8)
 80071f4:	46bd      	mov	sp, r7
 80071f6:	b06d      	add	sp, #436	; 0x1b4
 80071f8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80071fa:	46c0      	nop			; (mov r8, r8)
 80071fc:	fffffe68 	.word	0xfffffe68
 8007200:	0800dbbc 	.word	0x0800dbbc
 8007204:	0800d6f4 	.word	0x0800d6f4
 8007208:	0800d730 	.word	0x0800d730

0800720c <astronode_send_cmd_cr>:
        }
    }
}

void astronode_send_cmd_cr(void)
{
 800720c:	b5b0      	push	{r4, r5, r7, lr}
 800720e:	b0e4      	sub	sp, #400	; 0x190
 8007210:	af00      	add	r7, sp, #0
    astronode_app_msg_t request = {0};
 8007212:	24c8      	movs	r4, #200	; 0xc8
 8007214:	193b      	adds	r3, r7, r4
 8007216:	0018      	movs	r0, r3
 8007218:	23c6      	movs	r3, #198	; 0xc6
 800721a:	001a      	movs	r2, r3
 800721c:	2100      	movs	r1, #0
 800721e:	f001 f9dd 	bl	80085dc <memset>
    astronode_app_msg_t answer = {0};
 8007222:	4b16      	ldr	r3, [pc, #88]	; (800727c <astronode_send_cmd_cr+0x70>)
 8007224:	25c8      	movs	r5, #200	; 0xc8
 8007226:	006d      	lsls	r5, r5, #1
 8007228:	195b      	adds	r3, r3, r5
 800722a:	19db      	adds	r3, r3, r7
 800722c:	0018      	movs	r0, r3
 800722e:	23c6      	movs	r3, #198	; 0xc6
 8007230:	001a      	movs	r2, r3
 8007232:	2100      	movs	r1, #0
 8007234:	f001 f9d2 	bl	80085dc <memset>

    request.op_code = ASTRONODE_OP_CODE_CMD_CR;
 8007238:	193b      	adds	r3, r7, r4
 800723a:	2248      	movs	r2, #72	; 0x48
 800723c:	701a      	strb	r2, [r3, #0]

    if (astronode_transport_send_receive(&request, &answer) == RS_SUCCESS)
 800723e:	003a      	movs	r2, r7
 8007240:	193b      	adds	r3, r7, r4
 8007242:	0011      	movs	r1, r2
 8007244:	0018      	movs	r0, r3
 8007246:	f000 fc11 	bl	8007a6c <astronode_transport_send_receive>
 800724a:	0003      	movs	r3, r0
 800724c:	2b01      	cmp	r3, #1
 800724e:	d111      	bne.n	8007274 <astronode_send_cmd_cr+0x68>
    {
        if (answer.op_code == ASTRONODE_OP_CODE_CMD_CA)
 8007250:	4b0a      	ldr	r3, [pc, #40]	; (800727c <astronode_send_cmd_cr+0x70>)
 8007252:	195b      	adds	r3, r3, r5
 8007254:	19db      	adds	r3, r3, r7
 8007256:	781b      	ldrb	r3, [r3, #0]
 8007258:	2bc8      	cmp	r3, #200	; 0xc8
 800725a:	d107      	bne.n	800726c <astronode_send_cmd_cr+0x60>
        {
            g_is_command_available = false;
 800725c:	4b08      	ldr	r3, [pc, #32]	; (8007280 <astronode_send_cmd_cr+0x74>)
 800725e:	2200      	movs	r2, #0
 8007260:	701a      	strb	r2, [r3, #0]
            send_debug_logs("The command ack has been cleared.");
 8007262:	4b08      	ldr	r3, [pc, #32]	; (8007284 <astronode_send_cmd_cr+0x78>)
 8007264:	0018      	movs	r0, r3
 8007266:	f7fb fb7f 	bl	8002968 <send_debug_logs>
        else
        {
            send_debug_logs("No command to clear.");
        }
    }
}
 800726a:	e003      	b.n	8007274 <astronode_send_cmd_cr+0x68>
            send_debug_logs("No command to clear.");
 800726c:	4b06      	ldr	r3, [pc, #24]	; (8007288 <astronode_send_cmd_cr+0x7c>)
 800726e:	0018      	movs	r0, r3
 8007270:	f7fb fb7a 	bl	8002968 <send_debug_logs>
}
 8007274:	46c0      	nop			; (mov r8, r8)
 8007276:	46bd      	mov	sp, r7
 8007278:	b064      	add	sp, #400	; 0x190
 800727a:	bdb0      	pop	{r4, r5, r7, pc}
 800727c:	fffffe70 	.word	0xfffffe70
 8007280:	2000089e 	.word	0x2000089e
 8007284:	0800e00c 	.word	0x0800e00c
 8007288:	0800e030 	.word	0x0800e030

0800728c <astronode_send_cmd_rr>:

void astronode_send_cmd_rr(void)
{
 800728c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800728e:	4cac      	ldr	r4, [pc, #688]	; (8007540 <astronode_send_cmd_rr+0x2b4>)
 8007290:	44a5      	add	sp, r4
 8007292:	af00      	add	r7, sp, #0
    astronode_app_msg_t request = {0};
 8007294:	218c      	movs	r1, #140	; 0x8c
 8007296:	0049      	lsls	r1, r1, #1
 8007298:	2318      	movs	r3, #24
 800729a:	18cb      	adds	r3, r1, r3
 800729c:	19db      	adds	r3, r3, r7
 800729e:	0018      	movs	r0, r3
 80072a0:	23c6      	movs	r3, #198	; 0xc6
 80072a2:	001a      	movs	r2, r3
 80072a4:	2100      	movs	r1, #0
 80072a6:	f001 f999 	bl	80085dc <memset>
    astronode_app_msg_t answer = {0};
 80072aa:	4ba6      	ldr	r3, [pc, #664]	; (8007544 <astronode_send_cmd_rr+0x2b8>)
 80072ac:	26f8      	movs	r6, #248	; 0xf8
 80072ae:	0076      	lsls	r6, r6, #1
 80072b0:	199b      	adds	r3, r3, r6
 80072b2:	2218      	movs	r2, #24
 80072b4:	4694      	mov	ip, r2
 80072b6:	44bc      	add	ip, r7
 80072b8:	4463      	add	r3, ip
 80072ba:	0018      	movs	r0, r3
 80072bc:	23c6      	movs	r3, #198	; 0xc6
 80072be:	001a      	movs	r2, r3
 80072c0:	2100      	movs	r1, #0
 80072c2:	f001 f98b 	bl	80085dc <memset>

    request.op_code = ASTRONODE_OP_CODE_CMD_RR;
 80072c6:	218c      	movs	r1, #140	; 0x8c
 80072c8:	0049      	lsls	r1, r1, #1
 80072ca:	2318      	movs	r3, #24
 80072cc:	18cb      	adds	r3, r1, r3
 80072ce:	19db      	adds	r3, r3, r7
 80072d0:	2247      	movs	r2, #71	; 0x47
 80072d2:	701a      	strb	r2, [r3, #0]

    if (astronode_transport_send_receive(&request, &answer) == RS_SUCCESS)
 80072d4:	2350      	movs	r3, #80	; 0x50
 80072d6:	2218      	movs	r2, #24
 80072d8:	189b      	adds	r3, r3, r2
 80072da:	19da      	adds	r2, r3, r7
 80072dc:	2318      	movs	r3, #24
 80072de:	18cb      	adds	r3, r1, r3
 80072e0:	19db      	adds	r3, r3, r7
 80072e2:	0011      	movs	r1, r2
 80072e4:	0018      	movs	r0, r3
 80072e6:	f000 fbc1 	bl	8007a6c <astronode_transport_send_receive>
 80072ea:	0003      	movs	r3, r0
 80072ec:	2b01      	cmp	r3, #1
 80072ee:	d000      	beq.n	80072f2 <astronode_send_cmd_rr+0x66>
 80072f0:	e121      	b.n	8007536 <astronode_send_cmd_rr+0x2aa>
    {
        if (answer.op_code == ASTRONODE_OP_CODE_CMD_RA)
 80072f2:	4b94      	ldr	r3, [pc, #592]	; (8007544 <astronode_send_cmd_rr+0x2b8>)
 80072f4:	199b      	adds	r3, r3, r6
 80072f6:	2218      	movs	r2, #24
 80072f8:	4694      	mov	ip, r2
 80072fa:	44bc      	add	ip, r7
 80072fc:	4463      	add	r3, ip
 80072fe:	781b      	ldrb	r3, [r3, #0]
 8007300:	2bc7      	cmp	r3, #199	; 0xc7
 8007302:	d000      	beq.n	8007306 <astronode_send_cmd_rr+0x7a>
 8007304:	e113      	b.n	800752e <astronode_send_cmd_rr+0x2a2>
        {
 8007306:	466b      	mov	r3, sp
 8007308:	001e      	movs	r6, r3
            send_debug_logs("Received downlink command");
 800730a:	4b8f      	ldr	r3, [pc, #572]	; (8007548 <astronode_send_cmd_rr+0x2bc>)
 800730c:	0018      	movs	r0, r3
 800730e:	f7fb fb2b 	bl	8002968 <send_debug_logs>
            uint32_t rtc_time = answer.p_payload[0]
 8007312:	4b8c      	ldr	r3, [pc, #560]	; (8007544 <astronode_send_cmd_rr+0x2b8>)
 8007314:	21f8      	movs	r1, #248	; 0xf8
 8007316:	0049      	lsls	r1, r1, #1
 8007318:	185b      	adds	r3, r3, r1
 800731a:	2218      	movs	r2, #24
 800731c:	4694      	mov	ip, r2
 800731e:	44bc      	add	ip, r7
 8007320:	4463      	add	r3, ip
 8007322:	785b      	ldrb	r3, [r3, #1]
 8007324:	001a      	movs	r2, r3
                                + (answer.p_payload[1] << 8)
 8007326:	4b87      	ldr	r3, [pc, #540]	; (8007544 <astronode_send_cmd_rr+0x2b8>)
 8007328:	185b      	adds	r3, r3, r1
 800732a:	2018      	movs	r0, #24
 800732c:	4684      	mov	ip, r0
 800732e:	44bc      	add	ip, r7
 8007330:	4463      	add	r3, ip
 8007332:	789b      	ldrb	r3, [r3, #2]
 8007334:	021b      	lsls	r3, r3, #8
 8007336:	18d2      	adds	r2, r2, r3
                                + (answer.p_payload[2] << 16)
 8007338:	4b82      	ldr	r3, [pc, #520]	; (8007544 <astronode_send_cmd_rr+0x2b8>)
 800733a:	185b      	adds	r3, r3, r1
 800733c:	2018      	movs	r0, #24
 800733e:	4684      	mov	ip, r0
 8007340:	44bc      	add	ip, r7
 8007342:	4463      	add	r3, ip
 8007344:	78db      	ldrb	r3, [r3, #3]
 8007346:	041b      	lsls	r3, r3, #16
 8007348:	18d2      	adds	r2, r2, r3
                                + (answer.p_payload[3] << 24);
 800734a:	4b7e      	ldr	r3, [pc, #504]	; (8007544 <astronode_send_cmd_rr+0x2b8>)
 800734c:	185b      	adds	r3, r3, r1
 800734e:	2118      	movs	r1, #24
 8007350:	468c      	mov	ip, r1
 8007352:	44bc      	add	ip, r7
 8007354:	4463      	add	r3, ip
 8007356:	791b      	ldrb	r3, [r3, #4]
 8007358:	061b      	lsls	r3, r3, #24
 800735a:	18d3      	adds	r3, r2, r3
            uint32_t rtc_time = answer.p_payload[0]
 800735c:	22f4      	movs	r2, #244	; 0xf4
 800735e:	0052      	lsls	r2, r2, #1
 8007360:	2118      	movs	r1, #24
 8007362:	1851      	adds	r1, r2, r1
 8007364:	19c8      	adds	r0, r1, r7
 8007366:	6003      	str	r3, [r0, #0]
            char str[ASTRONODE_UART_DEBUG_BUFFER_LENGTH];
            sprintf(str, "Command created date, Ref is astrocast Epoch (2018-01-01 00:00:00 UTC): %lds.", rtc_time);
 8007368:	2318      	movs	r3, #24
 800736a:	18d3      	adds	r3, r2, r3
 800736c:	19db      	adds	r3, r3, r7
 800736e:	681a      	ldr	r2, [r3, #0]
 8007370:	4976      	ldr	r1, [pc, #472]	; (800754c <astronode_send_cmd_rr+0x2c0>)
 8007372:	2318      	movs	r3, #24
 8007374:	18fb      	adds	r3, r7, r3
 8007376:	0018      	movs	r0, r3
 8007378:	f001 f8c4 	bl	8008504 <sprintf>
            send_debug_logs(str);
 800737c:	2318      	movs	r3, #24
 800737e:	18fb      	adds	r3, r7, r3
 8007380:	0018      	movs	r0, r3
 8007382:	f7fb faf1 	bl	8002968 <send_debug_logs>

            if (((answer.payload_len - 4) != 40) && ((answer.payload_len - 4) != 8))
 8007386:	4b6f      	ldr	r3, [pc, #444]	; (8007544 <astronode_send_cmd_rr+0x2b8>)
 8007388:	21f8      	movs	r1, #248	; 0xf8
 800738a:	0049      	lsls	r1, r1, #1
 800738c:	185b      	adds	r3, r3, r1
 800738e:	2218      	movs	r2, #24
 8007390:	4694      	mov	ip, r2
 8007392:	44bc      	add	ip, r7
 8007394:	4463      	add	r3, ip
 8007396:	22c4      	movs	r2, #196	; 0xc4
 8007398:	5a9b      	ldrh	r3, [r3, r2]
 800739a:	2b2c      	cmp	r3, #44	; 0x2c
 800739c:	d00e      	beq.n	80073bc <astronode_send_cmd_rr+0x130>
 800739e:	4b69      	ldr	r3, [pc, #420]	; (8007544 <astronode_send_cmd_rr+0x2b8>)
 80073a0:	185b      	adds	r3, r3, r1
 80073a2:	2218      	movs	r2, #24
 80073a4:	4694      	mov	ip, r2
 80073a6:	44bc      	add	ip, r7
 80073a8:	4463      	add	r3, ip
 80073aa:	22c4      	movs	r2, #196	; 0xc4
 80073ac:	5a9b      	ldrh	r3, [r3, r2]
 80073ae:	2b0c      	cmp	r3, #12
 80073b0:	d004      	beq.n	80073bc <astronode_send_cmd_rr+0x130>
            {
                send_debug_logs("Command size error");
 80073b2:	4b67      	ldr	r3, [pc, #412]	; (8007550 <astronode_send_cmd_rr+0x2c4>)
 80073b4:	0018      	movs	r0, r3
 80073b6:	f7fb fad7 	bl	8002968 <send_debug_logs>
                return;
 80073ba:	e0b6      	b.n	800752a <astronode_send_cmd_rr+0x29e>
            }

            char command_content[answer.payload_len];
 80073bc:	4b61      	ldr	r3, [pc, #388]	; (8007544 <astronode_send_cmd_rr+0x2b8>)
 80073be:	22f8      	movs	r2, #248	; 0xf8
 80073c0:	0052      	lsls	r2, r2, #1
 80073c2:	189b      	adds	r3, r3, r2
 80073c4:	2218      	movs	r2, #24
 80073c6:	4694      	mov	ip, r2
 80073c8:	44bc      	add	ip, r7
 80073ca:	4463      	add	r3, ip
 80073cc:	22c4      	movs	r2, #196	; 0xc4
 80073ce:	5a9b      	ldrh	r3, [r3, r2]
 80073d0:	001a      	movs	r2, r3
 80073d2:	3a01      	subs	r2, #1
 80073d4:	21f2      	movs	r1, #242	; 0xf2
 80073d6:	0049      	lsls	r1, r1, #1
 80073d8:	2018      	movs	r0, #24
 80073da:	1809      	adds	r1, r1, r0
 80073dc:	19c9      	adds	r1, r1, r7
 80073de:	600a      	str	r2, [r1, #0]
 80073e0:	001c      	movs	r4, r3
 80073e2:	2200      	movs	r2, #0
 80073e4:	0015      	movs	r5, r2
 80073e6:	0020      	movs	r0, r4
 80073e8:	0029      	movs	r1, r5
 80073ea:	0004      	movs	r4, r0
 80073ec:	0f62      	lsrs	r2, r4, #29
 80073ee:	000c      	movs	r4, r1
 80073f0:	00e4      	lsls	r4, r4, #3
 80073f2:	617c      	str	r4, [r7, #20]
 80073f4:	697c      	ldr	r4, [r7, #20]
 80073f6:	4314      	orrs	r4, r2
 80073f8:	617c      	str	r4, [r7, #20]
 80073fa:	0001      	movs	r1, r0
 80073fc:	00c9      	lsls	r1, r1, #3
 80073fe:	6139      	str	r1, [r7, #16]
 8007400:	603b      	str	r3, [r7, #0]
 8007402:	2200      	movs	r2, #0
 8007404:	607a      	str	r2, [r7, #4]
 8007406:	6838      	ldr	r0, [r7, #0]
 8007408:	6879      	ldr	r1, [r7, #4]
 800740a:	0004      	movs	r4, r0
 800740c:	0f62      	lsrs	r2, r4, #29
 800740e:	000c      	movs	r4, r1
 8007410:	00e4      	lsls	r4, r4, #3
 8007412:	60fc      	str	r4, [r7, #12]
 8007414:	68fc      	ldr	r4, [r7, #12]
 8007416:	4314      	orrs	r4, r2
 8007418:	60fc      	str	r4, [r7, #12]
 800741a:	0001      	movs	r1, r0
 800741c:	00ca      	lsls	r2, r1, #3
 800741e:	60ba      	str	r2, [r7, #8]
 8007420:	3307      	adds	r3, #7
 8007422:	08db      	lsrs	r3, r3, #3
 8007424:	00db      	lsls	r3, r3, #3
 8007426:	4669      	mov	r1, sp
 8007428:	1acb      	subs	r3, r1, r3
 800742a:	469d      	mov	sp, r3
 800742c:	466b      	mov	r3, sp
 800742e:	3300      	adds	r3, #0
 8007430:	20f0      	movs	r0, #240	; 0xf0
 8007432:	0040      	lsls	r0, r0, #1
 8007434:	2218      	movs	r2, #24
 8007436:	1882      	adds	r2, r0, r2
 8007438:	19d1      	adds	r1, r2, r7
 800743a:	600b      	str	r3, [r1, #0]
            uint16_t command_content_size = snprintf(command_content, (answer.payload_len - 4) + 1, "%s", &answer.p_payload[4]);
 800743c:	4b41      	ldr	r3, [pc, #260]	; (8007544 <astronode_send_cmd_rr+0x2b8>)
 800743e:	22f8      	movs	r2, #248	; 0xf8
 8007440:	0052      	lsls	r2, r2, #1
 8007442:	189b      	adds	r3, r3, r2
 8007444:	2218      	movs	r2, #24
 8007446:	4694      	mov	ip, r2
 8007448:	44bc      	add	ip, r7
 800744a:	4463      	add	r3, ip
 800744c:	22c4      	movs	r2, #196	; 0xc4
 800744e:	5a9b      	ldrh	r3, [r3, r2]
 8007450:	3b03      	subs	r3, #3
 8007452:	0019      	movs	r1, r3
 8007454:	2350      	movs	r3, #80	; 0x50
 8007456:	2218      	movs	r2, #24
 8007458:	189b      	adds	r3, r3, r2
 800745a:	19db      	adds	r3, r3, r7
 800745c:	3305      	adds	r3, #5
 800745e:	4a3d      	ldr	r2, [pc, #244]	; (8007554 <astronode_send_cmd_rr+0x2c8>)
 8007460:	2418      	movs	r4, #24
 8007462:	1900      	adds	r0, r0, r4
 8007464:	19c0      	adds	r0, r0, r7
 8007466:	6800      	ldr	r0, [r0, #0]
 8007468:	f001 f818 	bl	800849c <snprintf>
 800746c:	0002      	movs	r2, r0
 800746e:	23ef      	movs	r3, #239	; 0xef
 8007470:	005b      	lsls	r3, r3, #1
 8007472:	2118      	movs	r1, #24
 8007474:	185b      	adds	r3, r3, r1
 8007476:	19db      	adds	r3, r3, r7
 8007478:	801a      	strh	r2, [r3, #0]
            for (uint8_t index = 0; index < command_content_size; index++)
 800747a:	23f0      	movs	r3, #240	; 0xf0
 800747c:	33ff      	adds	r3, #255	; 0xff
 800747e:	2218      	movs	r2, #24
 8007480:	189b      	adds	r3, r3, r2
 8007482:	19db      	adds	r3, r3, r7
 8007484:	2200      	movs	r2, #0
 8007486:	701a      	strb	r2, [r3, #0]
 8007488:	e024      	b.n	80074d4 <astronode_send_cmd_rr+0x248>
            {
            	if (isprint((unsigned char)command_content[index]) == 0)
 800748a:	23f0      	movs	r3, #240	; 0xf0
 800748c:	33ff      	adds	r3, #255	; 0xff
 800748e:	2218      	movs	r2, #24
 8007490:	189b      	adds	r3, r3, r2
 8007492:	19db      	adds	r3, r3, r7
 8007494:	781b      	ldrb	r3, [r3, #0]
 8007496:	22f0      	movs	r2, #240	; 0xf0
 8007498:	0052      	lsls	r2, r2, #1
 800749a:	2118      	movs	r1, #24
 800749c:	1852      	adds	r2, r2, r1
 800749e:	19d2      	adds	r2, r2, r7
 80074a0:	6812      	ldr	r2, [r2, #0]
 80074a2:	5cd3      	ldrb	r3, [r2, r3]
 80074a4:	1c5a      	adds	r2, r3, #1
 80074a6:	4b2c      	ldr	r3, [pc, #176]	; (8007558 <astronode_send_cmd_rr+0x2cc>)
 80074a8:	18d3      	adds	r3, r2, r3
 80074aa:	781b      	ldrb	r3, [r3, #0]
 80074ac:	001a      	movs	r2, r3
 80074ae:	2397      	movs	r3, #151	; 0x97
 80074b0:	4013      	ands	r3, r2
 80074b2:	d104      	bne.n	80074be <astronode_send_cmd_rr+0x232>
                {
                    send_debug_logs("Command contains non printable characters");
 80074b4:	4b29      	ldr	r3, [pc, #164]	; (800755c <astronode_send_cmd_rr+0x2d0>)
 80074b6:	0018      	movs	r0, r3
 80074b8:	f7fb fa56 	bl	8002968 <send_debug_logs>
                    return;
 80074bc:	e035      	b.n	800752a <astronode_send_cmd_rr+0x29e>
            for (uint8_t index = 0; index < command_content_size; index++)
 80074be:	21f0      	movs	r1, #240	; 0xf0
 80074c0:	31ff      	adds	r1, #255	; 0xff
 80074c2:	2318      	movs	r3, #24
 80074c4:	18cb      	adds	r3, r1, r3
 80074c6:	19db      	adds	r3, r3, r7
 80074c8:	781a      	ldrb	r2, [r3, #0]
 80074ca:	2318      	movs	r3, #24
 80074cc:	18cb      	adds	r3, r1, r3
 80074ce:	19db      	adds	r3, r3, r7
 80074d0:	3201      	adds	r2, #1
 80074d2:	701a      	strb	r2, [r3, #0]
 80074d4:	23f0      	movs	r3, #240	; 0xf0
 80074d6:	33ff      	adds	r3, #255	; 0xff
 80074d8:	2218      	movs	r2, #24
 80074da:	189b      	adds	r3, r3, r2
 80074dc:	19db      	adds	r3, r3, r7
 80074de:	781b      	ldrb	r3, [r3, #0]
 80074e0:	b29b      	uxth	r3, r3
 80074e2:	22ef      	movs	r2, #239	; 0xef
 80074e4:	0052      	lsls	r2, r2, #1
 80074e6:	2118      	movs	r1, #24
 80074e8:	1852      	adds	r2, r2, r1
 80074ea:	19d2      	adds	r2, r2, r7
 80074ec:	8812      	ldrh	r2, [r2, #0]
 80074ee:	429a      	cmp	r2, r3
 80074f0:	d8cb      	bhi.n	800748a <astronode_send_cmd_rr+0x1fe>
                }
            }
            send_debug_logs("Command content is: ");
 80074f2:	4b1b      	ldr	r3, [pc, #108]	; (8007560 <astronode_send_cmd_rr+0x2d4>)
 80074f4:	0018      	movs	r0, r3
 80074f6:	f7fb fa37 	bl	8002968 <send_debug_logs>
            sprintf(command_content, "%s ", &answer.p_payload[4]);
 80074fa:	2350      	movs	r3, #80	; 0x50
 80074fc:	2218      	movs	r2, #24
 80074fe:	189b      	adds	r3, r3, r2
 8007500:	19db      	adds	r3, r3, r7
 8007502:	1d5a      	adds	r2, r3, #5
 8007504:	4917      	ldr	r1, [pc, #92]	; (8007564 <astronode_send_cmd_rr+0x2d8>)
 8007506:	24f0      	movs	r4, #240	; 0xf0
 8007508:	0064      	lsls	r4, r4, #1
 800750a:	2318      	movs	r3, #24
 800750c:	18e3      	adds	r3, r4, r3
 800750e:	19db      	adds	r3, r3, r7
 8007510:	681b      	ldr	r3, [r3, #0]
 8007512:	0018      	movs	r0, r3
 8007514:	f000 fff6 	bl	8008504 <sprintf>
            send_debug_logs(command_content);
 8007518:	2318      	movs	r3, #24
 800751a:	18e3      	adds	r3, r4, r3
 800751c:	19db      	adds	r3, r3, r7
 800751e:	681b      	ldr	r3, [r3, #0]
 8007520:	0018      	movs	r0, r3
 8007522:	f7fb fa21 	bl	8002968 <send_debug_logs>
 8007526:	46b5      	mov	sp, r6
 8007528:	e005      	b.n	8007536 <astronode_send_cmd_rr+0x2aa>
                return;
 800752a:	46b5      	mov	sp, r6
 800752c:	e003      	b.n	8007536 <astronode_send_cmd_rr+0x2aa>
        }
        else
        {
            send_debug_logs("No command available.");
 800752e:	4b0e      	ldr	r3, [pc, #56]	; (8007568 <astronode_send_cmd_rr+0x2dc>)
 8007530:	0018      	movs	r0, r3
 8007532:	f7fb fa19 	bl	8002968 <send_debug_logs>
        }
    }
}
 8007536:	46bd      	mov	sp, r7
 8007538:	2383      	movs	r3, #131	; 0x83
 800753a:	009b      	lsls	r3, r3, #2
 800753c:	449d      	add	sp, r3
 800753e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8007540:	fffffdf4 	.word	0xfffffdf4
 8007544:	fffffe60 	.word	0xfffffe60
 8007548:	0800e048 	.word	0x0800e048
 800754c:	0800e064 	.word	0x0800e064
 8007550:	0800e0b4 	.word	0x0800e0b4
 8007554:	0800d6f4 	.word	0x0800d6f4
 8007558:	0800ea68 	.word	0x0800ea68
 800755c:	0800e0c8 	.word	0x0800e0c8
 8007560:	0800e0f4 	.word	0x0800e0f4
 8007564:	0800e10c 	.word	0x0800e10c
 8007568:	0800e110 	.word	0x0800e110

0800756c <is_sak_available>:
        }
    }
}

bool is_sak_available()
{
 800756c:	b580      	push	{r7, lr}
 800756e:	af00      	add	r7, sp, #0
    return g_is_sak_available;
 8007570:	4b02      	ldr	r3, [pc, #8]	; (800757c <is_sak_available+0x10>)
 8007572:	781b      	ldrb	r3, [r3, #0]
}
 8007574:	0018      	movs	r0, r3
 8007576:	46bd      	mov	sp, r7
 8007578:	bd80      	pop	{r7, pc}
 800757a:	46c0      	nop			; (mov r8, r8)
 800757c:	2000089c 	.word	0x2000089c

08007580 <is_astronode_reset>:

bool is_astronode_reset()
{
 8007580:	b580      	push	{r7, lr}
 8007582:	af00      	add	r7, sp, #0
    return g_is_astronode_reset;
 8007584:	4b02      	ldr	r3, [pc, #8]	; (8007590 <is_astronode_reset+0x10>)
 8007586:	781b      	ldrb	r3, [r3, #0]
}
 8007588:	0018      	movs	r0, r3
 800758a:	46bd      	mov	sp, r7
 800758c:	bd80      	pop	{r7, pc}
 800758e:	46c0      	nop			; (mov r8, r8)
 8007590:	2000089d 	.word	0x2000089d

08007594 <is_command_available>:

bool is_command_available()
{
 8007594:	b580      	push	{r7, lr}
 8007596:	af00      	add	r7, sp, #0
    return g_is_command_available;
 8007598:	4b02      	ldr	r3, [pc, #8]	; (80075a4 <is_command_available+0x10>)
 800759a:	781b      	ldrb	r3, [r3, #0]
}
 800759c:	0018      	movs	r0, r3
 800759e:	46bd      	mov	sp, r7
 80075a0:	bd80      	pop	{r7, pc}
 80075a2:	46c0      	nop			; (mov r8, r8)
 80075a4:	2000089e 	.word	0x2000089e

080075a8 <ascii_to_value>:

//------------------------------------------------------------------------------
// Function definitions
//------------------------------------------------------------------------------
static bool ascii_to_value(const uint8_t ascii, uint8_t *p_value)
{
 80075a8:	b580      	push	{r7, lr}
 80075aa:	b082      	sub	sp, #8
 80075ac:	af00      	add	r7, sp, #0
 80075ae:	0002      	movs	r2, r0
 80075b0:	6039      	str	r1, [r7, #0]
 80075b2:	1dfb      	adds	r3, r7, #7
 80075b4:	701a      	strb	r2, [r3, #0]
    if (ascii >= '0' && ascii <= '9')
 80075b6:	1dfb      	adds	r3, r7, #7
 80075b8:	781b      	ldrb	r3, [r3, #0]
 80075ba:	2b2f      	cmp	r3, #47	; 0x2f
 80075bc:	d90b      	bls.n	80075d6 <ascii_to_value+0x2e>
 80075be:	1dfb      	adds	r3, r7, #7
 80075c0:	781b      	ldrb	r3, [r3, #0]
 80075c2:	2b39      	cmp	r3, #57	; 0x39
 80075c4:	d807      	bhi.n	80075d6 <ascii_to_value+0x2e>
    {
        *p_value = ascii - '0';
 80075c6:	1dfb      	adds	r3, r7, #7
 80075c8:	781b      	ldrb	r3, [r3, #0]
 80075ca:	3b30      	subs	r3, #48	; 0x30
 80075cc:	b2da      	uxtb	r2, r3
 80075ce:	683b      	ldr	r3, [r7, #0]
 80075d0:	701a      	strb	r2, [r3, #0]
        return true;
 80075d2:	2301      	movs	r3, #1
 80075d4:	e010      	b.n	80075f8 <ascii_to_value+0x50>
    }
    else if (ascii >= 'A' && ascii <= 'F')
 80075d6:	1dfb      	adds	r3, r7, #7
 80075d8:	781b      	ldrb	r3, [r3, #0]
 80075da:	2b40      	cmp	r3, #64	; 0x40
 80075dc:	d90b      	bls.n	80075f6 <ascii_to_value+0x4e>
 80075de:	1dfb      	adds	r3, r7, #7
 80075e0:	781b      	ldrb	r3, [r3, #0]
 80075e2:	2b46      	cmp	r3, #70	; 0x46
 80075e4:	d807      	bhi.n	80075f6 <ascii_to_value+0x4e>
    {
        *p_value = ascii - 'A' + 10;
 80075e6:	1dfb      	adds	r3, r7, #7
 80075e8:	781b      	ldrb	r3, [r3, #0]
 80075ea:	3b37      	subs	r3, #55	; 0x37
 80075ec:	b2da      	uxtb	r2, r3
 80075ee:	683b      	ldr	r3, [r7, #0]
 80075f0:	701a      	strb	r2, [r3, #0]
        return true;
 80075f2:	2301      	movs	r3, #1
 80075f4:	e000      	b.n	80075f8 <ascii_to_value+0x50>
    }
    else
    {
        return false;
 80075f6:	2300      	movs	r3, #0
    }
}
 80075f8:	0018      	movs	r0, r3
 80075fa:	46bd      	mov	sp, r7
 80075fc:	b002      	add	sp, #8
 80075fe:	bd80      	pop	{r7, pc}

08007600 <astronode_create_request_transport>:

static uint16_t astronode_create_request_transport(astronode_app_msg_t *p_source_message, uint8_t *p_destination_buffer)
{
 8007600:	b5f0      	push	{r4, r5, r6, r7, lr}
 8007602:	b085      	sub	sp, #20
 8007604:	af00      	add	r7, sp, #0
 8007606:	6078      	str	r0, [r7, #4]
 8007608:	6039      	str	r1, [r7, #0]
    uint16_t index = 0;
 800760a:	250e      	movs	r5, #14
 800760c:	197b      	adds	r3, r7, r5
 800760e:	2200      	movs	r2, #0
 8007610:	801a      	strh	r2, [r3, #0]

    p_destination_buffer[index++] = ASTRONODE_TRANSPORT_STX;
 8007612:	197b      	adds	r3, r7, r5
 8007614:	881b      	ldrh	r3, [r3, #0]
 8007616:	197a      	adds	r2, r7, r5
 8007618:	1c59      	adds	r1, r3, #1
 800761a:	8011      	strh	r1, [r2, #0]
 800761c:	001a      	movs	r2, r3
 800761e:	683b      	ldr	r3, [r7, #0]
 8007620:	189b      	adds	r3, r3, r2
 8007622:	2202      	movs	r2, #2
 8007624:	701a      	strb	r2, [r3, #0]

    uint16_t crc = calculate_crc((const uint8_t *)&p_source_message->op_code, 1, 0xFFFF);
 8007626:	687b      	ldr	r3, [r7, #4]
 8007628:	260a      	movs	r6, #10
 800762a:	19bc      	adds	r4, r7, r6
 800762c:	4a44      	ldr	r2, [pc, #272]	; (8007740 <astronode_create_request_transport+0x140>)
 800762e:	2101      	movs	r1, #1
 8007630:	0018      	movs	r0, r3
 8007632:	f000 fa7d 	bl	8007b30 <calculate_crc>
 8007636:	0003      	movs	r3, r0
 8007638:	8023      	strh	r3, [r4, #0]
    crc = calculate_crc((const uint8_t *)&p_source_message->p_payload, p_source_message->payload_len, crc);
 800763a:	687b      	ldr	r3, [r7, #4]
 800763c:	1c58      	adds	r0, r3, #1
 800763e:	687b      	ldr	r3, [r7, #4]
 8007640:	22c4      	movs	r2, #196	; 0xc4
 8007642:	5a99      	ldrh	r1, [r3, r2]
 8007644:	19bc      	adds	r4, r7, r6
 8007646:	19bb      	adds	r3, r7, r6
 8007648:	881b      	ldrh	r3, [r3, #0]
 800764a:	001a      	movs	r2, r3
 800764c:	f000 fa70 	bl	8007b30 <calculate_crc>
 8007650:	0003      	movs	r3, r0
 8007652:	8023      	strh	r3, [r4, #0]
    crc = ((crc << 8) & 0xff00) | ((crc >> 8) & 0x00ff);
 8007654:	19bb      	adds	r3, r7, r6
 8007656:	881b      	ldrh	r3, [r3, #0]
 8007658:	021b      	lsls	r3, r3, #8
 800765a:	b21a      	sxth	r2, r3
 800765c:	0031      	movs	r1, r6
 800765e:	19bb      	adds	r3, r7, r6
 8007660:	881b      	ldrh	r3, [r3, #0]
 8007662:	0a1b      	lsrs	r3, r3, #8
 8007664:	b29b      	uxth	r3, r3
 8007666:	b21b      	sxth	r3, r3
 8007668:	4313      	orrs	r3, r2
 800766a:	b21a      	sxth	r2, r3
 800766c:	187b      	adds	r3, r7, r1
 800766e:	801a      	strh	r2, [r3, #0]

    uint8_to_ascii_buffer(p_source_message->op_code, &p_destination_buffer[index]);
 8007670:	687b      	ldr	r3, [r7, #4]
 8007672:	7818      	ldrb	r0, [r3, #0]
 8007674:	197b      	adds	r3, r7, r5
 8007676:	881b      	ldrh	r3, [r3, #0]
 8007678:	683a      	ldr	r2, [r7, #0]
 800767a:	18d3      	adds	r3, r2, r3
 800767c:	0019      	movs	r1, r3
 800767e:	f000 fbeb 	bl	8007e58 <uint8_to_ascii_buffer>
    index += 2;
 8007682:	197b      	adds	r3, r7, r5
 8007684:	197a      	adds	r2, r7, r5
 8007686:	8812      	ldrh	r2, [r2, #0]
 8007688:	3202      	adds	r2, #2
 800768a:	801a      	strh	r2, [r3, #0]

    for (uint16_t i = 0; i < p_source_message->payload_len; i++)
 800768c:	230c      	movs	r3, #12
 800768e:	18fb      	adds	r3, r7, r3
 8007690:	2200      	movs	r2, #0
 8007692:	801a      	strh	r2, [r3, #0]
 8007694:	e017      	b.n	80076c6 <astronode_create_request_transport+0xc6>
    {
        uint8_to_ascii_buffer(p_source_message->p_payload[i], &p_destination_buffer[index]);
 8007696:	240c      	movs	r4, #12
 8007698:	193b      	adds	r3, r7, r4
 800769a:	881b      	ldrh	r3, [r3, #0]
 800769c:	687a      	ldr	r2, [r7, #4]
 800769e:	18d3      	adds	r3, r2, r3
 80076a0:	7858      	ldrb	r0, [r3, #1]
 80076a2:	250e      	movs	r5, #14
 80076a4:	197b      	adds	r3, r7, r5
 80076a6:	881b      	ldrh	r3, [r3, #0]
 80076a8:	683a      	ldr	r2, [r7, #0]
 80076aa:	18d3      	adds	r3, r2, r3
 80076ac:	0019      	movs	r1, r3
 80076ae:	f000 fbd3 	bl	8007e58 <uint8_to_ascii_buffer>
        index += 2;
 80076b2:	197b      	adds	r3, r7, r5
 80076b4:	197a      	adds	r2, r7, r5
 80076b6:	8812      	ldrh	r2, [r2, #0]
 80076b8:	3202      	adds	r2, #2
 80076ba:	801a      	strh	r2, [r3, #0]
    for (uint16_t i = 0; i < p_source_message->payload_len; i++)
 80076bc:	193b      	adds	r3, r7, r4
 80076be:	881a      	ldrh	r2, [r3, #0]
 80076c0:	193b      	adds	r3, r7, r4
 80076c2:	3201      	adds	r2, #1
 80076c4:	801a      	strh	r2, [r3, #0]
 80076c6:	687b      	ldr	r3, [r7, #4]
 80076c8:	22c4      	movs	r2, #196	; 0xc4
 80076ca:	5a9b      	ldrh	r3, [r3, r2]
 80076cc:	220c      	movs	r2, #12
 80076ce:	18ba      	adds	r2, r7, r2
 80076d0:	8812      	ldrh	r2, [r2, #0]
 80076d2:	429a      	cmp	r2, r3
 80076d4:	d3df      	bcc.n	8007696 <astronode_create_request_transport+0x96>
    }

    uint8_to_ascii_buffer(crc >> 8, &p_destination_buffer[index]);
 80076d6:	250a      	movs	r5, #10
 80076d8:	197b      	adds	r3, r7, r5
 80076da:	881b      	ldrh	r3, [r3, #0]
 80076dc:	0a1b      	lsrs	r3, r3, #8
 80076de:	b29b      	uxth	r3, r3
 80076e0:	b2d8      	uxtb	r0, r3
 80076e2:	240e      	movs	r4, #14
 80076e4:	193b      	adds	r3, r7, r4
 80076e6:	881b      	ldrh	r3, [r3, #0]
 80076e8:	683a      	ldr	r2, [r7, #0]
 80076ea:	18d3      	adds	r3, r2, r3
 80076ec:	0019      	movs	r1, r3
 80076ee:	f000 fbb3 	bl	8007e58 <uint8_to_ascii_buffer>
    index += 2;
 80076f2:	0021      	movs	r1, r4
 80076f4:	187b      	adds	r3, r7, r1
 80076f6:	187a      	adds	r2, r7, r1
 80076f8:	8812      	ldrh	r2, [r2, #0]
 80076fa:	3202      	adds	r2, #2
 80076fc:	801a      	strh	r2, [r3, #0]
    uint8_to_ascii_buffer(crc & 0xFF, &p_destination_buffer[index]);
 80076fe:	197b      	adds	r3, r7, r5
 8007700:	881b      	ldrh	r3, [r3, #0]
 8007702:	b2d8      	uxtb	r0, r3
 8007704:	000c      	movs	r4, r1
 8007706:	187b      	adds	r3, r7, r1
 8007708:	881b      	ldrh	r3, [r3, #0]
 800770a:	683a      	ldr	r2, [r7, #0]
 800770c:	18d3      	adds	r3, r2, r3
 800770e:	0019      	movs	r1, r3
 8007710:	f000 fba2 	bl	8007e58 <uint8_to_ascii_buffer>
    index += 2;
 8007714:	0020      	movs	r0, r4
 8007716:	183b      	adds	r3, r7, r0
 8007718:	183a      	adds	r2, r7, r0
 800771a:	8812      	ldrh	r2, [r2, #0]
 800771c:	3202      	adds	r2, #2
 800771e:	801a      	strh	r2, [r3, #0]

    p_destination_buffer[index++] = ASTRONODE_TRANSPORT_ETX;
 8007720:	183b      	adds	r3, r7, r0
 8007722:	881b      	ldrh	r3, [r3, #0]
 8007724:	183a      	adds	r2, r7, r0
 8007726:	1c59      	adds	r1, r3, #1
 8007728:	8011      	strh	r1, [r2, #0]
 800772a:	001a      	movs	r2, r3
 800772c:	683b      	ldr	r3, [r7, #0]
 800772e:	189b      	adds	r3, r3, r2
 8007730:	2203      	movs	r2, #3
 8007732:	701a      	strb	r2, [r3, #0]

    return index;
 8007734:	183b      	adds	r3, r7, r0
 8007736:	881b      	ldrh	r3, [r3, #0]
}
 8007738:	0018      	movs	r0, r3
 800773a:	46bd      	mov	sp, r7
 800773c:	b005      	add	sp, #20
 800773e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8007740:	0000ffff 	.word	0x0000ffff

08007744 <astronode_decode_answer_transport>:

static return_status_t astronode_decode_answer_transport(uint8_t *p_source_buffer, uint16_t length_buffer, astronode_app_msg_t *p_destination_message)
{
 8007744:	b5f0      	push	{r4, r5, r6, r7, lr}
 8007746:	b089      	sub	sp, #36	; 0x24
 8007748:	af00      	add	r7, sp, #0
 800774a:	60f8      	str	r0, [r7, #12]
 800774c:	607a      	str	r2, [r7, #4]
 800774e:	230a      	movs	r3, #10
 8007750:	18fb      	adds	r3, r7, r3
 8007752:	1c0a      	adds	r2, r1, #0
 8007754:	801a      	strh	r2, [r3, #0]
    if (p_source_buffer[0] != ASTRONODE_TRANSPORT_STX)
 8007756:	68fb      	ldr	r3, [r7, #12]
 8007758:	781b      	ldrb	r3, [r3, #0]
 800775a:	2b02      	cmp	r3, #2
 800775c:	d005      	beq.n	800776a <astronode_decode_answer_transport+0x26>
    {
        send_debug_logs("ERROR : Message received from the Astronode does not start with STX character.");
 800775e:	4bbd      	ldr	r3, [pc, #756]	; (8007a54 <astronode_decode_answer_transport+0x310>)
 8007760:	0018      	movs	r0, r3
 8007762:	f7fb f901 	bl	8002968 <send_debug_logs>
        return RS_FAILURE;
 8007766:	2300      	movs	r3, #0
 8007768:	e170      	b.n	8007a4c <astronode_decode_answer_transport+0x308>
    }

    if (length_buffer % 2 == 1 || length_buffer < 8) // 8: STX, ETX, 2 x opcode, 4 x CRC
 800776a:	210a      	movs	r1, #10
 800776c:	187b      	adds	r3, r7, r1
 800776e:	881b      	ldrh	r3, [r3, #0]
 8007770:	2201      	movs	r2, #1
 8007772:	4013      	ands	r3, r2
 8007774:	b29b      	uxth	r3, r3
 8007776:	2b00      	cmp	r3, #0
 8007778:	d103      	bne.n	8007782 <astronode_decode_answer_transport+0x3e>
 800777a:	187b      	adds	r3, r7, r1
 800777c:	881b      	ldrh	r3, [r3, #0]
 800777e:	2b07      	cmp	r3, #7
 8007780:	d805      	bhi.n	800778e <astronode_decode_answer_transport+0x4a>
    {
        send_debug_logs("ERROR : Message received from the Astronode is missing at least one character.");
 8007782:	4bb5      	ldr	r3, [pc, #724]	; (8007a58 <astronode_decode_answer_transport+0x314>)
 8007784:	0018      	movs	r0, r3
 8007786:	f7fb f8ef 	bl	8002968 <send_debug_logs>
        return RS_FAILURE;
 800778a:	2300      	movs	r3, #0
 800778c:	e15e      	b.n	8007a4c <astronode_decode_answer_transport+0x308>
    }

    p_destination_message->payload_len = (length_buffer - 8) / 2;
 800778e:	230a      	movs	r3, #10
 8007790:	18fb      	adds	r3, r7, r3
 8007792:	881b      	ldrh	r3, [r3, #0]
 8007794:	3b08      	subs	r3, #8
 8007796:	2b00      	cmp	r3, #0
 8007798:	da00      	bge.n	800779c <astronode_decode_answer_transport+0x58>
 800779a:	3301      	adds	r3, #1
 800779c:	105b      	asrs	r3, r3, #1
 800779e:	b299      	uxth	r1, r3
 80077a0:	687b      	ldr	r3, [r7, #4]
 80077a2:	22c4      	movs	r2, #196	; 0xc4
 80077a4:	5299      	strh	r1, [r3, r2]

    if (p_source_buffer[length_buffer - 1] != ASTRONODE_TRANSPORT_ETX)
 80077a6:	230a      	movs	r3, #10
 80077a8:	18fb      	adds	r3, r7, r3
 80077aa:	881b      	ldrh	r3, [r3, #0]
 80077ac:	3b01      	subs	r3, #1
 80077ae:	68fa      	ldr	r2, [r7, #12]
 80077b0:	18d3      	adds	r3, r2, r3
 80077b2:	781b      	ldrb	r3, [r3, #0]
 80077b4:	2b03      	cmp	r3, #3
 80077b6:	d005      	beq.n	80077c4 <astronode_decode_answer_transport+0x80>
    {
        send_debug_logs("ERROR : Message received from the Astronode does not end with ETX character.");
 80077b8:	4ba8      	ldr	r3, [pc, #672]	; (8007a5c <astronode_decode_answer_transport+0x318>)
 80077ba:	0018      	movs	r0, r3
 80077bc:	f7fb f8d4 	bl	8002968 <send_debug_logs>
        return RS_FAILURE;
 80077c0:	2300      	movs	r3, #0
 80077c2:	e143      	b.n	8007a4c <astronode_decode_answer_transport+0x308>
    }

    uint8_t nibble_high = 0;
 80077c4:	2117      	movs	r1, #23
 80077c6:	187b      	adds	r3, r7, r1
 80077c8:	2200      	movs	r2, #0
 80077ca:	701a      	strb	r2, [r3, #0]
    uint8_t nibble_low = 0;
 80077cc:	2416      	movs	r4, #22
 80077ce:	193b      	adds	r3, r7, r4
 80077d0:	2200      	movs	r2, #0
 80077d2:	701a      	strb	r2, [r3, #0]

    // Op code
    if (ascii_to_value(p_source_buffer[1], &nibble_high) == false
 80077d4:	68fb      	ldr	r3, [r7, #12]
 80077d6:	3301      	adds	r3, #1
 80077d8:	781b      	ldrb	r3, [r3, #0]
 80077da:	187a      	adds	r2, r7, r1
 80077dc:	0011      	movs	r1, r2
 80077de:	0018      	movs	r0, r3
 80077e0:	f7ff fee2 	bl	80075a8 <ascii_to_value>
 80077e4:	0003      	movs	r3, r0
 80077e6:	001a      	movs	r2, r3
 80077e8:	2301      	movs	r3, #1
 80077ea:	4053      	eors	r3, r2
 80077ec:	b2db      	uxtb	r3, r3
 80077ee:	2b00      	cmp	r3, #0
 80077f0:	d10e      	bne.n	8007810 <astronode_decode_answer_transport+0xcc>
        || ascii_to_value(p_source_buffer[2], &nibble_low) == false)
 80077f2:	68fb      	ldr	r3, [r7, #12]
 80077f4:	3302      	adds	r3, #2
 80077f6:	781b      	ldrb	r3, [r3, #0]
 80077f8:	193a      	adds	r2, r7, r4
 80077fa:	0011      	movs	r1, r2
 80077fc:	0018      	movs	r0, r3
 80077fe:	f7ff fed3 	bl	80075a8 <ascii_to_value>
 8007802:	0003      	movs	r3, r0
 8007804:	001a      	movs	r2, r3
 8007806:	2301      	movs	r3, #1
 8007808:	4053      	eors	r3, r2
 800780a:	b2db      	uxtb	r3, r3
 800780c:	2b00      	cmp	r3, #0
 800780e:	d005      	beq.n	800781c <astronode_decode_answer_transport+0xd8>
    {
        send_debug_logs("ERROR : Message received from the Astronode contains a non-ASCII character.");
 8007810:	4b93      	ldr	r3, [pc, #588]	; (8007a60 <astronode_decode_answer_transport+0x31c>)
 8007812:	0018      	movs	r0, r3
 8007814:	f7fb f8a8 	bl	8002968 <send_debug_logs>
        return RS_FAILURE;
 8007818:	2300      	movs	r3, #0
 800781a:	e117      	b.n	8007a4c <astronode_decode_answer_transport+0x308>
    }

    p_destination_message->op_code = (nibble_high << 4) + nibble_low;
 800781c:	2317      	movs	r3, #23
 800781e:	18fb      	adds	r3, r7, r3
 8007820:	781b      	ldrb	r3, [r3, #0]
 8007822:	011b      	lsls	r3, r3, #4
 8007824:	b2da      	uxtb	r2, r3
 8007826:	2316      	movs	r3, #22
 8007828:	18fb      	adds	r3, r7, r3
 800782a:	781b      	ldrb	r3, [r3, #0]
 800782c:	18d3      	adds	r3, r2, r3
 800782e:	b2da      	uxtb	r2, r3
 8007830:	687b      	ldr	r3, [r7, #4]
 8007832:	701a      	strb	r2, [r3, #0]

    // Payload
    for (uint16_t i = 3, j = 0; i < length_buffer - 5; i += 2)
 8007834:	231e      	movs	r3, #30
 8007836:	18fb      	adds	r3, r7, r3
 8007838:	2203      	movs	r2, #3
 800783a:	801a      	strh	r2, [r3, #0]
 800783c:	231c      	movs	r3, #28
 800783e:	18fb      	adds	r3, r7, r3
 8007840:	2200      	movs	r2, #0
 8007842:	801a      	strh	r2, [r3, #0]
 8007844:	e045      	b.n	80078d2 <astronode_decode_answer_transport+0x18e>
    {
        if (ascii_to_value(p_source_buffer[i], &nibble_high) == false
 8007846:	241e      	movs	r4, #30
 8007848:	193b      	adds	r3, r7, r4
 800784a:	881b      	ldrh	r3, [r3, #0]
 800784c:	68fa      	ldr	r2, [r7, #12]
 800784e:	18d3      	adds	r3, r2, r3
 8007850:	781b      	ldrb	r3, [r3, #0]
 8007852:	2217      	movs	r2, #23
 8007854:	18ba      	adds	r2, r7, r2
 8007856:	0011      	movs	r1, r2
 8007858:	0018      	movs	r0, r3
 800785a:	f7ff fea5 	bl	80075a8 <ascii_to_value>
 800785e:	0003      	movs	r3, r0
 8007860:	001a      	movs	r2, r3
 8007862:	2301      	movs	r3, #1
 8007864:	4053      	eors	r3, r2
 8007866:	b2db      	uxtb	r3, r3
 8007868:	2b00      	cmp	r3, #0
 800786a:	d112      	bne.n	8007892 <astronode_decode_answer_transport+0x14e>
            || ascii_to_value(p_source_buffer[i + 1], &nibble_low) == false)
 800786c:	193b      	adds	r3, r7, r4
 800786e:	881b      	ldrh	r3, [r3, #0]
 8007870:	3301      	adds	r3, #1
 8007872:	68fa      	ldr	r2, [r7, #12]
 8007874:	18d3      	adds	r3, r2, r3
 8007876:	781b      	ldrb	r3, [r3, #0]
 8007878:	2216      	movs	r2, #22
 800787a:	18ba      	adds	r2, r7, r2
 800787c:	0011      	movs	r1, r2
 800787e:	0018      	movs	r0, r3
 8007880:	f7ff fe92 	bl	80075a8 <ascii_to_value>
 8007884:	0003      	movs	r3, r0
 8007886:	001a      	movs	r2, r3
 8007888:	2301      	movs	r3, #1
 800788a:	4053      	eors	r3, r2
 800788c:	b2db      	uxtb	r3, r3
 800788e:	2b00      	cmp	r3, #0
 8007890:	d005      	beq.n	800789e <astronode_decode_answer_transport+0x15a>
        {
            send_debug_logs("ERROR : Message received from the Astronode contains a non-ASCII character.");
 8007892:	4b73      	ldr	r3, [pc, #460]	; (8007a60 <astronode_decode_answer_transport+0x31c>)
 8007894:	0018      	movs	r0, r3
 8007896:	f7fb f867 	bl	8002968 <send_debug_logs>
            return RS_FAILURE;
 800789a:	2300      	movs	r3, #0
 800789c:	e0d6      	b.n	8007a4c <astronode_decode_answer_transport+0x308>
        }

        p_destination_message->p_payload[j++] = (nibble_high << 4) + nibble_low;
 800789e:	2317      	movs	r3, #23
 80078a0:	18fb      	adds	r3, r7, r3
 80078a2:	781b      	ldrb	r3, [r3, #0]
 80078a4:	011b      	lsls	r3, r3, #4
 80078a6:	b2d9      	uxtb	r1, r3
 80078a8:	2316      	movs	r3, #22
 80078aa:	18fb      	adds	r3, r7, r3
 80078ac:	781a      	ldrb	r2, [r3, #0]
 80078ae:	201c      	movs	r0, #28
 80078b0:	183b      	adds	r3, r7, r0
 80078b2:	881b      	ldrh	r3, [r3, #0]
 80078b4:	1838      	adds	r0, r7, r0
 80078b6:	1c5c      	adds	r4, r3, #1
 80078b8:	8004      	strh	r4, [r0, #0]
 80078ba:	0018      	movs	r0, r3
 80078bc:	188b      	adds	r3, r1, r2
 80078be:	b2da      	uxtb	r2, r3
 80078c0:	687b      	ldr	r3, [r7, #4]
 80078c2:	181b      	adds	r3, r3, r0
 80078c4:	705a      	strb	r2, [r3, #1]
    for (uint16_t i = 3, j = 0; i < length_buffer - 5; i += 2)
 80078c6:	221e      	movs	r2, #30
 80078c8:	18bb      	adds	r3, r7, r2
 80078ca:	18ba      	adds	r2, r7, r2
 80078cc:	8812      	ldrh	r2, [r2, #0]
 80078ce:	3202      	adds	r2, #2
 80078d0:	801a      	strh	r2, [r3, #0]
 80078d2:	231e      	movs	r3, #30
 80078d4:	18fb      	adds	r3, r7, r3
 80078d6:	881a      	ldrh	r2, [r3, #0]
 80078d8:	260a      	movs	r6, #10
 80078da:	19bb      	adds	r3, r7, r6
 80078dc:	881b      	ldrh	r3, [r3, #0]
 80078de:	3b05      	subs	r3, #5
 80078e0:	429a      	cmp	r2, r3
 80078e2:	dbb0      	blt.n	8007846 <astronode_decode_answer_transport+0x102>
    }

    // CRC
    uint16_t crc_calculated = calculate_crc((const uint8_t *)&p_destination_message->op_code, 1, 0xFFFF);
 80078e4:	687b      	ldr	r3, [r7, #4]
 80078e6:	251a      	movs	r5, #26
 80078e8:	197c      	adds	r4, r7, r5
 80078ea:	4a5e      	ldr	r2, [pc, #376]	; (8007a64 <astronode_decode_answer_transport+0x320>)
 80078ec:	2101      	movs	r1, #1
 80078ee:	0018      	movs	r0, r3
 80078f0:	f000 f91e 	bl	8007b30 <calculate_crc>
 80078f4:	0003      	movs	r3, r0
 80078f6:	8023      	strh	r3, [r4, #0]
    crc_calculated = calculate_crc((const uint8_t *)&p_destination_message->p_payload, p_destination_message->payload_len, crc_calculated);
 80078f8:	687b      	ldr	r3, [r7, #4]
 80078fa:	1c58      	adds	r0, r3, #1
 80078fc:	687b      	ldr	r3, [r7, #4]
 80078fe:	22c4      	movs	r2, #196	; 0xc4
 8007900:	5a99      	ldrh	r1, [r3, r2]
 8007902:	197c      	adds	r4, r7, r5
 8007904:	197b      	adds	r3, r7, r5
 8007906:	881b      	ldrh	r3, [r3, #0]
 8007908:	001a      	movs	r2, r3
 800790a:	f000 f911 	bl	8007b30 <calculate_crc>
 800790e:	0003      	movs	r3, r0
 8007910:	8023      	strh	r3, [r4, #0]
    crc_calculated = ((crc_calculated << 8) & 0xff00) | ((crc_calculated >> 8) & 0x00ff);
 8007912:	197b      	adds	r3, r7, r5
 8007914:	881b      	ldrh	r3, [r3, #0]
 8007916:	021b      	lsls	r3, r3, #8
 8007918:	b21a      	sxth	r2, r3
 800791a:	0029      	movs	r1, r5
 800791c:	197b      	adds	r3, r7, r5
 800791e:	881b      	ldrh	r3, [r3, #0]
 8007920:	0a1b      	lsrs	r3, r3, #8
 8007922:	b29b      	uxth	r3, r3
 8007924:	b21b      	sxth	r3, r3
 8007926:	4313      	orrs	r3, r2
 8007928:	b21a      	sxth	r2, r3
 800792a:	187b      	adds	r3, r7, r1
 800792c:	801a      	strh	r2, [r3, #0]


    if (ascii_to_value(p_source_buffer[length_buffer - 5], &nibble_high) == false
 800792e:	19bb      	adds	r3, r7, r6
 8007930:	881b      	ldrh	r3, [r3, #0]
 8007932:	3b05      	subs	r3, #5
 8007934:	68fa      	ldr	r2, [r7, #12]
 8007936:	18d3      	adds	r3, r2, r3
 8007938:	781b      	ldrb	r3, [r3, #0]
 800793a:	2217      	movs	r2, #23
 800793c:	18ba      	adds	r2, r7, r2
 800793e:	0011      	movs	r1, r2
 8007940:	0018      	movs	r0, r3
 8007942:	f7ff fe31 	bl	80075a8 <ascii_to_value>
 8007946:	0003      	movs	r3, r0
 8007948:	001a      	movs	r2, r3
 800794a:	2301      	movs	r3, #1
 800794c:	4053      	eors	r3, r2
 800794e:	b2db      	uxtb	r3, r3
 8007950:	2b00      	cmp	r3, #0
 8007952:	d112      	bne.n	800797a <astronode_decode_answer_transport+0x236>
        || ascii_to_value(p_source_buffer[length_buffer - 4], &nibble_low) == false)
 8007954:	19bb      	adds	r3, r7, r6
 8007956:	881b      	ldrh	r3, [r3, #0]
 8007958:	3b04      	subs	r3, #4
 800795a:	68fa      	ldr	r2, [r7, #12]
 800795c:	18d3      	adds	r3, r2, r3
 800795e:	781b      	ldrb	r3, [r3, #0]
 8007960:	2216      	movs	r2, #22
 8007962:	18ba      	adds	r2, r7, r2
 8007964:	0011      	movs	r1, r2
 8007966:	0018      	movs	r0, r3
 8007968:	f7ff fe1e 	bl	80075a8 <ascii_to_value>
 800796c:	0003      	movs	r3, r0
 800796e:	001a      	movs	r2, r3
 8007970:	2301      	movs	r3, #1
 8007972:	4053      	eors	r3, r2
 8007974:	b2db      	uxtb	r3, r3
 8007976:	2b00      	cmp	r3, #0
 8007978:	d005      	beq.n	8007986 <astronode_decode_answer_transport+0x242>
    {
        send_debug_logs("ERROR : Message received from the Astronode contains a non-ASCII character.");
 800797a:	4b39      	ldr	r3, [pc, #228]	; (8007a60 <astronode_decode_answer_transport+0x31c>)
 800797c:	0018      	movs	r0, r3
 800797e:	f7fa fff3 	bl	8002968 <send_debug_logs>
        return RS_FAILURE;
 8007982:	2300      	movs	r3, #0
 8007984:	e062      	b.n	8007a4c <astronode_decode_answer_transport+0x308>
    }

    uint16_t crc_received = (nibble_high << 12) + (nibble_low << 8);
 8007986:	2017      	movs	r0, #23
 8007988:	183b      	adds	r3, r7, r0
 800798a:	781b      	ldrb	r3, [r3, #0]
 800798c:	b29b      	uxth	r3, r3
 800798e:	031b      	lsls	r3, r3, #12
 8007990:	b299      	uxth	r1, r3
 8007992:	2416      	movs	r4, #22
 8007994:	193b      	adds	r3, r7, r4
 8007996:	781b      	ldrb	r3, [r3, #0]
 8007998:	b29b      	uxth	r3, r3
 800799a:	021b      	lsls	r3, r3, #8
 800799c:	b29a      	uxth	r2, r3
 800799e:	2318      	movs	r3, #24
 80079a0:	18fb      	adds	r3, r7, r3
 80079a2:	188a      	adds	r2, r1, r2
 80079a4:	801a      	strh	r2, [r3, #0]

    if (ascii_to_value(p_source_buffer[length_buffer - 3], &nibble_high) == false
 80079a6:	250a      	movs	r5, #10
 80079a8:	197b      	adds	r3, r7, r5
 80079aa:	881b      	ldrh	r3, [r3, #0]
 80079ac:	3b03      	subs	r3, #3
 80079ae:	68fa      	ldr	r2, [r7, #12]
 80079b0:	18d3      	adds	r3, r2, r3
 80079b2:	781b      	ldrb	r3, [r3, #0]
 80079b4:	183a      	adds	r2, r7, r0
 80079b6:	0011      	movs	r1, r2
 80079b8:	0018      	movs	r0, r3
 80079ba:	f7ff fdf5 	bl	80075a8 <ascii_to_value>
 80079be:	0003      	movs	r3, r0
 80079c0:	001a      	movs	r2, r3
 80079c2:	2301      	movs	r3, #1
 80079c4:	4053      	eors	r3, r2
 80079c6:	b2db      	uxtb	r3, r3
 80079c8:	2b00      	cmp	r3, #0
 80079ca:	d111      	bne.n	80079f0 <astronode_decode_answer_transport+0x2ac>
        || ascii_to_value(p_source_buffer[length_buffer - 2], &nibble_low) == false)
 80079cc:	197b      	adds	r3, r7, r5
 80079ce:	881b      	ldrh	r3, [r3, #0]
 80079d0:	3b02      	subs	r3, #2
 80079d2:	68fa      	ldr	r2, [r7, #12]
 80079d4:	18d3      	adds	r3, r2, r3
 80079d6:	781b      	ldrb	r3, [r3, #0]
 80079d8:	193a      	adds	r2, r7, r4
 80079da:	0011      	movs	r1, r2
 80079dc:	0018      	movs	r0, r3
 80079de:	f7ff fde3 	bl	80075a8 <ascii_to_value>
 80079e2:	0003      	movs	r3, r0
 80079e4:	001a      	movs	r2, r3
 80079e6:	2301      	movs	r3, #1
 80079e8:	4053      	eors	r3, r2
 80079ea:	b2db      	uxtb	r3, r3
 80079ec:	2b00      	cmp	r3, #0
 80079ee:	d005      	beq.n	80079fc <astronode_decode_answer_transport+0x2b8>
    {
        send_debug_logs("ERROR : Message received from the Astronode contains a non-ASCII character.");
 80079f0:	4b1b      	ldr	r3, [pc, #108]	; (8007a60 <astronode_decode_answer_transport+0x31c>)
 80079f2:	0018      	movs	r0, r3
 80079f4:	f7fa ffb8 	bl	8002968 <send_debug_logs>
        return RS_FAILURE;
 80079f8:	2300      	movs	r3, #0
 80079fa:	e027      	b.n	8007a4c <astronode_decode_answer_transport+0x308>
    }

    crc_received += (nibble_high << 4) + nibble_low;
 80079fc:	2317      	movs	r3, #23
 80079fe:	18fb      	adds	r3, r7, r3
 8007a00:	781b      	ldrb	r3, [r3, #0]
 8007a02:	b29b      	uxth	r3, r3
 8007a04:	011b      	lsls	r3, r3, #4
 8007a06:	b29a      	uxth	r2, r3
 8007a08:	2316      	movs	r3, #22
 8007a0a:	18fb      	adds	r3, r7, r3
 8007a0c:	781b      	ldrb	r3, [r3, #0]
 8007a0e:	b29b      	uxth	r3, r3
 8007a10:	18d3      	adds	r3, r2, r3
 8007a12:	b299      	uxth	r1, r3
 8007a14:	2018      	movs	r0, #24
 8007a16:	183b      	adds	r3, r7, r0
 8007a18:	183a      	adds	r2, r7, r0
 8007a1a:	8812      	ldrh	r2, [r2, #0]
 8007a1c:	188a      	adds	r2, r1, r2
 8007a1e:	801a      	strh	r2, [r3, #0]

    if (crc_received != crc_calculated)
 8007a20:	183a      	adds	r2, r7, r0
 8007a22:	231a      	movs	r3, #26
 8007a24:	18fb      	adds	r3, r7, r3
 8007a26:	8812      	ldrh	r2, [r2, #0]
 8007a28:	881b      	ldrh	r3, [r3, #0]
 8007a2a:	429a      	cmp	r2, r3
 8007a2c:	d005      	beq.n	8007a3a <astronode_decode_answer_transport+0x2f6>
    {
        send_debug_logs("ERROR : CRC sent by the Astronode does not match the expected CRC");
 8007a2e:	4b0e      	ldr	r3, [pc, #56]	; (8007a68 <astronode_decode_answer_transport+0x324>)
 8007a30:	0018      	movs	r0, r3
 8007a32:	f7fa ff99 	bl	8002968 <send_debug_logs>
        return RS_FAILURE;
 8007a36:	2300      	movs	r3, #0
 8007a38:	e008      	b.n	8007a4c <astronode_decode_answer_transport+0x308>
    }

    if (p_destination_message->op_code == ASTRONODE_OP_CODE_ERROR)
 8007a3a:	687b      	ldr	r3, [r7, #4]
 8007a3c:	781b      	ldrb	r3, [r3, #0]
 8007a3e:	2bff      	cmp	r3, #255	; 0xff
 8007a40:	d103      	bne.n	8007a4a <astronode_decode_answer_transport+0x306>
    {
        check_for_error(p_destination_message);
 8007a42:	687b      	ldr	r3, [r7, #4]
 8007a44:	0018      	movs	r0, r3
 8007a46:	f000 f8c3 	bl	8007bd0 <check_for_error>
    }

    return RS_SUCCESS;
 8007a4a:	2301      	movs	r3, #1
}
 8007a4c:	0018      	movs	r0, r3
 8007a4e:	46bd      	mov	sp, r7
 8007a50:	b009      	add	sp, #36	; 0x24
 8007a52:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8007a54:	0800e1a0 	.word	0x0800e1a0
 8007a58:	0800e1f0 	.word	0x0800e1f0
 8007a5c:	0800e240 	.word	0x0800e240
 8007a60:	0800e290 	.word	0x0800e290
 8007a64:	0000ffff 	.word	0x0000ffff
 8007a68:	0800e2dc 	.word	0x0800e2dc

08007a6c <astronode_transport_send_receive>:

return_status_t astronode_transport_send_receive(astronode_app_msg_t *p_request, astronode_app_msg_t *p_answer)
{
 8007a6c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8007a6e:	4c2b      	ldr	r4, [pc, #172]	; (8007b1c <astronode_transport_send_receive+0xb0>)
 8007a70:	44a5      	add	sp, r4
 8007a72:	af00      	add	r7, sp, #0
 8007a74:	6078      	str	r0, [r7, #4]
 8007a76:	6039      	str	r1, [r7, #0]
    uint8_t request_transport[ASTRONODE_TRANSPORT_MSG_MAX_LEN_BYTES] = {0};
 8007a78:	4b29      	ldr	r3, [pc, #164]	; (8007b20 <astronode_transport_send_receive+0xb4>)
 8007a7a:	25ca      	movs	r5, #202	; 0xca
 8007a7c:	00ad      	lsls	r5, r5, #2
 8007a7e:	195b      	adds	r3, r3, r5
 8007a80:	19db      	adds	r3, r3, r7
 8007a82:	2200      	movs	r2, #0
 8007a84:	601a      	str	r2, [r3, #0]
 8007a86:	3304      	adds	r3, #4
 8007a88:	22c4      	movs	r2, #196	; 0xc4
 8007a8a:	0052      	lsls	r2, r2, #1
 8007a8c:	2100      	movs	r1, #0
 8007a8e:	0018      	movs	r0, r3
 8007a90:	f000 fda4 	bl	80085dc <memset>
    uint8_t answer_transport[ASTRONODE_TRANSPORT_MSG_MAX_LEN_BYTES] = {0};
 8007a94:	4b23      	ldr	r3, [pc, #140]	; (8007b24 <astronode_transport_send_receive+0xb8>)
 8007a96:	195b      	adds	r3, r3, r5
 8007a98:	19db      	adds	r3, r3, r7
 8007a9a:	2200      	movs	r2, #0
 8007a9c:	601a      	str	r2, [r3, #0]
 8007a9e:	3304      	adds	r3, #4
 8007aa0:	22c4      	movs	r2, #196	; 0xc4
 8007aa2:	0052      	lsls	r2, r2, #1
 8007aa4:	2100      	movs	r1, #0
 8007aa6:	0018      	movs	r0, r3
 8007aa8:	f000 fd98 	bl	80085dc <memset>
    uint16_t answer_length =  0;
 8007aac:	4b1e      	ldr	r3, [pc, #120]	; (8007b28 <astronode_transport_send_receive+0xbc>)
 8007aae:	195b      	adds	r3, r3, r5
 8007ab0:	19db      	adds	r3, r3, r7
 8007ab2:	2200      	movs	r2, #0
 8007ab4:	801a      	strh	r2, [r3, #0]

    uint16_t request_length = astronode_create_request_transport(p_request, request_transport);
 8007ab6:	4e1d      	ldr	r6, [pc, #116]	; (8007b2c <astronode_transport_send_receive+0xc0>)
 8007ab8:	19bc      	adds	r4, r7, r6
 8007aba:	23cc      	movs	r3, #204	; 0xcc
 8007abc:	005b      	lsls	r3, r3, #1
 8007abe:	18fa      	adds	r2, r7, r3
 8007ac0:	687b      	ldr	r3, [r7, #4]
 8007ac2:	0011      	movs	r1, r2
 8007ac4:	0018      	movs	r0, r3
 8007ac6:	f7ff fd9b 	bl	8007600 <astronode_create_request_transport>
 8007aca:	0003      	movs	r3, r0
 8007acc:	8023      	strh	r3, [r4, #0]

    send_astronode_request(request_transport, request_length);
 8007ace:	19bb      	adds	r3, r7, r6
 8007ad0:	881a      	ldrh	r2, [r3, #0]
 8007ad2:	23cc      	movs	r3, #204	; 0xcc
 8007ad4:	005b      	lsls	r3, r3, #1
 8007ad6:	18fb      	adds	r3, r7, r3
 8007ad8:	0011      	movs	r1, r2
 8007ada:	0018      	movs	r0, r3
 8007adc:	f7fa ff8e 	bl	80029fc <send_astronode_request>
    if(receive_astronode_answer(answer_transport, &answer_length) == RS_SUCCESS)
 8007ae0:	230a      	movs	r3, #10
 8007ae2:	18fa      	adds	r2, r7, r3
 8007ae4:	240c      	movs	r4, #12
 8007ae6:	193b      	adds	r3, r7, r4
 8007ae8:	0011      	movs	r1, r2
 8007aea:	0018      	movs	r0, r3
 8007aec:	f000 f92c 	bl	8007d48 <receive_astronode_answer>
 8007af0:	0003      	movs	r3, r0
 8007af2:	2b01      	cmp	r3, #1
 8007af4:	d10a      	bne.n	8007b0c <astronode_transport_send_receive+0xa0>
    {
        return astronode_decode_answer_transport(answer_transport, answer_length, p_answer);
 8007af6:	4b0c      	ldr	r3, [pc, #48]	; (8007b28 <astronode_transport_send_receive+0xbc>)
 8007af8:	195b      	adds	r3, r3, r5
 8007afa:	19db      	adds	r3, r3, r7
 8007afc:	8819      	ldrh	r1, [r3, #0]
 8007afe:	683a      	ldr	r2, [r7, #0]
 8007b00:	193b      	adds	r3, r7, r4
 8007b02:	0018      	movs	r0, r3
 8007b04:	f7ff fe1e 	bl	8007744 <astronode_decode_answer_transport>
 8007b08:	0003      	movs	r3, r0
 8007b0a:	e000      	b.n	8007b0e <astronode_transport_send_receive+0xa2>
    }
    else
    {
        return RS_FAILURE;
 8007b0c:	2300      	movs	r3, #0
    }
}
 8007b0e:	0018      	movs	r0, r3
 8007b10:	46bd      	mov	sp, r7
 8007b12:	23cb      	movs	r3, #203	; 0xcb
 8007b14:	009b      	lsls	r3, r3, #2
 8007b16:	449d      	add	sp, r3
 8007b18:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8007b1a:	46c0      	nop			; (mov r8, r8)
 8007b1c:	fffffcd4 	.word	0xfffffcd4
 8007b20:	fffffe70 	.word	0xfffffe70
 8007b24:	fffffce4 	.word	0xfffffce4
 8007b28:	fffffce2 	.word	0xfffffce2
 8007b2c:	00000326 	.word	0x00000326

08007b30 <calculate_crc>:

static uint16_t calculate_crc(const uint8_t *p_data, uint16_t data_len, uint16_t init_value)
{
 8007b30:	b590      	push	{r4, r7, lr}
 8007b32:	b085      	sub	sp, #20
 8007b34:	af00      	add	r7, sp, #0
 8007b36:	6078      	str	r0, [r7, #4]
 8007b38:	0008      	movs	r0, r1
 8007b3a:	0011      	movs	r1, r2
 8007b3c:	1cbb      	adds	r3, r7, #2
 8007b3e:	1c02      	adds	r2, r0, #0
 8007b40:	801a      	strh	r2, [r3, #0]
 8007b42:	003b      	movs	r3, r7
 8007b44:	1c0a      	adds	r2, r1, #0
 8007b46:	801a      	strh	r2, [r3, #0]
    uint16_t crc = init_value;
 8007b48:	230e      	movs	r3, #14
 8007b4a:	18fb      	adds	r3, r7, r3
 8007b4c:	003a      	movs	r2, r7
 8007b4e:	8812      	ldrh	r2, [r2, #0]
 8007b50:	801a      	strh	r2, [r3, #0]

    while (data_len--)
 8007b52:	e02e      	b.n	8007bb2 <calculate_crc+0x82>
    {
        uint16_t x = crc >> 8 ^ *p_data++;
 8007b54:	240e      	movs	r4, #14
 8007b56:	193b      	adds	r3, r7, r4
 8007b58:	881b      	ldrh	r3, [r3, #0]
 8007b5a:	0a1b      	lsrs	r3, r3, #8
 8007b5c:	b299      	uxth	r1, r3
 8007b5e:	687b      	ldr	r3, [r7, #4]
 8007b60:	1c5a      	adds	r2, r3, #1
 8007b62:	607a      	str	r2, [r7, #4]
 8007b64:	781b      	ldrb	r3, [r3, #0]
 8007b66:	b29a      	uxth	r2, r3
 8007b68:	200c      	movs	r0, #12
 8007b6a:	183b      	adds	r3, r7, r0
 8007b6c:	404a      	eors	r2, r1
 8007b6e:	801a      	strh	r2, [r3, #0]
        x ^= x >> 4;
 8007b70:	183b      	adds	r3, r7, r0
 8007b72:	881b      	ldrh	r3, [r3, #0]
 8007b74:	091b      	lsrs	r3, r3, #4
 8007b76:	b299      	uxth	r1, r3
 8007b78:	183b      	adds	r3, r7, r0
 8007b7a:	183a      	adds	r2, r7, r0
 8007b7c:	8812      	ldrh	r2, [r2, #0]
 8007b7e:	404a      	eors	r2, r1
 8007b80:	801a      	strh	r2, [r3, #0]
        crc = (crc << 8) ^ (x << 12) ^ (x << 5) ^ (x);
 8007b82:	0021      	movs	r1, r4
 8007b84:	187b      	adds	r3, r7, r1
 8007b86:	881b      	ldrh	r3, [r3, #0]
 8007b88:	021b      	lsls	r3, r3, #8
 8007b8a:	b21a      	sxth	r2, r3
 8007b8c:	183b      	adds	r3, r7, r0
 8007b8e:	881b      	ldrh	r3, [r3, #0]
 8007b90:	031b      	lsls	r3, r3, #12
 8007b92:	b21b      	sxth	r3, r3
 8007b94:	4053      	eors	r3, r2
 8007b96:	b21a      	sxth	r2, r3
 8007b98:	183b      	adds	r3, r7, r0
 8007b9a:	881b      	ldrh	r3, [r3, #0]
 8007b9c:	015b      	lsls	r3, r3, #5
 8007b9e:	b21b      	sxth	r3, r3
 8007ba0:	4053      	eors	r3, r2
 8007ba2:	b21a      	sxth	r2, r3
 8007ba4:	183b      	adds	r3, r7, r0
 8007ba6:	2000      	movs	r0, #0
 8007ba8:	5e1b      	ldrsh	r3, [r3, r0]
 8007baa:	4053      	eors	r3, r2
 8007bac:	b21a      	sxth	r2, r3
 8007bae:	187b      	adds	r3, r7, r1
 8007bb0:	801a      	strh	r2, [r3, #0]
    while (data_len--)
 8007bb2:	1cbb      	adds	r3, r7, #2
 8007bb4:	881b      	ldrh	r3, [r3, #0]
 8007bb6:	1cba      	adds	r2, r7, #2
 8007bb8:	1e59      	subs	r1, r3, #1
 8007bba:	8011      	strh	r1, [r2, #0]
 8007bbc:	2b00      	cmp	r3, #0
 8007bbe:	d1c9      	bne.n	8007b54 <calculate_crc+0x24>
    }
    return crc;
 8007bc0:	230e      	movs	r3, #14
 8007bc2:	18fb      	adds	r3, r7, r3
 8007bc4:	881b      	ldrh	r3, [r3, #0]
}
 8007bc6:	0018      	movs	r0, r3
 8007bc8:	46bd      	mov	sp, r7
 8007bca:	b005      	add	sp, #20
 8007bcc:	bd90      	pop	{r4, r7, pc}
	...

08007bd0 <check_for_error>:

static void check_for_error(astronode_app_msg_t *p_answer)
{
 8007bd0:	b580      	push	{r7, lr}
 8007bd2:	b084      	sub	sp, #16
 8007bd4:	af00      	add	r7, sp, #0
 8007bd6:	6078      	str	r0, [r7, #4]
    uint16_t error_code = p_answer->p_payload[0] + (p_answer->p_payload[1] << 8);
 8007bd8:	687b      	ldr	r3, [r7, #4]
 8007bda:	785b      	ldrb	r3, [r3, #1]
 8007bdc:	b299      	uxth	r1, r3
 8007bde:	687b      	ldr	r3, [r7, #4]
 8007be0:	789b      	ldrb	r3, [r3, #2]
 8007be2:	b29b      	uxth	r3, r3
 8007be4:	021b      	lsls	r3, r3, #8
 8007be6:	b29a      	uxth	r2, r3
 8007be8:	200e      	movs	r0, #14
 8007bea:	183b      	adds	r3, r7, r0
 8007bec:	188a      	adds	r2, r1, r2
 8007bee:	801a      	strh	r2, [r3, #0]

    switch (error_code)
 8007bf0:	183b      	adds	r3, r7, r0
 8007bf2:	881b      	ldrh	r3, [r3, #0]
 8007bf4:	4a40      	ldr	r2, [pc, #256]	; (8007cf8 <check_for_error+0x128>)
 8007bf6:	4293      	cmp	r3, r2
 8007bf8:	d100      	bne.n	8007bfc <check_for_error+0x2c>
 8007bfa:	e06f      	b.n	8007cdc <check_for_error+0x10c>
 8007bfc:	4a3e      	ldr	r2, [pc, #248]	; (8007cf8 <check_for_error+0x128>)
 8007bfe:	4293      	cmp	r3, r2
 8007c00:	dd00      	ble.n	8007c04 <check_for_error+0x34>
 8007c02:	e070      	b.n	8007ce6 <check_for_error+0x116>
 8007c04:	4a3d      	ldr	r2, [pc, #244]	; (8007cfc <check_for_error+0x12c>)
 8007c06:	4293      	cmp	r3, r2
 8007c08:	d100      	bne.n	8007c0c <check_for_error+0x3c>
 8007c0a:	e062      	b.n	8007cd2 <check_for_error+0x102>
 8007c0c:	4a3b      	ldr	r2, [pc, #236]	; (8007cfc <check_for_error+0x12c>)
 8007c0e:	4293      	cmp	r3, r2
 8007c10:	dd00      	ble.n	8007c14 <check_for_error+0x44>
 8007c12:	e068      	b.n	8007ce6 <check_for_error+0x116>
 8007c14:	4a3a      	ldr	r2, [pc, #232]	; (8007d00 <check_for_error+0x130>)
 8007c16:	4293      	cmp	r3, r2
 8007c18:	d056      	beq.n	8007cc8 <check_for_error+0xf8>
 8007c1a:	4a39      	ldr	r2, [pc, #228]	; (8007d00 <check_for_error+0x130>)
 8007c1c:	4293      	cmp	r3, r2
 8007c1e:	dd00      	ble.n	8007c22 <check_for_error+0x52>
 8007c20:	e061      	b.n	8007ce6 <check_for_error+0x116>
 8007c22:	4a38      	ldr	r2, [pc, #224]	; (8007d04 <check_for_error+0x134>)
 8007c24:	4293      	cmp	r3, r2
 8007c26:	d04a      	beq.n	8007cbe <check_for_error+0xee>
 8007c28:	4a36      	ldr	r2, [pc, #216]	; (8007d04 <check_for_error+0x134>)
 8007c2a:	4293      	cmp	r3, r2
 8007c2c:	dc5b      	bgt.n	8007ce6 <check_for_error+0x116>
 8007c2e:	4a36      	ldr	r2, [pc, #216]	; (8007d08 <check_for_error+0x138>)
 8007c30:	4293      	cmp	r3, r2
 8007c32:	d03f      	beq.n	8007cb4 <check_for_error+0xe4>
 8007c34:	4a34      	ldr	r2, [pc, #208]	; (8007d08 <check_for_error+0x138>)
 8007c36:	4293      	cmp	r3, r2
 8007c38:	dc55      	bgt.n	8007ce6 <check_for_error+0x116>
 8007c3a:	4a34      	ldr	r2, [pc, #208]	; (8007d0c <check_for_error+0x13c>)
 8007c3c:	4293      	cmp	r3, r2
 8007c3e:	d034      	beq.n	8007caa <check_for_error+0xda>
 8007c40:	4a32      	ldr	r2, [pc, #200]	; (8007d0c <check_for_error+0x13c>)
 8007c42:	4293      	cmp	r3, r2
 8007c44:	dc4f      	bgt.n	8007ce6 <check_for_error+0x116>
 8007c46:	4a32      	ldr	r2, [pc, #200]	; (8007d10 <check_for_error+0x140>)
 8007c48:	4293      	cmp	r3, r2
 8007c4a:	d029      	beq.n	8007ca0 <check_for_error+0xd0>
 8007c4c:	4a30      	ldr	r2, [pc, #192]	; (8007d10 <check_for_error+0x140>)
 8007c4e:	4293      	cmp	r3, r2
 8007c50:	dc49      	bgt.n	8007ce6 <check_for_error+0x116>
 8007c52:	4a30      	ldr	r2, [pc, #192]	; (8007d14 <check_for_error+0x144>)
 8007c54:	4293      	cmp	r3, r2
 8007c56:	d01e      	beq.n	8007c96 <check_for_error+0xc6>
 8007c58:	4a2e      	ldr	r2, [pc, #184]	; (8007d14 <check_for_error+0x144>)
 8007c5a:	4293      	cmp	r3, r2
 8007c5c:	dc43      	bgt.n	8007ce6 <check_for_error+0x116>
 8007c5e:	2222      	movs	r2, #34	; 0x22
 8007c60:	32ff      	adds	r2, #255	; 0xff
 8007c62:	4293      	cmp	r3, r2
 8007c64:	d012      	beq.n	8007c8c <check_for_error+0xbc>
 8007c66:	2291      	movs	r2, #145	; 0x91
 8007c68:	0052      	lsls	r2, r2, #1
 8007c6a:	4293      	cmp	r3, r2
 8007c6c:	da3b      	bge.n	8007ce6 <check_for_error+0x116>
 8007c6e:	2b01      	cmp	r3, #1
 8007c70:	d002      	beq.n	8007c78 <check_for_error+0xa8>
 8007c72:	2b11      	cmp	r3, #17
 8007c74:	d005      	beq.n	8007c82 <check_for_error+0xb2>
 8007c76:	e036      	b.n	8007ce6 <check_for_error+0x116>
    {
        case ASTRONODE_ERR_CODE_CRC_NOT_VALID:
            send_debug_logs("[ERROR] CRC_NOT_VALID : Discrepancy between provided CRC and expected CRC.");
 8007c78:	4b27      	ldr	r3, [pc, #156]	; (8007d18 <check_for_error+0x148>)
 8007c7a:	0018      	movs	r0, r3
 8007c7c:	f7fa fe74 	bl	8002968 <send_debug_logs>
            break;
 8007c80:	e036      	b.n	8007cf0 <check_for_error+0x120>

        case ASTRONODE_ERR_CODE_LENGTH_NOT_VALID:
            send_debug_logs("[ERROR] LENGTH_NOT_VALID : Message exceeds the maximum length allowed by the given operation code.");
 8007c82:	4b26      	ldr	r3, [pc, #152]	; (8007d1c <check_for_error+0x14c>)
 8007c84:	0018      	movs	r0, r3
 8007c86:	f7fa fe6f 	bl	8002968 <send_debug_logs>
            break;
 8007c8a:	e031      	b.n	8007cf0 <check_for_error+0x120>

        case ASTRONODE_ERR_CODE_OPCODE_NOT_VALID:
            send_debug_logs("[ERROR] OPCODE_NOT_VALID : Invalid operation code used.");
 8007c8c:	4b24      	ldr	r3, [pc, #144]	; (8007d20 <check_for_error+0x150>)
 8007c8e:	0018      	movs	r0, r3
 8007c90:	f7fa fe6a 	bl	8002968 <send_debug_logs>
            break;
 8007c94:	e02c      	b.n	8007cf0 <check_for_error+0x120>

        case ASTRONODE_ERR_CODE_FORMAT_NOT_VALID:
            send_debug_logs("[ERROR] FORMAT_NOT_VALID : At least one of the fields (SSID, password, token) is not composed of exclusively printable standard ASCII characters (0x20 to 0x7E).");
 8007c96:	4b23      	ldr	r3, [pc, #140]	; (8007d24 <check_for_error+0x154>)
 8007c98:	0018      	movs	r0, r3
 8007c9a:	f7fa fe65 	bl	8002968 <send_debug_logs>
            break;
 8007c9e:	e027      	b.n	8007cf0 <check_for_error+0x120>

        case ASTRONODE_ERR_CODE_FLASH_WRITING_FAILED:
            send_debug_logs("[ERROR] FLASH_WRITING_FAILED : Failed to write the Wi-Fi settings (SSID, password, token) to the flash.");
 8007ca0:	4b21      	ldr	r3, [pc, #132]	; (8007d28 <check_for_error+0x158>)
 8007ca2:	0018      	movs	r0, r3
 8007ca4:	f7fa fe60 	bl	8002968 <send_debug_logs>
            break;
 8007ca8:	e022      	b.n	8007cf0 <check_for_error+0x120>

        case ASTRONODE_ERR_CODE_BUFFER_FULL:
            send_debug_logs("[ERROR] BUFFER_FULL : Failed to queue the payload because the sending queue is already full.");
 8007caa:	4b20      	ldr	r3, [pc, #128]	; (8007d2c <check_for_error+0x15c>)
 8007cac:	0018      	movs	r0, r3
 8007cae:	f7fa fe5b 	bl	8002968 <send_debug_logs>
            break;
 8007cb2:	e01d      	b.n	8007cf0 <check_for_error+0x120>

        case ASTRONODE_ERR_CODE_DUPLICATE_ID:
            send_debug_logs("[ERROR] DUPLICATE_ID : Failed to queue the payload because the Payload ID provided by the asset is already in use in the Astronode queue.");
 8007cb4:	4b1e      	ldr	r3, [pc, #120]	; (8007d30 <check_for_error+0x160>)
 8007cb6:	0018      	movs	r0, r3
 8007cb8:	f7fa fe56 	bl	8002968 <send_debug_logs>
            break;
 8007cbc:	e018      	b.n	8007cf0 <check_for_error+0x120>

        case ASTRONODE_ERR_CODE_BUFFER_EMPTY:
            send_debug_logs("[ERROR] BUFFER_EMPTY : Failed to dequeue a payload from the buffer because the buffer is empty.");
 8007cbe:	4b1d      	ldr	r3, [pc, #116]	; (8007d34 <check_for_error+0x164>)
 8007cc0:	0018      	movs	r0, r3
 8007cc2:	f7fa fe51 	bl	8002968 <send_debug_logs>
            break;
 8007cc6:	e013      	b.n	8007cf0 <check_for_error+0x120>

        case ASTRONODE_ERR_CODE_INVALID_POS:
            send_debug_logs("[ERROR] INVALID_POS : Failed to update the geolocation information. Latitude and longitude fields must in the range [-90,90] degrees and [-180,180] degrees, respectively.");
 8007cc8:	4b1b      	ldr	r3, [pc, #108]	; (8007d38 <check_for_error+0x168>)
 8007cca:	0018      	movs	r0, r3
 8007ccc:	f7fa fe4c 	bl	8002968 <send_debug_logs>
            break;
 8007cd0:	e00e      	b.n	8007cf0 <check_for_error+0x120>

        case ASTRONODE_ERR_CODE_NO_ACK:
            send_debug_logs("[ERROR] NO_ACK : No satellite acknowledgement available for any payload.");
 8007cd2:	4b1a      	ldr	r3, [pc, #104]	; (8007d3c <check_for_error+0x16c>)
 8007cd4:	0018      	movs	r0, r3
 8007cd6:	f7fa fe47 	bl	8002968 <send_debug_logs>
            break;
 8007cda:	e009      	b.n	8007cf0 <check_for_error+0x120>

        case ASTRONODE_ERR_CODE_NO_CLEAR:
            send_debug_logs("[ERROR] NO_CLEAR : No payload ack to clear, or it was already cleared.");
 8007cdc:	4b18      	ldr	r3, [pc, #96]	; (8007d40 <check_for_error+0x170>)
 8007cde:	0018      	movs	r0, r3
 8007ce0:	f7fa fe42 	bl	8002968 <send_debug_logs>
            break;
 8007ce4:	e004      	b.n	8007cf0 <check_for_error+0x120>

        default:
            send_debug_logs("[ERROR] error_code is not defined.");
 8007ce6:	4b17      	ldr	r3, [pc, #92]	; (8007d44 <check_for_error+0x174>)
 8007ce8:	0018      	movs	r0, r3
 8007cea:	f7fa fe3d 	bl	8002968 <send_debug_logs>
            break;
 8007cee:	46c0      	nop			; (mov r8, r8)
    }
}
 8007cf0:	46c0      	nop			; (mov r8, r8)
 8007cf2:	46bd      	mov	sp, r7
 8007cf4:	b004      	add	sp, #16
 8007cf6:	bd80      	pop	{r7, pc}
 8007cf8:	00004601 	.word	0x00004601
 8007cfc:	00004501 	.word	0x00004501
 8007d00:	00003501 	.word	0x00003501
 8007d04:	00002601 	.word	0x00002601
 8007d08:	00002511 	.word	0x00002511
 8007d0c:	00002501 	.word	0x00002501
 8007d10:	00000611 	.word	0x00000611
 8007d14:	00000601 	.word	0x00000601
 8007d18:	0800e320 	.word	0x0800e320
 8007d1c:	0800e36c 	.word	0x0800e36c
 8007d20:	0800e3d0 	.word	0x0800e3d0
 8007d24:	0800e408 	.word	0x0800e408
 8007d28:	0800e4ac 	.word	0x0800e4ac
 8007d2c:	0800e514 	.word	0x0800e514
 8007d30:	0800e574 	.word	0x0800e574
 8007d34:	0800e600 	.word	0x0800e600
 8007d38:	0800e660 	.word	0x0800e660
 8007d3c:	0800e70c 	.word	0x0800e70c
 8007d40:	0800e758 	.word	0x0800e758
 8007d44:	0800e7a0 	.word	0x0800e7a0

08007d48 <receive_astronode_answer>:

static return_status_t receive_astronode_answer(uint8_t *p_rx_buffer, uint16_t *p_buffer_length)
{
 8007d48:	b5b0      	push	{r4, r5, r7, lr}
 8007d4a:	b086      	sub	sp, #24
 8007d4c:	af00      	add	r7, sp, #0
 8007d4e:	6078      	str	r0, [r7, #4]
 8007d50:	6039      	str	r1, [r7, #0]
    uint8_t rx_char = 0;
 8007d52:	230f      	movs	r3, #15
 8007d54:	18fb      	adds	r3, r7, r3
 8007d56:	2200      	movs	r2, #0
 8007d58:	701a      	strb	r2, [r3, #0]
    uint16_t length = 0;
 8007d5a:	2316      	movs	r3, #22
 8007d5c:	18fb      	adds	r3, r7, r3
 8007d5e:	2200      	movs	r2, #0
 8007d60:	801a      	strh	r2, [r3, #0]
    uint32_t timeout_answer_received = get_systick();
 8007d62:	f7fa fe8f 	bl	8002a84 <get_systick>
 8007d66:	0003      	movs	r3, r0
 8007d68:	613b      	str	r3, [r7, #16]
    bool is_answer_received = false;
 8007d6a:	2315      	movs	r3, #21
 8007d6c:	18fb      	adds	r3, r7, r3
 8007d6e:	2200      	movs	r2, #0
 8007d70:	701a      	strb	r2, [r3, #0]

    while (is_answer_received == false)
 8007d72:	e054      	b.n	8007e1e <receive_astronode_answer+0xd6>
    {
        if (is_systick_timeout_over(timeout_answer_received, ASTRONODE_ANSWER_TIMEOUT_MS))
 8007d74:	4a34      	ldr	r2, [pc, #208]	; (8007e48 <receive_astronode_answer+0x100>)
 8007d76:	693b      	ldr	r3, [r7, #16]
 8007d78:	0011      	movs	r1, r2
 8007d7a:	0018      	movs	r0, r3
 8007d7c:	f7fa fe8a 	bl	8002a94 <is_systick_timeout_over>
 8007d80:	1e03      	subs	r3, r0, #0
 8007d82:	d005      	beq.n	8007d90 <receive_astronode_answer+0x48>
        {
            send_debug_logs("ERROR : Received answer timeout..");
 8007d84:	4b31      	ldr	r3, [pc, #196]	; (8007e4c <receive_astronode_answer+0x104>)
 8007d86:	0018      	movs	r0, r3
 8007d88:	f7fa fdee 	bl	8002968 <send_debug_logs>
            return RS_FAILURE;
 8007d8c:	2300      	movs	r3, #0
 8007d8e:	e057      	b.n	8007e40 <receive_astronode_answer+0xf8>
        }
        if (is_astronode_character_received(&rx_char))
 8007d90:	250f      	movs	r5, #15
 8007d92:	197b      	adds	r3, r7, r5
 8007d94:	0018      	movs	r0, r3
 8007d96:	f7fa fe4f 	bl	8002a38 <is_astronode_character_received>
 8007d9a:	0003      	movs	r3, r0
 8007d9c:	0019      	movs	r1, r3
 8007d9e:	2016      	movs	r0, #22
 8007da0:	183b      	adds	r3, r7, r0
 8007da2:	183a      	adds	r2, r7, r0
 8007da4:	8812      	ldrh	r2, [r2, #0]
 8007da6:	801a      	strh	r2, [r3, #0]
 8007da8:	2415      	movs	r4, #21
 8007daa:	193b      	adds	r3, r7, r4
 8007dac:	193a      	adds	r2, r7, r4
 8007dae:	7812      	ldrb	r2, [r2, #0]
 8007db0:	701a      	strb	r2, [r3, #0]
 8007db2:	2900      	cmp	r1, #0
 8007db4:	d033      	beq.n	8007e1e <receive_astronode_answer+0xd6>
        {
            if (rx_char == ASTRONODE_TRANSPORT_STX)
 8007db6:	197b      	adds	r3, r7, r5
 8007db8:	781b      	ldrb	r3, [r3, #0]
 8007dba:	2b02      	cmp	r3, #2
 8007dbc:	d105      	bne.n	8007dca <receive_astronode_answer+0x82>
            {
                is_answer_received = false;
 8007dbe:	193b      	adds	r3, r7, r4
 8007dc0:	2200      	movs	r2, #0
 8007dc2:	701a      	strb	r2, [r3, #0]
                length = 0;
 8007dc4:	183b      	adds	r3, r7, r0
 8007dc6:	2200      	movs	r2, #0
 8007dc8:	801a      	strh	r2, [r3, #0]
            }

            p_rx_buffer[length] = rx_char;
 8007dca:	2116      	movs	r1, #22
 8007dcc:	187b      	adds	r3, r7, r1
 8007dce:	881b      	ldrh	r3, [r3, #0]
 8007dd0:	687a      	ldr	r2, [r7, #4]
 8007dd2:	18d3      	adds	r3, r2, r3
 8007dd4:	220f      	movs	r2, #15
 8007dd6:	18ba      	adds	r2, r7, r2
 8007dd8:	7812      	ldrb	r2, [r2, #0]
 8007dda:	701a      	strb	r2, [r3, #0]
            length++;
 8007ddc:	187b      	adds	r3, r7, r1
 8007dde:	881a      	ldrh	r2, [r3, #0]
 8007de0:	187b      	adds	r3, r7, r1
 8007de2:	3201      	adds	r2, #1
 8007de4:	801a      	strh	r2, [r3, #0]

            if (length > ASTRONODE_MAX_LENGTH_RESPONSE)
 8007de6:	187b      	adds	r3, r7, r1
 8007de8:	881b      	ldrh	r3, [r3, #0]
 8007dea:	2bb2      	cmp	r3, #178	; 0xb2
 8007dec:	d905      	bls.n	8007dfa <receive_astronode_answer+0xb2>
            {
                send_debug_logs("ERROR : Message received from the Astronode exceed maximum length allowed.");
 8007dee:	4b18      	ldr	r3, [pc, #96]	; (8007e50 <receive_astronode_answer+0x108>)
 8007df0:	0018      	movs	r0, r3
 8007df2:	f7fa fdb9 	bl	8002968 <send_debug_logs>
                return RS_FAILURE;
 8007df6:	2300      	movs	r3, #0
 8007df8:	e022      	b.n	8007e40 <receive_astronode_answer+0xf8>
            }

            if (rx_char == ASTRONODE_TRANSPORT_ETX)
 8007dfa:	230f      	movs	r3, #15
 8007dfc:	18fb      	adds	r3, r7, r3
 8007dfe:	781b      	ldrb	r3, [r3, #0]
 8007e00:	2b03      	cmp	r3, #3
 8007e02:	d10c      	bne.n	8007e1e <receive_astronode_answer+0xd6>
            {
                if (length > 1)
 8007e04:	2216      	movs	r2, #22
 8007e06:	18bb      	adds	r3, r7, r2
 8007e08:	881b      	ldrh	r3, [r3, #0]
 8007e0a:	2b01      	cmp	r3, #1
 8007e0c:	d907      	bls.n	8007e1e <receive_astronode_answer+0xd6>
                {
                    *p_buffer_length = length;
 8007e0e:	683b      	ldr	r3, [r7, #0]
 8007e10:	18ba      	adds	r2, r7, r2
 8007e12:	8812      	ldrh	r2, [r2, #0]
 8007e14:	801a      	strh	r2, [r3, #0]
                    is_answer_received = true;
 8007e16:	2315      	movs	r3, #21
 8007e18:	18fb      	adds	r3, r7, r3
 8007e1a:	2201      	movs	r2, #1
 8007e1c:	701a      	strb	r2, [r3, #0]
    while (is_answer_received == false)
 8007e1e:	2315      	movs	r3, #21
 8007e20:	18fb      	adds	r3, r7, r3
 8007e22:	781b      	ldrb	r3, [r3, #0]
 8007e24:	2201      	movs	r2, #1
 8007e26:	4053      	eors	r3, r2
 8007e28:	b2db      	uxtb	r3, r3
 8007e2a:	2b00      	cmp	r3, #0
 8007e2c:	d1a2      	bne.n	8007d74 <receive_astronode_answer+0x2c>
                }
            }
        }
    }
    send_debug_logs("Message received from the Astronode <-- ");
 8007e2e:	4b09      	ldr	r3, [pc, #36]	; (8007e54 <receive_astronode_answer+0x10c>)
 8007e30:	0018      	movs	r0, r3
 8007e32:	f7fa fd99 	bl	8002968 <send_debug_logs>
    send_debug_logs((char *) p_rx_buffer);
 8007e36:	687b      	ldr	r3, [r7, #4]
 8007e38:	0018      	movs	r0, r3
 8007e3a:	f7fa fd95 	bl	8002968 <send_debug_logs>

    return RS_SUCCESS;
 8007e3e:	2301      	movs	r3, #1
}
 8007e40:	0018      	movs	r0, r3
 8007e42:	46bd      	mov	sp, r7
 8007e44:	b006      	add	sp, #24
 8007e46:	bdb0      	pop	{r4, r5, r7, pc}
 8007e48:	000005dc 	.word	0x000005dc
 8007e4c:	0800e7c4 	.word	0x0800e7c4
 8007e50:	0800e7e8 	.word	0x0800e7e8
 8007e54:	0800e834 	.word	0x0800e834

08007e58 <uint8_to_ascii_buffer>:

static void uint8_to_ascii_buffer(const uint8_t value, uint8_t *p_target_buffer)
{
 8007e58:	b580      	push	{r7, lr}
 8007e5a:	b082      	sub	sp, #8
 8007e5c:	af00      	add	r7, sp, #0
 8007e5e:	0002      	movs	r2, r0
 8007e60:	6039      	str	r1, [r7, #0]
 8007e62:	1dfb      	adds	r3, r7, #7
 8007e64:	701a      	strb	r2, [r3, #0]
    p_target_buffer[0] = g_ascii_lookup[value >> 4];
 8007e66:	1dfb      	adds	r3, r7, #7
 8007e68:	781b      	ldrb	r3, [r3, #0]
 8007e6a:	091b      	lsrs	r3, r3, #4
 8007e6c:	b2db      	uxtb	r3, r3
 8007e6e:	001a      	movs	r2, r3
 8007e70:	4b08      	ldr	r3, [pc, #32]	; (8007e94 <uint8_to_ascii_buffer+0x3c>)
 8007e72:	5c9a      	ldrb	r2, [r3, r2]
 8007e74:	683b      	ldr	r3, [r7, #0]
 8007e76:	701a      	strb	r2, [r3, #0]
    p_target_buffer[1] = g_ascii_lookup[value & 0x0F];
 8007e78:	1dfb      	adds	r3, r7, #7
 8007e7a:	781b      	ldrb	r3, [r3, #0]
 8007e7c:	220f      	movs	r2, #15
 8007e7e:	401a      	ands	r2, r3
 8007e80:	683b      	ldr	r3, [r7, #0]
 8007e82:	3301      	adds	r3, #1
 8007e84:	4903      	ldr	r1, [pc, #12]	; (8007e94 <uint8_to_ascii_buffer+0x3c>)
 8007e86:	5c8a      	ldrb	r2, [r1, r2]
 8007e88:	701a      	strb	r2, [r3, #0]
}
 8007e8a:	46c0      	nop			; (mov r8, r8)
 8007e8c:	46bd      	mov	sp, r7
 8007e8e:	b002      	add	sp, #8
 8007e90:	bd80      	pop	{r7, pc}
 8007e92:	46c0      	nop			; (mov r8, r8)
 8007e94:	0800ea34 	.word	0x0800ea34

08007e98 <my_astro_read_evt_reg>:
		send_debug_logs ( "ERROR: Payload exceeded ASTRONODE_APP_PAYLOAD_MAX_LEN_BYTES value." ) ;
	}
	return false ;
}
bool my_astro_read_evt_reg ( void )
{
 8007e98:	b580      	push	{r7, lr}
 8007e9a:	af00      	add	r7, sp, #0
	send_debug_logs ( "my_astro: evt pin is high." ) ;
 8007e9c:	4b15      	ldr	r3, [pc, #84]	; (8007ef4 <my_astro_read_evt_reg+0x5c>)
 8007e9e:	0018      	movs	r0, r3
 8007ea0:	f7fa fd62 	bl	8002968 <send_debug_logs>
	astronode_send_evt_rr () ;
 8007ea4:	f7fe ff12 	bl	8006ccc <astronode_send_evt_rr>
	if (is_sak_available () )
 8007ea8:	f7ff fb60 	bl	800756c <is_sak_available>
 8007eac:	1e03      	subs	r3, r0, #0
 8007eae:	d007      	beq.n	8007ec0 <my_astro_read_evt_reg+0x28>
	{
	  astronode_send_sak_rr () ;
 8007eb0:	f7ff f86c 	bl	8006f8c <astronode_send_sak_rr>
	  astronode_send_sak_cr () ;
 8007eb4:	f7ff f8c0 	bl	8007038 <astronode_send_sak_cr>
	  send_debug_logs ( "my_astro: message has been acknowledged." ) ;
 8007eb8:	4b0f      	ldr	r3, [pc, #60]	; (8007ef8 <my_astro_read_evt_reg+0x60>)
 8007eba:	0018      	movs	r0, r3
 8007ebc:	f7fa fd54 	bl	8002968 <send_debug_logs>
	  //astronode_send_per_rr () ;
	}
	if ( is_astronode_reset () )
 8007ec0:	f7ff fb5e 	bl	8007580 <is_astronode_reset>
 8007ec4:	1e03      	subs	r3, r0, #0
 8007ec6:	d005      	beq.n	8007ed4 <my_astro_read_evt_reg+0x3c>
	{
	  send_debug_logs ( "my_astro: terminal has been reset." ) ;
 8007ec8:	4b0c      	ldr	r3, [pc, #48]	; (8007efc <my_astro_read_evt_reg+0x64>)
 8007eca:	0018      	movs	r0, r3
 8007ecc:	f7fa fd4c 	bl	8002968 <send_debug_logs>
	  astronode_send_res_cr () ;
 8007ed0:	f7fe ffb8 	bl	8006e44 <astronode_send_res_cr>
	}
	if ( is_command_available () )
 8007ed4:	f7ff fb5e 	bl	8007594 <is_command_available>
 8007ed8:	1e03      	subs	r3, r0, #0
 8007eda:	d007      	beq.n	8007eec <my_astro_read_evt_reg+0x54>
	{
	  send_debug_logs ( "my_astro: unicast command is available" ) ;
 8007edc:	4b08      	ldr	r3, [pc, #32]	; (8007f00 <my_astro_read_evt_reg+0x68>)
 8007ede:	0018      	movs	r0, r3
 8007ee0:	f7fa fd42 	bl	8002968 <send_debug_logs>
	  astronode_send_cmd_rr () ;
 8007ee4:	f7ff f9d2 	bl	800728c <astronode_send_cmd_rr>
	  astronode_send_cmd_cr () ;
 8007ee8:	f7ff f990 	bl	800720c <astronode_send_cmd_cr>
	}
	return true ;
 8007eec:	2301      	movs	r3, #1
}
 8007eee:	0018      	movs	r0, r3
 8007ef0:	46bd      	mov	sp, r7
 8007ef2:	bd80      	pop	{r7, pc}
 8007ef4:	0800e8a4 	.word	0x0800e8a4
 8007ef8:	0800e8c0 	.word	0x0800e8c0
 8007efc:	0800e8ec 	.word	0x0800e8ec
 8007f00:	0800e910 	.word	0x0800e910

08007f04 <my_rtc_get_dt>:
** Synopsis: $<TalkerID>RMC,<UTC>,<Status>,<Lat>,<N/S>,<Lon>,<E/W>,<SOG>,<COG>,<Date>,<MagVar>,<MagVarDir>,<ModeInd>,<NavStatus>*<Checksum><CR><LF>
** m message example from Quectel L86: "$GPRMC,085151.187,V,,,,,0.00,0.00,291023,,,N,V*3A". \r\n have been wiped out.
*/

void my_rtc_get_dt ( RTC_DateTypeDef* d , RTC_TimeTypeDef* t )
{
 8007f04:	b580      	push	{r7, lr}
 8007f06:	b082      	sub	sp, #8
 8007f08:	af00      	add	r7, sp, #0
 8007f0a:	6078      	str	r0, [r7, #4]
 8007f0c:	6039      	str	r1, [r7, #0]
	HAL_RTC_GetDate ( &hrtc , d , RTC_FORMAT_BIN ) ;
 8007f0e:	6879      	ldr	r1, [r7, #4]
 8007f10:	4b07      	ldr	r3, [pc, #28]	; (8007f30 <my_rtc_get_dt+0x2c>)
 8007f12:	2200      	movs	r2, #0
 8007f14:	0018      	movs	r0, r3
 8007f16:	f7fc fed9 	bl	8004ccc <HAL_RTC_GetDate>
	HAL_RTC_GetTime ( &hrtc , t , RTC_FORMAT_BIN ) ;
 8007f1a:	6839      	ldr	r1, [r7, #0]
 8007f1c:	4b04      	ldr	r3, [pc, #16]	; (8007f30 <my_rtc_get_dt+0x2c>)
 8007f1e:	2200      	movs	r2, #0
 8007f20:	0018      	movs	r0, r3
 8007f22:	f7fc fde5 	bl	8004af0 <HAL_RTC_GetTime>
}
 8007f26:	46c0      	nop			; (mov r8, r8)
 8007f28:	46bd      	mov	sp, r7
 8007f2a:	b002      	add	sp, #8
 8007f2c:	bd80      	pop	{r7, pc}
 8007f2e:	46c0      	nop			; (mov r8, r8)
 8007f30:	200006dc 	.word	0x200006dc

08007f34 <my_rtc_get_dt_s>:
uint16_t my_rtc_get_dt_s ( char* dt_s )
{
 8007f34:	b5f0      	push	{r4, r5, r6, r7, lr}
 8007f36:	b08d      	sub	sp, #52	; 0x34
 8007f38:	af04      	add	r7, sp, #16
 8007f3a:	6078      	str	r0, [r7, #4]
	RTC_DateTypeDef gDate;
	RTC_TimeTypeDef gTime;

	//char cdt[20];

	HAL_RTC_GetTime ( &hrtc , &gTime , RTC_FORMAT_BIN ) ;
 8007f3c:	2508      	movs	r5, #8
 8007f3e:	1979      	adds	r1, r7, r5
 8007f40:	4b1b      	ldr	r3, [pc, #108]	; (8007fb0 <my_rtc_get_dt_s+0x7c>)
 8007f42:	2200      	movs	r2, #0
 8007f44:	0018      	movs	r0, r3
 8007f46:	f7fc fdd3 	bl	8004af0 <HAL_RTC_GetTime>
	HAL_RTC_GetDate ( &hrtc , &gDate , RTC_FORMAT_BIN ) ;
 8007f4a:	241c      	movs	r4, #28
 8007f4c:	1939      	adds	r1, r7, r4
 8007f4e:	4b18      	ldr	r3, [pc, #96]	; (8007fb0 <my_rtc_get_dt_s+0x7c>)
 8007f50:	2200      	movs	r2, #0
 8007f52:	0018      	movs	r0, r3
 8007f54:	f7fc feba 	bl	8004ccc <HAL_RTC_GetDate>

	sprintf ( dt_s , "%4d.%02d.%02d %02d:%02d:%02d" , 2000 + gDate.Year , gDate.Month , gDate.Date , gTime.Hours , gTime.Minutes , gTime.Seconds ) ;
 8007f58:	0021      	movs	r1, r4
 8007f5a:	187b      	adds	r3, r7, r1
 8007f5c:	78db      	ldrb	r3, [r3, #3]
 8007f5e:	22fa      	movs	r2, #250	; 0xfa
 8007f60:	00d2      	lsls	r2, r2, #3
 8007f62:	189a      	adds	r2, r3, r2
 8007f64:	187b      	adds	r3, r7, r1
 8007f66:	785b      	ldrb	r3, [r3, #1]
 8007f68:	469c      	mov	ip, r3
 8007f6a:	187b      	adds	r3, r7, r1
 8007f6c:	789b      	ldrb	r3, [r3, #2]
 8007f6e:	001c      	movs	r4, r3
 8007f70:	0028      	movs	r0, r5
 8007f72:	183b      	adds	r3, r7, r0
 8007f74:	781b      	ldrb	r3, [r3, #0]
 8007f76:	001d      	movs	r5, r3
 8007f78:	183b      	adds	r3, r7, r0
 8007f7a:	785b      	ldrb	r3, [r3, #1]
 8007f7c:	001e      	movs	r6, r3
 8007f7e:	183b      	adds	r3, r7, r0
 8007f80:	789b      	ldrb	r3, [r3, #2]
 8007f82:	490c      	ldr	r1, [pc, #48]	; (8007fb4 <my_rtc_get_dt_s+0x80>)
 8007f84:	6878      	ldr	r0, [r7, #4]
 8007f86:	9303      	str	r3, [sp, #12]
 8007f88:	9602      	str	r6, [sp, #8]
 8007f8a:	9501      	str	r5, [sp, #4]
 8007f8c:	9400      	str	r4, [sp, #0]
 8007f8e:	4663      	mov	r3, ip
 8007f90:	f000 fab8 	bl	8008504 <sprintf>

	return (uint16_t) ( 2000 + gDate.Year ) ;
 8007f94:	211c      	movs	r1, #28
 8007f96:	187b      	adds	r3, r7, r1
 8007f98:	78db      	ldrb	r3, [r3, #3]
 8007f9a:	b29b      	uxth	r3, r3
 8007f9c:	22fa      	movs	r2, #250	; 0xfa
 8007f9e:	00d2      	lsls	r2, r2, #3
 8007fa0:	4694      	mov	ip, r2
 8007fa2:	4463      	add	r3, ip
 8007fa4:	b29b      	uxth	r3, r3
}
 8007fa6:	0018      	movs	r0, r3
 8007fa8:	46bd      	mov	sp, r7
 8007faa:	b009      	add	sp, #36	; 0x24
 8007fac:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8007fae:	46c0      	nop			; (mov r8, r8)
 8007fb0:	200006dc 	.word	0x200006dc
 8007fb4:	0800e938 	.word	0x0800e938

08007fb8 <my_rtc_set_alarm>:
bool my_rtc_set_alarm ( uint32_t s )
{
 8007fb8:	b5f0      	push	{r4, r5, r6, r7, lr}
 8007fba:	b0a5      	sub	sp, #148	; 0x94
 8007fbc:	af00      	add	r7, sp, #0
 8007fbe:	6078      	str	r0, [r7, #4]
	tim_seconds = 0 ;
 8007fc0:	4b36      	ldr	r3, [pc, #216]	; (800809c <my_rtc_set_alarm+0xe4>)
 8007fc2:	2200      	movs	r2, #0
 8007fc4:	801a      	strh	r2, [r3, #0]

	RTC_DateTypeDef 	d ;
	RTC_TimeTypeDef 	t ;
	RTC_AlarmTypeDef	a ;

	bool r = false ;
 8007fc6:	268f      	movs	r6, #143	; 0x8f
 8007fc8:	19bb      	adds	r3, r7, r6
 8007fca:	2200      	movs	r2, #0
 8007fcc:	701a      	strb	r2, [r3, #0]

	my_rtc_get_dt ( &d , &t ) ;
 8007fce:	2470      	movs	r4, #112	; 0x70
 8007fd0:	193a      	adds	r2, r7, r4
 8007fd2:	2584      	movs	r5, #132	; 0x84
 8007fd4:	197b      	adds	r3, r7, r5
 8007fd6:	0011      	movs	r1, r2
 8007fd8:	0018      	movs	r0, r3
 8007fda:	f7ff ff93 	bl	8007f04 <my_rtc_get_dt>
	uint32_t alarm_ts = my_conv_rtc2timestamp ( &d , &t ) + s ;
 8007fde:	193a      	adds	r2, r7, r4
 8007fe0:	197b      	adds	r3, r7, r5
 8007fe2:	0011      	movs	r1, r2
 8007fe4:	0018      	movs	r0, r3
 8007fe6:	f000 f85f 	bl	80080a8 <my_conv_rtc2timestamp>
 8007fea:	0002      	movs	r2, r0
 8007fec:	687b      	ldr	r3, [r7, #4]
 8007fee:	189b      	adds	r3, r3, r2
 8007ff0:	2088      	movs	r0, #136	; 0x88
 8007ff2:	183a      	adds	r2, r7, r0
 8007ff4:	6013      	str	r3, [r2, #0]
	my_conv_timestamp2rtc ( alarm_ts , &d , &t ) ;
 8007ff6:	193a      	adds	r2, r7, r4
 8007ff8:	1979      	adds	r1, r7, r5
 8007ffa:	0005      	movs	r5, r0
 8007ffc:	183b      	adds	r3, r7, r0
 8007ffe:	681b      	ldr	r3, [r3, #0]
 8008000:	0018      	movs	r0, r3
 8008002:	f000 f8c5 	bl	8008190 <my_conv_timestamp2rtc>
	a.AlarmTime.Hours = t.Hours ;
 8008006:	193b      	adds	r3, r7, r4
 8008008:	781a      	ldrb	r2, [r3, #0]
 800800a:	2148      	movs	r1, #72	; 0x48
 800800c:	187b      	adds	r3, r7, r1
 800800e:	701a      	strb	r2, [r3, #0]
	a.AlarmTime.Minutes = t.Minutes ;
 8008010:	193b      	adds	r3, r7, r4
 8008012:	785a      	ldrb	r2, [r3, #1]
 8008014:	187b      	adds	r3, r7, r1
 8008016:	705a      	strb	r2, [r3, #1]
	a.AlarmTime.Seconds = t.Seconds ;
 8008018:	193b      	adds	r3, r7, r4
 800801a:	789a      	ldrb	r2, [r3, #2]
 800801c:	187b      	adds	r3, r7, r1
 800801e:	709a      	strb	r2, [r3, #2]
	a.AlarmTime.SubSeconds = 0 ;
 8008020:	187b      	adds	r3, r7, r1
 8008022:	2200      	movs	r2, #0
 8008024:	605a      	str	r2, [r3, #4]
	a.AlarmTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE ;
 8008026:	187b      	adds	r3, r7, r1
 8008028:	2200      	movs	r2, #0
 800802a:	60da      	str	r2, [r3, #12]
	a.AlarmTime.StoreOperation = RTC_STOREOPERATION_RESET ;
 800802c:	187b      	adds	r3, r7, r1
 800802e:	2200      	movs	r2, #0
 8008030:	611a      	str	r2, [r3, #16]
	a.AlarmMask = RTC_ALARMMASK_NONE ;
 8008032:	187b      	adds	r3, r7, r1
 8008034:	2200      	movs	r2, #0
 8008036:	615a      	str	r2, [r3, #20]
	a.AlarmSubSecondMask = RTC_ALARMSUBSECONDMASK_ALL ;
 8008038:	187b      	adds	r3, r7, r1
 800803a:	2200      	movs	r2, #0
 800803c:	619a      	str	r2, [r3, #24]
	a.AlarmDateWeekDaySel = RTC_ALARMDATEWEEKDAYSEL_DATE ;
 800803e:	187b      	adds	r3, r7, r1
 8008040:	2200      	movs	r2, #0
 8008042:	61da      	str	r2, [r3, #28]
	a.Alarm = RTC_ALARM_A ;
 8008044:	187b      	adds	r3, r7, r1
 8008046:	2280      	movs	r2, #128	; 0x80
 8008048:	0052      	lsls	r2, r2, #1
 800804a:	625a      	str	r2, [r3, #36]	; 0x24

	if ( HAL_RTC_SetAlarm ( &hrtc , &a , RTC_FORMAT_BIN ) == HAL_OK )
 800804c:	1879      	adds	r1, r7, r1
 800804e:	4b14      	ldr	r3, [pc, #80]	; (80080a0 <my_rtc_set_alarm+0xe8>)
 8008050:	2200      	movs	r2, #0
 8008052:	0018      	movs	r0, r3
 8008054:	f7fc fe88 	bl	8004d68 <HAL_RTC_SetAlarm>
 8008058:	1e03      	subs	r3, r0, #0
 800805a:	d117      	bne.n	800808c <my_rtc_set_alarm+0xd4>
	{
		char s[60] = {0} ;
 800805c:	240c      	movs	r4, #12
 800805e:	193b      	adds	r3, r7, r4
 8008060:	2200      	movs	r2, #0
 8008062:	601a      	str	r2, [r3, #0]
 8008064:	3304      	adds	r3, #4
 8008066:	2238      	movs	r2, #56	; 0x38
 8008068:	2100      	movs	r1, #0
 800806a:	0018      	movs	r0, r3
 800806c:	f000 fab6 	bl	80085dc <memset>
		sprintf ( s , "Alarm set to %lu" , alarm_ts ) ;
 8008070:	197b      	adds	r3, r7, r5
 8008072:	681a      	ldr	r2, [r3, #0]
 8008074:	490b      	ldr	r1, [pc, #44]	; (80080a4 <my_rtc_set_alarm+0xec>)
 8008076:	193b      	adds	r3, r7, r4
 8008078:	0018      	movs	r0, r3
 800807a:	f000 fa43 	bl	8008504 <sprintf>
		send_debug_logs ( s ) ;
 800807e:	193b      	adds	r3, r7, r4
 8008080:	0018      	movs	r0, r3
 8008082:	f7fa fc71 	bl	8002968 <send_debug_logs>
		r = true ;
 8008086:	19bb      	adds	r3, r7, r6
 8008088:	2201      	movs	r2, #1
 800808a:	701a      	strb	r2, [r3, #0]
			break ;
		}
	}
	HAL_TIM_Base_Stop_IT ( MY_TIMER ) ;
	*/
	return r ;
 800808c:	238f      	movs	r3, #143	; 0x8f
 800808e:	18fb      	adds	r3, r7, r3
 8008090:	781b      	ldrb	r3, [r3, #0]
}
 8008092:	0018      	movs	r0, r3
 8008094:	46bd      	mov	sp, r7
 8008096:	b025      	add	sp, #148	; 0x94
 8008098:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800809a:	46c0      	nop			; (mov r8, r8)
 800809c:	20000890 	.word	0x20000890
 80080a0:	200006dc 	.word	0x200006dc
 80080a4:	0800e958 	.word	0x0800e958

080080a8 <my_conv_rtc2timestamp>:
	return i ;
}

// Function converting RTC date and time to Unix timestamp (ts): number of seconds after the Epoch (1970.01.01).
uint32_t my_conv_rtc2timestamp ( RTC_DateTypeDef* d , RTC_TimeTypeDef* t )
{
 80080a8:	b580      	push	{r7, lr}
 80080aa:	b086      	sub	sp, #24
 80080ac:	af00      	add	r7, sp, #0
 80080ae:	6078      	str	r0, [r7, #4]
 80080b0:	6039      	str	r1, [r7, #0]
    // Number of days in months (considering leap years).
    static const uint8_t monthDays[12] = { 31 , 28 , 31 , 30 , 31 , 30 , 31 , 31 , 30 , 31 , 30 , 31 } ;

    // Conversion of years into days.
    uint32_t years = d->Year + 2000;  // RTC starts from 20
 80080b2:	687b      	ldr	r3, [r7, #4]
 80080b4:	78db      	ldrb	r3, [r3, #3]
 80080b6:	22fa      	movs	r2, #250	; 0xfa
 80080b8:	00d2      	lsls	r2, r2, #3
 80080ba:	4694      	mov	ip, r2
 80080bc:	4463      	add	r3, ip
 80080be:	60fb      	str	r3, [r7, #12]
    uint32_t days = ( years - 1970 ) * 365 + ( ( years - 1969 ) / 4 ) ;  // Days for years and leap years.
 80080c0:	68fa      	ldr	r2, [r7, #12]
 80080c2:	0013      	movs	r3, r2
 80080c4:	00db      	lsls	r3, r3, #3
 80080c6:	189b      	adds	r3, r3, r2
 80080c8:	00db      	lsls	r3, r3, #3
 80080ca:	189b      	adds	r3, r3, r2
 80080cc:	009a      	lsls	r2, r3, #2
 80080ce:	189a      	adds	r2, r3, r2
 80080d0:	68fb      	ldr	r3, [r7, #12]
 80080d2:	492c      	ldr	r1, [pc, #176]	; (8008184 <my_conv_rtc2timestamp+0xdc>)
 80080d4:	468c      	mov	ip, r1
 80080d6:	4463      	add	r3, ip
 80080d8:	089b      	lsrs	r3, r3, #2
 80080da:	18d3      	adds	r3, r2, r3
 80080dc:	4a2a      	ldr	r2, [pc, #168]	; (8008188 <my_conv_rtc2timestamp+0xe0>)
 80080de:	4694      	mov	ip, r2
 80080e0:	4463      	add	r3, ip
 80080e2:	617b      	str	r3, [r7, #20]
    // Conversion of months into days.
    for ( int i = 0 ; i < d->Month - 1 ; i++ )
 80080e4:	2300      	movs	r3, #0
 80080e6:	613b      	str	r3, [r7, #16]
 80080e8:	e00a      	b.n	8008100 <my_conv_rtc2timestamp+0x58>
    {
        days += monthDays[i] ;
 80080ea:	4a28      	ldr	r2, [pc, #160]	; (800818c <my_conv_rtc2timestamp+0xe4>)
 80080ec:	693b      	ldr	r3, [r7, #16]
 80080ee:	18d3      	adds	r3, r2, r3
 80080f0:	781b      	ldrb	r3, [r3, #0]
 80080f2:	001a      	movs	r2, r3
 80080f4:	697b      	ldr	r3, [r7, #20]
 80080f6:	189b      	adds	r3, r3, r2
 80080f8:	617b      	str	r3, [r7, #20]
    for ( int i = 0 ; i < d->Month - 1 ; i++ )
 80080fa:	693b      	ldr	r3, [r7, #16]
 80080fc:	3301      	adds	r3, #1
 80080fe:	613b      	str	r3, [r7, #16]
 8008100:	687b      	ldr	r3, [r7, #4]
 8008102:	785b      	ldrb	r3, [r3, #1]
 8008104:	3b01      	subs	r3, #1
 8008106:	693a      	ldr	r2, [r7, #16]
 8008108:	429a      	cmp	r2, r3
 800810a:	dbee      	blt.n	80080ea <my_conv_rtc2timestamp+0x42>
    }
    if ( d->Month > 2 && my_conv_is_leap_year ( years ) )
 800810c:	687b      	ldr	r3, [r7, #4]
 800810e:	785b      	ldrb	r3, [r3, #1]
 8008110:	2b02      	cmp	r3, #2
 8008112:	d908      	bls.n	8008126 <my_conv_rtc2timestamp+0x7e>
 8008114:	68fb      	ldr	r3, [r7, #12]
 8008116:	0018      	movs	r0, r3
 8008118:	f000 f8de 	bl	80082d8 <my_conv_is_leap_year>
 800811c:	1e03      	subs	r3, r0, #0
 800811e:	d002      	beq.n	8008126 <my_conv_rtc2timestamp+0x7e>
    {
        days++ ;  // Add one day in a leap year.
 8008120:	697b      	ldr	r3, [r7, #20]
 8008122:	3301      	adds	r3, #1
 8008124:	617b      	str	r3, [r7, #20]
    }
    // add the days of the month
    days += d->Date - 1 ;
 8008126:	687b      	ldr	r3, [r7, #4]
 8008128:	789b      	ldrb	r3, [r3, #2]
 800812a:	001a      	movs	r2, r3
 800812c:	697b      	ldr	r3, [r7, #20]
 800812e:	18d3      	adds	r3, r2, r3
 8008130:	3b01      	subs	r3, #1
 8008132:	617b      	str	r3, [r7, #20]
    // Convert days into seconds and add hours, minutes, seconds.
    uint32_t ts = days * 86400 + t->Hours * 3600 + t->Minutes * 60 + t->Seconds ;
 8008134:	697a      	ldr	r2, [r7, #20]
 8008136:	0013      	movs	r3, r2
 8008138:	005b      	lsls	r3, r3, #1
 800813a:	189b      	adds	r3, r3, r2
 800813c:	011a      	lsls	r2, r3, #4
 800813e:	1ad2      	subs	r2, r2, r3
 8008140:	0113      	lsls	r3, r2, #4
 8008142:	1a9b      	subs	r3, r3, r2
 8008144:	01db      	lsls	r3, r3, #7
 8008146:	0019      	movs	r1, r3
 8008148:	683b      	ldr	r3, [r7, #0]
 800814a:	781b      	ldrb	r3, [r3, #0]
 800814c:	001a      	movs	r2, r3
 800814e:	0013      	movs	r3, r2
 8008150:	011b      	lsls	r3, r3, #4
 8008152:	1a9b      	subs	r3, r3, r2
 8008154:	011a      	lsls	r2, r3, #4
 8008156:	1ad2      	subs	r2, r2, r3
 8008158:	0113      	lsls	r3, r2, #4
 800815a:	001a      	movs	r2, r3
 800815c:	0013      	movs	r3, r2
 800815e:	18ca      	adds	r2, r1, r3
 8008160:	683b      	ldr	r3, [r7, #0]
 8008162:	785b      	ldrb	r3, [r3, #1]
 8008164:	0019      	movs	r1, r3
 8008166:	000b      	movs	r3, r1
 8008168:	011b      	lsls	r3, r3, #4
 800816a:	1a5b      	subs	r3, r3, r1
 800816c:	009b      	lsls	r3, r3, #2
 800816e:	18d3      	adds	r3, r2, r3
 8008170:	683a      	ldr	r2, [r7, #0]
 8008172:	7892      	ldrb	r2, [r2, #2]
 8008174:	189b      	adds	r3, r3, r2
 8008176:	60bb      	str	r3, [r7, #8]

    return ts ;
 8008178:	68bb      	ldr	r3, [r7, #8]
}
 800817a:	0018      	movs	r0, r3
 800817c:	46bd      	mov	sp, r7
 800817e:	b006      	add	sp, #24
 8008180:	bd80      	pop	{r7, pc}
 8008182:	46c0      	nop			; (mov r8, r8)
 8008184:	fffff84f 	.word	0xfffff84f
 8008188:	fff50736 	.word	0xfff50736
 800818c:	0800ea44 	.word	0x0800ea44

08008190 <my_conv_timestamp2rtc>:

// Function converting Unix timestamp (ts) to RTC date and time
void my_conv_timestamp2rtc ( uint32_t ts , RTC_DateTypeDef* d , RTC_TimeTypeDef* t )
{
 8008190:	b590      	push	{r4, r7, lr}
 8008192:	b08b      	sub	sp, #44	; 0x2c
 8008194:	af00      	add	r7, sp, #0
 8008196:	60f8      	str	r0, [r7, #12]
 8008198:	60b9      	str	r1, [r7, #8]
 800819a:	607a      	str	r2, [r7, #4]
	static const uint16_t daysInMonth[12] = { 31 , 28 , 31 , 30 , 31 , 30 , 31 , 31 , 30 , 31 , 30 , 31 } ;
	uint32_t seconds = ts % 60 ;
 800819c:	68fb      	ldr	r3, [r7, #12]
 800819e:	213c      	movs	r1, #60	; 0x3c
 80081a0:	0018      	movs	r0, r3
 80081a2:	f7f8 f851 	bl	8000248 <__aeabi_uidivmod>
 80081a6:	000b      	movs	r3, r1
 80081a8:	61bb      	str	r3, [r7, #24]
	uint32_t minutes = ( ts / 60 ) % 60 ;
 80081aa:	68fb      	ldr	r3, [r7, #12]
 80081ac:	213c      	movs	r1, #60	; 0x3c
 80081ae:	0018      	movs	r0, r3
 80081b0:	f7f7 ffc4 	bl	800013c <__udivsi3>
 80081b4:	0003      	movs	r3, r0
 80081b6:	213c      	movs	r1, #60	; 0x3c
 80081b8:	0018      	movs	r0, r3
 80081ba:	f7f8 f845 	bl	8000248 <__aeabi_uidivmod>
 80081be:	000b      	movs	r3, r1
 80081c0:	617b      	str	r3, [r7, #20]
	uint32_t hours = ( ts / 3600 ) % 24 ;
 80081c2:	68fb      	ldr	r3, [r7, #12]
 80081c4:	22e1      	movs	r2, #225	; 0xe1
 80081c6:	0111      	lsls	r1, r2, #4
 80081c8:	0018      	movs	r0, r3
 80081ca:	f7f7 ffb7 	bl	800013c <__udivsi3>
 80081ce:	0003      	movs	r3, r0
 80081d0:	2118      	movs	r1, #24
 80081d2:	0018      	movs	r0, r3
 80081d4:	f7f8 f838 	bl	8000248 <__aeabi_uidivmod>
 80081d8:	000b      	movs	r3, r1
 80081da:	613b      	str	r3, [r7, #16]

	// Counting days since Epoch
	uint32_t days = ts / 86400 ;
 80081dc:	68fb      	ldr	r3, [r7, #12]
 80081de:	493b      	ldr	r1, [pc, #236]	; (80082cc <my_conv_timestamp2rtc+0x13c>)
 80081e0:	0018      	movs	r0, r3
 80081e2:	f7f7 ffab 	bl	800013c <__udivsi3>
 80081e6:	0003      	movs	r3, r0
 80081e8:	627b      	str	r3, [r7, #36]	; 0x24

	// Calculating the year
	uint32_t year = 1970 ;
 80081ea:	4b39      	ldr	r3, [pc, #228]	; (80082d0 <my_conv_timestamp2rtc+0x140>)
 80081ec:	623b      	str	r3, [r7, #32]
	while ( days >= 365 + my_conv_is_leap_year ( year ) )
 80081ee:	e00d      	b.n	800820c <my_conv_timestamp2rtc+0x7c>
	{
		days -= 365 + my_conv_is_leap_year ( year ) ;
 80081f0:	6a3b      	ldr	r3, [r7, #32]
 80081f2:	0018      	movs	r0, r3
 80081f4:	f000 f870 	bl	80082d8 <my_conv_is_leap_year>
 80081f8:	0003      	movs	r3, r0
 80081fa:	336e      	adds	r3, #110	; 0x6e
 80081fc:	33ff      	adds	r3, #255	; 0xff
 80081fe:	001a      	movs	r2, r3
 8008200:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008202:	1a9b      	subs	r3, r3, r2
 8008204:	627b      	str	r3, [r7, #36]	; 0x24
		year++ ;
 8008206:	6a3b      	ldr	r3, [r7, #32]
 8008208:	3301      	adds	r3, #1
 800820a:	623b      	str	r3, [r7, #32]
	while ( days >= 365 + my_conv_is_leap_year ( year ) )
 800820c:	6a3b      	ldr	r3, [r7, #32]
 800820e:	0018      	movs	r0, r3
 8008210:	f000 f862 	bl	80082d8 <my_conv_is_leap_year>
 8008214:	0003      	movs	r3, r0
 8008216:	336e      	adds	r3, #110	; 0x6e
 8008218:	33ff      	adds	r3, #255	; 0xff
 800821a:	001a      	movs	r2, r3
 800821c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800821e:	4293      	cmp	r3, r2
 8008220:	d2e6      	bcs.n	80081f0 <my_conv_timestamp2rtc+0x60>
	}

	// Calculating the month
	uint32_t month = 0 ;
 8008222:	2300      	movs	r3, #0
 8008224:	61fb      	str	r3, [r7, #28]
	while ( days >= daysInMonth[month] + ( month == 1 && my_conv_is_leap_year ( year ) ) ) {
 8008226:	e018      	b.n	800825a <my_conv_timestamp2rtc+0xca>
		days -= daysInMonth[month] + ( month == 1 && my_conv_is_leap_year ( year ) ) ;
 8008228:	4b2a      	ldr	r3, [pc, #168]	; (80082d4 <my_conv_timestamp2rtc+0x144>)
 800822a:	69fa      	ldr	r2, [r7, #28]
 800822c:	0052      	lsls	r2, r2, #1
 800822e:	5ad3      	ldrh	r3, [r2, r3]
 8008230:	001c      	movs	r4, r3
 8008232:	69fb      	ldr	r3, [r7, #28]
 8008234:	2b01      	cmp	r3, #1
 8008236:	d107      	bne.n	8008248 <my_conv_timestamp2rtc+0xb8>
 8008238:	6a3b      	ldr	r3, [r7, #32]
 800823a:	0018      	movs	r0, r3
 800823c:	f000 f84c 	bl	80082d8 <my_conv_is_leap_year>
 8008240:	1e03      	subs	r3, r0, #0
 8008242:	d001      	beq.n	8008248 <my_conv_timestamp2rtc+0xb8>
 8008244:	2301      	movs	r3, #1
 8008246:	e000      	b.n	800824a <my_conv_timestamp2rtc+0xba>
 8008248:	2300      	movs	r3, #0
 800824a:	191b      	adds	r3, r3, r4
 800824c:	001a      	movs	r2, r3
 800824e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008250:	1a9b      	subs	r3, r3, r2
 8008252:	627b      	str	r3, [r7, #36]	; 0x24
		month++ ;
 8008254:	69fb      	ldr	r3, [r7, #28]
 8008256:	3301      	adds	r3, #1
 8008258:	61fb      	str	r3, [r7, #28]
	while ( days >= daysInMonth[month] + ( month == 1 && my_conv_is_leap_year ( year ) ) ) {
 800825a:	4b1e      	ldr	r3, [pc, #120]	; (80082d4 <my_conv_timestamp2rtc+0x144>)
 800825c:	69fa      	ldr	r2, [r7, #28]
 800825e:	0052      	lsls	r2, r2, #1
 8008260:	5ad3      	ldrh	r3, [r2, r3]
 8008262:	001c      	movs	r4, r3
 8008264:	69fb      	ldr	r3, [r7, #28]
 8008266:	2b01      	cmp	r3, #1
 8008268:	d107      	bne.n	800827a <my_conv_timestamp2rtc+0xea>
 800826a:	6a3b      	ldr	r3, [r7, #32]
 800826c:	0018      	movs	r0, r3
 800826e:	f000 f833 	bl	80082d8 <my_conv_is_leap_year>
 8008272:	1e03      	subs	r3, r0, #0
 8008274:	d001      	beq.n	800827a <my_conv_timestamp2rtc+0xea>
 8008276:	2301      	movs	r3, #1
 8008278:	e000      	b.n	800827c <my_conv_timestamp2rtc+0xec>
 800827a:	2300      	movs	r3, #0
 800827c:	191b      	adds	r3, r3, r4
 800827e:	001a      	movs	r2, r3
 8008280:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008282:	4293      	cmp	r3, r2
 8008284:	d2d0      	bcs.n	8008228 <my_conv_timestamp2rtc+0x98>
	}

	// Setting date and time in RTC structures
	d->Year = year - 2000 ; // RTC_DateTypeDef.Year expects years since 2000
 8008286:	6a3b      	ldr	r3, [r7, #32]
 8008288:	b2db      	uxtb	r3, r3
 800828a:	3330      	adds	r3, #48	; 0x30
 800828c:	b2da      	uxtb	r2, r3
 800828e:	68bb      	ldr	r3, [r7, #8]
 8008290:	70da      	strb	r2, [r3, #3]
	d->Month = month + 1 ;  // +1 because month is counted from 0
 8008292:	69fb      	ldr	r3, [r7, #28]
 8008294:	b2db      	uxtb	r3, r3
 8008296:	3301      	adds	r3, #1
 8008298:	b2da      	uxtb	r2, r3
 800829a:	68bb      	ldr	r3, [r7, #8]
 800829c:	705a      	strb	r2, [r3, #1]
	d->Date = days + 1 ;    // +1 because days are counted from 0
 800829e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80082a0:	b2db      	uxtb	r3, r3
 80082a2:	3301      	adds	r3, #1
 80082a4:	b2da      	uxtb	r2, r3
 80082a6:	68bb      	ldr	r3, [r7, #8]
 80082a8:	709a      	strb	r2, [r3, #2]
	t->Hours = hours ;
 80082aa:	693b      	ldr	r3, [r7, #16]
 80082ac:	b2da      	uxtb	r2, r3
 80082ae:	687b      	ldr	r3, [r7, #4]
 80082b0:	701a      	strb	r2, [r3, #0]
	t->Minutes = minutes ;
 80082b2:	697b      	ldr	r3, [r7, #20]
 80082b4:	b2da      	uxtb	r2, r3
 80082b6:	687b      	ldr	r3, [r7, #4]
 80082b8:	705a      	strb	r2, [r3, #1]
	t->Seconds = seconds ;
 80082ba:	69bb      	ldr	r3, [r7, #24]
 80082bc:	b2da      	uxtb	r2, r3
 80082be:	687b      	ldr	r3, [r7, #4]
 80082c0:	709a      	strb	r2, [r3, #2]
}
 80082c2:	46c0      	nop			; (mov r8, r8)
 80082c4:	46bd      	mov	sp, r7
 80082c6:	b00b      	add	sp, #44	; 0x2c
 80082c8:	bd90      	pop	{r4, r7, pc}
 80082ca:	46c0      	nop			; (mov r8, r8)
 80082cc:	00015180 	.word	0x00015180
 80082d0:	000007b2 	.word	0x000007b2
 80082d4:	0800ea50 	.word	0x0800ea50

080082d8 <my_conv_is_leap_year>:

// Function checking for leap years
int my_conv_is_leap_year ( int yyyy )
{
 80082d8:	b580      	push	{r7, lr}
 80082da:	b082      	sub	sp, #8
 80082dc:	af00      	add	r7, sp, #0
 80082de:	6078      	str	r0, [r7, #4]
    return ( ( yyyy % 4 == 0 ) && ( yyyy % 100 != 0 ) ) || ( yyyy % 400 == 0 ) ;
 80082e0:	687b      	ldr	r3, [r7, #4]
 80082e2:	2203      	movs	r2, #3
 80082e4:	4013      	ands	r3, r2
 80082e6:	d106      	bne.n	80082f6 <my_conv_is_leap_year+0x1e>
 80082e8:	687b      	ldr	r3, [r7, #4]
 80082ea:	2164      	movs	r1, #100	; 0x64
 80082ec:	0018      	movs	r0, r3
 80082ee:	f7f8 f895 	bl	800041c <__aeabi_idivmod>
 80082f2:	1e0b      	subs	r3, r1, #0
 80082f4:	d107      	bne.n	8008306 <my_conv_is_leap_year+0x2e>
 80082f6:	687b      	ldr	r3, [r7, #4]
 80082f8:	22c8      	movs	r2, #200	; 0xc8
 80082fa:	0051      	lsls	r1, r2, #1
 80082fc:	0018      	movs	r0, r3
 80082fe:	f7f8 f88d 	bl	800041c <__aeabi_idivmod>
 8008302:	1e0b      	subs	r3, r1, #0
 8008304:	d101      	bne.n	800830a <my_conv_is_leap_year+0x32>
 8008306:	2301      	movs	r3, #1
 8008308:	e000      	b.n	800830c <my_conv_is_leap_year+0x34>
 800830a:	2300      	movs	r3, #0
}
 800830c:	0018      	movs	r0, r3
 800830e:	46bd      	mov	sp, r7
 8008310:	b002      	add	sp, #8
 8008312:	bd80      	pop	{r7, pc}

08008314 <std>:
 8008314:	2300      	movs	r3, #0
 8008316:	b510      	push	{r4, lr}
 8008318:	0004      	movs	r4, r0
 800831a:	6003      	str	r3, [r0, #0]
 800831c:	6043      	str	r3, [r0, #4]
 800831e:	6083      	str	r3, [r0, #8]
 8008320:	8181      	strh	r1, [r0, #12]
 8008322:	6643      	str	r3, [r0, #100]	; 0x64
 8008324:	81c2      	strh	r2, [r0, #14]
 8008326:	6103      	str	r3, [r0, #16]
 8008328:	6143      	str	r3, [r0, #20]
 800832a:	6183      	str	r3, [r0, #24]
 800832c:	0019      	movs	r1, r3
 800832e:	2208      	movs	r2, #8
 8008330:	305c      	adds	r0, #92	; 0x5c
 8008332:	f000 f953 	bl	80085dc <memset>
 8008336:	4b0b      	ldr	r3, [pc, #44]	; (8008364 <std+0x50>)
 8008338:	61e4      	str	r4, [r4, #28]
 800833a:	6223      	str	r3, [r4, #32]
 800833c:	4b0a      	ldr	r3, [pc, #40]	; (8008368 <std+0x54>)
 800833e:	6263      	str	r3, [r4, #36]	; 0x24
 8008340:	4b0a      	ldr	r3, [pc, #40]	; (800836c <std+0x58>)
 8008342:	62a3      	str	r3, [r4, #40]	; 0x28
 8008344:	4b0a      	ldr	r3, [pc, #40]	; (8008370 <std+0x5c>)
 8008346:	62e3      	str	r3, [r4, #44]	; 0x2c
 8008348:	4b0a      	ldr	r3, [pc, #40]	; (8008374 <std+0x60>)
 800834a:	429c      	cmp	r4, r3
 800834c:	d005      	beq.n	800835a <std+0x46>
 800834e:	4b0a      	ldr	r3, [pc, #40]	; (8008378 <std+0x64>)
 8008350:	429c      	cmp	r4, r3
 8008352:	d002      	beq.n	800835a <std+0x46>
 8008354:	4b09      	ldr	r3, [pc, #36]	; (800837c <std+0x68>)
 8008356:	429c      	cmp	r4, r3
 8008358:	d103      	bne.n	8008362 <std+0x4e>
 800835a:	0020      	movs	r0, r4
 800835c:	3058      	adds	r0, #88	; 0x58
 800835e:	f000 f9c5 	bl	80086ec <__retarget_lock_init_recursive>
 8008362:	bd10      	pop	{r4, pc}
 8008364:	08008545 	.word	0x08008545
 8008368:	0800856d 	.word	0x0800856d
 800836c:	080085a5 	.word	0x080085a5
 8008370:	080085d1 	.word	0x080085d1
 8008374:	200008a0 	.word	0x200008a0
 8008378:	20000908 	.word	0x20000908
 800837c:	20000970 	.word	0x20000970

08008380 <stdio_exit_handler>:
 8008380:	b510      	push	{r4, lr}
 8008382:	4a03      	ldr	r2, [pc, #12]	; (8008390 <stdio_exit_handler+0x10>)
 8008384:	4903      	ldr	r1, [pc, #12]	; (8008394 <stdio_exit_handler+0x14>)
 8008386:	4804      	ldr	r0, [pc, #16]	; (8008398 <stdio_exit_handler+0x18>)
 8008388:	f000 f86c 	bl	8008464 <_fwalk_sglue>
 800838c:	bd10      	pop	{r4, pc}
 800838e:	46c0      	nop			; (mov r8, r8)
 8008390:	20000010 	.word	0x20000010
 8008394:	0800a8dd 	.word	0x0800a8dd
 8008398:	20000188 	.word	0x20000188

0800839c <cleanup_stdio>:
 800839c:	6841      	ldr	r1, [r0, #4]
 800839e:	4b0b      	ldr	r3, [pc, #44]	; (80083cc <cleanup_stdio+0x30>)
 80083a0:	b510      	push	{r4, lr}
 80083a2:	0004      	movs	r4, r0
 80083a4:	4299      	cmp	r1, r3
 80083a6:	d001      	beq.n	80083ac <cleanup_stdio+0x10>
 80083a8:	f002 fa98 	bl	800a8dc <_fclose_r>
 80083ac:	68a1      	ldr	r1, [r4, #8]
 80083ae:	4b08      	ldr	r3, [pc, #32]	; (80083d0 <cleanup_stdio+0x34>)
 80083b0:	4299      	cmp	r1, r3
 80083b2:	d002      	beq.n	80083ba <cleanup_stdio+0x1e>
 80083b4:	0020      	movs	r0, r4
 80083b6:	f002 fa91 	bl	800a8dc <_fclose_r>
 80083ba:	68e1      	ldr	r1, [r4, #12]
 80083bc:	4b05      	ldr	r3, [pc, #20]	; (80083d4 <cleanup_stdio+0x38>)
 80083be:	4299      	cmp	r1, r3
 80083c0:	d002      	beq.n	80083c8 <cleanup_stdio+0x2c>
 80083c2:	0020      	movs	r0, r4
 80083c4:	f002 fa8a 	bl	800a8dc <_fclose_r>
 80083c8:	bd10      	pop	{r4, pc}
 80083ca:	46c0      	nop			; (mov r8, r8)
 80083cc:	200008a0 	.word	0x200008a0
 80083d0:	20000908 	.word	0x20000908
 80083d4:	20000970 	.word	0x20000970

080083d8 <global_stdio_init.part.0>:
 80083d8:	b510      	push	{r4, lr}
 80083da:	4b09      	ldr	r3, [pc, #36]	; (8008400 <global_stdio_init.part.0+0x28>)
 80083dc:	4a09      	ldr	r2, [pc, #36]	; (8008404 <global_stdio_init.part.0+0x2c>)
 80083de:	2104      	movs	r1, #4
 80083e0:	601a      	str	r2, [r3, #0]
 80083e2:	4809      	ldr	r0, [pc, #36]	; (8008408 <global_stdio_init.part.0+0x30>)
 80083e4:	2200      	movs	r2, #0
 80083e6:	f7ff ff95 	bl	8008314 <std>
 80083ea:	2201      	movs	r2, #1
 80083ec:	2109      	movs	r1, #9
 80083ee:	4807      	ldr	r0, [pc, #28]	; (800840c <global_stdio_init.part.0+0x34>)
 80083f0:	f7ff ff90 	bl	8008314 <std>
 80083f4:	2202      	movs	r2, #2
 80083f6:	2112      	movs	r1, #18
 80083f8:	4805      	ldr	r0, [pc, #20]	; (8008410 <global_stdio_init.part.0+0x38>)
 80083fa:	f7ff ff8b 	bl	8008314 <std>
 80083fe:	bd10      	pop	{r4, pc}
 8008400:	200009d8 	.word	0x200009d8
 8008404:	08008381 	.word	0x08008381
 8008408:	200008a0 	.word	0x200008a0
 800840c:	20000908 	.word	0x20000908
 8008410:	20000970 	.word	0x20000970

08008414 <__sfp_lock_acquire>:
 8008414:	b510      	push	{r4, lr}
 8008416:	4802      	ldr	r0, [pc, #8]	; (8008420 <__sfp_lock_acquire+0xc>)
 8008418:	f000 f96a 	bl	80086f0 <__retarget_lock_acquire_recursive>
 800841c:	bd10      	pop	{r4, pc}
 800841e:	46c0      	nop			; (mov r8, r8)
 8008420:	200009e2 	.word	0x200009e2

08008424 <__sfp_lock_release>:
 8008424:	b510      	push	{r4, lr}
 8008426:	4802      	ldr	r0, [pc, #8]	; (8008430 <__sfp_lock_release+0xc>)
 8008428:	f000 f963 	bl	80086f2 <__retarget_lock_release_recursive>
 800842c:	bd10      	pop	{r4, pc}
 800842e:	46c0      	nop			; (mov r8, r8)
 8008430:	200009e2 	.word	0x200009e2

08008434 <__sinit>:
 8008434:	b510      	push	{r4, lr}
 8008436:	0004      	movs	r4, r0
 8008438:	f7ff ffec 	bl	8008414 <__sfp_lock_acquire>
 800843c:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800843e:	2b00      	cmp	r3, #0
 8008440:	d002      	beq.n	8008448 <__sinit+0x14>
 8008442:	f7ff ffef 	bl	8008424 <__sfp_lock_release>
 8008446:	bd10      	pop	{r4, pc}
 8008448:	4b04      	ldr	r3, [pc, #16]	; (800845c <__sinit+0x28>)
 800844a:	6363      	str	r3, [r4, #52]	; 0x34
 800844c:	4b04      	ldr	r3, [pc, #16]	; (8008460 <__sinit+0x2c>)
 800844e:	681b      	ldr	r3, [r3, #0]
 8008450:	2b00      	cmp	r3, #0
 8008452:	d1f6      	bne.n	8008442 <__sinit+0xe>
 8008454:	f7ff ffc0 	bl	80083d8 <global_stdio_init.part.0>
 8008458:	e7f3      	b.n	8008442 <__sinit+0xe>
 800845a:	46c0      	nop			; (mov r8, r8)
 800845c:	0800839d 	.word	0x0800839d
 8008460:	200009d8 	.word	0x200009d8

08008464 <_fwalk_sglue>:
 8008464:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8008466:	0014      	movs	r4, r2
 8008468:	2600      	movs	r6, #0
 800846a:	9000      	str	r0, [sp, #0]
 800846c:	9101      	str	r1, [sp, #4]
 800846e:	68a5      	ldr	r5, [r4, #8]
 8008470:	6867      	ldr	r7, [r4, #4]
 8008472:	3f01      	subs	r7, #1
 8008474:	d504      	bpl.n	8008480 <_fwalk_sglue+0x1c>
 8008476:	6824      	ldr	r4, [r4, #0]
 8008478:	2c00      	cmp	r4, #0
 800847a:	d1f8      	bne.n	800846e <_fwalk_sglue+0xa>
 800847c:	0030      	movs	r0, r6
 800847e:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8008480:	89ab      	ldrh	r3, [r5, #12]
 8008482:	2b01      	cmp	r3, #1
 8008484:	d908      	bls.n	8008498 <_fwalk_sglue+0x34>
 8008486:	220e      	movs	r2, #14
 8008488:	5eab      	ldrsh	r3, [r5, r2]
 800848a:	3301      	adds	r3, #1
 800848c:	d004      	beq.n	8008498 <_fwalk_sglue+0x34>
 800848e:	0029      	movs	r1, r5
 8008490:	9800      	ldr	r0, [sp, #0]
 8008492:	9b01      	ldr	r3, [sp, #4]
 8008494:	4798      	blx	r3
 8008496:	4306      	orrs	r6, r0
 8008498:	3568      	adds	r5, #104	; 0x68
 800849a:	e7ea      	b.n	8008472 <_fwalk_sglue+0xe>

0800849c <snprintf>:
 800849c:	b40c      	push	{r2, r3}
 800849e:	b530      	push	{r4, r5, lr}
 80084a0:	4b17      	ldr	r3, [pc, #92]	; (8008500 <snprintf+0x64>)
 80084a2:	000c      	movs	r4, r1
 80084a4:	681d      	ldr	r5, [r3, #0]
 80084a6:	b09d      	sub	sp, #116	; 0x74
 80084a8:	2900      	cmp	r1, #0
 80084aa:	da08      	bge.n	80084be <snprintf+0x22>
 80084ac:	238b      	movs	r3, #139	; 0x8b
 80084ae:	2001      	movs	r0, #1
 80084b0:	602b      	str	r3, [r5, #0]
 80084b2:	4240      	negs	r0, r0
 80084b4:	b01d      	add	sp, #116	; 0x74
 80084b6:	bc30      	pop	{r4, r5}
 80084b8:	bc08      	pop	{r3}
 80084ba:	b002      	add	sp, #8
 80084bc:	4718      	bx	r3
 80084be:	2382      	movs	r3, #130	; 0x82
 80084c0:	466a      	mov	r2, sp
 80084c2:	009b      	lsls	r3, r3, #2
 80084c4:	8293      	strh	r3, [r2, #20]
 80084c6:	2300      	movs	r3, #0
 80084c8:	9002      	str	r0, [sp, #8]
 80084ca:	9006      	str	r0, [sp, #24]
 80084cc:	4299      	cmp	r1, r3
 80084ce:	d000      	beq.n	80084d2 <snprintf+0x36>
 80084d0:	1e4b      	subs	r3, r1, #1
 80084d2:	9304      	str	r3, [sp, #16]
 80084d4:	9307      	str	r3, [sp, #28]
 80084d6:	2301      	movs	r3, #1
 80084d8:	466a      	mov	r2, sp
 80084da:	425b      	negs	r3, r3
 80084dc:	82d3      	strh	r3, [r2, #22]
 80084de:	0028      	movs	r0, r5
 80084e0:	ab21      	add	r3, sp, #132	; 0x84
 80084e2:	9a20      	ldr	r2, [sp, #128]	; 0x80
 80084e4:	a902      	add	r1, sp, #8
 80084e6:	9301      	str	r3, [sp, #4]
 80084e8:	f000 ffb6 	bl	8009458 <_svfprintf_r>
 80084ec:	1c43      	adds	r3, r0, #1
 80084ee:	da01      	bge.n	80084f4 <snprintf+0x58>
 80084f0:	238b      	movs	r3, #139	; 0x8b
 80084f2:	602b      	str	r3, [r5, #0]
 80084f4:	2c00      	cmp	r4, #0
 80084f6:	d0dd      	beq.n	80084b4 <snprintf+0x18>
 80084f8:	2200      	movs	r2, #0
 80084fa:	9b02      	ldr	r3, [sp, #8]
 80084fc:	701a      	strb	r2, [r3, #0]
 80084fe:	e7d9      	b.n	80084b4 <snprintf+0x18>
 8008500:	200002a8 	.word	0x200002a8

08008504 <sprintf>:
 8008504:	b40e      	push	{r1, r2, r3}
 8008506:	b500      	push	{lr}
 8008508:	490b      	ldr	r1, [pc, #44]	; (8008538 <sprintf+0x34>)
 800850a:	b09c      	sub	sp, #112	; 0x70
 800850c:	ab1d      	add	r3, sp, #116	; 0x74
 800850e:	9002      	str	r0, [sp, #8]
 8008510:	9006      	str	r0, [sp, #24]
 8008512:	9107      	str	r1, [sp, #28]
 8008514:	9104      	str	r1, [sp, #16]
 8008516:	4809      	ldr	r0, [pc, #36]	; (800853c <sprintf+0x38>)
 8008518:	4909      	ldr	r1, [pc, #36]	; (8008540 <sprintf+0x3c>)
 800851a:	cb04      	ldmia	r3!, {r2}
 800851c:	9105      	str	r1, [sp, #20]
 800851e:	6800      	ldr	r0, [r0, #0]
 8008520:	a902      	add	r1, sp, #8
 8008522:	9301      	str	r3, [sp, #4]
 8008524:	f000 ff98 	bl	8009458 <_svfprintf_r>
 8008528:	2200      	movs	r2, #0
 800852a:	9b02      	ldr	r3, [sp, #8]
 800852c:	701a      	strb	r2, [r3, #0]
 800852e:	b01c      	add	sp, #112	; 0x70
 8008530:	bc08      	pop	{r3}
 8008532:	b003      	add	sp, #12
 8008534:	4718      	bx	r3
 8008536:	46c0      	nop			; (mov r8, r8)
 8008538:	7fffffff 	.word	0x7fffffff
 800853c:	200002a8 	.word	0x200002a8
 8008540:	ffff0208 	.word	0xffff0208

08008544 <__sread>:
 8008544:	b570      	push	{r4, r5, r6, lr}
 8008546:	000c      	movs	r4, r1
 8008548:	250e      	movs	r5, #14
 800854a:	5f49      	ldrsh	r1, [r1, r5]
 800854c:	f000 f87c 	bl	8008648 <_read_r>
 8008550:	2800      	cmp	r0, #0
 8008552:	db03      	blt.n	800855c <__sread+0x18>
 8008554:	6d23      	ldr	r3, [r4, #80]	; 0x50
 8008556:	181b      	adds	r3, r3, r0
 8008558:	6523      	str	r3, [r4, #80]	; 0x50
 800855a:	bd70      	pop	{r4, r5, r6, pc}
 800855c:	89a3      	ldrh	r3, [r4, #12]
 800855e:	4a02      	ldr	r2, [pc, #8]	; (8008568 <__sread+0x24>)
 8008560:	4013      	ands	r3, r2
 8008562:	81a3      	strh	r3, [r4, #12]
 8008564:	e7f9      	b.n	800855a <__sread+0x16>
 8008566:	46c0      	nop			; (mov r8, r8)
 8008568:	ffffefff 	.word	0xffffefff

0800856c <__swrite>:
 800856c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800856e:	001f      	movs	r7, r3
 8008570:	898b      	ldrh	r3, [r1, #12]
 8008572:	0005      	movs	r5, r0
 8008574:	000c      	movs	r4, r1
 8008576:	0016      	movs	r6, r2
 8008578:	05db      	lsls	r3, r3, #23
 800857a:	d505      	bpl.n	8008588 <__swrite+0x1c>
 800857c:	230e      	movs	r3, #14
 800857e:	5ec9      	ldrsh	r1, [r1, r3]
 8008580:	2200      	movs	r2, #0
 8008582:	2302      	movs	r3, #2
 8008584:	f000 f84c 	bl	8008620 <_lseek_r>
 8008588:	89a3      	ldrh	r3, [r4, #12]
 800858a:	4a05      	ldr	r2, [pc, #20]	; (80085a0 <__swrite+0x34>)
 800858c:	0028      	movs	r0, r5
 800858e:	4013      	ands	r3, r2
 8008590:	81a3      	strh	r3, [r4, #12]
 8008592:	0032      	movs	r2, r6
 8008594:	230e      	movs	r3, #14
 8008596:	5ee1      	ldrsh	r1, [r4, r3]
 8008598:	003b      	movs	r3, r7
 800859a:	f000 f869 	bl	8008670 <_write_r>
 800859e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80085a0:	ffffefff 	.word	0xffffefff

080085a4 <__sseek>:
 80085a4:	b570      	push	{r4, r5, r6, lr}
 80085a6:	000c      	movs	r4, r1
 80085a8:	250e      	movs	r5, #14
 80085aa:	5f49      	ldrsh	r1, [r1, r5]
 80085ac:	f000 f838 	bl	8008620 <_lseek_r>
 80085b0:	89a3      	ldrh	r3, [r4, #12]
 80085b2:	1c42      	adds	r2, r0, #1
 80085b4:	d103      	bne.n	80085be <__sseek+0x1a>
 80085b6:	4a05      	ldr	r2, [pc, #20]	; (80085cc <__sseek+0x28>)
 80085b8:	4013      	ands	r3, r2
 80085ba:	81a3      	strh	r3, [r4, #12]
 80085bc:	bd70      	pop	{r4, r5, r6, pc}
 80085be:	2280      	movs	r2, #128	; 0x80
 80085c0:	0152      	lsls	r2, r2, #5
 80085c2:	4313      	orrs	r3, r2
 80085c4:	81a3      	strh	r3, [r4, #12]
 80085c6:	6520      	str	r0, [r4, #80]	; 0x50
 80085c8:	e7f8      	b.n	80085bc <__sseek+0x18>
 80085ca:	46c0      	nop			; (mov r8, r8)
 80085cc:	ffffefff 	.word	0xffffefff

080085d0 <__sclose>:
 80085d0:	b510      	push	{r4, lr}
 80085d2:	230e      	movs	r3, #14
 80085d4:	5ec9      	ldrsh	r1, [r1, r3]
 80085d6:	f000 f811 	bl	80085fc <_close_r>
 80085da:	bd10      	pop	{r4, pc}

080085dc <memset>:
 80085dc:	0003      	movs	r3, r0
 80085de:	1882      	adds	r2, r0, r2
 80085e0:	4293      	cmp	r3, r2
 80085e2:	d100      	bne.n	80085e6 <memset+0xa>
 80085e4:	4770      	bx	lr
 80085e6:	7019      	strb	r1, [r3, #0]
 80085e8:	3301      	adds	r3, #1
 80085ea:	e7f9      	b.n	80085e0 <memset+0x4>

080085ec <__locale_mb_cur_max>:
 80085ec:	2294      	movs	r2, #148	; 0x94
 80085ee:	4b02      	ldr	r3, [pc, #8]	; (80085f8 <__locale_mb_cur_max+0xc>)
 80085f0:	0052      	lsls	r2, r2, #1
 80085f2:	5c98      	ldrb	r0, [r3, r2]
 80085f4:	4770      	bx	lr
 80085f6:	46c0      	nop			; (mov r8, r8)
 80085f8:	2000001c 	.word	0x2000001c

080085fc <_close_r>:
 80085fc:	2300      	movs	r3, #0
 80085fe:	b570      	push	{r4, r5, r6, lr}
 8008600:	4d06      	ldr	r5, [pc, #24]	; (800861c <_close_r+0x20>)
 8008602:	0004      	movs	r4, r0
 8008604:	0008      	movs	r0, r1
 8008606:	602b      	str	r3, [r5, #0]
 8008608:	f7fa fd21 	bl	800304e <_close>
 800860c:	1c43      	adds	r3, r0, #1
 800860e:	d103      	bne.n	8008618 <_close_r+0x1c>
 8008610:	682b      	ldr	r3, [r5, #0]
 8008612:	2b00      	cmp	r3, #0
 8008614:	d000      	beq.n	8008618 <_close_r+0x1c>
 8008616:	6023      	str	r3, [r4, #0]
 8008618:	bd70      	pop	{r4, r5, r6, pc}
 800861a:	46c0      	nop			; (mov r8, r8)
 800861c:	200009dc 	.word	0x200009dc

08008620 <_lseek_r>:
 8008620:	b570      	push	{r4, r5, r6, lr}
 8008622:	0004      	movs	r4, r0
 8008624:	0008      	movs	r0, r1
 8008626:	0011      	movs	r1, r2
 8008628:	001a      	movs	r2, r3
 800862a:	2300      	movs	r3, #0
 800862c:	4d05      	ldr	r5, [pc, #20]	; (8008644 <_lseek_r+0x24>)
 800862e:	602b      	str	r3, [r5, #0]
 8008630:	f7fa fd2e 	bl	8003090 <_lseek>
 8008634:	1c43      	adds	r3, r0, #1
 8008636:	d103      	bne.n	8008640 <_lseek_r+0x20>
 8008638:	682b      	ldr	r3, [r5, #0]
 800863a:	2b00      	cmp	r3, #0
 800863c:	d000      	beq.n	8008640 <_lseek_r+0x20>
 800863e:	6023      	str	r3, [r4, #0]
 8008640:	bd70      	pop	{r4, r5, r6, pc}
 8008642:	46c0      	nop			; (mov r8, r8)
 8008644:	200009dc 	.word	0x200009dc

08008648 <_read_r>:
 8008648:	b570      	push	{r4, r5, r6, lr}
 800864a:	0004      	movs	r4, r0
 800864c:	0008      	movs	r0, r1
 800864e:	0011      	movs	r1, r2
 8008650:	001a      	movs	r2, r3
 8008652:	2300      	movs	r3, #0
 8008654:	4d05      	ldr	r5, [pc, #20]	; (800866c <_read_r+0x24>)
 8008656:	602b      	str	r3, [r5, #0]
 8008658:	f7fa fcc0 	bl	8002fdc <_read>
 800865c:	1c43      	adds	r3, r0, #1
 800865e:	d103      	bne.n	8008668 <_read_r+0x20>
 8008660:	682b      	ldr	r3, [r5, #0]
 8008662:	2b00      	cmp	r3, #0
 8008664:	d000      	beq.n	8008668 <_read_r+0x20>
 8008666:	6023      	str	r3, [r4, #0]
 8008668:	bd70      	pop	{r4, r5, r6, pc}
 800866a:	46c0      	nop			; (mov r8, r8)
 800866c:	200009dc 	.word	0x200009dc

08008670 <_write_r>:
 8008670:	b570      	push	{r4, r5, r6, lr}
 8008672:	0004      	movs	r4, r0
 8008674:	0008      	movs	r0, r1
 8008676:	0011      	movs	r1, r2
 8008678:	001a      	movs	r2, r3
 800867a:	2300      	movs	r3, #0
 800867c:	4d05      	ldr	r5, [pc, #20]	; (8008694 <_write_r+0x24>)
 800867e:	602b      	str	r3, [r5, #0]
 8008680:	f7fa fcc9 	bl	8003016 <_write>
 8008684:	1c43      	adds	r3, r0, #1
 8008686:	d103      	bne.n	8008690 <_write_r+0x20>
 8008688:	682b      	ldr	r3, [r5, #0]
 800868a:	2b00      	cmp	r3, #0
 800868c:	d000      	beq.n	8008690 <_write_r+0x20>
 800868e:	6023      	str	r3, [r4, #0]
 8008690:	bd70      	pop	{r4, r5, r6, pc}
 8008692:	46c0      	nop			; (mov r8, r8)
 8008694:	200009dc 	.word	0x200009dc

08008698 <__errno>:
 8008698:	4b01      	ldr	r3, [pc, #4]	; (80086a0 <__errno+0x8>)
 800869a:	6818      	ldr	r0, [r3, #0]
 800869c:	4770      	bx	lr
 800869e:	46c0      	nop			; (mov r8, r8)
 80086a0:	200002a8 	.word	0x200002a8

080086a4 <__libc_init_array>:
 80086a4:	b570      	push	{r4, r5, r6, lr}
 80086a6:	2600      	movs	r6, #0
 80086a8:	4c0c      	ldr	r4, [pc, #48]	; (80086dc <__libc_init_array+0x38>)
 80086aa:	4d0d      	ldr	r5, [pc, #52]	; (80086e0 <__libc_init_array+0x3c>)
 80086ac:	1b64      	subs	r4, r4, r5
 80086ae:	10a4      	asrs	r4, r4, #2
 80086b0:	42a6      	cmp	r6, r4
 80086b2:	d109      	bne.n	80086c8 <__libc_init_array+0x24>
 80086b4:	2600      	movs	r6, #0
 80086b6:	f004 fced 	bl	800d094 <_init>
 80086ba:	4c0a      	ldr	r4, [pc, #40]	; (80086e4 <__libc_init_array+0x40>)
 80086bc:	4d0a      	ldr	r5, [pc, #40]	; (80086e8 <__libc_init_array+0x44>)
 80086be:	1b64      	subs	r4, r4, r5
 80086c0:	10a4      	asrs	r4, r4, #2
 80086c2:	42a6      	cmp	r6, r4
 80086c4:	d105      	bne.n	80086d2 <__libc_init_array+0x2e>
 80086c6:	bd70      	pop	{r4, r5, r6, pc}
 80086c8:	00b3      	lsls	r3, r6, #2
 80086ca:	58eb      	ldr	r3, [r5, r3]
 80086cc:	4798      	blx	r3
 80086ce:	3601      	adds	r6, #1
 80086d0:	e7ee      	b.n	80086b0 <__libc_init_array+0xc>
 80086d2:	00b3      	lsls	r3, r6, #2
 80086d4:	58eb      	ldr	r3, [r5, r3]
 80086d6:	4798      	blx	r3
 80086d8:	3601      	adds	r6, #1
 80086da:	e7f2      	b.n	80086c2 <__libc_init_array+0x1e>
 80086dc:	0800edfc 	.word	0x0800edfc
 80086e0:	0800edfc 	.word	0x0800edfc
 80086e4:	0800ee04 	.word	0x0800ee04
 80086e8:	0800edfc 	.word	0x0800edfc

080086ec <__retarget_lock_init_recursive>:
 80086ec:	4770      	bx	lr

080086ee <__retarget_lock_close_recursive>:
 80086ee:	4770      	bx	lr

080086f0 <__retarget_lock_acquire_recursive>:
 80086f0:	4770      	bx	lr

080086f2 <__retarget_lock_release_recursive>:
 80086f2:	4770      	bx	lr

080086f4 <memcpy>:
 80086f4:	2300      	movs	r3, #0
 80086f6:	b510      	push	{r4, lr}
 80086f8:	429a      	cmp	r2, r3
 80086fa:	d100      	bne.n	80086fe <memcpy+0xa>
 80086fc:	bd10      	pop	{r4, pc}
 80086fe:	5ccc      	ldrb	r4, [r1, r3]
 8008700:	54c4      	strb	r4, [r0, r3]
 8008702:	3301      	adds	r3, #1
 8008704:	e7f8      	b.n	80086f8 <memcpy+0x4>
	...

08008708 <register_fini>:
 8008708:	4b03      	ldr	r3, [pc, #12]	; (8008718 <register_fini+0x10>)
 800870a:	b510      	push	{r4, lr}
 800870c:	2b00      	cmp	r3, #0
 800870e:	d002      	beq.n	8008716 <register_fini+0xe>
 8008710:	4802      	ldr	r0, [pc, #8]	; (800871c <register_fini+0x14>)
 8008712:	f000 f805 	bl	8008720 <atexit>
 8008716:	bd10      	pop	{r4, pc}
 8008718:	00000000 	.word	0x00000000
 800871c:	0800ab69 	.word	0x0800ab69

08008720 <atexit>:
 8008720:	2300      	movs	r3, #0
 8008722:	b510      	push	{r4, lr}
 8008724:	0001      	movs	r1, r0
 8008726:	001a      	movs	r2, r3
 8008728:	0018      	movs	r0, r3
 800872a:	f002 fa79 	bl	800ac20 <__register_exitproc>
 800872e:	bd10      	pop	{r4, pc}

08008730 <_malloc_trim_r>:
 8008730:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8008732:	0004      	movs	r4, r0
 8008734:	2008      	movs	r0, #8
 8008736:	000d      	movs	r5, r1
 8008738:	f002 fa2a 	bl	800ab90 <sysconf>
 800873c:	0006      	movs	r6, r0
 800873e:	0020      	movs	r0, r4
 8008740:	f000 fb22 	bl	8008d88 <__malloc_lock>
 8008744:	2203      	movs	r2, #3
 8008746:	4f21      	ldr	r7, [pc, #132]	; (80087cc <_malloc_trim_r+0x9c>)
 8008748:	0031      	movs	r1, r6
 800874a:	68bb      	ldr	r3, [r7, #8]
 800874c:	685b      	ldr	r3, [r3, #4]
 800874e:	4393      	bics	r3, r2
 8008750:	1b58      	subs	r0, r3, r5
 8008752:	3811      	subs	r0, #17
 8008754:	1980      	adds	r0, r0, r6
 8008756:	9301      	str	r3, [sp, #4]
 8008758:	f7f7 fcf0 	bl	800013c <__udivsi3>
 800875c:	1e45      	subs	r5, r0, #1
 800875e:	4375      	muls	r5, r6
 8008760:	42ae      	cmp	r6, r5
 8008762:	dd04      	ble.n	800876e <_malloc_trim_r+0x3e>
 8008764:	0020      	movs	r0, r4
 8008766:	f000 fb17 	bl	8008d98 <__malloc_unlock>
 800876a:	2000      	movs	r0, #0
 800876c:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 800876e:	2100      	movs	r1, #0
 8008770:	0020      	movs	r0, r4
 8008772:	f002 f9e7 	bl	800ab44 <_sbrk_r>
 8008776:	68bb      	ldr	r3, [r7, #8]
 8008778:	9a01      	ldr	r2, [sp, #4]
 800877a:	189b      	adds	r3, r3, r2
 800877c:	4298      	cmp	r0, r3
 800877e:	d1f1      	bne.n	8008764 <_malloc_trim_r+0x34>
 8008780:	0020      	movs	r0, r4
 8008782:	4269      	negs	r1, r5
 8008784:	f002 f9de 	bl	800ab44 <_sbrk_r>
 8008788:	3001      	adds	r0, #1
 800878a:	d110      	bne.n	80087ae <_malloc_trim_r+0x7e>
 800878c:	2100      	movs	r1, #0
 800878e:	0020      	movs	r0, r4
 8008790:	f002 f9d8 	bl	800ab44 <_sbrk_r>
 8008794:	68ba      	ldr	r2, [r7, #8]
 8008796:	1a81      	subs	r1, r0, r2
 8008798:	290f      	cmp	r1, #15
 800879a:	dde3      	ble.n	8008764 <_malloc_trim_r+0x34>
 800879c:	4d0c      	ldr	r5, [pc, #48]	; (80087d0 <_malloc_trim_r+0xa0>)
 800879e:	4b0d      	ldr	r3, [pc, #52]	; (80087d4 <_malloc_trim_r+0xa4>)
 80087a0:	682d      	ldr	r5, [r5, #0]
 80087a2:	1b40      	subs	r0, r0, r5
 80087a4:	6018      	str	r0, [r3, #0]
 80087a6:	2301      	movs	r3, #1
 80087a8:	430b      	orrs	r3, r1
 80087aa:	6053      	str	r3, [r2, #4]
 80087ac:	e7da      	b.n	8008764 <_malloc_trim_r+0x34>
 80087ae:	2601      	movs	r6, #1
 80087b0:	9b01      	ldr	r3, [sp, #4]
 80087b2:	68ba      	ldr	r2, [r7, #8]
 80087b4:	1b5b      	subs	r3, r3, r5
 80087b6:	4333      	orrs	r3, r6
 80087b8:	6053      	str	r3, [r2, #4]
 80087ba:	4a06      	ldr	r2, [pc, #24]	; (80087d4 <_malloc_trim_r+0xa4>)
 80087bc:	0020      	movs	r0, r4
 80087be:	6813      	ldr	r3, [r2, #0]
 80087c0:	1b5b      	subs	r3, r3, r5
 80087c2:	6013      	str	r3, [r2, #0]
 80087c4:	f000 fae8 	bl	8008d98 <__malloc_unlock>
 80087c8:	0030      	movs	r0, r6
 80087ca:	e7cf      	b.n	800876c <_malloc_trim_r+0x3c>
 80087cc:	200002b0 	.word	0x200002b0
 80087d0:	200006b8 	.word	0x200006b8
 80087d4:	200009e8 	.word	0x200009e8

080087d8 <_free_r>:
 80087d8:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80087da:	1e0d      	subs	r5, r1, #0
 80087dc:	9001      	str	r0, [sp, #4]
 80087de:	d02d      	beq.n	800883c <_free_r+0x64>
 80087e0:	f000 fad2 	bl	8008d88 <__malloc_lock>
 80087e4:	2301      	movs	r3, #1
 80087e6:	0029      	movs	r1, r5
 80087e8:	469c      	mov	ip, r3
 80087ea:	3908      	subs	r1, #8
 80087ec:	684f      	ldr	r7, [r1, #4]
 80087ee:	4662      	mov	r2, ip
 80087f0:	003b      	movs	r3, r7
 80087f2:	4664      	mov	r4, ip
 80087f4:	4393      	bics	r3, r2
 80087f6:	18c8      	adds	r0, r1, r3
 80087f8:	6845      	ldr	r5, [r0, #4]
 80087fa:	3202      	adds	r2, #2
 80087fc:	4395      	bics	r5, r2
 80087fe:	4a4a      	ldr	r2, [pc, #296]	; (8008928 <_free_r+0x150>)
 8008800:	4027      	ands	r7, r4
 8008802:	6896      	ldr	r6, [r2, #8]
 8008804:	4286      	cmp	r6, r0
 8008806:	d11a      	bne.n	800883e <_free_r+0x66>
 8008808:	195b      	adds	r3, r3, r5
 800880a:	2f00      	cmp	r7, #0
 800880c:	d106      	bne.n	800881c <_free_r+0x44>
 800880e:	6808      	ldr	r0, [r1, #0]
 8008810:	1a09      	subs	r1, r1, r0
 8008812:	688d      	ldr	r5, [r1, #8]
 8008814:	181b      	adds	r3, r3, r0
 8008816:	68c8      	ldr	r0, [r1, #12]
 8008818:	60e8      	str	r0, [r5, #12]
 800881a:	6085      	str	r5, [r0, #8]
 800881c:	2001      	movs	r0, #1
 800881e:	4318      	orrs	r0, r3
 8008820:	6048      	str	r0, [r1, #4]
 8008822:	6091      	str	r1, [r2, #8]
 8008824:	4a41      	ldr	r2, [pc, #260]	; (800892c <_free_r+0x154>)
 8008826:	6812      	ldr	r2, [r2, #0]
 8008828:	429a      	cmp	r2, r3
 800882a:	d804      	bhi.n	8008836 <_free_r+0x5e>
 800882c:	4b40      	ldr	r3, [pc, #256]	; (8008930 <_free_r+0x158>)
 800882e:	9801      	ldr	r0, [sp, #4]
 8008830:	6819      	ldr	r1, [r3, #0]
 8008832:	f7ff ff7d 	bl	8008730 <_malloc_trim_r>
 8008836:	9801      	ldr	r0, [sp, #4]
 8008838:	f000 faae 	bl	8008d98 <__malloc_unlock>
 800883c:	bdf7      	pop	{r0, r1, r2, r4, r5, r6, r7, pc}
 800883e:	2600      	movs	r6, #0
 8008840:	6045      	str	r5, [r0, #4]
 8008842:	42b7      	cmp	r7, r6
 8008844:	d109      	bne.n	800885a <_free_r+0x82>
 8008846:	680f      	ldr	r7, [r1, #0]
 8008848:	4c3a      	ldr	r4, [pc, #232]	; (8008934 <_free_r+0x15c>)
 800884a:	1bc9      	subs	r1, r1, r7
 800884c:	19db      	adds	r3, r3, r7
 800884e:	688f      	ldr	r7, [r1, #8]
 8008850:	42a7      	cmp	r7, r4
 8008852:	d02c      	beq.n	80088ae <_free_r+0xd6>
 8008854:	68cc      	ldr	r4, [r1, #12]
 8008856:	60fc      	str	r4, [r7, #12]
 8008858:	60a7      	str	r7, [r4, #8]
 800885a:	1947      	adds	r7, r0, r5
 800885c:	687c      	ldr	r4, [r7, #4]
 800885e:	2701      	movs	r7, #1
 8008860:	423c      	tst	r4, r7
 8008862:	d10b      	bne.n	800887c <_free_r+0xa4>
 8008864:	195b      	adds	r3, r3, r5
 8008866:	6885      	ldr	r5, [r0, #8]
 8008868:	2e00      	cmp	r6, #0
 800886a:	d122      	bne.n	80088b2 <_free_r+0xda>
 800886c:	4c31      	ldr	r4, [pc, #196]	; (8008934 <_free_r+0x15c>)
 800886e:	42a5      	cmp	r5, r4
 8008870:	d11f      	bne.n	80088b2 <_free_r+0xda>
 8008872:	003e      	movs	r6, r7
 8008874:	6151      	str	r1, [r2, #20]
 8008876:	6111      	str	r1, [r2, #16]
 8008878:	60cd      	str	r5, [r1, #12]
 800887a:	608d      	str	r5, [r1, #8]
 800887c:	2501      	movs	r5, #1
 800887e:	0028      	movs	r0, r5
 8008880:	4318      	orrs	r0, r3
 8008882:	6048      	str	r0, [r1, #4]
 8008884:	50cb      	str	r3, [r1, r3]
 8008886:	2e00      	cmp	r6, #0
 8008888:	d1d5      	bne.n	8008836 <_free_r+0x5e>
 800888a:	2080      	movs	r0, #128	; 0x80
 800888c:	0080      	lsls	r0, r0, #2
 800888e:	4283      	cmp	r3, r0
 8008890:	d213      	bcs.n	80088ba <_free_r+0xe2>
 8008892:	08d8      	lsrs	r0, r3, #3
 8008894:	095b      	lsrs	r3, r3, #5
 8008896:	409d      	lsls	r5, r3
 8008898:	6853      	ldr	r3, [r2, #4]
 800889a:	431d      	orrs	r5, r3
 800889c:	00c3      	lsls	r3, r0, #3
 800889e:	189b      	adds	r3, r3, r2
 80088a0:	6055      	str	r5, [r2, #4]
 80088a2:	689a      	ldr	r2, [r3, #8]
 80088a4:	60cb      	str	r3, [r1, #12]
 80088a6:	608a      	str	r2, [r1, #8]
 80088a8:	6099      	str	r1, [r3, #8]
 80088aa:	60d1      	str	r1, [r2, #12]
 80088ac:	e7c3      	b.n	8008836 <_free_r+0x5e>
 80088ae:	4666      	mov	r6, ip
 80088b0:	e7d3      	b.n	800885a <_free_r+0x82>
 80088b2:	68c0      	ldr	r0, [r0, #12]
 80088b4:	60e8      	str	r0, [r5, #12]
 80088b6:	6085      	str	r5, [r0, #8]
 80088b8:	e7e0      	b.n	800887c <_free_r+0xa4>
 80088ba:	0a5d      	lsrs	r5, r3, #9
 80088bc:	2d04      	cmp	r5, #4
 80088be:	d812      	bhi.n	80088e6 <_free_r+0x10e>
 80088c0:	0998      	lsrs	r0, r3, #6
 80088c2:	3038      	adds	r0, #56	; 0x38
 80088c4:	00c6      	lsls	r6, r0, #3
 80088c6:	18b6      	adds	r6, r6, r2
 80088c8:	68b5      	ldr	r5, [r6, #8]
 80088ca:	2703      	movs	r7, #3
 80088cc:	42ae      	cmp	r6, r5
 80088ce:	d125      	bne.n	800891c <_free_r+0x144>
 80088d0:	2301      	movs	r3, #1
 80088d2:	1080      	asrs	r0, r0, #2
 80088d4:	4083      	lsls	r3, r0
 80088d6:	6850      	ldr	r0, [r2, #4]
 80088d8:	4303      	orrs	r3, r0
 80088da:	6053      	str	r3, [r2, #4]
 80088dc:	60ce      	str	r6, [r1, #12]
 80088de:	608d      	str	r5, [r1, #8]
 80088e0:	60b1      	str	r1, [r6, #8]
 80088e2:	60e9      	str	r1, [r5, #12]
 80088e4:	e7a7      	b.n	8008836 <_free_r+0x5e>
 80088e6:	2d14      	cmp	r5, #20
 80088e8:	d802      	bhi.n	80088f0 <_free_r+0x118>
 80088ea:	0028      	movs	r0, r5
 80088ec:	305b      	adds	r0, #91	; 0x5b
 80088ee:	e7e9      	b.n	80088c4 <_free_r+0xec>
 80088f0:	2d54      	cmp	r5, #84	; 0x54
 80088f2:	d802      	bhi.n	80088fa <_free_r+0x122>
 80088f4:	0b18      	lsrs	r0, r3, #12
 80088f6:	306e      	adds	r0, #110	; 0x6e
 80088f8:	e7e4      	b.n	80088c4 <_free_r+0xec>
 80088fa:	20aa      	movs	r0, #170	; 0xaa
 80088fc:	0040      	lsls	r0, r0, #1
 80088fe:	4285      	cmp	r5, r0
 8008900:	d802      	bhi.n	8008908 <_free_r+0x130>
 8008902:	0bd8      	lsrs	r0, r3, #15
 8008904:	3077      	adds	r0, #119	; 0x77
 8008906:	e7dd      	b.n	80088c4 <_free_r+0xec>
 8008908:	4e0b      	ldr	r6, [pc, #44]	; (8008938 <_free_r+0x160>)
 800890a:	207e      	movs	r0, #126	; 0x7e
 800890c:	42b5      	cmp	r5, r6
 800890e:	d8d9      	bhi.n	80088c4 <_free_r+0xec>
 8008910:	0c98      	lsrs	r0, r3, #18
 8008912:	307c      	adds	r0, #124	; 0x7c
 8008914:	e7d6      	b.n	80088c4 <_free_r+0xec>
 8008916:	68ad      	ldr	r5, [r5, #8]
 8008918:	42ae      	cmp	r6, r5
 800891a:	d003      	beq.n	8008924 <_free_r+0x14c>
 800891c:	686a      	ldr	r2, [r5, #4]
 800891e:	43ba      	bics	r2, r7
 8008920:	429a      	cmp	r2, r3
 8008922:	d8f8      	bhi.n	8008916 <_free_r+0x13e>
 8008924:	68ee      	ldr	r6, [r5, #12]
 8008926:	e7d9      	b.n	80088dc <_free_r+0x104>
 8008928:	200002b0 	.word	0x200002b0
 800892c:	200006bc 	.word	0x200006bc
 8008930:	20000a18 	.word	0x20000a18
 8008934:	200002b8 	.word	0x200002b8
 8008938:	00000554 	.word	0x00000554

0800893c <_malloc_r>:
 800893c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800893e:	000d      	movs	r5, r1
 8008940:	b087      	sub	sp, #28
 8008942:	350b      	adds	r5, #11
 8008944:	9001      	str	r0, [sp, #4]
 8008946:	2d16      	cmp	r5, #22
 8008948:	d908      	bls.n	800895c <_malloc_r+0x20>
 800894a:	2207      	movs	r2, #7
 800894c:	4395      	bics	r5, r2
 800894e:	d506      	bpl.n	800895e <_malloc_r+0x22>
 8008950:	230c      	movs	r3, #12
 8008952:	9a01      	ldr	r2, [sp, #4]
 8008954:	6013      	str	r3, [r2, #0]
 8008956:	2000      	movs	r0, #0
 8008958:	b007      	add	sp, #28
 800895a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800895c:	2510      	movs	r5, #16
 800895e:	42a9      	cmp	r1, r5
 8008960:	d8f6      	bhi.n	8008950 <_malloc_r+0x14>
 8008962:	9801      	ldr	r0, [sp, #4]
 8008964:	f000 fa10 	bl	8008d88 <__malloc_lock>
 8008968:	23fc      	movs	r3, #252	; 0xfc
 800896a:	4ebe      	ldr	r6, [pc, #760]	; (8008c64 <_malloc_r+0x328>)
 800896c:	005b      	lsls	r3, r3, #1
 800896e:	429d      	cmp	r5, r3
 8008970:	d219      	bcs.n	80089a6 <_malloc_r+0x6a>
 8008972:	002a      	movs	r2, r5
 8008974:	3208      	adds	r2, #8
 8008976:	18b2      	adds	r2, r6, r2
 8008978:	0011      	movs	r1, r2
 800897a:	6854      	ldr	r4, [r2, #4]
 800897c:	3908      	subs	r1, #8
 800897e:	08eb      	lsrs	r3, r5, #3
 8008980:	428c      	cmp	r4, r1
 8008982:	d103      	bne.n	800898c <_malloc_r+0x50>
 8008984:	68d4      	ldr	r4, [r2, #12]
 8008986:	3302      	adds	r3, #2
 8008988:	42a2      	cmp	r2, r4
 800898a:	d022      	beq.n	80089d2 <_malloc_r+0x96>
 800898c:	2203      	movs	r2, #3
 800898e:	6863      	ldr	r3, [r4, #4]
 8008990:	68a1      	ldr	r1, [r4, #8]
 8008992:	4393      	bics	r3, r2
 8008994:	68e2      	ldr	r2, [r4, #12]
 8008996:	18e3      	adds	r3, r4, r3
 8008998:	60ca      	str	r2, [r1, #12]
 800899a:	6091      	str	r1, [r2, #8]
 800899c:	2201      	movs	r2, #1
 800899e:	6859      	ldr	r1, [r3, #4]
 80089a0:	430a      	orrs	r2, r1
 80089a2:	605a      	str	r2, [r3, #4]
 80089a4:	e02a      	b.n	80089fc <_malloc_r+0xc0>
 80089a6:	233f      	movs	r3, #63	; 0x3f
 80089a8:	0a6a      	lsrs	r2, r5, #9
 80089aa:	d003      	beq.n	80089b4 <_malloc_r+0x78>
 80089ac:	2a04      	cmp	r2, #4
 80089ae:	d82b      	bhi.n	8008a08 <_malloc_r+0xcc>
 80089b0:	09ab      	lsrs	r3, r5, #6
 80089b2:	3338      	adds	r3, #56	; 0x38
 80089b4:	2203      	movs	r2, #3
 80089b6:	4694      	mov	ip, r2
 80089b8:	00d9      	lsls	r1, r3, #3
 80089ba:	1989      	adds	r1, r1, r6
 80089bc:	68cc      	ldr	r4, [r1, #12]
 80089be:	428c      	cmp	r4, r1
 80089c0:	d006      	beq.n	80089d0 <_malloc_r+0x94>
 80089c2:	4660      	mov	r0, ip
 80089c4:	6862      	ldr	r2, [r4, #4]
 80089c6:	4382      	bics	r2, r0
 80089c8:	1b57      	subs	r7, r2, r5
 80089ca:	2f0f      	cmp	r7, #15
 80089cc:	dd34      	ble.n	8008a38 <_malloc_r+0xfc>
 80089ce:	3b01      	subs	r3, #1
 80089d0:	3301      	adds	r3, #1
 80089d2:	6934      	ldr	r4, [r6, #16]
 80089d4:	49a4      	ldr	r1, [pc, #656]	; (8008c68 <_malloc_r+0x32c>)
 80089d6:	428c      	cmp	r4, r1
 80089d8:	d055      	beq.n	8008a86 <_malloc_r+0x14a>
 80089da:	2003      	movs	r0, #3
 80089dc:	6862      	ldr	r2, [r4, #4]
 80089de:	4382      	bics	r2, r0
 80089e0:	1b50      	subs	r0, r2, r5
 80089e2:	280f      	cmp	r0, #15
 80089e4:	dd36      	ble.n	8008a54 <_malloc_r+0x118>
 80089e6:	2301      	movs	r3, #1
 80089e8:	1967      	adds	r7, r4, r5
 80089ea:	431d      	orrs	r5, r3
 80089ec:	4303      	orrs	r3, r0
 80089ee:	6065      	str	r5, [r4, #4]
 80089f0:	6177      	str	r7, [r6, #20]
 80089f2:	6137      	str	r7, [r6, #16]
 80089f4:	60f9      	str	r1, [r7, #12]
 80089f6:	60b9      	str	r1, [r7, #8]
 80089f8:	607b      	str	r3, [r7, #4]
 80089fa:	50a0      	str	r0, [r4, r2]
 80089fc:	9801      	ldr	r0, [sp, #4]
 80089fe:	f000 f9cb 	bl	8008d98 <__malloc_unlock>
 8008a02:	0020      	movs	r0, r4
 8008a04:	3008      	adds	r0, #8
 8008a06:	e7a7      	b.n	8008958 <_malloc_r+0x1c>
 8008a08:	2a14      	cmp	r2, #20
 8008a0a:	d802      	bhi.n	8008a12 <_malloc_r+0xd6>
 8008a0c:	0013      	movs	r3, r2
 8008a0e:	335b      	adds	r3, #91	; 0x5b
 8008a10:	e7d0      	b.n	80089b4 <_malloc_r+0x78>
 8008a12:	2a54      	cmp	r2, #84	; 0x54
 8008a14:	d802      	bhi.n	8008a1c <_malloc_r+0xe0>
 8008a16:	0b2b      	lsrs	r3, r5, #12
 8008a18:	336e      	adds	r3, #110	; 0x6e
 8008a1a:	e7cb      	b.n	80089b4 <_malloc_r+0x78>
 8008a1c:	23aa      	movs	r3, #170	; 0xaa
 8008a1e:	005b      	lsls	r3, r3, #1
 8008a20:	429a      	cmp	r2, r3
 8008a22:	d802      	bhi.n	8008a2a <_malloc_r+0xee>
 8008a24:	0beb      	lsrs	r3, r5, #15
 8008a26:	3377      	adds	r3, #119	; 0x77
 8008a28:	e7c4      	b.n	80089b4 <_malloc_r+0x78>
 8008a2a:	4990      	ldr	r1, [pc, #576]	; (8008c6c <_malloc_r+0x330>)
 8008a2c:	237e      	movs	r3, #126	; 0x7e
 8008a2e:	428a      	cmp	r2, r1
 8008a30:	d8c0      	bhi.n	80089b4 <_malloc_r+0x78>
 8008a32:	0cab      	lsrs	r3, r5, #18
 8008a34:	337c      	adds	r3, #124	; 0x7c
 8008a36:	e7bd      	b.n	80089b4 <_malloc_r+0x78>
 8008a38:	68e0      	ldr	r0, [r4, #12]
 8008a3a:	2f00      	cmp	r7, #0
 8008a3c:	db08      	blt.n	8008a50 <_malloc_r+0x114>
 8008a3e:	68a3      	ldr	r3, [r4, #8]
 8008a40:	60d8      	str	r0, [r3, #12]
 8008a42:	6083      	str	r3, [r0, #8]
 8008a44:	2301      	movs	r3, #1
 8008a46:	18a2      	adds	r2, r4, r2
 8008a48:	6851      	ldr	r1, [r2, #4]
 8008a4a:	430b      	orrs	r3, r1
 8008a4c:	6053      	str	r3, [r2, #4]
 8008a4e:	e7d5      	b.n	80089fc <_malloc_r+0xc0>
 8008a50:	0004      	movs	r4, r0
 8008a52:	e7b4      	b.n	80089be <_malloc_r+0x82>
 8008a54:	6171      	str	r1, [r6, #20]
 8008a56:	6131      	str	r1, [r6, #16]
 8008a58:	2800      	cmp	r0, #0
 8008a5a:	daf3      	bge.n	8008a44 <_malloc_r+0x108>
 8008a5c:	6871      	ldr	r1, [r6, #4]
 8008a5e:	468c      	mov	ip, r1
 8008a60:	2180      	movs	r1, #128	; 0x80
 8008a62:	0089      	lsls	r1, r1, #2
 8008a64:	428a      	cmp	r2, r1
 8008a66:	d300      	bcc.n	8008a6a <_malloc_r+0x12e>
 8008a68:	e08c      	b.n	8008b84 <_malloc_r+0x248>
 8008a6a:	08d1      	lsrs	r1, r2, #3
 8008a6c:	0950      	lsrs	r0, r2, #5
 8008a6e:	2201      	movs	r2, #1
 8008a70:	4082      	lsls	r2, r0
 8008a72:	4660      	mov	r0, ip
 8008a74:	4302      	orrs	r2, r0
 8008a76:	6072      	str	r2, [r6, #4]
 8008a78:	00ca      	lsls	r2, r1, #3
 8008a7a:	1992      	adds	r2, r2, r6
 8008a7c:	6891      	ldr	r1, [r2, #8]
 8008a7e:	60e2      	str	r2, [r4, #12]
 8008a80:	60a1      	str	r1, [r4, #8]
 8008a82:	6094      	str	r4, [r2, #8]
 8008a84:	60cc      	str	r4, [r1, #12]
 8008a86:	2201      	movs	r2, #1
 8008a88:	4876      	ldr	r0, [pc, #472]	; (8008c64 <_malloc_r+0x328>)
 8008a8a:	1099      	asrs	r1, r3, #2
 8008a8c:	408a      	lsls	r2, r1
 8008a8e:	6841      	ldr	r1, [r0, #4]
 8008a90:	4291      	cmp	r1, r2
 8008a92:	d328      	bcc.n	8008ae6 <_malloc_r+0x1aa>
 8008a94:	420a      	tst	r2, r1
 8008a96:	d105      	bne.n	8008aa4 <_malloc_r+0x168>
 8008a98:	2403      	movs	r4, #3
 8008a9a:	43a3      	bics	r3, r4
 8008a9c:	0052      	lsls	r2, r2, #1
 8008a9e:	3304      	adds	r3, #4
 8008aa0:	420a      	tst	r2, r1
 8008aa2:	d0fb      	beq.n	8008a9c <_malloc_r+0x160>
 8008aa4:	496f      	ldr	r1, [pc, #444]	; (8008c64 <_malloc_r+0x328>)
 8008aa6:	9104      	str	r1, [sp, #16]
 8008aa8:	00d9      	lsls	r1, r3, #3
 8008aaa:	1841      	adds	r1, r0, r1
 8008aac:	468c      	mov	ip, r1
 8008aae:	000f      	movs	r7, r1
 8008ab0:	9302      	str	r3, [sp, #8]
 8008ab2:	68fc      	ldr	r4, [r7, #12]
 8008ab4:	42bc      	cmp	r4, r7
 8008ab6:	d000      	beq.n	8008aba <_malloc_r+0x17e>
 8008ab8:	e09b      	b.n	8008bf2 <_malloc_r+0x2b6>
 8008aba:	2403      	movs	r4, #3
 8008abc:	9902      	ldr	r1, [sp, #8]
 8008abe:	3708      	adds	r7, #8
 8008ac0:	3101      	adds	r1, #1
 8008ac2:	9102      	str	r1, [sp, #8]
 8008ac4:	4221      	tst	r1, r4
 8008ac6:	d1f4      	bne.n	8008ab2 <_malloc_r+0x176>
 8008ac8:	2103      	movs	r1, #3
 8008aca:	420b      	tst	r3, r1
 8008acc:	d000      	beq.n	8008ad0 <_malloc_r+0x194>
 8008ace:	e0b7      	b.n	8008c40 <_malloc_r+0x304>
 8008ad0:	6843      	ldr	r3, [r0, #4]
 8008ad2:	4393      	bics	r3, r2
 8008ad4:	6043      	str	r3, [r0, #4]
 8008ad6:	9b04      	ldr	r3, [sp, #16]
 8008ad8:	0052      	lsls	r2, r2, #1
 8008ada:	6859      	ldr	r1, [r3, #4]
 8008adc:	4291      	cmp	r1, r2
 8008ade:	d302      	bcc.n	8008ae6 <_malloc_r+0x1aa>
 8008ae0:	2a00      	cmp	r2, #0
 8008ae2:	d000      	beq.n	8008ae6 <_malloc_r+0x1aa>
 8008ae4:	e0bb      	b.n	8008c5e <_malloc_r+0x322>
 8008ae6:	2203      	movs	r2, #3
 8008ae8:	6883      	ldr	r3, [r0, #8]
 8008aea:	9302      	str	r3, [sp, #8]
 8008aec:	685b      	ldr	r3, [r3, #4]
 8008aee:	4393      	bics	r3, r2
 8008af0:	9303      	str	r3, [sp, #12]
 8008af2:	42ab      	cmp	r3, r5
 8008af4:	d303      	bcc.n	8008afe <_malloc_r+0x1c2>
 8008af6:	1b59      	subs	r1, r3, r5
 8008af8:	290f      	cmp	r1, #15
 8008afa:	dd00      	ble.n	8008afe <_malloc_r+0x1c2>
 8008afc:	e123      	b.n	8008d46 <_malloc_r+0x40a>
 8008afe:	9b02      	ldr	r3, [sp, #8]
 8008b00:	9a03      	ldr	r2, [sp, #12]
 8008b02:	2008      	movs	r0, #8
 8008b04:	189e      	adds	r6, r3, r2
 8008b06:	4b5a      	ldr	r3, [pc, #360]	; (8008c70 <_malloc_r+0x334>)
 8008b08:	681f      	ldr	r7, [r3, #0]
 8008b0a:	f002 f841 	bl	800ab90 <sysconf>
 8008b0e:	4b59      	ldr	r3, [pc, #356]	; (8008c74 <_malloc_r+0x338>)
 8008b10:	3710      	adds	r7, #16
 8008b12:	681b      	ldr	r3, [r3, #0]
 8008b14:	197f      	adds	r7, r7, r5
 8008b16:	9004      	str	r0, [sp, #16]
 8008b18:	3301      	adds	r3, #1
 8008b1a:	d003      	beq.n	8008b24 <_malloc_r+0x1e8>
 8008b1c:	1e7b      	subs	r3, r7, #1
 8008b1e:	181b      	adds	r3, r3, r0
 8008b20:	4247      	negs	r7, r0
 8008b22:	401f      	ands	r7, r3
 8008b24:	0039      	movs	r1, r7
 8008b26:	9801      	ldr	r0, [sp, #4]
 8008b28:	f002 f80c 	bl	800ab44 <_sbrk_r>
 8008b2c:	0004      	movs	r4, r0
 8008b2e:	1c43      	adds	r3, r0, #1
 8008b30:	d100      	bne.n	8008b34 <_malloc_r+0x1f8>
 8008b32:	e0de      	b.n	8008cf2 <_malloc_r+0x3b6>
 8008b34:	4286      	cmp	r6, r0
 8008b36:	d904      	bls.n	8008b42 <_malloc_r+0x206>
 8008b38:	4b4a      	ldr	r3, [pc, #296]	; (8008c64 <_malloc_r+0x328>)
 8008b3a:	9a02      	ldr	r2, [sp, #8]
 8008b3c:	429a      	cmp	r2, r3
 8008b3e:	d000      	beq.n	8008b42 <_malloc_r+0x206>
 8008b40:	e0d7      	b.n	8008cf2 <_malloc_r+0x3b6>
 8008b42:	4a4d      	ldr	r2, [pc, #308]	; (8008c78 <_malloc_r+0x33c>)
 8008b44:	6813      	ldr	r3, [r2, #0]
 8008b46:	18fb      	adds	r3, r7, r3
 8008b48:	6013      	str	r3, [r2, #0]
 8008b4a:	9a04      	ldr	r2, [sp, #16]
 8008b4c:	3a01      	subs	r2, #1
 8008b4e:	42a6      	cmp	r6, r4
 8008b50:	d000      	beq.n	8008b54 <_malloc_r+0x218>
 8008b52:	e097      	b.n	8008c84 <_malloc_r+0x348>
 8008b54:	4216      	tst	r6, r2
 8008b56:	d000      	beq.n	8008b5a <_malloc_r+0x21e>
 8008b58:	e094      	b.n	8008c84 <_malloc_r+0x348>
 8008b5a:	4b42      	ldr	r3, [pc, #264]	; (8008c64 <_malloc_r+0x328>)
 8008b5c:	689a      	ldr	r2, [r3, #8]
 8008b5e:	9b03      	ldr	r3, [sp, #12]
 8008b60:	19df      	adds	r7, r3, r7
 8008b62:	2301      	movs	r3, #1
 8008b64:	433b      	orrs	r3, r7
 8008b66:	6053      	str	r3, [r2, #4]
 8008b68:	4b43      	ldr	r3, [pc, #268]	; (8008c78 <_malloc_r+0x33c>)
 8008b6a:	4a44      	ldr	r2, [pc, #272]	; (8008c7c <_malloc_r+0x340>)
 8008b6c:	681b      	ldr	r3, [r3, #0]
 8008b6e:	6811      	ldr	r1, [r2, #0]
 8008b70:	428b      	cmp	r3, r1
 8008b72:	d900      	bls.n	8008b76 <_malloc_r+0x23a>
 8008b74:	6013      	str	r3, [r2, #0]
 8008b76:	4a42      	ldr	r2, [pc, #264]	; (8008c80 <_malloc_r+0x344>)
 8008b78:	6811      	ldr	r1, [r2, #0]
 8008b7a:	428b      	cmp	r3, r1
 8008b7c:	d800      	bhi.n	8008b80 <_malloc_r+0x244>
 8008b7e:	e0b8      	b.n	8008cf2 <_malloc_r+0x3b6>
 8008b80:	6013      	str	r3, [r2, #0]
 8008b82:	e0b6      	b.n	8008cf2 <_malloc_r+0x3b6>
 8008b84:	0a50      	lsrs	r0, r2, #9
 8008b86:	2804      	cmp	r0, #4
 8008b88:	d811      	bhi.n	8008bae <_malloc_r+0x272>
 8008b8a:	0991      	lsrs	r1, r2, #6
 8008b8c:	3138      	adds	r1, #56	; 0x38
 8008b8e:	00cf      	lsls	r7, r1, #3
 8008b90:	19bf      	adds	r7, r7, r6
 8008b92:	68b8      	ldr	r0, [r7, #8]
 8008b94:	4287      	cmp	r7, r0
 8008b96:	d125      	bne.n	8008be4 <_malloc_r+0x2a8>
 8008b98:	2201      	movs	r2, #1
 8008b9a:	1089      	asrs	r1, r1, #2
 8008b9c:	408a      	lsls	r2, r1
 8008b9e:	4661      	mov	r1, ip
 8008ba0:	430a      	orrs	r2, r1
 8008ba2:	6072      	str	r2, [r6, #4]
 8008ba4:	60e7      	str	r7, [r4, #12]
 8008ba6:	60a0      	str	r0, [r4, #8]
 8008ba8:	60bc      	str	r4, [r7, #8]
 8008baa:	60c4      	str	r4, [r0, #12]
 8008bac:	e76b      	b.n	8008a86 <_malloc_r+0x14a>
 8008bae:	2814      	cmp	r0, #20
 8008bb0:	d802      	bhi.n	8008bb8 <_malloc_r+0x27c>
 8008bb2:	0001      	movs	r1, r0
 8008bb4:	315b      	adds	r1, #91	; 0x5b
 8008bb6:	e7ea      	b.n	8008b8e <_malloc_r+0x252>
 8008bb8:	2854      	cmp	r0, #84	; 0x54
 8008bba:	d802      	bhi.n	8008bc2 <_malloc_r+0x286>
 8008bbc:	0b11      	lsrs	r1, r2, #12
 8008bbe:	316e      	adds	r1, #110	; 0x6e
 8008bc0:	e7e5      	b.n	8008b8e <_malloc_r+0x252>
 8008bc2:	21aa      	movs	r1, #170	; 0xaa
 8008bc4:	0049      	lsls	r1, r1, #1
 8008bc6:	4288      	cmp	r0, r1
 8008bc8:	d802      	bhi.n	8008bd0 <_malloc_r+0x294>
 8008bca:	0bd1      	lsrs	r1, r2, #15
 8008bcc:	3177      	adds	r1, #119	; 0x77
 8008bce:	e7de      	b.n	8008b8e <_malloc_r+0x252>
 8008bd0:	4f26      	ldr	r7, [pc, #152]	; (8008c6c <_malloc_r+0x330>)
 8008bd2:	217e      	movs	r1, #126	; 0x7e
 8008bd4:	42b8      	cmp	r0, r7
 8008bd6:	d8da      	bhi.n	8008b8e <_malloc_r+0x252>
 8008bd8:	0c91      	lsrs	r1, r2, #18
 8008bda:	317c      	adds	r1, #124	; 0x7c
 8008bdc:	e7d7      	b.n	8008b8e <_malloc_r+0x252>
 8008bde:	6880      	ldr	r0, [r0, #8]
 8008be0:	4287      	cmp	r7, r0
 8008be2:	d004      	beq.n	8008bee <_malloc_r+0x2b2>
 8008be4:	2603      	movs	r6, #3
 8008be6:	6841      	ldr	r1, [r0, #4]
 8008be8:	43b1      	bics	r1, r6
 8008bea:	4291      	cmp	r1, r2
 8008bec:	d8f7      	bhi.n	8008bde <_malloc_r+0x2a2>
 8008bee:	68c7      	ldr	r7, [r0, #12]
 8008bf0:	e7d8      	b.n	8008ba4 <_malloc_r+0x268>
 8008bf2:	2603      	movs	r6, #3
 8008bf4:	6861      	ldr	r1, [r4, #4]
 8008bf6:	43b1      	bics	r1, r6
 8008bf8:	9103      	str	r1, [sp, #12]
 8008bfa:	68e6      	ldr	r6, [r4, #12]
 8008bfc:	1b49      	subs	r1, r1, r5
 8008bfe:	290f      	cmp	r1, #15
 8008c00:	dd10      	ble.n	8008c24 <_malloc_r+0x2e8>
 8008c02:	2201      	movs	r2, #1
 8008c04:	1963      	adds	r3, r4, r5
 8008c06:	4315      	orrs	r5, r2
 8008c08:	6065      	str	r5, [r4, #4]
 8008c0a:	68a5      	ldr	r5, [r4, #8]
 8008c0c:	430a      	orrs	r2, r1
 8008c0e:	60ee      	str	r6, [r5, #12]
 8008c10:	60b5      	str	r5, [r6, #8]
 8008c12:	6143      	str	r3, [r0, #20]
 8008c14:	6103      	str	r3, [r0, #16]
 8008c16:	4814      	ldr	r0, [pc, #80]	; (8008c68 <_malloc_r+0x32c>)
 8008c18:	605a      	str	r2, [r3, #4]
 8008c1a:	60d8      	str	r0, [r3, #12]
 8008c1c:	6098      	str	r0, [r3, #8]
 8008c1e:	9b03      	ldr	r3, [sp, #12]
 8008c20:	50e1      	str	r1, [r4, r3]
 8008c22:	e6eb      	b.n	80089fc <_malloc_r+0xc0>
 8008c24:	2900      	cmp	r1, #0
 8008c26:	db09      	blt.n	8008c3c <_malloc_r+0x300>
 8008c28:	9b03      	ldr	r3, [sp, #12]
 8008c2a:	18e1      	adds	r1, r4, r3
 8008c2c:	2301      	movs	r3, #1
 8008c2e:	684a      	ldr	r2, [r1, #4]
 8008c30:	4313      	orrs	r3, r2
 8008c32:	604b      	str	r3, [r1, #4]
 8008c34:	68a3      	ldr	r3, [r4, #8]
 8008c36:	60de      	str	r6, [r3, #12]
 8008c38:	60b3      	str	r3, [r6, #8]
 8008c3a:	e6df      	b.n	80089fc <_malloc_r+0xc0>
 8008c3c:	0034      	movs	r4, r6
 8008c3e:	e739      	b.n	8008ab4 <_malloc_r+0x178>
 8008c40:	2108      	movs	r1, #8
 8008c42:	4249      	negs	r1, r1
 8008c44:	448c      	add	ip, r1
 8008c46:	4661      	mov	r1, ip
 8008c48:	6889      	ldr	r1, [r1, #8]
 8008c4a:	3b01      	subs	r3, #1
 8008c4c:	4561      	cmp	r1, ip
 8008c4e:	d100      	bne.n	8008c52 <_malloc_r+0x316>
 8008c50:	e73a      	b.n	8008ac8 <_malloc_r+0x18c>
 8008c52:	e740      	b.n	8008ad6 <_malloc_r+0x19a>
 8008c54:	3304      	adds	r3, #4
 8008c56:	0052      	lsls	r2, r2, #1
 8008c58:	420a      	tst	r2, r1
 8008c5a:	d0fb      	beq.n	8008c54 <_malloc_r+0x318>
 8008c5c:	e724      	b.n	8008aa8 <_malloc_r+0x16c>
 8008c5e:	9b02      	ldr	r3, [sp, #8]
 8008c60:	e7fa      	b.n	8008c58 <_malloc_r+0x31c>
 8008c62:	46c0      	nop			; (mov r8, r8)
 8008c64:	200002b0 	.word	0x200002b0
 8008c68:	200002b8 	.word	0x200002b8
 8008c6c:	00000554 	.word	0x00000554
 8008c70:	20000a18 	.word	0x20000a18
 8008c74:	200006b8 	.word	0x200006b8
 8008c78:	200009e8 	.word	0x200009e8
 8008c7c:	20000a10 	.word	0x20000a10
 8008c80:	20000a14 	.word	0x20000a14
 8008c84:	4934      	ldr	r1, [pc, #208]	; (8008d58 <_malloc_r+0x41c>)
 8008c86:	6808      	ldr	r0, [r1, #0]
 8008c88:	3001      	adds	r0, #1
 8008c8a:	d140      	bne.n	8008d0e <_malloc_r+0x3d2>
 8008c8c:	600c      	str	r4, [r1, #0]
 8008c8e:	2107      	movs	r1, #7
 8008c90:	0026      	movs	r6, r4
 8008c92:	2300      	movs	r3, #0
 8008c94:	400e      	ands	r6, r1
 8008c96:	420c      	tst	r4, r1
 8008c98:	d002      	beq.n	8008ca0 <_malloc_r+0x364>
 8008c9a:	3308      	adds	r3, #8
 8008c9c:	1b9b      	subs	r3, r3, r6
 8008c9e:	18e4      	adds	r4, r4, r3
 8008ca0:	19e1      	adds	r1, r4, r7
 8008ca2:	9105      	str	r1, [sp, #20]
 8008ca4:	9f05      	ldr	r7, [sp, #20]
 8008ca6:	9904      	ldr	r1, [sp, #16]
 8008ca8:	4017      	ands	r7, r2
 8008caa:	18cb      	adds	r3, r1, r3
 8008cac:	1bdf      	subs	r7, r3, r7
 8008cae:	4017      	ands	r7, r2
 8008cb0:	0039      	movs	r1, r7
 8008cb2:	9801      	ldr	r0, [sp, #4]
 8008cb4:	f001 ff46 	bl	800ab44 <_sbrk_r>
 8008cb8:	1c43      	adds	r3, r0, #1
 8008cba:	d107      	bne.n	8008ccc <_malloc_r+0x390>
 8008cbc:	1e37      	subs	r7, r6, #0
 8008cbe:	9805      	ldr	r0, [sp, #20]
 8008cc0:	d004      	beq.n	8008ccc <_malloc_r+0x390>
 8008cc2:	0030      	movs	r0, r6
 8008cc4:	2700      	movs	r7, #0
 8008cc6:	9b05      	ldr	r3, [sp, #20]
 8008cc8:	3808      	subs	r0, #8
 8008cca:	1818      	adds	r0, r3, r0
 8008ccc:	4a23      	ldr	r2, [pc, #140]	; (8008d5c <_malloc_r+0x420>)
 8008cce:	1b00      	subs	r0, r0, r4
 8008cd0:	6813      	ldr	r3, [r2, #0]
 8008cd2:	19c0      	adds	r0, r0, r7
 8008cd4:	19db      	adds	r3, r3, r7
 8008cd6:	6013      	str	r3, [r2, #0]
 8008cd8:	2201      	movs	r2, #1
 8008cda:	4b21      	ldr	r3, [pc, #132]	; (8008d60 <_malloc_r+0x424>)
 8008cdc:	9902      	ldr	r1, [sp, #8]
 8008cde:	4310      	orrs	r0, r2
 8008ce0:	609c      	str	r4, [r3, #8]
 8008ce2:	6060      	str	r0, [r4, #4]
 8008ce4:	4299      	cmp	r1, r3
 8008ce6:	d100      	bne.n	8008cea <_malloc_r+0x3ae>
 8008ce8:	e73e      	b.n	8008b68 <_malloc_r+0x22c>
 8008cea:	9b03      	ldr	r3, [sp, #12]
 8008cec:	2b0f      	cmp	r3, #15
 8008cee:	d813      	bhi.n	8008d18 <_malloc_r+0x3dc>
 8008cf0:	6062      	str	r2, [r4, #4]
 8008cf2:	2203      	movs	r2, #3
 8008cf4:	4b1a      	ldr	r3, [pc, #104]	; (8008d60 <_malloc_r+0x424>)
 8008cf6:	689b      	ldr	r3, [r3, #8]
 8008cf8:	685b      	ldr	r3, [r3, #4]
 8008cfa:	4393      	bics	r3, r2
 8008cfc:	1b59      	subs	r1, r3, r5
 8008cfe:	42ab      	cmp	r3, r5
 8008d00:	d301      	bcc.n	8008d06 <_malloc_r+0x3ca>
 8008d02:	290f      	cmp	r1, #15
 8008d04:	dc1f      	bgt.n	8008d46 <_malloc_r+0x40a>
 8008d06:	9801      	ldr	r0, [sp, #4]
 8008d08:	f000 f846 	bl	8008d98 <__malloc_unlock>
 8008d0c:	e623      	b.n	8008956 <_malloc_r+0x1a>
 8008d0e:	4913      	ldr	r1, [pc, #76]	; (8008d5c <_malloc_r+0x420>)
 8008d10:	1ba6      	subs	r6, r4, r6
 8008d12:	18f6      	adds	r6, r6, r3
 8008d14:	600e      	str	r6, [r1, #0]
 8008d16:	e7ba      	b.n	8008c8e <_malloc_r+0x352>
 8008d18:	2107      	movs	r1, #7
 8008d1a:	9b03      	ldr	r3, [sp, #12]
 8008d1c:	3b0c      	subs	r3, #12
 8008d1e:	438b      	bics	r3, r1
 8008d20:	9902      	ldr	r1, [sp, #8]
 8008d22:	6849      	ldr	r1, [r1, #4]
 8008d24:	400a      	ands	r2, r1
 8008d26:	9902      	ldr	r1, [sp, #8]
 8008d28:	431a      	orrs	r2, r3
 8008d2a:	604a      	str	r2, [r1, #4]
 8008d2c:	18ca      	adds	r2, r1, r3
 8008d2e:	2105      	movs	r1, #5
 8008d30:	6051      	str	r1, [r2, #4]
 8008d32:	6091      	str	r1, [r2, #8]
 8008d34:	2b0f      	cmp	r3, #15
 8008d36:	d800      	bhi.n	8008d3a <_malloc_r+0x3fe>
 8008d38:	e716      	b.n	8008b68 <_malloc_r+0x22c>
 8008d3a:	9902      	ldr	r1, [sp, #8]
 8008d3c:	9801      	ldr	r0, [sp, #4]
 8008d3e:	3108      	adds	r1, #8
 8008d40:	f7ff fd4a 	bl	80087d8 <_free_r>
 8008d44:	e710      	b.n	8008b68 <_malloc_r+0x22c>
 8008d46:	2201      	movs	r2, #1
 8008d48:	0013      	movs	r3, r2
 8008d4a:	4805      	ldr	r0, [pc, #20]	; (8008d60 <_malloc_r+0x424>)
 8008d4c:	432b      	orrs	r3, r5
 8008d4e:	6884      	ldr	r4, [r0, #8]
 8008d50:	6063      	str	r3, [r4, #4]
 8008d52:	1963      	adds	r3, r4, r5
 8008d54:	6083      	str	r3, [r0, #8]
 8008d56:	e623      	b.n	80089a0 <_malloc_r+0x64>
 8008d58:	200006b8 	.word	0x200006b8
 8008d5c:	200009e8 	.word	0x200009e8
 8008d60:	200002b0 	.word	0x200002b0

08008d64 <__ascii_mbtowc>:
 8008d64:	b082      	sub	sp, #8
 8008d66:	2900      	cmp	r1, #0
 8008d68:	d100      	bne.n	8008d6c <__ascii_mbtowc+0x8>
 8008d6a:	a901      	add	r1, sp, #4
 8008d6c:	1e10      	subs	r0, r2, #0
 8008d6e:	d006      	beq.n	8008d7e <__ascii_mbtowc+0x1a>
 8008d70:	2b00      	cmp	r3, #0
 8008d72:	d006      	beq.n	8008d82 <__ascii_mbtowc+0x1e>
 8008d74:	7813      	ldrb	r3, [r2, #0]
 8008d76:	600b      	str	r3, [r1, #0]
 8008d78:	7810      	ldrb	r0, [r2, #0]
 8008d7a:	1e43      	subs	r3, r0, #1
 8008d7c:	4198      	sbcs	r0, r3
 8008d7e:	b002      	add	sp, #8
 8008d80:	4770      	bx	lr
 8008d82:	2002      	movs	r0, #2
 8008d84:	4240      	negs	r0, r0
 8008d86:	e7fa      	b.n	8008d7e <__ascii_mbtowc+0x1a>

08008d88 <__malloc_lock>:
 8008d88:	b510      	push	{r4, lr}
 8008d8a:	4802      	ldr	r0, [pc, #8]	; (8008d94 <__malloc_lock+0xc>)
 8008d8c:	f7ff fcb0 	bl	80086f0 <__retarget_lock_acquire_recursive>
 8008d90:	bd10      	pop	{r4, pc}
 8008d92:	46c0      	nop			; (mov r8, r8)
 8008d94:	200009e1 	.word	0x200009e1

08008d98 <__malloc_unlock>:
 8008d98:	b510      	push	{r4, lr}
 8008d9a:	4802      	ldr	r0, [pc, #8]	; (8008da4 <__malloc_unlock+0xc>)
 8008d9c:	f7ff fca9 	bl	80086f2 <__retarget_lock_release_recursive>
 8008da0:	bd10      	pop	{r4, pc}
 8008da2:	46c0      	nop			; (mov r8, r8)
 8008da4:	200009e1 	.word	0x200009e1

08008da8 <_Balloc>:
 8008da8:	6c43      	ldr	r3, [r0, #68]	; 0x44
 8008daa:	b570      	push	{r4, r5, r6, lr}
 8008dac:	0006      	movs	r6, r0
 8008dae:	000c      	movs	r4, r1
 8008db0:	2b00      	cmp	r3, #0
 8008db2:	d012      	beq.n	8008dda <_Balloc+0x32>
 8008db4:	6c73      	ldr	r3, [r6, #68]	; 0x44
 8008db6:	00a2      	lsls	r2, r4, #2
 8008db8:	189b      	adds	r3, r3, r2
 8008dba:	6818      	ldr	r0, [r3, #0]
 8008dbc:	2800      	cmp	r0, #0
 8008dbe:	d115      	bne.n	8008dec <_Balloc+0x44>
 8008dc0:	2101      	movs	r1, #1
 8008dc2:	000d      	movs	r5, r1
 8008dc4:	40a5      	lsls	r5, r4
 8008dc6:	1d6a      	adds	r2, r5, #5
 8008dc8:	0030      	movs	r0, r6
 8008dca:	0092      	lsls	r2, r2, #2
 8008dcc:	f001 ff86 	bl	800acdc <_calloc_r>
 8008dd0:	2800      	cmp	r0, #0
 8008dd2:	d009      	beq.n	8008de8 <_Balloc+0x40>
 8008dd4:	6044      	str	r4, [r0, #4]
 8008dd6:	6085      	str	r5, [r0, #8]
 8008dd8:	e00a      	b.n	8008df0 <_Balloc+0x48>
 8008dda:	2221      	movs	r2, #33	; 0x21
 8008ddc:	2104      	movs	r1, #4
 8008dde:	f001 ff7d 	bl	800acdc <_calloc_r>
 8008de2:	6470      	str	r0, [r6, #68]	; 0x44
 8008de4:	2800      	cmp	r0, #0
 8008de6:	d1e5      	bne.n	8008db4 <_Balloc+0xc>
 8008de8:	2000      	movs	r0, #0
 8008dea:	bd70      	pop	{r4, r5, r6, pc}
 8008dec:	6802      	ldr	r2, [r0, #0]
 8008dee:	601a      	str	r2, [r3, #0]
 8008df0:	2300      	movs	r3, #0
 8008df2:	6103      	str	r3, [r0, #16]
 8008df4:	60c3      	str	r3, [r0, #12]
 8008df6:	e7f8      	b.n	8008dea <_Balloc+0x42>

08008df8 <_Bfree>:
 8008df8:	2900      	cmp	r1, #0
 8008dfa:	d006      	beq.n	8008e0a <_Bfree+0x12>
 8008dfc:	684a      	ldr	r2, [r1, #4]
 8008dfe:	6c43      	ldr	r3, [r0, #68]	; 0x44
 8008e00:	0092      	lsls	r2, r2, #2
 8008e02:	189b      	adds	r3, r3, r2
 8008e04:	681a      	ldr	r2, [r3, #0]
 8008e06:	600a      	str	r2, [r1, #0]
 8008e08:	6019      	str	r1, [r3, #0]
 8008e0a:	4770      	bx	lr

08008e0c <__multadd>:
 8008e0c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8008e0e:	000e      	movs	r6, r1
 8008e10:	9001      	str	r0, [sp, #4]
 8008e12:	000c      	movs	r4, r1
 8008e14:	001d      	movs	r5, r3
 8008e16:	2000      	movs	r0, #0
 8008e18:	690f      	ldr	r7, [r1, #16]
 8008e1a:	3614      	adds	r6, #20
 8008e1c:	6833      	ldr	r3, [r6, #0]
 8008e1e:	3001      	adds	r0, #1
 8008e20:	b299      	uxth	r1, r3
 8008e22:	4351      	muls	r1, r2
 8008e24:	0c1b      	lsrs	r3, r3, #16
 8008e26:	4353      	muls	r3, r2
 8008e28:	1949      	adds	r1, r1, r5
 8008e2a:	0c0d      	lsrs	r5, r1, #16
 8008e2c:	195b      	adds	r3, r3, r5
 8008e2e:	0c1d      	lsrs	r5, r3, #16
 8008e30:	b289      	uxth	r1, r1
 8008e32:	041b      	lsls	r3, r3, #16
 8008e34:	185b      	adds	r3, r3, r1
 8008e36:	c608      	stmia	r6!, {r3}
 8008e38:	4287      	cmp	r7, r0
 8008e3a:	dcef      	bgt.n	8008e1c <__multadd+0x10>
 8008e3c:	2d00      	cmp	r5, #0
 8008e3e:	d022      	beq.n	8008e86 <__multadd+0x7a>
 8008e40:	68a3      	ldr	r3, [r4, #8]
 8008e42:	42bb      	cmp	r3, r7
 8008e44:	dc19      	bgt.n	8008e7a <__multadd+0x6e>
 8008e46:	6861      	ldr	r1, [r4, #4]
 8008e48:	9801      	ldr	r0, [sp, #4]
 8008e4a:	3101      	adds	r1, #1
 8008e4c:	f7ff ffac 	bl	8008da8 <_Balloc>
 8008e50:	1e06      	subs	r6, r0, #0
 8008e52:	d105      	bne.n	8008e60 <__multadd+0x54>
 8008e54:	0032      	movs	r2, r6
 8008e56:	21ba      	movs	r1, #186	; 0xba
 8008e58:	4b0c      	ldr	r3, [pc, #48]	; (8008e8c <__multadd+0x80>)
 8008e5a:	480d      	ldr	r0, [pc, #52]	; (8008e90 <__multadd+0x84>)
 8008e5c:	f001 ff20 	bl	800aca0 <__assert_func>
 8008e60:	0021      	movs	r1, r4
 8008e62:	6922      	ldr	r2, [r4, #16]
 8008e64:	310c      	adds	r1, #12
 8008e66:	3202      	adds	r2, #2
 8008e68:	0092      	lsls	r2, r2, #2
 8008e6a:	300c      	adds	r0, #12
 8008e6c:	f7ff fc42 	bl	80086f4 <memcpy>
 8008e70:	0021      	movs	r1, r4
 8008e72:	9801      	ldr	r0, [sp, #4]
 8008e74:	f7ff ffc0 	bl	8008df8 <_Bfree>
 8008e78:	0034      	movs	r4, r6
 8008e7a:	1d3b      	adds	r3, r7, #4
 8008e7c:	009b      	lsls	r3, r3, #2
 8008e7e:	18e3      	adds	r3, r4, r3
 8008e80:	605d      	str	r5, [r3, #4]
 8008e82:	1c7b      	adds	r3, r7, #1
 8008e84:	6123      	str	r3, [r4, #16]
 8008e86:	0020      	movs	r0, r4
 8008e88:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8008e8a:	46c0      	nop			; (mov r8, r8)
 8008e8c:	0800eb73 	.word	0x0800eb73
 8008e90:	0800eb84 	.word	0x0800eb84

08008e94 <__hi0bits>:
 8008e94:	0003      	movs	r3, r0
 8008e96:	0c02      	lsrs	r2, r0, #16
 8008e98:	2000      	movs	r0, #0
 8008e9a:	4282      	cmp	r2, r0
 8008e9c:	d101      	bne.n	8008ea2 <__hi0bits+0xe>
 8008e9e:	041b      	lsls	r3, r3, #16
 8008ea0:	3010      	adds	r0, #16
 8008ea2:	0e1a      	lsrs	r2, r3, #24
 8008ea4:	d101      	bne.n	8008eaa <__hi0bits+0x16>
 8008ea6:	3008      	adds	r0, #8
 8008ea8:	021b      	lsls	r3, r3, #8
 8008eaa:	0f1a      	lsrs	r2, r3, #28
 8008eac:	d101      	bne.n	8008eb2 <__hi0bits+0x1e>
 8008eae:	3004      	adds	r0, #4
 8008eb0:	011b      	lsls	r3, r3, #4
 8008eb2:	0f9a      	lsrs	r2, r3, #30
 8008eb4:	d101      	bne.n	8008eba <__hi0bits+0x26>
 8008eb6:	3002      	adds	r0, #2
 8008eb8:	009b      	lsls	r3, r3, #2
 8008eba:	2b00      	cmp	r3, #0
 8008ebc:	db03      	blt.n	8008ec6 <__hi0bits+0x32>
 8008ebe:	3001      	adds	r0, #1
 8008ec0:	005b      	lsls	r3, r3, #1
 8008ec2:	d400      	bmi.n	8008ec6 <__hi0bits+0x32>
 8008ec4:	2020      	movs	r0, #32
 8008ec6:	4770      	bx	lr

08008ec8 <__lo0bits>:
 8008ec8:	6803      	ldr	r3, [r0, #0]
 8008eca:	0001      	movs	r1, r0
 8008ecc:	2207      	movs	r2, #7
 8008ece:	0018      	movs	r0, r3
 8008ed0:	4010      	ands	r0, r2
 8008ed2:	4213      	tst	r3, r2
 8008ed4:	d00d      	beq.n	8008ef2 <__lo0bits+0x2a>
 8008ed6:	3a06      	subs	r2, #6
 8008ed8:	2000      	movs	r0, #0
 8008eda:	4213      	tst	r3, r2
 8008edc:	d105      	bne.n	8008eea <__lo0bits+0x22>
 8008ede:	3002      	adds	r0, #2
 8008ee0:	4203      	tst	r3, r0
 8008ee2:	d003      	beq.n	8008eec <__lo0bits+0x24>
 8008ee4:	40d3      	lsrs	r3, r2
 8008ee6:	0010      	movs	r0, r2
 8008ee8:	600b      	str	r3, [r1, #0]
 8008eea:	4770      	bx	lr
 8008eec:	089b      	lsrs	r3, r3, #2
 8008eee:	600b      	str	r3, [r1, #0]
 8008ef0:	e7fb      	b.n	8008eea <__lo0bits+0x22>
 8008ef2:	b29a      	uxth	r2, r3
 8008ef4:	2a00      	cmp	r2, #0
 8008ef6:	d101      	bne.n	8008efc <__lo0bits+0x34>
 8008ef8:	2010      	movs	r0, #16
 8008efa:	0c1b      	lsrs	r3, r3, #16
 8008efc:	b2da      	uxtb	r2, r3
 8008efe:	2a00      	cmp	r2, #0
 8008f00:	d101      	bne.n	8008f06 <__lo0bits+0x3e>
 8008f02:	3008      	adds	r0, #8
 8008f04:	0a1b      	lsrs	r3, r3, #8
 8008f06:	071a      	lsls	r2, r3, #28
 8008f08:	d101      	bne.n	8008f0e <__lo0bits+0x46>
 8008f0a:	3004      	adds	r0, #4
 8008f0c:	091b      	lsrs	r3, r3, #4
 8008f0e:	079a      	lsls	r2, r3, #30
 8008f10:	d101      	bne.n	8008f16 <__lo0bits+0x4e>
 8008f12:	3002      	adds	r0, #2
 8008f14:	089b      	lsrs	r3, r3, #2
 8008f16:	07da      	lsls	r2, r3, #31
 8008f18:	d4e9      	bmi.n	8008eee <__lo0bits+0x26>
 8008f1a:	3001      	adds	r0, #1
 8008f1c:	085b      	lsrs	r3, r3, #1
 8008f1e:	d1e6      	bne.n	8008eee <__lo0bits+0x26>
 8008f20:	2020      	movs	r0, #32
 8008f22:	e7e2      	b.n	8008eea <__lo0bits+0x22>

08008f24 <__i2b>:
 8008f24:	b510      	push	{r4, lr}
 8008f26:	000c      	movs	r4, r1
 8008f28:	2101      	movs	r1, #1
 8008f2a:	f7ff ff3d 	bl	8008da8 <_Balloc>
 8008f2e:	2800      	cmp	r0, #0
 8008f30:	d107      	bne.n	8008f42 <__i2b+0x1e>
 8008f32:	2146      	movs	r1, #70	; 0x46
 8008f34:	4c05      	ldr	r4, [pc, #20]	; (8008f4c <__i2b+0x28>)
 8008f36:	0002      	movs	r2, r0
 8008f38:	4b05      	ldr	r3, [pc, #20]	; (8008f50 <__i2b+0x2c>)
 8008f3a:	0020      	movs	r0, r4
 8008f3c:	31ff      	adds	r1, #255	; 0xff
 8008f3e:	f001 feaf 	bl	800aca0 <__assert_func>
 8008f42:	2301      	movs	r3, #1
 8008f44:	6144      	str	r4, [r0, #20]
 8008f46:	6103      	str	r3, [r0, #16]
 8008f48:	bd10      	pop	{r4, pc}
 8008f4a:	46c0      	nop			; (mov r8, r8)
 8008f4c:	0800eb84 	.word	0x0800eb84
 8008f50:	0800eb73 	.word	0x0800eb73

08008f54 <__multiply>:
 8008f54:	b5f0      	push	{r4, r5, r6, r7, lr}
 8008f56:	0015      	movs	r5, r2
 8008f58:	690a      	ldr	r2, [r1, #16]
 8008f5a:	692b      	ldr	r3, [r5, #16]
 8008f5c:	000c      	movs	r4, r1
 8008f5e:	b08b      	sub	sp, #44	; 0x2c
 8008f60:	429a      	cmp	r2, r3
 8008f62:	da01      	bge.n	8008f68 <__multiply+0x14>
 8008f64:	002c      	movs	r4, r5
 8008f66:	000d      	movs	r5, r1
 8008f68:	6927      	ldr	r7, [r4, #16]
 8008f6a:	692e      	ldr	r6, [r5, #16]
 8008f6c:	6861      	ldr	r1, [r4, #4]
 8008f6e:	19bb      	adds	r3, r7, r6
 8008f70:	9303      	str	r3, [sp, #12]
 8008f72:	68a3      	ldr	r3, [r4, #8]
 8008f74:	19ba      	adds	r2, r7, r6
 8008f76:	4293      	cmp	r3, r2
 8008f78:	da00      	bge.n	8008f7c <__multiply+0x28>
 8008f7a:	3101      	adds	r1, #1
 8008f7c:	f7ff ff14 	bl	8008da8 <_Balloc>
 8008f80:	9002      	str	r0, [sp, #8]
 8008f82:	2800      	cmp	r0, #0
 8008f84:	d106      	bne.n	8008f94 <__multiply+0x40>
 8008f86:	21b1      	movs	r1, #177	; 0xb1
 8008f88:	4b48      	ldr	r3, [pc, #288]	; (80090ac <__multiply+0x158>)
 8008f8a:	4849      	ldr	r0, [pc, #292]	; (80090b0 <__multiply+0x15c>)
 8008f8c:	9a02      	ldr	r2, [sp, #8]
 8008f8e:	0049      	lsls	r1, r1, #1
 8008f90:	f001 fe86 	bl	800aca0 <__assert_func>
 8008f94:	9b02      	ldr	r3, [sp, #8]
 8008f96:	2200      	movs	r2, #0
 8008f98:	3314      	adds	r3, #20
 8008f9a:	469c      	mov	ip, r3
 8008f9c:	19bb      	adds	r3, r7, r6
 8008f9e:	009b      	lsls	r3, r3, #2
 8008fa0:	4463      	add	r3, ip
 8008fa2:	9304      	str	r3, [sp, #16]
 8008fa4:	4663      	mov	r3, ip
 8008fa6:	9904      	ldr	r1, [sp, #16]
 8008fa8:	428b      	cmp	r3, r1
 8008faa:	d32a      	bcc.n	8009002 <__multiply+0xae>
 8008fac:	0023      	movs	r3, r4
 8008fae:	00bf      	lsls	r7, r7, #2
 8008fb0:	3314      	adds	r3, #20
 8008fb2:	3514      	adds	r5, #20
 8008fb4:	9308      	str	r3, [sp, #32]
 8008fb6:	00b6      	lsls	r6, r6, #2
 8008fb8:	19db      	adds	r3, r3, r7
 8008fba:	9305      	str	r3, [sp, #20]
 8008fbc:	19ab      	adds	r3, r5, r6
 8008fbe:	9309      	str	r3, [sp, #36]	; 0x24
 8008fc0:	2304      	movs	r3, #4
 8008fc2:	9306      	str	r3, [sp, #24]
 8008fc4:	0023      	movs	r3, r4
 8008fc6:	9a05      	ldr	r2, [sp, #20]
 8008fc8:	3315      	adds	r3, #21
 8008fca:	9501      	str	r5, [sp, #4]
 8008fcc:	429a      	cmp	r2, r3
 8008fce:	d305      	bcc.n	8008fdc <__multiply+0x88>
 8008fd0:	1b13      	subs	r3, r2, r4
 8008fd2:	3b15      	subs	r3, #21
 8008fd4:	089b      	lsrs	r3, r3, #2
 8008fd6:	3301      	adds	r3, #1
 8008fd8:	009b      	lsls	r3, r3, #2
 8008fda:	9306      	str	r3, [sp, #24]
 8008fdc:	9b01      	ldr	r3, [sp, #4]
 8008fde:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8008fe0:	4293      	cmp	r3, r2
 8008fe2:	d310      	bcc.n	8009006 <__multiply+0xb2>
 8008fe4:	9b03      	ldr	r3, [sp, #12]
 8008fe6:	2b00      	cmp	r3, #0
 8008fe8:	dd05      	ble.n	8008ff6 <__multiply+0xa2>
 8008fea:	9b04      	ldr	r3, [sp, #16]
 8008fec:	3b04      	subs	r3, #4
 8008fee:	9304      	str	r3, [sp, #16]
 8008ff0:	681b      	ldr	r3, [r3, #0]
 8008ff2:	2b00      	cmp	r3, #0
 8008ff4:	d056      	beq.n	80090a4 <__multiply+0x150>
 8008ff6:	9b02      	ldr	r3, [sp, #8]
 8008ff8:	9a03      	ldr	r2, [sp, #12]
 8008ffa:	0018      	movs	r0, r3
 8008ffc:	611a      	str	r2, [r3, #16]
 8008ffe:	b00b      	add	sp, #44	; 0x2c
 8009000:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8009002:	c304      	stmia	r3!, {r2}
 8009004:	e7cf      	b.n	8008fa6 <__multiply+0x52>
 8009006:	9b01      	ldr	r3, [sp, #4]
 8009008:	6818      	ldr	r0, [r3, #0]
 800900a:	b280      	uxth	r0, r0
 800900c:	2800      	cmp	r0, #0
 800900e:	d01e      	beq.n	800904e <__multiply+0xfa>
 8009010:	4667      	mov	r7, ip
 8009012:	2500      	movs	r5, #0
 8009014:	9e08      	ldr	r6, [sp, #32]
 8009016:	ce02      	ldmia	r6!, {r1}
 8009018:	683b      	ldr	r3, [r7, #0]
 800901a:	9307      	str	r3, [sp, #28]
 800901c:	b28b      	uxth	r3, r1
 800901e:	4343      	muls	r3, r0
 8009020:	001a      	movs	r2, r3
 8009022:	466b      	mov	r3, sp
 8009024:	8b9b      	ldrh	r3, [r3, #28]
 8009026:	18d3      	adds	r3, r2, r3
 8009028:	195b      	adds	r3, r3, r5
 800902a:	0c0d      	lsrs	r5, r1, #16
 800902c:	4345      	muls	r5, r0
 800902e:	9a07      	ldr	r2, [sp, #28]
 8009030:	0c11      	lsrs	r1, r2, #16
 8009032:	1869      	adds	r1, r5, r1
 8009034:	0c1a      	lsrs	r2, r3, #16
 8009036:	188a      	adds	r2, r1, r2
 8009038:	b29b      	uxth	r3, r3
 800903a:	0c15      	lsrs	r5, r2, #16
 800903c:	0412      	lsls	r2, r2, #16
 800903e:	431a      	orrs	r2, r3
 8009040:	9b05      	ldr	r3, [sp, #20]
 8009042:	c704      	stmia	r7!, {r2}
 8009044:	42b3      	cmp	r3, r6
 8009046:	d8e6      	bhi.n	8009016 <__multiply+0xc2>
 8009048:	4663      	mov	r3, ip
 800904a:	9a06      	ldr	r2, [sp, #24]
 800904c:	509d      	str	r5, [r3, r2]
 800904e:	9b01      	ldr	r3, [sp, #4]
 8009050:	6818      	ldr	r0, [r3, #0]
 8009052:	0c00      	lsrs	r0, r0, #16
 8009054:	d020      	beq.n	8009098 <__multiply+0x144>
 8009056:	4663      	mov	r3, ip
 8009058:	0025      	movs	r5, r4
 800905a:	4661      	mov	r1, ip
 800905c:	2700      	movs	r7, #0
 800905e:	681b      	ldr	r3, [r3, #0]
 8009060:	3514      	adds	r5, #20
 8009062:	682a      	ldr	r2, [r5, #0]
 8009064:	680e      	ldr	r6, [r1, #0]
 8009066:	b292      	uxth	r2, r2
 8009068:	4342      	muls	r2, r0
 800906a:	0c36      	lsrs	r6, r6, #16
 800906c:	1992      	adds	r2, r2, r6
 800906e:	19d2      	adds	r2, r2, r7
 8009070:	0416      	lsls	r6, r2, #16
 8009072:	b29b      	uxth	r3, r3
 8009074:	431e      	orrs	r6, r3
 8009076:	600e      	str	r6, [r1, #0]
 8009078:	cd40      	ldmia	r5!, {r6}
 800907a:	684b      	ldr	r3, [r1, #4]
 800907c:	0c36      	lsrs	r6, r6, #16
 800907e:	4346      	muls	r6, r0
 8009080:	b29b      	uxth	r3, r3
 8009082:	0c12      	lsrs	r2, r2, #16
 8009084:	18f3      	adds	r3, r6, r3
 8009086:	189b      	adds	r3, r3, r2
 8009088:	9a05      	ldr	r2, [sp, #20]
 800908a:	0c1f      	lsrs	r7, r3, #16
 800908c:	3104      	adds	r1, #4
 800908e:	42aa      	cmp	r2, r5
 8009090:	d8e7      	bhi.n	8009062 <__multiply+0x10e>
 8009092:	4662      	mov	r2, ip
 8009094:	9906      	ldr	r1, [sp, #24]
 8009096:	5053      	str	r3, [r2, r1]
 8009098:	9b01      	ldr	r3, [sp, #4]
 800909a:	3304      	adds	r3, #4
 800909c:	9301      	str	r3, [sp, #4]
 800909e:	2304      	movs	r3, #4
 80090a0:	449c      	add	ip, r3
 80090a2:	e79b      	b.n	8008fdc <__multiply+0x88>
 80090a4:	9b03      	ldr	r3, [sp, #12]
 80090a6:	3b01      	subs	r3, #1
 80090a8:	9303      	str	r3, [sp, #12]
 80090aa:	e79b      	b.n	8008fe4 <__multiply+0x90>
 80090ac:	0800eb73 	.word	0x0800eb73
 80090b0:	0800eb84 	.word	0x0800eb84

080090b4 <__pow5mult>:
 80090b4:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80090b6:	2303      	movs	r3, #3
 80090b8:	0015      	movs	r5, r2
 80090ba:	0007      	movs	r7, r0
 80090bc:	000e      	movs	r6, r1
 80090be:	401a      	ands	r2, r3
 80090c0:	421d      	tst	r5, r3
 80090c2:	d008      	beq.n	80090d6 <__pow5mult+0x22>
 80090c4:	491a      	ldr	r1, [pc, #104]	; (8009130 <__pow5mult+0x7c>)
 80090c6:	3a01      	subs	r2, #1
 80090c8:	0092      	lsls	r2, r2, #2
 80090ca:	5852      	ldr	r2, [r2, r1]
 80090cc:	2300      	movs	r3, #0
 80090ce:	0031      	movs	r1, r6
 80090d0:	f7ff fe9c 	bl	8008e0c <__multadd>
 80090d4:	0006      	movs	r6, r0
 80090d6:	10ad      	asrs	r5, r5, #2
 80090d8:	d027      	beq.n	800912a <__pow5mult+0x76>
 80090da:	6c3c      	ldr	r4, [r7, #64]	; 0x40
 80090dc:	2c00      	cmp	r4, #0
 80090de:	d107      	bne.n	80090f0 <__pow5mult+0x3c>
 80090e0:	0038      	movs	r0, r7
 80090e2:	4914      	ldr	r1, [pc, #80]	; (8009134 <__pow5mult+0x80>)
 80090e4:	f7ff ff1e 	bl	8008f24 <__i2b>
 80090e8:	2300      	movs	r3, #0
 80090ea:	0004      	movs	r4, r0
 80090ec:	6438      	str	r0, [r7, #64]	; 0x40
 80090ee:	6003      	str	r3, [r0, #0]
 80090f0:	2301      	movs	r3, #1
 80090f2:	421d      	tst	r5, r3
 80090f4:	d00a      	beq.n	800910c <__pow5mult+0x58>
 80090f6:	0031      	movs	r1, r6
 80090f8:	0022      	movs	r2, r4
 80090fa:	0038      	movs	r0, r7
 80090fc:	f7ff ff2a 	bl	8008f54 <__multiply>
 8009100:	0031      	movs	r1, r6
 8009102:	9001      	str	r0, [sp, #4]
 8009104:	0038      	movs	r0, r7
 8009106:	f7ff fe77 	bl	8008df8 <_Bfree>
 800910a:	9e01      	ldr	r6, [sp, #4]
 800910c:	106d      	asrs	r5, r5, #1
 800910e:	d00c      	beq.n	800912a <__pow5mult+0x76>
 8009110:	6820      	ldr	r0, [r4, #0]
 8009112:	2800      	cmp	r0, #0
 8009114:	d107      	bne.n	8009126 <__pow5mult+0x72>
 8009116:	0022      	movs	r2, r4
 8009118:	0021      	movs	r1, r4
 800911a:	0038      	movs	r0, r7
 800911c:	f7ff ff1a 	bl	8008f54 <__multiply>
 8009120:	2300      	movs	r3, #0
 8009122:	6020      	str	r0, [r4, #0]
 8009124:	6003      	str	r3, [r0, #0]
 8009126:	0004      	movs	r4, r0
 8009128:	e7e2      	b.n	80090f0 <__pow5mult+0x3c>
 800912a:	0030      	movs	r0, r6
 800912c:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 800912e:	46c0      	nop			; (mov r8, r8)
 8009130:	0800ecd0 	.word	0x0800ecd0
 8009134:	00000271 	.word	0x00000271

08009138 <__lshift>:
 8009138:	b5f0      	push	{r4, r5, r6, r7, lr}
 800913a:	000c      	movs	r4, r1
 800913c:	0017      	movs	r7, r2
 800913e:	6923      	ldr	r3, [r4, #16]
 8009140:	1155      	asrs	r5, r2, #5
 8009142:	b087      	sub	sp, #28
 8009144:	18eb      	adds	r3, r5, r3
 8009146:	9302      	str	r3, [sp, #8]
 8009148:	3301      	adds	r3, #1
 800914a:	9301      	str	r3, [sp, #4]
 800914c:	6849      	ldr	r1, [r1, #4]
 800914e:	68a3      	ldr	r3, [r4, #8]
 8009150:	9004      	str	r0, [sp, #16]
 8009152:	9a01      	ldr	r2, [sp, #4]
 8009154:	4293      	cmp	r3, r2
 8009156:	db10      	blt.n	800917a <__lshift+0x42>
 8009158:	9804      	ldr	r0, [sp, #16]
 800915a:	f7ff fe25 	bl	8008da8 <_Balloc>
 800915e:	2300      	movs	r3, #0
 8009160:	0002      	movs	r2, r0
 8009162:	0006      	movs	r6, r0
 8009164:	0019      	movs	r1, r3
 8009166:	3214      	adds	r2, #20
 8009168:	4298      	cmp	r0, r3
 800916a:	d10c      	bne.n	8009186 <__lshift+0x4e>
 800916c:	31df      	adds	r1, #223	; 0xdf
 800916e:	0032      	movs	r2, r6
 8009170:	4b26      	ldr	r3, [pc, #152]	; (800920c <__lshift+0xd4>)
 8009172:	4827      	ldr	r0, [pc, #156]	; (8009210 <__lshift+0xd8>)
 8009174:	31ff      	adds	r1, #255	; 0xff
 8009176:	f001 fd93 	bl	800aca0 <__assert_func>
 800917a:	3101      	adds	r1, #1
 800917c:	005b      	lsls	r3, r3, #1
 800917e:	e7e8      	b.n	8009152 <__lshift+0x1a>
 8009180:	0098      	lsls	r0, r3, #2
 8009182:	5011      	str	r1, [r2, r0]
 8009184:	3301      	adds	r3, #1
 8009186:	42ab      	cmp	r3, r5
 8009188:	dbfa      	blt.n	8009180 <__lshift+0x48>
 800918a:	43eb      	mvns	r3, r5
 800918c:	17db      	asrs	r3, r3, #31
 800918e:	401d      	ands	r5, r3
 8009190:	211f      	movs	r1, #31
 8009192:	0023      	movs	r3, r4
 8009194:	0038      	movs	r0, r7
 8009196:	00ad      	lsls	r5, r5, #2
 8009198:	1955      	adds	r5, r2, r5
 800919a:	6922      	ldr	r2, [r4, #16]
 800919c:	3314      	adds	r3, #20
 800919e:	0092      	lsls	r2, r2, #2
 80091a0:	4008      	ands	r0, r1
 80091a2:	4684      	mov	ip, r0
 80091a4:	189a      	adds	r2, r3, r2
 80091a6:	420f      	tst	r7, r1
 80091a8:	d02a      	beq.n	8009200 <__lshift+0xc8>
 80091aa:	3101      	adds	r1, #1
 80091ac:	1a09      	subs	r1, r1, r0
 80091ae:	9105      	str	r1, [sp, #20]
 80091b0:	2100      	movs	r1, #0
 80091b2:	9503      	str	r5, [sp, #12]
 80091b4:	4667      	mov	r7, ip
 80091b6:	6818      	ldr	r0, [r3, #0]
 80091b8:	40b8      	lsls	r0, r7
 80091ba:	4308      	orrs	r0, r1
 80091bc:	9903      	ldr	r1, [sp, #12]
 80091be:	c101      	stmia	r1!, {r0}
 80091c0:	9103      	str	r1, [sp, #12]
 80091c2:	9805      	ldr	r0, [sp, #20]
 80091c4:	cb02      	ldmia	r3!, {r1}
 80091c6:	40c1      	lsrs	r1, r0
 80091c8:	429a      	cmp	r2, r3
 80091ca:	d8f3      	bhi.n	80091b4 <__lshift+0x7c>
 80091cc:	0020      	movs	r0, r4
 80091ce:	3015      	adds	r0, #21
 80091d0:	2304      	movs	r3, #4
 80091d2:	4282      	cmp	r2, r0
 80091d4:	d304      	bcc.n	80091e0 <__lshift+0xa8>
 80091d6:	1b13      	subs	r3, r2, r4
 80091d8:	3b15      	subs	r3, #21
 80091da:	089b      	lsrs	r3, r3, #2
 80091dc:	3301      	adds	r3, #1
 80091de:	009b      	lsls	r3, r3, #2
 80091e0:	50e9      	str	r1, [r5, r3]
 80091e2:	2900      	cmp	r1, #0
 80091e4:	d002      	beq.n	80091ec <__lshift+0xb4>
 80091e6:	9b02      	ldr	r3, [sp, #8]
 80091e8:	3302      	adds	r3, #2
 80091ea:	9301      	str	r3, [sp, #4]
 80091ec:	9b01      	ldr	r3, [sp, #4]
 80091ee:	9804      	ldr	r0, [sp, #16]
 80091f0:	3b01      	subs	r3, #1
 80091f2:	0021      	movs	r1, r4
 80091f4:	6133      	str	r3, [r6, #16]
 80091f6:	f7ff fdff 	bl	8008df8 <_Bfree>
 80091fa:	0030      	movs	r0, r6
 80091fc:	b007      	add	sp, #28
 80091fe:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8009200:	cb02      	ldmia	r3!, {r1}
 8009202:	c502      	stmia	r5!, {r1}
 8009204:	429a      	cmp	r2, r3
 8009206:	d8fb      	bhi.n	8009200 <__lshift+0xc8>
 8009208:	e7f0      	b.n	80091ec <__lshift+0xb4>
 800920a:	46c0      	nop			; (mov r8, r8)
 800920c:	0800eb73 	.word	0x0800eb73
 8009210:	0800eb84 	.word	0x0800eb84

08009214 <__mcmp>:
 8009214:	b530      	push	{r4, r5, lr}
 8009216:	690b      	ldr	r3, [r1, #16]
 8009218:	6904      	ldr	r4, [r0, #16]
 800921a:	0002      	movs	r2, r0
 800921c:	1ae0      	subs	r0, r4, r3
 800921e:	429c      	cmp	r4, r3
 8009220:	d10e      	bne.n	8009240 <__mcmp+0x2c>
 8009222:	3214      	adds	r2, #20
 8009224:	009b      	lsls	r3, r3, #2
 8009226:	3114      	adds	r1, #20
 8009228:	0014      	movs	r4, r2
 800922a:	18c9      	adds	r1, r1, r3
 800922c:	18d2      	adds	r2, r2, r3
 800922e:	3a04      	subs	r2, #4
 8009230:	3904      	subs	r1, #4
 8009232:	6815      	ldr	r5, [r2, #0]
 8009234:	680b      	ldr	r3, [r1, #0]
 8009236:	429d      	cmp	r5, r3
 8009238:	d003      	beq.n	8009242 <__mcmp+0x2e>
 800923a:	2001      	movs	r0, #1
 800923c:	429d      	cmp	r5, r3
 800923e:	d303      	bcc.n	8009248 <__mcmp+0x34>
 8009240:	bd30      	pop	{r4, r5, pc}
 8009242:	4294      	cmp	r4, r2
 8009244:	d3f3      	bcc.n	800922e <__mcmp+0x1a>
 8009246:	e7fb      	b.n	8009240 <__mcmp+0x2c>
 8009248:	4240      	negs	r0, r0
 800924a:	e7f9      	b.n	8009240 <__mcmp+0x2c>

0800924c <__mdiff>:
 800924c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800924e:	000e      	movs	r6, r1
 8009250:	0007      	movs	r7, r0
 8009252:	0011      	movs	r1, r2
 8009254:	0030      	movs	r0, r6
 8009256:	b087      	sub	sp, #28
 8009258:	0014      	movs	r4, r2
 800925a:	f7ff ffdb 	bl	8009214 <__mcmp>
 800925e:	1e05      	subs	r5, r0, #0
 8009260:	d110      	bne.n	8009284 <__mdiff+0x38>
 8009262:	0001      	movs	r1, r0
 8009264:	0038      	movs	r0, r7
 8009266:	f7ff fd9f 	bl	8008da8 <_Balloc>
 800926a:	1e02      	subs	r2, r0, #0
 800926c:	d104      	bne.n	8009278 <__mdiff+0x2c>
 800926e:	4b3f      	ldr	r3, [pc, #252]	; (800936c <__mdiff+0x120>)
 8009270:	483f      	ldr	r0, [pc, #252]	; (8009370 <__mdiff+0x124>)
 8009272:	4940      	ldr	r1, [pc, #256]	; (8009374 <__mdiff+0x128>)
 8009274:	f001 fd14 	bl	800aca0 <__assert_func>
 8009278:	2301      	movs	r3, #1
 800927a:	6145      	str	r5, [r0, #20]
 800927c:	6103      	str	r3, [r0, #16]
 800927e:	0010      	movs	r0, r2
 8009280:	b007      	add	sp, #28
 8009282:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8009284:	2301      	movs	r3, #1
 8009286:	9301      	str	r3, [sp, #4]
 8009288:	2800      	cmp	r0, #0
 800928a:	db04      	blt.n	8009296 <__mdiff+0x4a>
 800928c:	0023      	movs	r3, r4
 800928e:	0034      	movs	r4, r6
 8009290:	001e      	movs	r6, r3
 8009292:	2300      	movs	r3, #0
 8009294:	9301      	str	r3, [sp, #4]
 8009296:	0038      	movs	r0, r7
 8009298:	6861      	ldr	r1, [r4, #4]
 800929a:	f7ff fd85 	bl	8008da8 <_Balloc>
 800929e:	1e02      	subs	r2, r0, #0
 80092a0:	d103      	bne.n	80092aa <__mdiff+0x5e>
 80092a2:	4b32      	ldr	r3, [pc, #200]	; (800936c <__mdiff+0x120>)
 80092a4:	4832      	ldr	r0, [pc, #200]	; (8009370 <__mdiff+0x124>)
 80092a6:	4934      	ldr	r1, [pc, #208]	; (8009378 <__mdiff+0x12c>)
 80092a8:	e7e4      	b.n	8009274 <__mdiff+0x28>
 80092aa:	9b01      	ldr	r3, [sp, #4]
 80092ac:	2700      	movs	r7, #0
 80092ae:	60c3      	str	r3, [r0, #12]
 80092b0:	6920      	ldr	r0, [r4, #16]
 80092b2:	3414      	adds	r4, #20
 80092b4:	0083      	lsls	r3, r0, #2
 80092b6:	18e3      	adds	r3, r4, r3
 80092b8:	0021      	movs	r1, r4
 80092ba:	9401      	str	r4, [sp, #4]
 80092bc:	0034      	movs	r4, r6
 80092be:	9302      	str	r3, [sp, #8]
 80092c0:	6933      	ldr	r3, [r6, #16]
 80092c2:	3414      	adds	r4, #20
 80092c4:	009b      	lsls	r3, r3, #2
 80092c6:	18e3      	adds	r3, r4, r3
 80092c8:	9303      	str	r3, [sp, #12]
 80092ca:	0013      	movs	r3, r2
 80092cc:	3314      	adds	r3, #20
 80092ce:	469c      	mov	ip, r3
 80092d0:	9305      	str	r3, [sp, #20]
 80092d2:	9104      	str	r1, [sp, #16]
 80092d4:	9b04      	ldr	r3, [sp, #16]
 80092d6:	cc02      	ldmia	r4!, {r1}
 80092d8:	cb20      	ldmia	r3!, {r5}
 80092da:	9304      	str	r3, [sp, #16]
 80092dc:	b2ab      	uxth	r3, r5
 80092de:	19df      	adds	r7, r3, r7
 80092e0:	b28b      	uxth	r3, r1
 80092e2:	1afb      	subs	r3, r7, r3
 80092e4:	0c09      	lsrs	r1, r1, #16
 80092e6:	0c2d      	lsrs	r5, r5, #16
 80092e8:	1a6d      	subs	r5, r5, r1
 80092ea:	1419      	asrs	r1, r3, #16
 80092ec:	1869      	adds	r1, r5, r1
 80092ee:	b29b      	uxth	r3, r3
 80092f0:	140f      	asrs	r7, r1, #16
 80092f2:	0409      	lsls	r1, r1, #16
 80092f4:	4319      	orrs	r1, r3
 80092f6:	4663      	mov	r3, ip
 80092f8:	c302      	stmia	r3!, {r1}
 80092fa:	469c      	mov	ip, r3
 80092fc:	9b03      	ldr	r3, [sp, #12]
 80092fe:	42a3      	cmp	r3, r4
 8009300:	d8e8      	bhi.n	80092d4 <__mdiff+0x88>
 8009302:	0031      	movs	r1, r6
 8009304:	9c03      	ldr	r4, [sp, #12]
 8009306:	3115      	adds	r1, #21
 8009308:	2304      	movs	r3, #4
 800930a:	428c      	cmp	r4, r1
 800930c:	d304      	bcc.n	8009318 <__mdiff+0xcc>
 800930e:	1ba3      	subs	r3, r4, r6
 8009310:	3b15      	subs	r3, #21
 8009312:	089b      	lsrs	r3, r3, #2
 8009314:	3301      	adds	r3, #1
 8009316:	009b      	lsls	r3, r3, #2
 8009318:	9901      	ldr	r1, [sp, #4]
 800931a:	18cd      	adds	r5, r1, r3
 800931c:	9905      	ldr	r1, [sp, #20]
 800931e:	002e      	movs	r6, r5
 8009320:	18cb      	adds	r3, r1, r3
 8009322:	469c      	mov	ip, r3
 8009324:	9902      	ldr	r1, [sp, #8]
 8009326:	428e      	cmp	r6, r1
 8009328:	d310      	bcc.n	800934c <__mdiff+0x100>
 800932a:	9e02      	ldr	r6, [sp, #8]
 800932c:	1ee9      	subs	r1, r5, #3
 800932e:	2400      	movs	r4, #0
 8009330:	428e      	cmp	r6, r1
 8009332:	d304      	bcc.n	800933e <__mdiff+0xf2>
 8009334:	0031      	movs	r1, r6
 8009336:	3103      	adds	r1, #3
 8009338:	1b49      	subs	r1, r1, r5
 800933a:	0889      	lsrs	r1, r1, #2
 800933c:	008c      	lsls	r4, r1, #2
 800933e:	191b      	adds	r3, r3, r4
 8009340:	3b04      	subs	r3, #4
 8009342:	6819      	ldr	r1, [r3, #0]
 8009344:	2900      	cmp	r1, #0
 8009346:	d00f      	beq.n	8009368 <__mdiff+0x11c>
 8009348:	6110      	str	r0, [r2, #16]
 800934a:	e798      	b.n	800927e <__mdiff+0x32>
 800934c:	ce02      	ldmia	r6!, {r1}
 800934e:	b28c      	uxth	r4, r1
 8009350:	19e4      	adds	r4, r4, r7
 8009352:	0c0f      	lsrs	r7, r1, #16
 8009354:	1421      	asrs	r1, r4, #16
 8009356:	1879      	adds	r1, r7, r1
 8009358:	b2a4      	uxth	r4, r4
 800935a:	140f      	asrs	r7, r1, #16
 800935c:	0409      	lsls	r1, r1, #16
 800935e:	4321      	orrs	r1, r4
 8009360:	4664      	mov	r4, ip
 8009362:	c402      	stmia	r4!, {r1}
 8009364:	46a4      	mov	ip, r4
 8009366:	e7dd      	b.n	8009324 <__mdiff+0xd8>
 8009368:	3801      	subs	r0, #1
 800936a:	e7e9      	b.n	8009340 <__mdiff+0xf4>
 800936c:	0800eb73 	.word	0x0800eb73
 8009370:	0800eb84 	.word	0x0800eb84
 8009374:	00000237 	.word	0x00000237
 8009378:	00000245 	.word	0x00000245

0800937c <__d2b>:
 800937c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800937e:	2101      	movs	r1, #1
 8009380:	0014      	movs	r4, r2
 8009382:	001d      	movs	r5, r3
 8009384:	9f08      	ldr	r7, [sp, #32]
 8009386:	f7ff fd0f 	bl	8008da8 <_Balloc>
 800938a:	1e06      	subs	r6, r0, #0
 800938c:	d105      	bne.n	800939a <__d2b+0x1e>
 800938e:	0032      	movs	r2, r6
 8009390:	4b24      	ldr	r3, [pc, #144]	; (8009424 <__d2b+0xa8>)
 8009392:	4825      	ldr	r0, [pc, #148]	; (8009428 <__d2b+0xac>)
 8009394:	4925      	ldr	r1, [pc, #148]	; (800942c <__d2b+0xb0>)
 8009396:	f001 fc83 	bl	800aca0 <__assert_func>
 800939a:	032b      	lsls	r3, r5, #12
 800939c:	006d      	lsls	r5, r5, #1
 800939e:	0b1b      	lsrs	r3, r3, #12
 80093a0:	0d6d      	lsrs	r5, r5, #21
 80093a2:	d125      	bne.n	80093f0 <__d2b+0x74>
 80093a4:	9301      	str	r3, [sp, #4]
 80093a6:	2c00      	cmp	r4, #0
 80093a8:	d028      	beq.n	80093fc <__d2b+0x80>
 80093aa:	4668      	mov	r0, sp
 80093ac:	9400      	str	r4, [sp, #0]
 80093ae:	f7ff fd8b 	bl	8008ec8 <__lo0bits>
 80093b2:	9b01      	ldr	r3, [sp, #4]
 80093b4:	9900      	ldr	r1, [sp, #0]
 80093b6:	2800      	cmp	r0, #0
 80093b8:	d01e      	beq.n	80093f8 <__d2b+0x7c>
 80093ba:	2220      	movs	r2, #32
 80093bc:	001c      	movs	r4, r3
 80093be:	1a12      	subs	r2, r2, r0
 80093c0:	4094      	lsls	r4, r2
 80093c2:	0022      	movs	r2, r4
 80093c4:	40c3      	lsrs	r3, r0
 80093c6:	430a      	orrs	r2, r1
 80093c8:	6172      	str	r2, [r6, #20]
 80093ca:	9301      	str	r3, [sp, #4]
 80093cc:	9c01      	ldr	r4, [sp, #4]
 80093ce:	61b4      	str	r4, [r6, #24]
 80093d0:	1e63      	subs	r3, r4, #1
 80093d2:	419c      	sbcs	r4, r3
 80093d4:	3401      	adds	r4, #1
 80093d6:	6134      	str	r4, [r6, #16]
 80093d8:	2d00      	cmp	r5, #0
 80093da:	d017      	beq.n	800940c <__d2b+0x90>
 80093dc:	2435      	movs	r4, #53	; 0x35
 80093de:	4b14      	ldr	r3, [pc, #80]	; (8009430 <__d2b+0xb4>)
 80093e0:	18ed      	adds	r5, r5, r3
 80093e2:	182d      	adds	r5, r5, r0
 80093e4:	603d      	str	r5, [r7, #0]
 80093e6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80093e8:	1a24      	subs	r4, r4, r0
 80093ea:	601c      	str	r4, [r3, #0]
 80093ec:	0030      	movs	r0, r6
 80093ee:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 80093f0:	2280      	movs	r2, #128	; 0x80
 80093f2:	0352      	lsls	r2, r2, #13
 80093f4:	4313      	orrs	r3, r2
 80093f6:	e7d5      	b.n	80093a4 <__d2b+0x28>
 80093f8:	6171      	str	r1, [r6, #20]
 80093fa:	e7e7      	b.n	80093cc <__d2b+0x50>
 80093fc:	a801      	add	r0, sp, #4
 80093fe:	f7ff fd63 	bl	8008ec8 <__lo0bits>
 8009402:	9b01      	ldr	r3, [sp, #4]
 8009404:	2401      	movs	r4, #1
 8009406:	6173      	str	r3, [r6, #20]
 8009408:	3020      	adds	r0, #32
 800940a:	e7e4      	b.n	80093d6 <__d2b+0x5a>
 800940c:	4b09      	ldr	r3, [pc, #36]	; (8009434 <__d2b+0xb8>)
 800940e:	18c0      	adds	r0, r0, r3
 8009410:	4b09      	ldr	r3, [pc, #36]	; (8009438 <__d2b+0xbc>)
 8009412:	6038      	str	r0, [r7, #0]
 8009414:	18e3      	adds	r3, r4, r3
 8009416:	009b      	lsls	r3, r3, #2
 8009418:	18f3      	adds	r3, r6, r3
 800941a:	6958      	ldr	r0, [r3, #20]
 800941c:	f7ff fd3a 	bl	8008e94 <__hi0bits>
 8009420:	0164      	lsls	r4, r4, #5
 8009422:	e7e0      	b.n	80093e6 <__d2b+0x6a>
 8009424:	0800eb73 	.word	0x0800eb73
 8009428:	0800eb84 	.word	0x0800eb84
 800942c:	0000030f 	.word	0x0000030f
 8009430:	fffffbcd 	.word	0xfffffbcd
 8009434:	fffffbce 	.word	0xfffffbce
 8009438:	3fffffff 	.word	0x3fffffff

0800943c <__ascii_wctomb>:
 800943c:	0003      	movs	r3, r0
 800943e:	1e08      	subs	r0, r1, #0
 8009440:	d005      	beq.n	800944e <__ascii_wctomb+0x12>
 8009442:	2aff      	cmp	r2, #255	; 0xff
 8009444:	d904      	bls.n	8009450 <__ascii_wctomb+0x14>
 8009446:	228a      	movs	r2, #138	; 0x8a
 8009448:	2001      	movs	r0, #1
 800944a:	601a      	str	r2, [r3, #0]
 800944c:	4240      	negs	r0, r0
 800944e:	4770      	bx	lr
 8009450:	2001      	movs	r0, #1
 8009452:	700a      	strb	r2, [r1, #0]
 8009454:	e7fb      	b.n	800944e <__ascii_wctomb+0x12>
	...

08009458 <_svfprintf_r>:
 8009458:	b5f0      	push	{r4, r5, r6, r7, lr}
 800945a:	b0d9      	sub	sp, #356	; 0x164
 800945c:	001c      	movs	r4, r3
 800945e:	910b      	str	r1, [sp, #44]	; 0x2c
 8009460:	9208      	str	r2, [sp, #32]
 8009462:	900a      	str	r0, [sp, #40]	; 0x28
 8009464:	f001 fb6a 	bl	800ab3c <_localeconv_r>
 8009468:	6803      	ldr	r3, [r0, #0]
 800946a:	0018      	movs	r0, r3
 800946c:	931c      	str	r3, [sp, #112]	; 0x70
 800946e:	f7f6 fe49 	bl	8000104 <strlen>
 8009472:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8009474:	9016      	str	r0, [sp, #88]	; 0x58
 8009476:	899b      	ldrh	r3, [r3, #12]
 8009478:	061b      	lsls	r3, r3, #24
 800947a:	d517      	bpl.n	80094ac <_svfprintf_r+0x54>
 800947c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800947e:	691b      	ldr	r3, [r3, #16]
 8009480:	2b00      	cmp	r3, #0
 8009482:	d113      	bne.n	80094ac <_svfprintf_r+0x54>
 8009484:	2140      	movs	r1, #64	; 0x40
 8009486:	980a      	ldr	r0, [sp, #40]	; 0x28
 8009488:	f7ff fa58 	bl	800893c <_malloc_r>
 800948c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800948e:	6018      	str	r0, [r3, #0]
 8009490:	6118      	str	r0, [r3, #16]
 8009492:	2800      	cmp	r0, #0
 8009494:	d107      	bne.n	80094a6 <_svfprintf_r+0x4e>
 8009496:	230c      	movs	r3, #12
 8009498:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800949a:	6013      	str	r3, [r2, #0]
 800949c:	3b0d      	subs	r3, #13
 800949e:	9317      	str	r3, [sp, #92]	; 0x5c
 80094a0:	9817      	ldr	r0, [sp, #92]	; 0x5c
 80094a2:	b059      	add	sp, #356	; 0x164
 80094a4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80094a6:	2340      	movs	r3, #64	; 0x40
 80094a8:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 80094aa:	6153      	str	r3, [r2, #20]
 80094ac:	2300      	movs	r3, #0
 80094ae:	2200      	movs	r2, #0
 80094b0:	932e      	str	r3, [sp, #184]	; 0xb8
 80094b2:	932d      	str	r3, [sp, #180]	; 0xb4
 80094b4:	930e      	str	r3, [sp, #56]	; 0x38
 80094b6:	2300      	movs	r3, #0
 80094b8:	9214      	str	r2, [sp, #80]	; 0x50
 80094ba:	9315      	str	r3, [sp, #84]	; 0x54
 80094bc:	2300      	movs	r3, #0
 80094be:	af2f      	add	r7, sp, #188	; 0xbc
 80094c0:	972c      	str	r7, [sp, #176]	; 0xb0
 80094c2:	931f      	str	r3, [sp, #124]	; 0x7c
 80094c4:	931e      	str	r3, [sp, #120]	; 0x78
 80094c6:	9312      	str	r3, [sp, #72]	; 0x48
 80094c8:	931b      	str	r3, [sp, #108]	; 0x6c
 80094ca:	931d      	str	r3, [sp, #116]	; 0x74
 80094cc:	9317      	str	r3, [sp, #92]	; 0x5c
 80094ce:	9d08      	ldr	r5, [sp, #32]
 80094d0:	782b      	ldrb	r3, [r5, #0]
 80094d2:	2b00      	cmp	r3, #0
 80094d4:	d002      	beq.n	80094dc <_svfprintf_r+0x84>
 80094d6:	2b25      	cmp	r3, #37	; 0x25
 80094d8:	d000      	beq.n	80094dc <_svfprintf_r+0x84>
 80094da:	e091      	b.n	8009600 <_svfprintf_r+0x1a8>
 80094dc:	9b08      	ldr	r3, [sp, #32]
 80094de:	1aee      	subs	r6, r5, r3
 80094e0:	429d      	cmp	r5, r3
 80094e2:	d016      	beq.n	8009512 <_svfprintf_r+0xba>
 80094e4:	603b      	str	r3, [r7, #0]
 80094e6:	9b2e      	ldr	r3, [sp, #184]	; 0xb8
 80094e8:	607e      	str	r6, [r7, #4]
 80094ea:	199b      	adds	r3, r3, r6
 80094ec:	932e      	str	r3, [sp, #184]	; 0xb8
 80094ee:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
 80094f0:	3708      	adds	r7, #8
 80094f2:	3301      	adds	r3, #1
 80094f4:	932d      	str	r3, [sp, #180]	; 0xb4
 80094f6:	2b07      	cmp	r3, #7
 80094f8:	dd08      	ble.n	800950c <_svfprintf_r+0xb4>
 80094fa:	990b      	ldr	r1, [sp, #44]	; 0x2c
 80094fc:	980a      	ldr	r0, [sp, #40]	; 0x28
 80094fe:	aa2c      	add	r2, sp, #176	; 0xb0
 8009500:	f002 face 	bl	800baa0 <__ssprint_r>
 8009504:	2800      	cmp	r0, #0
 8009506:	d000      	beq.n	800950a <_svfprintf_r+0xb2>
 8009508:	e1cf      	b.n	80098aa <_svfprintf_r+0x452>
 800950a:	af2f      	add	r7, sp, #188	; 0xbc
 800950c:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800950e:	199b      	adds	r3, r3, r6
 8009510:	9317      	str	r3, [sp, #92]	; 0x5c
 8009512:	782b      	ldrb	r3, [r5, #0]
 8009514:	2b00      	cmp	r3, #0
 8009516:	d101      	bne.n	800951c <_svfprintf_r+0xc4>
 8009518:	f001 f99e 	bl	800a858 <_svfprintf_r+0x1400>
 800951c:	221b      	movs	r2, #27
 800951e:	2300      	movs	r3, #0
 8009520:	a91e      	add	r1, sp, #120	; 0x78
 8009522:	1852      	adds	r2, r2, r1
 8009524:	7013      	strb	r3, [r2, #0]
 8009526:	2201      	movs	r2, #1
 8009528:	001e      	movs	r6, r3
 800952a:	4252      	negs	r2, r2
 800952c:	3501      	adds	r5, #1
 800952e:	9209      	str	r2, [sp, #36]	; 0x24
 8009530:	9318      	str	r3, [sp, #96]	; 0x60
 8009532:	1c6b      	adds	r3, r5, #1
 8009534:	9313      	str	r3, [sp, #76]	; 0x4c
 8009536:	782b      	ldrb	r3, [r5, #0]
 8009538:	930f      	str	r3, [sp, #60]	; 0x3c
 800953a:	980f      	ldr	r0, [sp, #60]	; 0x3c
 800953c:	3820      	subs	r0, #32
 800953e:	285a      	cmp	r0, #90	; 0x5a
 8009540:	d901      	bls.n	8009546 <_svfprintf_r+0xee>
 8009542:	f000 fe20 	bl	800a186 <_svfprintf_r+0xd2e>
 8009546:	f7f6 fdef 	bl	8000128 <__gnu_thumb1_case_uhi>
 800954a:	0078      	.short	0x0078
 800954c:	061e061e 	.word	0x061e061e
 8009550:	061e0082 	.word	0x061e0082
 8009554:	061e061e 	.word	0x061e061e
 8009558:	061e005d 	.word	0x061e005d
 800955c:	0084061e 	.word	0x0084061e
 8009560:	061e008c 	.word	0x061e008c
 8009564:	0091008a 	.word	0x0091008a
 8009568:	00b2061e 	.word	0x00b2061e
 800956c:	00b400b4 	.word	0x00b400b4
 8009570:	00b400b4 	.word	0x00b400b4
 8009574:	00b400b4 	.word	0x00b400b4
 8009578:	00b400b4 	.word	0x00b400b4
 800957c:	061e00b4 	.word	0x061e00b4
 8009580:	061e061e 	.word	0x061e061e
 8009584:	061e061e 	.word	0x061e061e
 8009588:	061e061e 	.word	0x061e061e
 800958c:	061e013b 	.word	0x061e013b
 8009590:	00f400e0 	.word	0x00f400e0
 8009594:	013b013b 	.word	0x013b013b
 8009598:	061e013b 	.word	0x061e013b
 800959c:	061e061e 	.word	0x061e061e
 80095a0:	00c7061e 	.word	0x00c7061e
 80095a4:	061e061e 	.word	0x061e061e
 80095a8:	061e04c7 	.word	0x061e04c7
 80095ac:	061e061e 	.word	0x061e061e
 80095b0:	061e050a 	.word	0x061e050a
 80095b4:	061e052a 	.word	0x061e052a
 80095b8:	055c061e 	.word	0x055c061e
 80095bc:	061e061e 	.word	0x061e061e
 80095c0:	061e061e 	.word	0x061e061e
 80095c4:	061e061e 	.word	0x061e061e
 80095c8:	061e061e 	.word	0x061e061e
 80095cc:	061e013b 	.word	0x061e013b
 80095d0:	00f600e0 	.word	0x00f600e0
 80095d4:	013b013b 	.word	0x013b013b
 80095d8:	00c9013b 	.word	0x00c9013b
 80095dc:	00dc00f6 	.word	0x00dc00f6
 80095e0:	00d5061e 	.word	0x00d5061e
 80095e4:	04a7061e 	.word	0x04a7061e
 80095e8:	04fa04c9 	.word	0x04fa04c9
 80095ec:	061e00dc 	.word	0x061e00dc
 80095f0:	0080050a 	.word	0x0080050a
 80095f4:	061e052c 	.word	0x061e052c
 80095f8:	057c061e 	.word	0x057c061e
 80095fc:	0080061e 	.word	0x0080061e
 8009600:	3501      	adds	r5, #1
 8009602:	e765      	b.n	80094d0 <_svfprintf_r+0x78>
 8009604:	980a      	ldr	r0, [sp, #40]	; 0x28
 8009606:	f001 fa99 	bl	800ab3c <_localeconv_r>
 800960a:	6843      	ldr	r3, [r0, #4]
 800960c:	0018      	movs	r0, r3
 800960e:	931d      	str	r3, [sp, #116]	; 0x74
 8009610:	f7f6 fd78 	bl	8000104 <strlen>
 8009614:	901b      	str	r0, [sp, #108]	; 0x6c
 8009616:	980a      	ldr	r0, [sp, #40]	; 0x28
 8009618:	f001 fa90 	bl	800ab3c <_localeconv_r>
 800961c:	6883      	ldr	r3, [r0, #8]
 800961e:	9312      	str	r3, [sp, #72]	; 0x48
 8009620:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8009622:	2b00      	cmp	r3, #0
 8009624:	d011      	beq.n	800964a <_svfprintf_r+0x1f2>
 8009626:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8009628:	2b00      	cmp	r3, #0
 800962a:	d00e      	beq.n	800964a <_svfprintf_r+0x1f2>
 800962c:	781b      	ldrb	r3, [r3, #0]
 800962e:	2b00      	cmp	r3, #0
 8009630:	d00b      	beq.n	800964a <_svfprintf_r+0x1f2>
 8009632:	2380      	movs	r3, #128	; 0x80
 8009634:	00db      	lsls	r3, r3, #3
 8009636:	431e      	orrs	r6, r3
 8009638:	e007      	b.n	800964a <_svfprintf_r+0x1f2>
 800963a:	231b      	movs	r3, #27
 800963c:	aa1e      	add	r2, sp, #120	; 0x78
 800963e:	189b      	adds	r3, r3, r2
 8009640:	781a      	ldrb	r2, [r3, #0]
 8009642:	2a00      	cmp	r2, #0
 8009644:	d101      	bne.n	800964a <_svfprintf_r+0x1f2>
 8009646:	3220      	adds	r2, #32
 8009648:	701a      	strb	r2, [r3, #0]
 800964a:	9d13      	ldr	r5, [sp, #76]	; 0x4c
 800964c:	e771      	b.n	8009532 <_svfprintf_r+0xda>
 800964e:	2301      	movs	r3, #1
 8009650:	e7f1      	b.n	8009636 <_svfprintf_r+0x1de>
 8009652:	cc08      	ldmia	r4!, {r3}
 8009654:	9318      	str	r3, [sp, #96]	; 0x60
 8009656:	2b00      	cmp	r3, #0
 8009658:	daf7      	bge.n	800964a <_svfprintf_r+0x1f2>
 800965a:	425b      	negs	r3, r3
 800965c:	9318      	str	r3, [sp, #96]	; 0x60
 800965e:	2304      	movs	r3, #4
 8009660:	e7e9      	b.n	8009636 <_svfprintf_r+0x1de>
 8009662:	231b      	movs	r3, #27
 8009664:	aa1e      	add	r2, sp, #120	; 0x78
 8009666:	189b      	adds	r3, r3, r2
 8009668:	222b      	movs	r2, #43	; 0x2b
 800966a:	e7ed      	b.n	8009648 <_svfprintf_r+0x1f0>
 800966c:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 800966e:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8009670:	7812      	ldrb	r2, [r2, #0]
 8009672:	3301      	adds	r3, #1
 8009674:	920f      	str	r2, [sp, #60]	; 0x3c
 8009676:	2a2a      	cmp	r2, #42	; 0x2a
 8009678:	d010      	beq.n	800969c <_svfprintf_r+0x244>
 800967a:	2200      	movs	r2, #0
 800967c:	9209      	str	r2, [sp, #36]	; 0x24
 800967e:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8009680:	9313      	str	r3, [sp, #76]	; 0x4c
 8009682:	3a30      	subs	r2, #48	; 0x30
 8009684:	2a09      	cmp	r2, #9
 8009686:	d900      	bls.n	800968a <_svfprintf_r+0x232>
 8009688:	e757      	b.n	800953a <_svfprintf_r+0xe2>
 800968a:	200a      	movs	r0, #10
 800968c:	9909      	ldr	r1, [sp, #36]	; 0x24
 800968e:	4341      	muls	r1, r0
 8009690:	188a      	adds	r2, r1, r2
 8009692:	9209      	str	r2, [sp, #36]	; 0x24
 8009694:	781a      	ldrb	r2, [r3, #0]
 8009696:	3301      	adds	r3, #1
 8009698:	920f      	str	r2, [sp, #60]	; 0x3c
 800969a:	e7f0      	b.n	800967e <_svfprintf_r+0x226>
 800969c:	cc04      	ldmia	r4!, {r2}
 800969e:	9209      	str	r2, [sp, #36]	; 0x24
 80096a0:	2a00      	cmp	r2, #0
 80096a2:	da02      	bge.n	80096aa <_svfprintf_r+0x252>
 80096a4:	2201      	movs	r2, #1
 80096a6:	4252      	negs	r2, r2
 80096a8:	9209      	str	r2, [sp, #36]	; 0x24
 80096aa:	9313      	str	r3, [sp, #76]	; 0x4c
 80096ac:	e7cd      	b.n	800964a <_svfprintf_r+0x1f2>
 80096ae:	2380      	movs	r3, #128	; 0x80
 80096b0:	e7c1      	b.n	8009636 <_svfprintf_r+0x1de>
 80096b2:	2200      	movs	r2, #0
 80096b4:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 80096b6:	9218      	str	r2, [sp, #96]	; 0x60
 80096b8:	210a      	movs	r1, #10
 80096ba:	9a18      	ldr	r2, [sp, #96]	; 0x60
 80096bc:	434a      	muls	r2, r1
 80096be:	990f      	ldr	r1, [sp, #60]	; 0x3c
 80096c0:	3930      	subs	r1, #48	; 0x30
 80096c2:	188a      	adds	r2, r1, r2
 80096c4:	9218      	str	r2, [sp, #96]	; 0x60
 80096c6:	001a      	movs	r2, r3
 80096c8:	7812      	ldrb	r2, [r2, #0]
 80096ca:	3301      	adds	r3, #1
 80096cc:	920f      	str	r2, [sp, #60]	; 0x3c
 80096ce:	3a30      	subs	r2, #48	; 0x30
 80096d0:	9313      	str	r3, [sp, #76]	; 0x4c
 80096d2:	2a09      	cmp	r2, #9
 80096d4:	d9f0      	bls.n	80096b8 <_svfprintf_r+0x260>
 80096d6:	e730      	b.n	800953a <_svfprintf_r+0xe2>
 80096d8:	2308      	movs	r3, #8
 80096da:	e7ac      	b.n	8009636 <_svfprintf_r+0x1de>
 80096dc:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 80096de:	781b      	ldrb	r3, [r3, #0]
 80096e0:	2b68      	cmp	r3, #104	; 0x68
 80096e2:	d105      	bne.n	80096f0 <_svfprintf_r+0x298>
 80096e4:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 80096e6:	3301      	adds	r3, #1
 80096e8:	9313      	str	r3, [sp, #76]	; 0x4c
 80096ea:	2380      	movs	r3, #128	; 0x80
 80096ec:	009b      	lsls	r3, r3, #2
 80096ee:	e7a2      	b.n	8009636 <_svfprintf_r+0x1de>
 80096f0:	2340      	movs	r3, #64	; 0x40
 80096f2:	e7a0      	b.n	8009636 <_svfprintf_r+0x1de>
 80096f4:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 80096f6:	781b      	ldrb	r3, [r3, #0]
 80096f8:	2b6c      	cmp	r3, #108	; 0x6c
 80096fa:	d104      	bne.n	8009706 <_svfprintf_r+0x2ae>
 80096fc:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 80096fe:	3301      	adds	r3, #1
 8009700:	9313      	str	r3, [sp, #76]	; 0x4c
 8009702:	2320      	movs	r3, #32
 8009704:	e797      	b.n	8009636 <_svfprintf_r+0x1de>
 8009706:	2310      	movs	r3, #16
 8009708:	e795      	b.n	8009636 <_svfprintf_r+0x1de>
 800970a:	0021      	movs	r1, r4
 800970c:	c904      	ldmia	r1!, {r2}
 800970e:	ab3f      	add	r3, sp, #252	; 0xfc
 8009710:	910d      	str	r1, [sp, #52]	; 0x34
 8009712:	211b      	movs	r1, #27
 8009714:	701a      	strb	r2, [r3, #0]
 8009716:	2200      	movs	r2, #0
 8009718:	a81e      	add	r0, sp, #120	; 0x78
 800971a:	1809      	adds	r1, r1, r0
 800971c:	700a      	strb	r2, [r1, #0]
 800971e:	920c      	str	r2, [sp, #48]	; 0x30
 8009720:	3201      	adds	r2, #1
 8009722:	9209      	str	r2, [sp, #36]	; 0x24
 8009724:	2200      	movs	r2, #0
 8009726:	9308      	str	r3, [sp, #32]
 8009728:	0015      	movs	r5, r2
 800972a:	9219      	str	r2, [sp, #100]	; 0x64
 800972c:	9210      	str	r2, [sp, #64]	; 0x40
 800972e:	9211      	str	r2, [sp, #68]	; 0x44
 8009730:	e1f1      	b.n	8009b16 <_svfprintf_r+0x6be>
 8009732:	2310      	movs	r3, #16
 8009734:	431e      	orrs	r6, r3
 8009736:	06b3      	lsls	r3, r6, #26
 8009738:	d531      	bpl.n	800979e <_svfprintf_r+0x346>
 800973a:	2307      	movs	r3, #7
 800973c:	3407      	adds	r4, #7
 800973e:	439c      	bics	r4, r3
 8009740:	0022      	movs	r2, r4
 8009742:	ca18      	ldmia	r2!, {r3, r4}
 8009744:	9306      	str	r3, [sp, #24]
 8009746:	9407      	str	r4, [sp, #28]
 8009748:	920d      	str	r2, [sp, #52]	; 0x34
 800974a:	9a07      	ldr	r2, [sp, #28]
 800974c:	2301      	movs	r3, #1
 800974e:	2a00      	cmp	r2, #0
 8009750:	da0b      	bge.n	800976a <_svfprintf_r+0x312>
 8009752:	9c06      	ldr	r4, [sp, #24]
 8009754:	9d07      	ldr	r5, [sp, #28]
 8009756:	2200      	movs	r2, #0
 8009758:	4261      	negs	r1, r4
 800975a:	41aa      	sbcs	r2, r5
 800975c:	9106      	str	r1, [sp, #24]
 800975e:	9207      	str	r2, [sp, #28]
 8009760:	221b      	movs	r2, #27
 8009762:	a91e      	add	r1, sp, #120	; 0x78
 8009764:	1852      	adds	r2, r2, r1
 8009766:	212d      	movs	r1, #45	; 0x2d
 8009768:	7011      	strb	r1, [r2, #0]
 800976a:	9907      	ldr	r1, [sp, #28]
 800976c:	9a06      	ldr	r2, [sp, #24]
 800976e:	430a      	orrs	r2, r1
 8009770:	9909      	ldr	r1, [sp, #36]	; 0x24
 8009772:	3101      	adds	r1, #1
 8009774:	d101      	bne.n	800977a <_svfprintf_r+0x322>
 8009776:	f001 f87b 	bl	800a870 <_svfprintf_r+0x1418>
 800977a:	2180      	movs	r1, #128	; 0x80
 800977c:	0034      	movs	r4, r6
 800977e:	438c      	bics	r4, r1
 8009780:	2a00      	cmp	r2, #0
 8009782:	d001      	beq.n	8009788 <_svfprintf_r+0x330>
 8009784:	f001 f879 	bl	800a87a <_svfprintf_r+0x1422>
 8009788:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800978a:	2a00      	cmp	r2, #0
 800978c:	d101      	bne.n	8009792 <_svfprintf_r+0x33a>
 800978e:	f000 fcef 	bl	800a170 <_svfprintf_r+0xd18>
 8009792:	2b01      	cmp	r3, #1
 8009794:	d001      	beq.n	800979a <_svfprintf_r+0x342>
 8009796:	f001 f874 	bl	800a882 <_svfprintf_r+0x142a>
 800979a:	f000 fc79 	bl	800a090 <_svfprintf_r+0xc38>
 800979e:	0022      	movs	r2, r4
 80097a0:	ca08      	ldmia	r2!, {r3}
 80097a2:	920d      	str	r2, [sp, #52]	; 0x34
 80097a4:	06f2      	lsls	r2, r6, #27
 80097a6:	d503      	bpl.n	80097b0 <_svfprintf_r+0x358>
 80097a8:	9306      	str	r3, [sp, #24]
 80097aa:	17db      	asrs	r3, r3, #31
 80097ac:	9307      	str	r3, [sp, #28]
 80097ae:	e7cc      	b.n	800974a <_svfprintf_r+0x2f2>
 80097b0:	0672      	lsls	r2, r6, #25
 80097b2:	d501      	bpl.n	80097b8 <_svfprintf_r+0x360>
 80097b4:	b21b      	sxth	r3, r3
 80097b6:	e7f7      	b.n	80097a8 <_svfprintf_r+0x350>
 80097b8:	05b2      	lsls	r2, r6, #22
 80097ba:	d5f5      	bpl.n	80097a8 <_svfprintf_r+0x350>
 80097bc:	b25b      	sxtb	r3, r3
 80097be:	e7f3      	b.n	80097a8 <_svfprintf_r+0x350>
 80097c0:	2307      	movs	r3, #7
 80097c2:	3407      	adds	r4, #7
 80097c4:	439c      	bics	r4, r3
 80097c6:	0022      	movs	r2, r4
 80097c8:	ca18      	ldmia	r2!, {r3, r4}
 80097ca:	920d      	str	r2, [sp, #52]	; 0x34
 80097cc:	2201      	movs	r2, #1
 80097ce:	9314      	str	r3, [sp, #80]	; 0x50
 80097d0:	9415      	str	r4, [sp, #84]	; 0x54
 80097d2:	9b15      	ldr	r3, [sp, #84]	; 0x54
 80097d4:	9d14      	ldr	r5, [sp, #80]	; 0x50
 80097d6:	005c      	lsls	r4, r3, #1
 80097d8:	0864      	lsrs	r4, r4, #1
 80097da:	0028      	movs	r0, r5
 80097dc:	0021      	movs	r1, r4
 80097de:	4b3e      	ldr	r3, [pc, #248]	; (80098d8 <_svfprintf_r+0x480>)
 80097e0:	4252      	negs	r2, r2
 80097e2:	f7f8 fce9 	bl	80021b8 <__aeabi_dcmpun>
 80097e6:	2800      	cmp	r0, #0
 80097e8:	d126      	bne.n	8009838 <_svfprintf_r+0x3e0>
 80097ea:	2201      	movs	r2, #1
 80097ec:	0028      	movs	r0, r5
 80097ee:	0021      	movs	r1, r4
 80097f0:	4b39      	ldr	r3, [pc, #228]	; (80098d8 <_svfprintf_r+0x480>)
 80097f2:	4252      	negs	r2, r2
 80097f4:	f7f6 fe38 	bl	8000468 <__aeabi_dcmple>
 80097f8:	2800      	cmp	r0, #0
 80097fa:	d11d      	bne.n	8009838 <_svfprintf_r+0x3e0>
 80097fc:	9814      	ldr	r0, [sp, #80]	; 0x50
 80097fe:	9915      	ldr	r1, [sp, #84]	; 0x54
 8009800:	2200      	movs	r2, #0
 8009802:	2300      	movs	r3, #0
 8009804:	f7f6 fe26 	bl	8000454 <__aeabi_dcmplt>
 8009808:	2800      	cmp	r0, #0
 800980a:	d004      	beq.n	8009816 <_svfprintf_r+0x3be>
 800980c:	231b      	movs	r3, #27
 800980e:	aa1e      	add	r2, sp, #120	; 0x78
 8009810:	189b      	adds	r3, r3, r2
 8009812:	222d      	movs	r2, #45	; 0x2d
 8009814:	701a      	strb	r2, [r3, #0]
 8009816:	4b31      	ldr	r3, [pc, #196]	; (80098dc <_svfprintf_r+0x484>)
 8009818:	9308      	str	r3, [sp, #32]
 800981a:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800981c:	2b47      	cmp	r3, #71	; 0x47
 800981e:	dd01      	ble.n	8009824 <_svfprintf_r+0x3cc>
 8009820:	4b2f      	ldr	r3, [pc, #188]	; (80098e0 <_svfprintf_r+0x488>)
 8009822:	9308      	str	r3, [sp, #32]
 8009824:	2380      	movs	r3, #128	; 0x80
 8009826:	439e      	bics	r6, r3
 8009828:	2300      	movs	r3, #0
 800982a:	930c      	str	r3, [sp, #48]	; 0x30
 800982c:	3303      	adds	r3, #3
 800982e:	9309      	str	r3, [sp, #36]	; 0x24
 8009830:	2300      	movs	r3, #0
 8009832:	9319      	str	r3, [sp, #100]	; 0x64
 8009834:	f000 fc78 	bl	800a128 <_svfprintf_r+0xcd0>
 8009838:	9a14      	ldr	r2, [sp, #80]	; 0x50
 800983a:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800983c:	0010      	movs	r0, r2
 800983e:	0019      	movs	r1, r3
 8009840:	f7f8 fcba 	bl	80021b8 <__aeabi_dcmpun>
 8009844:	2800      	cmp	r0, #0
 8009846:	d00e      	beq.n	8009866 <_svfprintf_r+0x40e>
 8009848:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800984a:	2b00      	cmp	r3, #0
 800984c:	da04      	bge.n	8009858 <_svfprintf_r+0x400>
 800984e:	231b      	movs	r3, #27
 8009850:	aa1e      	add	r2, sp, #120	; 0x78
 8009852:	189b      	adds	r3, r3, r2
 8009854:	222d      	movs	r2, #45	; 0x2d
 8009856:	701a      	strb	r2, [r3, #0]
 8009858:	4b22      	ldr	r3, [pc, #136]	; (80098e4 <_svfprintf_r+0x48c>)
 800985a:	9308      	str	r3, [sp, #32]
 800985c:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800985e:	2b47      	cmp	r3, #71	; 0x47
 8009860:	dde0      	ble.n	8009824 <_svfprintf_r+0x3cc>
 8009862:	4b21      	ldr	r3, [pc, #132]	; (80098e8 <_svfprintf_r+0x490>)
 8009864:	e7dd      	b.n	8009822 <_svfprintf_r+0x3ca>
 8009866:	2320      	movs	r3, #32
 8009868:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 800986a:	439a      	bics	r2, r3
 800986c:	9210      	str	r2, [sp, #64]	; 0x40
 800986e:	2a41      	cmp	r2, #65	; 0x41
 8009870:	d123      	bne.n	80098ba <_svfprintf_r+0x462>
 8009872:	2230      	movs	r2, #48	; 0x30
 8009874:	990f      	ldr	r1, [sp, #60]	; 0x3c
 8009876:	ab25      	add	r3, sp, #148	; 0x94
 8009878:	701a      	strb	r2, [r3, #0]
 800987a:	3248      	adds	r2, #72	; 0x48
 800987c:	2961      	cmp	r1, #97	; 0x61
 800987e:	d000      	beq.n	8009882 <_svfprintf_r+0x42a>
 8009880:	3a20      	subs	r2, #32
 8009882:	705a      	strb	r2, [r3, #1]
 8009884:	2302      	movs	r3, #2
 8009886:	431e      	orrs	r6, r3
 8009888:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800988a:	2b63      	cmp	r3, #99	; 0x63
 800988c:	dd2e      	ble.n	80098ec <_svfprintf_r+0x494>
 800988e:	980a      	ldr	r0, [sp, #40]	; 0x28
 8009890:	1c59      	adds	r1, r3, #1
 8009892:	f7ff f853 	bl	800893c <_malloc_r>
 8009896:	9008      	str	r0, [sp, #32]
 8009898:	2800      	cmp	r0, #0
 800989a:	d000      	beq.n	800989e <_svfprintf_r+0x446>
 800989c:	e216      	b.n	8009ccc <_svfprintf_r+0x874>
 800989e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80098a0:	899a      	ldrh	r2, [r3, #12]
 80098a2:	2340      	movs	r3, #64	; 0x40
 80098a4:	4313      	orrs	r3, r2
 80098a6:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 80098a8:	8193      	strh	r3, [r2, #12]
 80098aa:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80098ac:	899b      	ldrh	r3, [r3, #12]
 80098ae:	065b      	lsls	r3, r3, #25
 80098b0:	d400      	bmi.n	80098b4 <_svfprintf_r+0x45c>
 80098b2:	e5f5      	b.n	80094a0 <_svfprintf_r+0x48>
 80098b4:	2301      	movs	r3, #1
 80098b6:	425b      	negs	r3, r3
 80098b8:	e5f1      	b.n	800949e <_svfprintf_r+0x46>
 80098ba:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80098bc:	900c      	str	r0, [sp, #48]	; 0x30
 80098be:	3301      	adds	r3, #1
 80098c0:	d100      	bne.n	80098c4 <_svfprintf_r+0x46c>
 80098c2:	e206      	b.n	8009cd2 <_svfprintf_r+0x87a>
 80098c4:	9b10      	ldr	r3, [sp, #64]	; 0x40
 80098c6:	2b47      	cmp	r3, #71	; 0x47
 80098c8:	d114      	bne.n	80098f4 <_svfprintf_r+0x49c>
 80098ca:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80098cc:	2b00      	cmp	r3, #0
 80098ce:	d111      	bne.n	80098f4 <_svfprintf_r+0x49c>
 80098d0:	3301      	adds	r3, #1
 80098d2:	9309      	str	r3, [sp, #36]	; 0x24
 80098d4:	e00e      	b.n	80098f4 <_svfprintf_r+0x49c>
 80098d6:	46c0      	nop			; (mov r8, r8)
 80098d8:	7fefffff 	.word	0x7fefffff
 80098dc:	0800ecdc 	.word	0x0800ecdc
 80098e0:	0800ece0 	.word	0x0800ece0
 80098e4:	0800ece4 	.word	0x0800ece4
 80098e8:	0800ece8 	.word	0x0800ece8
 80098ec:	2300      	movs	r3, #0
 80098ee:	930c      	str	r3, [sp, #48]	; 0x30
 80098f0:	ab3f      	add	r3, sp, #252	; 0xfc
 80098f2:	9308      	str	r3, [sp, #32]
 80098f4:	2380      	movs	r3, #128	; 0x80
 80098f6:	005b      	lsls	r3, r3, #1
 80098f8:	4333      	orrs	r3, r6
 80098fa:	931a      	str	r3, [sp, #104]	; 0x68
 80098fc:	9b15      	ldr	r3, [sp, #84]	; 0x54
 80098fe:	9d14      	ldr	r5, [sp, #80]	; 0x50
 8009900:	2b00      	cmp	r3, #0
 8009902:	db00      	blt.n	8009906 <_svfprintf_r+0x4ae>
 8009904:	e1e7      	b.n	8009cd6 <_svfprintf_r+0x87e>
 8009906:	2280      	movs	r2, #128	; 0x80
 8009908:	0612      	lsls	r2, r2, #24
 800990a:	4694      	mov	ip, r2
 800990c:	4463      	add	r3, ip
 800990e:	930e      	str	r3, [sp, #56]	; 0x38
 8009910:	232d      	movs	r3, #45	; 0x2d
 8009912:	9322      	str	r3, [sp, #136]	; 0x88
 8009914:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8009916:	2b41      	cmp	r3, #65	; 0x41
 8009918:	d000      	beq.n	800991c <_svfprintf_r+0x4c4>
 800991a:	e1f5      	b.n	8009d08 <_svfprintf_r+0x8b0>
 800991c:	0028      	movs	r0, r5
 800991e:	aa26      	add	r2, sp, #152	; 0x98
 8009920:	990e      	ldr	r1, [sp, #56]	; 0x38
 8009922:	f001 f94b 	bl	800abbc <frexp>
 8009926:	23ff      	movs	r3, #255	; 0xff
 8009928:	2200      	movs	r2, #0
 800992a:	059b      	lsls	r3, r3, #22
 800992c:	f7f7 fe00 	bl	8001530 <__aeabi_dmul>
 8009930:	2200      	movs	r2, #0
 8009932:	2300      	movs	r3, #0
 8009934:	0004      	movs	r4, r0
 8009936:	000d      	movs	r5, r1
 8009938:	f7f6 fd86 	bl	8000448 <__aeabi_dcmpeq>
 800993c:	2800      	cmp	r0, #0
 800993e:	d001      	beq.n	8009944 <_svfprintf_r+0x4ec>
 8009940:	2301      	movs	r3, #1
 8009942:	9326      	str	r3, [sp, #152]	; 0x98
 8009944:	4bda      	ldr	r3, [pc, #872]	; (8009cb0 <_svfprintf_r+0x858>)
 8009946:	9319      	str	r3, [sp, #100]	; 0x64
 8009948:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800994a:	2b61      	cmp	r3, #97	; 0x61
 800994c:	d001      	beq.n	8009952 <_svfprintf_r+0x4fa>
 800994e:	4bd9      	ldr	r3, [pc, #868]	; (8009cb4 <_svfprintf_r+0x85c>)
 8009950:	9319      	str	r3, [sp, #100]	; 0x64
 8009952:	9b08      	ldr	r3, [sp, #32]
 8009954:	930e      	str	r3, [sp, #56]	; 0x38
 8009956:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009958:	3b01      	subs	r3, #1
 800995a:	9311      	str	r3, [sp, #68]	; 0x44
 800995c:	2200      	movs	r2, #0
 800995e:	4bd6      	ldr	r3, [pc, #856]	; (8009cb8 <_svfprintf_r+0x860>)
 8009960:	0020      	movs	r0, r4
 8009962:	0029      	movs	r1, r5
 8009964:	f7f7 fde4 	bl	8001530 <__aeabi_dmul>
 8009968:	000d      	movs	r5, r1
 800996a:	0004      	movs	r4, r0
 800996c:	f7f8 fc42 	bl	80021f4 <__aeabi_d2iz>
 8009970:	9021      	str	r0, [sp, #132]	; 0x84
 8009972:	f7f8 fc75 	bl	8002260 <__aeabi_i2d>
 8009976:	0002      	movs	r2, r0
 8009978:	000b      	movs	r3, r1
 800997a:	0020      	movs	r0, r4
 800997c:	0029      	movs	r1, r5
 800997e:	f7f8 f899 	bl	8001ab4 <__aeabi_dsub>
 8009982:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8009984:	000d      	movs	r5, r1
 8009986:	001a      	movs	r2, r3
 8009988:	3201      	adds	r2, #1
 800998a:	9921      	ldr	r1, [sp, #132]	; 0x84
 800998c:	920e      	str	r2, [sp, #56]	; 0x38
 800998e:	9223      	str	r2, [sp, #140]	; 0x8c
 8009990:	9a19      	ldr	r2, [sp, #100]	; 0x64
 8009992:	0004      	movs	r4, r0
 8009994:	5c52      	ldrb	r2, [r2, r1]
 8009996:	701a      	strb	r2, [r3, #0]
 8009998:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800999a:	9320      	str	r3, [sp, #128]	; 0x80
 800999c:	3301      	adds	r3, #1
 800999e:	d00a      	beq.n	80099b6 <_svfprintf_r+0x55e>
 80099a0:	9b11      	ldr	r3, [sp, #68]	; 0x44
 80099a2:	2200      	movs	r2, #0
 80099a4:	3b01      	subs	r3, #1
 80099a6:	9311      	str	r3, [sp, #68]	; 0x44
 80099a8:	0020      	movs	r0, r4
 80099aa:	2300      	movs	r3, #0
 80099ac:	0029      	movs	r1, r5
 80099ae:	f7f6 fd4b 	bl	8000448 <__aeabi_dcmpeq>
 80099b2:	2800      	cmp	r0, #0
 80099b4:	d0d2      	beq.n	800995c <_svfprintf_r+0x504>
 80099b6:	2200      	movs	r2, #0
 80099b8:	0020      	movs	r0, r4
 80099ba:	0029      	movs	r1, r5
 80099bc:	4bbf      	ldr	r3, [pc, #764]	; (8009cbc <_svfprintf_r+0x864>)
 80099be:	f7f6 fd5d 	bl	800047c <__aeabi_dcmpgt>
 80099c2:	2800      	cmp	r0, #0
 80099c4:	d10c      	bne.n	80099e0 <_svfprintf_r+0x588>
 80099c6:	2200      	movs	r2, #0
 80099c8:	0020      	movs	r0, r4
 80099ca:	0029      	movs	r1, r5
 80099cc:	4bbb      	ldr	r3, [pc, #748]	; (8009cbc <_svfprintf_r+0x864>)
 80099ce:	f7f6 fd3b 	bl	8000448 <__aeabi_dcmpeq>
 80099d2:	2800      	cmp	r0, #0
 80099d4:	d100      	bne.n	80099d8 <_svfprintf_r+0x580>
 80099d6:	e191      	b.n	8009cfc <_svfprintf_r+0x8a4>
 80099d8:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80099da:	07db      	lsls	r3, r3, #31
 80099dc:	d400      	bmi.n	80099e0 <_svfprintf_r+0x588>
 80099de:	e18d      	b.n	8009cfc <_svfprintf_r+0x8a4>
 80099e0:	2030      	movs	r0, #48	; 0x30
 80099e2:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80099e4:	932a      	str	r3, [sp, #168]	; 0xa8
 80099e6:	9b19      	ldr	r3, [sp, #100]	; 0x64
 80099e8:	7bdb      	ldrb	r3, [r3, #15]
 80099ea:	9a2a      	ldr	r2, [sp, #168]	; 0xa8
 80099ec:	3a01      	subs	r2, #1
 80099ee:	922a      	str	r2, [sp, #168]	; 0xa8
 80099f0:	7811      	ldrb	r1, [r2, #0]
 80099f2:	4299      	cmp	r1, r3
 80099f4:	d100      	bne.n	80099f8 <_svfprintf_r+0x5a0>
 80099f6:	e171      	b.n	8009cdc <_svfprintf_r+0x884>
 80099f8:	1c4b      	adds	r3, r1, #1
 80099fa:	b2db      	uxtb	r3, r3
 80099fc:	2939      	cmp	r1, #57	; 0x39
 80099fe:	d101      	bne.n	8009a04 <_svfprintf_r+0x5ac>
 8009a00:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8009a02:	7a9b      	ldrb	r3, [r3, #10]
 8009a04:	7013      	strb	r3, [r2, #0]
 8009a06:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8009a08:	9a08      	ldr	r2, [sp, #32]
 8009a0a:	9d26      	ldr	r5, [sp, #152]	; 0x98
 8009a0c:	1a9b      	subs	r3, r3, r2
 8009a0e:	930e      	str	r3, [sp, #56]	; 0x38
 8009a10:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8009a12:	2b47      	cmp	r3, #71	; 0x47
 8009a14:	d000      	beq.n	8009a18 <_svfprintf_r+0x5c0>
 8009a16:	e1c4      	b.n	8009da2 <_svfprintf_r+0x94a>
 8009a18:	1ceb      	adds	r3, r5, #3
 8009a1a:	db03      	blt.n	8009a24 <_svfprintf_r+0x5cc>
 8009a1c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009a1e:	42ab      	cmp	r3, r5
 8009a20:	db00      	blt.n	8009a24 <_svfprintf_r+0x5cc>
 8009a22:	e1e6      	b.n	8009df2 <_svfprintf_r+0x99a>
 8009a24:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8009a26:	3b02      	subs	r3, #2
 8009a28:	930f      	str	r3, [sp, #60]	; 0x3c
 8009a2a:	223c      	movs	r2, #60	; 0x3c
 8009a2c:	466b      	mov	r3, sp
 8009a2e:	990f      	ldr	r1, [sp, #60]	; 0x3c
 8009a30:	189b      	adds	r3, r3, r2
 8009a32:	1e6c      	subs	r4, r5, #1
 8009a34:	3a1c      	subs	r2, #28
 8009a36:	2000      	movs	r0, #0
 8009a38:	781b      	ldrb	r3, [r3, #0]
 8009a3a:	9426      	str	r4, [sp, #152]	; 0x98
 8009a3c:	4391      	bics	r1, r2
 8009a3e:	2941      	cmp	r1, #65	; 0x41
 8009a40:	d102      	bne.n	8009a48 <_svfprintf_r+0x5f0>
 8009a42:	330f      	adds	r3, #15
 8009a44:	b2db      	uxtb	r3, r3
 8009a46:	3001      	adds	r0, #1
 8009a48:	a928      	add	r1, sp, #160	; 0xa0
 8009a4a:	700b      	strb	r3, [r1, #0]
 8009a4c:	232b      	movs	r3, #43	; 0x2b
 8009a4e:	2c00      	cmp	r4, #0
 8009a50:	da02      	bge.n	8009a58 <_svfprintf_r+0x600>
 8009a52:	2401      	movs	r4, #1
 8009a54:	3302      	adds	r3, #2
 8009a56:	1b64      	subs	r4, r4, r5
 8009a58:	704b      	strb	r3, [r1, #1]
 8009a5a:	2c09      	cmp	r4, #9
 8009a5c:	dc00      	bgt.n	8009a60 <_svfprintf_r+0x608>
 8009a5e:	e1ba      	b.n	8009dd6 <_svfprintf_r+0x97e>
 8009a60:	2337      	movs	r3, #55	; 0x37
 8009a62:	250a      	movs	r5, #10
 8009a64:	aa1e      	add	r2, sp, #120	; 0x78
 8009a66:	189b      	adds	r3, r3, r2
 8009a68:	9310      	str	r3, [sp, #64]	; 0x40
 8009a6a:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8009a6c:	0020      	movs	r0, r4
 8009a6e:	9309      	str	r3, [sp, #36]	; 0x24
 8009a70:	0029      	movs	r1, r5
 8009a72:	3b01      	subs	r3, #1
 8009a74:	9310      	str	r3, [sp, #64]	; 0x40
 8009a76:	f7f6 fcd1 	bl	800041c <__aeabi_idivmod>
 8009a7a:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8009a7c:	3130      	adds	r1, #48	; 0x30
 8009a7e:	7019      	strb	r1, [r3, #0]
 8009a80:	0020      	movs	r0, r4
 8009a82:	0029      	movs	r1, r5
 8009a84:	9411      	str	r4, [sp, #68]	; 0x44
 8009a86:	f7f6 fbe3 	bl	8000250 <__divsi3>
 8009a8a:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8009a8c:	0004      	movs	r4, r0
 8009a8e:	2b63      	cmp	r3, #99	; 0x63
 8009a90:	dceb      	bgt.n	8009a6a <_svfprintf_r+0x612>
 8009a92:	222a      	movs	r2, #42	; 0x2a
 8009a94:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009a96:	a81e      	add	r0, sp, #120	; 0x78
 8009a98:	1e99      	subs	r1, r3, #2
 8009a9a:	1812      	adds	r2, r2, r0
 8009a9c:	2037      	movs	r0, #55	; 0x37
 8009a9e:	000b      	movs	r3, r1
 8009aa0:	3430      	adds	r4, #48	; 0x30
 8009aa2:	700c      	strb	r4, [r1, #0]
 8009aa4:	ac1e      	add	r4, sp, #120	; 0x78
 8009aa6:	1900      	adds	r0, r0, r4
 8009aa8:	4283      	cmp	r3, r0
 8009aaa:	d200      	bcs.n	8009aae <_svfprintf_r+0x656>
 8009aac:	e18e      	b.n	8009dcc <_svfprintf_r+0x974>
 8009aae:	2300      	movs	r3, #0
 8009ab0:	4281      	cmp	r1, r0
 8009ab2:	d804      	bhi.n	8009abe <_svfprintf_r+0x666>
 8009ab4:	aa1e      	add	r2, sp, #120	; 0x78
 8009ab6:	3339      	adds	r3, #57	; 0x39
 8009ab8:	189b      	adds	r3, r3, r2
 8009aba:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8009abc:	1a9b      	subs	r3, r3, r2
 8009abe:	222a      	movs	r2, #42	; 0x2a
 8009ac0:	a91e      	add	r1, sp, #120	; 0x78
 8009ac2:	1852      	adds	r2, r2, r1
 8009ac4:	18d3      	adds	r3, r2, r3
 8009ac6:	aa28      	add	r2, sp, #160	; 0xa0
 8009ac8:	1a9b      	subs	r3, r3, r2
 8009aca:	931e      	str	r3, [sp, #120]	; 0x78
 8009acc:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 8009ace:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8009ad0:	4694      	mov	ip, r2
 8009ad2:	4463      	add	r3, ip
 8009ad4:	9309      	str	r3, [sp, #36]	; 0x24
 8009ad6:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8009ad8:	2b01      	cmp	r3, #1
 8009ada:	dc01      	bgt.n	8009ae0 <_svfprintf_r+0x688>
 8009adc:	07f3      	lsls	r3, r6, #31
 8009ade:	d504      	bpl.n	8009aea <_svfprintf_r+0x692>
 8009ae0:	9a16      	ldr	r2, [sp, #88]	; 0x58
 8009ae2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009ae4:	4694      	mov	ip, r2
 8009ae6:	4463      	add	r3, ip
 8009ae8:	9309      	str	r3, [sp, #36]	; 0x24
 8009aea:	2280      	movs	r2, #128	; 0x80
 8009aec:	4b74      	ldr	r3, [pc, #464]	; (8009cc0 <_svfprintf_r+0x868>)
 8009aee:	0052      	lsls	r2, r2, #1
 8009af0:	4033      	ands	r3, r6
 8009af2:	431a      	orrs	r2, r3
 8009af4:	2300      	movs	r3, #0
 8009af6:	001d      	movs	r5, r3
 8009af8:	921a      	str	r2, [sp, #104]	; 0x68
 8009afa:	9310      	str	r3, [sp, #64]	; 0x40
 8009afc:	9311      	str	r3, [sp, #68]	; 0x44
 8009afe:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8009b00:	9e1a      	ldr	r6, [sp, #104]	; 0x68
 8009b02:	9319      	str	r3, [sp, #100]	; 0x64
 8009b04:	2b00      	cmp	r3, #0
 8009b06:	d006      	beq.n	8009b16 <_svfprintf_r+0x6be>
 8009b08:	231b      	movs	r3, #27
 8009b0a:	aa1e      	add	r2, sp, #120	; 0x78
 8009b0c:	189b      	adds	r3, r3, r2
 8009b0e:	222d      	movs	r2, #45	; 0x2d
 8009b10:	701a      	strb	r2, [r3, #0]
 8009b12:	2300      	movs	r3, #0
 8009b14:	9319      	str	r3, [sp, #100]	; 0x64
 8009b16:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8009b18:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8009b1a:	931a      	str	r3, [sp, #104]	; 0x68
 8009b1c:	4293      	cmp	r3, r2
 8009b1e:	da00      	bge.n	8009b22 <_svfprintf_r+0x6ca>
 8009b20:	921a      	str	r2, [sp, #104]	; 0x68
 8009b22:	231b      	movs	r3, #27
 8009b24:	aa1e      	add	r2, sp, #120	; 0x78
 8009b26:	189b      	adds	r3, r3, r2
 8009b28:	781b      	ldrb	r3, [r3, #0]
 8009b2a:	1e5a      	subs	r2, r3, #1
 8009b2c:	4193      	sbcs	r3, r2
 8009b2e:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 8009b30:	18d3      	adds	r3, r2, r3
 8009b32:	931a      	str	r3, [sp, #104]	; 0x68
 8009b34:	0032      	movs	r2, r6
 8009b36:	2302      	movs	r3, #2
 8009b38:	401a      	ands	r2, r3
 8009b3a:	9220      	str	r2, [sp, #128]	; 0x80
 8009b3c:	421e      	tst	r6, r3
 8009b3e:	d002      	beq.n	8009b46 <_svfprintf_r+0x6ee>
 8009b40:	9b1a      	ldr	r3, [sp, #104]	; 0x68
 8009b42:	3302      	adds	r3, #2
 8009b44:	931a      	str	r3, [sp, #104]	; 0x68
 8009b46:	2384      	movs	r3, #132	; 0x84
 8009b48:	0032      	movs	r2, r6
 8009b4a:	401a      	ands	r2, r3
 8009b4c:	9221      	str	r2, [sp, #132]	; 0x84
 8009b4e:	421e      	tst	r6, r3
 8009b50:	d11f      	bne.n	8009b92 <_svfprintf_r+0x73a>
 8009b52:	9b18      	ldr	r3, [sp, #96]	; 0x60
 8009b54:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 8009b56:	1a9c      	subs	r4, r3, r2
 8009b58:	2c00      	cmp	r4, #0
 8009b5a:	dd1a      	ble.n	8009b92 <_svfprintf_r+0x73a>
 8009b5c:	0039      	movs	r1, r7
 8009b5e:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
 8009b60:	4858      	ldr	r0, [pc, #352]	; (8009cc4 <_svfprintf_r+0x86c>)
 8009b62:	9a2e      	ldr	r2, [sp, #184]	; 0xb8
 8009b64:	3301      	adds	r3, #1
 8009b66:	3108      	adds	r1, #8
 8009b68:	6038      	str	r0, [r7, #0]
 8009b6a:	2c10      	cmp	r4, #16
 8009b6c:	dd00      	ble.n	8009b70 <_svfprintf_r+0x718>
 8009b6e:	e31c      	b.n	800a1aa <_svfprintf_r+0xd52>
 8009b70:	607c      	str	r4, [r7, #4]
 8009b72:	18a4      	adds	r4, r4, r2
 8009b74:	000f      	movs	r7, r1
 8009b76:	942e      	str	r4, [sp, #184]	; 0xb8
 8009b78:	932d      	str	r3, [sp, #180]	; 0xb4
 8009b7a:	2b07      	cmp	r3, #7
 8009b7c:	dd09      	ble.n	8009b92 <_svfprintf_r+0x73a>
 8009b7e:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8009b80:	980a      	ldr	r0, [sp, #40]	; 0x28
 8009b82:	aa2c      	add	r2, sp, #176	; 0xb0
 8009b84:	f001 ff8c 	bl	800baa0 <__ssprint_r>
 8009b88:	2800      	cmp	r0, #0
 8009b8a:	d001      	beq.n	8009b90 <_svfprintf_r+0x738>
 8009b8c:	f000 fe43 	bl	800a816 <_svfprintf_r+0x13be>
 8009b90:	af2f      	add	r7, sp, #188	; 0xbc
 8009b92:	221b      	movs	r2, #27
 8009b94:	a91e      	add	r1, sp, #120	; 0x78
 8009b96:	1852      	adds	r2, r2, r1
 8009b98:	7811      	ldrb	r1, [r2, #0]
 8009b9a:	9b2e      	ldr	r3, [sp, #184]	; 0xb8
 8009b9c:	2900      	cmp	r1, #0
 8009b9e:	d014      	beq.n	8009bca <_svfprintf_r+0x772>
 8009ba0:	603a      	str	r2, [r7, #0]
 8009ba2:	2201      	movs	r2, #1
 8009ba4:	189b      	adds	r3, r3, r2
 8009ba6:	932e      	str	r3, [sp, #184]	; 0xb8
 8009ba8:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
 8009baa:	607a      	str	r2, [r7, #4]
 8009bac:	189b      	adds	r3, r3, r2
 8009bae:	932d      	str	r3, [sp, #180]	; 0xb4
 8009bb0:	3708      	adds	r7, #8
 8009bb2:	2b07      	cmp	r3, #7
 8009bb4:	dd09      	ble.n	8009bca <_svfprintf_r+0x772>
 8009bb6:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8009bb8:	980a      	ldr	r0, [sp, #40]	; 0x28
 8009bba:	aa2c      	add	r2, sp, #176	; 0xb0
 8009bbc:	f001 ff70 	bl	800baa0 <__ssprint_r>
 8009bc0:	2800      	cmp	r0, #0
 8009bc2:	d001      	beq.n	8009bc8 <_svfprintf_r+0x770>
 8009bc4:	f000 fe27 	bl	800a816 <_svfprintf_r+0x13be>
 8009bc8:	af2f      	add	r7, sp, #188	; 0xbc
 8009bca:	9a20      	ldr	r2, [sp, #128]	; 0x80
 8009bcc:	9b2e      	ldr	r3, [sp, #184]	; 0xb8
 8009bce:	2a00      	cmp	r2, #0
 8009bd0:	d015      	beq.n	8009bfe <_svfprintf_r+0x7a6>
 8009bd2:	aa25      	add	r2, sp, #148	; 0x94
 8009bd4:	603a      	str	r2, [r7, #0]
 8009bd6:	2202      	movs	r2, #2
 8009bd8:	189b      	adds	r3, r3, r2
 8009bda:	932e      	str	r3, [sp, #184]	; 0xb8
 8009bdc:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
 8009bde:	607a      	str	r2, [r7, #4]
 8009be0:	3301      	adds	r3, #1
 8009be2:	932d      	str	r3, [sp, #180]	; 0xb4
 8009be4:	3708      	adds	r7, #8
 8009be6:	2b07      	cmp	r3, #7
 8009be8:	dd09      	ble.n	8009bfe <_svfprintf_r+0x7a6>
 8009bea:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8009bec:	980a      	ldr	r0, [sp, #40]	; 0x28
 8009bee:	aa2c      	add	r2, sp, #176	; 0xb0
 8009bf0:	f001 ff56 	bl	800baa0 <__ssprint_r>
 8009bf4:	2800      	cmp	r0, #0
 8009bf6:	d001      	beq.n	8009bfc <_svfprintf_r+0x7a4>
 8009bf8:	f000 fe0d 	bl	800a816 <_svfprintf_r+0x13be>
 8009bfc:	af2f      	add	r7, sp, #188	; 0xbc
 8009bfe:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8009c00:	2b80      	cmp	r3, #128	; 0x80
 8009c02:	d11f      	bne.n	8009c44 <_svfprintf_r+0x7ec>
 8009c04:	9b18      	ldr	r3, [sp, #96]	; 0x60
 8009c06:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 8009c08:	1a9c      	subs	r4, r3, r2
 8009c0a:	2c00      	cmp	r4, #0
 8009c0c:	dd1a      	ble.n	8009c44 <_svfprintf_r+0x7ec>
 8009c0e:	0039      	movs	r1, r7
 8009c10:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
 8009c12:	482d      	ldr	r0, [pc, #180]	; (8009cc8 <_svfprintf_r+0x870>)
 8009c14:	9a2e      	ldr	r2, [sp, #184]	; 0xb8
 8009c16:	3301      	adds	r3, #1
 8009c18:	3108      	adds	r1, #8
 8009c1a:	6038      	str	r0, [r7, #0]
 8009c1c:	2c10      	cmp	r4, #16
 8009c1e:	dd00      	ble.n	8009c22 <_svfprintf_r+0x7ca>
 8009c20:	e2d6      	b.n	800a1d0 <_svfprintf_r+0xd78>
 8009c22:	607c      	str	r4, [r7, #4]
 8009c24:	18a4      	adds	r4, r4, r2
 8009c26:	000f      	movs	r7, r1
 8009c28:	942e      	str	r4, [sp, #184]	; 0xb8
 8009c2a:	932d      	str	r3, [sp, #180]	; 0xb4
 8009c2c:	2b07      	cmp	r3, #7
 8009c2e:	dd09      	ble.n	8009c44 <_svfprintf_r+0x7ec>
 8009c30:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8009c32:	980a      	ldr	r0, [sp, #40]	; 0x28
 8009c34:	aa2c      	add	r2, sp, #176	; 0xb0
 8009c36:	f001 ff33 	bl	800baa0 <__ssprint_r>
 8009c3a:	2800      	cmp	r0, #0
 8009c3c:	d001      	beq.n	8009c42 <_svfprintf_r+0x7ea>
 8009c3e:	f000 fdea 	bl	800a816 <_svfprintf_r+0x13be>
 8009c42:	af2f      	add	r7, sp, #188	; 0xbc
 8009c44:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8009c46:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8009c48:	1a9c      	subs	r4, r3, r2
 8009c4a:	2c00      	cmp	r4, #0
 8009c4c:	dd1a      	ble.n	8009c84 <_svfprintf_r+0x82c>
 8009c4e:	0039      	movs	r1, r7
 8009c50:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
 8009c52:	481d      	ldr	r0, [pc, #116]	; (8009cc8 <_svfprintf_r+0x870>)
 8009c54:	9a2e      	ldr	r2, [sp, #184]	; 0xb8
 8009c56:	3301      	adds	r3, #1
 8009c58:	3108      	adds	r1, #8
 8009c5a:	6038      	str	r0, [r7, #0]
 8009c5c:	2c10      	cmp	r4, #16
 8009c5e:	dd00      	ble.n	8009c62 <_svfprintf_r+0x80a>
 8009c60:	e2c9      	b.n	800a1f6 <_svfprintf_r+0xd9e>
 8009c62:	18a2      	adds	r2, r4, r2
 8009c64:	607c      	str	r4, [r7, #4]
 8009c66:	922e      	str	r2, [sp, #184]	; 0xb8
 8009c68:	000f      	movs	r7, r1
 8009c6a:	932d      	str	r3, [sp, #180]	; 0xb4
 8009c6c:	2b07      	cmp	r3, #7
 8009c6e:	dd09      	ble.n	8009c84 <_svfprintf_r+0x82c>
 8009c70:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8009c72:	980a      	ldr	r0, [sp, #40]	; 0x28
 8009c74:	aa2c      	add	r2, sp, #176	; 0xb0
 8009c76:	f001 ff13 	bl	800baa0 <__ssprint_r>
 8009c7a:	2800      	cmp	r0, #0
 8009c7c:	d001      	beq.n	8009c82 <_svfprintf_r+0x82a>
 8009c7e:	f000 fdca 	bl	800a816 <_svfprintf_r+0x13be>
 8009c82:	af2f      	add	r7, sp, #188	; 0xbc
 8009c84:	9b2e      	ldr	r3, [sp, #184]	; 0xb8
 8009c86:	9319      	str	r3, [sp, #100]	; 0x64
 8009c88:	05f3      	lsls	r3, r6, #23
 8009c8a:	d500      	bpl.n	8009c8e <_svfprintf_r+0x836>
 8009c8c:	e2ce      	b.n	800a22c <_svfprintf_r+0xdd4>
 8009c8e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8009c90:	9b08      	ldr	r3, [sp, #32]
 8009c92:	4694      	mov	ip, r2
 8009c94:	603b      	str	r3, [r7, #0]
 8009c96:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009c98:	607b      	str	r3, [r7, #4]
 8009c9a:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8009c9c:	4463      	add	r3, ip
 8009c9e:	932e      	str	r3, [sp, #184]	; 0xb8
 8009ca0:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
 8009ca2:	3301      	adds	r3, #1
 8009ca4:	932d      	str	r3, [sp, #180]	; 0xb4
 8009ca6:	2b07      	cmp	r3, #7
 8009ca8:	dd00      	ble.n	8009cac <_svfprintf_r+0x854>
 8009caa:	e3a3      	b.n	800a3f4 <_svfprintf_r+0xf9c>
 8009cac:	3708      	adds	r7, #8
 8009cae:	e301      	b.n	800a2b4 <_svfprintf_r+0xe5c>
 8009cb0:	0800ecec 	.word	0x0800ecec
 8009cb4:	0800ecfd 	.word	0x0800ecfd
 8009cb8:	40300000 	.word	0x40300000
 8009cbc:	3fe00000 	.word	0x3fe00000
 8009cc0:	fffffbff 	.word	0xfffffbff
 8009cc4:	0800ed10 	.word	0x0800ed10
 8009cc8:	0800ed20 	.word	0x0800ed20
 8009ccc:	9b08      	ldr	r3, [sp, #32]
 8009cce:	930c      	str	r3, [sp, #48]	; 0x30
 8009cd0:	e610      	b.n	80098f4 <_svfprintf_r+0x49c>
 8009cd2:	2306      	movs	r3, #6
 8009cd4:	e5fd      	b.n	80098d2 <_svfprintf_r+0x47a>
 8009cd6:	930e      	str	r3, [sp, #56]	; 0x38
 8009cd8:	2300      	movs	r3, #0
 8009cda:	e61a      	b.n	8009912 <_svfprintf_r+0x4ba>
 8009cdc:	7010      	strb	r0, [r2, #0]
 8009cde:	e684      	b.n	80099ea <_svfprintf_r+0x592>
 8009ce0:	7018      	strb	r0, [r3, #0]
 8009ce2:	3301      	adds	r3, #1
 8009ce4:	1aca      	subs	r2, r1, r3
 8009ce6:	d5fb      	bpl.n	8009ce0 <_svfprintf_r+0x888>
 8009ce8:	9a20      	ldr	r2, [sp, #128]	; 0x80
 8009cea:	2300      	movs	r3, #0
 8009cec:	3201      	adds	r2, #1
 8009cee:	db01      	blt.n	8009cf4 <_svfprintf_r+0x89c>
 8009cf0:	9b20      	ldr	r3, [sp, #128]	; 0x80
 8009cf2:	3301      	adds	r3, #1
 8009cf4:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8009cf6:	18d3      	adds	r3, r2, r3
 8009cf8:	9323      	str	r3, [sp, #140]	; 0x8c
 8009cfa:	e684      	b.n	8009a06 <_svfprintf_r+0x5ae>
 8009cfc:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8009cfe:	9920      	ldr	r1, [sp, #128]	; 0x80
 8009d00:	2030      	movs	r0, #48	; 0x30
 8009d02:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8009d04:	1851      	adds	r1, r2, r1
 8009d06:	e7ed      	b.n	8009ce4 <_svfprintf_r+0x88c>
 8009d08:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8009d0a:	2303      	movs	r3, #3
 8009d0c:	9c09      	ldr	r4, [sp, #36]	; 0x24
 8009d0e:	2a46      	cmp	r2, #70	; 0x46
 8009d10:	d006      	beq.n	8009d20 <_svfprintf_r+0x8c8>
 8009d12:	0014      	movs	r4, r2
 8009d14:	3c45      	subs	r4, #69	; 0x45
 8009d16:	4262      	negs	r2, r4
 8009d18:	4154      	adcs	r4, r2
 8009d1a:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8009d1c:	3b01      	subs	r3, #1
 8009d1e:	1914      	adds	r4, r2, r4
 8009d20:	aa2a      	add	r2, sp, #168	; 0xa8
 8009d22:	9204      	str	r2, [sp, #16]
 8009d24:	aa27      	add	r2, sp, #156	; 0x9c
 8009d26:	9203      	str	r2, [sp, #12]
 8009d28:	aa26      	add	r2, sp, #152	; 0x98
 8009d2a:	9202      	str	r2, [sp, #8]
 8009d2c:	9300      	str	r3, [sp, #0]
 8009d2e:	002a      	movs	r2, r5
 8009d30:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8009d32:	980a      	ldr	r0, [sp, #40]	; 0x28
 8009d34:	9401      	str	r4, [sp, #4]
 8009d36:	f001 f8af 	bl	800ae98 <_dtoa_r>
 8009d3a:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8009d3c:	9008      	str	r0, [sp, #32]
 8009d3e:	2b47      	cmp	r3, #71	; 0x47
 8009d40:	d103      	bne.n	8009d4a <_svfprintf_r+0x8f2>
 8009d42:	07f3      	lsls	r3, r6, #31
 8009d44:	d401      	bmi.n	8009d4a <_svfprintf_r+0x8f2>
 8009d46:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
 8009d48:	e65e      	b.n	8009a08 <_svfprintf_r+0x5b0>
 8009d4a:	9b08      	ldr	r3, [sp, #32]
 8009d4c:	191b      	adds	r3, r3, r4
 8009d4e:	9311      	str	r3, [sp, #68]	; 0x44
 8009d50:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8009d52:	2b46      	cmp	r3, #70	; 0x46
 8009d54:	d112      	bne.n	8009d7c <_svfprintf_r+0x924>
 8009d56:	9b08      	ldr	r3, [sp, #32]
 8009d58:	781b      	ldrb	r3, [r3, #0]
 8009d5a:	2b30      	cmp	r3, #48	; 0x30
 8009d5c:	d10a      	bne.n	8009d74 <_svfprintf_r+0x91c>
 8009d5e:	2200      	movs	r2, #0
 8009d60:	2300      	movs	r3, #0
 8009d62:	0028      	movs	r0, r5
 8009d64:	990e      	ldr	r1, [sp, #56]	; 0x38
 8009d66:	f7f6 fb6f 	bl	8000448 <__aeabi_dcmpeq>
 8009d6a:	2800      	cmp	r0, #0
 8009d6c:	d102      	bne.n	8009d74 <_svfprintf_r+0x91c>
 8009d6e:	2301      	movs	r3, #1
 8009d70:	1b1b      	subs	r3, r3, r4
 8009d72:	9326      	str	r3, [sp, #152]	; 0x98
 8009d74:	9a11      	ldr	r2, [sp, #68]	; 0x44
 8009d76:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8009d78:	18d3      	adds	r3, r2, r3
 8009d7a:	9311      	str	r3, [sp, #68]	; 0x44
 8009d7c:	2200      	movs	r2, #0
 8009d7e:	2300      	movs	r3, #0
 8009d80:	0028      	movs	r0, r5
 8009d82:	990e      	ldr	r1, [sp, #56]	; 0x38
 8009d84:	f7f6 fb60 	bl	8000448 <__aeabi_dcmpeq>
 8009d88:	2800      	cmp	r0, #0
 8009d8a:	d001      	beq.n	8009d90 <_svfprintf_r+0x938>
 8009d8c:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8009d8e:	932a      	str	r3, [sp, #168]	; 0xa8
 8009d90:	2230      	movs	r2, #48	; 0x30
 8009d92:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
 8009d94:	9911      	ldr	r1, [sp, #68]	; 0x44
 8009d96:	4299      	cmp	r1, r3
 8009d98:	d9d5      	bls.n	8009d46 <_svfprintf_r+0x8ee>
 8009d9a:	1c59      	adds	r1, r3, #1
 8009d9c:	912a      	str	r1, [sp, #168]	; 0xa8
 8009d9e:	701a      	strb	r2, [r3, #0]
 8009da0:	e7f7      	b.n	8009d92 <_svfprintf_r+0x93a>
 8009da2:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8009da4:	2b46      	cmp	r3, #70	; 0x46
 8009da6:	d000      	beq.n	8009daa <_svfprintf_r+0x952>
 8009da8:	e63f      	b.n	8009a2a <_svfprintf_r+0x5d2>
 8009daa:	2201      	movs	r2, #1
 8009dac:	0033      	movs	r3, r6
 8009dae:	9909      	ldr	r1, [sp, #36]	; 0x24
 8009db0:	4013      	ands	r3, r2
 8009db2:	430b      	orrs	r3, r1
 8009db4:	2d00      	cmp	r5, #0
 8009db6:	dd2c      	ble.n	8009e12 <_svfprintf_r+0x9ba>
 8009db8:	2b00      	cmp	r3, #0
 8009dba:	d046      	beq.n	8009e4a <_svfprintf_r+0x9f2>
 8009dbc:	000a      	movs	r2, r1
 8009dbe:	9b16      	ldr	r3, [sp, #88]	; 0x58
 8009dc0:	18eb      	adds	r3, r5, r3
 8009dc2:	18d3      	adds	r3, r2, r3
 8009dc4:	9309      	str	r3, [sp, #36]	; 0x24
 8009dc6:	2366      	movs	r3, #102	; 0x66
 8009dc8:	930f      	str	r3, [sp, #60]	; 0x3c
 8009dca:	e030      	b.n	8009e2e <_svfprintf_r+0x9d6>
 8009dcc:	781c      	ldrb	r4, [r3, #0]
 8009dce:	3301      	adds	r3, #1
 8009dd0:	7014      	strb	r4, [r2, #0]
 8009dd2:	3201      	adds	r2, #1
 8009dd4:	e668      	b.n	8009aa8 <_svfprintf_r+0x650>
 8009dd6:	222a      	movs	r2, #42	; 0x2a
 8009dd8:	ab1e      	add	r3, sp, #120	; 0x78
 8009dda:	18d2      	adds	r2, r2, r3
 8009ddc:	2800      	cmp	r0, #0
 8009dde:	d104      	bne.n	8009dea <_svfprintf_r+0x992>
 8009de0:	2330      	movs	r3, #48	; 0x30
 8009de2:	222b      	movs	r2, #43	; 0x2b
 8009de4:	708b      	strb	r3, [r1, #2]
 8009de6:	ab1e      	add	r3, sp, #120	; 0x78
 8009de8:	18d2      	adds	r2, r2, r3
 8009dea:	3430      	adds	r4, #48	; 0x30
 8009dec:	1c53      	adds	r3, r2, #1
 8009dee:	7014      	strb	r4, [r2, #0]
 8009df0:	e669      	b.n	8009ac6 <_svfprintf_r+0x66e>
 8009df2:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8009df4:	42ab      	cmp	r3, r5
 8009df6:	dd12      	ble.n	8009e1e <_svfprintf_r+0x9c6>
 8009df8:	9a16      	ldr	r2, [sp, #88]	; 0x58
 8009dfa:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8009dfc:	4694      	mov	ip, r2
 8009dfe:	4463      	add	r3, ip
 8009e00:	9309      	str	r3, [sp, #36]	; 0x24
 8009e02:	2367      	movs	r3, #103	; 0x67
 8009e04:	930f      	str	r3, [sp, #60]	; 0x3c
 8009e06:	2d00      	cmp	r5, #0
 8009e08:	dc11      	bgt.n	8009e2e <_svfprintf_r+0x9d6>
 8009e0a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009e0c:	1b5b      	subs	r3, r3, r5
 8009e0e:	3301      	adds	r3, #1
 8009e10:	e00c      	b.n	8009e2c <_svfprintf_r+0x9d4>
 8009e12:	2b00      	cmp	r3, #0
 8009e14:	d01b      	beq.n	8009e4e <_svfprintf_r+0x9f6>
 8009e16:	9b16      	ldr	r3, [sp, #88]	; 0x58
 8009e18:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8009e1a:	3301      	adds	r3, #1
 8009e1c:	e7d1      	b.n	8009dc2 <_svfprintf_r+0x96a>
 8009e1e:	2367      	movs	r3, #103	; 0x67
 8009e20:	9509      	str	r5, [sp, #36]	; 0x24
 8009e22:	930f      	str	r3, [sp, #60]	; 0x3c
 8009e24:	07f3      	lsls	r3, r6, #31
 8009e26:	d502      	bpl.n	8009e2e <_svfprintf_r+0x9d6>
 8009e28:	9b16      	ldr	r3, [sp, #88]	; 0x58
 8009e2a:	18eb      	adds	r3, r5, r3
 8009e2c:	9309      	str	r3, [sp, #36]	; 0x24
 8009e2e:	2380      	movs	r3, #128	; 0x80
 8009e30:	0032      	movs	r2, r6
 8009e32:	00db      	lsls	r3, r3, #3
 8009e34:	401a      	ands	r2, r3
 8009e36:	9211      	str	r2, [sp, #68]	; 0x44
 8009e38:	2200      	movs	r2, #0
 8009e3a:	9210      	str	r2, [sp, #64]	; 0x40
 8009e3c:	421e      	tst	r6, r3
 8009e3e:	d100      	bne.n	8009e42 <_svfprintf_r+0x9ea>
 8009e40:	e65d      	b.n	8009afe <_svfprintf_r+0x6a6>
 8009e42:	4295      	cmp	r5, r2
 8009e44:	dc25      	bgt.n	8009e92 <_svfprintf_r+0xa3a>
 8009e46:	9211      	str	r2, [sp, #68]	; 0x44
 8009e48:	e659      	b.n	8009afe <_svfprintf_r+0x6a6>
 8009e4a:	9509      	str	r5, [sp, #36]	; 0x24
 8009e4c:	e7bb      	b.n	8009dc6 <_svfprintf_r+0x96e>
 8009e4e:	2366      	movs	r3, #102	; 0x66
 8009e50:	9209      	str	r2, [sp, #36]	; 0x24
 8009e52:	930f      	str	r3, [sp, #60]	; 0x3c
 8009e54:	e7eb      	b.n	8009e2e <_svfprintf_r+0x9d6>
 8009e56:	42ab      	cmp	r3, r5
 8009e58:	da0e      	bge.n	8009e78 <_svfprintf_r+0xa20>
 8009e5a:	1aed      	subs	r5, r5, r3
 8009e5c:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8009e5e:	785b      	ldrb	r3, [r3, #1]
 8009e60:	2b00      	cmp	r3, #0
 8009e62:	d012      	beq.n	8009e8a <_svfprintf_r+0xa32>
 8009e64:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8009e66:	3301      	adds	r3, #1
 8009e68:	9311      	str	r3, [sp, #68]	; 0x44
 8009e6a:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8009e6c:	3301      	adds	r3, #1
 8009e6e:	9312      	str	r3, [sp, #72]	; 0x48
 8009e70:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8009e72:	781b      	ldrb	r3, [r3, #0]
 8009e74:	2bff      	cmp	r3, #255	; 0xff
 8009e76:	d1ee      	bne.n	8009e56 <_svfprintf_r+0x9fe>
 8009e78:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8009e7a:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8009e7c:	189b      	adds	r3, r3, r2
 8009e7e:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
 8009e80:	4353      	muls	r3, r2
 8009e82:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8009e84:	189b      	adds	r3, r3, r2
 8009e86:	9309      	str	r3, [sp, #36]	; 0x24
 8009e88:	e639      	b.n	8009afe <_svfprintf_r+0x6a6>
 8009e8a:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8009e8c:	3301      	adds	r3, #1
 8009e8e:	9310      	str	r3, [sp, #64]	; 0x40
 8009e90:	e7ee      	b.n	8009e70 <_svfprintf_r+0xa18>
 8009e92:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8009e94:	9311      	str	r3, [sp, #68]	; 0x44
 8009e96:	e7eb      	b.n	8009e70 <_svfprintf_r+0xa18>
 8009e98:	1d23      	adds	r3, r4, #4
 8009e9a:	930d      	str	r3, [sp, #52]	; 0x34
 8009e9c:	06b3      	lsls	r3, r6, #26
 8009e9e:	d509      	bpl.n	8009eb4 <_svfprintf_r+0xa5c>
 8009ea0:	6823      	ldr	r3, [r4, #0]
 8009ea2:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 8009ea4:	601a      	str	r2, [r3, #0]
 8009ea6:	17d2      	asrs	r2, r2, #31
 8009ea8:	605a      	str	r2, [r3, #4]
 8009eaa:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8009eac:	9c0d      	ldr	r4, [sp, #52]	; 0x34
 8009eae:	9308      	str	r3, [sp, #32]
 8009eb0:	f7ff fb0d 	bl	80094ce <_svfprintf_r+0x76>
 8009eb4:	06f3      	lsls	r3, r6, #27
 8009eb6:	d503      	bpl.n	8009ec0 <_svfprintf_r+0xa68>
 8009eb8:	6823      	ldr	r3, [r4, #0]
 8009eba:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 8009ebc:	601a      	str	r2, [r3, #0]
 8009ebe:	e7f4      	b.n	8009eaa <_svfprintf_r+0xa52>
 8009ec0:	0673      	lsls	r3, r6, #25
 8009ec2:	d503      	bpl.n	8009ecc <_svfprintf_r+0xa74>
 8009ec4:	6823      	ldr	r3, [r4, #0]
 8009ec6:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 8009ec8:	801a      	strh	r2, [r3, #0]
 8009eca:	e7ee      	b.n	8009eaa <_svfprintf_r+0xa52>
 8009ecc:	05b6      	lsls	r6, r6, #22
 8009ece:	d5f3      	bpl.n	8009eb8 <_svfprintf_r+0xa60>
 8009ed0:	6823      	ldr	r3, [r4, #0]
 8009ed2:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 8009ed4:	701a      	strb	r2, [r3, #0]
 8009ed6:	e7e8      	b.n	8009eaa <_svfprintf_r+0xa52>
 8009ed8:	2310      	movs	r3, #16
 8009eda:	431e      	orrs	r6, r3
 8009edc:	2320      	movs	r3, #32
 8009ede:	0030      	movs	r0, r6
 8009ee0:	4018      	ands	r0, r3
 8009ee2:	421e      	tst	r6, r3
 8009ee4:	d00f      	beq.n	8009f06 <_svfprintf_r+0xaae>
 8009ee6:	3b19      	subs	r3, #25
 8009ee8:	3407      	adds	r4, #7
 8009eea:	439c      	bics	r4, r3
 8009eec:	0022      	movs	r2, r4
 8009eee:	ca18      	ldmia	r2!, {r3, r4}
 8009ef0:	9306      	str	r3, [sp, #24]
 8009ef2:	9407      	str	r4, [sp, #28]
 8009ef4:	920d      	str	r2, [sp, #52]	; 0x34
 8009ef6:	4bc9      	ldr	r3, [pc, #804]	; (800a21c <_svfprintf_r+0xdc4>)
 8009ef8:	401e      	ands	r6, r3
 8009efa:	2300      	movs	r3, #0
 8009efc:	221b      	movs	r2, #27
 8009efe:	a91e      	add	r1, sp, #120	; 0x78
 8009f00:	1852      	adds	r2, r2, r1
 8009f02:	2100      	movs	r1, #0
 8009f04:	e430      	b.n	8009768 <_svfprintf_r+0x310>
 8009f06:	0022      	movs	r2, r4
 8009f08:	ca08      	ldmia	r2!, {r3}
 8009f0a:	0031      	movs	r1, r6
 8009f0c:	920d      	str	r2, [sp, #52]	; 0x34
 8009f0e:	2210      	movs	r2, #16
 8009f10:	4011      	ands	r1, r2
 8009f12:	4216      	tst	r6, r2
 8009f14:	d002      	beq.n	8009f1c <_svfprintf_r+0xac4>
 8009f16:	9306      	str	r3, [sp, #24]
 8009f18:	9007      	str	r0, [sp, #28]
 8009f1a:	e7ec      	b.n	8009ef6 <_svfprintf_r+0xa9e>
 8009f1c:	2240      	movs	r2, #64	; 0x40
 8009f1e:	0030      	movs	r0, r6
 8009f20:	4010      	ands	r0, r2
 8009f22:	4216      	tst	r6, r2
 8009f24:	d003      	beq.n	8009f2e <_svfprintf_r+0xad6>
 8009f26:	b29b      	uxth	r3, r3
 8009f28:	9306      	str	r3, [sp, #24]
 8009f2a:	9107      	str	r1, [sp, #28]
 8009f2c:	e7e3      	b.n	8009ef6 <_svfprintf_r+0xa9e>
 8009f2e:	2280      	movs	r2, #128	; 0x80
 8009f30:	0031      	movs	r1, r6
 8009f32:	0092      	lsls	r2, r2, #2
 8009f34:	4011      	ands	r1, r2
 8009f36:	4216      	tst	r6, r2
 8009f38:	d0f6      	beq.n	8009f28 <_svfprintf_r+0xad0>
 8009f3a:	b2db      	uxtb	r3, r3
 8009f3c:	e7eb      	b.n	8009f16 <_svfprintf_r+0xabe>
 8009f3e:	0023      	movs	r3, r4
 8009f40:	cb04      	ldmia	r3!, {r2}
 8009f42:	49b7      	ldr	r1, [pc, #732]	; (800a220 <_svfprintf_r+0xdc8>)
 8009f44:	9206      	str	r2, [sp, #24]
 8009f46:	aa25      	add	r2, sp, #148	; 0x94
 8009f48:	8011      	strh	r1, [r2, #0]
 8009f4a:	4ab6      	ldr	r2, [pc, #728]	; (800a224 <_svfprintf_r+0xdcc>)
 8009f4c:	930d      	str	r3, [sp, #52]	; 0x34
 8009f4e:	2300      	movs	r3, #0
 8009f50:	921f      	str	r2, [sp, #124]	; 0x7c
 8009f52:	2278      	movs	r2, #120	; 0x78
 8009f54:	9307      	str	r3, [sp, #28]
 8009f56:	3302      	adds	r3, #2
 8009f58:	431e      	orrs	r6, r3
 8009f5a:	920f      	str	r2, [sp, #60]	; 0x3c
 8009f5c:	e7ce      	b.n	8009efc <_svfprintf_r+0xaa4>
 8009f5e:	0023      	movs	r3, r4
 8009f60:	cb04      	ldmia	r3!, {r2}
 8009f62:	2400      	movs	r4, #0
 8009f64:	930d      	str	r3, [sp, #52]	; 0x34
 8009f66:	231b      	movs	r3, #27
 8009f68:	9208      	str	r2, [sp, #32]
 8009f6a:	aa1e      	add	r2, sp, #120	; 0x78
 8009f6c:	189b      	adds	r3, r3, r2
 8009f6e:	701c      	strb	r4, [r3, #0]
 8009f70:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009f72:	3301      	adds	r3, #1
 8009f74:	d00e      	beq.n	8009f94 <_svfprintf_r+0xb3c>
 8009f76:	0021      	movs	r1, r4
 8009f78:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8009f7a:	9808      	ldr	r0, [sp, #32]
 8009f7c:	f000 fe13 	bl	800aba6 <memchr>
 8009f80:	900c      	str	r0, [sp, #48]	; 0x30
 8009f82:	42a0      	cmp	r0, r4
 8009f84:	d100      	bne.n	8009f88 <_svfprintf_r+0xb30>
 8009f86:	e10d      	b.n	800a1a4 <_svfprintf_r+0xd4c>
 8009f88:	9a08      	ldr	r2, [sp, #32]
 8009f8a:	1a83      	subs	r3, r0, r2
 8009f8c:	9309      	str	r3, [sp, #36]	; 0x24
 8009f8e:	0023      	movs	r3, r4
 8009f90:	940c      	str	r4, [sp, #48]	; 0x30
 8009f92:	e44e      	b.n	8009832 <_svfprintf_r+0x3da>
 8009f94:	9808      	ldr	r0, [sp, #32]
 8009f96:	f7f6 f8b5 	bl	8000104 <strlen>
 8009f9a:	9009      	str	r0, [sp, #36]	; 0x24
 8009f9c:	e7f7      	b.n	8009f8e <_svfprintf_r+0xb36>
 8009f9e:	2310      	movs	r3, #16
 8009fa0:	431e      	orrs	r6, r3
 8009fa2:	2320      	movs	r3, #32
 8009fa4:	0030      	movs	r0, r6
 8009fa6:	4018      	ands	r0, r3
 8009fa8:	421e      	tst	r6, r3
 8009faa:	d009      	beq.n	8009fc0 <_svfprintf_r+0xb68>
 8009fac:	3b19      	subs	r3, #25
 8009fae:	3407      	adds	r4, #7
 8009fb0:	439c      	bics	r4, r3
 8009fb2:	0022      	movs	r2, r4
 8009fb4:	ca18      	ldmia	r2!, {r3, r4}
 8009fb6:	9306      	str	r3, [sp, #24]
 8009fb8:	9407      	str	r4, [sp, #28]
 8009fba:	920d      	str	r2, [sp, #52]	; 0x34
 8009fbc:	2301      	movs	r3, #1
 8009fbe:	e79d      	b.n	8009efc <_svfprintf_r+0xaa4>
 8009fc0:	0023      	movs	r3, r4
 8009fc2:	cb04      	ldmia	r3!, {r2}
 8009fc4:	0031      	movs	r1, r6
 8009fc6:	930d      	str	r3, [sp, #52]	; 0x34
 8009fc8:	2310      	movs	r3, #16
 8009fca:	4019      	ands	r1, r3
 8009fcc:	421e      	tst	r6, r3
 8009fce:	d003      	beq.n	8009fd8 <_svfprintf_r+0xb80>
 8009fd0:	9206      	str	r2, [sp, #24]
 8009fd2:	9007      	str	r0, [sp, #28]
 8009fd4:	3b0f      	subs	r3, #15
 8009fd6:	e791      	b.n	8009efc <_svfprintf_r+0xaa4>
 8009fd8:	2340      	movs	r3, #64	; 0x40
 8009fda:	0030      	movs	r0, r6
 8009fdc:	4018      	ands	r0, r3
 8009fde:	421e      	tst	r6, r3
 8009fe0:	d003      	beq.n	8009fea <_svfprintf_r+0xb92>
 8009fe2:	b293      	uxth	r3, r2
 8009fe4:	9306      	str	r3, [sp, #24]
 8009fe6:	9107      	str	r1, [sp, #28]
 8009fe8:	e7e8      	b.n	8009fbc <_svfprintf_r+0xb64>
 8009fea:	2380      	movs	r3, #128	; 0x80
 8009fec:	0031      	movs	r1, r6
 8009fee:	009b      	lsls	r3, r3, #2
 8009ff0:	4019      	ands	r1, r3
 8009ff2:	421e      	tst	r6, r3
 8009ff4:	d003      	beq.n	8009ffe <_svfprintf_r+0xba6>
 8009ff6:	b2d3      	uxtb	r3, r2
 8009ff8:	9306      	str	r3, [sp, #24]
 8009ffa:	9007      	str	r0, [sp, #28]
 8009ffc:	e7de      	b.n	8009fbc <_svfprintf_r+0xb64>
 8009ffe:	9206      	str	r2, [sp, #24]
 800a000:	e7f1      	b.n	8009fe6 <_svfprintf_r+0xb8e>
 800a002:	4b89      	ldr	r3, [pc, #548]	; (800a228 <_svfprintf_r+0xdd0>)
 800a004:	0030      	movs	r0, r6
 800a006:	931f      	str	r3, [sp, #124]	; 0x7c
 800a008:	2320      	movs	r3, #32
 800a00a:	4018      	ands	r0, r3
 800a00c:	421e      	tst	r6, r3
 800a00e:	d01a      	beq.n	800a046 <_svfprintf_r+0xbee>
 800a010:	3b19      	subs	r3, #25
 800a012:	3407      	adds	r4, #7
 800a014:	439c      	bics	r4, r3
 800a016:	0022      	movs	r2, r4
 800a018:	ca18      	ldmia	r2!, {r3, r4}
 800a01a:	9306      	str	r3, [sp, #24]
 800a01c:	9407      	str	r4, [sp, #28]
 800a01e:	920d      	str	r2, [sp, #52]	; 0x34
 800a020:	07f3      	lsls	r3, r6, #31
 800a022:	d50a      	bpl.n	800a03a <_svfprintf_r+0xbe2>
 800a024:	9b06      	ldr	r3, [sp, #24]
 800a026:	9a07      	ldr	r2, [sp, #28]
 800a028:	4313      	orrs	r3, r2
 800a02a:	d006      	beq.n	800a03a <_svfprintf_r+0xbe2>
 800a02c:	2230      	movs	r2, #48	; 0x30
 800a02e:	ab25      	add	r3, sp, #148	; 0x94
 800a030:	701a      	strb	r2, [r3, #0]
 800a032:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 800a034:	705a      	strb	r2, [r3, #1]
 800a036:	2302      	movs	r3, #2
 800a038:	431e      	orrs	r6, r3
 800a03a:	4b78      	ldr	r3, [pc, #480]	; (800a21c <_svfprintf_r+0xdc4>)
 800a03c:	401e      	ands	r6, r3
 800a03e:	2302      	movs	r3, #2
 800a040:	e75c      	b.n	8009efc <_svfprintf_r+0xaa4>
 800a042:	4b78      	ldr	r3, [pc, #480]	; (800a224 <_svfprintf_r+0xdcc>)
 800a044:	e7de      	b.n	800a004 <_svfprintf_r+0xbac>
 800a046:	0023      	movs	r3, r4
 800a048:	cb04      	ldmia	r3!, {r2}
 800a04a:	0031      	movs	r1, r6
 800a04c:	930d      	str	r3, [sp, #52]	; 0x34
 800a04e:	2310      	movs	r3, #16
 800a050:	4019      	ands	r1, r3
 800a052:	421e      	tst	r6, r3
 800a054:	d002      	beq.n	800a05c <_svfprintf_r+0xc04>
 800a056:	9206      	str	r2, [sp, #24]
 800a058:	9007      	str	r0, [sp, #28]
 800a05a:	e7e1      	b.n	800a020 <_svfprintf_r+0xbc8>
 800a05c:	2340      	movs	r3, #64	; 0x40
 800a05e:	0030      	movs	r0, r6
 800a060:	4018      	ands	r0, r3
 800a062:	421e      	tst	r6, r3
 800a064:	d003      	beq.n	800a06e <_svfprintf_r+0xc16>
 800a066:	b293      	uxth	r3, r2
 800a068:	9306      	str	r3, [sp, #24]
 800a06a:	9107      	str	r1, [sp, #28]
 800a06c:	e7d8      	b.n	800a020 <_svfprintf_r+0xbc8>
 800a06e:	2380      	movs	r3, #128	; 0x80
 800a070:	0031      	movs	r1, r6
 800a072:	009b      	lsls	r3, r3, #2
 800a074:	4019      	ands	r1, r3
 800a076:	421e      	tst	r6, r3
 800a078:	d002      	beq.n	800a080 <_svfprintf_r+0xc28>
 800a07a:	b2d3      	uxtb	r3, r2
 800a07c:	9306      	str	r3, [sp, #24]
 800a07e:	e7eb      	b.n	800a058 <_svfprintf_r+0xc00>
 800a080:	9206      	str	r2, [sp, #24]
 800a082:	e7f2      	b.n	800a06a <_svfprintf_r+0xc12>
 800a084:	9b07      	ldr	r3, [sp, #28]
 800a086:	2b00      	cmp	r3, #0
 800a088:	d10a      	bne.n	800a0a0 <_svfprintf_r+0xc48>
 800a08a:	9b06      	ldr	r3, [sp, #24]
 800a08c:	2b09      	cmp	r3, #9
 800a08e:	d807      	bhi.n	800a0a0 <_svfprintf_r+0xc48>
 800a090:	23e7      	movs	r3, #231	; 0xe7
 800a092:	aa1e      	add	r2, sp, #120	; 0x78
 800a094:	189b      	adds	r3, r3, r2
 800a096:	9a06      	ldr	r2, [sp, #24]
 800a098:	3230      	adds	r2, #48	; 0x30
 800a09a:	701a      	strb	r2, [r3, #0]
 800a09c:	f000 fc18 	bl	800a8d0 <_svfprintf_r+0x1478>
 800a0a0:	2680      	movs	r6, #128	; 0x80
 800a0a2:	2300      	movs	r3, #0
 800a0a4:	00f6      	lsls	r6, r6, #3
 800a0a6:	930e      	str	r3, [sp, #56]	; 0x38
 800a0a8:	ad58      	add	r5, sp, #352	; 0x160
 800a0aa:	4026      	ands	r6, r4
 800a0ac:	220a      	movs	r2, #10
 800a0ae:	9806      	ldr	r0, [sp, #24]
 800a0b0:	9907      	ldr	r1, [sp, #28]
 800a0b2:	2300      	movs	r3, #0
 800a0b4:	f7f6 f9f6 	bl	80004a4 <__aeabi_uldivmod>
 800a0b8:	1e6b      	subs	r3, r5, #1
 800a0ba:	3230      	adds	r2, #48	; 0x30
 800a0bc:	9308      	str	r3, [sp, #32]
 800a0be:	701a      	strb	r2, [r3, #0]
 800a0c0:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800a0c2:	900c      	str	r0, [sp, #48]	; 0x30
 800a0c4:	3301      	adds	r3, #1
 800a0c6:	9110      	str	r1, [sp, #64]	; 0x40
 800a0c8:	930e      	str	r3, [sp, #56]	; 0x38
 800a0ca:	2e00      	cmp	r6, #0
 800a0cc:	d01d      	beq.n	800a10a <_svfprintf_r+0xcb2>
 800a0ce:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800a0d0:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800a0d2:	781b      	ldrb	r3, [r3, #0]
 800a0d4:	429a      	cmp	r2, r3
 800a0d6:	d118      	bne.n	800a10a <_svfprintf_r+0xcb2>
 800a0d8:	2aff      	cmp	r2, #255	; 0xff
 800a0da:	d016      	beq.n	800a10a <_svfprintf_r+0xcb2>
 800a0dc:	9b07      	ldr	r3, [sp, #28]
 800a0de:	2b00      	cmp	r3, #0
 800a0e0:	d102      	bne.n	800a0e8 <_svfprintf_r+0xc90>
 800a0e2:	9b06      	ldr	r3, [sp, #24]
 800a0e4:	2b09      	cmp	r3, #9
 800a0e6:	d910      	bls.n	800a10a <_svfprintf_r+0xcb2>
 800a0e8:	9b08      	ldr	r3, [sp, #32]
 800a0ea:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
 800a0ec:	991d      	ldr	r1, [sp, #116]	; 0x74
 800a0ee:	1a9b      	subs	r3, r3, r2
 800a0f0:	0018      	movs	r0, r3
 800a0f2:	9308      	str	r3, [sp, #32]
 800a0f4:	f000 fd0e 	bl	800ab14 <strncpy>
 800a0f8:	2200      	movs	r2, #0
 800a0fa:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800a0fc:	920e      	str	r2, [sp, #56]	; 0x38
 800a0fe:	785b      	ldrb	r3, [r3, #1]
 800a100:	1e5a      	subs	r2, r3, #1
 800a102:	4193      	sbcs	r3, r2
 800a104:	9a12      	ldr	r2, [sp, #72]	; 0x48
 800a106:	18d3      	adds	r3, r2, r3
 800a108:	9312      	str	r3, [sp, #72]	; 0x48
 800a10a:	9b07      	ldr	r3, [sp, #28]
 800a10c:	2b00      	cmp	r3, #0
 800a10e:	d10f      	bne.n	800a130 <_svfprintf_r+0xcd8>
 800a110:	9b06      	ldr	r3, [sp, #24]
 800a112:	2b09      	cmp	r3, #9
 800a114:	d80c      	bhi.n	800a130 <_svfprintf_r+0xcd8>
 800a116:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a118:	9a08      	ldr	r2, [sp, #32]
 800a11a:	9319      	str	r3, [sp, #100]	; 0x64
 800a11c:	ab58      	add	r3, sp, #352	; 0x160
 800a11e:	1a9b      	subs	r3, r3, r2
 800a120:	9309      	str	r3, [sp, #36]	; 0x24
 800a122:	2300      	movs	r3, #0
 800a124:	0026      	movs	r6, r4
 800a126:	930c      	str	r3, [sp, #48]	; 0x30
 800a128:	001d      	movs	r5, r3
 800a12a:	9310      	str	r3, [sp, #64]	; 0x40
 800a12c:	9311      	str	r3, [sp, #68]	; 0x44
 800a12e:	e4f2      	b.n	8009b16 <_svfprintf_r+0x6be>
 800a130:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800a132:	9d08      	ldr	r5, [sp, #32]
 800a134:	9306      	str	r3, [sp, #24]
 800a136:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800a138:	9307      	str	r3, [sp, #28]
 800a13a:	e7b7      	b.n	800a0ac <_svfprintf_r+0xc54>
 800a13c:	200f      	movs	r0, #15
 800a13e:	ab58      	add	r3, sp, #352	; 0x160
 800a140:	9308      	str	r3, [sp, #32]
 800a142:	9b08      	ldr	r3, [sp, #32]
 800a144:	9a1f      	ldr	r2, [sp, #124]	; 0x7c
 800a146:	3b01      	subs	r3, #1
 800a148:	9308      	str	r3, [sp, #32]
 800a14a:	9b06      	ldr	r3, [sp, #24]
 800a14c:	4003      	ands	r3, r0
 800a14e:	5cd3      	ldrb	r3, [r2, r3]
 800a150:	9a08      	ldr	r2, [sp, #32]
 800a152:	7013      	strb	r3, [r2, #0]
 800a154:	9b07      	ldr	r3, [sp, #28]
 800a156:	0719      	lsls	r1, r3, #28
 800a158:	9b06      	ldr	r3, [sp, #24]
 800a15a:	091a      	lsrs	r2, r3, #4
 800a15c:	9b07      	ldr	r3, [sp, #28]
 800a15e:	4311      	orrs	r1, r2
 800a160:	091b      	lsrs	r3, r3, #4
 800a162:	9307      	str	r3, [sp, #28]
 800a164:	000b      	movs	r3, r1
 800a166:	9a07      	ldr	r2, [sp, #28]
 800a168:	9106      	str	r1, [sp, #24]
 800a16a:	4313      	orrs	r3, r2
 800a16c:	d1e9      	bne.n	800a142 <_svfprintf_r+0xcea>
 800a16e:	e7d2      	b.n	800a116 <_svfprintf_r+0xcbe>
 800a170:	aa58      	add	r2, sp, #352	; 0x160
 800a172:	9208      	str	r2, [sp, #32]
 800a174:	2b00      	cmp	r3, #0
 800a176:	d1ce      	bne.n	800a116 <_svfprintf_r+0xcbe>
 800a178:	07f6      	lsls	r6, r6, #31
 800a17a:	d5cc      	bpl.n	800a116 <_svfprintf_r+0xcbe>
 800a17c:	aa1e      	add	r2, sp, #120	; 0x78
 800a17e:	33e7      	adds	r3, #231	; 0xe7
 800a180:	189b      	adds	r3, r3, r2
 800a182:	2230      	movs	r2, #48	; 0x30
 800a184:	e789      	b.n	800a09a <_svfprintf_r+0xc42>
 800a186:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800a188:	2b00      	cmp	r3, #0
 800a18a:	d100      	bne.n	800a18e <_svfprintf_r+0xd36>
 800a18c:	e364      	b.n	800a858 <_svfprintf_r+0x1400>
 800a18e:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 800a190:	211b      	movs	r1, #27
 800a192:	ab3f      	add	r3, sp, #252	; 0xfc
 800a194:	701a      	strb	r2, [r3, #0]
 800a196:	2200      	movs	r2, #0
 800a198:	a81e      	add	r0, sp, #120	; 0x78
 800a19a:	1809      	adds	r1, r1, r0
 800a19c:	700a      	strb	r2, [r1, #0]
 800a19e:	940d      	str	r4, [sp, #52]	; 0x34
 800a1a0:	f7ff fabd 	bl	800971e <_svfprintf_r+0x2c6>
 800a1a4:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800a1a6:	f7ff fb44 	bl	8009832 <_svfprintf_r+0x3da>
 800a1aa:	2010      	movs	r0, #16
 800a1ac:	1812      	adds	r2, r2, r0
 800a1ae:	6078      	str	r0, [r7, #4]
 800a1b0:	922e      	str	r2, [sp, #184]	; 0xb8
 800a1b2:	932d      	str	r3, [sp, #180]	; 0xb4
 800a1b4:	2b07      	cmp	r3, #7
 800a1b6:	dd08      	ble.n	800a1ca <_svfprintf_r+0xd72>
 800a1b8:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800a1ba:	980a      	ldr	r0, [sp, #40]	; 0x28
 800a1bc:	aa2c      	add	r2, sp, #176	; 0xb0
 800a1be:	f001 fc6f 	bl	800baa0 <__ssprint_r>
 800a1c2:	2800      	cmp	r0, #0
 800a1c4:	d000      	beq.n	800a1c8 <_svfprintf_r+0xd70>
 800a1c6:	e326      	b.n	800a816 <_svfprintf_r+0x13be>
 800a1c8:	a92f      	add	r1, sp, #188	; 0xbc
 800a1ca:	000f      	movs	r7, r1
 800a1cc:	3c10      	subs	r4, #16
 800a1ce:	e4c5      	b.n	8009b5c <_svfprintf_r+0x704>
 800a1d0:	2010      	movs	r0, #16
 800a1d2:	1812      	adds	r2, r2, r0
 800a1d4:	6078      	str	r0, [r7, #4]
 800a1d6:	922e      	str	r2, [sp, #184]	; 0xb8
 800a1d8:	932d      	str	r3, [sp, #180]	; 0xb4
 800a1da:	2b07      	cmp	r3, #7
 800a1dc:	dd08      	ble.n	800a1f0 <_svfprintf_r+0xd98>
 800a1de:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800a1e0:	980a      	ldr	r0, [sp, #40]	; 0x28
 800a1e2:	aa2c      	add	r2, sp, #176	; 0xb0
 800a1e4:	f001 fc5c 	bl	800baa0 <__ssprint_r>
 800a1e8:	2800      	cmp	r0, #0
 800a1ea:	d000      	beq.n	800a1ee <_svfprintf_r+0xd96>
 800a1ec:	e313      	b.n	800a816 <_svfprintf_r+0x13be>
 800a1ee:	a92f      	add	r1, sp, #188	; 0xbc
 800a1f0:	000f      	movs	r7, r1
 800a1f2:	3c10      	subs	r4, #16
 800a1f4:	e50b      	b.n	8009c0e <_svfprintf_r+0x7b6>
 800a1f6:	2010      	movs	r0, #16
 800a1f8:	1812      	adds	r2, r2, r0
 800a1fa:	6078      	str	r0, [r7, #4]
 800a1fc:	922e      	str	r2, [sp, #184]	; 0xb8
 800a1fe:	932d      	str	r3, [sp, #180]	; 0xb4
 800a200:	2b07      	cmp	r3, #7
 800a202:	dd08      	ble.n	800a216 <_svfprintf_r+0xdbe>
 800a204:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800a206:	980a      	ldr	r0, [sp, #40]	; 0x28
 800a208:	aa2c      	add	r2, sp, #176	; 0xb0
 800a20a:	f001 fc49 	bl	800baa0 <__ssprint_r>
 800a20e:	2800      	cmp	r0, #0
 800a210:	d000      	beq.n	800a214 <_svfprintf_r+0xdbc>
 800a212:	e300      	b.n	800a816 <_svfprintf_r+0x13be>
 800a214:	a92f      	add	r1, sp, #188	; 0xbc
 800a216:	000f      	movs	r7, r1
 800a218:	3c10      	subs	r4, #16
 800a21a:	e518      	b.n	8009c4e <_svfprintf_r+0x7f6>
 800a21c:	fffffbff 	.word	0xfffffbff
 800a220:	00007830 	.word	0x00007830
 800a224:	0800ecec 	.word	0x0800ecec
 800a228:	0800ecfd 	.word	0x0800ecfd
 800a22c:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800a22e:	2b65      	cmp	r3, #101	; 0x65
 800a230:	dc00      	bgt.n	800a234 <_svfprintf_r+0xddc>
 800a232:	e241      	b.n	800a6b8 <_svfprintf_r+0x1260>
 800a234:	9814      	ldr	r0, [sp, #80]	; 0x50
 800a236:	9915      	ldr	r1, [sp, #84]	; 0x54
 800a238:	2200      	movs	r2, #0
 800a23a:	2300      	movs	r3, #0
 800a23c:	f7f6 f904 	bl	8000448 <__aeabi_dcmpeq>
 800a240:	2800      	cmp	r0, #0
 800a242:	d077      	beq.n	800a334 <_svfprintf_r+0xedc>
 800a244:	4bca      	ldr	r3, [pc, #808]	; (800a570 <_svfprintf_r+0x1118>)
 800a246:	603b      	str	r3, [r7, #0]
 800a248:	2301      	movs	r3, #1
 800a24a:	607b      	str	r3, [r7, #4]
 800a24c:	9b19      	ldr	r3, [sp, #100]	; 0x64
 800a24e:	3708      	adds	r7, #8
 800a250:	3301      	adds	r3, #1
 800a252:	932e      	str	r3, [sp, #184]	; 0xb8
 800a254:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
 800a256:	3301      	adds	r3, #1
 800a258:	932d      	str	r3, [sp, #180]	; 0xb4
 800a25a:	2b07      	cmp	r3, #7
 800a25c:	dd08      	ble.n	800a270 <_svfprintf_r+0xe18>
 800a25e:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800a260:	980a      	ldr	r0, [sp, #40]	; 0x28
 800a262:	aa2c      	add	r2, sp, #176	; 0xb0
 800a264:	f001 fc1c 	bl	800baa0 <__ssprint_r>
 800a268:	2800      	cmp	r0, #0
 800a26a:	d000      	beq.n	800a26e <_svfprintf_r+0xe16>
 800a26c:	e2d3      	b.n	800a816 <_svfprintf_r+0x13be>
 800a26e:	af2f      	add	r7, sp, #188	; 0xbc
 800a270:	9b26      	ldr	r3, [sp, #152]	; 0x98
 800a272:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800a274:	4293      	cmp	r3, r2
 800a276:	db01      	blt.n	800a27c <_svfprintf_r+0xe24>
 800a278:	07f3      	lsls	r3, r6, #31
 800a27a:	d51b      	bpl.n	800a2b4 <_svfprintf_r+0xe5c>
 800a27c:	9b1c      	ldr	r3, [sp, #112]	; 0x70
 800a27e:	9a16      	ldr	r2, [sp, #88]	; 0x58
 800a280:	603b      	str	r3, [r7, #0]
 800a282:	9b16      	ldr	r3, [sp, #88]	; 0x58
 800a284:	607b      	str	r3, [r7, #4]
 800a286:	9b2e      	ldr	r3, [sp, #184]	; 0xb8
 800a288:	3708      	adds	r7, #8
 800a28a:	189b      	adds	r3, r3, r2
 800a28c:	932e      	str	r3, [sp, #184]	; 0xb8
 800a28e:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
 800a290:	3301      	adds	r3, #1
 800a292:	932d      	str	r3, [sp, #180]	; 0xb4
 800a294:	2b07      	cmp	r3, #7
 800a296:	dd08      	ble.n	800a2aa <_svfprintf_r+0xe52>
 800a298:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800a29a:	980a      	ldr	r0, [sp, #40]	; 0x28
 800a29c:	aa2c      	add	r2, sp, #176	; 0xb0
 800a29e:	f001 fbff 	bl	800baa0 <__ssprint_r>
 800a2a2:	2800      	cmp	r0, #0
 800a2a4:	d000      	beq.n	800a2a8 <_svfprintf_r+0xe50>
 800a2a6:	e2b6      	b.n	800a816 <_svfprintf_r+0x13be>
 800a2a8:	af2f      	add	r7, sp, #188	; 0xbc
 800a2aa:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800a2ac:	2510      	movs	r5, #16
 800a2ae:	1e5c      	subs	r4, r3, #1
 800a2b0:	2c00      	cmp	r4, #0
 800a2b2:	dc2e      	bgt.n	800a312 <_svfprintf_r+0xeba>
 800a2b4:	0776      	lsls	r6, r6, #29
 800a2b6:	d500      	bpl.n	800a2ba <_svfprintf_r+0xe62>
 800a2b8:	e290      	b.n	800a7dc <_svfprintf_r+0x1384>
 800a2ba:	9b18      	ldr	r3, [sp, #96]	; 0x60
 800a2bc:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 800a2be:	4293      	cmp	r3, r2
 800a2c0:	da00      	bge.n	800a2c4 <_svfprintf_r+0xe6c>
 800a2c2:	0013      	movs	r3, r2
 800a2c4:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 800a2c6:	18d3      	adds	r3, r2, r3
 800a2c8:	9317      	str	r3, [sp, #92]	; 0x5c
 800a2ca:	9b2e      	ldr	r3, [sp, #184]	; 0xb8
 800a2cc:	2b00      	cmp	r3, #0
 800a2ce:	d007      	beq.n	800a2e0 <_svfprintf_r+0xe88>
 800a2d0:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800a2d2:	980a      	ldr	r0, [sp, #40]	; 0x28
 800a2d4:	aa2c      	add	r2, sp, #176	; 0xb0
 800a2d6:	f001 fbe3 	bl	800baa0 <__ssprint_r>
 800a2da:	2800      	cmp	r0, #0
 800a2dc:	d000      	beq.n	800a2e0 <_svfprintf_r+0xe88>
 800a2de:	e29a      	b.n	800a816 <_svfprintf_r+0x13be>
 800a2e0:	2300      	movs	r3, #0
 800a2e2:	932d      	str	r3, [sp, #180]	; 0xb4
 800a2e4:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800a2e6:	2b00      	cmp	r3, #0
 800a2e8:	d000      	beq.n	800a2ec <_svfprintf_r+0xe94>
 800a2ea:	e2b0      	b.n	800a84e <_svfprintf_r+0x13f6>
 800a2ec:	af2f      	add	r7, sp, #188	; 0xbc
 800a2ee:	e5dc      	b.n	8009eaa <_svfprintf_r+0xa52>
 800a2f0:	3210      	adds	r2, #16
 800a2f2:	607d      	str	r5, [r7, #4]
 800a2f4:	922e      	str	r2, [sp, #184]	; 0xb8
 800a2f6:	932d      	str	r3, [sp, #180]	; 0xb4
 800a2f8:	2b07      	cmp	r3, #7
 800a2fa:	dd08      	ble.n	800a30e <_svfprintf_r+0xeb6>
 800a2fc:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800a2fe:	980a      	ldr	r0, [sp, #40]	; 0x28
 800a300:	aa2c      	add	r2, sp, #176	; 0xb0
 800a302:	f001 fbcd 	bl	800baa0 <__ssprint_r>
 800a306:	2800      	cmp	r0, #0
 800a308:	d000      	beq.n	800a30c <_svfprintf_r+0xeb4>
 800a30a:	e284      	b.n	800a816 <_svfprintf_r+0x13be>
 800a30c:	a92f      	add	r1, sp, #188	; 0xbc
 800a30e:	000f      	movs	r7, r1
 800a310:	3c10      	subs	r4, #16
 800a312:	0039      	movs	r1, r7
 800a314:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
 800a316:	4897      	ldr	r0, [pc, #604]	; (800a574 <_svfprintf_r+0x111c>)
 800a318:	9a2e      	ldr	r2, [sp, #184]	; 0xb8
 800a31a:	3301      	adds	r3, #1
 800a31c:	3108      	adds	r1, #8
 800a31e:	6038      	str	r0, [r7, #0]
 800a320:	2c10      	cmp	r4, #16
 800a322:	dce5      	bgt.n	800a2f0 <_svfprintf_r+0xe98>
 800a324:	607c      	str	r4, [r7, #4]
 800a326:	18a4      	adds	r4, r4, r2
 800a328:	942e      	str	r4, [sp, #184]	; 0xb8
 800a32a:	000f      	movs	r7, r1
 800a32c:	932d      	str	r3, [sp, #180]	; 0xb4
 800a32e:	2b07      	cmp	r3, #7
 800a330:	ddc0      	ble.n	800a2b4 <_svfprintf_r+0xe5c>
 800a332:	e05f      	b.n	800a3f4 <_svfprintf_r+0xf9c>
 800a334:	9b26      	ldr	r3, [sp, #152]	; 0x98
 800a336:	2b00      	cmp	r3, #0
 800a338:	dc78      	bgt.n	800a42c <_svfprintf_r+0xfd4>
 800a33a:	4b8d      	ldr	r3, [pc, #564]	; (800a570 <_svfprintf_r+0x1118>)
 800a33c:	603b      	str	r3, [r7, #0]
 800a33e:	2301      	movs	r3, #1
 800a340:	607b      	str	r3, [r7, #4]
 800a342:	9b19      	ldr	r3, [sp, #100]	; 0x64
 800a344:	3708      	adds	r7, #8
 800a346:	3301      	adds	r3, #1
 800a348:	932e      	str	r3, [sp, #184]	; 0xb8
 800a34a:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
 800a34c:	3301      	adds	r3, #1
 800a34e:	932d      	str	r3, [sp, #180]	; 0xb4
 800a350:	2b07      	cmp	r3, #7
 800a352:	dd08      	ble.n	800a366 <_svfprintf_r+0xf0e>
 800a354:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800a356:	980a      	ldr	r0, [sp, #40]	; 0x28
 800a358:	aa2c      	add	r2, sp, #176	; 0xb0
 800a35a:	f001 fba1 	bl	800baa0 <__ssprint_r>
 800a35e:	2800      	cmp	r0, #0
 800a360:	d000      	beq.n	800a364 <_svfprintf_r+0xf0c>
 800a362:	e258      	b.n	800a816 <_svfprintf_r+0x13be>
 800a364:	af2f      	add	r7, sp, #188	; 0xbc
 800a366:	990e      	ldr	r1, [sp, #56]	; 0x38
 800a368:	9b26      	ldr	r3, [sp, #152]	; 0x98
 800a36a:	9a2e      	ldr	r2, [sp, #184]	; 0xb8
 800a36c:	430b      	orrs	r3, r1
 800a36e:	2101      	movs	r1, #1
 800a370:	4031      	ands	r1, r6
 800a372:	430b      	orrs	r3, r1
 800a374:	d09e      	beq.n	800a2b4 <_svfprintf_r+0xe5c>
 800a376:	9b1c      	ldr	r3, [sp, #112]	; 0x70
 800a378:	603b      	str	r3, [r7, #0]
 800a37a:	9b16      	ldr	r3, [sp, #88]	; 0x58
 800a37c:	607b      	str	r3, [r7, #4]
 800a37e:	189a      	adds	r2, r3, r2
 800a380:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
 800a382:	922e      	str	r2, [sp, #184]	; 0xb8
 800a384:	3301      	adds	r3, #1
 800a386:	932d      	str	r3, [sp, #180]	; 0xb4
 800a388:	3708      	adds	r7, #8
 800a38a:	2b07      	cmp	r3, #7
 800a38c:	dd08      	ble.n	800a3a0 <_svfprintf_r+0xf48>
 800a38e:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800a390:	980a      	ldr	r0, [sp, #40]	; 0x28
 800a392:	aa2c      	add	r2, sp, #176	; 0xb0
 800a394:	f001 fb84 	bl	800baa0 <__ssprint_r>
 800a398:	2800      	cmp	r0, #0
 800a39a:	d000      	beq.n	800a39e <_svfprintf_r+0xf46>
 800a39c:	e23b      	b.n	800a816 <_svfprintf_r+0x13be>
 800a39e:	af2f      	add	r7, sp, #188	; 0xbc
 800a3a0:	9c26      	ldr	r4, [sp, #152]	; 0x98
 800a3a2:	2c00      	cmp	r4, #0
 800a3a4:	da19      	bge.n	800a3da <_svfprintf_r+0xf82>
 800a3a6:	0038      	movs	r0, r7
 800a3a8:	2510      	movs	r5, #16
 800a3aa:	4264      	negs	r4, r4
 800a3ac:	992d      	ldr	r1, [sp, #180]	; 0xb4
 800a3ae:	4a71      	ldr	r2, [pc, #452]	; (800a574 <_svfprintf_r+0x111c>)
 800a3b0:	9b2e      	ldr	r3, [sp, #184]	; 0xb8
 800a3b2:	3101      	adds	r1, #1
 800a3b4:	3708      	adds	r7, #8
 800a3b6:	6002      	str	r2, [r0, #0]
 800a3b8:	2c10      	cmp	r4, #16
 800a3ba:	dc25      	bgt.n	800a408 <_svfprintf_r+0xfb0>
 800a3bc:	6044      	str	r4, [r0, #4]
 800a3be:	18e4      	adds	r4, r4, r3
 800a3c0:	942e      	str	r4, [sp, #184]	; 0xb8
 800a3c2:	912d      	str	r1, [sp, #180]	; 0xb4
 800a3c4:	2907      	cmp	r1, #7
 800a3c6:	dd08      	ble.n	800a3da <_svfprintf_r+0xf82>
 800a3c8:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800a3ca:	980a      	ldr	r0, [sp, #40]	; 0x28
 800a3cc:	aa2c      	add	r2, sp, #176	; 0xb0
 800a3ce:	f001 fb67 	bl	800baa0 <__ssprint_r>
 800a3d2:	2800      	cmp	r0, #0
 800a3d4:	d000      	beq.n	800a3d8 <_svfprintf_r+0xf80>
 800a3d6:	e21e      	b.n	800a816 <_svfprintf_r+0x13be>
 800a3d8:	af2f      	add	r7, sp, #188	; 0xbc
 800a3da:	9b08      	ldr	r3, [sp, #32]
 800a3dc:	9a2e      	ldr	r2, [sp, #184]	; 0xb8
 800a3de:	603b      	str	r3, [r7, #0]
 800a3e0:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800a3e2:	18d2      	adds	r2, r2, r3
 800a3e4:	922e      	str	r2, [sp, #184]	; 0xb8
 800a3e6:	9a2d      	ldr	r2, [sp, #180]	; 0xb4
 800a3e8:	607b      	str	r3, [r7, #4]
 800a3ea:	3201      	adds	r2, #1
 800a3ec:	922d      	str	r2, [sp, #180]	; 0xb4
 800a3ee:	2a07      	cmp	r2, #7
 800a3f0:	dc00      	bgt.n	800a3f4 <_svfprintf_r+0xf9c>
 800a3f2:	e45b      	b.n	8009cac <_svfprintf_r+0x854>
 800a3f4:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800a3f6:	980a      	ldr	r0, [sp, #40]	; 0x28
 800a3f8:	aa2c      	add	r2, sp, #176	; 0xb0
 800a3fa:	f001 fb51 	bl	800baa0 <__ssprint_r>
 800a3fe:	2800      	cmp	r0, #0
 800a400:	d000      	beq.n	800a404 <_svfprintf_r+0xfac>
 800a402:	e208      	b.n	800a816 <_svfprintf_r+0x13be>
 800a404:	af2f      	add	r7, sp, #188	; 0xbc
 800a406:	e755      	b.n	800a2b4 <_svfprintf_r+0xe5c>
 800a408:	3310      	adds	r3, #16
 800a40a:	6045      	str	r5, [r0, #4]
 800a40c:	932e      	str	r3, [sp, #184]	; 0xb8
 800a40e:	912d      	str	r1, [sp, #180]	; 0xb4
 800a410:	2907      	cmp	r1, #7
 800a412:	dd08      	ble.n	800a426 <_svfprintf_r+0xfce>
 800a414:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800a416:	980a      	ldr	r0, [sp, #40]	; 0x28
 800a418:	aa2c      	add	r2, sp, #176	; 0xb0
 800a41a:	f001 fb41 	bl	800baa0 <__ssprint_r>
 800a41e:	2800      	cmp	r0, #0
 800a420:	d000      	beq.n	800a424 <_svfprintf_r+0xfcc>
 800a422:	e1f8      	b.n	800a816 <_svfprintf_r+0x13be>
 800a424:	af2f      	add	r7, sp, #188	; 0xbc
 800a426:	0038      	movs	r0, r7
 800a428:	3c10      	subs	r4, #16
 800a42a:	e7bf      	b.n	800a3ac <_svfprintf_r+0xf54>
 800a42c:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800a42e:	002c      	movs	r4, r5
 800a430:	429d      	cmp	r5, r3
 800a432:	dd00      	ble.n	800a436 <_svfprintf_r+0xfde>
 800a434:	001c      	movs	r4, r3
 800a436:	2c00      	cmp	r4, #0
 800a438:	dd14      	ble.n	800a464 <_svfprintf_r+0x100c>
 800a43a:	9b08      	ldr	r3, [sp, #32]
 800a43c:	607c      	str	r4, [r7, #4]
 800a43e:	603b      	str	r3, [r7, #0]
 800a440:	9b19      	ldr	r3, [sp, #100]	; 0x64
 800a442:	3708      	adds	r7, #8
 800a444:	18e3      	adds	r3, r4, r3
 800a446:	932e      	str	r3, [sp, #184]	; 0xb8
 800a448:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
 800a44a:	3301      	adds	r3, #1
 800a44c:	932d      	str	r3, [sp, #180]	; 0xb4
 800a44e:	2b07      	cmp	r3, #7
 800a450:	dd08      	ble.n	800a464 <_svfprintf_r+0x100c>
 800a452:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800a454:	980a      	ldr	r0, [sp, #40]	; 0x28
 800a456:	aa2c      	add	r2, sp, #176	; 0xb0
 800a458:	f001 fb22 	bl	800baa0 <__ssprint_r>
 800a45c:	2800      	cmp	r0, #0
 800a45e:	d000      	beq.n	800a462 <_svfprintf_r+0x100a>
 800a460:	e1d9      	b.n	800a816 <_svfprintf_r+0x13be>
 800a462:	af2f      	add	r7, sp, #188	; 0xbc
 800a464:	43e3      	mvns	r3, r4
 800a466:	17db      	asrs	r3, r3, #31
 800a468:	401c      	ands	r4, r3
 800a46a:	1b2c      	subs	r4, r5, r4
 800a46c:	2c00      	cmp	r4, #0
 800a46e:	dd18      	ble.n	800a4a2 <_svfprintf_r+0x104a>
 800a470:	0039      	movs	r1, r7
 800a472:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
 800a474:	483f      	ldr	r0, [pc, #252]	; (800a574 <_svfprintf_r+0x111c>)
 800a476:	9a2e      	ldr	r2, [sp, #184]	; 0xb8
 800a478:	3301      	adds	r3, #1
 800a47a:	3108      	adds	r1, #8
 800a47c:	6038      	str	r0, [r7, #0]
 800a47e:	2c10      	cmp	r4, #16
 800a480:	dc7a      	bgt.n	800a578 <_svfprintf_r+0x1120>
 800a482:	607c      	str	r4, [r7, #4]
 800a484:	18a4      	adds	r4, r4, r2
 800a486:	000f      	movs	r7, r1
 800a488:	942e      	str	r4, [sp, #184]	; 0xb8
 800a48a:	932d      	str	r3, [sp, #180]	; 0xb4
 800a48c:	2b07      	cmp	r3, #7
 800a48e:	dd08      	ble.n	800a4a2 <_svfprintf_r+0x104a>
 800a490:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800a492:	980a      	ldr	r0, [sp, #40]	; 0x28
 800a494:	aa2c      	add	r2, sp, #176	; 0xb0
 800a496:	f001 fb03 	bl	800baa0 <__ssprint_r>
 800a49a:	2800      	cmp	r0, #0
 800a49c:	d000      	beq.n	800a4a0 <_svfprintf_r+0x1048>
 800a49e:	e1ba      	b.n	800a816 <_svfprintf_r+0x13be>
 800a4a0:	af2f      	add	r7, sp, #188	; 0xbc
 800a4a2:	9b08      	ldr	r3, [sp, #32]
 800a4a4:	195d      	adds	r5, r3, r5
 800a4a6:	0573      	lsls	r3, r6, #21
 800a4a8:	d50b      	bpl.n	800a4c2 <_svfprintf_r+0x106a>
 800a4aa:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800a4ac:	2b00      	cmp	r3, #0
 800a4ae:	d176      	bne.n	800a59e <_svfprintf_r+0x1146>
 800a4b0:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800a4b2:	2b00      	cmp	r3, #0
 800a4b4:	d176      	bne.n	800a5a4 <_svfprintf_r+0x114c>
 800a4b6:	9b08      	ldr	r3, [sp, #32]
 800a4b8:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800a4ba:	189b      	adds	r3, r3, r2
 800a4bc:	429d      	cmp	r5, r3
 800a4be:	d900      	bls.n	800a4c2 <_svfprintf_r+0x106a>
 800a4c0:	001d      	movs	r5, r3
 800a4c2:	9b26      	ldr	r3, [sp, #152]	; 0x98
 800a4c4:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800a4c6:	4293      	cmp	r3, r2
 800a4c8:	db01      	blt.n	800a4ce <_svfprintf_r+0x1076>
 800a4ca:	07f3      	lsls	r3, r6, #31
 800a4cc:	d516      	bpl.n	800a4fc <_svfprintf_r+0x10a4>
 800a4ce:	9b1c      	ldr	r3, [sp, #112]	; 0x70
 800a4d0:	9a16      	ldr	r2, [sp, #88]	; 0x58
 800a4d2:	603b      	str	r3, [r7, #0]
 800a4d4:	9b16      	ldr	r3, [sp, #88]	; 0x58
 800a4d6:	607b      	str	r3, [r7, #4]
 800a4d8:	9b2e      	ldr	r3, [sp, #184]	; 0xb8
 800a4da:	3708      	adds	r7, #8
 800a4dc:	189b      	adds	r3, r3, r2
 800a4de:	932e      	str	r3, [sp, #184]	; 0xb8
 800a4e0:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
 800a4e2:	3301      	adds	r3, #1
 800a4e4:	932d      	str	r3, [sp, #180]	; 0xb4
 800a4e6:	2b07      	cmp	r3, #7
 800a4e8:	dd08      	ble.n	800a4fc <_svfprintf_r+0x10a4>
 800a4ea:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800a4ec:	980a      	ldr	r0, [sp, #40]	; 0x28
 800a4ee:	aa2c      	add	r2, sp, #176	; 0xb0
 800a4f0:	f001 fad6 	bl	800baa0 <__ssprint_r>
 800a4f4:	2800      	cmp	r0, #0
 800a4f6:	d000      	beq.n	800a4fa <_svfprintf_r+0x10a2>
 800a4f8:	e18d      	b.n	800a816 <_svfprintf_r+0x13be>
 800a4fa:	af2f      	add	r7, sp, #188	; 0xbc
 800a4fc:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800a4fe:	9b08      	ldr	r3, [sp, #32]
 800a500:	4694      	mov	ip, r2
 800a502:	9c26      	ldr	r4, [sp, #152]	; 0x98
 800a504:	4463      	add	r3, ip
 800a506:	1b5b      	subs	r3, r3, r5
 800a508:	1b14      	subs	r4, r2, r4
 800a50a:	429c      	cmp	r4, r3
 800a50c:	dd00      	ble.n	800a510 <_svfprintf_r+0x10b8>
 800a50e:	001c      	movs	r4, r3
 800a510:	9b2e      	ldr	r3, [sp, #184]	; 0xb8
 800a512:	2c00      	cmp	r4, #0
 800a514:	dd12      	ble.n	800a53c <_svfprintf_r+0x10e4>
 800a516:	18e3      	adds	r3, r4, r3
 800a518:	932e      	str	r3, [sp, #184]	; 0xb8
 800a51a:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
 800a51c:	603d      	str	r5, [r7, #0]
 800a51e:	3301      	adds	r3, #1
 800a520:	607c      	str	r4, [r7, #4]
 800a522:	932d      	str	r3, [sp, #180]	; 0xb4
 800a524:	3708      	adds	r7, #8
 800a526:	2b07      	cmp	r3, #7
 800a528:	dd08      	ble.n	800a53c <_svfprintf_r+0x10e4>
 800a52a:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800a52c:	980a      	ldr	r0, [sp, #40]	; 0x28
 800a52e:	aa2c      	add	r2, sp, #176	; 0xb0
 800a530:	f001 fab6 	bl	800baa0 <__ssprint_r>
 800a534:	2800      	cmp	r0, #0
 800a536:	d000      	beq.n	800a53a <_svfprintf_r+0x10e2>
 800a538:	e16d      	b.n	800a816 <_svfprintf_r+0x13be>
 800a53a:	af2f      	add	r7, sp, #188	; 0xbc
 800a53c:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800a53e:	9b26      	ldr	r3, [sp, #152]	; 0x98
 800a540:	2510      	movs	r5, #16
 800a542:	1ad3      	subs	r3, r2, r3
 800a544:	43e2      	mvns	r2, r4
 800a546:	17d2      	asrs	r2, r2, #31
 800a548:	4014      	ands	r4, r2
 800a54a:	1b1c      	subs	r4, r3, r4
 800a54c:	2c00      	cmp	r4, #0
 800a54e:	dc00      	bgt.n	800a552 <_svfprintf_r+0x10fa>
 800a550:	e6b0      	b.n	800a2b4 <_svfprintf_r+0xe5c>
 800a552:	0039      	movs	r1, r7
 800a554:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
 800a556:	4807      	ldr	r0, [pc, #28]	; (800a574 <_svfprintf_r+0x111c>)
 800a558:	9a2e      	ldr	r2, [sp, #184]	; 0xb8
 800a55a:	3301      	adds	r3, #1
 800a55c:	3108      	adds	r1, #8
 800a55e:	6038      	str	r0, [r7, #0]
 800a560:	2c10      	cmp	r4, #16
 800a562:	dd00      	ble.n	800a566 <_svfprintf_r+0x110e>
 800a564:	e096      	b.n	800a694 <_svfprintf_r+0x123c>
 800a566:	1912      	adds	r2, r2, r4
 800a568:	607c      	str	r4, [r7, #4]
 800a56a:	922e      	str	r2, [sp, #184]	; 0xb8
 800a56c:	e6dd      	b.n	800a32a <_svfprintf_r+0xed2>
 800a56e:	46c0      	nop			; (mov r8, r8)
 800a570:	0800ed0e 	.word	0x0800ed0e
 800a574:	0800ed20 	.word	0x0800ed20
 800a578:	2010      	movs	r0, #16
 800a57a:	1812      	adds	r2, r2, r0
 800a57c:	6078      	str	r0, [r7, #4]
 800a57e:	922e      	str	r2, [sp, #184]	; 0xb8
 800a580:	932d      	str	r3, [sp, #180]	; 0xb4
 800a582:	2b07      	cmp	r3, #7
 800a584:	dd08      	ble.n	800a598 <_svfprintf_r+0x1140>
 800a586:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800a588:	980a      	ldr	r0, [sp, #40]	; 0x28
 800a58a:	aa2c      	add	r2, sp, #176	; 0xb0
 800a58c:	f001 fa88 	bl	800baa0 <__ssprint_r>
 800a590:	2800      	cmp	r0, #0
 800a592:	d000      	beq.n	800a596 <_svfprintf_r+0x113e>
 800a594:	e13f      	b.n	800a816 <_svfprintf_r+0x13be>
 800a596:	a92f      	add	r1, sp, #188	; 0xbc
 800a598:	000f      	movs	r7, r1
 800a59a:	3c10      	subs	r4, #16
 800a59c:	e768      	b.n	800a470 <_svfprintf_r+0x1018>
 800a59e:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800a5a0:	2b00      	cmp	r3, #0
 800a5a2:	d05d      	beq.n	800a660 <_svfprintf_r+0x1208>
 800a5a4:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800a5a6:	3b01      	subs	r3, #1
 800a5a8:	9310      	str	r3, [sp, #64]	; 0x40
 800a5aa:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 800a5ac:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
 800a5ae:	603b      	str	r3, [r7, #0]
 800a5b0:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800a5b2:	607b      	str	r3, [r7, #4]
 800a5b4:	9b2e      	ldr	r3, [sp, #184]	; 0xb8
 800a5b6:	3708      	adds	r7, #8
 800a5b8:	189b      	adds	r3, r3, r2
 800a5ba:	932e      	str	r3, [sp, #184]	; 0xb8
 800a5bc:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
 800a5be:	3301      	adds	r3, #1
 800a5c0:	932d      	str	r3, [sp, #180]	; 0xb4
 800a5c2:	2b07      	cmp	r3, #7
 800a5c4:	dd08      	ble.n	800a5d8 <_svfprintf_r+0x1180>
 800a5c6:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800a5c8:	980a      	ldr	r0, [sp, #40]	; 0x28
 800a5ca:	aa2c      	add	r2, sp, #176	; 0xb0
 800a5cc:	f001 fa68 	bl	800baa0 <__ssprint_r>
 800a5d0:	2800      	cmp	r0, #0
 800a5d2:	d000      	beq.n	800a5d6 <_svfprintf_r+0x117e>
 800a5d4:	e11f      	b.n	800a816 <_svfprintf_r+0x13be>
 800a5d6:	af2f      	add	r7, sp, #188	; 0xbc
 800a5d8:	9b08      	ldr	r3, [sp, #32]
 800a5da:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800a5dc:	189c      	adds	r4, r3, r2
 800a5de:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800a5e0:	1b64      	subs	r4, r4, r5
 800a5e2:	781b      	ldrb	r3, [r3, #0]
 800a5e4:	429c      	cmp	r4, r3
 800a5e6:	dd00      	ble.n	800a5ea <_svfprintf_r+0x1192>
 800a5e8:	001c      	movs	r4, r3
 800a5ea:	9b2e      	ldr	r3, [sp, #184]	; 0xb8
 800a5ec:	2c00      	cmp	r4, #0
 800a5ee:	dd12      	ble.n	800a616 <_svfprintf_r+0x11be>
 800a5f0:	18e3      	adds	r3, r4, r3
 800a5f2:	932e      	str	r3, [sp, #184]	; 0xb8
 800a5f4:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
 800a5f6:	603d      	str	r5, [r7, #0]
 800a5f8:	3301      	adds	r3, #1
 800a5fa:	607c      	str	r4, [r7, #4]
 800a5fc:	932d      	str	r3, [sp, #180]	; 0xb4
 800a5fe:	3708      	adds	r7, #8
 800a600:	2b07      	cmp	r3, #7
 800a602:	dd08      	ble.n	800a616 <_svfprintf_r+0x11be>
 800a604:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800a606:	980a      	ldr	r0, [sp, #40]	; 0x28
 800a608:	aa2c      	add	r2, sp, #176	; 0xb0
 800a60a:	f001 fa49 	bl	800baa0 <__ssprint_r>
 800a60e:	2800      	cmp	r0, #0
 800a610:	d000      	beq.n	800a614 <_svfprintf_r+0x11bc>
 800a612:	e100      	b.n	800a816 <_svfprintf_r+0x13be>
 800a614:	af2f      	add	r7, sp, #188	; 0xbc
 800a616:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800a618:	781a      	ldrb	r2, [r3, #0]
 800a61a:	43e3      	mvns	r3, r4
 800a61c:	17db      	asrs	r3, r3, #31
 800a61e:	401c      	ands	r4, r3
 800a620:	1b14      	subs	r4, r2, r4
 800a622:	2c00      	cmp	r4, #0
 800a624:	dd18      	ble.n	800a658 <_svfprintf_r+0x1200>
 800a626:	0039      	movs	r1, r7
 800a628:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
 800a62a:	48aa      	ldr	r0, [pc, #680]	; (800a8d4 <_svfprintf_r+0x147c>)
 800a62c:	9a2e      	ldr	r2, [sp, #184]	; 0xb8
 800a62e:	3301      	adds	r3, #1
 800a630:	3108      	adds	r1, #8
 800a632:	6038      	str	r0, [r7, #0]
 800a634:	2c10      	cmp	r4, #16
 800a636:	dc1a      	bgt.n	800a66e <_svfprintf_r+0x1216>
 800a638:	1912      	adds	r2, r2, r4
 800a63a:	607c      	str	r4, [r7, #4]
 800a63c:	922e      	str	r2, [sp, #184]	; 0xb8
 800a63e:	000f      	movs	r7, r1
 800a640:	932d      	str	r3, [sp, #180]	; 0xb4
 800a642:	2b07      	cmp	r3, #7
 800a644:	dd08      	ble.n	800a658 <_svfprintf_r+0x1200>
 800a646:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800a648:	980a      	ldr	r0, [sp, #40]	; 0x28
 800a64a:	aa2c      	add	r2, sp, #176	; 0xb0
 800a64c:	f001 fa28 	bl	800baa0 <__ssprint_r>
 800a650:	2800      	cmp	r0, #0
 800a652:	d000      	beq.n	800a656 <_svfprintf_r+0x11fe>
 800a654:	e0df      	b.n	800a816 <_svfprintf_r+0x13be>
 800a656:	af2f      	add	r7, sp, #188	; 0xbc
 800a658:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800a65a:	781b      	ldrb	r3, [r3, #0]
 800a65c:	18ed      	adds	r5, r5, r3
 800a65e:	e724      	b.n	800a4aa <_svfprintf_r+0x1052>
 800a660:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800a662:	3b01      	subs	r3, #1
 800a664:	9312      	str	r3, [sp, #72]	; 0x48
 800a666:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800a668:	3b01      	subs	r3, #1
 800a66a:	9311      	str	r3, [sp, #68]	; 0x44
 800a66c:	e79d      	b.n	800a5aa <_svfprintf_r+0x1152>
 800a66e:	2010      	movs	r0, #16
 800a670:	1812      	adds	r2, r2, r0
 800a672:	6078      	str	r0, [r7, #4]
 800a674:	922e      	str	r2, [sp, #184]	; 0xb8
 800a676:	932d      	str	r3, [sp, #180]	; 0xb4
 800a678:	2b07      	cmp	r3, #7
 800a67a:	dd08      	ble.n	800a68e <_svfprintf_r+0x1236>
 800a67c:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800a67e:	980a      	ldr	r0, [sp, #40]	; 0x28
 800a680:	aa2c      	add	r2, sp, #176	; 0xb0
 800a682:	f001 fa0d 	bl	800baa0 <__ssprint_r>
 800a686:	2800      	cmp	r0, #0
 800a688:	d000      	beq.n	800a68c <_svfprintf_r+0x1234>
 800a68a:	e0c4      	b.n	800a816 <_svfprintf_r+0x13be>
 800a68c:	a92f      	add	r1, sp, #188	; 0xbc
 800a68e:	000f      	movs	r7, r1
 800a690:	3c10      	subs	r4, #16
 800a692:	e7c8      	b.n	800a626 <_svfprintf_r+0x11ce>
 800a694:	3210      	adds	r2, #16
 800a696:	607d      	str	r5, [r7, #4]
 800a698:	922e      	str	r2, [sp, #184]	; 0xb8
 800a69a:	932d      	str	r3, [sp, #180]	; 0xb4
 800a69c:	2b07      	cmp	r3, #7
 800a69e:	dd08      	ble.n	800a6b2 <_svfprintf_r+0x125a>
 800a6a0:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800a6a2:	980a      	ldr	r0, [sp, #40]	; 0x28
 800a6a4:	aa2c      	add	r2, sp, #176	; 0xb0
 800a6a6:	f001 f9fb 	bl	800baa0 <__ssprint_r>
 800a6aa:	2800      	cmp	r0, #0
 800a6ac:	d000      	beq.n	800a6b0 <_svfprintf_r+0x1258>
 800a6ae:	e0b2      	b.n	800a816 <_svfprintf_r+0x13be>
 800a6b0:	a92f      	add	r1, sp, #188	; 0xbc
 800a6b2:	000f      	movs	r7, r1
 800a6b4:	3c10      	subs	r4, #16
 800a6b6:	e74c      	b.n	800a552 <_svfprintf_r+0x10fa>
 800a6b8:	003c      	movs	r4, r7
 800a6ba:	9919      	ldr	r1, [sp, #100]	; 0x64
 800a6bc:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
 800a6be:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800a6c0:	3101      	adds	r1, #1
 800a6c2:	3301      	adds	r3, #1
 800a6c4:	3408      	adds	r4, #8
 800a6c6:	2a01      	cmp	r2, #1
 800a6c8:	dc03      	bgt.n	800a6d2 <_svfprintf_r+0x127a>
 800a6ca:	2201      	movs	r2, #1
 800a6cc:	4216      	tst	r6, r2
 800a6ce:	d100      	bne.n	800a6d2 <_svfprintf_r+0x127a>
 800a6d0:	e07f      	b.n	800a7d2 <_svfprintf_r+0x137a>
 800a6d2:	9a08      	ldr	r2, [sp, #32]
 800a6d4:	912e      	str	r1, [sp, #184]	; 0xb8
 800a6d6:	603a      	str	r2, [r7, #0]
 800a6d8:	2201      	movs	r2, #1
 800a6da:	932d      	str	r3, [sp, #180]	; 0xb4
 800a6dc:	607a      	str	r2, [r7, #4]
 800a6de:	2b07      	cmp	r3, #7
 800a6e0:	dd08      	ble.n	800a6f4 <_svfprintf_r+0x129c>
 800a6e2:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800a6e4:	980a      	ldr	r0, [sp, #40]	; 0x28
 800a6e6:	aa2c      	add	r2, sp, #176	; 0xb0
 800a6e8:	f001 f9da 	bl	800baa0 <__ssprint_r>
 800a6ec:	2800      	cmp	r0, #0
 800a6ee:	d000      	beq.n	800a6f2 <_svfprintf_r+0x129a>
 800a6f0:	e091      	b.n	800a816 <_svfprintf_r+0x13be>
 800a6f2:	ac2f      	add	r4, sp, #188	; 0xbc
 800a6f4:	9b1c      	ldr	r3, [sp, #112]	; 0x70
 800a6f6:	9a16      	ldr	r2, [sp, #88]	; 0x58
 800a6f8:	6023      	str	r3, [r4, #0]
 800a6fa:	9b16      	ldr	r3, [sp, #88]	; 0x58
 800a6fc:	6063      	str	r3, [r4, #4]
 800a6fe:	9b2e      	ldr	r3, [sp, #184]	; 0xb8
 800a700:	3408      	adds	r4, #8
 800a702:	189b      	adds	r3, r3, r2
 800a704:	932e      	str	r3, [sp, #184]	; 0xb8
 800a706:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
 800a708:	3301      	adds	r3, #1
 800a70a:	932d      	str	r3, [sp, #180]	; 0xb4
 800a70c:	2b07      	cmp	r3, #7
 800a70e:	dd07      	ble.n	800a720 <_svfprintf_r+0x12c8>
 800a710:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800a712:	980a      	ldr	r0, [sp, #40]	; 0x28
 800a714:	aa2c      	add	r2, sp, #176	; 0xb0
 800a716:	f001 f9c3 	bl	800baa0 <__ssprint_r>
 800a71a:	2800      	cmp	r0, #0
 800a71c:	d17b      	bne.n	800a816 <_svfprintf_r+0x13be>
 800a71e:	ac2f      	add	r4, sp, #188	; 0xbc
 800a720:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
 800a722:	2200      	movs	r2, #0
 800a724:	9814      	ldr	r0, [sp, #80]	; 0x50
 800a726:	9915      	ldr	r1, [sp, #84]	; 0x54
 800a728:	9309      	str	r3, [sp, #36]	; 0x24
 800a72a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800a72c:	9f2e      	ldr	r7, [sp, #184]	; 0xb8
 800a72e:	1e5d      	subs	r5, r3, #1
 800a730:	2300      	movs	r3, #0
 800a732:	f7f5 fe89 	bl	8000448 <__aeabi_dcmpeq>
 800a736:	2800      	cmp	r0, #0
 800a738:	d126      	bne.n	800a788 <_svfprintf_r+0x1330>
 800a73a:	9b08      	ldr	r3, [sp, #32]
 800a73c:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800a73e:	3301      	adds	r3, #1
 800a740:	990e      	ldr	r1, [sp, #56]	; 0x38
 800a742:	6023      	str	r3, [r4, #0]
 800a744:	1e7b      	subs	r3, r7, #1
 800a746:	3201      	adds	r2, #1
 800a748:	185b      	adds	r3, r3, r1
 800a74a:	6065      	str	r5, [r4, #4]
 800a74c:	932e      	str	r3, [sp, #184]	; 0xb8
 800a74e:	922d      	str	r2, [sp, #180]	; 0xb4
 800a750:	3408      	adds	r4, #8
 800a752:	2a07      	cmp	r2, #7
 800a754:	dd07      	ble.n	800a766 <_svfprintf_r+0x130e>
 800a756:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800a758:	980a      	ldr	r0, [sp, #40]	; 0x28
 800a75a:	aa2c      	add	r2, sp, #176	; 0xb0
 800a75c:	f001 f9a0 	bl	800baa0 <__ssprint_r>
 800a760:	2800      	cmp	r0, #0
 800a762:	d158      	bne.n	800a816 <_svfprintf_r+0x13be>
 800a764:	ac2f      	add	r4, sp, #188	; 0xbc
 800a766:	ab28      	add	r3, sp, #160	; 0xa0
 800a768:	6023      	str	r3, [r4, #0]
 800a76a:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 800a76c:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 800a76e:	6063      	str	r3, [r4, #4]
 800a770:	9b2e      	ldr	r3, [sp, #184]	; 0xb8
 800a772:	189b      	adds	r3, r3, r2
 800a774:	932e      	str	r3, [sp, #184]	; 0xb8
 800a776:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
 800a778:	3301      	adds	r3, #1
 800a77a:	932d      	str	r3, [sp, #180]	; 0xb4
 800a77c:	2b07      	cmp	r3, #7
 800a77e:	dd00      	ble.n	800a782 <_svfprintf_r+0x132a>
 800a780:	e638      	b.n	800a3f4 <_svfprintf_r+0xf9c>
 800a782:	3408      	adds	r4, #8
 800a784:	0027      	movs	r7, r4
 800a786:	e595      	b.n	800a2b4 <_svfprintf_r+0xe5c>
 800a788:	2710      	movs	r7, #16
 800a78a:	2d00      	cmp	r5, #0
 800a78c:	ddeb      	ble.n	800a766 <_svfprintf_r+0x130e>
 800a78e:	0021      	movs	r1, r4
 800a790:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
 800a792:	4850      	ldr	r0, [pc, #320]	; (800a8d4 <_svfprintf_r+0x147c>)
 800a794:	9a2e      	ldr	r2, [sp, #184]	; 0xb8
 800a796:	3301      	adds	r3, #1
 800a798:	3108      	adds	r1, #8
 800a79a:	6020      	str	r0, [r4, #0]
 800a79c:	2d10      	cmp	r5, #16
 800a79e:	dc07      	bgt.n	800a7b0 <_svfprintf_r+0x1358>
 800a7a0:	6065      	str	r5, [r4, #4]
 800a7a2:	000c      	movs	r4, r1
 800a7a4:	18ad      	adds	r5, r5, r2
 800a7a6:	952e      	str	r5, [sp, #184]	; 0xb8
 800a7a8:	932d      	str	r3, [sp, #180]	; 0xb4
 800a7aa:	2b07      	cmp	r3, #7
 800a7ac:	dddb      	ble.n	800a766 <_svfprintf_r+0x130e>
 800a7ae:	e7d2      	b.n	800a756 <_svfprintf_r+0x12fe>
 800a7b0:	3210      	adds	r2, #16
 800a7b2:	6067      	str	r7, [r4, #4]
 800a7b4:	922e      	str	r2, [sp, #184]	; 0xb8
 800a7b6:	932d      	str	r3, [sp, #180]	; 0xb4
 800a7b8:	2b07      	cmp	r3, #7
 800a7ba:	dd07      	ble.n	800a7cc <_svfprintf_r+0x1374>
 800a7bc:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800a7be:	980a      	ldr	r0, [sp, #40]	; 0x28
 800a7c0:	aa2c      	add	r2, sp, #176	; 0xb0
 800a7c2:	f001 f96d 	bl	800baa0 <__ssprint_r>
 800a7c6:	2800      	cmp	r0, #0
 800a7c8:	d125      	bne.n	800a816 <_svfprintf_r+0x13be>
 800a7ca:	a92f      	add	r1, sp, #188	; 0xbc
 800a7cc:	000c      	movs	r4, r1
 800a7ce:	3d10      	subs	r5, #16
 800a7d0:	e7dd      	b.n	800a78e <_svfprintf_r+0x1336>
 800a7d2:	9808      	ldr	r0, [sp, #32]
 800a7d4:	912e      	str	r1, [sp, #184]	; 0xb8
 800a7d6:	c705      	stmia	r7!, {r0, r2}
 800a7d8:	932d      	str	r3, [sp, #180]	; 0xb4
 800a7da:	e7e6      	b.n	800a7aa <_svfprintf_r+0x1352>
 800a7dc:	9b18      	ldr	r3, [sp, #96]	; 0x60
 800a7de:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 800a7e0:	2510      	movs	r5, #16
 800a7e2:	1a9c      	subs	r4, r3, r2
 800a7e4:	2c00      	cmp	r4, #0
 800a7e6:	dc00      	bgt.n	800a7ea <_svfprintf_r+0x1392>
 800a7e8:	e567      	b.n	800a2ba <_svfprintf_r+0xe62>
 800a7ea:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
 800a7ec:	493a      	ldr	r1, [pc, #232]	; (800a8d8 <_svfprintf_r+0x1480>)
 800a7ee:	9a2e      	ldr	r2, [sp, #184]	; 0xb8
 800a7f0:	3301      	adds	r3, #1
 800a7f2:	6039      	str	r1, [r7, #0]
 800a7f4:	2c10      	cmp	r4, #16
 800a7f6:	dc19      	bgt.n	800a82c <_svfprintf_r+0x13d4>
 800a7f8:	607c      	str	r4, [r7, #4]
 800a7fa:	18a4      	adds	r4, r4, r2
 800a7fc:	942e      	str	r4, [sp, #184]	; 0xb8
 800a7fe:	932d      	str	r3, [sp, #180]	; 0xb4
 800a800:	2b07      	cmp	r3, #7
 800a802:	dc00      	bgt.n	800a806 <_svfprintf_r+0x13ae>
 800a804:	e559      	b.n	800a2ba <_svfprintf_r+0xe62>
 800a806:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800a808:	980a      	ldr	r0, [sp, #40]	; 0x28
 800a80a:	aa2c      	add	r2, sp, #176	; 0xb0
 800a80c:	f001 f948 	bl	800baa0 <__ssprint_r>
 800a810:	2800      	cmp	r0, #0
 800a812:	d100      	bne.n	800a816 <_svfprintf_r+0x13be>
 800a814:	e551      	b.n	800a2ba <_svfprintf_r+0xe62>
 800a816:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800a818:	2b00      	cmp	r3, #0
 800a81a:	d101      	bne.n	800a820 <_svfprintf_r+0x13c8>
 800a81c:	f7ff f845 	bl	80098aa <_svfprintf_r+0x452>
 800a820:	0019      	movs	r1, r3
 800a822:	980a      	ldr	r0, [sp, #40]	; 0x28
 800a824:	f7fd ffd8 	bl	80087d8 <_free_r>
 800a828:	f7ff f83f 	bl	80098aa <_svfprintf_r+0x452>
 800a82c:	3210      	adds	r2, #16
 800a82e:	607d      	str	r5, [r7, #4]
 800a830:	922e      	str	r2, [sp, #184]	; 0xb8
 800a832:	932d      	str	r3, [sp, #180]	; 0xb4
 800a834:	3708      	adds	r7, #8
 800a836:	2b07      	cmp	r3, #7
 800a838:	dd07      	ble.n	800a84a <_svfprintf_r+0x13f2>
 800a83a:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800a83c:	980a      	ldr	r0, [sp, #40]	; 0x28
 800a83e:	aa2c      	add	r2, sp, #176	; 0xb0
 800a840:	f001 f92e 	bl	800baa0 <__ssprint_r>
 800a844:	2800      	cmp	r0, #0
 800a846:	d1e6      	bne.n	800a816 <_svfprintf_r+0x13be>
 800a848:	af2f      	add	r7, sp, #188	; 0xbc
 800a84a:	3c10      	subs	r4, #16
 800a84c:	e7cd      	b.n	800a7ea <_svfprintf_r+0x1392>
 800a84e:	990c      	ldr	r1, [sp, #48]	; 0x30
 800a850:	980a      	ldr	r0, [sp, #40]	; 0x28
 800a852:	f7fd ffc1 	bl	80087d8 <_free_r>
 800a856:	e549      	b.n	800a2ec <_svfprintf_r+0xe94>
 800a858:	9b2e      	ldr	r3, [sp, #184]	; 0xb8
 800a85a:	2b00      	cmp	r3, #0
 800a85c:	d101      	bne.n	800a862 <_svfprintf_r+0x140a>
 800a85e:	f7ff f824 	bl	80098aa <_svfprintf_r+0x452>
 800a862:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800a864:	980a      	ldr	r0, [sp, #40]	; 0x28
 800a866:	aa2c      	add	r2, sp, #176	; 0xb0
 800a868:	f001 f91a 	bl	800baa0 <__ssprint_r>
 800a86c:	f7ff f81d 	bl	80098aa <_svfprintf_r+0x452>
 800a870:	0034      	movs	r4, r6
 800a872:	2a00      	cmp	r2, #0
 800a874:	d101      	bne.n	800a87a <_svfprintf_r+0x1422>
 800a876:	f7fe ff8c 	bl	8009792 <_svfprintf_r+0x33a>
 800a87a:	2b01      	cmp	r3, #1
 800a87c:	d101      	bne.n	800a882 <_svfprintf_r+0x142a>
 800a87e:	f7ff fc01 	bl	800a084 <_svfprintf_r+0xc2c>
 800a882:	2b02      	cmp	r3, #2
 800a884:	d100      	bne.n	800a888 <_svfprintf_r+0x1430>
 800a886:	e459      	b.n	800a13c <_svfprintf_r+0xce4>
 800a888:	2507      	movs	r5, #7
 800a88a:	ab58      	add	r3, sp, #352	; 0x160
 800a88c:	9308      	str	r3, [sp, #32]
 800a88e:	9a08      	ldr	r2, [sp, #32]
 800a890:	0013      	movs	r3, r2
 800a892:	3b01      	subs	r3, #1
 800a894:	9308      	str	r3, [sp, #32]
 800a896:	9b06      	ldr	r3, [sp, #24]
 800a898:	9908      	ldr	r1, [sp, #32]
 800a89a:	402b      	ands	r3, r5
 800a89c:	3330      	adds	r3, #48	; 0x30
 800a89e:	700b      	strb	r3, [r1, #0]
 800a8a0:	9907      	ldr	r1, [sp, #28]
 800a8a2:	074e      	lsls	r6, r1, #29
 800a8a4:	9906      	ldr	r1, [sp, #24]
 800a8a6:	08c8      	lsrs	r0, r1, #3
 800a8a8:	9907      	ldr	r1, [sp, #28]
 800a8aa:	4306      	orrs	r6, r0
 800a8ac:	08c9      	lsrs	r1, r1, #3
 800a8ae:	9107      	str	r1, [sp, #28]
 800a8b0:	0031      	movs	r1, r6
 800a8b2:	9807      	ldr	r0, [sp, #28]
 800a8b4:	9606      	str	r6, [sp, #24]
 800a8b6:	4301      	orrs	r1, r0
 800a8b8:	d1e9      	bne.n	800a88e <_svfprintf_r+0x1436>
 800a8ba:	07e1      	lsls	r1, r4, #31
 800a8bc:	d400      	bmi.n	800a8c0 <_svfprintf_r+0x1468>
 800a8be:	e42a      	b.n	800a116 <_svfprintf_r+0xcbe>
 800a8c0:	2b30      	cmp	r3, #48	; 0x30
 800a8c2:	d100      	bne.n	800a8c6 <_svfprintf_r+0x146e>
 800a8c4:	e427      	b.n	800a116 <_svfprintf_r+0xcbe>
 800a8c6:	2130      	movs	r1, #48	; 0x30
 800a8c8:	9b08      	ldr	r3, [sp, #32]
 800a8ca:	3b01      	subs	r3, #1
 800a8cc:	7019      	strb	r1, [r3, #0]
 800a8ce:	1e93      	subs	r3, r2, #2
 800a8d0:	9308      	str	r3, [sp, #32]
 800a8d2:	e420      	b.n	800a116 <_svfprintf_r+0xcbe>
 800a8d4:	0800ed20 	.word	0x0800ed20
 800a8d8:	0800ed10 	.word	0x0800ed10

0800a8dc <_fclose_r>:
 800a8dc:	b570      	push	{r4, r5, r6, lr}
 800a8de:	0005      	movs	r5, r0
 800a8e0:	1e0c      	subs	r4, r1, #0
 800a8e2:	d102      	bne.n	800a8ea <_fclose_r+0xe>
 800a8e4:	2600      	movs	r6, #0
 800a8e6:	0030      	movs	r0, r6
 800a8e8:	bd70      	pop	{r4, r5, r6, pc}
 800a8ea:	2800      	cmp	r0, #0
 800a8ec:	d004      	beq.n	800a8f8 <_fclose_r+0x1c>
 800a8ee:	6b43      	ldr	r3, [r0, #52]	; 0x34
 800a8f0:	2b00      	cmp	r3, #0
 800a8f2:	d101      	bne.n	800a8f8 <_fclose_r+0x1c>
 800a8f4:	f7fd fd9e 	bl	8008434 <__sinit>
 800a8f8:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800a8fa:	07db      	lsls	r3, r3, #31
 800a8fc:	d405      	bmi.n	800a90a <_fclose_r+0x2e>
 800a8fe:	89a3      	ldrh	r3, [r4, #12]
 800a900:	059b      	lsls	r3, r3, #22
 800a902:	d402      	bmi.n	800a90a <_fclose_r+0x2e>
 800a904:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800a906:	f7fd fef3 	bl	80086f0 <__retarget_lock_acquire_recursive>
 800a90a:	220c      	movs	r2, #12
 800a90c:	5ea3      	ldrsh	r3, [r4, r2]
 800a90e:	2b00      	cmp	r3, #0
 800a910:	d109      	bne.n	800a926 <_fclose_r+0x4a>
 800a912:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800a914:	3301      	adds	r3, #1
 800a916:	0016      	movs	r6, r2
 800a918:	401e      	ands	r6, r3
 800a91a:	421a      	tst	r2, r3
 800a91c:	d1e2      	bne.n	800a8e4 <_fclose_r+0x8>
 800a91e:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800a920:	f7fd fee7 	bl	80086f2 <__retarget_lock_release_recursive>
 800a924:	e7df      	b.n	800a8e6 <_fclose_r+0xa>
 800a926:	0021      	movs	r1, r4
 800a928:	0028      	movs	r0, r5
 800a92a:	f000 f837 	bl	800a99c <__sflush_r>
 800a92e:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 800a930:	0006      	movs	r6, r0
 800a932:	2b00      	cmp	r3, #0
 800a934:	d006      	beq.n	800a944 <_fclose_r+0x68>
 800a936:	0028      	movs	r0, r5
 800a938:	69e1      	ldr	r1, [r4, #28]
 800a93a:	4798      	blx	r3
 800a93c:	2800      	cmp	r0, #0
 800a93e:	da01      	bge.n	800a944 <_fclose_r+0x68>
 800a940:	2601      	movs	r6, #1
 800a942:	4276      	negs	r6, r6
 800a944:	89a3      	ldrh	r3, [r4, #12]
 800a946:	061b      	lsls	r3, r3, #24
 800a948:	d503      	bpl.n	800a952 <_fclose_r+0x76>
 800a94a:	0028      	movs	r0, r5
 800a94c:	6921      	ldr	r1, [r4, #16]
 800a94e:	f7fd ff43 	bl	80087d8 <_free_r>
 800a952:	6b21      	ldr	r1, [r4, #48]	; 0x30
 800a954:	2900      	cmp	r1, #0
 800a956:	d008      	beq.n	800a96a <_fclose_r+0x8e>
 800a958:	0023      	movs	r3, r4
 800a95a:	3340      	adds	r3, #64	; 0x40
 800a95c:	4299      	cmp	r1, r3
 800a95e:	d002      	beq.n	800a966 <_fclose_r+0x8a>
 800a960:	0028      	movs	r0, r5
 800a962:	f7fd ff39 	bl	80087d8 <_free_r>
 800a966:	2300      	movs	r3, #0
 800a968:	6323      	str	r3, [r4, #48]	; 0x30
 800a96a:	6c61      	ldr	r1, [r4, #68]	; 0x44
 800a96c:	2900      	cmp	r1, #0
 800a96e:	d004      	beq.n	800a97a <_fclose_r+0x9e>
 800a970:	0028      	movs	r0, r5
 800a972:	f7fd ff31 	bl	80087d8 <_free_r>
 800a976:	2300      	movs	r3, #0
 800a978:	6463      	str	r3, [r4, #68]	; 0x44
 800a97a:	f7fd fd4b 	bl	8008414 <__sfp_lock_acquire>
 800a97e:	2300      	movs	r3, #0
 800a980:	81a3      	strh	r3, [r4, #12]
 800a982:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800a984:	07db      	lsls	r3, r3, #31
 800a986:	d402      	bmi.n	800a98e <_fclose_r+0xb2>
 800a988:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800a98a:	f7fd feb2 	bl	80086f2 <__retarget_lock_release_recursive>
 800a98e:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800a990:	f7fd fead 	bl	80086ee <__retarget_lock_close_recursive>
 800a994:	f7fd fd46 	bl	8008424 <__sfp_lock_release>
 800a998:	e7a5      	b.n	800a8e6 <_fclose_r+0xa>
	...

0800a99c <__sflush_r>:
 800a99c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800a99e:	230c      	movs	r3, #12
 800a9a0:	5eca      	ldrsh	r2, [r1, r3]
 800a9a2:	000c      	movs	r4, r1
 800a9a4:	0005      	movs	r5, r0
 800a9a6:	b291      	uxth	r1, r2
 800a9a8:	0713      	lsls	r3, r2, #28
 800a9aa:	d464      	bmi.n	800aa76 <__sflush_r+0xda>
 800a9ac:	2380      	movs	r3, #128	; 0x80
 800a9ae:	011b      	lsls	r3, r3, #4
 800a9b0:	4313      	orrs	r3, r2
 800a9b2:	6862      	ldr	r2, [r4, #4]
 800a9b4:	81a3      	strh	r3, [r4, #12]
 800a9b6:	2a00      	cmp	r2, #0
 800a9b8:	dc04      	bgt.n	800a9c4 <__sflush_r+0x28>
 800a9ba:	6be2      	ldr	r2, [r4, #60]	; 0x3c
 800a9bc:	2a00      	cmp	r2, #0
 800a9be:	dc01      	bgt.n	800a9c4 <__sflush_r+0x28>
 800a9c0:	2000      	movs	r0, #0
 800a9c2:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 800a9c4:	6aa7      	ldr	r7, [r4, #40]	; 0x28
 800a9c6:	2f00      	cmp	r7, #0
 800a9c8:	d0fa      	beq.n	800a9c0 <__sflush_r+0x24>
 800a9ca:	2200      	movs	r2, #0
 800a9cc:	2080      	movs	r0, #128	; 0x80
 800a9ce:	682e      	ldr	r6, [r5, #0]
 800a9d0:	602a      	str	r2, [r5, #0]
 800a9d2:	001a      	movs	r2, r3
 800a9d4:	0140      	lsls	r0, r0, #5
 800a9d6:	69e1      	ldr	r1, [r4, #28]
 800a9d8:	4002      	ands	r2, r0
 800a9da:	4203      	tst	r3, r0
 800a9dc:	d038      	beq.n	800aa50 <__sflush_r+0xb4>
 800a9de:	6d20      	ldr	r0, [r4, #80]	; 0x50
 800a9e0:	89a3      	ldrh	r3, [r4, #12]
 800a9e2:	075b      	lsls	r3, r3, #29
 800a9e4:	d506      	bpl.n	800a9f4 <__sflush_r+0x58>
 800a9e6:	6863      	ldr	r3, [r4, #4]
 800a9e8:	1ac0      	subs	r0, r0, r3
 800a9ea:	6b23      	ldr	r3, [r4, #48]	; 0x30
 800a9ec:	2b00      	cmp	r3, #0
 800a9ee:	d001      	beq.n	800a9f4 <__sflush_r+0x58>
 800a9f0:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 800a9f2:	1ac0      	subs	r0, r0, r3
 800a9f4:	0002      	movs	r2, r0
 800a9f6:	2300      	movs	r3, #0
 800a9f8:	0028      	movs	r0, r5
 800a9fa:	6aa7      	ldr	r7, [r4, #40]	; 0x28
 800a9fc:	69e1      	ldr	r1, [r4, #28]
 800a9fe:	47b8      	blx	r7
 800aa00:	89a2      	ldrh	r2, [r4, #12]
 800aa02:	1c43      	adds	r3, r0, #1
 800aa04:	d106      	bne.n	800aa14 <__sflush_r+0x78>
 800aa06:	6829      	ldr	r1, [r5, #0]
 800aa08:	291d      	cmp	r1, #29
 800aa0a:	d830      	bhi.n	800aa6e <__sflush_r+0xd2>
 800aa0c:	4b2c      	ldr	r3, [pc, #176]	; (800aac0 <__sflush_r+0x124>)
 800aa0e:	410b      	asrs	r3, r1
 800aa10:	07db      	lsls	r3, r3, #31
 800aa12:	d42c      	bmi.n	800aa6e <__sflush_r+0xd2>
 800aa14:	4b2b      	ldr	r3, [pc, #172]	; (800aac4 <__sflush_r+0x128>)
 800aa16:	4013      	ands	r3, r2
 800aa18:	2200      	movs	r2, #0
 800aa1a:	6062      	str	r2, [r4, #4]
 800aa1c:	6922      	ldr	r2, [r4, #16]
 800aa1e:	b21b      	sxth	r3, r3
 800aa20:	81a3      	strh	r3, [r4, #12]
 800aa22:	6022      	str	r2, [r4, #0]
 800aa24:	04db      	lsls	r3, r3, #19
 800aa26:	d505      	bpl.n	800aa34 <__sflush_r+0x98>
 800aa28:	1c43      	adds	r3, r0, #1
 800aa2a:	d102      	bne.n	800aa32 <__sflush_r+0x96>
 800aa2c:	682b      	ldr	r3, [r5, #0]
 800aa2e:	2b00      	cmp	r3, #0
 800aa30:	d100      	bne.n	800aa34 <__sflush_r+0x98>
 800aa32:	6520      	str	r0, [r4, #80]	; 0x50
 800aa34:	6b21      	ldr	r1, [r4, #48]	; 0x30
 800aa36:	602e      	str	r6, [r5, #0]
 800aa38:	2900      	cmp	r1, #0
 800aa3a:	d0c1      	beq.n	800a9c0 <__sflush_r+0x24>
 800aa3c:	0023      	movs	r3, r4
 800aa3e:	3340      	adds	r3, #64	; 0x40
 800aa40:	4299      	cmp	r1, r3
 800aa42:	d002      	beq.n	800aa4a <__sflush_r+0xae>
 800aa44:	0028      	movs	r0, r5
 800aa46:	f7fd fec7 	bl	80087d8 <_free_r>
 800aa4a:	2000      	movs	r0, #0
 800aa4c:	6320      	str	r0, [r4, #48]	; 0x30
 800aa4e:	e7b8      	b.n	800a9c2 <__sflush_r+0x26>
 800aa50:	2301      	movs	r3, #1
 800aa52:	0028      	movs	r0, r5
 800aa54:	47b8      	blx	r7
 800aa56:	1c43      	adds	r3, r0, #1
 800aa58:	d1c2      	bne.n	800a9e0 <__sflush_r+0x44>
 800aa5a:	682b      	ldr	r3, [r5, #0]
 800aa5c:	2b00      	cmp	r3, #0
 800aa5e:	d0bf      	beq.n	800a9e0 <__sflush_r+0x44>
 800aa60:	2b1d      	cmp	r3, #29
 800aa62:	d001      	beq.n	800aa68 <__sflush_r+0xcc>
 800aa64:	2b16      	cmp	r3, #22
 800aa66:	d101      	bne.n	800aa6c <__sflush_r+0xd0>
 800aa68:	602e      	str	r6, [r5, #0]
 800aa6a:	e7a9      	b.n	800a9c0 <__sflush_r+0x24>
 800aa6c:	89a2      	ldrh	r2, [r4, #12]
 800aa6e:	2340      	movs	r3, #64	; 0x40
 800aa70:	4313      	orrs	r3, r2
 800aa72:	81a3      	strh	r3, [r4, #12]
 800aa74:	e7a5      	b.n	800a9c2 <__sflush_r+0x26>
 800aa76:	6926      	ldr	r6, [r4, #16]
 800aa78:	2e00      	cmp	r6, #0
 800aa7a:	d0a1      	beq.n	800a9c0 <__sflush_r+0x24>
 800aa7c:	6827      	ldr	r7, [r4, #0]
 800aa7e:	6026      	str	r6, [r4, #0]
 800aa80:	1bbb      	subs	r3, r7, r6
 800aa82:	9301      	str	r3, [sp, #4]
 800aa84:	2300      	movs	r3, #0
 800aa86:	0789      	lsls	r1, r1, #30
 800aa88:	d100      	bne.n	800aa8c <__sflush_r+0xf0>
 800aa8a:	6963      	ldr	r3, [r4, #20]
 800aa8c:	60a3      	str	r3, [r4, #8]
 800aa8e:	9b01      	ldr	r3, [sp, #4]
 800aa90:	2b00      	cmp	r3, #0
 800aa92:	dc00      	bgt.n	800aa96 <__sflush_r+0xfa>
 800aa94:	e794      	b.n	800a9c0 <__sflush_r+0x24>
 800aa96:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800aa98:	0032      	movs	r2, r6
 800aa9a:	001f      	movs	r7, r3
 800aa9c:	0028      	movs	r0, r5
 800aa9e:	9b01      	ldr	r3, [sp, #4]
 800aaa0:	69e1      	ldr	r1, [r4, #28]
 800aaa2:	47b8      	blx	r7
 800aaa4:	2800      	cmp	r0, #0
 800aaa6:	dc06      	bgt.n	800aab6 <__sflush_r+0x11a>
 800aaa8:	2340      	movs	r3, #64	; 0x40
 800aaaa:	2001      	movs	r0, #1
 800aaac:	89a2      	ldrh	r2, [r4, #12]
 800aaae:	4240      	negs	r0, r0
 800aab0:	4313      	orrs	r3, r2
 800aab2:	81a3      	strh	r3, [r4, #12]
 800aab4:	e785      	b.n	800a9c2 <__sflush_r+0x26>
 800aab6:	9b01      	ldr	r3, [sp, #4]
 800aab8:	1836      	adds	r6, r6, r0
 800aaba:	1a1b      	subs	r3, r3, r0
 800aabc:	9301      	str	r3, [sp, #4]
 800aabe:	e7e6      	b.n	800aa8e <__sflush_r+0xf2>
 800aac0:	dfbffffe 	.word	0xdfbffffe
 800aac4:	fffff7ff 	.word	0xfffff7ff

0800aac8 <_fflush_r>:
 800aac8:	b570      	push	{r4, r5, r6, lr}
 800aaca:	0005      	movs	r5, r0
 800aacc:	000c      	movs	r4, r1
 800aace:	2800      	cmp	r0, #0
 800aad0:	d004      	beq.n	800aadc <_fflush_r+0x14>
 800aad2:	6b43      	ldr	r3, [r0, #52]	; 0x34
 800aad4:	2b00      	cmp	r3, #0
 800aad6:	d101      	bne.n	800aadc <_fflush_r+0x14>
 800aad8:	f7fd fcac 	bl	8008434 <__sinit>
 800aadc:	220c      	movs	r2, #12
 800aade:	5ea3      	ldrsh	r3, [r4, r2]
 800aae0:	1e1e      	subs	r6, r3, #0
 800aae2:	d015      	beq.n	800ab10 <_fflush_r+0x48>
 800aae4:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800aae6:	07d2      	lsls	r2, r2, #31
 800aae8:	d404      	bmi.n	800aaf4 <_fflush_r+0x2c>
 800aaea:	059b      	lsls	r3, r3, #22
 800aaec:	d402      	bmi.n	800aaf4 <_fflush_r+0x2c>
 800aaee:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800aaf0:	f7fd fdfe 	bl	80086f0 <__retarget_lock_acquire_recursive>
 800aaf4:	0021      	movs	r1, r4
 800aaf6:	0028      	movs	r0, r5
 800aaf8:	f7ff ff50 	bl	800a99c <__sflush_r>
 800aafc:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800aafe:	0006      	movs	r6, r0
 800ab00:	07db      	lsls	r3, r3, #31
 800ab02:	d405      	bmi.n	800ab10 <_fflush_r+0x48>
 800ab04:	89a3      	ldrh	r3, [r4, #12]
 800ab06:	059b      	lsls	r3, r3, #22
 800ab08:	d402      	bmi.n	800ab10 <_fflush_r+0x48>
 800ab0a:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800ab0c:	f7fd fdf1 	bl	80086f2 <__retarget_lock_release_recursive>
 800ab10:	0030      	movs	r0, r6
 800ab12:	bd70      	pop	{r4, r5, r6, pc}

0800ab14 <strncpy>:
 800ab14:	0003      	movs	r3, r0
 800ab16:	b530      	push	{r4, r5, lr}
 800ab18:	001d      	movs	r5, r3
 800ab1a:	2a00      	cmp	r2, #0
 800ab1c:	d006      	beq.n	800ab2c <strncpy+0x18>
 800ab1e:	780c      	ldrb	r4, [r1, #0]
 800ab20:	3a01      	subs	r2, #1
 800ab22:	3301      	adds	r3, #1
 800ab24:	702c      	strb	r4, [r5, #0]
 800ab26:	3101      	adds	r1, #1
 800ab28:	2c00      	cmp	r4, #0
 800ab2a:	d1f5      	bne.n	800ab18 <strncpy+0x4>
 800ab2c:	2100      	movs	r1, #0
 800ab2e:	189a      	adds	r2, r3, r2
 800ab30:	4293      	cmp	r3, r2
 800ab32:	d100      	bne.n	800ab36 <strncpy+0x22>
 800ab34:	bd30      	pop	{r4, r5, pc}
 800ab36:	7019      	strb	r1, [r3, #0]
 800ab38:	3301      	adds	r3, #1
 800ab3a:	e7f9      	b.n	800ab30 <strncpy+0x1c>

0800ab3c <_localeconv_r>:
 800ab3c:	4800      	ldr	r0, [pc, #0]	; (800ab40 <_localeconv_r+0x4>)
 800ab3e:	4770      	bx	lr
 800ab40:	2000010c 	.word	0x2000010c

0800ab44 <_sbrk_r>:
 800ab44:	2300      	movs	r3, #0
 800ab46:	b570      	push	{r4, r5, r6, lr}
 800ab48:	4d06      	ldr	r5, [pc, #24]	; (800ab64 <_sbrk_r+0x20>)
 800ab4a:	0004      	movs	r4, r0
 800ab4c:	0008      	movs	r0, r1
 800ab4e:	602b      	str	r3, [r5, #0]
 800ab50:	f7f8 faaa 	bl	80030a8 <_sbrk>
 800ab54:	1c43      	adds	r3, r0, #1
 800ab56:	d103      	bne.n	800ab60 <_sbrk_r+0x1c>
 800ab58:	682b      	ldr	r3, [r5, #0]
 800ab5a:	2b00      	cmp	r3, #0
 800ab5c:	d000      	beq.n	800ab60 <_sbrk_r+0x1c>
 800ab5e:	6023      	str	r3, [r4, #0]
 800ab60:	bd70      	pop	{r4, r5, r6, pc}
 800ab62:	46c0      	nop			; (mov r8, r8)
 800ab64:	200009dc 	.word	0x200009dc

0800ab68 <__libc_fini_array>:
 800ab68:	b570      	push	{r4, r5, r6, lr}
 800ab6a:	4c07      	ldr	r4, [pc, #28]	; (800ab88 <__libc_fini_array+0x20>)
 800ab6c:	4d07      	ldr	r5, [pc, #28]	; (800ab8c <__libc_fini_array+0x24>)
 800ab6e:	1b64      	subs	r4, r4, r5
 800ab70:	10a4      	asrs	r4, r4, #2
 800ab72:	2c00      	cmp	r4, #0
 800ab74:	d102      	bne.n	800ab7c <__libc_fini_array+0x14>
 800ab76:	f002 fa93 	bl	800d0a0 <_fini>
 800ab7a:	bd70      	pop	{r4, r5, r6, pc}
 800ab7c:	3c01      	subs	r4, #1
 800ab7e:	00a3      	lsls	r3, r4, #2
 800ab80:	58eb      	ldr	r3, [r5, r3]
 800ab82:	4798      	blx	r3
 800ab84:	e7f5      	b.n	800ab72 <__libc_fini_array+0xa>
 800ab86:	46c0      	nop			; (mov r8, r8)
 800ab88:	0800ee08 	.word	0x0800ee08
 800ab8c:	0800ee04 	.word	0x0800ee04

0800ab90 <sysconf>:
 800ab90:	2380      	movs	r3, #128	; 0x80
 800ab92:	b510      	push	{r4, lr}
 800ab94:	2808      	cmp	r0, #8
 800ab96:	d004      	beq.n	800aba2 <sysconf+0x12>
 800ab98:	f7fd fd7e 	bl	8008698 <__errno>
 800ab9c:	2316      	movs	r3, #22
 800ab9e:	6003      	str	r3, [r0, #0]
 800aba0:	3b17      	subs	r3, #23
 800aba2:	0018      	movs	r0, r3
 800aba4:	bd10      	pop	{r4, pc}

0800aba6 <memchr>:
 800aba6:	b2c9      	uxtb	r1, r1
 800aba8:	1882      	adds	r2, r0, r2
 800abaa:	4290      	cmp	r0, r2
 800abac:	d101      	bne.n	800abb2 <memchr+0xc>
 800abae:	2000      	movs	r0, #0
 800abb0:	4770      	bx	lr
 800abb2:	7803      	ldrb	r3, [r0, #0]
 800abb4:	428b      	cmp	r3, r1
 800abb6:	d0fb      	beq.n	800abb0 <memchr+0xa>
 800abb8:	3001      	adds	r0, #1
 800abba:	e7f6      	b.n	800abaa <memchr+0x4>

0800abbc <frexp>:
 800abbc:	b570      	push	{r4, r5, r6, lr}
 800abbe:	0014      	movs	r4, r2
 800abc0:	2500      	movs	r5, #0
 800abc2:	6025      	str	r5, [r4, #0]
 800abc4:	4d10      	ldr	r5, [pc, #64]	; (800ac08 <frexp+0x4c>)
 800abc6:	004b      	lsls	r3, r1, #1
 800abc8:	000a      	movs	r2, r1
 800abca:	085b      	lsrs	r3, r3, #1
 800abcc:	42ab      	cmp	r3, r5
 800abce:	dc1a      	bgt.n	800ac06 <frexp+0x4a>
 800abd0:	001d      	movs	r5, r3
 800abd2:	4305      	orrs	r5, r0
 800abd4:	d017      	beq.n	800ac06 <frexp+0x4a>
 800abd6:	4d0d      	ldr	r5, [pc, #52]	; (800ac0c <frexp+0x50>)
 800abd8:	4229      	tst	r1, r5
 800abda:	d109      	bne.n	800abf0 <frexp+0x34>
 800abdc:	2200      	movs	r2, #0
 800abde:	4b0c      	ldr	r3, [pc, #48]	; (800ac10 <frexp+0x54>)
 800abe0:	f7f6 fca6 	bl	8001530 <__aeabi_dmul>
 800abe4:	2536      	movs	r5, #54	; 0x36
 800abe6:	000a      	movs	r2, r1
 800abe8:	004b      	lsls	r3, r1, #1
 800abea:	426d      	negs	r5, r5
 800abec:	085b      	lsrs	r3, r3, #1
 800abee:	6025      	str	r5, [r4, #0]
 800abf0:	4d08      	ldr	r5, [pc, #32]	; (800ac14 <frexp+0x58>)
 800abf2:	151b      	asrs	r3, r3, #20
 800abf4:	195b      	adds	r3, r3, r5
 800abf6:	6825      	ldr	r5, [r4, #0]
 800abf8:	18eb      	adds	r3, r5, r3
 800abfa:	6023      	str	r3, [r4, #0]
 800abfc:	4b06      	ldr	r3, [pc, #24]	; (800ac18 <frexp+0x5c>)
 800abfe:	401a      	ands	r2, r3
 800ac00:	4b06      	ldr	r3, [pc, #24]	; (800ac1c <frexp+0x60>)
 800ac02:	4313      	orrs	r3, r2
 800ac04:	0019      	movs	r1, r3
 800ac06:	bd70      	pop	{r4, r5, r6, pc}
 800ac08:	7fefffff 	.word	0x7fefffff
 800ac0c:	7ff00000 	.word	0x7ff00000
 800ac10:	43500000 	.word	0x43500000
 800ac14:	fffffc02 	.word	0xfffffc02
 800ac18:	800fffff 	.word	0x800fffff
 800ac1c:	3fe00000 	.word	0x3fe00000

0800ac20 <__register_exitproc>:
 800ac20:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800ac22:	4f1c      	ldr	r7, [pc, #112]	; (800ac94 <__register_exitproc+0x74>)
 800ac24:	0004      	movs	r4, r0
 800ac26:	6838      	ldr	r0, [r7, #0]
 800ac28:	0016      	movs	r6, r2
 800ac2a:	9301      	str	r3, [sp, #4]
 800ac2c:	9100      	str	r1, [sp, #0]
 800ac2e:	f7fd fd5f 	bl	80086f0 <__retarget_lock_acquire_recursive>
 800ac32:	4a19      	ldr	r2, [pc, #100]	; (800ac98 <__register_exitproc+0x78>)
 800ac34:	6813      	ldr	r3, [r2, #0]
 800ac36:	2b00      	cmp	r3, #0
 800ac38:	d101      	bne.n	800ac3e <__register_exitproc+0x1e>
 800ac3a:	4b18      	ldr	r3, [pc, #96]	; (800ac9c <__register_exitproc+0x7c>)
 800ac3c:	6013      	str	r3, [r2, #0]
 800ac3e:	685a      	ldr	r2, [r3, #4]
 800ac40:	6838      	ldr	r0, [r7, #0]
 800ac42:	2a1f      	cmp	r2, #31
 800ac44:	dd04      	ble.n	800ac50 <__register_exitproc+0x30>
 800ac46:	f7fd fd54 	bl	80086f2 <__retarget_lock_release_recursive>
 800ac4a:	2001      	movs	r0, #1
 800ac4c:	4240      	negs	r0, r0
 800ac4e:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 800ac50:	2c00      	cmp	r4, #0
 800ac52:	d014      	beq.n	800ac7e <__register_exitproc+0x5e>
 800ac54:	0091      	lsls	r1, r2, #2
 800ac56:	1859      	adds	r1, r3, r1
 800ac58:	000f      	movs	r7, r1
 800ac5a:	3788      	adds	r7, #136	; 0x88
 800ac5c:	603e      	str	r6, [r7, #0]
 800ac5e:	2701      	movs	r7, #1
 800ac60:	001e      	movs	r6, r3
 800ac62:	4097      	lsls	r7, r2
 800ac64:	3685      	adds	r6, #133	; 0x85
 800ac66:	36ff      	adds	r6, #255	; 0xff
 800ac68:	6875      	ldr	r5, [r6, #4]
 800ac6a:	31fc      	adds	r1, #252	; 0xfc
 800ac6c:	433d      	orrs	r5, r7
 800ac6e:	6075      	str	r5, [r6, #4]
 800ac70:	9d01      	ldr	r5, [sp, #4]
 800ac72:	60cd      	str	r5, [r1, #12]
 800ac74:	2c02      	cmp	r4, #2
 800ac76:	d102      	bne.n	800ac7e <__register_exitproc+0x5e>
 800ac78:	68b1      	ldr	r1, [r6, #8]
 800ac7a:	4339      	orrs	r1, r7
 800ac7c:	60b1      	str	r1, [r6, #8]
 800ac7e:	1c51      	adds	r1, r2, #1
 800ac80:	6059      	str	r1, [r3, #4]
 800ac82:	3202      	adds	r2, #2
 800ac84:	9900      	ldr	r1, [sp, #0]
 800ac86:	0092      	lsls	r2, r2, #2
 800ac88:	50d1      	str	r1, [r2, r3]
 800ac8a:	f7fd fd32 	bl	80086f2 <__retarget_lock_release_recursive>
 800ac8e:	2000      	movs	r0, #0
 800ac90:	e7dd      	b.n	800ac4e <__register_exitproc+0x2e>
 800ac92:	46c0      	nop			; (mov r8, r8)
 800ac94:	200002ac 	.word	0x200002ac
 800ac98:	200009e4 	.word	0x200009e4
 800ac9c:	20000a1c 	.word	0x20000a1c

0800aca0 <__assert_func>:
 800aca0:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
 800aca2:	0014      	movs	r4, r2
 800aca4:	001a      	movs	r2, r3
 800aca6:	4b09      	ldr	r3, [pc, #36]	; (800accc <__assert_func+0x2c>)
 800aca8:	0005      	movs	r5, r0
 800acaa:	681b      	ldr	r3, [r3, #0]
 800acac:	000e      	movs	r6, r1
 800acae:	68d8      	ldr	r0, [r3, #12]
 800acb0:	4b07      	ldr	r3, [pc, #28]	; (800acd0 <__assert_func+0x30>)
 800acb2:	2c00      	cmp	r4, #0
 800acb4:	d101      	bne.n	800acba <__assert_func+0x1a>
 800acb6:	4b07      	ldr	r3, [pc, #28]	; (800acd4 <__assert_func+0x34>)
 800acb8:	001c      	movs	r4, r3
 800acba:	4907      	ldr	r1, [pc, #28]	; (800acd8 <__assert_func+0x38>)
 800acbc:	9301      	str	r3, [sp, #4]
 800acbe:	9402      	str	r4, [sp, #8]
 800acc0:	002b      	movs	r3, r5
 800acc2:	9600      	str	r6, [sp, #0]
 800acc4:	f000 fedc 	bl	800ba80 <fiprintf>
 800acc8:	f001 fef0 	bl	800caac <abort>
 800accc:	200002a8 	.word	0x200002a8
 800acd0:	0800ed30 	.word	0x0800ed30
 800acd4:	0800ed6b 	.word	0x0800ed6b
 800acd8:	0800ed3d 	.word	0x0800ed3d

0800acdc <_calloc_r>:
 800acdc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800acde:	2400      	movs	r4, #0
 800ace0:	0c0b      	lsrs	r3, r1, #16
 800ace2:	0c16      	lsrs	r6, r2, #16
 800ace4:	42a3      	cmp	r3, r4
 800ace6:	d133      	bne.n	800ad50 <_calloc_r+0x74>
 800ace8:	42a6      	cmp	r6, r4
 800acea:	d121      	bne.n	800ad30 <_calloc_r+0x54>
 800acec:	b28b      	uxth	r3, r1
 800acee:	b291      	uxth	r1, r2
 800acf0:	4359      	muls	r1, r3
 800acf2:	f7fd fe23 	bl	800893c <_malloc_r>
 800acf6:	1e05      	subs	r5, r0, #0
 800acf8:	d033      	beq.n	800ad62 <_calloc_r+0x86>
 800acfa:	0003      	movs	r3, r0
 800acfc:	3b08      	subs	r3, #8
 800acfe:	685a      	ldr	r2, [r3, #4]
 800ad00:	2303      	movs	r3, #3
 800ad02:	439a      	bics	r2, r3
 800ad04:	3a04      	subs	r2, #4
 800ad06:	2a24      	cmp	r2, #36	; 0x24
 800ad08:	d832      	bhi.n	800ad70 <_calloc_r+0x94>
 800ad0a:	0003      	movs	r3, r0
 800ad0c:	2a13      	cmp	r2, #19
 800ad0e:	d90a      	bls.n	800ad26 <_calloc_r+0x4a>
 800ad10:	6004      	str	r4, [r0, #0]
 800ad12:	6044      	str	r4, [r0, #4]
 800ad14:	3308      	adds	r3, #8
 800ad16:	2a1b      	cmp	r2, #27
 800ad18:	d905      	bls.n	800ad26 <_calloc_r+0x4a>
 800ad1a:	6084      	str	r4, [r0, #8]
 800ad1c:	60c4      	str	r4, [r0, #12]
 800ad1e:	2a24      	cmp	r2, #36	; 0x24
 800ad20:	d021      	beq.n	800ad66 <_calloc_r+0x8a>
 800ad22:	0003      	movs	r3, r0
 800ad24:	3310      	adds	r3, #16
 800ad26:	2200      	movs	r2, #0
 800ad28:	601a      	str	r2, [r3, #0]
 800ad2a:	605a      	str	r2, [r3, #4]
 800ad2c:	609a      	str	r2, [r3, #8]
 800ad2e:	e018      	b.n	800ad62 <_calloc_r+0x86>
 800ad30:	1c33      	adds	r3, r6, #0
 800ad32:	1c0d      	adds	r5, r1, #0
 800ad34:	b289      	uxth	r1, r1
 800ad36:	b292      	uxth	r2, r2
 800ad38:	434a      	muls	r2, r1
 800ad3a:	b2ad      	uxth	r5, r5
 800ad3c:	b299      	uxth	r1, r3
 800ad3e:	4369      	muls	r1, r5
 800ad40:	0c13      	lsrs	r3, r2, #16
 800ad42:	18c9      	adds	r1, r1, r3
 800ad44:	0c0b      	lsrs	r3, r1, #16
 800ad46:	d107      	bne.n	800ad58 <_calloc_r+0x7c>
 800ad48:	0409      	lsls	r1, r1, #16
 800ad4a:	b292      	uxth	r2, r2
 800ad4c:	4311      	orrs	r1, r2
 800ad4e:	e7d0      	b.n	800acf2 <_calloc_r+0x16>
 800ad50:	2e00      	cmp	r6, #0
 800ad52:	d101      	bne.n	800ad58 <_calloc_r+0x7c>
 800ad54:	1c15      	adds	r5, r2, #0
 800ad56:	e7ed      	b.n	800ad34 <_calloc_r+0x58>
 800ad58:	f7fd fc9e 	bl	8008698 <__errno>
 800ad5c:	230c      	movs	r3, #12
 800ad5e:	2500      	movs	r5, #0
 800ad60:	6003      	str	r3, [r0, #0]
 800ad62:	0028      	movs	r0, r5
 800ad64:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800ad66:	0003      	movs	r3, r0
 800ad68:	6104      	str	r4, [r0, #16]
 800ad6a:	3318      	adds	r3, #24
 800ad6c:	6144      	str	r4, [r0, #20]
 800ad6e:	e7da      	b.n	800ad26 <_calloc_r+0x4a>
 800ad70:	2100      	movs	r1, #0
 800ad72:	f7fd fc33 	bl	80085dc <memset>
 800ad76:	e7f4      	b.n	800ad62 <_calloc_r+0x86>

0800ad78 <quorem>:
 800ad78:	b5f0      	push	{r4, r5, r6, r7, lr}
 800ad7a:	6902      	ldr	r2, [r0, #16]
 800ad7c:	690b      	ldr	r3, [r1, #16]
 800ad7e:	b089      	sub	sp, #36	; 0x24
 800ad80:	0007      	movs	r7, r0
 800ad82:	9104      	str	r1, [sp, #16]
 800ad84:	2000      	movs	r0, #0
 800ad86:	429a      	cmp	r2, r3
 800ad88:	db69      	blt.n	800ae5e <quorem+0xe6>
 800ad8a:	3b01      	subs	r3, #1
 800ad8c:	009c      	lsls	r4, r3, #2
 800ad8e:	9301      	str	r3, [sp, #4]
 800ad90:	000b      	movs	r3, r1
 800ad92:	3314      	adds	r3, #20
 800ad94:	9306      	str	r3, [sp, #24]
 800ad96:	191b      	adds	r3, r3, r4
 800ad98:	9305      	str	r3, [sp, #20]
 800ad9a:	003b      	movs	r3, r7
 800ad9c:	3314      	adds	r3, #20
 800ad9e:	9303      	str	r3, [sp, #12]
 800ada0:	191c      	adds	r4, r3, r4
 800ada2:	9b05      	ldr	r3, [sp, #20]
 800ada4:	6826      	ldr	r6, [r4, #0]
 800ada6:	681d      	ldr	r5, [r3, #0]
 800ada8:	0030      	movs	r0, r6
 800adaa:	3501      	adds	r5, #1
 800adac:	0029      	movs	r1, r5
 800adae:	f7f5 f9c5 	bl	800013c <__udivsi3>
 800adb2:	9002      	str	r0, [sp, #8]
 800adb4:	42ae      	cmp	r6, r5
 800adb6:	d329      	bcc.n	800ae0c <quorem+0x94>
 800adb8:	9b06      	ldr	r3, [sp, #24]
 800adba:	2600      	movs	r6, #0
 800adbc:	469c      	mov	ip, r3
 800adbe:	9d03      	ldr	r5, [sp, #12]
 800adc0:	9606      	str	r6, [sp, #24]
 800adc2:	4662      	mov	r2, ip
 800adc4:	ca08      	ldmia	r2!, {r3}
 800adc6:	6828      	ldr	r0, [r5, #0]
 800adc8:	4694      	mov	ip, r2
 800adca:	9a02      	ldr	r2, [sp, #8]
 800adcc:	b299      	uxth	r1, r3
 800adce:	4351      	muls	r1, r2
 800add0:	0c1b      	lsrs	r3, r3, #16
 800add2:	4353      	muls	r3, r2
 800add4:	1989      	adds	r1, r1, r6
 800add6:	0c0a      	lsrs	r2, r1, #16
 800add8:	189b      	adds	r3, r3, r2
 800adda:	9307      	str	r3, [sp, #28]
 800addc:	0c1e      	lsrs	r6, r3, #16
 800adde:	9b06      	ldr	r3, [sp, #24]
 800ade0:	b282      	uxth	r2, r0
 800ade2:	18d2      	adds	r2, r2, r3
 800ade4:	466b      	mov	r3, sp
 800ade6:	b289      	uxth	r1, r1
 800ade8:	8b9b      	ldrh	r3, [r3, #28]
 800adea:	1a52      	subs	r2, r2, r1
 800adec:	0c01      	lsrs	r1, r0, #16
 800adee:	1ac9      	subs	r1, r1, r3
 800adf0:	1413      	asrs	r3, r2, #16
 800adf2:	18cb      	adds	r3, r1, r3
 800adf4:	1419      	asrs	r1, r3, #16
 800adf6:	b292      	uxth	r2, r2
 800adf8:	041b      	lsls	r3, r3, #16
 800adfa:	4313      	orrs	r3, r2
 800adfc:	c508      	stmia	r5!, {r3}
 800adfe:	9b05      	ldr	r3, [sp, #20]
 800ae00:	9106      	str	r1, [sp, #24]
 800ae02:	4563      	cmp	r3, ip
 800ae04:	d2dd      	bcs.n	800adc2 <quorem+0x4a>
 800ae06:	6823      	ldr	r3, [r4, #0]
 800ae08:	2b00      	cmp	r3, #0
 800ae0a:	d030      	beq.n	800ae6e <quorem+0xf6>
 800ae0c:	0038      	movs	r0, r7
 800ae0e:	9904      	ldr	r1, [sp, #16]
 800ae10:	f7fe fa00 	bl	8009214 <__mcmp>
 800ae14:	2800      	cmp	r0, #0
 800ae16:	db21      	blt.n	800ae5c <quorem+0xe4>
 800ae18:	0038      	movs	r0, r7
 800ae1a:	2600      	movs	r6, #0
 800ae1c:	9b02      	ldr	r3, [sp, #8]
 800ae1e:	9c04      	ldr	r4, [sp, #16]
 800ae20:	3301      	adds	r3, #1
 800ae22:	9302      	str	r3, [sp, #8]
 800ae24:	3014      	adds	r0, #20
 800ae26:	3414      	adds	r4, #20
 800ae28:	6803      	ldr	r3, [r0, #0]
 800ae2a:	cc02      	ldmia	r4!, {r1}
 800ae2c:	b29d      	uxth	r5, r3
 800ae2e:	19ad      	adds	r5, r5, r6
 800ae30:	b28a      	uxth	r2, r1
 800ae32:	1aaa      	subs	r2, r5, r2
 800ae34:	0c09      	lsrs	r1, r1, #16
 800ae36:	0c1b      	lsrs	r3, r3, #16
 800ae38:	1a5b      	subs	r3, r3, r1
 800ae3a:	1411      	asrs	r1, r2, #16
 800ae3c:	185b      	adds	r3, r3, r1
 800ae3e:	141e      	asrs	r6, r3, #16
 800ae40:	b292      	uxth	r2, r2
 800ae42:	041b      	lsls	r3, r3, #16
 800ae44:	4313      	orrs	r3, r2
 800ae46:	c008      	stmia	r0!, {r3}
 800ae48:	9b05      	ldr	r3, [sp, #20]
 800ae4a:	42a3      	cmp	r3, r4
 800ae4c:	d2ec      	bcs.n	800ae28 <quorem+0xb0>
 800ae4e:	9b01      	ldr	r3, [sp, #4]
 800ae50:	9a03      	ldr	r2, [sp, #12]
 800ae52:	009b      	lsls	r3, r3, #2
 800ae54:	18d3      	adds	r3, r2, r3
 800ae56:	681a      	ldr	r2, [r3, #0]
 800ae58:	2a00      	cmp	r2, #0
 800ae5a:	d015      	beq.n	800ae88 <quorem+0x110>
 800ae5c:	9802      	ldr	r0, [sp, #8]
 800ae5e:	b009      	add	sp, #36	; 0x24
 800ae60:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800ae62:	6823      	ldr	r3, [r4, #0]
 800ae64:	2b00      	cmp	r3, #0
 800ae66:	d106      	bne.n	800ae76 <quorem+0xfe>
 800ae68:	9b01      	ldr	r3, [sp, #4]
 800ae6a:	3b01      	subs	r3, #1
 800ae6c:	9301      	str	r3, [sp, #4]
 800ae6e:	9b03      	ldr	r3, [sp, #12]
 800ae70:	3c04      	subs	r4, #4
 800ae72:	42a3      	cmp	r3, r4
 800ae74:	d3f5      	bcc.n	800ae62 <quorem+0xea>
 800ae76:	9b01      	ldr	r3, [sp, #4]
 800ae78:	613b      	str	r3, [r7, #16]
 800ae7a:	e7c7      	b.n	800ae0c <quorem+0x94>
 800ae7c:	681a      	ldr	r2, [r3, #0]
 800ae7e:	2a00      	cmp	r2, #0
 800ae80:	d106      	bne.n	800ae90 <quorem+0x118>
 800ae82:	9a01      	ldr	r2, [sp, #4]
 800ae84:	3a01      	subs	r2, #1
 800ae86:	9201      	str	r2, [sp, #4]
 800ae88:	9a03      	ldr	r2, [sp, #12]
 800ae8a:	3b04      	subs	r3, #4
 800ae8c:	429a      	cmp	r2, r3
 800ae8e:	d3f5      	bcc.n	800ae7c <quorem+0x104>
 800ae90:	9b01      	ldr	r3, [sp, #4]
 800ae92:	613b      	str	r3, [r7, #16]
 800ae94:	e7e2      	b.n	800ae5c <quorem+0xe4>
	...

0800ae98 <_dtoa_r>:
 800ae98:	b5f0      	push	{r4, r5, r6, r7, lr}
 800ae9a:	0014      	movs	r4, r2
 800ae9c:	001d      	movs	r5, r3
 800ae9e:	6b81      	ldr	r1, [r0, #56]	; 0x38
 800aea0:	b09d      	sub	sp, #116	; 0x74
 800aea2:	9408      	str	r4, [sp, #32]
 800aea4:	9509      	str	r5, [sp, #36]	; 0x24
 800aea6:	9e25      	ldr	r6, [sp, #148]	; 0x94
 800aea8:	9004      	str	r0, [sp, #16]
 800aeaa:	2900      	cmp	r1, #0
 800aeac:	d009      	beq.n	800aec2 <_dtoa_r+0x2a>
 800aeae:	2301      	movs	r3, #1
 800aeb0:	6bc2      	ldr	r2, [r0, #60]	; 0x3c
 800aeb2:	4093      	lsls	r3, r2
 800aeb4:	604a      	str	r2, [r1, #4]
 800aeb6:	608b      	str	r3, [r1, #8]
 800aeb8:	f7fd ff9e 	bl	8008df8 <_Bfree>
 800aebc:	2300      	movs	r3, #0
 800aebe:	9a04      	ldr	r2, [sp, #16]
 800aec0:	6393      	str	r3, [r2, #56]	; 0x38
 800aec2:	2d00      	cmp	r5, #0
 800aec4:	da1e      	bge.n	800af04 <_dtoa_r+0x6c>
 800aec6:	2301      	movs	r3, #1
 800aec8:	6033      	str	r3, [r6, #0]
 800aeca:	006b      	lsls	r3, r5, #1
 800aecc:	085b      	lsrs	r3, r3, #1
 800aece:	9309      	str	r3, [sp, #36]	; 0x24
 800aed0:	9f09      	ldr	r7, [sp, #36]	; 0x24
 800aed2:	4bb5      	ldr	r3, [pc, #724]	; (800b1a8 <_dtoa_r+0x310>)
 800aed4:	4ab4      	ldr	r2, [pc, #720]	; (800b1a8 <_dtoa_r+0x310>)
 800aed6:	403b      	ands	r3, r7
 800aed8:	4293      	cmp	r3, r2
 800aeda:	d116      	bne.n	800af0a <_dtoa_r+0x72>
 800aedc:	4bb3      	ldr	r3, [pc, #716]	; (800b1ac <_dtoa_r+0x314>)
 800aede:	9a24      	ldr	r2, [sp, #144]	; 0x90
 800aee0:	6013      	str	r3, [r2, #0]
 800aee2:	033b      	lsls	r3, r7, #12
 800aee4:	0b1b      	lsrs	r3, r3, #12
 800aee6:	4323      	orrs	r3, r4
 800aee8:	d101      	bne.n	800aeee <_dtoa_r+0x56>
 800aeea:	f000 fdb2 	bl	800ba52 <_dtoa_r+0xbba>
 800aeee:	4bb0      	ldr	r3, [pc, #704]	; (800b1b0 <_dtoa_r+0x318>)
 800aef0:	9a26      	ldr	r2, [sp, #152]	; 0x98
 800aef2:	9306      	str	r3, [sp, #24]
 800aef4:	2a00      	cmp	r2, #0
 800aef6:	d002      	beq.n	800aefe <_dtoa_r+0x66>
 800aef8:	4bae      	ldr	r3, [pc, #696]	; (800b1b4 <_dtoa_r+0x31c>)
 800aefa:	9a26      	ldr	r2, [sp, #152]	; 0x98
 800aefc:	6013      	str	r3, [r2, #0]
 800aefe:	9806      	ldr	r0, [sp, #24]
 800af00:	b01d      	add	sp, #116	; 0x74
 800af02:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800af04:	2300      	movs	r3, #0
 800af06:	6033      	str	r3, [r6, #0]
 800af08:	e7e2      	b.n	800aed0 <_dtoa_r+0x38>
 800af0a:	9a08      	ldr	r2, [sp, #32]
 800af0c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800af0e:	9210      	str	r2, [sp, #64]	; 0x40
 800af10:	9311      	str	r3, [sp, #68]	; 0x44
 800af12:	9810      	ldr	r0, [sp, #64]	; 0x40
 800af14:	9911      	ldr	r1, [sp, #68]	; 0x44
 800af16:	2200      	movs	r2, #0
 800af18:	2300      	movs	r3, #0
 800af1a:	f7f5 fa95 	bl	8000448 <__aeabi_dcmpeq>
 800af1e:	1e06      	subs	r6, r0, #0
 800af20:	d009      	beq.n	800af36 <_dtoa_r+0x9e>
 800af22:	2301      	movs	r3, #1
 800af24:	9a24      	ldr	r2, [sp, #144]	; 0x90
 800af26:	6013      	str	r3, [r2, #0]
 800af28:	4ba3      	ldr	r3, [pc, #652]	; (800b1b8 <_dtoa_r+0x320>)
 800af2a:	9306      	str	r3, [sp, #24]
 800af2c:	9b26      	ldr	r3, [sp, #152]	; 0x98
 800af2e:	2b00      	cmp	r3, #0
 800af30:	d0e5      	beq.n	800aefe <_dtoa_r+0x66>
 800af32:	4ba2      	ldr	r3, [pc, #648]	; (800b1bc <_dtoa_r+0x324>)
 800af34:	e7e1      	b.n	800aefa <_dtoa_r+0x62>
 800af36:	ab1a      	add	r3, sp, #104	; 0x68
 800af38:	9301      	str	r3, [sp, #4]
 800af3a:	ab1b      	add	r3, sp, #108	; 0x6c
 800af3c:	9300      	str	r3, [sp, #0]
 800af3e:	9804      	ldr	r0, [sp, #16]
 800af40:	9a10      	ldr	r2, [sp, #64]	; 0x40
 800af42:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800af44:	f7fe fa1a 	bl	800937c <__d2b>
 800af48:	007a      	lsls	r2, r7, #1
 800af4a:	9005      	str	r0, [sp, #20]
 800af4c:	0d52      	lsrs	r2, r2, #21
 800af4e:	d100      	bne.n	800af52 <_dtoa_r+0xba>
 800af50:	e07b      	b.n	800b04a <_dtoa_r+0x1b2>
 800af52:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800af54:	9617      	str	r6, [sp, #92]	; 0x5c
 800af56:	0319      	lsls	r1, r3, #12
 800af58:	4b99      	ldr	r3, [pc, #612]	; (800b1c0 <_dtoa_r+0x328>)
 800af5a:	0b09      	lsrs	r1, r1, #12
 800af5c:	430b      	orrs	r3, r1
 800af5e:	4999      	ldr	r1, [pc, #612]	; (800b1c4 <_dtoa_r+0x32c>)
 800af60:	1857      	adds	r7, r2, r1
 800af62:	9810      	ldr	r0, [sp, #64]	; 0x40
 800af64:	9911      	ldr	r1, [sp, #68]	; 0x44
 800af66:	0019      	movs	r1, r3
 800af68:	2200      	movs	r2, #0
 800af6a:	4b97      	ldr	r3, [pc, #604]	; (800b1c8 <_dtoa_r+0x330>)
 800af6c:	f7f6 fda2 	bl	8001ab4 <__aeabi_dsub>
 800af70:	4a96      	ldr	r2, [pc, #600]	; (800b1cc <_dtoa_r+0x334>)
 800af72:	4b97      	ldr	r3, [pc, #604]	; (800b1d0 <_dtoa_r+0x338>)
 800af74:	f7f6 fadc 	bl	8001530 <__aeabi_dmul>
 800af78:	4a96      	ldr	r2, [pc, #600]	; (800b1d4 <_dtoa_r+0x33c>)
 800af7a:	4b97      	ldr	r3, [pc, #604]	; (800b1d8 <_dtoa_r+0x340>)
 800af7c:	f7f5 fb7e 	bl	800067c <__aeabi_dadd>
 800af80:	0004      	movs	r4, r0
 800af82:	0038      	movs	r0, r7
 800af84:	000d      	movs	r5, r1
 800af86:	f7f7 f96b 	bl	8002260 <__aeabi_i2d>
 800af8a:	4a94      	ldr	r2, [pc, #592]	; (800b1dc <_dtoa_r+0x344>)
 800af8c:	4b94      	ldr	r3, [pc, #592]	; (800b1e0 <_dtoa_r+0x348>)
 800af8e:	f7f6 facf 	bl	8001530 <__aeabi_dmul>
 800af92:	0002      	movs	r2, r0
 800af94:	000b      	movs	r3, r1
 800af96:	0020      	movs	r0, r4
 800af98:	0029      	movs	r1, r5
 800af9a:	f7f5 fb6f 	bl	800067c <__aeabi_dadd>
 800af9e:	0004      	movs	r4, r0
 800afa0:	000d      	movs	r5, r1
 800afa2:	f7f7 f927 	bl	80021f4 <__aeabi_d2iz>
 800afa6:	2200      	movs	r2, #0
 800afa8:	9003      	str	r0, [sp, #12]
 800afaa:	2300      	movs	r3, #0
 800afac:	0020      	movs	r0, r4
 800afae:	0029      	movs	r1, r5
 800afb0:	f7f5 fa50 	bl	8000454 <__aeabi_dcmplt>
 800afb4:	2800      	cmp	r0, #0
 800afb6:	d00b      	beq.n	800afd0 <_dtoa_r+0x138>
 800afb8:	9803      	ldr	r0, [sp, #12]
 800afba:	f7f7 f951 	bl	8002260 <__aeabi_i2d>
 800afbe:	002b      	movs	r3, r5
 800afc0:	0022      	movs	r2, r4
 800afc2:	f7f5 fa41 	bl	8000448 <__aeabi_dcmpeq>
 800afc6:	4243      	negs	r3, r0
 800afc8:	4158      	adcs	r0, r3
 800afca:	9b03      	ldr	r3, [sp, #12]
 800afcc:	1a1b      	subs	r3, r3, r0
 800afce:	9303      	str	r3, [sp, #12]
 800afd0:	2301      	movs	r3, #1
 800afd2:	9316      	str	r3, [sp, #88]	; 0x58
 800afd4:	9b03      	ldr	r3, [sp, #12]
 800afd6:	2b16      	cmp	r3, #22
 800afd8:	d810      	bhi.n	800affc <_dtoa_r+0x164>
 800afda:	9810      	ldr	r0, [sp, #64]	; 0x40
 800afdc:	9911      	ldr	r1, [sp, #68]	; 0x44
 800afde:	9a03      	ldr	r2, [sp, #12]
 800afe0:	4b80      	ldr	r3, [pc, #512]	; (800b1e4 <_dtoa_r+0x34c>)
 800afe2:	00d2      	lsls	r2, r2, #3
 800afe4:	189b      	adds	r3, r3, r2
 800afe6:	681a      	ldr	r2, [r3, #0]
 800afe8:	685b      	ldr	r3, [r3, #4]
 800afea:	f7f5 fa33 	bl	8000454 <__aeabi_dcmplt>
 800afee:	2800      	cmp	r0, #0
 800aff0:	d047      	beq.n	800b082 <_dtoa_r+0x1ea>
 800aff2:	9b03      	ldr	r3, [sp, #12]
 800aff4:	3b01      	subs	r3, #1
 800aff6:	9303      	str	r3, [sp, #12]
 800aff8:	2300      	movs	r3, #0
 800affa:	9316      	str	r3, [sp, #88]	; 0x58
 800affc:	2200      	movs	r2, #0
 800affe:	9b1a      	ldr	r3, [sp, #104]	; 0x68
 800b000:	920a      	str	r2, [sp, #40]	; 0x28
 800b002:	1bdb      	subs	r3, r3, r7
 800b004:	1e5a      	subs	r2, r3, #1
 800b006:	d53e      	bpl.n	800b086 <_dtoa_r+0x1ee>
 800b008:	2201      	movs	r2, #1
 800b00a:	1ad3      	subs	r3, r2, r3
 800b00c:	930a      	str	r3, [sp, #40]	; 0x28
 800b00e:	2300      	movs	r3, #0
 800b010:	930c      	str	r3, [sp, #48]	; 0x30
 800b012:	9b03      	ldr	r3, [sp, #12]
 800b014:	2b00      	cmp	r3, #0
 800b016:	db38      	blt.n	800b08a <_dtoa_r+0x1f2>
 800b018:	9a03      	ldr	r2, [sp, #12]
 800b01a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800b01c:	4694      	mov	ip, r2
 800b01e:	4463      	add	r3, ip
 800b020:	930c      	str	r3, [sp, #48]	; 0x30
 800b022:	2300      	movs	r3, #0
 800b024:	9213      	str	r2, [sp, #76]	; 0x4c
 800b026:	930d      	str	r3, [sp, #52]	; 0x34
 800b028:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800b02a:	2401      	movs	r4, #1
 800b02c:	2b09      	cmp	r3, #9
 800b02e:	d867      	bhi.n	800b100 <_dtoa_r+0x268>
 800b030:	2b05      	cmp	r3, #5
 800b032:	dd02      	ble.n	800b03a <_dtoa_r+0x1a2>
 800b034:	2400      	movs	r4, #0
 800b036:	3b04      	subs	r3, #4
 800b038:	9322      	str	r3, [sp, #136]	; 0x88
 800b03a:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800b03c:	1e98      	subs	r0, r3, #2
 800b03e:	2803      	cmp	r0, #3
 800b040:	d867      	bhi.n	800b112 <_dtoa_r+0x27a>
 800b042:	f7f5 f867 	bl	8000114 <__gnu_thumb1_case_uqi>
 800b046:	3a2b      	.short	0x3a2b
 800b048:	5b38      	.short	0x5b38
 800b04a:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800b04c:	9e1a      	ldr	r6, [sp, #104]	; 0x68
 800b04e:	18f6      	adds	r6, r6, r3
 800b050:	4b65      	ldr	r3, [pc, #404]	; (800b1e8 <_dtoa_r+0x350>)
 800b052:	18f2      	adds	r2, r6, r3
 800b054:	2a20      	cmp	r2, #32
 800b056:	dd0f      	ble.n	800b078 <_dtoa_r+0x1e0>
 800b058:	2340      	movs	r3, #64	; 0x40
 800b05a:	1a9b      	subs	r3, r3, r2
 800b05c:	409f      	lsls	r7, r3
 800b05e:	4b63      	ldr	r3, [pc, #396]	; (800b1ec <_dtoa_r+0x354>)
 800b060:	0038      	movs	r0, r7
 800b062:	18f3      	adds	r3, r6, r3
 800b064:	40dc      	lsrs	r4, r3
 800b066:	4320      	orrs	r0, r4
 800b068:	f7f7 f92a 	bl	80022c0 <__aeabi_ui2d>
 800b06c:	2201      	movs	r2, #1
 800b06e:	4b60      	ldr	r3, [pc, #384]	; (800b1f0 <_dtoa_r+0x358>)
 800b070:	1e77      	subs	r7, r6, #1
 800b072:	18cb      	adds	r3, r1, r3
 800b074:	9217      	str	r2, [sp, #92]	; 0x5c
 800b076:	e776      	b.n	800af66 <_dtoa_r+0xce>
 800b078:	2320      	movs	r3, #32
 800b07a:	0020      	movs	r0, r4
 800b07c:	1a9b      	subs	r3, r3, r2
 800b07e:	4098      	lsls	r0, r3
 800b080:	e7f2      	b.n	800b068 <_dtoa_r+0x1d0>
 800b082:	9016      	str	r0, [sp, #88]	; 0x58
 800b084:	e7ba      	b.n	800affc <_dtoa_r+0x164>
 800b086:	920c      	str	r2, [sp, #48]	; 0x30
 800b088:	e7c3      	b.n	800b012 <_dtoa_r+0x17a>
 800b08a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800b08c:	9a03      	ldr	r2, [sp, #12]
 800b08e:	1a9b      	subs	r3, r3, r2
 800b090:	930a      	str	r3, [sp, #40]	; 0x28
 800b092:	4253      	negs	r3, r2
 800b094:	930d      	str	r3, [sp, #52]	; 0x34
 800b096:	2300      	movs	r3, #0
 800b098:	9313      	str	r3, [sp, #76]	; 0x4c
 800b09a:	e7c5      	b.n	800b028 <_dtoa_r+0x190>
 800b09c:	2300      	movs	r3, #0
 800b09e:	930f      	str	r3, [sp, #60]	; 0x3c
 800b0a0:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 800b0a2:	930b      	str	r3, [sp, #44]	; 0x2c
 800b0a4:	9307      	str	r3, [sp, #28]
 800b0a6:	2b00      	cmp	r3, #0
 800b0a8:	dc13      	bgt.n	800b0d2 <_dtoa_r+0x23a>
 800b0aa:	2301      	movs	r3, #1
 800b0ac:	001a      	movs	r2, r3
 800b0ae:	930b      	str	r3, [sp, #44]	; 0x2c
 800b0b0:	9307      	str	r3, [sp, #28]
 800b0b2:	9223      	str	r2, [sp, #140]	; 0x8c
 800b0b4:	e00d      	b.n	800b0d2 <_dtoa_r+0x23a>
 800b0b6:	2301      	movs	r3, #1
 800b0b8:	e7f1      	b.n	800b09e <_dtoa_r+0x206>
 800b0ba:	2300      	movs	r3, #0
 800b0bc:	9a23      	ldr	r2, [sp, #140]	; 0x8c
 800b0be:	930f      	str	r3, [sp, #60]	; 0x3c
 800b0c0:	4694      	mov	ip, r2
 800b0c2:	9b03      	ldr	r3, [sp, #12]
 800b0c4:	4463      	add	r3, ip
 800b0c6:	930b      	str	r3, [sp, #44]	; 0x2c
 800b0c8:	3301      	adds	r3, #1
 800b0ca:	9307      	str	r3, [sp, #28]
 800b0cc:	2b00      	cmp	r3, #0
 800b0ce:	dc00      	bgt.n	800b0d2 <_dtoa_r+0x23a>
 800b0d0:	2301      	movs	r3, #1
 800b0d2:	2100      	movs	r1, #0
 800b0d4:	2204      	movs	r2, #4
 800b0d6:	0010      	movs	r0, r2
 800b0d8:	3014      	adds	r0, #20
 800b0da:	4298      	cmp	r0, r3
 800b0dc:	d91d      	bls.n	800b11a <_dtoa_r+0x282>
 800b0de:	9b04      	ldr	r3, [sp, #16]
 800b0e0:	0018      	movs	r0, r3
 800b0e2:	63d9      	str	r1, [r3, #60]	; 0x3c
 800b0e4:	f7fd fe60 	bl	8008da8 <_Balloc>
 800b0e8:	9006      	str	r0, [sp, #24]
 800b0ea:	2800      	cmp	r0, #0
 800b0ec:	d118      	bne.n	800b120 <_dtoa_r+0x288>
 800b0ee:	21b0      	movs	r1, #176	; 0xb0
 800b0f0:	4b40      	ldr	r3, [pc, #256]	; (800b1f4 <_dtoa_r+0x35c>)
 800b0f2:	4841      	ldr	r0, [pc, #260]	; (800b1f8 <_dtoa_r+0x360>)
 800b0f4:	9a06      	ldr	r2, [sp, #24]
 800b0f6:	31ff      	adds	r1, #255	; 0xff
 800b0f8:	f7ff fdd2 	bl	800aca0 <__assert_func>
 800b0fc:	2301      	movs	r3, #1
 800b0fe:	e7dd      	b.n	800b0bc <_dtoa_r+0x224>
 800b100:	2300      	movs	r3, #0
 800b102:	940f      	str	r4, [sp, #60]	; 0x3c
 800b104:	9322      	str	r3, [sp, #136]	; 0x88
 800b106:	3b01      	subs	r3, #1
 800b108:	930b      	str	r3, [sp, #44]	; 0x2c
 800b10a:	9307      	str	r3, [sp, #28]
 800b10c:	2200      	movs	r2, #0
 800b10e:	3313      	adds	r3, #19
 800b110:	e7cf      	b.n	800b0b2 <_dtoa_r+0x21a>
 800b112:	2301      	movs	r3, #1
 800b114:	930f      	str	r3, [sp, #60]	; 0x3c
 800b116:	3b02      	subs	r3, #2
 800b118:	e7f6      	b.n	800b108 <_dtoa_r+0x270>
 800b11a:	3101      	adds	r1, #1
 800b11c:	0052      	lsls	r2, r2, #1
 800b11e:	e7da      	b.n	800b0d6 <_dtoa_r+0x23e>
 800b120:	9b04      	ldr	r3, [sp, #16]
 800b122:	9a06      	ldr	r2, [sp, #24]
 800b124:	639a      	str	r2, [r3, #56]	; 0x38
 800b126:	9b07      	ldr	r3, [sp, #28]
 800b128:	2b0e      	cmp	r3, #14
 800b12a:	d900      	bls.n	800b12e <_dtoa_r+0x296>
 800b12c:	e0e3      	b.n	800b2f6 <_dtoa_r+0x45e>
 800b12e:	2c00      	cmp	r4, #0
 800b130:	d100      	bne.n	800b134 <_dtoa_r+0x29c>
 800b132:	e0e0      	b.n	800b2f6 <_dtoa_r+0x45e>
 800b134:	9b03      	ldr	r3, [sp, #12]
 800b136:	2b00      	cmp	r3, #0
 800b138:	dd62      	ble.n	800b200 <_dtoa_r+0x368>
 800b13a:	210f      	movs	r1, #15
 800b13c:	9a03      	ldr	r2, [sp, #12]
 800b13e:	4b29      	ldr	r3, [pc, #164]	; (800b1e4 <_dtoa_r+0x34c>)
 800b140:	400a      	ands	r2, r1
 800b142:	00d2      	lsls	r2, r2, #3
 800b144:	189b      	adds	r3, r3, r2
 800b146:	681e      	ldr	r6, [r3, #0]
 800b148:	685f      	ldr	r7, [r3, #4]
 800b14a:	9b03      	ldr	r3, [sp, #12]
 800b14c:	2402      	movs	r4, #2
 800b14e:	111d      	asrs	r5, r3, #4
 800b150:	05db      	lsls	r3, r3, #23
 800b152:	d50a      	bpl.n	800b16a <_dtoa_r+0x2d2>
 800b154:	4b29      	ldr	r3, [pc, #164]	; (800b1fc <_dtoa_r+0x364>)
 800b156:	400d      	ands	r5, r1
 800b158:	6a1a      	ldr	r2, [r3, #32]
 800b15a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b15c:	9810      	ldr	r0, [sp, #64]	; 0x40
 800b15e:	9911      	ldr	r1, [sp, #68]	; 0x44
 800b160:	f7f5 fdec 	bl	8000d3c <__aeabi_ddiv>
 800b164:	9008      	str	r0, [sp, #32]
 800b166:	9109      	str	r1, [sp, #36]	; 0x24
 800b168:	3401      	adds	r4, #1
 800b16a:	4b24      	ldr	r3, [pc, #144]	; (800b1fc <_dtoa_r+0x364>)
 800b16c:	930e      	str	r3, [sp, #56]	; 0x38
 800b16e:	2d00      	cmp	r5, #0
 800b170:	d108      	bne.n	800b184 <_dtoa_r+0x2ec>
 800b172:	9808      	ldr	r0, [sp, #32]
 800b174:	9909      	ldr	r1, [sp, #36]	; 0x24
 800b176:	0032      	movs	r2, r6
 800b178:	003b      	movs	r3, r7
 800b17a:	f7f5 fddf 	bl	8000d3c <__aeabi_ddiv>
 800b17e:	9008      	str	r0, [sp, #32]
 800b180:	9109      	str	r1, [sp, #36]	; 0x24
 800b182:	e058      	b.n	800b236 <_dtoa_r+0x39e>
 800b184:	2301      	movs	r3, #1
 800b186:	421d      	tst	r5, r3
 800b188:	d009      	beq.n	800b19e <_dtoa_r+0x306>
 800b18a:	18e4      	adds	r4, r4, r3
 800b18c:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800b18e:	0030      	movs	r0, r6
 800b190:	681a      	ldr	r2, [r3, #0]
 800b192:	685b      	ldr	r3, [r3, #4]
 800b194:	0039      	movs	r1, r7
 800b196:	f7f6 f9cb 	bl	8001530 <__aeabi_dmul>
 800b19a:	0006      	movs	r6, r0
 800b19c:	000f      	movs	r7, r1
 800b19e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800b1a0:	106d      	asrs	r5, r5, #1
 800b1a2:	3308      	adds	r3, #8
 800b1a4:	e7e2      	b.n	800b16c <_dtoa_r+0x2d4>
 800b1a6:	46c0      	nop			; (mov r8, r8)
 800b1a8:	7ff00000 	.word	0x7ff00000
 800b1ac:	0000270f 	.word	0x0000270f
 800b1b0:	0800ed75 	.word	0x0800ed75
 800b1b4:	0800ed78 	.word	0x0800ed78
 800b1b8:	0800ed0e 	.word	0x0800ed0e
 800b1bc:	0800ed0f 	.word	0x0800ed0f
 800b1c0:	3ff00000 	.word	0x3ff00000
 800b1c4:	fffffc01 	.word	0xfffffc01
 800b1c8:	3ff80000 	.word	0x3ff80000
 800b1cc:	636f4361 	.word	0x636f4361
 800b1d0:	3fd287a7 	.word	0x3fd287a7
 800b1d4:	8b60c8b3 	.word	0x8b60c8b3
 800b1d8:	3fc68a28 	.word	0x3fc68a28
 800b1dc:	509f79fb 	.word	0x509f79fb
 800b1e0:	3fd34413 	.word	0x3fd34413
 800b1e4:	0800ec08 	.word	0x0800ec08
 800b1e8:	00000432 	.word	0x00000432
 800b1ec:	00000412 	.word	0x00000412
 800b1f0:	fe100000 	.word	0xfe100000
 800b1f4:	0800eb73 	.word	0x0800eb73
 800b1f8:	0800ed79 	.word	0x0800ed79
 800b1fc:	0800ebe0 	.word	0x0800ebe0
 800b200:	9b03      	ldr	r3, [sp, #12]
 800b202:	2402      	movs	r4, #2
 800b204:	2b00      	cmp	r3, #0
 800b206:	d016      	beq.n	800b236 <_dtoa_r+0x39e>
 800b208:	9810      	ldr	r0, [sp, #64]	; 0x40
 800b20a:	9911      	ldr	r1, [sp, #68]	; 0x44
 800b20c:	220f      	movs	r2, #15
 800b20e:	425d      	negs	r5, r3
 800b210:	402a      	ands	r2, r5
 800b212:	4bdd      	ldr	r3, [pc, #884]	; (800b588 <_dtoa_r+0x6f0>)
 800b214:	00d2      	lsls	r2, r2, #3
 800b216:	189b      	adds	r3, r3, r2
 800b218:	681a      	ldr	r2, [r3, #0]
 800b21a:	685b      	ldr	r3, [r3, #4]
 800b21c:	f7f6 f988 	bl	8001530 <__aeabi_dmul>
 800b220:	2701      	movs	r7, #1
 800b222:	2300      	movs	r3, #0
 800b224:	9008      	str	r0, [sp, #32]
 800b226:	9109      	str	r1, [sp, #36]	; 0x24
 800b228:	4ed8      	ldr	r6, [pc, #864]	; (800b58c <_dtoa_r+0x6f4>)
 800b22a:	112d      	asrs	r5, r5, #4
 800b22c:	2d00      	cmp	r5, #0
 800b22e:	d000      	beq.n	800b232 <_dtoa_r+0x39a>
 800b230:	e091      	b.n	800b356 <_dtoa_r+0x4be>
 800b232:	2b00      	cmp	r3, #0
 800b234:	d1a3      	bne.n	800b17e <_dtoa_r+0x2e6>
 800b236:	9e08      	ldr	r6, [sp, #32]
 800b238:	9f09      	ldr	r7, [sp, #36]	; 0x24
 800b23a:	9b16      	ldr	r3, [sp, #88]	; 0x58
 800b23c:	2b00      	cmp	r3, #0
 800b23e:	d100      	bne.n	800b242 <_dtoa_r+0x3aa>
 800b240:	e094      	b.n	800b36c <_dtoa_r+0x4d4>
 800b242:	2200      	movs	r2, #0
 800b244:	0030      	movs	r0, r6
 800b246:	0039      	movs	r1, r7
 800b248:	4bd1      	ldr	r3, [pc, #836]	; (800b590 <_dtoa_r+0x6f8>)
 800b24a:	f7f5 f903 	bl	8000454 <__aeabi_dcmplt>
 800b24e:	2800      	cmp	r0, #0
 800b250:	d100      	bne.n	800b254 <_dtoa_r+0x3bc>
 800b252:	e08b      	b.n	800b36c <_dtoa_r+0x4d4>
 800b254:	9b07      	ldr	r3, [sp, #28]
 800b256:	2b00      	cmp	r3, #0
 800b258:	d100      	bne.n	800b25c <_dtoa_r+0x3c4>
 800b25a:	e087      	b.n	800b36c <_dtoa_r+0x4d4>
 800b25c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800b25e:	2b00      	cmp	r3, #0
 800b260:	dd45      	ble.n	800b2ee <_dtoa_r+0x456>
 800b262:	9b03      	ldr	r3, [sp, #12]
 800b264:	2200      	movs	r2, #0
 800b266:	3b01      	subs	r3, #1
 800b268:	930e      	str	r3, [sp, #56]	; 0x38
 800b26a:	0030      	movs	r0, r6
 800b26c:	4bc9      	ldr	r3, [pc, #804]	; (800b594 <_dtoa_r+0x6fc>)
 800b26e:	0039      	movs	r1, r7
 800b270:	f7f6 f95e 	bl	8001530 <__aeabi_dmul>
 800b274:	9008      	str	r0, [sp, #32]
 800b276:	9109      	str	r1, [sp, #36]	; 0x24
 800b278:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800b27a:	3401      	adds	r4, #1
 800b27c:	0020      	movs	r0, r4
 800b27e:	9e08      	ldr	r6, [sp, #32]
 800b280:	9f09      	ldr	r7, [sp, #36]	; 0x24
 800b282:	9312      	str	r3, [sp, #72]	; 0x48
 800b284:	f7f6 ffec 	bl	8002260 <__aeabi_i2d>
 800b288:	0032      	movs	r2, r6
 800b28a:	003b      	movs	r3, r7
 800b28c:	f7f6 f950 	bl	8001530 <__aeabi_dmul>
 800b290:	2200      	movs	r2, #0
 800b292:	4bc1      	ldr	r3, [pc, #772]	; (800b598 <_dtoa_r+0x700>)
 800b294:	f7f5 f9f2 	bl	800067c <__aeabi_dadd>
 800b298:	4ac0      	ldr	r2, [pc, #768]	; (800b59c <_dtoa_r+0x704>)
 800b29a:	9014      	str	r0, [sp, #80]	; 0x50
 800b29c:	9115      	str	r1, [sp, #84]	; 0x54
 800b29e:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800b2a0:	9c15      	ldr	r4, [sp, #84]	; 0x54
 800b2a2:	4694      	mov	ip, r2
 800b2a4:	9308      	str	r3, [sp, #32]
 800b2a6:	9409      	str	r4, [sp, #36]	; 0x24
 800b2a8:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800b2aa:	4463      	add	r3, ip
 800b2ac:	9318      	str	r3, [sp, #96]	; 0x60
 800b2ae:	9309      	str	r3, [sp, #36]	; 0x24
 800b2b0:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800b2b2:	2b00      	cmp	r3, #0
 800b2b4:	d15e      	bne.n	800b374 <_dtoa_r+0x4dc>
 800b2b6:	2200      	movs	r2, #0
 800b2b8:	4bb9      	ldr	r3, [pc, #740]	; (800b5a0 <_dtoa_r+0x708>)
 800b2ba:	0030      	movs	r0, r6
 800b2bc:	0039      	movs	r1, r7
 800b2be:	f7f6 fbf9 	bl	8001ab4 <__aeabi_dsub>
 800b2c2:	9a08      	ldr	r2, [sp, #32]
 800b2c4:	9b18      	ldr	r3, [sp, #96]	; 0x60
 800b2c6:	0004      	movs	r4, r0
 800b2c8:	000d      	movs	r5, r1
 800b2ca:	f7f5 f8d7 	bl	800047c <__aeabi_dcmpgt>
 800b2ce:	2800      	cmp	r0, #0
 800b2d0:	d000      	beq.n	800b2d4 <_dtoa_r+0x43c>
 800b2d2:	e2b3      	b.n	800b83c <_dtoa_r+0x9a4>
 800b2d4:	48b3      	ldr	r0, [pc, #716]	; (800b5a4 <_dtoa_r+0x70c>)
 800b2d6:	9915      	ldr	r1, [sp, #84]	; 0x54
 800b2d8:	4684      	mov	ip, r0
 800b2da:	4461      	add	r1, ip
 800b2dc:	000b      	movs	r3, r1
 800b2de:	0020      	movs	r0, r4
 800b2e0:	0029      	movs	r1, r5
 800b2e2:	9a08      	ldr	r2, [sp, #32]
 800b2e4:	f7f5 f8b6 	bl	8000454 <__aeabi_dcmplt>
 800b2e8:	2800      	cmp	r0, #0
 800b2ea:	d000      	beq.n	800b2ee <_dtoa_r+0x456>
 800b2ec:	e2a3      	b.n	800b836 <_dtoa_r+0x99e>
 800b2ee:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800b2f0:	9c11      	ldr	r4, [sp, #68]	; 0x44
 800b2f2:	9308      	str	r3, [sp, #32]
 800b2f4:	9409      	str	r4, [sp, #36]	; 0x24
 800b2f6:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800b2f8:	2b00      	cmp	r3, #0
 800b2fa:	da00      	bge.n	800b2fe <_dtoa_r+0x466>
 800b2fc:	e179      	b.n	800b5f2 <_dtoa_r+0x75a>
 800b2fe:	9a03      	ldr	r2, [sp, #12]
 800b300:	2a0e      	cmp	r2, #14
 800b302:	dd00      	ble.n	800b306 <_dtoa_r+0x46e>
 800b304:	e175      	b.n	800b5f2 <_dtoa_r+0x75a>
 800b306:	4ba0      	ldr	r3, [pc, #640]	; (800b588 <_dtoa_r+0x6f0>)
 800b308:	00d2      	lsls	r2, r2, #3
 800b30a:	189b      	adds	r3, r3, r2
 800b30c:	681e      	ldr	r6, [r3, #0]
 800b30e:	685f      	ldr	r7, [r3, #4]
 800b310:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 800b312:	2b00      	cmp	r3, #0
 800b314:	db00      	blt.n	800b318 <_dtoa_r+0x480>
 800b316:	e0e5      	b.n	800b4e4 <_dtoa_r+0x64c>
 800b318:	9b07      	ldr	r3, [sp, #28]
 800b31a:	2b00      	cmp	r3, #0
 800b31c:	dd00      	ble.n	800b320 <_dtoa_r+0x488>
 800b31e:	e0e1      	b.n	800b4e4 <_dtoa_r+0x64c>
 800b320:	d000      	beq.n	800b324 <_dtoa_r+0x48c>
 800b322:	e288      	b.n	800b836 <_dtoa_r+0x99e>
 800b324:	2200      	movs	r2, #0
 800b326:	0030      	movs	r0, r6
 800b328:	0039      	movs	r1, r7
 800b32a:	4b9d      	ldr	r3, [pc, #628]	; (800b5a0 <_dtoa_r+0x708>)
 800b32c:	f7f6 f900 	bl	8001530 <__aeabi_dmul>
 800b330:	9a08      	ldr	r2, [sp, #32]
 800b332:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b334:	f7f5 f8ac 	bl	8000490 <__aeabi_dcmpge>
 800b338:	9e07      	ldr	r6, [sp, #28]
 800b33a:	0037      	movs	r7, r6
 800b33c:	2800      	cmp	r0, #0
 800b33e:	d000      	beq.n	800b342 <_dtoa_r+0x4aa>
 800b340:	e25f      	b.n	800b802 <_dtoa_r+0x96a>
 800b342:	9b06      	ldr	r3, [sp, #24]
 800b344:	9a06      	ldr	r2, [sp, #24]
 800b346:	3301      	adds	r3, #1
 800b348:	9308      	str	r3, [sp, #32]
 800b34a:	2331      	movs	r3, #49	; 0x31
 800b34c:	7013      	strb	r3, [r2, #0]
 800b34e:	9b03      	ldr	r3, [sp, #12]
 800b350:	3301      	adds	r3, #1
 800b352:	9303      	str	r3, [sp, #12]
 800b354:	e25a      	b.n	800b80c <_dtoa_r+0x974>
 800b356:	423d      	tst	r5, r7
 800b358:	d005      	beq.n	800b366 <_dtoa_r+0x4ce>
 800b35a:	6832      	ldr	r2, [r6, #0]
 800b35c:	6873      	ldr	r3, [r6, #4]
 800b35e:	f7f6 f8e7 	bl	8001530 <__aeabi_dmul>
 800b362:	003b      	movs	r3, r7
 800b364:	3401      	adds	r4, #1
 800b366:	106d      	asrs	r5, r5, #1
 800b368:	3608      	adds	r6, #8
 800b36a:	e75f      	b.n	800b22c <_dtoa_r+0x394>
 800b36c:	9b03      	ldr	r3, [sp, #12]
 800b36e:	930e      	str	r3, [sp, #56]	; 0x38
 800b370:	9b07      	ldr	r3, [sp, #28]
 800b372:	e783      	b.n	800b27c <_dtoa_r+0x3e4>
 800b374:	9a12      	ldr	r2, [sp, #72]	; 0x48
 800b376:	4b84      	ldr	r3, [pc, #528]	; (800b588 <_dtoa_r+0x6f0>)
 800b378:	3a01      	subs	r2, #1
 800b37a:	00d2      	lsls	r2, r2, #3
 800b37c:	990f      	ldr	r1, [sp, #60]	; 0x3c
 800b37e:	189b      	adds	r3, r3, r2
 800b380:	9c08      	ldr	r4, [sp, #32]
 800b382:	9d09      	ldr	r5, [sp, #36]	; 0x24
 800b384:	681a      	ldr	r2, [r3, #0]
 800b386:	685b      	ldr	r3, [r3, #4]
 800b388:	2900      	cmp	r1, #0
 800b38a:	d051      	beq.n	800b430 <_dtoa_r+0x598>
 800b38c:	2000      	movs	r0, #0
 800b38e:	4986      	ldr	r1, [pc, #536]	; (800b5a8 <_dtoa_r+0x710>)
 800b390:	f7f5 fcd4 	bl	8000d3c <__aeabi_ddiv>
 800b394:	0022      	movs	r2, r4
 800b396:	002b      	movs	r3, r5
 800b398:	f7f6 fb8c 	bl	8001ab4 <__aeabi_dsub>
 800b39c:	9a06      	ldr	r2, [sp, #24]
 800b39e:	0004      	movs	r4, r0
 800b3a0:	4694      	mov	ip, r2
 800b3a2:	000d      	movs	r5, r1
 800b3a4:	9b06      	ldr	r3, [sp, #24]
 800b3a6:	9314      	str	r3, [sp, #80]	; 0x50
 800b3a8:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800b3aa:	4463      	add	r3, ip
 800b3ac:	9318      	str	r3, [sp, #96]	; 0x60
 800b3ae:	0039      	movs	r1, r7
 800b3b0:	0030      	movs	r0, r6
 800b3b2:	f7f6 ff1f 	bl	80021f4 <__aeabi_d2iz>
 800b3b6:	9012      	str	r0, [sp, #72]	; 0x48
 800b3b8:	f7f6 ff52 	bl	8002260 <__aeabi_i2d>
 800b3bc:	0002      	movs	r2, r0
 800b3be:	000b      	movs	r3, r1
 800b3c0:	0030      	movs	r0, r6
 800b3c2:	0039      	movs	r1, r7
 800b3c4:	f7f6 fb76 	bl	8001ab4 <__aeabi_dsub>
 800b3c8:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800b3ca:	9a14      	ldr	r2, [sp, #80]	; 0x50
 800b3cc:	3301      	adds	r3, #1
 800b3ce:	9308      	str	r3, [sp, #32]
 800b3d0:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800b3d2:	0006      	movs	r6, r0
 800b3d4:	3330      	adds	r3, #48	; 0x30
 800b3d6:	7013      	strb	r3, [r2, #0]
 800b3d8:	0022      	movs	r2, r4
 800b3da:	002b      	movs	r3, r5
 800b3dc:	000f      	movs	r7, r1
 800b3de:	f7f5 f839 	bl	8000454 <__aeabi_dcmplt>
 800b3e2:	2800      	cmp	r0, #0
 800b3e4:	d174      	bne.n	800b4d0 <_dtoa_r+0x638>
 800b3e6:	0032      	movs	r2, r6
 800b3e8:	003b      	movs	r3, r7
 800b3ea:	2000      	movs	r0, #0
 800b3ec:	4968      	ldr	r1, [pc, #416]	; (800b590 <_dtoa_r+0x6f8>)
 800b3ee:	f7f6 fb61 	bl	8001ab4 <__aeabi_dsub>
 800b3f2:	0022      	movs	r2, r4
 800b3f4:	002b      	movs	r3, r5
 800b3f6:	f7f5 f82d 	bl	8000454 <__aeabi_dcmplt>
 800b3fa:	2800      	cmp	r0, #0
 800b3fc:	d000      	beq.n	800b400 <_dtoa_r+0x568>
 800b3fe:	e0d7      	b.n	800b5b0 <_dtoa_r+0x718>
 800b400:	9b18      	ldr	r3, [sp, #96]	; 0x60
 800b402:	9a08      	ldr	r2, [sp, #32]
 800b404:	4293      	cmp	r3, r2
 800b406:	d100      	bne.n	800b40a <_dtoa_r+0x572>
 800b408:	e771      	b.n	800b2ee <_dtoa_r+0x456>
 800b40a:	2200      	movs	r2, #0
 800b40c:	0020      	movs	r0, r4
 800b40e:	0029      	movs	r1, r5
 800b410:	4b60      	ldr	r3, [pc, #384]	; (800b594 <_dtoa_r+0x6fc>)
 800b412:	f7f6 f88d 	bl	8001530 <__aeabi_dmul>
 800b416:	4b5f      	ldr	r3, [pc, #380]	; (800b594 <_dtoa_r+0x6fc>)
 800b418:	0004      	movs	r4, r0
 800b41a:	000d      	movs	r5, r1
 800b41c:	0030      	movs	r0, r6
 800b41e:	0039      	movs	r1, r7
 800b420:	2200      	movs	r2, #0
 800b422:	f7f6 f885 	bl	8001530 <__aeabi_dmul>
 800b426:	9b08      	ldr	r3, [sp, #32]
 800b428:	0006      	movs	r6, r0
 800b42a:	000f      	movs	r7, r1
 800b42c:	9314      	str	r3, [sp, #80]	; 0x50
 800b42e:	e7be      	b.n	800b3ae <_dtoa_r+0x516>
 800b430:	0020      	movs	r0, r4
 800b432:	0029      	movs	r1, r5
 800b434:	f7f6 f87c 	bl	8001530 <__aeabi_dmul>
 800b438:	9a06      	ldr	r2, [sp, #24]
 800b43a:	9b06      	ldr	r3, [sp, #24]
 800b43c:	4694      	mov	ip, r2
 800b43e:	9308      	str	r3, [sp, #32]
 800b440:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800b442:	9014      	str	r0, [sp, #80]	; 0x50
 800b444:	9115      	str	r1, [sp, #84]	; 0x54
 800b446:	4463      	add	r3, ip
 800b448:	9319      	str	r3, [sp, #100]	; 0x64
 800b44a:	0030      	movs	r0, r6
 800b44c:	0039      	movs	r1, r7
 800b44e:	f7f6 fed1 	bl	80021f4 <__aeabi_d2iz>
 800b452:	9018      	str	r0, [sp, #96]	; 0x60
 800b454:	f7f6 ff04 	bl	8002260 <__aeabi_i2d>
 800b458:	0002      	movs	r2, r0
 800b45a:	000b      	movs	r3, r1
 800b45c:	0030      	movs	r0, r6
 800b45e:	0039      	movs	r1, r7
 800b460:	f7f6 fb28 	bl	8001ab4 <__aeabi_dsub>
 800b464:	9e18      	ldr	r6, [sp, #96]	; 0x60
 800b466:	9b08      	ldr	r3, [sp, #32]
 800b468:	3630      	adds	r6, #48	; 0x30
 800b46a:	9a19      	ldr	r2, [sp, #100]	; 0x64
 800b46c:	701e      	strb	r6, [r3, #0]
 800b46e:	3301      	adds	r3, #1
 800b470:	0004      	movs	r4, r0
 800b472:	000d      	movs	r5, r1
 800b474:	9308      	str	r3, [sp, #32]
 800b476:	4293      	cmp	r3, r2
 800b478:	d12d      	bne.n	800b4d6 <_dtoa_r+0x63e>
 800b47a:	9814      	ldr	r0, [sp, #80]	; 0x50
 800b47c:	9915      	ldr	r1, [sp, #84]	; 0x54
 800b47e:	9a06      	ldr	r2, [sp, #24]
 800b480:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800b482:	4694      	mov	ip, r2
 800b484:	4463      	add	r3, ip
 800b486:	2200      	movs	r2, #0
 800b488:	9308      	str	r3, [sp, #32]
 800b48a:	4b47      	ldr	r3, [pc, #284]	; (800b5a8 <_dtoa_r+0x710>)
 800b48c:	f7f5 f8f6 	bl	800067c <__aeabi_dadd>
 800b490:	0002      	movs	r2, r0
 800b492:	000b      	movs	r3, r1
 800b494:	0020      	movs	r0, r4
 800b496:	0029      	movs	r1, r5
 800b498:	f7f4 fff0 	bl	800047c <__aeabi_dcmpgt>
 800b49c:	2800      	cmp	r0, #0
 800b49e:	d000      	beq.n	800b4a2 <_dtoa_r+0x60a>
 800b4a0:	e086      	b.n	800b5b0 <_dtoa_r+0x718>
 800b4a2:	9a14      	ldr	r2, [sp, #80]	; 0x50
 800b4a4:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800b4a6:	2000      	movs	r0, #0
 800b4a8:	493f      	ldr	r1, [pc, #252]	; (800b5a8 <_dtoa_r+0x710>)
 800b4aa:	f7f6 fb03 	bl	8001ab4 <__aeabi_dsub>
 800b4ae:	0002      	movs	r2, r0
 800b4b0:	000b      	movs	r3, r1
 800b4b2:	0020      	movs	r0, r4
 800b4b4:	0029      	movs	r1, r5
 800b4b6:	f7f4 ffcd 	bl	8000454 <__aeabi_dcmplt>
 800b4ba:	2800      	cmp	r0, #0
 800b4bc:	d100      	bne.n	800b4c0 <_dtoa_r+0x628>
 800b4be:	e716      	b.n	800b2ee <_dtoa_r+0x456>
 800b4c0:	9b08      	ldr	r3, [sp, #32]
 800b4c2:	001a      	movs	r2, r3
 800b4c4:	3a01      	subs	r2, #1
 800b4c6:	9208      	str	r2, [sp, #32]
 800b4c8:	7812      	ldrb	r2, [r2, #0]
 800b4ca:	2a30      	cmp	r2, #48	; 0x30
 800b4cc:	d0f8      	beq.n	800b4c0 <_dtoa_r+0x628>
 800b4ce:	9308      	str	r3, [sp, #32]
 800b4d0:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800b4d2:	9303      	str	r3, [sp, #12]
 800b4d4:	e046      	b.n	800b564 <_dtoa_r+0x6cc>
 800b4d6:	2200      	movs	r2, #0
 800b4d8:	4b2e      	ldr	r3, [pc, #184]	; (800b594 <_dtoa_r+0x6fc>)
 800b4da:	f7f6 f829 	bl	8001530 <__aeabi_dmul>
 800b4de:	0006      	movs	r6, r0
 800b4e0:	000f      	movs	r7, r1
 800b4e2:	e7b2      	b.n	800b44a <_dtoa_r+0x5b2>
 800b4e4:	9b06      	ldr	r3, [sp, #24]
 800b4e6:	9a06      	ldr	r2, [sp, #24]
 800b4e8:	930a      	str	r3, [sp, #40]	; 0x28
 800b4ea:	9b07      	ldr	r3, [sp, #28]
 800b4ec:	9c08      	ldr	r4, [sp, #32]
 800b4ee:	9d09      	ldr	r5, [sp, #36]	; 0x24
 800b4f0:	3b01      	subs	r3, #1
 800b4f2:	189b      	adds	r3, r3, r2
 800b4f4:	930b      	str	r3, [sp, #44]	; 0x2c
 800b4f6:	0032      	movs	r2, r6
 800b4f8:	003b      	movs	r3, r7
 800b4fa:	0020      	movs	r0, r4
 800b4fc:	0029      	movs	r1, r5
 800b4fe:	f7f5 fc1d 	bl	8000d3c <__aeabi_ddiv>
 800b502:	f7f6 fe77 	bl	80021f4 <__aeabi_d2iz>
 800b506:	9007      	str	r0, [sp, #28]
 800b508:	f7f6 feaa 	bl	8002260 <__aeabi_i2d>
 800b50c:	0032      	movs	r2, r6
 800b50e:	003b      	movs	r3, r7
 800b510:	f7f6 f80e 	bl	8001530 <__aeabi_dmul>
 800b514:	0002      	movs	r2, r0
 800b516:	000b      	movs	r3, r1
 800b518:	0020      	movs	r0, r4
 800b51a:	0029      	movs	r1, r5
 800b51c:	f7f6 faca 	bl	8001ab4 <__aeabi_dsub>
 800b520:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800b522:	001a      	movs	r2, r3
 800b524:	3201      	adds	r2, #1
 800b526:	920a      	str	r2, [sp, #40]	; 0x28
 800b528:	9208      	str	r2, [sp, #32]
 800b52a:	9a07      	ldr	r2, [sp, #28]
 800b52c:	3230      	adds	r2, #48	; 0x30
 800b52e:	701a      	strb	r2, [r3, #0]
 800b530:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800b532:	429a      	cmp	r2, r3
 800b534:	d14f      	bne.n	800b5d6 <_dtoa_r+0x73e>
 800b536:	0002      	movs	r2, r0
 800b538:	000b      	movs	r3, r1
 800b53a:	f7f5 f89f 	bl	800067c <__aeabi_dadd>
 800b53e:	0032      	movs	r2, r6
 800b540:	003b      	movs	r3, r7
 800b542:	0004      	movs	r4, r0
 800b544:	000d      	movs	r5, r1
 800b546:	f7f4 ff99 	bl	800047c <__aeabi_dcmpgt>
 800b54a:	2800      	cmp	r0, #0
 800b54c:	d12e      	bne.n	800b5ac <_dtoa_r+0x714>
 800b54e:	0032      	movs	r2, r6
 800b550:	003b      	movs	r3, r7
 800b552:	0020      	movs	r0, r4
 800b554:	0029      	movs	r1, r5
 800b556:	f7f4 ff77 	bl	8000448 <__aeabi_dcmpeq>
 800b55a:	2800      	cmp	r0, #0
 800b55c:	d002      	beq.n	800b564 <_dtoa_r+0x6cc>
 800b55e:	9b07      	ldr	r3, [sp, #28]
 800b560:	07de      	lsls	r6, r3, #31
 800b562:	d423      	bmi.n	800b5ac <_dtoa_r+0x714>
 800b564:	9905      	ldr	r1, [sp, #20]
 800b566:	9804      	ldr	r0, [sp, #16]
 800b568:	f7fd fc46 	bl	8008df8 <_Bfree>
 800b56c:	2300      	movs	r3, #0
 800b56e:	9a08      	ldr	r2, [sp, #32]
 800b570:	7013      	strb	r3, [r2, #0]
 800b572:	9b03      	ldr	r3, [sp, #12]
 800b574:	9a24      	ldr	r2, [sp, #144]	; 0x90
 800b576:	3301      	adds	r3, #1
 800b578:	6013      	str	r3, [r2, #0]
 800b57a:	9b26      	ldr	r3, [sp, #152]	; 0x98
 800b57c:	2b00      	cmp	r3, #0
 800b57e:	d100      	bne.n	800b582 <_dtoa_r+0x6ea>
 800b580:	e4bd      	b.n	800aefe <_dtoa_r+0x66>
 800b582:	9a08      	ldr	r2, [sp, #32]
 800b584:	601a      	str	r2, [r3, #0]
 800b586:	e4ba      	b.n	800aefe <_dtoa_r+0x66>
 800b588:	0800ec08 	.word	0x0800ec08
 800b58c:	0800ebe0 	.word	0x0800ebe0
 800b590:	3ff00000 	.word	0x3ff00000
 800b594:	40240000 	.word	0x40240000
 800b598:	401c0000 	.word	0x401c0000
 800b59c:	fcc00000 	.word	0xfcc00000
 800b5a0:	40140000 	.word	0x40140000
 800b5a4:	7cc00000 	.word	0x7cc00000
 800b5a8:	3fe00000 	.word	0x3fe00000
 800b5ac:	9b03      	ldr	r3, [sp, #12]
 800b5ae:	930e      	str	r3, [sp, #56]	; 0x38
 800b5b0:	9b08      	ldr	r3, [sp, #32]
 800b5b2:	9308      	str	r3, [sp, #32]
 800b5b4:	3b01      	subs	r3, #1
 800b5b6:	781a      	ldrb	r2, [r3, #0]
 800b5b8:	2a39      	cmp	r2, #57	; 0x39
 800b5ba:	d108      	bne.n	800b5ce <_dtoa_r+0x736>
 800b5bc:	9a06      	ldr	r2, [sp, #24]
 800b5be:	429a      	cmp	r2, r3
 800b5c0:	d1f7      	bne.n	800b5b2 <_dtoa_r+0x71a>
 800b5c2:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800b5c4:	9906      	ldr	r1, [sp, #24]
 800b5c6:	3201      	adds	r2, #1
 800b5c8:	920e      	str	r2, [sp, #56]	; 0x38
 800b5ca:	2230      	movs	r2, #48	; 0x30
 800b5cc:	700a      	strb	r2, [r1, #0]
 800b5ce:	781a      	ldrb	r2, [r3, #0]
 800b5d0:	3201      	adds	r2, #1
 800b5d2:	701a      	strb	r2, [r3, #0]
 800b5d4:	e77c      	b.n	800b4d0 <_dtoa_r+0x638>
 800b5d6:	2200      	movs	r2, #0
 800b5d8:	4ba9      	ldr	r3, [pc, #676]	; (800b880 <_dtoa_r+0x9e8>)
 800b5da:	f7f5 ffa9 	bl	8001530 <__aeabi_dmul>
 800b5de:	2200      	movs	r2, #0
 800b5e0:	2300      	movs	r3, #0
 800b5e2:	0004      	movs	r4, r0
 800b5e4:	000d      	movs	r5, r1
 800b5e6:	f7f4 ff2f 	bl	8000448 <__aeabi_dcmpeq>
 800b5ea:	2800      	cmp	r0, #0
 800b5ec:	d100      	bne.n	800b5f0 <_dtoa_r+0x758>
 800b5ee:	e782      	b.n	800b4f6 <_dtoa_r+0x65e>
 800b5f0:	e7b8      	b.n	800b564 <_dtoa_r+0x6cc>
 800b5f2:	9f0f      	ldr	r7, [sp, #60]	; 0x3c
 800b5f4:	9d0d      	ldr	r5, [sp, #52]	; 0x34
 800b5f6:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 800b5f8:	2f00      	cmp	r7, #0
 800b5fa:	d012      	beq.n	800b622 <_dtoa_r+0x78a>
 800b5fc:	9a22      	ldr	r2, [sp, #136]	; 0x88
 800b5fe:	2a01      	cmp	r2, #1
 800b600:	dc6e      	bgt.n	800b6e0 <_dtoa_r+0x848>
 800b602:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 800b604:	2a00      	cmp	r2, #0
 800b606:	d065      	beq.n	800b6d4 <_dtoa_r+0x83c>
 800b608:	4a9e      	ldr	r2, [pc, #632]	; (800b884 <_dtoa_r+0x9ec>)
 800b60a:	189b      	adds	r3, r3, r2
 800b60c:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800b60e:	2101      	movs	r1, #1
 800b610:	18d2      	adds	r2, r2, r3
 800b612:	920a      	str	r2, [sp, #40]	; 0x28
 800b614:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800b616:	9804      	ldr	r0, [sp, #16]
 800b618:	18d3      	adds	r3, r2, r3
 800b61a:	930c      	str	r3, [sp, #48]	; 0x30
 800b61c:	f7fd fc82 	bl	8008f24 <__i2b>
 800b620:	0007      	movs	r7, r0
 800b622:	2c00      	cmp	r4, #0
 800b624:	d00e      	beq.n	800b644 <_dtoa_r+0x7ac>
 800b626:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800b628:	2b00      	cmp	r3, #0
 800b62a:	dd0b      	ble.n	800b644 <_dtoa_r+0x7ac>
 800b62c:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800b62e:	0023      	movs	r3, r4
 800b630:	4294      	cmp	r4, r2
 800b632:	dd00      	ble.n	800b636 <_dtoa_r+0x79e>
 800b634:	0013      	movs	r3, r2
 800b636:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800b638:	1ae4      	subs	r4, r4, r3
 800b63a:	1ad2      	subs	r2, r2, r3
 800b63c:	920a      	str	r2, [sp, #40]	; 0x28
 800b63e:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800b640:	1ad3      	subs	r3, r2, r3
 800b642:	930c      	str	r3, [sp, #48]	; 0x30
 800b644:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800b646:	2b00      	cmp	r3, #0
 800b648:	d01e      	beq.n	800b688 <_dtoa_r+0x7f0>
 800b64a:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800b64c:	2b00      	cmp	r3, #0
 800b64e:	d05c      	beq.n	800b70a <_dtoa_r+0x872>
 800b650:	2d00      	cmp	r5, #0
 800b652:	dd10      	ble.n	800b676 <_dtoa_r+0x7de>
 800b654:	0039      	movs	r1, r7
 800b656:	002a      	movs	r2, r5
 800b658:	9804      	ldr	r0, [sp, #16]
 800b65a:	f7fd fd2b 	bl	80090b4 <__pow5mult>
 800b65e:	9a05      	ldr	r2, [sp, #20]
 800b660:	0001      	movs	r1, r0
 800b662:	0007      	movs	r7, r0
 800b664:	9804      	ldr	r0, [sp, #16]
 800b666:	f7fd fc75 	bl	8008f54 <__multiply>
 800b66a:	0006      	movs	r6, r0
 800b66c:	9905      	ldr	r1, [sp, #20]
 800b66e:	9804      	ldr	r0, [sp, #16]
 800b670:	f7fd fbc2 	bl	8008df8 <_Bfree>
 800b674:	9605      	str	r6, [sp, #20]
 800b676:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800b678:	1b5a      	subs	r2, r3, r5
 800b67a:	42ab      	cmp	r3, r5
 800b67c:	d004      	beq.n	800b688 <_dtoa_r+0x7f0>
 800b67e:	9905      	ldr	r1, [sp, #20]
 800b680:	9804      	ldr	r0, [sp, #16]
 800b682:	f7fd fd17 	bl	80090b4 <__pow5mult>
 800b686:	9005      	str	r0, [sp, #20]
 800b688:	2101      	movs	r1, #1
 800b68a:	9804      	ldr	r0, [sp, #16]
 800b68c:	f7fd fc4a 	bl	8008f24 <__i2b>
 800b690:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800b692:	0006      	movs	r6, r0
 800b694:	2b00      	cmp	r3, #0
 800b696:	dd3a      	ble.n	800b70e <_dtoa_r+0x876>
 800b698:	001a      	movs	r2, r3
 800b69a:	0001      	movs	r1, r0
 800b69c:	9804      	ldr	r0, [sp, #16]
 800b69e:	f7fd fd09 	bl	80090b4 <__pow5mult>
 800b6a2:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800b6a4:	0006      	movs	r6, r0
 800b6a6:	2500      	movs	r5, #0
 800b6a8:	2b01      	cmp	r3, #1
 800b6aa:	dc38      	bgt.n	800b71e <_dtoa_r+0x886>
 800b6ac:	2500      	movs	r5, #0
 800b6ae:	9b08      	ldr	r3, [sp, #32]
 800b6b0:	42ab      	cmp	r3, r5
 800b6b2:	d130      	bne.n	800b716 <_dtoa_r+0x87e>
 800b6b4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b6b6:	031b      	lsls	r3, r3, #12
 800b6b8:	42ab      	cmp	r3, r5
 800b6ba:	d12c      	bne.n	800b716 <_dtoa_r+0x87e>
 800b6bc:	4b72      	ldr	r3, [pc, #456]	; (800b888 <_dtoa_r+0x9f0>)
 800b6be:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800b6c0:	4213      	tst	r3, r2
 800b6c2:	d028      	beq.n	800b716 <_dtoa_r+0x87e>
 800b6c4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800b6c6:	3501      	adds	r5, #1
 800b6c8:	3301      	adds	r3, #1
 800b6ca:	930a      	str	r3, [sp, #40]	; 0x28
 800b6cc:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800b6ce:	3301      	adds	r3, #1
 800b6d0:	930c      	str	r3, [sp, #48]	; 0x30
 800b6d2:	e020      	b.n	800b716 <_dtoa_r+0x87e>
 800b6d4:	2336      	movs	r3, #54	; 0x36
 800b6d6:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 800b6d8:	9d0d      	ldr	r5, [sp, #52]	; 0x34
 800b6da:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 800b6dc:	1a9b      	subs	r3, r3, r2
 800b6de:	e795      	b.n	800b60c <_dtoa_r+0x774>
 800b6e0:	9b07      	ldr	r3, [sp, #28]
 800b6e2:	1e5d      	subs	r5, r3, #1
 800b6e4:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800b6e6:	42ab      	cmp	r3, r5
 800b6e8:	db07      	blt.n	800b6fa <_dtoa_r+0x862>
 800b6ea:	1b5d      	subs	r5, r3, r5
 800b6ec:	9b07      	ldr	r3, [sp, #28]
 800b6ee:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 800b6f0:	2b00      	cmp	r3, #0
 800b6f2:	da8b      	bge.n	800b60c <_dtoa_r+0x774>
 800b6f4:	1ae4      	subs	r4, r4, r3
 800b6f6:	2300      	movs	r3, #0
 800b6f8:	e788      	b.n	800b60c <_dtoa_r+0x774>
 800b6fa:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800b6fc:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 800b6fe:	1aeb      	subs	r3, r5, r3
 800b700:	18d3      	adds	r3, r2, r3
 800b702:	950d      	str	r5, [sp, #52]	; 0x34
 800b704:	9313      	str	r3, [sp, #76]	; 0x4c
 800b706:	2500      	movs	r5, #0
 800b708:	e7f0      	b.n	800b6ec <_dtoa_r+0x854>
 800b70a:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800b70c:	e7b7      	b.n	800b67e <_dtoa_r+0x7e6>
 800b70e:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800b710:	2500      	movs	r5, #0
 800b712:	2b01      	cmp	r3, #1
 800b714:	ddca      	ble.n	800b6ac <_dtoa_r+0x814>
 800b716:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800b718:	2001      	movs	r0, #1
 800b71a:	2b00      	cmp	r3, #0
 800b71c:	d008      	beq.n	800b730 <_dtoa_r+0x898>
 800b71e:	6933      	ldr	r3, [r6, #16]
 800b720:	3303      	adds	r3, #3
 800b722:	009b      	lsls	r3, r3, #2
 800b724:	18f3      	adds	r3, r6, r3
 800b726:	6858      	ldr	r0, [r3, #4]
 800b728:	f7fd fbb4 	bl	8008e94 <__hi0bits>
 800b72c:	2320      	movs	r3, #32
 800b72e:	1a18      	subs	r0, r3, r0
 800b730:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800b732:	1818      	adds	r0, r3, r0
 800b734:	0002      	movs	r2, r0
 800b736:	231f      	movs	r3, #31
 800b738:	401a      	ands	r2, r3
 800b73a:	4218      	tst	r0, r3
 800b73c:	d047      	beq.n	800b7ce <_dtoa_r+0x936>
 800b73e:	3301      	adds	r3, #1
 800b740:	1a9b      	subs	r3, r3, r2
 800b742:	2b04      	cmp	r3, #4
 800b744:	dd3f      	ble.n	800b7c6 <_dtoa_r+0x92e>
 800b746:	231c      	movs	r3, #28
 800b748:	1a9b      	subs	r3, r3, r2
 800b74a:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800b74c:	18e4      	adds	r4, r4, r3
 800b74e:	18d2      	adds	r2, r2, r3
 800b750:	920a      	str	r2, [sp, #40]	; 0x28
 800b752:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800b754:	18d3      	adds	r3, r2, r3
 800b756:	930c      	str	r3, [sp, #48]	; 0x30
 800b758:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800b75a:	2b00      	cmp	r3, #0
 800b75c:	dd05      	ble.n	800b76a <_dtoa_r+0x8d2>
 800b75e:	001a      	movs	r2, r3
 800b760:	9905      	ldr	r1, [sp, #20]
 800b762:	9804      	ldr	r0, [sp, #16]
 800b764:	f7fd fce8 	bl	8009138 <__lshift>
 800b768:	9005      	str	r0, [sp, #20]
 800b76a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800b76c:	2b00      	cmp	r3, #0
 800b76e:	dd05      	ble.n	800b77c <_dtoa_r+0x8e4>
 800b770:	0031      	movs	r1, r6
 800b772:	001a      	movs	r2, r3
 800b774:	9804      	ldr	r0, [sp, #16]
 800b776:	f7fd fcdf 	bl	8009138 <__lshift>
 800b77a:	0006      	movs	r6, r0
 800b77c:	9b16      	ldr	r3, [sp, #88]	; 0x58
 800b77e:	2b00      	cmp	r3, #0
 800b780:	d027      	beq.n	800b7d2 <_dtoa_r+0x93a>
 800b782:	0031      	movs	r1, r6
 800b784:	9805      	ldr	r0, [sp, #20]
 800b786:	f7fd fd45 	bl	8009214 <__mcmp>
 800b78a:	2800      	cmp	r0, #0
 800b78c:	da21      	bge.n	800b7d2 <_dtoa_r+0x93a>
 800b78e:	9b03      	ldr	r3, [sp, #12]
 800b790:	220a      	movs	r2, #10
 800b792:	3b01      	subs	r3, #1
 800b794:	9303      	str	r3, [sp, #12]
 800b796:	9905      	ldr	r1, [sp, #20]
 800b798:	2300      	movs	r3, #0
 800b79a:	9804      	ldr	r0, [sp, #16]
 800b79c:	f7fd fb36 	bl	8008e0c <__multadd>
 800b7a0:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800b7a2:	9005      	str	r0, [sp, #20]
 800b7a4:	2b00      	cmp	r3, #0
 800b7a6:	d100      	bne.n	800b7aa <_dtoa_r+0x912>
 800b7a8:	e15d      	b.n	800ba66 <_dtoa_r+0xbce>
 800b7aa:	2300      	movs	r3, #0
 800b7ac:	0039      	movs	r1, r7
 800b7ae:	220a      	movs	r2, #10
 800b7b0:	9804      	ldr	r0, [sp, #16]
 800b7b2:	f7fd fb2b 	bl	8008e0c <__multadd>
 800b7b6:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800b7b8:	0007      	movs	r7, r0
 800b7ba:	2b00      	cmp	r3, #0
 800b7bc:	dc49      	bgt.n	800b852 <_dtoa_r+0x9ba>
 800b7be:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800b7c0:	2b02      	cmp	r3, #2
 800b7c2:	dc0e      	bgt.n	800b7e2 <_dtoa_r+0x94a>
 800b7c4:	e045      	b.n	800b852 <_dtoa_r+0x9ba>
 800b7c6:	2b04      	cmp	r3, #4
 800b7c8:	d0c6      	beq.n	800b758 <_dtoa_r+0x8c0>
 800b7ca:	331c      	adds	r3, #28
 800b7cc:	e7bd      	b.n	800b74a <_dtoa_r+0x8b2>
 800b7ce:	0013      	movs	r3, r2
 800b7d0:	e7fb      	b.n	800b7ca <_dtoa_r+0x932>
 800b7d2:	9b07      	ldr	r3, [sp, #28]
 800b7d4:	2b00      	cmp	r3, #0
 800b7d6:	dc36      	bgt.n	800b846 <_dtoa_r+0x9ae>
 800b7d8:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800b7da:	2b02      	cmp	r3, #2
 800b7dc:	dd33      	ble.n	800b846 <_dtoa_r+0x9ae>
 800b7de:	9b07      	ldr	r3, [sp, #28]
 800b7e0:	930b      	str	r3, [sp, #44]	; 0x2c
 800b7e2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800b7e4:	2b00      	cmp	r3, #0
 800b7e6:	d10c      	bne.n	800b802 <_dtoa_r+0x96a>
 800b7e8:	0031      	movs	r1, r6
 800b7ea:	2205      	movs	r2, #5
 800b7ec:	9804      	ldr	r0, [sp, #16]
 800b7ee:	f7fd fb0d 	bl	8008e0c <__multadd>
 800b7f2:	0006      	movs	r6, r0
 800b7f4:	0001      	movs	r1, r0
 800b7f6:	9805      	ldr	r0, [sp, #20]
 800b7f8:	f7fd fd0c 	bl	8009214 <__mcmp>
 800b7fc:	2800      	cmp	r0, #0
 800b7fe:	dd00      	ble.n	800b802 <_dtoa_r+0x96a>
 800b800:	e59f      	b.n	800b342 <_dtoa_r+0x4aa>
 800b802:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 800b804:	43db      	mvns	r3, r3
 800b806:	9303      	str	r3, [sp, #12]
 800b808:	9b06      	ldr	r3, [sp, #24]
 800b80a:	9308      	str	r3, [sp, #32]
 800b80c:	2500      	movs	r5, #0
 800b80e:	0031      	movs	r1, r6
 800b810:	9804      	ldr	r0, [sp, #16]
 800b812:	f7fd faf1 	bl	8008df8 <_Bfree>
 800b816:	2f00      	cmp	r7, #0
 800b818:	d100      	bne.n	800b81c <_dtoa_r+0x984>
 800b81a:	e6a3      	b.n	800b564 <_dtoa_r+0x6cc>
 800b81c:	2d00      	cmp	r5, #0
 800b81e:	d005      	beq.n	800b82c <_dtoa_r+0x994>
 800b820:	42bd      	cmp	r5, r7
 800b822:	d003      	beq.n	800b82c <_dtoa_r+0x994>
 800b824:	0029      	movs	r1, r5
 800b826:	9804      	ldr	r0, [sp, #16]
 800b828:	f7fd fae6 	bl	8008df8 <_Bfree>
 800b82c:	0039      	movs	r1, r7
 800b82e:	9804      	ldr	r0, [sp, #16]
 800b830:	f7fd fae2 	bl	8008df8 <_Bfree>
 800b834:	e696      	b.n	800b564 <_dtoa_r+0x6cc>
 800b836:	2600      	movs	r6, #0
 800b838:	0037      	movs	r7, r6
 800b83a:	e7e2      	b.n	800b802 <_dtoa_r+0x96a>
 800b83c:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800b83e:	9e12      	ldr	r6, [sp, #72]	; 0x48
 800b840:	9303      	str	r3, [sp, #12]
 800b842:	0037      	movs	r7, r6
 800b844:	e57d      	b.n	800b342 <_dtoa_r+0x4aa>
 800b846:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800b848:	2b00      	cmp	r3, #0
 800b84a:	d100      	bne.n	800b84e <_dtoa_r+0x9b6>
 800b84c:	e0c3      	b.n	800b9d6 <_dtoa_r+0xb3e>
 800b84e:	9b07      	ldr	r3, [sp, #28]
 800b850:	930b      	str	r3, [sp, #44]	; 0x2c
 800b852:	2c00      	cmp	r4, #0
 800b854:	dd05      	ble.n	800b862 <_dtoa_r+0x9ca>
 800b856:	0039      	movs	r1, r7
 800b858:	0022      	movs	r2, r4
 800b85a:	9804      	ldr	r0, [sp, #16]
 800b85c:	f7fd fc6c 	bl	8009138 <__lshift>
 800b860:	0007      	movs	r7, r0
 800b862:	0038      	movs	r0, r7
 800b864:	2d00      	cmp	r5, #0
 800b866:	d024      	beq.n	800b8b2 <_dtoa_r+0xa1a>
 800b868:	6879      	ldr	r1, [r7, #4]
 800b86a:	9804      	ldr	r0, [sp, #16]
 800b86c:	f7fd fa9c 	bl	8008da8 <_Balloc>
 800b870:	1e04      	subs	r4, r0, #0
 800b872:	d111      	bne.n	800b898 <_dtoa_r+0xa00>
 800b874:	0022      	movs	r2, r4
 800b876:	4b05      	ldr	r3, [pc, #20]	; (800b88c <_dtoa_r+0x9f4>)
 800b878:	4805      	ldr	r0, [pc, #20]	; (800b890 <_dtoa_r+0x9f8>)
 800b87a:	4906      	ldr	r1, [pc, #24]	; (800b894 <_dtoa_r+0x9fc>)
 800b87c:	e43c      	b.n	800b0f8 <_dtoa_r+0x260>
 800b87e:	46c0      	nop			; (mov r8, r8)
 800b880:	40240000 	.word	0x40240000
 800b884:	00000433 	.word	0x00000433
 800b888:	7ff00000 	.word	0x7ff00000
 800b88c:	0800eb73 	.word	0x0800eb73
 800b890:	0800ed79 	.word	0x0800ed79
 800b894:	000002ef 	.word	0x000002ef
 800b898:	0039      	movs	r1, r7
 800b89a:	693a      	ldr	r2, [r7, #16]
 800b89c:	310c      	adds	r1, #12
 800b89e:	3202      	adds	r2, #2
 800b8a0:	0092      	lsls	r2, r2, #2
 800b8a2:	300c      	adds	r0, #12
 800b8a4:	f7fc ff26 	bl	80086f4 <memcpy>
 800b8a8:	2201      	movs	r2, #1
 800b8aa:	0021      	movs	r1, r4
 800b8ac:	9804      	ldr	r0, [sp, #16]
 800b8ae:	f7fd fc43 	bl	8009138 <__lshift>
 800b8b2:	9b06      	ldr	r3, [sp, #24]
 800b8b4:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800b8b6:	9307      	str	r3, [sp, #28]
 800b8b8:	3b01      	subs	r3, #1
 800b8ba:	189b      	adds	r3, r3, r2
 800b8bc:	2201      	movs	r2, #1
 800b8be:	003d      	movs	r5, r7
 800b8c0:	0007      	movs	r7, r0
 800b8c2:	930e      	str	r3, [sp, #56]	; 0x38
 800b8c4:	9b08      	ldr	r3, [sp, #32]
 800b8c6:	4013      	ands	r3, r2
 800b8c8:	930d      	str	r3, [sp, #52]	; 0x34
 800b8ca:	0031      	movs	r1, r6
 800b8cc:	9805      	ldr	r0, [sp, #20]
 800b8ce:	f7ff fa53 	bl	800ad78 <quorem>
 800b8d2:	0029      	movs	r1, r5
 800b8d4:	0004      	movs	r4, r0
 800b8d6:	900b      	str	r0, [sp, #44]	; 0x2c
 800b8d8:	9805      	ldr	r0, [sp, #20]
 800b8da:	f7fd fc9b 	bl	8009214 <__mcmp>
 800b8de:	003a      	movs	r2, r7
 800b8e0:	900c      	str	r0, [sp, #48]	; 0x30
 800b8e2:	0031      	movs	r1, r6
 800b8e4:	9804      	ldr	r0, [sp, #16]
 800b8e6:	f7fd fcb1 	bl	800924c <__mdiff>
 800b8ea:	2201      	movs	r2, #1
 800b8ec:	68c3      	ldr	r3, [r0, #12]
 800b8ee:	3430      	adds	r4, #48	; 0x30
 800b8f0:	9008      	str	r0, [sp, #32]
 800b8f2:	920a      	str	r2, [sp, #40]	; 0x28
 800b8f4:	2b00      	cmp	r3, #0
 800b8f6:	d104      	bne.n	800b902 <_dtoa_r+0xa6a>
 800b8f8:	0001      	movs	r1, r0
 800b8fa:	9805      	ldr	r0, [sp, #20]
 800b8fc:	f7fd fc8a 	bl	8009214 <__mcmp>
 800b900:	900a      	str	r0, [sp, #40]	; 0x28
 800b902:	9908      	ldr	r1, [sp, #32]
 800b904:	9804      	ldr	r0, [sp, #16]
 800b906:	f7fd fa77 	bl	8008df8 <_Bfree>
 800b90a:	9b07      	ldr	r3, [sp, #28]
 800b90c:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800b90e:	3301      	adds	r3, #1
 800b910:	9308      	str	r3, [sp, #32]
 800b912:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800b914:	4313      	orrs	r3, r2
 800b916:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800b918:	4313      	orrs	r3, r2
 800b91a:	d109      	bne.n	800b930 <_dtoa_r+0xa98>
 800b91c:	2c39      	cmp	r4, #57	; 0x39
 800b91e:	d022      	beq.n	800b966 <_dtoa_r+0xace>
 800b920:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800b922:	2b00      	cmp	r3, #0
 800b924:	dd01      	ble.n	800b92a <_dtoa_r+0xa92>
 800b926:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
 800b928:	3431      	adds	r4, #49	; 0x31
 800b92a:	9b07      	ldr	r3, [sp, #28]
 800b92c:	701c      	strb	r4, [r3, #0]
 800b92e:	e76e      	b.n	800b80e <_dtoa_r+0x976>
 800b930:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800b932:	2b00      	cmp	r3, #0
 800b934:	db04      	blt.n	800b940 <_dtoa_r+0xaa8>
 800b936:	9a22      	ldr	r2, [sp, #136]	; 0x88
 800b938:	4313      	orrs	r3, r2
 800b93a:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800b93c:	4313      	orrs	r3, r2
 800b93e:	d11e      	bne.n	800b97e <_dtoa_r+0xae6>
 800b940:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800b942:	2b00      	cmp	r3, #0
 800b944:	ddf1      	ble.n	800b92a <_dtoa_r+0xa92>
 800b946:	9905      	ldr	r1, [sp, #20]
 800b948:	2201      	movs	r2, #1
 800b94a:	9804      	ldr	r0, [sp, #16]
 800b94c:	f7fd fbf4 	bl	8009138 <__lshift>
 800b950:	0031      	movs	r1, r6
 800b952:	9005      	str	r0, [sp, #20]
 800b954:	f7fd fc5e 	bl	8009214 <__mcmp>
 800b958:	2800      	cmp	r0, #0
 800b95a:	dc02      	bgt.n	800b962 <_dtoa_r+0xaca>
 800b95c:	d1e5      	bne.n	800b92a <_dtoa_r+0xa92>
 800b95e:	07e3      	lsls	r3, r4, #31
 800b960:	d5e3      	bpl.n	800b92a <_dtoa_r+0xa92>
 800b962:	2c39      	cmp	r4, #57	; 0x39
 800b964:	d1df      	bne.n	800b926 <_dtoa_r+0xa8e>
 800b966:	2339      	movs	r3, #57	; 0x39
 800b968:	9a07      	ldr	r2, [sp, #28]
 800b96a:	7013      	strb	r3, [r2, #0]
 800b96c:	9b08      	ldr	r3, [sp, #32]
 800b96e:	9308      	str	r3, [sp, #32]
 800b970:	3b01      	subs	r3, #1
 800b972:	781a      	ldrb	r2, [r3, #0]
 800b974:	2a39      	cmp	r2, #57	; 0x39
 800b976:	d063      	beq.n	800ba40 <_dtoa_r+0xba8>
 800b978:	3201      	adds	r2, #1
 800b97a:	701a      	strb	r2, [r3, #0]
 800b97c:	e747      	b.n	800b80e <_dtoa_r+0x976>
 800b97e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800b980:	2b00      	cmp	r3, #0
 800b982:	dd03      	ble.n	800b98c <_dtoa_r+0xaf4>
 800b984:	2c39      	cmp	r4, #57	; 0x39
 800b986:	d0ee      	beq.n	800b966 <_dtoa_r+0xace>
 800b988:	3401      	adds	r4, #1
 800b98a:	e7ce      	b.n	800b92a <_dtoa_r+0xa92>
 800b98c:	9b07      	ldr	r3, [sp, #28]
 800b98e:	9a07      	ldr	r2, [sp, #28]
 800b990:	701c      	strb	r4, [r3, #0]
 800b992:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800b994:	4293      	cmp	r3, r2
 800b996:	d03e      	beq.n	800ba16 <_dtoa_r+0xb7e>
 800b998:	2300      	movs	r3, #0
 800b99a:	220a      	movs	r2, #10
 800b99c:	9905      	ldr	r1, [sp, #20]
 800b99e:	9804      	ldr	r0, [sp, #16]
 800b9a0:	f7fd fa34 	bl	8008e0c <__multadd>
 800b9a4:	2300      	movs	r3, #0
 800b9a6:	9005      	str	r0, [sp, #20]
 800b9a8:	220a      	movs	r2, #10
 800b9aa:	0029      	movs	r1, r5
 800b9ac:	9804      	ldr	r0, [sp, #16]
 800b9ae:	42bd      	cmp	r5, r7
 800b9b0:	d106      	bne.n	800b9c0 <_dtoa_r+0xb28>
 800b9b2:	f7fd fa2b 	bl	8008e0c <__multadd>
 800b9b6:	0005      	movs	r5, r0
 800b9b8:	0007      	movs	r7, r0
 800b9ba:	9b08      	ldr	r3, [sp, #32]
 800b9bc:	9307      	str	r3, [sp, #28]
 800b9be:	e784      	b.n	800b8ca <_dtoa_r+0xa32>
 800b9c0:	f7fd fa24 	bl	8008e0c <__multadd>
 800b9c4:	0039      	movs	r1, r7
 800b9c6:	0005      	movs	r5, r0
 800b9c8:	2300      	movs	r3, #0
 800b9ca:	220a      	movs	r2, #10
 800b9cc:	9804      	ldr	r0, [sp, #16]
 800b9ce:	f7fd fa1d 	bl	8008e0c <__multadd>
 800b9d2:	0007      	movs	r7, r0
 800b9d4:	e7f1      	b.n	800b9ba <_dtoa_r+0xb22>
 800b9d6:	9b07      	ldr	r3, [sp, #28]
 800b9d8:	930b      	str	r3, [sp, #44]	; 0x2c
 800b9da:	2500      	movs	r5, #0
 800b9dc:	0031      	movs	r1, r6
 800b9de:	9805      	ldr	r0, [sp, #20]
 800b9e0:	f7ff f9ca 	bl	800ad78 <quorem>
 800b9e4:	9b06      	ldr	r3, [sp, #24]
 800b9e6:	3030      	adds	r0, #48	; 0x30
 800b9e8:	5558      	strb	r0, [r3, r5]
 800b9ea:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800b9ec:	3501      	adds	r5, #1
 800b9ee:	0004      	movs	r4, r0
 800b9f0:	42ab      	cmp	r3, r5
 800b9f2:	dd07      	ble.n	800ba04 <_dtoa_r+0xb6c>
 800b9f4:	2300      	movs	r3, #0
 800b9f6:	220a      	movs	r2, #10
 800b9f8:	9905      	ldr	r1, [sp, #20]
 800b9fa:	9804      	ldr	r0, [sp, #16]
 800b9fc:	f7fd fa06 	bl	8008e0c <__multadd>
 800ba00:	9005      	str	r0, [sp, #20]
 800ba02:	e7eb      	b.n	800b9dc <_dtoa_r+0xb44>
 800ba04:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800ba06:	2301      	movs	r3, #1
 800ba08:	2a00      	cmp	r2, #0
 800ba0a:	dd00      	ble.n	800ba0e <_dtoa_r+0xb76>
 800ba0c:	0013      	movs	r3, r2
 800ba0e:	2500      	movs	r5, #0
 800ba10:	9a06      	ldr	r2, [sp, #24]
 800ba12:	18d3      	adds	r3, r2, r3
 800ba14:	9308      	str	r3, [sp, #32]
 800ba16:	9905      	ldr	r1, [sp, #20]
 800ba18:	2201      	movs	r2, #1
 800ba1a:	9804      	ldr	r0, [sp, #16]
 800ba1c:	f7fd fb8c 	bl	8009138 <__lshift>
 800ba20:	0031      	movs	r1, r6
 800ba22:	9005      	str	r0, [sp, #20]
 800ba24:	f7fd fbf6 	bl	8009214 <__mcmp>
 800ba28:	2800      	cmp	r0, #0
 800ba2a:	dc9f      	bgt.n	800b96c <_dtoa_r+0xad4>
 800ba2c:	d101      	bne.n	800ba32 <_dtoa_r+0xb9a>
 800ba2e:	07e4      	lsls	r4, r4, #31
 800ba30:	d49c      	bmi.n	800b96c <_dtoa_r+0xad4>
 800ba32:	9b08      	ldr	r3, [sp, #32]
 800ba34:	9308      	str	r3, [sp, #32]
 800ba36:	3b01      	subs	r3, #1
 800ba38:	781a      	ldrb	r2, [r3, #0]
 800ba3a:	2a30      	cmp	r2, #48	; 0x30
 800ba3c:	d0fa      	beq.n	800ba34 <_dtoa_r+0xb9c>
 800ba3e:	e6e6      	b.n	800b80e <_dtoa_r+0x976>
 800ba40:	9a06      	ldr	r2, [sp, #24]
 800ba42:	429a      	cmp	r2, r3
 800ba44:	d193      	bne.n	800b96e <_dtoa_r+0xad6>
 800ba46:	9b03      	ldr	r3, [sp, #12]
 800ba48:	3301      	adds	r3, #1
 800ba4a:	9303      	str	r3, [sp, #12]
 800ba4c:	2331      	movs	r3, #49	; 0x31
 800ba4e:	7013      	strb	r3, [r2, #0]
 800ba50:	e6dd      	b.n	800b80e <_dtoa_r+0x976>
 800ba52:	4b09      	ldr	r3, [pc, #36]	; (800ba78 <_dtoa_r+0xbe0>)
 800ba54:	9a26      	ldr	r2, [sp, #152]	; 0x98
 800ba56:	9306      	str	r3, [sp, #24]
 800ba58:	4b08      	ldr	r3, [pc, #32]	; (800ba7c <_dtoa_r+0xbe4>)
 800ba5a:	2a00      	cmp	r2, #0
 800ba5c:	d001      	beq.n	800ba62 <_dtoa_r+0xbca>
 800ba5e:	f7ff fa4c 	bl	800aefa <_dtoa_r+0x62>
 800ba62:	f7ff fa4c 	bl	800aefe <_dtoa_r+0x66>
 800ba66:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800ba68:	2b00      	cmp	r3, #0
 800ba6a:	dcb6      	bgt.n	800b9da <_dtoa_r+0xb42>
 800ba6c:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800ba6e:	2b02      	cmp	r3, #2
 800ba70:	dd00      	ble.n	800ba74 <_dtoa_r+0xbdc>
 800ba72:	e6b6      	b.n	800b7e2 <_dtoa_r+0x94a>
 800ba74:	e7b1      	b.n	800b9da <_dtoa_r+0xb42>
 800ba76:	46c0      	nop			; (mov r8, r8)
 800ba78:	0800ed6c 	.word	0x0800ed6c
 800ba7c:	0800ed74 	.word	0x0800ed74

0800ba80 <fiprintf>:
 800ba80:	b40e      	push	{r1, r2, r3}
 800ba82:	b517      	push	{r0, r1, r2, r4, lr}
 800ba84:	4c05      	ldr	r4, [pc, #20]	; (800ba9c <fiprintf+0x1c>)
 800ba86:	ab05      	add	r3, sp, #20
 800ba88:	cb04      	ldmia	r3!, {r2}
 800ba8a:	0001      	movs	r1, r0
 800ba8c:	6820      	ldr	r0, [r4, #0]
 800ba8e:	9301      	str	r3, [sp, #4]
 800ba90:	f000 f8be 	bl	800bc10 <_vfiprintf_r>
 800ba94:	bc1e      	pop	{r1, r2, r3, r4}
 800ba96:	bc08      	pop	{r3}
 800ba98:	b003      	add	sp, #12
 800ba9a:	4718      	bx	r3
 800ba9c:	200002a8 	.word	0x200002a8

0800baa0 <__ssprint_r>:
 800baa0:	b5f0      	push	{r4, r5, r6, r7, lr}
 800baa2:	6813      	ldr	r3, [r2, #0]
 800baa4:	b087      	sub	sp, #28
 800baa6:	0017      	movs	r7, r2
 800baa8:	9303      	str	r3, [sp, #12]
 800baaa:	6893      	ldr	r3, [r2, #8]
 800baac:	2200      	movs	r2, #0
 800baae:	000c      	movs	r4, r1
 800bab0:	9005      	str	r0, [sp, #20]
 800bab2:	9202      	str	r2, [sp, #8]
 800bab4:	9201      	str	r2, [sp, #4]
 800bab6:	4293      	cmp	r3, r2
 800bab8:	d10d      	bne.n	800bad6 <__ssprint_r+0x36>
 800baba:	2000      	movs	r0, #0
 800babc:	2300      	movs	r3, #0
 800babe:	607b      	str	r3, [r7, #4]
 800bac0:	b007      	add	sp, #28
 800bac2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800bac4:	9b03      	ldr	r3, [sp, #12]
 800bac6:	681b      	ldr	r3, [r3, #0]
 800bac8:	9302      	str	r3, [sp, #8]
 800baca:	9b03      	ldr	r3, [sp, #12]
 800bacc:	685b      	ldr	r3, [r3, #4]
 800bace:	9301      	str	r3, [sp, #4]
 800bad0:	9b03      	ldr	r3, [sp, #12]
 800bad2:	3308      	adds	r3, #8
 800bad4:	9303      	str	r3, [sp, #12]
 800bad6:	9a01      	ldr	r2, [sp, #4]
 800bad8:	68a6      	ldr	r6, [r4, #8]
 800bada:	6823      	ldr	r3, [r4, #0]
 800badc:	2a00      	cmp	r2, #0
 800bade:	d0f1      	beq.n	800bac4 <__ssprint_r+0x24>
 800bae0:	42b2      	cmp	r2, r6
 800bae2:	d32e      	bcc.n	800bb42 <__ssprint_r+0xa2>
 800bae4:	2190      	movs	r1, #144	; 0x90
 800bae6:	89a2      	ldrh	r2, [r4, #12]
 800bae8:	00c9      	lsls	r1, r1, #3
 800baea:	420a      	tst	r2, r1
 800baec:	d029      	beq.n	800bb42 <__ssprint_r+0xa2>
 800baee:	2003      	movs	r0, #3
 800baf0:	6921      	ldr	r1, [r4, #16]
 800baf2:	1a5b      	subs	r3, r3, r1
 800baf4:	9304      	str	r3, [sp, #16]
 800baf6:	6963      	ldr	r3, [r4, #20]
 800baf8:	4343      	muls	r3, r0
 800bafa:	0fdd      	lsrs	r5, r3, #31
 800bafc:	18ed      	adds	r5, r5, r3
 800bafe:	9b04      	ldr	r3, [sp, #16]
 800bb00:	9801      	ldr	r0, [sp, #4]
 800bb02:	3301      	adds	r3, #1
 800bb04:	181b      	adds	r3, r3, r0
 800bb06:	106d      	asrs	r5, r5, #1
 800bb08:	42ab      	cmp	r3, r5
 800bb0a:	d900      	bls.n	800bb0e <__ssprint_r+0x6e>
 800bb0c:	001d      	movs	r5, r3
 800bb0e:	0552      	lsls	r2, r2, #21
 800bb10:	d532      	bpl.n	800bb78 <__ssprint_r+0xd8>
 800bb12:	0029      	movs	r1, r5
 800bb14:	9805      	ldr	r0, [sp, #20]
 800bb16:	f7fc ff11 	bl	800893c <_malloc_r>
 800bb1a:	1e06      	subs	r6, r0, #0
 800bb1c:	d036      	beq.n	800bb8c <__ssprint_r+0xec>
 800bb1e:	9a04      	ldr	r2, [sp, #16]
 800bb20:	6921      	ldr	r1, [r4, #16]
 800bb22:	f7fc fde7 	bl	80086f4 <memcpy>
 800bb26:	89a2      	ldrh	r2, [r4, #12]
 800bb28:	4b1e      	ldr	r3, [pc, #120]	; (800bba4 <__ssprint_r+0x104>)
 800bb2a:	401a      	ands	r2, r3
 800bb2c:	2380      	movs	r3, #128	; 0x80
 800bb2e:	4313      	orrs	r3, r2
 800bb30:	81a3      	strh	r3, [r4, #12]
 800bb32:	9b04      	ldr	r3, [sp, #16]
 800bb34:	6126      	str	r6, [r4, #16]
 800bb36:	18f6      	adds	r6, r6, r3
 800bb38:	6026      	str	r6, [r4, #0]
 800bb3a:	6165      	str	r5, [r4, #20]
 800bb3c:	9e01      	ldr	r6, [sp, #4]
 800bb3e:	1aed      	subs	r5, r5, r3
 800bb40:	60a5      	str	r5, [r4, #8]
 800bb42:	9b01      	ldr	r3, [sp, #4]
 800bb44:	429e      	cmp	r6, r3
 800bb46:	d900      	bls.n	800bb4a <__ssprint_r+0xaa>
 800bb48:	001e      	movs	r6, r3
 800bb4a:	0032      	movs	r2, r6
 800bb4c:	9902      	ldr	r1, [sp, #8]
 800bb4e:	6820      	ldr	r0, [r4, #0]
 800bb50:	f000 ff99 	bl	800ca86 <memmove>
 800bb54:	9a01      	ldr	r2, [sp, #4]
 800bb56:	68a3      	ldr	r3, [r4, #8]
 800bb58:	4694      	mov	ip, r2
 800bb5a:	1b9b      	subs	r3, r3, r6
 800bb5c:	60a3      	str	r3, [r4, #8]
 800bb5e:	6823      	ldr	r3, [r4, #0]
 800bb60:	199b      	adds	r3, r3, r6
 800bb62:	6023      	str	r3, [r4, #0]
 800bb64:	9b02      	ldr	r3, [sp, #8]
 800bb66:	4463      	add	r3, ip
 800bb68:	9302      	str	r3, [sp, #8]
 800bb6a:	68bb      	ldr	r3, [r7, #8]
 800bb6c:	1a9b      	subs	r3, r3, r2
 800bb6e:	60bb      	str	r3, [r7, #8]
 800bb70:	d0a3      	beq.n	800baba <__ssprint_r+0x1a>
 800bb72:	2300      	movs	r3, #0
 800bb74:	9301      	str	r3, [sp, #4]
 800bb76:	e7ae      	b.n	800bad6 <__ssprint_r+0x36>
 800bb78:	002a      	movs	r2, r5
 800bb7a:	9805      	ldr	r0, [sp, #20]
 800bb7c:	f000 ff9e 	bl	800cabc <_realloc_r>
 800bb80:	1e06      	subs	r6, r0, #0
 800bb82:	d1d6      	bne.n	800bb32 <__ssprint_r+0x92>
 800bb84:	6921      	ldr	r1, [r4, #16]
 800bb86:	9805      	ldr	r0, [sp, #20]
 800bb88:	f7fc fe26 	bl	80087d8 <_free_r>
 800bb8c:	230c      	movs	r3, #12
 800bb8e:	9a05      	ldr	r2, [sp, #20]
 800bb90:	2001      	movs	r0, #1
 800bb92:	6013      	str	r3, [r2, #0]
 800bb94:	89a2      	ldrh	r2, [r4, #12]
 800bb96:	3334      	adds	r3, #52	; 0x34
 800bb98:	4313      	orrs	r3, r2
 800bb9a:	81a3      	strh	r3, [r4, #12]
 800bb9c:	2300      	movs	r3, #0
 800bb9e:	4240      	negs	r0, r0
 800bba0:	60bb      	str	r3, [r7, #8]
 800bba2:	e78b      	b.n	800babc <__ssprint_r+0x1c>
 800bba4:	fffffb7f 	.word	0xfffffb7f

0800bba8 <__sprint_r>:
 800bba8:	b5f0      	push	{r4, r5, r6, r7, lr}
 800bbaa:	6893      	ldr	r3, [r2, #8]
 800bbac:	b085      	sub	sp, #20
 800bbae:	9001      	str	r0, [sp, #4]
 800bbb0:	000d      	movs	r5, r1
 800bbb2:	0014      	movs	r4, r2
 800bbb4:	1e18      	subs	r0, r3, #0
 800bbb6:	d018      	beq.n	800bbea <__sprint_r+0x42>
 800bbb8:	6e4b      	ldr	r3, [r1, #100]	; 0x64
 800bbba:	049b      	lsls	r3, r3, #18
 800bbbc:	d524      	bpl.n	800bc08 <__sprint_r+0x60>
 800bbbe:	6817      	ldr	r7, [r2, #0]
 800bbc0:	2600      	movs	r6, #0
 800bbc2:	683b      	ldr	r3, [r7, #0]
 800bbc4:	9302      	str	r3, [sp, #8]
 800bbc6:	687b      	ldr	r3, [r7, #4]
 800bbc8:	9300      	str	r3, [sp, #0]
 800bbca:	089b      	lsrs	r3, r3, #2
 800bbcc:	9303      	str	r3, [sp, #12]
 800bbce:	9b03      	ldr	r3, [sp, #12]
 800bbd0:	42b3      	cmp	r3, r6
 800bbd2:	dc0e      	bgt.n	800bbf2 <__sprint_r+0x4a>
 800bbd4:	2203      	movs	r2, #3
 800bbd6:	9b00      	ldr	r3, [sp, #0]
 800bbd8:	68a0      	ldr	r0, [r4, #8]
 800bbda:	4393      	bics	r3, r2
 800bbdc:	1ac0      	subs	r0, r0, r3
 800bbde:	60a0      	str	r0, [r4, #8]
 800bbe0:	3708      	adds	r7, #8
 800bbe2:	2800      	cmp	r0, #0
 800bbe4:	d1ec      	bne.n	800bbc0 <__sprint_r+0x18>
 800bbe6:	2300      	movs	r3, #0
 800bbe8:	60a3      	str	r3, [r4, #8]
 800bbea:	2300      	movs	r3, #0
 800bbec:	6063      	str	r3, [r4, #4]
 800bbee:	b005      	add	sp, #20
 800bbf0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800bbf2:	9902      	ldr	r1, [sp, #8]
 800bbf4:	00b3      	lsls	r3, r6, #2
 800bbf6:	58c9      	ldr	r1, [r1, r3]
 800bbf8:	002a      	movs	r2, r5
 800bbfa:	9801      	ldr	r0, [sp, #4]
 800bbfc:	f000 ff1a 	bl	800ca34 <_fputwc_r>
 800bc00:	1c43      	adds	r3, r0, #1
 800bc02:	d0f0      	beq.n	800bbe6 <__sprint_r+0x3e>
 800bc04:	3601      	adds	r6, #1
 800bc06:	e7e2      	b.n	800bbce <__sprint_r+0x26>
 800bc08:	9801      	ldr	r0, [sp, #4]
 800bc0a:	f000 fd13 	bl	800c634 <__sfvwrite_r>
 800bc0e:	e7ea      	b.n	800bbe6 <__sprint_r+0x3e>

0800bc10 <_vfiprintf_r>:
 800bc10:	b5f0      	push	{r4, r5, r6, r7, lr}
 800bc12:	b0c1      	sub	sp, #260	; 0x104
 800bc14:	001c      	movs	r4, r3
 800bc16:	001f      	movs	r7, r3
 800bc18:	9006      	str	r0, [sp, #24]
 800bc1a:	9103      	str	r1, [sp, #12]
 800bc1c:	9207      	str	r2, [sp, #28]
 800bc1e:	2800      	cmp	r0, #0
 800bc20:	d004      	beq.n	800bc2c <_vfiprintf_r+0x1c>
 800bc22:	6b43      	ldr	r3, [r0, #52]	; 0x34
 800bc24:	2b00      	cmp	r3, #0
 800bc26:	d101      	bne.n	800bc2c <_vfiprintf_r+0x1c>
 800bc28:	f7fc fc04 	bl	8008434 <__sinit>
 800bc2c:	9b03      	ldr	r3, [sp, #12]
 800bc2e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800bc30:	07db      	lsls	r3, r3, #31
 800bc32:	d407      	bmi.n	800bc44 <_vfiprintf_r+0x34>
 800bc34:	9b03      	ldr	r3, [sp, #12]
 800bc36:	899b      	ldrh	r3, [r3, #12]
 800bc38:	059b      	lsls	r3, r3, #22
 800bc3a:	d403      	bmi.n	800bc44 <_vfiprintf_r+0x34>
 800bc3c:	9b03      	ldr	r3, [sp, #12]
 800bc3e:	6d98      	ldr	r0, [r3, #88]	; 0x58
 800bc40:	f7fc fd56 	bl	80086f0 <__retarget_lock_acquire_recursive>
 800bc44:	9b03      	ldr	r3, [sp, #12]
 800bc46:	220c      	movs	r2, #12
 800bc48:	5e9a      	ldrsh	r2, [r3, r2]
 800bc4a:	2380      	movs	r3, #128	; 0x80
 800bc4c:	019b      	lsls	r3, r3, #6
 800bc4e:	421a      	tst	r2, r3
 800bc50:	d107      	bne.n	800bc62 <_vfiprintf_r+0x52>
 800bc52:	4313      	orrs	r3, r2
 800bc54:	9a03      	ldr	r2, [sp, #12]
 800bc56:	8193      	strh	r3, [r2, #12]
 800bc58:	6e53      	ldr	r3, [r2, #100]	; 0x64
 800bc5a:	4aa3      	ldr	r2, [pc, #652]	; (800bee8 <_vfiprintf_r+0x2d8>)
 800bc5c:	4013      	ands	r3, r2
 800bc5e:	9a03      	ldr	r2, [sp, #12]
 800bc60:	6653      	str	r3, [r2, #100]	; 0x64
 800bc62:	9b03      	ldr	r3, [sp, #12]
 800bc64:	899b      	ldrh	r3, [r3, #12]
 800bc66:	071b      	lsls	r3, r3, #28
 800bc68:	d503      	bpl.n	800bc72 <_vfiprintf_r+0x62>
 800bc6a:	9b03      	ldr	r3, [sp, #12]
 800bc6c:	691b      	ldr	r3, [r3, #16]
 800bc6e:	2b00      	cmp	r3, #0
 800bc70:	d118      	bne.n	800bca4 <_vfiprintf_r+0x94>
 800bc72:	9903      	ldr	r1, [sp, #12]
 800bc74:	9806      	ldr	r0, [sp, #24]
 800bc76:	f000 fe3b 	bl	800c8f0 <__swsetup_r>
 800bc7a:	2800      	cmp	r0, #0
 800bc7c:	d012      	beq.n	800bca4 <_vfiprintf_r+0x94>
 800bc7e:	9b03      	ldr	r3, [sp, #12]
 800bc80:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800bc82:	07db      	lsls	r3, r3, #31
 800bc84:	d505      	bpl.n	800bc92 <_vfiprintf_r+0x82>
 800bc86:	2301      	movs	r3, #1
 800bc88:	425b      	negs	r3, r3
 800bc8a:	9308      	str	r3, [sp, #32]
 800bc8c:	9808      	ldr	r0, [sp, #32]
 800bc8e:	b041      	add	sp, #260	; 0x104
 800bc90:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800bc92:	9b03      	ldr	r3, [sp, #12]
 800bc94:	899b      	ldrh	r3, [r3, #12]
 800bc96:	059b      	lsls	r3, r3, #22
 800bc98:	d4f5      	bmi.n	800bc86 <_vfiprintf_r+0x76>
 800bc9a:	9b03      	ldr	r3, [sp, #12]
 800bc9c:	6d98      	ldr	r0, [r3, #88]	; 0x58
 800bc9e:	f7fc fd28 	bl	80086f2 <__retarget_lock_release_recursive>
 800bca2:	e7f0      	b.n	800bc86 <_vfiprintf_r+0x76>
 800bca4:	221a      	movs	r2, #26
 800bca6:	9b03      	ldr	r3, [sp, #12]
 800bca8:	899b      	ldrh	r3, [r3, #12]
 800bcaa:	401a      	ands	r2, r3
 800bcac:	2a0a      	cmp	r2, #10
 800bcae:	d116      	bne.n	800bcde <_vfiprintf_r+0xce>
 800bcb0:	9a03      	ldr	r2, [sp, #12]
 800bcb2:	210e      	movs	r1, #14
 800bcb4:	5e52      	ldrsh	r2, [r2, r1]
 800bcb6:	2a00      	cmp	r2, #0
 800bcb8:	db11      	blt.n	800bcde <_vfiprintf_r+0xce>
 800bcba:	9a03      	ldr	r2, [sp, #12]
 800bcbc:	6e52      	ldr	r2, [r2, #100]	; 0x64
 800bcbe:	07d2      	lsls	r2, r2, #31
 800bcc0:	d405      	bmi.n	800bcce <_vfiprintf_r+0xbe>
 800bcc2:	059b      	lsls	r3, r3, #22
 800bcc4:	d403      	bmi.n	800bcce <_vfiprintf_r+0xbe>
 800bcc6:	9b03      	ldr	r3, [sp, #12]
 800bcc8:	6d98      	ldr	r0, [r3, #88]	; 0x58
 800bcca:	f7fc fd12 	bl	80086f2 <__retarget_lock_release_recursive>
 800bcce:	0023      	movs	r3, r4
 800bcd0:	9a07      	ldr	r2, [sp, #28]
 800bcd2:	9903      	ldr	r1, [sp, #12]
 800bcd4:	9806      	ldr	r0, [sp, #24]
 800bcd6:	f000 fc69 	bl	800c5ac <__sbprintf>
 800bcda:	9008      	str	r0, [sp, #32]
 800bcdc:	e7d6      	b.n	800bc8c <_vfiprintf_r+0x7c>
 800bcde:	2300      	movs	r3, #0
 800bce0:	ad17      	add	r5, sp, #92	; 0x5c
 800bce2:	9514      	str	r5, [sp, #80]	; 0x50
 800bce4:	9316      	str	r3, [sp, #88]	; 0x58
 800bce6:	9315      	str	r3, [sp, #84]	; 0x54
 800bce8:	930c      	str	r3, [sp, #48]	; 0x30
 800bcea:	930d      	str	r3, [sp, #52]	; 0x34
 800bcec:	930e      	str	r3, [sp, #56]	; 0x38
 800bcee:	930f      	str	r3, [sp, #60]	; 0x3c
 800bcf0:	9308      	str	r3, [sp, #32]
 800bcf2:	9c07      	ldr	r4, [sp, #28]
 800bcf4:	7823      	ldrb	r3, [r4, #0]
 800bcf6:	2b00      	cmp	r3, #0
 800bcf8:	d002      	beq.n	800bd00 <_vfiprintf_r+0xf0>
 800bcfa:	2b25      	cmp	r3, #37	; 0x25
 800bcfc:	d000      	beq.n	800bd00 <_vfiprintf_r+0xf0>
 800bcfe:	e08d      	b.n	800be1c <_vfiprintf_r+0x20c>
 800bd00:	9b07      	ldr	r3, [sp, #28]
 800bd02:	1ae6      	subs	r6, r4, r3
 800bd04:	429c      	cmp	r4, r3
 800bd06:	d016      	beq.n	800bd36 <_vfiprintf_r+0x126>
 800bd08:	602b      	str	r3, [r5, #0]
 800bd0a:	9b16      	ldr	r3, [sp, #88]	; 0x58
 800bd0c:	606e      	str	r6, [r5, #4]
 800bd0e:	199b      	adds	r3, r3, r6
 800bd10:	9316      	str	r3, [sp, #88]	; 0x58
 800bd12:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800bd14:	3508      	adds	r5, #8
 800bd16:	3301      	adds	r3, #1
 800bd18:	9315      	str	r3, [sp, #84]	; 0x54
 800bd1a:	2b07      	cmp	r3, #7
 800bd1c:	dd08      	ble.n	800bd30 <_vfiprintf_r+0x120>
 800bd1e:	9903      	ldr	r1, [sp, #12]
 800bd20:	9806      	ldr	r0, [sp, #24]
 800bd22:	aa14      	add	r2, sp, #80	; 0x50
 800bd24:	f7ff ff40 	bl	800bba8 <__sprint_r>
 800bd28:	2800      	cmp	r0, #0
 800bd2a:	d000      	beq.n	800bd2e <_vfiprintf_r+0x11e>
 800bd2c:	e3d9      	b.n	800c4e2 <_vfiprintf_r+0x8d2>
 800bd2e:	ad17      	add	r5, sp, #92	; 0x5c
 800bd30:	9b08      	ldr	r3, [sp, #32]
 800bd32:	199b      	adds	r3, r3, r6
 800bd34:	9308      	str	r3, [sp, #32]
 800bd36:	7823      	ldrb	r3, [r4, #0]
 800bd38:	2b00      	cmp	r3, #0
 800bd3a:	d101      	bne.n	800bd40 <_vfiprintf_r+0x130>
 800bd3c:	f000 fbf6 	bl	800c52c <_vfiprintf_r+0x91c>
 800bd40:	2200      	movs	r2, #0
 800bd42:	a912      	add	r1, sp, #72	; 0x48
 800bd44:	70ca      	strb	r2, [r1, #3]
 800bd46:	2101      	movs	r1, #1
 800bd48:	1c63      	adds	r3, r4, #1
 800bd4a:	0014      	movs	r4, r2
 800bd4c:	4249      	negs	r1, r1
 800bd4e:	9105      	str	r1, [sp, #20]
 800bd50:	9209      	str	r2, [sp, #36]	; 0x24
 800bd52:	1c5a      	adds	r2, r3, #1
 800bd54:	781b      	ldrb	r3, [r3, #0]
 800bd56:	9207      	str	r2, [sp, #28]
 800bd58:	0018      	movs	r0, r3
 800bd5a:	3820      	subs	r0, #32
 800bd5c:	285a      	cmp	r0, #90	; 0x5a
 800bd5e:	d900      	bls.n	800bd62 <_vfiprintf_r+0x152>
 800bd60:	e362      	b.n	800c428 <_vfiprintf_r+0x818>
 800bd62:	f7f4 f9e1 	bl	8000128 <__gnu_thumb1_case_uhi>
 800bd66:	0078      	.short	0x0078
 800bd68:	03610361 	.word	0x03610361
 800bd6c:	03610081 	.word	0x03610081
 800bd70:	03610361 	.word	0x03610361
 800bd74:	0361005d 	.word	0x0361005d
 800bd78:	00830361 	.word	0x00830361
 800bd7c:	0361008b 	.word	0x0361008b
 800bd80:	008f0089 	.word	0x008f0089
 800bd84:	00ad0361 	.word	0x00ad0361
 800bd88:	00af00af 	.word	0x00af00af
 800bd8c:	00af00af 	.word	0x00af00af
 800bd90:	00af00af 	.word	0x00af00af
 800bd94:	00af00af 	.word	0x00af00af
 800bd98:	036100af 	.word	0x036100af
 800bd9c:	03610361 	.word	0x03610361
 800bda0:	03610361 	.word	0x03610361
 800bda4:	03610361 	.word	0x03610361
 800bda8:	03610361 	.word	0x03610361
 800bdac:	00e600da 	.word	0x00e600da
 800bdb0:	03610361 	.word	0x03610361
 800bdb4:	03610361 	.word	0x03610361
 800bdb8:	03610361 	.word	0x03610361
 800bdbc:	03610361 	.word	0x03610361
 800bdc0:	03610361 	.word	0x03610361
 800bdc4:	03610143 	.word	0x03610143
 800bdc8:	03610361 	.word	0x03610361
 800bdcc:	03610182 	.word	0x03610182
 800bdd0:	0361027c 	.word	0x0361027c
 800bdd4:	02ae0361 	.word	0x02ae0361
 800bdd8:	03610361 	.word	0x03610361
 800bddc:	03610361 	.word	0x03610361
 800bde0:	03610361 	.word	0x03610361
 800bde4:	03610361 	.word	0x03610361
 800bde8:	03610361 	.word	0x03610361
 800bdec:	00e800da 	.word	0x00e800da
 800bdf0:	03610361 	.word	0x03610361
 800bdf4:	00c30361 	.word	0x00c30361
 800bdf8:	00d600e8 	.word	0x00d600e8
 800bdfc:	00cf0361 	.word	0x00cf0361
 800be00:	01260361 	.word	0x01260361
 800be04:	01740145 	.word	0x01740145
 800be08:	036100d6 	.word	0x036100d6
 800be0c:	007f0182 	.word	0x007f0182
 800be10:	0361027e 	.word	0x0361027e
 800be14:	02cd0361 	.word	0x02cd0361
 800be18:	007f0361 	.word	0x007f0361
 800be1c:	3401      	adds	r4, #1
 800be1e:	e769      	b.n	800bcf4 <_vfiprintf_r+0xe4>
 800be20:	9806      	ldr	r0, [sp, #24]
 800be22:	f7fe fe8b 	bl	800ab3c <_localeconv_r>
 800be26:	6843      	ldr	r3, [r0, #4]
 800be28:	0018      	movs	r0, r3
 800be2a:	930f      	str	r3, [sp, #60]	; 0x3c
 800be2c:	f7f4 f96a 	bl	8000104 <strlen>
 800be30:	900e      	str	r0, [sp, #56]	; 0x38
 800be32:	9806      	ldr	r0, [sp, #24]
 800be34:	f7fe fe82 	bl	800ab3c <_localeconv_r>
 800be38:	6883      	ldr	r3, [r0, #8]
 800be3a:	930d      	str	r3, [sp, #52]	; 0x34
 800be3c:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800be3e:	2b00      	cmp	r3, #0
 800be40:	d010      	beq.n	800be64 <_vfiprintf_r+0x254>
 800be42:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800be44:	2b00      	cmp	r3, #0
 800be46:	d00d      	beq.n	800be64 <_vfiprintf_r+0x254>
 800be48:	781b      	ldrb	r3, [r3, #0]
 800be4a:	2b00      	cmp	r3, #0
 800be4c:	d00a      	beq.n	800be64 <_vfiprintf_r+0x254>
 800be4e:	2380      	movs	r3, #128	; 0x80
 800be50:	00db      	lsls	r3, r3, #3
 800be52:	431c      	orrs	r4, r3
 800be54:	e006      	b.n	800be64 <_vfiprintf_r+0x254>
 800be56:	ab12      	add	r3, sp, #72	; 0x48
 800be58:	78da      	ldrb	r2, [r3, #3]
 800be5a:	3303      	adds	r3, #3
 800be5c:	2a00      	cmp	r2, #0
 800be5e:	d101      	bne.n	800be64 <_vfiprintf_r+0x254>
 800be60:	3220      	adds	r2, #32
 800be62:	701a      	strb	r2, [r3, #0]
 800be64:	9b07      	ldr	r3, [sp, #28]
 800be66:	e774      	b.n	800bd52 <_vfiprintf_r+0x142>
 800be68:	2301      	movs	r3, #1
 800be6a:	e7f2      	b.n	800be52 <_vfiprintf_r+0x242>
 800be6c:	cf08      	ldmia	r7!, {r3}
 800be6e:	9309      	str	r3, [sp, #36]	; 0x24
 800be70:	2b00      	cmp	r3, #0
 800be72:	daf7      	bge.n	800be64 <_vfiprintf_r+0x254>
 800be74:	425b      	negs	r3, r3
 800be76:	9309      	str	r3, [sp, #36]	; 0x24
 800be78:	2304      	movs	r3, #4
 800be7a:	e7ea      	b.n	800be52 <_vfiprintf_r+0x242>
 800be7c:	222b      	movs	r2, #43	; 0x2b
 800be7e:	ab12      	add	r3, sp, #72	; 0x48
 800be80:	70da      	strb	r2, [r3, #3]
 800be82:	e7ef      	b.n	800be64 <_vfiprintf_r+0x254>
 800be84:	9b07      	ldr	r3, [sp, #28]
 800be86:	1c5a      	adds	r2, r3, #1
 800be88:	781b      	ldrb	r3, [r3, #0]
 800be8a:	2b2a      	cmp	r3, #42	; 0x2a
 800be8c:	d00f      	beq.n	800beae <_vfiprintf_r+0x29e>
 800be8e:	2100      	movs	r1, #0
 800be90:	9105      	str	r1, [sp, #20]
 800be92:	0019      	movs	r1, r3
 800be94:	3930      	subs	r1, #48	; 0x30
 800be96:	9207      	str	r2, [sp, #28]
 800be98:	2909      	cmp	r1, #9
 800be9a:	d900      	bls.n	800be9e <_vfiprintf_r+0x28e>
 800be9c:	e75c      	b.n	800bd58 <_vfiprintf_r+0x148>
 800be9e:	200a      	movs	r0, #10
 800bea0:	9b05      	ldr	r3, [sp, #20]
 800bea2:	4343      	muls	r3, r0
 800bea4:	185b      	adds	r3, r3, r1
 800bea6:	9305      	str	r3, [sp, #20]
 800bea8:	7813      	ldrb	r3, [r2, #0]
 800beaa:	3201      	adds	r2, #1
 800beac:	e7f1      	b.n	800be92 <_vfiprintf_r+0x282>
 800beae:	cf08      	ldmia	r7!, {r3}
 800beb0:	9305      	str	r3, [sp, #20]
 800beb2:	2b00      	cmp	r3, #0
 800beb4:	da02      	bge.n	800bebc <_vfiprintf_r+0x2ac>
 800beb6:	2301      	movs	r3, #1
 800beb8:	425b      	negs	r3, r3
 800beba:	9305      	str	r3, [sp, #20]
 800bebc:	9207      	str	r2, [sp, #28]
 800bebe:	e7d1      	b.n	800be64 <_vfiprintf_r+0x254>
 800bec0:	2380      	movs	r3, #128	; 0x80
 800bec2:	e7c6      	b.n	800be52 <_vfiprintf_r+0x242>
 800bec4:	2100      	movs	r1, #0
 800bec6:	9a07      	ldr	r2, [sp, #28]
 800bec8:	9109      	str	r1, [sp, #36]	; 0x24
 800beca:	200a      	movs	r0, #10
 800becc:	9909      	ldr	r1, [sp, #36]	; 0x24
 800bece:	3b30      	subs	r3, #48	; 0x30
 800bed0:	4341      	muls	r1, r0
 800bed2:	185b      	adds	r3, r3, r1
 800bed4:	9309      	str	r3, [sp, #36]	; 0x24
 800bed6:	0013      	movs	r3, r2
 800bed8:	781b      	ldrb	r3, [r3, #0]
 800beda:	3201      	adds	r2, #1
 800bedc:	0019      	movs	r1, r3
 800bede:	3930      	subs	r1, #48	; 0x30
 800bee0:	9207      	str	r2, [sp, #28]
 800bee2:	2909      	cmp	r1, #9
 800bee4:	d9f1      	bls.n	800beca <_vfiprintf_r+0x2ba>
 800bee6:	e737      	b.n	800bd58 <_vfiprintf_r+0x148>
 800bee8:	ffffdfff 	.word	0xffffdfff
 800beec:	9b07      	ldr	r3, [sp, #28]
 800beee:	781b      	ldrb	r3, [r3, #0]
 800bef0:	2b68      	cmp	r3, #104	; 0x68
 800bef2:	d105      	bne.n	800bf00 <_vfiprintf_r+0x2f0>
 800bef4:	9b07      	ldr	r3, [sp, #28]
 800bef6:	3301      	adds	r3, #1
 800bef8:	9307      	str	r3, [sp, #28]
 800befa:	2380      	movs	r3, #128	; 0x80
 800befc:	009b      	lsls	r3, r3, #2
 800befe:	e7a8      	b.n	800be52 <_vfiprintf_r+0x242>
 800bf00:	2340      	movs	r3, #64	; 0x40
 800bf02:	e7a6      	b.n	800be52 <_vfiprintf_r+0x242>
 800bf04:	9b07      	ldr	r3, [sp, #28]
 800bf06:	781b      	ldrb	r3, [r3, #0]
 800bf08:	2b6c      	cmp	r3, #108	; 0x6c
 800bf0a:	d104      	bne.n	800bf16 <_vfiprintf_r+0x306>
 800bf0c:	9b07      	ldr	r3, [sp, #28]
 800bf0e:	3301      	adds	r3, #1
 800bf10:	9307      	str	r3, [sp, #28]
 800bf12:	2320      	movs	r3, #32
 800bf14:	e79d      	b.n	800be52 <_vfiprintf_r+0x242>
 800bf16:	2310      	movs	r3, #16
 800bf18:	e79b      	b.n	800be52 <_vfiprintf_r+0x242>
 800bf1a:	003a      	movs	r2, r7
 800bf1c:	ca08      	ldmia	r2!, {r3}
 800bf1e:	ae27      	add	r6, sp, #156	; 0x9c
 800bf20:	7033      	strb	r3, [r6, #0]
 800bf22:	2300      	movs	r3, #0
 800bf24:	9204      	str	r2, [sp, #16]
 800bf26:	aa12      	add	r2, sp, #72	; 0x48
 800bf28:	70d3      	strb	r3, [r2, #3]
 800bf2a:	2201      	movs	r2, #1
 800bf2c:	930b      	str	r3, [sp, #44]	; 0x2c
 800bf2e:	9205      	str	r2, [sp, #20]
 800bf30:	e0b0      	b.n	800c094 <_vfiprintf_r+0x484>
 800bf32:	2310      	movs	r3, #16
 800bf34:	431c      	orrs	r4, r3
 800bf36:	06a3      	lsls	r3, r4, #26
 800bf38:	d52a      	bpl.n	800bf90 <_vfiprintf_r+0x380>
 800bf3a:	2307      	movs	r3, #7
 800bf3c:	3707      	adds	r7, #7
 800bf3e:	439f      	bics	r7, r3
 800bf40:	0039      	movs	r1, r7
 800bf42:	c90c      	ldmia	r1!, {r2, r3}
 800bf44:	9200      	str	r2, [sp, #0]
 800bf46:	9301      	str	r3, [sp, #4]
 800bf48:	9104      	str	r1, [sp, #16]
 800bf4a:	9a01      	ldr	r2, [sp, #4]
 800bf4c:	2301      	movs	r3, #1
 800bf4e:	2a00      	cmp	r2, #0
 800bf50:	da09      	bge.n	800bf66 <_vfiprintf_r+0x356>
 800bf52:	9e00      	ldr	r6, [sp, #0]
 800bf54:	9f01      	ldr	r7, [sp, #4]
 800bf56:	2200      	movs	r2, #0
 800bf58:	4271      	negs	r1, r6
 800bf5a:	41ba      	sbcs	r2, r7
 800bf5c:	9100      	str	r1, [sp, #0]
 800bf5e:	9201      	str	r2, [sp, #4]
 800bf60:	212d      	movs	r1, #45	; 0x2d
 800bf62:	aa12      	add	r2, sp, #72	; 0x48
 800bf64:	70d1      	strb	r1, [r2, #3]
 800bf66:	9901      	ldr	r1, [sp, #4]
 800bf68:	9a00      	ldr	r2, [sp, #0]
 800bf6a:	430a      	orrs	r2, r1
 800bf6c:	9905      	ldr	r1, [sp, #20]
 800bf6e:	3101      	adds	r1, #1
 800bf70:	d100      	bne.n	800bf74 <_vfiprintf_r+0x364>
 800bf72:	e2e9      	b.n	800c548 <_vfiprintf_r+0x938>
 800bf74:	2180      	movs	r1, #128	; 0x80
 800bf76:	0027      	movs	r7, r4
 800bf78:	438f      	bics	r7, r1
 800bf7a:	2a00      	cmp	r2, #0
 800bf7c:	d000      	beq.n	800bf80 <_vfiprintf_r+0x370>
 800bf7e:	e2e7      	b.n	800c550 <_vfiprintf_r+0x940>
 800bf80:	9a05      	ldr	r2, [sp, #20]
 800bf82:	2a00      	cmp	r2, #0
 800bf84:	d100      	bne.n	800bf88 <_vfiprintf_r+0x378>
 800bf86:	e243      	b.n	800c410 <_vfiprintf_r+0x800>
 800bf88:	2b01      	cmp	r3, #1
 800bf8a:	d000      	beq.n	800bf8e <_vfiprintf_r+0x37e>
 800bf8c:	e2e3      	b.n	800c556 <_vfiprintf_r+0x946>
 800bf8e:	e1e7      	b.n	800c360 <_vfiprintf_r+0x750>
 800bf90:	003a      	movs	r2, r7
 800bf92:	ca08      	ldmia	r2!, {r3}
 800bf94:	9204      	str	r2, [sp, #16]
 800bf96:	06e2      	lsls	r2, r4, #27
 800bf98:	d503      	bpl.n	800bfa2 <_vfiprintf_r+0x392>
 800bf9a:	9300      	str	r3, [sp, #0]
 800bf9c:	17db      	asrs	r3, r3, #31
 800bf9e:	9301      	str	r3, [sp, #4]
 800bfa0:	e7d3      	b.n	800bf4a <_vfiprintf_r+0x33a>
 800bfa2:	0662      	lsls	r2, r4, #25
 800bfa4:	d501      	bpl.n	800bfaa <_vfiprintf_r+0x39a>
 800bfa6:	b21b      	sxth	r3, r3
 800bfa8:	e7f7      	b.n	800bf9a <_vfiprintf_r+0x38a>
 800bfaa:	05a2      	lsls	r2, r4, #22
 800bfac:	d5f5      	bpl.n	800bf9a <_vfiprintf_r+0x38a>
 800bfae:	b25b      	sxtb	r3, r3
 800bfb0:	e7f3      	b.n	800bf9a <_vfiprintf_r+0x38a>
 800bfb2:	1d3b      	adds	r3, r7, #4
 800bfb4:	9304      	str	r3, [sp, #16]
 800bfb6:	06a3      	lsls	r3, r4, #26
 800bfb8:	d506      	bpl.n	800bfc8 <_vfiprintf_r+0x3b8>
 800bfba:	683b      	ldr	r3, [r7, #0]
 800bfbc:	9a08      	ldr	r2, [sp, #32]
 800bfbe:	601a      	str	r2, [r3, #0]
 800bfc0:	17d2      	asrs	r2, r2, #31
 800bfc2:	605a      	str	r2, [r3, #4]
 800bfc4:	9f04      	ldr	r7, [sp, #16]
 800bfc6:	e694      	b.n	800bcf2 <_vfiprintf_r+0xe2>
 800bfc8:	06e3      	lsls	r3, r4, #27
 800bfca:	d503      	bpl.n	800bfd4 <_vfiprintf_r+0x3c4>
 800bfcc:	683b      	ldr	r3, [r7, #0]
 800bfce:	9a08      	ldr	r2, [sp, #32]
 800bfd0:	601a      	str	r2, [r3, #0]
 800bfd2:	e7f7      	b.n	800bfc4 <_vfiprintf_r+0x3b4>
 800bfd4:	0663      	lsls	r3, r4, #25
 800bfd6:	d503      	bpl.n	800bfe0 <_vfiprintf_r+0x3d0>
 800bfd8:	683b      	ldr	r3, [r7, #0]
 800bfda:	9a08      	ldr	r2, [sp, #32]
 800bfdc:	801a      	strh	r2, [r3, #0]
 800bfde:	e7f1      	b.n	800bfc4 <_vfiprintf_r+0x3b4>
 800bfe0:	05a4      	lsls	r4, r4, #22
 800bfe2:	d5f3      	bpl.n	800bfcc <_vfiprintf_r+0x3bc>
 800bfe4:	683b      	ldr	r3, [r7, #0]
 800bfe6:	9a08      	ldr	r2, [sp, #32]
 800bfe8:	701a      	strb	r2, [r3, #0]
 800bfea:	e7eb      	b.n	800bfc4 <_vfiprintf_r+0x3b4>
 800bfec:	2310      	movs	r3, #16
 800bfee:	431c      	orrs	r4, r3
 800bff0:	2320      	movs	r3, #32
 800bff2:	0020      	movs	r0, r4
 800bff4:	4018      	ands	r0, r3
 800bff6:	421c      	tst	r4, r3
 800bff8:	d00d      	beq.n	800c016 <_vfiprintf_r+0x406>
 800bffa:	3b19      	subs	r3, #25
 800bffc:	3707      	adds	r7, #7
 800bffe:	439f      	bics	r7, r3
 800c000:	0039      	movs	r1, r7
 800c002:	c90c      	ldmia	r1!, {r2, r3}
 800c004:	9200      	str	r2, [sp, #0]
 800c006:	9301      	str	r3, [sp, #4]
 800c008:	9104      	str	r1, [sp, #16]
 800c00a:	4bcc      	ldr	r3, [pc, #816]	; (800c33c <_vfiprintf_r+0x72c>)
 800c00c:	401c      	ands	r4, r3
 800c00e:	2300      	movs	r3, #0
 800c010:	2100      	movs	r1, #0
 800c012:	aa12      	add	r2, sp, #72	; 0x48
 800c014:	e7a6      	b.n	800bf64 <_vfiprintf_r+0x354>
 800c016:	003a      	movs	r2, r7
 800c018:	ca08      	ldmia	r2!, {r3}
 800c01a:	0021      	movs	r1, r4
 800c01c:	9204      	str	r2, [sp, #16]
 800c01e:	2210      	movs	r2, #16
 800c020:	4011      	ands	r1, r2
 800c022:	4214      	tst	r4, r2
 800c024:	d002      	beq.n	800c02c <_vfiprintf_r+0x41c>
 800c026:	9300      	str	r3, [sp, #0]
 800c028:	9001      	str	r0, [sp, #4]
 800c02a:	e7ee      	b.n	800c00a <_vfiprintf_r+0x3fa>
 800c02c:	2240      	movs	r2, #64	; 0x40
 800c02e:	0020      	movs	r0, r4
 800c030:	4010      	ands	r0, r2
 800c032:	4214      	tst	r4, r2
 800c034:	d003      	beq.n	800c03e <_vfiprintf_r+0x42e>
 800c036:	b29b      	uxth	r3, r3
 800c038:	9300      	str	r3, [sp, #0]
 800c03a:	9101      	str	r1, [sp, #4]
 800c03c:	e7e5      	b.n	800c00a <_vfiprintf_r+0x3fa>
 800c03e:	2280      	movs	r2, #128	; 0x80
 800c040:	0021      	movs	r1, r4
 800c042:	0092      	lsls	r2, r2, #2
 800c044:	4011      	ands	r1, r2
 800c046:	4214      	tst	r4, r2
 800c048:	d0f6      	beq.n	800c038 <_vfiprintf_r+0x428>
 800c04a:	b2db      	uxtb	r3, r3
 800c04c:	e7eb      	b.n	800c026 <_vfiprintf_r+0x416>
 800c04e:	003b      	movs	r3, r7
 800c050:	cb04      	ldmia	r3!, {r2}
 800c052:	49bb      	ldr	r1, [pc, #748]	; (800c340 <_vfiprintf_r+0x730>)
 800c054:	9304      	str	r3, [sp, #16]
 800c056:	2300      	movs	r3, #0
 800c058:	9200      	str	r2, [sp, #0]
 800c05a:	aa13      	add	r2, sp, #76	; 0x4c
 800c05c:	8011      	strh	r1, [r2, #0]
 800c05e:	4ab9      	ldr	r2, [pc, #740]	; (800c344 <_vfiprintf_r+0x734>)
 800c060:	9301      	str	r3, [sp, #4]
 800c062:	3302      	adds	r3, #2
 800c064:	431c      	orrs	r4, r3
 800c066:	920c      	str	r2, [sp, #48]	; 0x30
 800c068:	e7d2      	b.n	800c010 <_vfiprintf_r+0x400>
 800c06a:	003b      	movs	r3, r7
 800c06c:	2700      	movs	r7, #0
 800c06e:	cb40      	ldmia	r3!, {r6}
 800c070:	9304      	str	r3, [sp, #16]
 800c072:	ab12      	add	r3, sp, #72	; 0x48
 800c074:	70df      	strb	r7, [r3, #3]
 800c076:	9b05      	ldr	r3, [sp, #20]
 800c078:	3301      	adds	r3, #1
 800c07a:	d100      	bne.n	800c07e <_vfiprintf_r+0x46e>
 800c07c:	e0ea      	b.n	800c254 <_vfiprintf_r+0x644>
 800c07e:	0039      	movs	r1, r7
 800c080:	0030      	movs	r0, r6
 800c082:	9a05      	ldr	r2, [sp, #20]
 800c084:	f7fe fd8f 	bl	800aba6 <memchr>
 800c088:	900b      	str	r0, [sp, #44]	; 0x2c
 800c08a:	42b8      	cmp	r0, r7
 800c08c:	d002      	beq.n	800c094 <_vfiprintf_r+0x484>
 800c08e:	1b83      	subs	r3, r0, r6
 800c090:	9305      	str	r3, [sp, #20]
 800c092:	970b      	str	r7, [sp, #44]	; 0x2c
 800c094:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800c096:	9a05      	ldr	r2, [sp, #20]
 800c098:	930a      	str	r3, [sp, #40]	; 0x28
 800c09a:	4293      	cmp	r3, r2
 800c09c:	da00      	bge.n	800c0a0 <_vfiprintf_r+0x490>
 800c09e:	920a      	str	r2, [sp, #40]	; 0x28
 800c0a0:	ab12      	add	r3, sp, #72	; 0x48
 800c0a2:	3303      	adds	r3, #3
 800c0a4:	781b      	ldrb	r3, [r3, #0]
 800c0a6:	1e5a      	subs	r2, r3, #1
 800c0a8:	4193      	sbcs	r3, r2
 800c0aa:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800c0ac:	18d3      	adds	r3, r2, r3
 800c0ae:	930a      	str	r3, [sp, #40]	; 0x28
 800c0b0:	0022      	movs	r2, r4
 800c0b2:	2302      	movs	r3, #2
 800c0b4:	401a      	ands	r2, r3
 800c0b6:	9210      	str	r2, [sp, #64]	; 0x40
 800c0b8:	421c      	tst	r4, r3
 800c0ba:	d002      	beq.n	800c0c2 <_vfiprintf_r+0x4b2>
 800c0bc:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800c0be:	3302      	adds	r3, #2
 800c0c0:	930a      	str	r3, [sp, #40]	; 0x28
 800c0c2:	2384      	movs	r3, #132	; 0x84
 800c0c4:	0022      	movs	r2, r4
 800c0c6:	401a      	ands	r2, r3
 800c0c8:	9211      	str	r2, [sp, #68]	; 0x44
 800c0ca:	421c      	tst	r4, r3
 800c0cc:	d11e      	bne.n	800c10c <_vfiprintf_r+0x4fc>
 800c0ce:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800c0d0:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800c0d2:	1a9f      	subs	r7, r3, r2
 800c0d4:	2f00      	cmp	r7, #0
 800c0d6:	dd19      	ble.n	800c10c <_vfiprintf_r+0x4fc>
 800c0d8:	0029      	movs	r1, r5
 800c0da:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800c0dc:	489a      	ldr	r0, [pc, #616]	; (800c348 <_vfiprintf_r+0x738>)
 800c0de:	9a16      	ldr	r2, [sp, #88]	; 0x58
 800c0e0:	3301      	adds	r3, #1
 800c0e2:	3108      	adds	r1, #8
 800c0e4:	6028      	str	r0, [r5, #0]
 800c0e6:	2f10      	cmp	r7, #16
 800c0e8:	dd00      	ble.n	800c0ec <_vfiprintf_r+0x4dc>
 800c0ea:	e1a7      	b.n	800c43c <_vfiprintf_r+0x82c>
 800c0ec:	606f      	str	r7, [r5, #4]
 800c0ee:	18bf      	adds	r7, r7, r2
 800c0f0:	000d      	movs	r5, r1
 800c0f2:	9716      	str	r7, [sp, #88]	; 0x58
 800c0f4:	9315      	str	r3, [sp, #84]	; 0x54
 800c0f6:	2b07      	cmp	r3, #7
 800c0f8:	dd08      	ble.n	800c10c <_vfiprintf_r+0x4fc>
 800c0fa:	9903      	ldr	r1, [sp, #12]
 800c0fc:	9806      	ldr	r0, [sp, #24]
 800c0fe:	aa14      	add	r2, sp, #80	; 0x50
 800c100:	f7ff fd52 	bl	800bba8 <__sprint_r>
 800c104:	2800      	cmp	r0, #0
 800c106:	d000      	beq.n	800c10a <_vfiprintf_r+0x4fa>
 800c108:	e1eb      	b.n	800c4e2 <_vfiprintf_r+0x8d2>
 800c10a:	ad17      	add	r5, sp, #92	; 0x5c
 800c10c:	a912      	add	r1, sp, #72	; 0x48
 800c10e:	78c8      	ldrb	r0, [r1, #3]
 800c110:	9a16      	ldr	r2, [sp, #88]	; 0x58
 800c112:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800c114:	3103      	adds	r1, #3
 800c116:	2800      	cmp	r0, #0
 800c118:	d012      	beq.n	800c140 <_vfiprintf_r+0x530>
 800c11a:	6029      	str	r1, [r5, #0]
 800c11c:	2101      	movs	r1, #1
 800c11e:	3301      	adds	r3, #1
 800c120:	1852      	adds	r2, r2, r1
 800c122:	6069      	str	r1, [r5, #4]
 800c124:	9216      	str	r2, [sp, #88]	; 0x58
 800c126:	9315      	str	r3, [sp, #84]	; 0x54
 800c128:	3508      	adds	r5, #8
 800c12a:	2b07      	cmp	r3, #7
 800c12c:	dd08      	ble.n	800c140 <_vfiprintf_r+0x530>
 800c12e:	9903      	ldr	r1, [sp, #12]
 800c130:	9806      	ldr	r0, [sp, #24]
 800c132:	aa14      	add	r2, sp, #80	; 0x50
 800c134:	f7ff fd38 	bl	800bba8 <__sprint_r>
 800c138:	2800      	cmp	r0, #0
 800c13a:	d000      	beq.n	800c13e <_vfiprintf_r+0x52e>
 800c13c:	e1d1      	b.n	800c4e2 <_vfiprintf_r+0x8d2>
 800c13e:	ad17      	add	r5, sp, #92	; 0x5c
 800c140:	9910      	ldr	r1, [sp, #64]	; 0x40
 800c142:	9a16      	ldr	r2, [sp, #88]	; 0x58
 800c144:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800c146:	2900      	cmp	r1, #0
 800c148:	d013      	beq.n	800c172 <_vfiprintf_r+0x562>
 800c14a:	a913      	add	r1, sp, #76	; 0x4c
 800c14c:	6029      	str	r1, [r5, #0]
 800c14e:	2102      	movs	r1, #2
 800c150:	3301      	adds	r3, #1
 800c152:	1852      	adds	r2, r2, r1
 800c154:	6069      	str	r1, [r5, #4]
 800c156:	9216      	str	r2, [sp, #88]	; 0x58
 800c158:	9315      	str	r3, [sp, #84]	; 0x54
 800c15a:	3508      	adds	r5, #8
 800c15c:	2b07      	cmp	r3, #7
 800c15e:	dd08      	ble.n	800c172 <_vfiprintf_r+0x562>
 800c160:	9903      	ldr	r1, [sp, #12]
 800c162:	9806      	ldr	r0, [sp, #24]
 800c164:	aa14      	add	r2, sp, #80	; 0x50
 800c166:	f7ff fd1f 	bl	800bba8 <__sprint_r>
 800c16a:	2800      	cmp	r0, #0
 800c16c:	d000      	beq.n	800c170 <_vfiprintf_r+0x560>
 800c16e:	e1b8      	b.n	800c4e2 <_vfiprintf_r+0x8d2>
 800c170:	ad17      	add	r5, sp, #92	; 0x5c
 800c172:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800c174:	2b80      	cmp	r3, #128	; 0x80
 800c176:	d11e      	bne.n	800c1b6 <_vfiprintf_r+0x5a6>
 800c178:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800c17a:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800c17c:	1a9f      	subs	r7, r3, r2
 800c17e:	2f00      	cmp	r7, #0
 800c180:	dd19      	ble.n	800c1b6 <_vfiprintf_r+0x5a6>
 800c182:	0029      	movs	r1, r5
 800c184:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800c186:	4871      	ldr	r0, [pc, #452]	; (800c34c <_vfiprintf_r+0x73c>)
 800c188:	9a16      	ldr	r2, [sp, #88]	; 0x58
 800c18a:	3301      	adds	r3, #1
 800c18c:	3108      	adds	r1, #8
 800c18e:	6028      	str	r0, [r5, #0]
 800c190:	2f10      	cmp	r7, #16
 800c192:	dd00      	ble.n	800c196 <_vfiprintf_r+0x586>
 800c194:	e164      	b.n	800c460 <_vfiprintf_r+0x850>
 800c196:	606f      	str	r7, [r5, #4]
 800c198:	18bf      	adds	r7, r7, r2
 800c19a:	000d      	movs	r5, r1
 800c19c:	9716      	str	r7, [sp, #88]	; 0x58
 800c19e:	9315      	str	r3, [sp, #84]	; 0x54
 800c1a0:	2b07      	cmp	r3, #7
 800c1a2:	dd08      	ble.n	800c1b6 <_vfiprintf_r+0x5a6>
 800c1a4:	9903      	ldr	r1, [sp, #12]
 800c1a6:	9806      	ldr	r0, [sp, #24]
 800c1a8:	aa14      	add	r2, sp, #80	; 0x50
 800c1aa:	f7ff fcfd 	bl	800bba8 <__sprint_r>
 800c1ae:	2800      	cmp	r0, #0
 800c1b0:	d000      	beq.n	800c1b4 <_vfiprintf_r+0x5a4>
 800c1b2:	e196      	b.n	800c4e2 <_vfiprintf_r+0x8d2>
 800c1b4:	ad17      	add	r5, sp, #92	; 0x5c
 800c1b6:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800c1b8:	9a05      	ldr	r2, [sp, #20]
 800c1ba:	1a9f      	subs	r7, r3, r2
 800c1bc:	2f00      	cmp	r7, #0
 800c1be:	dd19      	ble.n	800c1f4 <_vfiprintf_r+0x5e4>
 800c1c0:	0029      	movs	r1, r5
 800c1c2:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800c1c4:	4861      	ldr	r0, [pc, #388]	; (800c34c <_vfiprintf_r+0x73c>)
 800c1c6:	9a16      	ldr	r2, [sp, #88]	; 0x58
 800c1c8:	3301      	adds	r3, #1
 800c1ca:	3108      	adds	r1, #8
 800c1cc:	6028      	str	r0, [r5, #0]
 800c1ce:	2f10      	cmp	r7, #16
 800c1d0:	dd00      	ble.n	800c1d4 <_vfiprintf_r+0x5c4>
 800c1d2:	e157      	b.n	800c484 <_vfiprintf_r+0x874>
 800c1d4:	606f      	str	r7, [r5, #4]
 800c1d6:	18bf      	adds	r7, r7, r2
 800c1d8:	000d      	movs	r5, r1
 800c1da:	9716      	str	r7, [sp, #88]	; 0x58
 800c1dc:	9315      	str	r3, [sp, #84]	; 0x54
 800c1de:	2b07      	cmp	r3, #7
 800c1e0:	dd08      	ble.n	800c1f4 <_vfiprintf_r+0x5e4>
 800c1e2:	9903      	ldr	r1, [sp, #12]
 800c1e4:	9806      	ldr	r0, [sp, #24]
 800c1e6:	aa14      	add	r2, sp, #80	; 0x50
 800c1e8:	f7ff fcde 	bl	800bba8 <__sprint_r>
 800c1ec:	2800      	cmp	r0, #0
 800c1ee:	d000      	beq.n	800c1f2 <_vfiprintf_r+0x5e2>
 800c1f0:	e177      	b.n	800c4e2 <_vfiprintf_r+0x8d2>
 800c1f2:	ad17      	add	r5, sp, #92	; 0x5c
 800c1f4:	9b05      	ldr	r3, [sp, #20]
 800c1f6:	9a05      	ldr	r2, [sp, #20]
 800c1f8:	606b      	str	r3, [r5, #4]
 800c1fa:	9b16      	ldr	r3, [sp, #88]	; 0x58
 800c1fc:	602e      	str	r6, [r5, #0]
 800c1fe:	189b      	adds	r3, r3, r2
 800c200:	9316      	str	r3, [sp, #88]	; 0x58
 800c202:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800c204:	3508      	adds	r5, #8
 800c206:	3301      	adds	r3, #1
 800c208:	9315      	str	r3, [sp, #84]	; 0x54
 800c20a:	2b07      	cmp	r3, #7
 800c20c:	dd08      	ble.n	800c220 <_vfiprintf_r+0x610>
 800c20e:	9903      	ldr	r1, [sp, #12]
 800c210:	9806      	ldr	r0, [sp, #24]
 800c212:	aa14      	add	r2, sp, #80	; 0x50
 800c214:	f7ff fcc8 	bl	800bba8 <__sprint_r>
 800c218:	2800      	cmp	r0, #0
 800c21a:	d000      	beq.n	800c21e <_vfiprintf_r+0x60e>
 800c21c:	e161      	b.n	800c4e2 <_vfiprintf_r+0x8d2>
 800c21e:	ad17      	add	r5, sp, #92	; 0x5c
 800c220:	0764      	lsls	r4, r4, #29
 800c222:	d500      	bpl.n	800c226 <_vfiprintf_r+0x616>
 800c224:	e140      	b.n	800c4a8 <_vfiprintf_r+0x898>
 800c226:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800c228:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800c22a:	4293      	cmp	r3, r2
 800c22c:	da00      	bge.n	800c230 <_vfiprintf_r+0x620>
 800c22e:	0013      	movs	r3, r2
 800c230:	9a08      	ldr	r2, [sp, #32]
 800c232:	18d3      	adds	r3, r2, r3
 800c234:	9308      	str	r3, [sp, #32]
 800c236:	9b16      	ldr	r3, [sp, #88]	; 0x58
 800c238:	2b00      	cmp	r3, #0
 800c23a:	d007      	beq.n	800c24c <_vfiprintf_r+0x63c>
 800c23c:	9903      	ldr	r1, [sp, #12]
 800c23e:	9806      	ldr	r0, [sp, #24]
 800c240:	aa14      	add	r2, sp, #80	; 0x50
 800c242:	f7ff fcb1 	bl	800bba8 <__sprint_r>
 800c246:	2800      	cmp	r0, #0
 800c248:	d000      	beq.n	800c24c <_vfiprintf_r+0x63c>
 800c24a:	e14a      	b.n	800c4e2 <_vfiprintf_r+0x8d2>
 800c24c:	2300      	movs	r3, #0
 800c24e:	ad17      	add	r5, sp, #92	; 0x5c
 800c250:	9315      	str	r3, [sp, #84]	; 0x54
 800c252:	e6b7      	b.n	800bfc4 <_vfiprintf_r+0x3b4>
 800c254:	0030      	movs	r0, r6
 800c256:	f7f3 ff55 	bl	8000104 <strlen>
 800c25a:	9005      	str	r0, [sp, #20]
 800c25c:	e719      	b.n	800c092 <_vfiprintf_r+0x482>
 800c25e:	2310      	movs	r3, #16
 800c260:	431c      	orrs	r4, r3
 800c262:	2320      	movs	r3, #32
 800c264:	0020      	movs	r0, r4
 800c266:	4018      	ands	r0, r3
 800c268:	421c      	tst	r4, r3
 800c26a:	d009      	beq.n	800c280 <_vfiprintf_r+0x670>
 800c26c:	3b19      	subs	r3, #25
 800c26e:	3707      	adds	r7, #7
 800c270:	439f      	bics	r7, r3
 800c272:	0039      	movs	r1, r7
 800c274:	c90c      	ldmia	r1!, {r2, r3}
 800c276:	9200      	str	r2, [sp, #0]
 800c278:	9301      	str	r3, [sp, #4]
 800c27a:	9104      	str	r1, [sp, #16]
 800c27c:	2301      	movs	r3, #1
 800c27e:	e6c7      	b.n	800c010 <_vfiprintf_r+0x400>
 800c280:	003b      	movs	r3, r7
 800c282:	cb04      	ldmia	r3!, {r2}
 800c284:	0021      	movs	r1, r4
 800c286:	9304      	str	r3, [sp, #16]
 800c288:	2310      	movs	r3, #16
 800c28a:	4019      	ands	r1, r3
 800c28c:	421c      	tst	r4, r3
 800c28e:	d003      	beq.n	800c298 <_vfiprintf_r+0x688>
 800c290:	9200      	str	r2, [sp, #0]
 800c292:	9001      	str	r0, [sp, #4]
 800c294:	3b0f      	subs	r3, #15
 800c296:	e6bb      	b.n	800c010 <_vfiprintf_r+0x400>
 800c298:	2340      	movs	r3, #64	; 0x40
 800c29a:	0020      	movs	r0, r4
 800c29c:	4018      	ands	r0, r3
 800c29e:	421c      	tst	r4, r3
 800c2a0:	d003      	beq.n	800c2aa <_vfiprintf_r+0x69a>
 800c2a2:	b293      	uxth	r3, r2
 800c2a4:	9300      	str	r3, [sp, #0]
 800c2a6:	9101      	str	r1, [sp, #4]
 800c2a8:	e7e8      	b.n	800c27c <_vfiprintf_r+0x66c>
 800c2aa:	2380      	movs	r3, #128	; 0x80
 800c2ac:	0021      	movs	r1, r4
 800c2ae:	009b      	lsls	r3, r3, #2
 800c2b0:	4019      	ands	r1, r3
 800c2b2:	421c      	tst	r4, r3
 800c2b4:	d003      	beq.n	800c2be <_vfiprintf_r+0x6ae>
 800c2b6:	b2d3      	uxtb	r3, r2
 800c2b8:	9300      	str	r3, [sp, #0]
 800c2ba:	9001      	str	r0, [sp, #4]
 800c2bc:	e7de      	b.n	800c27c <_vfiprintf_r+0x66c>
 800c2be:	9200      	str	r2, [sp, #0]
 800c2c0:	e7f1      	b.n	800c2a6 <_vfiprintf_r+0x696>
 800c2c2:	4a23      	ldr	r2, [pc, #140]	; (800c350 <_vfiprintf_r+0x740>)
 800c2c4:	0020      	movs	r0, r4
 800c2c6:	920c      	str	r2, [sp, #48]	; 0x30
 800c2c8:	2220      	movs	r2, #32
 800c2ca:	4010      	ands	r0, r2
 800c2cc:	4214      	tst	r4, r2
 800c2ce:	d019      	beq.n	800c304 <_vfiprintf_r+0x6f4>
 800c2d0:	3a19      	subs	r2, #25
 800c2d2:	3707      	adds	r7, #7
 800c2d4:	4397      	bics	r7, r2
 800c2d6:	0038      	movs	r0, r7
 800c2d8:	c806      	ldmia	r0!, {r1, r2}
 800c2da:	9100      	str	r1, [sp, #0]
 800c2dc:	9201      	str	r2, [sp, #4]
 800c2de:	9004      	str	r0, [sp, #16]
 800c2e0:	07e2      	lsls	r2, r4, #31
 800c2e2:	d509      	bpl.n	800c2f8 <_vfiprintf_r+0x6e8>
 800c2e4:	9a00      	ldr	r2, [sp, #0]
 800c2e6:	9901      	ldr	r1, [sp, #4]
 800c2e8:	430a      	orrs	r2, r1
 800c2ea:	d005      	beq.n	800c2f8 <_vfiprintf_r+0x6e8>
 800c2ec:	aa13      	add	r2, sp, #76	; 0x4c
 800c2ee:	2130      	movs	r1, #48	; 0x30
 800c2f0:	7053      	strb	r3, [r2, #1]
 800c2f2:	2302      	movs	r3, #2
 800c2f4:	7011      	strb	r1, [r2, #0]
 800c2f6:	431c      	orrs	r4, r3
 800c2f8:	4b10      	ldr	r3, [pc, #64]	; (800c33c <_vfiprintf_r+0x72c>)
 800c2fa:	401c      	ands	r4, r3
 800c2fc:	2302      	movs	r3, #2
 800c2fe:	e687      	b.n	800c010 <_vfiprintf_r+0x400>
 800c300:	4a10      	ldr	r2, [pc, #64]	; (800c344 <_vfiprintf_r+0x734>)
 800c302:	e7df      	b.n	800c2c4 <_vfiprintf_r+0x6b4>
 800c304:	0039      	movs	r1, r7
 800c306:	c904      	ldmia	r1!, {r2}
 800c308:	0026      	movs	r6, r4
 800c30a:	9104      	str	r1, [sp, #16]
 800c30c:	2110      	movs	r1, #16
 800c30e:	400e      	ands	r6, r1
 800c310:	420c      	tst	r4, r1
 800c312:	d002      	beq.n	800c31a <_vfiprintf_r+0x70a>
 800c314:	9200      	str	r2, [sp, #0]
 800c316:	9001      	str	r0, [sp, #4]
 800c318:	e7e2      	b.n	800c2e0 <_vfiprintf_r+0x6d0>
 800c31a:	2140      	movs	r1, #64	; 0x40
 800c31c:	0020      	movs	r0, r4
 800c31e:	4008      	ands	r0, r1
 800c320:	420c      	tst	r4, r1
 800c322:	d003      	beq.n	800c32c <_vfiprintf_r+0x71c>
 800c324:	b292      	uxth	r2, r2
 800c326:	9200      	str	r2, [sp, #0]
 800c328:	9601      	str	r6, [sp, #4]
 800c32a:	e7d9      	b.n	800c2e0 <_vfiprintf_r+0x6d0>
 800c32c:	2180      	movs	r1, #128	; 0x80
 800c32e:	0026      	movs	r6, r4
 800c330:	0089      	lsls	r1, r1, #2
 800c332:	400e      	ands	r6, r1
 800c334:	420c      	tst	r4, r1
 800c336:	d0f6      	beq.n	800c326 <_vfiprintf_r+0x716>
 800c338:	b2d2      	uxtb	r2, r2
 800c33a:	e7eb      	b.n	800c314 <_vfiprintf_r+0x704>
 800c33c:	fffffbff 	.word	0xfffffbff
 800c340:	00007830 	.word	0x00007830
 800c344:	0800ecec 	.word	0x0800ecec
 800c348:	0800edd1 	.word	0x0800edd1
 800c34c:	0800ede1 	.word	0x0800ede1
 800c350:	0800ecfd 	.word	0x0800ecfd
 800c354:	9b01      	ldr	r3, [sp, #4]
 800c356:	2b00      	cmp	r3, #0
 800c358:	d109      	bne.n	800c36e <_vfiprintf_r+0x75e>
 800c35a:	9b00      	ldr	r3, [sp, #0]
 800c35c:	2b09      	cmp	r3, #9
 800c35e:	d806      	bhi.n	800c36e <_vfiprintf_r+0x75e>
 800c360:	26b7      	movs	r6, #183	; 0xb7
 800c362:	ab12      	add	r3, sp, #72	; 0x48
 800c364:	18f6      	adds	r6, r6, r3
 800c366:	9b00      	ldr	r3, [sp, #0]
 800c368:	3330      	adds	r3, #48	; 0x30
 800c36a:	7033      	strb	r3, [r6, #0]
 800c36c:	e115      	b.n	800c59a <_vfiprintf_r+0x98a>
 800c36e:	2380      	movs	r3, #128	; 0x80
 800c370:	2400      	movs	r4, #0
 800c372:	00db      	lsls	r3, r3, #3
 800c374:	403b      	ands	r3, r7
 800c376:	ae40      	add	r6, sp, #256	; 0x100
 800c378:	930a      	str	r3, [sp, #40]	; 0x28
 800c37a:	220a      	movs	r2, #10
 800c37c:	9800      	ldr	r0, [sp, #0]
 800c37e:	9901      	ldr	r1, [sp, #4]
 800c380:	2300      	movs	r3, #0
 800c382:	f7f4 f88f 	bl	80004a4 <__aeabi_uldivmod>
 800c386:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800c388:	3e01      	subs	r6, #1
 800c38a:	3230      	adds	r2, #48	; 0x30
 800c38c:	900b      	str	r0, [sp, #44]	; 0x2c
 800c38e:	9110      	str	r1, [sp, #64]	; 0x40
 800c390:	7032      	strb	r2, [r6, #0]
 800c392:	3401      	adds	r4, #1
 800c394:	2b00      	cmp	r3, #0
 800c396:	d01a      	beq.n	800c3ce <_vfiprintf_r+0x7be>
 800c398:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800c39a:	781b      	ldrb	r3, [r3, #0]
 800c39c:	42a3      	cmp	r3, r4
 800c39e:	d116      	bne.n	800c3ce <_vfiprintf_r+0x7be>
 800c3a0:	2cff      	cmp	r4, #255	; 0xff
 800c3a2:	d014      	beq.n	800c3ce <_vfiprintf_r+0x7be>
 800c3a4:	9b01      	ldr	r3, [sp, #4]
 800c3a6:	2b00      	cmp	r3, #0
 800c3a8:	d102      	bne.n	800c3b0 <_vfiprintf_r+0x7a0>
 800c3aa:	9b00      	ldr	r3, [sp, #0]
 800c3ac:	2b09      	cmp	r3, #9
 800c3ae:	d90e      	bls.n	800c3ce <_vfiprintf_r+0x7be>
 800c3b0:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800c3b2:	990f      	ldr	r1, [sp, #60]	; 0x3c
 800c3b4:	1af6      	subs	r6, r6, r3
 800c3b6:	001a      	movs	r2, r3
 800c3b8:	0030      	movs	r0, r6
 800c3ba:	f7fe fbab 	bl	800ab14 <strncpy>
 800c3be:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800c3c0:	2400      	movs	r4, #0
 800c3c2:	785b      	ldrb	r3, [r3, #1]
 800c3c4:	1e5a      	subs	r2, r3, #1
 800c3c6:	4193      	sbcs	r3, r2
 800c3c8:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800c3ca:	18d3      	adds	r3, r2, r3
 800c3cc:	930d      	str	r3, [sp, #52]	; 0x34
 800c3ce:	9b01      	ldr	r3, [sp, #4]
 800c3d0:	2b00      	cmp	r3, #0
 800c3d2:	d103      	bne.n	800c3dc <_vfiprintf_r+0x7cc>
 800c3d4:	9b00      	ldr	r3, [sp, #0]
 800c3d6:	2b09      	cmp	r3, #9
 800c3d8:	d800      	bhi.n	800c3dc <_vfiprintf_r+0x7cc>
 800c3da:	e0de      	b.n	800c59a <_vfiprintf_r+0x98a>
 800c3dc:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800c3de:	9300      	str	r3, [sp, #0]
 800c3e0:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800c3e2:	9301      	str	r3, [sp, #4]
 800c3e4:	e7c9      	b.n	800c37a <_vfiprintf_r+0x76a>
 800c3e6:	200f      	movs	r0, #15
 800c3e8:	9b00      	ldr	r3, [sp, #0]
 800c3ea:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800c3ec:	4003      	ands	r3, r0
 800c3ee:	5cd3      	ldrb	r3, [r2, r3]
 800c3f0:	3e01      	subs	r6, #1
 800c3f2:	7033      	strb	r3, [r6, #0]
 800c3f4:	9b01      	ldr	r3, [sp, #4]
 800c3f6:	0719      	lsls	r1, r3, #28
 800c3f8:	9b00      	ldr	r3, [sp, #0]
 800c3fa:	091a      	lsrs	r2, r3, #4
 800c3fc:	9b01      	ldr	r3, [sp, #4]
 800c3fe:	4311      	orrs	r1, r2
 800c400:	091b      	lsrs	r3, r3, #4
 800c402:	9301      	str	r3, [sp, #4]
 800c404:	000b      	movs	r3, r1
 800c406:	9a01      	ldr	r2, [sp, #4]
 800c408:	9100      	str	r1, [sp, #0]
 800c40a:	4313      	orrs	r3, r2
 800c40c:	d1ec      	bne.n	800c3e8 <_vfiprintf_r+0x7d8>
 800c40e:	e0c4      	b.n	800c59a <_vfiprintf_r+0x98a>
 800c410:	ae40      	add	r6, sp, #256	; 0x100
 800c412:	2b00      	cmp	r3, #0
 800c414:	d000      	beq.n	800c418 <_vfiprintf_r+0x808>
 800c416:	e0c0      	b.n	800c59a <_vfiprintf_r+0x98a>
 800c418:	07e4      	lsls	r4, r4, #31
 800c41a:	d400      	bmi.n	800c41e <_vfiprintf_r+0x80e>
 800c41c:	e0bd      	b.n	800c59a <_vfiprintf_r+0x98a>
 800c41e:	26b7      	movs	r6, #183	; 0xb7
 800c420:	ab12      	add	r3, sp, #72	; 0x48
 800c422:	18f6      	adds	r6, r6, r3
 800c424:	2330      	movs	r3, #48	; 0x30
 800c426:	e7a0      	b.n	800c36a <_vfiprintf_r+0x75a>
 800c428:	2b00      	cmp	r3, #0
 800c42a:	d100      	bne.n	800c42e <_vfiprintf_r+0x81e>
 800c42c:	e07e      	b.n	800c52c <_vfiprintf_r+0x91c>
 800c42e:	ae27      	add	r6, sp, #156	; 0x9c
 800c430:	7033      	strb	r3, [r6, #0]
 800c432:	2300      	movs	r3, #0
 800c434:	aa12      	add	r2, sp, #72	; 0x48
 800c436:	70d3      	strb	r3, [r2, #3]
 800c438:	9704      	str	r7, [sp, #16]
 800c43a:	e576      	b.n	800bf2a <_vfiprintf_r+0x31a>
 800c43c:	2010      	movs	r0, #16
 800c43e:	1812      	adds	r2, r2, r0
 800c440:	6068      	str	r0, [r5, #4]
 800c442:	9216      	str	r2, [sp, #88]	; 0x58
 800c444:	9315      	str	r3, [sp, #84]	; 0x54
 800c446:	2b07      	cmp	r3, #7
 800c448:	dd07      	ble.n	800c45a <_vfiprintf_r+0x84a>
 800c44a:	9903      	ldr	r1, [sp, #12]
 800c44c:	9806      	ldr	r0, [sp, #24]
 800c44e:	aa14      	add	r2, sp, #80	; 0x50
 800c450:	f7ff fbaa 	bl	800bba8 <__sprint_r>
 800c454:	2800      	cmp	r0, #0
 800c456:	d144      	bne.n	800c4e2 <_vfiprintf_r+0x8d2>
 800c458:	a917      	add	r1, sp, #92	; 0x5c
 800c45a:	000d      	movs	r5, r1
 800c45c:	3f10      	subs	r7, #16
 800c45e:	e63b      	b.n	800c0d8 <_vfiprintf_r+0x4c8>
 800c460:	2010      	movs	r0, #16
 800c462:	1812      	adds	r2, r2, r0
 800c464:	6068      	str	r0, [r5, #4]
 800c466:	9216      	str	r2, [sp, #88]	; 0x58
 800c468:	9315      	str	r3, [sp, #84]	; 0x54
 800c46a:	2b07      	cmp	r3, #7
 800c46c:	dd07      	ble.n	800c47e <_vfiprintf_r+0x86e>
 800c46e:	9903      	ldr	r1, [sp, #12]
 800c470:	9806      	ldr	r0, [sp, #24]
 800c472:	aa14      	add	r2, sp, #80	; 0x50
 800c474:	f7ff fb98 	bl	800bba8 <__sprint_r>
 800c478:	2800      	cmp	r0, #0
 800c47a:	d132      	bne.n	800c4e2 <_vfiprintf_r+0x8d2>
 800c47c:	a917      	add	r1, sp, #92	; 0x5c
 800c47e:	000d      	movs	r5, r1
 800c480:	3f10      	subs	r7, #16
 800c482:	e67e      	b.n	800c182 <_vfiprintf_r+0x572>
 800c484:	2010      	movs	r0, #16
 800c486:	1812      	adds	r2, r2, r0
 800c488:	6068      	str	r0, [r5, #4]
 800c48a:	9216      	str	r2, [sp, #88]	; 0x58
 800c48c:	9315      	str	r3, [sp, #84]	; 0x54
 800c48e:	2b07      	cmp	r3, #7
 800c490:	dd07      	ble.n	800c4a2 <_vfiprintf_r+0x892>
 800c492:	9903      	ldr	r1, [sp, #12]
 800c494:	9806      	ldr	r0, [sp, #24]
 800c496:	aa14      	add	r2, sp, #80	; 0x50
 800c498:	f7ff fb86 	bl	800bba8 <__sprint_r>
 800c49c:	2800      	cmp	r0, #0
 800c49e:	d120      	bne.n	800c4e2 <_vfiprintf_r+0x8d2>
 800c4a0:	a917      	add	r1, sp, #92	; 0x5c
 800c4a2:	000d      	movs	r5, r1
 800c4a4:	3f10      	subs	r7, #16
 800c4a6:	e68b      	b.n	800c1c0 <_vfiprintf_r+0x5b0>
 800c4a8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800c4aa:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800c4ac:	2610      	movs	r6, #16
 800c4ae:	1a9c      	subs	r4, r3, r2
 800c4b0:	2c00      	cmp	r4, #0
 800c4b2:	dc00      	bgt.n	800c4b6 <_vfiprintf_r+0x8a6>
 800c4b4:	e6b7      	b.n	800c226 <_vfiprintf_r+0x616>
 800c4b6:	9915      	ldr	r1, [sp, #84]	; 0x54
 800c4b8:	4a3b      	ldr	r2, [pc, #236]	; (800c5a8 <_vfiprintf_r+0x998>)
 800c4ba:	9b16      	ldr	r3, [sp, #88]	; 0x58
 800c4bc:	3101      	adds	r1, #1
 800c4be:	602a      	str	r2, [r5, #0]
 800c4c0:	2c10      	cmp	r4, #16
 800c4c2:	dc22      	bgt.n	800c50a <_vfiprintf_r+0x8fa>
 800c4c4:	606c      	str	r4, [r5, #4]
 800c4c6:	18e4      	adds	r4, r4, r3
 800c4c8:	9416      	str	r4, [sp, #88]	; 0x58
 800c4ca:	9115      	str	r1, [sp, #84]	; 0x54
 800c4cc:	2907      	cmp	r1, #7
 800c4ce:	dc00      	bgt.n	800c4d2 <_vfiprintf_r+0x8c2>
 800c4d0:	e6a9      	b.n	800c226 <_vfiprintf_r+0x616>
 800c4d2:	9903      	ldr	r1, [sp, #12]
 800c4d4:	9806      	ldr	r0, [sp, #24]
 800c4d6:	aa14      	add	r2, sp, #80	; 0x50
 800c4d8:	f7ff fb66 	bl	800bba8 <__sprint_r>
 800c4dc:	2800      	cmp	r0, #0
 800c4de:	d100      	bne.n	800c4e2 <_vfiprintf_r+0x8d2>
 800c4e0:	e6a1      	b.n	800c226 <_vfiprintf_r+0x616>
 800c4e2:	9b03      	ldr	r3, [sp, #12]
 800c4e4:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800c4e6:	07db      	lsls	r3, r3, #31
 800c4e8:	d407      	bmi.n	800c4fa <_vfiprintf_r+0x8ea>
 800c4ea:	9b03      	ldr	r3, [sp, #12]
 800c4ec:	899b      	ldrh	r3, [r3, #12]
 800c4ee:	059b      	lsls	r3, r3, #22
 800c4f0:	d403      	bmi.n	800c4fa <_vfiprintf_r+0x8ea>
 800c4f2:	9b03      	ldr	r3, [sp, #12]
 800c4f4:	6d98      	ldr	r0, [r3, #88]	; 0x58
 800c4f6:	f7fc f8fc 	bl	80086f2 <__retarget_lock_release_recursive>
 800c4fa:	9b03      	ldr	r3, [sp, #12]
 800c4fc:	899b      	ldrh	r3, [r3, #12]
 800c4fe:	065b      	lsls	r3, r3, #25
 800c500:	d401      	bmi.n	800c506 <_vfiprintf_r+0x8f6>
 800c502:	f7ff fbc3 	bl	800bc8c <_vfiprintf_r+0x7c>
 800c506:	f7ff fbbe 	bl	800bc86 <_vfiprintf_r+0x76>
 800c50a:	3310      	adds	r3, #16
 800c50c:	606e      	str	r6, [r5, #4]
 800c50e:	9316      	str	r3, [sp, #88]	; 0x58
 800c510:	9115      	str	r1, [sp, #84]	; 0x54
 800c512:	3508      	adds	r5, #8
 800c514:	2907      	cmp	r1, #7
 800c516:	dd07      	ble.n	800c528 <_vfiprintf_r+0x918>
 800c518:	9903      	ldr	r1, [sp, #12]
 800c51a:	9806      	ldr	r0, [sp, #24]
 800c51c:	aa14      	add	r2, sp, #80	; 0x50
 800c51e:	f7ff fb43 	bl	800bba8 <__sprint_r>
 800c522:	2800      	cmp	r0, #0
 800c524:	d1dd      	bne.n	800c4e2 <_vfiprintf_r+0x8d2>
 800c526:	ad17      	add	r5, sp, #92	; 0x5c
 800c528:	3c10      	subs	r4, #16
 800c52a:	e7c4      	b.n	800c4b6 <_vfiprintf_r+0x8a6>
 800c52c:	9b16      	ldr	r3, [sp, #88]	; 0x58
 800c52e:	2b00      	cmp	r3, #0
 800c530:	d102      	bne.n	800c538 <_vfiprintf_r+0x928>
 800c532:	2300      	movs	r3, #0
 800c534:	9315      	str	r3, [sp, #84]	; 0x54
 800c536:	e7d4      	b.n	800c4e2 <_vfiprintf_r+0x8d2>
 800c538:	9903      	ldr	r1, [sp, #12]
 800c53a:	9806      	ldr	r0, [sp, #24]
 800c53c:	aa14      	add	r2, sp, #80	; 0x50
 800c53e:	f7ff fb33 	bl	800bba8 <__sprint_r>
 800c542:	2800      	cmp	r0, #0
 800c544:	d0f5      	beq.n	800c532 <_vfiprintf_r+0x922>
 800c546:	e7cc      	b.n	800c4e2 <_vfiprintf_r+0x8d2>
 800c548:	0027      	movs	r7, r4
 800c54a:	2a00      	cmp	r2, #0
 800c54c:	d100      	bne.n	800c550 <_vfiprintf_r+0x940>
 800c54e:	e51b      	b.n	800bf88 <_vfiprintf_r+0x378>
 800c550:	2b01      	cmp	r3, #1
 800c552:	d100      	bne.n	800c556 <_vfiprintf_r+0x946>
 800c554:	e6fe      	b.n	800c354 <_vfiprintf_r+0x744>
 800c556:	ae40      	add	r6, sp, #256	; 0x100
 800c558:	2b02      	cmp	r3, #2
 800c55a:	d100      	bne.n	800c55e <_vfiprintf_r+0x94e>
 800c55c:	e743      	b.n	800c3e6 <_vfiprintf_r+0x7d6>
 800c55e:	2307      	movs	r3, #7
 800c560:	469c      	mov	ip, r3
 800c562:	4663      	mov	r3, ip
 800c564:	9900      	ldr	r1, [sp, #0]
 800c566:	0032      	movs	r2, r6
 800c568:	400b      	ands	r3, r1
 800c56a:	9901      	ldr	r1, [sp, #4]
 800c56c:	3e01      	subs	r6, #1
 800c56e:	074c      	lsls	r4, r1, #29
 800c570:	9900      	ldr	r1, [sp, #0]
 800c572:	3330      	adds	r3, #48	; 0x30
 800c574:	08c8      	lsrs	r0, r1, #3
 800c576:	9901      	ldr	r1, [sp, #4]
 800c578:	4304      	orrs	r4, r0
 800c57a:	08c9      	lsrs	r1, r1, #3
 800c57c:	9101      	str	r1, [sp, #4]
 800c57e:	0021      	movs	r1, r4
 800c580:	9801      	ldr	r0, [sp, #4]
 800c582:	7033      	strb	r3, [r6, #0]
 800c584:	9400      	str	r4, [sp, #0]
 800c586:	4301      	orrs	r1, r0
 800c588:	d1eb      	bne.n	800c562 <_vfiprintf_r+0x952>
 800c58a:	07f9      	lsls	r1, r7, #31
 800c58c:	d505      	bpl.n	800c59a <_vfiprintf_r+0x98a>
 800c58e:	2b30      	cmp	r3, #48	; 0x30
 800c590:	d003      	beq.n	800c59a <_vfiprintf_r+0x98a>
 800c592:	2330      	movs	r3, #48	; 0x30
 800c594:	3e01      	subs	r6, #1
 800c596:	7033      	strb	r3, [r6, #0]
 800c598:	1e96      	subs	r6, r2, #2
 800c59a:	9b05      	ldr	r3, [sp, #20]
 800c59c:	003c      	movs	r4, r7
 800c59e:	930b      	str	r3, [sp, #44]	; 0x2c
 800c5a0:	ab40      	add	r3, sp, #256	; 0x100
 800c5a2:	1b9b      	subs	r3, r3, r6
 800c5a4:	9305      	str	r3, [sp, #20]
 800c5a6:	e575      	b.n	800c094 <_vfiprintf_r+0x484>
 800c5a8:	0800edd1 	.word	0x0800edd1

0800c5ac <__sbprintf>:
 800c5ac:	b5f0      	push	{r4, r5, r6, r7, lr}
 800c5ae:	0015      	movs	r5, r2
 800c5b0:	2202      	movs	r2, #2
 800c5b2:	4c1e      	ldr	r4, [pc, #120]	; (800c62c <__sbprintf+0x80>)
 800c5b4:	001f      	movs	r7, r3
 800c5b6:	898b      	ldrh	r3, [r1, #12]
 800c5b8:	44a5      	add	sp, r4
 800c5ba:	4393      	bics	r3, r2
 800c5bc:	466a      	mov	r2, sp
 800c5be:	8193      	strh	r3, [r2, #12]
 800c5c0:	6e4b      	ldr	r3, [r1, #100]	; 0x64
 800c5c2:	0006      	movs	r6, r0
 800c5c4:	9319      	str	r3, [sp, #100]	; 0x64
 800c5c6:	89cb      	ldrh	r3, [r1, #14]
 800c5c8:	a816      	add	r0, sp, #88	; 0x58
 800c5ca:	81d3      	strh	r3, [r2, #14]
 800c5cc:	69cb      	ldr	r3, [r1, #28]
 800c5ce:	000c      	movs	r4, r1
 800c5d0:	9307      	str	r3, [sp, #28]
 800c5d2:	6a4b      	ldr	r3, [r1, #36]	; 0x24
 800c5d4:	9309      	str	r3, [sp, #36]	; 0x24
 800c5d6:	ab1a      	add	r3, sp, #104	; 0x68
 800c5d8:	9300      	str	r3, [sp, #0]
 800c5da:	9304      	str	r3, [sp, #16]
 800c5dc:	2380      	movs	r3, #128	; 0x80
 800c5de:	00db      	lsls	r3, r3, #3
 800c5e0:	9302      	str	r3, [sp, #8]
 800c5e2:	9305      	str	r3, [sp, #20]
 800c5e4:	2300      	movs	r3, #0
 800c5e6:	9306      	str	r3, [sp, #24]
 800c5e8:	f7fc f880 	bl	80086ec <__retarget_lock_init_recursive>
 800c5ec:	002a      	movs	r2, r5
 800c5ee:	003b      	movs	r3, r7
 800c5f0:	4669      	mov	r1, sp
 800c5f2:	0030      	movs	r0, r6
 800c5f4:	f7ff fb0c 	bl	800bc10 <_vfiprintf_r>
 800c5f8:	1e05      	subs	r5, r0, #0
 800c5fa:	db07      	blt.n	800c60c <__sbprintf+0x60>
 800c5fc:	4669      	mov	r1, sp
 800c5fe:	0030      	movs	r0, r6
 800c600:	f7fe fa62 	bl	800aac8 <_fflush_r>
 800c604:	2800      	cmp	r0, #0
 800c606:	d001      	beq.n	800c60c <__sbprintf+0x60>
 800c608:	2501      	movs	r5, #1
 800c60a:	426d      	negs	r5, r5
 800c60c:	466b      	mov	r3, sp
 800c60e:	899a      	ldrh	r2, [r3, #12]
 800c610:	2340      	movs	r3, #64	; 0x40
 800c612:	421a      	tst	r2, r3
 800c614:	d002      	beq.n	800c61c <__sbprintf+0x70>
 800c616:	89a2      	ldrh	r2, [r4, #12]
 800c618:	4313      	orrs	r3, r2
 800c61a:	81a3      	strh	r3, [r4, #12]
 800c61c:	9816      	ldr	r0, [sp, #88]	; 0x58
 800c61e:	f7fc f866 	bl	80086ee <__retarget_lock_close_recursive>
 800c622:	0028      	movs	r0, r5
 800c624:	4b02      	ldr	r3, [pc, #8]	; (800c630 <__sbprintf+0x84>)
 800c626:	449d      	add	sp, r3
 800c628:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800c62a:	46c0      	nop			; (mov r8, r8)
 800c62c:	fffffb94 	.word	0xfffffb94
 800c630:	0000046c 	.word	0x0000046c

0800c634 <__sfvwrite_r>:
 800c634:	b5f0      	push	{r4, r5, r6, r7, lr}
 800c636:	6893      	ldr	r3, [r2, #8]
 800c638:	b087      	sub	sp, #28
 800c63a:	000c      	movs	r4, r1
 800c63c:	9002      	str	r0, [sp, #8]
 800c63e:	9204      	str	r2, [sp, #16]
 800c640:	2b00      	cmp	r3, #0
 800c642:	d102      	bne.n	800c64a <__sfvwrite_r+0x16>
 800c644:	2000      	movs	r0, #0
 800c646:	b007      	add	sp, #28
 800c648:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800c64a:	898b      	ldrh	r3, [r1, #12]
 800c64c:	071b      	lsls	r3, r3, #28
 800c64e:	d557      	bpl.n	800c700 <__sfvwrite_r+0xcc>
 800c650:	690b      	ldr	r3, [r1, #16]
 800c652:	2b00      	cmp	r3, #0
 800c654:	d054      	beq.n	800c700 <__sfvwrite_r+0xcc>
 800c656:	9b04      	ldr	r3, [sp, #16]
 800c658:	2202      	movs	r2, #2
 800c65a:	681b      	ldr	r3, [r3, #0]
 800c65c:	9301      	str	r3, [sp, #4]
 800c65e:	89a3      	ldrh	r3, [r4, #12]
 800c660:	001f      	movs	r7, r3
 800c662:	4017      	ands	r7, r2
 800c664:	4213      	tst	r3, r2
 800c666:	d171      	bne.n	800c74c <__sfvwrite_r+0x118>
 800c668:	2201      	movs	r2, #1
 800c66a:	2101      	movs	r1, #1
 800c66c:	401a      	ands	r2, r3
 800c66e:	420b      	tst	r3, r1
 800c670:	d100      	bne.n	800c674 <__sfvwrite_r+0x40>
 800c672:	e0a5      	b.n	800c7c0 <__sfvwrite_r+0x18c>
 800c674:	0038      	movs	r0, r7
 800c676:	003e      	movs	r6, r7
 800c678:	9703      	str	r7, [sp, #12]
 800c67a:	9b03      	ldr	r3, [sp, #12]
 800c67c:	2b00      	cmp	r3, #0
 800c67e:	d100      	bne.n	800c682 <__sfvwrite_r+0x4e>
 800c680:	e10b      	b.n	800c89a <__sfvwrite_r+0x266>
 800c682:	2800      	cmp	r0, #0
 800c684:	d10a      	bne.n	800c69c <__sfvwrite_r+0x68>
 800c686:	001a      	movs	r2, r3
 800c688:	210a      	movs	r1, #10
 800c68a:	0030      	movs	r0, r6
 800c68c:	f7fe fa8b 	bl	800aba6 <memchr>
 800c690:	9b03      	ldr	r3, [sp, #12]
 800c692:	1c5f      	adds	r7, r3, #1
 800c694:	2800      	cmp	r0, #0
 800c696:	d001      	beq.n	800c69c <__sfvwrite_r+0x68>
 800c698:	3001      	adds	r0, #1
 800c69a:	1b87      	subs	r7, r0, r6
 800c69c:	9b03      	ldr	r3, [sp, #12]
 800c69e:	9705      	str	r7, [sp, #20]
 800c6a0:	429f      	cmp	r7, r3
 800c6a2:	d900      	bls.n	800c6a6 <__sfvwrite_r+0x72>
 800c6a4:	9305      	str	r3, [sp, #20]
 800c6a6:	6820      	ldr	r0, [r4, #0]
 800c6a8:	6922      	ldr	r2, [r4, #16]
 800c6aa:	68a5      	ldr	r5, [r4, #8]
 800c6ac:	6963      	ldr	r3, [r4, #20]
 800c6ae:	4290      	cmp	r0, r2
 800c6b0:	d800      	bhi.n	800c6b4 <__sfvwrite_r+0x80>
 800c6b2:	e0fb      	b.n	800c8ac <__sfvwrite_r+0x278>
 800c6b4:	9a05      	ldr	r2, [sp, #20]
 800c6b6:	18ed      	adds	r5, r5, r3
 800c6b8:	42aa      	cmp	r2, r5
 800c6ba:	dc00      	bgt.n	800c6be <__sfvwrite_r+0x8a>
 800c6bc:	e0f6      	b.n	800c8ac <__sfvwrite_r+0x278>
 800c6be:	0031      	movs	r1, r6
 800c6c0:	002a      	movs	r2, r5
 800c6c2:	f000 f9e0 	bl	800ca86 <memmove>
 800c6c6:	6823      	ldr	r3, [r4, #0]
 800c6c8:	0021      	movs	r1, r4
 800c6ca:	195b      	adds	r3, r3, r5
 800c6cc:	9802      	ldr	r0, [sp, #8]
 800c6ce:	6023      	str	r3, [r4, #0]
 800c6d0:	f7fe f9fa 	bl	800aac8 <_fflush_r>
 800c6d4:	2800      	cmp	r0, #0
 800c6d6:	d16e      	bne.n	800c7b6 <__sfvwrite_r+0x182>
 800c6d8:	2001      	movs	r0, #1
 800c6da:	1b7f      	subs	r7, r7, r5
 800c6dc:	d105      	bne.n	800c6ea <__sfvwrite_r+0xb6>
 800c6de:	0021      	movs	r1, r4
 800c6e0:	9802      	ldr	r0, [sp, #8]
 800c6e2:	f7fe f9f1 	bl	800aac8 <_fflush_r>
 800c6e6:	2800      	cmp	r0, #0
 800c6e8:	d165      	bne.n	800c7b6 <__sfvwrite_r+0x182>
 800c6ea:	9b03      	ldr	r3, [sp, #12]
 800c6ec:	9a04      	ldr	r2, [sp, #16]
 800c6ee:	1b5b      	subs	r3, r3, r5
 800c6f0:	9303      	str	r3, [sp, #12]
 800c6f2:	9b04      	ldr	r3, [sp, #16]
 800c6f4:	1976      	adds	r6, r6, r5
 800c6f6:	689b      	ldr	r3, [r3, #8]
 800c6f8:	1b5b      	subs	r3, r3, r5
 800c6fa:	6093      	str	r3, [r2, #8]
 800c6fc:	d1bd      	bne.n	800c67a <__sfvwrite_r+0x46>
 800c6fe:	e7a1      	b.n	800c644 <__sfvwrite_r+0x10>
 800c700:	0021      	movs	r1, r4
 800c702:	9802      	ldr	r0, [sp, #8]
 800c704:	f000 f8f4 	bl	800c8f0 <__swsetup_r>
 800c708:	2800      	cmp	r0, #0
 800c70a:	d0a4      	beq.n	800c656 <__sfvwrite_r+0x22>
 800c70c:	2001      	movs	r0, #1
 800c70e:	4240      	negs	r0, r0
 800c710:	e799      	b.n	800c646 <__sfvwrite_r+0x12>
 800c712:	9b01      	ldr	r3, [sp, #4]
 800c714:	681e      	ldr	r6, [r3, #0]
 800c716:	685d      	ldr	r5, [r3, #4]
 800c718:	3308      	adds	r3, #8
 800c71a:	9301      	str	r3, [sp, #4]
 800c71c:	6a67      	ldr	r7, [r4, #36]	; 0x24
 800c71e:	69e1      	ldr	r1, [r4, #28]
 800c720:	2d00      	cmp	r5, #0
 800c722:	d0f6      	beq.n	800c712 <__sfvwrite_r+0xde>
 800c724:	4a6e      	ldr	r2, [pc, #440]	; (800c8e0 <__sfvwrite_r+0x2ac>)
 800c726:	002b      	movs	r3, r5
 800c728:	4295      	cmp	r5, r2
 800c72a:	d900      	bls.n	800c72e <__sfvwrite_r+0xfa>
 800c72c:	0013      	movs	r3, r2
 800c72e:	0032      	movs	r2, r6
 800c730:	9802      	ldr	r0, [sp, #8]
 800c732:	47b8      	blx	r7
 800c734:	2800      	cmp	r0, #0
 800c736:	dd3e      	ble.n	800c7b6 <__sfvwrite_r+0x182>
 800c738:	9b04      	ldr	r3, [sp, #16]
 800c73a:	9a04      	ldr	r2, [sp, #16]
 800c73c:	689b      	ldr	r3, [r3, #8]
 800c73e:	1836      	adds	r6, r6, r0
 800c740:	1a1b      	subs	r3, r3, r0
 800c742:	1a2d      	subs	r5, r5, r0
 800c744:	6093      	str	r3, [r2, #8]
 800c746:	2b00      	cmp	r3, #0
 800c748:	d1e8      	bne.n	800c71c <__sfvwrite_r+0xe8>
 800c74a:	e77b      	b.n	800c644 <__sfvwrite_r+0x10>
 800c74c:	2600      	movs	r6, #0
 800c74e:	0035      	movs	r5, r6
 800c750:	e7e4      	b.n	800c71c <__sfvwrite_r+0xe8>
 800c752:	9b01      	ldr	r3, [sp, #4]
 800c754:	681b      	ldr	r3, [r3, #0]
 800c756:	9303      	str	r3, [sp, #12]
 800c758:	9b01      	ldr	r3, [sp, #4]
 800c75a:	685d      	ldr	r5, [r3, #4]
 800c75c:	3308      	adds	r3, #8
 800c75e:	9301      	str	r3, [sp, #4]
 800c760:	220c      	movs	r2, #12
 800c762:	5ea3      	ldrsh	r3, [r4, r2]
 800c764:	6820      	ldr	r0, [r4, #0]
 800c766:	68a6      	ldr	r6, [r4, #8]
 800c768:	2d00      	cmp	r5, #0
 800c76a:	d0f2      	beq.n	800c752 <__sfvwrite_r+0x11e>
 800c76c:	2180      	movs	r1, #128	; 0x80
 800c76e:	0089      	lsls	r1, r1, #2
 800c770:	b29a      	uxth	r2, r3
 800c772:	420b      	tst	r3, r1
 800c774:	d062      	beq.n	800c83c <__sfvwrite_r+0x208>
 800c776:	42ae      	cmp	r6, r5
 800c778:	d837      	bhi.n	800c7ea <__sfvwrite_r+0x1b6>
 800c77a:	2390      	movs	r3, #144	; 0x90
 800c77c:	00db      	lsls	r3, r3, #3
 800c77e:	421a      	tst	r2, r3
 800c780:	d033      	beq.n	800c7ea <__sfvwrite_r+0x1b6>
 800c782:	6921      	ldr	r1, [r4, #16]
 800c784:	1a43      	subs	r3, r0, r1
 800c786:	2003      	movs	r0, #3
 800c788:	9305      	str	r3, [sp, #20]
 800c78a:	6963      	ldr	r3, [r4, #20]
 800c78c:	4343      	muls	r3, r0
 800c78e:	0fdf      	lsrs	r7, r3, #31
 800c790:	18ff      	adds	r7, r7, r3
 800c792:	9b05      	ldr	r3, [sp, #20]
 800c794:	107f      	asrs	r7, r7, #1
 800c796:	3301      	adds	r3, #1
 800c798:	195b      	adds	r3, r3, r5
 800c79a:	42bb      	cmp	r3, r7
 800c79c:	d900      	bls.n	800c7a0 <__sfvwrite_r+0x16c>
 800c79e:	001f      	movs	r7, r3
 800c7a0:	0552      	lsls	r2, r2, #21
 800c7a2:	d53c      	bpl.n	800c81e <__sfvwrite_r+0x1ea>
 800c7a4:	0039      	movs	r1, r7
 800c7a6:	9802      	ldr	r0, [sp, #8]
 800c7a8:	f7fc f8c8 	bl	800893c <_malloc_r>
 800c7ac:	1e06      	subs	r6, r0, #0
 800c7ae:	d10a      	bne.n	800c7c6 <__sfvwrite_r+0x192>
 800c7b0:	230c      	movs	r3, #12
 800c7b2:	9a02      	ldr	r2, [sp, #8]
 800c7b4:	6013      	str	r3, [r2, #0]
 800c7b6:	2340      	movs	r3, #64	; 0x40
 800c7b8:	89a2      	ldrh	r2, [r4, #12]
 800c7ba:	4313      	orrs	r3, r2
 800c7bc:	81a3      	strh	r3, [r4, #12]
 800c7be:	e7a5      	b.n	800c70c <__sfvwrite_r+0xd8>
 800c7c0:	0015      	movs	r5, r2
 800c7c2:	9203      	str	r2, [sp, #12]
 800c7c4:	e7cc      	b.n	800c760 <__sfvwrite_r+0x12c>
 800c7c6:	9a05      	ldr	r2, [sp, #20]
 800c7c8:	6921      	ldr	r1, [r4, #16]
 800c7ca:	f7fb ff93 	bl	80086f4 <memcpy>
 800c7ce:	89a2      	ldrh	r2, [r4, #12]
 800c7d0:	4b44      	ldr	r3, [pc, #272]	; (800c8e4 <__sfvwrite_r+0x2b0>)
 800c7d2:	401a      	ands	r2, r3
 800c7d4:	2380      	movs	r3, #128	; 0x80
 800c7d6:	4313      	orrs	r3, r2
 800c7d8:	81a3      	strh	r3, [r4, #12]
 800c7da:	9b05      	ldr	r3, [sp, #20]
 800c7dc:	6126      	str	r6, [r4, #16]
 800c7de:	18f6      	adds	r6, r6, r3
 800c7e0:	6026      	str	r6, [r4, #0]
 800c7e2:	002e      	movs	r6, r5
 800c7e4:	6167      	str	r7, [r4, #20]
 800c7e6:	1aff      	subs	r7, r7, r3
 800c7e8:	60a7      	str	r7, [r4, #8]
 800c7ea:	002f      	movs	r7, r5
 800c7ec:	42ae      	cmp	r6, r5
 800c7ee:	d900      	bls.n	800c7f2 <__sfvwrite_r+0x1be>
 800c7f0:	002e      	movs	r6, r5
 800c7f2:	0032      	movs	r2, r6
 800c7f4:	9903      	ldr	r1, [sp, #12]
 800c7f6:	6820      	ldr	r0, [r4, #0]
 800c7f8:	f000 f945 	bl	800ca86 <memmove>
 800c7fc:	68a3      	ldr	r3, [r4, #8]
 800c7fe:	1b9b      	subs	r3, r3, r6
 800c800:	60a3      	str	r3, [r4, #8]
 800c802:	6823      	ldr	r3, [r4, #0]
 800c804:	199b      	adds	r3, r3, r6
 800c806:	6023      	str	r3, [r4, #0]
 800c808:	9b03      	ldr	r3, [sp, #12]
 800c80a:	9a04      	ldr	r2, [sp, #16]
 800c80c:	19db      	adds	r3, r3, r7
 800c80e:	9303      	str	r3, [sp, #12]
 800c810:	9b04      	ldr	r3, [sp, #16]
 800c812:	1bed      	subs	r5, r5, r7
 800c814:	689b      	ldr	r3, [r3, #8]
 800c816:	1bdb      	subs	r3, r3, r7
 800c818:	6093      	str	r3, [r2, #8]
 800c81a:	d1a1      	bne.n	800c760 <__sfvwrite_r+0x12c>
 800c81c:	e712      	b.n	800c644 <__sfvwrite_r+0x10>
 800c81e:	003a      	movs	r2, r7
 800c820:	9802      	ldr	r0, [sp, #8]
 800c822:	f000 f94b 	bl	800cabc <_realloc_r>
 800c826:	1e06      	subs	r6, r0, #0
 800c828:	d1d7      	bne.n	800c7da <__sfvwrite_r+0x1a6>
 800c82a:	6921      	ldr	r1, [r4, #16]
 800c82c:	9802      	ldr	r0, [sp, #8]
 800c82e:	f7fb ffd3 	bl	80087d8 <_free_r>
 800c832:	2280      	movs	r2, #128	; 0x80
 800c834:	89a3      	ldrh	r3, [r4, #12]
 800c836:	4393      	bics	r3, r2
 800c838:	81a3      	strh	r3, [r4, #12]
 800c83a:	e7b9      	b.n	800c7b0 <__sfvwrite_r+0x17c>
 800c83c:	6923      	ldr	r3, [r4, #16]
 800c83e:	4283      	cmp	r3, r0
 800c840:	d302      	bcc.n	800c848 <__sfvwrite_r+0x214>
 800c842:	6967      	ldr	r7, [r4, #20]
 800c844:	42af      	cmp	r7, r5
 800c846:	d916      	bls.n	800c876 <__sfvwrite_r+0x242>
 800c848:	42ae      	cmp	r6, r5
 800c84a:	d900      	bls.n	800c84e <__sfvwrite_r+0x21a>
 800c84c:	002e      	movs	r6, r5
 800c84e:	0032      	movs	r2, r6
 800c850:	9903      	ldr	r1, [sp, #12]
 800c852:	f000 f918 	bl	800ca86 <memmove>
 800c856:	68a3      	ldr	r3, [r4, #8]
 800c858:	6822      	ldr	r2, [r4, #0]
 800c85a:	1b9b      	subs	r3, r3, r6
 800c85c:	1992      	adds	r2, r2, r6
 800c85e:	0037      	movs	r7, r6
 800c860:	60a3      	str	r3, [r4, #8]
 800c862:	6022      	str	r2, [r4, #0]
 800c864:	2b00      	cmp	r3, #0
 800c866:	d1cf      	bne.n	800c808 <__sfvwrite_r+0x1d4>
 800c868:	0021      	movs	r1, r4
 800c86a:	9802      	ldr	r0, [sp, #8]
 800c86c:	f7fe f92c 	bl	800aac8 <_fflush_r>
 800c870:	2800      	cmp	r0, #0
 800c872:	d0c9      	beq.n	800c808 <__sfvwrite_r+0x1d4>
 800c874:	e79f      	b.n	800c7b6 <__sfvwrite_r+0x182>
 800c876:	4b1c      	ldr	r3, [pc, #112]	; (800c8e8 <__sfvwrite_r+0x2b4>)
 800c878:	0028      	movs	r0, r5
 800c87a:	429d      	cmp	r5, r3
 800c87c:	d900      	bls.n	800c880 <__sfvwrite_r+0x24c>
 800c87e:	481b      	ldr	r0, [pc, #108]	; (800c8ec <__sfvwrite_r+0x2b8>)
 800c880:	0039      	movs	r1, r7
 800c882:	f7f3 fce5 	bl	8000250 <__divsi3>
 800c886:	003b      	movs	r3, r7
 800c888:	6a66      	ldr	r6, [r4, #36]	; 0x24
 800c88a:	4343      	muls	r3, r0
 800c88c:	9a03      	ldr	r2, [sp, #12]
 800c88e:	69e1      	ldr	r1, [r4, #28]
 800c890:	9802      	ldr	r0, [sp, #8]
 800c892:	47b0      	blx	r6
 800c894:	1e07      	subs	r7, r0, #0
 800c896:	dcb7      	bgt.n	800c808 <__sfvwrite_r+0x1d4>
 800c898:	e78d      	b.n	800c7b6 <__sfvwrite_r+0x182>
 800c89a:	9b01      	ldr	r3, [sp, #4]
 800c89c:	2000      	movs	r0, #0
 800c89e:	681e      	ldr	r6, [r3, #0]
 800c8a0:	685b      	ldr	r3, [r3, #4]
 800c8a2:	9303      	str	r3, [sp, #12]
 800c8a4:	9b01      	ldr	r3, [sp, #4]
 800c8a6:	3308      	adds	r3, #8
 800c8a8:	9301      	str	r3, [sp, #4]
 800c8aa:	e6e6      	b.n	800c67a <__sfvwrite_r+0x46>
 800c8ac:	9a05      	ldr	r2, [sp, #20]
 800c8ae:	4293      	cmp	r3, r2
 800c8b0:	dc08      	bgt.n	800c8c4 <__sfvwrite_r+0x290>
 800c8b2:	6a65      	ldr	r5, [r4, #36]	; 0x24
 800c8b4:	0032      	movs	r2, r6
 800c8b6:	69e1      	ldr	r1, [r4, #28]
 800c8b8:	9802      	ldr	r0, [sp, #8]
 800c8ba:	47a8      	blx	r5
 800c8bc:	1e05      	subs	r5, r0, #0
 800c8be:	dd00      	ble.n	800c8c2 <__sfvwrite_r+0x28e>
 800c8c0:	e70a      	b.n	800c6d8 <__sfvwrite_r+0xa4>
 800c8c2:	e778      	b.n	800c7b6 <__sfvwrite_r+0x182>
 800c8c4:	9a05      	ldr	r2, [sp, #20]
 800c8c6:	0031      	movs	r1, r6
 800c8c8:	f000 f8dd 	bl	800ca86 <memmove>
 800c8cc:	9a05      	ldr	r2, [sp, #20]
 800c8ce:	68a3      	ldr	r3, [r4, #8]
 800c8d0:	0015      	movs	r5, r2
 800c8d2:	1a9b      	subs	r3, r3, r2
 800c8d4:	60a3      	str	r3, [r4, #8]
 800c8d6:	6823      	ldr	r3, [r4, #0]
 800c8d8:	189b      	adds	r3, r3, r2
 800c8da:	6023      	str	r3, [r4, #0]
 800c8dc:	e6fc      	b.n	800c6d8 <__sfvwrite_r+0xa4>
 800c8de:	46c0      	nop			; (mov r8, r8)
 800c8e0:	7ffffc00 	.word	0x7ffffc00
 800c8e4:	fffffb7f 	.word	0xfffffb7f
 800c8e8:	7ffffffe 	.word	0x7ffffffe
 800c8ec:	7fffffff 	.word	0x7fffffff

0800c8f0 <__swsetup_r>:
 800c8f0:	4b30      	ldr	r3, [pc, #192]	; (800c9b4 <__swsetup_r+0xc4>)
 800c8f2:	b570      	push	{r4, r5, r6, lr}
 800c8f4:	0005      	movs	r5, r0
 800c8f6:	6818      	ldr	r0, [r3, #0]
 800c8f8:	000c      	movs	r4, r1
 800c8fa:	2800      	cmp	r0, #0
 800c8fc:	d004      	beq.n	800c908 <__swsetup_r+0x18>
 800c8fe:	6b43      	ldr	r3, [r0, #52]	; 0x34
 800c900:	2b00      	cmp	r3, #0
 800c902:	d101      	bne.n	800c908 <__swsetup_r+0x18>
 800c904:	f7fb fd96 	bl	8008434 <__sinit>
 800c908:	230c      	movs	r3, #12
 800c90a:	5ee2      	ldrsh	r2, [r4, r3]
 800c90c:	b293      	uxth	r3, r2
 800c90e:	0711      	lsls	r1, r2, #28
 800c910:	d423      	bmi.n	800c95a <__swsetup_r+0x6a>
 800c912:	06d9      	lsls	r1, r3, #27
 800c914:	d407      	bmi.n	800c926 <__swsetup_r+0x36>
 800c916:	2309      	movs	r3, #9
 800c918:	2001      	movs	r0, #1
 800c91a:	602b      	str	r3, [r5, #0]
 800c91c:	3337      	adds	r3, #55	; 0x37
 800c91e:	4313      	orrs	r3, r2
 800c920:	81a3      	strh	r3, [r4, #12]
 800c922:	4240      	negs	r0, r0
 800c924:	bd70      	pop	{r4, r5, r6, pc}
 800c926:	075b      	lsls	r3, r3, #29
 800c928:	d513      	bpl.n	800c952 <__swsetup_r+0x62>
 800c92a:	6b21      	ldr	r1, [r4, #48]	; 0x30
 800c92c:	2900      	cmp	r1, #0
 800c92e:	d008      	beq.n	800c942 <__swsetup_r+0x52>
 800c930:	0023      	movs	r3, r4
 800c932:	3340      	adds	r3, #64	; 0x40
 800c934:	4299      	cmp	r1, r3
 800c936:	d002      	beq.n	800c93e <__swsetup_r+0x4e>
 800c938:	0028      	movs	r0, r5
 800c93a:	f7fb ff4d 	bl	80087d8 <_free_r>
 800c93e:	2300      	movs	r3, #0
 800c940:	6323      	str	r3, [r4, #48]	; 0x30
 800c942:	2224      	movs	r2, #36	; 0x24
 800c944:	89a3      	ldrh	r3, [r4, #12]
 800c946:	4393      	bics	r3, r2
 800c948:	81a3      	strh	r3, [r4, #12]
 800c94a:	2300      	movs	r3, #0
 800c94c:	6063      	str	r3, [r4, #4]
 800c94e:	6923      	ldr	r3, [r4, #16]
 800c950:	6023      	str	r3, [r4, #0]
 800c952:	2308      	movs	r3, #8
 800c954:	89a2      	ldrh	r2, [r4, #12]
 800c956:	4313      	orrs	r3, r2
 800c958:	81a3      	strh	r3, [r4, #12]
 800c95a:	6923      	ldr	r3, [r4, #16]
 800c95c:	2b00      	cmp	r3, #0
 800c95e:	d10b      	bne.n	800c978 <__swsetup_r+0x88>
 800c960:	21a0      	movs	r1, #160	; 0xa0
 800c962:	2280      	movs	r2, #128	; 0x80
 800c964:	89a3      	ldrh	r3, [r4, #12]
 800c966:	0089      	lsls	r1, r1, #2
 800c968:	0092      	lsls	r2, r2, #2
 800c96a:	400b      	ands	r3, r1
 800c96c:	4293      	cmp	r3, r2
 800c96e:	d003      	beq.n	800c978 <__swsetup_r+0x88>
 800c970:	0021      	movs	r1, r4
 800c972:	0028      	movs	r0, r5
 800c974:	f000 fa8e 	bl	800ce94 <__smakebuf_r>
 800c978:	220c      	movs	r2, #12
 800c97a:	5ea3      	ldrsh	r3, [r4, r2]
 800c97c:	2001      	movs	r0, #1
 800c97e:	001a      	movs	r2, r3
 800c980:	b299      	uxth	r1, r3
 800c982:	4002      	ands	r2, r0
 800c984:	4203      	tst	r3, r0
 800c986:	d00f      	beq.n	800c9a8 <__swsetup_r+0xb8>
 800c988:	2200      	movs	r2, #0
 800c98a:	60a2      	str	r2, [r4, #8]
 800c98c:	6962      	ldr	r2, [r4, #20]
 800c98e:	4252      	negs	r2, r2
 800c990:	61a2      	str	r2, [r4, #24]
 800c992:	2000      	movs	r0, #0
 800c994:	6922      	ldr	r2, [r4, #16]
 800c996:	4282      	cmp	r2, r0
 800c998:	d1c4      	bne.n	800c924 <__swsetup_r+0x34>
 800c99a:	0609      	lsls	r1, r1, #24
 800c99c:	d5c2      	bpl.n	800c924 <__swsetup_r+0x34>
 800c99e:	2240      	movs	r2, #64	; 0x40
 800c9a0:	4313      	orrs	r3, r2
 800c9a2:	81a3      	strh	r3, [r4, #12]
 800c9a4:	3801      	subs	r0, #1
 800c9a6:	e7bd      	b.n	800c924 <__swsetup_r+0x34>
 800c9a8:	0788      	lsls	r0, r1, #30
 800c9aa:	d400      	bmi.n	800c9ae <__swsetup_r+0xbe>
 800c9ac:	6962      	ldr	r2, [r4, #20]
 800c9ae:	60a2      	str	r2, [r4, #8]
 800c9b0:	e7ef      	b.n	800c992 <__swsetup_r+0xa2>
 800c9b2:	46c0      	nop			; (mov r8, r8)
 800c9b4:	200002a8 	.word	0x200002a8

0800c9b8 <__fputwc>:
 800c9b8:	b5f0      	push	{r4, r5, r6, r7, lr}
 800c9ba:	b085      	sub	sp, #20
 800c9bc:	000e      	movs	r6, r1
 800c9be:	0015      	movs	r5, r2
 800c9c0:	9001      	str	r0, [sp, #4]
 800c9c2:	f7fb fe13 	bl	80085ec <__locale_mb_cur_max>
 800c9c6:	0004      	movs	r4, r0
 800c9c8:	2801      	cmp	r0, #1
 800c9ca:	d119      	bne.n	800ca00 <__fputwc+0x48>
 800c9cc:	1e73      	subs	r3, r6, #1
 800c9ce:	2bfe      	cmp	r3, #254	; 0xfe
 800c9d0:	d816      	bhi.n	800ca00 <__fputwc+0x48>
 800c9d2:	ab02      	add	r3, sp, #8
 800c9d4:	711e      	strb	r6, [r3, #4]
 800c9d6:	2700      	movs	r7, #0
 800c9d8:	42a7      	cmp	r7, r4
 800c9da:	d020      	beq.n	800ca1e <__fputwc+0x66>
 800c9dc:	ab03      	add	r3, sp, #12
 800c9de:	5dd9      	ldrb	r1, [r3, r7]
 800c9e0:	68ab      	ldr	r3, [r5, #8]
 800c9e2:	3b01      	subs	r3, #1
 800c9e4:	60ab      	str	r3, [r5, #8]
 800c9e6:	2b00      	cmp	r3, #0
 800c9e8:	da04      	bge.n	800c9f4 <__fputwc+0x3c>
 800c9ea:	69aa      	ldr	r2, [r5, #24]
 800c9ec:	4293      	cmp	r3, r2
 800c9ee:	db19      	blt.n	800ca24 <__fputwc+0x6c>
 800c9f0:	290a      	cmp	r1, #10
 800c9f2:	d017      	beq.n	800ca24 <__fputwc+0x6c>
 800c9f4:	682b      	ldr	r3, [r5, #0]
 800c9f6:	1c5a      	adds	r2, r3, #1
 800c9f8:	602a      	str	r2, [r5, #0]
 800c9fa:	7019      	strb	r1, [r3, #0]
 800c9fc:	3701      	adds	r7, #1
 800c9fe:	e7eb      	b.n	800c9d8 <__fputwc+0x20>
 800ca00:	002b      	movs	r3, r5
 800ca02:	0032      	movs	r2, r6
 800ca04:	9801      	ldr	r0, [sp, #4]
 800ca06:	335c      	adds	r3, #92	; 0x5c
 800ca08:	a903      	add	r1, sp, #12
 800ca0a:	f000 f9fd 	bl	800ce08 <_wcrtomb_r>
 800ca0e:	0004      	movs	r4, r0
 800ca10:	1c43      	adds	r3, r0, #1
 800ca12:	d1e0      	bne.n	800c9d6 <__fputwc+0x1e>
 800ca14:	2340      	movs	r3, #64	; 0x40
 800ca16:	0006      	movs	r6, r0
 800ca18:	89aa      	ldrh	r2, [r5, #12]
 800ca1a:	4313      	orrs	r3, r2
 800ca1c:	81ab      	strh	r3, [r5, #12]
 800ca1e:	0030      	movs	r0, r6
 800ca20:	b005      	add	sp, #20
 800ca22:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800ca24:	002a      	movs	r2, r5
 800ca26:	9801      	ldr	r0, [sp, #4]
 800ca28:	f000 fa72 	bl	800cf10 <__swbuf_r>
 800ca2c:	1c43      	adds	r3, r0, #1
 800ca2e:	d1e5      	bne.n	800c9fc <__fputwc+0x44>
 800ca30:	0006      	movs	r6, r0
 800ca32:	e7f4      	b.n	800ca1e <__fputwc+0x66>

0800ca34 <_fputwc_r>:
 800ca34:	6e53      	ldr	r3, [r2, #100]	; 0x64
 800ca36:	b570      	push	{r4, r5, r6, lr}
 800ca38:	0005      	movs	r5, r0
 800ca3a:	000e      	movs	r6, r1
 800ca3c:	0014      	movs	r4, r2
 800ca3e:	07db      	lsls	r3, r3, #31
 800ca40:	d405      	bmi.n	800ca4e <_fputwc_r+0x1a>
 800ca42:	8993      	ldrh	r3, [r2, #12]
 800ca44:	059b      	lsls	r3, r3, #22
 800ca46:	d402      	bmi.n	800ca4e <_fputwc_r+0x1a>
 800ca48:	6d90      	ldr	r0, [r2, #88]	; 0x58
 800ca4a:	f7fb fe51 	bl	80086f0 <__retarget_lock_acquire_recursive>
 800ca4e:	230c      	movs	r3, #12
 800ca50:	5ee2      	ldrsh	r2, [r4, r3]
 800ca52:	2380      	movs	r3, #128	; 0x80
 800ca54:	019b      	lsls	r3, r3, #6
 800ca56:	421a      	tst	r2, r3
 800ca58:	d104      	bne.n	800ca64 <_fputwc_r+0x30>
 800ca5a:	431a      	orrs	r2, r3
 800ca5c:	81a2      	strh	r2, [r4, #12]
 800ca5e:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800ca60:	4313      	orrs	r3, r2
 800ca62:	6663      	str	r3, [r4, #100]	; 0x64
 800ca64:	0028      	movs	r0, r5
 800ca66:	0022      	movs	r2, r4
 800ca68:	0031      	movs	r1, r6
 800ca6a:	f7ff ffa5 	bl	800c9b8 <__fputwc>
 800ca6e:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800ca70:	0005      	movs	r5, r0
 800ca72:	07db      	lsls	r3, r3, #31
 800ca74:	d405      	bmi.n	800ca82 <_fputwc_r+0x4e>
 800ca76:	89a3      	ldrh	r3, [r4, #12]
 800ca78:	059b      	lsls	r3, r3, #22
 800ca7a:	d402      	bmi.n	800ca82 <_fputwc_r+0x4e>
 800ca7c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800ca7e:	f7fb fe38 	bl	80086f2 <__retarget_lock_release_recursive>
 800ca82:	0028      	movs	r0, r5
 800ca84:	bd70      	pop	{r4, r5, r6, pc}

0800ca86 <memmove>:
 800ca86:	b510      	push	{r4, lr}
 800ca88:	4288      	cmp	r0, r1
 800ca8a:	d902      	bls.n	800ca92 <memmove+0xc>
 800ca8c:	188b      	adds	r3, r1, r2
 800ca8e:	4298      	cmp	r0, r3
 800ca90:	d303      	bcc.n	800ca9a <memmove+0x14>
 800ca92:	2300      	movs	r3, #0
 800ca94:	e007      	b.n	800caa6 <memmove+0x20>
 800ca96:	5c8b      	ldrb	r3, [r1, r2]
 800ca98:	5483      	strb	r3, [r0, r2]
 800ca9a:	3a01      	subs	r2, #1
 800ca9c:	d2fb      	bcs.n	800ca96 <memmove+0x10>
 800ca9e:	bd10      	pop	{r4, pc}
 800caa0:	5ccc      	ldrb	r4, [r1, r3]
 800caa2:	54c4      	strb	r4, [r0, r3]
 800caa4:	3301      	adds	r3, #1
 800caa6:	429a      	cmp	r2, r3
 800caa8:	d1fa      	bne.n	800caa0 <memmove+0x1a>
 800caaa:	e7f8      	b.n	800ca9e <memmove+0x18>

0800caac <abort>:
 800caac:	2006      	movs	r0, #6
 800caae:	b510      	push	{r4, lr}
 800cab0:	f000 faac 	bl	800d00c <raise>
 800cab4:	2001      	movs	r0, #1
 800cab6:	f7f6 fa85 	bl	8002fc4 <_exit>
	...

0800cabc <_realloc_r>:
 800cabc:	b5f0      	push	{r4, r5, r6, r7, lr}
 800cabe:	b087      	sub	sp, #28
 800cac0:	1e0c      	subs	r4, r1, #0
 800cac2:	9001      	str	r0, [sp, #4]
 800cac4:	9205      	str	r2, [sp, #20]
 800cac6:	d106      	bne.n	800cad6 <_realloc_r+0x1a>
 800cac8:	0011      	movs	r1, r2
 800caca:	f7fb ff37 	bl	800893c <_malloc_r>
 800cace:	0007      	movs	r7, r0
 800cad0:	0038      	movs	r0, r7
 800cad2:	b007      	add	sp, #28
 800cad4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800cad6:	9801      	ldr	r0, [sp, #4]
 800cad8:	f7fc f956 	bl	8008d88 <__malloc_lock>
 800cadc:	0023      	movs	r3, r4
 800cade:	3b08      	subs	r3, #8
 800cae0:	685f      	ldr	r7, [r3, #4]
 800cae2:	9304      	str	r3, [sp, #16]
 800cae4:	9b05      	ldr	r3, [sp, #20]
 800cae6:	330b      	adds	r3, #11
 800cae8:	2b16      	cmp	r3, #22
 800caea:	d908      	bls.n	800cafe <_realloc_r+0x42>
 800caec:	2207      	movs	r2, #7
 800caee:	4393      	bics	r3, r2
 800caf0:	9300      	str	r3, [sp, #0]
 800caf2:	d506      	bpl.n	800cb02 <_realloc_r+0x46>
 800caf4:	230c      	movs	r3, #12
 800caf6:	9a01      	ldr	r2, [sp, #4]
 800caf8:	2700      	movs	r7, #0
 800cafa:	6013      	str	r3, [r2, #0]
 800cafc:	e7e8      	b.n	800cad0 <_realloc_r+0x14>
 800cafe:	2310      	movs	r3, #16
 800cb00:	9300      	str	r3, [sp, #0]
 800cb02:	9b00      	ldr	r3, [sp, #0]
 800cb04:	9a05      	ldr	r2, [sp, #20]
 800cb06:	4293      	cmp	r3, r2
 800cb08:	d3f4      	bcc.n	800caf4 <_realloc_r+0x38>
 800cb0a:	9b04      	ldr	r3, [sp, #16]
 800cb0c:	003a      	movs	r2, r7
 800cb0e:	9302      	str	r3, [sp, #8]
 800cb10:	2303      	movs	r3, #3
 800cb12:	439a      	bics	r2, r3
 800cb14:	9b00      	ldr	r3, [sp, #0]
 800cb16:	9203      	str	r2, [sp, #12]
 800cb18:	4293      	cmp	r3, r2
 800cb1a:	dc00      	bgt.n	800cb1e <_realloc_r+0x62>
 800cb1c:	e169      	b.n	800cdf2 <_realloc_r+0x336>
 800cb1e:	9b04      	ldr	r3, [sp, #16]
 800cb20:	48b8      	ldr	r0, [pc, #736]	; (800ce04 <_realloc_r+0x348>)
 800cb22:	189b      	adds	r3, r3, r2
 800cb24:	6882      	ldr	r2, [r0, #8]
 800cb26:	4694      	mov	ip, r2
 800cb28:	685a      	ldr	r2, [r3, #4]
 800cb2a:	459c      	cmp	ip, r3
 800cb2c:	d006      	beq.n	800cb3c <_realloc_r+0x80>
 800cb2e:	2501      	movs	r5, #1
 800cb30:	0011      	movs	r1, r2
 800cb32:	43a9      	bics	r1, r5
 800cb34:	1859      	adds	r1, r3, r1
 800cb36:	6849      	ldr	r1, [r1, #4]
 800cb38:	4229      	tst	r1, r5
 800cb3a:	d144      	bne.n	800cbc6 <_realloc_r+0x10a>
 800cb3c:	2103      	movs	r1, #3
 800cb3e:	438a      	bics	r2, r1
 800cb40:	9903      	ldr	r1, [sp, #12]
 800cb42:	188e      	adds	r6, r1, r2
 800cb44:	9900      	ldr	r1, [sp, #0]
 800cb46:	459c      	cmp	ip, r3
 800cb48:	d117      	bne.n	800cb7a <_realloc_r+0xbe>
 800cb4a:	3110      	adds	r1, #16
 800cb4c:	42b1      	cmp	r1, r6
 800cb4e:	dc3c      	bgt.n	800cbca <_realloc_r+0x10e>
 800cb50:	9a00      	ldr	r2, [sp, #0]
 800cb52:	2101      	movs	r1, #1
 800cb54:	4694      	mov	ip, r2
 800cb56:	1ab6      	subs	r6, r6, r2
 800cb58:	0022      	movs	r2, r4
 800cb5a:	9b04      	ldr	r3, [sp, #16]
 800cb5c:	430e      	orrs	r6, r1
 800cb5e:	4463      	add	r3, ip
 800cb60:	6083      	str	r3, [r0, #8]
 800cb62:	3a08      	subs	r2, #8
 800cb64:	605e      	str	r6, [r3, #4]
 800cb66:	6853      	ldr	r3, [r2, #4]
 800cb68:	9801      	ldr	r0, [sp, #4]
 800cb6a:	400b      	ands	r3, r1
 800cb6c:	4661      	mov	r1, ip
 800cb6e:	430b      	orrs	r3, r1
 800cb70:	6053      	str	r3, [r2, #4]
 800cb72:	f7fc f911 	bl	8008d98 <__malloc_unlock>
 800cb76:	0027      	movs	r7, r4
 800cb78:	e7aa      	b.n	800cad0 <_realloc_r+0x14>
 800cb7a:	42b1      	cmp	r1, r6
 800cb7c:	dc25      	bgt.n	800cbca <_realloc_r+0x10e>
 800cb7e:	68da      	ldr	r2, [r3, #12]
 800cb80:	689b      	ldr	r3, [r3, #8]
 800cb82:	60da      	str	r2, [r3, #12]
 800cb84:	6093      	str	r3, [r2, #8]
 800cb86:	9b00      	ldr	r3, [sp, #0]
 800cb88:	9a02      	ldr	r2, [sp, #8]
 800cb8a:	1af4      	subs	r4, r6, r3
 800cb8c:	9b02      	ldr	r3, [sp, #8]
 800cb8e:	1992      	adds	r2, r2, r6
 800cb90:	6858      	ldr	r0, [r3, #4]
 800cb92:	2301      	movs	r3, #1
 800cb94:	4018      	ands	r0, r3
 800cb96:	2c0f      	cmp	r4, #15
 800cb98:	d800      	bhi.n	800cb9c <_realloc_r+0xe0>
 800cb9a:	e12c      	b.n	800cdf6 <_realloc_r+0x33a>
 800cb9c:	9d00      	ldr	r5, [sp, #0]
 800cb9e:	9902      	ldr	r1, [sp, #8]
 800cba0:	4328      	orrs	r0, r5
 800cba2:	1949      	adds	r1, r1, r5
 800cba4:	9d02      	ldr	r5, [sp, #8]
 800cba6:	431c      	orrs	r4, r3
 800cba8:	6068      	str	r0, [r5, #4]
 800cbaa:	604c      	str	r4, [r1, #4]
 800cbac:	6850      	ldr	r0, [r2, #4]
 800cbae:	3108      	adds	r1, #8
 800cbb0:	4303      	orrs	r3, r0
 800cbb2:	6053      	str	r3, [r2, #4]
 800cbb4:	9801      	ldr	r0, [sp, #4]
 800cbb6:	f7fb fe0f 	bl	80087d8 <_free_r>
 800cbba:	9801      	ldr	r0, [sp, #4]
 800cbbc:	f7fc f8ec 	bl	8008d98 <__malloc_unlock>
 800cbc0:	9f02      	ldr	r7, [sp, #8]
 800cbc2:	3708      	adds	r7, #8
 800cbc4:	e784      	b.n	800cad0 <_realloc_r+0x14>
 800cbc6:	2200      	movs	r2, #0
 800cbc8:	0013      	movs	r3, r2
 800cbca:	07ff      	lsls	r7, r7, #31
 800cbcc:	d500      	bpl.n	800cbd0 <_realloc_r+0x114>
 800cbce:	e0c6      	b.n	800cd5e <_realloc_r+0x2a2>
 800cbd0:	0021      	movs	r1, r4
 800cbd2:	2003      	movs	r0, #3
 800cbd4:	3908      	subs	r1, #8
 800cbd6:	680d      	ldr	r5, [r1, #0]
 800cbd8:	9904      	ldr	r1, [sp, #16]
 800cbda:	1b4d      	subs	r5, r1, r5
 800cbdc:	6869      	ldr	r1, [r5, #4]
 800cbde:	4381      	bics	r1, r0
 800cbe0:	9803      	ldr	r0, [sp, #12]
 800cbe2:	180f      	adds	r7, r1, r0
 800cbe4:	2b00      	cmp	r3, #0
 800cbe6:	d100      	bne.n	800cbea <_realloc_r+0x12e>
 800cbe8:	e084      	b.n	800ccf4 <_realloc_r+0x238>
 800cbea:	19d6      	adds	r6, r2, r7
 800cbec:	459c      	cmp	ip, r3
 800cbee:	d148      	bne.n	800cc82 <_realloc_r+0x1c6>
 800cbf0:	9b00      	ldr	r3, [sp, #0]
 800cbf2:	3310      	adds	r3, #16
 800cbf4:	42b3      	cmp	r3, r6
 800cbf6:	dc7d      	bgt.n	800ccf4 <_realloc_r+0x238>
 800cbf8:	68aa      	ldr	r2, [r5, #8]
 800cbfa:	68eb      	ldr	r3, [r5, #12]
 800cbfc:	002f      	movs	r7, r5
 800cbfe:	60d3      	str	r3, [r2, #12]
 800cc00:	609a      	str	r2, [r3, #8]
 800cc02:	0002      	movs	r2, r0
 800cc04:	3a04      	subs	r2, #4
 800cc06:	3708      	adds	r7, #8
 800cc08:	2a24      	cmp	r2, #36	; 0x24
 800cc0a:	d835      	bhi.n	800cc78 <_realloc_r+0x1bc>
 800cc0c:	003b      	movs	r3, r7
 800cc0e:	2a13      	cmp	r2, #19
 800cc10:	d908      	bls.n	800cc24 <_realloc_r+0x168>
 800cc12:	6823      	ldr	r3, [r4, #0]
 800cc14:	60ab      	str	r3, [r5, #8]
 800cc16:	6863      	ldr	r3, [r4, #4]
 800cc18:	60eb      	str	r3, [r5, #12]
 800cc1a:	2a1b      	cmp	r2, #27
 800cc1c:	d81a      	bhi.n	800cc54 <_realloc_r+0x198>
 800cc1e:	002b      	movs	r3, r5
 800cc20:	3408      	adds	r4, #8
 800cc22:	3310      	adds	r3, #16
 800cc24:	6822      	ldr	r2, [r4, #0]
 800cc26:	601a      	str	r2, [r3, #0]
 800cc28:	6862      	ldr	r2, [r4, #4]
 800cc2a:	605a      	str	r2, [r3, #4]
 800cc2c:	68a2      	ldr	r2, [r4, #8]
 800cc2e:	609a      	str	r2, [r3, #8]
 800cc30:	9b00      	ldr	r3, [sp, #0]
 800cc32:	4a74      	ldr	r2, [pc, #464]	; (800ce04 <_realloc_r+0x348>)
 800cc34:	18eb      	adds	r3, r5, r3
 800cc36:	6093      	str	r3, [r2, #8]
 800cc38:	9a00      	ldr	r2, [sp, #0]
 800cc3a:	1ab6      	subs	r6, r6, r2
 800cc3c:	2201      	movs	r2, #1
 800cc3e:	4316      	orrs	r6, r2
 800cc40:	605e      	str	r6, [r3, #4]
 800cc42:	686b      	ldr	r3, [r5, #4]
 800cc44:	4013      	ands	r3, r2
 800cc46:	9a00      	ldr	r2, [sp, #0]
 800cc48:	4313      	orrs	r3, r2
 800cc4a:	606b      	str	r3, [r5, #4]
 800cc4c:	9801      	ldr	r0, [sp, #4]
 800cc4e:	f7fc f8a3 	bl	8008d98 <__malloc_unlock>
 800cc52:	e73d      	b.n	800cad0 <_realloc_r+0x14>
 800cc54:	68a3      	ldr	r3, [r4, #8]
 800cc56:	612b      	str	r3, [r5, #16]
 800cc58:	68e3      	ldr	r3, [r4, #12]
 800cc5a:	616b      	str	r3, [r5, #20]
 800cc5c:	2a24      	cmp	r2, #36	; 0x24
 800cc5e:	d003      	beq.n	800cc68 <_realloc_r+0x1ac>
 800cc60:	002b      	movs	r3, r5
 800cc62:	3410      	adds	r4, #16
 800cc64:	3318      	adds	r3, #24
 800cc66:	e7dd      	b.n	800cc24 <_realloc_r+0x168>
 800cc68:	6923      	ldr	r3, [r4, #16]
 800cc6a:	61ab      	str	r3, [r5, #24]
 800cc6c:	002b      	movs	r3, r5
 800cc6e:	6962      	ldr	r2, [r4, #20]
 800cc70:	3320      	adds	r3, #32
 800cc72:	61ea      	str	r2, [r5, #28]
 800cc74:	3418      	adds	r4, #24
 800cc76:	e7d5      	b.n	800cc24 <_realloc_r+0x168>
 800cc78:	0021      	movs	r1, r4
 800cc7a:	0038      	movs	r0, r7
 800cc7c:	f7ff ff03 	bl	800ca86 <memmove>
 800cc80:	e7d6      	b.n	800cc30 <_realloc_r+0x174>
 800cc82:	9a00      	ldr	r2, [sp, #0]
 800cc84:	42b2      	cmp	r2, r6
 800cc86:	dc35      	bgt.n	800ccf4 <_realloc_r+0x238>
 800cc88:	0028      	movs	r0, r5
 800cc8a:	68da      	ldr	r2, [r3, #12]
 800cc8c:	689b      	ldr	r3, [r3, #8]
 800cc8e:	3008      	adds	r0, #8
 800cc90:	60da      	str	r2, [r3, #12]
 800cc92:	6093      	str	r3, [r2, #8]
 800cc94:	68aa      	ldr	r2, [r5, #8]
 800cc96:	68eb      	ldr	r3, [r5, #12]
 800cc98:	60d3      	str	r3, [r2, #12]
 800cc9a:	609a      	str	r2, [r3, #8]
 800cc9c:	9a03      	ldr	r2, [sp, #12]
 800cc9e:	3a04      	subs	r2, #4
 800cca0:	2a24      	cmp	r2, #36	; 0x24
 800cca2:	d823      	bhi.n	800ccec <_realloc_r+0x230>
 800cca4:	2a13      	cmp	r2, #19
 800cca6:	d907      	bls.n	800ccb8 <_realloc_r+0x1fc>
 800cca8:	6823      	ldr	r3, [r4, #0]
 800ccaa:	60ab      	str	r3, [r5, #8]
 800ccac:	6863      	ldr	r3, [r4, #4]
 800ccae:	60eb      	str	r3, [r5, #12]
 800ccb0:	2a1b      	cmp	r2, #27
 800ccb2:	d809      	bhi.n	800ccc8 <_realloc_r+0x20c>
 800ccb4:	3408      	adds	r4, #8
 800ccb6:	3008      	adds	r0, #8
 800ccb8:	6823      	ldr	r3, [r4, #0]
 800ccba:	6003      	str	r3, [r0, #0]
 800ccbc:	6863      	ldr	r3, [r4, #4]
 800ccbe:	6043      	str	r3, [r0, #4]
 800ccc0:	68a3      	ldr	r3, [r4, #8]
 800ccc2:	6083      	str	r3, [r0, #8]
 800ccc4:	9502      	str	r5, [sp, #8]
 800ccc6:	e75e      	b.n	800cb86 <_realloc_r+0xca>
 800ccc8:	68a3      	ldr	r3, [r4, #8]
 800ccca:	612b      	str	r3, [r5, #16]
 800cccc:	68e3      	ldr	r3, [r4, #12]
 800ccce:	616b      	str	r3, [r5, #20]
 800ccd0:	2a24      	cmp	r2, #36	; 0x24
 800ccd2:	d003      	beq.n	800ccdc <_realloc_r+0x220>
 800ccd4:	0028      	movs	r0, r5
 800ccd6:	3410      	adds	r4, #16
 800ccd8:	3018      	adds	r0, #24
 800ccda:	e7ed      	b.n	800ccb8 <_realloc_r+0x1fc>
 800ccdc:	0028      	movs	r0, r5
 800ccde:	6923      	ldr	r3, [r4, #16]
 800cce0:	3020      	adds	r0, #32
 800cce2:	61ab      	str	r3, [r5, #24]
 800cce4:	6963      	ldr	r3, [r4, #20]
 800cce6:	3418      	adds	r4, #24
 800cce8:	61eb      	str	r3, [r5, #28]
 800ccea:	e7e5      	b.n	800ccb8 <_realloc_r+0x1fc>
 800ccec:	0021      	movs	r1, r4
 800ccee:	f7ff feca 	bl	800ca86 <memmove>
 800ccf2:	e7e7      	b.n	800ccc4 <_realloc_r+0x208>
 800ccf4:	9b00      	ldr	r3, [sp, #0]
 800ccf6:	42bb      	cmp	r3, r7
 800ccf8:	dc31      	bgt.n	800cd5e <_realloc_r+0x2a2>
 800ccfa:	0028      	movs	r0, r5
 800ccfc:	68aa      	ldr	r2, [r5, #8]
 800ccfe:	68eb      	ldr	r3, [r5, #12]
 800cd00:	3008      	adds	r0, #8
 800cd02:	60d3      	str	r3, [r2, #12]
 800cd04:	609a      	str	r2, [r3, #8]
 800cd06:	9a03      	ldr	r2, [sp, #12]
 800cd08:	3a04      	subs	r2, #4
 800cd0a:	2a24      	cmp	r2, #36	; 0x24
 800cd0c:	d823      	bhi.n	800cd56 <_realloc_r+0x29a>
 800cd0e:	2a13      	cmp	r2, #19
 800cd10:	d907      	bls.n	800cd22 <_realloc_r+0x266>
 800cd12:	6823      	ldr	r3, [r4, #0]
 800cd14:	60ab      	str	r3, [r5, #8]
 800cd16:	6863      	ldr	r3, [r4, #4]
 800cd18:	60eb      	str	r3, [r5, #12]
 800cd1a:	2a1b      	cmp	r2, #27
 800cd1c:	d809      	bhi.n	800cd32 <_realloc_r+0x276>
 800cd1e:	3408      	adds	r4, #8
 800cd20:	3008      	adds	r0, #8
 800cd22:	6823      	ldr	r3, [r4, #0]
 800cd24:	6003      	str	r3, [r0, #0]
 800cd26:	6863      	ldr	r3, [r4, #4]
 800cd28:	6043      	str	r3, [r0, #4]
 800cd2a:	68a3      	ldr	r3, [r4, #8]
 800cd2c:	6083      	str	r3, [r0, #8]
 800cd2e:	003e      	movs	r6, r7
 800cd30:	e7c8      	b.n	800ccc4 <_realloc_r+0x208>
 800cd32:	68a3      	ldr	r3, [r4, #8]
 800cd34:	612b      	str	r3, [r5, #16]
 800cd36:	68e3      	ldr	r3, [r4, #12]
 800cd38:	616b      	str	r3, [r5, #20]
 800cd3a:	2a24      	cmp	r2, #36	; 0x24
 800cd3c:	d003      	beq.n	800cd46 <_realloc_r+0x28a>
 800cd3e:	0028      	movs	r0, r5
 800cd40:	3410      	adds	r4, #16
 800cd42:	3018      	adds	r0, #24
 800cd44:	e7ed      	b.n	800cd22 <_realloc_r+0x266>
 800cd46:	0028      	movs	r0, r5
 800cd48:	6923      	ldr	r3, [r4, #16]
 800cd4a:	3020      	adds	r0, #32
 800cd4c:	61ab      	str	r3, [r5, #24]
 800cd4e:	6963      	ldr	r3, [r4, #20]
 800cd50:	3418      	adds	r4, #24
 800cd52:	61eb      	str	r3, [r5, #28]
 800cd54:	e7e5      	b.n	800cd22 <_realloc_r+0x266>
 800cd56:	0021      	movs	r1, r4
 800cd58:	f7ff fe95 	bl	800ca86 <memmove>
 800cd5c:	e7e7      	b.n	800cd2e <_realloc_r+0x272>
 800cd5e:	9905      	ldr	r1, [sp, #20]
 800cd60:	9801      	ldr	r0, [sp, #4]
 800cd62:	f7fb fdeb 	bl	800893c <_malloc_r>
 800cd66:	1e07      	subs	r7, r0, #0
 800cd68:	d100      	bne.n	800cd6c <_realloc_r+0x2b0>
 800cd6a:	e76f      	b.n	800cc4c <_realloc_r+0x190>
 800cd6c:	0023      	movs	r3, r4
 800cd6e:	2201      	movs	r2, #1
 800cd70:	3b08      	subs	r3, #8
 800cd72:	685b      	ldr	r3, [r3, #4]
 800cd74:	4393      	bics	r3, r2
 800cd76:	9a04      	ldr	r2, [sp, #16]
 800cd78:	18d3      	adds	r3, r2, r3
 800cd7a:	0002      	movs	r2, r0
 800cd7c:	3a08      	subs	r2, #8
 800cd7e:	4293      	cmp	r3, r2
 800cd80:	d105      	bne.n	800cd8e <_realloc_r+0x2d2>
 800cd82:	685e      	ldr	r6, [r3, #4]
 800cd84:	2303      	movs	r3, #3
 800cd86:	439e      	bics	r6, r3
 800cd88:	9b03      	ldr	r3, [sp, #12]
 800cd8a:	18f6      	adds	r6, r6, r3
 800cd8c:	e6fb      	b.n	800cb86 <_realloc_r+0xca>
 800cd8e:	9a03      	ldr	r2, [sp, #12]
 800cd90:	3a04      	subs	r2, #4
 800cd92:	2a24      	cmp	r2, #36	; 0x24
 800cd94:	d829      	bhi.n	800cdea <_realloc_r+0x32e>
 800cd96:	0003      	movs	r3, r0
 800cd98:	0021      	movs	r1, r4
 800cd9a:	2a13      	cmp	r2, #19
 800cd9c:	d908      	bls.n	800cdb0 <_realloc_r+0x2f4>
 800cd9e:	6823      	ldr	r3, [r4, #0]
 800cda0:	6003      	str	r3, [r0, #0]
 800cda2:	6863      	ldr	r3, [r4, #4]
 800cda4:	6043      	str	r3, [r0, #4]
 800cda6:	2a1b      	cmp	r2, #27
 800cda8:	d80d      	bhi.n	800cdc6 <_realloc_r+0x30a>
 800cdaa:	0003      	movs	r3, r0
 800cdac:	3108      	adds	r1, #8
 800cdae:	3308      	adds	r3, #8
 800cdb0:	680a      	ldr	r2, [r1, #0]
 800cdb2:	601a      	str	r2, [r3, #0]
 800cdb4:	684a      	ldr	r2, [r1, #4]
 800cdb6:	605a      	str	r2, [r3, #4]
 800cdb8:	688a      	ldr	r2, [r1, #8]
 800cdba:	609a      	str	r2, [r3, #8]
 800cdbc:	0021      	movs	r1, r4
 800cdbe:	9801      	ldr	r0, [sp, #4]
 800cdc0:	f7fb fd0a 	bl	80087d8 <_free_r>
 800cdc4:	e742      	b.n	800cc4c <_realloc_r+0x190>
 800cdc6:	68a3      	ldr	r3, [r4, #8]
 800cdc8:	6083      	str	r3, [r0, #8]
 800cdca:	68e3      	ldr	r3, [r4, #12]
 800cdcc:	60c3      	str	r3, [r0, #12]
 800cdce:	2a24      	cmp	r2, #36	; 0x24
 800cdd0:	d003      	beq.n	800cdda <_realloc_r+0x31e>
 800cdd2:	0003      	movs	r3, r0
 800cdd4:	3110      	adds	r1, #16
 800cdd6:	3310      	adds	r3, #16
 800cdd8:	e7ea      	b.n	800cdb0 <_realloc_r+0x2f4>
 800cdda:	6923      	ldr	r3, [r4, #16]
 800cddc:	3118      	adds	r1, #24
 800cdde:	6103      	str	r3, [r0, #16]
 800cde0:	0003      	movs	r3, r0
 800cde2:	6962      	ldr	r2, [r4, #20]
 800cde4:	3318      	adds	r3, #24
 800cde6:	6142      	str	r2, [r0, #20]
 800cde8:	e7e2      	b.n	800cdb0 <_realloc_r+0x2f4>
 800cdea:	0021      	movs	r1, r4
 800cdec:	f7ff fe4b 	bl	800ca86 <memmove>
 800cdf0:	e7e4      	b.n	800cdbc <_realloc_r+0x300>
 800cdf2:	9e03      	ldr	r6, [sp, #12]
 800cdf4:	e6c7      	b.n	800cb86 <_realloc_r+0xca>
 800cdf6:	9902      	ldr	r1, [sp, #8]
 800cdf8:	4306      	orrs	r6, r0
 800cdfa:	604e      	str	r6, [r1, #4]
 800cdfc:	6851      	ldr	r1, [r2, #4]
 800cdfe:	430b      	orrs	r3, r1
 800ce00:	6053      	str	r3, [r2, #4]
 800ce02:	e6da      	b.n	800cbba <_realloc_r+0xfe>
 800ce04:	200002b0 	.word	0x200002b0

0800ce08 <_wcrtomb_r>:
 800ce08:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
 800ce0a:	001d      	movs	r5, r3
 800ce0c:	4b09      	ldr	r3, [pc, #36]	; (800ce34 <_wcrtomb_r+0x2c>)
 800ce0e:	0004      	movs	r4, r0
 800ce10:	33e0      	adds	r3, #224	; 0xe0
 800ce12:	681e      	ldr	r6, [r3, #0]
 800ce14:	002b      	movs	r3, r5
 800ce16:	2900      	cmp	r1, #0
 800ce18:	d101      	bne.n	800ce1e <_wcrtomb_r+0x16>
 800ce1a:	000a      	movs	r2, r1
 800ce1c:	a901      	add	r1, sp, #4
 800ce1e:	0020      	movs	r0, r4
 800ce20:	47b0      	blx	r6
 800ce22:	1c43      	adds	r3, r0, #1
 800ce24:	d103      	bne.n	800ce2e <_wcrtomb_r+0x26>
 800ce26:	2300      	movs	r3, #0
 800ce28:	602b      	str	r3, [r5, #0]
 800ce2a:	338a      	adds	r3, #138	; 0x8a
 800ce2c:	6023      	str	r3, [r4, #0]
 800ce2e:	b004      	add	sp, #16
 800ce30:	bd70      	pop	{r4, r5, r6, pc}
 800ce32:	46c0      	nop			; (mov r8, r8)
 800ce34:	2000001c 	.word	0x2000001c

0800ce38 <__swhatbuf_r>:
 800ce38:	b570      	push	{r4, r5, r6, lr}
 800ce3a:	000e      	movs	r6, r1
 800ce3c:	001d      	movs	r5, r3
 800ce3e:	230e      	movs	r3, #14
 800ce40:	5ec9      	ldrsh	r1, [r1, r3]
 800ce42:	0014      	movs	r4, r2
 800ce44:	b096      	sub	sp, #88	; 0x58
 800ce46:	2900      	cmp	r1, #0
 800ce48:	da09      	bge.n	800ce5e <__swhatbuf_r+0x26>
 800ce4a:	89b2      	ldrh	r2, [r6, #12]
 800ce4c:	2380      	movs	r3, #128	; 0x80
 800ce4e:	0011      	movs	r1, r2
 800ce50:	4019      	ands	r1, r3
 800ce52:	421a      	tst	r2, r3
 800ce54:	d018      	beq.n	800ce88 <__swhatbuf_r+0x50>
 800ce56:	2100      	movs	r1, #0
 800ce58:	3b40      	subs	r3, #64	; 0x40
 800ce5a:	0008      	movs	r0, r1
 800ce5c:	e010      	b.n	800ce80 <__swhatbuf_r+0x48>
 800ce5e:	466a      	mov	r2, sp
 800ce60:	f000 f8de 	bl	800d020 <_fstat_r>
 800ce64:	2800      	cmp	r0, #0
 800ce66:	dbf0      	blt.n	800ce4a <__swhatbuf_r+0x12>
 800ce68:	23f0      	movs	r3, #240	; 0xf0
 800ce6a:	9901      	ldr	r1, [sp, #4]
 800ce6c:	021b      	lsls	r3, r3, #8
 800ce6e:	4019      	ands	r1, r3
 800ce70:	4b07      	ldr	r3, [pc, #28]	; (800ce90 <__swhatbuf_r+0x58>)
 800ce72:	2080      	movs	r0, #128	; 0x80
 800ce74:	18c9      	adds	r1, r1, r3
 800ce76:	424b      	negs	r3, r1
 800ce78:	4159      	adcs	r1, r3
 800ce7a:	2380      	movs	r3, #128	; 0x80
 800ce7c:	0100      	lsls	r0, r0, #4
 800ce7e:	00db      	lsls	r3, r3, #3
 800ce80:	6029      	str	r1, [r5, #0]
 800ce82:	6023      	str	r3, [r4, #0]
 800ce84:	b016      	add	sp, #88	; 0x58
 800ce86:	bd70      	pop	{r4, r5, r6, pc}
 800ce88:	2380      	movs	r3, #128	; 0x80
 800ce8a:	00db      	lsls	r3, r3, #3
 800ce8c:	e7e5      	b.n	800ce5a <__swhatbuf_r+0x22>
 800ce8e:	46c0      	nop			; (mov r8, r8)
 800ce90:	ffffe000 	.word	0xffffe000

0800ce94 <__smakebuf_r>:
 800ce94:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800ce96:	2602      	movs	r6, #2
 800ce98:	898b      	ldrh	r3, [r1, #12]
 800ce9a:	0005      	movs	r5, r0
 800ce9c:	000c      	movs	r4, r1
 800ce9e:	4233      	tst	r3, r6
 800cea0:	d006      	beq.n	800ceb0 <__smakebuf_r+0x1c>
 800cea2:	0023      	movs	r3, r4
 800cea4:	3343      	adds	r3, #67	; 0x43
 800cea6:	6023      	str	r3, [r4, #0]
 800cea8:	6123      	str	r3, [r4, #16]
 800ceaa:	2301      	movs	r3, #1
 800ceac:	6163      	str	r3, [r4, #20]
 800ceae:	bdf7      	pop	{r0, r1, r2, r4, r5, r6, r7, pc}
 800ceb0:	466a      	mov	r2, sp
 800ceb2:	ab01      	add	r3, sp, #4
 800ceb4:	f7ff ffc0 	bl	800ce38 <__swhatbuf_r>
 800ceb8:	9900      	ldr	r1, [sp, #0]
 800ceba:	0007      	movs	r7, r0
 800cebc:	0028      	movs	r0, r5
 800cebe:	f7fb fd3d 	bl	800893c <_malloc_r>
 800cec2:	2800      	cmp	r0, #0
 800cec4:	d108      	bne.n	800ced8 <__smakebuf_r+0x44>
 800cec6:	220c      	movs	r2, #12
 800cec8:	5ea3      	ldrsh	r3, [r4, r2]
 800ceca:	059a      	lsls	r2, r3, #22
 800cecc:	d4ef      	bmi.n	800ceae <__smakebuf_r+0x1a>
 800cece:	2203      	movs	r2, #3
 800ced0:	4393      	bics	r3, r2
 800ced2:	431e      	orrs	r6, r3
 800ced4:	81a6      	strh	r6, [r4, #12]
 800ced6:	e7e4      	b.n	800cea2 <__smakebuf_r+0xe>
 800ced8:	2380      	movs	r3, #128	; 0x80
 800ceda:	89a2      	ldrh	r2, [r4, #12]
 800cedc:	6020      	str	r0, [r4, #0]
 800cede:	4313      	orrs	r3, r2
 800cee0:	81a3      	strh	r3, [r4, #12]
 800cee2:	9b00      	ldr	r3, [sp, #0]
 800cee4:	6120      	str	r0, [r4, #16]
 800cee6:	6163      	str	r3, [r4, #20]
 800cee8:	9b01      	ldr	r3, [sp, #4]
 800ceea:	2b00      	cmp	r3, #0
 800ceec:	d00c      	beq.n	800cf08 <__smakebuf_r+0x74>
 800ceee:	0028      	movs	r0, r5
 800cef0:	230e      	movs	r3, #14
 800cef2:	5ee1      	ldrsh	r1, [r4, r3]
 800cef4:	f000 f8a6 	bl	800d044 <_isatty_r>
 800cef8:	2800      	cmp	r0, #0
 800cefa:	d005      	beq.n	800cf08 <__smakebuf_r+0x74>
 800cefc:	2303      	movs	r3, #3
 800cefe:	89a2      	ldrh	r2, [r4, #12]
 800cf00:	439a      	bics	r2, r3
 800cf02:	3b02      	subs	r3, #2
 800cf04:	4313      	orrs	r3, r2
 800cf06:	81a3      	strh	r3, [r4, #12]
 800cf08:	89a3      	ldrh	r3, [r4, #12]
 800cf0a:	433b      	orrs	r3, r7
 800cf0c:	81a3      	strh	r3, [r4, #12]
 800cf0e:	e7ce      	b.n	800ceae <__smakebuf_r+0x1a>

0800cf10 <__swbuf_r>:
 800cf10:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800cf12:	0006      	movs	r6, r0
 800cf14:	000d      	movs	r5, r1
 800cf16:	0014      	movs	r4, r2
 800cf18:	2800      	cmp	r0, #0
 800cf1a:	d004      	beq.n	800cf26 <__swbuf_r+0x16>
 800cf1c:	6b43      	ldr	r3, [r0, #52]	; 0x34
 800cf1e:	2b00      	cmp	r3, #0
 800cf20:	d101      	bne.n	800cf26 <__swbuf_r+0x16>
 800cf22:	f7fb fa87 	bl	8008434 <__sinit>
 800cf26:	69a3      	ldr	r3, [r4, #24]
 800cf28:	60a3      	str	r3, [r4, #8]
 800cf2a:	89a3      	ldrh	r3, [r4, #12]
 800cf2c:	071b      	lsls	r3, r3, #28
 800cf2e:	d52e      	bpl.n	800cf8e <__swbuf_r+0x7e>
 800cf30:	6923      	ldr	r3, [r4, #16]
 800cf32:	2b00      	cmp	r3, #0
 800cf34:	d02b      	beq.n	800cf8e <__swbuf_r+0x7e>
 800cf36:	230c      	movs	r3, #12
 800cf38:	5ee2      	ldrsh	r2, [r4, r3]
 800cf3a:	2380      	movs	r3, #128	; 0x80
 800cf3c:	019b      	lsls	r3, r3, #6
 800cf3e:	b2ef      	uxtb	r7, r5
 800cf40:	b2ed      	uxtb	r5, r5
 800cf42:	421a      	tst	r2, r3
 800cf44:	d02c      	beq.n	800cfa0 <__swbuf_r+0x90>
 800cf46:	6923      	ldr	r3, [r4, #16]
 800cf48:	6820      	ldr	r0, [r4, #0]
 800cf4a:	1ac0      	subs	r0, r0, r3
 800cf4c:	6963      	ldr	r3, [r4, #20]
 800cf4e:	4283      	cmp	r3, r0
 800cf50:	dc05      	bgt.n	800cf5e <__swbuf_r+0x4e>
 800cf52:	0021      	movs	r1, r4
 800cf54:	0030      	movs	r0, r6
 800cf56:	f7fd fdb7 	bl	800aac8 <_fflush_r>
 800cf5a:	2800      	cmp	r0, #0
 800cf5c:	d11d      	bne.n	800cf9a <__swbuf_r+0x8a>
 800cf5e:	68a3      	ldr	r3, [r4, #8]
 800cf60:	3001      	adds	r0, #1
 800cf62:	3b01      	subs	r3, #1
 800cf64:	60a3      	str	r3, [r4, #8]
 800cf66:	6823      	ldr	r3, [r4, #0]
 800cf68:	1c5a      	adds	r2, r3, #1
 800cf6a:	6022      	str	r2, [r4, #0]
 800cf6c:	701f      	strb	r7, [r3, #0]
 800cf6e:	6963      	ldr	r3, [r4, #20]
 800cf70:	4283      	cmp	r3, r0
 800cf72:	d004      	beq.n	800cf7e <__swbuf_r+0x6e>
 800cf74:	89a3      	ldrh	r3, [r4, #12]
 800cf76:	07db      	lsls	r3, r3, #31
 800cf78:	d507      	bpl.n	800cf8a <__swbuf_r+0x7a>
 800cf7a:	2d0a      	cmp	r5, #10
 800cf7c:	d105      	bne.n	800cf8a <__swbuf_r+0x7a>
 800cf7e:	0021      	movs	r1, r4
 800cf80:	0030      	movs	r0, r6
 800cf82:	f7fd fda1 	bl	800aac8 <_fflush_r>
 800cf86:	2800      	cmp	r0, #0
 800cf88:	d107      	bne.n	800cf9a <__swbuf_r+0x8a>
 800cf8a:	0028      	movs	r0, r5
 800cf8c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800cf8e:	0021      	movs	r1, r4
 800cf90:	0030      	movs	r0, r6
 800cf92:	f7ff fcad 	bl	800c8f0 <__swsetup_r>
 800cf96:	2800      	cmp	r0, #0
 800cf98:	d0cd      	beq.n	800cf36 <__swbuf_r+0x26>
 800cf9a:	2501      	movs	r5, #1
 800cf9c:	426d      	negs	r5, r5
 800cf9e:	e7f4      	b.n	800cf8a <__swbuf_r+0x7a>
 800cfa0:	4313      	orrs	r3, r2
 800cfa2:	81a3      	strh	r3, [r4, #12]
 800cfa4:	4a02      	ldr	r2, [pc, #8]	; (800cfb0 <__swbuf_r+0xa0>)
 800cfa6:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800cfa8:	4013      	ands	r3, r2
 800cfaa:	6663      	str	r3, [r4, #100]	; 0x64
 800cfac:	e7cb      	b.n	800cf46 <__swbuf_r+0x36>
 800cfae:	46c0      	nop			; (mov r8, r8)
 800cfb0:	ffffdfff 	.word	0xffffdfff

0800cfb4 <_raise_r>:
 800cfb4:	b570      	push	{r4, r5, r6, lr}
 800cfb6:	0004      	movs	r4, r0
 800cfb8:	000d      	movs	r5, r1
 800cfba:	291f      	cmp	r1, #31
 800cfbc:	d904      	bls.n	800cfc8 <_raise_r+0x14>
 800cfbe:	2316      	movs	r3, #22
 800cfc0:	6003      	str	r3, [r0, #0]
 800cfc2:	2001      	movs	r0, #1
 800cfc4:	4240      	negs	r0, r0
 800cfc6:	bd70      	pop	{r4, r5, r6, pc}
 800cfc8:	0003      	movs	r3, r0
 800cfca:	33fc      	adds	r3, #252	; 0xfc
 800cfcc:	69db      	ldr	r3, [r3, #28]
 800cfce:	2b00      	cmp	r3, #0
 800cfd0:	d004      	beq.n	800cfdc <_raise_r+0x28>
 800cfd2:	008a      	lsls	r2, r1, #2
 800cfd4:	189b      	adds	r3, r3, r2
 800cfd6:	681a      	ldr	r2, [r3, #0]
 800cfd8:	2a00      	cmp	r2, #0
 800cfda:	d108      	bne.n	800cfee <_raise_r+0x3a>
 800cfdc:	0020      	movs	r0, r4
 800cfde:	f000 f855 	bl	800d08c <_getpid_r>
 800cfe2:	002a      	movs	r2, r5
 800cfe4:	0001      	movs	r1, r0
 800cfe6:	0020      	movs	r0, r4
 800cfe8:	f000 f83e 	bl	800d068 <_kill_r>
 800cfec:	e7eb      	b.n	800cfc6 <_raise_r+0x12>
 800cfee:	2000      	movs	r0, #0
 800cff0:	2a01      	cmp	r2, #1
 800cff2:	d0e8      	beq.n	800cfc6 <_raise_r+0x12>
 800cff4:	1c51      	adds	r1, r2, #1
 800cff6:	d103      	bne.n	800d000 <_raise_r+0x4c>
 800cff8:	2316      	movs	r3, #22
 800cffa:	3001      	adds	r0, #1
 800cffc:	6023      	str	r3, [r4, #0]
 800cffe:	e7e2      	b.n	800cfc6 <_raise_r+0x12>
 800d000:	2400      	movs	r4, #0
 800d002:	0028      	movs	r0, r5
 800d004:	601c      	str	r4, [r3, #0]
 800d006:	4790      	blx	r2
 800d008:	0020      	movs	r0, r4
 800d00a:	e7dc      	b.n	800cfc6 <_raise_r+0x12>

0800d00c <raise>:
 800d00c:	b510      	push	{r4, lr}
 800d00e:	4b03      	ldr	r3, [pc, #12]	; (800d01c <raise+0x10>)
 800d010:	0001      	movs	r1, r0
 800d012:	6818      	ldr	r0, [r3, #0]
 800d014:	f7ff ffce 	bl	800cfb4 <_raise_r>
 800d018:	bd10      	pop	{r4, pc}
 800d01a:	46c0      	nop			; (mov r8, r8)
 800d01c:	200002a8 	.word	0x200002a8

0800d020 <_fstat_r>:
 800d020:	2300      	movs	r3, #0
 800d022:	b570      	push	{r4, r5, r6, lr}
 800d024:	4d06      	ldr	r5, [pc, #24]	; (800d040 <_fstat_r+0x20>)
 800d026:	0004      	movs	r4, r0
 800d028:	0008      	movs	r0, r1
 800d02a:	0011      	movs	r1, r2
 800d02c:	602b      	str	r3, [r5, #0]
 800d02e:	f7f6 f818 	bl	8003062 <_fstat>
 800d032:	1c43      	adds	r3, r0, #1
 800d034:	d103      	bne.n	800d03e <_fstat_r+0x1e>
 800d036:	682b      	ldr	r3, [r5, #0]
 800d038:	2b00      	cmp	r3, #0
 800d03a:	d000      	beq.n	800d03e <_fstat_r+0x1e>
 800d03c:	6023      	str	r3, [r4, #0]
 800d03e:	bd70      	pop	{r4, r5, r6, pc}
 800d040:	200009dc 	.word	0x200009dc

0800d044 <_isatty_r>:
 800d044:	2300      	movs	r3, #0
 800d046:	b570      	push	{r4, r5, r6, lr}
 800d048:	4d06      	ldr	r5, [pc, #24]	; (800d064 <_isatty_r+0x20>)
 800d04a:	0004      	movs	r4, r0
 800d04c:	0008      	movs	r0, r1
 800d04e:	602b      	str	r3, [r5, #0]
 800d050:	f7f6 f815 	bl	800307e <_isatty>
 800d054:	1c43      	adds	r3, r0, #1
 800d056:	d103      	bne.n	800d060 <_isatty_r+0x1c>
 800d058:	682b      	ldr	r3, [r5, #0]
 800d05a:	2b00      	cmp	r3, #0
 800d05c:	d000      	beq.n	800d060 <_isatty_r+0x1c>
 800d05e:	6023      	str	r3, [r4, #0]
 800d060:	bd70      	pop	{r4, r5, r6, pc}
 800d062:	46c0      	nop			; (mov r8, r8)
 800d064:	200009dc 	.word	0x200009dc

0800d068 <_kill_r>:
 800d068:	2300      	movs	r3, #0
 800d06a:	b570      	push	{r4, r5, r6, lr}
 800d06c:	4d06      	ldr	r5, [pc, #24]	; (800d088 <_kill_r+0x20>)
 800d06e:	0004      	movs	r4, r0
 800d070:	0008      	movs	r0, r1
 800d072:	0011      	movs	r1, r2
 800d074:	602b      	str	r3, [r5, #0]
 800d076:	f7f5 ff95 	bl	8002fa4 <_kill>
 800d07a:	1c43      	adds	r3, r0, #1
 800d07c:	d103      	bne.n	800d086 <_kill_r+0x1e>
 800d07e:	682b      	ldr	r3, [r5, #0]
 800d080:	2b00      	cmp	r3, #0
 800d082:	d000      	beq.n	800d086 <_kill_r+0x1e>
 800d084:	6023      	str	r3, [r4, #0]
 800d086:	bd70      	pop	{r4, r5, r6, pc}
 800d088:	200009dc 	.word	0x200009dc

0800d08c <_getpid_r>:
 800d08c:	b510      	push	{r4, lr}
 800d08e:	f7f5 ff83 	bl	8002f98 <_getpid>
 800d092:	bd10      	pop	{r4, pc}

0800d094 <_init>:
 800d094:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d096:	46c0      	nop			; (mov r8, r8)
 800d098:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800d09a:	bc08      	pop	{r3}
 800d09c:	469e      	mov	lr, r3
 800d09e:	4770      	bx	lr

0800d0a0 <_fini>:
 800d0a0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d0a2:	46c0      	nop			; (mov r8, r8)
 800d0a4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800d0a6:	bc08      	pop	{r3}
 800d0a8:	469e      	mov	lr, r3
 800d0aa:	4770      	bx	lr
