
nemo2.space_tracker_p.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000bc  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000c2f0  080000bc  080000bc  000100bc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00001bbc  0800c3b0  0800c3b0  0001c3b0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800df6c  0800df6c  000206c0  2**0
                  CONTENTS
  4 .ARM          00000008  0800df6c  0800df6c  0001df6c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800df74  0800df74  000206c0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000008  0800df74  0800df74  0001df74  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800df7c  0800df7c  0001df7c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000006c0  20000000  0800df80  00020000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000004e8  200006c0  0800e640  000206c0  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000ba8  0800e640  00020ba8  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  000206c0  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  000206e8  2**0
                  CONTENTS, READONLY
 13 .debug_info   00014d68  00000000  00000000  0002072b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00002ef4  00000000  00000000  00035493  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001260  00000000  00000000  00038388  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000e82  00000000  00000000  000395e8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0001f572  00000000  00000000  0003a46a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00016ef4  00000000  00000000  000599dc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000c4fdd  00000000  00000000  000708d0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00005564  00000000  00000000  001358b0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000005c  00000000  00000000  0013ae14  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000bc <__do_global_dtors_aux>:
 80000bc:	b510      	push	{r4, lr}
 80000be:	4c06      	ldr	r4, [pc, #24]	; (80000d8 <__do_global_dtors_aux+0x1c>)
 80000c0:	7823      	ldrb	r3, [r4, #0]
 80000c2:	2b00      	cmp	r3, #0
 80000c4:	d107      	bne.n	80000d6 <__do_global_dtors_aux+0x1a>
 80000c6:	4b05      	ldr	r3, [pc, #20]	; (80000dc <__do_global_dtors_aux+0x20>)
 80000c8:	2b00      	cmp	r3, #0
 80000ca:	d002      	beq.n	80000d2 <__do_global_dtors_aux+0x16>
 80000cc:	4804      	ldr	r0, [pc, #16]	; (80000e0 <__do_global_dtors_aux+0x24>)
 80000ce:	e000      	b.n	80000d2 <__do_global_dtors_aux+0x16>
 80000d0:	bf00      	nop
 80000d2:	2301      	movs	r3, #1
 80000d4:	7023      	strb	r3, [r4, #0]
 80000d6:	bd10      	pop	{r4, pc}
 80000d8:	200006c0 	.word	0x200006c0
 80000dc:	00000000 	.word	0x00000000
 80000e0:	0800c394 	.word	0x0800c394

080000e4 <frame_dummy>:
 80000e4:	4b04      	ldr	r3, [pc, #16]	; (80000f8 <frame_dummy+0x14>)
 80000e6:	b510      	push	{r4, lr}
 80000e8:	2b00      	cmp	r3, #0
 80000ea:	d003      	beq.n	80000f4 <frame_dummy+0x10>
 80000ec:	4903      	ldr	r1, [pc, #12]	; (80000fc <frame_dummy+0x18>)
 80000ee:	4804      	ldr	r0, [pc, #16]	; (8000100 <frame_dummy+0x1c>)
 80000f0:	e000      	b.n	80000f4 <frame_dummy+0x10>
 80000f2:	bf00      	nop
 80000f4:	bd10      	pop	{r4, pc}
 80000f6:	46c0      	nop			; (mov r8, r8)
 80000f8:	00000000 	.word	0x00000000
 80000fc:	200006c4 	.word	0x200006c4
 8000100:	0800c394 	.word	0x0800c394

08000104 <strlen>:
 8000104:	2300      	movs	r3, #0
 8000106:	5cc2      	ldrb	r2, [r0, r3]
 8000108:	3301      	adds	r3, #1
 800010a:	2a00      	cmp	r2, #0
 800010c:	d1fb      	bne.n	8000106 <strlen+0x2>
 800010e:	1e58      	subs	r0, r3, #1
 8000110:	4770      	bx	lr
	...

08000114 <__gnu_thumb1_case_uqi>:
 8000114:	b402      	push	{r1}
 8000116:	4671      	mov	r1, lr
 8000118:	0849      	lsrs	r1, r1, #1
 800011a:	0049      	lsls	r1, r1, #1
 800011c:	5c09      	ldrb	r1, [r1, r0]
 800011e:	0049      	lsls	r1, r1, #1
 8000120:	448e      	add	lr, r1
 8000122:	bc02      	pop	{r1}
 8000124:	4770      	bx	lr
 8000126:	46c0      	nop			; (mov r8, r8)

08000128 <__gnu_thumb1_case_uhi>:
 8000128:	b403      	push	{r0, r1}
 800012a:	4671      	mov	r1, lr
 800012c:	0849      	lsrs	r1, r1, #1
 800012e:	0040      	lsls	r0, r0, #1
 8000130:	0049      	lsls	r1, r1, #1
 8000132:	5a09      	ldrh	r1, [r1, r0]
 8000134:	0049      	lsls	r1, r1, #1
 8000136:	448e      	add	lr, r1
 8000138:	bc03      	pop	{r0, r1}
 800013a:	4770      	bx	lr

0800013c <__udivsi3>:
 800013c:	2200      	movs	r2, #0
 800013e:	0843      	lsrs	r3, r0, #1
 8000140:	428b      	cmp	r3, r1
 8000142:	d374      	bcc.n	800022e <__udivsi3+0xf2>
 8000144:	0903      	lsrs	r3, r0, #4
 8000146:	428b      	cmp	r3, r1
 8000148:	d35f      	bcc.n	800020a <__udivsi3+0xce>
 800014a:	0a03      	lsrs	r3, r0, #8
 800014c:	428b      	cmp	r3, r1
 800014e:	d344      	bcc.n	80001da <__udivsi3+0x9e>
 8000150:	0b03      	lsrs	r3, r0, #12
 8000152:	428b      	cmp	r3, r1
 8000154:	d328      	bcc.n	80001a8 <__udivsi3+0x6c>
 8000156:	0c03      	lsrs	r3, r0, #16
 8000158:	428b      	cmp	r3, r1
 800015a:	d30d      	bcc.n	8000178 <__udivsi3+0x3c>
 800015c:	22ff      	movs	r2, #255	; 0xff
 800015e:	0209      	lsls	r1, r1, #8
 8000160:	ba12      	rev	r2, r2
 8000162:	0c03      	lsrs	r3, r0, #16
 8000164:	428b      	cmp	r3, r1
 8000166:	d302      	bcc.n	800016e <__udivsi3+0x32>
 8000168:	1212      	asrs	r2, r2, #8
 800016a:	0209      	lsls	r1, r1, #8
 800016c:	d065      	beq.n	800023a <__udivsi3+0xfe>
 800016e:	0b03      	lsrs	r3, r0, #12
 8000170:	428b      	cmp	r3, r1
 8000172:	d319      	bcc.n	80001a8 <__udivsi3+0x6c>
 8000174:	e000      	b.n	8000178 <__udivsi3+0x3c>
 8000176:	0a09      	lsrs	r1, r1, #8
 8000178:	0bc3      	lsrs	r3, r0, #15
 800017a:	428b      	cmp	r3, r1
 800017c:	d301      	bcc.n	8000182 <__udivsi3+0x46>
 800017e:	03cb      	lsls	r3, r1, #15
 8000180:	1ac0      	subs	r0, r0, r3
 8000182:	4152      	adcs	r2, r2
 8000184:	0b83      	lsrs	r3, r0, #14
 8000186:	428b      	cmp	r3, r1
 8000188:	d301      	bcc.n	800018e <__udivsi3+0x52>
 800018a:	038b      	lsls	r3, r1, #14
 800018c:	1ac0      	subs	r0, r0, r3
 800018e:	4152      	adcs	r2, r2
 8000190:	0b43      	lsrs	r3, r0, #13
 8000192:	428b      	cmp	r3, r1
 8000194:	d301      	bcc.n	800019a <__udivsi3+0x5e>
 8000196:	034b      	lsls	r3, r1, #13
 8000198:	1ac0      	subs	r0, r0, r3
 800019a:	4152      	adcs	r2, r2
 800019c:	0b03      	lsrs	r3, r0, #12
 800019e:	428b      	cmp	r3, r1
 80001a0:	d301      	bcc.n	80001a6 <__udivsi3+0x6a>
 80001a2:	030b      	lsls	r3, r1, #12
 80001a4:	1ac0      	subs	r0, r0, r3
 80001a6:	4152      	adcs	r2, r2
 80001a8:	0ac3      	lsrs	r3, r0, #11
 80001aa:	428b      	cmp	r3, r1
 80001ac:	d301      	bcc.n	80001b2 <__udivsi3+0x76>
 80001ae:	02cb      	lsls	r3, r1, #11
 80001b0:	1ac0      	subs	r0, r0, r3
 80001b2:	4152      	adcs	r2, r2
 80001b4:	0a83      	lsrs	r3, r0, #10
 80001b6:	428b      	cmp	r3, r1
 80001b8:	d301      	bcc.n	80001be <__udivsi3+0x82>
 80001ba:	028b      	lsls	r3, r1, #10
 80001bc:	1ac0      	subs	r0, r0, r3
 80001be:	4152      	adcs	r2, r2
 80001c0:	0a43      	lsrs	r3, r0, #9
 80001c2:	428b      	cmp	r3, r1
 80001c4:	d301      	bcc.n	80001ca <__udivsi3+0x8e>
 80001c6:	024b      	lsls	r3, r1, #9
 80001c8:	1ac0      	subs	r0, r0, r3
 80001ca:	4152      	adcs	r2, r2
 80001cc:	0a03      	lsrs	r3, r0, #8
 80001ce:	428b      	cmp	r3, r1
 80001d0:	d301      	bcc.n	80001d6 <__udivsi3+0x9a>
 80001d2:	020b      	lsls	r3, r1, #8
 80001d4:	1ac0      	subs	r0, r0, r3
 80001d6:	4152      	adcs	r2, r2
 80001d8:	d2cd      	bcs.n	8000176 <__udivsi3+0x3a>
 80001da:	09c3      	lsrs	r3, r0, #7
 80001dc:	428b      	cmp	r3, r1
 80001de:	d301      	bcc.n	80001e4 <__udivsi3+0xa8>
 80001e0:	01cb      	lsls	r3, r1, #7
 80001e2:	1ac0      	subs	r0, r0, r3
 80001e4:	4152      	adcs	r2, r2
 80001e6:	0983      	lsrs	r3, r0, #6
 80001e8:	428b      	cmp	r3, r1
 80001ea:	d301      	bcc.n	80001f0 <__udivsi3+0xb4>
 80001ec:	018b      	lsls	r3, r1, #6
 80001ee:	1ac0      	subs	r0, r0, r3
 80001f0:	4152      	adcs	r2, r2
 80001f2:	0943      	lsrs	r3, r0, #5
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d301      	bcc.n	80001fc <__udivsi3+0xc0>
 80001f8:	014b      	lsls	r3, r1, #5
 80001fa:	1ac0      	subs	r0, r0, r3
 80001fc:	4152      	adcs	r2, r2
 80001fe:	0903      	lsrs	r3, r0, #4
 8000200:	428b      	cmp	r3, r1
 8000202:	d301      	bcc.n	8000208 <__udivsi3+0xcc>
 8000204:	010b      	lsls	r3, r1, #4
 8000206:	1ac0      	subs	r0, r0, r3
 8000208:	4152      	adcs	r2, r2
 800020a:	08c3      	lsrs	r3, r0, #3
 800020c:	428b      	cmp	r3, r1
 800020e:	d301      	bcc.n	8000214 <__udivsi3+0xd8>
 8000210:	00cb      	lsls	r3, r1, #3
 8000212:	1ac0      	subs	r0, r0, r3
 8000214:	4152      	adcs	r2, r2
 8000216:	0883      	lsrs	r3, r0, #2
 8000218:	428b      	cmp	r3, r1
 800021a:	d301      	bcc.n	8000220 <__udivsi3+0xe4>
 800021c:	008b      	lsls	r3, r1, #2
 800021e:	1ac0      	subs	r0, r0, r3
 8000220:	4152      	adcs	r2, r2
 8000222:	0843      	lsrs	r3, r0, #1
 8000224:	428b      	cmp	r3, r1
 8000226:	d301      	bcc.n	800022c <__udivsi3+0xf0>
 8000228:	004b      	lsls	r3, r1, #1
 800022a:	1ac0      	subs	r0, r0, r3
 800022c:	4152      	adcs	r2, r2
 800022e:	1a41      	subs	r1, r0, r1
 8000230:	d200      	bcs.n	8000234 <__udivsi3+0xf8>
 8000232:	4601      	mov	r1, r0
 8000234:	4152      	adcs	r2, r2
 8000236:	4610      	mov	r0, r2
 8000238:	4770      	bx	lr
 800023a:	e7ff      	b.n	800023c <__udivsi3+0x100>
 800023c:	b501      	push	{r0, lr}
 800023e:	2000      	movs	r0, #0
 8000240:	f000 f8f0 	bl	8000424 <__aeabi_idiv0>
 8000244:	bd02      	pop	{r1, pc}
 8000246:	46c0      	nop			; (mov r8, r8)

08000248 <__aeabi_uidivmod>:
 8000248:	2900      	cmp	r1, #0
 800024a:	d0f7      	beq.n	800023c <__udivsi3+0x100>
 800024c:	e776      	b.n	800013c <__udivsi3>
 800024e:	4770      	bx	lr

08000250 <__divsi3>:
 8000250:	4603      	mov	r3, r0
 8000252:	430b      	orrs	r3, r1
 8000254:	d47f      	bmi.n	8000356 <__divsi3+0x106>
 8000256:	2200      	movs	r2, #0
 8000258:	0843      	lsrs	r3, r0, #1
 800025a:	428b      	cmp	r3, r1
 800025c:	d374      	bcc.n	8000348 <__divsi3+0xf8>
 800025e:	0903      	lsrs	r3, r0, #4
 8000260:	428b      	cmp	r3, r1
 8000262:	d35f      	bcc.n	8000324 <__divsi3+0xd4>
 8000264:	0a03      	lsrs	r3, r0, #8
 8000266:	428b      	cmp	r3, r1
 8000268:	d344      	bcc.n	80002f4 <__divsi3+0xa4>
 800026a:	0b03      	lsrs	r3, r0, #12
 800026c:	428b      	cmp	r3, r1
 800026e:	d328      	bcc.n	80002c2 <__divsi3+0x72>
 8000270:	0c03      	lsrs	r3, r0, #16
 8000272:	428b      	cmp	r3, r1
 8000274:	d30d      	bcc.n	8000292 <__divsi3+0x42>
 8000276:	22ff      	movs	r2, #255	; 0xff
 8000278:	0209      	lsls	r1, r1, #8
 800027a:	ba12      	rev	r2, r2
 800027c:	0c03      	lsrs	r3, r0, #16
 800027e:	428b      	cmp	r3, r1
 8000280:	d302      	bcc.n	8000288 <__divsi3+0x38>
 8000282:	1212      	asrs	r2, r2, #8
 8000284:	0209      	lsls	r1, r1, #8
 8000286:	d065      	beq.n	8000354 <__divsi3+0x104>
 8000288:	0b03      	lsrs	r3, r0, #12
 800028a:	428b      	cmp	r3, r1
 800028c:	d319      	bcc.n	80002c2 <__divsi3+0x72>
 800028e:	e000      	b.n	8000292 <__divsi3+0x42>
 8000290:	0a09      	lsrs	r1, r1, #8
 8000292:	0bc3      	lsrs	r3, r0, #15
 8000294:	428b      	cmp	r3, r1
 8000296:	d301      	bcc.n	800029c <__divsi3+0x4c>
 8000298:	03cb      	lsls	r3, r1, #15
 800029a:	1ac0      	subs	r0, r0, r3
 800029c:	4152      	adcs	r2, r2
 800029e:	0b83      	lsrs	r3, r0, #14
 80002a0:	428b      	cmp	r3, r1
 80002a2:	d301      	bcc.n	80002a8 <__divsi3+0x58>
 80002a4:	038b      	lsls	r3, r1, #14
 80002a6:	1ac0      	subs	r0, r0, r3
 80002a8:	4152      	adcs	r2, r2
 80002aa:	0b43      	lsrs	r3, r0, #13
 80002ac:	428b      	cmp	r3, r1
 80002ae:	d301      	bcc.n	80002b4 <__divsi3+0x64>
 80002b0:	034b      	lsls	r3, r1, #13
 80002b2:	1ac0      	subs	r0, r0, r3
 80002b4:	4152      	adcs	r2, r2
 80002b6:	0b03      	lsrs	r3, r0, #12
 80002b8:	428b      	cmp	r3, r1
 80002ba:	d301      	bcc.n	80002c0 <__divsi3+0x70>
 80002bc:	030b      	lsls	r3, r1, #12
 80002be:	1ac0      	subs	r0, r0, r3
 80002c0:	4152      	adcs	r2, r2
 80002c2:	0ac3      	lsrs	r3, r0, #11
 80002c4:	428b      	cmp	r3, r1
 80002c6:	d301      	bcc.n	80002cc <__divsi3+0x7c>
 80002c8:	02cb      	lsls	r3, r1, #11
 80002ca:	1ac0      	subs	r0, r0, r3
 80002cc:	4152      	adcs	r2, r2
 80002ce:	0a83      	lsrs	r3, r0, #10
 80002d0:	428b      	cmp	r3, r1
 80002d2:	d301      	bcc.n	80002d8 <__divsi3+0x88>
 80002d4:	028b      	lsls	r3, r1, #10
 80002d6:	1ac0      	subs	r0, r0, r3
 80002d8:	4152      	adcs	r2, r2
 80002da:	0a43      	lsrs	r3, r0, #9
 80002dc:	428b      	cmp	r3, r1
 80002de:	d301      	bcc.n	80002e4 <__divsi3+0x94>
 80002e0:	024b      	lsls	r3, r1, #9
 80002e2:	1ac0      	subs	r0, r0, r3
 80002e4:	4152      	adcs	r2, r2
 80002e6:	0a03      	lsrs	r3, r0, #8
 80002e8:	428b      	cmp	r3, r1
 80002ea:	d301      	bcc.n	80002f0 <__divsi3+0xa0>
 80002ec:	020b      	lsls	r3, r1, #8
 80002ee:	1ac0      	subs	r0, r0, r3
 80002f0:	4152      	adcs	r2, r2
 80002f2:	d2cd      	bcs.n	8000290 <__divsi3+0x40>
 80002f4:	09c3      	lsrs	r3, r0, #7
 80002f6:	428b      	cmp	r3, r1
 80002f8:	d301      	bcc.n	80002fe <__divsi3+0xae>
 80002fa:	01cb      	lsls	r3, r1, #7
 80002fc:	1ac0      	subs	r0, r0, r3
 80002fe:	4152      	adcs	r2, r2
 8000300:	0983      	lsrs	r3, r0, #6
 8000302:	428b      	cmp	r3, r1
 8000304:	d301      	bcc.n	800030a <__divsi3+0xba>
 8000306:	018b      	lsls	r3, r1, #6
 8000308:	1ac0      	subs	r0, r0, r3
 800030a:	4152      	adcs	r2, r2
 800030c:	0943      	lsrs	r3, r0, #5
 800030e:	428b      	cmp	r3, r1
 8000310:	d301      	bcc.n	8000316 <__divsi3+0xc6>
 8000312:	014b      	lsls	r3, r1, #5
 8000314:	1ac0      	subs	r0, r0, r3
 8000316:	4152      	adcs	r2, r2
 8000318:	0903      	lsrs	r3, r0, #4
 800031a:	428b      	cmp	r3, r1
 800031c:	d301      	bcc.n	8000322 <__divsi3+0xd2>
 800031e:	010b      	lsls	r3, r1, #4
 8000320:	1ac0      	subs	r0, r0, r3
 8000322:	4152      	adcs	r2, r2
 8000324:	08c3      	lsrs	r3, r0, #3
 8000326:	428b      	cmp	r3, r1
 8000328:	d301      	bcc.n	800032e <__divsi3+0xde>
 800032a:	00cb      	lsls	r3, r1, #3
 800032c:	1ac0      	subs	r0, r0, r3
 800032e:	4152      	adcs	r2, r2
 8000330:	0883      	lsrs	r3, r0, #2
 8000332:	428b      	cmp	r3, r1
 8000334:	d301      	bcc.n	800033a <__divsi3+0xea>
 8000336:	008b      	lsls	r3, r1, #2
 8000338:	1ac0      	subs	r0, r0, r3
 800033a:	4152      	adcs	r2, r2
 800033c:	0843      	lsrs	r3, r0, #1
 800033e:	428b      	cmp	r3, r1
 8000340:	d301      	bcc.n	8000346 <__divsi3+0xf6>
 8000342:	004b      	lsls	r3, r1, #1
 8000344:	1ac0      	subs	r0, r0, r3
 8000346:	4152      	adcs	r2, r2
 8000348:	1a41      	subs	r1, r0, r1
 800034a:	d200      	bcs.n	800034e <__divsi3+0xfe>
 800034c:	4601      	mov	r1, r0
 800034e:	4152      	adcs	r2, r2
 8000350:	4610      	mov	r0, r2
 8000352:	4770      	bx	lr
 8000354:	e05d      	b.n	8000412 <__divsi3+0x1c2>
 8000356:	0fca      	lsrs	r2, r1, #31
 8000358:	d000      	beq.n	800035c <__divsi3+0x10c>
 800035a:	4249      	negs	r1, r1
 800035c:	1003      	asrs	r3, r0, #32
 800035e:	d300      	bcc.n	8000362 <__divsi3+0x112>
 8000360:	4240      	negs	r0, r0
 8000362:	4053      	eors	r3, r2
 8000364:	2200      	movs	r2, #0
 8000366:	469c      	mov	ip, r3
 8000368:	0903      	lsrs	r3, r0, #4
 800036a:	428b      	cmp	r3, r1
 800036c:	d32d      	bcc.n	80003ca <__divsi3+0x17a>
 800036e:	0a03      	lsrs	r3, r0, #8
 8000370:	428b      	cmp	r3, r1
 8000372:	d312      	bcc.n	800039a <__divsi3+0x14a>
 8000374:	22fc      	movs	r2, #252	; 0xfc
 8000376:	0189      	lsls	r1, r1, #6
 8000378:	ba12      	rev	r2, r2
 800037a:	0a03      	lsrs	r3, r0, #8
 800037c:	428b      	cmp	r3, r1
 800037e:	d30c      	bcc.n	800039a <__divsi3+0x14a>
 8000380:	0189      	lsls	r1, r1, #6
 8000382:	1192      	asrs	r2, r2, #6
 8000384:	428b      	cmp	r3, r1
 8000386:	d308      	bcc.n	800039a <__divsi3+0x14a>
 8000388:	0189      	lsls	r1, r1, #6
 800038a:	1192      	asrs	r2, r2, #6
 800038c:	428b      	cmp	r3, r1
 800038e:	d304      	bcc.n	800039a <__divsi3+0x14a>
 8000390:	0189      	lsls	r1, r1, #6
 8000392:	d03a      	beq.n	800040a <__divsi3+0x1ba>
 8000394:	1192      	asrs	r2, r2, #6
 8000396:	e000      	b.n	800039a <__divsi3+0x14a>
 8000398:	0989      	lsrs	r1, r1, #6
 800039a:	09c3      	lsrs	r3, r0, #7
 800039c:	428b      	cmp	r3, r1
 800039e:	d301      	bcc.n	80003a4 <__divsi3+0x154>
 80003a0:	01cb      	lsls	r3, r1, #7
 80003a2:	1ac0      	subs	r0, r0, r3
 80003a4:	4152      	adcs	r2, r2
 80003a6:	0983      	lsrs	r3, r0, #6
 80003a8:	428b      	cmp	r3, r1
 80003aa:	d301      	bcc.n	80003b0 <__divsi3+0x160>
 80003ac:	018b      	lsls	r3, r1, #6
 80003ae:	1ac0      	subs	r0, r0, r3
 80003b0:	4152      	adcs	r2, r2
 80003b2:	0943      	lsrs	r3, r0, #5
 80003b4:	428b      	cmp	r3, r1
 80003b6:	d301      	bcc.n	80003bc <__divsi3+0x16c>
 80003b8:	014b      	lsls	r3, r1, #5
 80003ba:	1ac0      	subs	r0, r0, r3
 80003bc:	4152      	adcs	r2, r2
 80003be:	0903      	lsrs	r3, r0, #4
 80003c0:	428b      	cmp	r3, r1
 80003c2:	d301      	bcc.n	80003c8 <__divsi3+0x178>
 80003c4:	010b      	lsls	r3, r1, #4
 80003c6:	1ac0      	subs	r0, r0, r3
 80003c8:	4152      	adcs	r2, r2
 80003ca:	08c3      	lsrs	r3, r0, #3
 80003cc:	428b      	cmp	r3, r1
 80003ce:	d301      	bcc.n	80003d4 <__divsi3+0x184>
 80003d0:	00cb      	lsls	r3, r1, #3
 80003d2:	1ac0      	subs	r0, r0, r3
 80003d4:	4152      	adcs	r2, r2
 80003d6:	0883      	lsrs	r3, r0, #2
 80003d8:	428b      	cmp	r3, r1
 80003da:	d301      	bcc.n	80003e0 <__divsi3+0x190>
 80003dc:	008b      	lsls	r3, r1, #2
 80003de:	1ac0      	subs	r0, r0, r3
 80003e0:	4152      	adcs	r2, r2
 80003e2:	d2d9      	bcs.n	8000398 <__divsi3+0x148>
 80003e4:	0843      	lsrs	r3, r0, #1
 80003e6:	428b      	cmp	r3, r1
 80003e8:	d301      	bcc.n	80003ee <__divsi3+0x19e>
 80003ea:	004b      	lsls	r3, r1, #1
 80003ec:	1ac0      	subs	r0, r0, r3
 80003ee:	4152      	adcs	r2, r2
 80003f0:	1a41      	subs	r1, r0, r1
 80003f2:	d200      	bcs.n	80003f6 <__divsi3+0x1a6>
 80003f4:	4601      	mov	r1, r0
 80003f6:	4663      	mov	r3, ip
 80003f8:	4152      	adcs	r2, r2
 80003fa:	105b      	asrs	r3, r3, #1
 80003fc:	4610      	mov	r0, r2
 80003fe:	d301      	bcc.n	8000404 <__divsi3+0x1b4>
 8000400:	4240      	negs	r0, r0
 8000402:	2b00      	cmp	r3, #0
 8000404:	d500      	bpl.n	8000408 <__divsi3+0x1b8>
 8000406:	4249      	negs	r1, r1
 8000408:	4770      	bx	lr
 800040a:	4663      	mov	r3, ip
 800040c:	105b      	asrs	r3, r3, #1
 800040e:	d300      	bcc.n	8000412 <__divsi3+0x1c2>
 8000410:	4240      	negs	r0, r0
 8000412:	b501      	push	{r0, lr}
 8000414:	2000      	movs	r0, #0
 8000416:	f000 f805 	bl	8000424 <__aeabi_idiv0>
 800041a:	bd02      	pop	{r1, pc}

0800041c <__aeabi_idivmod>:
 800041c:	2900      	cmp	r1, #0
 800041e:	d0f8      	beq.n	8000412 <__divsi3+0x1c2>
 8000420:	e716      	b.n	8000250 <__divsi3>
 8000422:	4770      	bx	lr

08000424 <__aeabi_idiv0>:
 8000424:	4770      	bx	lr
 8000426:	46c0      	nop			; (mov r8, r8)

08000428 <__aeabi_cdrcmple>:
 8000428:	4684      	mov	ip, r0
 800042a:	0010      	movs	r0, r2
 800042c:	4662      	mov	r2, ip
 800042e:	468c      	mov	ip, r1
 8000430:	0019      	movs	r1, r3
 8000432:	4663      	mov	r3, ip
 8000434:	e000      	b.n	8000438 <__aeabi_cdcmpeq>
 8000436:	46c0      	nop			; (mov r8, r8)

08000438 <__aeabi_cdcmpeq>:
 8000438:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800043a:	f001 f815 	bl	8001468 <__ledf2>
 800043e:	2800      	cmp	r0, #0
 8000440:	d401      	bmi.n	8000446 <__aeabi_cdcmpeq+0xe>
 8000442:	2100      	movs	r1, #0
 8000444:	42c8      	cmn	r0, r1
 8000446:	bd1f      	pop	{r0, r1, r2, r3, r4, pc}

08000448 <__aeabi_dcmpeq>:
 8000448:	b510      	push	{r4, lr}
 800044a:	f000 ff65 	bl	8001318 <__eqdf2>
 800044e:	4240      	negs	r0, r0
 8000450:	3001      	adds	r0, #1
 8000452:	bd10      	pop	{r4, pc}

08000454 <__aeabi_dcmplt>:
 8000454:	b510      	push	{r4, lr}
 8000456:	f001 f807 	bl	8001468 <__ledf2>
 800045a:	2800      	cmp	r0, #0
 800045c:	db01      	blt.n	8000462 <__aeabi_dcmplt+0xe>
 800045e:	2000      	movs	r0, #0
 8000460:	bd10      	pop	{r4, pc}
 8000462:	2001      	movs	r0, #1
 8000464:	bd10      	pop	{r4, pc}
 8000466:	46c0      	nop			; (mov r8, r8)

08000468 <__aeabi_dcmple>:
 8000468:	b510      	push	{r4, lr}
 800046a:	f000 fffd 	bl	8001468 <__ledf2>
 800046e:	2800      	cmp	r0, #0
 8000470:	dd01      	ble.n	8000476 <__aeabi_dcmple+0xe>
 8000472:	2000      	movs	r0, #0
 8000474:	bd10      	pop	{r4, pc}
 8000476:	2001      	movs	r0, #1
 8000478:	bd10      	pop	{r4, pc}
 800047a:	46c0      	nop			; (mov r8, r8)

0800047c <__aeabi_dcmpgt>:
 800047c:	b510      	push	{r4, lr}
 800047e:	f000 ff8d 	bl	800139c <__gedf2>
 8000482:	2800      	cmp	r0, #0
 8000484:	dc01      	bgt.n	800048a <__aeabi_dcmpgt+0xe>
 8000486:	2000      	movs	r0, #0
 8000488:	bd10      	pop	{r4, pc}
 800048a:	2001      	movs	r0, #1
 800048c:	bd10      	pop	{r4, pc}
 800048e:	46c0      	nop			; (mov r8, r8)

08000490 <__aeabi_dcmpge>:
 8000490:	b510      	push	{r4, lr}
 8000492:	f000 ff83 	bl	800139c <__gedf2>
 8000496:	2800      	cmp	r0, #0
 8000498:	da01      	bge.n	800049e <__aeabi_dcmpge+0xe>
 800049a:	2000      	movs	r0, #0
 800049c:	bd10      	pop	{r4, pc}
 800049e:	2001      	movs	r0, #1
 80004a0:	bd10      	pop	{r4, pc}
 80004a2:	46c0      	nop			; (mov r8, r8)

080004a4 <__aeabi_uldivmod>:
 80004a4:	2b00      	cmp	r3, #0
 80004a6:	d111      	bne.n	80004cc <__aeabi_uldivmod+0x28>
 80004a8:	2a00      	cmp	r2, #0
 80004aa:	d10f      	bne.n	80004cc <__aeabi_uldivmod+0x28>
 80004ac:	2900      	cmp	r1, #0
 80004ae:	d100      	bne.n	80004b2 <__aeabi_uldivmod+0xe>
 80004b0:	2800      	cmp	r0, #0
 80004b2:	d002      	beq.n	80004ba <__aeabi_uldivmod+0x16>
 80004b4:	2100      	movs	r1, #0
 80004b6:	43c9      	mvns	r1, r1
 80004b8:	0008      	movs	r0, r1
 80004ba:	b407      	push	{r0, r1, r2}
 80004bc:	4802      	ldr	r0, [pc, #8]	; (80004c8 <__aeabi_uldivmod+0x24>)
 80004be:	a102      	add	r1, pc, #8	; (adr r1, 80004c8 <__aeabi_uldivmod+0x24>)
 80004c0:	1840      	adds	r0, r0, r1
 80004c2:	9002      	str	r0, [sp, #8]
 80004c4:	bd03      	pop	{r0, r1, pc}
 80004c6:	46c0      	nop			; (mov r8, r8)
 80004c8:	ffffff5d 	.word	0xffffff5d
 80004cc:	b403      	push	{r0, r1}
 80004ce:	4668      	mov	r0, sp
 80004d0:	b501      	push	{r0, lr}
 80004d2:	9802      	ldr	r0, [sp, #8]
 80004d4:	f000 f806 	bl	80004e4 <__udivmoddi4>
 80004d8:	9b01      	ldr	r3, [sp, #4]
 80004da:	469e      	mov	lr, r3
 80004dc:	b002      	add	sp, #8
 80004de:	bc0c      	pop	{r2, r3}
 80004e0:	4770      	bx	lr
 80004e2:	46c0      	nop			; (mov r8, r8)

080004e4 <__udivmoddi4>:
 80004e4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80004e6:	4657      	mov	r7, sl
 80004e8:	464e      	mov	r6, r9
 80004ea:	4645      	mov	r5, r8
 80004ec:	46de      	mov	lr, fp
 80004ee:	b5e0      	push	{r5, r6, r7, lr}
 80004f0:	0004      	movs	r4, r0
 80004f2:	000d      	movs	r5, r1
 80004f4:	4692      	mov	sl, r2
 80004f6:	4699      	mov	r9, r3
 80004f8:	b083      	sub	sp, #12
 80004fa:	428b      	cmp	r3, r1
 80004fc:	d830      	bhi.n	8000560 <__udivmoddi4+0x7c>
 80004fe:	d02d      	beq.n	800055c <__udivmoddi4+0x78>
 8000500:	4649      	mov	r1, r9
 8000502:	4650      	mov	r0, sl
 8000504:	f001 ff20 	bl	8002348 <__clzdi2>
 8000508:	0029      	movs	r1, r5
 800050a:	0006      	movs	r6, r0
 800050c:	0020      	movs	r0, r4
 800050e:	f001 ff1b 	bl	8002348 <__clzdi2>
 8000512:	1a33      	subs	r3, r6, r0
 8000514:	4698      	mov	r8, r3
 8000516:	3b20      	subs	r3, #32
 8000518:	d434      	bmi.n	8000584 <__udivmoddi4+0xa0>
 800051a:	469b      	mov	fp, r3
 800051c:	4653      	mov	r3, sl
 800051e:	465a      	mov	r2, fp
 8000520:	4093      	lsls	r3, r2
 8000522:	4642      	mov	r2, r8
 8000524:	001f      	movs	r7, r3
 8000526:	4653      	mov	r3, sl
 8000528:	4093      	lsls	r3, r2
 800052a:	001e      	movs	r6, r3
 800052c:	42af      	cmp	r7, r5
 800052e:	d83b      	bhi.n	80005a8 <__udivmoddi4+0xc4>
 8000530:	42af      	cmp	r7, r5
 8000532:	d100      	bne.n	8000536 <__udivmoddi4+0x52>
 8000534:	e079      	b.n	800062a <__udivmoddi4+0x146>
 8000536:	465b      	mov	r3, fp
 8000538:	1ba4      	subs	r4, r4, r6
 800053a:	41bd      	sbcs	r5, r7
 800053c:	2b00      	cmp	r3, #0
 800053e:	da00      	bge.n	8000542 <__udivmoddi4+0x5e>
 8000540:	e076      	b.n	8000630 <__udivmoddi4+0x14c>
 8000542:	2200      	movs	r2, #0
 8000544:	2300      	movs	r3, #0
 8000546:	9200      	str	r2, [sp, #0]
 8000548:	9301      	str	r3, [sp, #4]
 800054a:	2301      	movs	r3, #1
 800054c:	465a      	mov	r2, fp
 800054e:	4093      	lsls	r3, r2
 8000550:	9301      	str	r3, [sp, #4]
 8000552:	2301      	movs	r3, #1
 8000554:	4642      	mov	r2, r8
 8000556:	4093      	lsls	r3, r2
 8000558:	9300      	str	r3, [sp, #0]
 800055a:	e029      	b.n	80005b0 <__udivmoddi4+0xcc>
 800055c:	4282      	cmp	r2, r0
 800055e:	d9cf      	bls.n	8000500 <__udivmoddi4+0x1c>
 8000560:	2200      	movs	r2, #0
 8000562:	2300      	movs	r3, #0
 8000564:	9200      	str	r2, [sp, #0]
 8000566:	9301      	str	r3, [sp, #4]
 8000568:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800056a:	2b00      	cmp	r3, #0
 800056c:	d001      	beq.n	8000572 <__udivmoddi4+0x8e>
 800056e:	601c      	str	r4, [r3, #0]
 8000570:	605d      	str	r5, [r3, #4]
 8000572:	9800      	ldr	r0, [sp, #0]
 8000574:	9901      	ldr	r1, [sp, #4]
 8000576:	b003      	add	sp, #12
 8000578:	bcf0      	pop	{r4, r5, r6, r7}
 800057a:	46bb      	mov	fp, r7
 800057c:	46b2      	mov	sl, r6
 800057e:	46a9      	mov	r9, r5
 8000580:	46a0      	mov	r8, r4
 8000582:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000584:	4642      	mov	r2, r8
 8000586:	469b      	mov	fp, r3
 8000588:	2320      	movs	r3, #32
 800058a:	1a9b      	subs	r3, r3, r2
 800058c:	4652      	mov	r2, sl
 800058e:	40da      	lsrs	r2, r3
 8000590:	4641      	mov	r1, r8
 8000592:	0013      	movs	r3, r2
 8000594:	464a      	mov	r2, r9
 8000596:	408a      	lsls	r2, r1
 8000598:	0017      	movs	r7, r2
 800059a:	4642      	mov	r2, r8
 800059c:	431f      	orrs	r7, r3
 800059e:	4653      	mov	r3, sl
 80005a0:	4093      	lsls	r3, r2
 80005a2:	001e      	movs	r6, r3
 80005a4:	42af      	cmp	r7, r5
 80005a6:	d9c3      	bls.n	8000530 <__udivmoddi4+0x4c>
 80005a8:	2200      	movs	r2, #0
 80005aa:	2300      	movs	r3, #0
 80005ac:	9200      	str	r2, [sp, #0]
 80005ae:	9301      	str	r3, [sp, #4]
 80005b0:	4643      	mov	r3, r8
 80005b2:	2b00      	cmp	r3, #0
 80005b4:	d0d8      	beq.n	8000568 <__udivmoddi4+0x84>
 80005b6:	07fb      	lsls	r3, r7, #31
 80005b8:	0872      	lsrs	r2, r6, #1
 80005ba:	431a      	orrs	r2, r3
 80005bc:	4646      	mov	r6, r8
 80005be:	087b      	lsrs	r3, r7, #1
 80005c0:	e00e      	b.n	80005e0 <__udivmoddi4+0xfc>
 80005c2:	42ab      	cmp	r3, r5
 80005c4:	d101      	bne.n	80005ca <__udivmoddi4+0xe6>
 80005c6:	42a2      	cmp	r2, r4
 80005c8:	d80c      	bhi.n	80005e4 <__udivmoddi4+0x100>
 80005ca:	1aa4      	subs	r4, r4, r2
 80005cc:	419d      	sbcs	r5, r3
 80005ce:	2001      	movs	r0, #1
 80005d0:	1924      	adds	r4, r4, r4
 80005d2:	416d      	adcs	r5, r5
 80005d4:	2100      	movs	r1, #0
 80005d6:	3e01      	subs	r6, #1
 80005d8:	1824      	adds	r4, r4, r0
 80005da:	414d      	adcs	r5, r1
 80005dc:	2e00      	cmp	r6, #0
 80005de:	d006      	beq.n	80005ee <__udivmoddi4+0x10a>
 80005e0:	42ab      	cmp	r3, r5
 80005e2:	d9ee      	bls.n	80005c2 <__udivmoddi4+0xde>
 80005e4:	3e01      	subs	r6, #1
 80005e6:	1924      	adds	r4, r4, r4
 80005e8:	416d      	adcs	r5, r5
 80005ea:	2e00      	cmp	r6, #0
 80005ec:	d1f8      	bne.n	80005e0 <__udivmoddi4+0xfc>
 80005ee:	9800      	ldr	r0, [sp, #0]
 80005f0:	9901      	ldr	r1, [sp, #4]
 80005f2:	465b      	mov	r3, fp
 80005f4:	1900      	adds	r0, r0, r4
 80005f6:	4169      	adcs	r1, r5
 80005f8:	2b00      	cmp	r3, #0
 80005fa:	db24      	blt.n	8000646 <__udivmoddi4+0x162>
 80005fc:	002b      	movs	r3, r5
 80005fe:	465a      	mov	r2, fp
 8000600:	4644      	mov	r4, r8
 8000602:	40d3      	lsrs	r3, r2
 8000604:	002a      	movs	r2, r5
 8000606:	40e2      	lsrs	r2, r4
 8000608:	001c      	movs	r4, r3
 800060a:	465b      	mov	r3, fp
 800060c:	0015      	movs	r5, r2
 800060e:	2b00      	cmp	r3, #0
 8000610:	db2a      	blt.n	8000668 <__udivmoddi4+0x184>
 8000612:	0026      	movs	r6, r4
 8000614:	409e      	lsls	r6, r3
 8000616:	0033      	movs	r3, r6
 8000618:	0026      	movs	r6, r4
 800061a:	4647      	mov	r7, r8
 800061c:	40be      	lsls	r6, r7
 800061e:	0032      	movs	r2, r6
 8000620:	1a80      	subs	r0, r0, r2
 8000622:	4199      	sbcs	r1, r3
 8000624:	9000      	str	r0, [sp, #0]
 8000626:	9101      	str	r1, [sp, #4]
 8000628:	e79e      	b.n	8000568 <__udivmoddi4+0x84>
 800062a:	42a3      	cmp	r3, r4
 800062c:	d8bc      	bhi.n	80005a8 <__udivmoddi4+0xc4>
 800062e:	e782      	b.n	8000536 <__udivmoddi4+0x52>
 8000630:	4642      	mov	r2, r8
 8000632:	2320      	movs	r3, #32
 8000634:	2100      	movs	r1, #0
 8000636:	1a9b      	subs	r3, r3, r2
 8000638:	2200      	movs	r2, #0
 800063a:	9100      	str	r1, [sp, #0]
 800063c:	9201      	str	r2, [sp, #4]
 800063e:	2201      	movs	r2, #1
 8000640:	40da      	lsrs	r2, r3
 8000642:	9201      	str	r2, [sp, #4]
 8000644:	e785      	b.n	8000552 <__udivmoddi4+0x6e>
 8000646:	4642      	mov	r2, r8
 8000648:	2320      	movs	r3, #32
 800064a:	1a9b      	subs	r3, r3, r2
 800064c:	002a      	movs	r2, r5
 800064e:	4646      	mov	r6, r8
 8000650:	409a      	lsls	r2, r3
 8000652:	0023      	movs	r3, r4
 8000654:	40f3      	lsrs	r3, r6
 8000656:	4644      	mov	r4, r8
 8000658:	4313      	orrs	r3, r2
 800065a:	002a      	movs	r2, r5
 800065c:	40e2      	lsrs	r2, r4
 800065e:	001c      	movs	r4, r3
 8000660:	465b      	mov	r3, fp
 8000662:	0015      	movs	r5, r2
 8000664:	2b00      	cmp	r3, #0
 8000666:	dad4      	bge.n	8000612 <__udivmoddi4+0x12e>
 8000668:	4642      	mov	r2, r8
 800066a:	002f      	movs	r7, r5
 800066c:	2320      	movs	r3, #32
 800066e:	0026      	movs	r6, r4
 8000670:	4097      	lsls	r7, r2
 8000672:	1a9b      	subs	r3, r3, r2
 8000674:	40de      	lsrs	r6, r3
 8000676:	003b      	movs	r3, r7
 8000678:	4333      	orrs	r3, r6
 800067a:	e7cd      	b.n	8000618 <__udivmoddi4+0x134>

0800067c <__aeabi_dadd>:
 800067c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800067e:	464f      	mov	r7, r9
 8000680:	4646      	mov	r6, r8
 8000682:	46d6      	mov	lr, sl
 8000684:	0004      	movs	r4, r0
 8000686:	b5c0      	push	{r6, r7, lr}
 8000688:	001f      	movs	r7, r3
 800068a:	030b      	lsls	r3, r1, #12
 800068c:	0010      	movs	r0, r2
 800068e:	004e      	lsls	r6, r1, #1
 8000690:	0a5b      	lsrs	r3, r3, #9
 8000692:	0fcd      	lsrs	r5, r1, #31
 8000694:	0f61      	lsrs	r1, r4, #29
 8000696:	007a      	lsls	r2, r7, #1
 8000698:	4319      	orrs	r1, r3
 800069a:	00e3      	lsls	r3, r4, #3
 800069c:	033c      	lsls	r4, r7, #12
 800069e:	0fff      	lsrs	r7, r7, #31
 80006a0:	46bc      	mov	ip, r7
 80006a2:	0a64      	lsrs	r4, r4, #9
 80006a4:	0f47      	lsrs	r7, r0, #29
 80006a6:	4327      	orrs	r7, r4
 80006a8:	0d76      	lsrs	r6, r6, #21
 80006aa:	0d52      	lsrs	r2, r2, #21
 80006ac:	00c0      	lsls	r0, r0, #3
 80006ae:	46b9      	mov	r9, r7
 80006b0:	4680      	mov	r8, r0
 80006b2:	1ab7      	subs	r7, r6, r2
 80006b4:	4565      	cmp	r5, ip
 80006b6:	d100      	bne.n	80006ba <__aeabi_dadd+0x3e>
 80006b8:	e09b      	b.n	80007f2 <__aeabi_dadd+0x176>
 80006ba:	2f00      	cmp	r7, #0
 80006bc:	dc00      	bgt.n	80006c0 <__aeabi_dadd+0x44>
 80006be:	e084      	b.n	80007ca <__aeabi_dadd+0x14e>
 80006c0:	2a00      	cmp	r2, #0
 80006c2:	d100      	bne.n	80006c6 <__aeabi_dadd+0x4a>
 80006c4:	e0be      	b.n	8000844 <__aeabi_dadd+0x1c8>
 80006c6:	4ac8      	ldr	r2, [pc, #800]	; (80009e8 <__aeabi_dadd+0x36c>)
 80006c8:	4296      	cmp	r6, r2
 80006ca:	d100      	bne.n	80006ce <__aeabi_dadd+0x52>
 80006cc:	e124      	b.n	8000918 <__aeabi_dadd+0x29c>
 80006ce:	2280      	movs	r2, #128	; 0x80
 80006d0:	464c      	mov	r4, r9
 80006d2:	0412      	lsls	r2, r2, #16
 80006d4:	4314      	orrs	r4, r2
 80006d6:	46a1      	mov	r9, r4
 80006d8:	2f38      	cmp	r7, #56	; 0x38
 80006da:	dd00      	ble.n	80006de <__aeabi_dadd+0x62>
 80006dc:	e167      	b.n	80009ae <__aeabi_dadd+0x332>
 80006de:	2f1f      	cmp	r7, #31
 80006e0:	dd00      	ble.n	80006e4 <__aeabi_dadd+0x68>
 80006e2:	e1d6      	b.n	8000a92 <__aeabi_dadd+0x416>
 80006e4:	2220      	movs	r2, #32
 80006e6:	464c      	mov	r4, r9
 80006e8:	1bd2      	subs	r2, r2, r7
 80006ea:	4094      	lsls	r4, r2
 80006ec:	46a2      	mov	sl, r4
 80006ee:	4644      	mov	r4, r8
 80006f0:	40fc      	lsrs	r4, r7
 80006f2:	0020      	movs	r0, r4
 80006f4:	4654      	mov	r4, sl
 80006f6:	4304      	orrs	r4, r0
 80006f8:	4640      	mov	r0, r8
 80006fa:	4090      	lsls	r0, r2
 80006fc:	1e42      	subs	r2, r0, #1
 80006fe:	4190      	sbcs	r0, r2
 8000700:	464a      	mov	r2, r9
 8000702:	40fa      	lsrs	r2, r7
 8000704:	4304      	orrs	r4, r0
 8000706:	1a89      	subs	r1, r1, r2
 8000708:	1b1c      	subs	r4, r3, r4
 800070a:	42a3      	cmp	r3, r4
 800070c:	4192      	sbcs	r2, r2
 800070e:	4252      	negs	r2, r2
 8000710:	1a8b      	subs	r3, r1, r2
 8000712:	469a      	mov	sl, r3
 8000714:	4653      	mov	r3, sl
 8000716:	021b      	lsls	r3, r3, #8
 8000718:	d400      	bmi.n	800071c <__aeabi_dadd+0xa0>
 800071a:	e0d4      	b.n	80008c6 <__aeabi_dadd+0x24a>
 800071c:	4653      	mov	r3, sl
 800071e:	025a      	lsls	r2, r3, #9
 8000720:	0a53      	lsrs	r3, r2, #9
 8000722:	469a      	mov	sl, r3
 8000724:	4653      	mov	r3, sl
 8000726:	2b00      	cmp	r3, #0
 8000728:	d100      	bne.n	800072c <__aeabi_dadd+0xb0>
 800072a:	e104      	b.n	8000936 <__aeabi_dadd+0x2ba>
 800072c:	4650      	mov	r0, sl
 800072e:	f001 fded 	bl	800230c <__clzsi2>
 8000732:	0003      	movs	r3, r0
 8000734:	3b08      	subs	r3, #8
 8000736:	2220      	movs	r2, #32
 8000738:	0020      	movs	r0, r4
 800073a:	1ad2      	subs	r2, r2, r3
 800073c:	4651      	mov	r1, sl
 800073e:	40d0      	lsrs	r0, r2
 8000740:	4099      	lsls	r1, r3
 8000742:	0002      	movs	r2, r0
 8000744:	409c      	lsls	r4, r3
 8000746:	430a      	orrs	r2, r1
 8000748:	42b3      	cmp	r3, r6
 800074a:	da00      	bge.n	800074e <__aeabi_dadd+0xd2>
 800074c:	e102      	b.n	8000954 <__aeabi_dadd+0x2d8>
 800074e:	1b9b      	subs	r3, r3, r6
 8000750:	1c59      	adds	r1, r3, #1
 8000752:	291f      	cmp	r1, #31
 8000754:	dd00      	ble.n	8000758 <__aeabi_dadd+0xdc>
 8000756:	e0a7      	b.n	80008a8 <__aeabi_dadd+0x22c>
 8000758:	2320      	movs	r3, #32
 800075a:	0010      	movs	r0, r2
 800075c:	0026      	movs	r6, r4
 800075e:	1a5b      	subs	r3, r3, r1
 8000760:	409c      	lsls	r4, r3
 8000762:	4098      	lsls	r0, r3
 8000764:	40ce      	lsrs	r6, r1
 8000766:	40ca      	lsrs	r2, r1
 8000768:	1e63      	subs	r3, r4, #1
 800076a:	419c      	sbcs	r4, r3
 800076c:	4330      	orrs	r0, r6
 800076e:	4692      	mov	sl, r2
 8000770:	2600      	movs	r6, #0
 8000772:	4304      	orrs	r4, r0
 8000774:	0763      	lsls	r3, r4, #29
 8000776:	d009      	beq.n	800078c <__aeabi_dadd+0x110>
 8000778:	230f      	movs	r3, #15
 800077a:	4023      	ands	r3, r4
 800077c:	2b04      	cmp	r3, #4
 800077e:	d005      	beq.n	800078c <__aeabi_dadd+0x110>
 8000780:	1d23      	adds	r3, r4, #4
 8000782:	42a3      	cmp	r3, r4
 8000784:	41a4      	sbcs	r4, r4
 8000786:	4264      	negs	r4, r4
 8000788:	44a2      	add	sl, r4
 800078a:	001c      	movs	r4, r3
 800078c:	4653      	mov	r3, sl
 800078e:	021b      	lsls	r3, r3, #8
 8000790:	d400      	bmi.n	8000794 <__aeabi_dadd+0x118>
 8000792:	e09b      	b.n	80008cc <__aeabi_dadd+0x250>
 8000794:	4b94      	ldr	r3, [pc, #592]	; (80009e8 <__aeabi_dadd+0x36c>)
 8000796:	3601      	adds	r6, #1
 8000798:	429e      	cmp	r6, r3
 800079a:	d100      	bne.n	800079e <__aeabi_dadd+0x122>
 800079c:	e0b8      	b.n	8000910 <__aeabi_dadd+0x294>
 800079e:	4653      	mov	r3, sl
 80007a0:	4992      	ldr	r1, [pc, #584]	; (80009ec <__aeabi_dadd+0x370>)
 80007a2:	08e4      	lsrs	r4, r4, #3
 80007a4:	400b      	ands	r3, r1
 80007a6:	0019      	movs	r1, r3
 80007a8:	075b      	lsls	r3, r3, #29
 80007aa:	4323      	orrs	r3, r4
 80007ac:	0572      	lsls	r2, r6, #21
 80007ae:	024c      	lsls	r4, r1, #9
 80007b0:	0b24      	lsrs	r4, r4, #12
 80007b2:	0d52      	lsrs	r2, r2, #21
 80007b4:	0512      	lsls	r2, r2, #20
 80007b6:	07ed      	lsls	r5, r5, #31
 80007b8:	4322      	orrs	r2, r4
 80007ba:	432a      	orrs	r2, r5
 80007bc:	0018      	movs	r0, r3
 80007be:	0011      	movs	r1, r2
 80007c0:	bce0      	pop	{r5, r6, r7}
 80007c2:	46ba      	mov	sl, r7
 80007c4:	46b1      	mov	r9, r6
 80007c6:	46a8      	mov	r8, r5
 80007c8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80007ca:	2f00      	cmp	r7, #0
 80007cc:	d048      	beq.n	8000860 <__aeabi_dadd+0x1e4>
 80007ce:	1b97      	subs	r7, r2, r6
 80007d0:	2e00      	cmp	r6, #0
 80007d2:	d000      	beq.n	80007d6 <__aeabi_dadd+0x15a>
 80007d4:	e10e      	b.n	80009f4 <__aeabi_dadd+0x378>
 80007d6:	000c      	movs	r4, r1
 80007d8:	431c      	orrs	r4, r3
 80007da:	d100      	bne.n	80007de <__aeabi_dadd+0x162>
 80007dc:	e1b7      	b.n	8000b4e <__aeabi_dadd+0x4d2>
 80007de:	1e7c      	subs	r4, r7, #1
 80007e0:	2f01      	cmp	r7, #1
 80007e2:	d100      	bne.n	80007e6 <__aeabi_dadd+0x16a>
 80007e4:	e226      	b.n	8000c34 <__aeabi_dadd+0x5b8>
 80007e6:	4d80      	ldr	r5, [pc, #512]	; (80009e8 <__aeabi_dadd+0x36c>)
 80007e8:	42af      	cmp	r7, r5
 80007ea:	d100      	bne.n	80007ee <__aeabi_dadd+0x172>
 80007ec:	e1d5      	b.n	8000b9a <__aeabi_dadd+0x51e>
 80007ee:	0027      	movs	r7, r4
 80007f0:	e107      	b.n	8000a02 <__aeabi_dadd+0x386>
 80007f2:	2f00      	cmp	r7, #0
 80007f4:	dc00      	bgt.n	80007f8 <__aeabi_dadd+0x17c>
 80007f6:	e0b2      	b.n	800095e <__aeabi_dadd+0x2e2>
 80007f8:	2a00      	cmp	r2, #0
 80007fa:	d047      	beq.n	800088c <__aeabi_dadd+0x210>
 80007fc:	4a7a      	ldr	r2, [pc, #488]	; (80009e8 <__aeabi_dadd+0x36c>)
 80007fe:	4296      	cmp	r6, r2
 8000800:	d100      	bne.n	8000804 <__aeabi_dadd+0x188>
 8000802:	e089      	b.n	8000918 <__aeabi_dadd+0x29c>
 8000804:	2280      	movs	r2, #128	; 0x80
 8000806:	464c      	mov	r4, r9
 8000808:	0412      	lsls	r2, r2, #16
 800080a:	4314      	orrs	r4, r2
 800080c:	46a1      	mov	r9, r4
 800080e:	2f38      	cmp	r7, #56	; 0x38
 8000810:	dc6b      	bgt.n	80008ea <__aeabi_dadd+0x26e>
 8000812:	2f1f      	cmp	r7, #31
 8000814:	dc00      	bgt.n	8000818 <__aeabi_dadd+0x19c>
 8000816:	e16e      	b.n	8000af6 <__aeabi_dadd+0x47a>
 8000818:	003a      	movs	r2, r7
 800081a:	4648      	mov	r0, r9
 800081c:	3a20      	subs	r2, #32
 800081e:	40d0      	lsrs	r0, r2
 8000820:	4684      	mov	ip, r0
 8000822:	2f20      	cmp	r7, #32
 8000824:	d007      	beq.n	8000836 <__aeabi_dadd+0x1ba>
 8000826:	2240      	movs	r2, #64	; 0x40
 8000828:	4648      	mov	r0, r9
 800082a:	1bd2      	subs	r2, r2, r7
 800082c:	4090      	lsls	r0, r2
 800082e:	0002      	movs	r2, r0
 8000830:	4640      	mov	r0, r8
 8000832:	4310      	orrs	r0, r2
 8000834:	4680      	mov	r8, r0
 8000836:	4640      	mov	r0, r8
 8000838:	1e42      	subs	r2, r0, #1
 800083a:	4190      	sbcs	r0, r2
 800083c:	4662      	mov	r2, ip
 800083e:	0004      	movs	r4, r0
 8000840:	4314      	orrs	r4, r2
 8000842:	e057      	b.n	80008f4 <__aeabi_dadd+0x278>
 8000844:	464a      	mov	r2, r9
 8000846:	4302      	orrs	r2, r0
 8000848:	d100      	bne.n	800084c <__aeabi_dadd+0x1d0>
 800084a:	e103      	b.n	8000a54 <__aeabi_dadd+0x3d8>
 800084c:	1e7a      	subs	r2, r7, #1
 800084e:	2f01      	cmp	r7, #1
 8000850:	d100      	bne.n	8000854 <__aeabi_dadd+0x1d8>
 8000852:	e193      	b.n	8000b7c <__aeabi_dadd+0x500>
 8000854:	4c64      	ldr	r4, [pc, #400]	; (80009e8 <__aeabi_dadd+0x36c>)
 8000856:	42a7      	cmp	r7, r4
 8000858:	d100      	bne.n	800085c <__aeabi_dadd+0x1e0>
 800085a:	e18a      	b.n	8000b72 <__aeabi_dadd+0x4f6>
 800085c:	0017      	movs	r7, r2
 800085e:	e73b      	b.n	80006d8 <__aeabi_dadd+0x5c>
 8000860:	4c63      	ldr	r4, [pc, #396]	; (80009f0 <__aeabi_dadd+0x374>)
 8000862:	1c72      	adds	r2, r6, #1
 8000864:	4222      	tst	r2, r4
 8000866:	d000      	beq.n	800086a <__aeabi_dadd+0x1ee>
 8000868:	e0e0      	b.n	8000a2c <__aeabi_dadd+0x3b0>
 800086a:	000a      	movs	r2, r1
 800086c:	431a      	orrs	r2, r3
 800086e:	2e00      	cmp	r6, #0
 8000870:	d000      	beq.n	8000874 <__aeabi_dadd+0x1f8>
 8000872:	e174      	b.n	8000b5e <__aeabi_dadd+0x4e2>
 8000874:	2a00      	cmp	r2, #0
 8000876:	d100      	bne.n	800087a <__aeabi_dadd+0x1fe>
 8000878:	e1d0      	b.n	8000c1c <__aeabi_dadd+0x5a0>
 800087a:	464a      	mov	r2, r9
 800087c:	4302      	orrs	r2, r0
 800087e:	d000      	beq.n	8000882 <__aeabi_dadd+0x206>
 8000880:	e1e3      	b.n	8000c4a <__aeabi_dadd+0x5ce>
 8000882:	074a      	lsls	r2, r1, #29
 8000884:	08db      	lsrs	r3, r3, #3
 8000886:	4313      	orrs	r3, r2
 8000888:	08c9      	lsrs	r1, r1, #3
 800088a:	e029      	b.n	80008e0 <__aeabi_dadd+0x264>
 800088c:	464a      	mov	r2, r9
 800088e:	4302      	orrs	r2, r0
 8000890:	d100      	bne.n	8000894 <__aeabi_dadd+0x218>
 8000892:	e17d      	b.n	8000b90 <__aeabi_dadd+0x514>
 8000894:	1e7a      	subs	r2, r7, #1
 8000896:	2f01      	cmp	r7, #1
 8000898:	d100      	bne.n	800089c <__aeabi_dadd+0x220>
 800089a:	e0e0      	b.n	8000a5e <__aeabi_dadd+0x3e2>
 800089c:	4c52      	ldr	r4, [pc, #328]	; (80009e8 <__aeabi_dadd+0x36c>)
 800089e:	42a7      	cmp	r7, r4
 80008a0:	d100      	bne.n	80008a4 <__aeabi_dadd+0x228>
 80008a2:	e166      	b.n	8000b72 <__aeabi_dadd+0x4f6>
 80008a4:	0017      	movs	r7, r2
 80008a6:	e7b2      	b.n	800080e <__aeabi_dadd+0x192>
 80008a8:	0010      	movs	r0, r2
 80008aa:	3b1f      	subs	r3, #31
 80008ac:	40d8      	lsrs	r0, r3
 80008ae:	2920      	cmp	r1, #32
 80008b0:	d003      	beq.n	80008ba <__aeabi_dadd+0x23e>
 80008b2:	2340      	movs	r3, #64	; 0x40
 80008b4:	1a5b      	subs	r3, r3, r1
 80008b6:	409a      	lsls	r2, r3
 80008b8:	4314      	orrs	r4, r2
 80008ba:	1e63      	subs	r3, r4, #1
 80008bc:	419c      	sbcs	r4, r3
 80008be:	2300      	movs	r3, #0
 80008c0:	2600      	movs	r6, #0
 80008c2:	469a      	mov	sl, r3
 80008c4:	4304      	orrs	r4, r0
 80008c6:	0763      	lsls	r3, r4, #29
 80008c8:	d000      	beq.n	80008cc <__aeabi_dadd+0x250>
 80008ca:	e755      	b.n	8000778 <__aeabi_dadd+0xfc>
 80008cc:	4652      	mov	r2, sl
 80008ce:	08e3      	lsrs	r3, r4, #3
 80008d0:	0752      	lsls	r2, r2, #29
 80008d2:	4313      	orrs	r3, r2
 80008d4:	4652      	mov	r2, sl
 80008d6:	0037      	movs	r7, r6
 80008d8:	08d1      	lsrs	r1, r2, #3
 80008da:	4a43      	ldr	r2, [pc, #268]	; (80009e8 <__aeabi_dadd+0x36c>)
 80008dc:	4297      	cmp	r7, r2
 80008de:	d01f      	beq.n	8000920 <__aeabi_dadd+0x2a4>
 80008e0:	0309      	lsls	r1, r1, #12
 80008e2:	057a      	lsls	r2, r7, #21
 80008e4:	0b0c      	lsrs	r4, r1, #12
 80008e6:	0d52      	lsrs	r2, r2, #21
 80008e8:	e764      	b.n	80007b4 <__aeabi_dadd+0x138>
 80008ea:	4642      	mov	r2, r8
 80008ec:	464c      	mov	r4, r9
 80008ee:	4314      	orrs	r4, r2
 80008f0:	1e62      	subs	r2, r4, #1
 80008f2:	4194      	sbcs	r4, r2
 80008f4:	18e4      	adds	r4, r4, r3
 80008f6:	429c      	cmp	r4, r3
 80008f8:	4192      	sbcs	r2, r2
 80008fa:	4252      	negs	r2, r2
 80008fc:	4692      	mov	sl, r2
 80008fe:	448a      	add	sl, r1
 8000900:	4653      	mov	r3, sl
 8000902:	021b      	lsls	r3, r3, #8
 8000904:	d5df      	bpl.n	80008c6 <__aeabi_dadd+0x24a>
 8000906:	4b38      	ldr	r3, [pc, #224]	; (80009e8 <__aeabi_dadd+0x36c>)
 8000908:	3601      	adds	r6, #1
 800090a:	429e      	cmp	r6, r3
 800090c:	d000      	beq.n	8000910 <__aeabi_dadd+0x294>
 800090e:	e0b3      	b.n	8000a78 <__aeabi_dadd+0x3fc>
 8000910:	0032      	movs	r2, r6
 8000912:	2400      	movs	r4, #0
 8000914:	2300      	movs	r3, #0
 8000916:	e74d      	b.n	80007b4 <__aeabi_dadd+0x138>
 8000918:	074a      	lsls	r2, r1, #29
 800091a:	08db      	lsrs	r3, r3, #3
 800091c:	4313      	orrs	r3, r2
 800091e:	08c9      	lsrs	r1, r1, #3
 8000920:	001a      	movs	r2, r3
 8000922:	430a      	orrs	r2, r1
 8000924:	d100      	bne.n	8000928 <__aeabi_dadd+0x2ac>
 8000926:	e200      	b.n	8000d2a <__aeabi_dadd+0x6ae>
 8000928:	2480      	movs	r4, #128	; 0x80
 800092a:	0324      	lsls	r4, r4, #12
 800092c:	430c      	orrs	r4, r1
 800092e:	0324      	lsls	r4, r4, #12
 8000930:	4a2d      	ldr	r2, [pc, #180]	; (80009e8 <__aeabi_dadd+0x36c>)
 8000932:	0b24      	lsrs	r4, r4, #12
 8000934:	e73e      	b.n	80007b4 <__aeabi_dadd+0x138>
 8000936:	0020      	movs	r0, r4
 8000938:	f001 fce8 	bl	800230c <__clzsi2>
 800093c:	0003      	movs	r3, r0
 800093e:	3318      	adds	r3, #24
 8000940:	2b1f      	cmp	r3, #31
 8000942:	dc00      	bgt.n	8000946 <__aeabi_dadd+0x2ca>
 8000944:	e6f7      	b.n	8000736 <__aeabi_dadd+0xba>
 8000946:	0022      	movs	r2, r4
 8000948:	3808      	subs	r0, #8
 800094a:	4082      	lsls	r2, r0
 800094c:	2400      	movs	r4, #0
 800094e:	42b3      	cmp	r3, r6
 8000950:	db00      	blt.n	8000954 <__aeabi_dadd+0x2d8>
 8000952:	e6fc      	b.n	800074e <__aeabi_dadd+0xd2>
 8000954:	1af6      	subs	r6, r6, r3
 8000956:	4b25      	ldr	r3, [pc, #148]	; (80009ec <__aeabi_dadd+0x370>)
 8000958:	401a      	ands	r2, r3
 800095a:	4692      	mov	sl, r2
 800095c:	e70a      	b.n	8000774 <__aeabi_dadd+0xf8>
 800095e:	2f00      	cmp	r7, #0
 8000960:	d02b      	beq.n	80009ba <__aeabi_dadd+0x33e>
 8000962:	1b97      	subs	r7, r2, r6
 8000964:	2e00      	cmp	r6, #0
 8000966:	d100      	bne.n	800096a <__aeabi_dadd+0x2ee>
 8000968:	e0b8      	b.n	8000adc <__aeabi_dadd+0x460>
 800096a:	4c1f      	ldr	r4, [pc, #124]	; (80009e8 <__aeabi_dadd+0x36c>)
 800096c:	42a2      	cmp	r2, r4
 800096e:	d100      	bne.n	8000972 <__aeabi_dadd+0x2f6>
 8000970:	e11c      	b.n	8000bac <__aeabi_dadd+0x530>
 8000972:	2480      	movs	r4, #128	; 0x80
 8000974:	0424      	lsls	r4, r4, #16
 8000976:	4321      	orrs	r1, r4
 8000978:	2f38      	cmp	r7, #56	; 0x38
 800097a:	dd00      	ble.n	800097e <__aeabi_dadd+0x302>
 800097c:	e11e      	b.n	8000bbc <__aeabi_dadd+0x540>
 800097e:	2f1f      	cmp	r7, #31
 8000980:	dd00      	ble.n	8000984 <__aeabi_dadd+0x308>
 8000982:	e19e      	b.n	8000cc2 <__aeabi_dadd+0x646>
 8000984:	2620      	movs	r6, #32
 8000986:	000c      	movs	r4, r1
 8000988:	1bf6      	subs	r6, r6, r7
 800098a:	0018      	movs	r0, r3
 800098c:	40b3      	lsls	r3, r6
 800098e:	40b4      	lsls	r4, r6
 8000990:	40f8      	lsrs	r0, r7
 8000992:	1e5e      	subs	r6, r3, #1
 8000994:	41b3      	sbcs	r3, r6
 8000996:	40f9      	lsrs	r1, r7
 8000998:	4304      	orrs	r4, r0
 800099a:	431c      	orrs	r4, r3
 800099c:	4489      	add	r9, r1
 800099e:	4444      	add	r4, r8
 80009a0:	4544      	cmp	r4, r8
 80009a2:	419b      	sbcs	r3, r3
 80009a4:	425b      	negs	r3, r3
 80009a6:	444b      	add	r3, r9
 80009a8:	469a      	mov	sl, r3
 80009aa:	0016      	movs	r6, r2
 80009ac:	e7a8      	b.n	8000900 <__aeabi_dadd+0x284>
 80009ae:	4642      	mov	r2, r8
 80009b0:	464c      	mov	r4, r9
 80009b2:	4314      	orrs	r4, r2
 80009b4:	1e62      	subs	r2, r4, #1
 80009b6:	4194      	sbcs	r4, r2
 80009b8:	e6a6      	b.n	8000708 <__aeabi_dadd+0x8c>
 80009ba:	4c0d      	ldr	r4, [pc, #52]	; (80009f0 <__aeabi_dadd+0x374>)
 80009bc:	1c72      	adds	r2, r6, #1
 80009be:	4222      	tst	r2, r4
 80009c0:	d000      	beq.n	80009c4 <__aeabi_dadd+0x348>
 80009c2:	e0a8      	b.n	8000b16 <__aeabi_dadd+0x49a>
 80009c4:	000a      	movs	r2, r1
 80009c6:	431a      	orrs	r2, r3
 80009c8:	2e00      	cmp	r6, #0
 80009ca:	d000      	beq.n	80009ce <__aeabi_dadd+0x352>
 80009cc:	e10a      	b.n	8000be4 <__aeabi_dadd+0x568>
 80009ce:	2a00      	cmp	r2, #0
 80009d0:	d100      	bne.n	80009d4 <__aeabi_dadd+0x358>
 80009d2:	e15e      	b.n	8000c92 <__aeabi_dadd+0x616>
 80009d4:	464a      	mov	r2, r9
 80009d6:	4302      	orrs	r2, r0
 80009d8:	d000      	beq.n	80009dc <__aeabi_dadd+0x360>
 80009da:	e161      	b.n	8000ca0 <__aeabi_dadd+0x624>
 80009dc:	074a      	lsls	r2, r1, #29
 80009de:	08db      	lsrs	r3, r3, #3
 80009e0:	4313      	orrs	r3, r2
 80009e2:	08c9      	lsrs	r1, r1, #3
 80009e4:	e77c      	b.n	80008e0 <__aeabi_dadd+0x264>
 80009e6:	46c0      	nop			; (mov r8, r8)
 80009e8:	000007ff 	.word	0x000007ff
 80009ec:	ff7fffff 	.word	0xff7fffff
 80009f0:	000007fe 	.word	0x000007fe
 80009f4:	4ccf      	ldr	r4, [pc, #828]	; (8000d34 <__aeabi_dadd+0x6b8>)
 80009f6:	42a2      	cmp	r2, r4
 80009f8:	d100      	bne.n	80009fc <__aeabi_dadd+0x380>
 80009fa:	e0ce      	b.n	8000b9a <__aeabi_dadd+0x51e>
 80009fc:	2480      	movs	r4, #128	; 0x80
 80009fe:	0424      	lsls	r4, r4, #16
 8000a00:	4321      	orrs	r1, r4
 8000a02:	2f38      	cmp	r7, #56	; 0x38
 8000a04:	dc5b      	bgt.n	8000abe <__aeabi_dadd+0x442>
 8000a06:	2f1f      	cmp	r7, #31
 8000a08:	dd00      	ble.n	8000a0c <__aeabi_dadd+0x390>
 8000a0a:	e0dc      	b.n	8000bc6 <__aeabi_dadd+0x54a>
 8000a0c:	2520      	movs	r5, #32
 8000a0e:	000c      	movs	r4, r1
 8000a10:	1bed      	subs	r5, r5, r7
 8000a12:	001e      	movs	r6, r3
 8000a14:	40ab      	lsls	r3, r5
 8000a16:	40ac      	lsls	r4, r5
 8000a18:	40fe      	lsrs	r6, r7
 8000a1a:	1e5d      	subs	r5, r3, #1
 8000a1c:	41ab      	sbcs	r3, r5
 8000a1e:	4334      	orrs	r4, r6
 8000a20:	40f9      	lsrs	r1, r7
 8000a22:	431c      	orrs	r4, r3
 8000a24:	464b      	mov	r3, r9
 8000a26:	1a5b      	subs	r3, r3, r1
 8000a28:	4699      	mov	r9, r3
 8000a2a:	e04c      	b.n	8000ac6 <__aeabi_dadd+0x44a>
 8000a2c:	464a      	mov	r2, r9
 8000a2e:	1a1c      	subs	r4, r3, r0
 8000a30:	1a88      	subs	r0, r1, r2
 8000a32:	42a3      	cmp	r3, r4
 8000a34:	4192      	sbcs	r2, r2
 8000a36:	4252      	negs	r2, r2
 8000a38:	4692      	mov	sl, r2
 8000a3a:	0002      	movs	r2, r0
 8000a3c:	4650      	mov	r0, sl
 8000a3e:	1a12      	subs	r2, r2, r0
 8000a40:	4692      	mov	sl, r2
 8000a42:	0212      	lsls	r2, r2, #8
 8000a44:	d478      	bmi.n	8000b38 <__aeabi_dadd+0x4bc>
 8000a46:	4653      	mov	r3, sl
 8000a48:	4323      	orrs	r3, r4
 8000a4a:	d000      	beq.n	8000a4e <__aeabi_dadd+0x3d2>
 8000a4c:	e66a      	b.n	8000724 <__aeabi_dadd+0xa8>
 8000a4e:	2100      	movs	r1, #0
 8000a50:	2500      	movs	r5, #0
 8000a52:	e745      	b.n	80008e0 <__aeabi_dadd+0x264>
 8000a54:	074a      	lsls	r2, r1, #29
 8000a56:	08db      	lsrs	r3, r3, #3
 8000a58:	4313      	orrs	r3, r2
 8000a5a:	08c9      	lsrs	r1, r1, #3
 8000a5c:	e73d      	b.n	80008da <__aeabi_dadd+0x25e>
 8000a5e:	181c      	adds	r4, r3, r0
 8000a60:	429c      	cmp	r4, r3
 8000a62:	419b      	sbcs	r3, r3
 8000a64:	4449      	add	r1, r9
 8000a66:	468a      	mov	sl, r1
 8000a68:	425b      	negs	r3, r3
 8000a6a:	449a      	add	sl, r3
 8000a6c:	4653      	mov	r3, sl
 8000a6e:	2601      	movs	r6, #1
 8000a70:	021b      	lsls	r3, r3, #8
 8000a72:	d400      	bmi.n	8000a76 <__aeabi_dadd+0x3fa>
 8000a74:	e727      	b.n	80008c6 <__aeabi_dadd+0x24a>
 8000a76:	2602      	movs	r6, #2
 8000a78:	4652      	mov	r2, sl
 8000a7a:	4baf      	ldr	r3, [pc, #700]	; (8000d38 <__aeabi_dadd+0x6bc>)
 8000a7c:	2101      	movs	r1, #1
 8000a7e:	401a      	ands	r2, r3
 8000a80:	0013      	movs	r3, r2
 8000a82:	4021      	ands	r1, r4
 8000a84:	0862      	lsrs	r2, r4, #1
 8000a86:	430a      	orrs	r2, r1
 8000a88:	07dc      	lsls	r4, r3, #31
 8000a8a:	085b      	lsrs	r3, r3, #1
 8000a8c:	469a      	mov	sl, r3
 8000a8e:	4314      	orrs	r4, r2
 8000a90:	e670      	b.n	8000774 <__aeabi_dadd+0xf8>
 8000a92:	003a      	movs	r2, r7
 8000a94:	464c      	mov	r4, r9
 8000a96:	3a20      	subs	r2, #32
 8000a98:	40d4      	lsrs	r4, r2
 8000a9a:	46a4      	mov	ip, r4
 8000a9c:	2f20      	cmp	r7, #32
 8000a9e:	d007      	beq.n	8000ab0 <__aeabi_dadd+0x434>
 8000aa0:	2240      	movs	r2, #64	; 0x40
 8000aa2:	4648      	mov	r0, r9
 8000aa4:	1bd2      	subs	r2, r2, r7
 8000aa6:	4090      	lsls	r0, r2
 8000aa8:	0002      	movs	r2, r0
 8000aaa:	4640      	mov	r0, r8
 8000aac:	4310      	orrs	r0, r2
 8000aae:	4680      	mov	r8, r0
 8000ab0:	4640      	mov	r0, r8
 8000ab2:	1e42      	subs	r2, r0, #1
 8000ab4:	4190      	sbcs	r0, r2
 8000ab6:	4662      	mov	r2, ip
 8000ab8:	0004      	movs	r4, r0
 8000aba:	4314      	orrs	r4, r2
 8000abc:	e624      	b.n	8000708 <__aeabi_dadd+0x8c>
 8000abe:	4319      	orrs	r1, r3
 8000ac0:	000c      	movs	r4, r1
 8000ac2:	1e63      	subs	r3, r4, #1
 8000ac4:	419c      	sbcs	r4, r3
 8000ac6:	4643      	mov	r3, r8
 8000ac8:	1b1c      	subs	r4, r3, r4
 8000aca:	45a0      	cmp	r8, r4
 8000acc:	419b      	sbcs	r3, r3
 8000ace:	4649      	mov	r1, r9
 8000ad0:	425b      	negs	r3, r3
 8000ad2:	1acb      	subs	r3, r1, r3
 8000ad4:	469a      	mov	sl, r3
 8000ad6:	4665      	mov	r5, ip
 8000ad8:	0016      	movs	r6, r2
 8000ada:	e61b      	b.n	8000714 <__aeabi_dadd+0x98>
 8000adc:	000c      	movs	r4, r1
 8000ade:	431c      	orrs	r4, r3
 8000ae0:	d100      	bne.n	8000ae4 <__aeabi_dadd+0x468>
 8000ae2:	e0c7      	b.n	8000c74 <__aeabi_dadd+0x5f8>
 8000ae4:	1e7c      	subs	r4, r7, #1
 8000ae6:	2f01      	cmp	r7, #1
 8000ae8:	d100      	bne.n	8000aec <__aeabi_dadd+0x470>
 8000aea:	e0f9      	b.n	8000ce0 <__aeabi_dadd+0x664>
 8000aec:	4e91      	ldr	r6, [pc, #580]	; (8000d34 <__aeabi_dadd+0x6b8>)
 8000aee:	42b7      	cmp	r7, r6
 8000af0:	d05c      	beq.n	8000bac <__aeabi_dadd+0x530>
 8000af2:	0027      	movs	r7, r4
 8000af4:	e740      	b.n	8000978 <__aeabi_dadd+0x2fc>
 8000af6:	2220      	movs	r2, #32
 8000af8:	464c      	mov	r4, r9
 8000afa:	4640      	mov	r0, r8
 8000afc:	1bd2      	subs	r2, r2, r7
 8000afe:	4094      	lsls	r4, r2
 8000b00:	40f8      	lsrs	r0, r7
 8000b02:	4304      	orrs	r4, r0
 8000b04:	4640      	mov	r0, r8
 8000b06:	4090      	lsls	r0, r2
 8000b08:	1e42      	subs	r2, r0, #1
 8000b0a:	4190      	sbcs	r0, r2
 8000b0c:	464a      	mov	r2, r9
 8000b0e:	40fa      	lsrs	r2, r7
 8000b10:	4304      	orrs	r4, r0
 8000b12:	1889      	adds	r1, r1, r2
 8000b14:	e6ee      	b.n	80008f4 <__aeabi_dadd+0x278>
 8000b16:	4c87      	ldr	r4, [pc, #540]	; (8000d34 <__aeabi_dadd+0x6b8>)
 8000b18:	42a2      	cmp	r2, r4
 8000b1a:	d100      	bne.n	8000b1e <__aeabi_dadd+0x4a2>
 8000b1c:	e6f9      	b.n	8000912 <__aeabi_dadd+0x296>
 8000b1e:	1818      	adds	r0, r3, r0
 8000b20:	4298      	cmp	r0, r3
 8000b22:	419b      	sbcs	r3, r3
 8000b24:	4449      	add	r1, r9
 8000b26:	425b      	negs	r3, r3
 8000b28:	18cb      	adds	r3, r1, r3
 8000b2a:	07dc      	lsls	r4, r3, #31
 8000b2c:	0840      	lsrs	r0, r0, #1
 8000b2e:	085b      	lsrs	r3, r3, #1
 8000b30:	469a      	mov	sl, r3
 8000b32:	0016      	movs	r6, r2
 8000b34:	4304      	orrs	r4, r0
 8000b36:	e6c6      	b.n	80008c6 <__aeabi_dadd+0x24a>
 8000b38:	4642      	mov	r2, r8
 8000b3a:	1ad4      	subs	r4, r2, r3
 8000b3c:	45a0      	cmp	r8, r4
 8000b3e:	4180      	sbcs	r0, r0
 8000b40:	464b      	mov	r3, r9
 8000b42:	4240      	negs	r0, r0
 8000b44:	1a59      	subs	r1, r3, r1
 8000b46:	1a0b      	subs	r3, r1, r0
 8000b48:	469a      	mov	sl, r3
 8000b4a:	4665      	mov	r5, ip
 8000b4c:	e5ea      	b.n	8000724 <__aeabi_dadd+0xa8>
 8000b4e:	464b      	mov	r3, r9
 8000b50:	464a      	mov	r2, r9
 8000b52:	08c0      	lsrs	r0, r0, #3
 8000b54:	075b      	lsls	r3, r3, #29
 8000b56:	4665      	mov	r5, ip
 8000b58:	4303      	orrs	r3, r0
 8000b5a:	08d1      	lsrs	r1, r2, #3
 8000b5c:	e6bd      	b.n	80008da <__aeabi_dadd+0x25e>
 8000b5e:	2a00      	cmp	r2, #0
 8000b60:	d000      	beq.n	8000b64 <__aeabi_dadd+0x4e8>
 8000b62:	e08e      	b.n	8000c82 <__aeabi_dadd+0x606>
 8000b64:	464b      	mov	r3, r9
 8000b66:	4303      	orrs	r3, r0
 8000b68:	d117      	bne.n	8000b9a <__aeabi_dadd+0x51e>
 8000b6a:	2180      	movs	r1, #128	; 0x80
 8000b6c:	2500      	movs	r5, #0
 8000b6e:	0309      	lsls	r1, r1, #12
 8000b70:	e6da      	b.n	8000928 <__aeabi_dadd+0x2ac>
 8000b72:	074a      	lsls	r2, r1, #29
 8000b74:	08db      	lsrs	r3, r3, #3
 8000b76:	4313      	orrs	r3, r2
 8000b78:	08c9      	lsrs	r1, r1, #3
 8000b7a:	e6d1      	b.n	8000920 <__aeabi_dadd+0x2a4>
 8000b7c:	1a1c      	subs	r4, r3, r0
 8000b7e:	464a      	mov	r2, r9
 8000b80:	42a3      	cmp	r3, r4
 8000b82:	419b      	sbcs	r3, r3
 8000b84:	1a89      	subs	r1, r1, r2
 8000b86:	425b      	negs	r3, r3
 8000b88:	1acb      	subs	r3, r1, r3
 8000b8a:	469a      	mov	sl, r3
 8000b8c:	2601      	movs	r6, #1
 8000b8e:	e5c1      	b.n	8000714 <__aeabi_dadd+0x98>
 8000b90:	074a      	lsls	r2, r1, #29
 8000b92:	08db      	lsrs	r3, r3, #3
 8000b94:	4313      	orrs	r3, r2
 8000b96:	08c9      	lsrs	r1, r1, #3
 8000b98:	e69f      	b.n	80008da <__aeabi_dadd+0x25e>
 8000b9a:	4643      	mov	r3, r8
 8000b9c:	08d8      	lsrs	r0, r3, #3
 8000b9e:	464b      	mov	r3, r9
 8000ba0:	464a      	mov	r2, r9
 8000ba2:	075b      	lsls	r3, r3, #29
 8000ba4:	4665      	mov	r5, ip
 8000ba6:	4303      	orrs	r3, r0
 8000ba8:	08d1      	lsrs	r1, r2, #3
 8000baa:	e6b9      	b.n	8000920 <__aeabi_dadd+0x2a4>
 8000bac:	4643      	mov	r3, r8
 8000bae:	08d8      	lsrs	r0, r3, #3
 8000bb0:	464b      	mov	r3, r9
 8000bb2:	464a      	mov	r2, r9
 8000bb4:	075b      	lsls	r3, r3, #29
 8000bb6:	4303      	orrs	r3, r0
 8000bb8:	08d1      	lsrs	r1, r2, #3
 8000bba:	e6b1      	b.n	8000920 <__aeabi_dadd+0x2a4>
 8000bbc:	4319      	orrs	r1, r3
 8000bbe:	000c      	movs	r4, r1
 8000bc0:	1e63      	subs	r3, r4, #1
 8000bc2:	419c      	sbcs	r4, r3
 8000bc4:	e6eb      	b.n	800099e <__aeabi_dadd+0x322>
 8000bc6:	003c      	movs	r4, r7
 8000bc8:	000d      	movs	r5, r1
 8000bca:	3c20      	subs	r4, #32
 8000bcc:	40e5      	lsrs	r5, r4
 8000bce:	2f20      	cmp	r7, #32
 8000bd0:	d003      	beq.n	8000bda <__aeabi_dadd+0x55e>
 8000bd2:	2440      	movs	r4, #64	; 0x40
 8000bd4:	1be4      	subs	r4, r4, r7
 8000bd6:	40a1      	lsls	r1, r4
 8000bd8:	430b      	orrs	r3, r1
 8000bda:	001c      	movs	r4, r3
 8000bdc:	1e63      	subs	r3, r4, #1
 8000bde:	419c      	sbcs	r4, r3
 8000be0:	432c      	orrs	r4, r5
 8000be2:	e770      	b.n	8000ac6 <__aeabi_dadd+0x44a>
 8000be4:	2a00      	cmp	r2, #0
 8000be6:	d0e1      	beq.n	8000bac <__aeabi_dadd+0x530>
 8000be8:	464a      	mov	r2, r9
 8000bea:	4302      	orrs	r2, r0
 8000bec:	d0c1      	beq.n	8000b72 <__aeabi_dadd+0x4f6>
 8000bee:	074a      	lsls	r2, r1, #29
 8000bf0:	08db      	lsrs	r3, r3, #3
 8000bf2:	4313      	orrs	r3, r2
 8000bf4:	2280      	movs	r2, #128	; 0x80
 8000bf6:	08c9      	lsrs	r1, r1, #3
 8000bf8:	0312      	lsls	r2, r2, #12
 8000bfa:	4211      	tst	r1, r2
 8000bfc:	d008      	beq.n	8000c10 <__aeabi_dadd+0x594>
 8000bfe:	4648      	mov	r0, r9
 8000c00:	08c4      	lsrs	r4, r0, #3
 8000c02:	4214      	tst	r4, r2
 8000c04:	d104      	bne.n	8000c10 <__aeabi_dadd+0x594>
 8000c06:	4643      	mov	r3, r8
 8000c08:	0021      	movs	r1, r4
 8000c0a:	08db      	lsrs	r3, r3, #3
 8000c0c:	0742      	lsls	r2, r0, #29
 8000c0e:	4313      	orrs	r3, r2
 8000c10:	0f5a      	lsrs	r2, r3, #29
 8000c12:	00db      	lsls	r3, r3, #3
 8000c14:	0752      	lsls	r2, r2, #29
 8000c16:	08db      	lsrs	r3, r3, #3
 8000c18:	4313      	orrs	r3, r2
 8000c1a:	e681      	b.n	8000920 <__aeabi_dadd+0x2a4>
 8000c1c:	464b      	mov	r3, r9
 8000c1e:	4303      	orrs	r3, r0
 8000c20:	d100      	bne.n	8000c24 <__aeabi_dadd+0x5a8>
 8000c22:	e714      	b.n	8000a4e <__aeabi_dadd+0x3d2>
 8000c24:	464b      	mov	r3, r9
 8000c26:	464a      	mov	r2, r9
 8000c28:	08c0      	lsrs	r0, r0, #3
 8000c2a:	075b      	lsls	r3, r3, #29
 8000c2c:	4665      	mov	r5, ip
 8000c2e:	4303      	orrs	r3, r0
 8000c30:	08d1      	lsrs	r1, r2, #3
 8000c32:	e655      	b.n	80008e0 <__aeabi_dadd+0x264>
 8000c34:	1ac4      	subs	r4, r0, r3
 8000c36:	45a0      	cmp	r8, r4
 8000c38:	4180      	sbcs	r0, r0
 8000c3a:	464b      	mov	r3, r9
 8000c3c:	4240      	negs	r0, r0
 8000c3e:	1a59      	subs	r1, r3, r1
 8000c40:	1a0b      	subs	r3, r1, r0
 8000c42:	469a      	mov	sl, r3
 8000c44:	4665      	mov	r5, ip
 8000c46:	2601      	movs	r6, #1
 8000c48:	e564      	b.n	8000714 <__aeabi_dadd+0x98>
 8000c4a:	1a1c      	subs	r4, r3, r0
 8000c4c:	464a      	mov	r2, r9
 8000c4e:	42a3      	cmp	r3, r4
 8000c50:	4180      	sbcs	r0, r0
 8000c52:	1a8a      	subs	r2, r1, r2
 8000c54:	4240      	negs	r0, r0
 8000c56:	1a12      	subs	r2, r2, r0
 8000c58:	4692      	mov	sl, r2
 8000c5a:	0212      	lsls	r2, r2, #8
 8000c5c:	d549      	bpl.n	8000cf2 <__aeabi_dadd+0x676>
 8000c5e:	4642      	mov	r2, r8
 8000c60:	1ad4      	subs	r4, r2, r3
 8000c62:	45a0      	cmp	r8, r4
 8000c64:	4180      	sbcs	r0, r0
 8000c66:	464b      	mov	r3, r9
 8000c68:	4240      	negs	r0, r0
 8000c6a:	1a59      	subs	r1, r3, r1
 8000c6c:	1a0b      	subs	r3, r1, r0
 8000c6e:	469a      	mov	sl, r3
 8000c70:	4665      	mov	r5, ip
 8000c72:	e57f      	b.n	8000774 <__aeabi_dadd+0xf8>
 8000c74:	464b      	mov	r3, r9
 8000c76:	464a      	mov	r2, r9
 8000c78:	08c0      	lsrs	r0, r0, #3
 8000c7a:	075b      	lsls	r3, r3, #29
 8000c7c:	4303      	orrs	r3, r0
 8000c7e:	08d1      	lsrs	r1, r2, #3
 8000c80:	e62b      	b.n	80008da <__aeabi_dadd+0x25e>
 8000c82:	464a      	mov	r2, r9
 8000c84:	08db      	lsrs	r3, r3, #3
 8000c86:	4302      	orrs	r2, r0
 8000c88:	d138      	bne.n	8000cfc <__aeabi_dadd+0x680>
 8000c8a:	074a      	lsls	r2, r1, #29
 8000c8c:	4313      	orrs	r3, r2
 8000c8e:	08c9      	lsrs	r1, r1, #3
 8000c90:	e646      	b.n	8000920 <__aeabi_dadd+0x2a4>
 8000c92:	464b      	mov	r3, r9
 8000c94:	464a      	mov	r2, r9
 8000c96:	08c0      	lsrs	r0, r0, #3
 8000c98:	075b      	lsls	r3, r3, #29
 8000c9a:	4303      	orrs	r3, r0
 8000c9c:	08d1      	lsrs	r1, r2, #3
 8000c9e:	e61f      	b.n	80008e0 <__aeabi_dadd+0x264>
 8000ca0:	181c      	adds	r4, r3, r0
 8000ca2:	429c      	cmp	r4, r3
 8000ca4:	419b      	sbcs	r3, r3
 8000ca6:	4449      	add	r1, r9
 8000ca8:	468a      	mov	sl, r1
 8000caa:	425b      	negs	r3, r3
 8000cac:	449a      	add	sl, r3
 8000cae:	4653      	mov	r3, sl
 8000cb0:	021b      	lsls	r3, r3, #8
 8000cb2:	d400      	bmi.n	8000cb6 <__aeabi_dadd+0x63a>
 8000cb4:	e607      	b.n	80008c6 <__aeabi_dadd+0x24a>
 8000cb6:	4652      	mov	r2, sl
 8000cb8:	4b1f      	ldr	r3, [pc, #124]	; (8000d38 <__aeabi_dadd+0x6bc>)
 8000cba:	2601      	movs	r6, #1
 8000cbc:	401a      	ands	r2, r3
 8000cbe:	4692      	mov	sl, r2
 8000cc0:	e601      	b.n	80008c6 <__aeabi_dadd+0x24a>
 8000cc2:	003c      	movs	r4, r7
 8000cc4:	000e      	movs	r6, r1
 8000cc6:	3c20      	subs	r4, #32
 8000cc8:	40e6      	lsrs	r6, r4
 8000cca:	2f20      	cmp	r7, #32
 8000ccc:	d003      	beq.n	8000cd6 <__aeabi_dadd+0x65a>
 8000cce:	2440      	movs	r4, #64	; 0x40
 8000cd0:	1be4      	subs	r4, r4, r7
 8000cd2:	40a1      	lsls	r1, r4
 8000cd4:	430b      	orrs	r3, r1
 8000cd6:	001c      	movs	r4, r3
 8000cd8:	1e63      	subs	r3, r4, #1
 8000cda:	419c      	sbcs	r4, r3
 8000cdc:	4334      	orrs	r4, r6
 8000cde:	e65e      	b.n	800099e <__aeabi_dadd+0x322>
 8000ce0:	4443      	add	r3, r8
 8000ce2:	4283      	cmp	r3, r0
 8000ce4:	4180      	sbcs	r0, r0
 8000ce6:	4449      	add	r1, r9
 8000ce8:	468a      	mov	sl, r1
 8000cea:	4240      	negs	r0, r0
 8000cec:	001c      	movs	r4, r3
 8000cee:	4482      	add	sl, r0
 8000cf0:	e6bc      	b.n	8000a6c <__aeabi_dadd+0x3f0>
 8000cf2:	4653      	mov	r3, sl
 8000cf4:	4323      	orrs	r3, r4
 8000cf6:	d100      	bne.n	8000cfa <__aeabi_dadd+0x67e>
 8000cf8:	e6a9      	b.n	8000a4e <__aeabi_dadd+0x3d2>
 8000cfa:	e5e4      	b.n	80008c6 <__aeabi_dadd+0x24a>
 8000cfc:	074a      	lsls	r2, r1, #29
 8000cfe:	4313      	orrs	r3, r2
 8000d00:	2280      	movs	r2, #128	; 0x80
 8000d02:	08c9      	lsrs	r1, r1, #3
 8000d04:	0312      	lsls	r2, r2, #12
 8000d06:	4211      	tst	r1, r2
 8000d08:	d009      	beq.n	8000d1e <__aeabi_dadd+0x6a2>
 8000d0a:	4648      	mov	r0, r9
 8000d0c:	08c4      	lsrs	r4, r0, #3
 8000d0e:	4214      	tst	r4, r2
 8000d10:	d105      	bne.n	8000d1e <__aeabi_dadd+0x6a2>
 8000d12:	4643      	mov	r3, r8
 8000d14:	4665      	mov	r5, ip
 8000d16:	0021      	movs	r1, r4
 8000d18:	08db      	lsrs	r3, r3, #3
 8000d1a:	0742      	lsls	r2, r0, #29
 8000d1c:	4313      	orrs	r3, r2
 8000d1e:	0f5a      	lsrs	r2, r3, #29
 8000d20:	00db      	lsls	r3, r3, #3
 8000d22:	08db      	lsrs	r3, r3, #3
 8000d24:	0752      	lsls	r2, r2, #29
 8000d26:	4313      	orrs	r3, r2
 8000d28:	e5fa      	b.n	8000920 <__aeabi_dadd+0x2a4>
 8000d2a:	2300      	movs	r3, #0
 8000d2c:	4a01      	ldr	r2, [pc, #4]	; (8000d34 <__aeabi_dadd+0x6b8>)
 8000d2e:	001c      	movs	r4, r3
 8000d30:	e540      	b.n	80007b4 <__aeabi_dadd+0x138>
 8000d32:	46c0      	nop			; (mov r8, r8)
 8000d34:	000007ff 	.word	0x000007ff
 8000d38:	ff7fffff 	.word	0xff7fffff

08000d3c <__aeabi_ddiv>:
 8000d3c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000d3e:	4657      	mov	r7, sl
 8000d40:	464e      	mov	r6, r9
 8000d42:	4645      	mov	r5, r8
 8000d44:	46de      	mov	lr, fp
 8000d46:	b5e0      	push	{r5, r6, r7, lr}
 8000d48:	030c      	lsls	r4, r1, #12
 8000d4a:	001f      	movs	r7, r3
 8000d4c:	004b      	lsls	r3, r1, #1
 8000d4e:	4681      	mov	r9, r0
 8000d50:	4692      	mov	sl, r2
 8000d52:	0005      	movs	r5, r0
 8000d54:	b085      	sub	sp, #20
 8000d56:	0b24      	lsrs	r4, r4, #12
 8000d58:	0d5b      	lsrs	r3, r3, #21
 8000d5a:	0fce      	lsrs	r6, r1, #31
 8000d5c:	2b00      	cmp	r3, #0
 8000d5e:	d100      	bne.n	8000d62 <__aeabi_ddiv+0x26>
 8000d60:	e152      	b.n	8001008 <__aeabi_ddiv+0x2cc>
 8000d62:	4ad2      	ldr	r2, [pc, #840]	; (80010ac <__aeabi_ddiv+0x370>)
 8000d64:	4293      	cmp	r3, r2
 8000d66:	d100      	bne.n	8000d6a <__aeabi_ddiv+0x2e>
 8000d68:	e16e      	b.n	8001048 <__aeabi_ddiv+0x30c>
 8000d6a:	0f42      	lsrs	r2, r0, #29
 8000d6c:	00e4      	lsls	r4, r4, #3
 8000d6e:	4314      	orrs	r4, r2
 8000d70:	2280      	movs	r2, #128	; 0x80
 8000d72:	0412      	lsls	r2, r2, #16
 8000d74:	4322      	orrs	r2, r4
 8000d76:	4690      	mov	r8, r2
 8000d78:	4acd      	ldr	r2, [pc, #820]	; (80010b0 <__aeabi_ddiv+0x374>)
 8000d7a:	00c5      	lsls	r5, r0, #3
 8000d7c:	4693      	mov	fp, r2
 8000d7e:	449b      	add	fp, r3
 8000d80:	2300      	movs	r3, #0
 8000d82:	4699      	mov	r9, r3
 8000d84:	9300      	str	r3, [sp, #0]
 8000d86:	033c      	lsls	r4, r7, #12
 8000d88:	007b      	lsls	r3, r7, #1
 8000d8a:	4650      	mov	r0, sl
 8000d8c:	0b24      	lsrs	r4, r4, #12
 8000d8e:	0d5b      	lsrs	r3, r3, #21
 8000d90:	0fff      	lsrs	r7, r7, #31
 8000d92:	2b00      	cmp	r3, #0
 8000d94:	d100      	bne.n	8000d98 <__aeabi_ddiv+0x5c>
 8000d96:	e11a      	b.n	8000fce <__aeabi_ddiv+0x292>
 8000d98:	4ac4      	ldr	r2, [pc, #784]	; (80010ac <__aeabi_ddiv+0x370>)
 8000d9a:	4293      	cmp	r3, r2
 8000d9c:	d100      	bne.n	8000da0 <__aeabi_ddiv+0x64>
 8000d9e:	e15e      	b.n	800105e <__aeabi_ddiv+0x322>
 8000da0:	0f42      	lsrs	r2, r0, #29
 8000da2:	00e4      	lsls	r4, r4, #3
 8000da4:	4322      	orrs	r2, r4
 8000da6:	2480      	movs	r4, #128	; 0x80
 8000da8:	0424      	lsls	r4, r4, #16
 8000daa:	4314      	orrs	r4, r2
 8000dac:	4ac0      	ldr	r2, [pc, #768]	; (80010b0 <__aeabi_ddiv+0x374>)
 8000dae:	00c1      	lsls	r1, r0, #3
 8000db0:	4694      	mov	ip, r2
 8000db2:	465a      	mov	r2, fp
 8000db4:	4463      	add	r3, ip
 8000db6:	1ad3      	subs	r3, r2, r3
 8000db8:	469b      	mov	fp, r3
 8000dba:	2000      	movs	r0, #0
 8000dbc:	0033      	movs	r3, r6
 8000dbe:	407b      	eors	r3, r7
 8000dc0:	469a      	mov	sl, r3
 8000dc2:	464b      	mov	r3, r9
 8000dc4:	2b0f      	cmp	r3, #15
 8000dc6:	d827      	bhi.n	8000e18 <__aeabi_ddiv+0xdc>
 8000dc8:	4aba      	ldr	r2, [pc, #744]	; (80010b4 <__aeabi_ddiv+0x378>)
 8000dca:	009b      	lsls	r3, r3, #2
 8000dcc:	58d3      	ldr	r3, [r2, r3]
 8000dce:	469f      	mov	pc, r3
 8000dd0:	46b2      	mov	sl, r6
 8000dd2:	9b00      	ldr	r3, [sp, #0]
 8000dd4:	2b02      	cmp	r3, #2
 8000dd6:	d016      	beq.n	8000e06 <__aeabi_ddiv+0xca>
 8000dd8:	2b03      	cmp	r3, #3
 8000dda:	d100      	bne.n	8000dde <__aeabi_ddiv+0xa2>
 8000ddc:	e287      	b.n	80012ee <__aeabi_ddiv+0x5b2>
 8000dde:	2b01      	cmp	r3, #1
 8000de0:	d000      	beq.n	8000de4 <__aeabi_ddiv+0xa8>
 8000de2:	e0d5      	b.n	8000f90 <__aeabi_ddiv+0x254>
 8000de4:	2300      	movs	r3, #0
 8000de6:	2200      	movs	r2, #0
 8000de8:	2500      	movs	r5, #0
 8000dea:	051b      	lsls	r3, r3, #20
 8000dec:	4313      	orrs	r3, r2
 8000dee:	4652      	mov	r2, sl
 8000df0:	07d2      	lsls	r2, r2, #31
 8000df2:	4313      	orrs	r3, r2
 8000df4:	0028      	movs	r0, r5
 8000df6:	0019      	movs	r1, r3
 8000df8:	b005      	add	sp, #20
 8000dfa:	bcf0      	pop	{r4, r5, r6, r7}
 8000dfc:	46bb      	mov	fp, r7
 8000dfe:	46b2      	mov	sl, r6
 8000e00:	46a9      	mov	r9, r5
 8000e02:	46a0      	mov	r8, r4
 8000e04:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000e06:	2200      	movs	r2, #0
 8000e08:	2500      	movs	r5, #0
 8000e0a:	4ba8      	ldr	r3, [pc, #672]	; (80010ac <__aeabi_ddiv+0x370>)
 8000e0c:	e7ed      	b.n	8000dea <__aeabi_ddiv+0xae>
 8000e0e:	46ba      	mov	sl, r7
 8000e10:	46a0      	mov	r8, r4
 8000e12:	000d      	movs	r5, r1
 8000e14:	9000      	str	r0, [sp, #0]
 8000e16:	e7dc      	b.n	8000dd2 <__aeabi_ddiv+0x96>
 8000e18:	4544      	cmp	r4, r8
 8000e1a:	d200      	bcs.n	8000e1e <__aeabi_ddiv+0xe2>
 8000e1c:	e1c4      	b.n	80011a8 <__aeabi_ddiv+0x46c>
 8000e1e:	d100      	bne.n	8000e22 <__aeabi_ddiv+0xe6>
 8000e20:	e1bf      	b.n	80011a2 <__aeabi_ddiv+0x466>
 8000e22:	2301      	movs	r3, #1
 8000e24:	425b      	negs	r3, r3
 8000e26:	469c      	mov	ip, r3
 8000e28:	002e      	movs	r6, r5
 8000e2a:	4640      	mov	r0, r8
 8000e2c:	2500      	movs	r5, #0
 8000e2e:	44e3      	add	fp, ip
 8000e30:	0223      	lsls	r3, r4, #8
 8000e32:	0e0c      	lsrs	r4, r1, #24
 8000e34:	431c      	orrs	r4, r3
 8000e36:	0c1b      	lsrs	r3, r3, #16
 8000e38:	4699      	mov	r9, r3
 8000e3a:	0423      	lsls	r3, r4, #16
 8000e3c:	020a      	lsls	r2, r1, #8
 8000e3e:	0c1f      	lsrs	r7, r3, #16
 8000e40:	4649      	mov	r1, r9
 8000e42:	9200      	str	r2, [sp, #0]
 8000e44:	9701      	str	r7, [sp, #4]
 8000e46:	f7ff f9ff 	bl	8000248 <__aeabi_uidivmod>
 8000e4a:	0002      	movs	r2, r0
 8000e4c:	437a      	muls	r2, r7
 8000e4e:	040b      	lsls	r3, r1, #16
 8000e50:	0c31      	lsrs	r1, r6, #16
 8000e52:	4680      	mov	r8, r0
 8000e54:	4319      	orrs	r1, r3
 8000e56:	428a      	cmp	r2, r1
 8000e58:	d907      	bls.n	8000e6a <__aeabi_ddiv+0x12e>
 8000e5a:	2301      	movs	r3, #1
 8000e5c:	425b      	negs	r3, r3
 8000e5e:	469c      	mov	ip, r3
 8000e60:	1909      	adds	r1, r1, r4
 8000e62:	44e0      	add	r8, ip
 8000e64:	428c      	cmp	r4, r1
 8000e66:	d800      	bhi.n	8000e6a <__aeabi_ddiv+0x12e>
 8000e68:	e201      	b.n	800126e <__aeabi_ddiv+0x532>
 8000e6a:	1a88      	subs	r0, r1, r2
 8000e6c:	4649      	mov	r1, r9
 8000e6e:	f7ff f9eb 	bl	8000248 <__aeabi_uidivmod>
 8000e72:	9a01      	ldr	r2, [sp, #4]
 8000e74:	0436      	lsls	r6, r6, #16
 8000e76:	4342      	muls	r2, r0
 8000e78:	0409      	lsls	r1, r1, #16
 8000e7a:	0c36      	lsrs	r6, r6, #16
 8000e7c:	0003      	movs	r3, r0
 8000e7e:	430e      	orrs	r6, r1
 8000e80:	42b2      	cmp	r2, r6
 8000e82:	d904      	bls.n	8000e8e <__aeabi_ddiv+0x152>
 8000e84:	1936      	adds	r6, r6, r4
 8000e86:	3b01      	subs	r3, #1
 8000e88:	42b4      	cmp	r4, r6
 8000e8a:	d800      	bhi.n	8000e8e <__aeabi_ddiv+0x152>
 8000e8c:	e1e9      	b.n	8001262 <__aeabi_ddiv+0x526>
 8000e8e:	1ab0      	subs	r0, r6, r2
 8000e90:	4642      	mov	r2, r8
 8000e92:	9e00      	ldr	r6, [sp, #0]
 8000e94:	0412      	lsls	r2, r2, #16
 8000e96:	431a      	orrs	r2, r3
 8000e98:	0c33      	lsrs	r3, r6, #16
 8000e9a:	001f      	movs	r7, r3
 8000e9c:	0c11      	lsrs	r1, r2, #16
 8000e9e:	4690      	mov	r8, r2
 8000ea0:	9302      	str	r3, [sp, #8]
 8000ea2:	0413      	lsls	r3, r2, #16
 8000ea4:	0432      	lsls	r2, r6, #16
 8000ea6:	0c16      	lsrs	r6, r2, #16
 8000ea8:	0032      	movs	r2, r6
 8000eaa:	0c1b      	lsrs	r3, r3, #16
 8000eac:	435a      	muls	r2, r3
 8000eae:	9603      	str	r6, [sp, #12]
 8000eb0:	437b      	muls	r3, r7
 8000eb2:	434e      	muls	r6, r1
 8000eb4:	4379      	muls	r1, r7
 8000eb6:	0c17      	lsrs	r7, r2, #16
 8000eb8:	46bc      	mov	ip, r7
 8000eba:	199b      	adds	r3, r3, r6
 8000ebc:	4463      	add	r3, ip
 8000ebe:	429e      	cmp	r6, r3
 8000ec0:	d903      	bls.n	8000eca <__aeabi_ddiv+0x18e>
 8000ec2:	2680      	movs	r6, #128	; 0x80
 8000ec4:	0276      	lsls	r6, r6, #9
 8000ec6:	46b4      	mov	ip, r6
 8000ec8:	4461      	add	r1, ip
 8000eca:	0c1e      	lsrs	r6, r3, #16
 8000ecc:	1871      	adds	r1, r6, r1
 8000ece:	0416      	lsls	r6, r2, #16
 8000ed0:	041b      	lsls	r3, r3, #16
 8000ed2:	0c36      	lsrs	r6, r6, #16
 8000ed4:	199e      	adds	r6, r3, r6
 8000ed6:	4288      	cmp	r0, r1
 8000ed8:	d302      	bcc.n	8000ee0 <__aeabi_ddiv+0x1a4>
 8000eda:	d112      	bne.n	8000f02 <__aeabi_ddiv+0x1c6>
 8000edc:	42b5      	cmp	r5, r6
 8000ede:	d210      	bcs.n	8000f02 <__aeabi_ddiv+0x1c6>
 8000ee0:	4643      	mov	r3, r8
 8000ee2:	1e5a      	subs	r2, r3, #1
 8000ee4:	9b00      	ldr	r3, [sp, #0]
 8000ee6:	469c      	mov	ip, r3
 8000ee8:	4465      	add	r5, ip
 8000eea:	001f      	movs	r7, r3
 8000eec:	429d      	cmp	r5, r3
 8000eee:	419b      	sbcs	r3, r3
 8000ef0:	425b      	negs	r3, r3
 8000ef2:	191b      	adds	r3, r3, r4
 8000ef4:	18c0      	adds	r0, r0, r3
 8000ef6:	4284      	cmp	r4, r0
 8000ef8:	d200      	bcs.n	8000efc <__aeabi_ddiv+0x1c0>
 8000efa:	e19e      	b.n	800123a <__aeabi_ddiv+0x4fe>
 8000efc:	d100      	bne.n	8000f00 <__aeabi_ddiv+0x1c4>
 8000efe:	e199      	b.n	8001234 <__aeabi_ddiv+0x4f8>
 8000f00:	4690      	mov	r8, r2
 8000f02:	1bae      	subs	r6, r5, r6
 8000f04:	42b5      	cmp	r5, r6
 8000f06:	41ad      	sbcs	r5, r5
 8000f08:	1a40      	subs	r0, r0, r1
 8000f0a:	426d      	negs	r5, r5
 8000f0c:	1b40      	subs	r0, r0, r5
 8000f0e:	4284      	cmp	r4, r0
 8000f10:	d100      	bne.n	8000f14 <__aeabi_ddiv+0x1d8>
 8000f12:	e1d2      	b.n	80012ba <__aeabi_ddiv+0x57e>
 8000f14:	4649      	mov	r1, r9
 8000f16:	f7ff f997 	bl	8000248 <__aeabi_uidivmod>
 8000f1a:	9a01      	ldr	r2, [sp, #4]
 8000f1c:	040b      	lsls	r3, r1, #16
 8000f1e:	4342      	muls	r2, r0
 8000f20:	0c31      	lsrs	r1, r6, #16
 8000f22:	0005      	movs	r5, r0
 8000f24:	4319      	orrs	r1, r3
 8000f26:	428a      	cmp	r2, r1
 8000f28:	d900      	bls.n	8000f2c <__aeabi_ddiv+0x1f0>
 8000f2a:	e16c      	b.n	8001206 <__aeabi_ddiv+0x4ca>
 8000f2c:	1a88      	subs	r0, r1, r2
 8000f2e:	4649      	mov	r1, r9
 8000f30:	f7ff f98a 	bl	8000248 <__aeabi_uidivmod>
 8000f34:	9a01      	ldr	r2, [sp, #4]
 8000f36:	0436      	lsls	r6, r6, #16
 8000f38:	4342      	muls	r2, r0
 8000f3a:	0409      	lsls	r1, r1, #16
 8000f3c:	0c36      	lsrs	r6, r6, #16
 8000f3e:	0003      	movs	r3, r0
 8000f40:	430e      	orrs	r6, r1
 8000f42:	42b2      	cmp	r2, r6
 8000f44:	d900      	bls.n	8000f48 <__aeabi_ddiv+0x20c>
 8000f46:	e153      	b.n	80011f0 <__aeabi_ddiv+0x4b4>
 8000f48:	9803      	ldr	r0, [sp, #12]
 8000f4a:	1ab6      	subs	r6, r6, r2
 8000f4c:	0002      	movs	r2, r0
 8000f4e:	042d      	lsls	r5, r5, #16
 8000f50:	431d      	orrs	r5, r3
 8000f52:	9f02      	ldr	r7, [sp, #8]
 8000f54:	042b      	lsls	r3, r5, #16
 8000f56:	0c1b      	lsrs	r3, r3, #16
 8000f58:	435a      	muls	r2, r3
 8000f5a:	437b      	muls	r3, r7
 8000f5c:	469c      	mov	ip, r3
 8000f5e:	0c29      	lsrs	r1, r5, #16
 8000f60:	4348      	muls	r0, r1
 8000f62:	0c13      	lsrs	r3, r2, #16
 8000f64:	4484      	add	ip, r0
 8000f66:	4463      	add	r3, ip
 8000f68:	4379      	muls	r1, r7
 8000f6a:	4298      	cmp	r0, r3
 8000f6c:	d903      	bls.n	8000f76 <__aeabi_ddiv+0x23a>
 8000f6e:	2080      	movs	r0, #128	; 0x80
 8000f70:	0240      	lsls	r0, r0, #9
 8000f72:	4684      	mov	ip, r0
 8000f74:	4461      	add	r1, ip
 8000f76:	0c18      	lsrs	r0, r3, #16
 8000f78:	0412      	lsls	r2, r2, #16
 8000f7a:	041b      	lsls	r3, r3, #16
 8000f7c:	0c12      	lsrs	r2, r2, #16
 8000f7e:	1840      	adds	r0, r0, r1
 8000f80:	189b      	adds	r3, r3, r2
 8000f82:	4286      	cmp	r6, r0
 8000f84:	d200      	bcs.n	8000f88 <__aeabi_ddiv+0x24c>
 8000f86:	e100      	b.n	800118a <__aeabi_ddiv+0x44e>
 8000f88:	d100      	bne.n	8000f8c <__aeabi_ddiv+0x250>
 8000f8a:	e0fb      	b.n	8001184 <__aeabi_ddiv+0x448>
 8000f8c:	2301      	movs	r3, #1
 8000f8e:	431d      	orrs	r5, r3
 8000f90:	4b49      	ldr	r3, [pc, #292]	; (80010b8 <__aeabi_ddiv+0x37c>)
 8000f92:	445b      	add	r3, fp
 8000f94:	2b00      	cmp	r3, #0
 8000f96:	dc00      	bgt.n	8000f9a <__aeabi_ddiv+0x25e>
 8000f98:	e0aa      	b.n	80010f0 <__aeabi_ddiv+0x3b4>
 8000f9a:	076a      	lsls	r2, r5, #29
 8000f9c:	d000      	beq.n	8000fa0 <__aeabi_ddiv+0x264>
 8000f9e:	e13d      	b.n	800121c <__aeabi_ddiv+0x4e0>
 8000fa0:	08e9      	lsrs	r1, r5, #3
 8000fa2:	4642      	mov	r2, r8
 8000fa4:	01d2      	lsls	r2, r2, #7
 8000fa6:	d506      	bpl.n	8000fb6 <__aeabi_ddiv+0x27a>
 8000fa8:	4642      	mov	r2, r8
 8000faa:	4b44      	ldr	r3, [pc, #272]	; (80010bc <__aeabi_ddiv+0x380>)
 8000fac:	401a      	ands	r2, r3
 8000fae:	2380      	movs	r3, #128	; 0x80
 8000fb0:	4690      	mov	r8, r2
 8000fb2:	00db      	lsls	r3, r3, #3
 8000fb4:	445b      	add	r3, fp
 8000fb6:	4a42      	ldr	r2, [pc, #264]	; (80010c0 <__aeabi_ddiv+0x384>)
 8000fb8:	4293      	cmp	r3, r2
 8000fba:	dd00      	ble.n	8000fbe <__aeabi_ddiv+0x282>
 8000fbc:	e723      	b.n	8000e06 <__aeabi_ddiv+0xca>
 8000fbe:	4642      	mov	r2, r8
 8000fc0:	055b      	lsls	r3, r3, #21
 8000fc2:	0755      	lsls	r5, r2, #29
 8000fc4:	0252      	lsls	r2, r2, #9
 8000fc6:	430d      	orrs	r5, r1
 8000fc8:	0b12      	lsrs	r2, r2, #12
 8000fca:	0d5b      	lsrs	r3, r3, #21
 8000fcc:	e70d      	b.n	8000dea <__aeabi_ddiv+0xae>
 8000fce:	4651      	mov	r1, sl
 8000fd0:	4321      	orrs	r1, r4
 8000fd2:	d100      	bne.n	8000fd6 <__aeabi_ddiv+0x29a>
 8000fd4:	e07c      	b.n	80010d0 <__aeabi_ddiv+0x394>
 8000fd6:	2c00      	cmp	r4, #0
 8000fd8:	d100      	bne.n	8000fdc <__aeabi_ddiv+0x2a0>
 8000fda:	e0fb      	b.n	80011d4 <__aeabi_ddiv+0x498>
 8000fdc:	0020      	movs	r0, r4
 8000fde:	f001 f995 	bl	800230c <__clzsi2>
 8000fe2:	0002      	movs	r2, r0
 8000fe4:	3a0b      	subs	r2, #11
 8000fe6:	231d      	movs	r3, #29
 8000fe8:	1a9b      	subs	r3, r3, r2
 8000fea:	4652      	mov	r2, sl
 8000fec:	0001      	movs	r1, r0
 8000fee:	40da      	lsrs	r2, r3
 8000ff0:	4653      	mov	r3, sl
 8000ff2:	3908      	subs	r1, #8
 8000ff4:	408b      	lsls	r3, r1
 8000ff6:	408c      	lsls	r4, r1
 8000ff8:	0019      	movs	r1, r3
 8000ffa:	4314      	orrs	r4, r2
 8000ffc:	4b31      	ldr	r3, [pc, #196]	; (80010c4 <__aeabi_ddiv+0x388>)
 8000ffe:	4458      	add	r0, fp
 8001000:	469b      	mov	fp, r3
 8001002:	4483      	add	fp, r0
 8001004:	2000      	movs	r0, #0
 8001006:	e6d9      	b.n	8000dbc <__aeabi_ddiv+0x80>
 8001008:	0003      	movs	r3, r0
 800100a:	4323      	orrs	r3, r4
 800100c:	4698      	mov	r8, r3
 800100e:	d044      	beq.n	800109a <__aeabi_ddiv+0x35e>
 8001010:	2c00      	cmp	r4, #0
 8001012:	d100      	bne.n	8001016 <__aeabi_ddiv+0x2da>
 8001014:	e0cf      	b.n	80011b6 <__aeabi_ddiv+0x47a>
 8001016:	0020      	movs	r0, r4
 8001018:	f001 f978 	bl	800230c <__clzsi2>
 800101c:	0001      	movs	r1, r0
 800101e:	0002      	movs	r2, r0
 8001020:	390b      	subs	r1, #11
 8001022:	231d      	movs	r3, #29
 8001024:	1a5b      	subs	r3, r3, r1
 8001026:	4649      	mov	r1, r9
 8001028:	0010      	movs	r0, r2
 800102a:	40d9      	lsrs	r1, r3
 800102c:	3808      	subs	r0, #8
 800102e:	4084      	lsls	r4, r0
 8001030:	000b      	movs	r3, r1
 8001032:	464d      	mov	r5, r9
 8001034:	4323      	orrs	r3, r4
 8001036:	4698      	mov	r8, r3
 8001038:	4085      	lsls	r5, r0
 800103a:	4b23      	ldr	r3, [pc, #140]	; (80010c8 <__aeabi_ddiv+0x38c>)
 800103c:	1a9b      	subs	r3, r3, r2
 800103e:	469b      	mov	fp, r3
 8001040:	2300      	movs	r3, #0
 8001042:	4699      	mov	r9, r3
 8001044:	9300      	str	r3, [sp, #0]
 8001046:	e69e      	b.n	8000d86 <__aeabi_ddiv+0x4a>
 8001048:	0002      	movs	r2, r0
 800104a:	4322      	orrs	r2, r4
 800104c:	4690      	mov	r8, r2
 800104e:	d11d      	bne.n	800108c <__aeabi_ddiv+0x350>
 8001050:	2208      	movs	r2, #8
 8001052:	469b      	mov	fp, r3
 8001054:	2302      	movs	r3, #2
 8001056:	2500      	movs	r5, #0
 8001058:	4691      	mov	r9, r2
 800105a:	9300      	str	r3, [sp, #0]
 800105c:	e693      	b.n	8000d86 <__aeabi_ddiv+0x4a>
 800105e:	4651      	mov	r1, sl
 8001060:	4321      	orrs	r1, r4
 8001062:	d109      	bne.n	8001078 <__aeabi_ddiv+0x33c>
 8001064:	2302      	movs	r3, #2
 8001066:	464a      	mov	r2, r9
 8001068:	431a      	orrs	r2, r3
 800106a:	4b18      	ldr	r3, [pc, #96]	; (80010cc <__aeabi_ddiv+0x390>)
 800106c:	4691      	mov	r9, r2
 800106e:	469c      	mov	ip, r3
 8001070:	2400      	movs	r4, #0
 8001072:	2002      	movs	r0, #2
 8001074:	44e3      	add	fp, ip
 8001076:	e6a1      	b.n	8000dbc <__aeabi_ddiv+0x80>
 8001078:	2303      	movs	r3, #3
 800107a:	464a      	mov	r2, r9
 800107c:	431a      	orrs	r2, r3
 800107e:	4b13      	ldr	r3, [pc, #76]	; (80010cc <__aeabi_ddiv+0x390>)
 8001080:	4691      	mov	r9, r2
 8001082:	469c      	mov	ip, r3
 8001084:	4651      	mov	r1, sl
 8001086:	2003      	movs	r0, #3
 8001088:	44e3      	add	fp, ip
 800108a:	e697      	b.n	8000dbc <__aeabi_ddiv+0x80>
 800108c:	220c      	movs	r2, #12
 800108e:	469b      	mov	fp, r3
 8001090:	2303      	movs	r3, #3
 8001092:	46a0      	mov	r8, r4
 8001094:	4691      	mov	r9, r2
 8001096:	9300      	str	r3, [sp, #0]
 8001098:	e675      	b.n	8000d86 <__aeabi_ddiv+0x4a>
 800109a:	2304      	movs	r3, #4
 800109c:	4699      	mov	r9, r3
 800109e:	2300      	movs	r3, #0
 80010a0:	469b      	mov	fp, r3
 80010a2:	3301      	adds	r3, #1
 80010a4:	2500      	movs	r5, #0
 80010a6:	9300      	str	r3, [sp, #0]
 80010a8:	e66d      	b.n	8000d86 <__aeabi_ddiv+0x4a>
 80010aa:	46c0      	nop			; (mov r8, r8)
 80010ac:	000007ff 	.word	0x000007ff
 80010b0:	fffffc01 	.word	0xfffffc01
 80010b4:	0800db04 	.word	0x0800db04
 80010b8:	000003ff 	.word	0x000003ff
 80010bc:	feffffff 	.word	0xfeffffff
 80010c0:	000007fe 	.word	0x000007fe
 80010c4:	000003f3 	.word	0x000003f3
 80010c8:	fffffc0d 	.word	0xfffffc0d
 80010cc:	fffff801 	.word	0xfffff801
 80010d0:	464a      	mov	r2, r9
 80010d2:	2301      	movs	r3, #1
 80010d4:	431a      	orrs	r2, r3
 80010d6:	4691      	mov	r9, r2
 80010d8:	2400      	movs	r4, #0
 80010da:	2001      	movs	r0, #1
 80010dc:	e66e      	b.n	8000dbc <__aeabi_ddiv+0x80>
 80010de:	2300      	movs	r3, #0
 80010e0:	2280      	movs	r2, #128	; 0x80
 80010e2:	469a      	mov	sl, r3
 80010e4:	2500      	movs	r5, #0
 80010e6:	4b88      	ldr	r3, [pc, #544]	; (8001308 <__aeabi_ddiv+0x5cc>)
 80010e8:	0312      	lsls	r2, r2, #12
 80010ea:	e67e      	b.n	8000dea <__aeabi_ddiv+0xae>
 80010ec:	2501      	movs	r5, #1
 80010ee:	426d      	negs	r5, r5
 80010f0:	2201      	movs	r2, #1
 80010f2:	1ad2      	subs	r2, r2, r3
 80010f4:	2a38      	cmp	r2, #56	; 0x38
 80010f6:	dd00      	ble.n	80010fa <__aeabi_ddiv+0x3be>
 80010f8:	e674      	b.n	8000de4 <__aeabi_ddiv+0xa8>
 80010fa:	2a1f      	cmp	r2, #31
 80010fc:	dc00      	bgt.n	8001100 <__aeabi_ddiv+0x3c4>
 80010fe:	e0bd      	b.n	800127c <__aeabi_ddiv+0x540>
 8001100:	211f      	movs	r1, #31
 8001102:	4249      	negs	r1, r1
 8001104:	1acb      	subs	r3, r1, r3
 8001106:	4641      	mov	r1, r8
 8001108:	40d9      	lsrs	r1, r3
 800110a:	000b      	movs	r3, r1
 800110c:	2a20      	cmp	r2, #32
 800110e:	d004      	beq.n	800111a <__aeabi_ddiv+0x3de>
 8001110:	4641      	mov	r1, r8
 8001112:	4a7e      	ldr	r2, [pc, #504]	; (800130c <__aeabi_ddiv+0x5d0>)
 8001114:	445a      	add	r2, fp
 8001116:	4091      	lsls	r1, r2
 8001118:	430d      	orrs	r5, r1
 800111a:	0029      	movs	r1, r5
 800111c:	1e4a      	subs	r2, r1, #1
 800111e:	4191      	sbcs	r1, r2
 8001120:	4319      	orrs	r1, r3
 8001122:	2307      	movs	r3, #7
 8001124:	001d      	movs	r5, r3
 8001126:	2200      	movs	r2, #0
 8001128:	400d      	ands	r5, r1
 800112a:	420b      	tst	r3, r1
 800112c:	d100      	bne.n	8001130 <__aeabi_ddiv+0x3f4>
 800112e:	e0d0      	b.n	80012d2 <__aeabi_ddiv+0x596>
 8001130:	220f      	movs	r2, #15
 8001132:	2300      	movs	r3, #0
 8001134:	400a      	ands	r2, r1
 8001136:	2a04      	cmp	r2, #4
 8001138:	d100      	bne.n	800113c <__aeabi_ddiv+0x400>
 800113a:	e0c7      	b.n	80012cc <__aeabi_ddiv+0x590>
 800113c:	1d0a      	adds	r2, r1, #4
 800113e:	428a      	cmp	r2, r1
 8001140:	4189      	sbcs	r1, r1
 8001142:	4249      	negs	r1, r1
 8001144:	185b      	adds	r3, r3, r1
 8001146:	0011      	movs	r1, r2
 8001148:	021a      	lsls	r2, r3, #8
 800114a:	d400      	bmi.n	800114e <__aeabi_ddiv+0x412>
 800114c:	e0be      	b.n	80012cc <__aeabi_ddiv+0x590>
 800114e:	2301      	movs	r3, #1
 8001150:	2200      	movs	r2, #0
 8001152:	2500      	movs	r5, #0
 8001154:	e649      	b.n	8000dea <__aeabi_ddiv+0xae>
 8001156:	2280      	movs	r2, #128	; 0x80
 8001158:	4643      	mov	r3, r8
 800115a:	0312      	lsls	r2, r2, #12
 800115c:	4213      	tst	r3, r2
 800115e:	d008      	beq.n	8001172 <__aeabi_ddiv+0x436>
 8001160:	4214      	tst	r4, r2
 8001162:	d106      	bne.n	8001172 <__aeabi_ddiv+0x436>
 8001164:	4322      	orrs	r2, r4
 8001166:	0312      	lsls	r2, r2, #12
 8001168:	46ba      	mov	sl, r7
 800116a:	000d      	movs	r5, r1
 800116c:	4b66      	ldr	r3, [pc, #408]	; (8001308 <__aeabi_ddiv+0x5cc>)
 800116e:	0b12      	lsrs	r2, r2, #12
 8001170:	e63b      	b.n	8000dea <__aeabi_ddiv+0xae>
 8001172:	2280      	movs	r2, #128	; 0x80
 8001174:	4643      	mov	r3, r8
 8001176:	0312      	lsls	r2, r2, #12
 8001178:	431a      	orrs	r2, r3
 800117a:	0312      	lsls	r2, r2, #12
 800117c:	46b2      	mov	sl, r6
 800117e:	4b62      	ldr	r3, [pc, #392]	; (8001308 <__aeabi_ddiv+0x5cc>)
 8001180:	0b12      	lsrs	r2, r2, #12
 8001182:	e632      	b.n	8000dea <__aeabi_ddiv+0xae>
 8001184:	2b00      	cmp	r3, #0
 8001186:	d100      	bne.n	800118a <__aeabi_ddiv+0x44e>
 8001188:	e702      	b.n	8000f90 <__aeabi_ddiv+0x254>
 800118a:	19a6      	adds	r6, r4, r6
 800118c:	1e6a      	subs	r2, r5, #1
 800118e:	42a6      	cmp	r6, r4
 8001190:	d200      	bcs.n	8001194 <__aeabi_ddiv+0x458>
 8001192:	e089      	b.n	80012a8 <__aeabi_ddiv+0x56c>
 8001194:	4286      	cmp	r6, r0
 8001196:	d200      	bcs.n	800119a <__aeabi_ddiv+0x45e>
 8001198:	e09f      	b.n	80012da <__aeabi_ddiv+0x59e>
 800119a:	d100      	bne.n	800119e <__aeabi_ddiv+0x462>
 800119c:	e0af      	b.n	80012fe <__aeabi_ddiv+0x5c2>
 800119e:	0015      	movs	r5, r2
 80011a0:	e6f4      	b.n	8000f8c <__aeabi_ddiv+0x250>
 80011a2:	42a9      	cmp	r1, r5
 80011a4:	d900      	bls.n	80011a8 <__aeabi_ddiv+0x46c>
 80011a6:	e63c      	b.n	8000e22 <__aeabi_ddiv+0xe6>
 80011a8:	4643      	mov	r3, r8
 80011aa:	07de      	lsls	r6, r3, #31
 80011ac:	0858      	lsrs	r0, r3, #1
 80011ae:	086b      	lsrs	r3, r5, #1
 80011b0:	431e      	orrs	r6, r3
 80011b2:	07ed      	lsls	r5, r5, #31
 80011b4:	e63c      	b.n	8000e30 <__aeabi_ddiv+0xf4>
 80011b6:	f001 f8a9 	bl	800230c <__clzsi2>
 80011ba:	0001      	movs	r1, r0
 80011bc:	0002      	movs	r2, r0
 80011be:	3115      	adds	r1, #21
 80011c0:	3220      	adds	r2, #32
 80011c2:	291c      	cmp	r1, #28
 80011c4:	dc00      	bgt.n	80011c8 <__aeabi_ddiv+0x48c>
 80011c6:	e72c      	b.n	8001022 <__aeabi_ddiv+0x2e6>
 80011c8:	464b      	mov	r3, r9
 80011ca:	3808      	subs	r0, #8
 80011cc:	4083      	lsls	r3, r0
 80011ce:	2500      	movs	r5, #0
 80011d0:	4698      	mov	r8, r3
 80011d2:	e732      	b.n	800103a <__aeabi_ddiv+0x2fe>
 80011d4:	f001 f89a 	bl	800230c <__clzsi2>
 80011d8:	0003      	movs	r3, r0
 80011da:	001a      	movs	r2, r3
 80011dc:	3215      	adds	r2, #21
 80011de:	3020      	adds	r0, #32
 80011e0:	2a1c      	cmp	r2, #28
 80011e2:	dc00      	bgt.n	80011e6 <__aeabi_ddiv+0x4aa>
 80011e4:	e6ff      	b.n	8000fe6 <__aeabi_ddiv+0x2aa>
 80011e6:	4654      	mov	r4, sl
 80011e8:	3b08      	subs	r3, #8
 80011ea:	2100      	movs	r1, #0
 80011ec:	409c      	lsls	r4, r3
 80011ee:	e705      	b.n	8000ffc <__aeabi_ddiv+0x2c0>
 80011f0:	1936      	adds	r6, r6, r4
 80011f2:	3b01      	subs	r3, #1
 80011f4:	42b4      	cmp	r4, r6
 80011f6:	d900      	bls.n	80011fa <__aeabi_ddiv+0x4be>
 80011f8:	e6a6      	b.n	8000f48 <__aeabi_ddiv+0x20c>
 80011fa:	42b2      	cmp	r2, r6
 80011fc:	d800      	bhi.n	8001200 <__aeabi_ddiv+0x4c4>
 80011fe:	e6a3      	b.n	8000f48 <__aeabi_ddiv+0x20c>
 8001200:	1e83      	subs	r3, r0, #2
 8001202:	1936      	adds	r6, r6, r4
 8001204:	e6a0      	b.n	8000f48 <__aeabi_ddiv+0x20c>
 8001206:	1909      	adds	r1, r1, r4
 8001208:	3d01      	subs	r5, #1
 800120a:	428c      	cmp	r4, r1
 800120c:	d900      	bls.n	8001210 <__aeabi_ddiv+0x4d4>
 800120e:	e68d      	b.n	8000f2c <__aeabi_ddiv+0x1f0>
 8001210:	428a      	cmp	r2, r1
 8001212:	d800      	bhi.n	8001216 <__aeabi_ddiv+0x4da>
 8001214:	e68a      	b.n	8000f2c <__aeabi_ddiv+0x1f0>
 8001216:	1e85      	subs	r5, r0, #2
 8001218:	1909      	adds	r1, r1, r4
 800121a:	e687      	b.n	8000f2c <__aeabi_ddiv+0x1f0>
 800121c:	220f      	movs	r2, #15
 800121e:	402a      	ands	r2, r5
 8001220:	2a04      	cmp	r2, #4
 8001222:	d100      	bne.n	8001226 <__aeabi_ddiv+0x4ea>
 8001224:	e6bc      	b.n	8000fa0 <__aeabi_ddiv+0x264>
 8001226:	1d29      	adds	r1, r5, #4
 8001228:	42a9      	cmp	r1, r5
 800122a:	41ad      	sbcs	r5, r5
 800122c:	426d      	negs	r5, r5
 800122e:	08c9      	lsrs	r1, r1, #3
 8001230:	44a8      	add	r8, r5
 8001232:	e6b6      	b.n	8000fa2 <__aeabi_ddiv+0x266>
 8001234:	42af      	cmp	r7, r5
 8001236:	d900      	bls.n	800123a <__aeabi_ddiv+0x4fe>
 8001238:	e662      	b.n	8000f00 <__aeabi_ddiv+0x1c4>
 800123a:	4281      	cmp	r1, r0
 800123c:	d804      	bhi.n	8001248 <__aeabi_ddiv+0x50c>
 800123e:	d000      	beq.n	8001242 <__aeabi_ddiv+0x506>
 8001240:	e65e      	b.n	8000f00 <__aeabi_ddiv+0x1c4>
 8001242:	42ae      	cmp	r6, r5
 8001244:	d800      	bhi.n	8001248 <__aeabi_ddiv+0x50c>
 8001246:	e65b      	b.n	8000f00 <__aeabi_ddiv+0x1c4>
 8001248:	2302      	movs	r3, #2
 800124a:	425b      	negs	r3, r3
 800124c:	469c      	mov	ip, r3
 800124e:	9b00      	ldr	r3, [sp, #0]
 8001250:	44e0      	add	r8, ip
 8001252:	469c      	mov	ip, r3
 8001254:	4465      	add	r5, ip
 8001256:	429d      	cmp	r5, r3
 8001258:	419b      	sbcs	r3, r3
 800125a:	425b      	negs	r3, r3
 800125c:	191b      	adds	r3, r3, r4
 800125e:	18c0      	adds	r0, r0, r3
 8001260:	e64f      	b.n	8000f02 <__aeabi_ddiv+0x1c6>
 8001262:	42b2      	cmp	r2, r6
 8001264:	d800      	bhi.n	8001268 <__aeabi_ddiv+0x52c>
 8001266:	e612      	b.n	8000e8e <__aeabi_ddiv+0x152>
 8001268:	1e83      	subs	r3, r0, #2
 800126a:	1936      	adds	r6, r6, r4
 800126c:	e60f      	b.n	8000e8e <__aeabi_ddiv+0x152>
 800126e:	428a      	cmp	r2, r1
 8001270:	d800      	bhi.n	8001274 <__aeabi_ddiv+0x538>
 8001272:	e5fa      	b.n	8000e6a <__aeabi_ddiv+0x12e>
 8001274:	1e83      	subs	r3, r0, #2
 8001276:	4698      	mov	r8, r3
 8001278:	1909      	adds	r1, r1, r4
 800127a:	e5f6      	b.n	8000e6a <__aeabi_ddiv+0x12e>
 800127c:	4b24      	ldr	r3, [pc, #144]	; (8001310 <__aeabi_ddiv+0x5d4>)
 800127e:	0028      	movs	r0, r5
 8001280:	445b      	add	r3, fp
 8001282:	4641      	mov	r1, r8
 8001284:	409d      	lsls	r5, r3
 8001286:	4099      	lsls	r1, r3
 8001288:	40d0      	lsrs	r0, r2
 800128a:	1e6b      	subs	r3, r5, #1
 800128c:	419d      	sbcs	r5, r3
 800128e:	4643      	mov	r3, r8
 8001290:	4301      	orrs	r1, r0
 8001292:	4329      	orrs	r1, r5
 8001294:	40d3      	lsrs	r3, r2
 8001296:	074a      	lsls	r2, r1, #29
 8001298:	d100      	bne.n	800129c <__aeabi_ddiv+0x560>
 800129a:	e755      	b.n	8001148 <__aeabi_ddiv+0x40c>
 800129c:	220f      	movs	r2, #15
 800129e:	400a      	ands	r2, r1
 80012a0:	2a04      	cmp	r2, #4
 80012a2:	d000      	beq.n	80012a6 <__aeabi_ddiv+0x56a>
 80012a4:	e74a      	b.n	800113c <__aeabi_ddiv+0x400>
 80012a6:	e74f      	b.n	8001148 <__aeabi_ddiv+0x40c>
 80012a8:	0015      	movs	r5, r2
 80012aa:	4286      	cmp	r6, r0
 80012ac:	d000      	beq.n	80012b0 <__aeabi_ddiv+0x574>
 80012ae:	e66d      	b.n	8000f8c <__aeabi_ddiv+0x250>
 80012b0:	9a00      	ldr	r2, [sp, #0]
 80012b2:	429a      	cmp	r2, r3
 80012b4:	d000      	beq.n	80012b8 <__aeabi_ddiv+0x57c>
 80012b6:	e669      	b.n	8000f8c <__aeabi_ddiv+0x250>
 80012b8:	e66a      	b.n	8000f90 <__aeabi_ddiv+0x254>
 80012ba:	4b16      	ldr	r3, [pc, #88]	; (8001314 <__aeabi_ddiv+0x5d8>)
 80012bc:	445b      	add	r3, fp
 80012be:	2b00      	cmp	r3, #0
 80012c0:	dc00      	bgt.n	80012c4 <__aeabi_ddiv+0x588>
 80012c2:	e713      	b.n	80010ec <__aeabi_ddiv+0x3b0>
 80012c4:	2501      	movs	r5, #1
 80012c6:	2100      	movs	r1, #0
 80012c8:	44a8      	add	r8, r5
 80012ca:	e66a      	b.n	8000fa2 <__aeabi_ddiv+0x266>
 80012cc:	075d      	lsls	r5, r3, #29
 80012ce:	025b      	lsls	r3, r3, #9
 80012d0:	0b1a      	lsrs	r2, r3, #12
 80012d2:	08c9      	lsrs	r1, r1, #3
 80012d4:	2300      	movs	r3, #0
 80012d6:	430d      	orrs	r5, r1
 80012d8:	e587      	b.n	8000dea <__aeabi_ddiv+0xae>
 80012da:	9900      	ldr	r1, [sp, #0]
 80012dc:	3d02      	subs	r5, #2
 80012de:	004a      	lsls	r2, r1, #1
 80012e0:	428a      	cmp	r2, r1
 80012e2:	41bf      	sbcs	r7, r7
 80012e4:	427f      	negs	r7, r7
 80012e6:	193f      	adds	r7, r7, r4
 80012e8:	19f6      	adds	r6, r6, r7
 80012ea:	9200      	str	r2, [sp, #0]
 80012ec:	e7dd      	b.n	80012aa <__aeabi_ddiv+0x56e>
 80012ee:	2280      	movs	r2, #128	; 0x80
 80012f0:	4643      	mov	r3, r8
 80012f2:	0312      	lsls	r2, r2, #12
 80012f4:	431a      	orrs	r2, r3
 80012f6:	0312      	lsls	r2, r2, #12
 80012f8:	4b03      	ldr	r3, [pc, #12]	; (8001308 <__aeabi_ddiv+0x5cc>)
 80012fa:	0b12      	lsrs	r2, r2, #12
 80012fc:	e575      	b.n	8000dea <__aeabi_ddiv+0xae>
 80012fe:	9900      	ldr	r1, [sp, #0]
 8001300:	4299      	cmp	r1, r3
 8001302:	d3ea      	bcc.n	80012da <__aeabi_ddiv+0x59e>
 8001304:	0015      	movs	r5, r2
 8001306:	e7d3      	b.n	80012b0 <__aeabi_ddiv+0x574>
 8001308:	000007ff 	.word	0x000007ff
 800130c:	0000043e 	.word	0x0000043e
 8001310:	0000041e 	.word	0x0000041e
 8001314:	000003ff 	.word	0x000003ff

08001318 <__eqdf2>:
 8001318:	b5f0      	push	{r4, r5, r6, r7, lr}
 800131a:	464e      	mov	r6, r9
 800131c:	4645      	mov	r5, r8
 800131e:	46de      	mov	lr, fp
 8001320:	4657      	mov	r7, sl
 8001322:	4690      	mov	r8, r2
 8001324:	b5e0      	push	{r5, r6, r7, lr}
 8001326:	0017      	movs	r7, r2
 8001328:	031a      	lsls	r2, r3, #12
 800132a:	0b12      	lsrs	r2, r2, #12
 800132c:	0005      	movs	r5, r0
 800132e:	4684      	mov	ip, r0
 8001330:	4819      	ldr	r0, [pc, #100]	; (8001398 <__eqdf2+0x80>)
 8001332:	030e      	lsls	r6, r1, #12
 8001334:	004c      	lsls	r4, r1, #1
 8001336:	4691      	mov	r9, r2
 8001338:	005a      	lsls	r2, r3, #1
 800133a:	0fdb      	lsrs	r3, r3, #31
 800133c:	469b      	mov	fp, r3
 800133e:	0b36      	lsrs	r6, r6, #12
 8001340:	0d64      	lsrs	r4, r4, #21
 8001342:	0fc9      	lsrs	r1, r1, #31
 8001344:	0d52      	lsrs	r2, r2, #21
 8001346:	4284      	cmp	r4, r0
 8001348:	d019      	beq.n	800137e <__eqdf2+0x66>
 800134a:	4282      	cmp	r2, r0
 800134c:	d010      	beq.n	8001370 <__eqdf2+0x58>
 800134e:	2001      	movs	r0, #1
 8001350:	4294      	cmp	r4, r2
 8001352:	d10e      	bne.n	8001372 <__eqdf2+0x5a>
 8001354:	454e      	cmp	r6, r9
 8001356:	d10c      	bne.n	8001372 <__eqdf2+0x5a>
 8001358:	2001      	movs	r0, #1
 800135a:	45c4      	cmp	ip, r8
 800135c:	d109      	bne.n	8001372 <__eqdf2+0x5a>
 800135e:	4559      	cmp	r1, fp
 8001360:	d017      	beq.n	8001392 <__eqdf2+0x7a>
 8001362:	2c00      	cmp	r4, #0
 8001364:	d105      	bne.n	8001372 <__eqdf2+0x5a>
 8001366:	0030      	movs	r0, r6
 8001368:	4328      	orrs	r0, r5
 800136a:	1e43      	subs	r3, r0, #1
 800136c:	4198      	sbcs	r0, r3
 800136e:	e000      	b.n	8001372 <__eqdf2+0x5a>
 8001370:	2001      	movs	r0, #1
 8001372:	bcf0      	pop	{r4, r5, r6, r7}
 8001374:	46bb      	mov	fp, r7
 8001376:	46b2      	mov	sl, r6
 8001378:	46a9      	mov	r9, r5
 800137a:	46a0      	mov	r8, r4
 800137c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800137e:	0033      	movs	r3, r6
 8001380:	2001      	movs	r0, #1
 8001382:	432b      	orrs	r3, r5
 8001384:	d1f5      	bne.n	8001372 <__eqdf2+0x5a>
 8001386:	42a2      	cmp	r2, r4
 8001388:	d1f3      	bne.n	8001372 <__eqdf2+0x5a>
 800138a:	464b      	mov	r3, r9
 800138c:	433b      	orrs	r3, r7
 800138e:	d1f0      	bne.n	8001372 <__eqdf2+0x5a>
 8001390:	e7e2      	b.n	8001358 <__eqdf2+0x40>
 8001392:	2000      	movs	r0, #0
 8001394:	e7ed      	b.n	8001372 <__eqdf2+0x5a>
 8001396:	46c0      	nop			; (mov r8, r8)
 8001398:	000007ff 	.word	0x000007ff

0800139c <__gedf2>:
 800139c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800139e:	4647      	mov	r7, r8
 80013a0:	46ce      	mov	lr, r9
 80013a2:	0004      	movs	r4, r0
 80013a4:	0018      	movs	r0, r3
 80013a6:	0016      	movs	r6, r2
 80013a8:	031b      	lsls	r3, r3, #12
 80013aa:	0b1b      	lsrs	r3, r3, #12
 80013ac:	4d2d      	ldr	r5, [pc, #180]	; (8001464 <__gedf2+0xc8>)
 80013ae:	004a      	lsls	r2, r1, #1
 80013b0:	4699      	mov	r9, r3
 80013b2:	b580      	push	{r7, lr}
 80013b4:	0043      	lsls	r3, r0, #1
 80013b6:	030f      	lsls	r7, r1, #12
 80013b8:	46a4      	mov	ip, r4
 80013ba:	46b0      	mov	r8, r6
 80013bc:	0b3f      	lsrs	r7, r7, #12
 80013be:	0d52      	lsrs	r2, r2, #21
 80013c0:	0fc9      	lsrs	r1, r1, #31
 80013c2:	0d5b      	lsrs	r3, r3, #21
 80013c4:	0fc0      	lsrs	r0, r0, #31
 80013c6:	42aa      	cmp	r2, r5
 80013c8:	d021      	beq.n	800140e <__gedf2+0x72>
 80013ca:	42ab      	cmp	r3, r5
 80013cc:	d013      	beq.n	80013f6 <__gedf2+0x5a>
 80013ce:	2a00      	cmp	r2, #0
 80013d0:	d122      	bne.n	8001418 <__gedf2+0x7c>
 80013d2:	433c      	orrs	r4, r7
 80013d4:	2b00      	cmp	r3, #0
 80013d6:	d102      	bne.n	80013de <__gedf2+0x42>
 80013d8:	464d      	mov	r5, r9
 80013da:	432e      	orrs	r6, r5
 80013dc:	d022      	beq.n	8001424 <__gedf2+0x88>
 80013de:	2c00      	cmp	r4, #0
 80013e0:	d010      	beq.n	8001404 <__gedf2+0x68>
 80013e2:	4281      	cmp	r1, r0
 80013e4:	d022      	beq.n	800142c <__gedf2+0x90>
 80013e6:	2002      	movs	r0, #2
 80013e8:	3901      	subs	r1, #1
 80013ea:	4008      	ands	r0, r1
 80013ec:	3801      	subs	r0, #1
 80013ee:	bcc0      	pop	{r6, r7}
 80013f0:	46b9      	mov	r9, r7
 80013f2:	46b0      	mov	r8, r6
 80013f4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80013f6:	464d      	mov	r5, r9
 80013f8:	432e      	orrs	r6, r5
 80013fa:	d129      	bne.n	8001450 <__gedf2+0xb4>
 80013fc:	2a00      	cmp	r2, #0
 80013fe:	d1f0      	bne.n	80013e2 <__gedf2+0x46>
 8001400:	433c      	orrs	r4, r7
 8001402:	d1ee      	bne.n	80013e2 <__gedf2+0x46>
 8001404:	2800      	cmp	r0, #0
 8001406:	d1f2      	bne.n	80013ee <__gedf2+0x52>
 8001408:	2001      	movs	r0, #1
 800140a:	4240      	negs	r0, r0
 800140c:	e7ef      	b.n	80013ee <__gedf2+0x52>
 800140e:	003d      	movs	r5, r7
 8001410:	4325      	orrs	r5, r4
 8001412:	d11d      	bne.n	8001450 <__gedf2+0xb4>
 8001414:	4293      	cmp	r3, r2
 8001416:	d0ee      	beq.n	80013f6 <__gedf2+0x5a>
 8001418:	2b00      	cmp	r3, #0
 800141a:	d1e2      	bne.n	80013e2 <__gedf2+0x46>
 800141c:	464c      	mov	r4, r9
 800141e:	4326      	orrs	r6, r4
 8001420:	d1df      	bne.n	80013e2 <__gedf2+0x46>
 8001422:	e7e0      	b.n	80013e6 <__gedf2+0x4a>
 8001424:	2000      	movs	r0, #0
 8001426:	2c00      	cmp	r4, #0
 8001428:	d0e1      	beq.n	80013ee <__gedf2+0x52>
 800142a:	e7dc      	b.n	80013e6 <__gedf2+0x4a>
 800142c:	429a      	cmp	r2, r3
 800142e:	dc0a      	bgt.n	8001446 <__gedf2+0xaa>
 8001430:	dbe8      	blt.n	8001404 <__gedf2+0x68>
 8001432:	454f      	cmp	r7, r9
 8001434:	d8d7      	bhi.n	80013e6 <__gedf2+0x4a>
 8001436:	d00e      	beq.n	8001456 <__gedf2+0xba>
 8001438:	2000      	movs	r0, #0
 800143a:	454f      	cmp	r7, r9
 800143c:	d2d7      	bcs.n	80013ee <__gedf2+0x52>
 800143e:	2900      	cmp	r1, #0
 8001440:	d0e2      	beq.n	8001408 <__gedf2+0x6c>
 8001442:	0008      	movs	r0, r1
 8001444:	e7d3      	b.n	80013ee <__gedf2+0x52>
 8001446:	4243      	negs	r3, r0
 8001448:	4158      	adcs	r0, r3
 800144a:	0040      	lsls	r0, r0, #1
 800144c:	3801      	subs	r0, #1
 800144e:	e7ce      	b.n	80013ee <__gedf2+0x52>
 8001450:	2002      	movs	r0, #2
 8001452:	4240      	negs	r0, r0
 8001454:	e7cb      	b.n	80013ee <__gedf2+0x52>
 8001456:	45c4      	cmp	ip, r8
 8001458:	d8c5      	bhi.n	80013e6 <__gedf2+0x4a>
 800145a:	2000      	movs	r0, #0
 800145c:	45c4      	cmp	ip, r8
 800145e:	d2c6      	bcs.n	80013ee <__gedf2+0x52>
 8001460:	e7ed      	b.n	800143e <__gedf2+0xa2>
 8001462:	46c0      	nop			; (mov r8, r8)
 8001464:	000007ff 	.word	0x000007ff

08001468 <__ledf2>:
 8001468:	b5f0      	push	{r4, r5, r6, r7, lr}
 800146a:	4647      	mov	r7, r8
 800146c:	46ce      	mov	lr, r9
 800146e:	0004      	movs	r4, r0
 8001470:	0018      	movs	r0, r3
 8001472:	0016      	movs	r6, r2
 8001474:	031b      	lsls	r3, r3, #12
 8001476:	0b1b      	lsrs	r3, r3, #12
 8001478:	4d2c      	ldr	r5, [pc, #176]	; (800152c <__ledf2+0xc4>)
 800147a:	004a      	lsls	r2, r1, #1
 800147c:	4699      	mov	r9, r3
 800147e:	b580      	push	{r7, lr}
 8001480:	0043      	lsls	r3, r0, #1
 8001482:	030f      	lsls	r7, r1, #12
 8001484:	46a4      	mov	ip, r4
 8001486:	46b0      	mov	r8, r6
 8001488:	0b3f      	lsrs	r7, r7, #12
 800148a:	0d52      	lsrs	r2, r2, #21
 800148c:	0fc9      	lsrs	r1, r1, #31
 800148e:	0d5b      	lsrs	r3, r3, #21
 8001490:	0fc0      	lsrs	r0, r0, #31
 8001492:	42aa      	cmp	r2, r5
 8001494:	d00d      	beq.n	80014b2 <__ledf2+0x4a>
 8001496:	42ab      	cmp	r3, r5
 8001498:	d010      	beq.n	80014bc <__ledf2+0x54>
 800149a:	2a00      	cmp	r2, #0
 800149c:	d127      	bne.n	80014ee <__ledf2+0x86>
 800149e:	433c      	orrs	r4, r7
 80014a0:	2b00      	cmp	r3, #0
 80014a2:	d111      	bne.n	80014c8 <__ledf2+0x60>
 80014a4:	464d      	mov	r5, r9
 80014a6:	432e      	orrs	r6, r5
 80014a8:	d10e      	bne.n	80014c8 <__ledf2+0x60>
 80014aa:	2000      	movs	r0, #0
 80014ac:	2c00      	cmp	r4, #0
 80014ae:	d015      	beq.n	80014dc <__ledf2+0x74>
 80014b0:	e00e      	b.n	80014d0 <__ledf2+0x68>
 80014b2:	003d      	movs	r5, r7
 80014b4:	4325      	orrs	r5, r4
 80014b6:	d110      	bne.n	80014da <__ledf2+0x72>
 80014b8:	4293      	cmp	r3, r2
 80014ba:	d118      	bne.n	80014ee <__ledf2+0x86>
 80014bc:	464d      	mov	r5, r9
 80014be:	432e      	orrs	r6, r5
 80014c0:	d10b      	bne.n	80014da <__ledf2+0x72>
 80014c2:	2a00      	cmp	r2, #0
 80014c4:	d102      	bne.n	80014cc <__ledf2+0x64>
 80014c6:	433c      	orrs	r4, r7
 80014c8:	2c00      	cmp	r4, #0
 80014ca:	d00b      	beq.n	80014e4 <__ledf2+0x7c>
 80014cc:	4281      	cmp	r1, r0
 80014ce:	d014      	beq.n	80014fa <__ledf2+0x92>
 80014d0:	2002      	movs	r0, #2
 80014d2:	3901      	subs	r1, #1
 80014d4:	4008      	ands	r0, r1
 80014d6:	3801      	subs	r0, #1
 80014d8:	e000      	b.n	80014dc <__ledf2+0x74>
 80014da:	2002      	movs	r0, #2
 80014dc:	bcc0      	pop	{r6, r7}
 80014de:	46b9      	mov	r9, r7
 80014e0:	46b0      	mov	r8, r6
 80014e2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80014e4:	2800      	cmp	r0, #0
 80014e6:	d1f9      	bne.n	80014dc <__ledf2+0x74>
 80014e8:	2001      	movs	r0, #1
 80014ea:	4240      	negs	r0, r0
 80014ec:	e7f6      	b.n	80014dc <__ledf2+0x74>
 80014ee:	2b00      	cmp	r3, #0
 80014f0:	d1ec      	bne.n	80014cc <__ledf2+0x64>
 80014f2:	464c      	mov	r4, r9
 80014f4:	4326      	orrs	r6, r4
 80014f6:	d1e9      	bne.n	80014cc <__ledf2+0x64>
 80014f8:	e7ea      	b.n	80014d0 <__ledf2+0x68>
 80014fa:	429a      	cmp	r2, r3
 80014fc:	dd04      	ble.n	8001508 <__ledf2+0xa0>
 80014fe:	4243      	negs	r3, r0
 8001500:	4158      	adcs	r0, r3
 8001502:	0040      	lsls	r0, r0, #1
 8001504:	3801      	subs	r0, #1
 8001506:	e7e9      	b.n	80014dc <__ledf2+0x74>
 8001508:	429a      	cmp	r2, r3
 800150a:	dbeb      	blt.n	80014e4 <__ledf2+0x7c>
 800150c:	454f      	cmp	r7, r9
 800150e:	d8df      	bhi.n	80014d0 <__ledf2+0x68>
 8001510:	d006      	beq.n	8001520 <__ledf2+0xb8>
 8001512:	2000      	movs	r0, #0
 8001514:	454f      	cmp	r7, r9
 8001516:	d2e1      	bcs.n	80014dc <__ledf2+0x74>
 8001518:	2900      	cmp	r1, #0
 800151a:	d0e5      	beq.n	80014e8 <__ledf2+0x80>
 800151c:	0008      	movs	r0, r1
 800151e:	e7dd      	b.n	80014dc <__ledf2+0x74>
 8001520:	45c4      	cmp	ip, r8
 8001522:	d8d5      	bhi.n	80014d0 <__ledf2+0x68>
 8001524:	2000      	movs	r0, #0
 8001526:	45c4      	cmp	ip, r8
 8001528:	d2d8      	bcs.n	80014dc <__ledf2+0x74>
 800152a:	e7f5      	b.n	8001518 <__ledf2+0xb0>
 800152c:	000007ff 	.word	0x000007ff

08001530 <__aeabi_dmul>:
 8001530:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001532:	4645      	mov	r5, r8
 8001534:	46de      	mov	lr, fp
 8001536:	4657      	mov	r7, sl
 8001538:	464e      	mov	r6, r9
 800153a:	b5e0      	push	{r5, r6, r7, lr}
 800153c:	001f      	movs	r7, r3
 800153e:	030b      	lsls	r3, r1, #12
 8001540:	0b1b      	lsrs	r3, r3, #12
 8001542:	469b      	mov	fp, r3
 8001544:	004d      	lsls	r5, r1, #1
 8001546:	0fcb      	lsrs	r3, r1, #31
 8001548:	0004      	movs	r4, r0
 800154a:	4691      	mov	r9, r2
 800154c:	4698      	mov	r8, r3
 800154e:	b087      	sub	sp, #28
 8001550:	0d6d      	lsrs	r5, r5, #21
 8001552:	d100      	bne.n	8001556 <__aeabi_dmul+0x26>
 8001554:	e1cd      	b.n	80018f2 <__aeabi_dmul+0x3c2>
 8001556:	4bce      	ldr	r3, [pc, #824]	; (8001890 <__aeabi_dmul+0x360>)
 8001558:	429d      	cmp	r5, r3
 800155a:	d100      	bne.n	800155e <__aeabi_dmul+0x2e>
 800155c:	e1e9      	b.n	8001932 <__aeabi_dmul+0x402>
 800155e:	465a      	mov	r2, fp
 8001560:	0f43      	lsrs	r3, r0, #29
 8001562:	00d2      	lsls	r2, r2, #3
 8001564:	4313      	orrs	r3, r2
 8001566:	2280      	movs	r2, #128	; 0x80
 8001568:	0412      	lsls	r2, r2, #16
 800156a:	431a      	orrs	r2, r3
 800156c:	00c3      	lsls	r3, r0, #3
 800156e:	469a      	mov	sl, r3
 8001570:	4bc8      	ldr	r3, [pc, #800]	; (8001894 <__aeabi_dmul+0x364>)
 8001572:	4693      	mov	fp, r2
 8001574:	469c      	mov	ip, r3
 8001576:	2300      	movs	r3, #0
 8001578:	2600      	movs	r6, #0
 800157a:	4465      	add	r5, ip
 800157c:	9300      	str	r3, [sp, #0]
 800157e:	033c      	lsls	r4, r7, #12
 8001580:	007b      	lsls	r3, r7, #1
 8001582:	4648      	mov	r0, r9
 8001584:	0b24      	lsrs	r4, r4, #12
 8001586:	0d5b      	lsrs	r3, r3, #21
 8001588:	0fff      	lsrs	r7, r7, #31
 800158a:	2b00      	cmp	r3, #0
 800158c:	d100      	bne.n	8001590 <__aeabi_dmul+0x60>
 800158e:	e189      	b.n	80018a4 <__aeabi_dmul+0x374>
 8001590:	4abf      	ldr	r2, [pc, #764]	; (8001890 <__aeabi_dmul+0x360>)
 8001592:	4293      	cmp	r3, r2
 8001594:	d019      	beq.n	80015ca <__aeabi_dmul+0x9a>
 8001596:	0f42      	lsrs	r2, r0, #29
 8001598:	00e4      	lsls	r4, r4, #3
 800159a:	4322      	orrs	r2, r4
 800159c:	2480      	movs	r4, #128	; 0x80
 800159e:	0424      	lsls	r4, r4, #16
 80015a0:	4314      	orrs	r4, r2
 80015a2:	4abc      	ldr	r2, [pc, #752]	; (8001894 <__aeabi_dmul+0x364>)
 80015a4:	2100      	movs	r1, #0
 80015a6:	4694      	mov	ip, r2
 80015a8:	4642      	mov	r2, r8
 80015aa:	4463      	add	r3, ip
 80015ac:	195b      	adds	r3, r3, r5
 80015ae:	9301      	str	r3, [sp, #4]
 80015b0:	9b01      	ldr	r3, [sp, #4]
 80015b2:	407a      	eors	r2, r7
 80015b4:	3301      	adds	r3, #1
 80015b6:	00c0      	lsls	r0, r0, #3
 80015b8:	b2d2      	uxtb	r2, r2
 80015ba:	9302      	str	r3, [sp, #8]
 80015bc:	2e0a      	cmp	r6, #10
 80015be:	dd1c      	ble.n	80015fa <__aeabi_dmul+0xca>
 80015c0:	003a      	movs	r2, r7
 80015c2:	2e0b      	cmp	r6, #11
 80015c4:	d05e      	beq.n	8001684 <__aeabi_dmul+0x154>
 80015c6:	4647      	mov	r7, r8
 80015c8:	e056      	b.n	8001678 <__aeabi_dmul+0x148>
 80015ca:	4649      	mov	r1, r9
 80015cc:	4bb0      	ldr	r3, [pc, #704]	; (8001890 <__aeabi_dmul+0x360>)
 80015ce:	4321      	orrs	r1, r4
 80015d0:	18eb      	adds	r3, r5, r3
 80015d2:	9301      	str	r3, [sp, #4]
 80015d4:	2900      	cmp	r1, #0
 80015d6:	d12a      	bne.n	800162e <__aeabi_dmul+0xfe>
 80015d8:	2080      	movs	r0, #128	; 0x80
 80015da:	2202      	movs	r2, #2
 80015dc:	0100      	lsls	r0, r0, #4
 80015de:	002b      	movs	r3, r5
 80015e0:	4684      	mov	ip, r0
 80015e2:	4316      	orrs	r6, r2
 80015e4:	4642      	mov	r2, r8
 80015e6:	4463      	add	r3, ip
 80015e8:	407a      	eors	r2, r7
 80015ea:	b2d2      	uxtb	r2, r2
 80015ec:	9302      	str	r3, [sp, #8]
 80015ee:	2e0a      	cmp	r6, #10
 80015f0:	dd00      	ble.n	80015f4 <__aeabi_dmul+0xc4>
 80015f2:	e231      	b.n	8001a58 <__aeabi_dmul+0x528>
 80015f4:	2000      	movs	r0, #0
 80015f6:	2400      	movs	r4, #0
 80015f8:	2102      	movs	r1, #2
 80015fa:	2e02      	cmp	r6, #2
 80015fc:	dc26      	bgt.n	800164c <__aeabi_dmul+0x11c>
 80015fe:	3e01      	subs	r6, #1
 8001600:	2e01      	cmp	r6, #1
 8001602:	d852      	bhi.n	80016aa <__aeabi_dmul+0x17a>
 8001604:	2902      	cmp	r1, #2
 8001606:	d04c      	beq.n	80016a2 <__aeabi_dmul+0x172>
 8001608:	2901      	cmp	r1, #1
 800160a:	d000      	beq.n	800160e <__aeabi_dmul+0xde>
 800160c:	e118      	b.n	8001840 <__aeabi_dmul+0x310>
 800160e:	2300      	movs	r3, #0
 8001610:	2400      	movs	r4, #0
 8001612:	2500      	movs	r5, #0
 8001614:	051b      	lsls	r3, r3, #20
 8001616:	4323      	orrs	r3, r4
 8001618:	07d2      	lsls	r2, r2, #31
 800161a:	4313      	orrs	r3, r2
 800161c:	0028      	movs	r0, r5
 800161e:	0019      	movs	r1, r3
 8001620:	b007      	add	sp, #28
 8001622:	bcf0      	pop	{r4, r5, r6, r7}
 8001624:	46bb      	mov	fp, r7
 8001626:	46b2      	mov	sl, r6
 8001628:	46a9      	mov	r9, r5
 800162a:	46a0      	mov	r8, r4
 800162c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800162e:	2180      	movs	r1, #128	; 0x80
 8001630:	2203      	movs	r2, #3
 8001632:	0109      	lsls	r1, r1, #4
 8001634:	002b      	movs	r3, r5
 8001636:	468c      	mov	ip, r1
 8001638:	4316      	orrs	r6, r2
 800163a:	4642      	mov	r2, r8
 800163c:	4463      	add	r3, ip
 800163e:	407a      	eors	r2, r7
 8001640:	b2d2      	uxtb	r2, r2
 8001642:	9302      	str	r3, [sp, #8]
 8001644:	2e0a      	cmp	r6, #10
 8001646:	dd00      	ble.n	800164a <__aeabi_dmul+0x11a>
 8001648:	e228      	b.n	8001a9c <__aeabi_dmul+0x56c>
 800164a:	2103      	movs	r1, #3
 800164c:	2501      	movs	r5, #1
 800164e:	40b5      	lsls	r5, r6
 8001650:	46ac      	mov	ip, r5
 8001652:	26a6      	movs	r6, #166	; 0xa6
 8001654:	4663      	mov	r3, ip
 8001656:	00f6      	lsls	r6, r6, #3
 8001658:	4035      	ands	r5, r6
 800165a:	4233      	tst	r3, r6
 800165c:	d10b      	bne.n	8001676 <__aeabi_dmul+0x146>
 800165e:	2690      	movs	r6, #144	; 0x90
 8001660:	00b6      	lsls	r6, r6, #2
 8001662:	4233      	tst	r3, r6
 8001664:	d118      	bne.n	8001698 <__aeabi_dmul+0x168>
 8001666:	3eb9      	subs	r6, #185	; 0xb9
 8001668:	3eff      	subs	r6, #255	; 0xff
 800166a:	421e      	tst	r6, r3
 800166c:	d01d      	beq.n	80016aa <__aeabi_dmul+0x17a>
 800166e:	46a3      	mov	fp, r4
 8001670:	4682      	mov	sl, r0
 8001672:	9100      	str	r1, [sp, #0]
 8001674:	e000      	b.n	8001678 <__aeabi_dmul+0x148>
 8001676:	0017      	movs	r7, r2
 8001678:	9900      	ldr	r1, [sp, #0]
 800167a:	003a      	movs	r2, r7
 800167c:	2902      	cmp	r1, #2
 800167e:	d010      	beq.n	80016a2 <__aeabi_dmul+0x172>
 8001680:	465c      	mov	r4, fp
 8001682:	4650      	mov	r0, sl
 8001684:	2903      	cmp	r1, #3
 8001686:	d1bf      	bne.n	8001608 <__aeabi_dmul+0xd8>
 8001688:	2380      	movs	r3, #128	; 0x80
 800168a:	031b      	lsls	r3, r3, #12
 800168c:	431c      	orrs	r4, r3
 800168e:	0324      	lsls	r4, r4, #12
 8001690:	0005      	movs	r5, r0
 8001692:	4b7f      	ldr	r3, [pc, #508]	; (8001890 <__aeabi_dmul+0x360>)
 8001694:	0b24      	lsrs	r4, r4, #12
 8001696:	e7bd      	b.n	8001614 <__aeabi_dmul+0xe4>
 8001698:	2480      	movs	r4, #128	; 0x80
 800169a:	2200      	movs	r2, #0
 800169c:	4b7c      	ldr	r3, [pc, #496]	; (8001890 <__aeabi_dmul+0x360>)
 800169e:	0324      	lsls	r4, r4, #12
 80016a0:	e7b8      	b.n	8001614 <__aeabi_dmul+0xe4>
 80016a2:	2400      	movs	r4, #0
 80016a4:	2500      	movs	r5, #0
 80016a6:	4b7a      	ldr	r3, [pc, #488]	; (8001890 <__aeabi_dmul+0x360>)
 80016a8:	e7b4      	b.n	8001614 <__aeabi_dmul+0xe4>
 80016aa:	4653      	mov	r3, sl
 80016ac:	041e      	lsls	r6, r3, #16
 80016ae:	0c36      	lsrs	r6, r6, #16
 80016b0:	0c1f      	lsrs	r7, r3, #16
 80016b2:	0033      	movs	r3, r6
 80016b4:	0c01      	lsrs	r1, r0, #16
 80016b6:	0400      	lsls	r0, r0, #16
 80016b8:	0c00      	lsrs	r0, r0, #16
 80016ba:	4343      	muls	r3, r0
 80016bc:	4698      	mov	r8, r3
 80016be:	0003      	movs	r3, r0
 80016c0:	437b      	muls	r3, r7
 80016c2:	4699      	mov	r9, r3
 80016c4:	0033      	movs	r3, r6
 80016c6:	434b      	muls	r3, r1
 80016c8:	469c      	mov	ip, r3
 80016ca:	4643      	mov	r3, r8
 80016cc:	000d      	movs	r5, r1
 80016ce:	0c1b      	lsrs	r3, r3, #16
 80016d0:	469a      	mov	sl, r3
 80016d2:	437d      	muls	r5, r7
 80016d4:	44cc      	add	ip, r9
 80016d6:	44d4      	add	ip, sl
 80016d8:	9500      	str	r5, [sp, #0]
 80016da:	45e1      	cmp	r9, ip
 80016dc:	d904      	bls.n	80016e8 <__aeabi_dmul+0x1b8>
 80016de:	2380      	movs	r3, #128	; 0x80
 80016e0:	025b      	lsls	r3, r3, #9
 80016e2:	4699      	mov	r9, r3
 80016e4:	444d      	add	r5, r9
 80016e6:	9500      	str	r5, [sp, #0]
 80016e8:	4663      	mov	r3, ip
 80016ea:	0c1b      	lsrs	r3, r3, #16
 80016ec:	001d      	movs	r5, r3
 80016ee:	4663      	mov	r3, ip
 80016f0:	041b      	lsls	r3, r3, #16
 80016f2:	469c      	mov	ip, r3
 80016f4:	4643      	mov	r3, r8
 80016f6:	041b      	lsls	r3, r3, #16
 80016f8:	0c1b      	lsrs	r3, r3, #16
 80016fa:	4698      	mov	r8, r3
 80016fc:	4663      	mov	r3, ip
 80016fe:	4443      	add	r3, r8
 8001700:	9303      	str	r3, [sp, #12]
 8001702:	0c23      	lsrs	r3, r4, #16
 8001704:	4698      	mov	r8, r3
 8001706:	0033      	movs	r3, r6
 8001708:	0424      	lsls	r4, r4, #16
 800170a:	0c24      	lsrs	r4, r4, #16
 800170c:	4363      	muls	r3, r4
 800170e:	469c      	mov	ip, r3
 8001710:	0023      	movs	r3, r4
 8001712:	437b      	muls	r3, r7
 8001714:	4699      	mov	r9, r3
 8001716:	4643      	mov	r3, r8
 8001718:	435e      	muls	r6, r3
 800171a:	435f      	muls	r7, r3
 800171c:	444e      	add	r6, r9
 800171e:	4663      	mov	r3, ip
 8001720:	46b2      	mov	sl, r6
 8001722:	0c1e      	lsrs	r6, r3, #16
 8001724:	4456      	add	r6, sl
 8001726:	45b1      	cmp	r9, r6
 8001728:	d903      	bls.n	8001732 <__aeabi_dmul+0x202>
 800172a:	2380      	movs	r3, #128	; 0x80
 800172c:	025b      	lsls	r3, r3, #9
 800172e:	4699      	mov	r9, r3
 8001730:	444f      	add	r7, r9
 8001732:	0c33      	lsrs	r3, r6, #16
 8001734:	4699      	mov	r9, r3
 8001736:	003b      	movs	r3, r7
 8001738:	444b      	add	r3, r9
 800173a:	9305      	str	r3, [sp, #20]
 800173c:	4663      	mov	r3, ip
 800173e:	46ac      	mov	ip, r5
 8001740:	041f      	lsls	r7, r3, #16
 8001742:	0c3f      	lsrs	r7, r7, #16
 8001744:	0436      	lsls	r6, r6, #16
 8001746:	19f6      	adds	r6, r6, r7
 8001748:	44b4      	add	ip, r6
 800174a:	4663      	mov	r3, ip
 800174c:	9304      	str	r3, [sp, #16]
 800174e:	465b      	mov	r3, fp
 8001750:	0c1b      	lsrs	r3, r3, #16
 8001752:	469c      	mov	ip, r3
 8001754:	465b      	mov	r3, fp
 8001756:	041f      	lsls	r7, r3, #16
 8001758:	0c3f      	lsrs	r7, r7, #16
 800175a:	003b      	movs	r3, r7
 800175c:	4343      	muls	r3, r0
 800175e:	4699      	mov	r9, r3
 8001760:	4663      	mov	r3, ip
 8001762:	4343      	muls	r3, r0
 8001764:	469a      	mov	sl, r3
 8001766:	464b      	mov	r3, r9
 8001768:	4660      	mov	r0, ip
 800176a:	0c1b      	lsrs	r3, r3, #16
 800176c:	469b      	mov	fp, r3
 800176e:	4348      	muls	r0, r1
 8001770:	4379      	muls	r1, r7
 8001772:	4451      	add	r1, sl
 8001774:	4459      	add	r1, fp
 8001776:	458a      	cmp	sl, r1
 8001778:	d903      	bls.n	8001782 <__aeabi_dmul+0x252>
 800177a:	2380      	movs	r3, #128	; 0x80
 800177c:	025b      	lsls	r3, r3, #9
 800177e:	469a      	mov	sl, r3
 8001780:	4450      	add	r0, sl
 8001782:	0c0b      	lsrs	r3, r1, #16
 8001784:	469a      	mov	sl, r3
 8001786:	464b      	mov	r3, r9
 8001788:	041b      	lsls	r3, r3, #16
 800178a:	0c1b      	lsrs	r3, r3, #16
 800178c:	4699      	mov	r9, r3
 800178e:	003b      	movs	r3, r7
 8001790:	4363      	muls	r3, r4
 8001792:	0409      	lsls	r1, r1, #16
 8001794:	4645      	mov	r5, r8
 8001796:	4449      	add	r1, r9
 8001798:	4699      	mov	r9, r3
 800179a:	4663      	mov	r3, ip
 800179c:	435c      	muls	r4, r3
 800179e:	436b      	muls	r3, r5
 80017a0:	469c      	mov	ip, r3
 80017a2:	464b      	mov	r3, r9
 80017a4:	0c1b      	lsrs	r3, r3, #16
 80017a6:	4698      	mov	r8, r3
 80017a8:	436f      	muls	r7, r5
 80017aa:	193f      	adds	r7, r7, r4
 80017ac:	4447      	add	r7, r8
 80017ae:	4450      	add	r0, sl
 80017b0:	42bc      	cmp	r4, r7
 80017b2:	d903      	bls.n	80017bc <__aeabi_dmul+0x28c>
 80017b4:	2380      	movs	r3, #128	; 0x80
 80017b6:	025b      	lsls	r3, r3, #9
 80017b8:	4698      	mov	r8, r3
 80017ba:	44c4      	add	ip, r8
 80017bc:	9b04      	ldr	r3, [sp, #16]
 80017be:	9d00      	ldr	r5, [sp, #0]
 80017c0:	4698      	mov	r8, r3
 80017c2:	4445      	add	r5, r8
 80017c4:	42b5      	cmp	r5, r6
 80017c6:	41b6      	sbcs	r6, r6
 80017c8:	4273      	negs	r3, r6
 80017ca:	4698      	mov	r8, r3
 80017cc:	464b      	mov	r3, r9
 80017ce:	041e      	lsls	r6, r3, #16
 80017d0:	9b05      	ldr	r3, [sp, #20]
 80017d2:	043c      	lsls	r4, r7, #16
 80017d4:	4699      	mov	r9, r3
 80017d6:	0c36      	lsrs	r6, r6, #16
 80017d8:	19a4      	adds	r4, r4, r6
 80017da:	444c      	add	r4, r9
 80017dc:	46a1      	mov	r9, r4
 80017de:	4683      	mov	fp, r0
 80017e0:	186e      	adds	r6, r5, r1
 80017e2:	44c1      	add	r9, r8
 80017e4:	428e      	cmp	r6, r1
 80017e6:	4189      	sbcs	r1, r1
 80017e8:	44cb      	add	fp, r9
 80017ea:	465d      	mov	r5, fp
 80017ec:	4249      	negs	r1, r1
 80017ee:	186d      	adds	r5, r5, r1
 80017f0:	429c      	cmp	r4, r3
 80017f2:	41a4      	sbcs	r4, r4
 80017f4:	45c1      	cmp	r9, r8
 80017f6:	419b      	sbcs	r3, r3
 80017f8:	4583      	cmp	fp, r0
 80017fa:	4180      	sbcs	r0, r0
 80017fc:	428d      	cmp	r5, r1
 80017fe:	4189      	sbcs	r1, r1
 8001800:	425b      	negs	r3, r3
 8001802:	4264      	negs	r4, r4
 8001804:	431c      	orrs	r4, r3
 8001806:	4240      	negs	r0, r0
 8001808:	9b03      	ldr	r3, [sp, #12]
 800180a:	4249      	negs	r1, r1
 800180c:	4301      	orrs	r1, r0
 800180e:	0270      	lsls	r0, r6, #9
 8001810:	0c3f      	lsrs	r7, r7, #16
 8001812:	4318      	orrs	r0, r3
 8001814:	19e4      	adds	r4, r4, r7
 8001816:	1e47      	subs	r7, r0, #1
 8001818:	41b8      	sbcs	r0, r7
 800181a:	1864      	adds	r4, r4, r1
 800181c:	4464      	add	r4, ip
 800181e:	0df6      	lsrs	r6, r6, #23
 8001820:	0261      	lsls	r1, r4, #9
 8001822:	4330      	orrs	r0, r6
 8001824:	0dec      	lsrs	r4, r5, #23
 8001826:	026e      	lsls	r6, r5, #9
 8001828:	430c      	orrs	r4, r1
 800182a:	4330      	orrs	r0, r6
 800182c:	01c9      	lsls	r1, r1, #7
 800182e:	d400      	bmi.n	8001832 <__aeabi_dmul+0x302>
 8001830:	e0f1      	b.n	8001a16 <__aeabi_dmul+0x4e6>
 8001832:	2101      	movs	r1, #1
 8001834:	0843      	lsrs	r3, r0, #1
 8001836:	4001      	ands	r1, r0
 8001838:	430b      	orrs	r3, r1
 800183a:	07e0      	lsls	r0, r4, #31
 800183c:	4318      	orrs	r0, r3
 800183e:	0864      	lsrs	r4, r4, #1
 8001840:	4915      	ldr	r1, [pc, #84]	; (8001898 <__aeabi_dmul+0x368>)
 8001842:	9b02      	ldr	r3, [sp, #8]
 8001844:	468c      	mov	ip, r1
 8001846:	4463      	add	r3, ip
 8001848:	2b00      	cmp	r3, #0
 800184a:	dc00      	bgt.n	800184e <__aeabi_dmul+0x31e>
 800184c:	e097      	b.n	800197e <__aeabi_dmul+0x44e>
 800184e:	0741      	lsls	r1, r0, #29
 8001850:	d009      	beq.n	8001866 <__aeabi_dmul+0x336>
 8001852:	210f      	movs	r1, #15
 8001854:	4001      	ands	r1, r0
 8001856:	2904      	cmp	r1, #4
 8001858:	d005      	beq.n	8001866 <__aeabi_dmul+0x336>
 800185a:	1d01      	adds	r1, r0, #4
 800185c:	4281      	cmp	r1, r0
 800185e:	4180      	sbcs	r0, r0
 8001860:	4240      	negs	r0, r0
 8001862:	1824      	adds	r4, r4, r0
 8001864:	0008      	movs	r0, r1
 8001866:	01e1      	lsls	r1, r4, #7
 8001868:	d506      	bpl.n	8001878 <__aeabi_dmul+0x348>
 800186a:	2180      	movs	r1, #128	; 0x80
 800186c:	00c9      	lsls	r1, r1, #3
 800186e:	468c      	mov	ip, r1
 8001870:	4b0a      	ldr	r3, [pc, #40]	; (800189c <__aeabi_dmul+0x36c>)
 8001872:	401c      	ands	r4, r3
 8001874:	9b02      	ldr	r3, [sp, #8]
 8001876:	4463      	add	r3, ip
 8001878:	4909      	ldr	r1, [pc, #36]	; (80018a0 <__aeabi_dmul+0x370>)
 800187a:	428b      	cmp	r3, r1
 800187c:	dd00      	ble.n	8001880 <__aeabi_dmul+0x350>
 800187e:	e710      	b.n	80016a2 <__aeabi_dmul+0x172>
 8001880:	0761      	lsls	r1, r4, #29
 8001882:	08c5      	lsrs	r5, r0, #3
 8001884:	0264      	lsls	r4, r4, #9
 8001886:	055b      	lsls	r3, r3, #21
 8001888:	430d      	orrs	r5, r1
 800188a:	0b24      	lsrs	r4, r4, #12
 800188c:	0d5b      	lsrs	r3, r3, #21
 800188e:	e6c1      	b.n	8001614 <__aeabi_dmul+0xe4>
 8001890:	000007ff 	.word	0x000007ff
 8001894:	fffffc01 	.word	0xfffffc01
 8001898:	000003ff 	.word	0x000003ff
 800189c:	feffffff 	.word	0xfeffffff
 80018a0:	000007fe 	.word	0x000007fe
 80018a4:	464b      	mov	r3, r9
 80018a6:	4323      	orrs	r3, r4
 80018a8:	d059      	beq.n	800195e <__aeabi_dmul+0x42e>
 80018aa:	2c00      	cmp	r4, #0
 80018ac:	d100      	bne.n	80018b0 <__aeabi_dmul+0x380>
 80018ae:	e0a3      	b.n	80019f8 <__aeabi_dmul+0x4c8>
 80018b0:	0020      	movs	r0, r4
 80018b2:	f000 fd2b 	bl	800230c <__clzsi2>
 80018b6:	0001      	movs	r1, r0
 80018b8:	0003      	movs	r3, r0
 80018ba:	390b      	subs	r1, #11
 80018bc:	221d      	movs	r2, #29
 80018be:	1a52      	subs	r2, r2, r1
 80018c0:	4649      	mov	r1, r9
 80018c2:	0018      	movs	r0, r3
 80018c4:	40d1      	lsrs	r1, r2
 80018c6:	464a      	mov	r2, r9
 80018c8:	3808      	subs	r0, #8
 80018ca:	4082      	lsls	r2, r0
 80018cc:	4084      	lsls	r4, r0
 80018ce:	0010      	movs	r0, r2
 80018d0:	430c      	orrs	r4, r1
 80018d2:	4a74      	ldr	r2, [pc, #464]	; (8001aa4 <__aeabi_dmul+0x574>)
 80018d4:	1aeb      	subs	r3, r5, r3
 80018d6:	4694      	mov	ip, r2
 80018d8:	4642      	mov	r2, r8
 80018da:	4463      	add	r3, ip
 80018dc:	9301      	str	r3, [sp, #4]
 80018de:	9b01      	ldr	r3, [sp, #4]
 80018e0:	407a      	eors	r2, r7
 80018e2:	3301      	adds	r3, #1
 80018e4:	2100      	movs	r1, #0
 80018e6:	b2d2      	uxtb	r2, r2
 80018e8:	9302      	str	r3, [sp, #8]
 80018ea:	2e0a      	cmp	r6, #10
 80018ec:	dd00      	ble.n	80018f0 <__aeabi_dmul+0x3c0>
 80018ee:	e667      	b.n	80015c0 <__aeabi_dmul+0x90>
 80018f0:	e683      	b.n	80015fa <__aeabi_dmul+0xca>
 80018f2:	465b      	mov	r3, fp
 80018f4:	4303      	orrs	r3, r0
 80018f6:	469a      	mov	sl, r3
 80018f8:	d02a      	beq.n	8001950 <__aeabi_dmul+0x420>
 80018fa:	465b      	mov	r3, fp
 80018fc:	2b00      	cmp	r3, #0
 80018fe:	d06d      	beq.n	80019dc <__aeabi_dmul+0x4ac>
 8001900:	4658      	mov	r0, fp
 8001902:	f000 fd03 	bl	800230c <__clzsi2>
 8001906:	0001      	movs	r1, r0
 8001908:	0003      	movs	r3, r0
 800190a:	390b      	subs	r1, #11
 800190c:	221d      	movs	r2, #29
 800190e:	1a52      	subs	r2, r2, r1
 8001910:	0021      	movs	r1, r4
 8001912:	0018      	movs	r0, r3
 8001914:	465d      	mov	r5, fp
 8001916:	40d1      	lsrs	r1, r2
 8001918:	3808      	subs	r0, #8
 800191a:	4085      	lsls	r5, r0
 800191c:	000a      	movs	r2, r1
 800191e:	4084      	lsls	r4, r0
 8001920:	432a      	orrs	r2, r5
 8001922:	4693      	mov	fp, r2
 8001924:	46a2      	mov	sl, r4
 8001926:	4d5f      	ldr	r5, [pc, #380]	; (8001aa4 <__aeabi_dmul+0x574>)
 8001928:	2600      	movs	r6, #0
 800192a:	1aed      	subs	r5, r5, r3
 800192c:	2300      	movs	r3, #0
 800192e:	9300      	str	r3, [sp, #0]
 8001930:	e625      	b.n	800157e <__aeabi_dmul+0x4e>
 8001932:	465b      	mov	r3, fp
 8001934:	4303      	orrs	r3, r0
 8001936:	469a      	mov	sl, r3
 8001938:	d105      	bne.n	8001946 <__aeabi_dmul+0x416>
 800193a:	2300      	movs	r3, #0
 800193c:	469b      	mov	fp, r3
 800193e:	3302      	adds	r3, #2
 8001940:	2608      	movs	r6, #8
 8001942:	9300      	str	r3, [sp, #0]
 8001944:	e61b      	b.n	800157e <__aeabi_dmul+0x4e>
 8001946:	2303      	movs	r3, #3
 8001948:	4682      	mov	sl, r0
 800194a:	260c      	movs	r6, #12
 800194c:	9300      	str	r3, [sp, #0]
 800194e:	e616      	b.n	800157e <__aeabi_dmul+0x4e>
 8001950:	2300      	movs	r3, #0
 8001952:	469b      	mov	fp, r3
 8001954:	3301      	adds	r3, #1
 8001956:	2604      	movs	r6, #4
 8001958:	2500      	movs	r5, #0
 800195a:	9300      	str	r3, [sp, #0]
 800195c:	e60f      	b.n	800157e <__aeabi_dmul+0x4e>
 800195e:	4642      	mov	r2, r8
 8001960:	3301      	adds	r3, #1
 8001962:	9501      	str	r5, [sp, #4]
 8001964:	431e      	orrs	r6, r3
 8001966:	9b01      	ldr	r3, [sp, #4]
 8001968:	407a      	eors	r2, r7
 800196a:	3301      	adds	r3, #1
 800196c:	2400      	movs	r4, #0
 800196e:	2000      	movs	r0, #0
 8001970:	2101      	movs	r1, #1
 8001972:	b2d2      	uxtb	r2, r2
 8001974:	9302      	str	r3, [sp, #8]
 8001976:	2e0a      	cmp	r6, #10
 8001978:	dd00      	ble.n	800197c <__aeabi_dmul+0x44c>
 800197a:	e621      	b.n	80015c0 <__aeabi_dmul+0x90>
 800197c:	e63d      	b.n	80015fa <__aeabi_dmul+0xca>
 800197e:	2101      	movs	r1, #1
 8001980:	1ac9      	subs	r1, r1, r3
 8001982:	2938      	cmp	r1, #56	; 0x38
 8001984:	dd00      	ble.n	8001988 <__aeabi_dmul+0x458>
 8001986:	e642      	b.n	800160e <__aeabi_dmul+0xde>
 8001988:	291f      	cmp	r1, #31
 800198a:	dd47      	ble.n	8001a1c <__aeabi_dmul+0x4ec>
 800198c:	261f      	movs	r6, #31
 800198e:	0025      	movs	r5, r4
 8001990:	4276      	negs	r6, r6
 8001992:	1af3      	subs	r3, r6, r3
 8001994:	40dd      	lsrs	r5, r3
 8001996:	002b      	movs	r3, r5
 8001998:	2920      	cmp	r1, #32
 800199a:	d005      	beq.n	80019a8 <__aeabi_dmul+0x478>
 800199c:	4942      	ldr	r1, [pc, #264]	; (8001aa8 <__aeabi_dmul+0x578>)
 800199e:	9d02      	ldr	r5, [sp, #8]
 80019a0:	468c      	mov	ip, r1
 80019a2:	4465      	add	r5, ip
 80019a4:	40ac      	lsls	r4, r5
 80019a6:	4320      	orrs	r0, r4
 80019a8:	1e41      	subs	r1, r0, #1
 80019aa:	4188      	sbcs	r0, r1
 80019ac:	4318      	orrs	r0, r3
 80019ae:	2307      	movs	r3, #7
 80019b0:	001d      	movs	r5, r3
 80019b2:	2400      	movs	r4, #0
 80019b4:	4005      	ands	r5, r0
 80019b6:	4203      	tst	r3, r0
 80019b8:	d04a      	beq.n	8001a50 <__aeabi_dmul+0x520>
 80019ba:	230f      	movs	r3, #15
 80019bc:	2400      	movs	r4, #0
 80019be:	4003      	ands	r3, r0
 80019c0:	2b04      	cmp	r3, #4
 80019c2:	d042      	beq.n	8001a4a <__aeabi_dmul+0x51a>
 80019c4:	1d03      	adds	r3, r0, #4
 80019c6:	4283      	cmp	r3, r0
 80019c8:	4180      	sbcs	r0, r0
 80019ca:	4240      	negs	r0, r0
 80019cc:	1824      	adds	r4, r4, r0
 80019ce:	0018      	movs	r0, r3
 80019d0:	0223      	lsls	r3, r4, #8
 80019d2:	d53a      	bpl.n	8001a4a <__aeabi_dmul+0x51a>
 80019d4:	2301      	movs	r3, #1
 80019d6:	2400      	movs	r4, #0
 80019d8:	2500      	movs	r5, #0
 80019da:	e61b      	b.n	8001614 <__aeabi_dmul+0xe4>
 80019dc:	f000 fc96 	bl	800230c <__clzsi2>
 80019e0:	0001      	movs	r1, r0
 80019e2:	0003      	movs	r3, r0
 80019e4:	3115      	adds	r1, #21
 80019e6:	3320      	adds	r3, #32
 80019e8:	291c      	cmp	r1, #28
 80019ea:	dd8f      	ble.n	800190c <__aeabi_dmul+0x3dc>
 80019ec:	3808      	subs	r0, #8
 80019ee:	2200      	movs	r2, #0
 80019f0:	4084      	lsls	r4, r0
 80019f2:	4692      	mov	sl, r2
 80019f4:	46a3      	mov	fp, r4
 80019f6:	e796      	b.n	8001926 <__aeabi_dmul+0x3f6>
 80019f8:	f000 fc88 	bl	800230c <__clzsi2>
 80019fc:	0001      	movs	r1, r0
 80019fe:	0003      	movs	r3, r0
 8001a00:	3115      	adds	r1, #21
 8001a02:	3320      	adds	r3, #32
 8001a04:	291c      	cmp	r1, #28
 8001a06:	dc00      	bgt.n	8001a0a <__aeabi_dmul+0x4da>
 8001a08:	e758      	b.n	80018bc <__aeabi_dmul+0x38c>
 8001a0a:	0002      	movs	r2, r0
 8001a0c:	464c      	mov	r4, r9
 8001a0e:	3a08      	subs	r2, #8
 8001a10:	2000      	movs	r0, #0
 8001a12:	4094      	lsls	r4, r2
 8001a14:	e75d      	b.n	80018d2 <__aeabi_dmul+0x3a2>
 8001a16:	9b01      	ldr	r3, [sp, #4]
 8001a18:	9302      	str	r3, [sp, #8]
 8001a1a:	e711      	b.n	8001840 <__aeabi_dmul+0x310>
 8001a1c:	4b23      	ldr	r3, [pc, #140]	; (8001aac <__aeabi_dmul+0x57c>)
 8001a1e:	0026      	movs	r6, r4
 8001a20:	469c      	mov	ip, r3
 8001a22:	0003      	movs	r3, r0
 8001a24:	9d02      	ldr	r5, [sp, #8]
 8001a26:	40cb      	lsrs	r3, r1
 8001a28:	4465      	add	r5, ip
 8001a2a:	40ae      	lsls	r6, r5
 8001a2c:	431e      	orrs	r6, r3
 8001a2e:	0003      	movs	r3, r0
 8001a30:	40ab      	lsls	r3, r5
 8001a32:	1e58      	subs	r0, r3, #1
 8001a34:	4183      	sbcs	r3, r0
 8001a36:	0030      	movs	r0, r6
 8001a38:	4318      	orrs	r0, r3
 8001a3a:	40cc      	lsrs	r4, r1
 8001a3c:	0743      	lsls	r3, r0, #29
 8001a3e:	d0c7      	beq.n	80019d0 <__aeabi_dmul+0x4a0>
 8001a40:	230f      	movs	r3, #15
 8001a42:	4003      	ands	r3, r0
 8001a44:	2b04      	cmp	r3, #4
 8001a46:	d1bd      	bne.n	80019c4 <__aeabi_dmul+0x494>
 8001a48:	e7c2      	b.n	80019d0 <__aeabi_dmul+0x4a0>
 8001a4a:	0765      	lsls	r5, r4, #29
 8001a4c:	0264      	lsls	r4, r4, #9
 8001a4e:	0b24      	lsrs	r4, r4, #12
 8001a50:	08c0      	lsrs	r0, r0, #3
 8001a52:	2300      	movs	r3, #0
 8001a54:	4305      	orrs	r5, r0
 8001a56:	e5dd      	b.n	8001614 <__aeabi_dmul+0xe4>
 8001a58:	2500      	movs	r5, #0
 8001a5a:	2302      	movs	r3, #2
 8001a5c:	2e0f      	cmp	r6, #15
 8001a5e:	d10c      	bne.n	8001a7a <__aeabi_dmul+0x54a>
 8001a60:	2480      	movs	r4, #128	; 0x80
 8001a62:	465b      	mov	r3, fp
 8001a64:	0324      	lsls	r4, r4, #12
 8001a66:	4223      	tst	r3, r4
 8001a68:	d00e      	beq.n	8001a88 <__aeabi_dmul+0x558>
 8001a6a:	4221      	tst	r1, r4
 8001a6c:	d10c      	bne.n	8001a88 <__aeabi_dmul+0x558>
 8001a6e:	430c      	orrs	r4, r1
 8001a70:	0324      	lsls	r4, r4, #12
 8001a72:	003a      	movs	r2, r7
 8001a74:	4b0e      	ldr	r3, [pc, #56]	; (8001ab0 <__aeabi_dmul+0x580>)
 8001a76:	0b24      	lsrs	r4, r4, #12
 8001a78:	e5cc      	b.n	8001614 <__aeabi_dmul+0xe4>
 8001a7a:	2e0b      	cmp	r6, #11
 8001a7c:	d000      	beq.n	8001a80 <__aeabi_dmul+0x550>
 8001a7e:	e5a2      	b.n	80015c6 <__aeabi_dmul+0x96>
 8001a80:	468b      	mov	fp, r1
 8001a82:	46aa      	mov	sl, r5
 8001a84:	9300      	str	r3, [sp, #0]
 8001a86:	e5f7      	b.n	8001678 <__aeabi_dmul+0x148>
 8001a88:	2480      	movs	r4, #128	; 0x80
 8001a8a:	465b      	mov	r3, fp
 8001a8c:	0324      	lsls	r4, r4, #12
 8001a8e:	431c      	orrs	r4, r3
 8001a90:	0324      	lsls	r4, r4, #12
 8001a92:	4642      	mov	r2, r8
 8001a94:	4655      	mov	r5, sl
 8001a96:	4b06      	ldr	r3, [pc, #24]	; (8001ab0 <__aeabi_dmul+0x580>)
 8001a98:	0b24      	lsrs	r4, r4, #12
 8001a9a:	e5bb      	b.n	8001614 <__aeabi_dmul+0xe4>
 8001a9c:	464d      	mov	r5, r9
 8001a9e:	0021      	movs	r1, r4
 8001aa0:	2303      	movs	r3, #3
 8001aa2:	e7db      	b.n	8001a5c <__aeabi_dmul+0x52c>
 8001aa4:	fffffc0d 	.word	0xfffffc0d
 8001aa8:	0000043e 	.word	0x0000043e
 8001aac:	0000041e 	.word	0x0000041e
 8001ab0:	000007ff 	.word	0x000007ff

08001ab4 <__aeabi_dsub>:
 8001ab4:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001ab6:	4657      	mov	r7, sl
 8001ab8:	464e      	mov	r6, r9
 8001aba:	4645      	mov	r5, r8
 8001abc:	46de      	mov	lr, fp
 8001abe:	b5e0      	push	{r5, r6, r7, lr}
 8001ac0:	000d      	movs	r5, r1
 8001ac2:	0004      	movs	r4, r0
 8001ac4:	0019      	movs	r1, r3
 8001ac6:	0010      	movs	r0, r2
 8001ac8:	032b      	lsls	r3, r5, #12
 8001aca:	0a5b      	lsrs	r3, r3, #9
 8001acc:	0f62      	lsrs	r2, r4, #29
 8001ace:	431a      	orrs	r2, r3
 8001ad0:	00e3      	lsls	r3, r4, #3
 8001ad2:	030c      	lsls	r4, r1, #12
 8001ad4:	0a64      	lsrs	r4, r4, #9
 8001ad6:	0f47      	lsrs	r7, r0, #29
 8001ad8:	4327      	orrs	r7, r4
 8001ada:	4cd0      	ldr	r4, [pc, #832]	; (8001e1c <__aeabi_dsub+0x368>)
 8001adc:	006e      	lsls	r6, r5, #1
 8001ade:	4691      	mov	r9, r2
 8001ae0:	b083      	sub	sp, #12
 8001ae2:	004a      	lsls	r2, r1, #1
 8001ae4:	00c0      	lsls	r0, r0, #3
 8001ae6:	4698      	mov	r8, r3
 8001ae8:	46a2      	mov	sl, r4
 8001aea:	0d76      	lsrs	r6, r6, #21
 8001aec:	0fed      	lsrs	r5, r5, #31
 8001aee:	0d52      	lsrs	r2, r2, #21
 8001af0:	0fc9      	lsrs	r1, r1, #31
 8001af2:	9001      	str	r0, [sp, #4]
 8001af4:	42a2      	cmp	r2, r4
 8001af6:	d100      	bne.n	8001afa <__aeabi_dsub+0x46>
 8001af8:	e0b9      	b.n	8001c6e <__aeabi_dsub+0x1ba>
 8001afa:	2401      	movs	r4, #1
 8001afc:	4061      	eors	r1, r4
 8001afe:	468b      	mov	fp, r1
 8001b00:	428d      	cmp	r5, r1
 8001b02:	d100      	bne.n	8001b06 <__aeabi_dsub+0x52>
 8001b04:	e08d      	b.n	8001c22 <__aeabi_dsub+0x16e>
 8001b06:	1ab4      	subs	r4, r6, r2
 8001b08:	46a4      	mov	ip, r4
 8001b0a:	2c00      	cmp	r4, #0
 8001b0c:	dc00      	bgt.n	8001b10 <__aeabi_dsub+0x5c>
 8001b0e:	e0b7      	b.n	8001c80 <__aeabi_dsub+0x1cc>
 8001b10:	2a00      	cmp	r2, #0
 8001b12:	d100      	bne.n	8001b16 <__aeabi_dsub+0x62>
 8001b14:	e0cb      	b.n	8001cae <__aeabi_dsub+0x1fa>
 8001b16:	4ac1      	ldr	r2, [pc, #772]	; (8001e1c <__aeabi_dsub+0x368>)
 8001b18:	4296      	cmp	r6, r2
 8001b1a:	d100      	bne.n	8001b1e <__aeabi_dsub+0x6a>
 8001b1c:	e186      	b.n	8001e2c <__aeabi_dsub+0x378>
 8001b1e:	2280      	movs	r2, #128	; 0x80
 8001b20:	0412      	lsls	r2, r2, #16
 8001b22:	4317      	orrs	r7, r2
 8001b24:	4662      	mov	r2, ip
 8001b26:	2a38      	cmp	r2, #56	; 0x38
 8001b28:	dd00      	ble.n	8001b2c <__aeabi_dsub+0x78>
 8001b2a:	e1a4      	b.n	8001e76 <__aeabi_dsub+0x3c2>
 8001b2c:	2a1f      	cmp	r2, #31
 8001b2e:	dd00      	ble.n	8001b32 <__aeabi_dsub+0x7e>
 8001b30:	e21d      	b.n	8001f6e <__aeabi_dsub+0x4ba>
 8001b32:	4661      	mov	r1, ip
 8001b34:	2220      	movs	r2, #32
 8001b36:	003c      	movs	r4, r7
 8001b38:	1a52      	subs	r2, r2, r1
 8001b3a:	0001      	movs	r1, r0
 8001b3c:	4090      	lsls	r0, r2
 8001b3e:	4094      	lsls	r4, r2
 8001b40:	1e42      	subs	r2, r0, #1
 8001b42:	4190      	sbcs	r0, r2
 8001b44:	4662      	mov	r2, ip
 8001b46:	46a0      	mov	r8, r4
 8001b48:	4664      	mov	r4, ip
 8001b4a:	40d7      	lsrs	r7, r2
 8001b4c:	464a      	mov	r2, r9
 8001b4e:	40e1      	lsrs	r1, r4
 8001b50:	4644      	mov	r4, r8
 8001b52:	1bd2      	subs	r2, r2, r7
 8001b54:	4691      	mov	r9, r2
 8001b56:	430c      	orrs	r4, r1
 8001b58:	4304      	orrs	r4, r0
 8001b5a:	1b1c      	subs	r4, r3, r4
 8001b5c:	42a3      	cmp	r3, r4
 8001b5e:	4192      	sbcs	r2, r2
 8001b60:	464b      	mov	r3, r9
 8001b62:	4252      	negs	r2, r2
 8001b64:	1a9b      	subs	r3, r3, r2
 8001b66:	469a      	mov	sl, r3
 8001b68:	4653      	mov	r3, sl
 8001b6a:	021b      	lsls	r3, r3, #8
 8001b6c:	d400      	bmi.n	8001b70 <__aeabi_dsub+0xbc>
 8001b6e:	e12b      	b.n	8001dc8 <__aeabi_dsub+0x314>
 8001b70:	4653      	mov	r3, sl
 8001b72:	025a      	lsls	r2, r3, #9
 8001b74:	0a53      	lsrs	r3, r2, #9
 8001b76:	469a      	mov	sl, r3
 8001b78:	4653      	mov	r3, sl
 8001b7a:	2b00      	cmp	r3, #0
 8001b7c:	d100      	bne.n	8001b80 <__aeabi_dsub+0xcc>
 8001b7e:	e166      	b.n	8001e4e <__aeabi_dsub+0x39a>
 8001b80:	4650      	mov	r0, sl
 8001b82:	f000 fbc3 	bl	800230c <__clzsi2>
 8001b86:	0003      	movs	r3, r0
 8001b88:	3b08      	subs	r3, #8
 8001b8a:	2220      	movs	r2, #32
 8001b8c:	0020      	movs	r0, r4
 8001b8e:	1ad2      	subs	r2, r2, r3
 8001b90:	4651      	mov	r1, sl
 8001b92:	40d0      	lsrs	r0, r2
 8001b94:	4099      	lsls	r1, r3
 8001b96:	0002      	movs	r2, r0
 8001b98:	409c      	lsls	r4, r3
 8001b9a:	430a      	orrs	r2, r1
 8001b9c:	429e      	cmp	r6, r3
 8001b9e:	dd00      	ble.n	8001ba2 <__aeabi_dsub+0xee>
 8001ba0:	e164      	b.n	8001e6c <__aeabi_dsub+0x3b8>
 8001ba2:	1b9b      	subs	r3, r3, r6
 8001ba4:	1c59      	adds	r1, r3, #1
 8001ba6:	291f      	cmp	r1, #31
 8001ba8:	dd00      	ble.n	8001bac <__aeabi_dsub+0xf8>
 8001baa:	e0fe      	b.n	8001daa <__aeabi_dsub+0x2f6>
 8001bac:	2320      	movs	r3, #32
 8001bae:	0010      	movs	r0, r2
 8001bb0:	0026      	movs	r6, r4
 8001bb2:	1a5b      	subs	r3, r3, r1
 8001bb4:	409c      	lsls	r4, r3
 8001bb6:	4098      	lsls	r0, r3
 8001bb8:	40ce      	lsrs	r6, r1
 8001bba:	40ca      	lsrs	r2, r1
 8001bbc:	1e63      	subs	r3, r4, #1
 8001bbe:	419c      	sbcs	r4, r3
 8001bc0:	4330      	orrs	r0, r6
 8001bc2:	4692      	mov	sl, r2
 8001bc4:	2600      	movs	r6, #0
 8001bc6:	4304      	orrs	r4, r0
 8001bc8:	0763      	lsls	r3, r4, #29
 8001bca:	d009      	beq.n	8001be0 <__aeabi_dsub+0x12c>
 8001bcc:	230f      	movs	r3, #15
 8001bce:	4023      	ands	r3, r4
 8001bd0:	2b04      	cmp	r3, #4
 8001bd2:	d005      	beq.n	8001be0 <__aeabi_dsub+0x12c>
 8001bd4:	1d23      	adds	r3, r4, #4
 8001bd6:	42a3      	cmp	r3, r4
 8001bd8:	41a4      	sbcs	r4, r4
 8001bda:	4264      	negs	r4, r4
 8001bdc:	44a2      	add	sl, r4
 8001bde:	001c      	movs	r4, r3
 8001be0:	4653      	mov	r3, sl
 8001be2:	021b      	lsls	r3, r3, #8
 8001be4:	d400      	bmi.n	8001be8 <__aeabi_dsub+0x134>
 8001be6:	e0f2      	b.n	8001dce <__aeabi_dsub+0x31a>
 8001be8:	4b8c      	ldr	r3, [pc, #560]	; (8001e1c <__aeabi_dsub+0x368>)
 8001bea:	3601      	adds	r6, #1
 8001bec:	429e      	cmp	r6, r3
 8001bee:	d100      	bne.n	8001bf2 <__aeabi_dsub+0x13e>
 8001bf0:	e10f      	b.n	8001e12 <__aeabi_dsub+0x35e>
 8001bf2:	4653      	mov	r3, sl
 8001bf4:	498a      	ldr	r1, [pc, #552]	; (8001e20 <__aeabi_dsub+0x36c>)
 8001bf6:	08e4      	lsrs	r4, r4, #3
 8001bf8:	400b      	ands	r3, r1
 8001bfa:	0019      	movs	r1, r3
 8001bfc:	075b      	lsls	r3, r3, #29
 8001bfe:	4323      	orrs	r3, r4
 8001c00:	0572      	lsls	r2, r6, #21
 8001c02:	024c      	lsls	r4, r1, #9
 8001c04:	0b24      	lsrs	r4, r4, #12
 8001c06:	0d52      	lsrs	r2, r2, #21
 8001c08:	0512      	lsls	r2, r2, #20
 8001c0a:	4322      	orrs	r2, r4
 8001c0c:	07ed      	lsls	r5, r5, #31
 8001c0e:	432a      	orrs	r2, r5
 8001c10:	0018      	movs	r0, r3
 8001c12:	0011      	movs	r1, r2
 8001c14:	b003      	add	sp, #12
 8001c16:	bcf0      	pop	{r4, r5, r6, r7}
 8001c18:	46bb      	mov	fp, r7
 8001c1a:	46b2      	mov	sl, r6
 8001c1c:	46a9      	mov	r9, r5
 8001c1e:	46a0      	mov	r8, r4
 8001c20:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001c22:	1ab4      	subs	r4, r6, r2
 8001c24:	46a4      	mov	ip, r4
 8001c26:	2c00      	cmp	r4, #0
 8001c28:	dd59      	ble.n	8001cde <__aeabi_dsub+0x22a>
 8001c2a:	2a00      	cmp	r2, #0
 8001c2c:	d100      	bne.n	8001c30 <__aeabi_dsub+0x17c>
 8001c2e:	e0b0      	b.n	8001d92 <__aeabi_dsub+0x2de>
 8001c30:	4556      	cmp	r6, sl
 8001c32:	d100      	bne.n	8001c36 <__aeabi_dsub+0x182>
 8001c34:	e0fa      	b.n	8001e2c <__aeabi_dsub+0x378>
 8001c36:	2280      	movs	r2, #128	; 0x80
 8001c38:	0412      	lsls	r2, r2, #16
 8001c3a:	4317      	orrs	r7, r2
 8001c3c:	4662      	mov	r2, ip
 8001c3e:	2a38      	cmp	r2, #56	; 0x38
 8001c40:	dd00      	ble.n	8001c44 <__aeabi_dsub+0x190>
 8001c42:	e0d4      	b.n	8001dee <__aeabi_dsub+0x33a>
 8001c44:	2a1f      	cmp	r2, #31
 8001c46:	dc00      	bgt.n	8001c4a <__aeabi_dsub+0x196>
 8001c48:	e1c0      	b.n	8001fcc <__aeabi_dsub+0x518>
 8001c4a:	0039      	movs	r1, r7
 8001c4c:	3a20      	subs	r2, #32
 8001c4e:	40d1      	lsrs	r1, r2
 8001c50:	4662      	mov	r2, ip
 8001c52:	2a20      	cmp	r2, #32
 8001c54:	d006      	beq.n	8001c64 <__aeabi_dsub+0x1b0>
 8001c56:	4664      	mov	r4, ip
 8001c58:	2240      	movs	r2, #64	; 0x40
 8001c5a:	1b12      	subs	r2, r2, r4
 8001c5c:	003c      	movs	r4, r7
 8001c5e:	4094      	lsls	r4, r2
 8001c60:	4304      	orrs	r4, r0
 8001c62:	9401      	str	r4, [sp, #4]
 8001c64:	9c01      	ldr	r4, [sp, #4]
 8001c66:	1e62      	subs	r2, r4, #1
 8001c68:	4194      	sbcs	r4, r2
 8001c6a:	430c      	orrs	r4, r1
 8001c6c:	e0c3      	b.n	8001df6 <__aeabi_dsub+0x342>
 8001c6e:	003c      	movs	r4, r7
 8001c70:	4304      	orrs	r4, r0
 8001c72:	d02b      	beq.n	8001ccc <__aeabi_dsub+0x218>
 8001c74:	468b      	mov	fp, r1
 8001c76:	428d      	cmp	r5, r1
 8001c78:	d02e      	beq.n	8001cd8 <__aeabi_dsub+0x224>
 8001c7a:	4c6a      	ldr	r4, [pc, #424]	; (8001e24 <__aeabi_dsub+0x370>)
 8001c7c:	46a4      	mov	ip, r4
 8001c7e:	44b4      	add	ip, r6
 8001c80:	4664      	mov	r4, ip
 8001c82:	2c00      	cmp	r4, #0
 8001c84:	d05f      	beq.n	8001d46 <__aeabi_dsub+0x292>
 8001c86:	1b94      	subs	r4, r2, r6
 8001c88:	46a4      	mov	ip, r4
 8001c8a:	2e00      	cmp	r6, #0
 8001c8c:	d000      	beq.n	8001c90 <__aeabi_dsub+0x1dc>
 8001c8e:	e120      	b.n	8001ed2 <__aeabi_dsub+0x41e>
 8001c90:	464c      	mov	r4, r9
 8001c92:	431c      	orrs	r4, r3
 8001c94:	d100      	bne.n	8001c98 <__aeabi_dsub+0x1e4>
 8001c96:	e1c7      	b.n	8002028 <__aeabi_dsub+0x574>
 8001c98:	4661      	mov	r1, ip
 8001c9a:	1e4c      	subs	r4, r1, #1
 8001c9c:	2901      	cmp	r1, #1
 8001c9e:	d100      	bne.n	8001ca2 <__aeabi_dsub+0x1ee>
 8001ca0:	e223      	b.n	80020ea <__aeabi_dsub+0x636>
 8001ca2:	4d5e      	ldr	r5, [pc, #376]	; (8001e1c <__aeabi_dsub+0x368>)
 8001ca4:	45ac      	cmp	ip, r5
 8001ca6:	d100      	bne.n	8001caa <__aeabi_dsub+0x1f6>
 8001ca8:	e1d8      	b.n	800205c <__aeabi_dsub+0x5a8>
 8001caa:	46a4      	mov	ip, r4
 8001cac:	e11a      	b.n	8001ee4 <__aeabi_dsub+0x430>
 8001cae:	003a      	movs	r2, r7
 8001cb0:	4302      	orrs	r2, r0
 8001cb2:	d100      	bne.n	8001cb6 <__aeabi_dsub+0x202>
 8001cb4:	e0e4      	b.n	8001e80 <__aeabi_dsub+0x3cc>
 8001cb6:	0022      	movs	r2, r4
 8001cb8:	3a01      	subs	r2, #1
 8001cba:	2c01      	cmp	r4, #1
 8001cbc:	d100      	bne.n	8001cc0 <__aeabi_dsub+0x20c>
 8001cbe:	e1c3      	b.n	8002048 <__aeabi_dsub+0x594>
 8001cc0:	4956      	ldr	r1, [pc, #344]	; (8001e1c <__aeabi_dsub+0x368>)
 8001cc2:	428c      	cmp	r4, r1
 8001cc4:	d100      	bne.n	8001cc8 <__aeabi_dsub+0x214>
 8001cc6:	e0b1      	b.n	8001e2c <__aeabi_dsub+0x378>
 8001cc8:	4694      	mov	ip, r2
 8001cca:	e72b      	b.n	8001b24 <__aeabi_dsub+0x70>
 8001ccc:	2401      	movs	r4, #1
 8001cce:	4061      	eors	r1, r4
 8001cd0:	468b      	mov	fp, r1
 8001cd2:	428d      	cmp	r5, r1
 8001cd4:	d000      	beq.n	8001cd8 <__aeabi_dsub+0x224>
 8001cd6:	e716      	b.n	8001b06 <__aeabi_dsub+0x52>
 8001cd8:	4952      	ldr	r1, [pc, #328]	; (8001e24 <__aeabi_dsub+0x370>)
 8001cda:	468c      	mov	ip, r1
 8001cdc:	44b4      	add	ip, r6
 8001cde:	4664      	mov	r4, ip
 8001ce0:	2c00      	cmp	r4, #0
 8001ce2:	d100      	bne.n	8001ce6 <__aeabi_dsub+0x232>
 8001ce4:	e0d3      	b.n	8001e8e <__aeabi_dsub+0x3da>
 8001ce6:	1b91      	subs	r1, r2, r6
 8001ce8:	468c      	mov	ip, r1
 8001cea:	2e00      	cmp	r6, #0
 8001cec:	d100      	bne.n	8001cf0 <__aeabi_dsub+0x23c>
 8001cee:	e15e      	b.n	8001fae <__aeabi_dsub+0x4fa>
 8001cf0:	494a      	ldr	r1, [pc, #296]	; (8001e1c <__aeabi_dsub+0x368>)
 8001cf2:	428a      	cmp	r2, r1
 8001cf4:	d100      	bne.n	8001cf8 <__aeabi_dsub+0x244>
 8001cf6:	e1be      	b.n	8002076 <__aeabi_dsub+0x5c2>
 8001cf8:	2180      	movs	r1, #128	; 0x80
 8001cfa:	464c      	mov	r4, r9
 8001cfc:	0409      	lsls	r1, r1, #16
 8001cfe:	430c      	orrs	r4, r1
 8001d00:	46a1      	mov	r9, r4
 8001d02:	4661      	mov	r1, ip
 8001d04:	2938      	cmp	r1, #56	; 0x38
 8001d06:	dd00      	ble.n	8001d0a <__aeabi_dsub+0x256>
 8001d08:	e1ba      	b.n	8002080 <__aeabi_dsub+0x5cc>
 8001d0a:	291f      	cmp	r1, #31
 8001d0c:	dd00      	ble.n	8001d10 <__aeabi_dsub+0x25c>
 8001d0e:	e227      	b.n	8002160 <__aeabi_dsub+0x6ac>
 8001d10:	2420      	movs	r4, #32
 8001d12:	1a64      	subs	r4, r4, r1
 8001d14:	4649      	mov	r1, r9
 8001d16:	40a1      	lsls	r1, r4
 8001d18:	001e      	movs	r6, r3
 8001d1a:	4688      	mov	r8, r1
 8001d1c:	4661      	mov	r1, ip
 8001d1e:	40a3      	lsls	r3, r4
 8001d20:	40ce      	lsrs	r6, r1
 8001d22:	4641      	mov	r1, r8
 8001d24:	1e5c      	subs	r4, r3, #1
 8001d26:	41a3      	sbcs	r3, r4
 8001d28:	4331      	orrs	r1, r6
 8001d2a:	4319      	orrs	r1, r3
 8001d2c:	000c      	movs	r4, r1
 8001d2e:	4663      	mov	r3, ip
 8001d30:	4649      	mov	r1, r9
 8001d32:	40d9      	lsrs	r1, r3
 8001d34:	187f      	adds	r7, r7, r1
 8001d36:	1824      	adds	r4, r4, r0
 8001d38:	4284      	cmp	r4, r0
 8001d3a:	419b      	sbcs	r3, r3
 8001d3c:	425b      	negs	r3, r3
 8001d3e:	469a      	mov	sl, r3
 8001d40:	0016      	movs	r6, r2
 8001d42:	44ba      	add	sl, r7
 8001d44:	e05d      	b.n	8001e02 <__aeabi_dsub+0x34e>
 8001d46:	4c38      	ldr	r4, [pc, #224]	; (8001e28 <__aeabi_dsub+0x374>)
 8001d48:	1c72      	adds	r2, r6, #1
 8001d4a:	4222      	tst	r2, r4
 8001d4c:	d000      	beq.n	8001d50 <__aeabi_dsub+0x29c>
 8001d4e:	e0df      	b.n	8001f10 <__aeabi_dsub+0x45c>
 8001d50:	464a      	mov	r2, r9
 8001d52:	431a      	orrs	r2, r3
 8001d54:	2e00      	cmp	r6, #0
 8001d56:	d000      	beq.n	8001d5a <__aeabi_dsub+0x2a6>
 8001d58:	e15c      	b.n	8002014 <__aeabi_dsub+0x560>
 8001d5a:	2a00      	cmp	r2, #0
 8001d5c:	d100      	bne.n	8001d60 <__aeabi_dsub+0x2ac>
 8001d5e:	e1cf      	b.n	8002100 <__aeabi_dsub+0x64c>
 8001d60:	003a      	movs	r2, r7
 8001d62:	4302      	orrs	r2, r0
 8001d64:	d100      	bne.n	8001d68 <__aeabi_dsub+0x2b4>
 8001d66:	e17f      	b.n	8002068 <__aeabi_dsub+0x5b4>
 8001d68:	1a1c      	subs	r4, r3, r0
 8001d6a:	464a      	mov	r2, r9
 8001d6c:	42a3      	cmp	r3, r4
 8001d6e:	4189      	sbcs	r1, r1
 8001d70:	1bd2      	subs	r2, r2, r7
 8001d72:	4249      	negs	r1, r1
 8001d74:	1a52      	subs	r2, r2, r1
 8001d76:	4692      	mov	sl, r2
 8001d78:	0212      	lsls	r2, r2, #8
 8001d7a:	d400      	bmi.n	8001d7e <__aeabi_dsub+0x2ca>
 8001d7c:	e20a      	b.n	8002194 <__aeabi_dsub+0x6e0>
 8001d7e:	1ac4      	subs	r4, r0, r3
 8001d80:	42a0      	cmp	r0, r4
 8001d82:	4180      	sbcs	r0, r0
 8001d84:	464b      	mov	r3, r9
 8001d86:	4240      	negs	r0, r0
 8001d88:	1aff      	subs	r7, r7, r3
 8001d8a:	1a3b      	subs	r3, r7, r0
 8001d8c:	469a      	mov	sl, r3
 8001d8e:	465d      	mov	r5, fp
 8001d90:	e71a      	b.n	8001bc8 <__aeabi_dsub+0x114>
 8001d92:	003a      	movs	r2, r7
 8001d94:	4302      	orrs	r2, r0
 8001d96:	d073      	beq.n	8001e80 <__aeabi_dsub+0x3cc>
 8001d98:	0022      	movs	r2, r4
 8001d9a:	3a01      	subs	r2, #1
 8001d9c:	2c01      	cmp	r4, #1
 8001d9e:	d100      	bne.n	8001da2 <__aeabi_dsub+0x2ee>
 8001da0:	e0cb      	b.n	8001f3a <__aeabi_dsub+0x486>
 8001da2:	4554      	cmp	r4, sl
 8001da4:	d042      	beq.n	8001e2c <__aeabi_dsub+0x378>
 8001da6:	4694      	mov	ip, r2
 8001da8:	e748      	b.n	8001c3c <__aeabi_dsub+0x188>
 8001daa:	0010      	movs	r0, r2
 8001dac:	3b1f      	subs	r3, #31
 8001dae:	40d8      	lsrs	r0, r3
 8001db0:	2920      	cmp	r1, #32
 8001db2:	d003      	beq.n	8001dbc <__aeabi_dsub+0x308>
 8001db4:	2340      	movs	r3, #64	; 0x40
 8001db6:	1a5b      	subs	r3, r3, r1
 8001db8:	409a      	lsls	r2, r3
 8001dba:	4314      	orrs	r4, r2
 8001dbc:	1e63      	subs	r3, r4, #1
 8001dbe:	419c      	sbcs	r4, r3
 8001dc0:	2300      	movs	r3, #0
 8001dc2:	2600      	movs	r6, #0
 8001dc4:	469a      	mov	sl, r3
 8001dc6:	4304      	orrs	r4, r0
 8001dc8:	0763      	lsls	r3, r4, #29
 8001dca:	d000      	beq.n	8001dce <__aeabi_dsub+0x31a>
 8001dcc:	e6fe      	b.n	8001bcc <__aeabi_dsub+0x118>
 8001dce:	4652      	mov	r2, sl
 8001dd0:	08e3      	lsrs	r3, r4, #3
 8001dd2:	0752      	lsls	r2, r2, #29
 8001dd4:	4313      	orrs	r3, r2
 8001dd6:	4652      	mov	r2, sl
 8001dd8:	46b4      	mov	ip, r6
 8001dda:	08d2      	lsrs	r2, r2, #3
 8001ddc:	490f      	ldr	r1, [pc, #60]	; (8001e1c <__aeabi_dsub+0x368>)
 8001dde:	458c      	cmp	ip, r1
 8001de0:	d02a      	beq.n	8001e38 <__aeabi_dsub+0x384>
 8001de2:	0312      	lsls	r2, r2, #12
 8001de4:	0b14      	lsrs	r4, r2, #12
 8001de6:	4662      	mov	r2, ip
 8001de8:	0552      	lsls	r2, r2, #21
 8001dea:	0d52      	lsrs	r2, r2, #21
 8001dec:	e70c      	b.n	8001c08 <__aeabi_dsub+0x154>
 8001dee:	003c      	movs	r4, r7
 8001df0:	4304      	orrs	r4, r0
 8001df2:	1e62      	subs	r2, r4, #1
 8001df4:	4194      	sbcs	r4, r2
 8001df6:	18e4      	adds	r4, r4, r3
 8001df8:	429c      	cmp	r4, r3
 8001dfa:	4192      	sbcs	r2, r2
 8001dfc:	4252      	negs	r2, r2
 8001dfe:	444a      	add	r2, r9
 8001e00:	4692      	mov	sl, r2
 8001e02:	4653      	mov	r3, sl
 8001e04:	021b      	lsls	r3, r3, #8
 8001e06:	d5df      	bpl.n	8001dc8 <__aeabi_dsub+0x314>
 8001e08:	4b04      	ldr	r3, [pc, #16]	; (8001e1c <__aeabi_dsub+0x368>)
 8001e0a:	3601      	adds	r6, #1
 8001e0c:	429e      	cmp	r6, r3
 8001e0e:	d000      	beq.n	8001e12 <__aeabi_dsub+0x35e>
 8001e10:	e0a0      	b.n	8001f54 <__aeabi_dsub+0x4a0>
 8001e12:	0032      	movs	r2, r6
 8001e14:	2400      	movs	r4, #0
 8001e16:	2300      	movs	r3, #0
 8001e18:	e6f6      	b.n	8001c08 <__aeabi_dsub+0x154>
 8001e1a:	46c0      	nop			; (mov r8, r8)
 8001e1c:	000007ff 	.word	0x000007ff
 8001e20:	ff7fffff 	.word	0xff7fffff
 8001e24:	fffff801 	.word	0xfffff801
 8001e28:	000007fe 	.word	0x000007fe
 8001e2c:	08db      	lsrs	r3, r3, #3
 8001e2e:	464a      	mov	r2, r9
 8001e30:	0752      	lsls	r2, r2, #29
 8001e32:	4313      	orrs	r3, r2
 8001e34:	464a      	mov	r2, r9
 8001e36:	08d2      	lsrs	r2, r2, #3
 8001e38:	0019      	movs	r1, r3
 8001e3a:	4311      	orrs	r1, r2
 8001e3c:	d100      	bne.n	8001e40 <__aeabi_dsub+0x38c>
 8001e3e:	e1b5      	b.n	80021ac <__aeabi_dsub+0x6f8>
 8001e40:	2480      	movs	r4, #128	; 0x80
 8001e42:	0324      	lsls	r4, r4, #12
 8001e44:	4314      	orrs	r4, r2
 8001e46:	0324      	lsls	r4, r4, #12
 8001e48:	4ad5      	ldr	r2, [pc, #852]	; (80021a0 <__aeabi_dsub+0x6ec>)
 8001e4a:	0b24      	lsrs	r4, r4, #12
 8001e4c:	e6dc      	b.n	8001c08 <__aeabi_dsub+0x154>
 8001e4e:	0020      	movs	r0, r4
 8001e50:	f000 fa5c 	bl	800230c <__clzsi2>
 8001e54:	0003      	movs	r3, r0
 8001e56:	3318      	adds	r3, #24
 8001e58:	2b1f      	cmp	r3, #31
 8001e5a:	dc00      	bgt.n	8001e5e <__aeabi_dsub+0x3aa>
 8001e5c:	e695      	b.n	8001b8a <__aeabi_dsub+0xd6>
 8001e5e:	0022      	movs	r2, r4
 8001e60:	3808      	subs	r0, #8
 8001e62:	4082      	lsls	r2, r0
 8001e64:	2400      	movs	r4, #0
 8001e66:	429e      	cmp	r6, r3
 8001e68:	dc00      	bgt.n	8001e6c <__aeabi_dsub+0x3b8>
 8001e6a:	e69a      	b.n	8001ba2 <__aeabi_dsub+0xee>
 8001e6c:	1af6      	subs	r6, r6, r3
 8001e6e:	4bcd      	ldr	r3, [pc, #820]	; (80021a4 <__aeabi_dsub+0x6f0>)
 8001e70:	401a      	ands	r2, r3
 8001e72:	4692      	mov	sl, r2
 8001e74:	e6a8      	b.n	8001bc8 <__aeabi_dsub+0x114>
 8001e76:	003c      	movs	r4, r7
 8001e78:	4304      	orrs	r4, r0
 8001e7a:	1e62      	subs	r2, r4, #1
 8001e7c:	4194      	sbcs	r4, r2
 8001e7e:	e66c      	b.n	8001b5a <__aeabi_dsub+0xa6>
 8001e80:	464a      	mov	r2, r9
 8001e82:	08db      	lsrs	r3, r3, #3
 8001e84:	0752      	lsls	r2, r2, #29
 8001e86:	4313      	orrs	r3, r2
 8001e88:	464a      	mov	r2, r9
 8001e8a:	08d2      	lsrs	r2, r2, #3
 8001e8c:	e7a6      	b.n	8001ddc <__aeabi_dsub+0x328>
 8001e8e:	4cc6      	ldr	r4, [pc, #792]	; (80021a8 <__aeabi_dsub+0x6f4>)
 8001e90:	1c72      	adds	r2, r6, #1
 8001e92:	4222      	tst	r2, r4
 8001e94:	d000      	beq.n	8001e98 <__aeabi_dsub+0x3e4>
 8001e96:	e0ac      	b.n	8001ff2 <__aeabi_dsub+0x53e>
 8001e98:	464a      	mov	r2, r9
 8001e9a:	431a      	orrs	r2, r3
 8001e9c:	2e00      	cmp	r6, #0
 8001e9e:	d000      	beq.n	8001ea2 <__aeabi_dsub+0x3ee>
 8001ea0:	e105      	b.n	80020ae <__aeabi_dsub+0x5fa>
 8001ea2:	2a00      	cmp	r2, #0
 8001ea4:	d100      	bne.n	8001ea8 <__aeabi_dsub+0x3f4>
 8001ea6:	e156      	b.n	8002156 <__aeabi_dsub+0x6a2>
 8001ea8:	003a      	movs	r2, r7
 8001eaa:	4302      	orrs	r2, r0
 8001eac:	d100      	bne.n	8001eb0 <__aeabi_dsub+0x3fc>
 8001eae:	e0db      	b.n	8002068 <__aeabi_dsub+0x5b4>
 8001eb0:	181c      	adds	r4, r3, r0
 8001eb2:	429c      	cmp	r4, r3
 8001eb4:	419b      	sbcs	r3, r3
 8001eb6:	444f      	add	r7, r9
 8001eb8:	46ba      	mov	sl, r7
 8001eba:	425b      	negs	r3, r3
 8001ebc:	449a      	add	sl, r3
 8001ebe:	4653      	mov	r3, sl
 8001ec0:	021b      	lsls	r3, r3, #8
 8001ec2:	d400      	bmi.n	8001ec6 <__aeabi_dsub+0x412>
 8001ec4:	e780      	b.n	8001dc8 <__aeabi_dsub+0x314>
 8001ec6:	4652      	mov	r2, sl
 8001ec8:	4bb6      	ldr	r3, [pc, #728]	; (80021a4 <__aeabi_dsub+0x6f0>)
 8001eca:	2601      	movs	r6, #1
 8001ecc:	401a      	ands	r2, r3
 8001ece:	4692      	mov	sl, r2
 8001ed0:	e77a      	b.n	8001dc8 <__aeabi_dsub+0x314>
 8001ed2:	4cb3      	ldr	r4, [pc, #716]	; (80021a0 <__aeabi_dsub+0x6ec>)
 8001ed4:	42a2      	cmp	r2, r4
 8001ed6:	d100      	bne.n	8001eda <__aeabi_dsub+0x426>
 8001ed8:	e0c0      	b.n	800205c <__aeabi_dsub+0x5a8>
 8001eda:	2480      	movs	r4, #128	; 0x80
 8001edc:	464d      	mov	r5, r9
 8001ede:	0424      	lsls	r4, r4, #16
 8001ee0:	4325      	orrs	r5, r4
 8001ee2:	46a9      	mov	r9, r5
 8001ee4:	4664      	mov	r4, ip
 8001ee6:	2c38      	cmp	r4, #56	; 0x38
 8001ee8:	dc53      	bgt.n	8001f92 <__aeabi_dsub+0x4de>
 8001eea:	4661      	mov	r1, ip
 8001eec:	2c1f      	cmp	r4, #31
 8001eee:	dd00      	ble.n	8001ef2 <__aeabi_dsub+0x43e>
 8001ef0:	e0cd      	b.n	800208e <__aeabi_dsub+0x5da>
 8001ef2:	2520      	movs	r5, #32
 8001ef4:	001e      	movs	r6, r3
 8001ef6:	1b2d      	subs	r5, r5, r4
 8001ef8:	464c      	mov	r4, r9
 8001efa:	40ab      	lsls	r3, r5
 8001efc:	40ac      	lsls	r4, r5
 8001efe:	40ce      	lsrs	r6, r1
 8001f00:	1e5d      	subs	r5, r3, #1
 8001f02:	41ab      	sbcs	r3, r5
 8001f04:	4334      	orrs	r4, r6
 8001f06:	4323      	orrs	r3, r4
 8001f08:	464c      	mov	r4, r9
 8001f0a:	40cc      	lsrs	r4, r1
 8001f0c:	1b3f      	subs	r7, r7, r4
 8001f0e:	e045      	b.n	8001f9c <__aeabi_dsub+0x4e8>
 8001f10:	464a      	mov	r2, r9
 8001f12:	1a1c      	subs	r4, r3, r0
 8001f14:	1bd1      	subs	r1, r2, r7
 8001f16:	42a3      	cmp	r3, r4
 8001f18:	4192      	sbcs	r2, r2
 8001f1a:	4252      	negs	r2, r2
 8001f1c:	4692      	mov	sl, r2
 8001f1e:	000a      	movs	r2, r1
 8001f20:	4651      	mov	r1, sl
 8001f22:	1a52      	subs	r2, r2, r1
 8001f24:	4692      	mov	sl, r2
 8001f26:	0212      	lsls	r2, r2, #8
 8001f28:	d500      	bpl.n	8001f2c <__aeabi_dsub+0x478>
 8001f2a:	e083      	b.n	8002034 <__aeabi_dsub+0x580>
 8001f2c:	4653      	mov	r3, sl
 8001f2e:	4323      	orrs	r3, r4
 8001f30:	d000      	beq.n	8001f34 <__aeabi_dsub+0x480>
 8001f32:	e621      	b.n	8001b78 <__aeabi_dsub+0xc4>
 8001f34:	2200      	movs	r2, #0
 8001f36:	2500      	movs	r5, #0
 8001f38:	e753      	b.n	8001de2 <__aeabi_dsub+0x32e>
 8001f3a:	181c      	adds	r4, r3, r0
 8001f3c:	429c      	cmp	r4, r3
 8001f3e:	419b      	sbcs	r3, r3
 8001f40:	444f      	add	r7, r9
 8001f42:	46ba      	mov	sl, r7
 8001f44:	425b      	negs	r3, r3
 8001f46:	449a      	add	sl, r3
 8001f48:	4653      	mov	r3, sl
 8001f4a:	2601      	movs	r6, #1
 8001f4c:	021b      	lsls	r3, r3, #8
 8001f4e:	d400      	bmi.n	8001f52 <__aeabi_dsub+0x49e>
 8001f50:	e73a      	b.n	8001dc8 <__aeabi_dsub+0x314>
 8001f52:	2602      	movs	r6, #2
 8001f54:	4652      	mov	r2, sl
 8001f56:	4b93      	ldr	r3, [pc, #588]	; (80021a4 <__aeabi_dsub+0x6f0>)
 8001f58:	2101      	movs	r1, #1
 8001f5a:	401a      	ands	r2, r3
 8001f5c:	0013      	movs	r3, r2
 8001f5e:	4021      	ands	r1, r4
 8001f60:	0862      	lsrs	r2, r4, #1
 8001f62:	430a      	orrs	r2, r1
 8001f64:	07dc      	lsls	r4, r3, #31
 8001f66:	085b      	lsrs	r3, r3, #1
 8001f68:	469a      	mov	sl, r3
 8001f6a:	4314      	orrs	r4, r2
 8001f6c:	e62c      	b.n	8001bc8 <__aeabi_dsub+0x114>
 8001f6e:	0039      	movs	r1, r7
 8001f70:	3a20      	subs	r2, #32
 8001f72:	40d1      	lsrs	r1, r2
 8001f74:	4662      	mov	r2, ip
 8001f76:	2a20      	cmp	r2, #32
 8001f78:	d006      	beq.n	8001f88 <__aeabi_dsub+0x4d4>
 8001f7a:	4664      	mov	r4, ip
 8001f7c:	2240      	movs	r2, #64	; 0x40
 8001f7e:	1b12      	subs	r2, r2, r4
 8001f80:	003c      	movs	r4, r7
 8001f82:	4094      	lsls	r4, r2
 8001f84:	4304      	orrs	r4, r0
 8001f86:	9401      	str	r4, [sp, #4]
 8001f88:	9c01      	ldr	r4, [sp, #4]
 8001f8a:	1e62      	subs	r2, r4, #1
 8001f8c:	4194      	sbcs	r4, r2
 8001f8e:	430c      	orrs	r4, r1
 8001f90:	e5e3      	b.n	8001b5a <__aeabi_dsub+0xa6>
 8001f92:	4649      	mov	r1, r9
 8001f94:	4319      	orrs	r1, r3
 8001f96:	000b      	movs	r3, r1
 8001f98:	1e5c      	subs	r4, r3, #1
 8001f9a:	41a3      	sbcs	r3, r4
 8001f9c:	1ac4      	subs	r4, r0, r3
 8001f9e:	42a0      	cmp	r0, r4
 8001fa0:	419b      	sbcs	r3, r3
 8001fa2:	425b      	negs	r3, r3
 8001fa4:	1afb      	subs	r3, r7, r3
 8001fa6:	469a      	mov	sl, r3
 8001fa8:	465d      	mov	r5, fp
 8001faa:	0016      	movs	r6, r2
 8001fac:	e5dc      	b.n	8001b68 <__aeabi_dsub+0xb4>
 8001fae:	4649      	mov	r1, r9
 8001fb0:	4319      	orrs	r1, r3
 8001fb2:	d100      	bne.n	8001fb6 <__aeabi_dsub+0x502>
 8001fb4:	e0ae      	b.n	8002114 <__aeabi_dsub+0x660>
 8001fb6:	4661      	mov	r1, ip
 8001fb8:	4664      	mov	r4, ip
 8001fba:	3901      	subs	r1, #1
 8001fbc:	2c01      	cmp	r4, #1
 8001fbe:	d100      	bne.n	8001fc2 <__aeabi_dsub+0x50e>
 8001fc0:	e0e0      	b.n	8002184 <__aeabi_dsub+0x6d0>
 8001fc2:	4c77      	ldr	r4, [pc, #476]	; (80021a0 <__aeabi_dsub+0x6ec>)
 8001fc4:	45a4      	cmp	ip, r4
 8001fc6:	d056      	beq.n	8002076 <__aeabi_dsub+0x5c2>
 8001fc8:	468c      	mov	ip, r1
 8001fca:	e69a      	b.n	8001d02 <__aeabi_dsub+0x24e>
 8001fcc:	4661      	mov	r1, ip
 8001fce:	2220      	movs	r2, #32
 8001fd0:	003c      	movs	r4, r7
 8001fd2:	1a52      	subs	r2, r2, r1
 8001fd4:	4094      	lsls	r4, r2
 8001fd6:	0001      	movs	r1, r0
 8001fd8:	4090      	lsls	r0, r2
 8001fda:	46a0      	mov	r8, r4
 8001fdc:	4664      	mov	r4, ip
 8001fde:	1e42      	subs	r2, r0, #1
 8001fe0:	4190      	sbcs	r0, r2
 8001fe2:	4662      	mov	r2, ip
 8001fe4:	40e1      	lsrs	r1, r4
 8001fe6:	4644      	mov	r4, r8
 8001fe8:	40d7      	lsrs	r7, r2
 8001fea:	430c      	orrs	r4, r1
 8001fec:	4304      	orrs	r4, r0
 8001fee:	44b9      	add	r9, r7
 8001ff0:	e701      	b.n	8001df6 <__aeabi_dsub+0x342>
 8001ff2:	496b      	ldr	r1, [pc, #428]	; (80021a0 <__aeabi_dsub+0x6ec>)
 8001ff4:	428a      	cmp	r2, r1
 8001ff6:	d100      	bne.n	8001ffa <__aeabi_dsub+0x546>
 8001ff8:	e70c      	b.n	8001e14 <__aeabi_dsub+0x360>
 8001ffa:	1818      	adds	r0, r3, r0
 8001ffc:	4298      	cmp	r0, r3
 8001ffe:	419b      	sbcs	r3, r3
 8002000:	444f      	add	r7, r9
 8002002:	425b      	negs	r3, r3
 8002004:	18fb      	adds	r3, r7, r3
 8002006:	07dc      	lsls	r4, r3, #31
 8002008:	0840      	lsrs	r0, r0, #1
 800200a:	085b      	lsrs	r3, r3, #1
 800200c:	469a      	mov	sl, r3
 800200e:	0016      	movs	r6, r2
 8002010:	4304      	orrs	r4, r0
 8002012:	e6d9      	b.n	8001dc8 <__aeabi_dsub+0x314>
 8002014:	2a00      	cmp	r2, #0
 8002016:	d000      	beq.n	800201a <__aeabi_dsub+0x566>
 8002018:	e081      	b.n	800211e <__aeabi_dsub+0x66a>
 800201a:	003b      	movs	r3, r7
 800201c:	4303      	orrs	r3, r0
 800201e:	d11d      	bne.n	800205c <__aeabi_dsub+0x5a8>
 8002020:	2280      	movs	r2, #128	; 0x80
 8002022:	2500      	movs	r5, #0
 8002024:	0312      	lsls	r2, r2, #12
 8002026:	e70b      	b.n	8001e40 <__aeabi_dsub+0x38c>
 8002028:	08c0      	lsrs	r0, r0, #3
 800202a:	077b      	lsls	r3, r7, #29
 800202c:	465d      	mov	r5, fp
 800202e:	4303      	orrs	r3, r0
 8002030:	08fa      	lsrs	r2, r7, #3
 8002032:	e6d3      	b.n	8001ddc <__aeabi_dsub+0x328>
 8002034:	1ac4      	subs	r4, r0, r3
 8002036:	42a0      	cmp	r0, r4
 8002038:	4180      	sbcs	r0, r0
 800203a:	464b      	mov	r3, r9
 800203c:	4240      	negs	r0, r0
 800203e:	1aff      	subs	r7, r7, r3
 8002040:	1a3b      	subs	r3, r7, r0
 8002042:	469a      	mov	sl, r3
 8002044:	465d      	mov	r5, fp
 8002046:	e597      	b.n	8001b78 <__aeabi_dsub+0xc4>
 8002048:	1a1c      	subs	r4, r3, r0
 800204a:	464a      	mov	r2, r9
 800204c:	42a3      	cmp	r3, r4
 800204e:	419b      	sbcs	r3, r3
 8002050:	1bd7      	subs	r7, r2, r7
 8002052:	425b      	negs	r3, r3
 8002054:	1afb      	subs	r3, r7, r3
 8002056:	469a      	mov	sl, r3
 8002058:	2601      	movs	r6, #1
 800205a:	e585      	b.n	8001b68 <__aeabi_dsub+0xb4>
 800205c:	08c0      	lsrs	r0, r0, #3
 800205e:	077b      	lsls	r3, r7, #29
 8002060:	465d      	mov	r5, fp
 8002062:	4303      	orrs	r3, r0
 8002064:	08fa      	lsrs	r2, r7, #3
 8002066:	e6e7      	b.n	8001e38 <__aeabi_dsub+0x384>
 8002068:	464a      	mov	r2, r9
 800206a:	08db      	lsrs	r3, r3, #3
 800206c:	0752      	lsls	r2, r2, #29
 800206e:	4313      	orrs	r3, r2
 8002070:	464a      	mov	r2, r9
 8002072:	08d2      	lsrs	r2, r2, #3
 8002074:	e6b5      	b.n	8001de2 <__aeabi_dsub+0x32e>
 8002076:	08c0      	lsrs	r0, r0, #3
 8002078:	077b      	lsls	r3, r7, #29
 800207a:	4303      	orrs	r3, r0
 800207c:	08fa      	lsrs	r2, r7, #3
 800207e:	e6db      	b.n	8001e38 <__aeabi_dsub+0x384>
 8002080:	4649      	mov	r1, r9
 8002082:	4319      	orrs	r1, r3
 8002084:	000b      	movs	r3, r1
 8002086:	1e59      	subs	r1, r3, #1
 8002088:	418b      	sbcs	r3, r1
 800208a:	001c      	movs	r4, r3
 800208c:	e653      	b.n	8001d36 <__aeabi_dsub+0x282>
 800208e:	464d      	mov	r5, r9
 8002090:	3c20      	subs	r4, #32
 8002092:	40e5      	lsrs	r5, r4
 8002094:	2920      	cmp	r1, #32
 8002096:	d005      	beq.n	80020a4 <__aeabi_dsub+0x5f0>
 8002098:	2440      	movs	r4, #64	; 0x40
 800209a:	1a64      	subs	r4, r4, r1
 800209c:	4649      	mov	r1, r9
 800209e:	40a1      	lsls	r1, r4
 80020a0:	430b      	orrs	r3, r1
 80020a2:	4698      	mov	r8, r3
 80020a4:	4643      	mov	r3, r8
 80020a6:	1e5c      	subs	r4, r3, #1
 80020a8:	41a3      	sbcs	r3, r4
 80020aa:	432b      	orrs	r3, r5
 80020ac:	e776      	b.n	8001f9c <__aeabi_dsub+0x4e8>
 80020ae:	2a00      	cmp	r2, #0
 80020b0:	d0e1      	beq.n	8002076 <__aeabi_dsub+0x5c2>
 80020b2:	003a      	movs	r2, r7
 80020b4:	08db      	lsrs	r3, r3, #3
 80020b6:	4302      	orrs	r2, r0
 80020b8:	d100      	bne.n	80020bc <__aeabi_dsub+0x608>
 80020ba:	e6b8      	b.n	8001e2e <__aeabi_dsub+0x37a>
 80020bc:	464a      	mov	r2, r9
 80020be:	0752      	lsls	r2, r2, #29
 80020c0:	2480      	movs	r4, #128	; 0x80
 80020c2:	4313      	orrs	r3, r2
 80020c4:	464a      	mov	r2, r9
 80020c6:	0324      	lsls	r4, r4, #12
 80020c8:	08d2      	lsrs	r2, r2, #3
 80020ca:	4222      	tst	r2, r4
 80020cc:	d007      	beq.n	80020de <__aeabi_dsub+0x62a>
 80020ce:	08fe      	lsrs	r6, r7, #3
 80020d0:	4226      	tst	r6, r4
 80020d2:	d104      	bne.n	80020de <__aeabi_dsub+0x62a>
 80020d4:	465d      	mov	r5, fp
 80020d6:	0032      	movs	r2, r6
 80020d8:	08c3      	lsrs	r3, r0, #3
 80020da:	077f      	lsls	r7, r7, #29
 80020dc:	433b      	orrs	r3, r7
 80020de:	0f59      	lsrs	r1, r3, #29
 80020e0:	00db      	lsls	r3, r3, #3
 80020e2:	0749      	lsls	r1, r1, #29
 80020e4:	08db      	lsrs	r3, r3, #3
 80020e6:	430b      	orrs	r3, r1
 80020e8:	e6a6      	b.n	8001e38 <__aeabi_dsub+0x384>
 80020ea:	1ac4      	subs	r4, r0, r3
 80020ec:	42a0      	cmp	r0, r4
 80020ee:	4180      	sbcs	r0, r0
 80020f0:	464b      	mov	r3, r9
 80020f2:	4240      	negs	r0, r0
 80020f4:	1aff      	subs	r7, r7, r3
 80020f6:	1a3b      	subs	r3, r7, r0
 80020f8:	469a      	mov	sl, r3
 80020fa:	465d      	mov	r5, fp
 80020fc:	2601      	movs	r6, #1
 80020fe:	e533      	b.n	8001b68 <__aeabi_dsub+0xb4>
 8002100:	003b      	movs	r3, r7
 8002102:	4303      	orrs	r3, r0
 8002104:	d100      	bne.n	8002108 <__aeabi_dsub+0x654>
 8002106:	e715      	b.n	8001f34 <__aeabi_dsub+0x480>
 8002108:	08c0      	lsrs	r0, r0, #3
 800210a:	077b      	lsls	r3, r7, #29
 800210c:	465d      	mov	r5, fp
 800210e:	4303      	orrs	r3, r0
 8002110:	08fa      	lsrs	r2, r7, #3
 8002112:	e666      	b.n	8001de2 <__aeabi_dsub+0x32e>
 8002114:	08c0      	lsrs	r0, r0, #3
 8002116:	077b      	lsls	r3, r7, #29
 8002118:	4303      	orrs	r3, r0
 800211a:	08fa      	lsrs	r2, r7, #3
 800211c:	e65e      	b.n	8001ddc <__aeabi_dsub+0x328>
 800211e:	003a      	movs	r2, r7
 8002120:	08db      	lsrs	r3, r3, #3
 8002122:	4302      	orrs	r2, r0
 8002124:	d100      	bne.n	8002128 <__aeabi_dsub+0x674>
 8002126:	e682      	b.n	8001e2e <__aeabi_dsub+0x37a>
 8002128:	464a      	mov	r2, r9
 800212a:	0752      	lsls	r2, r2, #29
 800212c:	2480      	movs	r4, #128	; 0x80
 800212e:	4313      	orrs	r3, r2
 8002130:	464a      	mov	r2, r9
 8002132:	0324      	lsls	r4, r4, #12
 8002134:	08d2      	lsrs	r2, r2, #3
 8002136:	4222      	tst	r2, r4
 8002138:	d007      	beq.n	800214a <__aeabi_dsub+0x696>
 800213a:	08fe      	lsrs	r6, r7, #3
 800213c:	4226      	tst	r6, r4
 800213e:	d104      	bne.n	800214a <__aeabi_dsub+0x696>
 8002140:	465d      	mov	r5, fp
 8002142:	0032      	movs	r2, r6
 8002144:	08c3      	lsrs	r3, r0, #3
 8002146:	077f      	lsls	r7, r7, #29
 8002148:	433b      	orrs	r3, r7
 800214a:	0f59      	lsrs	r1, r3, #29
 800214c:	00db      	lsls	r3, r3, #3
 800214e:	08db      	lsrs	r3, r3, #3
 8002150:	0749      	lsls	r1, r1, #29
 8002152:	430b      	orrs	r3, r1
 8002154:	e670      	b.n	8001e38 <__aeabi_dsub+0x384>
 8002156:	08c0      	lsrs	r0, r0, #3
 8002158:	077b      	lsls	r3, r7, #29
 800215a:	4303      	orrs	r3, r0
 800215c:	08fa      	lsrs	r2, r7, #3
 800215e:	e640      	b.n	8001de2 <__aeabi_dsub+0x32e>
 8002160:	464c      	mov	r4, r9
 8002162:	3920      	subs	r1, #32
 8002164:	40cc      	lsrs	r4, r1
 8002166:	4661      	mov	r1, ip
 8002168:	2920      	cmp	r1, #32
 800216a:	d006      	beq.n	800217a <__aeabi_dsub+0x6c6>
 800216c:	4666      	mov	r6, ip
 800216e:	2140      	movs	r1, #64	; 0x40
 8002170:	1b89      	subs	r1, r1, r6
 8002172:	464e      	mov	r6, r9
 8002174:	408e      	lsls	r6, r1
 8002176:	4333      	orrs	r3, r6
 8002178:	4698      	mov	r8, r3
 800217a:	4643      	mov	r3, r8
 800217c:	1e59      	subs	r1, r3, #1
 800217e:	418b      	sbcs	r3, r1
 8002180:	431c      	orrs	r4, r3
 8002182:	e5d8      	b.n	8001d36 <__aeabi_dsub+0x282>
 8002184:	181c      	adds	r4, r3, r0
 8002186:	4284      	cmp	r4, r0
 8002188:	4180      	sbcs	r0, r0
 800218a:	444f      	add	r7, r9
 800218c:	46ba      	mov	sl, r7
 800218e:	4240      	negs	r0, r0
 8002190:	4482      	add	sl, r0
 8002192:	e6d9      	b.n	8001f48 <__aeabi_dsub+0x494>
 8002194:	4653      	mov	r3, sl
 8002196:	4323      	orrs	r3, r4
 8002198:	d100      	bne.n	800219c <__aeabi_dsub+0x6e8>
 800219a:	e6cb      	b.n	8001f34 <__aeabi_dsub+0x480>
 800219c:	e614      	b.n	8001dc8 <__aeabi_dsub+0x314>
 800219e:	46c0      	nop			; (mov r8, r8)
 80021a0:	000007ff 	.word	0x000007ff
 80021a4:	ff7fffff 	.word	0xff7fffff
 80021a8:	000007fe 	.word	0x000007fe
 80021ac:	2300      	movs	r3, #0
 80021ae:	4a01      	ldr	r2, [pc, #4]	; (80021b4 <__aeabi_dsub+0x700>)
 80021b0:	001c      	movs	r4, r3
 80021b2:	e529      	b.n	8001c08 <__aeabi_dsub+0x154>
 80021b4:	000007ff 	.word	0x000007ff

080021b8 <__aeabi_dcmpun>:
 80021b8:	b570      	push	{r4, r5, r6, lr}
 80021ba:	0005      	movs	r5, r0
 80021bc:	480c      	ldr	r0, [pc, #48]	; (80021f0 <__aeabi_dcmpun+0x38>)
 80021be:	031c      	lsls	r4, r3, #12
 80021c0:	0016      	movs	r6, r2
 80021c2:	005b      	lsls	r3, r3, #1
 80021c4:	030a      	lsls	r2, r1, #12
 80021c6:	0049      	lsls	r1, r1, #1
 80021c8:	0b12      	lsrs	r2, r2, #12
 80021ca:	0d49      	lsrs	r1, r1, #21
 80021cc:	0b24      	lsrs	r4, r4, #12
 80021ce:	0d5b      	lsrs	r3, r3, #21
 80021d0:	4281      	cmp	r1, r0
 80021d2:	d008      	beq.n	80021e6 <__aeabi_dcmpun+0x2e>
 80021d4:	4a06      	ldr	r2, [pc, #24]	; (80021f0 <__aeabi_dcmpun+0x38>)
 80021d6:	2000      	movs	r0, #0
 80021d8:	4293      	cmp	r3, r2
 80021da:	d103      	bne.n	80021e4 <__aeabi_dcmpun+0x2c>
 80021dc:	0020      	movs	r0, r4
 80021de:	4330      	orrs	r0, r6
 80021e0:	1e43      	subs	r3, r0, #1
 80021e2:	4198      	sbcs	r0, r3
 80021e4:	bd70      	pop	{r4, r5, r6, pc}
 80021e6:	2001      	movs	r0, #1
 80021e8:	432a      	orrs	r2, r5
 80021ea:	d1fb      	bne.n	80021e4 <__aeabi_dcmpun+0x2c>
 80021ec:	e7f2      	b.n	80021d4 <__aeabi_dcmpun+0x1c>
 80021ee:	46c0      	nop			; (mov r8, r8)
 80021f0:	000007ff 	.word	0x000007ff

080021f4 <__aeabi_d2iz>:
 80021f4:	000a      	movs	r2, r1
 80021f6:	b530      	push	{r4, r5, lr}
 80021f8:	4c13      	ldr	r4, [pc, #76]	; (8002248 <__aeabi_d2iz+0x54>)
 80021fa:	0053      	lsls	r3, r2, #1
 80021fc:	0309      	lsls	r1, r1, #12
 80021fe:	0005      	movs	r5, r0
 8002200:	0b09      	lsrs	r1, r1, #12
 8002202:	2000      	movs	r0, #0
 8002204:	0d5b      	lsrs	r3, r3, #21
 8002206:	0fd2      	lsrs	r2, r2, #31
 8002208:	42a3      	cmp	r3, r4
 800220a:	dd04      	ble.n	8002216 <__aeabi_d2iz+0x22>
 800220c:	480f      	ldr	r0, [pc, #60]	; (800224c <__aeabi_d2iz+0x58>)
 800220e:	4283      	cmp	r3, r0
 8002210:	dd02      	ble.n	8002218 <__aeabi_d2iz+0x24>
 8002212:	4b0f      	ldr	r3, [pc, #60]	; (8002250 <__aeabi_d2iz+0x5c>)
 8002214:	18d0      	adds	r0, r2, r3
 8002216:	bd30      	pop	{r4, r5, pc}
 8002218:	2080      	movs	r0, #128	; 0x80
 800221a:	0340      	lsls	r0, r0, #13
 800221c:	4301      	orrs	r1, r0
 800221e:	480d      	ldr	r0, [pc, #52]	; (8002254 <__aeabi_d2iz+0x60>)
 8002220:	1ac0      	subs	r0, r0, r3
 8002222:	281f      	cmp	r0, #31
 8002224:	dd08      	ble.n	8002238 <__aeabi_d2iz+0x44>
 8002226:	480c      	ldr	r0, [pc, #48]	; (8002258 <__aeabi_d2iz+0x64>)
 8002228:	1ac3      	subs	r3, r0, r3
 800222a:	40d9      	lsrs	r1, r3
 800222c:	000b      	movs	r3, r1
 800222e:	4258      	negs	r0, r3
 8002230:	2a00      	cmp	r2, #0
 8002232:	d1f0      	bne.n	8002216 <__aeabi_d2iz+0x22>
 8002234:	0018      	movs	r0, r3
 8002236:	e7ee      	b.n	8002216 <__aeabi_d2iz+0x22>
 8002238:	4c08      	ldr	r4, [pc, #32]	; (800225c <__aeabi_d2iz+0x68>)
 800223a:	40c5      	lsrs	r5, r0
 800223c:	46a4      	mov	ip, r4
 800223e:	4463      	add	r3, ip
 8002240:	4099      	lsls	r1, r3
 8002242:	000b      	movs	r3, r1
 8002244:	432b      	orrs	r3, r5
 8002246:	e7f2      	b.n	800222e <__aeabi_d2iz+0x3a>
 8002248:	000003fe 	.word	0x000003fe
 800224c:	0000041d 	.word	0x0000041d
 8002250:	7fffffff 	.word	0x7fffffff
 8002254:	00000433 	.word	0x00000433
 8002258:	00000413 	.word	0x00000413
 800225c:	fffffbed 	.word	0xfffffbed

08002260 <__aeabi_i2d>:
 8002260:	b570      	push	{r4, r5, r6, lr}
 8002262:	2800      	cmp	r0, #0
 8002264:	d016      	beq.n	8002294 <__aeabi_i2d+0x34>
 8002266:	17c3      	asrs	r3, r0, #31
 8002268:	18c5      	adds	r5, r0, r3
 800226a:	405d      	eors	r5, r3
 800226c:	0fc4      	lsrs	r4, r0, #31
 800226e:	0028      	movs	r0, r5
 8002270:	f000 f84c 	bl	800230c <__clzsi2>
 8002274:	4b11      	ldr	r3, [pc, #68]	; (80022bc <__aeabi_i2d+0x5c>)
 8002276:	1a1b      	subs	r3, r3, r0
 8002278:	280a      	cmp	r0, #10
 800227a:	dc16      	bgt.n	80022aa <__aeabi_i2d+0x4a>
 800227c:	0002      	movs	r2, r0
 800227e:	002e      	movs	r6, r5
 8002280:	3215      	adds	r2, #21
 8002282:	4096      	lsls	r6, r2
 8002284:	220b      	movs	r2, #11
 8002286:	1a12      	subs	r2, r2, r0
 8002288:	40d5      	lsrs	r5, r2
 800228a:	055b      	lsls	r3, r3, #21
 800228c:	032d      	lsls	r5, r5, #12
 800228e:	0b2d      	lsrs	r5, r5, #12
 8002290:	0d5b      	lsrs	r3, r3, #21
 8002292:	e003      	b.n	800229c <__aeabi_i2d+0x3c>
 8002294:	2400      	movs	r4, #0
 8002296:	2300      	movs	r3, #0
 8002298:	2500      	movs	r5, #0
 800229a:	2600      	movs	r6, #0
 800229c:	051b      	lsls	r3, r3, #20
 800229e:	432b      	orrs	r3, r5
 80022a0:	07e4      	lsls	r4, r4, #31
 80022a2:	4323      	orrs	r3, r4
 80022a4:	0030      	movs	r0, r6
 80022a6:	0019      	movs	r1, r3
 80022a8:	bd70      	pop	{r4, r5, r6, pc}
 80022aa:	380b      	subs	r0, #11
 80022ac:	4085      	lsls	r5, r0
 80022ae:	055b      	lsls	r3, r3, #21
 80022b0:	032d      	lsls	r5, r5, #12
 80022b2:	2600      	movs	r6, #0
 80022b4:	0b2d      	lsrs	r5, r5, #12
 80022b6:	0d5b      	lsrs	r3, r3, #21
 80022b8:	e7f0      	b.n	800229c <__aeabi_i2d+0x3c>
 80022ba:	46c0      	nop			; (mov r8, r8)
 80022bc:	0000041e 	.word	0x0000041e

080022c0 <__aeabi_ui2d>:
 80022c0:	b510      	push	{r4, lr}
 80022c2:	1e04      	subs	r4, r0, #0
 80022c4:	d010      	beq.n	80022e8 <__aeabi_ui2d+0x28>
 80022c6:	f000 f821 	bl	800230c <__clzsi2>
 80022ca:	4b0f      	ldr	r3, [pc, #60]	; (8002308 <__aeabi_ui2d+0x48>)
 80022cc:	1a1b      	subs	r3, r3, r0
 80022ce:	280a      	cmp	r0, #10
 80022d0:	dc11      	bgt.n	80022f6 <__aeabi_ui2d+0x36>
 80022d2:	220b      	movs	r2, #11
 80022d4:	0021      	movs	r1, r4
 80022d6:	1a12      	subs	r2, r2, r0
 80022d8:	40d1      	lsrs	r1, r2
 80022da:	3015      	adds	r0, #21
 80022dc:	030a      	lsls	r2, r1, #12
 80022de:	055b      	lsls	r3, r3, #21
 80022e0:	4084      	lsls	r4, r0
 80022e2:	0b12      	lsrs	r2, r2, #12
 80022e4:	0d5b      	lsrs	r3, r3, #21
 80022e6:	e001      	b.n	80022ec <__aeabi_ui2d+0x2c>
 80022e8:	2300      	movs	r3, #0
 80022ea:	2200      	movs	r2, #0
 80022ec:	051b      	lsls	r3, r3, #20
 80022ee:	4313      	orrs	r3, r2
 80022f0:	0020      	movs	r0, r4
 80022f2:	0019      	movs	r1, r3
 80022f4:	bd10      	pop	{r4, pc}
 80022f6:	0022      	movs	r2, r4
 80022f8:	380b      	subs	r0, #11
 80022fa:	4082      	lsls	r2, r0
 80022fc:	055b      	lsls	r3, r3, #21
 80022fe:	0312      	lsls	r2, r2, #12
 8002300:	2400      	movs	r4, #0
 8002302:	0b12      	lsrs	r2, r2, #12
 8002304:	0d5b      	lsrs	r3, r3, #21
 8002306:	e7f1      	b.n	80022ec <__aeabi_ui2d+0x2c>
 8002308:	0000041e 	.word	0x0000041e

0800230c <__clzsi2>:
 800230c:	211c      	movs	r1, #28
 800230e:	2301      	movs	r3, #1
 8002310:	041b      	lsls	r3, r3, #16
 8002312:	4298      	cmp	r0, r3
 8002314:	d301      	bcc.n	800231a <__clzsi2+0xe>
 8002316:	0c00      	lsrs	r0, r0, #16
 8002318:	3910      	subs	r1, #16
 800231a:	0a1b      	lsrs	r3, r3, #8
 800231c:	4298      	cmp	r0, r3
 800231e:	d301      	bcc.n	8002324 <__clzsi2+0x18>
 8002320:	0a00      	lsrs	r0, r0, #8
 8002322:	3908      	subs	r1, #8
 8002324:	091b      	lsrs	r3, r3, #4
 8002326:	4298      	cmp	r0, r3
 8002328:	d301      	bcc.n	800232e <__clzsi2+0x22>
 800232a:	0900      	lsrs	r0, r0, #4
 800232c:	3904      	subs	r1, #4
 800232e:	a202      	add	r2, pc, #8	; (adr r2, 8002338 <__clzsi2+0x2c>)
 8002330:	5c10      	ldrb	r0, [r2, r0]
 8002332:	1840      	adds	r0, r0, r1
 8002334:	4770      	bx	lr
 8002336:	46c0      	nop			; (mov r8, r8)
 8002338:	02020304 	.word	0x02020304
 800233c:	01010101 	.word	0x01010101
	...

08002348 <__clzdi2>:
 8002348:	b510      	push	{r4, lr}
 800234a:	2900      	cmp	r1, #0
 800234c:	d103      	bne.n	8002356 <__clzdi2+0xe>
 800234e:	f7ff ffdd 	bl	800230c <__clzsi2>
 8002352:	3020      	adds	r0, #32
 8002354:	e002      	b.n	800235c <__clzdi2+0x14>
 8002356:	0008      	movs	r0, r1
 8002358:	f7ff ffd8 	bl	800230c <__clzsi2>
 800235c:	bd10      	pop	{r4, pc}
 800235e:	46c0      	nop			; (mov r8, r8)

08002360 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8002360:	b5b0      	push	{r4, r5, r7, lr}
 8002362:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8002364:	f000 fdb6 	bl	8002ed4 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8002368:	f000 f838 	bl	80023dc <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800236c:	f000 fa00 	bl	8002770 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 8002370:	f000 f962 	bl	8002638 <MX_USART2_UART_Init>
  MX_RTC_Init();
 8002374:	f000 f87e 	bl	8002474 <MX_RTC_Init>
  MX_TIM6_Init();
 8002378:	f000 f920 	bl	80025bc <MX_TIM6_Init>
  MX_USART3_UART_Init();
 800237c:	f000 f9aa 	bl	80026d4 <MX_USART3_UART_Init>
  /* USER CODE BEGIN 2 */

  // System hello
  HAL_UART_Transmit ( HUART_DBG , (uint8_t*) hello , strlen (hello) , UART_TIMEOUT ) ;
 8002380:	4b13      	ldr	r3, [pc, #76]	; (80023d0 <main+0x70>)
 8002382:	681c      	ldr	r4, [r3, #0]
 8002384:	4b12      	ldr	r3, [pc, #72]	; (80023d0 <main+0x70>)
 8002386:	681b      	ldr	r3, [r3, #0]
 8002388:	0018      	movs	r0, r3
 800238a:	f7fd febb 	bl	8000104 <strlen>
 800238e:	0003      	movs	r3, r0
 8002390:	b29a      	uxth	r2, r3
 8002392:	23fa      	movs	r3, #250	; 0xfa
 8002394:	009b      	lsls	r3, r3, #2
 8002396:	480f      	ldr	r0, [pc, #60]	; (80023d4 <main+0x74>)
 8002398:	0021      	movs	r1, r4
 800239a:	f003 f8f9 	bl	8005590 <HAL_UART_Transmit>

  // System Init
  my_tim_init ( HTIM ) ;
 800239e:	4b0e      	ldr	r3, [pc, #56]	; (80023d8 <main+0x78>)
 80023a0:	0018      	movs	r0, r3
 80023a2:	f000 fb0d 	bl	80029c0 <my_tim_init>
  if ( ! is_system_initialized () )
 80023a6:	f000 fb19 	bl	80029dc <is_system_initialized>
 80023aa:	0003      	movs	r3, r0
 80023ac:	001a      	movs	r2, r3
 80023ae:	2301      	movs	r3, #1
 80023b0:	4053      	eors	r3, r2
 80023b2:	b2db      	uxtb	r3, r3
 80023b4:	2b00      	cmp	r3, #0
 80023b6:	d00a      	beq.n	80023ce <main+0x6e>
  {
	  // ASTRO INIT
	  if ( !my_astro_init () )
 80023b8:	f005 f89c 	bl	80074f4 <my_astro_init>
 80023bc:	0003      	movs	r3, r0
 80023be:	001a      	movs	r2, r3
 80023c0:	2301      	movs	r3, #1
 80023c2:	4053      	eors	r3, r2
 80023c4:	b2db      	uxtb	r3, r3
 80023c6:	2b00      	cmp	r3, #0
 80023c8:	d001      	beq.n	80023ce <main+0x6e>
	  {
		  HAL_NVIC_SystemReset () ;
 80023ca:	f000 ff26 	bl	800321a <HAL_NVIC_SystemReset>
  }
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80023ce:	e7fe      	b.n	80023ce <main+0x6e>
 80023d0:	20000000 	.word	0x20000000
 80023d4:	20000754 	.word	0x20000754
 80023d8:	20000708 	.word	0x20000708

080023dc <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80023dc:	b590      	push	{r4, r7, lr}
 80023de:	b095      	sub	sp, #84	; 0x54
 80023e0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80023e2:	2414      	movs	r4, #20
 80023e4:	193b      	adds	r3, r7, r4
 80023e6:	0018      	movs	r0, r3
 80023e8:	233c      	movs	r3, #60	; 0x3c
 80023ea:	001a      	movs	r2, r3
 80023ec:	2100      	movs	r1, #0
 80023ee:	f005 fa75 	bl	80078dc <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80023f2:	1d3b      	adds	r3, r7, #4
 80023f4:	0018      	movs	r0, r3
 80023f6:	2310      	movs	r3, #16
 80023f8:	001a      	movs	r2, r3
 80023fa:	2100      	movs	r1, #0
 80023fc:	f005 fa6e 	bl	80078dc <memset>

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1);
 8002400:	2380      	movs	r3, #128	; 0x80
 8002402:	009b      	lsls	r3, r3, #2
 8002404:	0018      	movs	r0, r3
 8002406:	f001 f8e1 	bl	80035cc <HAL_PWREx_ControlVoltageScaling>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_LSI;
 800240a:	193b      	adds	r3, r7, r4
 800240c:	220a      	movs	r2, #10
 800240e:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8002410:	193b      	adds	r3, r7, r4
 8002412:	2280      	movs	r2, #128	; 0x80
 8002414:	0052      	lsls	r2, r2, #1
 8002416:	60da      	str	r2, [r3, #12]
  RCC_OscInitStruct.HSIDiv = RCC_HSI_DIV1;
 8002418:	0021      	movs	r1, r4
 800241a:	187b      	adds	r3, r7, r1
 800241c:	2200      	movs	r2, #0
 800241e:	611a      	str	r2, [r3, #16]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8002420:	187b      	adds	r3, r7, r1
 8002422:	2240      	movs	r2, #64	; 0x40
 8002424:	615a      	str	r2, [r3, #20]
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 8002426:	187b      	adds	r3, r7, r1
 8002428:	2201      	movs	r2, #1
 800242a:	619a      	str	r2, [r3, #24]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 800242c:	187b      	adds	r3, r7, r1
 800242e:	2200      	movs	r2, #0
 8002430:	621a      	str	r2, [r3, #32]
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8002432:	187b      	adds	r3, r7, r1
 8002434:	0018      	movs	r0, r3
 8002436:	f001 f915 	bl	8003664 <HAL_RCC_OscConfig>
 800243a:	1e03      	subs	r3, r0, #0
 800243c:	d001      	beq.n	8002442 <SystemClock_Config+0x66>
  {
    Error_Handler();
 800243e:	f000 faf3 	bl	8002a28 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8002442:	1d3b      	adds	r3, r7, #4
 8002444:	2207      	movs	r2, #7
 8002446:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8002448:	1d3b      	adds	r3, r7, #4
 800244a:	2200      	movs	r2, #0
 800244c:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800244e:	1d3b      	adds	r3, r7, #4
 8002450:	2200      	movs	r2, #0
 8002452:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8002454:	1d3b      	adds	r3, r7, #4
 8002456:	2200      	movs	r2, #0
 8002458:	60da      	str	r2, [r3, #12]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 800245a:	1d3b      	adds	r3, r7, #4
 800245c:	2100      	movs	r1, #0
 800245e:	0018      	movs	r0, r3
 8002460:	f001 fc60 	bl	8003d24 <HAL_RCC_ClockConfig>
 8002464:	1e03      	subs	r3, r0, #0
 8002466:	d001      	beq.n	800246c <SystemClock_Config+0x90>
  {
    Error_Handler();
 8002468:	f000 fade 	bl	8002a28 <Error_Handler>
  }
}
 800246c:	46c0      	nop			; (mov r8, r8)
 800246e:	46bd      	mov	sp, r7
 8002470:	b015      	add	sp, #84	; 0x54
 8002472:	bd90      	pop	{r4, r7, pc}

08002474 <MX_RTC_Init>:
  * @brief RTC Initialization Function
  * @param None
  * @retval None
  */
static void MX_RTC_Init(void)
{
 8002474:	b580      	push	{r7, lr}
 8002476:	b090      	sub	sp, #64	; 0x40
 8002478:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN RTC_Init 0 */

  /* USER CODE END RTC_Init 0 */

  RTC_TimeTypeDef sTime = {0};
 800247a:	232c      	movs	r3, #44	; 0x2c
 800247c:	18fb      	adds	r3, r7, r3
 800247e:	0018      	movs	r0, r3
 8002480:	2314      	movs	r3, #20
 8002482:	001a      	movs	r2, r3
 8002484:	2100      	movs	r1, #0
 8002486:	f005 fa29 	bl	80078dc <memset>
  RTC_DateTypeDef sDate = {0};
 800248a:	2328      	movs	r3, #40	; 0x28
 800248c:	18fb      	adds	r3, r7, r3
 800248e:	2200      	movs	r2, #0
 8002490:	601a      	str	r2, [r3, #0]
  RTC_AlarmTypeDef sAlarm = {0};
 8002492:	003b      	movs	r3, r7
 8002494:	0018      	movs	r0, r3
 8002496:	2328      	movs	r3, #40	; 0x28
 8002498:	001a      	movs	r2, r3
 800249a:	2100      	movs	r1, #0
 800249c:	f005 fa1e 	bl	80078dc <memset>

  /* USER CODE END RTC_Init 1 */

  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 80024a0:	4b44      	ldr	r3, [pc, #272]	; (80025b4 <MX_RTC_Init+0x140>)
 80024a2:	4a45      	ldr	r2, [pc, #276]	; (80025b8 <MX_RTC_Init+0x144>)
 80024a4:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 80024a6:	4b43      	ldr	r3, [pc, #268]	; (80025b4 <MX_RTC_Init+0x140>)
 80024a8:	2200      	movs	r2, #0
 80024aa:	609a      	str	r2, [r3, #8]
  hrtc.Init.AsynchPrediv = 127;
 80024ac:	4b41      	ldr	r3, [pc, #260]	; (80025b4 <MX_RTC_Init+0x140>)
 80024ae:	227f      	movs	r2, #127	; 0x7f
 80024b0:	60da      	str	r2, [r3, #12]
  hrtc.Init.SynchPrediv = 255;
 80024b2:	4b40      	ldr	r3, [pc, #256]	; (80025b4 <MX_RTC_Init+0x140>)
 80024b4:	22ff      	movs	r2, #255	; 0xff
 80024b6:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 80024b8:	4b3e      	ldr	r3, [pc, #248]	; (80025b4 <MX_RTC_Init+0x140>)
 80024ba:	2200      	movs	r2, #0
 80024bc:	615a      	str	r2, [r3, #20]
  hrtc.Init.OutPutRemap = RTC_OUTPUT_REMAP_NONE;
 80024be:	4b3d      	ldr	r3, [pc, #244]	; (80025b4 <MX_RTC_Init+0x140>)
 80024c0:	2200      	movs	r2, #0
 80024c2:	619a      	str	r2, [r3, #24]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 80024c4:	4b3b      	ldr	r3, [pc, #236]	; (80025b4 <MX_RTC_Init+0x140>)
 80024c6:	2200      	movs	r2, #0
 80024c8:	61da      	str	r2, [r3, #28]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 80024ca:	4b3a      	ldr	r3, [pc, #232]	; (80025b4 <MX_RTC_Init+0x140>)
 80024cc:	2280      	movs	r2, #128	; 0x80
 80024ce:	05d2      	lsls	r2, r2, #23
 80024d0:	621a      	str	r2, [r3, #32]
  hrtc.Init.OutPutPullUp = RTC_OUTPUT_PULLUP_NONE;
 80024d2:	4b38      	ldr	r3, [pc, #224]	; (80025b4 <MX_RTC_Init+0x140>)
 80024d4:	2200      	movs	r2, #0
 80024d6:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 80024d8:	4b36      	ldr	r3, [pc, #216]	; (80025b4 <MX_RTC_Init+0x140>)
 80024da:	0018      	movs	r0, r3
 80024dc:	f002 f808 	bl	80044f0 <HAL_RTC_Init>
 80024e0:	1e03      	subs	r3, r0, #0
 80024e2:	d001      	beq.n	80024e8 <MX_RTC_Init+0x74>
  {
    Error_Handler();
 80024e4:	f000 faa0 	bl	8002a28 <Error_Handler>

  /* USER CODE END Check_RTC_BKUP */

  /** Initialize RTC and set the Time and Date
  */
  sTime.Hours = 0;
 80024e8:	212c      	movs	r1, #44	; 0x2c
 80024ea:	187b      	adds	r3, r7, r1
 80024ec:	2200      	movs	r2, #0
 80024ee:	701a      	strb	r2, [r3, #0]
  sTime.Minutes = 0;
 80024f0:	187b      	adds	r3, r7, r1
 80024f2:	2200      	movs	r2, #0
 80024f4:	705a      	strb	r2, [r3, #1]
  sTime.Seconds = 0;
 80024f6:	187b      	adds	r3, r7, r1
 80024f8:	2200      	movs	r2, #0
 80024fa:	709a      	strb	r2, [r3, #2]
  sTime.SubSeconds = 0;
 80024fc:	187b      	adds	r3, r7, r1
 80024fe:	2200      	movs	r2, #0
 8002500:	605a      	str	r2, [r3, #4]
  sTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 8002502:	187b      	adds	r3, r7, r1
 8002504:	2200      	movs	r2, #0
 8002506:	60da      	str	r2, [r3, #12]
  sTime.StoreOperation = RTC_STOREOPERATION_RESET;
 8002508:	187b      	adds	r3, r7, r1
 800250a:	2200      	movs	r2, #0
 800250c:	611a      	str	r2, [r3, #16]
  if (HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BIN) != HAL_OK)
 800250e:	1879      	adds	r1, r7, r1
 8002510:	4b28      	ldr	r3, [pc, #160]	; (80025b4 <MX_RTC_Init+0x140>)
 8002512:	2200      	movs	r2, #0
 8002514:	0018      	movs	r0, r3
 8002516:	f002 f88d 	bl	8004634 <HAL_RTC_SetTime>
 800251a:	1e03      	subs	r3, r0, #0
 800251c:	d001      	beq.n	8002522 <MX_RTC_Init+0xae>
  {
    Error_Handler();
 800251e:	f000 fa83 	bl	8002a28 <Error_Handler>
  }
  sDate.WeekDay = RTC_WEEKDAY_SATURDAY;
 8002522:	2128      	movs	r1, #40	; 0x28
 8002524:	187b      	adds	r3, r7, r1
 8002526:	2206      	movs	r2, #6
 8002528:	701a      	strb	r2, [r3, #0]
  sDate.Month = RTC_MONTH_JANUARY;
 800252a:	187b      	adds	r3, r7, r1
 800252c:	2201      	movs	r2, #1
 800252e:	705a      	strb	r2, [r3, #1]
  sDate.Date = 1;
 8002530:	187b      	adds	r3, r7, r1
 8002532:	2201      	movs	r2, #1
 8002534:	709a      	strb	r2, [r3, #2]
  sDate.Year = 0;
 8002536:	187b      	adds	r3, r7, r1
 8002538:	2200      	movs	r2, #0
 800253a:	70da      	strb	r2, [r3, #3]

  if (HAL_RTC_SetDate(&hrtc, &sDate, RTC_FORMAT_BIN) != HAL_OK)
 800253c:	1879      	adds	r1, r7, r1
 800253e:	4b1d      	ldr	r3, [pc, #116]	; (80025b4 <MX_RTC_Init+0x140>)
 8002540:	2200      	movs	r2, #0
 8002542:	0018      	movs	r0, r3
 8002544:	f002 f97a 	bl	800483c <HAL_RTC_SetDate>
 8002548:	1e03      	subs	r3, r0, #0
 800254a:	d001      	beq.n	8002550 <MX_RTC_Init+0xdc>
  {
    Error_Handler();
 800254c:	f000 fa6c 	bl	8002a28 <Error_Handler>
  }

  /** Enable the Alarm A
  */
  sAlarm.AlarmTime.Hours = 0;
 8002550:	003b      	movs	r3, r7
 8002552:	2200      	movs	r2, #0
 8002554:	701a      	strb	r2, [r3, #0]
  sAlarm.AlarmTime.Minutes = 0;
 8002556:	003b      	movs	r3, r7
 8002558:	2200      	movs	r2, #0
 800255a:	705a      	strb	r2, [r3, #1]
  sAlarm.AlarmTime.Seconds = 0;
 800255c:	003b      	movs	r3, r7
 800255e:	2200      	movs	r2, #0
 8002560:	709a      	strb	r2, [r3, #2]
  sAlarm.AlarmTime.SubSeconds = 0;
 8002562:	003b      	movs	r3, r7
 8002564:	2200      	movs	r2, #0
 8002566:	605a      	str	r2, [r3, #4]
  sAlarm.AlarmTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 8002568:	003b      	movs	r3, r7
 800256a:	2200      	movs	r2, #0
 800256c:	60da      	str	r2, [r3, #12]
  sAlarm.AlarmTime.StoreOperation = RTC_STOREOPERATION_RESET;
 800256e:	003b      	movs	r3, r7
 8002570:	2200      	movs	r2, #0
 8002572:	611a      	str	r2, [r3, #16]
  sAlarm.AlarmMask = RTC_ALARMMASK_NONE;
 8002574:	003b      	movs	r3, r7
 8002576:	2200      	movs	r2, #0
 8002578:	615a      	str	r2, [r3, #20]
  sAlarm.AlarmSubSecondMask = RTC_ALARMSUBSECONDMASK_ALL;
 800257a:	003b      	movs	r3, r7
 800257c:	2200      	movs	r2, #0
 800257e:	619a      	str	r2, [r3, #24]
  sAlarm.AlarmDateWeekDaySel = RTC_ALARMDATEWEEKDAYSEL_DATE;
 8002580:	003b      	movs	r3, r7
 8002582:	2200      	movs	r2, #0
 8002584:	61da      	str	r2, [r3, #28]
  sAlarm.AlarmDateWeekDay = 1;
 8002586:	003b      	movs	r3, r7
 8002588:	2220      	movs	r2, #32
 800258a:	2101      	movs	r1, #1
 800258c:	5499      	strb	r1, [r3, r2]
  sAlarm.Alarm = RTC_ALARM_A;
 800258e:	003b      	movs	r3, r7
 8002590:	2280      	movs	r2, #128	; 0x80
 8002592:	0052      	lsls	r2, r2, #1
 8002594:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_RTC_SetAlarm(&hrtc, &sAlarm, RTC_FORMAT_BIN) != HAL_OK)
 8002596:	0039      	movs	r1, r7
 8002598:	4b06      	ldr	r3, [pc, #24]	; (80025b4 <MX_RTC_Init+0x140>)
 800259a:	2200      	movs	r2, #0
 800259c:	0018      	movs	r0, r3
 800259e:	f002 fa2d 	bl	80049fc <HAL_RTC_SetAlarm>
 80025a2:	1e03      	subs	r3, r0, #0
 80025a4:	d001      	beq.n	80025aa <MX_RTC_Init+0x136>
  {
    Error_Handler();
 80025a6:	f000 fa3f 	bl	8002a28 <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 80025aa:	46c0      	nop			; (mov r8, r8)
 80025ac:	46bd      	mov	sp, r7
 80025ae:	b010      	add	sp, #64	; 0x40
 80025b0:	bd80      	pop	{r7, pc}
 80025b2:	46c0      	nop			; (mov r8, r8)
 80025b4:	200006dc 	.word	0x200006dc
 80025b8:	40002800 	.word	0x40002800

080025bc <MX_TIM6_Init>:
  * @brief TIM6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM6_Init(void)
{
 80025bc:	b580      	push	{r7, lr}
 80025be:	b084      	sub	sp, #16
 80025c0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM6_Init 0 */

  /* USER CODE END TIM6_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80025c2:	1d3b      	adds	r3, r7, #4
 80025c4:	0018      	movs	r0, r3
 80025c6:	230c      	movs	r3, #12
 80025c8:	001a      	movs	r2, r3
 80025ca:	2100      	movs	r1, #0
 80025cc:	f005 f986 	bl	80078dc <memset>

  /* USER CODE BEGIN TIM6_Init 1 */

  /* USER CODE END TIM6_Init 1 */
  htim6.Instance = TIM6;
 80025d0:	4b15      	ldr	r3, [pc, #84]	; (8002628 <MX_TIM6_Init+0x6c>)
 80025d2:	4a16      	ldr	r2, [pc, #88]	; (800262c <MX_TIM6_Init+0x70>)
 80025d4:	601a      	str	r2, [r3, #0]
  htim6.Init.Prescaler = 16000-1;
 80025d6:	4b14      	ldr	r3, [pc, #80]	; (8002628 <MX_TIM6_Init+0x6c>)
 80025d8:	4a15      	ldr	r2, [pc, #84]	; (8002630 <MX_TIM6_Init+0x74>)
 80025da:	605a      	str	r2, [r3, #4]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 80025dc:	4b12      	ldr	r3, [pc, #72]	; (8002628 <MX_TIM6_Init+0x6c>)
 80025de:	2200      	movs	r2, #0
 80025e0:	609a      	str	r2, [r3, #8]
  htim6.Init.Period = 1000-1;
 80025e2:	4b11      	ldr	r3, [pc, #68]	; (8002628 <MX_TIM6_Init+0x6c>)
 80025e4:	4a13      	ldr	r2, [pc, #76]	; (8002634 <MX_TIM6_Init+0x78>)
 80025e6:	60da      	str	r2, [r3, #12]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80025e8:	4b0f      	ldr	r3, [pc, #60]	; (8002628 <MX_TIM6_Init+0x6c>)
 80025ea:	2200      	movs	r2, #0
 80025ec:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 80025ee:	4b0e      	ldr	r3, [pc, #56]	; (8002628 <MX_TIM6_Init+0x6c>)
 80025f0:	0018      	movs	r0, r3
 80025f2:	f002 fc1c 	bl	8004e2e <HAL_TIM_Base_Init>
 80025f6:	1e03      	subs	r3, r0, #0
 80025f8:	d001      	beq.n	80025fe <MX_TIM6_Init+0x42>
  {
    Error_Handler();
 80025fa:	f000 fa15 	bl	8002a28 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80025fe:	1d3b      	adds	r3, r7, #4
 8002600:	2200      	movs	r2, #0
 8002602:	601a      	str	r2, [r3, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002604:	1d3b      	adds	r3, r7, #4
 8002606:	2200      	movs	r2, #0
 8002608:	609a      	str	r2, [r3, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 800260a:	1d3a      	adds	r2, r7, #4
 800260c:	4b06      	ldr	r3, [pc, #24]	; (8002628 <MX_TIM6_Init+0x6c>)
 800260e:	0011      	movs	r1, r2
 8002610:	0018      	movs	r0, r3
 8002612:	f002 fed9 	bl	80053c8 <HAL_TIMEx_MasterConfigSynchronization>
 8002616:	1e03      	subs	r3, r0, #0
 8002618:	d001      	beq.n	800261e <MX_TIM6_Init+0x62>
  {
    Error_Handler();
 800261a:	f000 fa05 	bl	8002a28 <Error_Handler>
  }
  /* USER CODE BEGIN TIM6_Init 2 */

  /* USER CODE END TIM6_Init 2 */

}
 800261e:	46c0      	nop			; (mov r8, r8)
 8002620:	46bd      	mov	sp, r7
 8002622:	b004      	add	sp, #16
 8002624:	bd80      	pop	{r7, pc}
 8002626:	46c0      	nop			; (mov r8, r8)
 8002628:	20000708 	.word	0x20000708
 800262c:	40001000 	.word	0x40001000
 8002630:	00003e7f 	.word	0x00003e7f
 8002634:	000003e7 	.word	0x000003e7

08002638 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8002638:	b580      	push	{r7, lr}
 800263a:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 800263c:	4b23      	ldr	r3, [pc, #140]	; (80026cc <MX_USART2_UART_Init+0x94>)
 800263e:	4a24      	ldr	r2, [pc, #144]	; (80026d0 <MX_USART2_UART_Init+0x98>)
 8002640:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8002642:	4b22      	ldr	r3, [pc, #136]	; (80026cc <MX_USART2_UART_Init+0x94>)
 8002644:	22e1      	movs	r2, #225	; 0xe1
 8002646:	0252      	lsls	r2, r2, #9
 8002648:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800264a:	4b20      	ldr	r3, [pc, #128]	; (80026cc <MX_USART2_UART_Init+0x94>)
 800264c:	2200      	movs	r2, #0
 800264e:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8002650:	4b1e      	ldr	r3, [pc, #120]	; (80026cc <MX_USART2_UART_Init+0x94>)
 8002652:	2200      	movs	r2, #0
 8002654:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8002656:	4b1d      	ldr	r3, [pc, #116]	; (80026cc <MX_USART2_UART_Init+0x94>)
 8002658:	2200      	movs	r2, #0
 800265a:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 800265c:	4b1b      	ldr	r3, [pc, #108]	; (80026cc <MX_USART2_UART_Init+0x94>)
 800265e:	220c      	movs	r2, #12
 8002660:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002662:	4b1a      	ldr	r3, [pc, #104]	; (80026cc <MX_USART2_UART_Init+0x94>)
 8002664:	2200      	movs	r2, #0
 8002666:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8002668:	4b18      	ldr	r3, [pc, #96]	; (80026cc <MX_USART2_UART_Init+0x94>)
 800266a:	2200      	movs	r2, #0
 800266c:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800266e:	4b17      	ldr	r3, [pc, #92]	; (80026cc <MX_USART2_UART_Init+0x94>)
 8002670:	2200      	movs	r2, #0
 8002672:	621a      	str	r2, [r3, #32]
  huart2.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8002674:	4b15      	ldr	r3, [pc, #84]	; (80026cc <MX_USART2_UART_Init+0x94>)
 8002676:	2200      	movs	r2, #0
 8002678:	625a      	str	r2, [r3, #36]	; 0x24
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800267a:	4b14      	ldr	r3, [pc, #80]	; (80026cc <MX_USART2_UART_Init+0x94>)
 800267c:	2200      	movs	r2, #0
 800267e:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8002680:	4b12      	ldr	r3, [pc, #72]	; (80026cc <MX_USART2_UART_Init+0x94>)
 8002682:	0018      	movs	r0, r3
 8002684:	f002 ff2e 	bl	80054e4 <HAL_UART_Init>
 8002688:	1e03      	subs	r3, r0, #0
 800268a:	d001      	beq.n	8002690 <MX_USART2_UART_Init+0x58>
  {
    Error_Handler();
 800268c:	f000 f9cc 	bl	8002a28 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart2, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8002690:	4b0e      	ldr	r3, [pc, #56]	; (80026cc <MX_USART2_UART_Init+0x94>)
 8002692:	2100      	movs	r1, #0
 8002694:	0018      	movs	r0, r3
 8002696:	f003 fe53 	bl	8006340 <HAL_UARTEx_SetTxFifoThreshold>
 800269a:	1e03      	subs	r3, r0, #0
 800269c:	d001      	beq.n	80026a2 <MX_USART2_UART_Init+0x6a>
  {
    Error_Handler();
 800269e:	f000 f9c3 	bl	8002a28 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart2, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 80026a2:	4b0a      	ldr	r3, [pc, #40]	; (80026cc <MX_USART2_UART_Init+0x94>)
 80026a4:	2100      	movs	r1, #0
 80026a6:	0018      	movs	r0, r3
 80026a8:	f003 fe8a 	bl	80063c0 <HAL_UARTEx_SetRxFifoThreshold>
 80026ac:	1e03      	subs	r3, r0, #0
 80026ae:	d001      	beq.n	80026b4 <MX_USART2_UART_Init+0x7c>
  {
    Error_Handler();
 80026b0:	f000 f9ba 	bl	8002a28 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart2) != HAL_OK)
 80026b4:	4b05      	ldr	r3, [pc, #20]	; (80026cc <MX_USART2_UART_Init+0x94>)
 80026b6:	0018      	movs	r0, r3
 80026b8:	f003 fe08 	bl	80062cc <HAL_UARTEx_DisableFifoMode>
 80026bc:	1e03      	subs	r3, r0, #0
 80026be:	d001      	beq.n	80026c4 <MX_USART2_UART_Init+0x8c>
  {
    Error_Handler();
 80026c0:	f000 f9b2 	bl	8002a28 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80026c4:	46c0      	nop			; (mov r8, r8)
 80026c6:	46bd      	mov	sp, r7
 80026c8:	bd80      	pop	{r7, pc}
 80026ca:	46c0      	nop			; (mov r8, r8)
 80026cc:	20000754 	.word	0x20000754
 80026d0:	40004400 	.word	0x40004400

080026d4 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 80026d4:	b580      	push	{r7, lr}
 80026d6:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 80026d8:	4b23      	ldr	r3, [pc, #140]	; (8002768 <MX_USART3_UART_Init+0x94>)
 80026da:	4a24      	ldr	r2, [pc, #144]	; (800276c <MX_USART3_UART_Init+0x98>)
 80026dc:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 9600;
 80026de:	4b22      	ldr	r3, [pc, #136]	; (8002768 <MX_USART3_UART_Init+0x94>)
 80026e0:	2296      	movs	r2, #150	; 0x96
 80026e2:	0192      	lsls	r2, r2, #6
 80026e4:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 80026e6:	4b20      	ldr	r3, [pc, #128]	; (8002768 <MX_USART3_UART_Init+0x94>)
 80026e8:	2200      	movs	r2, #0
 80026ea:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 80026ec:	4b1e      	ldr	r3, [pc, #120]	; (8002768 <MX_USART3_UART_Init+0x94>)
 80026ee:	2200      	movs	r2, #0
 80026f0:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 80026f2:	4b1d      	ldr	r3, [pc, #116]	; (8002768 <MX_USART3_UART_Init+0x94>)
 80026f4:	2200      	movs	r2, #0
 80026f6:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 80026f8:	4b1b      	ldr	r3, [pc, #108]	; (8002768 <MX_USART3_UART_Init+0x94>)
 80026fa:	220c      	movs	r2, #12
 80026fc:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80026fe:	4b1a      	ldr	r3, [pc, #104]	; (8002768 <MX_USART3_UART_Init+0x94>)
 8002700:	2200      	movs	r2, #0
 8002702:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8002704:	4b18      	ldr	r3, [pc, #96]	; (8002768 <MX_USART3_UART_Init+0x94>)
 8002706:	2200      	movs	r2, #0
 8002708:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800270a:	4b17      	ldr	r3, [pc, #92]	; (8002768 <MX_USART3_UART_Init+0x94>)
 800270c:	2200      	movs	r2, #0
 800270e:	621a      	str	r2, [r3, #32]
  huart3.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8002710:	4b15      	ldr	r3, [pc, #84]	; (8002768 <MX_USART3_UART_Init+0x94>)
 8002712:	2200      	movs	r2, #0
 8002714:	625a      	str	r2, [r3, #36]	; 0x24
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8002716:	4b14      	ldr	r3, [pc, #80]	; (8002768 <MX_USART3_UART_Init+0x94>)
 8002718:	2200      	movs	r2, #0
 800271a:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart3) != HAL_OK)
 800271c:	4b12      	ldr	r3, [pc, #72]	; (8002768 <MX_USART3_UART_Init+0x94>)
 800271e:	0018      	movs	r0, r3
 8002720:	f002 fee0 	bl	80054e4 <HAL_UART_Init>
 8002724:	1e03      	subs	r3, r0, #0
 8002726:	d001      	beq.n	800272c <MX_USART3_UART_Init+0x58>
  {
    Error_Handler();
 8002728:	f000 f97e 	bl	8002a28 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart3, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 800272c:	4b0e      	ldr	r3, [pc, #56]	; (8002768 <MX_USART3_UART_Init+0x94>)
 800272e:	2100      	movs	r1, #0
 8002730:	0018      	movs	r0, r3
 8002732:	f003 fe05 	bl	8006340 <HAL_UARTEx_SetTxFifoThreshold>
 8002736:	1e03      	subs	r3, r0, #0
 8002738:	d001      	beq.n	800273e <MX_USART3_UART_Init+0x6a>
  {
    Error_Handler();
 800273a:	f000 f975 	bl	8002a28 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart3, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 800273e:	4b0a      	ldr	r3, [pc, #40]	; (8002768 <MX_USART3_UART_Init+0x94>)
 8002740:	2100      	movs	r1, #0
 8002742:	0018      	movs	r0, r3
 8002744:	f003 fe3c 	bl	80063c0 <HAL_UARTEx_SetRxFifoThreshold>
 8002748:	1e03      	subs	r3, r0, #0
 800274a:	d001      	beq.n	8002750 <MX_USART3_UART_Init+0x7c>
  {
    Error_Handler();
 800274c:	f000 f96c 	bl	8002a28 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart3) != HAL_OK)
 8002750:	4b05      	ldr	r3, [pc, #20]	; (8002768 <MX_USART3_UART_Init+0x94>)
 8002752:	0018      	movs	r0, r3
 8002754:	f003 fdba 	bl	80062cc <HAL_UARTEx_DisableFifoMode>
 8002758:	1e03      	subs	r3, r0, #0
 800275a:	d001      	beq.n	8002760 <MX_USART3_UART_Init+0x8c>
  {
    Error_Handler();
 800275c:	f000 f964 	bl	8002a28 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8002760:	46c0      	nop			; (mov r8, r8)
 8002762:	46bd      	mov	sp, r7
 8002764:	bd80      	pop	{r7, pc}
 8002766:	46c0      	nop			; (mov r8, r8)
 8002768:	200007e8 	.word	0x200007e8
 800276c:	40004800 	.word	0x40004800

08002770 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8002770:	b590      	push	{r4, r7, lr}
 8002772:	b08b      	sub	sp, #44	; 0x2c
 8002774:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002776:	2414      	movs	r4, #20
 8002778:	193b      	adds	r3, r7, r4
 800277a:	0018      	movs	r0, r3
 800277c:	2314      	movs	r3, #20
 800277e:	001a      	movs	r2, r3
 8002780:	2100      	movs	r1, #0
 8002782:	f005 f8ab 	bl	80078dc <memset>
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8002786:	4b3f      	ldr	r3, [pc, #252]	; (8002884 <MX_GPIO_Init+0x114>)
 8002788:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800278a:	4b3e      	ldr	r3, [pc, #248]	; (8002884 <MX_GPIO_Init+0x114>)
 800278c:	2104      	movs	r1, #4
 800278e:	430a      	orrs	r2, r1
 8002790:	635a      	str	r2, [r3, #52]	; 0x34
 8002792:	4b3c      	ldr	r3, [pc, #240]	; (8002884 <MX_GPIO_Init+0x114>)
 8002794:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002796:	2204      	movs	r2, #4
 8002798:	4013      	ands	r3, r2
 800279a:	613b      	str	r3, [r7, #16]
 800279c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 800279e:	4b39      	ldr	r3, [pc, #228]	; (8002884 <MX_GPIO_Init+0x114>)
 80027a0:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80027a2:	4b38      	ldr	r3, [pc, #224]	; (8002884 <MX_GPIO_Init+0x114>)
 80027a4:	2120      	movs	r1, #32
 80027a6:	430a      	orrs	r2, r1
 80027a8:	635a      	str	r2, [r3, #52]	; 0x34
 80027aa:	4b36      	ldr	r3, [pc, #216]	; (8002884 <MX_GPIO_Init+0x114>)
 80027ac:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80027ae:	2220      	movs	r2, #32
 80027b0:	4013      	ands	r3, r2
 80027b2:	60fb      	str	r3, [r7, #12]
 80027b4:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80027b6:	4b33      	ldr	r3, [pc, #204]	; (8002884 <MX_GPIO_Init+0x114>)
 80027b8:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80027ba:	4b32      	ldr	r3, [pc, #200]	; (8002884 <MX_GPIO_Init+0x114>)
 80027bc:	2101      	movs	r1, #1
 80027be:	430a      	orrs	r2, r1
 80027c0:	635a      	str	r2, [r3, #52]	; 0x34
 80027c2:	4b30      	ldr	r3, [pc, #192]	; (8002884 <MX_GPIO_Init+0x114>)
 80027c4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80027c6:	2201      	movs	r2, #1
 80027c8:	4013      	ands	r3, r2
 80027ca:	60bb      	str	r3, [r7, #8]
 80027cc:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80027ce:	4b2d      	ldr	r3, [pc, #180]	; (8002884 <MX_GPIO_Init+0x114>)
 80027d0:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80027d2:	4b2c      	ldr	r3, [pc, #176]	; (8002884 <MX_GPIO_Init+0x114>)
 80027d4:	2102      	movs	r1, #2
 80027d6:	430a      	orrs	r2, r1
 80027d8:	635a      	str	r2, [r3, #52]	; 0x34
 80027da:	4b2a      	ldr	r3, [pc, #168]	; (8002884 <MX_GPIO_Init+0x114>)
 80027dc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80027de:	2202      	movs	r2, #2
 80027e0:	4013      	ands	r3, r2
 80027e2:	607b      	str	r3, [r7, #4]
 80027e4:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LDG_GPIO_Port, LDG_Pin, GPIO_PIN_RESET);
 80027e6:	23a0      	movs	r3, #160	; 0xa0
 80027e8:	05db      	lsls	r3, r3, #23
 80027ea:	2200      	movs	r2, #0
 80027ec:	2120      	movs	r1, #32
 80027ee:	0018      	movs	r0, r3
 80027f0:	f000 fe90 	bl	8003514 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, ASTRO_WKUP_Pin|ASTRO_RST_Pin, GPIO_PIN_RESET);
 80027f4:	4b24      	ldr	r3, [pc, #144]	; (8002888 <MX_GPIO_Init+0x118>)
 80027f6:	2200      	movs	r2, #0
 80027f8:	2103      	movs	r1, #3
 80027fa:	0018      	movs	r0, r3
 80027fc:	f000 fe8a 	bl	8003514 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : LDG_Pin */
  GPIO_InitStruct.Pin = LDG_Pin;
 8002800:	193b      	adds	r3, r7, r4
 8002802:	2220      	movs	r2, #32
 8002804:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002806:	193b      	adds	r3, r7, r4
 8002808:	2201      	movs	r2, #1
 800280a:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800280c:	193b      	adds	r3, r7, r4
 800280e:	2200      	movs	r2, #0
 8002810:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8002812:	193b      	adds	r3, r7, r4
 8002814:	2202      	movs	r2, #2
 8002816:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(LDG_GPIO_Port, &GPIO_InitStruct);
 8002818:	193a      	adds	r2, r7, r4
 800281a:	23a0      	movs	r3, #160	; 0xa0
 800281c:	05db      	lsls	r3, r3, #23
 800281e:	0011      	movs	r1, r2
 8002820:	0018      	movs	r0, r3
 8002822:	f000 fd0b 	bl	800323c <HAL_GPIO_Init>

  /*Configure GPIO pins : ASTRO_WKUP_Pin ASTRO_RST_Pin */
  GPIO_InitStruct.Pin = ASTRO_WKUP_Pin|ASTRO_RST_Pin;
 8002826:	193b      	adds	r3, r7, r4
 8002828:	2203      	movs	r2, #3
 800282a:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800282c:	193b      	adds	r3, r7, r4
 800282e:	2201      	movs	r2, #1
 8002830:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002832:	193b      	adds	r3, r7, r4
 8002834:	2200      	movs	r2, #0
 8002836:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002838:	193b      	adds	r3, r7, r4
 800283a:	2200      	movs	r2, #0
 800283c:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800283e:	193b      	adds	r3, r7, r4
 8002840:	4a11      	ldr	r2, [pc, #68]	; (8002888 <MX_GPIO_Init+0x118>)
 8002842:	0019      	movs	r1, r3
 8002844:	0010      	movs	r0, r2
 8002846:	f000 fcf9 	bl	800323c <HAL_GPIO_Init>

  /*Configure GPIO pin : ASTRO_EVT_IT2_Pin */
  GPIO_InitStruct.Pin = ASTRO_EVT_IT2_Pin;
 800284a:	0021      	movs	r1, r4
 800284c:	187b      	adds	r3, r7, r1
 800284e:	2204      	movs	r2, #4
 8002850:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8002852:	187b      	adds	r3, r7, r1
 8002854:	2288      	movs	r2, #136	; 0x88
 8002856:	0352      	lsls	r2, r2, #13
 8002858:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800285a:	187b      	adds	r3, r7, r1
 800285c:	2200      	movs	r2, #0
 800285e:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(ASTRO_EVT_IT2_GPIO_Port, &GPIO_InitStruct);
 8002860:	187b      	adds	r3, r7, r1
 8002862:	4a09      	ldr	r2, [pc, #36]	; (8002888 <MX_GPIO_Init+0x118>)
 8002864:	0019      	movs	r1, r3
 8002866:	0010      	movs	r0, r2
 8002868:	f000 fce8 	bl	800323c <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI2_3_IRQn, 3, 0);
 800286c:	2200      	movs	r2, #0
 800286e:	2103      	movs	r1, #3
 8002870:	2006      	movs	r0, #6
 8002872:	f000 fcad 	bl	80031d0 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI2_3_IRQn);
 8002876:	2006      	movs	r0, #6
 8002878:	f000 fcbf 	bl	80031fa <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 800287c:	46c0      	nop			; (mov r8, r8)
 800287e:	46bd      	mov	sp, r7
 8002880:	b00b      	add	sp, #44	; 0x2c
 8002882:	bd90      	pop	{r4, r7, pc}
 8002884:	40021000 	.word	0x40021000
 8002888:	50000400 	.word	0x50000400

0800288c <send_debug_logs>:

/* USER CODE BEGIN 4 */
void send_debug_logs ( char* p_tx_buffer )
{
 800288c:	b580      	push	{r7, lr}
 800288e:	b084      	sub	sp, #16
 8002890:	af00      	add	r7, sp, #0
 8002892:	6078      	str	r0, [r7, #4]
    uint32_t length = strlen ( p_tx_buffer ) ;
 8002894:	687b      	ldr	r3, [r7, #4]
 8002896:	0018      	movs	r0, r3
 8002898:	f7fd fc34 	bl	8000104 <strlen>
 800289c:	0003      	movs	r3, r0
 800289e:	60fb      	str	r3, [r7, #12]

    if ( length > UART_TX_MAX_BUFF_SIZE )
 80028a0:	68fb      	ldr	r3, [r7, #12]
 80028a2:	2bfa      	cmp	r3, #250	; 0xfa
 80028a4:	d908      	bls.n	80028b8 <send_debug_logs+0x2c>
    {
        HAL_UART_Transmit ( HUART_DBG , ( uint8_t* ) "[ERROR] UART buffer reached max length.\n" , 42 , 1000 ) ;
 80028a6:	23fa      	movs	r3, #250	; 0xfa
 80028a8:	009b      	lsls	r3, r3, #2
 80028aa:	490d      	ldr	r1, [pc, #52]	; (80028e0 <send_debug_logs+0x54>)
 80028ac:	480d      	ldr	r0, [pc, #52]	; (80028e4 <send_debug_logs+0x58>)
 80028ae:	222a      	movs	r2, #42	; 0x2a
 80028b0:	f002 fe6e 	bl	8005590 <HAL_UART_Transmit>
        length = UART_TX_MAX_BUFF_SIZE;
 80028b4:	23fa      	movs	r3, #250	; 0xfa
 80028b6:	60fb      	str	r3, [r7, #12]
    }

    HAL_UART_Transmit ( HUART_DBG , ( uint8_t* ) p_tx_buffer , length , 1000 ) ;
 80028b8:	68fb      	ldr	r3, [r7, #12]
 80028ba:	b29a      	uxth	r2, r3
 80028bc:	23fa      	movs	r3, #250	; 0xfa
 80028be:	009b      	lsls	r3, r3, #2
 80028c0:	6879      	ldr	r1, [r7, #4]
 80028c2:	4808      	ldr	r0, [pc, #32]	; (80028e4 <send_debug_logs+0x58>)
 80028c4:	f002 fe64 	bl	8005590 <HAL_UART_Transmit>
    HAL_UART_Transmit ( HUART_DBG , ( uint8_t* ) "\n" , 1 , 1000 ) ;
 80028c8:	23fa      	movs	r3, #250	; 0xfa
 80028ca:	009b      	lsls	r3, r3, #2
 80028cc:	4906      	ldr	r1, [pc, #24]	; (80028e8 <send_debug_logs+0x5c>)
 80028ce:	4805      	ldr	r0, [pc, #20]	; (80028e4 <send_debug_logs+0x58>)
 80028d0:	2201      	movs	r2, #1
 80028d2:	f002 fe5d 	bl	8005590 <HAL_UART_Transmit>
}
 80028d6:	46c0      	nop			; (mov r8, r8)
 80028d8:	46bd      	mov	sp, r7
 80028da:	b004      	add	sp, #16
 80028dc:	bd80      	pop	{r7, pc}
 80028de:	46c0      	nop			; (mov r8, r8)
 80028e0:	0800c3d0 	.word	0x0800c3d0
 80028e4:	20000754 	.word	0x20000754
 80028e8:	0800c3fc 	.word	0x0800c3fc

080028ec <reset_astronode>:
void reset_astronode ( void )
{
 80028ec:	b580      	push	{r7, lr}
 80028ee:	af00      	add	r7, sp, #0
    HAL_GPIO_WritePin ( ASTRO_RST_GPIO_Port , ASTRO_RST_Pin , GPIO_PIN_SET ) ;
 80028f0:	4b0a      	ldr	r3, [pc, #40]	; (800291c <reset_astronode+0x30>)
 80028f2:	2201      	movs	r2, #1
 80028f4:	2102      	movs	r1, #2
 80028f6:	0018      	movs	r0, r3
 80028f8:	f000 fe0c 	bl	8003514 <HAL_GPIO_WritePin>
    HAL_Delay ( 1 ) ;
 80028fc:	2001      	movs	r0, #1
 80028fe:	f000 fb6f 	bl	8002fe0 <HAL_Delay>
    HAL_GPIO_WritePin ( ASTRO_RST_GPIO_Port , ASTRO_RST_Pin , GPIO_PIN_RESET ) ;
 8002902:	4b06      	ldr	r3, [pc, #24]	; (800291c <reset_astronode+0x30>)
 8002904:	2200      	movs	r2, #0
 8002906:	2102      	movs	r1, #2
 8002908:	0018      	movs	r0, r3
 800290a:	f000 fe03 	bl	8003514 <HAL_GPIO_WritePin>
    HAL_Delay ( 250 ) ;
 800290e:	20fa      	movs	r0, #250	; 0xfa
 8002910:	f000 fb66 	bl	8002fe0 <HAL_Delay>
}
 8002914:	46c0      	nop			; (mov r8, r8)
 8002916:	46bd      	mov	sp, r7
 8002918:	bd80      	pop	{r7, pc}
 800291a:	46c0      	nop			; (mov r8, r8)
 800291c:	50000400 	.word	0x50000400

08002920 <send_astronode_request>:
void send_astronode_request ( uint8_t* p_tx_buffer , uint32_t length )
{
 8002920:	b580      	push	{r7, lr}
 8002922:	b082      	sub	sp, #8
 8002924:	af00      	add	r7, sp, #0
 8002926:	6078      	str	r0, [r7, #4]
 8002928:	6039      	str	r1, [r7, #0]
    send_debug_logs ( "Message sent to the Astronode --> " ) ;
 800292a:	4b0a      	ldr	r3, [pc, #40]	; (8002954 <send_astronode_request+0x34>)
 800292c:	0018      	movs	r0, r3
 800292e:	f7ff ffad 	bl	800288c <send_debug_logs>
    send_debug_logs ( ( char* ) p_tx_buffer ) ;
 8002932:	687b      	ldr	r3, [r7, #4]
 8002934:	0018      	movs	r0, r3
 8002936:	f7ff ffa9 	bl	800288c <send_debug_logs>

    HAL_UART_Transmit ( HUART_ASTRO , p_tx_buffer , length , 1000 ) ;
 800293a:	683b      	ldr	r3, [r7, #0]
 800293c:	b29a      	uxth	r2, r3
 800293e:	23fa      	movs	r3, #250	; 0xfa
 8002940:	009b      	lsls	r3, r3, #2
 8002942:	6879      	ldr	r1, [r7, #4]
 8002944:	4804      	ldr	r0, [pc, #16]	; (8002958 <send_astronode_request+0x38>)
 8002946:	f002 fe23 	bl	8005590 <HAL_UART_Transmit>
}
 800294a:	46c0      	nop			; (mov r8, r8)
 800294c:	46bd      	mov	sp, r7
 800294e:	b002      	add	sp, #8
 8002950:	bd80      	pop	{r7, pc}
 8002952:	46c0      	nop			; (mov r8, r8)
 8002954:	0800c400 	.word	0x0800c400
 8002958:	200007e8 	.word	0x200007e8

0800295c <is_astronode_character_received>:
bool is_astronode_character_received ( uint8_t* p_rx_char )
{
 800295c:	b580      	push	{r7, lr}
 800295e:	b082      	sub	sp, #8
 8002960:	af00      	add	r7, sp, #0
 8002962:	6078      	str	r0, [r7, #4]
    return ( HAL_UART_Receive ( HUART_ASTRO , p_rx_char , 1 , 100 ) == HAL_OK ? true : false ) ;
 8002964:	6879      	ldr	r1, [r7, #4]
 8002966:	4806      	ldr	r0, [pc, #24]	; (8002980 <is_astronode_character_received+0x24>)
 8002968:	2364      	movs	r3, #100	; 0x64
 800296a:	2201      	movs	r2, #1
 800296c:	f002 feac 	bl	80056c8 <HAL_UART_Receive>
 8002970:	0003      	movs	r3, r0
 8002972:	425a      	negs	r2, r3
 8002974:	4153      	adcs	r3, r2
 8002976:	b2db      	uxtb	r3, r3
}
 8002978:	0018      	movs	r0, r3
 800297a:	46bd      	mov	sp, r7
 800297c:	b002      	add	sp, #8
 800297e:	bd80      	pop	{r7, pc}
 8002980:	200007e8 	.word	0x200007e8

08002984 <get_systick>:
bool is_evt_pin_high ( void )
{
	return ( HAL_GPIO_ReadPin ( GPIOA , ASTRO_EVT_IT2_Pin ) == GPIO_PIN_SET ? true : false);
}
uint32_t get_systick ( void )
{
 8002984:	b580      	push	{r7, lr}
 8002986:	af00      	add	r7, sp, #0
    return HAL_GetTick() ;
 8002988:	f000 fb20 	bl	8002fcc <HAL_GetTick>
 800298c:	0003      	movs	r3, r0
}
 800298e:	0018      	movs	r0, r3
 8002990:	46bd      	mov	sp, r7
 8002992:	bd80      	pop	{r7, pc}

08002994 <is_systick_timeout_over>:
bool is_systick_timeout_over ( uint32_t starting_value , uint16_t duration )
{
 8002994:	b580      	push	{r7, lr}
 8002996:	b082      	sub	sp, #8
 8002998:	af00      	add	r7, sp, #0
 800299a:	6078      	str	r0, [r7, #4]
 800299c:	000a      	movs	r2, r1
 800299e:	1cbb      	adds	r3, r7, #2
 80029a0:	801a      	strh	r2, [r3, #0]
    return ( get_systick () - starting_value > duration ) ? true : false ;
 80029a2:	f7ff ffef 	bl	8002984 <get_systick>
 80029a6:	0002      	movs	r2, r0
 80029a8:	687b      	ldr	r3, [r7, #4]
 80029aa:	1ad3      	subs	r3, r2, r3
 80029ac:	1cba      	adds	r2, r7, #2
 80029ae:	8812      	ldrh	r2, [r2, #0]
 80029b0:	429a      	cmp	r2, r3
 80029b2:	419b      	sbcs	r3, r3
 80029b4:	425b      	negs	r3, r3
 80029b6:	b2db      	uxtb	r3, r3
}
 80029b8:	0018      	movs	r0, r3
 80029ba:	46bd      	mov	sp, r7
 80029bc:	b002      	add	sp, #8
 80029be:	bd80      	pop	{r7, pc}

080029c0 <my_tim_init>:

// TIM functions
void my_tim_init ( TIM_HandleTypeDef* htim )
{
 80029c0:	b580      	push	{r7, lr}
 80029c2:	b082      	sub	sp, #8
 80029c4:	af00      	add	r7, sp, #0
 80029c6:	6078      	str	r0, [r7, #4]
	__HAL_TIM_CLEAR_IT ( htim , TIM_IT_UPDATE ) ;
 80029c8:	687b      	ldr	r3, [r7, #4]
 80029ca:	681b      	ldr	r3, [r3, #0]
 80029cc:	2202      	movs	r2, #2
 80029ce:	4252      	negs	r2, r2
 80029d0:	611a      	str	r2, [r3, #16]
}
 80029d2:	46c0      	nop			; (mov r8, r8)
 80029d4:	46bd      	mov	sp, r7
 80029d6:	b002      	add	sp, #8
 80029d8:	bd80      	pop	{r7, pc}
	...

080029dc <is_system_initialized>:
	HAL_TIM_Base_Stop_IT ( htim ) ;
}

// System functions
bool is_system_initialized ( void )
{
 80029dc:	b590      	push	{r4, r7, lr}
 80029de:	b083      	sub	sp, #12
 80029e0:	af00      	add	r7, sp, #0
	uint16_t yyyy ;

	uint32_t commn_ts = astronode_send_rtc_rr () ;
 80029e2:	f004 f801 	bl	80069e8 <astronode_send_rtc_rr>
 80029e6:	0003      	movs	r3, r0
 80029e8:	607b      	str	r3, [r7, #4]

	yyyy = my_rtc_get_time_s ( rtc_dt_s ) ;
 80029ea:	1cbc      	adds	r4, r7, #2
 80029ec:	4b0c      	ldr	r3, [pc, #48]	; (8002a20 <is_system_initialized+0x44>)
 80029ee:	0018      	movs	r0, r3
 80029f0:	f004 fdce 	bl	8007590 <my_rtc_get_time_s>
 80029f4:	0003      	movs	r3, r0
 80029f6:	8023      	strh	r3, [r4, #0]
	send_debug_logs ( rtc_dt_s ) ;
 80029f8:	4b09      	ldr	r3, [pc, #36]	; (8002a20 <is_system_initialized+0x44>)
 80029fa:	0018      	movs	r0, r3
 80029fc:	f7ff ff46 	bl	800288c <send_debug_logs>
	if ( yyyy >= FIRMWARE_RELEASE_YEAR || commn_ts != 0 )
 8002a00:	1cbb      	adds	r3, r7, #2
 8002a02:	881b      	ldrh	r3, [r3, #0]
 8002a04:	4a07      	ldr	r2, [pc, #28]	; (8002a24 <is_system_initialized+0x48>)
 8002a06:	4293      	cmp	r3, r2
 8002a08:	d802      	bhi.n	8002a10 <is_system_initialized+0x34>
 8002a0a:	687b      	ldr	r3, [r7, #4]
 8002a0c:	2b00      	cmp	r3, #0
 8002a0e:	d001      	beq.n	8002a14 <is_system_initialized+0x38>
	{
		return true ;
 8002a10:	2301      	movs	r3, #1
 8002a12:	e000      	b.n	8002a16 <is_system_initialized+0x3a>
	}
	return false ;
 8002a14:	2300      	movs	r3, #0
}
 8002a16:	0018      	movs	r0, r3
 8002a18:	46bd      	mov	sp, r7
 8002a1a:	b003      	add	sp, #12
 8002a1c:	bd90      	pop	{r4, r7, pc}
 8002a1e:	46c0      	nop			; (mov r8, r8)
 8002a20:	2000087c 	.word	0x2000087c
 8002a24:	000007e6 	.word	0x000007e6

08002a28 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8002a28:	b580      	push	{r7, lr}
 8002a2a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8002a2c:	b672      	cpsid	i
}
 8002a2e:	46c0      	nop			; (mov r8, r8)
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8002a30:	e7fe      	b.n	8002a30 <Error_Handler+0x8>
	...

08002a34 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002a34:	b580      	push	{r7, lr}
 8002a36:	b082      	sub	sp, #8
 8002a38:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002a3a:	4b11      	ldr	r3, [pc, #68]	; (8002a80 <HAL_MspInit+0x4c>)
 8002a3c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002a3e:	4b10      	ldr	r3, [pc, #64]	; (8002a80 <HAL_MspInit+0x4c>)
 8002a40:	2101      	movs	r1, #1
 8002a42:	430a      	orrs	r2, r1
 8002a44:	641a      	str	r2, [r3, #64]	; 0x40
 8002a46:	4b0e      	ldr	r3, [pc, #56]	; (8002a80 <HAL_MspInit+0x4c>)
 8002a48:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a4a:	2201      	movs	r2, #1
 8002a4c:	4013      	ands	r3, r2
 8002a4e:	607b      	str	r3, [r7, #4]
 8002a50:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8002a52:	4b0b      	ldr	r3, [pc, #44]	; (8002a80 <HAL_MspInit+0x4c>)
 8002a54:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8002a56:	4b0a      	ldr	r3, [pc, #40]	; (8002a80 <HAL_MspInit+0x4c>)
 8002a58:	2180      	movs	r1, #128	; 0x80
 8002a5a:	0549      	lsls	r1, r1, #21
 8002a5c:	430a      	orrs	r2, r1
 8002a5e:	63da      	str	r2, [r3, #60]	; 0x3c
 8002a60:	4b07      	ldr	r3, [pc, #28]	; (8002a80 <HAL_MspInit+0x4c>)
 8002a62:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8002a64:	2380      	movs	r3, #128	; 0x80
 8002a66:	055b      	lsls	r3, r3, #21
 8002a68:	4013      	ands	r3, r2
 8002a6a:	603b      	str	r3, [r7, #0]
 8002a6c:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  /** Disable the internal Pull-Up in Dead Battery pins of UCPD peripheral
  */
  HAL_SYSCFG_StrobeDBattpinsConfig(SYSCFG_CFGR1_UCPD1_STROBE | SYSCFG_CFGR1_UCPD2_STROBE);
 8002a6e:	23c0      	movs	r3, #192	; 0xc0
 8002a70:	00db      	lsls	r3, r3, #3
 8002a72:	0018      	movs	r0, r3
 8002a74:	f000 fad8 	bl	8003028 <HAL_SYSCFG_StrobeDBattpinsConfig>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002a78:	46c0      	nop			; (mov r8, r8)
 8002a7a:	46bd      	mov	sp, r7
 8002a7c:	b002      	add	sp, #8
 8002a7e:	bd80      	pop	{r7, pc}
 8002a80:	40021000 	.word	0x40021000

08002a84 <HAL_RTC_MspInit>:
* This function configures the hardware resources used in this example
* @param hrtc: RTC handle pointer
* @retval None
*/
void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{
 8002a84:	b590      	push	{r4, r7, lr}
 8002a86:	b097      	sub	sp, #92	; 0x5c
 8002a88:	af00      	add	r7, sp, #0
 8002a8a:	6078      	str	r0, [r7, #4]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8002a8c:	240c      	movs	r4, #12
 8002a8e:	193b      	adds	r3, r7, r4
 8002a90:	0018      	movs	r0, r3
 8002a92:	234c      	movs	r3, #76	; 0x4c
 8002a94:	001a      	movs	r2, r3
 8002a96:	2100      	movs	r1, #0
 8002a98:	f004 ff20 	bl	80078dc <memset>
  if(hrtc->Instance==RTC)
 8002a9c:	687b      	ldr	r3, [r7, #4]
 8002a9e:	681b      	ldr	r3, [r3, #0]
 8002aa0:	4a15      	ldr	r2, [pc, #84]	; (8002af8 <HAL_RTC_MspInit+0x74>)
 8002aa2:	4293      	cmp	r3, r2
 8002aa4:	d124      	bne.n	8002af0 <HAL_RTC_MspInit+0x6c>

  /* USER CODE END RTC_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 8002aa6:	193b      	adds	r3, r7, r4
 8002aa8:	2280      	movs	r2, #128	; 0x80
 8002aaa:	0292      	lsls	r2, r2, #10
 8002aac:	601a      	str	r2, [r3, #0]
    PeriphClkInit.RTCClockSelection = RCC_RTCCLKSOURCE_LSI;
 8002aae:	193b      	adds	r3, r7, r4
 8002ab0:	2280      	movs	r2, #128	; 0x80
 8002ab2:	0092      	lsls	r2, r2, #2
 8002ab4:	641a      	str	r2, [r3, #64]	; 0x40
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8002ab6:	193b      	adds	r3, r7, r4
 8002ab8:	0018      	movs	r0, r3
 8002aba:	f001 fadd 	bl	8004078 <HAL_RCCEx_PeriphCLKConfig>
 8002abe:	1e03      	subs	r3, r0, #0
 8002ac0:	d001      	beq.n	8002ac6 <HAL_RTC_MspInit+0x42>
    {
      Error_Handler();
 8002ac2:	f7ff ffb1 	bl	8002a28 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_RTC_ENABLE();
 8002ac6:	4b0d      	ldr	r3, [pc, #52]	; (8002afc <HAL_RTC_MspInit+0x78>)
 8002ac8:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8002aca:	4b0c      	ldr	r3, [pc, #48]	; (8002afc <HAL_RTC_MspInit+0x78>)
 8002acc:	2180      	movs	r1, #128	; 0x80
 8002ace:	0209      	lsls	r1, r1, #8
 8002ad0:	430a      	orrs	r2, r1
 8002ad2:	65da      	str	r2, [r3, #92]	; 0x5c
    __HAL_RCC_RTCAPB_CLK_ENABLE();
 8002ad4:	4b09      	ldr	r3, [pc, #36]	; (8002afc <HAL_RTC_MspInit+0x78>)
 8002ad6:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8002ad8:	4b08      	ldr	r3, [pc, #32]	; (8002afc <HAL_RTC_MspInit+0x78>)
 8002ada:	2180      	movs	r1, #128	; 0x80
 8002adc:	00c9      	lsls	r1, r1, #3
 8002ade:	430a      	orrs	r2, r1
 8002ae0:	63da      	str	r2, [r3, #60]	; 0x3c
 8002ae2:	4b06      	ldr	r3, [pc, #24]	; (8002afc <HAL_RTC_MspInit+0x78>)
 8002ae4:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8002ae6:	2380      	movs	r3, #128	; 0x80
 8002ae8:	00db      	lsls	r3, r3, #3
 8002aea:	4013      	ands	r3, r2
 8002aec:	60bb      	str	r3, [r7, #8]
 8002aee:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }

}
 8002af0:	46c0      	nop			; (mov r8, r8)
 8002af2:	46bd      	mov	sp, r7
 8002af4:	b017      	add	sp, #92	; 0x5c
 8002af6:	bd90      	pop	{r4, r7, pc}
 8002af8:	40002800 	.word	0x40002800
 8002afc:	40021000 	.word	0x40021000

08002b00 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8002b00:	b580      	push	{r7, lr}
 8002b02:	b084      	sub	sp, #16
 8002b04:	af00      	add	r7, sp, #0
 8002b06:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM6)
 8002b08:	687b      	ldr	r3, [r7, #4]
 8002b0a:	681b      	ldr	r3, [r3, #0]
 8002b0c:	4a0d      	ldr	r2, [pc, #52]	; (8002b44 <HAL_TIM_Base_MspInit+0x44>)
 8002b0e:	4293      	cmp	r3, r2
 8002b10:	d113      	bne.n	8002b3a <HAL_TIM_Base_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM6_MspInit 0 */

  /* USER CODE END TIM6_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM6_CLK_ENABLE();
 8002b12:	4b0d      	ldr	r3, [pc, #52]	; (8002b48 <HAL_TIM_Base_MspInit+0x48>)
 8002b14:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8002b16:	4b0c      	ldr	r3, [pc, #48]	; (8002b48 <HAL_TIM_Base_MspInit+0x48>)
 8002b18:	2110      	movs	r1, #16
 8002b1a:	430a      	orrs	r2, r1
 8002b1c:	63da      	str	r2, [r3, #60]	; 0x3c
 8002b1e:	4b0a      	ldr	r3, [pc, #40]	; (8002b48 <HAL_TIM_Base_MspInit+0x48>)
 8002b20:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002b22:	2210      	movs	r2, #16
 8002b24:	4013      	ands	r3, r2
 8002b26:	60fb      	str	r3, [r7, #12]
 8002b28:	68fb      	ldr	r3, [r7, #12]
    /* TIM6 interrupt Init */
    HAL_NVIC_SetPriority(TIM6_DAC_LPTIM1_IRQn, 3, 0);
 8002b2a:	2200      	movs	r2, #0
 8002b2c:	2103      	movs	r1, #3
 8002b2e:	2011      	movs	r0, #17
 8002b30:	f000 fb4e 	bl	80031d0 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM6_DAC_LPTIM1_IRQn);
 8002b34:	2011      	movs	r0, #17
 8002b36:	f000 fb60 	bl	80031fa <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM6_MspInit 1 */

  /* USER CODE END TIM6_MspInit 1 */
  }

}
 8002b3a:	46c0      	nop			; (mov r8, r8)
 8002b3c:	46bd      	mov	sp, r7
 8002b3e:	b004      	add	sp, #16
 8002b40:	bd80      	pop	{r7, pc}
 8002b42:	46c0      	nop			; (mov r8, r8)
 8002b44:	40001000 	.word	0x40001000
 8002b48:	40021000 	.word	0x40021000

08002b4c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8002b4c:	b590      	push	{r4, r7, lr}
 8002b4e:	b09f      	sub	sp, #124	; 0x7c
 8002b50:	af00      	add	r7, sp, #0
 8002b52:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002b54:	2364      	movs	r3, #100	; 0x64
 8002b56:	18fb      	adds	r3, r7, r3
 8002b58:	0018      	movs	r0, r3
 8002b5a:	2314      	movs	r3, #20
 8002b5c:	001a      	movs	r2, r3
 8002b5e:	2100      	movs	r1, #0
 8002b60:	f004 febc 	bl	80078dc <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8002b64:	2418      	movs	r4, #24
 8002b66:	193b      	adds	r3, r7, r4
 8002b68:	0018      	movs	r0, r3
 8002b6a:	234c      	movs	r3, #76	; 0x4c
 8002b6c:	001a      	movs	r2, r3
 8002b6e:	2100      	movs	r1, #0
 8002b70:	f004 feb4 	bl	80078dc <memset>
  if(huart->Instance==USART2)
 8002b74:	687b      	ldr	r3, [r7, #4]
 8002b76:	681b      	ldr	r3, [r3, #0]
 8002b78:	4a45      	ldr	r2, [pc, #276]	; (8002c90 <HAL_UART_MspInit+0x144>)
 8002b7a:	4293      	cmp	r3, r2
 8002b7c:	d13f      	bne.n	8002bfe <HAL_UART_MspInit+0xb2>

  /* USER CODE END USART2_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8002b7e:	193b      	adds	r3, r7, r4
 8002b80:	2202      	movs	r2, #2
 8002b82:	601a      	str	r2, [r3, #0]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8002b84:	193b      	adds	r3, r7, r4
 8002b86:	2200      	movs	r2, #0
 8002b88:	609a      	str	r2, [r3, #8]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8002b8a:	193b      	adds	r3, r7, r4
 8002b8c:	0018      	movs	r0, r3
 8002b8e:	f001 fa73 	bl	8004078 <HAL_RCCEx_PeriphCLKConfig>
 8002b92:	1e03      	subs	r3, r0, #0
 8002b94:	d001      	beq.n	8002b9a <HAL_UART_MspInit+0x4e>
    {
      Error_Handler();
 8002b96:	f7ff ff47 	bl	8002a28 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8002b9a:	4b3e      	ldr	r3, [pc, #248]	; (8002c94 <HAL_UART_MspInit+0x148>)
 8002b9c:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8002b9e:	4b3d      	ldr	r3, [pc, #244]	; (8002c94 <HAL_UART_MspInit+0x148>)
 8002ba0:	2180      	movs	r1, #128	; 0x80
 8002ba2:	0289      	lsls	r1, r1, #10
 8002ba4:	430a      	orrs	r2, r1
 8002ba6:	63da      	str	r2, [r3, #60]	; 0x3c
 8002ba8:	4b3a      	ldr	r3, [pc, #232]	; (8002c94 <HAL_UART_MspInit+0x148>)
 8002baa:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8002bac:	2380      	movs	r3, #128	; 0x80
 8002bae:	029b      	lsls	r3, r3, #10
 8002bb0:	4013      	ands	r3, r2
 8002bb2:	617b      	str	r3, [r7, #20]
 8002bb4:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002bb6:	4b37      	ldr	r3, [pc, #220]	; (8002c94 <HAL_UART_MspInit+0x148>)
 8002bb8:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002bba:	4b36      	ldr	r3, [pc, #216]	; (8002c94 <HAL_UART_MspInit+0x148>)
 8002bbc:	2101      	movs	r1, #1
 8002bbe:	430a      	orrs	r2, r1
 8002bc0:	635a      	str	r2, [r3, #52]	; 0x34
 8002bc2:	4b34      	ldr	r3, [pc, #208]	; (8002c94 <HAL_UART_MspInit+0x148>)
 8002bc4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002bc6:	2201      	movs	r2, #1
 8002bc8:	4013      	ands	r3, r2
 8002bca:	613b      	str	r3, [r7, #16]
 8002bcc:	693b      	ldr	r3, [r7, #16]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = UART2_TX_Pin|UART2_RX_Pin;
 8002bce:	2164      	movs	r1, #100	; 0x64
 8002bd0:	187b      	adds	r3, r7, r1
 8002bd2:	220c      	movs	r2, #12
 8002bd4:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002bd6:	187b      	adds	r3, r7, r1
 8002bd8:	2202      	movs	r2, #2
 8002bda:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002bdc:	187b      	adds	r3, r7, r1
 8002bde:	2200      	movs	r2, #0
 8002be0:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002be2:	187b      	adds	r3, r7, r1
 8002be4:	2200      	movs	r2, #0
 8002be6:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_USART2;
 8002be8:	187b      	adds	r3, r7, r1
 8002bea:	2201      	movs	r2, #1
 8002bec:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002bee:	187a      	adds	r2, r7, r1
 8002bf0:	23a0      	movs	r3, #160	; 0xa0
 8002bf2:	05db      	lsls	r3, r3, #23
 8002bf4:	0011      	movs	r1, r2
 8002bf6:	0018      	movs	r0, r3
 8002bf8:	f000 fb20 	bl	800323c <HAL_GPIO_Init>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 8002bfc:	e044      	b.n	8002c88 <HAL_UART_MspInit+0x13c>
  else if(huart->Instance==USART3)
 8002bfe:	687b      	ldr	r3, [r7, #4]
 8002c00:	681b      	ldr	r3, [r3, #0]
 8002c02:	4a25      	ldr	r2, [pc, #148]	; (8002c98 <HAL_UART_MspInit+0x14c>)
 8002c04:	4293      	cmp	r3, r2
 8002c06:	d13f      	bne.n	8002c88 <HAL_UART_MspInit+0x13c>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 8002c08:	2118      	movs	r1, #24
 8002c0a:	187b      	adds	r3, r7, r1
 8002c0c:	2204      	movs	r2, #4
 8002c0e:	601a      	str	r2, [r3, #0]
    PeriphClkInit.Usart3ClockSelection = RCC_USART3CLKSOURCE_PCLK1;
 8002c10:	187b      	adds	r3, r7, r1
 8002c12:	2200      	movs	r2, #0
 8002c14:	60da      	str	r2, [r3, #12]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8002c16:	187b      	adds	r3, r7, r1
 8002c18:	0018      	movs	r0, r3
 8002c1a:	f001 fa2d 	bl	8004078 <HAL_RCCEx_PeriphCLKConfig>
 8002c1e:	1e03      	subs	r3, r0, #0
 8002c20:	d001      	beq.n	8002c26 <HAL_UART_MspInit+0xda>
      Error_Handler();
 8002c22:	f7ff ff01 	bl	8002a28 <Error_Handler>
    __HAL_RCC_USART3_CLK_ENABLE();
 8002c26:	4b1b      	ldr	r3, [pc, #108]	; (8002c94 <HAL_UART_MspInit+0x148>)
 8002c28:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8002c2a:	4b1a      	ldr	r3, [pc, #104]	; (8002c94 <HAL_UART_MspInit+0x148>)
 8002c2c:	2180      	movs	r1, #128	; 0x80
 8002c2e:	02c9      	lsls	r1, r1, #11
 8002c30:	430a      	orrs	r2, r1
 8002c32:	63da      	str	r2, [r3, #60]	; 0x3c
 8002c34:	4b17      	ldr	r3, [pc, #92]	; (8002c94 <HAL_UART_MspInit+0x148>)
 8002c36:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8002c38:	2380      	movs	r3, #128	; 0x80
 8002c3a:	02db      	lsls	r3, r3, #11
 8002c3c:	4013      	ands	r3, r2
 8002c3e:	60fb      	str	r3, [r7, #12]
 8002c40:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002c42:	4b14      	ldr	r3, [pc, #80]	; (8002c94 <HAL_UART_MspInit+0x148>)
 8002c44:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002c46:	4b13      	ldr	r3, [pc, #76]	; (8002c94 <HAL_UART_MspInit+0x148>)
 8002c48:	2102      	movs	r1, #2
 8002c4a:	430a      	orrs	r2, r1
 8002c4c:	635a      	str	r2, [r3, #52]	; 0x34
 8002c4e:	4b11      	ldr	r3, [pc, #68]	; (8002c94 <HAL_UART_MspInit+0x148>)
 8002c50:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002c52:	2202      	movs	r2, #2
 8002c54:	4013      	ands	r3, r2
 8002c56:	60bb      	str	r3, [r7, #8]
 8002c58:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8002c5a:	2164      	movs	r1, #100	; 0x64
 8002c5c:	187b      	adds	r3, r7, r1
 8002c5e:	22c0      	movs	r2, #192	; 0xc0
 8002c60:	0092      	lsls	r2, r2, #2
 8002c62:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002c64:	187b      	adds	r3, r7, r1
 8002c66:	2202      	movs	r2, #2
 8002c68:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002c6a:	187b      	adds	r3, r7, r1
 8002c6c:	2200      	movs	r2, #0
 8002c6e:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002c70:	187b      	adds	r3, r7, r1
 8002c72:	2200      	movs	r2, #0
 8002c74:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF4_USART3;
 8002c76:	187b      	adds	r3, r7, r1
 8002c78:	2204      	movs	r2, #4
 8002c7a:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002c7c:	187b      	adds	r3, r7, r1
 8002c7e:	4a07      	ldr	r2, [pc, #28]	; (8002c9c <HAL_UART_MspInit+0x150>)
 8002c80:	0019      	movs	r1, r3
 8002c82:	0010      	movs	r0, r2
 8002c84:	f000 fada 	bl	800323c <HAL_GPIO_Init>
}
 8002c88:	46c0      	nop			; (mov r8, r8)
 8002c8a:	46bd      	mov	sp, r7
 8002c8c:	b01f      	add	sp, #124	; 0x7c
 8002c8e:	bd90      	pop	{r4, r7, pc}
 8002c90:	40004400 	.word	0x40004400
 8002c94:	40021000 	.word	0x40021000
 8002c98:	40004800 	.word	0x40004800
 8002c9c:	50000400 	.word	0x50000400

08002ca0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002ca0:	b580      	push	{r7, lr}
 8002ca2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8002ca4:	e7fe      	b.n	8002ca4 <NMI_Handler+0x4>

08002ca6 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002ca6:	b580      	push	{r7, lr}
 8002ca8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002caa:	e7fe      	b.n	8002caa <HardFault_Handler+0x4>

08002cac <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8002cac:	b580      	push	{r7, lr}
 8002cae:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 8002cb0:	46c0      	nop			; (mov r8, r8)
 8002cb2:	46bd      	mov	sp, r7
 8002cb4:	bd80      	pop	{r7, pc}

08002cb6 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8002cb6:	b580      	push	{r7, lr}
 8002cb8:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8002cba:	46c0      	nop			; (mov r8, r8)
 8002cbc:	46bd      	mov	sp, r7
 8002cbe:	bd80      	pop	{r7, pc}

08002cc0 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002cc0:	b580      	push	{r7, lr}
 8002cc2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002cc4:	f000 f970 	bl	8002fa8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002cc8:	46c0      	nop			; (mov r8, r8)
 8002cca:	46bd      	mov	sp, r7
 8002ccc:	bd80      	pop	{r7, pc}

08002cce <EXTI2_3_IRQHandler>:

/**
  * @brief This function handles EXTI line 2 and line 3 interrupts.
  */
void EXTI2_3_IRQHandler(void)
{
 8002cce:	b580      	push	{r7, lr}
 8002cd0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI2_3_IRQn 0 */

  /* USER CODE END EXTI2_3_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(ASTRO_EVT_IT2_Pin);
 8002cd2:	2004      	movs	r0, #4
 8002cd4:	f000 fc3c 	bl	8003550 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI2_3_IRQn 1 */

  /* USER CODE END EXTI2_3_IRQn 1 */
}
 8002cd8:	46c0      	nop			; (mov r8, r8)
 8002cda:	46bd      	mov	sp, r7
 8002cdc:	bd80      	pop	{r7, pc}
	...

08002ce0 <TIM6_DAC_LPTIM1_IRQHandler>:

/**
  * @brief This function handles TIM6, DAC and LPTIM1 global Interrupts.
  */
void TIM6_DAC_LPTIM1_IRQHandler(void)
{
 8002ce0:	b580      	push	{r7, lr}
 8002ce2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_LPTIM1_IRQn 0 */

  /* USER CODE END TIM6_DAC_LPTIM1_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8002ce4:	4b03      	ldr	r3, [pc, #12]	; (8002cf4 <TIM6_DAC_LPTIM1_IRQHandler+0x14>)
 8002ce6:	0018      	movs	r0, r3
 8002ce8:	f002 f98a 	bl	8005000 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_LPTIM1_IRQn 1 */

  /* USER CODE END TIM6_DAC_LPTIM1_IRQn 1 */
}
 8002cec:	46c0      	nop			; (mov r8, r8)
 8002cee:	46bd      	mov	sp, r7
 8002cf0:	bd80      	pop	{r7, pc}
 8002cf2:	46c0      	nop			; (mov r8, r8)
 8002cf4:	20000708 	.word	0x20000708

08002cf8 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8002cf8:	b580      	push	{r7, lr}
 8002cfa:	af00      	add	r7, sp, #0
  return 1;
 8002cfc:	2301      	movs	r3, #1
}
 8002cfe:	0018      	movs	r0, r3
 8002d00:	46bd      	mov	sp, r7
 8002d02:	bd80      	pop	{r7, pc}

08002d04 <_kill>:

int _kill(int pid, int sig)
{
 8002d04:	b580      	push	{r7, lr}
 8002d06:	b082      	sub	sp, #8
 8002d08:	af00      	add	r7, sp, #0
 8002d0a:	6078      	str	r0, [r7, #4]
 8002d0c:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8002d0e:	f004 fe43 	bl	8007998 <__errno>
 8002d12:	0003      	movs	r3, r0
 8002d14:	2216      	movs	r2, #22
 8002d16:	601a      	str	r2, [r3, #0]
  return -1;
 8002d18:	2301      	movs	r3, #1
 8002d1a:	425b      	negs	r3, r3
}
 8002d1c:	0018      	movs	r0, r3
 8002d1e:	46bd      	mov	sp, r7
 8002d20:	b002      	add	sp, #8
 8002d22:	bd80      	pop	{r7, pc}

08002d24 <_exit>:

void _exit (int status)
{
 8002d24:	b580      	push	{r7, lr}
 8002d26:	b082      	sub	sp, #8
 8002d28:	af00      	add	r7, sp, #0
 8002d2a:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8002d2c:	2301      	movs	r3, #1
 8002d2e:	425a      	negs	r2, r3
 8002d30:	687b      	ldr	r3, [r7, #4]
 8002d32:	0011      	movs	r1, r2
 8002d34:	0018      	movs	r0, r3
 8002d36:	f7ff ffe5 	bl	8002d04 <_kill>
  while (1) {}    /* Make sure we hang here */
 8002d3a:	e7fe      	b.n	8002d3a <_exit+0x16>

08002d3c <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8002d3c:	b580      	push	{r7, lr}
 8002d3e:	b086      	sub	sp, #24
 8002d40:	af00      	add	r7, sp, #0
 8002d42:	60f8      	str	r0, [r7, #12]
 8002d44:	60b9      	str	r1, [r7, #8]
 8002d46:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002d48:	2300      	movs	r3, #0
 8002d4a:	617b      	str	r3, [r7, #20]
 8002d4c:	e00a      	b.n	8002d64 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8002d4e:	e000      	b.n	8002d52 <_read+0x16>
 8002d50:	bf00      	nop
 8002d52:	0001      	movs	r1, r0
 8002d54:	68bb      	ldr	r3, [r7, #8]
 8002d56:	1c5a      	adds	r2, r3, #1
 8002d58:	60ba      	str	r2, [r7, #8]
 8002d5a:	b2ca      	uxtb	r2, r1
 8002d5c:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002d5e:	697b      	ldr	r3, [r7, #20]
 8002d60:	3301      	adds	r3, #1
 8002d62:	617b      	str	r3, [r7, #20]
 8002d64:	697a      	ldr	r2, [r7, #20]
 8002d66:	687b      	ldr	r3, [r7, #4]
 8002d68:	429a      	cmp	r2, r3
 8002d6a:	dbf0      	blt.n	8002d4e <_read+0x12>
  }

  return len;
 8002d6c:	687b      	ldr	r3, [r7, #4]
}
 8002d6e:	0018      	movs	r0, r3
 8002d70:	46bd      	mov	sp, r7
 8002d72:	b006      	add	sp, #24
 8002d74:	bd80      	pop	{r7, pc}

08002d76 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8002d76:	b580      	push	{r7, lr}
 8002d78:	b086      	sub	sp, #24
 8002d7a:	af00      	add	r7, sp, #0
 8002d7c:	60f8      	str	r0, [r7, #12]
 8002d7e:	60b9      	str	r1, [r7, #8]
 8002d80:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002d82:	2300      	movs	r3, #0
 8002d84:	617b      	str	r3, [r7, #20]
 8002d86:	e009      	b.n	8002d9c <_write+0x26>
  {
    __io_putchar(*ptr++);
 8002d88:	68bb      	ldr	r3, [r7, #8]
 8002d8a:	1c5a      	adds	r2, r3, #1
 8002d8c:	60ba      	str	r2, [r7, #8]
 8002d8e:	781b      	ldrb	r3, [r3, #0]
 8002d90:	0018      	movs	r0, r3
 8002d92:	e000      	b.n	8002d96 <_write+0x20>
 8002d94:	bf00      	nop
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002d96:	697b      	ldr	r3, [r7, #20]
 8002d98:	3301      	adds	r3, #1
 8002d9a:	617b      	str	r3, [r7, #20]
 8002d9c:	697a      	ldr	r2, [r7, #20]
 8002d9e:	687b      	ldr	r3, [r7, #4]
 8002da0:	429a      	cmp	r2, r3
 8002da2:	dbf1      	blt.n	8002d88 <_write+0x12>
  }
  return len;
 8002da4:	687b      	ldr	r3, [r7, #4]
}
 8002da6:	0018      	movs	r0, r3
 8002da8:	46bd      	mov	sp, r7
 8002daa:	b006      	add	sp, #24
 8002dac:	bd80      	pop	{r7, pc}

08002dae <_close>:

int _close(int file)
{
 8002dae:	b580      	push	{r7, lr}
 8002db0:	b082      	sub	sp, #8
 8002db2:	af00      	add	r7, sp, #0
 8002db4:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8002db6:	2301      	movs	r3, #1
 8002db8:	425b      	negs	r3, r3
}
 8002dba:	0018      	movs	r0, r3
 8002dbc:	46bd      	mov	sp, r7
 8002dbe:	b002      	add	sp, #8
 8002dc0:	bd80      	pop	{r7, pc}

08002dc2 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8002dc2:	b580      	push	{r7, lr}
 8002dc4:	b082      	sub	sp, #8
 8002dc6:	af00      	add	r7, sp, #0
 8002dc8:	6078      	str	r0, [r7, #4]
 8002dca:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8002dcc:	683b      	ldr	r3, [r7, #0]
 8002dce:	2280      	movs	r2, #128	; 0x80
 8002dd0:	0192      	lsls	r2, r2, #6
 8002dd2:	605a      	str	r2, [r3, #4]
  return 0;
 8002dd4:	2300      	movs	r3, #0
}
 8002dd6:	0018      	movs	r0, r3
 8002dd8:	46bd      	mov	sp, r7
 8002dda:	b002      	add	sp, #8
 8002ddc:	bd80      	pop	{r7, pc}

08002dde <_isatty>:

int _isatty(int file)
{
 8002dde:	b580      	push	{r7, lr}
 8002de0:	b082      	sub	sp, #8
 8002de2:	af00      	add	r7, sp, #0
 8002de4:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8002de6:	2301      	movs	r3, #1
}
 8002de8:	0018      	movs	r0, r3
 8002dea:	46bd      	mov	sp, r7
 8002dec:	b002      	add	sp, #8
 8002dee:	bd80      	pop	{r7, pc}

08002df0 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8002df0:	b580      	push	{r7, lr}
 8002df2:	b084      	sub	sp, #16
 8002df4:	af00      	add	r7, sp, #0
 8002df6:	60f8      	str	r0, [r7, #12]
 8002df8:	60b9      	str	r1, [r7, #8]
 8002dfa:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8002dfc:	2300      	movs	r3, #0
}
 8002dfe:	0018      	movs	r0, r3
 8002e00:	46bd      	mov	sp, r7
 8002e02:	b004      	add	sp, #16
 8002e04:	bd80      	pop	{r7, pc}
	...

08002e08 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002e08:	b580      	push	{r7, lr}
 8002e0a:	b086      	sub	sp, #24
 8002e0c:	af00      	add	r7, sp, #0
 8002e0e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002e10:	4a14      	ldr	r2, [pc, #80]	; (8002e64 <_sbrk+0x5c>)
 8002e12:	4b15      	ldr	r3, [pc, #84]	; (8002e68 <_sbrk+0x60>)
 8002e14:	1ad3      	subs	r3, r2, r3
 8002e16:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002e18:	697b      	ldr	r3, [r7, #20]
 8002e1a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002e1c:	4b13      	ldr	r3, [pc, #76]	; (8002e6c <_sbrk+0x64>)
 8002e1e:	681b      	ldr	r3, [r3, #0]
 8002e20:	2b00      	cmp	r3, #0
 8002e22:	d102      	bne.n	8002e2a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002e24:	4b11      	ldr	r3, [pc, #68]	; (8002e6c <_sbrk+0x64>)
 8002e26:	4a12      	ldr	r2, [pc, #72]	; (8002e70 <_sbrk+0x68>)
 8002e28:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8002e2a:	4b10      	ldr	r3, [pc, #64]	; (8002e6c <_sbrk+0x64>)
 8002e2c:	681a      	ldr	r2, [r3, #0]
 8002e2e:	687b      	ldr	r3, [r7, #4]
 8002e30:	18d3      	adds	r3, r2, r3
 8002e32:	693a      	ldr	r2, [r7, #16]
 8002e34:	429a      	cmp	r2, r3
 8002e36:	d207      	bcs.n	8002e48 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8002e38:	f004 fdae 	bl	8007998 <__errno>
 8002e3c:	0003      	movs	r3, r0
 8002e3e:	220c      	movs	r2, #12
 8002e40:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8002e42:	2301      	movs	r3, #1
 8002e44:	425b      	negs	r3, r3
 8002e46:	e009      	b.n	8002e5c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8002e48:	4b08      	ldr	r3, [pc, #32]	; (8002e6c <_sbrk+0x64>)
 8002e4a:	681b      	ldr	r3, [r3, #0]
 8002e4c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8002e4e:	4b07      	ldr	r3, [pc, #28]	; (8002e6c <_sbrk+0x64>)
 8002e50:	681a      	ldr	r2, [r3, #0]
 8002e52:	687b      	ldr	r3, [r7, #4]
 8002e54:	18d2      	adds	r2, r2, r3
 8002e56:	4b05      	ldr	r3, [pc, #20]	; (8002e6c <_sbrk+0x64>)
 8002e58:	601a      	str	r2, [r3, #0]

  return (void *)prev_heap_end;
 8002e5a:	68fb      	ldr	r3, [r7, #12]
}
 8002e5c:	0018      	movs	r0, r3
 8002e5e:	46bd      	mov	sp, r7
 8002e60:	b006      	add	sp, #24
 8002e62:	bd80      	pop	{r7, pc}
 8002e64:	20024000 	.word	0x20024000
 8002e68:	00000400 	.word	0x00000400
 8002e6c:	20000894 	.word	0x20000894
 8002e70:	20000ba8 	.word	0x20000ba8

08002e74 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8002e74:	b580      	push	{r7, lr}
 8002e76:	af00      	add	r7, sp, #0
  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8002e78:	46c0      	nop			; (mov r8, r8)
 8002e7a:	46bd      	mov	sp, r7
 8002e7c:	bd80      	pop	{r7, pc}
	...

08002e80 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8002e80:	480d      	ldr	r0, [pc, #52]	; (8002eb8 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8002e82:	4685      	mov	sp, r0

/* Call the clock system initialization function.*/
  bl  SystemInit
 8002e84:	f7ff fff6 	bl	8002e74 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8002e88:	480c      	ldr	r0, [pc, #48]	; (8002ebc <LoopForever+0x6>)
  ldr r1, =_edata
 8002e8a:	490d      	ldr	r1, [pc, #52]	; (8002ec0 <LoopForever+0xa>)
  ldr r2, =_sidata
 8002e8c:	4a0d      	ldr	r2, [pc, #52]	; (8002ec4 <LoopForever+0xe>)
  movs r3, #0
 8002e8e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002e90:	e002      	b.n	8002e98 <LoopCopyDataInit>

08002e92 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002e92:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002e94:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002e96:	3304      	adds	r3, #4

08002e98 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002e98:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002e9a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002e9c:	d3f9      	bcc.n	8002e92 <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002e9e:	4a0a      	ldr	r2, [pc, #40]	; (8002ec8 <LoopForever+0x12>)
  ldr r4, =_ebss
 8002ea0:	4c0a      	ldr	r4, [pc, #40]	; (8002ecc <LoopForever+0x16>)
  movs r3, #0
 8002ea2:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002ea4:	e001      	b.n	8002eaa <LoopFillZerobss>

08002ea6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002ea6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002ea8:	3204      	adds	r2, #4

08002eaa <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002eaa:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002eac:	d3fb      	bcc.n	8002ea6 <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8002eae:	f004 fd79 	bl	80079a4 <__libc_init_array>
/* Call the application s entry point.*/
  bl main
 8002eb2:	f7ff fa55 	bl	8002360 <main>

08002eb6 <LoopForever>:

LoopForever:
  b LoopForever
 8002eb6:	e7fe      	b.n	8002eb6 <LoopForever>
  ldr   r0, =_estack
 8002eb8:	20024000 	.word	0x20024000
  ldr r0, =_sdata
 8002ebc:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002ec0:	200006c0 	.word	0x200006c0
  ldr r2, =_sidata
 8002ec4:	0800df80 	.word	0x0800df80
  ldr r2, =_sbss
 8002ec8:	200006c0 	.word	0x200006c0
  ldr r4, =_ebss
 8002ecc:	20000ba8 	.word	0x20000ba8

08002ed0 <ADC1_COMP_IRQHandler>:
 * @retval None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8002ed0:	e7fe      	b.n	8002ed0 <ADC1_COMP_IRQHandler>
	...

08002ed4 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002ed4:	b580      	push	{r7, lr}
 8002ed6:	b082      	sub	sp, #8
 8002ed8:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8002eda:	1dfb      	adds	r3, r7, #7
 8002edc:	2200      	movs	r2, #0
 8002ede:	701a      	strb	r2, [r3, #0]
#if (INSTRUCTION_CACHE_ENABLE == 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_DISABLE();
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002ee0:	4b0b      	ldr	r3, [pc, #44]	; (8002f10 <HAL_Init+0x3c>)
 8002ee2:	681a      	ldr	r2, [r3, #0]
 8002ee4:	4b0a      	ldr	r3, [pc, #40]	; (8002f10 <HAL_Init+0x3c>)
 8002ee6:	2180      	movs	r1, #128	; 0x80
 8002ee8:	0049      	lsls	r1, r1, #1
 8002eea:	430a      	orrs	r2, r1
 8002eec:	601a      	str	r2, [r3, #0]
#endif /* PREFETCH_ENABLE */

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8002eee:	2000      	movs	r0, #0
 8002ef0:	f000 f810 	bl	8002f14 <HAL_InitTick>
 8002ef4:	1e03      	subs	r3, r0, #0
 8002ef6:	d003      	beq.n	8002f00 <HAL_Init+0x2c>
  {
    status = HAL_ERROR;
 8002ef8:	1dfb      	adds	r3, r7, #7
 8002efa:	2201      	movs	r2, #1
 8002efc:	701a      	strb	r2, [r3, #0]
 8002efe:	e001      	b.n	8002f04 <HAL_Init+0x30>
  }
  else
  {
  /* Init the low level hardware */
  HAL_MspInit();
 8002f00:	f7ff fd98 	bl	8002a34 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8002f04:	1dfb      	adds	r3, r7, #7
 8002f06:	781b      	ldrb	r3, [r3, #0]
}
 8002f08:	0018      	movs	r0, r3
 8002f0a:	46bd      	mov	sp, r7
 8002f0c:	b002      	add	sp, #8
 8002f0e:	bd80      	pop	{r7, pc}
 8002f10:	40022000 	.word	0x40022000

08002f14 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002f14:	b590      	push	{r4, r7, lr}
 8002f16:	b085      	sub	sp, #20
 8002f18:	af00      	add	r7, sp, #0
 8002f1a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8002f1c:	230f      	movs	r3, #15
 8002f1e:	18fb      	adds	r3, r7, r3
 8002f20:	2200      	movs	r2, #0
 8002f22:	701a      	strb	r2, [r3, #0]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/ 
  if ((uint32_t)uwTickFreq != 0U)
 8002f24:	4b1d      	ldr	r3, [pc, #116]	; (8002f9c <HAL_InitTick+0x88>)
 8002f26:	781b      	ldrb	r3, [r3, #0]
 8002f28:	2b00      	cmp	r3, #0
 8002f2a:	d02b      	beq.n	8002f84 <HAL_InitTick+0x70>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U /(uint32_t)uwTickFreq)) == 0U)
 8002f2c:	4b1c      	ldr	r3, [pc, #112]	; (8002fa0 <HAL_InitTick+0x8c>)
 8002f2e:	681c      	ldr	r4, [r3, #0]
 8002f30:	4b1a      	ldr	r3, [pc, #104]	; (8002f9c <HAL_InitTick+0x88>)
 8002f32:	781b      	ldrb	r3, [r3, #0]
 8002f34:	0019      	movs	r1, r3
 8002f36:	23fa      	movs	r3, #250	; 0xfa
 8002f38:	0098      	lsls	r0, r3, #2
 8002f3a:	f7fd f8ff 	bl	800013c <__udivsi3>
 8002f3e:	0003      	movs	r3, r0
 8002f40:	0019      	movs	r1, r3
 8002f42:	0020      	movs	r0, r4
 8002f44:	f7fd f8fa 	bl	800013c <__udivsi3>
 8002f48:	0003      	movs	r3, r0
 8002f4a:	0018      	movs	r0, r3
 8002f4c:	f000 f969 	bl	8003222 <HAL_SYSTICK_Config>
 8002f50:	1e03      	subs	r3, r0, #0
 8002f52:	d112      	bne.n	8002f7a <HAL_InitTick+0x66>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002f54:	687b      	ldr	r3, [r7, #4]
 8002f56:	2b03      	cmp	r3, #3
 8002f58:	d80a      	bhi.n	8002f70 <HAL_InitTick+0x5c>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002f5a:	6879      	ldr	r1, [r7, #4]
 8002f5c:	2301      	movs	r3, #1
 8002f5e:	425b      	negs	r3, r3
 8002f60:	2200      	movs	r2, #0
 8002f62:	0018      	movs	r0, r3
 8002f64:	f000 f934 	bl	80031d0 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8002f68:	4b0e      	ldr	r3, [pc, #56]	; (8002fa4 <HAL_InitTick+0x90>)
 8002f6a:	687a      	ldr	r2, [r7, #4]
 8002f6c:	601a      	str	r2, [r3, #0]
 8002f6e:	e00d      	b.n	8002f8c <HAL_InitTick+0x78>
      }
      else
      {
        status = HAL_ERROR;
 8002f70:	230f      	movs	r3, #15
 8002f72:	18fb      	adds	r3, r7, r3
 8002f74:	2201      	movs	r2, #1
 8002f76:	701a      	strb	r2, [r3, #0]
 8002f78:	e008      	b.n	8002f8c <HAL_InitTick+0x78>
      }
    }
    else
    {
      status = HAL_ERROR;
 8002f7a:	230f      	movs	r3, #15
 8002f7c:	18fb      	adds	r3, r7, r3
 8002f7e:	2201      	movs	r2, #1
 8002f80:	701a      	strb	r2, [r3, #0]
 8002f82:	e003      	b.n	8002f8c <HAL_InitTick+0x78>
    }
  }
  else
  {
    status = HAL_ERROR;
 8002f84:	230f      	movs	r3, #15
 8002f86:	18fb      	adds	r3, r7, r3
 8002f88:	2201      	movs	r2, #1
 8002f8a:	701a      	strb	r2, [r3, #0]
  }

  /* Return function status */
  return status;
 8002f8c:	230f      	movs	r3, #15
 8002f8e:	18fb      	adds	r3, r7, r3
 8002f90:	781b      	ldrb	r3, [r3, #0]
}
 8002f92:	0018      	movs	r0, r3
 8002f94:	46bd      	mov	sp, r7
 8002f96:	b005      	add	sp, #20
 8002f98:	bd90      	pop	{r4, r7, pc}
 8002f9a:	46c0      	nop			; (mov r8, r8)
 8002f9c:	2000000c 	.word	0x2000000c
 8002fa0:	20000004 	.word	0x20000004
 8002fa4:	20000008 	.word	0x20000008

08002fa8 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002fa8:	b580      	push	{r7, lr}
 8002faa:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8002fac:	4b05      	ldr	r3, [pc, #20]	; (8002fc4 <HAL_IncTick+0x1c>)
 8002fae:	781b      	ldrb	r3, [r3, #0]
 8002fb0:	001a      	movs	r2, r3
 8002fb2:	4b05      	ldr	r3, [pc, #20]	; (8002fc8 <HAL_IncTick+0x20>)
 8002fb4:	681b      	ldr	r3, [r3, #0]
 8002fb6:	18d2      	adds	r2, r2, r3
 8002fb8:	4b03      	ldr	r3, [pc, #12]	; (8002fc8 <HAL_IncTick+0x20>)
 8002fba:	601a      	str	r2, [r3, #0]
}
 8002fbc:	46c0      	nop			; (mov r8, r8)
 8002fbe:	46bd      	mov	sp, r7
 8002fc0:	bd80      	pop	{r7, pc}
 8002fc2:	46c0      	nop			; (mov r8, r8)
 8002fc4:	2000000c 	.word	0x2000000c
 8002fc8:	20000898 	.word	0x20000898

08002fcc <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002fcc:	b580      	push	{r7, lr}
 8002fce:	af00      	add	r7, sp, #0
  return uwTick;
 8002fd0:	4b02      	ldr	r3, [pc, #8]	; (8002fdc <HAL_GetTick+0x10>)
 8002fd2:	681b      	ldr	r3, [r3, #0]
}
 8002fd4:	0018      	movs	r0, r3
 8002fd6:	46bd      	mov	sp, r7
 8002fd8:	bd80      	pop	{r7, pc}
 8002fda:	46c0      	nop			; (mov r8, r8)
 8002fdc:	20000898 	.word	0x20000898

08002fe0 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002fe0:	b580      	push	{r7, lr}
 8002fe2:	b084      	sub	sp, #16
 8002fe4:	af00      	add	r7, sp, #0
 8002fe6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002fe8:	f7ff fff0 	bl	8002fcc <HAL_GetTick>
 8002fec:	0003      	movs	r3, r0
 8002fee:	60bb      	str	r3, [r7, #8]
  uint32_t wait = Delay;
 8002ff0:	687b      	ldr	r3, [r7, #4]
 8002ff2:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002ff4:	68fb      	ldr	r3, [r7, #12]
 8002ff6:	3301      	adds	r3, #1
 8002ff8:	d005      	beq.n	8003006 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8002ffa:	4b0a      	ldr	r3, [pc, #40]	; (8003024 <HAL_Delay+0x44>)
 8002ffc:	781b      	ldrb	r3, [r3, #0]
 8002ffe:	001a      	movs	r2, r3
 8003000:	68fb      	ldr	r3, [r7, #12]
 8003002:	189b      	adds	r3, r3, r2
 8003004:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8003006:	46c0      	nop			; (mov r8, r8)
 8003008:	f7ff ffe0 	bl	8002fcc <HAL_GetTick>
 800300c:	0002      	movs	r2, r0
 800300e:	68bb      	ldr	r3, [r7, #8]
 8003010:	1ad3      	subs	r3, r2, r3
 8003012:	68fa      	ldr	r2, [r7, #12]
 8003014:	429a      	cmp	r2, r3
 8003016:	d8f7      	bhi.n	8003008 <HAL_Delay+0x28>
  {
  }
}
 8003018:	46c0      	nop			; (mov r8, r8)
 800301a:	46c0      	nop			; (mov r8, r8)
 800301c:	46bd      	mov	sp, r7
 800301e:	b004      	add	sp, #16
 8003020:	bd80      	pop	{r7, pc}
 8003022:	46c0      	nop			; (mov r8, r8)
 8003024:	2000000c 	.word	0x2000000c

08003028 <HAL_SYSCFG_StrobeDBattpinsConfig>:
  *         @arg @ref SYSCFG_UCPD1_STROBE
  *         @arg @ref SYSCFG_UCPD2_STROBE
  * @retval None
  */
void HAL_SYSCFG_StrobeDBattpinsConfig(uint32_t ConfigDeadBattery)
{
 8003028:	b580      	push	{r7, lr}
 800302a:	b082      	sub	sp, #8
 800302c:	af00      	add	r7, sp, #0
 800302e:	6078      	str	r0, [r7, #4]
  assert_param(IS_SYSCFG_DBATT_CONFIG(ConfigDeadBattery));

  /* Change strobe configuration of GPIO depending on UCPDx dead battery settings */
  MODIFY_REG(SYSCFG->CFGR1, (SYSCFG_CFGR1_UCPD1_STROBE | SYSCFG_CFGR1_UCPD2_STROBE), ConfigDeadBattery);
 8003030:	4b06      	ldr	r3, [pc, #24]	; (800304c <HAL_SYSCFG_StrobeDBattpinsConfig+0x24>)
 8003032:	681b      	ldr	r3, [r3, #0]
 8003034:	4a06      	ldr	r2, [pc, #24]	; (8003050 <HAL_SYSCFG_StrobeDBattpinsConfig+0x28>)
 8003036:	4013      	ands	r3, r2
 8003038:	0019      	movs	r1, r3
 800303a:	4b04      	ldr	r3, [pc, #16]	; (800304c <HAL_SYSCFG_StrobeDBattpinsConfig+0x24>)
 800303c:	687a      	ldr	r2, [r7, #4]
 800303e:	430a      	orrs	r2, r1
 8003040:	601a      	str	r2, [r3, #0]
}
 8003042:	46c0      	nop			; (mov r8, r8)
 8003044:	46bd      	mov	sp, r7
 8003046:	b002      	add	sp, #8
 8003048:	bd80      	pop	{r7, pc}
 800304a:	46c0      	nop			; (mov r8, r8)
 800304c:	40010000 	.word	0x40010000
 8003050:	fffff9ff 	.word	0xfffff9ff

08003054 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003054:	b580      	push	{r7, lr}
 8003056:	b082      	sub	sp, #8
 8003058:	af00      	add	r7, sp, #0
 800305a:	0002      	movs	r2, r0
 800305c:	1dfb      	adds	r3, r7, #7
 800305e:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8003060:	1dfb      	adds	r3, r7, #7
 8003062:	781b      	ldrb	r3, [r3, #0]
 8003064:	2b7f      	cmp	r3, #127	; 0x7f
 8003066:	d809      	bhi.n	800307c <__NVIC_EnableIRQ+0x28>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003068:	1dfb      	adds	r3, r7, #7
 800306a:	781b      	ldrb	r3, [r3, #0]
 800306c:	001a      	movs	r2, r3
 800306e:	231f      	movs	r3, #31
 8003070:	401a      	ands	r2, r3
 8003072:	4b04      	ldr	r3, [pc, #16]	; (8003084 <__NVIC_EnableIRQ+0x30>)
 8003074:	2101      	movs	r1, #1
 8003076:	4091      	lsls	r1, r2
 8003078:	000a      	movs	r2, r1
 800307a:	601a      	str	r2, [r3, #0]
    __COMPILER_BARRIER();
  }
}
 800307c:	46c0      	nop			; (mov r8, r8)
 800307e:	46bd      	mov	sp, r7
 8003080:	b002      	add	sp, #8
 8003082:	bd80      	pop	{r7, pc}
 8003084:	e000e100 	.word	0xe000e100

08003088 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8003088:	b590      	push	{r4, r7, lr}
 800308a:	b083      	sub	sp, #12
 800308c:	af00      	add	r7, sp, #0
 800308e:	0002      	movs	r2, r0
 8003090:	6039      	str	r1, [r7, #0]
 8003092:	1dfb      	adds	r3, r7, #7
 8003094:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8003096:	1dfb      	adds	r3, r7, #7
 8003098:	781b      	ldrb	r3, [r3, #0]
 800309a:	2b7f      	cmp	r3, #127	; 0x7f
 800309c:	d828      	bhi.n	80030f0 <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 800309e:	4a2f      	ldr	r2, [pc, #188]	; (800315c <__NVIC_SetPriority+0xd4>)
 80030a0:	1dfb      	adds	r3, r7, #7
 80030a2:	781b      	ldrb	r3, [r3, #0]
 80030a4:	b25b      	sxtb	r3, r3
 80030a6:	089b      	lsrs	r3, r3, #2
 80030a8:	33c0      	adds	r3, #192	; 0xc0
 80030aa:	009b      	lsls	r3, r3, #2
 80030ac:	589b      	ldr	r3, [r3, r2]
 80030ae:	1dfa      	adds	r2, r7, #7
 80030b0:	7812      	ldrb	r2, [r2, #0]
 80030b2:	0011      	movs	r1, r2
 80030b4:	2203      	movs	r2, #3
 80030b6:	400a      	ands	r2, r1
 80030b8:	00d2      	lsls	r2, r2, #3
 80030ba:	21ff      	movs	r1, #255	; 0xff
 80030bc:	4091      	lsls	r1, r2
 80030be:	000a      	movs	r2, r1
 80030c0:	43d2      	mvns	r2, r2
 80030c2:	401a      	ands	r2, r3
 80030c4:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 80030c6:	683b      	ldr	r3, [r7, #0]
 80030c8:	019b      	lsls	r3, r3, #6
 80030ca:	22ff      	movs	r2, #255	; 0xff
 80030cc:	401a      	ands	r2, r3
 80030ce:	1dfb      	adds	r3, r7, #7
 80030d0:	781b      	ldrb	r3, [r3, #0]
 80030d2:	0018      	movs	r0, r3
 80030d4:	2303      	movs	r3, #3
 80030d6:	4003      	ands	r3, r0
 80030d8:	00db      	lsls	r3, r3, #3
 80030da:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80030dc:	481f      	ldr	r0, [pc, #124]	; (800315c <__NVIC_SetPriority+0xd4>)
 80030de:	1dfb      	adds	r3, r7, #7
 80030e0:	781b      	ldrb	r3, [r3, #0]
 80030e2:	b25b      	sxtb	r3, r3
 80030e4:	089b      	lsrs	r3, r3, #2
 80030e6:	430a      	orrs	r2, r1
 80030e8:	33c0      	adds	r3, #192	; 0xc0
 80030ea:	009b      	lsls	r3, r3, #2
 80030ec:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 80030ee:	e031      	b.n	8003154 <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80030f0:	4a1b      	ldr	r2, [pc, #108]	; (8003160 <__NVIC_SetPriority+0xd8>)
 80030f2:	1dfb      	adds	r3, r7, #7
 80030f4:	781b      	ldrb	r3, [r3, #0]
 80030f6:	0019      	movs	r1, r3
 80030f8:	230f      	movs	r3, #15
 80030fa:	400b      	ands	r3, r1
 80030fc:	3b08      	subs	r3, #8
 80030fe:	089b      	lsrs	r3, r3, #2
 8003100:	3306      	adds	r3, #6
 8003102:	009b      	lsls	r3, r3, #2
 8003104:	18d3      	adds	r3, r2, r3
 8003106:	3304      	adds	r3, #4
 8003108:	681b      	ldr	r3, [r3, #0]
 800310a:	1dfa      	adds	r2, r7, #7
 800310c:	7812      	ldrb	r2, [r2, #0]
 800310e:	0011      	movs	r1, r2
 8003110:	2203      	movs	r2, #3
 8003112:	400a      	ands	r2, r1
 8003114:	00d2      	lsls	r2, r2, #3
 8003116:	21ff      	movs	r1, #255	; 0xff
 8003118:	4091      	lsls	r1, r2
 800311a:	000a      	movs	r2, r1
 800311c:	43d2      	mvns	r2, r2
 800311e:	401a      	ands	r2, r3
 8003120:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8003122:	683b      	ldr	r3, [r7, #0]
 8003124:	019b      	lsls	r3, r3, #6
 8003126:	22ff      	movs	r2, #255	; 0xff
 8003128:	401a      	ands	r2, r3
 800312a:	1dfb      	adds	r3, r7, #7
 800312c:	781b      	ldrb	r3, [r3, #0]
 800312e:	0018      	movs	r0, r3
 8003130:	2303      	movs	r3, #3
 8003132:	4003      	ands	r3, r0
 8003134:	00db      	lsls	r3, r3, #3
 8003136:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8003138:	4809      	ldr	r0, [pc, #36]	; (8003160 <__NVIC_SetPriority+0xd8>)
 800313a:	1dfb      	adds	r3, r7, #7
 800313c:	781b      	ldrb	r3, [r3, #0]
 800313e:	001c      	movs	r4, r3
 8003140:	230f      	movs	r3, #15
 8003142:	4023      	ands	r3, r4
 8003144:	3b08      	subs	r3, #8
 8003146:	089b      	lsrs	r3, r3, #2
 8003148:	430a      	orrs	r2, r1
 800314a:	3306      	adds	r3, #6
 800314c:	009b      	lsls	r3, r3, #2
 800314e:	18c3      	adds	r3, r0, r3
 8003150:	3304      	adds	r3, #4
 8003152:	601a      	str	r2, [r3, #0]
}
 8003154:	46c0      	nop			; (mov r8, r8)
 8003156:	46bd      	mov	sp, r7
 8003158:	b003      	add	sp, #12
 800315a:	bd90      	pop	{r4, r7, pc}
 800315c:	e000e100 	.word	0xe000e100
 8003160:	e000ed00 	.word	0xe000ed00

08003164 <__NVIC_SystemReset>:
/**
  \brief   System Reset
  \details Initiates a system reset request to reset the MCU.
 */
__NO_RETURN __STATIC_INLINE void __NVIC_SystemReset(void)
{
 8003164:	b580      	push	{r7, lr}
 8003166:	af00      	add	r7, sp, #0
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8003168:	f3bf 8f4f 	dsb	sy
}
 800316c:	46c0      	nop			; (mov r8, r8)
  __DSB();                                                          /* Ensure all outstanding memory accesses included
                                                                       buffered write are completed before reset */
  SCB->AIRCR  = ((0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800316e:	4b04      	ldr	r3, [pc, #16]	; (8003180 <__NVIC_SystemReset+0x1c>)
 8003170:	4a04      	ldr	r2, [pc, #16]	; (8003184 <__NVIC_SystemReset+0x20>)
 8003172:	60da      	str	r2, [r3, #12]
  __ASM volatile ("dsb 0xF":::"memory");
 8003174:	f3bf 8f4f 	dsb	sy
}
 8003178:	46c0      	nop			; (mov r8, r8)
                 SCB_AIRCR_SYSRESETREQ_Msk);
  __DSB();                                                          /* Ensure completion of memory access */

  for(;;)                                                           /* wait until reset */
  {
    __NOP();
 800317a:	46c0      	nop			; (mov r8, r8)
 800317c:	e7fd      	b.n	800317a <__NVIC_SystemReset+0x16>
 800317e:	46c0      	nop			; (mov r8, r8)
 8003180:	e000ed00 	.word	0xe000ed00
 8003184:	05fa0004 	.word	0x05fa0004

08003188 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8003188:	b580      	push	{r7, lr}
 800318a:	b082      	sub	sp, #8
 800318c:	af00      	add	r7, sp, #0
 800318e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8003190:	687b      	ldr	r3, [r7, #4]
 8003192:	1e5a      	subs	r2, r3, #1
 8003194:	2380      	movs	r3, #128	; 0x80
 8003196:	045b      	lsls	r3, r3, #17
 8003198:	429a      	cmp	r2, r3
 800319a:	d301      	bcc.n	80031a0 <SysTick_Config+0x18>
  {
    return (1UL);                                                   /* Reload value impossible */
 800319c:	2301      	movs	r3, #1
 800319e:	e010      	b.n	80031c2 <SysTick_Config+0x3a>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80031a0:	4b0a      	ldr	r3, [pc, #40]	; (80031cc <SysTick_Config+0x44>)
 80031a2:	687a      	ldr	r2, [r7, #4]
 80031a4:	3a01      	subs	r2, #1
 80031a6:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80031a8:	2301      	movs	r3, #1
 80031aa:	425b      	negs	r3, r3
 80031ac:	2103      	movs	r1, #3
 80031ae:	0018      	movs	r0, r3
 80031b0:	f7ff ff6a 	bl	8003088 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80031b4:	4b05      	ldr	r3, [pc, #20]	; (80031cc <SysTick_Config+0x44>)
 80031b6:	2200      	movs	r2, #0
 80031b8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80031ba:	4b04      	ldr	r3, [pc, #16]	; (80031cc <SysTick_Config+0x44>)
 80031bc:	2207      	movs	r2, #7
 80031be:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80031c0:	2300      	movs	r3, #0
}
 80031c2:	0018      	movs	r0, r3
 80031c4:	46bd      	mov	sp, r7
 80031c6:	b002      	add	sp, #8
 80031c8:	bd80      	pop	{r7, pc}
 80031ca:	46c0      	nop			; (mov r8, r8)
 80031cc:	e000e010 	.word	0xe000e010

080031d0 <HAL_NVIC_SetPriority>:
  *         with stm32g0xx devices, this parameter is a dummy value and it is ignored, because
  *         no subpriority supported in Cortex M0+ based products.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80031d0:	b580      	push	{r7, lr}
 80031d2:	b084      	sub	sp, #16
 80031d4:	af00      	add	r7, sp, #0
 80031d6:	60b9      	str	r1, [r7, #8]
 80031d8:	607a      	str	r2, [r7, #4]
 80031da:	210f      	movs	r1, #15
 80031dc:	187b      	adds	r3, r7, r1
 80031de:	1c02      	adds	r2, r0, #0
 80031e0:	701a      	strb	r2, [r3, #0]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(SubPriority);

  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn, PreemptPriority);
 80031e2:	68ba      	ldr	r2, [r7, #8]
 80031e4:	187b      	adds	r3, r7, r1
 80031e6:	781b      	ldrb	r3, [r3, #0]
 80031e8:	b25b      	sxtb	r3, r3
 80031ea:	0011      	movs	r1, r2
 80031ec:	0018      	movs	r0, r3
 80031ee:	f7ff ff4b 	bl	8003088 <__NVIC_SetPriority>
}
 80031f2:	46c0      	nop			; (mov r8, r8)
 80031f4:	46bd      	mov	sp, r7
 80031f6:	b004      	add	sp, #16
 80031f8:	bd80      	pop	{r7, pc}

080031fa <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g0xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80031fa:	b580      	push	{r7, lr}
 80031fc:	b082      	sub	sp, #8
 80031fe:	af00      	add	r7, sp, #0
 8003200:	0002      	movs	r2, r0
 8003202:	1dfb      	adds	r3, r7, #7
 8003204:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8003206:	1dfb      	adds	r3, r7, #7
 8003208:	781b      	ldrb	r3, [r3, #0]
 800320a:	b25b      	sxtb	r3, r3
 800320c:	0018      	movs	r0, r3
 800320e:	f7ff ff21 	bl	8003054 <__NVIC_EnableIRQ>
}
 8003212:	46c0      	nop			; (mov r8, r8)
 8003214:	46bd      	mov	sp, r7
 8003216:	b002      	add	sp, #8
 8003218:	bd80      	pop	{r7, pc}

0800321a <HAL_NVIC_SystemReset>:
/**
  * @brief  Initiate a system reset request to reset the MCU.
  * @retval None
  */
void HAL_NVIC_SystemReset(void)
{
 800321a:	b580      	push	{r7, lr}
 800321c:	af00      	add	r7, sp, #0
  /* System Reset */
  NVIC_SystemReset();
 800321e:	f7ff ffa1 	bl	8003164 <__NVIC_SystemReset>

08003222 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8003222:	b580      	push	{r7, lr}
 8003224:	b082      	sub	sp, #8
 8003226:	af00      	add	r7, sp, #0
 8003228:	6078      	str	r0, [r7, #4]
  return SysTick_Config(TicksNumb);
 800322a:	687b      	ldr	r3, [r7, #4]
 800322c:	0018      	movs	r0, r3
 800322e:	f7ff ffab 	bl	8003188 <SysTick_Config>
 8003232:	0003      	movs	r3, r0
}
 8003234:	0018      	movs	r0, r3
 8003236:	46bd      	mov	sp, r7
 8003238:	b002      	add	sp, #8
 800323a:	bd80      	pop	{r7, pc}

0800323c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800323c:	b580      	push	{r7, lr}
 800323e:	b086      	sub	sp, #24
 8003240:	af00      	add	r7, sp, #0
 8003242:	6078      	str	r0, [r7, #4]
 8003244:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8003246:	2300      	movs	r3, #0
 8003248:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800324a:	e14d      	b.n	80034e8 <HAL_GPIO_Init+0x2ac>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 800324c:	683b      	ldr	r3, [r7, #0]
 800324e:	681b      	ldr	r3, [r3, #0]
 8003250:	2101      	movs	r1, #1
 8003252:	697a      	ldr	r2, [r7, #20]
 8003254:	4091      	lsls	r1, r2
 8003256:	000a      	movs	r2, r1
 8003258:	4013      	ands	r3, r2
 800325a:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 800325c:	68fb      	ldr	r3, [r7, #12]
 800325e:	2b00      	cmp	r3, #0
 8003260:	d100      	bne.n	8003264 <HAL_GPIO_Init+0x28>
 8003262:	e13e      	b.n	80034e2 <HAL_GPIO_Init+0x2a6>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8003264:	683b      	ldr	r3, [r7, #0]
 8003266:	685b      	ldr	r3, [r3, #4]
 8003268:	2203      	movs	r2, #3
 800326a:	4013      	ands	r3, r2
 800326c:	2b01      	cmp	r3, #1
 800326e:	d005      	beq.n	800327c <HAL_GPIO_Init+0x40>
 8003270:	683b      	ldr	r3, [r7, #0]
 8003272:	685b      	ldr	r3, [r3, #4]
 8003274:	2203      	movs	r2, #3
 8003276:	4013      	ands	r3, r2
 8003278:	2b02      	cmp	r3, #2
 800327a:	d130      	bne.n	80032de <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 800327c:	687b      	ldr	r3, [r7, #4]
 800327e:	689b      	ldr	r3, [r3, #8]
 8003280:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8003282:	697b      	ldr	r3, [r7, #20]
 8003284:	005b      	lsls	r3, r3, #1
 8003286:	2203      	movs	r2, #3
 8003288:	409a      	lsls	r2, r3
 800328a:	0013      	movs	r3, r2
 800328c:	43da      	mvns	r2, r3
 800328e:	693b      	ldr	r3, [r7, #16]
 8003290:	4013      	ands	r3, r2
 8003292:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8003294:	683b      	ldr	r3, [r7, #0]
 8003296:	68da      	ldr	r2, [r3, #12]
 8003298:	697b      	ldr	r3, [r7, #20]
 800329a:	005b      	lsls	r3, r3, #1
 800329c:	409a      	lsls	r2, r3
 800329e:	0013      	movs	r3, r2
 80032a0:	693a      	ldr	r2, [r7, #16]
 80032a2:	4313      	orrs	r3, r2
 80032a4:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80032a6:	687b      	ldr	r3, [r7, #4]
 80032a8:	693a      	ldr	r2, [r7, #16]
 80032aa:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80032ac:	687b      	ldr	r3, [r7, #4]
 80032ae:	685b      	ldr	r3, [r3, #4]
 80032b0:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80032b2:	2201      	movs	r2, #1
 80032b4:	697b      	ldr	r3, [r7, #20]
 80032b6:	409a      	lsls	r2, r3
 80032b8:	0013      	movs	r3, r2
 80032ba:	43da      	mvns	r2, r3
 80032bc:	693b      	ldr	r3, [r7, #16]
 80032be:	4013      	ands	r3, r2
 80032c0:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80032c2:	683b      	ldr	r3, [r7, #0]
 80032c4:	685b      	ldr	r3, [r3, #4]
 80032c6:	091b      	lsrs	r3, r3, #4
 80032c8:	2201      	movs	r2, #1
 80032ca:	401a      	ands	r2, r3
 80032cc:	697b      	ldr	r3, [r7, #20]
 80032ce:	409a      	lsls	r2, r3
 80032d0:	0013      	movs	r3, r2
 80032d2:	693a      	ldr	r2, [r7, #16]
 80032d4:	4313      	orrs	r3, r2
 80032d6:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80032d8:	687b      	ldr	r3, [r7, #4]
 80032da:	693a      	ldr	r2, [r7, #16]
 80032dc:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80032de:	683b      	ldr	r3, [r7, #0]
 80032e0:	685b      	ldr	r3, [r3, #4]
 80032e2:	2203      	movs	r2, #3
 80032e4:	4013      	ands	r3, r2
 80032e6:	2b03      	cmp	r3, #3
 80032e8:	d017      	beq.n	800331a <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80032ea:	687b      	ldr	r3, [r7, #4]
 80032ec:	68db      	ldr	r3, [r3, #12]
 80032ee:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 80032f0:	697b      	ldr	r3, [r7, #20]
 80032f2:	005b      	lsls	r3, r3, #1
 80032f4:	2203      	movs	r2, #3
 80032f6:	409a      	lsls	r2, r3
 80032f8:	0013      	movs	r3, r2
 80032fa:	43da      	mvns	r2, r3
 80032fc:	693b      	ldr	r3, [r7, #16]
 80032fe:	4013      	ands	r3, r2
 8003300:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 8003302:	683b      	ldr	r3, [r7, #0]
 8003304:	689a      	ldr	r2, [r3, #8]
 8003306:	697b      	ldr	r3, [r7, #20]
 8003308:	005b      	lsls	r3, r3, #1
 800330a:	409a      	lsls	r2, r3
 800330c:	0013      	movs	r3, r2
 800330e:	693a      	ldr	r2, [r7, #16]
 8003310:	4313      	orrs	r3, r2
 8003312:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8003314:	687b      	ldr	r3, [r7, #4]
 8003316:	693a      	ldr	r2, [r7, #16]
 8003318:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800331a:	683b      	ldr	r3, [r7, #0]
 800331c:	685b      	ldr	r3, [r3, #4]
 800331e:	2203      	movs	r2, #3
 8003320:	4013      	ands	r3, r2
 8003322:	2b02      	cmp	r3, #2
 8003324:	d123      	bne.n	800336e <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8003326:	697b      	ldr	r3, [r7, #20]
 8003328:	08da      	lsrs	r2, r3, #3
 800332a:	687b      	ldr	r3, [r7, #4]
 800332c:	3208      	adds	r2, #8
 800332e:	0092      	lsls	r2, r2, #2
 8003330:	58d3      	ldr	r3, [r2, r3]
 8003332:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8003334:	697b      	ldr	r3, [r7, #20]
 8003336:	2207      	movs	r2, #7
 8003338:	4013      	ands	r3, r2
 800333a:	009b      	lsls	r3, r3, #2
 800333c:	220f      	movs	r2, #15
 800333e:	409a      	lsls	r2, r3
 8003340:	0013      	movs	r3, r2
 8003342:	43da      	mvns	r2, r3
 8003344:	693b      	ldr	r3, [r7, #16]
 8003346:	4013      	ands	r3, r2
 8003348:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 800334a:	683b      	ldr	r3, [r7, #0]
 800334c:	691a      	ldr	r2, [r3, #16]
 800334e:	697b      	ldr	r3, [r7, #20]
 8003350:	2107      	movs	r1, #7
 8003352:	400b      	ands	r3, r1
 8003354:	009b      	lsls	r3, r3, #2
 8003356:	409a      	lsls	r2, r3
 8003358:	0013      	movs	r3, r2
 800335a:	693a      	ldr	r2, [r7, #16]
 800335c:	4313      	orrs	r3, r2
 800335e:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8003360:	697b      	ldr	r3, [r7, #20]
 8003362:	08da      	lsrs	r2, r3, #3
 8003364:	687b      	ldr	r3, [r7, #4]
 8003366:	3208      	adds	r2, #8
 8003368:	0092      	lsls	r2, r2, #2
 800336a:	6939      	ldr	r1, [r7, #16]
 800336c:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800336e:	687b      	ldr	r3, [r7, #4]
 8003370:	681b      	ldr	r3, [r3, #0]
 8003372:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8003374:	697b      	ldr	r3, [r7, #20]
 8003376:	005b      	lsls	r3, r3, #1
 8003378:	2203      	movs	r2, #3
 800337a:	409a      	lsls	r2, r3
 800337c:	0013      	movs	r3, r2
 800337e:	43da      	mvns	r2, r3
 8003380:	693b      	ldr	r3, [r7, #16]
 8003382:	4013      	ands	r3, r2
 8003384:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8003386:	683b      	ldr	r3, [r7, #0]
 8003388:	685b      	ldr	r3, [r3, #4]
 800338a:	2203      	movs	r2, #3
 800338c:	401a      	ands	r2, r3
 800338e:	697b      	ldr	r3, [r7, #20]
 8003390:	005b      	lsls	r3, r3, #1
 8003392:	409a      	lsls	r2, r3
 8003394:	0013      	movs	r3, r2
 8003396:	693a      	ldr	r2, [r7, #16]
 8003398:	4313      	orrs	r3, r2
 800339a:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 800339c:	687b      	ldr	r3, [r7, #4]
 800339e:	693a      	ldr	r2, [r7, #16]
 80033a0:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80033a2:	683b      	ldr	r3, [r7, #0]
 80033a4:	685a      	ldr	r2, [r3, #4]
 80033a6:	23c0      	movs	r3, #192	; 0xc0
 80033a8:	029b      	lsls	r3, r3, #10
 80033aa:	4013      	ands	r3, r2
 80033ac:	d100      	bne.n	80033b0 <HAL_GPIO_Init+0x174>
 80033ae:	e098      	b.n	80034e2 <HAL_GPIO_Init+0x2a6>
      {
        temp = EXTI->EXTICR[position >> 2u];
 80033b0:	4a53      	ldr	r2, [pc, #332]	; (8003500 <HAL_GPIO_Init+0x2c4>)
 80033b2:	697b      	ldr	r3, [r7, #20]
 80033b4:	089b      	lsrs	r3, r3, #2
 80033b6:	3318      	adds	r3, #24
 80033b8:	009b      	lsls	r3, r3, #2
 80033ba:	589b      	ldr	r3, [r3, r2]
 80033bc:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (8u * (position & 0x03u)));
 80033be:	697b      	ldr	r3, [r7, #20]
 80033c0:	2203      	movs	r2, #3
 80033c2:	4013      	ands	r3, r2
 80033c4:	00db      	lsls	r3, r3, #3
 80033c6:	220f      	movs	r2, #15
 80033c8:	409a      	lsls	r2, r3
 80033ca:	0013      	movs	r3, r2
 80033cc:	43da      	mvns	r2, r3
 80033ce:	693b      	ldr	r3, [r7, #16]
 80033d0:	4013      	ands	r3, r2
 80033d2:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (8u * (position & 0x03u)));
 80033d4:	687a      	ldr	r2, [r7, #4]
 80033d6:	23a0      	movs	r3, #160	; 0xa0
 80033d8:	05db      	lsls	r3, r3, #23
 80033da:	429a      	cmp	r2, r3
 80033dc:	d019      	beq.n	8003412 <HAL_GPIO_Init+0x1d6>
 80033de:	687b      	ldr	r3, [r7, #4]
 80033e0:	4a48      	ldr	r2, [pc, #288]	; (8003504 <HAL_GPIO_Init+0x2c8>)
 80033e2:	4293      	cmp	r3, r2
 80033e4:	d013      	beq.n	800340e <HAL_GPIO_Init+0x1d2>
 80033e6:	687b      	ldr	r3, [r7, #4]
 80033e8:	4a47      	ldr	r2, [pc, #284]	; (8003508 <HAL_GPIO_Init+0x2cc>)
 80033ea:	4293      	cmp	r3, r2
 80033ec:	d00d      	beq.n	800340a <HAL_GPIO_Init+0x1ce>
 80033ee:	687b      	ldr	r3, [r7, #4]
 80033f0:	4a46      	ldr	r2, [pc, #280]	; (800350c <HAL_GPIO_Init+0x2d0>)
 80033f2:	4293      	cmp	r3, r2
 80033f4:	d007      	beq.n	8003406 <HAL_GPIO_Init+0x1ca>
 80033f6:	687b      	ldr	r3, [r7, #4]
 80033f8:	4a45      	ldr	r2, [pc, #276]	; (8003510 <HAL_GPIO_Init+0x2d4>)
 80033fa:	4293      	cmp	r3, r2
 80033fc:	d101      	bne.n	8003402 <HAL_GPIO_Init+0x1c6>
 80033fe:	2304      	movs	r3, #4
 8003400:	e008      	b.n	8003414 <HAL_GPIO_Init+0x1d8>
 8003402:	2305      	movs	r3, #5
 8003404:	e006      	b.n	8003414 <HAL_GPIO_Init+0x1d8>
 8003406:	2303      	movs	r3, #3
 8003408:	e004      	b.n	8003414 <HAL_GPIO_Init+0x1d8>
 800340a:	2302      	movs	r3, #2
 800340c:	e002      	b.n	8003414 <HAL_GPIO_Init+0x1d8>
 800340e:	2301      	movs	r3, #1
 8003410:	e000      	b.n	8003414 <HAL_GPIO_Init+0x1d8>
 8003412:	2300      	movs	r3, #0
 8003414:	697a      	ldr	r2, [r7, #20]
 8003416:	2103      	movs	r1, #3
 8003418:	400a      	ands	r2, r1
 800341a:	00d2      	lsls	r2, r2, #3
 800341c:	4093      	lsls	r3, r2
 800341e:	693a      	ldr	r2, [r7, #16]
 8003420:	4313      	orrs	r3, r2
 8003422:	613b      	str	r3, [r7, #16]
        EXTI->EXTICR[position >> 2u] = temp;
 8003424:	4936      	ldr	r1, [pc, #216]	; (8003500 <HAL_GPIO_Init+0x2c4>)
 8003426:	697b      	ldr	r3, [r7, #20]
 8003428:	089b      	lsrs	r3, r3, #2
 800342a:	3318      	adds	r3, #24
 800342c:	009b      	lsls	r3, r3, #2
 800342e:	693a      	ldr	r2, [r7, #16]
 8003430:	505a      	str	r2, [r3, r1]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8003432:	4b33      	ldr	r3, [pc, #204]	; (8003500 <HAL_GPIO_Init+0x2c4>)
 8003434:	681b      	ldr	r3, [r3, #0]
 8003436:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003438:	68fb      	ldr	r3, [r7, #12]
 800343a:	43da      	mvns	r2, r3
 800343c:	693b      	ldr	r3, [r7, #16]
 800343e:	4013      	ands	r3, r2
 8003440:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8003442:	683b      	ldr	r3, [r7, #0]
 8003444:	685a      	ldr	r2, [r3, #4]
 8003446:	2380      	movs	r3, #128	; 0x80
 8003448:	035b      	lsls	r3, r3, #13
 800344a:	4013      	ands	r3, r2
 800344c:	d003      	beq.n	8003456 <HAL_GPIO_Init+0x21a>
        {
          temp |= iocurrent;
 800344e:	693a      	ldr	r2, [r7, #16]
 8003450:	68fb      	ldr	r3, [r7, #12]
 8003452:	4313      	orrs	r3, r2
 8003454:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8003456:	4b2a      	ldr	r3, [pc, #168]	; (8003500 <HAL_GPIO_Init+0x2c4>)
 8003458:	693a      	ldr	r2, [r7, #16]
 800345a:	601a      	str	r2, [r3, #0]

        temp = EXTI->FTSR1;
 800345c:	4b28      	ldr	r3, [pc, #160]	; (8003500 <HAL_GPIO_Init+0x2c4>)
 800345e:	685b      	ldr	r3, [r3, #4]
 8003460:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003462:	68fb      	ldr	r3, [r7, #12]
 8003464:	43da      	mvns	r2, r3
 8003466:	693b      	ldr	r3, [r7, #16]
 8003468:	4013      	ands	r3, r2
 800346a:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 800346c:	683b      	ldr	r3, [r7, #0]
 800346e:	685a      	ldr	r2, [r3, #4]
 8003470:	2380      	movs	r3, #128	; 0x80
 8003472:	039b      	lsls	r3, r3, #14
 8003474:	4013      	ands	r3, r2
 8003476:	d003      	beq.n	8003480 <HAL_GPIO_Init+0x244>
        {
          temp |= iocurrent;
 8003478:	693a      	ldr	r2, [r7, #16]
 800347a:	68fb      	ldr	r3, [r7, #12]
 800347c:	4313      	orrs	r3, r2
 800347e:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8003480:	4b1f      	ldr	r3, [pc, #124]	; (8003500 <HAL_GPIO_Init+0x2c4>)
 8003482:	693a      	ldr	r2, [r7, #16]
 8003484:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 8003486:	4a1e      	ldr	r2, [pc, #120]	; (8003500 <HAL_GPIO_Init+0x2c4>)
 8003488:	2384      	movs	r3, #132	; 0x84
 800348a:	58d3      	ldr	r3, [r2, r3]
 800348c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800348e:	68fb      	ldr	r3, [r7, #12]
 8003490:	43da      	mvns	r2, r3
 8003492:	693b      	ldr	r3, [r7, #16]
 8003494:	4013      	ands	r3, r2
 8003496:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8003498:	683b      	ldr	r3, [r7, #0]
 800349a:	685a      	ldr	r2, [r3, #4]
 800349c:	2380      	movs	r3, #128	; 0x80
 800349e:	029b      	lsls	r3, r3, #10
 80034a0:	4013      	ands	r3, r2
 80034a2:	d003      	beq.n	80034ac <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 80034a4:	693a      	ldr	r2, [r7, #16]
 80034a6:	68fb      	ldr	r3, [r7, #12]
 80034a8:	4313      	orrs	r3, r2
 80034aa:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 80034ac:	4914      	ldr	r1, [pc, #80]	; (8003500 <HAL_GPIO_Init+0x2c4>)
 80034ae:	2284      	movs	r2, #132	; 0x84
 80034b0:	693b      	ldr	r3, [r7, #16]
 80034b2:	508b      	str	r3, [r1, r2]

        temp = EXTI->IMR1;
 80034b4:	4a12      	ldr	r2, [pc, #72]	; (8003500 <HAL_GPIO_Init+0x2c4>)
 80034b6:	2380      	movs	r3, #128	; 0x80
 80034b8:	58d3      	ldr	r3, [r2, r3]
 80034ba:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80034bc:	68fb      	ldr	r3, [r7, #12]
 80034be:	43da      	mvns	r2, r3
 80034c0:	693b      	ldr	r3, [r7, #16]
 80034c2:	4013      	ands	r3, r2
 80034c4:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 80034c6:	683b      	ldr	r3, [r7, #0]
 80034c8:	685a      	ldr	r2, [r3, #4]
 80034ca:	2380      	movs	r3, #128	; 0x80
 80034cc:	025b      	lsls	r3, r3, #9
 80034ce:	4013      	ands	r3, r2
 80034d0:	d003      	beq.n	80034da <HAL_GPIO_Init+0x29e>
        {
          temp |= iocurrent;
 80034d2:	693a      	ldr	r2, [r7, #16]
 80034d4:	68fb      	ldr	r3, [r7, #12]
 80034d6:	4313      	orrs	r3, r2
 80034d8:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 80034da:	4909      	ldr	r1, [pc, #36]	; (8003500 <HAL_GPIO_Init+0x2c4>)
 80034dc:	2280      	movs	r2, #128	; 0x80
 80034de:	693b      	ldr	r3, [r7, #16]
 80034e0:	508b      	str	r3, [r1, r2]
      }
    }

    position++;
 80034e2:	697b      	ldr	r3, [r7, #20]
 80034e4:	3301      	adds	r3, #1
 80034e6:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80034e8:	683b      	ldr	r3, [r7, #0]
 80034ea:	681a      	ldr	r2, [r3, #0]
 80034ec:	697b      	ldr	r3, [r7, #20]
 80034ee:	40da      	lsrs	r2, r3
 80034f0:	1e13      	subs	r3, r2, #0
 80034f2:	d000      	beq.n	80034f6 <HAL_GPIO_Init+0x2ba>
 80034f4:	e6aa      	b.n	800324c <HAL_GPIO_Init+0x10>
  }
}
 80034f6:	46c0      	nop			; (mov r8, r8)
 80034f8:	46c0      	nop			; (mov r8, r8)
 80034fa:	46bd      	mov	sp, r7
 80034fc:	b006      	add	sp, #24
 80034fe:	bd80      	pop	{r7, pc}
 8003500:	40021800 	.word	0x40021800
 8003504:	50000400 	.word	0x50000400
 8003508:	50000800 	.word	0x50000800
 800350c:	50000c00 	.word	0x50000c00
 8003510:	50001000 	.word	0x50001000

08003514 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003514:	b580      	push	{r7, lr}
 8003516:	b082      	sub	sp, #8
 8003518:	af00      	add	r7, sp, #0
 800351a:	6078      	str	r0, [r7, #4]
 800351c:	0008      	movs	r0, r1
 800351e:	0011      	movs	r1, r2
 8003520:	1cbb      	adds	r3, r7, #2
 8003522:	1c02      	adds	r2, r0, #0
 8003524:	801a      	strh	r2, [r3, #0]
 8003526:	1c7b      	adds	r3, r7, #1
 8003528:	1c0a      	adds	r2, r1, #0
 800352a:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 800352c:	1c7b      	adds	r3, r7, #1
 800352e:	781b      	ldrb	r3, [r3, #0]
 8003530:	2b00      	cmp	r3, #0
 8003532:	d004      	beq.n	800353e <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8003534:	1cbb      	adds	r3, r7, #2
 8003536:	881a      	ldrh	r2, [r3, #0]
 8003538:	687b      	ldr	r3, [r7, #4]
 800353a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 800353c:	e003      	b.n	8003546 <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 800353e:	1cbb      	adds	r3, r7, #2
 8003540:	881a      	ldrh	r2, [r3, #0]
 8003542:	687b      	ldr	r3, [r7, #4]
 8003544:	629a      	str	r2, [r3, #40]	; 0x28
}
 8003546:	46c0      	nop			; (mov r8, r8)
 8003548:	46bd      	mov	sp, r7
 800354a:	b002      	add	sp, #8
 800354c:	bd80      	pop	{r7, pc}
	...

08003550 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8003550:	b580      	push	{r7, lr}
 8003552:	b082      	sub	sp, #8
 8003554:	af00      	add	r7, sp, #0
 8003556:	0002      	movs	r2, r0
 8003558:	1dbb      	adds	r3, r7, #6
 800355a:	801a      	strh	r2, [r3, #0]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_RISING_IT(GPIO_Pin) != 0x00u)
 800355c:	4b10      	ldr	r3, [pc, #64]	; (80035a0 <HAL_GPIO_EXTI_IRQHandler+0x50>)
 800355e:	68db      	ldr	r3, [r3, #12]
 8003560:	1dba      	adds	r2, r7, #6
 8003562:	8812      	ldrh	r2, [r2, #0]
 8003564:	4013      	ands	r3, r2
 8003566:	d008      	beq.n	800357a <HAL_GPIO_EXTI_IRQHandler+0x2a>
  {
    __HAL_GPIO_EXTI_CLEAR_RISING_IT(GPIO_Pin);
 8003568:	4b0d      	ldr	r3, [pc, #52]	; (80035a0 <HAL_GPIO_EXTI_IRQHandler+0x50>)
 800356a:	1dba      	adds	r2, r7, #6
 800356c:	8812      	ldrh	r2, [r2, #0]
 800356e:	60da      	str	r2, [r3, #12]
    HAL_GPIO_EXTI_Rising_Callback(GPIO_Pin);
 8003570:	1dbb      	adds	r3, r7, #6
 8003572:	881b      	ldrh	r3, [r3, #0]
 8003574:	0018      	movs	r0, r3
 8003576:	f000 f815 	bl	80035a4 <HAL_GPIO_EXTI_Rising_Callback>
  }

  if (__HAL_GPIO_EXTI_GET_FALLING_IT(GPIO_Pin) != 0x00u)
 800357a:	4b09      	ldr	r3, [pc, #36]	; (80035a0 <HAL_GPIO_EXTI_IRQHandler+0x50>)
 800357c:	691b      	ldr	r3, [r3, #16]
 800357e:	1dba      	adds	r2, r7, #6
 8003580:	8812      	ldrh	r2, [r2, #0]
 8003582:	4013      	ands	r3, r2
 8003584:	d008      	beq.n	8003598 <HAL_GPIO_EXTI_IRQHandler+0x48>
  {
    __HAL_GPIO_EXTI_CLEAR_FALLING_IT(GPIO_Pin);
 8003586:	4b06      	ldr	r3, [pc, #24]	; (80035a0 <HAL_GPIO_EXTI_IRQHandler+0x50>)
 8003588:	1dba      	adds	r2, r7, #6
 800358a:	8812      	ldrh	r2, [r2, #0]
 800358c:	611a      	str	r2, [r3, #16]
    HAL_GPIO_EXTI_Falling_Callback(GPIO_Pin);
 800358e:	1dbb      	adds	r3, r7, #6
 8003590:	881b      	ldrh	r3, [r3, #0]
 8003592:	0018      	movs	r0, r3
 8003594:	f000 f810 	bl	80035b8 <HAL_GPIO_EXTI_Falling_Callback>
  }
}
 8003598:	46c0      	nop			; (mov r8, r8)
 800359a:	46bd      	mov	sp, r7
 800359c:	b002      	add	sp, #8
 800359e:	bd80      	pop	{r7, pc}
 80035a0:	40021800 	.word	0x40021800

080035a4 <HAL_GPIO_EXTI_Rising_Callback>:
  * @brief  EXTI line detection callback.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Rising_Callback(uint16_t GPIO_Pin)
{
 80035a4:	b580      	push	{r7, lr}
 80035a6:	b082      	sub	sp, #8
 80035a8:	af00      	add	r7, sp, #0
 80035aa:	0002      	movs	r2, r0
 80035ac:	1dbb      	adds	r3, r7, #6
 80035ae:	801a      	strh	r2, [r3, #0]
  UNUSED(GPIO_Pin);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Rising_Callback could be implemented in the user file
   */
}
 80035b0:	46c0      	nop			; (mov r8, r8)
 80035b2:	46bd      	mov	sp, r7
 80035b4:	b002      	add	sp, #8
 80035b6:	bd80      	pop	{r7, pc}

080035b8 <HAL_GPIO_EXTI_Falling_Callback>:
  * @brief  EXTI line detection callback.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Falling_Callback(uint16_t GPIO_Pin)
{
 80035b8:	b580      	push	{r7, lr}
 80035ba:	b082      	sub	sp, #8
 80035bc:	af00      	add	r7, sp, #0
 80035be:	0002      	movs	r2, r0
 80035c0:	1dbb      	adds	r3, r7, #6
 80035c2:	801a      	strh	r2, [r3, #0]
  UNUSED(GPIO_Pin);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Falling_Callback could be implemented in the user file
   */
}
 80035c4:	46c0      	nop			; (mov r8, r8)
 80035c6:	46bd      	mov	sp, r7
 80035c8:	b002      	add	sp, #8
 80035ca:	bd80      	pop	{r7, pc}

080035cc <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        6 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 80035cc:	b580      	push	{r7, lr}
 80035ce:	b084      	sub	sp, #16
 80035d0:	af00      	add	r7, sp, #0
 80035d2:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  /* Modify voltage scaling range */
  MODIFY_REG(PWR->CR1, PWR_CR1_VOS, VoltageScaling);
 80035d4:	4b19      	ldr	r3, [pc, #100]	; (800363c <HAL_PWREx_ControlVoltageScaling+0x70>)
 80035d6:	681b      	ldr	r3, [r3, #0]
 80035d8:	4a19      	ldr	r2, [pc, #100]	; (8003640 <HAL_PWREx_ControlVoltageScaling+0x74>)
 80035da:	4013      	ands	r3, r2
 80035dc:	0019      	movs	r1, r3
 80035de:	4b17      	ldr	r3, [pc, #92]	; (800363c <HAL_PWREx_ControlVoltageScaling+0x70>)
 80035e0:	687a      	ldr	r2, [r7, #4]
 80035e2:	430a      	orrs	r2, r1
 80035e4:	601a      	str	r2, [r3, #0]

  /* In case of Range 1 selected, we need to ensure that main regulator reaches new value */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 80035e6:	687a      	ldr	r2, [r7, #4]
 80035e8:	2380      	movs	r3, #128	; 0x80
 80035ea:	009b      	lsls	r3, r3, #2
 80035ec:	429a      	cmp	r2, r3
 80035ee:	d11f      	bne.n	8003630 <HAL_PWREx_ControlVoltageScaling+0x64>
  {
    /* Set timeout value */
    wait_loop_index = ((PWR_VOSF_SETTING_DELAY_6_US * SystemCoreClock) / 1000000U) + 1U;
 80035f0:	4b14      	ldr	r3, [pc, #80]	; (8003644 <HAL_PWREx_ControlVoltageScaling+0x78>)
 80035f2:	681a      	ldr	r2, [r3, #0]
 80035f4:	0013      	movs	r3, r2
 80035f6:	005b      	lsls	r3, r3, #1
 80035f8:	189b      	adds	r3, r3, r2
 80035fa:	005b      	lsls	r3, r3, #1
 80035fc:	4912      	ldr	r1, [pc, #72]	; (8003648 <HAL_PWREx_ControlVoltageScaling+0x7c>)
 80035fe:	0018      	movs	r0, r3
 8003600:	f7fc fd9c 	bl	800013c <__udivsi3>
 8003604:	0003      	movs	r3, r0
 8003606:	3301      	adds	r3, #1
 8003608:	60fb      	str	r3, [r7, #12]

    /* Wait until VOSF is reset */
    while (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 800360a:	e008      	b.n	800361e <HAL_PWREx_ControlVoltageScaling+0x52>
    {
      if (wait_loop_index != 0U)
 800360c:	68fb      	ldr	r3, [r7, #12]
 800360e:	2b00      	cmp	r3, #0
 8003610:	d003      	beq.n	800361a <HAL_PWREx_ControlVoltageScaling+0x4e>
      {
        wait_loop_index--;
 8003612:	68fb      	ldr	r3, [r7, #12]
 8003614:	3b01      	subs	r3, #1
 8003616:	60fb      	str	r3, [r7, #12]
 8003618:	e001      	b.n	800361e <HAL_PWREx_ControlVoltageScaling+0x52>
      }
      else
      {
        return HAL_TIMEOUT;
 800361a:	2303      	movs	r3, #3
 800361c:	e009      	b.n	8003632 <HAL_PWREx_ControlVoltageScaling+0x66>
    while (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 800361e:	4b07      	ldr	r3, [pc, #28]	; (800363c <HAL_PWREx_ControlVoltageScaling+0x70>)
 8003620:	695a      	ldr	r2, [r3, #20]
 8003622:	2380      	movs	r3, #128	; 0x80
 8003624:	00db      	lsls	r3, r3, #3
 8003626:	401a      	ands	r2, r3
 8003628:	2380      	movs	r3, #128	; 0x80
 800362a:	00db      	lsls	r3, r3, #3
 800362c:	429a      	cmp	r2, r3
 800362e:	d0ed      	beq.n	800360c <HAL_PWREx_ControlVoltageScaling+0x40>
      }
    }
  }

  return HAL_OK;
 8003630:	2300      	movs	r3, #0
}
 8003632:	0018      	movs	r0, r3
 8003634:	46bd      	mov	sp, r7
 8003636:	b004      	add	sp, #16
 8003638:	bd80      	pop	{r7, pc}
 800363a:	46c0      	nop			; (mov r8, r8)
 800363c:	40007000 	.word	0x40007000
 8003640:	fffff9ff 	.word	0xfffff9ff
 8003644:	20000004 	.word	0x20000004
 8003648:	000f4240 	.word	0x000f4240

0800364c <LL_RCC_GetAPB1Prescaler>:
  *         @arg @ref LL_RCC_APB1_DIV_4
  *         @arg @ref LL_RCC_APB1_DIV_8
  *         @arg @ref LL_RCC_APB1_DIV_16
  */
__STATIC_INLINE uint32_t LL_RCC_GetAPB1Prescaler(void)
{
 800364c:	b580      	push	{r7, lr}
 800364e:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE));
 8003650:	4b03      	ldr	r3, [pc, #12]	; (8003660 <LL_RCC_GetAPB1Prescaler+0x14>)
 8003652:	689a      	ldr	r2, [r3, #8]
 8003654:	23e0      	movs	r3, #224	; 0xe0
 8003656:	01db      	lsls	r3, r3, #7
 8003658:	4013      	ands	r3, r2
}
 800365a:	0018      	movs	r0, r3
 800365c:	46bd      	mov	sp, r7
 800365e:	bd80      	pop	{r7, pc}
 8003660:	40021000 	.word	0x40021000

08003664 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to LSE Off
  *         first and then to LSE On or LSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003664:	b580      	push	{r7, lr}
 8003666:	b088      	sub	sp, #32
 8003668:	af00      	add	r7, sp, #0
 800366a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 800366c:	687b      	ldr	r3, [r7, #4]
 800366e:	2b00      	cmp	r3, #0
 8003670:	d102      	bne.n	8003678 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8003672:	2301      	movs	r3, #1
 8003674:	f000 fb50 	bl	8003d18 <HAL_RCC_OscConfig+0x6b4>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003678:	687b      	ldr	r3, [r7, #4]
 800367a:	681b      	ldr	r3, [r3, #0]
 800367c:	2201      	movs	r2, #1
 800367e:	4013      	ands	r3, r2
 8003680:	d100      	bne.n	8003684 <HAL_RCC_OscConfig+0x20>
 8003682:	e07c      	b.n	800377e <HAL_RCC_OscConfig+0x11a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003684:	4bc3      	ldr	r3, [pc, #780]	; (8003994 <HAL_RCC_OscConfig+0x330>)
 8003686:	689b      	ldr	r3, [r3, #8]
 8003688:	2238      	movs	r2, #56	; 0x38
 800368a:	4013      	ands	r3, r2
 800368c:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 800368e:	4bc1      	ldr	r3, [pc, #772]	; (8003994 <HAL_RCC_OscConfig+0x330>)
 8003690:	68db      	ldr	r3, [r3, #12]
 8003692:	2203      	movs	r2, #3
 8003694:	4013      	ands	r3, r2
 8003696:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckcfg == RCC_PLLSOURCE_HSE))
 8003698:	69bb      	ldr	r3, [r7, #24]
 800369a:	2b10      	cmp	r3, #16
 800369c:	d102      	bne.n	80036a4 <HAL_RCC_OscConfig+0x40>
 800369e:	697b      	ldr	r3, [r7, #20]
 80036a0:	2b03      	cmp	r3, #3
 80036a2:	d002      	beq.n	80036aa <HAL_RCC_OscConfig+0x46>
        || (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSE))
 80036a4:	69bb      	ldr	r3, [r7, #24]
 80036a6:	2b08      	cmp	r3, #8
 80036a8:	d10b      	bne.n	80036c2 <HAL_RCC_OscConfig+0x5e>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80036aa:	4bba      	ldr	r3, [pc, #744]	; (8003994 <HAL_RCC_OscConfig+0x330>)
 80036ac:	681a      	ldr	r2, [r3, #0]
 80036ae:	2380      	movs	r3, #128	; 0x80
 80036b0:	029b      	lsls	r3, r3, #10
 80036b2:	4013      	ands	r3, r2
 80036b4:	d062      	beq.n	800377c <HAL_RCC_OscConfig+0x118>
 80036b6:	687b      	ldr	r3, [r7, #4]
 80036b8:	685b      	ldr	r3, [r3, #4]
 80036ba:	2b00      	cmp	r3, #0
 80036bc:	d15e      	bne.n	800377c <HAL_RCC_OscConfig+0x118>
      {
        return HAL_ERROR;
 80036be:	2301      	movs	r3, #1
 80036c0:	e32a      	b.n	8003d18 <HAL_RCC_OscConfig+0x6b4>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80036c2:	687b      	ldr	r3, [r7, #4]
 80036c4:	685a      	ldr	r2, [r3, #4]
 80036c6:	2380      	movs	r3, #128	; 0x80
 80036c8:	025b      	lsls	r3, r3, #9
 80036ca:	429a      	cmp	r2, r3
 80036cc:	d107      	bne.n	80036de <HAL_RCC_OscConfig+0x7a>
 80036ce:	4bb1      	ldr	r3, [pc, #708]	; (8003994 <HAL_RCC_OscConfig+0x330>)
 80036d0:	681a      	ldr	r2, [r3, #0]
 80036d2:	4bb0      	ldr	r3, [pc, #704]	; (8003994 <HAL_RCC_OscConfig+0x330>)
 80036d4:	2180      	movs	r1, #128	; 0x80
 80036d6:	0249      	lsls	r1, r1, #9
 80036d8:	430a      	orrs	r2, r1
 80036da:	601a      	str	r2, [r3, #0]
 80036dc:	e020      	b.n	8003720 <HAL_RCC_OscConfig+0xbc>
 80036de:	687b      	ldr	r3, [r7, #4]
 80036e0:	685a      	ldr	r2, [r3, #4]
 80036e2:	23a0      	movs	r3, #160	; 0xa0
 80036e4:	02db      	lsls	r3, r3, #11
 80036e6:	429a      	cmp	r2, r3
 80036e8:	d10e      	bne.n	8003708 <HAL_RCC_OscConfig+0xa4>
 80036ea:	4baa      	ldr	r3, [pc, #680]	; (8003994 <HAL_RCC_OscConfig+0x330>)
 80036ec:	681a      	ldr	r2, [r3, #0]
 80036ee:	4ba9      	ldr	r3, [pc, #676]	; (8003994 <HAL_RCC_OscConfig+0x330>)
 80036f0:	2180      	movs	r1, #128	; 0x80
 80036f2:	02c9      	lsls	r1, r1, #11
 80036f4:	430a      	orrs	r2, r1
 80036f6:	601a      	str	r2, [r3, #0]
 80036f8:	4ba6      	ldr	r3, [pc, #664]	; (8003994 <HAL_RCC_OscConfig+0x330>)
 80036fa:	681a      	ldr	r2, [r3, #0]
 80036fc:	4ba5      	ldr	r3, [pc, #660]	; (8003994 <HAL_RCC_OscConfig+0x330>)
 80036fe:	2180      	movs	r1, #128	; 0x80
 8003700:	0249      	lsls	r1, r1, #9
 8003702:	430a      	orrs	r2, r1
 8003704:	601a      	str	r2, [r3, #0]
 8003706:	e00b      	b.n	8003720 <HAL_RCC_OscConfig+0xbc>
 8003708:	4ba2      	ldr	r3, [pc, #648]	; (8003994 <HAL_RCC_OscConfig+0x330>)
 800370a:	681a      	ldr	r2, [r3, #0]
 800370c:	4ba1      	ldr	r3, [pc, #644]	; (8003994 <HAL_RCC_OscConfig+0x330>)
 800370e:	49a2      	ldr	r1, [pc, #648]	; (8003998 <HAL_RCC_OscConfig+0x334>)
 8003710:	400a      	ands	r2, r1
 8003712:	601a      	str	r2, [r3, #0]
 8003714:	4b9f      	ldr	r3, [pc, #636]	; (8003994 <HAL_RCC_OscConfig+0x330>)
 8003716:	681a      	ldr	r2, [r3, #0]
 8003718:	4b9e      	ldr	r3, [pc, #632]	; (8003994 <HAL_RCC_OscConfig+0x330>)
 800371a:	49a0      	ldr	r1, [pc, #640]	; (800399c <HAL_RCC_OscConfig+0x338>)
 800371c:	400a      	ands	r2, r1
 800371e:	601a      	str	r2, [r3, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8003720:	687b      	ldr	r3, [r7, #4]
 8003722:	685b      	ldr	r3, [r3, #4]
 8003724:	2b00      	cmp	r3, #0
 8003726:	d014      	beq.n	8003752 <HAL_RCC_OscConfig+0xee>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003728:	f7ff fc50 	bl	8002fcc <HAL_GetTick>
 800372c:	0003      	movs	r3, r0
 800372e:	613b      	str	r3, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003730:	e008      	b.n	8003744 <HAL_RCC_OscConfig+0xe0>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003732:	f7ff fc4b 	bl	8002fcc <HAL_GetTick>
 8003736:	0002      	movs	r2, r0
 8003738:	693b      	ldr	r3, [r7, #16]
 800373a:	1ad3      	subs	r3, r2, r3
 800373c:	2b64      	cmp	r3, #100	; 0x64
 800373e:	d901      	bls.n	8003744 <HAL_RCC_OscConfig+0xe0>
          {
            return HAL_TIMEOUT;
 8003740:	2303      	movs	r3, #3
 8003742:	e2e9      	b.n	8003d18 <HAL_RCC_OscConfig+0x6b4>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003744:	4b93      	ldr	r3, [pc, #588]	; (8003994 <HAL_RCC_OscConfig+0x330>)
 8003746:	681a      	ldr	r2, [r3, #0]
 8003748:	2380      	movs	r3, #128	; 0x80
 800374a:	029b      	lsls	r3, r3, #10
 800374c:	4013      	ands	r3, r2
 800374e:	d0f0      	beq.n	8003732 <HAL_RCC_OscConfig+0xce>
 8003750:	e015      	b.n	800377e <HAL_RCC_OscConfig+0x11a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003752:	f7ff fc3b 	bl	8002fcc <HAL_GetTick>
 8003756:	0003      	movs	r3, r0
 8003758:	613b      	str	r3, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800375a:	e008      	b.n	800376e <HAL_RCC_OscConfig+0x10a>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800375c:	f7ff fc36 	bl	8002fcc <HAL_GetTick>
 8003760:	0002      	movs	r2, r0
 8003762:	693b      	ldr	r3, [r7, #16]
 8003764:	1ad3      	subs	r3, r2, r3
 8003766:	2b64      	cmp	r3, #100	; 0x64
 8003768:	d901      	bls.n	800376e <HAL_RCC_OscConfig+0x10a>
          {
            return HAL_TIMEOUT;
 800376a:	2303      	movs	r3, #3
 800376c:	e2d4      	b.n	8003d18 <HAL_RCC_OscConfig+0x6b4>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800376e:	4b89      	ldr	r3, [pc, #548]	; (8003994 <HAL_RCC_OscConfig+0x330>)
 8003770:	681a      	ldr	r2, [r3, #0]
 8003772:	2380      	movs	r3, #128	; 0x80
 8003774:	029b      	lsls	r3, r3, #10
 8003776:	4013      	ands	r3, r2
 8003778:	d1f0      	bne.n	800375c <HAL_RCC_OscConfig+0xf8>
 800377a:	e000      	b.n	800377e <HAL_RCC_OscConfig+0x11a>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800377c:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800377e:	687b      	ldr	r3, [r7, #4]
 8003780:	681b      	ldr	r3, [r3, #0]
 8003782:	2202      	movs	r2, #2
 8003784:	4013      	ands	r3, r2
 8003786:	d100      	bne.n	800378a <HAL_RCC_OscConfig+0x126>
 8003788:	e099      	b.n	80038be <HAL_RCC_OscConfig+0x25a>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    assert_param(IS_RCC_HSIDIV(RCC_OscInitStruct->HSIDiv));

    /* Check if HSI16 is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800378a:	4b82      	ldr	r3, [pc, #520]	; (8003994 <HAL_RCC_OscConfig+0x330>)
 800378c:	689b      	ldr	r3, [r3, #8]
 800378e:	2238      	movs	r2, #56	; 0x38
 8003790:	4013      	ands	r3, r2
 8003792:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8003794:	4b7f      	ldr	r3, [pc, #508]	; (8003994 <HAL_RCC_OscConfig+0x330>)
 8003796:	68db      	ldr	r3, [r3, #12]
 8003798:	2203      	movs	r2, #3
 800379a:	4013      	ands	r3, r2
 800379c:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckcfg == RCC_PLLSOURCE_HSI))
 800379e:	69bb      	ldr	r3, [r7, #24]
 80037a0:	2b10      	cmp	r3, #16
 80037a2:	d102      	bne.n	80037aa <HAL_RCC_OscConfig+0x146>
 80037a4:	697b      	ldr	r3, [r7, #20]
 80037a6:	2b02      	cmp	r3, #2
 80037a8:	d002      	beq.n	80037b0 <HAL_RCC_OscConfig+0x14c>
        || (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI))
 80037aa:	69bb      	ldr	r3, [r7, #24]
 80037ac:	2b00      	cmp	r3, #0
 80037ae:	d135      	bne.n	800381c <HAL_RCC_OscConfig+0x1b8>
    {
      /* When HSI is used as system clock or as PLL input clock it can not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80037b0:	4b78      	ldr	r3, [pc, #480]	; (8003994 <HAL_RCC_OscConfig+0x330>)
 80037b2:	681a      	ldr	r2, [r3, #0]
 80037b4:	2380      	movs	r3, #128	; 0x80
 80037b6:	00db      	lsls	r3, r3, #3
 80037b8:	4013      	ands	r3, r2
 80037ba:	d005      	beq.n	80037c8 <HAL_RCC_OscConfig+0x164>
 80037bc:	687b      	ldr	r3, [r7, #4]
 80037be:	68db      	ldr	r3, [r3, #12]
 80037c0:	2b00      	cmp	r3, #0
 80037c2:	d101      	bne.n	80037c8 <HAL_RCC_OscConfig+0x164>
      {
        return HAL_ERROR;
 80037c4:	2301      	movs	r3, #1
 80037c6:	e2a7      	b.n	8003d18 <HAL_RCC_OscConfig+0x6b4>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80037c8:	4b72      	ldr	r3, [pc, #456]	; (8003994 <HAL_RCC_OscConfig+0x330>)
 80037ca:	685b      	ldr	r3, [r3, #4]
 80037cc:	4a74      	ldr	r2, [pc, #464]	; (80039a0 <HAL_RCC_OscConfig+0x33c>)
 80037ce:	4013      	ands	r3, r2
 80037d0:	0019      	movs	r1, r3
 80037d2:	687b      	ldr	r3, [r7, #4]
 80037d4:	695b      	ldr	r3, [r3, #20]
 80037d6:	021a      	lsls	r2, r3, #8
 80037d8:	4b6e      	ldr	r3, [pc, #440]	; (8003994 <HAL_RCC_OscConfig+0x330>)
 80037da:	430a      	orrs	r2, r1
 80037dc:	605a      	str	r2, [r3, #4]

        if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI)
 80037de:	69bb      	ldr	r3, [r7, #24]
 80037e0:	2b00      	cmp	r3, #0
 80037e2:	d112      	bne.n	800380a <HAL_RCC_OscConfig+0x1a6>
        {
          /* Adjust the HSI16 division factor */
          __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 80037e4:	4b6b      	ldr	r3, [pc, #428]	; (8003994 <HAL_RCC_OscConfig+0x330>)
 80037e6:	681b      	ldr	r3, [r3, #0]
 80037e8:	4a6e      	ldr	r2, [pc, #440]	; (80039a4 <HAL_RCC_OscConfig+0x340>)
 80037ea:	4013      	ands	r3, r2
 80037ec:	0019      	movs	r1, r3
 80037ee:	687b      	ldr	r3, [r7, #4]
 80037f0:	691a      	ldr	r2, [r3, #16]
 80037f2:	4b68      	ldr	r3, [pc, #416]	; (8003994 <HAL_RCC_OscConfig+0x330>)
 80037f4:	430a      	orrs	r2, r1
 80037f6:	601a      	str	r2, [r3, #0]

          /* Update the SystemCoreClock global variable with HSISYS value  */
          SystemCoreClock = (HSI_VALUE / (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos)));
 80037f8:	4b66      	ldr	r3, [pc, #408]	; (8003994 <HAL_RCC_OscConfig+0x330>)
 80037fa:	681b      	ldr	r3, [r3, #0]
 80037fc:	0adb      	lsrs	r3, r3, #11
 80037fe:	2207      	movs	r2, #7
 8003800:	4013      	ands	r3, r2
 8003802:	4a69      	ldr	r2, [pc, #420]	; (80039a8 <HAL_RCC_OscConfig+0x344>)
 8003804:	40da      	lsrs	r2, r3
 8003806:	4b69      	ldr	r3, [pc, #420]	; (80039ac <HAL_RCC_OscConfig+0x348>)
 8003808:	601a      	str	r2, [r3, #0]
        }

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 800380a:	4b69      	ldr	r3, [pc, #420]	; (80039b0 <HAL_RCC_OscConfig+0x34c>)
 800380c:	681b      	ldr	r3, [r3, #0]
 800380e:	0018      	movs	r0, r3
 8003810:	f7ff fb80 	bl	8002f14 <HAL_InitTick>
 8003814:	1e03      	subs	r3, r0, #0
 8003816:	d051      	beq.n	80038bc <HAL_RCC_OscConfig+0x258>
        {
          return HAL_ERROR;
 8003818:	2301      	movs	r3, #1
 800381a:	e27d      	b.n	8003d18 <HAL_RCC_OscConfig+0x6b4>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800381c:	687b      	ldr	r3, [r7, #4]
 800381e:	68db      	ldr	r3, [r3, #12]
 8003820:	2b00      	cmp	r3, #0
 8003822:	d030      	beq.n	8003886 <HAL_RCC_OscConfig+0x222>
      {
        /* Configure the HSI16 division factor */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 8003824:	4b5b      	ldr	r3, [pc, #364]	; (8003994 <HAL_RCC_OscConfig+0x330>)
 8003826:	681b      	ldr	r3, [r3, #0]
 8003828:	4a5e      	ldr	r2, [pc, #376]	; (80039a4 <HAL_RCC_OscConfig+0x340>)
 800382a:	4013      	ands	r3, r2
 800382c:	0019      	movs	r1, r3
 800382e:	687b      	ldr	r3, [r7, #4]
 8003830:	691a      	ldr	r2, [r3, #16]
 8003832:	4b58      	ldr	r3, [pc, #352]	; (8003994 <HAL_RCC_OscConfig+0x330>)
 8003834:	430a      	orrs	r2, r1
 8003836:	601a      	str	r2, [r3, #0]

        /* Enable the Internal High Speed oscillator (HSI16). */
        __HAL_RCC_HSI_ENABLE();
 8003838:	4b56      	ldr	r3, [pc, #344]	; (8003994 <HAL_RCC_OscConfig+0x330>)
 800383a:	681a      	ldr	r2, [r3, #0]
 800383c:	4b55      	ldr	r3, [pc, #340]	; (8003994 <HAL_RCC_OscConfig+0x330>)
 800383e:	2180      	movs	r1, #128	; 0x80
 8003840:	0049      	lsls	r1, r1, #1
 8003842:	430a      	orrs	r2, r1
 8003844:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003846:	f7ff fbc1 	bl	8002fcc <HAL_GetTick>
 800384a:	0003      	movs	r3, r0
 800384c:	613b      	str	r3, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800384e:	e008      	b.n	8003862 <HAL_RCC_OscConfig+0x1fe>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003850:	f7ff fbbc 	bl	8002fcc <HAL_GetTick>
 8003854:	0002      	movs	r2, r0
 8003856:	693b      	ldr	r3, [r7, #16]
 8003858:	1ad3      	subs	r3, r2, r3
 800385a:	2b02      	cmp	r3, #2
 800385c:	d901      	bls.n	8003862 <HAL_RCC_OscConfig+0x1fe>
          {
            return HAL_TIMEOUT;
 800385e:	2303      	movs	r3, #3
 8003860:	e25a      	b.n	8003d18 <HAL_RCC_OscConfig+0x6b4>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003862:	4b4c      	ldr	r3, [pc, #304]	; (8003994 <HAL_RCC_OscConfig+0x330>)
 8003864:	681a      	ldr	r2, [r3, #0]
 8003866:	2380      	movs	r3, #128	; 0x80
 8003868:	00db      	lsls	r3, r3, #3
 800386a:	4013      	ands	r3, r2
 800386c:	d0f0      	beq.n	8003850 <HAL_RCC_OscConfig+0x1ec>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800386e:	4b49      	ldr	r3, [pc, #292]	; (8003994 <HAL_RCC_OscConfig+0x330>)
 8003870:	685b      	ldr	r3, [r3, #4]
 8003872:	4a4b      	ldr	r2, [pc, #300]	; (80039a0 <HAL_RCC_OscConfig+0x33c>)
 8003874:	4013      	ands	r3, r2
 8003876:	0019      	movs	r1, r3
 8003878:	687b      	ldr	r3, [r7, #4]
 800387a:	695b      	ldr	r3, [r3, #20]
 800387c:	021a      	lsls	r2, r3, #8
 800387e:	4b45      	ldr	r3, [pc, #276]	; (8003994 <HAL_RCC_OscConfig+0x330>)
 8003880:	430a      	orrs	r2, r1
 8003882:	605a      	str	r2, [r3, #4]
 8003884:	e01b      	b.n	80038be <HAL_RCC_OscConfig+0x25a>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI16). */
        __HAL_RCC_HSI_DISABLE();
 8003886:	4b43      	ldr	r3, [pc, #268]	; (8003994 <HAL_RCC_OscConfig+0x330>)
 8003888:	681a      	ldr	r2, [r3, #0]
 800388a:	4b42      	ldr	r3, [pc, #264]	; (8003994 <HAL_RCC_OscConfig+0x330>)
 800388c:	4949      	ldr	r1, [pc, #292]	; (80039b4 <HAL_RCC_OscConfig+0x350>)
 800388e:	400a      	ands	r2, r1
 8003890:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003892:	f7ff fb9b 	bl	8002fcc <HAL_GetTick>
 8003896:	0003      	movs	r3, r0
 8003898:	613b      	str	r3, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800389a:	e008      	b.n	80038ae <HAL_RCC_OscConfig+0x24a>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800389c:	f7ff fb96 	bl	8002fcc <HAL_GetTick>
 80038a0:	0002      	movs	r2, r0
 80038a2:	693b      	ldr	r3, [r7, #16]
 80038a4:	1ad3      	subs	r3, r2, r3
 80038a6:	2b02      	cmp	r3, #2
 80038a8:	d901      	bls.n	80038ae <HAL_RCC_OscConfig+0x24a>
          {
            return HAL_TIMEOUT;
 80038aa:	2303      	movs	r3, #3
 80038ac:	e234      	b.n	8003d18 <HAL_RCC_OscConfig+0x6b4>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80038ae:	4b39      	ldr	r3, [pc, #228]	; (8003994 <HAL_RCC_OscConfig+0x330>)
 80038b0:	681a      	ldr	r2, [r3, #0]
 80038b2:	2380      	movs	r3, #128	; 0x80
 80038b4:	00db      	lsls	r3, r3, #3
 80038b6:	4013      	ands	r3, r2
 80038b8:	d1f0      	bne.n	800389c <HAL_RCC_OscConfig+0x238>
 80038ba:	e000      	b.n	80038be <HAL_RCC_OscConfig+0x25a>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80038bc:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80038be:	687b      	ldr	r3, [r7, #4]
 80038c0:	681b      	ldr	r3, [r3, #0]
 80038c2:	2208      	movs	r2, #8
 80038c4:	4013      	ands	r3, r2
 80038c6:	d047      	beq.n	8003958 <HAL_RCC_OscConfig+0x2f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check if LSI is used as system clock */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSI)
 80038c8:	4b32      	ldr	r3, [pc, #200]	; (8003994 <HAL_RCC_OscConfig+0x330>)
 80038ca:	689b      	ldr	r3, [r3, #8]
 80038cc:	2238      	movs	r2, #56	; 0x38
 80038ce:	4013      	ands	r3, r2
 80038d0:	2b18      	cmp	r3, #24
 80038d2:	d10a      	bne.n	80038ea <HAL_RCC_OscConfig+0x286>
    {
      /* When LSI is used as system clock it will not be disabled */
      if ((((RCC->CSR) & RCC_CSR_LSIRDY) != 0U) && (RCC_OscInitStruct->LSIState == RCC_LSI_OFF))
 80038d4:	4b2f      	ldr	r3, [pc, #188]	; (8003994 <HAL_RCC_OscConfig+0x330>)
 80038d6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80038d8:	2202      	movs	r2, #2
 80038da:	4013      	ands	r3, r2
 80038dc:	d03c      	beq.n	8003958 <HAL_RCC_OscConfig+0x2f4>
 80038de:	687b      	ldr	r3, [r7, #4]
 80038e0:	699b      	ldr	r3, [r3, #24]
 80038e2:	2b00      	cmp	r3, #0
 80038e4:	d138      	bne.n	8003958 <HAL_RCC_OscConfig+0x2f4>
      {
        return HAL_ERROR;
 80038e6:	2301      	movs	r3, #1
 80038e8:	e216      	b.n	8003d18 <HAL_RCC_OscConfig+0x6b4>
      }
    }
    else
    {
      /* Check the LSI State */
      if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80038ea:	687b      	ldr	r3, [r7, #4]
 80038ec:	699b      	ldr	r3, [r3, #24]
 80038ee:	2b00      	cmp	r3, #0
 80038f0:	d019      	beq.n	8003926 <HAL_RCC_OscConfig+0x2c2>
      {
        /* Enable the Internal Low Speed oscillator (LSI). */
        __HAL_RCC_LSI_ENABLE();
 80038f2:	4b28      	ldr	r3, [pc, #160]	; (8003994 <HAL_RCC_OscConfig+0x330>)
 80038f4:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 80038f6:	4b27      	ldr	r3, [pc, #156]	; (8003994 <HAL_RCC_OscConfig+0x330>)
 80038f8:	2101      	movs	r1, #1
 80038fa:	430a      	orrs	r2, r1
 80038fc:	661a      	str	r2, [r3, #96]	; 0x60

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80038fe:	f7ff fb65 	bl	8002fcc <HAL_GetTick>
 8003902:	0003      	movs	r3, r0
 8003904:	613b      	str	r3, [r7, #16]

        /* Wait till LSI is ready */
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8003906:	e008      	b.n	800391a <HAL_RCC_OscConfig+0x2b6>
        {
          if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003908:	f7ff fb60 	bl	8002fcc <HAL_GetTick>
 800390c:	0002      	movs	r2, r0
 800390e:	693b      	ldr	r3, [r7, #16]
 8003910:	1ad3      	subs	r3, r2, r3
 8003912:	2b02      	cmp	r3, #2
 8003914:	d901      	bls.n	800391a <HAL_RCC_OscConfig+0x2b6>
          {
            return HAL_TIMEOUT;
 8003916:	2303      	movs	r3, #3
 8003918:	e1fe      	b.n	8003d18 <HAL_RCC_OscConfig+0x6b4>
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800391a:	4b1e      	ldr	r3, [pc, #120]	; (8003994 <HAL_RCC_OscConfig+0x330>)
 800391c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800391e:	2202      	movs	r2, #2
 8003920:	4013      	ands	r3, r2
 8003922:	d0f1      	beq.n	8003908 <HAL_RCC_OscConfig+0x2a4>
 8003924:	e018      	b.n	8003958 <HAL_RCC_OscConfig+0x2f4>
        }
      }
      else
      {
        /* Disable the Internal Low Speed oscillator (LSI). */
        __HAL_RCC_LSI_DISABLE();
 8003926:	4b1b      	ldr	r3, [pc, #108]	; (8003994 <HAL_RCC_OscConfig+0x330>)
 8003928:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 800392a:	4b1a      	ldr	r3, [pc, #104]	; (8003994 <HAL_RCC_OscConfig+0x330>)
 800392c:	2101      	movs	r1, #1
 800392e:	438a      	bics	r2, r1
 8003930:	661a      	str	r2, [r3, #96]	; 0x60

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003932:	f7ff fb4b 	bl	8002fcc <HAL_GetTick>
 8003936:	0003      	movs	r3, r0
 8003938:	613b      	str	r3, [r7, #16]

        /* Wait till LSI is disabled */
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 800393a:	e008      	b.n	800394e <HAL_RCC_OscConfig+0x2ea>
        {
          if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800393c:	f7ff fb46 	bl	8002fcc <HAL_GetTick>
 8003940:	0002      	movs	r2, r0
 8003942:	693b      	ldr	r3, [r7, #16]
 8003944:	1ad3      	subs	r3, r2, r3
 8003946:	2b02      	cmp	r3, #2
 8003948:	d901      	bls.n	800394e <HAL_RCC_OscConfig+0x2ea>
          {
            return HAL_TIMEOUT;
 800394a:	2303      	movs	r3, #3
 800394c:	e1e4      	b.n	8003d18 <HAL_RCC_OscConfig+0x6b4>
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 800394e:	4b11      	ldr	r3, [pc, #68]	; (8003994 <HAL_RCC_OscConfig+0x330>)
 8003950:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003952:	2202      	movs	r2, #2
 8003954:	4013      	ands	r3, r2
 8003956:	d1f1      	bne.n	800393c <HAL_RCC_OscConfig+0x2d8>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003958:	687b      	ldr	r3, [r7, #4]
 800395a:	681b      	ldr	r3, [r3, #0]
 800395c:	2204      	movs	r2, #4
 800395e:	4013      	ands	r3, r2
 8003960:	d100      	bne.n	8003964 <HAL_RCC_OscConfig+0x300>
 8003962:	e0c7      	b.n	8003af4 <HAL_RCC_OscConfig+0x490>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003964:	231f      	movs	r3, #31
 8003966:	18fb      	adds	r3, r7, r3
 8003968:	2200      	movs	r2, #0
 800396a:	701a      	strb	r2, [r3, #0]

    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* When the LSE is used as system clock, it is not allowed disable it */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSE)
 800396c:	4b09      	ldr	r3, [pc, #36]	; (8003994 <HAL_RCC_OscConfig+0x330>)
 800396e:	689b      	ldr	r3, [r3, #8]
 8003970:	2238      	movs	r2, #56	; 0x38
 8003972:	4013      	ands	r3, r2
 8003974:	2b20      	cmp	r3, #32
 8003976:	d11f      	bne.n	80039b8 <HAL_RCC_OscConfig+0x354>
    {
      if ((((RCC->BDCR) & RCC_BDCR_LSERDY) != 0U) && (RCC_OscInitStruct->LSEState == RCC_LSE_OFF))
 8003978:	4b06      	ldr	r3, [pc, #24]	; (8003994 <HAL_RCC_OscConfig+0x330>)
 800397a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800397c:	2202      	movs	r2, #2
 800397e:	4013      	ands	r3, r2
 8003980:	d100      	bne.n	8003984 <HAL_RCC_OscConfig+0x320>
 8003982:	e0b7      	b.n	8003af4 <HAL_RCC_OscConfig+0x490>
 8003984:	687b      	ldr	r3, [r7, #4]
 8003986:	689b      	ldr	r3, [r3, #8]
 8003988:	2b00      	cmp	r3, #0
 800398a:	d000      	beq.n	800398e <HAL_RCC_OscConfig+0x32a>
 800398c:	e0b2      	b.n	8003af4 <HAL_RCC_OscConfig+0x490>
      {
        return HAL_ERROR;
 800398e:	2301      	movs	r3, #1
 8003990:	e1c2      	b.n	8003d18 <HAL_RCC_OscConfig+0x6b4>
 8003992:	46c0      	nop			; (mov r8, r8)
 8003994:	40021000 	.word	0x40021000
 8003998:	fffeffff 	.word	0xfffeffff
 800399c:	fffbffff 	.word	0xfffbffff
 80039a0:	ffff80ff 	.word	0xffff80ff
 80039a4:	ffffc7ff 	.word	0xffffc7ff
 80039a8:	00f42400 	.word	0x00f42400
 80039ac:	20000004 	.word	0x20000004
 80039b0:	20000008 	.word	0x20000008
 80039b4:	fffffeff 	.word	0xfffffeff
    }
    else
    {
      /* Update LSE configuration in Backup Domain control register    */
      /* Requires to enable write access to Backup Domain of necessary */
      if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 80039b8:	4bb5      	ldr	r3, [pc, #724]	; (8003c90 <HAL_RCC_OscConfig+0x62c>)
 80039ba:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80039bc:	2380      	movs	r3, #128	; 0x80
 80039be:	055b      	lsls	r3, r3, #21
 80039c0:	4013      	ands	r3, r2
 80039c2:	d101      	bne.n	80039c8 <HAL_RCC_OscConfig+0x364>
 80039c4:	2301      	movs	r3, #1
 80039c6:	e000      	b.n	80039ca <HAL_RCC_OscConfig+0x366>
 80039c8:	2300      	movs	r3, #0
 80039ca:	2b00      	cmp	r3, #0
 80039cc:	d011      	beq.n	80039f2 <HAL_RCC_OscConfig+0x38e>
      {
        __HAL_RCC_PWR_CLK_ENABLE();
 80039ce:	4bb0      	ldr	r3, [pc, #704]	; (8003c90 <HAL_RCC_OscConfig+0x62c>)
 80039d0:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80039d2:	4baf      	ldr	r3, [pc, #700]	; (8003c90 <HAL_RCC_OscConfig+0x62c>)
 80039d4:	2180      	movs	r1, #128	; 0x80
 80039d6:	0549      	lsls	r1, r1, #21
 80039d8:	430a      	orrs	r2, r1
 80039da:	63da      	str	r2, [r3, #60]	; 0x3c
 80039dc:	4bac      	ldr	r3, [pc, #688]	; (8003c90 <HAL_RCC_OscConfig+0x62c>)
 80039de:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80039e0:	2380      	movs	r3, #128	; 0x80
 80039e2:	055b      	lsls	r3, r3, #21
 80039e4:	4013      	ands	r3, r2
 80039e6:	60fb      	str	r3, [r7, #12]
 80039e8:	68fb      	ldr	r3, [r7, #12]
        pwrclkchanged = SET;
 80039ea:	231f      	movs	r3, #31
 80039ec:	18fb      	adds	r3, r7, r3
 80039ee:	2201      	movs	r2, #1
 80039f0:	701a      	strb	r2, [r3, #0]
      }

      if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80039f2:	4ba8      	ldr	r3, [pc, #672]	; (8003c94 <HAL_RCC_OscConfig+0x630>)
 80039f4:	681a      	ldr	r2, [r3, #0]
 80039f6:	2380      	movs	r3, #128	; 0x80
 80039f8:	005b      	lsls	r3, r3, #1
 80039fa:	4013      	ands	r3, r2
 80039fc:	d11a      	bne.n	8003a34 <HAL_RCC_OscConfig+0x3d0>
      {
        /* Enable write access to Backup domain */
        SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80039fe:	4ba5      	ldr	r3, [pc, #660]	; (8003c94 <HAL_RCC_OscConfig+0x630>)
 8003a00:	681a      	ldr	r2, [r3, #0]
 8003a02:	4ba4      	ldr	r3, [pc, #656]	; (8003c94 <HAL_RCC_OscConfig+0x630>)
 8003a04:	2180      	movs	r1, #128	; 0x80
 8003a06:	0049      	lsls	r1, r1, #1
 8003a08:	430a      	orrs	r2, r1
 8003a0a:	601a      	str	r2, [r3, #0]

        /* Wait for Backup domain Write protection disable */
        tickstart = HAL_GetTick();
 8003a0c:	f7ff fade 	bl	8002fcc <HAL_GetTick>
 8003a10:	0003      	movs	r3, r0
 8003a12:	613b      	str	r3, [r7, #16]

        while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003a14:	e008      	b.n	8003a28 <HAL_RCC_OscConfig+0x3c4>
        {
          if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003a16:	f7ff fad9 	bl	8002fcc <HAL_GetTick>
 8003a1a:	0002      	movs	r2, r0
 8003a1c:	693b      	ldr	r3, [r7, #16]
 8003a1e:	1ad3      	subs	r3, r2, r3
 8003a20:	2b02      	cmp	r3, #2
 8003a22:	d901      	bls.n	8003a28 <HAL_RCC_OscConfig+0x3c4>
          {
            return HAL_TIMEOUT;
 8003a24:	2303      	movs	r3, #3
 8003a26:	e177      	b.n	8003d18 <HAL_RCC_OscConfig+0x6b4>
        while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003a28:	4b9a      	ldr	r3, [pc, #616]	; (8003c94 <HAL_RCC_OscConfig+0x630>)
 8003a2a:	681a      	ldr	r2, [r3, #0]
 8003a2c:	2380      	movs	r3, #128	; 0x80
 8003a2e:	005b      	lsls	r3, r3, #1
 8003a30:	4013      	ands	r3, r2
 8003a32:	d0f0      	beq.n	8003a16 <HAL_RCC_OscConfig+0x3b2>
          }
        }
      }

      /* Set the new LSE configuration -----------------------------------------*/
      __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003a34:	687b      	ldr	r3, [r7, #4]
 8003a36:	689b      	ldr	r3, [r3, #8]
 8003a38:	2b01      	cmp	r3, #1
 8003a3a:	d106      	bne.n	8003a4a <HAL_RCC_OscConfig+0x3e6>
 8003a3c:	4b94      	ldr	r3, [pc, #592]	; (8003c90 <HAL_RCC_OscConfig+0x62c>)
 8003a3e:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8003a40:	4b93      	ldr	r3, [pc, #588]	; (8003c90 <HAL_RCC_OscConfig+0x62c>)
 8003a42:	2101      	movs	r1, #1
 8003a44:	430a      	orrs	r2, r1
 8003a46:	65da      	str	r2, [r3, #92]	; 0x5c
 8003a48:	e01c      	b.n	8003a84 <HAL_RCC_OscConfig+0x420>
 8003a4a:	687b      	ldr	r3, [r7, #4]
 8003a4c:	689b      	ldr	r3, [r3, #8]
 8003a4e:	2b05      	cmp	r3, #5
 8003a50:	d10c      	bne.n	8003a6c <HAL_RCC_OscConfig+0x408>
 8003a52:	4b8f      	ldr	r3, [pc, #572]	; (8003c90 <HAL_RCC_OscConfig+0x62c>)
 8003a54:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8003a56:	4b8e      	ldr	r3, [pc, #568]	; (8003c90 <HAL_RCC_OscConfig+0x62c>)
 8003a58:	2104      	movs	r1, #4
 8003a5a:	430a      	orrs	r2, r1
 8003a5c:	65da      	str	r2, [r3, #92]	; 0x5c
 8003a5e:	4b8c      	ldr	r3, [pc, #560]	; (8003c90 <HAL_RCC_OscConfig+0x62c>)
 8003a60:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8003a62:	4b8b      	ldr	r3, [pc, #556]	; (8003c90 <HAL_RCC_OscConfig+0x62c>)
 8003a64:	2101      	movs	r1, #1
 8003a66:	430a      	orrs	r2, r1
 8003a68:	65da      	str	r2, [r3, #92]	; 0x5c
 8003a6a:	e00b      	b.n	8003a84 <HAL_RCC_OscConfig+0x420>
 8003a6c:	4b88      	ldr	r3, [pc, #544]	; (8003c90 <HAL_RCC_OscConfig+0x62c>)
 8003a6e:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8003a70:	4b87      	ldr	r3, [pc, #540]	; (8003c90 <HAL_RCC_OscConfig+0x62c>)
 8003a72:	2101      	movs	r1, #1
 8003a74:	438a      	bics	r2, r1
 8003a76:	65da      	str	r2, [r3, #92]	; 0x5c
 8003a78:	4b85      	ldr	r3, [pc, #532]	; (8003c90 <HAL_RCC_OscConfig+0x62c>)
 8003a7a:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8003a7c:	4b84      	ldr	r3, [pc, #528]	; (8003c90 <HAL_RCC_OscConfig+0x62c>)
 8003a7e:	2104      	movs	r1, #4
 8003a80:	438a      	bics	r2, r1
 8003a82:	65da      	str	r2, [r3, #92]	; 0x5c

      /* Check the LSE State */
      if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8003a84:	687b      	ldr	r3, [r7, #4]
 8003a86:	689b      	ldr	r3, [r3, #8]
 8003a88:	2b00      	cmp	r3, #0
 8003a8a:	d014      	beq.n	8003ab6 <HAL_RCC_OscConfig+0x452>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003a8c:	f7ff fa9e 	bl	8002fcc <HAL_GetTick>
 8003a90:	0003      	movs	r3, r0
 8003a92:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003a94:	e009      	b.n	8003aaa <HAL_RCC_OscConfig+0x446>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003a96:	f7ff fa99 	bl	8002fcc <HAL_GetTick>
 8003a9a:	0002      	movs	r2, r0
 8003a9c:	693b      	ldr	r3, [r7, #16]
 8003a9e:	1ad3      	subs	r3, r2, r3
 8003aa0:	4a7d      	ldr	r2, [pc, #500]	; (8003c98 <HAL_RCC_OscConfig+0x634>)
 8003aa2:	4293      	cmp	r3, r2
 8003aa4:	d901      	bls.n	8003aaa <HAL_RCC_OscConfig+0x446>
          {
            return HAL_TIMEOUT;
 8003aa6:	2303      	movs	r3, #3
 8003aa8:	e136      	b.n	8003d18 <HAL_RCC_OscConfig+0x6b4>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003aaa:	4b79      	ldr	r3, [pc, #484]	; (8003c90 <HAL_RCC_OscConfig+0x62c>)
 8003aac:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003aae:	2202      	movs	r2, #2
 8003ab0:	4013      	ands	r3, r2
 8003ab2:	d0f0      	beq.n	8003a96 <HAL_RCC_OscConfig+0x432>
 8003ab4:	e013      	b.n	8003ade <HAL_RCC_OscConfig+0x47a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003ab6:	f7ff fa89 	bl	8002fcc <HAL_GetTick>
 8003aba:	0003      	movs	r3, r0
 8003abc:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is disabled */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8003abe:	e009      	b.n	8003ad4 <HAL_RCC_OscConfig+0x470>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003ac0:	f7ff fa84 	bl	8002fcc <HAL_GetTick>
 8003ac4:	0002      	movs	r2, r0
 8003ac6:	693b      	ldr	r3, [r7, #16]
 8003ac8:	1ad3      	subs	r3, r2, r3
 8003aca:	4a73      	ldr	r2, [pc, #460]	; (8003c98 <HAL_RCC_OscConfig+0x634>)
 8003acc:	4293      	cmp	r3, r2
 8003ace:	d901      	bls.n	8003ad4 <HAL_RCC_OscConfig+0x470>
          {
            return HAL_TIMEOUT;
 8003ad0:	2303      	movs	r3, #3
 8003ad2:	e121      	b.n	8003d18 <HAL_RCC_OscConfig+0x6b4>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8003ad4:	4b6e      	ldr	r3, [pc, #440]	; (8003c90 <HAL_RCC_OscConfig+0x62c>)
 8003ad6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003ad8:	2202      	movs	r2, #2
 8003ada:	4013      	ands	r3, r2
 8003adc:	d1f0      	bne.n	8003ac0 <HAL_RCC_OscConfig+0x45c>
          }
        }
      }

      /* Restore clock configuration if changed */
      if (pwrclkchanged == SET)
 8003ade:	231f      	movs	r3, #31
 8003ae0:	18fb      	adds	r3, r7, r3
 8003ae2:	781b      	ldrb	r3, [r3, #0]
 8003ae4:	2b01      	cmp	r3, #1
 8003ae6:	d105      	bne.n	8003af4 <HAL_RCC_OscConfig+0x490>
      {
        __HAL_RCC_PWR_CLK_DISABLE();
 8003ae8:	4b69      	ldr	r3, [pc, #420]	; (8003c90 <HAL_RCC_OscConfig+0x62c>)
 8003aea:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8003aec:	4b68      	ldr	r3, [pc, #416]	; (8003c90 <HAL_RCC_OscConfig+0x62c>)
 8003aee:	496b      	ldr	r1, [pc, #428]	; (8003c9c <HAL_RCC_OscConfig+0x638>)
 8003af0:	400a      	ands	r2, r1
 8003af2:	63da      	str	r2, [r3, #60]	; 0x3c
      }
    }
  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8003af4:	687b      	ldr	r3, [r7, #4]
 8003af6:	681b      	ldr	r3, [r3, #0]
 8003af8:	2220      	movs	r2, #32
 8003afa:	4013      	ands	r3, r2
 8003afc:	d039      	beq.n	8003b72 <HAL_RCC_OscConfig+0x50e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if (RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8003afe:	687b      	ldr	r3, [r7, #4]
 8003b00:	69db      	ldr	r3, [r3, #28]
 8003b02:	2b00      	cmp	r3, #0
 8003b04:	d01b      	beq.n	8003b3e <HAL_RCC_OscConfig+0x4da>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8003b06:	4b62      	ldr	r3, [pc, #392]	; (8003c90 <HAL_RCC_OscConfig+0x62c>)
 8003b08:	681a      	ldr	r2, [r3, #0]
 8003b0a:	4b61      	ldr	r3, [pc, #388]	; (8003c90 <HAL_RCC_OscConfig+0x62c>)
 8003b0c:	2180      	movs	r1, #128	; 0x80
 8003b0e:	03c9      	lsls	r1, r1, #15
 8003b10:	430a      	orrs	r2, r1
 8003b12:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003b14:	f7ff fa5a 	bl	8002fcc <HAL_GetTick>
 8003b18:	0003      	movs	r3, r0
 8003b1a:	613b      	str	r3, [r7, #16]

      /* Wait till HSI48 is ready */
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) == 0U)
 8003b1c:	e008      	b.n	8003b30 <HAL_RCC_OscConfig+0x4cc>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8003b1e:	f7ff fa55 	bl	8002fcc <HAL_GetTick>
 8003b22:	0002      	movs	r2, r0
 8003b24:	693b      	ldr	r3, [r7, #16]
 8003b26:	1ad3      	subs	r3, r2, r3
 8003b28:	2b02      	cmp	r3, #2
 8003b2a:	d901      	bls.n	8003b30 <HAL_RCC_OscConfig+0x4cc>
        {
          return HAL_TIMEOUT;
 8003b2c:	2303      	movs	r3, #3
 8003b2e:	e0f3      	b.n	8003d18 <HAL_RCC_OscConfig+0x6b4>
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) == 0U)
 8003b30:	4b57      	ldr	r3, [pc, #348]	; (8003c90 <HAL_RCC_OscConfig+0x62c>)
 8003b32:	681a      	ldr	r2, [r3, #0]
 8003b34:	2380      	movs	r3, #128	; 0x80
 8003b36:	041b      	lsls	r3, r3, #16
 8003b38:	4013      	ands	r3, r2
 8003b3a:	d0f0      	beq.n	8003b1e <HAL_RCC_OscConfig+0x4ba>
 8003b3c:	e019      	b.n	8003b72 <HAL_RCC_OscConfig+0x50e>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8003b3e:	4b54      	ldr	r3, [pc, #336]	; (8003c90 <HAL_RCC_OscConfig+0x62c>)
 8003b40:	681a      	ldr	r2, [r3, #0]
 8003b42:	4b53      	ldr	r3, [pc, #332]	; (8003c90 <HAL_RCC_OscConfig+0x62c>)
 8003b44:	4956      	ldr	r1, [pc, #344]	; (8003ca0 <HAL_RCC_OscConfig+0x63c>)
 8003b46:	400a      	ands	r2, r1
 8003b48:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003b4a:	f7ff fa3f 	bl	8002fcc <HAL_GetTick>
 8003b4e:	0003      	movs	r3, r0
 8003b50:	613b      	str	r3, [r7, #16]

      /* Wait till HSI48 is disabled */
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) != 0U)
 8003b52:	e008      	b.n	8003b66 <HAL_RCC_OscConfig+0x502>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8003b54:	f7ff fa3a 	bl	8002fcc <HAL_GetTick>
 8003b58:	0002      	movs	r2, r0
 8003b5a:	693b      	ldr	r3, [r7, #16]
 8003b5c:	1ad3      	subs	r3, r2, r3
 8003b5e:	2b02      	cmp	r3, #2
 8003b60:	d901      	bls.n	8003b66 <HAL_RCC_OscConfig+0x502>
        {
          return HAL_TIMEOUT;
 8003b62:	2303      	movs	r3, #3
 8003b64:	e0d8      	b.n	8003d18 <HAL_RCC_OscConfig+0x6b4>
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) != 0U)
 8003b66:	4b4a      	ldr	r3, [pc, #296]	; (8003c90 <HAL_RCC_OscConfig+0x62c>)
 8003b68:	681a      	ldr	r2, [r3, #0]
 8003b6a:	2380      	movs	r3, #128	; 0x80
 8003b6c:	041b      	lsls	r3, r3, #16
 8003b6e:	4013      	ands	r3, r2
 8003b70:	d1f0      	bne.n	8003b54 <HAL_RCC_OscConfig+0x4f0>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8003b72:	687b      	ldr	r3, [r7, #4]
 8003b74:	6a1b      	ldr	r3, [r3, #32]
 8003b76:	2b00      	cmp	r3, #0
 8003b78:	d100      	bne.n	8003b7c <HAL_RCC_OscConfig+0x518>
 8003b7a:	e0cc      	b.n	8003d16 <HAL_RCC_OscConfig+0x6b2>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8003b7c:	4b44      	ldr	r3, [pc, #272]	; (8003c90 <HAL_RCC_OscConfig+0x62c>)
 8003b7e:	689b      	ldr	r3, [r3, #8]
 8003b80:	2238      	movs	r2, #56	; 0x38
 8003b82:	4013      	ands	r3, r2
 8003b84:	2b10      	cmp	r3, #16
 8003b86:	d100      	bne.n	8003b8a <HAL_RCC_OscConfig+0x526>
 8003b88:	e07b      	b.n	8003c82 <HAL_RCC_OscConfig+0x61e>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8003b8a:	687b      	ldr	r3, [r7, #4]
 8003b8c:	6a1b      	ldr	r3, [r3, #32]
 8003b8e:	2b02      	cmp	r3, #2
 8003b90:	d156      	bne.n	8003c40 <HAL_RCC_OscConfig+0x5dc>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
#endif /* RCC_PLLQ_SUPPORT */
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003b92:	4b3f      	ldr	r3, [pc, #252]	; (8003c90 <HAL_RCC_OscConfig+0x62c>)
 8003b94:	681a      	ldr	r2, [r3, #0]
 8003b96:	4b3e      	ldr	r3, [pc, #248]	; (8003c90 <HAL_RCC_OscConfig+0x62c>)
 8003b98:	4942      	ldr	r1, [pc, #264]	; (8003ca4 <HAL_RCC_OscConfig+0x640>)
 8003b9a:	400a      	ands	r2, r1
 8003b9c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003b9e:	f7ff fa15 	bl	8002fcc <HAL_GetTick>
 8003ba2:	0003      	movs	r3, r0
 8003ba4:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003ba6:	e008      	b.n	8003bba <HAL_RCC_OscConfig+0x556>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003ba8:	f7ff fa10 	bl	8002fcc <HAL_GetTick>
 8003bac:	0002      	movs	r2, r0
 8003bae:	693b      	ldr	r3, [r7, #16]
 8003bb0:	1ad3      	subs	r3, r2, r3
 8003bb2:	2b02      	cmp	r3, #2
 8003bb4:	d901      	bls.n	8003bba <HAL_RCC_OscConfig+0x556>
          {
            return HAL_TIMEOUT;
 8003bb6:	2303      	movs	r3, #3
 8003bb8:	e0ae      	b.n	8003d18 <HAL_RCC_OscConfig+0x6b4>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003bba:	4b35      	ldr	r3, [pc, #212]	; (8003c90 <HAL_RCC_OscConfig+0x62c>)
 8003bbc:	681a      	ldr	r2, [r3, #0]
 8003bbe:	2380      	movs	r3, #128	; 0x80
 8003bc0:	049b      	lsls	r3, r3, #18
 8003bc2:	4013      	ands	r3, r2
 8003bc4:	d1f0      	bne.n	8003ba8 <HAL_RCC_OscConfig+0x544>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLQ_SUPPORT)
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003bc6:	4b32      	ldr	r3, [pc, #200]	; (8003c90 <HAL_RCC_OscConfig+0x62c>)
 8003bc8:	68db      	ldr	r3, [r3, #12]
 8003bca:	4a37      	ldr	r2, [pc, #220]	; (8003ca8 <HAL_RCC_OscConfig+0x644>)
 8003bcc:	4013      	ands	r3, r2
 8003bce:	0019      	movs	r1, r3
 8003bd0:	687b      	ldr	r3, [r7, #4]
 8003bd2:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8003bd4:	687b      	ldr	r3, [r7, #4]
 8003bd6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003bd8:	431a      	orrs	r2, r3
 8003bda:	687b      	ldr	r3, [r7, #4]
 8003bdc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003bde:	021b      	lsls	r3, r3, #8
 8003be0:	431a      	orrs	r2, r3
 8003be2:	687b      	ldr	r3, [r7, #4]
 8003be4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003be6:	431a      	orrs	r2, r3
 8003be8:	687b      	ldr	r3, [r7, #4]
 8003bea:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003bec:	431a      	orrs	r2, r3
 8003bee:	687b      	ldr	r3, [r7, #4]
 8003bf0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003bf2:	431a      	orrs	r2, r3
 8003bf4:	4b26      	ldr	r3, [pc, #152]	; (8003c90 <HAL_RCC_OscConfig+0x62c>)
 8003bf6:	430a      	orrs	r2, r1
 8003bf8:	60da      	str	r2, [r3, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLR);
#endif /* RCC_PLLQ_SUPPORT */

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003bfa:	4b25      	ldr	r3, [pc, #148]	; (8003c90 <HAL_RCC_OscConfig+0x62c>)
 8003bfc:	681a      	ldr	r2, [r3, #0]
 8003bfe:	4b24      	ldr	r3, [pc, #144]	; (8003c90 <HAL_RCC_OscConfig+0x62c>)
 8003c00:	2180      	movs	r1, #128	; 0x80
 8003c02:	0449      	lsls	r1, r1, #17
 8003c04:	430a      	orrs	r2, r1
 8003c06:	601a      	str	r2, [r3, #0]

        /* Enable PLLR Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLRCLK);
 8003c08:	4b21      	ldr	r3, [pc, #132]	; (8003c90 <HAL_RCC_OscConfig+0x62c>)
 8003c0a:	68da      	ldr	r2, [r3, #12]
 8003c0c:	4b20      	ldr	r3, [pc, #128]	; (8003c90 <HAL_RCC_OscConfig+0x62c>)
 8003c0e:	2180      	movs	r1, #128	; 0x80
 8003c10:	0549      	lsls	r1, r1, #21
 8003c12:	430a      	orrs	r2, r1
 8003c14:	60da      	str	r2, [r3, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003c16:	f7ff f9d9 	bl	8002fcc <HAL_GetTick>
 8003c1a:	0003      	movs	r3, r0
 8003c1c:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003c1e:	e008      	b.n	8003c32 <HAL_RCC_OscConfig+0x5ce>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003c20:	f7ff f9d4 	bl	8002fcc <HAL_GetTick>
 8003c24:	0002      	movs	r2, r0
 8003c26:	693b      	ldr	r3, [r7, #16]
 8003c28:	1ad3      	subs	r3, r2, r3
 8003c2a:	2b02      	cmp	r3, #2
 8003c2c:	d901      	bls.n	8003c32 <HAL_RCC_OscConfig+0x5ce>
          {
            return HAL_TIMEOUT;
 8003c2e:	2303      	movs	r3, #3
 8003c30:	e072      	b.n	8003d18 <HAL_RCC_OscConfig+0x6b4>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003c32:	4b17      	ldr	r3, [pc, #92]	; (8003c90 <HAL_RCC_OscConfig+0x62c>)
 8003c34:	681a      	ldr	r2, [r3, #0]
 8003c36:	2380      	movs	r3, #128	; 0x80
 8003c38:	049b      	lsls	r3, r3, #18
 8003c3a:	4013      	ands	r3, r2
 8003c3c:	d0f0      	beq.n	8003c20 <HAL_RCC_OscConfig+0x5bc>
 8003c3e:	e06a      	b.n	8003d16 <HAL_RCC_OscConfig+0x6b2>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003c40:	4b13      	ldr	r3, [pc, #76]	; (8003c90 <HAL_RCC_OscConfig+0x62c>)
 8003c42:	681a      	ldr	r2, [r3, #0]
 8003c44:	4b12      	ldr	r3, [pc, #72]	; (8003c90 <HAL_RCC_OscConfig+0x62c>)
 8003c46:	4917      	ldr	r1, [pc, #92]	; (8003ca4 <HAL_RCC_OscConfig+0x640>)
 8003c48:	400a      	ands	r2, r1
 8003c4a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003c4c:	f7ff f9be 	bl	8002fcc <HAL_GetTick>
 8003c50:	0003      	movs	r3, r0
 8003c52:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003c54:	e008      	b.n	8003c68 <HAL_RCC_OscConfig+0x604>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003c56:	f7ff f9b9 	bl	8002fcc <HAL_GetTick>
 8003c5a:	0002      	movs	r2, r0
 8003c5c:	693b      	ldr	r3, [r7, #16]
 8003c5e:	1ad3      	subs	r3, r2, r3
 8003c60:	2b02      	cmp	r3, #2
 8003c62:	d901      	bls.n	8003c68 <HAL_RCC_OscConfig+0x604>
          {
            return HAL_TIMEOUT;
 8003c64:	2303      	movs	r3, #3
 8003c66:	e057      	b.n	8003d18 <HAL_RCC_OscConfig+0x6b4>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003c68:	4b09      	ldr	r3, [pc, #36]	; (8003c90 <HAL_RCC_OscConfig+0x62c>)
 8003c6a:	681a      	ldr	r2, [r3, #0]
 8003c6c:	2380      	movs	r3, #128	; 0x80
 8003c6e:	049b      	lsls	r3, r3, #18
 8003c70:	4013      	ands	r3, r2
 8003c72:	d1f0      	bne.n	8003c56 <HAL_RCC_OscConfig+0x5f2>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLQ_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLPEN | RCC_PLLCFGR_PLLQEN | RCC_PLLCFGR_PLLREN);
 8003c74:	4b06      	ldr	r3, [pc, #24]	; (8003c90 <HAL_RCC_OscConfig+0x62c>)
 8003c76:	68da      	ldr	r2, [r3, #12]
 8003c78:	4b05      	ldr	r3, [pc, #20]	; (8003c90 <HAL_RCC_OscConfig+0x62c>)
 8003c7a:	490c      	ldr	r1, [pc, #48]	; (8003cac <HAL_RCC_OscConfig+0x648>)
 8003c7c:	400a      	ands	r2, r1
 8003c7e:	60da      	str	r2, [r3, #12]
 8003c80:	e049      	b.n	8003d16 <HAL_RCC_OscConfig+0x6b2>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003c82:	687b      	ldr	r3, [r7, #4]
 8003c84:	6a1b      	ldr	r3, [r3, #32]
 8003c86:	2b01      	cmp	r3, #1
 8003c88:	d112      	bne.n	8003cb0 <HAL_RCC_OscConfig+0x64c>
      {
        return HAL_ERROR;
 8003c8a:	2301      	movs	r3, #1
 8003c8c:	e044      	b.n	8003d18 <HAL_RCC_OscConfig+0x6b4>
 8003c8e:	46c0      	nop			; (mov r8, r8)
 8003c90:	40021000 	.word	0x40021000
 8003c94:	40007000 	.word	0x40007000
 8003c98:	00001388 	.word	0x00001388
 8003c9c:	efffffff 	.word	0xefffffff
 8003ca0:	ffbfffff 	.word	0xffbfffff
 8003ca4:	feffffff 	.word	0xfeffffff
 8003ca8:	11c1808c 	.word	0x11c1808c
 8003cac:	eefefffc 	.word	0xeefefffc
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        temp_pllckcfg = RCC->PLLCFGR;
 8003cb0:	4b1b      	ldr	r3, [pc, #108]	; (8003d20 <HAL_RCC_OscConfig+0x6bc>)
 8003cb2:	68db      	ldr	r3, [r3, #12]
 8003cb4:	617b      	str	r3, [r7, #20]
        if ((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003cb6:	697b      	ldr	r3, [r7, #20]
 8003cb8:	2203      	movs	r2, #3
 8003cba:	401a      	ands	r2, r3
 8003cbc:	687b      	ldr	r3, [r7, #4]
 8003cbe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003cc0:	429a      	cmp	r2, r3
 8003cc2:	d126      	bne.n	8003d12 <HAL_RCC_OscConfig+0x6ae>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8003cc4:	697b      	ldr	r3, [r7, #20]
 8003cc6:	2270      	movs	r2, #112	; 0x70
 8003cc8:	401a      	ands	r2, r3
 8003cca:	687b      	ldr	r3, [r7, #4]
 8003ccc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
        if ((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003cce:	429a      	cmp	r2, r3
 8003cd0:	d11f      	bne.n	8003d12 <HAL_RCC_OscConfig+0x6ae>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8003cd2:	697a      	ldr	r2, [r7, #20]
 8003cd4:	23fe      	movs	r3, #254	; 0xfe
 8003cd6:	01db      	lsls	r3, r3, #7
 8003cd8:	401a      	ands	r2, r3
 8003cda:	687b      	ldr	r3, [r7, #4]
 8003cdc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003cde:	021b      	lsls	r3, r3, #8
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8003ce0:	429a      	cmp	r2, r3
 8003ce2:	d116      	bne.n	8003d12 <HAL_RCC_OscConfig+0x6ae>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8003ce4:	697a      	ldr	r2, [r7, #20]
 8003ce6:	23f8      	movs	r3, #248	; 0xf8
 8003ce8:	039b      	lsls	r3, r3, #14
 8003cea:	401a      	ands	r2, r3
 8003cec:	687b      	ldr	r3, [r7, #4]
 8003cee:	6b1b      	ldr	r3, [r3, #48]	; 0x30
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8003cf0:	429a      	cmp	r2, r3
 8003cf2:	d10e      	bne.n	8003d12 <HAL_RCC_OscConfig+0x6ae>
#if defined (RCC_PLLQ_SUPPORT)
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
 8003cf4:	697a      	ldr	r2, [r7, #20]
 8003cf6:	23e0      	movs	r3, #224	; 0xe0
 8003cf8:	051b      	lsls	r3, r3, #20
 8003cfa:	401a      	ands	r2, r3
 8003cfc:	687b      	ldr	r3, [r7, #4]
 8003cfe:	6b5b      	ldr	r3, [r3, #52]	; 0x34
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8003d00:	429a      	cmp	r2, r3
 8003d02:	d106      	bne.n	8003d12 <HAL_RCC_OscConfig+0x6ae>
#endif /* RCC_PLLQ_SUPPORT */
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != RCC_OscInitStruct->PLL.PLLR))
 8003d04:	697b      	ldr	r3, [r7, #20]
 8003d06:	0f5b      	lsrs	r3, r3, #29
 8003d08:	075a      	lsls	r2, r3, #29
 8003d0a:	687b      	ldr	r3, [r7, #4]
 8003d0c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
 8003d0e:	429a      	cmp	r2, r3
 8003d10:	d001      	beq.n	8003d16 <HAL_RCC_OscConfig+0x6b2>
        {
          return HAL_ERROR;
 8003d12:	2301      	movs	r3, #1
 8003d14:	e000      	b.n	8003d18 <HAL_RCC_OscConfig+0x6b4>
        }
      }
    }
  }
  return HAL_OK;
 8003d16:	2300      	movs	r3, #0
}
 8003d18:	0018      	movs	r0, r3
 8003d1a:	46bd      	mov	sp, r7
 8003d1c:	b008      	add	sp, #32
 8003d1e:	bd80      	pop	{r7, pc}
 8003d20:	40021000 	.word	0x40021000

08003d24 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003d24:	b580      	push	{r7, lr}
 8003d26:	b084      	sub	sp, #16
 8003d28:	af00      	add	r7, sp, #0
 8003d2a:	6078      	str	r0, [r7, #4]
 8003d2c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8003d2e:	687b      	ldr	r3, [r7, #4]
 8003d30:	2b00      	cmp	r3, #0
 8003d32:	d101      	bne.n	8003d38 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003d34:	2301      	movs	r3, #1
 8003d36:	e0e9      	b.n	8003f0c <HAL_RCC_ClockConfig+0x1e8>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the FLASH clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8003d38:	4b76      	ldr	r3, [pc, #472]	; (8003f14 <HAL_RCC_ClockConfig+0x1f0>)
 8003d3a:	681b      	ldr	r3, [r3, #0]
 8003d3c:	2207      	movs	r2, #7
 8003d3e:	4013      	ands	r3, r2
 8003d40:	683a      	ldr	r2, [r7, #0]
 8003d42:	429a      	cmp	r2, r3
 8003d44:	d91e      	bls.n	8003d84 <HAL_RCC_ClockConfig+0x60>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003d46:	4b73      	ldr	r3, [pc, #460]	; (8003f14 <HAL_RCC_ClockConfig+0x1f0>)
 8003d48:	681b      	ldr	r3, [r3, #0]
 8003d4a:	2207      	movs	r2, #7
 8003d4c:	4393      	bics	r3, r2
 8003d4e:	0019      	movs	r1, r3
 8003d50:	4b70      	ldr	r3, [pc, #448]	; (8003f14 <HAL_RCC_ClockConfig+0x1f0>)
 8003d52:	683a      	ldr	r2, [r7, #0]
 8003d54:	430a      	orrs	r2, r1
 8003d56:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8003d58:	f7ff f938 	bl	8002fcc <HAL_GetTick>
 8003d5c:	0003      	movs	r3, r0
 8003d5e:	60fb      	str	r3, [r7, #12]

    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8003d60:	e009      	b.n	8003d76 <HAL_RCC_ClockConfig+0x52>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003d62:	f7ff f933 	bl	8002fcc <HAL_GetTick>
 8003d66:	0002      	movs	r2, r0
 8003d68:	68fb      	ldr	r3, [r7, #12]
 8003d6a:	1ad3      	subs	r3, r2, r3
 8003d6c:	4a6a      	ldr	r2, [pc, #424]	; (8003f18 <HAL_RCC_ClockConfig+0x1f4>)
 8003d6e:	4293      	cmp	r3, r2
 8003d70:	d901      	bls.n	8003d76 <HAL_RCC_ClockConfig+0x52>
      {
        return HAL_TIMEOUT;
 8003d72:	2303      	movs	r3, #3
 8003d74:	e0ca      	b.n	8003f0c <HAL_RCC_ClockConfig+0x1e8>
    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8003d76:	4b67      	ldr	r3, [pc, #412]	; (8003f14 <HAL_RCC_ClockConfig+0x1f0>)
 8003d78:	681b      	ldr	r3, [r3, #0]
 8003d7a:	2207      	movs	r2, #7
 8003d7c:	4013      	ands	r3, r2
 8003d7e:	683a      	ldr	r2, [r7, #0]
 8003d80:	429a      	cmp	r2, r3
 8003d82:	d1ee      	bne.n	8003d62 <HAL_RCC_ClockConfig+0x3e>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003d84:	687b      	ldr	r3, [r7, #4]
 8003d86:	681b      	ldr	r3, [r3, #0]
 8003d88:	2202      	movs	r2, #2
 8003d8a:	4013      	ands	r3, r2
 8003d8c:	d015      	beq.n	8003dba <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003d8e:	687b      	ldr	r3, [r7, #4]
 8003d90:	681b      	ldr	r3, [r3, #0]
 8003d92:	2204      	movs	r2, #4
 8003d94:	4013      	ands	r3, r2
 8003d96:	d006      	beq.n	8003da6 <HAL_RCC_ClockConfig+0x82>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_HCLK_DIV16);
 8003d98:	4b60      	ldr	r3, [pc, #384]	; (8003f1c <HAL_RCC_ClockConfig+0x1f8>)
 8003d9a:	689a      	ldr	r2, [r3, #8]
 8003d9c:	4b5f      	ldr	r3, [pc, #380]	; (8003f1c <HAL_RCC_ClockConfig+0x1f8>)
 8003d9e:	21e0      	movs	r1, #224	; 0xe0
 8003da0:	01c9      	lsls	r1, r1, #7
 8003da2:	430a      	orrs	r2, r1
 8003da4:	609a      	str	r2, [r3, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003da6:	4b5d      	ldr	r3, [pc, #372]	; (8003f1c <HAL_RCC_ClockConfig+0x1f8>)
 8003da8:	689b      	ldr	r3, [r3, #8]
 8003daa:	4a5d      	ldr	r2, [pc, #372]	; (8003f20 <HAL_RCC_ClockConfig+0x1fc>)
 8003dac:	4013      	ands	r3, r2
 8003dae:	0019      	movs	r1, r3
 8003db0:	687b      	ldr	r3, [r7, #4]
 8003db2:	689a      	ldr	r2, [r3, #8]
 8003db4:	4b59      	ldr	r3, [pc, #356]	; (8003f1c <HAL_RCC_ClockConfig+0x1f8>)
 8003db6:	430a      	orrs	r2, r1
 8003db8:	609a      	str	r2, [r3, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003dba:	687b      	ldr	r3, [r7, #4]
 8003dbc:	681b      	ldr	r3, [r3, #0]
 8003dbe:	2201      	movs	r2, #1
 8003dc0:	4013      	ands	r3, r2
 8003dc2:	d057      	beq.n	8003e74 <HAL_RCC_ClockConfig+0x150>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003dc4:	687b      	ldr	r3, [r7, #4]
 8003dc6:	685b      	ldr	r3, [r3, #4]
 8003dc8:	2b01      	cmp	r3, #1
 8003dca:	d107      	bne.n	8003ddc <HAL_RCC_ClockConfig+0xb8>
    {
      /* Check the HSE ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003dcc:	4b53      	ldr	r3, [pc, #332]	; (8003f1c <HAL_RCC_ClockConfig+0x1f8>)
 8003dce:	681a      	ldr	r2, [r3, #0]
 8003dd0:	2380      	movs	r3, #128	; 0x80
 8003dd2:	029b      	lsls	r3, r3, #10
 8003dd4:	4013      	ands	r3, r2
 8003dd6:	d12b      	bne.n	8003e30 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8003dd8:	2301      	movs	r3, #1
 8003dda:	e097      	b.n	8003f0c <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003ddc:	687b      	ldr	r3, [r7, #4]
 8003dde:	685b      	ldr	r3, [r3, #4]
 8003de0:	2b02      	cmp	r3, #2
 8003de2:	d107      	bne.n	8003df4 <HAL_RCC_ClockConfig+0xd0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003de4:	4b4d      	ldr	r3, [pc, #308]	; (8003f1c <HAL_RCC_ClockConfig+0x1f8>)
 8003de6:	681a      	ldr	r2, [r3, #0]
 8003de8:	2380      	movs	r3, #128	; 0x80
 8003dea:	049b      	lsls	r3, r3, #18
 8003dec:	4013      	ands	r3, r2
 8003dee:	d11f      	bne.n	8003e30 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8003df0:	2301      	movs	r3, #1
 8003df2:	e08b      	b.n	8003f0c <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* HSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 8003df4:	687b      	ldr	r3, [r7, #4]
 8003df6:	685b      	ldr	r3, [r3, #4]
 8003df8:	2b00      	cmp	r3, #0
 8003dfa:	d107      	bne.n	8003e0c <HAL_RCC_ClockConfig+0xe8>
    {
      /* Check the HSI ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003dfc:	4b47      	ldr	r3, [pc, #284]	; (8003f1c <HAL_RCC_ClockConfig+0x1f8>)
 8003dfe:	681a      	ldr	r2, [r3, #0]
 8003e00:	2380      	movs	r3, #128	; 0x80
 8003e02:	00db      	lsls	r3, r3, #3
 8003e04:	4013      	ands	r3, r2
 8003e06:	d113      	bne.n	8003e30 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8003e08:	2301      	movs	r3, #1
 8003e0a:	e07f      	b.n	8003f0c <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* LSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_LSI)
 8003e0c:	687b      	ldr	r3, [r7, #4]
 8003e0e:	685b      	ldr	r3, [r3, #4]
 8003e10:	2b03      	cmp	r3, #3
 8003e12:	d106      	bne.n	8003e22 <HAL_RCC_ClockConfig+0xfe>
    {
      /* Check the LSI ready flag */
      if (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8003e14:	4b41      	ldr	r3, [pc, #260]	; (8003f1c <HAL_RCC_ClockConfig+0x1f8>)
 8003e16:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003e18:	2202      	movs	r2, #2
 8003e1a:	4013      	ands	r3, r2
 8003e1c:	d108      	bne.n	8003e30 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8003e1e:	2301      	movs	r3, #1
 8003e20:	e074      	b.n	8003f0c <HAL_RCC_ClockConfig+0x1e8>
    }
    /* LSE is selected as System Clock Source */
    else
    {
      /* Check the LSE ready flag */
      if (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003e22:	4b3e      	ldr	r3, [pc, #248]	; (8003f1c <HAL_RCC_ClockConfig+0x1f8>)
 8003e24:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003e26:	2202      	movs	r2, #2
 8003e28:	4013      	ands	r3, r2
 8003e2a:	d101      	bne.n	8003e30 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8003e2c:	2301      	movs	r3, #1
 8003e2e:	e06d      	b.n	8003f0c <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8003e30:	4b3a      	ldr	r3, [pc, #232]	; (8003f1c <HAL_RCC_ClockConfig+0x1f8>)
 8003e32:	689b      	ldr	r3, [r3, #8]
 8003e34:	2207      	movs	r2, #7
 8003e36:	4393      	bics	r3, r2
 8003e38:	0019      	movs	r1, r3
 8003e3a:	687b      	ldr	r3, [r7, #4]
 8003e3c:	685a      	ldr	r2, [r3, #4]
 8003e3e:	4b37      	ldr	r3, [pc, #220]	; (8003f1c <HAL_RCC_ClockConfig+0x1f8>)
 8003e40:	430a      	orrs	r2, r1
 8003e42:	609a      	str	r2, [r3, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003e44:	f7ff f8c2 	bl	8002fcc <HAL_GetTick>
 8003e48:	0003      	movs	r3, r0
 8003e4a:	60fb      	str	r3, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003e4c:	e009      	b.n	8003e62 <HAL_RCC_ClockConfig+0x13e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003e4e:	f7ff f8bd 	bl	8002fcc <HAL_GetTick>
 8003e52:	0002      	movs	r2, r0
 8003e54:	68fb      	ldr	r3, [r7, #12]
 8003e56:	1ad3      	subs	r3, r2, r3
 8003e58:	4a2f      	ldr	r2, [pc, #188]	; (8003f18 <HAL_RCC_ClockConfig+0x1f4>)
 8003e5a:	4293      	cmp	r3, r2
 8003e5c:	d901      	bls.n	8003e62 <HAL_RCC_ClockConfig+0x13e>
      {
        return HAL_TIMEOUT;
 8003e5e:	2303      	movs	r3, #3
 8003e60:	e054      	b.n	8003f0c <HAL_RCC_ClockConfig+0x1e8>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003e62:	4b2e      	ldr	r3, [pc, #184]	; (8003f1c <HAL_RCC_ClockConfig+0x1f8>)
 8003e64:	689b      	ldr	r3, [r3, #8]
 8003e66:	2238      	movs	r2, #56	; 0x38
 8003e68:	401a      	ands	r2, r3
 8003e6a:	687b      	ldr	r3, [r7, #4]
 8003e6c:	685b      	ldr	r3, [r3, #4]
 8003e6e:	00db      	lsls	r3, r3, #3
 8003e70:	429a      	cmp	r2, r3
 8003e72:	d1ec      	bne.n	8003e4e <HAL_RCC_ClockConfig+0x12a>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8003e74:	4b27      	ldr	r3, [pc, #156]	; (8003f14 <HAL_RCC_ClockConfig+0x1f0>)
 8003e76:	681b      	ldr	r3, [r3, #0]
 8003e78:	2207      	movs	r2, #7
 8003e7a:	4013      	ands	r3, r2
 8003e7c:	683a      	ldr	r2, [r7, #0]
 8003e7e:	429a      	cmp	r2, r3
 8003e80:	d21e      	bcs.n	8003ec0 <HAL_RCC_ClockConfig+0x19c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003e82:	4b24      	ldr	r3, [pc, #144]	; (8003f14 <HAL_RCC_ClockConfig+0x1f0>)
 8003e84:	681b      	ldr	r3, [r3, #0]
 8003e86:	2207      	movs	r2, #7
 8003e88:	4393      	bics	r3, r2
 8003e8a:	0019      	movs	r1, r3
 8003e8c:	4b21      	ldr	r3, [pc, #132]	; (8003f14 <HAL_RCC_ClockConfig+0x1f0>)
 8003e8e:	683a      	ldr	r2, [r7, #0]
 8003e90:	430a      	orrs	r2, r1
 8003e92:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8003e94:	f7ff f89a 	bl	8002fcc <HAL_GetTick>
 8003e98:	0003      	movs	r3, r0
 8003e9a:	60fb      	str	r3, [r7, #12]

    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8003e9c:	e009      	b.n	8003eb2 <HAL_RCC_ClockConfig+0x18e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003e9e:	f7ff f895 	bl	8002fcc <HAL_GetTick>
 8003ea2:	0002      	movs	r2, r0
 8003ea4:	68fb      	ldr	r3, [r7, #12]
 8003ea6:	1ad3      	subs	r3, r2, r3
 8003ea8:	4a1b      	ldr	r2, [pc, #108]	; (8003f18 <HAL_RCC_ClockConfig+0x1f4>)
 8003eaa:	4293      	cmp	r3, r2
 8003eac:	d901      	bls.n	8003eb2 <HAL_RCC_ClockConfig+0x18e>
      {
        return HAL_TIMEOUT;
 8003eae:	2303      	movs	r3, #3
 8003eb0:	e02c      	b.n	8003f0c <HAL_RCC_ClockConfig+0x1e8>
    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8003eb2:	4b18      	ldr	r3, [pc, #96]	; (8003f14 <HAL_RCC_ClockConfig+0x1f0>)
 8003eb4:	681b      	ldr	r3, [r3, #0]
 8003eb6:	2207      	movs	r2, #7
 8003eb8:	4013      	ands	r3, r2
 8003eba:	683a      	ldr	r2, [r7, #0]
 8003ebc:	429a      	cmp	r2, r3
 8003ebe:	d1ee      	bne.n	8003e9e <HAL_RCC_ClockConfig+0x17a>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003ec0:	687b      	ldr	r3, [r7, #4]
 8003ec2:	681b      	ldr	r3, [r3, #0]
 8003ec4:	2204      	movs	r2, #4
 8003ec6:	4013      	ands	r3, r2
 8003ec8:	d009      	beq.n	8003ede <HAL_RCC_ClockConfig+0x1ba>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 8003eca:	4b14      	ldr	r3, [pc, #80]	; (8003f1c <HAL_RCC_ClockConfig+0x1f8>)
 8003ecc:	689b      	ldr	r3, [r3, #8]
 8003ece:	4a15      	ldr	r2, [pc, #84]	; (8003f24 <HAL_RCC_ClockConfig+0x200>)
 8003ed0:	4013      	ands	r3, r2
 8003ed2:	0019      	movs	r1, r3
 8003ed4:	687b      	ldr	r3, [r7, #4]
 8003ed6:	68da      	ldr	r2, [r3, #12]
 8003ed8:	4b10      	ldr	r3, [pc, #64]	; (8003f1c <HAL_RCC_ClockConfig+0x1f8>)
 8003eda:	430a      	orrs	r2, r1
 8003edc:	609a      	str	r2, [r3, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = (HAL_RCC_GetSysClockFreq() >> ((AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos]) & 0x1FU));
 8003ede:	f000 f829 	bl	8003f34 <HAL_RCC_GetSysClockFreq>
 8003ee2:	0001      	movs	r1, r0
 8003ee4:	4b0d      	ldr	r3, [pc, #52]	; (8003f1c <HAL_RCC_ClockConfig+0x1f8>)
 8003ee6:	689b      	ldr	r3, [r3, #8]
 8003ee8:	0a1b      	lsrs	r3, r3, #8
 8003eea:	220f      	movs	r2, #15
 8003eec:	401a      	ands	r2, r3
 8003eee:	4b0e      	ldr	r3, [pc, #56]	; (8003f28 <HAL_RCC_ClockConfig+0x204>)
 8003ef0:	0092      	lsls	r2, r2, #2
 8003ef2:	58d3      	ldr	r3, [r2, r3]
 8003ef4:	221f      	movs	r2, #31
 8003ef6:	4013      	ands	r3, r2
 8003ef8:	000a      	movs	r2, r1
 8003efa:	40da      	lsrs	r2, r3
 8003efc:	4b0b      	ldr	r3, [pc, #44]	; (8003f2c <HAL_RCC_ClockConfig+0x208>)
 8003efe:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 8003f00:	4b0b      	ldr	r3, [pc, #44]	; (8003f30 <HAL_RCC_ClockConfig+0x20c>)
 8003f02:	681b      	ldr	r3, [r3, #0]
 8003f04:	0018      	movs	r0, r3
 8003f06:	f7ff f805 	bl	8002f14 <HAL_InitTick>
 8003f0a:	0003      	movs	r3, r0
}
 8003f0c:	0018      	movs	r0, r3
 8003f0e:	46bd      	mov	sp, r7
 8003f10:	b004      	add	sp, #16
 8003f12:	bd80      	pop	{r7, pc}
 8003f14:	40022000 	.word	0x40022000
 8003f18:	00001388 	.word	0x00001388
 8003f1c:	40021000 	.word	0x40021000
 8003f20:	fffff0ff 	.word	0xfffff0ff
 8003f24:	ffff8fff 	.word	0xffff8fff
 8003f28:	0800db44 	.word	0x0800db44
 8003f2c:	20000004 	.word	0x20000004
 8003f30:	20000008 	.word	0x20000008

08003f34 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003f34:	b580      	push	{r7, lr}
 8003f36:	b086      	sub	sp, #24
 8003f38:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm, hsidiv;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8003f3a:	4b3c      	ldr	r3, [pc, #240]	; (800402c <HAL_RCC_GetSysClockFreq+0xf8>)
 8003f3c:	689b      	ldr	r3, [r3, #8]
 8003f3e:	2238      	movs	r2, #56	; 0x38
 8003f40:	4013      	ands	r3, r2
 8003f42:	d10f      	bne.n	8003f64 <HAL_RCC_GetSysClockFreq+0x30>
  {
    /* HSISYS can be derived for HSI16 */
    hsidiv = (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos));
 8003f44:	4b39      	ldr	r3, [pc, #228]	; (800402c <HAL_RCC_GetSysClockFreq+0xf8>)
 8003f46:	681b      	ldr	r3, [r3, #0]
 8003f48:	0adb      	lsrs	r3, r3, #11
 8003f4a:	2207      	movs	r2, #7
 8003f4c:	4013      	ands	r3, r2
 8003f4e:	2201      	movs	r2, #1
 8003f50:	409a      	lsls	r2, r3
 8003f52:	0013      	movs	r3, r2
 8003f54:	603b      	str	r3, [r7, #0]

    /* HSI used as system clock source */
    sysclockfreq = (HSI_VALUE / hsidiv);
 8003f56:	6839      	ldr	r1, [r7, #0]
 8003f58:	4835      	ldr	r0, [pc, #212]	; (8004030 <HAL_RCC_GetSysClockFreq+0xfc>)
 8003f5a:	f7fc f8ef 	bl	800013c <__udivsi3>
 8003f5e:	0003      	movs	r3, r0
 8003f60:	613b      	str	r3, [r7, #16]
 8003f62:	e05d      	b.n	8004020 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8003f64:	4b31      	ldr	r3, [pc, #196]	; (800402c <HAL_RCC_GetSysClockFreq+0xf8>)
 8003f66:	689b      	ldr	r3, [r3, #8]
 8003f68:	2238      	movs	r2, #56	; 0x38
 8003f6a:	4013      	ands	r3, r2
 8003f6c:	2b08      	cmp	r3, #8
 8003f6e:	d102      	bne.n	8003f76 <HAL_RCC_GetSysClockFreq+0x42>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8003f70:	4b30      	ldr	r3, [pc, #192]	; (8004034 <HAL_RCC_GetSysClockFreq+0x100>)
 8003f72:	613b      	str	r3, [r7, #16]
 8003f74:	e054      	b.n	8004020 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8003f76:	4b2d      	ldr	r3, [pc, #180]	; (800402c <HAL_RCC_GetSysClockFreq+0xf8>)
 8003f78:	689b      	ldr	r3, [r3, #8]
 8003f7a:	2238      	movs	r2, #56	; 0x38
 8003f7c:	4013      	ands	r3, r2
 8003f7e:	2b10      	cmp	r3, #16
 8003f80:	d138      	bne.n	8003ff4 <HAL_RCC_GetSysClockFreq+0xc0>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC);
 8003f82:	4b2a      	ldr	r3, [pc, #168]	; (800402c <HAL_RCC_GetSysClockFreq+0xf8>)
 8003f84:	68db      	ldr	r3, [r3, #12]
 8003f86:	2203      	movs	r2, #3
 8003f88:	4013      	ands	r3, r2
 8003f8a:	60fb      	str	r3, [r7, #12]
    pllm = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8003f8c:	4b27      	ldr	r3, [pc, #156]	; (800402c <HAL_RCC_GetSysClockFreq+0xf8>)
 8003f8e:	68db      	ldr	r3, [r3, #12]
 8003f90:	091b      	lsrs	r3, r3, #4
 8003f92:	2207      	movs	r2, #7
 8003f94:	4013      	ands	r3, r2
 8003f96:	3301      	adds	r3, #1
 8003f98:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8003f9a:	68fb      	ldr	r3, [r7, #12]
 8003f9c:	2b03      	cmp	r3, #3
 8003f9e:	d10d      	bne.n	8003fbc <HAL_RCC_GetSysClockFreq+0x88>
    {
      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = (HSE_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8003fa0:	68b9      	ldr	r1, [r7, #8]
 8003fa2:	4824      	ldr	r0, [pc, #144]	; (8004034 <HAL_RCC_GetSysClockFreq+0x100>)
 8003fa4:	f7fc f8ca 	bl	800013c <__udivsi3>
 8003fa8:	0003      	movs	r3, r0
 8003faa:	0019      	movs	r1, r3
 8003fac:	4b1f      	ldr	r3, [pc, #124]	; (800402c <HAL_RCC_GetSysClockFreq+0xf8>)
 8003fae:	68db      	ldr	r3, [r3, #12]
 8003fb0:	0a1b      	lsrs	r3, r3, #8
 8003fb2:	227f      	movs	r2, #127	; 0x7f
 8003fb4:	4013      	ands	r3, r2
 8003fb6:	434b      	muls	r3, r1
 8003fb8:	617b      	str	r3, [r7, #20]
        break;
 8003fba:	e00d      	b.n	8003fd8 <HAL_RCC_GetSysClockFreq+0xa4>

      case RCC_PLLSOURCE_HSI:  /* HSI16 used as PLL clock source */
      default:                 /* HSI16 used as PLL clock source */
        pllvco = (HSI_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos) ;
 8003fbc:	68b9      	ldr	r1, [r7, #8]
 8003fbe:	481c      	ldr	r0, [pc, #112]	; (8004030 <HAL_RCC_GetSysClockFreq+0xfc>)
 8003fc0:	f7fc f8bc 	bl	800013c <__udivsi3>
 8003fc4:	0003      	movs	r3, r0
 8003fc6:	0019      	movs	r1, r3
 8003fc8:	4b18      	ldr	r3, [pc, #96]	; (800402c <HAL_RCC_GetSysClockFreq+0xf8>)
 8003fca:	68db      	ldr	r3, [r3, #12]
 8003fcc:	0a1b      	lsrs	r3, r3, #8
 8003fce:	227f      	movs	r2, #127	; 0x7f
 8003fd0:	4013      	ands	r3, r2
 8003fd2:	434b      	muls	r3, r1
 8003fd4:	617b      	str	r3, [r7, #20]
        break;
 8003fd6:	46c0      	nop			; (mov r8, r8)
    }
    pllr = (((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U);
 8003fd8:	4b14      	ldr	r3, [pc, #80]	; (800402c <HAL_RCC_GetSysClockFreq+0xf8>)
 8003fda:	68db      	ldr	r3, [r3, #12]
 8003fdc:	0f5b      	lsrs	r3, r3, #29
 8003fde:	2207      	movs	r2, #7
 8003fe0:	4013      	ands	r3, r2
 8003fe2:	3301      	adds	r3, #1
 8003fe4:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco / pllr;
 8003fe6:	6879      	ldr	r1, [r7, #4]
 8003fe8:	6978      	ldr	r0, [r7, #20]
 8003fea:	f7fc f8a7 	bl	800013c <__udivsi3>
 8003fee:	0003      	movs	r3, r0
 8003ff0:	613b      	str	r3, [r7, #16]
 8003ff2:	e015      	b.n	8004020 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSE)
 8003ff4:	4b0d      	ldr	r3, [pc, #52]	; (800402c <HAL_RCC_GetSysClockFreq+0xf8>)
 8003ff6:	689b      	ldr	r3, [r3, #8]
 8003ff8:	2238      	movs	r2, #56	; 0x38
 8003ffa:	4013      	ands	r3, r2
 8003ffc:	2b20      	cmp	r3, #32
 8003ffe:	d103      	bne.n	8004008 <HAL_RCC_GetSysClockFreq+0xd4>
  {
    /* LSE used as system clock source */
    sysclockfreq = LSE_VALUE;
 8004000:	2380      	movs	r3, #128	; 0x80
 8004002:	021b      	lsls	r3, r3, #8
 8004004:	613b      	str	r3, [r7, #16]
 8004006:	e00b      	b.n	8004020 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSI)
 8004008:	4b08      	ldr	r3, [pc, #32]	; (800402c <HAL_RCC_GetSysClockFreq+0xf8>)
 800400a:	689b      	ldr	r3, [r3, #8]
 800400c:	2238      	movs	r2, #56	; 0x38
 800400e:	4013      	ands	r3, r2
 8004010:	2b18      	cmp	r3, #24
 8004012:	d103      	bne.n	800401c <HAL_RCC_GetSysClockFreq+0xe8>
  {
    /* LSI used as system clock source */
    sysclockfreq = LSI_VALUE;
 8004014:	23fa      	movs	r3, #250	; 0xfa
 8004016:	01db      	lsls	r3, r3, #7
 8004018:	613b      	str	r3, [r7, #16]
 800401a:	e001      	b.n	8004020 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else
  {
    sysclockfreq = 0U;
 800401c:	2300      	movs	r3, #0
 800401e:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 8004020:	693b      	ldr	r3, [r7, #16]
}
 8004022:	0018      	movs	r0, r3
 8004024:	46bd      	mov	sp, r7
 8004026:	b006      	add	sp, #24
 8004028:	bd80      	pop	{r7, pc}
 800402a:	46c0      	nop			; (mov r8, r8)
 800402c:	40021000 	.word	0x40021000
 8004030:	00f42400 	.word	0x00f42400
 8004034:	007a1200 	.word	0x007a1200

08004038 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004038:	b580      	push	{r7, lr}
 800403a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800403c:	4b02      	ldr	r3, [pc, #8]	; (8004048 <HAL_RCC_GetHCLKFreq+0x10>)
 800403e:	681b      	ldr	r3, [r3, #0]
}
 8004040:	0018      	movs	r0, r3
 8004042:	46bd      	mov	sp, r7
 8004044:	bd80      	pop	{r7, pc}
 8004046:	46c0      	nop			; (mov r8, r8)
 8004048:	20000004 	.word	0x20000004

0800404c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800404c:	b5b0      	push	{r4, r5, r7, lr}
 800404e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_PCLK1_FREQ(HAL_RCC_GetHCLKFreq(), LL_RCC_GetAPB1Prescaler())));
 8004050:	f7ff fff2 	bl	8004038 <HAL_RCC_GetHCLKFreq>
 8004054:	0004      	movs	r4, r0
 8004056:	f7ff faf9 	bl	800364c <LL_RCC_GetAPB1Prescaler>
 800405a:	0003      	movs	r3, r0
 800405c:	0b1a      	lsrs	r2, r3, #12
 800405e:	4b05      	ldr	r3, [pc, #20]	; (8004074 <HAL_RCC_GetPCLK1Freq+0x28>)
 8004060:	0092      	lsls	r2, r2, #2
 8004062:	58d3      	ldr	r3, [r2, r3]
 8004064:	221f      	movs	r2, #31
 8004066:	4013      	ands	r3, r2
 8004068:	40dc      	lsrs	r4, r3
 800406a:	0023      	movs	r3, r4
}
 800406c:	0018      	movs	r0, r3
 800406e:	46bd      	mov	sp, r7
 8004070:	bdb0      	pop	{r4, r5, r7, pc}
 8004072:	46c0      	nop			; (mov r8, r8)
 8004074:	0800db84 	.word	0x0800db84

08004078 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8004078:	b580      	push	{r7, lr}
 800407a:	b086      	sub	sp, #24
 800407c:	af00      	add	r7, sp, #0
 800407e:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret    = HAL_OK;   /* Intermediate status */
 8004080:	2313      	movs	r3, #19
 8004082:	18fb      	adds	r3, r7, r3
 8004084:	2200      	movs	r2, #0
 8004086:	701a      	strb	r2, [r3, #0]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8004088:	2312      	movs	r3, #18
 800408a:	18fb      	adds	r3, r7, r3
 800408c:	2200      	movs	r2, #0
 800408e:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8004090:	687b      	ldr	r3, [r7, #4]
 8004092:	681a      	ldr	r2, [r3, #0]
 8004094:	2380      	movs	r3, #128	; 0x80
 8004096:	029b      	lsls	r3, r3, #10
 8004098:	4013      	ands	r3, r2
 800409a:	d100      	bne.n	800409e <HAL_RCCEx_PeriphCLKConfig+0x26>
 800409c:	e0ad      	b.n	80041fa <HAL_RCCEx_PeriphCLKConfig+0x182>
  {
    FlagStatus       pwrclkchanged = RESET;
 800409e:	2011      	movs	r0, #17
 80040a0:	183b      	adds	r3, r7, r0
 80040a2:	2200      	movs	r2, #0
 80040a4:	701a      	strb	r2, [r3, #0]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80040a6:	4b47      	ldr	r3, [pc, #284]	; (80041c4 <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 80040a8:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80040aa:	2380      	movs	r3, #128	; 0x80
 80040ac:	055b      	lsls	r3, r3, #21
 80040ae:	4013      	ands	r3, r2
 80040b0:	d110      	bne.n	80040d4 <HAL_RCCEx_PeriphCLKConfig+0x5c>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80040b2:	4b44      	ldr	r3, [pc, #272]	; (80041c4 <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 80040b4:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80040b6:	4b43      	ldr	r3, [pc, #268]	; (80041c4 <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 80040b8:	2180      	movs	r1, #128	; 0x80
 80040ba:	0549      	lsls	r1, r1, #21
 80040bc:	430a      	orrs	r2, r1
 80040be:	63da      	str	r2, [r3, #60]	; 0x3c
 80040c0:	4b40      	ldr	r3, [pc, #256]	; (80041c4 <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 80040c2:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80040c4:	2380      	movs	r3, #128	; 0x80
 80040c6:	055b      	lsls	r3, r3, #21
 80040c8:	4013      	ands	r3, r2
 80040ca:	60bb      	str	r3, [r7, #8]
 80040cc:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80040ce:	183b      	adds	r3, r7, r0
 80040d0:	2201      	movs	r2, #1
 80040d2:	701a      	strb	r2, [r3, #0]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80040d4:	4b3c      	ldr	r3, [pc, #240]	; (80041c8 <HAL_RCCEx_PeriphCLKConfig+0x150>)
 80040d6:	681a      	ldr	r2, [r3, #0]
 80040d8:	4b3b      	ldr	r3, [pc, #236]	; (80041c8 <HAL_RCCEx_PeriphCLKConfig+0x150>)
 80040da:	2180      	movs	r1, #128	; 0x80
 80040dc:	0049      	lsls	r1, r1, #1
 80040de:	430a      	orrs	r2, r1
 80040e0:	601a      	str	r2, [r3, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80040e2:	f7fe ff73 	bl	8002fcc <HAL_GetTick>
 80040e6:	0003      	movs	r3, r0
 80040e8:	60fb      	str	r3, [r7, #12]

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80040ea:	e00b      	b.n	8004104 <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80040ec:	f7fe ff6e 	bl	8002fcc <HAL_GetTick>
 80040f0:	0002      	movs	r2, r0
 80040f2:	68fb      	ldr	r3, [r7, #12]
 80040f4:	1ad3      	subs	r3, r2, r3
 80040f6:	2b02      	cmp	r3, #2
 80040f8:	d904      	bls.n	8004104 <HAL_RCCEx_PeriphCLKConfig+0x8c>
      {
        ret = HAL_TIMEOUT;
 80040fa:	2313      	movs	r3, #19
 80040fc:	18fb      	adds	r3, r7, r3
 80040fe:	2203      	movs	r2, #3
 8004100:	701a      	strb	r2, [r3, #0]
        break;
 8004102:	e005      	b.n	8004110 <HAL_RCCEx_PeriphCLKConfig+0x98>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8004104:	4b30      	ldr	r3, [pc, #192]	; (80041c8 <HAL_RCCEx_PeriphCLKConfig+0x150>)
 8004106:	681a      	ldr	r2, [r3, #0]
 8004108:	2380      	movs	r3, #128	; 0x80
 800410a:	005b      	lsls	r3, r3, #1
 800410c:	4013      	ands	r3, r2
 800410e:	d0ed      	beq.n	80040ec <HAL_RCCEx_PeriphCLKConfig+0x74>
      }
    }

    if (ret == HAL_OK)
 8004110:	2313      	movs	r3, #19
 8004112:	18fb      	adds	r3, r7, r3
 8004114:	781b      	ldrb	r3, [r3, #0]
 8004116:	2b00      	cmp	r3, #0
 8004118:	d15e      	bne.n	80041d8 <HAL_RCCEx_PeriphCLKConfig+0x160>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 800411a:	4b2a      	ldr	r3, [pc, #168]	; (80041c4 <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 800411c:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800411e:	23c0      	movs	r3, #192	; 0xc0
 8004120:	009b      	lsls	r3, r3, #2
 8004122:	4013      	ands	r3, r2
 8004124:	617b      	str	r3, [r7, #20]

      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8004126:	697b      	ldr	r3, [r7, #20]
 8004128:	2b00      	cmp	r3, #0
 800412a:	d019      	beq.n	8004160 <HAL_RCCEx_PeriphCLKConfig+0xe8>
 800412c:	687b      	ldr	r3, [r7, #4]
 800412e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004130:	697a      	ldr	r2, [r7, #20]
 8004132:	429a      	cmp	r2, r3
 8004134:	d014      	beq.n	8004160 <HAL_RCCEx_PeriphCLKConfig+0xe8>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8004136:	4b23      	ldr	r3, [pc, #140]	; (80041c4 <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 8004138:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800413a:	4a24      	ldr	r2, [pc, #144]	; (80041cc <HAL_RCCEx_PeriphCLKConfig+0x154>)
 800413c:	4013      	ands	r3, r2
 800413e:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8004140:	4b20      	ldr	r3, [pc, #128]	; (80041c4 <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 8004142:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8004144:	4b1f      	ldr	r3, [pc, #124]	; (80041c4 <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 8004146:	2180      	movs	r1, #128	; 0x80
 8004148:	0249      	lsls	r1, r1, #9
 800414a:	430a      	orrs	r2, r1
 800414c:	65da      	str	r2, [r3, #92]	; 0x5c
        __HAL_RCC_BACKUPRESET_RELEASE();
 800414e:	4b1d      	ldr	r3, [pc, #116]	; (80041c4 <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 8004150:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8004152:	4b1c      	ldr	r3, [pc, #112]	; (80041c4 <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 8004154:	491e      	ldr	r1, [pc, #120]	; (80041d0 <HAL_RCCEx_PeriphCLKConfig+0x158>)
 8004156:	400a      	ands	r2, r1
 8004158:	65da      	str	r2, [r3, #92]	; 0x5c
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 800415a:	4b1a      	ldr	r3, [pc, #104]	; (80041c4 <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 800415c:	697a      	ldr	r2, [r7, #20]
 800415e:	65da      	str	r2, [r3, #92]	; 0x5c
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8004160:	697b      	ldr	r3, [r7, #20]
 8004162:	2201      	movs	r2, #1
 8004164:	4013      	ands	r3, r2
 8004166:	d016      	beq.n	8004196 <HAL_RCCEx_PeriphCLKConfig+0x11e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004168:	f7fe ff30 	bl	8002fcc <HAL_GetTick>
 800416c:	0003      	movs	r3, r0
 800416e:	60fb      	str	r3, [r7, #12]

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004170:	e00c      	b.n	800418c <HAL_RCCEx_PeriphCLKConfig+0x114>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004172:	f7fe ff2b 	bl	8002fcc <HAL_GetTick>
 8004176:	0002      	movs	r2, r0
 8004178:	68fb      	ldr	r3, [r7, #12]
 800417a:	1ad3      	subs	r3, r2, r3
 800417c:	4a15      	ldr	r2, [pc, #84]	; (80041d4 <HAL_RCCEx_PeriphCLKConfig+0x15c>)
 800417e:	4293      	cmp	r3, r2
 8004180:	d904      	bls.n	800418c <HAL_RCCEx_PeriphCLKConfig+0x114>
          {
            ret = HAL_TIMEOUT;
 8004182:	2313      	movs	r3, #19
 8004184:	18fb      	adds	r3, r7, r3
 8004186:	2203      	movs	r2, #3
 8004188:	701a      	strb	r2, [r3, #0]
            break;
 800418a:	e004      	b.n	8004196 <HAL_RCCEx_PeriphCLKConfig+0x11e>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800418c:	4b0d      	ldr	r3, [pc, #52]	; (80041c4 <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 800418e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004190:	2202      	movs	r2, #2
 8004192:	4013      	ands	r3, r2
 8004194:	d0ed      	beq.n	8004172 <HAL_RCCEx_PeriphCLKConfig+0xfa>
          }
        }
      }

      if (ret == HAL_OK)
 8004196:	2313      	movs	r3, #19
 8004198:	18fb      	adds	r3, r7, r3
 800419a:	781b      	ldrb	r3, [r3, #0]
 800419c:	2b00      	cmp	r3, #0
 800419e:	d10a      	bne.n	80041b6 <HAL_RCCEx_PeriphCLKConfig+0x13e>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80041a0:	4b08      	ldr	r3, [pc, #32]	; (80041c4 <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 80041a2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80041a4:	4a09      	ldr	r2, [pc, #36]	; (80041cc <HAL_RCCEx_PeriphCLKConfig+0x154>)
 80041a6:	4013      	ands	r3, r2
 80041a8:	0019      	movs	r1, r3
 80041aa:	687b      	ldr	r3, [r7, #4]
 80041ac:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80041ae:	4b05      	ldr	r3, [pc, #20]	; (80041c4 <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 80041b0:	430a      	orrs	r2, r1
 80041b2:	65da      	str	r2, [r3, #92]	; 0x5c
 80041b4:	e016      	b.n	80041e4 <HAL_RCCEx_PeriphCLKConfig+0x16c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 80041b6:	2312      	movs	r3, #18
 80041b8:	18fb      	adds	r3, r7, r3
 80041ba:	2213      	movs	r2, #19
 80041bc:	18ba      	adds	r2, r7, r2
 80041be:	7812      	ldrb	r2, [r2, #0]
 80041c0:	701a      	strb	r2, [r3, #0]
 80041c2:	e00f      	b.n	80041e4 <HAL_RCCEx_PeriphCLKConfig+0x16c>
 80041c4:	40021000 	.word	0x40021000
 80041c8:	40007000 	.word	0x40007000
 80041cc:	fffffcff 	.word	0xfffffcff
 80041d0:	fffeffff 	.word	0xfffeffff
 80041d4:	00001388 	.word	0x00001388
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 80041d8:	2312      	movs	r3, #18
 80041da:	18fb      	adds	r3, r7, r3
 80041dc:	2213      	movs	r2, #19
 80041de:	18ba      	adds	r2, r7, r2
 80041e0:	7812      	ldrb	r2, [r2, #0]
 80041e2:	701a      	strb	r2, [r3, #0]
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 80041e4:	2311      	movs	r3, #17
 80041e6:	18fb      	adds	r3, r7, r3
 80041e8:	781b      	ldrb	r3, [r3, #0]
 80041ea:	2b01      	cmp	r3, #1
 80041ec:	d105      	bne.n	80041fa <HAL_RCCEx_PeriphCLKConfig+0x182>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80041ee:	4bb6      	ldr	r3, [pc, #728]	; (80044c8 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 80041f0:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80041f2:	4bb5      	ldr	r3, [pc, #724]	; (80044c8 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 80041f4:	49b5      	ldr	r1, [pc, #724]	; (80044cc <HAL_RCCEx_PeriphCLKConfig+0x454>)
 80041f6:	400a      	ands	r2, r1
 80041f8:	63da      	str	r2, [r3, #60]	; 0x3c
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80041fa:	687b      	ldr	r3, [r7, #4]
 80041fc:	681b      	ldr	r3, [r3, #0]
 80041fe:	2201      	movs	r2, #1
 8004200:	4013      	ands	r3, r2
 8004202:	d009      	beq.n	8004218 <HAL_RCCEx_PeriphCLKConfig+0x1a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8004204:	4bb0      	ldr	r3, [pc, #704]	; (80044c8 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8004206:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004208:	2203      	movs	r2, #3
 800420a:	4393      	bics	r3, r2
 800420c:	0019      	movs	r1, r3
 800420e:	687b      	ldr	r3, [r7, #4]
 8004210:	685a      	ldr	r2, [r3, #4]
 8004212:	4bad      	ldr	r3, [pc, #692]	; (80044c8 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8004214:	430a      	orrs	r2, r1
 8004216:	655a      	str	r2, [r3, #84]	; 0x54
  }

#if defined(RCC_CCIPR_USART2SEL)
  /*-------------------------- USART2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8004218:	687b      	ldr	r3, [r7, #4]
 800421a:	681b      	ldr	r3, [r3, #0]
 800421c:	2202      	movs	r2, #2
 800421e:	4013      	ands	r3, r2
 8004220:	d009      	beq.n	8004236 <HAL_RCCEx_PeriphCLKConfig+0x1be>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8004222:	4ba9      	ldr	r3, [pc, #676]	; (80044c8 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8004224:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004226:	220c      	movs	r2, #12
 8004228:	4393      	bics	r3, r2
 800422a:	0019      	movs	r1, r3
 800422c:	687b      	ldr	r3, [r7, #4]
 800422e:	689a      	ldr	r2, [r3, #8]
 8004230:	4ba5      	ldr	r3, [pc, #660]	; (80044c8 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8004232:	430a      	orrs	r2, r1
 8004234:	655a      	str	r2, [r3, #84]	; 0x54
  }
#endif /* RCC_CCIPR_USART2SEL */

#if defined(RCC_CCIPR_USART3SEL)
  /*-------------------------- USART3 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8004236:	687b      	ldr	r3, [r7, #4]
 8004238:	681b      	ldr	r3, [r3, #0]
 800423a:	2204      	movs	r2, #4
 800423c:	4013      	ands	r3, r2
 800423e:	d009      	beq.n	8004254 <HAL_RCCEx_PeriphCLKConfig+0x1dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8004240:	4ba1      	ldr	r3, [pc, #644]	; (80044c8 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8004242:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004244:	2230      	movs	r2, #48	; 0x30
 8004246:	4393      	bics	r3, r2
 8004248:	0019      	movs	r1, r3
 800424a:	687b      	ldr	r3, [r7, #4]
 800424c:	68da      	ldr	r2, [r3, #12]
 800424e:	4b9e      	ldr	r3, [pc, #632]	; (80044c8 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8004250:	430a      	orrs	r2, r1
 8004252:	655a      	str	r2, [r3, #84]	; 0x54
  }
#endif /* RCC_CCIPR_USART3SEL */

#if defined(LPUART1)
  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8004254:	687b      	ldr	r3, [r7, #4]
 8004256:	681b      	ldr	r3, [r3, #0]
 8004258:	2210      	movs	r2, #16
 800425a:	4013      	ands	r3, r2
 800425c:	d009      	beq.n	8004272 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 800425e:	4b9a      	ldr	r3, [pc, #616]	; (80044c8 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8004260:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004262:	4a9b      	ldr	r2, [pc, #620]	; (80044d0 <HAL_RCCEx_PeriphCLKConfig+0x458>)
 8004264:	4013      	ands	r3, r2
 8004266:	0019      	movs	r1, r3
 8004268:	687b      	ldr	r3, [r7, #4]
 800426a:	691a      	ldr	r2, [r3, #16]
 800426c:	4b96      	ldr	r3, [pc, #600]	; (80044c8 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 800426e:	430a      	orrs	r2, r1
 8004270:	655a      	str	r2, [r3, #84]	; 0x54
  }
#endif /* LPUART1 */

#if defined(LPUART2)
  /*-------------------------- LPUART2 clock source configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART2) == RCC_PERIPHCLK_LPUART2)
 8004272:	687b      	ldr	r3, [r7, #4]
 8004274:	681a      	ldr	r2, [r3, #0]
 8004276:	2380      	movs	r3, #128	; 0x80
 8004278:	015b      	lsls	r3, r3, #5
 800427a:	4013      	ands	r3, r2
 800427c:	d009      	beq.n	8004292 <HAL_RCCEx_PeriphCLKConfig+0x21a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART2CLKSOURCE(PeriphClkInit->Lpuart2ClockSelection));

    /* Configure the LPUART clock source */
    __HAL_RCC_LPUART2_CONFIG(PeriphClkInit->Lpuart2ClockSelection);
 800427e:	4b92      	ldr	r3, [pc, #584]	; (80044c8 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8004280:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004282:	4a94      	ldr	r2, [pc, #592]	; (80044d4 <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 8004284:	4013      	ands	r3, r2
 8004286:	0019      	movs	r1, r3
 8004288:	687b      	ldr	r3, [r7, #4]
 800428a:	695a      	ldr	r2, [r3, #20]
 800428c:	4b8e      	ldr	r3, [pc, #568]	; (80044c8 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 800428e:	430a      	orrs	r2, r1
 8004290:	655a      	str	r2, [r3, #84]	; 0x54
  }
#endif /* LPUART2 */

#if defined(RCC_CCIPR_LPTIM1SEL)
  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8004292:	687b      	ldr	r3, [r7, #4]
 8004294:	681a      	ldr	r2, [r3, #0]
 8004296:	2380      	movs	r3, #128	; 0x80
 8004298:	009b      	lsls	r3, r3, #2
 800429a:	4013      	ands	r3, r2
 800429c:	d009      	beq.n	80042b2 <HAL_RCCEx_PeriphCLKConfig+0x23a>
  {
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800429e:	4b8a      	ldr	r3, [pc, #552]	; (80044c8 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 80042a0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80042a2:	4a8d      	ldr	r2, [pc, #564]	; (80044d8 <HAL_RCCEx_PeriphCLKConfig+0x460>)
 80042a4:	4013      	ands	r3, r2
 80042a6:	0019      	movs	r1, r3
 80042a8:	687b      	ldr	r3, [r7, #4]
 80042aa:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80042ac:	4b86      	ldr	r3, [pc, #536]	; (80044c8 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 80042ae:	430a      	orrs	r2, r1
 80042b0:	655a      	str	r2, [r3, #84]	; 0x54
  }
#endif /* RCC_CCIPR_LPTIM1SEL */

#if defined(RCC_CCIPR_LPTIM2SEL)
  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 80042b2:	687b      	ldr	r3, [r7, #4]
 80042b4:	681a      	ldr	r2, [r3, #0]
 80042b6:	2380      	movs	r3, #128	; 0x80
 80042b8:	00db      	lsls	r3, r3, #3
 80042ba:	4013      	ands	r3, r2
 80042bc:	d009      	beq.n	80042d2 <HAL_RCCEx_PeriphCLKConfig+0x25a>
  {
    assert_param(IS_RCC_LPTIM2CLKSOURCE(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 80042be:	4b82      	ldr	r3, [pc, #520]	; (80044c8 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 80042c0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80042c2:	4a86      	ldr	r2, [pc, #536]	; (80044dc <HAL_RCCEx_PeriphCLKConfig+0x464>)
 80042c4:	4013      	ands	r3, r2
 80042c6:	0019      	movs	r1, r3
 80042c8:	687b      	ldr	r3, [r7, #4]
 80042ca:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80042cc:	4b7e      	ldr	r3, [pc, #504]	; (80044c8 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 80042ce:	430a      	orrs	r2, r1
 80042d0:	655a      	str	r2, [r3, #84]	; 0x54
  }
#endif /* RCC_CCIPR_LPTIM2SEL */

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80042d2:	687b      	ldr	r3, [r7, #4]
 80042d4:	681b      	ldr	r3, [r3, #0]
 80042d6:	2220      	movs	r2, #32
 80042d8:	4013      	ands	r3, r2
 80042da:	d009      	beq.n	80042f0 <HAL_RCCEx_PeriphCLKConfig+0x278>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80042dc:	4b7a      	ldr	r3, [pc, #488]	; (80044c8 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 80042de:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80042e0:	4a7f      	ldr	r2, [pc, #508]	; (80044e0 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 80042e2:	4013      	ands	r3, r2
 80042e4:	0019      	movs	r1, r3
 80042e6:	687b      	ldr	r3, [r7, #4]
 80042e8:	699a      	ldr	r2, [r3, #24]
 80042ea:	4b77      	ldr	r3, [pc, #476]	; (80044c8 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 80042ec:	430a      	orrs	r2, r1
 80042ee:	655a      	str	r2, [r3, #84]	; 0x54
  }

#if defined(RCC_CCIPR_I2C2SEL)
  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 80042f0:	687b      	ldr	r3, [r7, #4]
 80042f2:	681b      	ldr	r3, [r3, #0]
 80042f4:	2240      	movs	r2, #64	; 0x40
 80042f6:	4013      	ands	r3, r2
 80042f8:	d009      	beq.n	800430e <HAL_RCCEx_PeriphCLKConfig+0x296>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 80042fa:	4b73      	ldr	r3, [pc, #460]	; (80044c8 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 80042fc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80042fe:	4a79      	ldr	r2, [pc, #484]	; (80044e4 <HAL_RCCEx_PeriphCLKConfig+0x46c>)
 8004300:	4013      	ands	r3, r2
 8004302:	0019      	movs	r1, r3
 8004304:	687b      	ldr	r3, [r7, #4]
 8004306:	69da      	ldr	r2, [r3, #28]
 8004308:	4b6f      	ldr	r3, [pc, #444]	; (80044c8 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 800430a:	430a      	orrs	r2, r1
 800430c:	655a      	str	r2, [r3, #84]	; 0x54
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
    }
  }
#endif /* RNG */
  /*-------------------------- ADC clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 800430e:	687b      	ldr	r3, [r7, #4]
 8004310:	681a      	ldr	r2, [r3, #0]
 8004312:	2380      	movs	r3, #128	; 0x80
 8004314:	01db      	lsls	r3, r3, #7
 8004316:	4013      	ands	r3, r2
 8004318:	d015      	beq.n	8004346 <HAL_RCCEx_PeriphCLKConfig+0x2ce>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 800431a:	4b6b      	ldr	r3, [pc, #428]	; (80044c8 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 800431c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800431e:	009b      	lsls	r3, r3, #2
 8004320:	0899      	lsrs	r1, r3, #2
 8004322:	687b      	ldr	r3, [r7, #4]
 8004324:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004326:	4b68      	ldr	r3, [pc, #416]	; (80044c8 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8004328:	430a      	orrs	r2, r1
 800432a:	655a      	str	r2, [r3, #84]	; 0x54

    if (PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLADC)
 800432c:	687b      	ldr	r3, [r7, #4]
 800432e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004330:	2380      	movs	r3, #128	; 0x80
 8004332:	05db      	lsls	r3, r3, #23
 8004334:	429a      	cmp	r2, r3
 8004336:	d106      	bne.n	8004346 <HAL_RCCEx_PeriphCLKConfig+0x2ce>
    {
      /* Enable PLLPCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLPCLK);
 8004338:	4b63      	ldr	r3, [pc, #396]	; (80044c8 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 800433a:	68da      	ldr	r2, [r3, #12]
 800433c:	4b62      	ldr	r3, [pc, #392]	; (80044c8 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 800433e:	2180      	movs	r1, #128	; 0x80
 8004340:	0249      	lsls	r1, r1, #9
 8004342:	430a      	orrs	r2, r1
 8004344:	60da      	str	r2, [r3, #12]
    }
  }

#if defined(CEC)
  /*-------------------------- CEC clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8004346:	687b      	ldr	r3, [r7, #4]
 8004348:	681a      	ldr	r2, [r3, #0]
 800434a:	2380      	movs	r3, #128	; 0x80
 800434c:	031b      	lsls	r3, r3, #12
 800434e:	4013      	ands	r3, r2
 8004350:	d009      	beq.n	8004366 <HAL_RCCEx_PeriphCLKConfig+0x2ee>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8004352:	4b5d      	ldr	r3, [pc, #372]	; (80044c8 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8004354:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004356:	2240      	movs	r2, #64	; 0x40
 8004358:	4393      	bics	r3, r2
 800435a:	0019      	movs	r1, r3
 800435c:	687b      	ldr	r3, [r7, #4]
 800435e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004360:	4b59      	ldr	r3, [pc, #356]	; (80044c8 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8004362:	430a      	orrs	r2, r1
 8004364:	655a      	str	r2, [r3, #84]	; 0x54
  }
#endif /* CEC */

#if defined(RCC_CCIPR_TIM1SEL)
  /*-------------------------- TIM1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM1) == RCC_PERIPHCLK_TIM1)
 8004366:	687b      	ldr	r3, [r7, #4]
 8004368:	681a      	ldr	r2, [r3, #0]
 800436a:	2380      	movs	r3, #128	; 0x80
 800436c:	039b      	lsls	r3, r3, #14
 800436e:	4013      	ands	r3, r2
 8004370:	d016      	beq.n	80043a0 <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM1CLKSOURCE(PeriphClkInit->Tim1ClockSelection));

    /* Configure the TIM1 clock source */
    __HAL_RCC_TIM1_CONFIG(PeriphClkInit->Tim1ClockSelection);
 8004372:	4b55      	ldr	r3, [pc, #340]	; (80044c8 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8004374:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004376:	4a5c      	ldr	r2, [pc, #368]	; (80044e8 <HAL_RCCEx_PeriphCLKConfig+0x470>)
 8004378:	4013      	ands	r3, r2
 800437a:	0019      	movs	r1, r3
 800437c:	687b      	ldr	r3, [r7, #4]
 800437e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004380:	4b51      	ldr	r3, [pc, #324]	; (80044c8 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8004382:	430a      	orrs	r2, r1
 8004384:	655a      	str	r2, [r3, #84]	; 0x54

    if (PeriphClkInit->Tim1ClockSelection == RCC_TIM1CLKSOURCE_PLL)
 8004386:	687b      	ldr	r3, [r7, #4]
 8004388:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800438a:	2380      	movs	r3, #128	; 0x80
 800438c:	03db      	lsls	r3, r3, #15
 800438e:	429a      	cmp	r2, r3
 8004390:	d106      	bne.n	80043a0 <HAL_RCCEx_PeriphCLKConfig+0x328>
    {
      /* Enable PLLQCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
 8004392:	4b4d      	ldr	r3, [pc, #308]	; (80044c8 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8004394:	68da      	ldr	r2, [r3, #12]
 8004396:	4b4c      	ldr	r3, [pc, #304]	; (80044c8 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8004398:	2180      	movs	r1, #128	; 0x80
 800439a:	0449      	lsls	r1, r1, #17
 800439c:	430a      	orrs	r2, r1
 800439e:	60da      	str	r2, [r3, #12]
  }
#endif /* RCC_CCIPR_TIM1SEL */

#if defined(RCC_CCIPR_TIM15SEL)
  /*-------------------------- TIM15 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM15) == RCC_PERIPHCLK_TIM15)
 80043a0:	687b      	ldr	r3, [r7, #4]
 80043a2:	681a      	ldr	r2, [r3, #0]
 80043a4:	2380      	movs	r3, #128	; 0x80
 80043a6:	03db      	lsls	r3, r3, #15
 80043a8:	4013      	ands	r3, r2
 80043aa:	d016      	beq.n	80043da <HAL_RCCEx_PeriphCLKConfig+0x362>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM15CLKSOURCE(PeriphClkInit->Tim15ClockSelection));

    /* Configure the TIM15 clock source */
    __HAL_RCC_TIM15_CONFIG(PeriphClkInit->Tim15ClockSelection);
 80043ac:	4b46      	ldr	r3, [pc, #280]	; (80044c8 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 80043ae:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80043b0:	4a4e      	ldr	r2, [pc, #312]	; (80044ec <HAL_RCCEx_PeriphCLKConfig+0x474>)
 80043b2:	4013      	ands	r3, r2
 80043b4:	0019      	movs	r1, r3
 80043b6:	687b      	ldr	r3, [r7, #4]
 80043b8:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80043ba:	4b43      	ldr	r3, [pc, #268]	; (80044c8 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 80043bc:	430a      	orrs	r2, r1
 80043be:	655a      	str	r2, [r3, #84]	; 0x54

    if (PeriphClkInit->Tim15ClockSelection == RCC_TIM15CLKSOURCE_PLL)
 80043c0:	687b      	ldr	r3, [r7, #4]
 80043c2:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80043c4:	2380      	movs	r3, #128	; 0x80
 80043c6:	045b      	lsls	r3, r3, #17
 80043c8:	429a      	cmp	r2, r3
 80043ca:	d106      	bne.n	80043da <HAL_RCCEx_PeriphCLKConfig+0x362>
    {
      /* Enable PLLQCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
 80043cc:	4b3e      	ldr	r3, [pc, #248]	; (80044c8 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 80043ce:	68da      	ldr	r2, [r3, #12]
 80043d0:	4b3d      	ldr	r3, [pc, #244]	; (80044c8 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 80043d2:	2180      	movs	r1, #128	; 0x80
 80043d4:	0449      	lsls	r1, r1, #17
 80043d6:	430a      	orrs	r2, r1
 80043d8:	60da      	str	r2, [r3, #12]
    }
  }
#endif /* RCC_CCIPR_TIM15SEL */

  /*-------------------------- I2S1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S1) == RCC_PERIPHCLK_I2S1)
 80043da:	687b      	ldr	r3, [r7, #4]
 80043dc:	681a      	ldr	r2, [r3, #0]
 80043de:	2380      	movs	r3, #128	; 0x80
 80043e0:	011b      	lsls	r3, r3, #4
 80043e2:	4013      	ands	r3, r2
 80043e4:	d014      	beq.n	8004410 <HAL_RCCEx_PeriphCLKConfig+0x398>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2S1CLKSOURCE(PeriphClkInit->I2s1ClockSelection));

    /* Configure the I2S1 clock source */
    __HAL_RCC_I2S1_CONFIG(PeriphClkInit->I2s1ClockSelection);
 80043e6:	4b38      	ldr	r3, [pc, #224]	; (80044c8 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 80043e8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80043ea:	2203      	movs	r2, #3
 80043ec:	4393      	bics	r3, r2
 80043ee:	0019      	movs	r1, r3
 80043f0:	687b      	ldr	r3, [r7, #4]
 80043f2:	6a1a      	ldr	r2, [r3, #32]
 80043f4:	4b34      	ldr	r3, [pc, #208]	; (80044c8 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 80043f6:	430a      	orrs	r2, r1
 80043f8:	659a      	str	r2, [r3, #88]	; 0x58

    if (PeriphClkInit->I2s1ClockSelection == RCC_I2S1CLKSOURCE_PLL)
 80043fa:	687b      	ldr	r3, [r7, #4]
 80043fc:	6a1b      	ldr	r3, [r3, #32]
 80043fe:	2b01      	cmp	r3, #1
 8004400:	d106      	bne.n	8004410 <HAL_RCCEx_PeriphCLKConfig+0x398>
    {
      /* Enable PLLPCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLPCLK);
 8004402:	4b31      	ldr	r3, [pc, #196]	; (80044c8 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8004404:	68da      	ldr	r2, [r3, #12]
 8004406:	4b30      	ldr	r3, [pc, #192]	; (80044c8 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8004408:	2180      	movs	r1, #128	; 0x80
 800440a:	0249      	lsls	r1, r1, #9
 800440c:	430a      	orrs	r2, r1
 800440e:	60da      	str	r2, [r3, #12]
    }
  }

#if defined(RCC_CCIPR2_I2S2SEL)
  /*-------------------------- I2S2 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S2) == RCC_PERIPHCLK_I2S2)
 8004410:	687b      	ldr	r3, [r7, #4]
 8004412:	681a      	ldr	r2, [r3, #0]
 8004414:	2380      	movs	r3, #128	; 0x80
 8004416:	019b      	lsls	r3, r3, #6
 8004418:	4013      	ands	r3, r2
 800441a:	d014      	beq.n	8004446 <HAL_RCCEx_PeriphCLKConfig+0x3ce>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2S2CLKSOURCE(PeriphClkInit->I2s2ClockSelection));

    /* Configure the I2S2 clock source */
    __HAL_RCC_I2S2_CONFIG(PeriphClkInit->I2s2ClockSelection);
 800441c:	4b2a      	ldr	r3, [pc, #168]	; (80044c8 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 800441e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004420:	220c      	movs	r2, #12
 8004422:	4393      	bics	r3, r2
 8004424:	0019      	movs	r1, r3
 8004426:	687b      	ldr	r3, [r7, #4]
 8004428:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800442a:	4b27      	ldr	r3, [pc, #156]	; (80044c8 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 800442c:	430a      	orrs	r2, r1
 800442e:	659a      	str	r2, [r3, #88]	; 0x58

    if (PeriphClkInit->I2s2ClockSelection == RCC_I2S2CLKSOURCE_PLL)
 8004430:	687b      	ldr	r3, [r7, #4]
 8004432:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004434:	2b04      	cmp	r3, #4
 8004436:	d106      	bne.n	8004446 <HAL_RCCEx_PeriphCLKConfig+0x3ce>
    {
      /* Enable PLLPCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLPCLK);
 8004438:	4b23      	ldr	r3, [pc, #140]	; (80044c8 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 800443a:	68da      	ldr	r2, [r3, #12]
 800443c:	4b22      	ldr	r3, [pc, #136]	; (80044c8 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 800443e:	2180      	movs	r1, #128	; 0x80
 8004440:	0249      	lsls	r1, r1, #9
 8004442:	430a      	orrs	r2, r1
 8004444:	60da      	str	r2, [r3, #12]
  }
#endif /* RCC_CCIPR2_I2S2SEL */

#if defined(STM32G0C1xx) || defined(STM32G0B1xx)  || defined(STM32G0B0xx)
  /*-------------------------- USB clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8004446:	687b      	ldr	r3, [r7, #4]
 8004448:	681a      	ldr	r2, [r3, #0]
 800444a:	2380      	movs	r3, #128	; 0x80
 800444c:	045b      	lsls	r3, r3, #17
 800444e:	4013      	ands	r3, r2
 8004450:	d016      	beq.n	8004480 <HAL_RCCEx_PeriphCLKConfig+0x408>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8004452:	4b1d      	ldr	r3, [pc, #116]	; (80044c8 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8004454:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004456:	4a22      	ldr	r2, [pc, #136]	; (80044e0 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 8004458:	4013      	ands	r3, r2
 800445a:	0019      	movs	r1, r3
 800445c:	687b      	ldr	r3, [r7, #4]
 800445e:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004460:	4b19      	ldr	r3, [pc, #100]	; (80044c8 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8004462:	430a      	orrs	r2, r1
 8004464:	659a      	str	r2, [r3, #88]	; 0x58

    if (PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8004466:	687b      	ldr	r3, [r7, #4]
 8004468:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800446a:	2380      	movs	r3, #128	; 0x80
 800446c:	019b      	lsls	r3, r3, #6
 800446e:	429a      	cmp	r2, r3
 8004470:	d106      	bne.n	8004480 <HAL_RCCEx_PeriphCLKConfig+0x408>
    {
      /* Enable PLLQCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
 8004472:	4b15      	ldr	r3, [pc, #84]	; (80044c8 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8004474:	68da      	ldr	r2, [r3, #12]
 8004476:	4b14      	ldr	r3, [pc, #80]	; (80044c8 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8004478:	2180      	movs	r1, #128	; 0x80
 800447a:	0449      	lsls	r1, r1, #17
 800447c:	430a      	orrs	r2, r1
 800447e:	60da      	str	r2, [r3, #12]
  }
#endif /* STM32G0C1xx || STM32G0B1xx || STM32G0B0xx */

#if defined(FDCAN1) || defined(FDCAN2)
  /*-------------------------- FDCAN clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8004480:	687b      	ldr	r3, [r7, #4]
 8004482:	681a      	ldr	r2, [r3, #0]
 8004484:	2380      	movs	r3, #128	; 0x80
 8004486:	049b      	lsls	r3, r3, #18
 8004488:	4013      	ands	r3, r2
 800448a:	d016      	beq.n	80044ba <HAL_RCCEx_PeriphCLKConfig+0x442>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FDCANCLKSOURCE(PeriphClkInit->FdcanClockSelection));

    /* Configure the FDCAN clock source */
    __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 800448c:	4b0e      	ldr	r3, [pc, #56]	; (80044c8 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 800448e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004490:	4a10      	ldr	r2, [pc, #64]	; (80044d4 <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 8004492:	4013      	ands	r3, r2
 8004494:	0019      	movs	r1, r3
 8004496:	687b      	ldr	r3, [r7, #4]
 8004498:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800449a:	4b0b      	ldr	r3, [pc, #44]	; (80044c8 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 800449c:	430a      	orrs	r2, r1
 800449e:	659a      	str	r2, [r3, #88]	; 0x58

    if (PeriphClkInit->FdcanClockSelection == RCC_FDCANCLKSOURCE_PLL)
 80044a0:	687b      	ldr	r3, [r7, #4]
 80044a2:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80044a4:	2380      	movs	r3, #128	; 0x80
 80044a6:	005b      	lsls	r3, r3, #1
 80044a8:	429a      	cmp	r2, r3
 80044aa:	d106      	bne.n	80044ba <HAL_RCCEx_PeriphCLKConfig+0x442>
    {
      /* Enable PLLQCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
 80044ac:	4b06      	ldr	r3, [pc, #24]	; (80044c8 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 80044ae:	68da      	ldr	r2, [r3, #12]
 80044b0:	4b05      	ldr	r3, [pc, #20]	; (80044c8 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 80044b2:	2180      	movs	r1, #128	; 0x80
 80044b4:	0449      	lsls	r1, r1, #17
 80044b6:	430a      	orrs	r2, r1
 80044b8:	60da      	str	r2, [r3, #12]
    }
  }
#endif /* FDCAN1 || FDCAN2 */

  return status;
 80044ba:	2312      	movs	r3, #18
 80044bc:	18fb      	adds	r3, r7, r3
 80044be:	781b      	ldrb	r3, [r3, #0]
}
 80044c0:	0018      	movs	r0, r3
 80044c2:	46bd      	mov	sp, r7
 80044c4:	b006      	add	sp, #24
 80044c6:	bd80      	pop	{r7, pc}
 80044c8:	40021000 	.word	0x40021000
 80044cc:	efffffff 	.word	0xefffffff
 80044d0:	fffff3ff 	.word	0xfffff3ff
 80044d4:	fffffcff 	.word	0xfffffcff
 80044d8:	fff3ffff 	.word	0xfff3ffff
 80044dc:	ffcfffff 	.word	0xffcfffff
 80044e0:	ffffcfff 	.word	0xffffcfff
 80044e4:	ffff3fff 	.word	0xffff3fff
 80044e8:	ffbfffff 	.word	0xffbfffff
 80044ec:	feffffff 	.word	0xfeffffff

080044f0 <HAL_RTC_Init>:
  * @brief  Initialize the RTC peripheral
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 80044f0:	b5b0      	push	{r4, r5, r7, lr}
 80044f2:	b084      	sub	sp, #16
 80044f4:	af00      	add	r7, sp, #0
 80044f6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_ERROR;
 80044f8:	230f      	movs	r3, #15
 80044fa:	18fb      	adds	r3, r7, r3
 80044fc:	2201      	movs	r2, #1
 80044fe:	701a      	strb	r2, [r3, #0]

  /* Check the RTC peripheral state */
  if(hrtc != NULL)
 8004500:	687b      	ldr	r3, [r7, #4]
 8004502:	2b00      	cmp	r3, #0
 8004504:	d100      	bne.n	8004508 <HAL_RTC_Init+0x18>
 8004506:	e08c      	b.n	8004622 <HAL_RTC_Init+0x132>
    assert_param(IS_RTC_OUTPUT_REMAP(hrtc->Init.OutPutRemap));
    assert_param(IS_RTC_OUTPUT_POL(hrtc->Init.OutPutPolarity));
    assert_param(IS_RTC_OUTPUT_TYPE(hrtc->Init.OutPutType));
    assert_param(IS_RTC_OUTPUT_PULLUP(hrtc->Init.OutPutPullUp));

    if(hrtc->State == HAL_RTC_STATE_RESET)
 8004508:	687b      	ldr	r3, [r7, #4]
 800450a:	2229      	movs	r2, #41	; 0x29
 800450c:	5c9b      	ldrb	r3, [r3, r2]
 800450e:	b2db      	uxtb	r3, r3
 8004510:	2b00      	cmp	r3, #0
 8004512:	d10b      	bne.n	800452c <HAL_RTC_Init+0x3c>
    {
      /* Allocate lock resource and initialize it */
      hrtc->Lock = HAL_UNLOCKED;
 8004514:	687b      	ldr	r3, [r7, #4]
 8004516:	2228      	movs	r2, #40	; 0x28
 8004518:	2100      	movs	r1, #0
 800451a:	5499      	strb	r1, [r3, r2]

      /* Process TAMP peripheral offset from RTC one */
      hrtc->TampOffset = (TAMP_BASE - RTC_BASE);
 800451c:	687b      	ldr	r3, [r7, #4]
 800451e:	2288      	movs	r2, #136	; 0x88
 8004520:	0212      	lsls	r2, r2, #8
 8004522:	605a      	str	r2, [r3, #4]
      {
        hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
      }
#else
      /* Initialize RTC MSP */
      HAL_RTC_MspInit(hrtc);
 8004524:	687b      	ldr	r3, [r7, #4]
 8004526:	0018      	movs	r0, r3
 8004528:	f7fe faac 	bl	8002a84 <HAL_RTC_MspInit>
#endif /* (USE_HAL_RTC_REGISTER_CALLBACKS) */
    }

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_BUSY;
 800452c:	687b      	ldr	r3, [r7, #4]
 800452e:	2229      	movs	r2, #41	; 0x29
 8004530:	2102      	movs	r1, #2
 8004532:	5499      	strb	r1, [r3, r2]

    /* Check whether the calendar needs to be initialized */
    if (__HAL_RTC_IS_CALENDAR_INITIALIZED(hrtc) == 0U)
 8004534:	687b      	ldr	r3, [r7, #4]
 8004536:	681b      	ldr	r3, [r3, #0]
 8004538:	68db      	ldr	r3, [r3, #12]
 800453a:	2210      	movs	r2, #16
 800453c:	4013      	ands	r3, r2
 800453e:	2b10      	cmp	r3, #16
 8004540:	d062      	beq.n	8004608 <HAL_RTC_Init+0x118>
    {
      /* Disable the write protection for RTC registers */
      __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8004542:	687b      	ldr	r3, [r7, #4]
 8004544:	681b      	ldr	r3, [r3, #0]
 8004546:	22ca      	movs	r2, #202	; 0xca
 8004548:	625a      	str	r2, [r3, #36]	; 0x24
 800454a:	687b      	ldr	r3, [r7, #4]
 800454c:	681b      	ldr	r3, [r3, #0]
 800454e:	2253      	movs	r2, #83	; 0x53
 8004550:	625a      	str	r2, [r3, #36]	; 0x24

      /* Enter Initialization mode */
      status = RTC_EnterInitMode(hrtc);
 8004552:	250f      	movs	r5, #15
 8004554:	197c      	adds	r4, r7, r5
 8004556:	687b      	ldr	r3, [r7, #4]
 8004558:	0018      	movs	r0, r3
 800455a:	f000 fb9c 	bl	8004c96 <RTC_EnterInitMode>
 800455e:	0003      	movs	r3, r0
 8004560:	7023      	strb	r3, [r4, #0]

      if(status == HAL_OK)
 8004562:	0028      	movs	r0, r5
 8004564:	183b      	adds	r3, r7, r0
 8004566:	781b      	ldrb	r3, [r3, #0]
 8004568:	2b00      	cmp	r3, #0
 800456a:	d12c      	bne.n	80045c6 <HAL_RTC_Init+0xd6>
      {
        /* Clear RTC_CR FMT, OSEL and POL Bits */
        hrtc->Instance->CR &= ~(RTC_CR_FMT | RTC_CR_POL | RTC_CR_OSEL | RTC_CR_TAMPOE);
 800456c:	687b      	ldr	r3, [r7, #4]
 800456e:	681b      	ldr	r3, [r3, #0]
 8004570:	699a      	ldr	r2, [r3, #24]
 8004572:	687b      	ldr	r3, [r7, #4]
 8004574:	681b      	ldr	r3, [r3, #0]
 8004576:	492e      	ldr	r1, [pc, #184]	; (8004630 <HAL_RTC_Init+0x140>)
 8004578:	400a      	ands	r2, r1
 800457a:	619a      	str	r2, [r3, #24]
        /* Set RTC_CR register */
        hrtc->Instance->CR |= (hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 800457c:	687b      	ldr	r3, [r7, #4]
 800457e:	681b      	ldr	r3, [r3, #0]
 8004580:	6999      	ldr	r1, [r3, #24]
 8004582:	687b      	ldr	r3, [r7, #4]
 8004584:	689a      	ldr	r2, [r3, #8]
 8004586:	687b      	ldr	r3, [r7, #4]
 8004588:	695b      	ldr	r3, [r3, #20]
 800458a:	431a      	orrs	r2, r3
 800458c:	687b      	ldr	r3, [r7, #4]
 800458e:	69db      	ldr	r3, [r3, #28]
 8004590:	431a      	orrs	r2, r3
 8004592:	687b      	ldr	r3, [r7, #4]
 8004594:	681b      	ldr	r3, [r3, #0]
 8004596:	430a      	orrs	r2, r1
 8004598:	619a      	str	r2, [r3, #24]

        /* Configure the RTC PRER */
        hrtc->Instance->PRER = (hrtc->Init.SynchPrediv);
 800459a:	687b      	ldr	r3, [r7, #4]
 800459c:	681b      	ldr	r3, [r3, #0]
 800459e:	687a      	ldr	r2, [r7, #4]
 80045a0:	6912      	ldr	r2, [r2, #16]
 80045a2:	611a      	str	r2, [r3, #16]
        hrtc->Instance->PRER |= (hrtc->Init.AsynchPrediv << RTC_PRER_PREDIV_A_Pos);
 80045a4:	687b      	ldr	r3, [r7, #4]
 80045a6:	681b      	ldr	r3, [r3, #0]
 80045a8:	6919      	ldr	r1, [r3, #16]
 80045aa:	687b      	ldr	r3, [r7, #4]
 80045ac:	68db      	ldr	r3, [r3, #12]
 80045ae:	041a      	lsls	r2, r3, #16
 80045b0:	687b      	ldr	r3, [r7, #4]
 80045b2:	681b      	ldr	r3, [r3, #0]
 80045b4:	430a      	orrs	r2, r1
 80045b6:	611a      	str	r2, [r3, #16]

        /* Exit Initialization mode */
        status = RTC_ExitInitMode(hrtc);
 80045b8:	183c      	adds	r4, r7, r0
 80045ba:	687b      	ldr	r3, [r7, #4]
 80045bc:	0018      	movs	r0, r3
 80045be:	f000 fbad 	bl	8004d1c <RTC_ExitInitMode>
 80045c2:	0003      	movs	r3, r0
 80045c4:	7023      	strb	r3, [r4, #0]
      }

      if (status == HAL_OK)
 80045c6:	230f      	movs	r3, #15
 80045c8:	18fb      	adds	r3, r7, r3
 80045ca:	781b      	ldrb	r3, [r3, #0]
 80045cc:	2b00      	cmp	r3, #0
 80045ce:	d116      	bne.n	80045fe <HAL_RTC_Init+0x10e>
      {
        hrtc->Instance->CR &= ~(RTC_CR_TAMPALRM_PU |RTC_CR_TAMPALRM_TYPE | RTC_CR_OUT2EN);
 80045d0:	687b      	ldr	r3, [r7, #4]
 80045d2:	681b      	ldr	r3, [r3, #0]
 80045d4:	699a      	ldr	r2, [r3, #24]
 80045d6:	687b      	ldr	r3, [r7, #4]
 80045d8:	681b      	ldr	r3, [r3, #0]
 80045da:	00d2      	lsls	r2, r2, #3
 80045dc:	08d2      	lsrs	r2, r2, #3
 80045de:	619a      	str	r2, [r3, #24]
        hrtc->Instance->CR |= (hrtc->Init.OutPutPullUp | hrtc->Init.OutPutType | hrtc->Init.OutPutRemap);
 80045e0:	687b      	ldr	r3, [r7, #4]
 80045e2:	681b      	ldr	r3, [r3, #0]
 80045e4:	6999      	ldr	r1, [r3, #24]
 80045e6:	687b      	ldr	r3, [r7, #4]
 80045e8:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80045ea:	687b      	ldr	r3, [r7, #4]
 80045ec:	6a1b      	ldr	r3, [r3, #32]
 80045ee:	431a      	orrs	r2, r3
 80045f0:	687b      	ldr	r3, [r7, #4]
 80045f2:	699b      	ldr	r3, [r3, #24]
 80045f4:	431a      	orrs	r2, r3
 80045f6:	687b      	ldr	r3, [r7, #4]
 80045f8:	681b      	ldr	r3, [r3, #0]
 80045fa:	430a      	orrs	r2, r1
 80045fc:	619a      	str	r2, [r3, #24]
      }

      /* Enable the write protection for RTC registers */
      __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80045fe:	687b      	ldr	r3, [r7, #4]
 8004600:	681b      	ldr	r3, [r3, #0]
 8004602:	22ff      	movs	r2, #255	; 0xff
 8004604:	625a      	str	r2, [r3, #36]	; 0x24
 8004606:	e003      	b.n	8004610 <HAL_RTC_Init+0x120>
    }
    else
    {
      /* The calendar is already initialized */
      status = HAL_OK;
 8004608:	230f      	movs	r3, #15
 800460a:	18fb      	adds	r3, r7, r3
 800460c:	2200      	movs	r2, #0
 800460e:	701a      	strb	r2, [r3, #0]
    }

    if (status == HAL_OK)
 8004610:	230f      	movs	r3, #15
 8004612:	18fb      	adds	r3, r7, r3
 8004614:	781b      	ldrb	r3, [r3, #0]
 8004616:	2b00      	cmp	r3, #0
 8004618:	d103      	bne.n	8004622 <HAL_RTC_Init+0x132>
    {
      hrtc->State = HAL_RTC_STATE_READY;
 800461a:	687b      	ldr	r3, [r7, #4]
 800461c:	2229      	movs	r2, #41	; 0x29
 800461e:	2101      	movs	r1, #1
 8004620:	5499      	strb	r1, [r3, r2]
    }
  }

  return status;
 8004622:	230f      	movs	r3, #15
 8004624:	18fb      	adds	r3, r7, r3
 8004626:	781b      	ldrb	r3, [r3, #0]
}
 8004628:	0018      	movs	r0, r3
 800462a:	46bd      	mov	sp, r7
 800462c:	b004      	add	sp, #16
 800462e:	bdb0      	pop	{r4, r5, r7, pc}
 8004630:	fb8fffbf 	.word	0xfb8fffbf

08004634 <HAL_RTC_SetTime>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 8004634:	b5b0      	push	{r4, r5, r7, lr}
 8004636:	b086      	sub	sp, #24
 8004638:	af00      	add	r7, sp, #0
 800463a:	60f8      	str	r0, [r7, #12]
 800463c:	60b9      	str	r1, [r7, #8]
 800463e:	607a      	str	r2, [r7, #4]
  assert_param(IS_RTC_FORMAT(Format));
  assert_param(IS_RTC_DAYLIGHT_SAVING(sTime->DayLightSaving));
  assert_param(IS_RTC_STORE_OPERATION(sTime->StoreOperation));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8004640:	68fb      	ldr	r3, [r7, #12]
 8004642:	2228      	movs	r2, #40	; 0x28
 8004644:	5c9b      	ldrb	r3, [r3, r2]
 8004646:	2b01      	cmp	r3, #1
 8004648:	d101      	bne.n	800464e <HAL_RTC_SetTime+0x1a>
 800464a:	2302      	movs	r3, #2
 800464c:	e092      	b.n	8004774 <HAL_RTC_SetTime+0x140>
 800464e:	68fb      	ldr	r3, [r7, #12]
 8004650:	2228      	movs	r2, #40	; 0x28
 8004652:	2101      	movs	r1, #1
 8004654:	5499      	strb	r1, [r3, r2]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8004656:	68fb      	ldr	r3, [r7, #12]
 8004658:	2229      	movs	r2, #41	; 0x29
 800465a:	2102      	movs	r1, #2
 800465c:	5499      	strb	r1, [r3, r2]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800465e:	68fb      	ldr	r3, [r7, #12]
 8004660:	681b      	ldr	r3, [r3, #0]
 8004662:	22ca      	movs	r2, #202	; 0xca
 8004664:	625a      	str	r2, [r3, #36]	; 0x24
 8004666:	68fb      	ldr	r3, [r7, #12]
 8004668:	681b      	ldr	r3, [r3, #0]
 800466a:	2253      	movs	r2, #83	; 0x53
 800466c:	625a      	str	r2, [r3, #36]	; 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 800466e:	2513      	movs	r5, #19
 8004670:	197c      	adds	r4, r7, r5
 8004672:	68fb      	ldr	r3, [r7, #12]
 8004674:	0018      	movs	r0, r3
 8004676:	f000 fb0e 	bl	8004c96 <RTC_EnterInitMode>
 800467a:	0003      	movs	r3, r0
 800467c:	7023      	strb	r3, [r4, #0]
  if(status == HAL_OK)
 800467e:	197b      	adds	r3, r7, r5
 8004680:	781b      	ldrb	r3, [r3, #0]
 8004682:	2b00      	cmp	r3, #0
 8004684:	d162      	bne.n	800474c <HAL_RTC_SetTime+0x118>
  {
    if(Format == RTC_FORMAT_BIN)
 8004686:	687b      	ldr	r3, [r7, #4]
 8004688:	2b00      	cmp	r3, #0
 800468a:	d125      	bne.n	80046d8 <HAL_RTC_SetTime+0xa4>
    {
    if((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 800468c:	68fb      	ldr	r3, [r7, #12]
 800468e:	681b      	ldr	r3, [r3, #0]
 8004690:	699b      	ldr	r3, [r3, #24]
 8004692:	2240      	movs	r2, #64	; 0x40
 8004694:	4013      	ands	r3, r2
 8004696:	d102      	bne.n	800469e <HAL_RTC_SetTime+0x6a>
        assert_param(IS_RTC_HOUR12(sTime->Hours));
        assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
      }
      else
      {
        sTime->TimeFormat = 0x00U;
 8004698:	68bb      	ldr	r3, [r7, #8]
 800469a:	2200      	movs	r2, #0
 800469c:	70da      	strb	r2, [r3, #3]
        assert_param(IS_RTC_HOUR24(sTime->Hours));
      }
      assert_param(IS_RTC_MINUTES(sTime->Minutes));
      assert_param(IS_RTC_SECONDS(sTime->Seconds));

      tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << RTC_TR_HU_Pos) | \
 800469e:	68bb      	ldr	r3, [r7, #8]
 80046a0:	781b      	ldrb	r3, [r3, #0]
 80046a2:	0018      	movs	r0, r3
 80046a4:	f000 fb7e 	bl	8004da4 <RTC_ByteToBcd2>
 80046a8:	0003      	movs	r3, r0
 80046aa:	041c      	lsls	r4, r3, #16
                          ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 80046ac:	68bb      	ldr	r3, [r7, #8]
 80046ae:	785b      	ldrb	r3, [r3, #1]
 80046b0:	0018      	movs	r0, r3
 80046b2:	f000 fb77 	bl	8004da4 <RTC_ByteToBcd2>
 80046b6:	0003      	movs	r3, r0
 80046b8:	021b      	lsls	r3, r3, #8
      tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << RTC_TR_HU_Pos) | \
 80046ba:	431c      	orrs	r4, r3
                          ((uint32_t)RTC_ByteToBcd2(sTime->Seconds) << RTC_TR_SU_Pos) | \
 80046bc:	68bb      	ldr	r3, [r7, #8]
 80046be:	789b      	ldrb	r3, [r3, #2]
 80046c0:	0018      	movs	r0, r3
 80046c2:	f000 fb6f 	bl	8004da4 <RTC_ByteToBcd2>
 80046c6:	0003      	movs	r3, r0
                          ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 80046c8:	0022      	movs	r2, r4
 80046ca:	431a      	orrs	r2, r3
                          (((uint32_t)sTime->TimeFormat) << RTC_TR_PM_Pos));
 80046cc:	68bb      	ldr	r3, [r7, #8]
 80046ce:	78db      	ldrb	r3, [r3, #3]
 80046d0:	059b      	lsls	r3, r3, #22
      tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << RTC_TR_HU_Pos) | \
 80046d2:	4313      	orrs	r3, r2
 80046d4:	617b      	str	r3, [r7, #20]
 80046d6:	e017      	b.n	8004708 <HAL_RTC_SetTime+0xd4>
    }
    else
    {
    if((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 80046d8:	68fb      	ldr	r3, [r7, #12]
 80046da:	681b      	ldr	r3, [r3, #0]
 80046dc:	699b      	ldr	r3, [r3, #24]
 80046de:	2240      	movs	r2, #64	; 0x40
 80046e0:	4013      	ands	r3, r2
 80046e2:	d102      	bne.n	80046ea <HAL_RTC_SetTime+0xb6>
        assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sTime->Hours)));
        assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
      }
      else
      {
        sTime->TimeFormat = 0x00U;
 80046e4:	68bb      	ldr	r3, [r7, #8]
 80046e6:	2200      	movs	r2, #0
 80046e8:	70da      	strb	r2, [r3, #3]
        assert_param(IS_RTC_HOUR24(RTC_Bcd2ToByte(sTime->Hours)));
      }
      assert_param(IS_RTC_MINUTES(RTC_Bcd2ToByte(sTime->Minutes)));
      assert_param(IS_RTC_SECONDS(RTC_Bcd2ToByte(sTime->Seconds)));
      tmpreg = (((uint32_t)(sTime->Hours) << RTC_TR_HU_Pos) | \
 80046ea:	68bb      	ldr	r3, [r7, #8]
 80046ec:	781b      	ldrb	r3, [r3, #0]
 80046ee:	041a      	lsls	r2, r3, #16
                ((uint32_t)(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 80046f0:	68bb      	ldr	r3, [r7, #8]
 80046f2:	785b      	ldrb	r3, [r3, #1]
 80046f4:	021b      	lsls	r3, r3, #8
      tmpreg = (((uint32_t)(sTime->Hours) << RTC_TR_HU_Pos) | \
 80046f6:	4313      	orrs	r3, r2
                ((uint32_t)(sTime->Seconds) << RTC_TR_SU_Pos) | \
 80046f8:	68ba      	ldr	r2, [r7, #8]
 80046fa:	7892      	ldrb	r2, [r2, #2]
                ((uint32_t)(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 80046fc:	431a      	orrs	r2, r3
                ((uint32_t)(sTime->TimeFormat) << RTC_TR_PM_Pos));
 80046fe:	68bb      	ldr	r3, [r7, #8]
 8004700:	78db      	ldrb	r3, [r3, #3]
 8004702:	059b      	lsls	r3, r3, #22
      tmpreg = (((uint32_t)(sTime->Hours) << RTC_TR_HU_Pos) | \
 8004704:	4313      	orrs	r3, r2
 8004706:	617b      	str	r3, [r7, #20]
    }

    /* Set the RTC_TR register */
    hrtc->Instance->TR = (uint32_t)(tmpreg & RTC_TR_RESERVED_MASK);
 8004708:	68fb      	ldr	r3, [r7, #12]
 800470a:	681b      	ldr	r3, [r3, #0]
 800470c:	697a      	ldr	r2, [r7, #20]
 800470e:	491b      	ldr	r1, [pc, #108]	; (800477c <HAL_RTC_SetTime+0x148>)
 8004710:	400a      	ands	r2, r1
 8004712:	601a      	str	r2, [r3, #0]

    /* This interface is deprecated. To manage Daylight Saving Time, please use HAL_RTC_DST_xxx functions */
    hrtc->Instance->CR &= ((uint32_t)~RTC_CR_BKP);
 8004714:	68fb      	ldr	r3, [r7, #12]
 8004716:	681b      	ldr	r3, [r3, #0]
 8004718:	699a      	ldr	r2, [r3, #24]
 800471a:	68fb      	ldr	r3, [r7, #12]
 800471c:	681b      	ldr	r3, [r3, #0]
 800471e:	4918      	ldr	r1, [pc, #96]	; (8004780 <HAL_RTC_SetTime+0x14c>)
 8004720:	400a      	ands	r2, r1
 8004722:	619a      	str	r2, [r3, #24]

    /* This interface is deprecated. To manage Daylight Saving Time, please use HAL_RTC_DST_xxx functions */
    hrtc->Instance->CR |= (uint32_t)(sTime->DayLightSaving | sTime->StoreOperation);
 8004724:	68fb      	ldr	r3, [r7, #12]
 8004726:	681b      	ldr	r3, [r3, #0]
 8004728:	6999      	ldr	r1, [r3, #24]
 800472a:	68bb      	ldr	r3, [r7, #8]
 800472c:	68da      	ldr	r2, [r3, #12]
 800472e:	68bb      	ldr	r3, [r7, #8]
 8004730:	691b      	ldr	r3, [r3, #16]
 8004732:	431a      	orrs	r2, r3
 8004734:	68fb      	ldr	r3, [r7, #12]
 8004736:	681b      	ldr	r3, [r3, #0]
 8004738:	430a      	orrs	r2, r1
 800473a:	619a      	str	r2, [r3, #24]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 800473c:	2313      	movs	r3, #19
 800473e:	18fc      	adds	r4, r7, r3
 8004740:	68fb      	ldr	r3, [r7, #12]
 8004742:	0018      	movs	r0, r3
 8004744:	f000 faea 	bl	8004d1c <RTC_ExitInitMode>
 8004748:	0003      	movs	r3, r0
 800474a:	7023      	strb	r3, [r4, #0]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800474c:	68fb      	ldr	r3, [r7, #12]
 800474e:	681b      	ldr	r3, [r3, #0]
 8004750:	22ff      	movs	r2, #255	; 0xff
 8004752:	625a      	str	r2, [r3, #36]	; 0x24
  
  if (status == HAL_OK)
 8004754:	2313      	movs	r3, #19
 8004756:	18fb      	adds	r3, r7, r3
 8004758:	781b      	ldrb	r3, [r3, #0]
 800475a:	2b00      	cmp	r3, #0
 800475c:	d103      	bne.n	8004766 <HAL_RTC_SetTime+0x132>
  {
   hrtc->State = HAL_RTC_STATE_READY;
 800475e:	68fb      	ldr	r3, [r7, #12]
 8004760:	2229      	movs	r2, #41	; 0x29
 8004762:	2101      	movs	r1, #1
 8004764:	5499      	strb	r1, [r3, r2]
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8004766:	68fb      	ldr	r3, [r7, #12]
 8004768:	2228      	movs	r2, #40	; 0x28
 800476a:	2100      	movs	r1, #0
 800476c:	5499      	strb	r1, [r3, r2]

  return status;
 800476e:	2313      	movs	r3, #19
 8004770:	18fb      	adds	r3, r7, r3
 8004772:	781b      	ldrb	r3, [r3, #0]
}
 8004774:	0018      	movs	r0, r3
 8004776:	46bd      	mov	sp, r7
 8004778:	b006      	add	sp, #24
 800477a:	bdb0      	pop	{r4, r5, r7, pc}
 800477c:	007f7f7f 	.word	0x007f7f7f
 8004780:	fffbffff 	.word	0xfffbffff

08004784 <HAL_RTC_GetTime>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 8004784:	b580      	push	{r7, lr}
 8004786:	b086      	sub	sp, #24
 8004788:	af00      	add	r7, sp, #0
 800478a:	60f8      	str	r0, [r7, #12]
 800478c:	60b9      	str	r1, [r7, #8]
 800478e:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Get subseconds structure field from the corresponding register*/
  sTime->SubSeconds = (uint32_t)(hrtc->Instance->SSR);
 8004790:	68fb      	ldr	r3, [r7, #12]
 8004792:	681b      	ldr	r3, [r3, #0]
 8004794:	689a      	ldr	r2, [r3, #8]
 8004796:	68bb      	ldr	r3, [r7, #8]
 8004798:	605a      	str	r2, [r3, #4]

  /* Get SecondFraction structure field from the corresponding register field*/
  sTime->SecondFraction = (uint32_t)(hrtc->Instance->PRER & RTC_PRER_PREDIV_S);
 800479a:	68fb      	ldr	r3, [r7, #12]
 800479c:	681b      	ldr	r3, [r3, #0]
 800479e:	691b      	ldr	r3, [r3, #16]
 80047a0:	045b      	lsls	r3, r3, #17
 80047a2:	0c5a      	lsrs	r2, r3, #17
 80047a4:	68bb      	ldr	r3, [r7, #8]
 80047a6:	609a      	str	r2, [r3, #8]

  /* Get the TR register */
  tmpreg = (uint32_t)(hrtc->Instance->TR & RTC_TR_RESERVED_MASK);
 80047a8:	68fb      	ldr	r3, [r7, #12]
 80047aa:	681b      	ldr	r3, [r3, #0]
 80047ac:	681b      	ldr	r3, [r3, #0]
 80047ae:	4a22      	ldr	r2, [pc, #136]	; (8004838 <HAL_RTC_GetTime+0xb4>)
 80047b0:	4013      	ands	r3, r2
 80047b2:	617b      	str	r3, [r7, #20]

  /* Fill the structure fields with the read parameters */
  sTime->Hours = (uint8_t)((tmpreg & (RTC_TR_HT | RTC_TR_HU)) >> RTC_TR_HU_Pos);
 80047b4:	697b      	ldr	r3, [r7, #20]
 80047b6:	0c1b      	lsrs	r3, r3, #16
 80047b8:	b2db      	uxtb	r3, r3
 80047ba:	223f      	movs	r2, #63	; 0x3f
 80047bc:	4013      	ands	r3, r2
 80047be:	b2da      	uxtb	r2, r3
 80047c0:	68bb      	ldr	r3, [r7, #8]
 80047c2:	701a      	strb	r2, [r3, #0]
  sTime->Minutes = (uint8_t)((tmpreg & (RTC_TR_MNT | RTC_TR_MNU)) >> RTC_TR_MNU_Pos);
 80047c4:	697b      	ldr	r3, [r7, #20]
 80047c6:	0a1b      	lsrs	r3, r3, #8
 80047c8:	b2db      	uxtb	r3, r3
 80047ca:	227f      	movs	r2, #127	; 0x7f
 80047cc:	4013      	ands	r3, r2
 80047ce:	b2da      	uxtb	r2, r3
 80047d0:	68bb      	ldr	r3, [r7, #8]
 80047d2:	705a      	strb	r2, [r3, #1]
  sTime->Seconds = (uint8_t)((tmpreg & (RTC_TR_ST | RTC_TR_SU)) >> RTC_TR_SU_Pos);
 80047d4:	697b      	ldr	r3, [r7, #20]
 80047d6:	b2db      	uxtb	r3, r3
 80047d8:	227f      	movs	r2, #127	; 0x7f
 80047da:	4013      	ands	r3, r2
 80047dc:	b2da      	uxtb	r2, r3
 80047de:	68bb      	ldr	r3, [r7, #8]
 80047e0:	709a      	strb	r2, [r3, #2]
  sTime->TimeFormat = (uint8_t)((tmpreg & (RTC_TR_PM)) >> RTC_TR_PM_Pos);
 80047e2:	697b      	ldr	r3, [r7, #20]
 80047e4:	0d9b      	lsrs	r3, r3, #22
 80047e6:	b2db      	uxtb	r3, r3
 80047e8:	2201      	movs	r2, #1
 80047ea:	4013      	ands	r3, r2
 80047ec:	b2da      	uxtb	r2, r3
 80047ee:	68bb      	ldr	r3, [r7, #8]
 80047f0:	70da      	strb	r2, [r3, #3]

  /* Check the input parameters format */
  if(Format == RTC_FORMAT_BIN)
 80047f2:	687b      	ldr	r3, [r7, #4]
 80047f4:	2b00      	cmp	r3, #0
 80047f6:	d11a      	bne.n	800482e <HAL_RTC_GetTime+0xaa>
  {
    /* Convert the time structure parameters to Binary format */
    sTime->Hours = (uint8_t)RTC_Bcd2ToByte(sTime->Hours);
 80047f8:	68bb      	ldr	r3, [r7, #8]
 80047fa:	781b      	ldrb	r3, [r3, #0]
 80047fc:	0018      	movs	r0, r3
 80047fe:	f000 faf9 	bl	8004df4 <RTC_Bcd2ToByte>
 8004802:	0003      	movs	r3, r0
 8004804:	001a      	movs	r2, r3
 8004806:	68bb      	ldr	r3, [r7, #8]
 8004808:	701a      	strb	r2, [r3, #0]
    sTime->Minutes = (uint8_t)RTC_Bcd2ToByte(sTime->Minutes);
 800480a:	68bb      	ldr	r3, [r7, #8]
 800480c:	785b      	ldrb	r3, [r3, #1]
 800480e:	0018      	movs	r0, r3
 8004810:	f000 faf0 	bl	8004df4 <RTC_Bcd2ToByte>
 8004814:	0003      	movs	r3, r0
 8004816:	001a      	movs	r2, r3
 8004818:	68bb      	ldr	r3, [r7, #8]
 800481a:	705a      	strb	r2, [r3, #1]
    sTime->Seconds = (uint8_t)RTC_Bcd2ToByte(sTime->Seconds);
 800481c:	68bb      	ldr	r3, [r7, #8]
 800481e:	789b      	ldrb	r3, [r3, #2]
 8004820:	0018      	movs	r0, r3
 8004822:	f000 fae7 	bl	8004df4 <RTC_Bcd2ToByte>
 8004826:	0003      	movs	r3, r0
 8004828:	001a      	movs	r2, r3
 800482a:	68bb      	ldr	r3, [r7, #8]
 800482c:	709a      	strb	r2, [r3, #2]
  }

  return HAL_OK;
 800482e:	2300      	movs	r3, #0
}
 8004830:	0018      	movs	r0, r3
 8004832:	46bd      	mov	sp, r7
 8004834:	b006      	add	sp, #24
 8004836:	bd80      	pop	{r7, pc}
 8004838:	007f7f7f 	.word	0x007f7f7f

0800483c <HAL_RTC_SetDate>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 800483c:	b5b0      	push	{r4, r5, r7, lr}
 800483e:	b086      	sub	sp, #24
 8004840:	af00      	add	r7, sp, #0
 8004842:	60f8      	str	r0, [r7, #12]
 8004844:	60b9      	str	r1, [r7, #8]
 8004846:	607a      	str	r2, [r7, #4]

 /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

 /* Process Locked */
 __HAL_LOCK(hrtc);
 8004848:	68fb      	ldr	r3, [r7, #12]
 800484a:	2228      	movs	r2, #40	; 0x28
 800484c:	5c9b      	ldrb	r3, [r3, r2]
 800484e:	2b01      	cmp	r3, #1
 8004850:	d101      	bne.n	8004856 <HAL_RTC_SetDate+0x1a>
 8004852:	2302      	movs	r3, #2
 8004854:	e07e      	b.n	8004954 <HAL_RTC_SetDate+0x118>
 8004856:	68fb      	ldr	r3, [r7, #12]
 8004858:	2228      	movs	r2, #40	; 0x28
 800485a:	2101      	movs	r1, #1
 800485c:	5499      	strb	r1, [r3, r2]

  hrtc->State = HAL_RTC_STATE_BUSY;
 800485e:	68fb      	ldr	r3, [r7, #12]
 8004860:	2229      	movs	r2, #41	; 0x29
 8004862:	2102      	movs	r1, #2
 8004864:	5499      	strb	r1, [r3, r2]

  if((Format == RTC_FORMAT_BIN) && ((sDate->Month & 0x10U) == 0x10U))
 8004866:	687b      	ldr	r3, [r7, #4]
 8004868:	2b00      	cmp	r3, #0
 800486a:	d10e      	bne.n	800488a <HAL_RTC_SetDate+0x4e>
 800486c:	68bb      	ldr	r3, [r7, #8]
 800486e:	785b      	ldrb	r3, [r3, #1]
 8004870:	001a      	movs	r2, r3
 8004872:	2310      	movs	r3, #16
 8004874:	4013      	ands	r3, r2
 8004876:	d008      	beq.n	800488a <HAL_RTC_SetDate+0x4e>
  {
    sDate->Month = (uint8_t)((sDate->Month & (uint8_t)~(0x10U)) + (uint8_t)0x0AU);
 8004878:	68bb      	ldr	r3, [r7, #8]
 800487a:	785b      	ldrb	r3, [r3, #1]
 800487c:	2210      	movs	r2, #16
 800487e:	4393      	bics	r3, r2
 8004880:	b2db      	uxtb	r3, r3
 8004882:	330a      	adds	r3, #10
 8004884:	b2da      	uxtb	r2, r3
 8004886:	68bb      	ldr	r3, [r7, #8]
 8004888:	705a      	strb	r2, [r3, #1]
  }

  assert_param(IS_RTC_WEEKDAY(sDate->WeekDay));

  if(Format == RTC_FORMAT_BIN)
 800488a:	687b      	ldr	r3, [r7, #4]
 800488c:	2b00      	cmp	r3, #0
 800488e:	d11c      	bne.n	80048ca <HAL_RTC_SetDate+0x8e>
  {
    assert_param(IS_RTC_YEAR(sDate->Year));
    assert_param(IS_RTC_MONTH(sDate->Month));
    assert_param(IS_RTC_DATE(sDate->Date));

   datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 8004890:	68bb      	ldr	r3, [r7, #8]
 8004892:	78db      	ldrb	r3, [r3, #3]
 8004894:	0018      	movs	r0, r3
 8004896:	f000 fa85 	bl	8004da4 <RTC_ByteToBcd2>
 800489a:	0003      	movs	r3, r0
 800489c:	041c      	lsls	r4, r3, #16
                 ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 800489e:	68bb      	ldr	r3, [r7, #8]
 80048a0:	785b      	ldrb	r3, [r3, #1]
 80048a2:	0018      	movs	r0, r3
 80048a4:	f000 fa7e 	bl	8004da4 <RTC_ByteToBcd2>
 80048a8:	0003      	movs	r3, r0
 80048aa:	021b      	lsls	r3, r3, #8
   datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 80048ac:	431c      	orrs	r4, r3
                 ((uint32_t)RTC_ByteToBcd2(sDate->Date)  << RTC_DR_DU_Pos) | \
 80048ae:	68bb      	ldr	r3, [r7, #8]
 80048b0:	789b      	ldrb	r3, [r3, #2]
 80048b2:	0018      	movs	r0, r3
 80048b4:	f000 fa76 	bl	8004da4 <RTC_ByteToBcd2>
 80048b8:	0003      	movs	r3, r0
                 ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 80048ba:	0022      	movs	r2, r4
 80048bc:	431a      	orrs	r2, r3
                 ((uint32_t)sDate->WeekDay << RTC_DR_WDU_Pos));
 80048be:	68bb      	ldr	r3, [r7, #8]
 80048c0:	781b      	ldrb	r3, [r3, #0]
 80048c2:	035b      	lsls	r3, r3, #13
   datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 80048c4:	4313      	orrs	r3, r2
 80048c6:	617b      	str	r3, [r7, #20]
 80048c8:	e00e      	b.n	80048e8 <HAL_RTC_SetDate+0xac>
  {
    assert_param(IS_RTC_YEAR(RTC_Bcd2ToByte(sDate->Year)));
    assert_param(IS_RTC_MONTH(RTC_Bcd2ToByte(sDate->Month)));
    assert_param(IS_RTC_DATE(RTC_Bcd2ToByte(sDate->Date)));

    datetmpreg = ((((uint32_t)sDate->Year) << RTC_DR_YU_Pos) | \
 80048ca:	68bb      	ldr	r3, [r7, #8]
 80048cc:	78db      	ldrb	r3, [r3, #3]
 80048ce:	041a      	lsls	r2, r3, #16
                  (((uint32_t)sDate->Month) << RTC_DR_MU_Pos) | \
 80048d0:	68bb      	ldr	r3, [r7, #8]
 80048d2:	785b      	ldrb	r3, [r3, #1]
 80048d4:	021b      	lsls	r3, r3, #8
    datetmpreg = ((((uint32_t)sDate->Year) << RTC_DR_YU_Pos) | \
 80048d6:	4313      	orrs	r3, r2
                  (((uint32_t)sDate->Date) << RTC_DR_DU_Pos)| \
 80048d8:	68ba      	ldr	r2, [r7, #8]
 80048da:	7892      	ldrb	r2, [r2, #2]
                  (((uint32_t)sDate->Month) << RTC_DR_MU_Pos) | \
 80048dc:	431a      	orrs	r2, r3
                  (((uint32_t)sDate->WeekDay) << RTC_DR_WDU_Pos));
 80048de:	68bb      	ldr	r3, [r7, #8]
 80048e0:	781b      	ldrb	r3, [r3, #0]
 80048e2:	035b      	lsls	r3, r3, #13
    datetmpreg = ((((uint32_t)sDate->Year) << RTC_DR_YU_Pos) | \
 80048e4:	4313      	orrs	r3, r2
 80048e6:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 80048e8:	68fb      	ldr	r3, [r7, #12]
 80048ea:	681b      	ldr	r3, [r3, #0]
 80048ec:	22ca      	movs	r2, #202	; 0xca
 80048ee:	625a      	str	r2, [r3, #36]	; 0x24
 80048f0:	68fb      	ldr	r3, [r7, #12]
 80048f2:	681b      	ldr	r3, [r3, #0]
 80048f4:	2253      	movs	r2, #83	; 0x53
 80048f6:	625a      	str	r2, [r3, #36]	; 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 80048f8:	2513      	movs	r5, #19
 80048fa:	197c      	adds	r4, r7, r5
 80048fc:	68fb      	ldr	r3, [r7, #12]
 80048fe:	0018      	movs	r0, r3
 8004900:	f000 f9c9 	bl	8004c96 <RTC_EnterInitMode>
 8004904:	0003      	movs	r3, r0
 8004906:	7023      	strb	r3, [r4, #0]
  if(status == HAL_OK)
 8004908:	0028      	movs	r0, r5
 800490a:	183b      	adds	r3, r7, r0
 800490c:	781b      	ldrb	r3, [r3, #0]
 800490e:	2b00      	cmp	r3, #0
 8004910:	d10c      	bne.n	800492c <HAL_RTC_SetDate+0xf0>
  {
    /* Set the RTC_DR register */
    hrtc->Instance->DR = (uint32_t)(datetmpreg & RTC_DR_RESERVED_MASK);
 8004912:	68fb      	ldr	r3, [r7, #12]
 8004914:	681b      	ldr	r3, [r3, #0]
 8004916:	697a      	ldr	r2, [r7, #20]
 8004918:	4910      	ldr	r1, [pc, #64]	; (800495c <HAL_RTC_SetDate+0x120>)
 800491a:	400a      	ands	r2, r1
 800491c:	605a      	str	r2, [r3, #4]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 800491e:	183c      	adds	r4, r7, r0
 8004920:	68fb      	ldr	r3, [r7, #12]
 8004922:	0018      	movs	r0, r3
 8004924:	f000 f9fa 	bl	8004d1c <RTC_ExitInitMode>
 8004928:	0003      	movs	r3, r0
 800492a:	7023      	strb	r3, [r4, #0]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800492c:	68fb      	ldr	r3, [r7, #12]
 800492e:	681b      	ldr	r3, [r3, #0]
 8004930:	22ff      	movs	r2, #255	; 0xff
 8004932:	625a      	str	r2, [r3, #36]	; 0x24

  if (status == HAL_OK)
 8004934:	2313      	movs	r3, #19
 8004936:	18fb      	adds	r3, r7, r3
 8004938:	781b      	ldrb	r3, [r3, #0]
 800493a:	2b00      	cmp	r3, #0
 800493c:	d103      	bne.n	8004946 <HAL_RTC_SetDate+0x10a>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 800493e:	68fb      	ldr	r3, [r7, #12]
 8004940:	2229      	movs	r2, #41	; 0x29
 8004942:	2101      	movs	r1, #1
 8004944:	5499      	strb	r1, [r3, r2]
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8004946:	68fb      	ldr	r3, [r7, #12]
 8004948:	2228      	movs	r2, #40	; 0x28
 800494a:	2100      	movs	r1, #0
 800494c:	5499      	strb	r1, [r3, r2]

  return status;
 800494e:	2313      	movs	r3, #19
 8004950:	18fb      	adds	r3, r7, r3
 8004952:	781b      	ldrb	r3, [r3, #0]
}
 8004954:	0018      	movs	r0, r3
 8004956:	46bd      	mov	sp, r7
 8004958:	b006      	add	sp, #24
 800495a:	bdb0      	pop	{r4, r5, r7, pc}
 800495c:	00ffff3f 	.word	0x00ffff3f

08004960 <HAL_RTC_GetDate>:
  *            @arg RTC_FORMAT_BIN:  Binary data format
  *            @arg RTC_FORMAT_BCD:  BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 8004960:	b580      	push	{r7, lr}
 8004962:	b086      	sub	sp, #24
 8004964:	af00      	add	r7, sp, #0
 8004966:	60f8      	str	r0, [r7, #12]
 8004968:	60b9      	str	r1, [r7, #8]
 800496a:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Get the DR register */
  datetmpreg = (uint32_t)(hrtc->Instance->DR & RTC_DR_RESERVED_MASK);
 800496c:	68fb      	ldr	r3, [r7, #12]
 800496e:	681b      	ldr	r3, [r3, #0]
 8004970:	685b      	ldr	r3, [r3, #4]
 8004972:	4a21      	ldr	r2, [pc, #132]	; (80049f8 <HAL_RTC_GetDate+0x98>)
 8004974:	4013      	ands	r3, r2
 8004976:	617b      	str	r3, [r7, #20]

  /* Fill the structure fields with the read parameters */
  sDate->Year = (uint8_t)((datetmpreg & (RTC_DR_YT | RTC_DR_YU)) >> RTC_DR_YU_Pos);
 8004978:	697b      	ldr	r3, [r7, #20]
 800497a:	0c1b      	lsrs	r3, r3, #16
 800497c:	b2da      	uxtb	r2, r3
 800497e:	68bb      	ldr	r3, [r7, #8]
 8004980:	70da      	strb	r2, [r3, #3]
  sDate->Month = (uint8_t)((datetmpreg & (RTC_DR_MT | RTC_DR_MU)) >> RTC_DR_MU_Pos);
 8004982:	697b      	ldr	r3, [r7, #20]
 8004984:	0a1b      	lsrs	r3, r3, #8
 8004986:	b2db      	uxtb	r3, r3
 8004988:	221f      	movs	r2, #31
 800498a:	4013      	ands	r3, r2
 800498c:	b2da      	uxtb	r2, r3
 800498e:	68bb      	ldr	r3, [r7, #8]
 8004990:	705a      	strb	r2, [r3, #1]
  sDate->Date = (uint8_t)((datetmpreg & (RTC_DR_DT | RTC_DR_DU)) >> RTC_DR_DU_Pos);
 8004992:	697b      	ldr	r3, [r7, #20]
 8004994:	b2db      	uxtb	r3, r3
 8004996:	223f      	movs	r2, #63	; 0x3f
 8004998:	4013      	ands	r3, r2
 800499a:	b2da      	uxtb	r2, r3
 800499c:	68bb      	ldr	r3, [r7, #8]
 800499e:	709a      	strb	r2, [r3, #2]
  sDate->WeekDay = (uint8_t)((datetmpreg & (RTC_DR_WDU)) >> RTC_DR_WDU_Pos);
 80049a0:	697b      	ldr	r3, [r7, #20]
 80049a2:	0b5b      	lsrs	r3, r3, #13
 80049a4:	b2db      	uxtb	r3, r3
 80049a6:	2207      	movs	r2, #7
 80049a8:	4013      	ands	r3, r2
 80049aa:	b2da      	uxtb	r2, r3
 80049ac:	68bb      	ldr	r3, [r7, #8]
 80049ae:	701a      	strb	r2, [r3, #0]

  /* Check the input parameters format */
  if(Format == RTC_FORMAT_BIN)
 80049b0:	687b      	ldr	r3, [r7, #4]
 80049b2:	2b00      	cmp	r3, #0
 80049b4:	d11a      	bne.n	80049ec <HAL_RTC_GetDate+0x8c>
  {
    /* Convert the date structure parameters to Binary format */
    sDate->Year = (uint8_t)RTC_Bcd2ToByte(sDate->Year);
 80049b6:	68bb      	ldr	r3, [r7, #8]
 80049b8:	78db      	ldrb	r3, [r3, #3]
 80049ba:	0018      	movs	r0, r3
 80049bc:	f000 fa1a 	bl	8004df4 <RTC_Bcd2ToByte>
 80049c0:	0003      	movs	r3, r0
 80049c2:	001a      	movs	r2, r3
 80049c4:	68bb      	ldr	r3, [r7, #8]
 80049c6:	70da      	strb	r2, [r3, #3]
    sDate->Month = (uint8_t)RTC_Bcd2ToByte(sDate->Month);
 80049c8:	68bb      	ldr	r3, [r7, #8]
 80049ca:	785b      	ldrb	r3, [r3, #1]
 80049cc:	0018      	movs	r0, r3
 80049ce:	f000 fa11 	bl	8004df4 <RTC_Bcd2ToByte>
 80049d2:	0003      	movs	r3, r0
 80049d4:	001a      	movs	r2, r3
 80049d6:	68bb      	ldr	r3, [r7, #8]
 80049d8:	705a      	strb	r2, [r3, #1]
    sDate->Date = (uint8_t)RTC_Bcd2ToByte(sDate->Date);
 80049da:	68bb      	ldr	r3, [r7, #8]
 80049dc:	789b      	ldrb	r3, [r3, #2]
 80049de:	0018      	movs	r0, r3
 80049e0:	f000 fa08 	bl	8004df4 <RTC_Bcd2ToByte>
 80049e4:	0003      	movs	r3, r0
 80049e6:	001a      	movs	r2, r3
 80049e8:	68bb      	ldr	r3, [r7, #8]
 80049ea:	709a      	strb	r2, [r3, #2]
  }
  return HAL_OK;
 80049ec:	2300      	movs	r3, #0
}
 80049ee:	0018      	movs	r0, r3
 80049f0:	46bd      	mov	sp, r7
 80049f2:	b006      	add	sp, #24
 80049f4:	bd80      	pop	{r7, pc}
 80049f6:	46c0      	nop			; (mov r8, r8)
 80049f8:	00ffff3f 	.word	0x00ffff3f

080049fc <HAL_RTC_SetAlarm>:
  *             @arg RTC_FORMAT_BIN: Binary data format
  *             @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetAlarm(RTC_HandleTypeDef *hrtc, RTC_AlarmTypeDef *sAlarm, uint32_t Format)
{
 80049fc:	b590      	push	{r4, r7, lr}
 80049fe:	b089      	sub	sp, #36	; 0x24
 8004a00:	af00      	add	r7, sp, #0
 8004a02:	60f8      	str	r0, [r7, #12]
 8004a04:	60b9      	str	r1, [r7, #8]
 8004a06:	607a      	str	r2, [r7, #4]
  assert_param(IS_RTC_ALARM_DATE_WEEKDAY_SEL(sAlarm->AlarmDateWeekDaySel));
  assert_param(IS_RTC_ALARM_SUB_SECOND_VALUE(sAlarm->AlarmTime.SubSeconds));
  assert_param(IS_RTC_ALARM_SUB_SECOND_MASK(sAlarm->AlarmSubSecondMask));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8004a08:	68fb      	ldr	r3, [r7, #12]
 8004a0a:	2228      	movs	r2, #40	; 0x28
 8004a0c:	5c9b      	ldrb	r3, [r3, r2]
 8004a0e:	2b01      	cmp	r3, #1
 8004a10:	d101      	bne.n	8004a16 <HAL_RTC_SetAlarm+0x1a>
 8004a12:	2302      	movs	r3, #2
 8004a14:	e10c      	b.n	8004c30 <HAL_RTC_SetAlarm+0x234>
 8004a16:	68fb      	ldr	r3, [r7, #12]
 8004a18:	2228      	movs	r2, #40	; 0x28
 8004a1a:	2101      	movs	r1, #1
 8004a1c:	5499      	strb	r1, [r3, r2]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8004a1e:	68fb      	ldr	r3, [r7, #12]
 8004a20:	2229      	movs	r2, #41	; 0x29
 8004a22:	2102      	movs	r1, #2
 8004a24:	5499      	strb	r1, [r3, r2]

  if(Format == RTC_FORMAT_BIN)
 8004a26:	687b      	ldr	r3, [r7, #4]
 8004a28:	2b00      	cmp	r3, #0
 8004a2a:	d136      	bne.n	8004a9a <HAL_RTC_SetAlarm+0x9e>
  {
    if((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 8004a2c:	68fb      	ldr	r3, [r7, #12]
 8004a2e:	681b      	ldr	r3, [r3, #0]
 8004a30:	699b      	ldr	r3, [r3, #24]
 8004a32:	2240      	movs	r2, #64	; 0x40
 8004a34:	4013      	ands	r3, r2
 8004a36:	d102      	bne.n	8004a3e <HAL_RTC_SetAlarm+0x42>
      assert_param(IS_RTC_HOUR12(sAlarm->AlarmTime.Hours));
      assert_param(IS_RTC_HOURFORMAT12(sAlarm->AlarmTime.TimeFormat));
    }
    else
    {
      sAlarm->AlarmTime.TimeFormat = 0x00U;
 8004a38:	68bb      	ldr	r3, [r7, #8]
 8004a3a:	2200      	movs	r2, #0
 8004a3c:	70da      	strb	r2, [r3, #3]
    else
    {
      assert_param(IS_RTC_ALARM_DATE_WEEKDAY_WEEKDAY(sAlarm->AlarmDateWeekDay));
    }

    tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours) << RTC_ALRMAR_HU_Pos) | \
 8004a3e:	68bb      	ldr	r3, [r7, #8]
 8004a40:	781b      	ldrb	r3, [r3, #0]
 8004a42:	0018      	movs	r0, r3
 8004a44:	f000 f9ae 	bl	8004da4 <RTC_ByteToBcd2>
 8004a48:	0003      	movs	r3, r0
 8004a4a:	041c      	lsls	r4, r3, #16
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Minutes) << RTC_ALRMAR_MNU_Pos) | \
 8004a4c:	68bb      	ldr	r3, [r7, #8]
 8004a4e:	785b      	ldrb	r3, [r3, #1]
 8004a50:	0018      	movs	r0, r3
 8004a52:	f000 f9a7 	bl	8004da4 <RTC_ByteToBcd2>
 8004a56:	0003      	movs	r3, r0
 8004a58:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours) << RTC_ALRMAR_HU_Pos) | \
 8004a5a:	431c      	orrs	r4, r3
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Seconds) << RTC_ALRMAR_SU_Pos) | \
 8004a5c:	68bb      	ldr	r3, [r7, #8]
 8004a5e:	789b      	ldrb	r3, [r3, #2]
 8004a60:	0018      	movs	r0, r3
 8004a62:	f000 f99f 	bl	8004da4 <RTC_ByteToBcd2>
 8004a66:	0003      	movs	r3, r0
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Minutes) << RTC_ALRMAR_MNU_Pos) | \
 8004a68:	0022      	movs	r2, r4
 8004a6a:	431a      	orrs	r2, r3
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << RTC_ALRMAR_PM_Pos) | \
 8004a6c:	68bb      	ldr	r3, [r7, #8]
 8004a6e:	78db      	ldrb	r3, [r3, #3]
 8004a70:	059b      	lsls	r3, r3, #22
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Seconds) << RTC_ALRMAR_SU_Pos) | \
 8004a72:	431a      	orrs	r2, r3
 8004a74:	0014      	movs	r4, r2
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmDateWeekDay) << RTC_ALRMAR_DU_Pos) | \
 8004a76:	68bb      	ldr	r3, [r7, #8]
 8004a78:	2220      	movs	r2, #32
 8004a7a:	5c9b      	ldrb	r3, [r3, r2]
 8004a7c:	0018      	movs	r0, r3
 8004a7e:	f000 f991 	bl	8004da4 <RTC_ByteToBcd2>
 8004a82:	0003      	movs	r3, r0
 8004a84:	061b      	lsls	r3, r3, #24
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << RTC_ALRMAR_PM_Pos) | \
 8004a86:	0022      	movs	r2, r4
 8004a88:	431a      	orrs	r2, r3
              ((uint32_t)sAlarm->AlarmDateWeekDaySel) | \
 8004a8a:	68bb      	ldr	r3, [r7, #8]
 8004a8c:	69db      	ldr	r3, [r3, #28]
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmDateWeekDay) << RTC_ALRMAR_DU_Pos) | \
 8004a8e:	431a      	orrs	r2, r3
              ((uint32_t)sAlarm->AlarmMask));
 8004a90:	68bb      	ldr	r3, [r7, #8]
 8004a92:	695b      	ldr	r3, [r3, #20]
    tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours) << RTC_ALRMAR_HU_Pos) | \
 8004a94:	4313      	orrs	r3, r2
 8004a96:	61fb      	str	r3, [r7, #28]
 8004a98:	e022      	b.n	8004ae0 <HAL_RTC_SetAlarm+0xe4>
  }
  else
  {
    if((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 8004a9a:	68fb      	ldr	r3, [r7, #12]
 8004a9c:	681b      	ldr	r3, [r3, #0]
 8004a9e:	699b      	ldr	r3, [r3, #24]
 8004aa0:	2240      	movs	r2, #64	; 0x40
 8004aa2:	4013      	ands	r3, r2
 8004aa4:	d102      	bne.n	8004aac <HAL_RTC_SetAlarm+0xb0>
      assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sAlarm->AlarmTime.Hours)));
      assert_param(IS_RTC_HOURFORMAT12(sAlarm->AlarmTime.TimeFormat));
    }
    else
    {
      sAlarm->AlarmTime.TimeFormat = 0x00U;
 8004aa6:	68bb      	ldr	r3, [r7, #8]
 8004aa8:	2200      	movs	r2, #0
 8004aaa:	70da      	strb	r2, [r3, #3]
    else
    {
      assert_param(IS_RTC_ALARM_DATE_WEEKDAY_WEEKDAY(RTC_Bcd2ToByte(sAlarm->AlarmDateWeekDay)));
    }

    tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours) << RTC_ALRMAR_HU_Pos) | \
 8004aac:	68bb      	ldr	r3, [r7, #8]
 8004aae:	781b      	ldrb	r3, [r3, #0]
 8004ab0:	041a      	lsls	r2, r3, #16
              ((uint32_t)(sAlarm->AlarmTime.Minutes) << RTC_ALRMAR_MNU_Pos) | \
 8004ab2:	68bb      	ldr	r3, [r7, #8]
 8004ab4:	785b      	ldrb	r3, [r3, #1]
 8004ab6:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours) << RTC_ALRMAR_HU_Pos) | \
 8004ab8:	4313      	orrs	r3, r2
              ((uint32_t)(sAlarm->AlarmTime.Seconds) << RTC_ALRMAR_SU_Pos) | \
 8004aba:	68ba      	ldr	r2, [r7, #8]
 8004abc:	7892      	ldrb	r2, [r2, #2]
              ((uint32_t)(sAlarm->AlarmTime.Minutes) << RTC_ALRMAR_MNU_Pos) | \
 8004abe:	431a      	orrs	r2, r3
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << RTC_ALRMAR_PM_Pos) | \
 8004ac0:	68bb      	ldr	r3, [r7, #8]
 8004ac2:	78db      	ldrb	r3, [r3, #3]
 8004ac4:	059b      	lsls	r3, r3, #22
              ((uint32_t)(sAlarm->AlarmTime.Seconds) << RTC_ALRMAR_SU_Pos) | \
 8004ac6:	431a      	orrs	r2, r3
              ((uint32_t)(sAlarm->AlarmDateWeekDay) << RTC_ALRMAR_DU_Pos) | \
 8004ac8:	68bb      	ldr	r3, [r7, #8]
 8004aca:	2120      	movs	r1, #32
 8004acc:	5c5b      	ldrb	r3, [r3, r1]
 8004ace:	061b      	lsls	r3, r3, #24
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << RTC_ALRMAR_PM_Pos) | \
 8004ad0:	431a      	orrs	r2, r3
              ((uint32_t)sAlarm->AlarmDateWeekDaySel) | \
 8004ad2:	68bb      	ldr	r3, [r7, #8]
 8004ad4:	69db      	ldr	r3, [r3, #28]
              ((uint32_t)(sAlarm->AlarmDateWeekDay) << RTC_ALRMAR_DU_Pos) | \
 8004ad6:	431a      	orrs	r2, r3
              ((uint32_t)sAlarm->AlarmMask));
 8004ad8:	68bb      	ldr	r3, [r7, #8]
 8004ada:	695b      	ldr	r3, [r3, #20]
    tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours) << RTC_ALRMAR_HU_Pos) | \
 8004adc:	4313      	orrs	r3, r2
 8004ade:	61fb      	str	r3, [r7, #28]
  }

  /* Configure the Alarm A or Alarm B Sub Second registers */
  subsecondtmpreg = (uint32_t)((uint32_t)(sAlarm->AlarmTime.SubSeconds) | (uint32_t)(sAlarm->AlarmSubSecondMask));
 8004ae0:	68bb      	ldr	r3, [r7, #8]
 8004ae2:	685a      	ldr	r2, [r3, #4]
 8004ae4:	68bb      	ldr	r3, [r7, #8]
 8004ae6:	699b      	ldr	r3, [r3, #24]
 8004ae8:	4313      	orrs	r3, r2
 8004aea:	61bb      	str	r3, [r7, #24]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8004aec:	68fb      	ldr	r3, [r7, #12]
 8004aee:	681b      	ldr	r3, [r3, #0]
 8004af0:	22ca      	movs	r2, #202	; 0xca
 8004af2:	625a      	str	r2, [r3, #36]	; 0x24
 8004af4:	68fb      	ldr	r3, [r7, #12]
 8004af6:	681b      	ldr	r3, [r3, #0]
 8004af8:	2253      	movs	r2, #83	; 0x53
 8004afa:	625a      	str	r2, [r3, #36]	; 0x24

  /* Configure the Alarm register */
  if(sAlarm->Alarm == RTC_ALARM_A)
 8004afc:	68bb      	ldr	r3, [r7, #8]
 8004afe:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8004b00:	2380      	movs	r3, #128	; 0x80
 8004b02:	005b      	lsls	r3, r3, #1
 8004b04:	429a      	cmp	r2, r3
 8004b06:	d143      	bne.n	8004b90 <HAL_RTC_SetAlarm+0x194>
  {
    /* Disable the Alarm A interrupt */
    __HAL_RTC_ALARMA_DISABLE(hrtc);
 8004b08:	68fb      	ldr	r3, [r7, #12]
 8004b0a:	681b      	ldr	r3, [r3, #0]
 8004b0c:	699a      	ldr	r2, [r3, #24]
 8004b0e:	68fb      	ldr	r3, [r7, #12]
 8004b10:	681b      	ldr	r3, [r3, #0]
 8004b12:	4949      	ldr	r1, [pc, #292]	; (8004c38 <HAL_RTC_SetAlarm+0x23c>)
 8004b14:	400a      	ands	r2, r1
 8004b16:	619a      	str	r2, [r3, #24]

    /* In case of interrupt mode is used, the interrupt source must disabled */
    __HAL_RTC_ALARM_DISABLE_IT(hrtc, RTC_IT_ALRA);
 8004b18:	68fb      	ldr	r3, [r7, #12]
 8004b1a:	681b      	ldr	r3, [r3, #0]
 8004b1c:	699a      	ldr	r2, [r3, #24]
 8004b1e:	68fb      	ldr	r3, [r7, #12]
 8004b20:	681b      	ldr	r3, [r3, #0]
 8004b22:	4946      	ldr	r1, [pc, #280]	; (8004c3c <HAL_RTC_SetAlarm+0x240>)
 8004b24:	400a      	ands	r2, r1
 8004b26:	619a      	str	r2, [r3, #24]

    tickstart = HAL_GetTick();
 8004b28:	f7fe fa50 	bl	8002fcc <HAL_GetTick>
 8004b2c:	0003      	movs	r3, r0
 8004b2e:	617b      	str	r3, [r7, #20]
    /* Wait till RTC ALRAWF flag is set and if Time out is reached exit */
    while(__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRAWF) == 0U)
 8004b30:	e016      	b.n	8004b60 <HAL_RTC_SetAlarm+0x164>
    {
      if((HAL_GetTick() - tickstart ) > RTC_TIMEOUT_VALUE)
 8004b32:	f7fe fa4b 	bl	8002fcc <HAL_GetTick>
 8004b36:	0002      	movs	r2, r0
 8004b38:	697b      	ldr	r3, [r7, #20]
 8004b3a:	1ad2      	subs	r2, r2, r3
 8004b3c:	23fa      	movs	r3, #250	; 0xfa
 8004b3e:	009b      	lsls	r3, r3, #2
 8004b40:	429a      	cmp	r2, r3
 8004b42:	d90d      	bls.n	8004b60 <HAL_RTC_SetAlarm+0x164>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8004b44:	68fb      	ldr	r3, [r7, #12]
 8004b46:	681b      	ldr	r3, [r3, #0]
 8004b48:	22ff      	movs	r2, #255	; 0xff
 8004b4a:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8004b4c:	68fb      	ldr	r3, [r7, #12]
 8004b4e:	2229      	movs	r2, #41	; 0x29
 8004b50:	2103      	movs	r1, #3
 8004b52:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 8004b54:	68fb      	ldr	r3, [r7, #12]
 8004b56:	2228      	movs	r2, #40	; 0x28
 8004b58:	2100      	movs	r1, #0
 8004b5a:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 8004b5c:	2303      	movs	r3, #3
 8004b5e:	e067      	b.n	8004c30 <HAL_RTC_SetAlarm+0x234>
    while(__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRAWF) == 0U)
 8004b60:	68fb      	ldr	r3, [r7, #12]
 8004b62:	681b      	ldr	r3, [r3, #0]
 8004b64:	68db      	ldr	r3, [r3, #12]
 8004b66:	2201      	movs	r2, #1
 8004b68:	4013      	ands	r3, r2
 8004b6a:	d0e2      	beq.n	8004b32 <HAL_RTC_SetAlarm+0x136>
      }
    }

    hrtc->Instance->ALRMAR = (uint32_t)tmpreg;
 8004b6c:	68fb      	ldr	r3, [r7, #12]
 8004b6e:	681b      	ldr	r3, [r3, #0]
 8004b70:	69fa      	ldr	r2, [r7, #28]
 8004b72:	641a      	str	r2, [r3, #64]	; 0x40
    /* Configure the Alarm A Sub Second register */
    hrtc->Instance->ALRMASSR = subsecondtmpreg;
 8004b74:	68fb      	ldr	r3, [r7, #12]
 8004b76:	681b      	ldr	r3, [r3, #0]
 8004b78:	69ba      	ldr	r2, [r7, #24]
 8004b7a:	645a      	str	r2, [r3, #68]	; 0x44
    /* Configure the Alarm state: Enable Alarm */
    __HAL_RTC_ALARMA_ENABLE(hrtc);
 8004b7c:	68fb      	ldr	r3, [r7, #12]
 8004b7e:	681b      	ldr	r3, [r3, #0]
 8004b80:	699a      	ldr	r2, [r3, #24]
 8004b82:	68fb      	ldr	r3, [r7, #12]
 8004b84:	681b      	ldr	r3, [r3, #0]
 8004b86:	2180      	movs	r1, #128	; 0x80
 8004b88:	0049      	lsls	r1, r1, #1
 8004b8a:	430a      	orrs	r2, r1
 8004b8c:	619a      	str	r2, [r3, #24]
 8004b8e:	e042      	b.n	8004c16 <HAL_RTC_SetAlarm+0x21a>
  }
  else
  {
    /* Disable the Alarm B interrupt */
    __HAL_RTC_ALARMB_DISABLE(hrtc);
 8004b90:	68fb      	ldr	r3, [r7, #12]
 8004b92:	681b      	ldr	r3, [r3, #0]
 8004b94:	699a      	ldr	r2, [r3, #24]
 8004b96:	68fb      	ldr	r3, [r7, #12]
 8004b98:	681b      	ldr	r3, [r3, #0]
 8004b9a:	4929      	ldr	r1, [pc, #164]	; (8004c40 <HAL_RTC_SetAlarm+0x244>)
 8004b9c:	400a      	ands	r2, r1
 8004b9e:	619a      	str	r2, [r3, #24]

    /* In case of interrupt mode is used, the interrupt source must disabled */
    __HAL_RTC_ALARM_DISABLE_IT(hrtc, RTC_IT_ALRB);
 8004ba0:	68fb      	ldr	r3, [r7, #12]
 8004ba2:	681b      	ldr	r3, [r3, #0]
 8004ba4:	699a      	ldr	r2, [r3, #24]
 8004ba6:	68fb      	ldr	r3, [r7, #12]
 8004ba8:	681b      	ldr	r3, [r3, #0]
 8004baa:	4926      	ldr	r1, [pc, #152]	; (8004c44 <HAL_RTC_SetAlarm+0x248>)
 8004bac:	400a      	ands	r2, r1
 8004bae:	619a      	str	r2, [r3, #24]

    tickstart = HAL_GetTick();
 8004bb0:	f7fe fa0c 	bl	8002fcc <HAL_GetTick>
 8004bb4:	0003      	movs	r3, r0
 8004bb6:	617b      	str	r3, [r7, #20]
    /* Wait till RTC ALRBWF flag is set and if Time out is reached exit */
    while(__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRBWF) == 0U)
 8004bb8:	e016      	b.n	8004be8 <HAL_RTC_SetAlarm+0x1ec>
    {
      if((HAL_GetTick() - tickstart ) > RTC_TIMEOUT_VALUE)
 8004bba:	f7fe fa07 	bl	8002fcc <HAL_GetTick>
 8004bbe:	0002      	movs	r2, r0
 8004bc0:	697b      	ldr	r3, [r7, #20]
 8004bc2:	1ad2      	subs	r2, r2, r3
 8004bc4:	23fa      	movs	r3, #250	; 0xfa
 8004bc6:	009b      	lsls	r3, r3, #2
 8004bc8:	429a      	cmp	r2, r3
 8004bca:	d90d      	bls.n	8004be8 <HAL_RTC_SetAlarm+0x1ec>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8004bcc:	68fb      	ldr	r3, [r7, #12]
 8004bce:	681b      	ldr	r3, [r3, #0]
 8004bd0:	22ff      	movs	r2, #255	; 0xff
 8004bd2:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8004bd4:	68fb      	ldr	r3, [r7, #12]
 8004bd6:	2229      	movs	r2, #41	; 0x29
 8004bd8:	2103      	movs	r1, #3
 8004bda:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 8004bdc:	68fb      	ldr	r3, [r7, #12]
 8004bde:	2228      	movs	r2, #40	; 0x28
 8004be0:	2100      	movs	r1, #0
 8004be2:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 8004be4:	2303      	movs	r3, #3
 8004be6:	e023      	b.n	8004c30 <HAL_RTC_SetAlarm+0x234>
    while(__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRBWF) == 0U)
 8004be8:	68fb      	ldr	r3, [r7, #12]
 8004bea:	681b      	ldr	r3, [r3, #0]
 8004bec:	68db      	ldr	r3, [r3, #12]
 8004bee:	2202      	movs	r2, #2
 8004bf0:	4013      	ands	r3, r2
 8004bf2:	d0e2      	beq.n	8004bba <HAL_RTC_SetAlarm+0x1be>
      }
    }

    hrtc->Instance->ALRMBR = (uint32_t)tmpreg;
 8004bf4:	68fb      	ldr	r3, [r7, #12]
 8004bf6:	681b      	ldr	r3, [r3, #0]
 8004bf8:	69fa      	ldr	r2, [r7, #28]
 8004bfa:	649a      	str	r2, [r3, #72]	; 0x48
    /* Configure the Alarm B Sub Second register */
    hrtc->Instance->ALRMBSSR = subsecondtmpreg;
 8004bfc:	68fb      	ldr	r3, [r7, #12]
 8004bfe:	681b      	ldr	r3, [r3, #0]
 8004c00:	69ba      	ldr	r2, [r7, #24]
 8004c02:	64da      	str	r2, [r3, #76]	; 0x4c
    /* Configure the Alarm state: Enable Alarm */
    __HAL_RTC_ALARMB_ENABLE(hrtc);
 8004c04:	68fb      	ldr	r3, [r7, #12]
 8004c06:	681b      	ldr	r3, [r3, #0]
 8004c08:	699a      	ldr	r2, [r3, #24]
 8004c0a:	68fb      	ldr	r3, [r7, #12]
 8004c0c:	681b      	ldr	r3, [r3, #0]
 8004c0e:	2180      	movs	r1, #128	; 0x80
 8004c10:	0089      	lsls	r1, r1, #2
 8004c12:	430a      	orrs	r2, r1
 8004c14:	619a      	str	r2, [r3, #24]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8004c16:	68fb      	ldr	r3, [r7, #12]
 8004c18:	681b      	ldr	r3, [r3, #0]
 8004c1a:	22ff      	movs	r2, #255	; 0xff
 8004c1c:	625a      	str	r2, [r3, #36]	; 0x24

  /* Change RTC state */
  hrtc->State = HAL_RTC_STATE_READY;
 8004c1e:	68fb      	ldr	r3, [r7, #12]
 8004c20:	2229      	movs	r2, #41	; 0x29
 8004c22:	2101      	movs	r1, #1
 8004c24:	5499      	strb	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8004c26:	68fb      	ldr	r3, [r7, #12]
 8004c28:	2228      	movs	r2, #40	; 0x28
 8004c2a:	2100      	movs	r1, #0
 8004c2c:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8004c2e:	2300      	movs	r3, #0
}
 8004c30:	0018      	movs	r0, r3
 8004c32:	46bd      	mov	sp, r7
 8004c34:	b009      	add	sp, #36	; 0x24
 8004c36:	bd90      	pop	{r4, r7, pc}
 8004c38:	fffffeff 	.word	0xfffffeff
 8004c3c:	ffffefff 	.word	0xffffefff
 8004c40:	fffffdff 	.word	0xfffffdff
 8004c44:	ffffdfff 	.word	0xffffdfff

08004c48 <HAL_RTC_WaitForSynchro>:
  *         correctly copied into the RTC_TR and RTC_DR shadow registers.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef* hrtc)
{
 8004c48:	b580      	push	{r7, lr}
 8004c4a:	b084      	sub	sp, #16
 8004c4c:	af00      	add	r7, sp, #0
 8004c4e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Clear RSF flag */
  hrtc->Instance->ICSR &= (uint32_t)RTC_RSF_MASK;
 8004c50:	687b      	ldr	r3, [r7, #4]
 8004c52:	681b      	ldr	r3, [r3, #0]
 8004c54:	68da      	ldr	r2, [r3, #12]
 8004c56:	687b      	ldr	r3, [r7, #4]
 8004c58:	681b      	ldr	r3, [r3, #0]
 8004c5a:	21a0      	movs	r1, #160	; 0xa0
 8004c5c:	438a      	bics	r2, r1
 8004c5e:	60da      	str	r2, [r3, #12]

  tickstart = HAL_GetTick();
 8004c60:	f7fe f9b4 	bl	8002fcc <HAL_GetTick>
 8004c64:	0003      	movs	r3, r0
 8004c66:	60fb      	str	r3, [r7, #12]

  /* Wait the registers to be synchronised */
  while((hrtc->Instance->ICSR & RTC_ICSR_RSF) == 0U)
 8004c68:	e00a      	b.n	8004c80 <HAL_RTC_WaitForSynchro+0x38>
  {
    if((HAL_GetTick() - tickstart ) > RTC_TIMEOUT_VALUE)
 8004c6a:	f7fe f9af 	bl	8002fcc <HAL_GetTick>
 8004c6e:	0002      	movs	r2, r0
 8004c70:	68fb      	ldr	r3, [r7, #12]
 8004c72:	1ad2      	subs	r2, r2, r3
 8004c74:	23fa      	movs	r3, #250	; 0xfa
 8004c76:	009b      	lsls	r3, r3, #2
 8004c78:	429a      	cmp	r2, r3
 8004c7a:	d901      	bls.n	8004c80 <HAL_RTC_WaitForSynchro+0x38>
    {
      return HAL_TIMEOUT;
 8004c7c:	2303      	movs	r3, #3
 8004c7e:	e006      	b.n	8004c8e <HAL_RTC_WaitForSynchro+0x46>
  while((hrtc->Instance->ICSR & RTC_ICSR_RSF) == 0U)
 8004c80:	687b      	ldr	r3, [r7, #4]
 8004c82:	681b      	ldr	r3, [r3, #0]
 8004c84:	68db      	ldr	r3, [r3, #12]
 8004c86:	2220      	movs	r2, #32
 8004c88:	4013      	ands	r3, r2
 8004c8a:	d0ee      	beq.n	8004c6a <HAL_RTC_WaitForSynchro+0x22>
    }
  }

  return HAL_OK;
 8004c8c:	2300      	movs	r3, #0
}
 8004c8e:	0018      	movs	r0, r3
 8004c90:	46bd      	mov	sp, r7
 8004c92:	b004      	add	sp, #16
 8004c94:	bd80      	pop	{r7, pc}

08004c96 <RTC_EnterInitMode>:
  *         __HAL_RTC_WRITEPROTECTION_DISABLE() before calling this function.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef* hrtc)
{
 8004c96:	b580      	push	{r7, lr}
 8004c98:	b084      	sub	sp, #16
 8004c9a:	af00      	add	r7, sp, #0
 8004c9c:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;  
 8004c9e:	230f      	movs	r3, #15
 8004ca0:	18fb      	adds	r3, r7, r3
 8004ca2:	2200      	movs	r2, #0
 8004ca4:	701a      	strb	r2, [r3, #0]

  /* Check if the Initialization mode is set */
  if((hrtc->Instance->ICSR & RTC_ICSR_INITF) == 0U)
 8004ca6:	687b      	ldr	r3, [r7, #4]
 8004ca8:	681b      	ldr	r3, [r3, #0]
 8004caa:	68db      	ldr	r3, [r3, #12]
 8004cac:	2240      	movs	r2, #64	; 0x40
 8004cae:	4013      	ands	r3, r2
 8004cb0:	d12c      	bne.n	8004d0c <RTC_EnterInitMode+0x76>
  {
    /* Set the Initialization mode */
    SET_BIT(hrtc->Instance->ICSR, RTC_ICSR_INIT);
 8004cb2:	687b      	ldr	r3, [r7, #4]
 8004cb4:	681b      	ldr	r3, [r3, #0]
 8004cb6:	68da      	ldr	r2, [r3, #12]
 8004cb8:	687b      	ldr	r3, [r7, #4]
 8004cba:	681b      	ldr	r3, [r3, #0]
 8004cbc:	2180      	movs	r1, #128	; 0x80
 8004cbe:	430a      	orrs	r2, r1
 8004cc0:	60da      	str	r2, [r3, #12]

    tickstart = HAL_GetTick();
 8004cc2:	f7fe f983 	bl	8002fcc <HAL_GetTick>
 8004cc6:	0003      	movs	r3, r0
 8004cc8:	60bb      	str	r3, [r7, #8]
    /* Wait till RTC is in INIT state and if Time out is reached exit */
    while(((hrtc->Instance->ICSR & RTC_ICSR_INITF) == 0U) && (status != HAL_TIMEOUT))
 8004cca:	e014      	b.n	8004cf6 <RTC_EnterInitMode+0x60>
    {
      if((HAL_GetTick()  - tickstart ) > RTC_TIMEOUT_VALUE)
 8004ccc:	f7fe f97e 	bl	8002fcc <HAL_GetTick>
 8004cd0:	0002      	movs	r2, r0
 8004cd2:	68bb      	ldr	r3, [r7, #8]
 8004cd4:	1ad2      	subs	r2, r2, r3
 8004cd6:	200f      	movs	r0, #15
 8004cd8:	183b      	adds	r3, r7, r0
 8004cda:	1839      	adds	r1, r7, r0
 8004cdc:	7809      	ldrb	r1, [r1, #0]
 8004cde:	7019      	strb	r1, [r3, #0]
 8004ce0:	23fa      	movs	r3, #250	; 0xfa
 8004ce2:	009b      	lsls	r3, r3, #2
 8004ce4:	429a      	cmp	r2, r3
 8004ce6:	d906      	bls.n	8004cf6 <RTC_EnterInitMode+0x60>
      {
        status = HAL_TIMEOUT;
 8004ce8:	183b      	adds	r3, r7, r0
 8004cea:	2203      	movs	r2, #3
 8004cec:	701a      	strb	r2, [r3, #0]
        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8004cee:	687b      	ldr	r3, [r7, #4]
 8004cf0:	2229      	movs	r2, #41	; 0x29
 8004cf2:	2103      	movs	r1, #3
 8004cf4:	5499      	strb	r1, [r3, r2]
    while(((hrtc->Instance->ICSR & RTC_ICSR_INITF) == 0U) && (status != HAL_TIMEOUT))
 8004cf6:	687b      	ldr	r3, [r7, #4]
 8004cf8:	681b      	ldr	r3, [r3, #0]
 8004cfa:	68db      	ldr	r3, [r3, #12]
 8004cfc:	2240      	movs	r2, #64	; 0x40
 8004cfe:	4013      	ands	r3, r2
 8004d00:	d104      	bne.n	8004d0c <RTC_EnterInitMode+0x76>
 8004d02:	230f      	movs	r3, #15
 8004d04:	18fb      	adds	r3, r7, r3
 8004d06:	781b      	ldrb	r3, [r3, #0]
 8004d08:	2b03      	cmp	r3, #3
 8004d0a:	d1df      	bne.n	8004ccc <RTC_EnterInitMode+0x36>
      }
    }
  }

  return status;
 8004d0c:	230f      	movs	r3, #15
 8004d0e:	18fb      	adds	r3, r7, r3
 8004d10:	781b      	ldrb	r3, [r3, #0]
}
 8004d12:	0018      	movs	r0, r3
 8004d14:	46bd      	mov	sp, r7
 8004d16:	b004      	add	sp, #16
 8004d18:	bd80      	pop	{r7, pc}
	...

08004d1c <RTC_ExitInitMode>:
  * @brief  Exit the RTC Initialization mode.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_ExitInitMode(RTC_HandleTypeDef *hrtc)
{
 8004d1c:	b590      	push	{r4, r7, lr}
 8004d1e:	b085      	sub	sp, #20
 8004d20:	af00      	add	r7, sp, #0
 8004d22:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004d24:	240f      	movs	r4, #15
 8004d26:	193b      	adds	r3, r7, r4
 8004d28:	2200      	movs	r2, #0
 8004d2a:	701a      	strb	r2, [r3, #0]

  /* Exit Initialization mode */
  CLEAR_BIT(RTC->ICSR, RTC_ICSR_INIT);
 8004d2c:	4b1c      	ldr	r3, [pc, #112]	; (8004da0 <RTC_ExitInitMode+0x84>)
 8004d2e:	68da      	ldr	r2, [r3, #12]
 8004d30:	4b1b      	ldr	r3, [pc, #108]	; (8004da0 <RTC_ExitInitMode+0x84>)
 8004d32:	2180      	movs	r1, #128	; 0x80
 8004d34:	438a      	bics	r2, r1
 8004d36:	60da      	str	r2, [r3, #12]

  /* If CR_BYPSHAD bit = 0, wait for synchro */
  if (READ_BIT(RTC->CR, RTC_CR_BYPSHAD) == 0U)
 8004d38:	4b19      	ldr	r3, [pc, #100]	; (8004da0 <RTC_ExitInitMode+0x84>)
 8004d3a:	699b      	ldr	r3, [r3, #24]
 8004d3c:	2220      	movs	r2, #32
 8004d3e:	4013      	ands	r3, r2
 8004d40:	d10d      	bne.n	8004d5e <RTC_ExitInitMode+0x42>
  {
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8004d42:	687b      	ldr	r3, [r7, #4]
 8004d44:	0018      	movs	r0, r3
 8004d46:	f7ff ff7f 	bl	8004c48 <HAL_RTC_WaitForSynchro>
 8004d4a:	1e03      	subs	r3, r0, #0
 8004d4c:	d021      	beq.n	8004d92 <RTC_ExitInitMode+0x76>
    {
      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8004d4e:	687b      	ldr	r3, [r7, #4]
 8004d50:	2229      	movs	r2, #41	; 0x29
 8004d52:	2103      	movs	r1, #3
 8004d54:	5499      	strb	r1, [r3, r2]
      status = HAL_TIMEOUT;
 8004d56:	193b      	adds	r3, r7, r4
 8004d58:	2203      	movs	r2, #3
 8004d5a:	701a      	strb	r2, [r3, #0]
 8004d5c:	e019      	b.n	8004d92 <RTC_ExitInitMode+0x76>
  }
  else /* WA 2.7.1 Calendar initialization may fail in case of consecutive INIT mode entry.
          Please look at STM32G0 Errata sheet on the internet for details. */
  {
    /* Clear BYPSHAD bit */
    CLEAR_BIT(RTC->CR, RTC_CR_BYPSHAD);
 8004d5e:	4b10      	ldr	r3, [pc, #64]	; (8004da0 <RTC_ExitInitMode+0x84>)
 8004d60:	699a      	ldr	r2, [r3, #24]
 8004d62:	4b0f      	ldr	r3, [pc, #60]	; (8004da0 <RTC_ExitInitMode+0x84>)
 8004d64:	2120      	movs	r1, #32
 8004d66:	438a      	bics	r2, r1
 8004d68:	619a      	str	r2, [r3, #24]
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8004d6a:	687b      	ldr	r3, [r7, #4]
 8004d6c:	0018      	movs	r0, r3
 8004d6e:	f7ff ff6b 	bl	8004c48 <HAL_RTC_WaitForSynchro>
 8004d72:	1e03      	subs	r3, r0, #0
 8004d74:	d007      	beq.n	8004d86 <RTC_ExitInitMode+0x6a>
    {
      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8004d76:	687b      	ldr	r3, [r7, #4]
 8004d78:	2229      	movs	r2, #41	; 0x29
 8004d7a:	2103      	movs	r1, #3
 8004d7c:	5499      	strb	r1, [r3, r2]
      status = HAL_TIMEOUT;
 8004d7e:	230f      	movs	r3, #15
 8004d80:	18fb      	adds	r3, r7, r3
 8004d82:	2203      	movs	r2, #3
 8004d84:	701a      	strb	r2, [r3, #0]
    }
    /* Restore BYPSHAD bit */
    SET_BIT(RTC->CR, RTC_CR_BYPSHAD);
 8004d86:	4b06      	ldr	r3, [pc, #24]	; (8004da0 <RTC_ExitInitMode+0x84>)
 8004d88:	699a      	ldr	r2, [r3, #24]
 8004d8a:	4b05      	ldr	r3, [pc, #20]	; (8004da0 <RTC_ExitInitMode+0x84>)
 8004d8c:	2120      	movs	r1, #32
 8004d8e:	430a      	orrs	r2, r1
 8004d90:	619a      	str	r2, [r3, #24]
  }

  return status;
 8004d92:	230f      	movs	r3, #15
 8004d94:	18fb      	adds	r3, r7, r3
 8004d96:	781b      	ldrb	r3, [r3, #0]
}
 8004d98:	0018      	movs	r0, r3
 8004d9a:	46bd      	mov	sp, r7
 8004d9c:	b005      	add	sp, #20
 8004d9e:	bd90      	pop	{r4, r7, pc}
 8004da0:	40002800 	.word	0x40002800

08004da4 <RTC_ByteToBcd2>:
  * @brief  Convert a 2 digit decimal to BCD format.
  * @param  Value Byte to be converted
  * @retval Converted byte
  */
uint8_t RTC_ByteToBcd2(uint8_t Value)
{
 8004da4:	b580      	push	{r7, lr}
 8004da6:	b084      	sub	sp, #16
 8004da8:	af00      	add	r7, sp, #0
 8004daa:	0002      	movs	r2, r0
 8004dac:	1dfb      	adds	r3, r7, #7
 8004dae:	701a      	strb	r2, [r3, #0]
  uint32_t bcdhigh = 0U;
 8004db0:	2300      	movs	r3, #0
 8004db2:	60fb      	str	r3, [r7, #12]
  uint8_t Param = Value;
 8004db4:	230b      	movs	r3, #11
 8004db6:	18fb      	adds	r3, r7, r3
 8004db8:	1dfa      	adds	r2, r7, #7
 8004dba:	7812      	ldrb	r2, [r2, #0]
 8004dbc:	701a      	strb	r2, [r3, #0]

  while(Param >= 10U)
 8004dbe:	e008      	b.n	8004dd2 <RTC_ByteToBcd2+0x2e>
  {
    bcdhigh++;
 8004dc0:	68fb      	ldr	r3, [r7, #12]
 8004dc2:	3301      	adds	r3, #1
 8004dc4:	60fb      	str	r3, [r7, #12]
    Param -= 10U;
 8004dc6:	220b      	movs	r2, #11
 8004dc8:	18bb      	adds	r3, r7, r2
 8004dca:	18ba      	adds	r2, r7, r2
 8004dcc:	7812      	ldrb	r2, [r2, #0]
 8004dce:	3a0a      	subs	r2, #10
 8004dd0:	701a      	strb	r2, [r3, #0]
  while(Param >= 10U)
 8004dd2:	210b      	movs	r1, #11
 8004dd4:	187b      	adds	r3, r7, r1
 8004dd6:	781b      	ldrb	r3, [r3, #0]
 8004dd8:	2b09      	cmp	r3, #9
 8004dda:	d8f1      	bhi.n	8004dc0 <RTC_ByteToBcd2+0x1c>
  }

  return  ((uint8_t)(bcdhigh << 4U) | Param);
 8004ddc:	68fb      	ldr	r3, [r7, #12]
 8004dde:	b2db      	uxtb	r3, r3
 8004de0:	011b      	lsls	r3, r3, #4
 8004de2:	b2da      	uxtb	r2, r3
 8004de4:	187b      	adds	r3, r7, r1
 8004de6:	781b      	ldrb	r3, [r3, #0]
 8004de8:	4313      	orrs	r3, r2
 8004dea:	b2db      	uxtb	r3, r3
}
 8004dec:	0018      	movs	r0, r3
 8004dee:	46bd      	mov	sp, r7
 8004df0:	b004      	add	sp, #16
 8004df2:	bd80      	pop	{r7, pc}

08004df4 <RTC_Bcd2ToByte>:
  * @brief  Convert from 2 digit BCD to Binary.
  * @param  Value BCD value to be converted
  * @retval Converted word
  */
uint8_t RTC_Bcd2ToByte(uint8_t Value)
{
 8004df4:	b580      	push	{r7, lr}
 8004df6:	b084      	sub	sp, #16
 8004df8:	af00      	add	r7, sp, #0
 8004dfa:	0002      	movs	r2, r0
 8004dfc:	1dfb      	adds	r3, r7, #7
 8004dfe:	701a      	strb	r2, [r3, #0]
  uint32_t tmp;
  tmp = (((uint32_t)Value & 0xF0U) >> 4U) * 10U;
 8004e00:	1dfb      	adds	r3, r7, #7
 8004e02:	781b      	ldrb	r3, [r3, #0]
 8004e04:	091b      	lsrs	r3, r3, #4
 8004e06:	b2db      	uxtb	r3, r3
 8004e08:	001a      	movs	r2, r3
 8004e0a:	0013      	movs	r3, r2
 8004e0c:	009b      	lsls	r3, r3, #2
 8004e0e:	189b      	adds	r3, r3, r2
 8004e10:	005b      	lsls	r3, r3, #1
 8004e12:	60fb      	str	r3, [r7, #12]
  return (uint8_t)(tmp + ((uint32_t)Value & 0x0FU));
 8004e14:	68fb      	ldr	r3, [r7, #12]
 8004e16:	b2da      	uxtb	r2, r3
 8004e18:	1dfb      	adds	r3, r7, #7
 8004e1a:	781b      	ldrb	r3, [r3, #0]
 8004e1c:	210f      	movs	r1, #15
 8004e1e:	400b      	ands	r3, r1
 8004e20:	b2db      	uxtb	r3, r3
 8004e22:	18d3      	adds	r3, r2, r3
 8004e24:	b2db      	uxtb	r3, r3
}
 8004e26:	0018      	movs	r0, r3
 8004e28:	46bd      	mov	sp, r7
 8004e2a:	b004      	add	sp, #16
 8004e2c:	bd80      	pop	{r7, pc}

08004e2e <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8004e2e:	b580      	push	{r7, lr}
 8004e30:	b082      	sub	sp, #8
 8004e32:	af00      	add	r7, sp, #0
 8004e34:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004e36:	687b      	ldr	r3, [r7, #4]
 8004e38:	2b00      	cmp	r3, #0
 8004e3a:	d101      	bne.n	8004e40 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8004e3c:	2301      	movs	r3, #1
 8004e3e:	e04a      	b.n	8004ed6 <HAL_TIM_Base_Init+0xa8>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004e40:	687b      	ldr	r3, [r7, #4]
 8004e42:	223d      	movs	r2, #61	; 0x3d
 8004e44:	5c9b      	ldrb	r3, [r3, r2]
 8004e46:	b2db      	uxtb	r3, r3
 8004e48:	2b00      	cmp	r3, #0
 8004e4a:	d107      	bne.n	8004e5c <HAL_TIM_Base_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004e4c:	687b      	ldr	r3, [r7, #4]
 8004e4e:	223c      	movs	r2, #60	; 0x3c
 8004e50:	2100      	movs	r1, #0
 8004e52:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8004e54:	687b      	ldr	r3, [r7, #4]
 8004e56:	0018      	movs	r0, r3
 8004e58:	f7fd fe52 	bl	8002b00 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004e5c:	687b      	ldr	r3, [r7, #4]
 8004e5e:	223d      	movs	r2, #61	; 0x3d
 8004e60:	2102      	movs	r1, #2
 8004e62:	5499      	strb	r1, [r3, r2]

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004e64:	687b      	ldr	r3, [r7, #4]
 8004e66:	681a      	ldr	r2, [r3, #0]
 8004e68:	687b      	ldr	r3, [r7, #4]
 8004e6a:	3304      	adds	r3, #4
 8004e6c:	0019      	movs	r1, r3
 8004e6e:	0010      	movs	r0, r2
 8004e70:	f000 fa20 	bl	80052b4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004e74:	687b      	ldr	r3, [r7, #4]
 8004e76:	2248      	movs	r2, #72	; 0x48
 8004e78:	2101      	movs	r1, #1
 8004e7a:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004e7c:	687b      	ldr	r3, [r7, #4]
 8004e7e:	223e      	movs	r2, #62	; 0x3e
 8004e80:	2101      	movs	r1, #1
 8004e82:	5499      	strb	r1, [r3, r2]
 8004e84:	687b      	ldr	r3, [r7, #4]
 8004e86:	223f      	movs	r2, #63	; 0x3f
 8004e88:	2101      	movs	r1, #1
 8004e8a:	5499      	strb	r1, [r3, r2]
 8004e8c:	687b      	ldr	r3, [r7, #4]
 8004e8e:	2240      	movs	r2, #64	; 0x40
 8004e90:	2101      	movs	r1, #1
 8004e92:	5499      	strb	r1, [r3, r2]
 8004e94:	687b      	ldr	r3, [r7, #4]
 8004e96:	2241      	movs	r2, #65	; 0x41
 8004e98:	2101      	movs	r1, #1
 8004e9a:	5499      	strb	r1, [r3, r2]
 8004e9c:	687b      	ldr	r3, [r7, #4]
 8004e9e:	2242      	movs	r2, #66	; 0x42
 8004ea0:	2101      	movs	r1, #1
 8004ea2:	5499      	strb	r1, [r3, r2]
 8004ea4:	687b      	ldr	r3, [r7, #4]
 8004ea6:	2243      	movs	r2, #67	; 0x43
 8004ea8:	2101      	movs	r1, #1
 8004eaa:	5499      	strb	r1, [r3, r2]
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004eac:	687b      	ldr	r3, [r7, #4]
 8004eae:	2244      	movs	r2, #68	; 0x44
 8004eb0:	2101      	movs	r1, #1
 8004eb2:	5499      	strb	r1, [r3, r2]
 8004eb4:	687b      	ldr	r3, [r7, #4]
 8004eb6:	2245      	movs	r2, #69	; 0x45
 8004eb8:	2101      	movs	r1, #1
 8004eba:	5499      	strb	r1, [r3, r2]
 8004ebc:	687b      	ldr	r3, [r7, #4]
 8004ebe:	2246      	movs	r2, #70	; 0x46
 8004ec0:	2101      	movs	r1, #1
 8004ec2:	5499      	strb	r1, [r3, r2]
 8004ec4:	687b      	ldr	r3, [r7, #4]
 8004ec6:	2247      	movs	r2, #71	; 0x47
 8004ec8:	2101      	movs	r1, #1
 8004eca:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004ecc:	687b      	ldr	r3, [r7, #4]
 8004ece:	223d      	movs	r2, #61	; 0x3d
 8004ed0:	2101      	movs	r1, #1
 8004ed2:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8004ed4:	2300      	movs	r3, #0
}
 8004ed6:	0018      	movs	r0, r3
 8004ed8:	46bd      	mov	sp, r7
 8004eda:	b002      	add	sp, #8
 8004edc:	bd80      	pop	{r7, pc}
	...

08004ee0 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8004ee0:	b580      	push	{r7, lr}
 8004ee2:	b084      	sub	sp, #16
 8004ee4:	af00      	add	r7, sp, #0
 8004ee6:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8004ee8:	687b      	ldr	r3, [r7, #4]
 8004eea:	223d      	movs	r2, #61	; 0x3d
 8004eec:	5c9b      	ldrb	r3, [r3, r2]
 8004eee:	b2db      	uxtb	r3, r3
 8004ef0:	2b01      	cmp	r3, #1
 8004ef2:	d001      	beq.n	8004ef8 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8004ef4:	2301      	movs	r3, #1
 8004ef6:	e047      	b.n	8004f88 <HAL_TIM_Base_Start_IT+0xa8>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004ef8:	687b      	ldr	r3, [r7, #4]
 8004efa:	223d      	movs	r2, #61	; 0x3d
 8004efc:	2102      	movs	r1, #2
 8004efe:	5499      	strb	r1, [r3, r2]

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8004f00:	687b      	ldr	r3, [r7, #4]
 8004f02:	681b      	ldr	r3, [r3, #0]
 8004f04:	68da      	ldr	r2, [r3, #12]
 8004f06:	687b      	ldr	r3, [r7, #4]
 8004f08:	681b      	ldr	r3, [r3, #0]
 8004f0a:	2101      	movs	r1, #1
 8004f0c:	430a      	orrs	r2, r1
 8004f0e:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004f10:	687b      	ldr	r3, [r7, #4]
 8004f12:	681b      	ldr	r3, [r3, #0]
 8004f14:	4a1e      	ldr	r2, [pc, #120]	; (8004f90 <HAL_TIM_Base_Start_IT+0xb0>)
 8004f16:	4293      	cmp	r3, r2
 8004f18:	d014      	beq.n	8004f44 <HAL_TIM_Base_Start_IT+0x64>
 8004f1a:	687b      	ldr	r3, [r7, #4]
 8004f1c:	681a      	ldr	r2, [r3, #0]
 8004f1e:	2380      	movs	r3, #128	; 0x80
 8004f20:	05db      	lsls	r3, r3, #23
 8004f22:	429a      	cmp	r2, r3
 8004f24:	d00e      	beq.n	8004f44 <HAL_TIM_Base_Start_IT+0x64>
 8004f26:	687b      	ldr	r3, [r7, #4]
 8004f28:	681b      	ldr	r3, [r3, #0]
 8004f2a:	4a1a      	ldr	r2, [pc, #104]	; (8004f94 <HAL_TIM_Base_Start_IT+0xb4>)
 8004f2c:	4293      	cmp	r3, r2
 8004f2e:	d009      	beq.n	8004f44 <HAL_TIM_Base_Start_IT+0x64>
 8004f30:	687b      	ldr	r3, [r7, #4]
 8004f32:	681b      	ldr	r3, [r3, #0]
 8004f34:	4a18      	ldr	r2, [pc, #96]	; (8004f98 <HAL_TIM_Base_Start_IT+0xb8>)
 8004f36:	4293      	cmp	r3, r2
 8004f38:	d004      	beq.n	8004f44 <HAL_TIM_Base_Start_IT+0x64>
 8004f3a:	687b      	ldr	r3, [r7, #4]
 8004f3c:	681b      	ldr	r3, [r3, #0]
 8004f3e:	4a17      	ldr	r2, [pc, #92]	; (8004f9c <HAL_TIM_Base_Start_IT+0xbc>)
 8004f40:	4293      	cmp	r3, r2
 8004f42:	d116      	bne.n	8004f72 <HAL_TIM_Base_Start_IT+0x92>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004f44:	687b      	ldr	r3, [r7, #4]
 8004f46:	681b      	ldr	r3, [r3, #0]
 8004f48:	689b      	ldr	r3, [r3, #8]
 8004f4a:	4a15      	ldr	r2, [pc, #84]	; (8004fa0 <HAL_TIM_Base_Start_IT+0xc0>)
 8004f4c:	4013      	ands	r3, r2
 8004f4e:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004f50:	68fb      	ldr	r3, [r7, #12]
 8004f52:	2b06      	cmp	r3, #6
 8004f54:	d016      	beq.n	8004f84 <HAL_TIM_Base_Start_IT+0xa4>
 8004f56:	68fa      	ldr	r2, [r7, #12]
 8004f58:	2380      	movs	r3, #128	; 0x80
 8004f5a:	025b      	lsls	r3, r3, #9
 8004f5c:	429a      	cmp	r2, r3
 8004f5e:	d011      	beq.n	8004f84 <HAL_TIM_Base_Start_IT+0xa4>
    {
      __HAL_TIM_ENABLE(htim);
 8004f60:	687b      	ldr	r3, [r7, #4]
 8004f62:	681b      	ldr	r3, [r3, #0]
 8004f64:	681a      	ldr	r2, [r3, #0]
 8004f66:	687b      	ldr	r3, [r7, #4]
 8004f68:	681b      	ldr	r3, [r3, #0]
 8004f6a:	2101      	movs	r1, #1
 8004f6c:	430a      	orrs	r2, r1
 8004f6e:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004f70:	e008      	b.n	8004f84 <HAL_TIM_Base_Start_IT+0xa4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8004f72:	687b      	ldr	r3, [r7, #4]
 8004f74:	681b      	ldr	r3, [r3, #0]
 8004f76:	681a      	ldr	r2, [r3, #0]
 8004f78:	687b      	ldr	r3, [r7, #4]
 8004f7a:	681b      	ldr	r3, [r3, #0]
 8004f7c:	2101      	movs	r1, #1
 8004f7e:	430a      	orrs	r2, r1
 8004f80:	601a      	str	r2, [r3, #0]
 8004f82:	e000      	b.n	8004f86 <HAL_TIM_Base_Start_IT+0xa6>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004f84:	46c0      	nop			; (mov r8, r8)
  }

  /* Return function status */
  return HAL_OK;
 8004f86:	2300      	movs	r3, #0
}
 8004f88:	0018      	movs	r0, r3
 8004f8a:	46bd      	mov	sp, r7
 8004f8c:	b004      	add	sp, #16
 8004f8e:	bd80      	pop	{r7, pc}
 8004f90:	40012c00 	.word	0x40012c00
 8004f94:	40000400 	.word	0x40000400
 8004f98:	40000800 	.word	0x40000800
 8004f9c:	40014000 	.word	0x40014000
 8004fa0:	00010007 	.word	0x00010007

08004fa4 <HAL_TIM_Base_Stop_IT>:
  * @brief  Stops the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Stop_IT(TIM_HandleTypeDef *htim)
{
 8004fa4:	b580      	push	{r7, lr}
 8004fa6:	b082      	sub	sp, #8
 8004fa8:	af00      	add	r7, sp, #0
 8004faa:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Disable the TIM Update interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_UPDATE);
 8004fac:	687b      	ldr	r3, [r7, #4]
 8004fae:	681b      	ldr	r3, [r3, #0]
 8004fb0:	68da      	ldr	r2, [r3, #12]
 8004fb2:	687b      	ldr	r3, [r7, #4]
 8004fb4:	681b      	ldr	r3, [r3, #0]
 8004fb6:	2101      	movs	r1, #1
 8004fb8:	438a      	bics	r2, r1
 8004fba:	60da      	str	r2, [r3, #12]

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8004fbc:	687b      	ldr	r3, [r7, #4]
 8004fbe:	681b      	ldr	r3, [r3, #0]
 8004fc0:	6a1b      	ldr	r3, [r3, #32]
 8004fc2:	4a0d      	ldr	r2, [pc, #52]	; (8004ff8 <HAL_TIM_Base_Stop_IT+0x54>)
 8004fc4:	4013      	ands	r3, r2
 8004fc6:	d10d      	bne.n	8004fe4 <HAL_TIM_Base_Stop_IT+0x40>
 8004fc8:	687b      	ldr	r3, [r7, #4]
 8004fca:	681b      	ldr	r3, [r3, #0]
 8004fcc:	6a1b      	ldr	r3, [r3, #32]
 8004fce:	4a0b      	ldr	r2, [pc, #44]	; (8004ffc <HAL_TIM_Base_Stop_IT+0x58>)
 8004fd0:	4013      	ands	r3, r2
 8004fd2:	d107      	bne.n	8004fe4 <HAL_TIM_Base_Stop_IT+0x40>
 8004fd4:	687b      	ldr	r3, [r7, #4]
 8004fd6:	681b      	ldr	r3, [r3, #0]
 8004fd8:	681a      	ldr	r2, [r3, #0]
 8004fda:	687b      	ldr	r3, [r7, #4]
 8004fdc:	681b      	ldr	r3, [r3, #0]
 8004fde:	2101      	movs	r1, #1
 8004fe0:	438a      	bics	r2, r1
 8004fe2:	601a      	str	r2, [r3, #0]

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_READY;
 8004fe4:	687b      	ldr	r3, [r7, #4]
 8004fe6:	223d      	movs	r2, #61	; 0x3d
 8004fe8:	2101      	movs	r1, #1
 8004fea:	5499      	strb	r1, [r3, r2]

  /* Return function status */
  return HAL_OK;
 8004fec:	2300      	movs	r3, #0
}
 8004fee:	0018      	movs	r0, r3
 8004ff0:	46bd      	mov	sp, r7
 8004ff2:	b002      	add	sp, #8
 8004ff4:	bd80      	pop	{r7, pc}
 8004ff6:	46c0      	nop			; (mov r8, r8)
 8004ff8:	00001111 	.word	0x00001111
 8004ffc:	00000444 	.word	0x00000444

08005000 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8005000:	b580      	push	{r7, lr}
 8005002:	b082      	sub	sp, #8
 8005004:	af00      	add	r7, sp, #0
 8005006:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8005008:	687b      	ldr	r3, [r7, #4]
 800500a:	681b      	ldr	r3, [r3, #0]
 800500c:	691b      	ldr	r3, [r3, #16]
 800500e:	2202      	movs	r2, #2
 8005010:	4013      	ands	r3, r2
 8005012:	2b02      	cmp	r3, #2
 8005014:	d124      	bne.n	8005060 <HAL_TIM_IRQHandler+0x60>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8005016:	687b      	ldr	r3, [r7, #4]
 8005018:	681b      	ldr	r3, [r3, #0]
 800501a:	68db      	ldr	r3, [r3, #12]
 800501c:	2202      	movs	r2, #2
 800501e:	4013      	ands	r3, r2
 8005020:	2b02      	cmp	r3, #2
 8005022:	d11d      	bne.n	8005060 <HAL_TIM_IRQHandler+0x60>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8005024:	687b      	ldr	r3, [r7, #4]
 8005026:	681b      	ldr	r3, [r3, #0]
 8005028:	2203      	movs	r2, #3
 800502a:	4252      	negs	r2, r2
 800502c:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800502e:	687b      	ldr	r3, [r7, #4]
 8005030:	2201      	movs	r2, #1
 8005032:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8005034:	687b      	ldr	r3, [r7, #4]
 8005036:	681b      	ldr	r3, [r3, #0]
 8005038:	699b      	ldr	r3, [r3, #24]
 800503a:	2203      	movs	r2, #3
 800503c:	4013      	ands	r3, r2
 800503e:	d004      	beq.n	800504a <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8005040:	687b      	ldr	r3, [r7, #4]
 8005042:	0018      	movs	r0, r3
 8005044:	f000 f91e 	bl	8005284 <HAL_TIM_IC_CaptureCallback>
 8005048:	e007      	b.n	800505a <HAL_TIM_IRQHandler+0x5a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800504a:	687b      	ldr	r3, [r7, #4]
 800504c:	0018      	movs	r0, r3
 800504e:	f000 f911 	bl	8005274 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005052:	687b      	ldr	r3, [r7, #4]
 8005054:	0018      	movs	r0, r3
 8005056:	f000 f91d 	bl	8005294 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800505a:	687b      	ldr	r3, [r7, #4]
 800505c:	2200      	movs	r2, #0
 800505e:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8005060:	687b      	ldr	r3, [r7, #4]
 8005062:	681b      	ldr	r3, [r3, #0]
 8005064:	691b      	ldr	r3, [r3, #16]
 8005066:	2204      	movs	r2, #4
 8005068:	4013      	ands	r3, r2
 800506a:	2b04      	cmp	r3, #4
 800506c:	d125      	bne.n	80050ba <HAL_TIM_IRQHandler+0xba>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800506e:	687b      	ldr	r3, [r7, #4]
 8005070:	681b      	ldr	r3, [r3, #0]
 8005072:	68db      	ldr	r3, [r3, #12]
 8005074:	2204      	movs	r2, #4
 8005076:	4013      	ands	r3, r2
 8005078:	2b04      	cmp	r3, #4
 800507a:	d11e      	bne.n	80050ba <HAL_TIM_IRQHandler+0xba>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800507c:	687b      	ldr	r3, [r7, #4]
 800507e:	681b      	ldr	r3, [r3, #0]
 8005080:	2205      	movs	r2, #5
 8005082:	4252      	negs	r2, r2
 8005084:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8005086:	687b      	ldr	r3, [r7, #4]
 8005088:	2202      	movs	r2, #2
 800508a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800508c:	687b      	ldr	r3, [r7, #4]
 800508e:	681b      	ldr	r3, [r3, #0]
 8005090:	699a      	ldr	r2, [r3, #24]
 8005092:	23c0      	movs	r3, #192	; 0xc0
 8005094:	009b      	lsls	r3, r3, #2
 8005096:	4013      	ands	r3, r2
 8005098:	d004      	beq.n	80050a4 <HAL_TIM_IRQHandler+0xa4>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800509a:	687b      	ldr	r3, [r7, #4]
 800509c:	0018      	movs	r0, r3
 800509e:	f000 f8f1 	bl	8005284 <HAL_TIM_IC_CaptureCallback>
 80050a2:	e007      	b.n	80050b4 <HAL_TIM_IRQHandler+0xb4>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80050a4:	687b      	ldr	r3, [r7, #4]
 80050a6:	0018      	movs	r0, r3
 80050a8:	f000 f8e4 	bl	8005274 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80050ac:	687b      	ldr	r3, [r7, #4]
 80050ae:	0018      	movs	r0, r3
 80050b0:	f000 f8f0 	bl	8005294 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80050b4:	687b      	ldr	r3, [r7, #4]
 80050b6:	2200      	movs	r2, #0
 80050b8:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80050ba:	687b      	ldr	r3, [r7, #4]
 80050bc:	681b      	ldr	r3, [r3, #0]
 80050be:	691b      	ldr	r3, [r3, #16]
 80050c0:	2208      	movs	r2, #8
 80050c2:	4013      	ands	r3, r2
 80050c4:	2b08      	cmp	r3, #8
 80050c6:	d124      	bne.n	8005112 <HAL_TIM_IRQHandler+0x112>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80050c8:	687b      	ldr	r3, [r7, #4]
 80050ca:	681b      	ldr	r3, [r3, #0]
 80050cc:	68db      	ldr	r3, [r3, #12]
 80050ce:	2208      	movs	r2, #8
 80050d0:	4013      	ands	r3, r2
 80050d2:	2b08      	cmp	r3, #8
 80050d4:	d11d      	bne.n	8005112 <HAL_TIM_IRQHandler+0x112>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80050d6:	687b      	ldr	r3, [r7, #4]
 80050d8:	681b      	ldr	r3, [r3, #0]
 80050da:	2209      	movs	r2, #9
 80050dc:	4252      	negs	r2, r2
 80050de:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80050e0:	687b      	ldr	r3, [r7, #4]
 80050e2:	2204      	movs	r2, #4
 80050e4:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80050e6:	687b      	ldr	r3, [r7, #4]
 80050e8:	681b      	ldr	r3, [r3, #0]
 80050ea:	69db      	ldr	r3, [r3, #28]
 80050ec:	2203      	movs	r2, #3
 80050ee:	4013      	ands	r3, r2
 80050f0:	d004      	beq.n	80050fc <HAL_TIM_IRQHandler+0xfc>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80050f2:	687b      	ldr	r3, [r7, #4]
 80050f4:	0018      	movs	r0, r3
 80050f6:	f000 f8c5 	bl	8005284 <HAL_TIM_IC_CaptureCallback>
 80050fa:	e007      	b.n	800510c <HAL_TIM_IRQHandler+0x10c>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80050fc:	687b      	ldr	r3, [r7, #4]
 80050fe:	0018      	movs	r0, r3
 8005100:	f000 f8b8 	bl	8005274 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005104:	687b      	ldr	r3, [r7, #4]
 8005106:	0018      	movs	r0, r3
 8005108:	f000 f8c4 	bl	8005294 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800510c:	687b      	ldr	r3, [r7, #4]
 800510e:	2200      	movs	r2, #0
 8005110:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8005112:	687b      	ldr	r3, [r7, #4]
 8005114:	681b      	ldr	r3, [r3, #0]
 8005116:	691b      	ldr	r3, [r3, #16]
 8005118:	2210      	movs	r2, #16
 800511a:	4013      	ands	r3, r2
 800511c:	2b10      	cmp	r3, #16
 800511e:	d125      	bne.n	800516c <HAL_TIM_IRQHandler+0x16c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8005120:	687b      	ldr	r3, [r7, #4]
 8005122:	681b      	ldr	r3, [r3, #0]
 8005124:	68db      	ldr	r3, [r3, #12]
 8005126:	2210      	movs	r2, #16
 8005128:	4013      	ands	r3, r2
 800512a:	2b10      	cmp	r3, #16
 800512c:	d11e      	bne.n	800516c <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800512e:	687b      	ldr	r3, [r7, #4]
 8005130:	681b      	ldr	r3, [r3, #0]
 8005132:	2211      	movs	r2, #17
 8005134:	4252      	negs	r2, r2
 8005136:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8005138:	687b      	ldr	r3, [r7, #4]
 800513a:	2208      	movs	r2, #8
 800513c:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800513e:	687b      	ldr	r3, [r7, #4]
 8005140:	681b      	ldr	r3, [r3, #0]
 8005142:	69da      	ldr	r2, [r3, #28]
 8005144:	23c0      	movs	r3, #192	; 0xc0
 8005146:	009b      	lsls	r3, r3, #2
 8005148:	4013      	ands	r3, r2
 800514a:	d004      	beq.n	8005156 <HAL_TIM_IRQHandler+0x156>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800514c:	687b      	ldr	r3, [r7, #4]
 800514e:	0018      	movs	r0, r3
 8005150:	f000 f898 	bl	8005284 <HAL_TIM_IC_CaptureCallback>
 8005154:	e007      	b.n	8005166 <HAL_TIM_IRQHandler+0x166>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005156:	687b      	ldr	r3, [r7, #4]
 8005158:	0018      	movs	r0, r3
 800515a:	f000 f88b 	bl	8005274 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800515e:	687b      	ldr	r3, [r7, #4]
 8005160:	0018      	movs	r0, r3
 8005162:	f000 f897 	bl	8005294 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005166:	687b      	ldr	r3, [r7, #4]
 8005168:	2200      	movs	r2, #0
 800516a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800516c:	687b      	ldr	r3, [r7, #4]
 800516e:	681b      	ldr	r3, [r3, #0]
 8005170:	691b      	ldr	r3, [r3, #16]
 8005172:	2201      	movs	r2, #1
 8005174:	4013      	ands	r3, r2
 8005176:	2b01      	cmp	r3, #1
 8005178:	d10f      	bne.n	800519a <HAL_TIM_IRQHandler+0x19a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800517a:	687b      	ldr	r3, [r7, #4]
 800517c:	681b      	ldr	r3, [r3, #0]
 800517e:	68db      	ldr	r3, [r3, #12]
 8005180:	2201      	movs	r2, #1
 8005182:	4013      	ands	r3, r2
 8005184:	2b01      	cmp	r3, #1
 8005186:	d108      	bne.n	800519a <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8005188:	687b      	ldr	r3, [r7, #4]
 800518a:	681b      	ldr	r3, [r3, #0]
 800518c:	2202      	movs	r2, #2
 800518e:	4252      	negs	r2, r2
 8005190:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8005192:	687b      	ldr	r3, [r7, #4]
 8005194:	0018      	movs	r0, r3
 8005196:	f000 f865 	bl	8005264 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800519a:	687b      	ldr	r3, [r7, #4]
 800519c:	681b      	ldr	r3, [r3, #0]
 800519e:	691b      	ldr	r3, [r3, #16]
 80051a0:	2280      	movs	r2, #128	; 0x80
 80051a2:	4013      	ands	r3, r2
 80051a4:	2b80      	cmp	r3, #128	; 0x80
 80051a6:	d10f      	bne.n	80051c8 <HAL_TIM_IRQHandler+0x1c8>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80051a8:	687b      	ldr	r3, [r7, #4]
 80051aa:	681b      	ldr	r3, [r3, #0]
 80051ac:	68db      	ldr	r3, [r3, #12]
 80051ae:	2280      	movs	r2, #128	; 0x80
 80051b0:	4013      	ands	r3, r2
 80051b2:	2b80      	cmp	r3, #128	; 0x80
 80051b4:	d108      	bne.n	80051c8 <HAL_TIM_IRQHandler+0x1c8>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80051b6:	687b      	ldr	r3, [r7, #4]
 80051b8:	681b      	ldr	r3, [r3, #0]
 80051ba:	2281      	movs	r2, #129	; 0x81
 80051bc:	4252      	negs	r2, r2
 80051be:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80051c0:	687b      	ldr	r3, [r7, #4]
 80051c2:	0018      	movs	r0, r3
 80051c4:	f000 f97e 	bl	80054c4 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 80051c8:	687b      	ldr	r3, [r7, #4]
 80051ca:	681b      	ldr	r3, [r3, #0]
 80051cc:	691a      	ldr	r2, [r3, #16]
 80051ce:	2380      	movs	r3, #128	; 0x80
 80051d0:	005b      	lsls	r3, r3, #1
 80051d2:	401a      	ands	r2, r3
 80051d4:	2380      	movs	r3, #128	; 0x80
 80051d6:	005b      	lsls	r3, r3, #1
 80051d8:	429a      	cmp	r2, r3
 80051da:	d10e      	bne.n	80051fa <HAL_TIM_IRQHandler+0x1fa>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80051dc:	687b      	ldr	r3, [r7, #4]
 80051de:	681b      	ldr	r3, [r3, #0]
 80051e0:	68db      	ldr	r3, [r3, #12]
 80051e2:	2280      	movs	r2, #128	; 0x80
 80051e4:	4013      	ands	r3, r2
 80051e6:	2b80      	cmp	r3, #128	; 0x80
 80051e8:	d107      	bne.n	80051fa <HAL_TIM_IRQHandler+0x1fa>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 80051ea:	687b      	ldr	r3, [r7, #4]
 80051ec:	681b      	ldr	r3, [r3, #0]
 80051ee:	4a1c      	ldr	r2, [pc, #112]	; (8005260 <HAL_TIM_IRQHandler+0x260>)
 80051f0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 80051f2:	687b      	ldr	r3, [r7, #4]
 80051f4:	0018      	movs	r0, r3
 80051f6:	f000 f96d 	bl	80054d4 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80051fa:	687b      	ldr	r3, [r7, #4]
 80051fc:	681b      	ldr	r3, [r3, #0]
 80051fe:	691b      	ldr	r3, [r3, #16]
 8005200:	2240      	movs	r2, #64	; 0x40
 8005202:	4013      	ands	r3, r2
 8005204:	2b40      	cmp	r3, #64	; 0x40
 8005206:	d10f      	bne.n	8005228 <HAL_TIM_IRQHandler+0x228>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8005208:	687b      	ldr	r3, [r7, #4]
 800520a:	681b      	ldr	r3, [r3, #0]
 800520c:	68db      	ldr	r3, [r3, #12]
 800520e:	2240      	movs	r2, #64	; 0x40
 8005210:	4013      	ands	r3, r2
 8005212:	2b40      	cmp	r3, #64	; 0x40
 8005214:	d108      	bne.n	8005228 <HAL_TIM_IRQHandler+0x228>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8005216:	687b      	ldr	r3, [r7, #4]
 8005218:	681b      	ldr	r3, [r3, #0]
 800521a:	2241      	movs	r2, #65	; 0x41
 800521c:	4252      	negs	r2, r2
 800521e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8005220:	687b      	ldr	r3, [r7, #4]
 8005222:	0018      	movs	r0, r3
 8005224:	f000 f83e 	bl	80052a4 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8005228:	687b      	ldr	r3, [r7, #4]
 800522a:	681b      	ldr	r3, [r3, #0]
 800522c:	691b      	ldr	r3, [r3, #16]
 800522e:	2220      	movs	r2, #32
 8005230:	4013      	ands	r3, r2
 8005232:	2b20      	cmp	r3, #32
 8005234:	d10f      	bne.n	8005256 <HAL_TIM_IRQHandler+0x256>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8005236:	687b      	ldr	r3, [r7, #4]
 8005238:	681b      	ldr	r3, [r3, #0]
 800523a:	68db      	ldr	r3, [r3, #12]
 800523c:	2220      	movs	r2, #32
 800523e:	4013      	ands	r3, r2
 8005240:	2b20      	cmp	r3, #32
 8005242:	d108      	bne.n	8005256 <HAL_TIM_IRQHandler+0x256>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8005244:	687b      	ldr	r3, [r7, #4]
 8005246:	681b      	ldr	r3, [r3, #0]
 8005248:	2221      	movs	r2, #33	; 0x21
 800524a:	4252      	negs	r2, r2
 800524c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800524e:	687b      	ldr	r3, [r7, #4]
 8005250:	0018      	movs	r0, r3
 8005252:	f000 f92f 	bl	80054b4 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8005256:	46c0      	nop			; (mov r8, r8)
 8005258:	46bd      	mov	sp, r7
 800525a:	b002      	add	sp, #8
 800525c:	bd80      	pop	{r7, pc}
 800525e:	46c0      	nop			; (mov r8, r8)
 8005260:	fffffeff 	.word	0xfffffeff

08005264 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8005264:	b580      	push	{r7, lr}
 8005266:	b082      	sub	sp, #8
 8005268:	af00      	add	r7, sp, #0
 800526a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 800526c:	46c0      	nop			; (mov r8, r8)
 800526e:	46bd      	mov	sp, r7
 8005270:	b002      	add	sp, #8
 8005272:	bd80      	pop	{r7, pc}

08005274 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8005274:	b580      	push	{r7, lr}
 8005276:	b082      	sub	sp, #8
 8005278:	af00      	add	r7, sp, #0
 800527a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800527c:	46c0      	nop			; (mov r8, r8)
 800527e:	46bd      	mov	sp, r7
 8005280:	b002      	add	sp, #8
 8005282:	bd80      	pop	{r7, pc}

08005284 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8005284:	b580      	push	{r7, lr}
 8005286:	b082      	sub	sp, #8
 8005288:	af00      	add	r7, sp, #0
 800528a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800528c:	46c0      	nop			; (mov r8, r8)
 800528e:	46bd      	mov	sp, r7
 8005290:	b002      	add	sp, #8
 8005292:	bd80      	pop	{r7, pc}

08005294 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8005294:	b580      	push	{r7, lr}
 8005296:	b082      	sub	sp, #8
 8005298:	af00      	add	r7, sp, #0
 800529a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800529c:	46c0      	nop			; (mov r8, r8)
 800529e:	46bd      	mov	sp, r7
 80052a0:	b002      	add	sp, #8
 80052a2:	bd80      	pop	{r7, pc}

080052a4 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80052a4:	b580      	push	{r7, lr}
 80052a6:	b082      	sub	sp, #8
 80052a8:	af00      	add	r7, sp, #0
 80052aa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80052ac:	46c0      	nop			; (mov r8, r8)
 80052ae:	46bd      	mov	sp, r7
 80052b0:	b002      	add	sp, #8
 80052b2:	bd80      	pop	{r7, pc}

080052b4 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 80052b4:	b580      	push	{r7, lr}
 80052b6:	b084      	sub	sp, #16
 80052b8:	af00      	add	r7, sp, #0
 80052ba:	6078      	str	r0, [r7, #4]
 80052bc:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80052be:	687b      	ldr	r3, [r7, #4]
 80052c0:	681b      	ldr	r3, [r3, #0]
 80052c2:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80052c4:	687b      	ldr	r3, [r7, #4]
 80052c6:	4a38      	ldr	r2, [pc, #224]	; (80053a8 <TIM_Base_SetConfig+0xf4>)
 80052c8:	4293      	cmp	r3, r2
 80052ca:	d00c      	beq.n	80052e6 <TIM_Base_SetConfig+0x32>
 80052cc:	687a      	ldr	r2, [r7, #4]
 80052ce:	2380      	movs	r3, #128	; 0x80
 80052d0:	05db      	lsls	r3, r3, #23
 80052d2:	429a      	cmp	r2, r3
 80052d4:	d007      	beq.n	80052e6 <TIM_Base_SetConfig+0x32>
 80052d6:	687b      	ldr	r3, [r7, #4]
 80052d8:	4a34      	ldr	r2, [pc, #208]	; (80053ac <TIM_Base_SetConfig+0xf8>)
 80052da:	4293      	cmp	r3, r2
 80052dc:	d003      	beq.n	80052e6 <TIM_Base_SetConfig+0x32>
 80052de:	687b      	ldr	r3, [r7, #4]
 80052e0:	4a33      	ldr	r2, [pc, #204]	; (80053b0 <TIM_Base_SetConfig+0xfc>)
 80052e2:	4293      	cmp	r3, r2
 80052e4:	d108      	bne.n	80052f8 <TIM_Base_SetConfig+0x44>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80052e6:	68fb      	ldr	r3, [r7, #12]
 80052e8:	2270      	movs	r2, #112	; 0x70
 80052ea:	4393      	bics	r3, r2
 80052ec:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80052ee:	683b      	ldr	r3, [r7, #0]
 80052f0:	685b      	ldr	r3, [r3, #4]
 80052f2:	68fa      	ldr	r2, [r7, #12]
 80052f4:	4313      	orrs	r3, r2
 80052f6:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80052f8:	687b      	ldr	r3, [r7, #4]
 80052fa:	4a2b      	ldr	r2, [pc, #172]	; (80053a8 <TIM_Base_SetConfig+0xf4>)
 80052fc:	4293      	cmp	r3, r2
 80052fe:	d01c      	beq.n	800533a <TIM_Base_SetConfig+0x86>
 8005300:	687a      	ldr	r2, [r7, #4]
 8005302:	2380      	movs	r3, #128	; 0x80
 8005304:	05db      	lsls	r3, r3, #23
 8005306:	429a      	cmp	r2, r3
 8005308:	d017      	beq.n	800533a <TIM_Base_SetConfig+0x86>
 800530a:	687b      	ldr	r3, [r7, #4]
 800530c:	4a27      	ldr	r2, [pc, #156]	; (80053ac <TIM_Base_SetConfig+0xf8>)
 800530e:	4293      	cmp	r3, r2
 8005310:	d013      	beq.n	800533a <TIM_Base_SetConfig+0x86>
 8005312:	687b      	ldr	r3, [r7, #4]
 8005314:	4a26      	ldr	r2, [pc, #152]	; (80053b0 <TIM_Base_SetConfig+0xfc>)
 8005316:	4293      	cmp	r3, r2
 8005318:	d00f      	beq.n	800533a <TIM_Base_SetConfig+0x86>
 800531a:	687b      	ldr	r3, [r7, #4]
 800531c:	4a25      	ldr	r2, [pc, #148]	; (80053b4 <TIM_Base_SetConfig+0x100>)
 800531e:	4293      	cmp	r3, r2
 8005320:	d00b      	beq.n	800533a <TIM_Base_SetConfig+0x86>
 8005322:	687b      	ldr	r3, [r7, #4]
 8005324:	4a24      	ldr	r2, [pc, #144]	; (80053b8 <TIM_Base_SetConfig+0x104>)
 8005326:	4293      	cmp	r3, r2
 8005328:	d007      	beq.n	800533a <TIM_Base_SetConfig+0x86>
 800532a:	687b      	ldr	r3, [r7, #4]
 800532c:	4a23      	ldr	r2, [pc, #140]	; (80053bc <TIM_Base_SetConfig+0x108>)
 800532e:	4293      	cmp	r3, r2
 8005330:	d003      	beq.n	800533a <TIM_Base_SetConfig+0x86>
 8005332:	687b      	ldr	r3, [r7, #4]
 8005334:	4a22      	ldr	r2, [pc, #136]	; (80053c0 <TIM_Base_SetConfig+0x10c>)
 8005336:	4293      	cmp	r3, r2
 8005338:	d108      	bne.n	800534c <TIM_Base_SetConfig+0x98>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800533a:	68fb      	ldr	r3, [r7, #12]
 800533c:	4a21      	ldr	r2, [pc, #132]	; (80053c4 <TIM_Base_SetConfig+0x110>)
 800533e:	4013      	ands	r3, r2
 8005340:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8005342:	683b      	ldr	r3, [r7, #0]
 8005344:	68db      	ldr	r3, [r3, #12]
 8005346:	68fa      	ldr	r2, [r7, #12]
 8005348:	4313      	orrs	r3, r2
 800534a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800534c:	68fb      	ldr	r3, [r7, #12]
 800534e:	2280      	movs	r2, #128	; 0x80
 8005350:	4393      	bics	r3, r2
 8005352:	001a      	movs	r2, r3
 8005354:	683b      	ldr	r3, [r7, #0]
 8005356:	695b      	ldr	r3, [r3, #20]
 8005358:	4313      	orrs	r3, r2
 800535a:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800535c:	687b      	ldr	r3, [r7, #4]
 800535e:	68fa      	ldr	r2, [r7, #12]
 8005360:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8005362:	683b      	ldr	r3, [r7, #0]
 8005364:	689a      	ldr	r2, [r3, #8]
 8005366:	687b      	ldr	r3, [r7, #4]
 8005368:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800536a:	683b      	ldr	r3, [r7, #0]
 800536c:	681a      	ldr	r2, [r3, #0]
 800536e:	687b      	ldr	r3, [r7, #4]
 8005370:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8005372:	687b      	ldr	r3, [r7, #4]
 8005374:	4a0c      	ldr	r2, [pc, #48]	; (80053a8 <TIM_Base_SetConfig+0xf4>)
 8005376:	4293      	cmp	r3, r2
 8005378:	d00b      	beq.n	8005392 <TIM_Base_SetConfig+0xde>
 800537a:	687b      	ldr	r3, [r7, #4]
 800537c:	4a0e      	ldr	r2, [pc, #56]	; (80053b8 <TIM_Base_SetConfig+0x104>)
 800537e:	4293      	cmp	r3, r2
 8005380:	d007      	beq.n	8005392 <TIM_Base_SetConfig+0xde>
 8005382:	687b      	ldr	r3, [r7, #4]
 8005384:	4a0d      	ldr	r2, [pc, #52]	; (80053bc <TIM_Base_SetConfig+0x108>)
 8005386:	4293      	cmp	r3, r2
 8005388:	d003      	beq.n	8005392 <TIM_Base_SetConfig+0xde>
 800538a:	687b      	ldr	r3, [r7, #4]
 800538c:	4a0c      	ldr	r2, [pc, #48]	; (80053c0 <TIM_Base_SetConfig+0x10c>)
 800538e:	4293      	cmp	r3, r2
 8005390:	d103      	bne.n	800539a <TIM_Base_SetConfig+0xe6>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8005392:	683b      	ldr	r3, [r7, #0]
 8005394:	691a      	ldr	r2, [r3, #16]
 8005396:	687b      	ldr	r3, [r7, #4]
 8005398:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800539a:	687b      	ldr	r3, [r7, #4]
 800539c:	2201      	movs	r2, #1
 800539e:	615a      	str	r2, [r3, #20]
}
 80053a0:	46c0      	nop			; (mov r8, r8)
 80053a2:	46bd      	mov	sp, r7
 80053a4:	b004      	add	sp, #16
 80053a6:	bd80      	pop	{r7, pc}
 80053a8:	40012c00 	.word	0x40012c00
 80053ac:	40000400 	.word	0x40000400
 80053b0:	40000800 	.word	0x40000800
 80053b4:	40002000 	.word	0x40002000
 80053b8:	40014000 	.word	0x40014000
 80053bc:	40014400 	.word	0x40014400
 80053c0:	40014800 	.word	0x40014800
 80053c4:	fffffcff 	.word	0xfffffcff

080053c8 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 80053c8:	b580      	push	{r7, lr}
 80053ca:	b084      	sub	sp, #16
 80053cc:	af00      	add	r7, sp, #0
 80053ce:	6078      	str	r0, [r7, #4]
 80053d0:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80053d2:	687b      	ldr	r3, [r7, #4]
 80053d4:	223c      	movs	r2, #60	; 0x3c
 80053d6:	5c9b      	ldrb	r3, [r3, r2]
 80053d8:	2b01      	cmp	r3, #1
 80053da:	d101      	bne.n	80053e0 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80053dc:	2302      	movs	r3, #2
 80053de:	e05a      	b.n	8005496 <HAL_TIMEx_MasterConfigSynchronization+0xce>
 80053e0:	687b      	ldr	r3, [r7, #4]
 80053e2:	223c      	movs	r2, #60	; 0x3c
 80053e4:	2101      	movs	r1, #1
 80053e6:	5499      	strb	r1, [r3, r2]

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80053e8:	687b      	ldr	r3, [r7, #4]
 80053ea:	223d      	movs	r2, #61	; 0x3d
 80053ec:	2102      	movs	r1, #2
 80053ee:	5499      	strb	r1, [r3, r2]

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80053f0:	687b      	ldr	r3, [r7, #4]
 80053f2:	681b      	ldr	r3, [r3, #0]
 80053f4:	685b      	ldr	r3, [r3, #4]
 80053f6:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80053f8:	687b      	ldr	r3, [r7, #4]
 80053fa:	681b      	ldr	r3, [r3, #0]
 80053fc:	689b      	ldr	r3, [r3, #8]
 80053fe:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8005400:	687b      	ldr	r3, [r7, #4]
 8005402:	681b      	ldr	r3, [r3, #0]
 8005404:	4a26      	ldr	r2, [pc, #152]	; (80054a0 <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 8005406:	4293      	cmp	r3, r2
 8005408:	d108      	bne.n	800541c <HAL_TIMEx_MasterConfigSynchronization+0x54>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 800540a:	68fb      	ldr	r3, [r7, #12]
 800540c:	4a25      	ldr	r2, [pc, #148]	; (80054a4 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 800540e:	4013      	ands	r3, r2
 8005410:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8005412:	683b      	ldr	r3, [r7, #0]
 8005414:	685b      	ldr	r3, [r3, #4]
 8005416:	68fa      	ldr	r2, [r7, #12]
 8005418:	4313      	orrs	r3, r2
 800541a:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800541c:	68fb      	ldr	r3, [r7, #12]
 800541e:	2270      	movs	r2, #112	; 0x70
 8005420:	4393      	bics	r3, r2
 8005422:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8005424:	683b      	ldr	r3, [r7, #0]
 8005426:	681b      	ldr	r3, [r3, #0]
 8005428:	68fa      	ldr	r2, [r7, #12]
 800542a:	4313      	orrs	r3, r2
 800542c:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800542e:	687b      	ldr	r3, [r7, #4]
 8005430:	681b      	ldr	r3, [r3, #0]
 8005432:	68fa      	ldr	r2, [r7, #12]
 8005434:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005436:	687b      	ldr	r3, [r7, #4]
 8005438:	681b      	ldr	r3, [r3, #0]
 800543a:	4a19      	ldr	r2, [pc, #100]	; (80054a0 <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 800543c:	4293      	cmp	r3, r2
 800543e:	d014      	beq.n	800546a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005440:	687b      	ldr	r3, [r7, #4]
 8005442:	681a      	ldr	r2, [r3, #0]
 8005444:	2380      	movs	r3, #128	; 0x80
 8005446:	05db      	lsls	r3, r3, #23
 8005448:	429a      	cmp	r2, r3
 800544a:	d00e      	beq.n	800546a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800544c:	687b      	ldr	r3, [r7, #4]
 800544e:	681b      	ldr	r3, [r3, #0]
 8005450:	4a15      	ldr	r2, [pc, #84]	; (80054a8 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8005452:	4293      	cmp	r3, r2
 8005454:	d009      	beq.n	800546a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005456:	687b      	ldr	r3, [r7, #4]
 8005458:	681b      	ldr	r3, [r3, #0]
 800545a:	4a14      	ldr	r2, [pc, #80]	; (80054ac <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 800545c:	4293      	cmp	r3, r2
 800545e:	d004      	beq.n	800546a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005460:	687b      	ldr	r3, [r7, #4]
 8005462:	681b      	ldr	r3, [r3, #0]
 8005464:	4a12      	ldr	r2, [pc, #72]	; (80054b0 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8005466:	4293      	cmp	r3, r2
 8005468:	d10c      	bne.n	8005484 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800546a:	68bb      	ldr	r3, [r7, #8]
 800546c:	2280      	movs	r2, #128	; 0x80
 800546e:	4393      	bics	r3, r2
 8005470:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8005472:	683b      	ldr	r3, [r7, #0]
 8005474:	689b      	ldr	r3, [r3, #8]
 8005476:	68ba      	ldr	r2, [r7, #8]
 8005478:	4313      	orrs	r3, r2
 800547a:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800547c:	687b      	ldr	r3, [r7, #4]
 800547e:	681b      	ldr	r3, [r3, #0]
 8005480:	68ba      	ldr	r2, [r7, #8]
 8005482:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8005484:	687b      	ldr	r3, [r7, #4]
 8005486:	223d      	movs	r2, #61	; 0x3d
 8005488:	2101      	movs	r1, #1
 800548a:	5499      	strb	r1, [r3, r2]

  __HAL_UNLOCK(htim);
 800548c:	687b      	ldr	r3, [r7, #4]
 800548e:	223c      	movs	r2, #60	; 0x3c
 8005490:	2100      	movs	r1, #0
 8005492:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8005494:	2300      	movs	r3, #0
}
 8005496:	0018      	movs	r0, r3
 8005498:	46bd      	mov	sp, r7
 800549a:	b004      	add	sp, #16
 800549c:	bd80      	pop	{r7, pc}
 800549e:	46c0      	nop			; (mov r8, r8)
 80054a0:	40012c00 	.word	0x40012c00
 80054a4:	ff0fffff 	.word	0xff0fffff
 80054a8:	40000400 	.word	0x40000400
 80054ac:	40000800 	.word	0x40000800
 80054b0:	40014000 	.word	0x40014000

080054b4 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80054b4:	b580      	push	{r7, lr}
 80054b6:	b082      	sub	sp, #8
 80054b8:	af00      	add	r7, sp, #0
 80054ba:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80054bc:	46c0      	nop			; (mov r8, r8)
 80054be:	46bd      	mov	sp, r7
 80054c0:	b002      	add	sp, #8
 80054c2:	bd80      	pop	{r7, pc}

080054c4 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80054c4:	b580      	push	{r7, lr}
 80054c6:	b082      	sub	sp, #8
 80054c8:	af00      	add	r7, sp, #0
 80054ca:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80054cc:	46c0      	nop			; (mov r8, r8)
 80054ce:	46bd      	mov	sp, r7
 80054d0:	b002      	add	sp, #8
 80054d2:	bd80      	pop	{r7, pc}

080054d4 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 80054d4:	b580      	push	{r7, lr}
 80054d6:	b082      	sub	sp, #8
 80054d8:	af00      	add	r7, sp, #0
 80054da:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 80054dc:	46c0      	nop			; (mov r8, r8)
 80054de:	46bd      	mov	sp, r7
 80054e0:	b002      	add	sp, #8
 80054e2:	bd80      	pop	{r7, pc}

080054e4 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80054e4:	b580      	push	{r7, lr}
 80054e6:	b082      	sub	sp, #8
 80054e8:	af00      	add	r7, sp, #0
 80054ea:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80054ec:	687b      	ldr	r3, [r7, #4]
 80054ee:	2b00      	cmp	r3, #0
 80054f0:	d101      	bne.n	80054f6 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80054f2:	2301      	movs	r3, #1
 80054f4:	e046      	b.n	8005584 <HAL_UART_Init+0xa0>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80054f6:	687b      	ldr	r3, [r7, #4]
 80054f8:	2288      	movs	r2, #136	; 0x88
 80054fa:	589b      	ldr	r3, [r3, r2]
 80054fc:	2b00      	cmp	r3, #0
 80054fe:	d107      	bne.n	8005510 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8005500:	687b      	ldr	r3, [r7, #4]
 8005502:	2284      	movs	r2, #132	; 0x84
 8005504:	2100      	movs	r1, #0
 8005506:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8005508:	687b      	ldr	r3, [r7, #4]
 800550a:	0018      	movs	r0, r3
 800550c:	f7fd fb1e 	bl	8002b4c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8005510:	687b      	ldr	r3, [r7, #4]
 8005512:	2288      	movs	r2, #136	; 0x88
 8005514:	2124      	movs	r1, #36	; 0x24
 8005516:	5099      	str	r1, [r3, r2]

  __HAL_UART_DISABLE(huart);
 8005518:	687b      	ldr	r3, [r7, #4]
 800551a:	681b      	ldr	r3, [r3, #0]
 800551c:	681a      	ldr	r2, [r3, #0]
 800551e:	687b      	ldr	r3, [r7, #4]
 8005520:	681b      	ldr	r3, [r3, #0]
 8005522:	2101      	movs	r1, #1
 8005524:	438a      	bics	r2, r1
 8005526:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8005528:	687b      	ldr	r3, [r7, #4]
 800552a:	0018      	movs	r0, r3
 800552c:	f000 f9ae 	bl	800588c <UART_SetConfig>
 8005530:	0003      	movs	r3, r0
 8005532:	2b01      	cmp	r3, #1
 8005534:	d101      	bne.n	800553a <HAL_UART_Init+0x56>
  {
    return HAL_ERROR;
 8005536:	2301      	movs	r3, #1
 8005538:	e024      	b.n	8005584 <HAL_UART_Init+0xa0>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800553a:	687b      	ldr	r3, [r7, #4]
 800553c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800553e:	2b00      	cmp	r3, #0
 8005540:	d003      	beq.n	800554a <HAL_UART_Init+0x66>
  {
    UART_AdvFeatureConfig(huart);
 8005542:	687b      	ldr	r3, [r7, #4]
 8005544:	0018      	movs	r0, r3
 8005546:	f000 fcf7 	bl	8005f38 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800554a:	687b      	ldr	r3, [r7, #4]
 800554c:	681b      	ldr	r3, [r3, #0]
 800554e:	685a      	ldr	r2, [r3, #4]
 8005550:	687b      	ldr	r3, [r7, #4]
 8005552:	681b      	ldr	r3, [r3, #0]
 8005554:	490d      	ldr	r1, [pc, #52]	; (800558c <HAL_UART_Init+0xa8>)
 8005556:	400a      	ands	r2, r1
 8005558:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800555a:	687b      	ldr	r3, [r7, #4]
 800555c:	681b      	ldr	r3, [r3, #0]
 800555e:	689a      	ldr	r2, [r3, #8]
 8005560:	687b      	ldr	r3, [r7, #4]
 8005562:	681b      	ldr	r3, [r3, #0]
 8005564:	212a      	movs	r1, #42	; 0x2a
 8005566:	438a      	bics	r2, r1
 8005568:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800556a:	687b      	ldr	r3, [r7, #4]
 800556c:	681b      	ldr	r3, [r3, #0]
 800556e:	681a      	ldr	r2, [r3, #0]
 8005570:	687b      	ldr	r3, [r7, #4]
 8005572:	681b      	ldr	r3, [r3, #0]
 8005574:	2101      	movs	r1, #1
 8005576:	430a      	orrs	r2, r1
 8005578:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800557a:	687b      	ldr	r3, [r7, #4]
 800557c:	0018      	movs	r0, r3
 800557e:	f000 fd8f 	bl	80060a0 <UART_CheckIdleState>
 8005582:	0003      	movs	r3, r0
}
 8005584:	0018      	movs	r0, r3
 8005586:	46bd      	mov	sp, r7
 8005588:	b002      	add	sp, #8
 800558a:	bd80      	pop	{r7, pc}
 800558c:	ffffb7ff 	.word	0xffffb7ff

08005590 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005590:	b580      	push	{r7, lr}
 8005592:	b08a      	sub	sp, #40	; 0x28
 8005594:	af02      	add	r7, sp, #8
 8005596:	60f8      	str	r0, [r7, #12]
 8005598:	60b9      	str	r1, [r7, #8]
 800559a:	603b      	str	r3, [r7, #0]
 800559c:	1dbb      	adds	r3, r7, #6
 800559e:	801a      	strh	r2, [r3, #0]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80055a0:	68fb      	ldr	r3, [r7, #12]
 80055a2:	2288      	movs	r2, #136	; 0x88
 80055a4:	589b      	ldr	r3, [r3, r2]
 80055a6:	2b20      	cmp	r3, #32
 80055a8:	d000      	beq.n	80055ac <HAL_UART_Transmit+0x1c>
 80055aa:	e088      	b.n	80056be <HAL_UART_Transmit+0x12e>
  {
    if ((pData == NULL) || (Size == 0U))
 80055ac:	68bb      	ldr	r3, [r7, #8]
 80055ae:	2b00      	cmp	r3, #0
 80055b0:	d003      	beq.n	80055ba <HAL_UART_Transmit+0x2a>
 80055b2:	1dbb      	adds	r3, r7, #6
 80055b4:	881b      	ldrh	r3, [r3, #0]
 80055b6:	2b00      	cmp	r3, #0
 80055b8:	d101      	bne.n	80055be <HAL_UART_Transmit+0x2e>
    {
      return  HAL_ERROR;
 80055ba:	2301      	movs	r3, #1
 80055bc:	e080      	b.n	80056c0 <HAL_UART_Transmit+0x130>
    }

    /* In case of 9bits/No Parity transfer, pData buffer provided as input parameter
       should be aligned on a u16 frontier, as data to be filled into TDR will be
       handled through a u16 cast. */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80055be:	68fb      	ldr	r3, [r7, #12]
 80055c0:	689a      	ldr	r2, [r3, #8]
 80055c2:	2380      	movs	r3, #128	; 0x80
 80055c4:	015b      	lsls	r3, r3, #5
 80055c6:	429a      	cmp	r2, r3
 80055c8:	d109      	bne.n	80055de <HAL_UART_Transmit+0x4e>
 80055ca:	68fb      	ldr	r3, [r7, #12]
 80055cc:	691b      	ldr	r3, [r3, #16]
 80055ce:	2b00      	cmp	r3, #0
 80055d0:	d105      	bne.n	80055de <HAL_UART_Transmit+0x4e>
    {
      if ((((uint32_t)pData) & 1U) != 0U)
 80055d2:	68bb      	ldr	r3, [r7, #8]
 80055d4:	2201      	movs	r2, #1
 80055d6:	4013      	ands	r3, r2
 80055d8:	d001      	beq.n	80055de <HAL_UART_Transmit+0x4e>
      {
        return  HAL_ERROR;
 80055da:	2301      	movs	r3, #1
 80055dc:	e070      	b.n	80056c0 <HAL_UART_Transmit+0x130>
      }
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80055de:	68fb      	ldr	r3, [r7, #12]
 80055e0:	2290      	movs	r2, #144	; 0x90
 80055e2:	2100      	movs	r1, #0
 80055e4:	5099      	str	r1, [r3, r2]
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80055e6:	68fb      	ldr	r3, [r7, #12]
 80055e8:	2288      	movs	r2, #136	; 0x88
 80055ea:	2121      	movs	r1, #33	; 0x21
 80055ec:	5099      	str	r1, [r3, r2]

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80055ee:	f7fd fced 	bl	8002fcc <HAL_GetTick>
 80055f2:	0003      	movs	r3, r0
 80055f4:	617b      	str	r3, [r7, #20]

    huart->TxXferSize  = Size;
 80055f6:	68fb      	ldr	r3, [r7, #12]
 80055f8:	1dba      	adds	r2, r7, #6
 80055fa:	2154      	movs	r1, #84	; 0x54
 80055fc:	8812      	ldrh	r2, [r2, #0]
 80055fe:	525a      	strh	r2, [r3, r1]
    huart->TxXferCount = Size;
 8005600:	68fb      	ldr	r3, [r7, #12]
 8005602:	1dba      	adds	r2, r7, #6
 8005604:	2156      	movs	r1, #86	; 0x56
 8005606:	8812      	ldrh	r2, [r2, #0]
 8005608:	525a      	strh	r2, [r3, r1]

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800560a:	68fb      	ldr	r3, [r7, #12]
 800560c:	689a      	ldr	r2, [r3, #8]
 800560e:	2380      	movs	r3, #128	; 0x80
 8005610:	015b      	lsls	r3, r3, #5
 8005612:	429a      	cmp	r2, r3
 8005614:	d108      	bne.n	8005628 <HAL_UART_Transmit+0x98>
 8005616:	68fb      	ldr	r3, [r7, #12]
 8005618:	691b      	ldr	r3, [r3, #16]
 800561a:	2b00      	cmp	r3, #0
 800561c:	d104      	bne.n	8005628 <HAL_UART_Transmit+0x98>
    {
      pdata8bits  = NULL;
 800561e:	2300      	movs	r3, #0
 8005620:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8005622:	68bb      	ldr	r3, [r7, #8]
 8005624:	61bb      	str	r3, [r7, #24]
 8005626:	e003      	b.n	8005630 <HAL_UART_Transmit+0xa0>
    }
    else
    {
      pdata8bits  = pData;
 8005628:	68bb      	ldr	r3, [r7, #8]
 800562a:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800562c:	2300      	movs	r3, #0
 800562e:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8005630:	e02c      	b.n	800568c <HAL_UART_Transmit+0xfc>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8005632:	697a      	ldr	r2, [r7, #20]
 8005634:	68f8      	ldr	r0, [r7, #12]
 8005636:	683b      	ldr	r3, [r7, #0]
 8005638:	9300      	str	r3, [sp, #0]
 800563a:	0013      	movs	r3, r2
 800563c:	2200      	movs	r2, #0
 800563e:	2180      	movs	r1, #128	; 0x80
 8005640:	f000 fd7c 	bl	800613c <UART_WaitOnFlagUntilTimeout>
 8005644:	1e03      	subs	r3, r0, #0
 8005646:	d001      	beq.n	800564c <HAL_UART_Transmit+0xbc>
      {
        return HAL_TIMEOUT;
 8005648:	2303      	movs	r3, #3
 800564a:	e039      	b.n	80056c0 <HAL_UART_Transmit+0x130>
      }
      if (pdata8bits == NULL)
 800564c:	69fb      	ldr	r3, [r7, #28]
 800564e:	2b00      	cmp	r3, #0
 8005650:	d10b      	bne.n	800566a <HAL_UART_Transmit+0xda>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8005652:	69bb      	ldr	r3, [r7, #24]
 8005654:	881b      	ldrh	r3, [r3, #0]
 8005656:	001a      	movs	r2, r3
 8005658:	68fb      	ldr	r3, [r7, #12]
 800565a:	681b      	ldr	r3, [r3, #0]
 800565c:	05d2      	lsls	r2, r2, #23
 800565e:	0dd2      	lsrs	r2, r2, #23
 8005660:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8005662:	69bb      	ldr	r3, [r7, #24]
 8005664:	3302      	adds	r3, #2
 8005666:	61bb      	str	r3, [r7, #24]
 8005668:	e007      	b.n	800567a <HAL_UART_Transmit+0xea>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 800566a:	69fb      	ldr	r3, [r7, #28]
 800566c:	781a      	ldrb	r2, [r3, #0]
 800566e:	68fb      	ldr	r3, [r7, #12]
 8005670:	681b      	ldr	r3, [r3, #0]
 8005672:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8005674:	69fb      	ldr	r3, [r7, #28]
 8005676:	3301      	adds	r3, #1
 8005678:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800567a:	68fb      	ldr	r3, [r7, #12]
 800567c:	2256      	movs	r2, #86	; 0x56
 800567e:	5a9b      	ldrh	r3, [r3, r2]
 8005680:	b29b      	uxth	r3, r3
 8005682:	3b01      	subs	r3, #1
 8005684:	b299      	uxth	r1, r3
 8005686:	68fb      	ldr	r3, [r7, #12]
 8005688:	2256      	movs	r2, #86	; 0x56
 800568a:	5299      	strh	r1, [r3, r2]
    while (huart->TxXferCount > 0U)
 800568c:	68fb      	ldr	r3, [r7, #12]
 800568e:	2256      	movs	r2, #86	; 0x56
 8005690:	5a9b      	ldrh	r3, [r3, r2]
 8005692:	b29b      	uxth	r3, r3
 8005694:	2b00      	cmp	r3, #0
 8005696:	d1cc      	bne.n	8005632 <HAL_UART_Transmit+0xa2>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8005698:	697a      	ldr	r2, [r7, #20]
 800569a:	68f8      	ldr	r0, [r7, #12]
 800569c:	683b      	ldr	r3, [r7, #0]
 800569e:	9300      	str	r3, [sp, #0]
 80056a0:	0013      	movs	r3, r2
 80056a2:	2200      	movs	r2, #0
 80056a4:	2140      	movs	r1, #64	; 0x40
 80056a6:	f000 fd49 	bl	800613c <UART_WaitOnFlagUntilTimeout>
 80056aa:	1e03      	subs	r3, r0, #0
 80056ac:	d001      	beq.n	80056b2 <HAL_UART_Transmit+0x122>
    {
      return HAL_TIMEOUT;
 80056ae:	2303      	movs	r3, #3
 80056b0:	e006      	b.n	80056c0 <HAL_UART_Transmit+0x130>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80056b2:	68fb      	ldr	r3, [r7, #12]
 80056b4:	2288      	movs	r2, #136	; 0x88
 80056b6:	2120      	movs	r1, #32
 80056b8:	5099      	str	r1, [r3, r2]

    return HAL_OK;
 80056ba:	2300      	movs	r3, #0
 80056bc:	e000      	b.n	80056c0 <HAL_UART_Transmit+0x130>
  }
  else
  {
    return HAL_BUSY;
 80056be:	2302      	movs	r3, #2
  }
}
 80056c0:	0018      	movs	r0, r3
 80056c2:	46bd      	mov	sp, r7
 80056c4:	b008      	add	sp, #32
 80056c6:	bd80      	pop	{r7, pc}

080056c8 <HAL_UART_Receive>:
  * @param Size    Amount of data elements (u8 or u16) to be received.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80056c8:	b580      	push	{r7, lr}
 80056ca:	b08a      	sub	sp, #40	; 0x28
 80056cc:	af02      	add	r7, sp, #8
 80056ce:	60f8      	str	r0, [r7, #12]
 80056d0:	60b9      	str	r1, [r7, #8]
 80056d2:	603b      	str	r3, [r7, #0]
 80056d4:	1dbb      	adds	r3, r7, #6
 80056d6:	801a      	strh	r2, [r3, #0]
  uint16_t *pdata16bits;
  uint16_t uhMask;
  uint32_t tickstart;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80056d8:	68fb      	ldr	r3, [r7, #12]
 80056da:	228c      	movs	r2, #140	; 0x8c
 80056dc:	589b      	ldr	r3, [r3, r2]
 80056de:	2b20      	cmp	r3, #32
 80056e0:	d000      	beq.n	80056e4 <HAL_UART_Receive+0x1c>
 80056e2:	e0cc      	b.n	800587e <HAL_UART_Receive+0x1b6>
  {
    if ((pData == NULL) || (Size == 0U))
 80056e4:	68bb      	ldr	r3, [r7, #8]
 80056e6:	2b00      	cmp	r3, #0
 80056e8:	d003      	beq.n	80056f2 <HAL_UART_Receive+0x2a>
 80056ea:	1dbb      	adds	r3, r7, #6
 80056ec:	881b      	ldrh	r3, [r3, #0]
 80056ee:	2b00      	cmp	r3, #0
 80056f0:	d101      	bne.n	80056f6 <HAL_UART_Receive+0x2e>
    {
      return  HAL_ERROR;
 80056f2:	2301      	movs	r3, #1
 80056f4:	e0c4      	b.n	8005880 <HAL_UART_Receive+0x1b8>
    }

    /* In case of 9bits/No Parity transfer, pData buffer provided as input parameter
       should be aligned on a u16 frontier, as data to be received from RDR will be
       handled through a u16 cast. */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80056f6:	68fb      	ldr	r3, [r7, #12]
 80056f8:	689a      	ldr	r2, [r3, #8]
 80056fa:	2380      	movs	r3, #128	; 0x80
 80056fc:	015b      	lsls	r3, r3, #5
 80056fe:	429a      	cmp	r2, r3
 8005700:	d109      	bne.n	8005716 <HAL_UART_Receive+0x4e>
 8005702:	68fb      	ldr	r3, [r7, #12]
 8005704:	691b      	ldr	r3, [r3, #16]
 8005706:	2b00      	cmp	r3, #0
 8005708:	d105      	bne.n	8005716 <HAL_UART_Receive+0x4e>
    {
      if ((((uint32_t)pData) & 1U) != 0U)
 800570a:	68bb      	ldr	r3, [r7, #8]
 800570c:	2201      	movs	r2, #1
 800570e:	4013      	ands	r3, r2
 8005710:	d001      	beq.n	8005716 <HAL_UART_Receive+0x4e>
      {
        return  HAL_ERROR;
 8005712:	2301      	movs	r3, #1
 8005714:	e0b4      	b.n	8005880 <HAL_UART_Receive+0x1b8>
      }
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005716:	68fb      	ldr	r3, [r7, #12]
 8005718:	2290      	movs	r2, #144	; 0x90
 800571a:	2100      	movs	r1, #0
 800571c:	5099      	str	r1, [r3, r2]
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 800571e:	68fb      	ldr	r3, [r7, #12]
 8005720:	228c      	movs	r2, #140	; 0x8c
 8005722:	2122      	movs	r1, #34	; 0x22
 8005724:	5099      	str	r1, [r3, r2]
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005726:	68fb      	ldr	r3, [r7, #12]
 8005728:	2200      	movs	r2, #0
 800572a:	66da      	str	r2, [r3, #108]	; 0x6c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800572c:	f7fd fc4e 	bl	8002fcc <HAL_GetTick>
 8005730:	0003      	movs	r3, r0
 8005732:	617b      	str	r3, [r7, #20]

    huart->RxXferSize  = Size;
 8005734:	68fb      	ldr	r3, [r7, #12]
 8005736:	1dba      	adds	r2, r7, #6
 8005738:	215c      	movs	r1, #92	; 0x5c
 800573a:	8812      	ldrh	r2, [r2, #0]
 800573c:	525a      	strh	r2, [r3, r1]
    huart->RxXferCount = Size;
 800573e:	68fb      	ldr	r3, [r7, #12]
 8005740:	1dba      	adds	r2, r7, #6
 8005742:	215e      	movs	r1, #94	; 0x5e
 8005744:	8812      	ldrh	r2, [r2, #0]
 8005746:	525a      	strh	r2, [r3, r1]

    /* Computation of UART mask to apply to RDR register */
    UART_MASK_COMPUTATION(huart);
 8005748:	68fb      	ldr	r3, [r7, #12]
 800574a:	689a      	ldr	r2, [r3, #8]
 800574c:	2380      	movs	r3, #128	; 0x80
 800574e:	015b      	lsls	r3, r3, #5
 8005750:	429a      	cmp	r2, r3
 8005752:	d10d      	bne.n	8005770 <HAL_UART_Receive+0xa8>
 8005754:	68fb      	ldr	r3, [r7, #12]
 8005756:	691b      	ldr	r3, [r3, #16]
 8005758:	2b00      	cmp	r3, #0
 800575a:	d104      	bne.n	8005766 <HAL_UART_Receive+0x9e>
 800575c:	68fb      	ldr	r3, [r7, #12]
 800575e:	2260      	movs	r2, #96	; 0x60
 8005760:	4949      	ldr	r1, [pc, #292]	; (8005888 <HAL_UART_Receive+0x1c0>)
 8005762:	5299      	strh	r1, [r3, r2]
 8005764:	e02e      	b.n	80057c4 <HAL_UART_Receive+0xfc>
 8005766:	68fb      	ldr	r3, [r7, #12]
 8005768:	2260      	movs	r2, #96	; 0x60
 800576a:	21ff      	movs	r1, #255	; 0xff
 800576c:	5299      	strh	r1, [r3, r2]
 800576e:	e029      	b.n	80057c4 <HAL_UART_Receive+0xfc>
 8005770:	68fb      	ldr	r3, [r7, #12]
 8005772:	689b      	ldr	r3, [r3, #8]
 8005774:	2b00      	cmp	r3, #0
 8005776:	d10d      	bne.n	8005794 <HAL_UART_Receive+0xcc>
 8005778:	68fb      	ldr	r3, [r7, #12]
 800577a:	691b      	ldr	r3, [r3, #16]
 800577c:	2b00      	cmp	r3, #0
 800577e:	d104      	bne.n	800578a <HAL_UART_Receive+0xc2>
 8005780:	68fb      	ldr	r3, [r7, #12]
 8005782:	2260      	movs	r2, #96	; 0x60
 8005784:	21ff      	movs	r1, #255	; 0xff
 8005786:	5299      	strh	r1, [r3, r2]
 8005788:	e01c      	b.n	80057c4 <HAL_UART_Receive+0xfc>
 800578a:	68fb      	ldr	r3, [r7, #12]
 800578c:	2260      	movs	r2, #96	; 0x60
 800578e:	217f      	movs	r1, #127	; 0x7f
 8005790:	5299      	strh	r1, [r3, r2]
 8005792:	e017      	b.n	80057c4 <HAL_UART_Receive+0xfc>
 8005794:	68fb      	ldr	r3, [r7, #12]
 8005796:	689a      	ldr	r2, [r3, #8]
 8005798:	2380      	movs	r3, #128	; 0x80
 800579a:	055b      	lsls	r3, r3, #21
 800579c:	429a      	cmp	r2, r3
 800579e:	d10d      	bne.n	80057bc <HAL_UART_Receive+0xf4>
 80057a0:	68fb      	ldr	r3, [r7, #12]
 80057a2:	691b      	ldr	r3, [r3, #16]
 80057a4:	2b00      	cmp	r3, #0
 80057a6:	d104      	bne.n	80057b2 <HAL_UART_Receive+0xea>
 80057a8:	68fb      	ldr	r3, [r7, #12]
 80057aa:	2260      	movs	r2, #96	; 0x60
 80057ac:	217f      	movs	r1, #127	; 0x7f
 80057ae:	5299      	strh	r1, [r3, r2]
 80057b0:	e008      	b.n	80057c4 <HAL_UART_Receive+0xfc>
 80057b2:	68fb      	ldr	r3, [r7, #12]
 80057b4:	2260      	movs	r2, #96	; 0x60
 80057b6:	213f      	movs	r1, #63	; 0x3f
 80057b8:	5299      	strh	r1, [r3, r2]
 80057ba:	e003      	b.n	80057c4 <HAL_UART_Receive+0xfc>
 80057bc:	68fb      	ldr	r3, [r7, #12]
 80057be:	2260      	movs	r2, #96	; 0x60
 80057c0:	2100      	movs	r1, #0
 80057c2:	5299      	strh	r1, [r3, r2]
    uhMask = huart->Mask;
 80057c4:	2312      	movs	r3, #18
 80057c6:	18fb      	adds	r3, r7, r3
 80057c8:	68fa      	ldr	r2, [r7, #12]
 80057ca:	2160      	movs	r1, #96	; 0x60
 80057cc:	5a52      	ldrh	r2, [r2, r1]
 80057ce:	801a      	strh	r2, [r3, #0]

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80057d0:	68fb      	ldr	r3, [r7, #12]
 80057d2:	689a      	ldr	r2, [r3, #8]
 80057d4:	2380      	movs	r3, #128	; 0x80
 80057d6:	015b      	lsls	r3, r3, #5
 80057d8:	429a      	cmp	r2, r3
 80057da:	d108      	bne.n	80057ee <HAL_UART_Receive+0x126>
 80057dc:	68fb      	ldr	r3, [r7, #12]
 80057de:	691b      	ldr	r3, [r3, #16]
 80057e0:	2b00      	cmp	r3, #0
 80057e2:	d104      	bne.n	80057ee <HAL_UART_Receive+0x126>
    {
      pdata8bits  = NULL;
 80057e4:	2300      	movs	r3, #0
 80057e6:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 80057e8:	68bb      	ldr	r3, [r7, #8]
 80057ea:	61bb      	str	r3, [r7, #24]
 80057ec:	e003      	b.n	80057f6 <HAL_UART_Receive+0x12e>
    }
    else
    {
      pdata8bits  = pData;
 80057ee:	68bb      	ldr	r3, [r7, #8]
 80057f0:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80057f2:	2300      	movs	r3, #0
 80057f4:	61bb      	str	r3, [r7, #24]
    }

    /* as long as data have to be received */
    while (huart->RxXferCount > 0U)
 80057f6:	e036      	b.n	8005866 <HAL_UART_Receive+0x19e>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 80057f8:	697a      	ldr	r2, [r7, #20]
 80057fa:	68f8      	ldr	r0, [r7, #12]
 80057fc:	683b      	ldr	r3, [r7, #0]
 80057fe:	9300      	str	r3, [sp, #0]
 8005800:	0013      	movs	r3, r2
 8005802:	2200      	movs	r2, #0
 8005804:	2120      	movs	r1, #32
 8005806:	f000 fc99 	bl	800613c <UART_WaitOnFlagUntilTimeout>
 800580a:	1e03      	subs	r3, r0, #0
 800580c:	d001      	beq.n	8005812 <HAL_UART_Receive+0x14a>
      {
        return HAL_TIMEOUT;
 800580e:	2303      	movs	r3, #3
 8005810:	e036      	b.n	8005880 <HAL_UART_Receive+0x1b8>
      }
      if (pdata8bits == NULL)
 8005812:	69fb      	ldr	r3, [r7, #28]
 8005814:	2b00      	cmp	r3, #0
 8005816:	d10e      	bne.n	8005836 <HAL_UART_Receive+0x16e>
      {
        *pdata16bits = (uint16_t)(huart->Instance->RDR & uhMask);
 8005818:	68fb      	ldr	r3, [r7, #12]
 800581a:	681b      	ldr	r3, [r3, #0]
 800581c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800581e:	b29b      	uxth	r3, r3
 8005820:	2212      	movs	r2, #18
 8005822:	18ba      	adds	r2, r7, r2
 8005824:	8812      	ldrh	r2, [r2, #0]
 8005826:	4013      	ands	r3, r2
 8005828:	b29a      	uxth	r2, r3
 800582a:	69bb      	ldr	r3, [r7, #24]
 800582c:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 800582e:	69bb      	ldr	r3, [r7, #24]
 8005830:	3302      	adds	r3, #2
 8005832:	61bb      	str	r3, [r7, #24]
 8005834:	e00e      	b.n	8005854 <HAL_UART_Receive+0x18c>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->RDR & (uint8_t)uhMask);
 8005836:	68fb      	ldr	r3, [r7, #12]
 8005838:	681b      	ldr	r3, [r3, #0]
 800583a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800583c:	b2db      	uxtb	r3, r3
 800583e:	2212      	movs	r2, #18
 8005840:	18ba      	adds	r2, r7, r2
 8005842:	8812      	ldrh	r2, [r2, #0]
 8005844:	b2d2      	uxtb	r2, r2
 8005846:	4013      	ands	r3, r2
 8005848:	b2da      	uxtb	r2, r3
 800584a:	69fb      	ldr	r3, [r7, #28]
 800584c:	701a      	strb	r2, [r3, #0]
        pdata8bits++;
 800584e:	69fb      	ldr	r3, [r7, #28]
 8005850:	3301      	adds	r3, #1
 8005852:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 8005854:	68fb      	ldr	r3, [r7, #12]
 8005856:	225e      	movs	r2, #94	; 0x5e
 8005858:	5a9b      	ldrh	r3, [r3, r2]
 800585a:	b29b      	uxth	r3, r3
 800585c:	3b01      	subs	r3, #1
 800585e:	b299      	uxth	r1, r3
 8005860:	68fb      	ldr	r3, [r7, #12]
 8005862:	225e      	movs	r2, #94	; 0x5e
 8005864:	5299      	strh	r1, [r3, r2]
    while (huart->RxXferCount > 0U)
 8005866:	68fb      	ldr	r3, [r7, #12]
 8005868:	225e      	movs	r2, #94	; 0x5e
 800586a:	5a9b      	ldrh	r3, [r3, r2]
 800586c:	b29b      	uxth	r3, r3
 800586e:	2b00      	cmp	r3, #0
 8005870:	d1c2      	bne.n	80057f8 <HAL_UART_Receive+0x130>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8005872:	68fb      	ldr	r3, [r7, #12]
 8005874:	228c      	movs	r2, #140	; 0x8c
 8005876:	2120      	movs	r1, #32
 8005878:	5099      	str	r1, [r3, r2]

    return HAL_OK;
 800587a:	2300      	movs	r3, #0
 800587c:	e000      	b.n	8005880 <HAL_UART_Receive+0x1b8>
  }
  else
  {
    return HAL_BUSY;
 800587e:	2302      	movs	r3, #2
  }
}
 8005880:	0018      	movs	r0, r3
 8005882:	46bd      	mov	sp, r7
 8005884:	b008      	add	sp, #32
 8005886:	bd80      	pop	{r7, pc}
 8005888:	000001ff 	.word	0x000001ff

0800588c <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800588c:	b5b0      	push	{r4, r5, r7, lr}
 800588e:	b090      	sub	sp, #64	; 0x40
 8005890:	af00      	add	r7, sp, #0
 8005892:	6278      	str	r0, [r7, #36]	; 0x24
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8005894:	231a      	movs	r3, #26
 8005896:	2220      	movs	r2, #32
 8005898:	189b      	adds	r3, r3, r2
 800589a:	19db      	adds	r3, r3, r7
 800589c:	2200      	movs	r2, #0
 800589e:	701a      	strb	r2, [r3, #0]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80058a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80058a2:	689a      	ldr	r2, [r3, #8]
 80058a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80058a6:	691b      	ldr	r3, [r3, #16]
 80058a8:	431a      	orrs	r2, r3
 80058aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80058ac:	695b      	ldr	r3, [r3, #20]
 80058ae:	431a      	orrs	r2, r3
 80058b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80058b2:	69db      	ldr	r3, [r3, #28]
 80058b4:	4313      	orrs	r3, r2
 80058b6:	63fb      	str	r3, [r7, #60]	; 0x3c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80058b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80058ba:	681b      	ldr	r3, [r3, #0]
 80058bc:	681b      	ldr	r3, [r3, #0]
 80058be:	4ac1      	ldr	r2, [pc, #772]	; (8005bc4 <UART_SetConfig+0x338>)
 80058c0:	4013      	ands	r3, r2
 80058c2:	0019      	movs	r1, r3
 80058c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80058c6:	681a      	ldr	r2, [r3, #0]
 80058c8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80058ca:	430b      	orrs	r3, r1
 80058cc:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80058ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80058d0:	681b      	ldr	r3, [r3, #0]
 80058d2:	685b      	ldr	r3, [r3, #4]
 80058d4:	4abc      	ldr	r2, [pc, #752]	; (8005bc8 <UART_SetConfig+0x33c>)
 80058d6:	4013      	ands	r3, r2
 80058d8:	0018      	movs	r0, r3
 80058da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80058dc:	68d9      	ldr	r1, [r3, #12]
 80058de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80058e0:	681a      	ldr	r2, [r3, #0]
 80058e2:	0003      	movs	r3, r0
 80058e4:	430b      	orrs	r3, r1
 80058e6:	6053      	str	r3, [r2, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80058e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80058ea:	699b      	ldr	r3, [r3, #24]
 80058ec:	63fb      	str	r3, [r7, #60]	; 0x3c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 80058ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80058f0:	681b      	ldr	r3, [r3, #0]
 80058f2:	4ab6      	ldr	r2, [pc, #728]	; (8005bcc <UART_SetConfig+0x340>)
 80058f4:	4293      	cmp	r3, r2
 80058f6:	d009      	beq.n	800590c <UART_SetConfig+0x80>
 80058f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80058fa:	681b      	ldr	r3, [r3, #0]
 80058fc:	4ab4      	ldr	r2, [pc, #720]	; (8005bd0 <UART_SetConfig+0x344>)
 80058fe:	4293      	cmp	r3, r2
 8005900:	d004      	beq.n	800590c <UART_SetConfig+0x80>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8005902:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005904:	6a1b      	ldr	r3, [r3, #32]
 8005906:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8005908:	4313      	orrs	r3, r2
 800590a:	63fb      	str	r3, [r7, #60]	; 0x3c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800590c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800590e:	681b      	ldr	r3, [r3, #0]
 8005910:	689b      	ldr	r3, [r3, #8]
 8005912:	4ab0      	ldr	r2, [pc, #704]	; (8005bd4 <UART_SetConfig+0x348>)
 8005914:	4013      	ands	r3, r2
 8005916:	0019      	movs	r1, r3
 8005918:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800591a:	681a      	ldr	r2, [r3, #0]
 800591c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800591e:	430b      	orrs	r3, r1
 8005920:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8005922:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005924:	681b      	ldr	r3, [r3, #0]
 8005926:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005928:	220f      	movs	r2, #15
 800592a:	4393      	bics	r3, r2
 800592c:	0018      	movs	r0, r3
 800592e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005930:	6a59      	ldr	r1, [r3, #36]	; 0x24
 8005932:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005934:	681a      	ldr	r2, [r3, #0]
 8005936:	0003      	movs	r3, r0
 8005938:	430b      	orrs	r3, r1
 800593a:	62d3      	str	r3, [r2, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800593c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800593e:	681b      	ldr	r3, [r3, #0]
 8005940:	4aa5      	ldr	r2, [pc, #660]	; (8005bd8 <UART_SetConfig+0x34c>)
 8005942:	4293      	cmp	r3, r2
 8005944:	d131      	bne.n	80059aa <UART_SetConfig+0x11e>
 8005946:	4ba5      	ldr	r3, [pc, #660]	; (8005bdc <UART_SetConfig+0x350>)
 8005948:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800594a:	2203      	movs	r2, #3
 800594c:	4013      	ands	r3, r2
 800594e:	2b03      	cmp	r3, #3
 8005950:	d01d      	beq.n	800598e <UART_SetConfig+0x102>
 8005952:	d823      	bhi.n	800599c <UART_SetConfig+0x110>
 8005954:	2b02      	cmp	r3, #2
 8005956:	d00c      	beq.n	8005972 <UART_SetConfig+0xe6>
 8005958:	d820      	bhi.n	800599c <UART_SetConfig+0x110>
 800595a:	2b00      	cmp	r3, #0
 800595c:	d002      	beq.n	8005964 <UART_SetConfig+0xd8>
 800595e:	2b01      	cmp	r3, #1
 8005960:	d00e      	beq.n	8005980 <UART_SetConfig+0xf4>
 8005962:	e01b      	b.n	800599c <UART_SetConfig+0x110>
 8005964:	231b      	movs	r3, #27
 8005966:	2220      	movs	r2, #32
 8005968:	189b      	adds	r3, r3, r2
 800596a:	19db      	adds	r3, r3, r7
 800596c:	2200      	movs	r2, #0
 800596e:	701a      	strb	r2, [r3, #0]
 8005970:	e154      	b.n	8005c1c <UART_SetConfig+0x390>
 8005972:	231b      	movs	r3, #27
 8005974:	2220      	movs	r2, #32
 8005976:	189b      	adds	r3, r3, r2
 8005978:	19db      	adds	r3, r3, r7
 800597a:	2202      	movs	r2, #2
 800597c:	701a      	strb	r2, [r3, #0]
 800597e:	e14d      	b.n	8005c1c <UART_SetConfig+0x390>
 8005980:	231b      	movs	r3, #27
 8005982:	2220      	movs	r2, #32
 8005984:	189b      	adds	r3, r3, r2
 8005986:	19db      	adds	r3, r3, r7
 8005988:	2204      	movs	r2, #4
 800598a:	701a      	strb	r2, [r3, #0]
 800598c:	e146      	b.n	8005c1c <UART_SetConfig+0x390>
 800598e:	231b      	movs	r3, #27
 8005990:	2220      	movs	r2, #32
 8005992:	189b      	adds	r3, r3, r2
 8005994:	19db      	adds	r3, r3, r7
 8005996:	2208      	movs	r2, #8
 8005998:	701a      	strb	r2, [r3, #0]
 800599a:	e13f      	b.n	8005c1c <UART_SetConfig+0x390>
 800599c:	231b      	movs	r3, #27
 800599e:	2220      	movs	r2, #32
 80059a0:	189b      	adds	r3, r3, r2
 80059a2:	19db      	adds	r3, r3, r7
 80059a4:	2210      	movs	r2, #16
 80059a6:	701a      	strb	r2, [r3, #0]
 80059a8:	e138      	b.n	8005c1c <UART_SetConfig+0x390>
 80059aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80059ac:	681b      	ldr	r3, [r3, #0]
 80059ae:	4a8c      	ldr	r2, [pc, #560]	; (8005be0 <UART_SetConfig+0x354>)
 80059b0:	4293      	cmp	r3, r2
 80059b2:	d131      	bne.n	8005a18 <UART_SetConfig+0x18c>
 80059b4:	4b89      	ldr	r3, [pc, #548]	; (8005bdc <UART_SetConfig+0x350>)
 80059b6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80059b8:	220c      	movs	r2, #12
 80059ba:	4013      	ands	r3, r2
 80059bc:	2b0c      	cmp	r3, #12
 80059be:	d01d      	beq.n	80059fc <UART_SetConfig+0x170>
 80059c0:	d823      	bhi.n	8005a0a <UART_SetConfig+0x17e>
 80059c2:	2b08      	cmp	r3, #8
 80059c4:	d00c      	beq.n	80059e0 <UART_SetConfig+0x154>
 80059c6:	d820      	bhi.n	8005a0a <UART_SetConfig+0x17e>
 80059c8:	2b00      	cmp	r3, #0
 80059ca:	d002      	beq.n	80059d2 <UART_SetConfig+0x146>
 80059cc:	2b04      	cmp	r3, #4
 80059ce:	d00e      	beq.n	80059ee <UART_SetConfig+0x162>
 80059d0:	e01b      	b.n	8005a0a <UART_SetConfig+0x17e>
 80059d2:	231b      	movs	r3, #27
 80059d4:	2220      	movs	r2, #32
 80059d6:	189b      	adds	r3, r3, r2
 80059d8:	19db      	adds	r3, r3, r7
 80059da:	2200      	movs	r2, #0
 80059dc:	701a      	strb	r2, [r3, #0]
 80059de:	e11d      	b.n	8005c1c <UART_SetConfig+0x390>
 80059e0:	231b      	movs	r3, #27
 80059e2:	2220      	movs	r2, #32
 80059e4:	189b      	adds	r3, r3, r2
 80059e6:	19db      	adds	r3, r3, r7
 80059e8:	2202      	movs	r2, #2
 80059ea:	701a      	strb	r2, [r3, #0]
 80059ec:	e116      	b.n	8005c1c <UART_SetConfig+0x390>
 80059ee:	231b      	movs	r3, #27
 80059f0:	2220      	movs	r2, #32
 80059f2:	189b      	adds	r3, r3, r2
 80059f4:	19db      	adds	r3, r3, r7
 80059f6:	2204      	movs	r2, #4
 80059f8:	701a      	strb	r2, [r3, #0]
 80059fa:	e10f      	b.n	8005c1c <UART_SetConfig+0x390>
 80059fc:	231b      	movs	r3, #27
 80059fe:	2220      	movs	r2, #32
 8005a00:	189b      	adds	r3, r3, r2
 8005a02:	19db      	adds	r3, r3, r7
 8005a04:	2208      	movs	r2, #8
 8005a06:	701a      	strb	r2, [r3, #0]
 8005a08:	e108      	b.n	8005c1c <UART_SetConfig+0x390>
 8005a0a:	231b      	movs	r3, #27
 8005a0c:	2220      	movs	r2, #32
 8005a0e:	189b      	adds	r3, r3, r2
 8005a10:	19db      	adds	r3, r3, r7
 8005a12:	2210      	movs	r2, #16
 8005a14:	701a      	strb	r2, [r3, #0]
 8005a16:	e101      	b.n	8005c1c <UART_SetConfig+0x390>
 8005a18:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005a1a:	681b      	ldr	r3, [r3, #0]
 8005a1c:	4a71      	ldr	r2, [pc, #452]	; (8005be4 <UART_SetConfig+0x358>)
 8005a1e:	4293      	cmp	r3, r2
 8005a20:	d131      	bne.n	8005a86 <UART_SetConfig+0x1fa>
 8005a22:	4b6e      	ldr	r3, [pc, #440]	; (8005bdc <UART_SetConfig+0x350>)
 8005a24:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005a26:	2230      	movs	r2, #48	; 0x30
 8005a28:	4013      	ands	r3, r2
 8005a2a:	2b30      	cmp	r3, #48	; 0x30
 8005a2c:	d01d      	beq.n	8005a6a <UART_SetConfig+0x1de>
 8005a2e:	d823      	bhi.n	8005a78 <UART_SetConfig+0x1ec>
 8005a30:	2b20      	cmp	r3, #32
 8005a32:	d00c      	beq.n	8005a4e <UART_SetConfig+0x1c2>
 8005a34:	d820      	bhi.n	8005a78 <UART_SetConfig+0x1ec>
 8005a36:	2b00      	cmp	r3, #0
 8005a38:	d002      	beq.n	8005a40 <UART_SetConfig+0x1b4>
 8005a3a:	2b10      	cmp	r3, #16
 8005a3c:	d00e      	beq.n	8005a5c <UART_SetConfig+0x1d0>
 8005a3e:	e01b      	b.n	8005a78 <UART_SetConfig+0x1ec>
 8005a40:	231b      	movs	r3, #27
 8005a42:	2220      	movs	r2, #32
 8005a44:	189b      	adds	r3, r3, r2
 8005a46:	19db      	adds	r3, r3, r7
 8005a48:	2200      	movs	r2, #0
 8005a4a:	701a      	strb	r2, [r3, #0]
 8005a4c:	e0e6      	b.n	8005c1c <UART_SetConfig+0x390>
 8005a4e:	231b      	movs	r3, #27
 8005a50:	2220      	movs	r2, #32
 8005a52:	189b      	adds	r3, r3, r2
 8005a54:	19db      	adds	r3, r3, r7
 8005a56:	2202      	movs	r2, #2
 8005a58:	701a      	strb	r2, [r3, #0]
 8005a5a:	e0df      	b.n	8005c1c <UART_SetConfig+0x390>
 8005a5c:	231b      	movs	r3, #27
 8005a5e:	2220      	movs	r2, #32
 8005a60:	189b      	adds	r3, r3, r2
 8005a62:	19db      	adds	r3, r3, r7
 8005a64:	2204      	movs	r2, #4
 8005a66:	701a      	strb	r2, [r3, #0]
 8005a68:	e0d8      	b.n	8005c1c <UART_SetConfig+0x390>
 8005a6a:	231b      	movs	r3, #27
 8005a6c:	2220      	movs	r2, #32
 8005a6e:	189b      	adds	r3, r3, r2
 8005a70:	19db      	adds	r3, r3, r7
 8005a72:	2208      	movs	r2, #8
 8005a74:	701a      	strb	r2, [r3, #0]
 8005a76:	e0d1      	b.n	8005c1c <UART_SetConfig+0x390>
 8005a78:	231b      	movs	r3, #27
 8005a7a:	2220      	movs	r2, #32
 8005a7c:	189b      	adds	r3, r3, r2
 8005a7e:	19db      	adds	r3, r3, r7
 8005a80:	2210      	movs	r2, #16
 8005a82:	701a      	strb	r2, [r3, #0]
 8005a84:	e0ca      	b.n	8005c1c <UART_SetConfig+0x390>
 8005a86:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005a88:	681b      	ldr	r3, [r3, #0]
 8005a8a:	4a57      	ldr	r2, [pc, #348]	; (8005be8 <UART_SetConfig+0x35c>)
 8005a8c:	4293      	cmp	r3, r2
 8005a8e:	d106      	bne.n	8005a9e <UART_SetConfig+0x212>
 8005a90:	231b      	movs	r3, #27
 8005a92:	2220      	movs	r2, #32
 8005a94:	189b      	adds	r3, r3, r2
 8005a96:	19db      	adds	r3, r3, r7
 8005a98:	2200      	movs	r2, #0
 8005a9a:	701a      	strb	r2, [r3, #0]
 8005a9c:	e0be      	b.n	8005c1c <UART_SetConfig+0x390>
 8005a9e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005aa0:	681b      	ldr	r3, [r3, #0]
 8005aa2:	4a52      	ldr	r2, [pc, #328]	; (8005bec <UART_SetConfig+0x360>)
 8005aa4:	4293      	cmp	r3, r2
 8005aa6:	d106      	bne.n	8005ab6 <UART_SetConfig+0x22a>
 8005aa8:	231b      	movs	r3, #27
 8005aaa:	2220      	movs	r2, #32
 8005aac:	189b      	adds	r3, r3, r2
 8005aae:	19db      	adds	r3, r3, r7
 8005ab0:	2200      	movs	r2, #0
 8005ab2:	701a      	strb	r2, [r3, #0]
 8005ab4:	e0b2      	b.n	8005c1c <UART_SetConfig+0x390>
 8005ab6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005ab8:	681b      	ldr	r3, [r3, #0]
 8005aba:	4a4d      	ldr	r2, [pc, #308]	; (8005bf0 <UART_SetConfig+0x364>)
 8005abc:	4293      	cmp	r3, r2
 8005abe:	d106      	bne.n	8005ace <UART_SetConfig+0x242>
 8005ac0:	231b      	movs	r3, #27
 8005ac2:	2220      	movs	r2, #32
 8005ac4:	189b      	adds	r3, r3, r2
 8005ac6:	19db      	adds	r3, r3, r7
 8005ac8:	2200      	movs	r2, #0
 8005aca:	701a      	strb	r2, [r3, #0]
 8005acc:	e0a6      	b.n	8005c1c <UART_SetConfig+0x390>
 8005ace:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005ad0:	681b      	ldr	r3, [r3, #0]
 8005ad2:	4a3e      	ldr	r2, [pc, #248]	; (8005bcc <UART_SetConfig+0x340>)
 8005ad4:	4293      	cmp	r3, r2
 8005ad6:	d13e      	bne.n	8005b56 <UART_SetConfig+0x2ca>
 8005ad8:	4b40      	ldr	r3, [pc, #256]	; (8005bdc <UART_SetConfig+0x350>)
 8005ada:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8005adc:	23c0      	movs	r3, #192	; 0xc0
 8005ade:	011b      	lsls	r3, r3, #4
 8005ae0:	4013      	ands	r3, r2
 8005ae2:	22c0      	movs	r2, #192	; 0xc0
 8005ae4:	0112      	lsls	r2, r2, #4
 8005ae6:	4293      	cmp	r3, r2
 8005ae8:	d027      	beq.n	8005b3a <UART_SetConfig+0x2ae>
 8005aea:	22c0      	movs	r2, #192	; 0xc0
 8005aec:	0112      	lsls	r2, r2, #4
 8005aee:	4293      	cmp	r3, r2
 8005af0:	d82a      	bhi.n	8005b48 <UART_SetConfig+0x2bc>
 8005af2:	2280      	movs	r2, #128	; 0x80
 8005af4:	0112      	lsls	r2, r2, #4
 8005af6:	4293      	cmp	r3, r2
 8005af8:	d011      	beq.n	8005b1e <UART_SetConfig+0x292>
 8005afa:	2280      	movs	r2, #128	; 0x80
 8005afc:	0112      	lsls	r2, r2, #4
 8005afe:	4293      	cmp	r3, r2
 8005b00:	d822      	bhi.n	8005b48 <UART_SetConfig+0x2bc>
 8005b02:	2b00      	cmp	r3, #0
 8005b04:	d004      	beq.n	8005b10 <UART_SetConfig+0x284>
 8005b06:	2280      	movs	r2, #128	; 0x80
 8005b08:	00d2      	lsls	r2, r2, #3
 8005b0a:	4293      	cmp	r3, r2
 8005b0c:	d00e      	beq.n	8005b2c <UART_SetConfig+0x2a0>
 8005b0e:	e01b      	b.n	8005b48 <UART_SetConfig+0x2bc>
 8005b10:	231b      	movs	r3, #27
 8005b12:	2220      	movs	r2, #32
 8005b14:	189b      	adds	r3, r3, r2
 8005b16:	19db      	adds	r3, r3, r7
 8005b18:	2200      	movs	r2, #0
 8005b1a:	701a      	strb	r2, [r3, #0]
 8005b1c:	e07e      	b.n	8005c1c <UART_SetConfig+0x390>
 8005b1e:	231b      	movs	r3, #27
 8005b20:	2220      	movs	r2, #32
 8005b22:	189b      	adds	r3, r3, r2
 8005b24:	19db      	adds	r3, r3, r7
 8005b26:	2202      	movs	r2, #2
 8005b28:	701a      	strb	r2, [r3, #0]
 8005b2a:	e077      	b.n	8005c1c <UART_SetConfig+0x390>
 8005b2c:	231b      	movs	r3, #27
 8005b2e:	2220      	movs	r2, #32
 8005b30:	189b      	adds	r3, r3, r2
 8005b32:	19db      	adds	r3, r3, r7
 8005b34:	2204      	movs	r2, #4
 8005b36:	701a      	strb	r2, [r3, #0]
 8005b38:	e070      	b.n	8005c1c <UART_SetConfig+0x390>
 8005b3a:	231b      	movs	r3, #27
 8005b3c:	2220      	movs	r2, #32
 8005b3e:	189b      	adds	r3, r3, r2
 8005b40:	19db      	adds	r3, r3, r7
 8005b42:	2208      	movs	r2, #8
 8005b44:	701a      	strb	r2, [r3, #0]
 8005b46:	e069      	b.n	8005c1c <UART_SetConfig+0x390>
 8005b48:	231b      	movs	r3, #27
 8005b4a:	2220      	movs	r2, #32
 8005b4c:	189b      	adds	r3, r3, r2
 8005b4e:	19db      	adds	r3, r3, r7
 8005b50:	2210      	movs	r2, #16
 8005b52:	701a      	strb	r2, [r3, #0]
 8005b54:	e062      	b.n	8005c1c <UART_SetConfig+0x390>
 8005b56:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005b58:	681b      	ldr	r3, [r3, #0]
 8005b5a:	4a1d      	ldr	r2, [pc, #116]	; (8005bd0 <UART_SetConfig+0x344>)
 8005b5c:	4293      	cmp	r3, r2
 8005b5e:	d157      	bne.n	8005c10 <UART_SetConfig+0x384>
 8005b60:	4b1e      	ldr	r3, [pc, #120]	; (8005bdc <UART_SetConfig+0x350>)
 8005b62:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8005b64:	23c0      	movs	r3, #192	; 0xc0
 8005b66:	009b      	lsls	r3, r3, #2
 8005b68:	4013      	ands	r3, r2
 8005b6a:	22c0      	movs	r2, #192	; 0xc0
 8005b6c:	0092      	lsls	r2, r2, #2
 8005b6e:	4293      	cmp	r3, r2
 8005b70:	d040      	beq.n	8005bf4 <UART_SetConfig+0x368>
 8005b72:	22c0      	movs	r2, #192	; 0xc0
 8005b74:	0092      	lsls	r2, r2, #2
 8005b76:	4293      	cmp	r3, r2
 8005b78:	d843      	bhi.n	8005c02 <UART_SetConfig+0x376>
 8005b7a:	2280      	movs	r2, #128	; 0x80
 8005b7c:	0092      	lsls	r2, r2, #2
 8005b7e:	4293      	cmp	r3, r2
 8005b80:	d011      	beq.n	8005ba6 <UART_SetConfig+0x31a>
 8005b82:	2280      	movs	r2, #128	; 0x80
 8005b84:	0092      	lsls	r2, r2, #2
 8005b86:	4293      	cmp	r3, r2
 8005b88:	d83b      	bhi.n	8005c02 <UART_SetConfig+0x376>
 8005b8a:	2b00      	cmp	r3, #0
 8005b8c:	d004      	beq.n	8005b98 <UART_SetConfig+0x30c>
 8005b8e:	2280      	movs	r2, #128	; 0x80
 8005b90:	0052      	lsls	r2, r2, #1
 8005b92:	4293      	cmp	r3, r2
 8005b94:	d00e      	beq.n	8005bb4 <UART_SetConfig+0x328>
 8005b96:	e034      	b.n	8005c02 <UART_SetConfig+0x376>
 8005b98:	231b      	movs	r3, #27
 8005b9a:	2220      	movs	r2, #32
 8005b9c:	189b      	adds	r3, r3, r2
 8005b9e:	19db      	adds	r3, r3, r7
 8005ba0:	2200      	movs	r2, #0
 8005ba2:	701a      	strb	r2, [r3, #0]
 8005ba4:	e03a      	b.n	8005c1c <UART_SetConfig+0x390>
 8005ba6:	231b      	movs	r3, #27
 8005ba8:	2220      	movs	r2, #32
 8005baa:	189b      	adds	r3, r3, r2
 8005bac:	19db      	adds	r3, r3, r7
 8005bae:	2202      	movs	r2, #2
 8005bb0:	701a      	strb	r2, [r3, #0]
 8005bb2:	e033      	b.n	8005c1c <UART_SetConfig+0x390>
 8005bb4:	231b      	movs	r3, #27
 8005bb6:	2220      	movs	r2, #32
 8005bb8:	189b      	adds	r3, r3, r2
 8005bba:	19db      	adds	r3, r3, r7
 8005bbc:	2204      	movs	r2, #4
 8005bbe:	701a      	strb	r2, [r3, #0]
 8005bc0:	e02c      	b.n	8005c1c <UART_SetConfig+0x390>
 8005bc2:	46c0      	nop			; (mov r8, r8)
 8005bc4:	cfff69f3 	.word	0xcfff69f3
 8005bc8:	ffffcfff 	.word	0xffffcfff
 8005bcc:	40008000 	.word	0x40008000
 8005bd0:	40008400 	.word	0x40008400
 8005bd4:	11fff4ff 	.word	0x11fff4ff
 8005bd8:	40013800 	.word	0x40013800
 8005bdc:	40021000 	.word	0x40021000
 8005be0:	40004400 	.word	0x40004400
 8005be4:	40004800 	.word	0x40004800
 8005be8:	40004c00 	.word	0x40004c00
 8005bec:	40005000 	.word	0x40005000
 8005bf0:	40013c00 	.word	0x40013c00
 8005bf4:	231b      	movs	r3, #27
 8005bf6:	2220      	movs	r2, #32
 8005bf8:	189b      	adds	r3, r3, r2
 8005bfa:	19db      	adds	r3, r3, r7
 8005bfc:	2208      	movs	r2, #8
 8005bfe:	701a      	strb	r2, [r3, #0]
 8005c00:	e00c      	b.n	8005c1c <UART_SetConfig+0x390>
 8005c02:	231b      	movs	r3, #27
 8005c04:	2220      	movs	r2, #32
 8005c06:	189b      	adds	r3, r3, r2
 8005c08:	19db      	adds	r3, r3, r7
 8005c0a:	2210      	movs	r2, #16
 8005c0c:	701a      	strb	r2, [r3, #0]
 8005c0e:	e005      	b.n	8005c1c <UART_SetConfig+0x390>
 8005c10:	231b      	movs	r3, #27
 8005c12:	2220      	movs	r2, #32
 8005c14:	189b      	adds	r3, r3, r2
 8005c16:	19db      	adds	r3, r3, r7
 8005c18:	2210      	movs	r2, #16
 8005c1a:	701a      	strb	r2, [r3, #0]

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8005c1c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005c1e:	681b      	ldr	r3, [r3, #0]
 8005c20:	4ac1      	ldr	r2, [pc, #772]	; (8005f28 <UART_SetConfig+0x69c>)
 8005c22:	4293      	cmp	r3, r2
 8005c24:	d005      	beq.n	8005c32 <UART_SetConfig+0x3a6>
 8005c26:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005c28:	681b      	ldr	r3, [r3, #0]
 8005c2a:	4ac0      	ldr	r2, [pc, #768]	; (8005f2c <UART_SetConfig+0x6a0>)
 8005c2c:	4293      	cmp	r3, r2
 8005c2e:	d000      	beq.n	8005c32 <UART_SetConfig+0x3a6>
 8005c30:	e093      	b.n	8005d5a <UART_SetConfig+0x4ce>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8005c32:	231b      	movs	r3, #27
 8005c34:	2220      	movs	r2, #32
 8005c36:	189b      	adds	r3, r3, r2
 8005c38:	19db      	adds	r3, r3, r7
 8005c3a:	781b      	ldrb	r3, [r3, #0]
 8005c3c:	2b08      	cmp	r3, #8
 8005c3e:	d015      	beq.n	8005c6c <UART_SetConfig+0x3e0>
 8005c40:	dc18      	bgt.n	8005c74 <UART_SetConfig+0x3e8>
 8005c42:	2b04      	cmp	r3, #4
 8005c44:	d00d      	beq.n	8005c62 <UART_SetConfig+0x3d6>
 8005c46:	dc15      	bgt.n	8005c74 <UART_SetConfig+0x3e8>
 8005c48:	2b00      	cmp	r3, #0
 8005c4a:	d002      	beq.n	8005c52 <UART_SetConfig+0x3c6>
 8005c4c:	2b02      	cmp	r3, #2
 8005c4e:	d005      	beq.n	8005c5c <UART_SetConfig+0x3d0>
 8005c50:	e010      	b.n	8005c74 <UART_SetConfig+0x3e8>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005c52:	f7fe f9fb 	bl	800404c <HAL_RCC_GetPCLK1Freq>
 8005c56:	0003      	movs	r3, r0
 8005c58:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8005c5a:	e014      	b.n	8005c86 <UART_SetConfig+0x3fa>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8005c5c:	4bb4      	ldr	r3, [pc, #720]	; (8005f30 <UART_SetConfig+0x6a4>)
 8005c5e:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8005c60:	e011      	b.n	8005c86 <UART_SetConfig+0x3fa>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8005c62:	f7fe f967 	bl	8003f34 <HAL_RCC_GetSysClockFreq>
 8005c66:	0003      	movs	r3, r0
 8005c68:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8005c6a:	e00c      	b.n	8005c86 <UART_SetConfig+0x3fa>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8005c6c:	2380      	movs	r3, #128	; 0x80
 8005c6e:	021b      	lsls	r3, r3, #8
 8005c70:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8005c72:	e008      	b.n	8005c86 <UART_SetConfig+0x3fa>
      default:
        pclk = 0U;
 8005c74:	2300      	movs	r3, #0
 8005c76:	637b      	str	r3, [r7, #52]	; 0x34
        ret = HAL_ERROR;
 8005c78:	231a      	movs	r3, #26
 8005c7a:	2220      	movs	r2, #32
 8005c7c:	189b      	adds	r3, r3, r2
 8005c7e:	19db      	adds	r3, r3, r7
 8005c80:	2201      	movs	r2, #1
 8005c82:	701a      	strb	r2, [r3, #0]
        break;
 8005c84:	46c0      	nop			; (mov r8, r8)
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8005c86:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005c88:	2b00      	cmp	r3, #0
 8005c8a:	d100      	bne.n	8005c8e <UART_SetConfig+0x402>
 8005c8c:	e135      	b.n	8005efa <UART_SetConfig+0x66e>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8005c8e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005c90:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8005c92:	4ba8      	ldr	r3, [pc, #672]	; (8005f34 <UART_SetConfig+0x6a8>)
 8005c94:	0052      	lsls	r2, r2, #1
 8005c96:	5ad3      	ldrh	r3, [r2, r3]
 8005c98:	0019      	movs	r1, r3
 8005c9a:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8005c9c:	f7fa fa4e 	bl	800013c <__udivsi3>
 8005ca0:	0003      	movs	r3, r0
 8005ca2:	62bb      	str	r3, [r7, #40]	; 0x28

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8005ca4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005ca6:	685a      	ldr	r2, [r3, #4]
 8005ca8:	0013      	movs	r3, r2
 8005caa:	005b      	lsls	r3, r3, #1
 8005cac:	189b      	adds	r3, r3, r2
 8005cae:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8005cb0:	429a      	cmp	r2, r3
 8005cb2:	d305      	bcc.n	8005cc0 <UART_SetConfig+0x434>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8005cb4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005cb6:	685b      	ldr	r3, [r3, #4]
 8005cb8:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8005cba:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8005cbc:	429a      	cmp	r2, r3
 8005cbe:	d906      	bls.n	8005cce <UART_SetConfig+0x442>
      {
        ret = HAL_ERROR;
 8005cc0:	231a      	movs	r3, #26
 8005cc2:	2220      	movs	r2, #32
 8005cc4:	189b      	adds	r3, r3, r2
 8005cc6:	19db      	adds	r3, r3, r7
 8005cc8:	2201      	movs	r2, #1
 8005cca:	701a      	strb	r2, [r3, #0]
 8005ccc:	e044      	b.n	8005d58 <UART_SetConfig+0x4cc>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8005cce:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005cd0:	61bb      	str	r3, [r7, #24]
 8005cd2:	2300      	movs	r3, #0
 8005cd4:	61fb      	str	r3, [r7, #28]
 8005cd6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005cd8:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8005cda:	4b96      	ldr	r3, [pc, #600]	; (8005f34 <UART_SetConfig+0x6a8>)
 8005cdc:	0052      	lsls	r2, r2, #1
 8005cde:	5ad3      	ldrh	r3, [r2, r3]
 8005ce0:	613b      	str	r3, [r7, #16]
 8005ce2:	2300      	movs	r3, #0
 8005ce4:	617b      	str	r3, [r7, #20]
 8005ce6:	693a      	ldr	r2, [r7, #16]
 8005ce8:	697b      	ldr	r3, [r7, #20]
 8005cea:	69b8      	ldr	r0, [r7, #24]
 8005cec:	69f9      	ldr	r1, [r7, #28]
 8005cee:	f7fa fbd9 	bl	80004a4 <__aeabi_uldivmod>
 8005cf2:	0002      	movs	r2, r0
 8005cf4:	000b      	movs	r3, r1
 8005cf6:	0e11      	lsrs	r1, r2, #24
 8005cf8:	021d      	lsls	r5, r3, #8
 8005cfa:	430d      	orrs	r5, r1
 8005cfc:	0214      	lsls	r4, r2, #8
 8005cfe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005d00:	685b      	ldr	r3, [r3, #4]
 8005d02:	085b      	lsrs	r3, r3, #1
 8005d04:	60bb      	str	r3, [r7, #8]
 8005d06:	2300      	movs	r3, #0
 8005d08:	60fb      	str	r3, [r7, #12]
 8005d0a:	68b8      	ldr	r0, [r7, #8]
 8005d0c:	68f9      	ldr	r1, [r7, #12]
 8005d0e:	1900      	adds	r0, r0, r4
 8005d10:	4169      	adcs	r1, r5
 8005d12:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005d14:	685b      	ldr	r3, [r3, #4]
 8005d16:	603b      	str	r3, [r7, #0]
 8005d18:	2300      	movs	r3, #0
 8005d1a:	607b      	str	r3, [r7, #4]
 8005d1c:	683a      	ldr	r2, [r7, #0]
 8005d1e:	687b      	ldr	r3, [r7, #4]
 8005d20:	f7fa fbc0 	bl	80004a4 <__aeabi_uldivmod>
 8005d24:	0002      	movs	r2, r0
 8005d26:	000b      	movs	r3, r1
 8005d28:	0013      	movs	r3, r2
 8005d2a:	633b      	str	r3, [r7, #48]	; 0x30
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8005d2c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005d2e:	23c0      	movs	r3, #192	; 0xc0
 8005d30:	009b      	lsls	r3, r3, #2
 8005d32:	429a      	cmp	r2, r3
 8005d34:	d309      	bcc.n	8005d4a <UART_SetConfig+0x4be>
 8005d36:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005d38:	2380      	movs	r3, #128	; 0x80
 8005d3a:	035b      	lsls	r3, r3, #13
 8005d3c:	429a      	cmp	r2, r3
 8005d3e:	d204      	bcs.n	8005d4a <UART_SetConfig+0x4be>
        {
          huart->Instance->BRR = usartdiv;
 8005d40:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005d42:	681b      	ldr	r3, [r3, #0]
 8005d44:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005d46:	60da      	str	r2, [r3, #12]
 8005d48:	e006      	b.n	8005d58 <UART_SetConfig+0x4cc>
        }
        else
        {
          ret = HAL_ERROR;
 8005d4a:	231a      	movs	r3, #26
 8005d4c:	2220      	movs	r2, #32
 8005d4e:	189b      	adds	r3, r3, r2
 8005d50:	19db      	adds	r3, r3, r7
 8005d52:	2201      	movs	r2, #1
 8005d54:	701a      	strb	r2, [r3, #0]
    if (pclk != 0U)
 8005d56:	e0d0      	b.n	8005efa <UART_SetConfig+0x66e>
 8005d58:	e0cf      	b.n	8005efa <UART_SetConfig+0x66e>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8005d5a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005d5c:	69da      	ldr	r2, [r3, #28]
 8005d5e:	2380      	movs	r3, #128	; 0x80
 8005d60:	021b      	lsls	r3, r3, #8
 8005d62:	429a      	cmp	r2, r3
 8005d64:	d000      	beq.n	8005d68 <UART_SetConfig+0x4dc>
 8005d66:	e070      	b.n	8005e4a <UART_SetConfig+0x5be>
  {
    switch (clocksource)
 8005d68:	231b      	movs	r3, #27
 8005d6a:	2220      	movs	r2, #32
 8005d6c:	189b      	adds	r3, r3, r2
 8005d6e:	19db      	adds	r3, r3, r7
 8005d70:	781b      	ldrb	r3, [r3, #0]
 8005d72:	2b08      	cmp	r3, #8
 8005d74:	d015      	beq.n	8005da2 <UART_SetConfig+0x516>
 8005d76:	dc18      	bgt.n	8005daa <UART_SetConfig+0x51e>
 8005d78:	2b04      	cmp	r3, #4
 8005d7a:	d00d      	beq.n	8005d98 <UART_SetConfig+0x50c>
 8005d7c:	dc15      	bgt.n	8005daa <UART_SetConfig+0x51e>
 8005d7e:	2b00      	cmp	r3, #0
 8005d80:	d002      	beq.n	8005d88 <UART_SetConfig+0x4fc>
 8005d82:	2b02      	cmp	r3, #2
 8005d84:	d005      	beq.n	8005d92 <UART_SetConfig+0x506>
 8005d86:	e010      	b.n	8005daa <UART_SetConfig+0x51e>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005d88:	f7fe f960 	bl	800404c <HAL_RCC_GetPCLK1Freq>
 8005d8c:	0003      	movs	r3, r0
 8005d8e:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8005d90:	e014      	b.n	8005dbc <UART_SetConfig+0x530>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8005d92:	4b67      	ldr	r3, [pc, #412]	; (8005f30 <UART_SetConfig+0x6a4>)
 8005d94:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8005d96:	e011      	b.n	8005dbc <UART_SetConfig+0x530>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8005d98:	f7fe f8cc 	bl	8003f34 <HAL_RCC_GetSysClockFreq>
 8005d9c:	0003      	movs	r3, r0
 8005d9e:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8005da0:	e00c      	b.n	8005dbc <UART_SetConfig+0x530>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8005da2:	2380      	movs	r3, #128	; 0x80
 8005da4:	021b      	lsls	r3, r3, #8
 8005da6:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8005da8:	e008      	b.n	8005dbc <UART_SetConfig+0x530>
      default:
        pclk = 0U;
 8005daa:	2300      	movs	r3, #0
 8005dac:	637b      	str	r3, [r7, #52]	; 0x34
        ret = HAL_ERROR;
 8005dae:	231a      	movs	r3, #26
 8005db0:	2220      	movs	r2, #32
 8005db2:	189b      	adds	r3, r3, r2
 8005db4:	19db      	adds	r3, r3, r7
 8005db6:	2201      	movs	r2, #1
 8005db8:	701a      	strb	r2, [r3, #0]
        break;
 8005dba:	46c0      	nop			; (mov r8, r8)
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8005dbc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005dbe:	2b00      	cmp	r3, #0
 8005dc0:	d100      	bne.n	8005dc4 <UART_SetConfig+0x538>
 8005dc2:	e09a      	b.n	8005efa <UART_SetConfig+0x66e>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8005dc4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005dc6:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8005dc8:	4b5a      	ldr	r3, [pc, #360]	; (8005f34 <UART_SetConfig+0x6a8>)
 8005dca:	0052      	lsls	r2, r2, #1
 8005dcc:	5ad3      	ldrh	r3, [r2, r3]
 8005dce:	0019      	movs	r1, r3
 8005dd0:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8005dd2:	f7fa f9b3 	bl	800013c <__udivsi3>
 8005dd6:	0003      	movs	r3, r0
 8005dd8:	005a      	lsls	r2, r3, #1
 8005dda:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005ddc:	685b      	ldr	r3, [r3, #4]
 8005dde:	085b      	lsrs	r3, r3, #1
 8005de0:	18d2      	adds	r2, r2, r3
 8005de2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005de4:	685b      	ldr	r3, [r3, #4]
 8005de6:	0019      	movs	r1, r3
 8005de8:	0010      	movs	r0, r2
 8005dea:	f7fa f9a7 	bl	800013c <__udivsi3>
 8005dee:	0003      	movs	r3, r0
 8005df0:	633b      	str	r3, [r7, #48]	; 0x30
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8005df2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005df4:	2b0f      	cmp	r3, #15
 8005df6:	d921      	bls.n	8005e3c <UART_SetConfig+0x5b0>
 8005df8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005dfa:	2380      	movs	r3, #128	; 0x80
 8005dfc:	025b      	lsls	r3, r3, #9
 8005dfe:	429a      	cmp	r2, r3
 8005e00:	d21c      	bcs.n	8005e3c <UART_SetConfig+0x5b0>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8005e02:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005e04:	b29a      	uxth	r2, r3
 8005e06:	200e      	movs	r0, #14
 8005e08:	2420      	movs	r4, #32
 8005e0a:	1903      	adds	r3, r0, r4
 8005e0c:	19db      	adds	r3, r3, r7
 8005e0e:	210f      	movs	r1, #15
 8005e10:	438a      	bics	r2, r1
 8005e12:	801a      	strh	r2, [r3, #0]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8005e14:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005e16:	085b      	lsrs	r3, r3, #1
 8005e18:	b29b      	uxth	r3, r3
 8005e1a:	2207      	movs	r2, #7
 8005e1c:	4013      	ands	r3, r2
 8005e1e:	b299      	uxth	r1, r3
 8005e20:	1903      	adds	r3, r0, r4
 8005e22:	19db      	adds	r3, r3, r7
 8005e24:	1902      	adds	r2, r0, r4
 8005e26:	19d2      	adds	r2, r2, r7
 8005e28:	8812      	ldrh	r2, [r2, #0]
 8005e2a:	430a      	orrs	r2, r1
 8005e2c:	801a      	strh	r2, [r3, #0]
        huart->Instance->BRR = brrtemp;
 8005e2e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005e30:	681b      	ldr	r3, [r3, #0]
 8005e32:	1902      	adds	r2, r0, r4
 8005e34:	19d2      	adds	r2, r2, r7
 8005e36:	8812      	ldrh	r2, [r2, #0]
 8005e38:	60da      	str	r2, [r3, #12]
 8005e3a:	e05e      	b.n	8005efa <UART_SetConfig+0x66e>
      }
      else
      {
        ret = HAL_ERROR;
 8005e3c:	231a      	movs	r3, #26
 8005e3e:	2220      	movs	r2, #32
 8005e40:	189b      	adds	r3, r3, r2
 8005e42:	19db      	adds	r3, r3, r7
 8005e44:	2201      	movs	r2, #1
 8005e46:	701a      	strb	r2, [r3, #0]
 8005e48:	e057      	b.n	8005efa <UART_SetConfig+0x66e>
      }
    }
  }
  else
  {
    switch (clocksource)
 8005e4a:	231b      	movs	r3, #27
 8005e4c:	2220      	movs	r2, #32
 8005e4e:	189b      	adds	r3, r3, r2
 8005e50:	19db      	adds	r3, r3, r7
 8005e52:	781b      	ldrb	r3, [r3, #0]
 8005e54:	2b08      	cmp	r3, #8
 8005e56:	d015      	beq.n	8005e84 <UART_SetConfig+0x5f8>
 8005e58:	dc18      	bgt.n	8005e8c <UART_SetConfig+0x600>
 8005e5a:	2b04      	cmp	r3, #4
 8005e5c:	d00d      	beq.n	8005e7a <UART_SetConfig+0x5ee>
 8005e5e:	dc15      	bgt.n	8005e8c <UART_SetConfig+0x600>
 8005e60:	2b00      	cmp	r3, #0
 8005e62:	d002      	beq.n	8005e6a <UART_SetConfig+0x5de>
 8005e64:	2b02      	cmp	r3, #2
 8005e66:	d005      	beq.n	8005e74 <UART_SetConfig+0x5e8>
 8005e68:	e010      	b.n	8005e8c <UART_SetConfig+0x600>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005e6a:	f7fe f8ef 	bl	800404c <HAL_RCC_GetPCLK1Freq>
 8005e6e:	0003      	movs	r3, r0
 8005e70:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8005e72:	e014      	b.n	8005e9e <UART_SetConfig+0x612>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8005e74:	4b2e      	ldr	r3, [pc, #184]	; (8005f30 <UART_SetConfig+0x6a4>)
 8005e76:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8005e78:	e011      	b.n	8005e9e <UART_SetConfig+0x612>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8005e7a:	f7fe f85b 	bl	8003f34 <HAL_RCC_GetSysClockFreq>
 8005e7e:	0003      	movs	r3, r0
 8005e80:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8005e82:	e00c      	b.n	8005e9e <UART_SetConfig+0x612>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8005e84:	2380      	movs	r3, #128	; 0x80
 8005e86:	021b      	lsls	r3, r3, #8
 8005e88:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8005e8a:	e008      	b.n	8005e9e <UART_SetConfig+0x612>
      default:
        pclk = 0U;
 8005e8c:	2300      	movs	r3, #0
 8005e8e:	637b      	str	r3, [r7, #52]	; 0x34
        ret = HAL_ERROR;
 8005e90:	231a      	movs	r3, #26
 8005e92:	2220      	movs	r2, #32
 8005e94:	189b      	adds	r3, r3, r2
 8005e96:	19db      	adds	r3, r3, r7
 8005e98:	2201      	movs	r2, #1
 8005e9a:	701a      	strb	r2, [r3, #0]
        break;
 8005e9c:	46c0      	nop			; (mov r8, r8)
    }

    if (pclk != 0U)
 8005e9e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005ea0:	2b00      	cmp	r3, #0
 8005ea2:	d02a      	beq.n	8005efa <UART_SetConfig+0x66e>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8005ea4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005ea6:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8005ea8:	4b22      	ldr	r3, [pc, #136]	; (8005f34 <UART_SetConfig+0x6a8>)
 8005eaa:	0052      	lsls	r2, r2, #1
 8005eac:	5ad3      	ldrh	r3, [r2, r3]
 8005eae:	0019      	movs	r1, r3
 8005eb0:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8005eb2:	f7fa f943 	bl	800013c <__udivsi3>
 8005eb6:	0003      	movs	r3, r0
 8005eb8:	001a      	movs	r2, r3
 8005eba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005ebc:	685b      	ldr	r3, [r3, #4]
 8005ebe:	085b      	lsrs	r3, r3, #1
 8005ec0:	18d2      	adds	r2, r2, r3
 8005ec2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005ec4:	685b      	ldr	r3, [r3, #4]
 8005ec6:	0019      	movs	r1, r3
 8005ec8:	0010      	movs	r0, r2
 8005eca:	f7fa f937 	bl	800013c <__udivsi3>
 8005ece:	0003      	movs	r3, r0
 8005ed0:	633b      	str	r3, [r7, #48]	; 0x30
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8005ed2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005ed4:	2b0f      	cmp	r3, #15
 8005ed6:	d90a      	bls.n	8005eee <UART_SetConfig+0x662>
 8005ed8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005eda:	2380      	movs	r3, #128	; 0x80
 8005edc:	025b      	lsls	r3, r3, #9
 8005ede:	429a      	cmp	r2, r3
 8005ee0:	d205      	bcs.n	8005eee <UART_SetConfig+0x662>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8005ee2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005ee4:	b29a      	uxth	r2, r3
 8005ee6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005ee8:	681b      	ldr	r3, [r3, #0]
 8005eea:	60da      	str	r2, [r3, #12]
 8005eec:	e005      	b.n	8005efa <UART_SetConfig+0x66e>
      }
      else
      {
        ret = HAL_ERROR;
 8005eee:	231a      	movs	r3, #26
 8005ef0:	2220      	movs	r2, #32
 8005ef2:	189b      	adds	r3, r3, r2
 8005ef4:	19db      	adds	r3, r3, r7
 8005ef6:	2201      	movs	r2, #1
 8005ef8:	701a      	strb	r2, [r3, #0]
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8005efa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005efc:	226a      	movs	r2, #106	; 0x6a
 8005efe:	2101      	movs	r1, #1
 8005f00:	5299      	strh	r1, [r3, r2]
  huart->NbRxDataToProcess = 1;
 8005f02:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005f04:	2268      	movs	r2, #104	; 0x68
 8005f06:	2101      	movs	r1, #1
 8005f08:	5299      	strh	r1, [r3, r2]

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8005f0a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005f0c:	2200      	movs	r2, #0
 8005f0e:	675a      	str	r2, [r3, #116]	; 0x74
  huart->TxISR = NULL;
 8005f10:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005f12:	2200      	movs	r2, #0
 8005f14:	679a      	str	r2, [r3, #120]	; 0x78

  return ret;
 8005f16:	231a      	movs	r3, #26
 8005f18:	2220      	movs	r2, #32
 8005f1a:	189b      	adds	r3, r3, r2
 8005f1c:	19db      	adds	r3, r3, r7
 8005f1e:	781b      	ldrb	r3, [r3, #0]
}
 8005f20:	0018      	movs	r0, r3
 8005f22:	46bd      	mov	sp, r7
 8005f24:	b010      	add	sp, #64	; 0x40
 8005f26:	bdb0      	pop	{r4, r5, r7, pc}
 8005f28:	40008000 	.word	0x40008000
 8005f2c:	40008400 	.word	0x40008400
 8005f30:	00f42400 	.word	0x00f42400
 8005f34:	0800dba4 	.word	0x0800dba4

08005f38 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8005f38:	b580      	push	{r7, lr}
 8005f3a:	b082      	sub	sp, #8
 8005f3c:	af00      	add	r7, sp, #0
 8005f3e:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8005f40:	687b      	ldr	r3, [r7, #4]
 8005f42:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005f44:	2201      	movs	r2, #1
 8005f46:	4013      	ands	r3, r2
 8005f48:	d00b      	beq.n	8005f62 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8005f4a:	687b      	ldr	r3, [r7, #4]
 8005f4c:	681b      	ldr	r3, [r3, #0]
 8005f4e:	685b      	ldr	r3, [r3, #4]
 8005f50:	4a4a      	ldr	r2, [pc, #296]	; (800607c <UART_AdvFeatureConfig+0x144>)
 8005f52:	4013      	ands	r3, r2
 8005f54:	0019      	movs	r1, r3
 8005f56:	687b      	ldr	r3, [r7, #4]
 8005f58:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005f5a:	687b      	ldr	r3, [r7, #4]
 8005f5c:	681b      	ldr	r3, [r3, #0]
 8005f5e:	430a      	orrs	r2, r1
 8005f60:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8005f62:	687b      	ldr	r3, [r7, #4]
 8005f64:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005f66:	2202      	movs	r2, #2
 8005f68:	4013      	ands	r3, r2
 8005f6a:	d00b      	beq.n	8005f84 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8005f6c:	687b      	ldr	r3, [r7, #4]
 8005f6e:	681b      	ldr	r3, [r3, #0]
 8005f70:	685b      	ldr	r3, [r3, #4]
 8005f72:	4a43      	ldr	r2, [pc, #268]	; (8006080 <UART_AdvFeatureConfig+0x148>)
 8005f74:	4013      	ands	r3, r2
 8005f76:	0019      	movs	r1, r3
 8005f78:	687b      	ldr	r3, [r7, #4]
 8005f7a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8005f7c:	687b      	ldr	r3, [r7, #4]
 8005f7e:	681b      	ldr	r3, [r3, #0]
 8005f80:	430a      	orrs	r2, r1
 8005f82:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8005f84:	687b      	ldr	r3, [r7, #4]
 8005f86:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005f88:	2204      	movs	r2, #4
 8005f8a:	4013      	ands	r3, r2
 8005f8c:	d00b      	beq.n	8005fa6 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8005f8e:	687b      	ldr	r3, [r7, #4]
 8005f90:	681b      	ldr	r3, [r3, #0]
 8005f92:	685b      	ldr	r3, [r3, #4]
 8005f94:	4a3b      	ldr	r2, [pc, #236]	; (8006084 <UART_AdvFeatureConfig+0x14c>)
 8005f96:	4013      	ands	r3, r2
 8005f98:	0019      	movs	r1, r3
 8005f9a:	687b      	ldr	r3, [r7, #4]
 8005f9c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005f9e:	687b      	ldr	r3, [r7, #4]
 8005fa0:	681b      	ldr	r3, [r3, #0]
 8005fa2:	430a      	orrs	r2, r1
 8005fa4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8005fa6:	687b      	ldr	r3, [r7, #4]
 8005fa8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005faa:	2208      	movs	r2, #8
 8005fac:	4013      	ands	r3, r2
 8005fae:	d00b      	beq.n	8005fc8 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8005fb0:	687b      	ldr	r3, [r7, #4]
 8005fb2:	681b      	ldr	r3, [r3, #0]
 8005fb4:	685b      	ldr	r3, [r3, #4]
 8005fb6:	4a34      	ldr	r2, [pc, #208]	; (8006088 <UART_AdvFeatureConfig+0x150>)
 8005fb8:	4013      	ands	r3, r2
 8005fba:	0019      	movs	r1, r3
 8005fbc:	687b      	ldr	r3, [r7, #4]
 8005fbe:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005fc0:	687b      	ldr	r3, [r7, #4]
 8005fc2:	681b      	ldr	r3, [r3, #0]
 8005fc4:	430a      	orrs	r2, r1
 8005fc6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8005fc8:	687b      	ldr	r3, [r7, #4]
 8005fca:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005fcc:	2210      	movs	r2, #16
 8005fce:	4013      	ands	r3, r2
 8005fd0:	d00b      	beq.n	8005fea <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8005fd2:	687b      	ldr	r3, [r7, #4]
 8005fd4:	681b      	ldr	r3, [r3, #0]
 8005fd6:	689b      	ldr	r3, [r3, #8]
 8005fd8:	4a2c      	ldr	r2, [pc, #176]	; (800608c <UART_AdvFeatureConfig+0x154>)
 8005fda:	4013      	ands	r3, r2
 8005fdc:	0019      	movs	r1, r3
 8005fde:	687b      	ldr	r3, [r7, #4]
 8005fe0:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8005fe2:	687b      	ldr	r3, [r7, #4]
 8005fe4:	681b      	ldr	r3, [r3, #0]
 8005fe6:	430a      	orrs	r2, r1
 8005fe8:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8005fea:	687b      	ldr	r3, [r7, #4]
 8005fec:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005fee:	2220      	movs	r2, #32
 8005ff0:	4013      	ands	r3, r2
 8005ff2:	d00b      	beq.n	800600c <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8005ff4:	687b      	ldr	r3, [r7, #4]
 8005ff6:	681b      	ldr	r3, [r3, #0]
 8005ff8:	689b      	ldr	r3, [r3, #8]
 8005ffa:	4a25      	ldr	r2, [pc, #148]	; (8006090 <UART_AdvFeatureConfig+0x158>)
 8005ffc:	4013      	ands	r3, r2
 8005ffe:	0019      	movs	r1, r3
 8006000:	687b      	ldr	r3, [r7, #4]
 8006002:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8006004:	687b      	ldr	r3, [r7, #4]
 8006006:	681b      	ldr	r3, [r3, #0]
 8006008:	430a      	orrs	r2, r1
 800600a:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800600c:	687b      	ldr	r3, [r7, #4]
 800600e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006010:	2240      	movs	r2, #64	; 0x40
 8006012:	4013      	ands	r3, r2
 8006014:	d01d      	beq.n	8006052 <UART_AdvFeatureConfig+0x11a>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8006016:	687b      	ldr	r3, [r7, #4]
 8006018:	681b      	ldr	r3, [r3, #0]
 800601a:	685b      	ldr	r3, [r3, #4]
 800601c:	4a1d      	ldr	r2, [pc, #116]	; (8006094 <UART_AdvFeatureConfig+0x15c>)
 800601e:	4013      	ands	r3, r2
 8006020:	0019      	movs	r1, r3
 8006022:	687b      	ldr	r3, [r7, #4]
 8006024:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8006026:	687b      	ldr	r3, [r7, #4]
 8006028:	681b      	ldr	r3, [r3, #0]
 800602a:	430a      	orrs	r2, r1
 800602c:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800602e:	687b      	ldr	r3, [r7, #4]
 8006030:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8006032:	2380      	movs	r3, #128	; 0x80
 8006034:	035b      	lsls	r3, r3, #13
 8006036:	429a      	cmp	r2, r3
 8006038:	d10b      	bne.n	8006052 <UART_AdvFeatureConfig+0x11a>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800603a:	687b      	ldr	r3, [r7, #4]
 800603c:	681b      	ldr	r3, [r3, #0]
 800603e:	685b      	ldr	r3, [r3, #4]
 8006040:	4a15      	ldr	r2, [pc, #84]	; (8006098 <UART_AdvFeatureConfig+0x160>)
 8006042:	4013      	ands	r3, r2
 8006044:	0019      	movs	r1, r3
 8006046:	687b      	ldr	r3, [r7, #4]
 8006048:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800604a:	687b      	ldr	r3, [r7, #4]
 800604c:	681b      	ldr	r3, [r3, #0]
 800604e:	430a      	orrs	r2, r1
 8006050:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8006052:	687b      	ldr	r3, [r7, #4]
 8006054:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006056:	2280      	movs	r2, #128	; 0x80
 8006058:	4013      	ands	r3, r2
 800605a:	d00b      	beq.n	8006074 <UART_AdvFeatureConfig+0x13c>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800605c:	687b      	ldr	r3, [r7, #4]
 800605e:	681b      	ldr	r3, [r3, #0]
 8006060:	685b      	ldr	r3, [r3, #4]
 8006062:	4a0e      	ldr	r2, [pc, #56]	; (800609c <UART_AdvFeatureConfig+0x164>)
 8006064:	4013      	ands	r3, r2
 8006066:	0019      	movs	r1, r3
 8006068:	687b      	ldr	r3, [r7, #4]
 800606a:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800606c:	687b      	ldr	r3, [r7, #4]
 800606e:	681b      	ldr	r3, [r3, #0]
 8006070:	430a      	orrs	r2, r1
 8006072:	605a      	str	r2, [r3, #4]
  }
}
 8006074:	46c0      	nop			; (mov r8, r8)
 8006076:	46bd      	mov	sp, r7
 8006078:	b002      	add	sp, #8
 800607a:	bd80      	pop	{r7, pc}
 800607c:	fffdffff 	.word	0xfffdffff
 8006080:	fffeffff 	.word	0xfffeffff
 8006084:	fffbffff 	.word	0xfffbffff
 8006088:	ffff7fff 	.word	0xffff7fff
 800608c:	ffffefff 	.word	0xffffefff
 8006090:	ffffdfff 	.word	0xffffdfff
 8006094:	ffefffff 	.word	0xffefffff
 8006098:	ff9fffff 	.word	0xff9fffff
 800609c:	fff7ffff 	.word	0xfff7ffff

080060a0 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80060a0:	b580      	push	{r7, lr}
 80060a2:	b086      	sub	sp, #24
 80060a4:	af02      	add	r7, sp, #8
 80060a6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80060a8:	687b      	ldr	r3, [r7, #4]
 80060aa:	2290      	movs	r2, #144	; 0x90
 80060ac:	2100      	movs	r1, #0
 80060ae:	5099      	str	r1, [r3, r2]

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 80060b0:	f7fc ff8c 	bl	8002fcc <HAL_GetTick>
 80060b4:	0003      	movs	r3, r0
 80060b6:	60fb      	str	r3, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80060b8:	687b      	ldr	r3, [r7, #4]
 80060ba:	681b      	ldr	r3, [r3, #0]
 80060bc:	681b      	ldr	r3, [r3, #0]
 80060be:	2208      	movs	r2, #8
 80060c0:	4013      	ands	r3, r2
 80060c2:	2b08      	cmp	r3, #8
 80060c4:	d10c      	bne.n	80060e0 <UART_CheckIdleState+0x40>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80060c6:	68fb      	ldr	r3, [r7, #12]
 80060c8:	2280      	movs	r2, #128	; 0x80
 80060ca:	0391      	lsls	r1, r2, #14
 80060cc:	6878      	ldr	r0, [r7, #4]
 80060ce:	4a1a      	ldr	r2, [pc, #104]	; (8006138 <UART_CheckIdleState+0x98>)
 80060d0:	9200      	str	r2, [sp, #0]
 80060d2:	2200      	movs	r2, #0
 80060d4:	f000 f832 	bl	800613c <UART_WaitOnFlagUntilTimeout>
 80060d8:	1e03      	subs	r3, r0, #0
 80060da:	d001      	beq.n	80060e0 <UART_CheckIdleState+0x40>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80060dc:	2303      	movs	r3, #3
 80060de:	e026      	b.n	800612e <UART_CheckIdleState+0x8e>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80060e0:	687b      	ldr	r3, [r7, #4]
 80060e2:	681b      	ldr	r3, [r3, #0]
 80060e4:	681b      	ldr	r3, [r3, #0]
 80060e6:	2204      	movs	r2, #4
 80060e8:	4013      	ands	r3, r2
 80060ea:	2b04      	cmp	r3, #4
 80060ec:	d10c      	bne.n	8006108 <UART_CheckIdleState+0x68>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80060ee:	68fb      	ldr	r3, [r7, #12]
 80060f0:	2280      	movs	r2, #128	; 0x80
 80060f2:	03d1      	lsls	r1, r2, #15
 80060f4:	6878      	ldr	r0, [r7, #4]
 80060f6:	4a10      	ldr	r2, [pc, #64]	; (8006138 <UART_CheckIdleState+0x98>)
 80060f8:	9200      	str	r2, [sp, #0]
 80060fa:	2200      	movs	r2, #0
 80060fc:	f000 f81e 	bl	800613c <UART_WaitOnFlagUntilTimeout>
 8006100:	1e03      	subs	r3, r0, #0
 8006102:	d001      	beq.n	8006108 <UART_CheckIdleState+0x68>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8006104:	2303      	movs	r3, #3
 8006106:	e012      	b.n	800612e <UART_CheckIdleState+0x8e>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8006108:	687b      	ldr	r3, [r7, #4]
 800610a:	2288      	movs	r2, #136	; 0x88
 800610c:	2120      	movs	r1, #32
 800610e:	5099      	str	r1, [r3, r2]
  huart->RxState = HAL_UART_STATE_READY;
 8006110:	687b      	ldr	r3, [r7, #4]
 8006112:	228c      	movs	r2, #140	; 0x8c
 8006114:	2120      	movs	r1, #32
 8006116:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006118:	687b      	ldr	r3, [r7, #4]
 800611a:	2200      	movs	r2, #0
 800611c:	66da      	str	r2, [r3, #108]	; 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800611e:	687b      	ldr	r3, [r7, #4]
 8006120:	2200      	movs	r2, #0
 8006122:	671a      	str	r2, [r3, #112]	; 0x70

  __HAL_UNLOCK(huart);
 8006124:	687b      	ldr	r3, [r7, #4]
 8006126:	2284      	movs	r2, #132	; 0x84
 8006128:	2100      	movs	r1, #0
 800612a:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800612c:	2300      	movs	r3, #0
}
 800612e:	0018      	movs	r0, r3
 8006130:	46bd      	mov	sp, r7
 8006132:	b004      	add	sp, #16
 8006134:	bd80      	pop	{r7, pc}
 8006136:	46c0      	nop			; (mov r8, r8)
 8006138:	01ffffff 	.word	0x01ffffff

0800613c <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800613c:	b580      	push	{r7, lr}
 800613e:	b094      	sub	sp, #80	; 0x50
 8006140:	af00      	add	r7, sp, #0
 8006142:	60f8      	str	r0, [r7, #12]
 8006144:	60b9      	str	r1, [r7, #8]
 8006146:	603b      	str	r3, [r7, #0]
 8006148:	1dfb      	adds	r3, r7, #7
 800614a:	701a      	strb	r2, [r3, #0]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800614c:	e0a7      	b.n	800629e <UART_WaitOnFlagUntilTimeout+0x162>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800614e:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8006150:	3301      	adds	r3, #1
 8006152:	d100      	bne.n	8006156 <UART_WaitOnFlagUntilTimeout+0x1a>
 8006154:	e0a3      	b.n	800629e <UART_WaitOnFlagUntilTimeout+0x162>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006156:	f7fc ff39 	bl	8002fcc <HAL_GetTick>
 800615a:	0002      	movs	r2, r0
 800615c:	683b      	ldr	r3, [r7, #0]
 800615e:	1ad3      	subs	r3, r2, r3
 8006160:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8006162:	429a      	cmp	r2, r3
 8006164:	d302      	bcc.n	800616c <UART_WaitOnFlagUntilTimeout+0x30>
 8006166:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8006168:	2b00      	cmp	r3, #0
 800616a:	d13f      	bne.n	80061ec <UART_WaitOnFlagUntilTimeout+0xb0>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800616c:	f3ef 8310 	mrs	r3, PRIMASK
 8006170:	62bb      	str	r3, [r7, #40]	; 0x28
  return(result);
 8006172:	6abb      	ldr	r3, [r7, #40]	; 0x28
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 8006174:	647b      	str	r3, [r7, #68]	; 0x44
 8006176:	2301      	movs	r3, #1
 8006178:	62fb      	str	r3, [r7, #44]	; 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800617a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800617c:	f383 8810 	msr	PRIMASK, r3
}
 8006180:	46c0      	nop			; (mov r8, r8)
 8006182:	68fb      	ldr	r3, [r7, #12]
 8006184:	681b      	ldr	r3, [r3, #0]
 8006186:	681a      	ldr	r2, [r3, #0]
 8006188:	68fb      	ldr	r3, [r7, #12]
 800618a:	681b      	ldr	r3, [r3, #0]
 800618c:	494e      	ldr	r1, [pc, #312]	; (80062c8 <UART_WaitOnFlagUntilTimeout+0x18c>)
 800618e:	400a      	ands	r2, r1
 8006190:	601a      	str	r2, [r3, #0]
 8006192:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006194:	633b      	str	r3, [r7, #48]	; 0x30
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006196:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006198:	f383 8810 	msr	PRIMASK, r3
}
 800619c:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800619e:	f3ef 8310 	mrs	r3, PRIMASK
 80061a2:	637b      	str	r3, [r7, #52]	; 0x34
  return(result);
 80061a4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
                                                USART_CR1_TXEIE_TXFNFIE));
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80061a6:	643b      	str	r3, [r7, #64]	; 0x40
 80061a8:	2301      	movs	r3, #1
 80061aa:	63bb      	str	r3, [r7, #56]	; 0x38
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80061ac:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80061ae:	f383 8810 	msr	PRIMASK, r3
}
 80061b2:	46c0      	nop			; (mov r8, r8)
 80061b4:	68fb      	ldr	r3, [r7, #12]
 80061b6:	681b      	ldr	r3, [r3, #0]
 80061b8:	689a      	ldr	r2, [r3, #8]
 80061ba:	68fb      	ldr	r3, [r7, #12]
 80061bc:	681b      	ldr	r3, [r3, #0]
 80061be:	2101      	movs	r1, #1
 80061c0:	438a      	bics	r2, r1
 80061c2:	609a      	str	r2, [r3, #8]
 80061c4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80061c6:	63fb      	str	r3, [r7, #60]	; 0x3c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80061c8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80061ca:	f383 8810 	msr	PRIMASK, r3
}
 80061ce:	46c0      	nop			; (mov r8, r8)

        huart->gState = HAL_UART_STATE_READY;
 80061d0:	68fb      	ldr	r3, [r7, #12]
 80061d2:	2288      	movs	r2, #136	; 0x88
 80061d4:	2120      	movs	r1, #32
 80061d6:	5099      	str	r1, [r3, r2]
        huart->RxState = HAL_UART_STATE_READY;
 80061d8:	68fb      	ldr	r3, [r7, #12]
 80061da:	228c      	movs	r2, #140	; 0x8c
 80061dc:	2120      	movs	r1, #32
 80061de:	5099      	str	r1, [r3, r2]

        __HAL_UNLOCK(huart);
 80061e0:	68fb      	ldr	r3, [r7, #12]
 80061e2:	2284      	movs	r2, #132	; 0x84
 80061e4:	2100      	movs	r1, #0
 80061e6:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 80061e8:	2303      	movs	r3, #3
 80061ea:	e069      	b.n	80062c0 <UART_WaitOnFlagUntilTimeout+0x184>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 80061ec:	68fb      	ldr	r3, [r7, #12]
 80061ee:	681b      	ldr	r3, [r3, #0]
 80061f0:	681b      	ldr	r3, [r3, #0]
 80061f2:	2204      	movs	r2, #4
 80061f4:	4013      	ands	r3, r2
 80061f6:	d052      	beq.n	800629e <UART_WaitOnFlagUntilTimeout+0x162>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80061f8:	68fb      	ldr	r3, [r7, #12]
 80061fa:	681b      	ldr	r3, [r3, #0]
 80061fc:	69da      	ldr	r2, [r3, #28]
 80061fe:	2380      	movs	r3, #128	; 0x80
 8006200:	011b      	lsls	r3, r3, #4
 8006202:	401a      	ands	r2, r3
 8006204:	2380      	movs	r3, #128	; 0x80
 8006206:	011b      	lsls	r3, r3, #4
 8006208:	429a      	cmp	r2, r3
 800620a:	d148      	bne.n	800629e <UART_WaitOnFlagUntilTimeout+0x162>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800620c:	68fb      	ldr	r3, [r7, #12]
 800620e:	681b      	ldr	r3, [r3, #0]
 8006210:	2280      	movs	r2, #128	; 0x80
 8006212:	0112      	lsls	r2, r2, #4
 8006214:	621a      	str	r2, [r3, #32]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8006216:	f3ef 8310 	mrs	r3, PRIMASK
 800621a:	613b      	str	r3, [r7, #16]
  return(result);
 800621c:	693b      	ldr	r3, [r7, #16]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 800621e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8006220:	2301      	movs	r3, #1
 8006222:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006224:	697b      	ldr	r3, [r7, #20]
 8006226:	f383 8810 	msr	PRIMASK, r3
}
 800622a:	46c0      	nop			; (mov r8, r8)
 800622c:	68fb      	ldr	r3, [r7, #12]
 800622e:	681b      	ldr	r3, [r3, #0]
 8006230:	681a      	ldr	r2, [r3, #0]
 8006232:	68fb      	ldr	r3, [r7, #12]
 8006234:	681b      	ldr	r3, [r3, #0]
 8006236:	4924      	ldr	r1, [pc, #144]	; (80062c8 <UART_WaitOnFlagUntilTimeout+0x18c>)
 8006238:	400a      	ands	r2, r1
 800623a:	601a      	str	r2, [r3, #0]
 800623c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800623e:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006240:	69bb      	ldr	r3, [r7, #24]
 8006242:	f383 8810 	msr	PRIMASK, r3
}
 8006246:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8006248:	f3ef 8310 	mrs	r3, PRIMASK
 800624c:	61fb      	str	r3, [r7, #28]
  return(result);
 800624e:	69fb      	ldr	r3, [r7, #28]
                                                  USART_CR1_TXEIE_TXFNFIE));
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006250:	64bb      	str	r3, [r7, #72]	; 0x48
 8006252:	2301      	movs	r3, #1
 8006254:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006256:	6a3b      	ldr	r3, [r7, #32]
 8006258:	f383 8810 	msr	PRIMASK, r3
}
 800625c:	46c0      	nop			; (mov r8, r8)
 800625e:	68fb      	ldr	r3, [r7, #12]
 8006260:	681b      	ldr	r3, [r3, #0]
 8006262:	689a      	ldr	r2, [r3, #8]
 8006264:	68fb      	ldr	r3, [r7, #12]
 8006266:	681b      	ldr	r3, [r3, #0]
 8006268:	2101      	movs	r1, #1
 800626a:	438a      	bics	r2, r1
 800626c:	609a      	str	r2, [r3, #8]
 800626e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006270:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006272:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006274:	f383 8810 	msr	PRIMASK, r3
}
 8006278:	46c0      	nop			; (mov r8, r8)

          huart->gState = HAL_UART_STATE_READY;
 800627a:	68fb      	ldr	r3, [r7, #12]
 800627c:	2288      	movs	r2, #136	; 0x88
 800627e:	2120      	movs	r1, #32
 8006280:	5099      	str	r1, [r3, r2]
          huart->RxState = HAL_UART_STATE_READY;
 8006282:	68fb      	ldr	r3, [r7, #12]
 8006284:	228c      	movs	r2, #140	; 0x8c
 8006286:	2120      	movs	r1, #32
 8006288:	5099      	str	r1, [r3, r2]
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800628a:	68fb      	ldr	r3, [r7, #12]
 800628c:	2290      	movs	r2, #144	; 0x90
 800628e:	2120      	movs	r1, #32
 8006290:	5099      	str	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8006292:	68fb      	ldr	r3, [r7, #12]
 8006294:	2284      	movs	r2, #132	; 0x84
 8006296:	2100      	movs	r1, #0
 8006298:	5499      	strb	r1, [r3, r2]

          return HAL_TIMEOUT;
 800629a:	2303      	movs	r3, #3
 800629c:	e010      	b.n	80062c0 <UART_WaitOnFlagUntilTimeout+0x184>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800629e:	68fb      	ldr	r3, [r7, #12]
 80062a0:	681b      	ldr	r3, [r3, #0]
 80062a2:	69db      	ldr	r3, [r3, #28]
 80062a4:	68ba      	ldr	r2, [r7, #8]
 80062a6:	4013      	ands	r3, r2
 80062a8:	68ba      	ldr	r2, [r7, #8]
 80062aa:	1ad3      	subs	r3, r2, r3
 80062ac:	425a      	negs	r2, r3
 80062ae:	4153      	adcs	r3, r2
 80062b0:	b2db      	uxtb	r3, r3
 80062b2:	001a      	movs	r2, r3
 80062b4:	1dfb      	adds	r3, r7, #7
 80062b6:	781b      	ldrb	r3, [r3, #0]
 80062b8:	429a      	cmp	r2, r3
 80062ba:	d100      	bne.n	80062be <UART_WaitOnFlagUntilTimeout+0x182>
 80062bc:	e747      	b.n	800614e <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80062be:	2300      	movs	r3, #0
}
 80062c0:	0018      	movs	r0, r3
 80062c2:	46bd      	mov	sp, r7
 80062c4:	b014      	add	sp, #80	; 0x50
 80062c6:	bd80      	pop	{r7, pc}
 80062c8:	fffffe5f 	.word	0xfffffe5f

080062cc <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 80062cc:	b580      	push	{r7, lr}
 80062ce:	b084      	sub	sp, #16
 80062d0:	af00      	add	r7, sp, #0
 80062d2:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 80062d4:	687b      	ldr	r3, [r7, #4]
 80062d6:	2284      	movs	r2, #132	; 0x84
 80062d8:	5c9b      	ldrb	r3, [r3, r2]
 80062da:	2b01      	cmp	r3, #1
 80062dc:	d101      	bne.n	80062e2 <HAL_UARTEx_DisableFifoMode+0x16>
 80062de:	2302      	movs	r3, #2
 80062e0:	e027      	b.n	8006332 <HAL_UARTEx_DisableFifoMode+0x66>
 80062e2:	687b      	ldr	r3, [r7, #4]
 80062e4:	2284      	movs	r2, #132	; 0x84
 80062e6:	2101      	movs	r1, #1
 80062e8:	5499      	strb	r1, [r3, r2]

  huart->gState = HAL_UART_STATE_BUSY;
 80062ea:	687b      	ldr	r3, [r7, #4]
 80062ec:	2288      	movs	r2, #136	; 0x88
 80062ee:	2124      	movs	r1, #36	; 0x24
 80062f0:	5099      	str	r1, [r3, r2]

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80062f2:	687b      	ldr	r3, [r7, #4]
 80062f4:	681b      	ldr	r3, [r3, #0]
 80062f6:	681b      	ldr	r3, [r3, #0]
 80062f8:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80062fa:	687b      	ldr	r3, [r7, #4]
 80062fc:	681b      	ldr	r3, [r3, #0]
 80062fe:	681a      	ldr	r2, [r3, #0]
 8006300:	687b      	ldr	r3, [r7, #4]
 8006302:	681b      	ldr	r3, [r3, #0]
 8006304:	2101      	movs	r1, #1
 8006306:	438a      	bics	r2, r1
 8006308:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 800630a:	68fb      	ldr	r3, [r7, #12]
 800630c:	4a0b      	ldr	r2, [pc, #44]	; (800633c <HAL_UARTEx_DisableFifoMode+0x70>)
 800630e:	4013      	ands	r3, r2
 8006310:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8006312:	687b      	ldr	r3, [r7, #4]
 8006314:	2200      	movs	r2, #0
 8006316:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8006318:	687b      	ldr	r3, [r7, #4]
 800631a:	681b      	ldr	r3, [r3, #0]
 800631c:	68fa      	ldr	r2, [r7, #12]
 800631e:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8006320:	687b      	ldr	r3, [r7, #4]
 8006322:	2288      	movs	r2, #136	; 0x88
 8006324:	2120      	movs	r1, #32
 8006326:	5099      	str	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8006328:	687b      	ldr	r3, [r7, #4]
 800632a:	2284      	movs	r2, #132	; 0x84
 800632c:	2100      	movs	r1, #0
 800632e:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8006330:	2300      	movs	r3, #0
}
 8006332:	0018      	movs	r0, r3
 8006334:	46bd      	mov	sp, r7
 8006336:	b004      	add	sp, #16
 8006338:	bd80      	pop	{r7, pc}
 800633a:	46c0      	nop			; (mov r8, r8)
 800633c:	dfffffff 	.word	0xdfffffff

08006340 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8006340:	b580      	push	{r7, lr}
 8006342:	b084      	sub	sp, #16
 8006344:	af00      	add	r7, sp, #0
 8006346:	6078      	str	r0, [r7, #4]
 8006348:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800634a:	687b      	ldr	r3, [r7, #4]
 800634c:	2284      	movs	r2, #132	; 0x84
 800634e:	5c9b      	ldrb	r3, [r3, r2]
 8006350:	2b01      	cmp	r3, #1
 8006352:	d101      	bne.n	8006358 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8006354:	2302      	movs	r3, #2
 8006356:	e02e      	b.n	80063b6 <HAL_UARTEx_SetTxFifoThreshold+0x76>
 8006358:	687b      	ldr	r3, [r7, #4]
 800635a:	2284      	movs	r2, #132	; 0x84
 800635c:	2101      	movs	r1, #1
 800635e:	5499      	strb	r1, [r3, r2]

  huart->gState = HAL_UART_STATE_BUSY;
 8006360:	687b      	ldr	r3, [r7, #4]
 8006362:	2288      	movs	r2, #136	; 0x88
 8006364:	2124      	movs	r1, #36	; 0x24
 8006366:	5099      	str	r1, [r3, r2]

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8006368:	687b      	ldr	r3, [r7, #4]
 800636a:	681b      	ldr	r3, [r3, #0]
 800636c:	681b      	ldr	r3, [r3, #0]
 800636e:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8006370:	687b      	ldr	r3, [r7, #4]
 8006372:	681b      	ldr	r3, [r3, #0]
 8006374:	681a      	ldr	r2, [r3, #0]
 8006376:	687b      	ldr	r3, [r7, #4]
 8006378:	681b      	ldr	r3, [r3, #0]
 800637a:	2101      	movs	r1, #1
 800637c:	438a      	bics	r2, r1
 800637e:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8006380:	687b      	ldr	r3, [r7, #4]
 8006382:	681b      	ldr	r3, [r3, #0]
 8006384:	689b      	ldr	r3, [r3, #8]
 8006386:	00db      	lsls	r3, r3, #3
 8006388:	08d9      	lsrs	r1, r3, #3
 800638a:	687b      	ldr	r3, [r7, #4]
 800638c:	681b      	ldr	r3, [r3, #0]
 800638e:	683a      	ldr	r2, [r7, #0]
 8006390:	430a      	orrs	r2, r1
 8006392:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8006394:	687b      	ldr	r3, [r7, #4]
 8006396:	0018      	movs	r0, r3
 8006398:	f000 f854 	bl	8006444 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800639c:	687b      	ldr	r3, [r7, #4]
 800639e:	681b      	ldr	r3, [r3, #0]
 80063a0:	68fa      	ldr	r2, [r7, #12]
 80063a2:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80063a4:	687b      	ldr	r3, [r7, #4]
 80063a6:	2288      	movs	r2, #136	; 0x88
 80063a8:	2120      	movs	r1, #32
 80063aa:	5099      	str	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80063ac:	687b      	ldr	r3, [r7, #4]
 80063ae:	2284      	movs	r2, #132	; 0x84
 80063b0:	2100      	movs	r1, #0
 80063b2:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80063b4:	2300      	movs	r3, #0
}
 80063b6:	0018      	movs	r0, r3
 80063b8:	46bd      	mov	sp, r7
 80063ba:	b004      	add	sp, #16
 80063bc:	bd80      	pop	{r7, pc}
	...

080063c0 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 80063c0:	b580      	push	{r7, lr}
 80063c2:	b084      	sub	sp, #16
 80063c4:	af00      	add	r7, sp, #0
 80063c6:	6078      	str	r0, [r7, #4]
 80063c8:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 80063ca:	687b      	ldr	r3, [r7, #4]
 80063cc:	2284      	movs	r2, #132	; 0x84
 80063ce:	5c9b      	ldrb	r3, [r3, r2]
 80063d0:	2b01      	cmp	r3, #1
 80063d2:	d101      	bne.n	80063d8 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 80063d4:	2302      	movs	r3, #2
 80063d6:	e02f      	b.n	8006438 <HAL_UARTEx_SetRxFifoThreshold+0x78>
 80063d8:	687b      	ldr	r3, [r7, #4]
 80063da:	2284      	movs	r2, #132	; 0x84
 80063dc:	2101      	movs	r1, #1
 80063de:	5499      	strb	r1, [r3, r2]

  huart->gState = HAL_UART_STATE_BUSY;
 80063e0:	687b      	ldr	r3, [r7, #4]
 80063e2:	2288      	movs	r2, #136	; 0x88
 80063e4:	2124      	movs	r1, #36	; 0x24
 80063e6:	5099      	str	r1, [r3, r2]

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80063e8:	687b      	ldr	r3, [r7, #4]
 80063ea:	681b      	ldr	r3, [r3, #0]
 80063ec:	681b      	ldr	r3, [r3, #0]
 80063ee:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80063f0:	687b      	ldr	r3, [r7, #4]
 80063f2:	681b      	ldr	r3, [r3, #0]
 80063f4:	681a      	ldr	r2, [r3, #0]
 80063f6:	687b      	ldr	r3, [r7, #4]
 80063f8:	681b      	ldr	r3, [r3, #0]
 80063fa:	2101      	movs	r1, #1
 80063fc:	438a      	bics	r2, r1
 80063fe:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8006400:	687b      	ldr	r3, [r7, #4]
 8006402:	681b      	ldr	r3, [r3, #0]
 8006404:	689b      	ldr	r3, [r3, #8]
 8006406:	4a0e      	ldr	r2, [pc, #56]	; (8006440 <HAL_UARTEx_SetRxFifoThreshold+0x80>)
 8006408:	4013      	ands	r3, r2
 800640a:	0019      	movs	r1, r3
 800640c:	687b      	ldr	r3, [r7, #4]
 800640e:	681b      	ldr	r3, [r3, #0]
 8006410:	683a      	ldr	r2, [r7, #0]
 8006412:	430a      	orrs	r2, r1
 8006414:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8006416:	687b      	ldr	r3, [r7, #4]
 8006418:	0018      	movs	r0, r3
 800641a:	f000 f813 	bl	8006444 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800641e:	687b      	ldr	r3, [r7, #4]
 8006420:	681b      	ldr	r3, [r3, #0]
 8006422:	68fa      	ldr	r2, [r7, #12]
 8006424:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8006426:	687b      	ldr	r3, [r7, #4]
 8006428:	2288      	movs	r2, #136	; 0x88
 800642a:	2120      	movs	r1, #32
 800642c:	5099      	str	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800642e:	687b      	ldr	r3, [r7, #4]
 8006430:	2284      	movs	r2, #132	; 0x84
 8006432:	2100      	movs	r1, #0
 8006434:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8006436:	2300      	movs	r3, #0
}
 8006438:	0018      	movs	r0, r3
 800643a:	46bd      	mov	sp, r7
 800643c:	b004      	add	sp, #16
 800643e:	bd80      	pop	{r7, pc}
 8006440:	f1ffffff 	.word	0xf1ffffff

08006444 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8006444:	b5f0      	push	{r4, r5, r6, r7, lr}
 8006446:	b085      	sub	sp, #20
 8006448:	af00      	add	r7, sp, #0
 800644a:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 800644c:	687b      	ldr	r3, [r7, #4]
 800644e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8006450:	2b00      	cmp	r3, #0
 8006452:	d108      	bne.n	8006466 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8006454:	687b      	ldr	r3, [r7, #4]
 8006456:	226a      	movs	r2, #106	; 0x6a
 8006458:	2101      	movs	r1, #1
 800645a:	5299      	strh	r1, [r3, r2]
    huart->NbRxDataToProcess = 1U;
 800645c:	687b      	ldr	r3, [r7, #4]
 800645e:	2268      	movs	r2, #104	; 0x68
 8006460:	2101      	movs	r1, #1
 8006462:	5299      	strh	r1, [r3, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8006464:	e043      	b.n	80064ee <UARTEx_SetNbDataToProcess+0xaa>
    rx_fifo_depth = RX_FIFO_DEPTH;
 8006466:	260f      	movs	r6, #15
 8006468:	19bb      	adds	r3, r7, r6
 800646a:	2208      	movs	r2, #8
 800646c:	701a      	strb	r2, [r3, #0]
    tx_fifo_depth = TX_FIFO_DEPTH;
 800646e:	200e      	movs	r0, #14
 8006470:	183b      	adds	r3, r7, r0
 8006472:	2208      	movs	r2, #8
 8006474:	701a      	strb	r2, [r3, #0]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8006476:	687b      	ldr	r3, [r7, #4]
 8006478:	681b      	ldr	r3, [r3, #0]
 800647a:	689b      	ldr	r3, [r3, #8]
 800647c:	0e5b      	lsrs	r3, r3, #25
 800647e:	b2da      	uxtb	r2, r3
 8006480:	240d      	movs	r4, #13
 8006482:	193b      	adds	r3, r7, r4
 8006484:	2107      	movs	r1, #7
 8006486:	400a      	ands	r2, r1
 8006488:	701a      	strb	r2, [r3, #0]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 800648a:	687b      	ldr	r3, [r7, #4]
 800648c:	681b      	ldr	r3, [r3, #0]
 800648e:	689b      	ldr	r3, [r3, #8]
 8006490:	0f5b      	lsrs	r3, r3, #29
 8006492:	b2da      	uxtb	r2, r3
 8006494:	250c      	movs	r5, #12
 8006496:	197b      	adds	r3, r7, r5
 8006498:	2107      	movs	r1, #7
 800649a:	400a      	ands	r2, r1
 800649c:	701a      	strb	r2, [r3, #0]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800649e:	183b      	adds	r3, r7, r0
 80064a0:	781b      	ldrb	r3, [r3, #0]
 80064a2:	197a      	adds	r2, r7, r5
 80064a4:	7812      	ldrb	r2, [r2, #0]
 80064a6:	4914      	ldr	r1, [pc, #80]	; (80064f8 <UARTEx_SetNbDataToProcess+0xb4>)
 80064a8:	5c8a      	ldrb	r2, [r1, r2]
 80064aa:	435a      	muls	r2, r3
 80064ac:	0010      	movs	r0, r2
                               (uint16_t)denominator[tx_fifo_threshold];
 80064ae:	197b      	adds	r3, r7, r5
 80064b0:	781b      	ldrb	r3, [r3, #0]
 80064b2:	4a12      	ldr	r2, [pc, #72]	; (80064fc <UARTEx_SetNbDataToProcess+0xb8>)
 80064b4:	5cd3      	ldrb	r3, [r2, r3]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 80064b6:	0019      	movs	r1, r3
 80064b8:	f7f9 feca 	bl	8000250 <__divsi3>
 80064bc:	0003      	movs	r3, r0
 80064be:	b299      	uxth	r1, r3
 80064c0:	687b      	ldr	r3, [r7, #4]
 80064c2:	226a      	movs	r2, #106	; 0x6a
 80064c4:	5299      	strh	r1, [r3, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 80064c6:	19bb      	adds	r3, r7, r6
 80064c8:	781b      	ldrb	r3, [r3, #0]
 80064ca:	193a      	adds	r2, r7, r4
 80064cc:	7812      	ldrb	r2, [r2, #0]
 80064ce:	490a      	ldr	r1, [pc, #40]	; (80064f8 <UARTEx_SetNbDataToProcess+0xb4>)
 80064d0:	5c8a      	ldrb	r2, [r1, r2]
 80064d2:	435a      	muls	r2, r3
 80064d4:	0010      	movs	r0, r2
                               (uint16_t)denominator[rx_fifo_threshold];
 80064d6:	193b      	adds	r3, r7, r4
 80064d8:	781b      	ldrb	r3, [r3, #0]
 80064da:	4a08      	ldr	r2, [pc, #32]	; (80064fc <UARTEx_SetNbDataToProcess+0xb8>)
 80064dc:	5cd3      	ldrb	r3, [r2, r3]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 80064de:	0019      	movs	r1, r3
 80064e0:	f7f9 feb6 	bl	8000250 <__divsi3>
 80064e4:	0003      	movs	r3, r0
 80064e6:	b299      	uxth	r1, r3
 80064e8:	687b      	ldr	r3, [r7, #4]
 80064ea:	2268      	movs	r2, #104	; 0x68
 80064ec:	5299      	strh	r1, [r3, r2]
}
 80064ee:	46c0      	nop			; (mov r8, r8)
 80064f0:	46bd      	mov	sp, r7
 80064f2:	b005      	add	sp, #20
 80064f4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80064f6:	46c0      	nop			; (mov r8, r8)
 80064f8:	0800dbbc 	.word	0x0800dbbc
 80064fc:	0800dbc4 	.word	0x0800dbc4

08006500 <astronode_send_cfg_sr>:
        }
    }
}

void astronode_send_cfg_sr(void)
{
 8006500:	b5b0      	push	{r4, r5, r7, lr}
 8006502:	b0e4      	sub	sp, #400	; 0x190
 8006504:	af00      	add	r7, sp, #0
    astronode_app_msg_t request = {0};
 8006506:	24c8      	movs	r4, #200	; 0xc8
 8006508:	193b      	adds	r3, r7, r4
 800650a:	0018      	movs	r0, r3
 800650c:	23c6      	movs	r3, #198	; 0xc6
 800650e:	001a      	movs	r2, r3
 8006510:	2100      	movs	r1, #0
 8006512:	f001 f9e3 	bl	80078dc <memset>
    astronode_app_msg_t answer = {0};
 8006516:	4b13      	ldr	r3, [pc, #76]	; (8006564 <astronode_send_cfg_sr+0x64>)
 8006518:	25c8      	movs	r5, #200	; 0xc8
 800651a:	006d      	lsls	r5, r5, #1
 800651c:	195b      	adds	r3, r3, r5
 800651e:	19db      	adds	r3, r3, r7
 8006520:	0018      	movs	r0, r3
 8006522:	23c6      	movs	r3, #198	; 0xc6
 8006524:	001a      	movs	r2, r3
 8006526:	2100      	movs	r1, #0
 8006528:	f001 f9d8 	bl	80078dc <memset>

    request.op_code = ASTRONODE_OP_CODE_CFG_SR;
 800652c:	193b      	adds	r3, r7, r4
 800652e:	2210      	movs	r2, #16
 8006530:	701a      	strb	r2, [r3, #0]

    astronode_transport_send_receive(&request, &answer);
 8006532:	003a      	movs	r2, r7
 8006534:	193b      	adds	r3, r7, r4
 8006536:	0011      	movs	r1, r2
 8006538:	0018      	movs	r0, r3
 800653a:	f000 fdc5 	bl	80070c8 <astronode_transport_send_receive>

    if (answer.op_code == ASTRONODE_OP_CODE_CFG_SA)
 800653e:	4b09      	ldr	r3, [pc, #36]	; (8006564 <astronode_send_cfg_sr+0x64>)
 8006540:	195b      	adds	r3, r3, r5
 8006542:	19db      	adds	r3, r3, r7
 8006544:	781b      	ldrb	r3, [r3, #0]
 8006546:	2b90      	cmp	r3, #144	; 0x90
 8006548:	d104      	bne.n	8006554 <astronode_send_cfg_sr+0x54>
    {
        send_debug_logs("Astronode configuration successfully saved in NVM.");
 800654a:	4b07      	ldr	r3, [pc, #28]	; (8006568 <astronode_send_cfg_sr+0x68>)
 800654c:	0018      	movs	r0, r3
 800654e:	f7fc f99d 	bl	800288c <send_debug_logs>
    }
    else
    {
        send_debug_logs("Failed to save the Astronode configuration in NVM.");
    }
}
 8006552:	e003      	b.n	800655c <astronode_send_cfg_sr+0x5c>
        send_debug_logs("Failed to save the Astronode configuration in NVM.");
 8006554:	4b05      	ldr	r3, [pc, #20]	; (800656c <astronode_send_cfg_sr+0x6c>)
 8006556:	0018      	movs	r0, r3
 8006558:	f7fc f998 	bl	800288c <send_debug_logs>
}
 800655c:	46c0      	nop			; (mov r8, r8)
 800655e:	46bd      	mov	sp, r7
 8006560:	b064      	add	sp, #400	; 0x190
 8006562:	bdb0      	pop	{r4, r5, r7, pc}
 8006564:	fffffe70 	.word	0xfffffe70
 8006568:	0800c834 	.word	0x0800c834
 800656c:	0800c868 	.word	0x0800c868

08006570 <astronode_send_cfg_wr>:
                            bool deep_sleep_mode,
                            bool message_ack_event_pin_mask,
                            bool reset_notification_event_pin_mask,
							bool command_available_event_pin_mask,
							bool message_tx_event_pin_mask)
{
 8006570:	b5f0      	push	{r4, r5, r6, r7, lr}
 8006572:	b0e7      	sub	sp, #412	; 0x19c
 8006574:	af00      	add	r7, sp, #0
 8006576:	0005      	movs	r5, r0
 8006578:	000c      	movs	r4, r1
 800657a:	0010      	movs	r0, r2
 800657c:	0019      	movs	r1, r3
 800657e:	4b4b      	ldr	r3, [pc, #300]	; (80066ac <astronode_send_cfg_wr+0x13c>)
 8006580:	26cc      	movs	r6, #204	; 0xcc
 8006582:	0076      	lsls	r6, r6, #1
 8006584:	199b      	adds	r3, r3, r6
 8006586:	19db      	adds	r3, r3, r7
 8006588:	1c2a      	adds	r2, r5, #0
 800658a:	701a      	strb	r2, [r3, #0]
 800658c:	4b48      	ldr	r3, [pc, #288]	; (80066b0 <astronode_send_cfg_wr+0x140>)
 800658e:	0035      	movs	r5, r6
 8006590:	195b      	adds	r3, r3, r5
 8006592:	19db      	adds	r3, r3, r7
 8006594:	1c22      	adds	r2, r4, #0
 8006596:	701a      	strb	r2, [r3, #0]
 8006598:	4b46      	ldr	r3, [pc, #280]	; (80066b4 <astronode_send_cfg_wr+0x144>)
 800659a:	002c      	movs	r4, r5
 800659c:	191b      	adds	r3, r3, r4
 800659e:	19db      	adds	r3, r3, r7
 80065a0:	1c02      	adds	r2, r0, #0
 80065a2:	701a      	strb	r2, [r3, #0]
 80065a4:	4b44      	ldr	r3, [pc, #272]	; (80066b8 <astronode_send_cfg_wr+0x148>)
 80065a6:	191b      	adds	r3, r3, r4
 80065a8:	19db      	adds	r3, r3, r7
 80065aa:	1c0a      	adds	r2, r1, #0
 80065ac:	701a      	strb	r2, [r3, #0]
    astronode_app_msg_t request = {0};
 80065ae:	25d0      	movs	r5, #208	; 0xd0
 80065b0:	197b      	adds	r3, r7, r5
 80065b2:	0018      	movs	r0, r3
 80065b4:	23c6      	movs	r3, #198	; 0xc6
 80065b6:	001a      	movs	r2, r3
 80065b8:	2100      	movs	r1, #0
 80065ba:	f001 f98f 	bl	80078dc <memset>
    astronode_app_msg_t answer = {0};
 80065be:	4b3f      	ldr	r3, [pc, #252]	; (80066bc <astronode_send_cfg_wr+0x14c>)
 80065c0:	191b      	adds	r3, r3, r4
 80065c2:	19db      	adds	r3, r3, r7
 80065c4:	0018      	movs	r0, r3
 80065c6:	23c6      	movs	r3, #198	; 0xc6
 80065c8:	001a      	movs	r2, r3
 80065ca:	2100      	movs	r1, #0
 80065cc:	f001 f986 	bl	80078dc <memset>

    request.op_code = ASTRONODE_OP_CODE_CFG_WR;
 80065d0:	0029      	movs	r1, r5
 80065d2:	187b      	adds	r3, r7, r1
 80065d4:	2205      	movs	r2, #5
 80065d6:	701a      	strb	r2, [r3, #0]

    request.p_payload[ASTRONODE_BYTE_OFFSET_CFG_WR_CONFIG] = payload_acknowledgment << ASTRONODE_BIT_OFFSET_PAYLOAD_ACK
        | add_geolocation << ASTRONODE_BIT_OFFSET_ADD_GEO
 80065d8:	4b34      	ldr	r3, [pc, #208]	; (80066ac <astronode_send_cfg_wr+0x13c>)
 80065da:	191b      	adds	r3, r3, r4
 80065dc:	19db      	adds	r3, r3, r7
 80065de:	2200      	movs	r2, #0
 80065e0:	569a      	ldrsb	r2, [r3, r2]
 80065e2:	4b33      	ldr	r3, [pc, #204]	; (80066b0 <astronode_send_cfg_wr+0x140>)
 80065e4:	191b      	adds	r3, r3, r4
 80065e6:	19db      	adds	r3, r3, r7
 80065e8:	781b      	ldrb	r3, [r3, #0]
 80065ea:	005b      	lsls	r3, r3, #1
 80065ec:	b25b      	sxtb	r3, r3
 80065ee:	4313      	orrs	r3, r2
 80065f0:	b25a      	sxtb	r2, r3
        | enable_ephemeris << ASTRONODE_BIT_OFFSET_ENABLE_EPH
 80065f2:	4b30      	ldr	r3, [pc, #192]	; (80066b4 <astronode_send_cfg_wr+0x144>)
 80065f4:	191b      	adds	r3, r3, r4
 80065f6:	19db      	adds	r3, r3, r7
 80065f8:	781b      	ldrb	r3, [r3, #0]
 80065fa:	009b      	lsls	r3, r3, #2
 80065fc:	b25b      	sxtb	r3, r3
 80065fe:	4313      	orrs	r3, r2
 8006600:	b25a      	sxtb	r2, r3
        | deep_sleep_mode << ASTRONODE_BIT_OFFSET_DEEP_SLEEP_MODE;
 8006602:	4b2d      	ldr	r3, [pc, #180]	; (80066b8 <astronode_send_cfg_wr+0x148>)
 8006604:	191b      	adds	r3, r3, r4
 8006606:	19db      	adds	r3, r3, r7
 8006608:	781b      	ldrb	r3, [r3, #0]
 800660a:	00db      	lsls	r3, r3, #3
 800660c:	b25b      	sxtb	r3, r3
 800660e:	4313      	orrs	r3, r2
 8006610:	b25b      	sxtb	r3, r3
 8006612:	b2da      	uxtb	r2, r3
    request.p_payload[ASTRONODE_BYTE_OFFSET_CFG_WR_CONFIG] = payload_acknowledgment << ASTRONODE_BIT_OFFSET_PAYLOAD_ACK
 8006614:	187b      	adds	r3, r7, r1
 8006616:	705a      	strb	r2, [r3, #1]

    request.p_payload[ASTRONODE_BYTE_OFFSET_CFG_WR_EVT_PIN_MASK] = message_ack_event_pin_mask << ASTRONODE_BIT_OFFSET_MSG_ACK_EVT_PIN_MASK
        | reset_notification_event_pin_mask << ASTRONODE_BIT_OFFSET_RST_NTF_EVT_PIN_MASK
 8006618:	23d4      	movs	r3, #212	; 0xd4
 800661a:	005b      	lsls	r3, r3, #1
 800661c:	2508      	movs	r5, #8
 800661e:	195b      	adds	r3, r3, r5
 8006620:	19db      	adds	r3, r3, r7
 8006622:	2200      	movs	r2, #0
 8006624:	569a      	ldrsb	r2, [r3, r2]
 8006626:	23d6      	movs	r3, #214	; 0xd6
 8006628:	005b      	lsls	r3, r3, #1
 800662a:	195b      	adds	r3, r3, r5
 800662c:	19db      	adds	r3, r3, r7
 800662e:	781b      	ldrb	r3, [r3, #0]
 8006630:	005b      	lsls	r3, r3, #1
 8006632:	b25b      	sxtb	r3, r3
 8006634:	4313      	orrs	r3, r2
 8006636:	b25a      	sxtb	r2, r3
        | command_available_event_pin_mask << ASTRONODE_BIT_OFFSET_CMD_AVA_EVT_PIN_MASK
 8006638:	23d8      	movs	r3, #216	; 0xd8
 800663a:	005b      	lsls	r3, r3, #1
 800663c:	195b      	adds	r3, r3, r5
 800663e:	19db      	adds	r3, r3, r7
 8006640:	781b      	ldrb	r3, [r3, #0]
 8006642:	009b      	lsls	r3, r3, #2
 8006644:	b25b      	sxtb	r3, r3
 8006646:	4313      	orrs	r3, r2
 8006648:	b25a      	sxtb	r2, r3
        | message_tx_event_pin_mask << ASTRONODE_BIT_OFFSET_MSG_TXP_EVT_PIN_MASK;
 800664a:	23da      	movs	r3, #218	; 0xda
 800664c:	005b      	lsls	r3, r3, #1
 800664e:	195b      	adds	r3, r3, r5
 8006650:	19db      	adds	r3, r3, r7
 8006652:	781b      	ldrb	r3, [r3, #0]
 8006654:	00db      	lsls	r3, r3, #3
 8006656:	b25b      	sxtb	r3, r3
 8006658:	4313      	orrs	r3, r2
 800665a:	b25b      	sxtb	r3, r3
 800665c:	b2da      	uxtb	r2, r3
    request.p_payload[ASTRONODE_BYTE_OFFSET_CFG_WR_EVT_PIN_MASK] = message_ack_event_pin_mask << ASTRONODE_BIT_OFFSET_MSG_ACK_EVT_PIN_MASK
 800665e:	187b      	adds	r3, r7, r1
 8006660:	70da      	strb	r2, [r3, #3]

    request.payload_len = 3;
 8006662:	0008      	movs	r0, r1
 8006664:	187b      	adds	r3, r7, r1
 8006666:	22c4      	movs	r2, #196	; 0xc4
 8006668:	2103      	movs	r1, #3
 800666a:	5299      	strh	r1, [r3, r2]

    if (astronode_transport_send_receive(&request, &answer) == RS_SUCCESS)
 800666c:	002b      	movs	r3, r5
 800666e:	18fa      	adds	r2, r7, r3
 8006670:	183b      	adds	r3, r7, r0
 8006672:	0011      	movs	r1, r2
 8006674:	0018      	movs	r0, r3
 8006676:	f000 fd27 	bl	80070c8 <astronode_transport_send_receive>
 800667a:	0003      	movs	r3, r0
 800667c:	2b01      	cmp	r3, #1
 800667e:	d10f      	bne.n	80066a0 <astronode_send_cfg_wr+0x130>
    {
        if (answer.op_code == ASTRONODE_OP_CODE_CFG_WA)
 8006680:	4b0e      	ldr	r3, [pc, #56]	; (80066bc <astronode_send_cfg_wr+0x14c>)
 8006682:	191b      	adds	r3, r3, r4
 8006684:	19db      	adds	r3, r3, r7
 8006686:	781b      	ldrb	r3, [r3, #0]
 8006688:	2b85      	cmp	r3, #133	; 0x85
 800668a:	d105      	bne.n	8006698 <astronode_send_cfg_wr+0x128>
        {
            send_debug_logs("Astronode configuration successfully set.");
 800668c:	4b0c      	ldr	r3, [pc, #48]	; (80066c0 <astronode_send_cfg_wr+0x150>)
 800668e:	0018      	movs	r0, r3
 8006690:	f7fc f8fc 	bl	800288c <send_debug_logs>
            return true ;
 8006694:	2301      	movs	r3, #1
 8006696:	e004      	b.n	80066a2 <astronode_send_cfg_wr+0x132>
        }
        else
        {
            send_debug_logs("Failed to set the Astronode configuration.");
 8006698:	4b0a      	ldr	r3, [pc, #40]	; (80066c4 <astronode_send_cfg_wr+0x154>)
 800669a:	0018      	movs	r0, r3
 800669c:	f7fc f8f6 	bl	800288c <send_debug_logs>
        }
    }
    return false ;
 80066a0:	2300      	movs	r3, #0
}
 80066a2:	0018      	movs	r0, r3
 80066a4:	46bd      	mov	sp, r7
 80066a6:	b067      	add	sp, #412	; 0x19c
 80066a8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80066aa:	46c0      	nop			; (mov r8, r8)
 80066ac:	fffffe6f 	.word	0xfffffe6f
 80066b0:	fffffe6e 	.word	0xfffffe6e
 80066b4:	fffffe6d 	.word	0xfffffe6d
 80066b8:	fffffe6c 	.word	0xfffffe6c
 80066bc:	fffffe70 	.word	0xfffffe70
 80066c0:	0800c89c 	.word	0x0800c89c
 80066c4:	0800c8c8 	.word	0x0800c8c8

080066c8 <astronode_send_mgi_rr>:
        send_debug_logs("Failed to save the Astronode context in NVM.");
    }
}

void astronode_send_mgi_rr(void)
{
 80066c8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80066ca:	b0ed      	sub	sp, #436	; 0x1b4
 80066cc:	af00      	add	r7, sp, #0
    astronode_app_msg_t request = {0};
 80066ce:	21c8      	movs	r1, #200	; 0xc8
 80066d0:	2318      	movs	r3, #24
 80066d2:	18cb      	adds	r3, r1, r3
 80066d4:	19db      	adds	r3, r3, r7
 80066d6:	0018      	movs	r0, r3
 80066d8:	23c6      	movs	r3, #198	; 0xc6
 80066da:	001a      	movs	r2, r3
 80066dc:	2100      	movs	r1, #0
 80066de:	f001 f8fd 	bl	80078dc <memset>
    astronode_app_msg_t answer = {0};
 80066e2:	4b4a      	ldr	r3, [pc, #296]	; (800680c <astronode_send_mgi_rr+0x144>)
 80066e4:	26cc      	movs	r6, #204	; 0xcc
 80066e6:	0076      	lsls	r6, r6, #1
 80066e8:	199b      	adds	r3, r3, r6
 80066ea:	2218      	movs	r2, #24
 80066ec:	4694      	mov	ip, r2
 80066ee:	44bc      	add	ip, r7
 80066f0:	4463      	add	r3, ip
 80066f2:	0018      	movs	r0, r3
 80066f4:	23c6      	movs	r3, #198	; 0xc6
 80066f6:	001a      	movs	r2, r3
 80066f8:	2100      	movs	r1, #0
 80066fa:	f001 f8ef 	bl	80078dc <memset>

    request.op_code = ASTRONODE_OP_CODE_MGI_RR;
 80066fe:	21c8      	movs	r1, #200	; 0xc8
 8006700:	2318      	movs	r3, #24
 8006702:	18cb      	adds	r3, r1, r3
 8006704:	19db      	adds	r3, r3, r7
 8006706:	2219      	movs	r2, #25
 8006708:	701a      	strb	r2, [r3, #0]

    if (astronode_transport_send_receive(&request, &answer) == RS_SUCCESS)
 800670a:	2318      	movs	r3, #24
 800670c:	18fa      	adds	r2, r7, r3
 800670e:	2318      	movs	r3, #24
 8006710:	18cb      	adds	r3, r1, r3
 8006712:	19db      	adds	r3, r3, r7
 8006714:	0011      	movs	r1, r2
 8006716:	0018      	movs	r0, r3
 8006718:	f000 fcd6 	bl	80070c8 <astronode_transport_send_receive>
 800671c:	0003      	movs	r3, r0
 800671e:	2b01      	cmp	r3, #1
 8006720:	d16f      	bne.n	8006802 <astronode_send_mgi_rr+0x13a>
    {
        if (answer.op_code == ASTRONODE_OP_CODE_MGI_RA)
 8006722:	4b3a      	ldr	r3, [pc, #232]	; (800680c <astronode_send_mgi_rr+0x144>)
 8006724:	0032      	movs	r2, r6
 8006726:	189b      	adds	r3, r3, r2
 8006728:	2118      	movs	r1, #24
 800672a:	468c      	mov	ip, r1
 800672c:	44bc      	add	ip, r7
 800672e:	4463      	add	r3, ip
 8006730:	781b      	ldrb	r3, [r3, #0]
 8006732:	2b99      	cmp	r3, #153	; 0x99
 8006734:	d161      	bne.n	80067fa <astronode_send_mgi_rr+0x132>
        {
 8006736:	466b      	mov	r3, sp
 8006738:	001e      	movs	r6, r3
            char guid[answer.payload_len];
 800673a:	4b34      	ldr	r3, [pc, #208]	; (800680c <astronode_send_mgi_rr+0x144>)
 800673c:	189b      	adds	r3, r3, r2
 800673e:	2218      	movs	r2, #24
 8006740:	4694      	mov	ip, r2
 8006742:	44bc      	add	ip, r7
 8006744:	4463      	add	r3, ip
 8006746:	22c4      	movs	r2, #196	; 0xc4
 8006748:	5a9b      	ldrh	r3, [r3, r2]
 800674a:	001a      	movs	r2, r3
 800674c:	3a01      	subs	r2, #1
 800674e:	21ca      	movs	r1, #202	; 0xca
 8006750:	0049      	lsls	r1, r1, #1
 8006752:	2018      	movs	r0, #24
 8006754:	1809      	adds	r1, r1, r0
 8006756:	19c9      	adds	r1, r1, r7
 8006758:	600a      	str	r2, [r1, #0]
 800675a:	001c      	movs	r4, r3
 800675c:	2200      	movs	r2, #0
 800675e:	0015      	movs	r5, r2
 8006760:	0020      	movs	r0, r4
 8006762:	0029      	movs	r1, r5
 8006764:	0004      	movs	r4, r0
 8006766:	0f62      	lsrs	r2, r4, #29
 8006768:	000c      	movs	r4, r1
 800676a:	00e4      	lsls	r4, r4, #3
 800676c:	617c      	str	r4, [r7, #20]
 800676e:	697c      	ldr	r4, [r7, #20]
 8006770:	4314      	orrs	r4, r2
 8006772:	617c      	str	r4, [r7, #20]
 8006774:	0001      	movs	r1, r0
 8006776:	00c9      	lsls	r1, r1, #3
 8006778:	6139      	str	r1, [r7, #16]
 800677a:	603b      	str	r3, [r7, #0]
 800677c:	2200      	movs	r2, #0
 800677e:	607a      	str	r2, [r7, #4]
 8006780:	6838      	ldr	r0, [r7, #0]
 8006782:	6879      	ldr	r1, [r7, #4]
 8006784:	0004      	movs	r4, r0
 8006786:	0f62      	lsrs	r2, r4, #29
 8006788:	000c      	movs	r4, r1
 800678a:	00e4      	lsls	r4, r4, #3
 800678c:	60fc      	str	r4, [r7, #12]
 800678e:	68fc      	ldr	r4, [r7, #12]
 8006790:	4314      	orrs	r4, r2
 8006792:	60fc      	str	r4, [r7, #12]
 8006794:	0001      	movs	r1, r0
 8006796:	00ca      	lsls	r2, r1, #3
 8006798:	60ba      	str	r2, [r7, #8]
 800679a:	3307      	adds	r3, #7
 800679c:	08db      	lsrs	r3, r3, #3
 800679e:	00db      	lsls	r3, r3, #3
 80067a0:	4669      	mov	r1, sp
 80067a2:	1acb      	subs	r3, r1, r3
 80067a4:	469d      	mov	sp, r3
 80067a6:	466b      	mov	r3, sp
 80067a8:	3300      	adds	r3, #0
 80067aa:	24c8      	movs	r4, #200	; 0xc8
 80067ac:	0064      	lsls	r4, r4, #1
 80067ae:	2218      	movs	r2, #24
 80067b0:	18a2      	adds	r2, r4, r2
 80067b2:	19d1      	adds	r1, r2, r7
 80067b4:	600b      	str	r3, [r1, #0]
            send_debug_logs("Module GUID is:");
 80067b6:	4b16      	ldr	r3, [pc, #88]	; (8006810 <astronode_send_mgi_rr+0x148>)
 80067b8:	0018      	movs	r0, r3
 80067ba:	f7fc f867 	bl	800288c <send_debug_logs>
            snprintf(guid, answer.payload_len, "%s", answer.p_payload);
 80067be:	4b13      	ldr	r3, [pc, #76]	; (800680c <astronode_send_mgi_rr+0x144>)
 80067c0:	22cc      	movs	r2, #204	; 0xcc
 80067c2:	0052      	lsls	r2, r2, #1
 80067c4:	189b      	adds	r3, r3, r2
 80067c6:	2218      	movs	r2, #24
 80067c8:	4694      	mov	ip, r2
 80067ca:	44bc      	add	ip, r7
 80067cc:	4463      	add	r3, ip
 80067ce:	22c4      	movs	r2, #196	; 0xc4
 80067d0:	5a9b      	ldrh	r3, [r3, r2]
 80067d2:	0019      	movs	r1, r3
 80067d4:	2318      	movs	r3, #24
 80067d6:	18fb      	adds	r3, r7, r3
 80067d8:	3301      	adds	r3, #1
 80067da:	4a0e      	ldr	r2, [pc, #56]	; (8006814 <astronode_send_mgi_rr+0x14c>)
 80067dc:	2018      	movs	r0, #24
 80067de:	1820      	adds	r0, r4, r0
 80067e0:	19c0      	adds	r0, r0, r7
 80067e2:	6800      	ldr	r0, [r0, #0]
 80067e4:	f000 ffda 	bl	800779c <snprintf>
            send_debug_logs(guid);
 80067e8:	2318      	movs	r3, #24
 80067ea:	18e3      	adds	r3, r4, r3
 80067ec:	19db      	adds	r3, r3, r7
 80067ee:	681b      	ldr	r3, [r3, #0]
 80067f0:	0018      	movs	r0, r3
 80067f2:	f7fc f84b 	bl	800288c <send_debug_logs>
 80067f6:	46b5      	mov	sp, r6
        else
        {
            send_debug_logs("Failed to read module GUID.");
        }
    }
}
 80067f8:	e003      	b.n	8006802 <astronode_send_mgi_rr+0x13a>
            send_debug_logs("Failed to read module GUID.");
 80067fa:	4b07      	ldr	r3, [pc, #28]	; (8006818 <astronode_send_mgi_rr+0x150>)
 80067fc:	0018      	movs	r0, r3
 80067fe:	f7fc f845 	bl	800288c <send_debug_logs>
}
 8006802:	46c0      	nop			; (mov r8, r8)
 8006804:	46bd      	mov	sp, r7
 8006806:	b06d      	add	sp, #436	; 0x1b4
 8006808:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800680a:	46c0      	nop			; (mov r8, r8)
 800680c:	fffffe68 	.word	0xfffffe68
 8006810:	0800c954 	.word	0x0800c954
 8006814:	0800c964 	.word	0x0800c964
 8006818:	0800c968 	.word	0x0800c968

0800681c <astronode_send_msn_rr>:

void astronode_send_msn_rr(void)
{
 800681c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800681e:	b0ed      	sub	sp, #436	; 0x1b4
 8006820:	af00      	add	r7, sp, #0
    astronode_app_msg_t request = {0};
 8006822:	21c8      	movs	r1, #200	; 0xc8
 8006824:	2318      	movs	r3, #24
 8006826:	18cb      	adds	r3, r1, r3
 8006828:	19db      	adds	r3, r3, r7
 800682a:	0018      	movs	r0, r3
 800682c:	23c6      	movs	r3, #198	; 0xc6
 800682e:	001a      	movs	r2, r3
 8006830:	2100      	movs	r1, #0
 8006832:	f001 f853 	bl	80078dc <memset>
    astronode_app_msg_t answer = {0};
 8006836:	4b4a      	ldr	r3, [pc, #296]	; (8006960 <astronode_send_msn_rr+0x144>)
 8006838:	26cc      	movs	r6, #204	; 0xcc
 800683a:	0076      	lsls	r6, r6, #1
 800683c:	199b      	adds	r3, r3, r6
 800683e:	2218      	movs	r2, #24
 8006840:	4694      	mov	ip, r2
 8006842:	44bc      	add	ip, r7
 8006844:	4463      	add	r3, ip
 8006846:	0018      	movs	r0, r3
 8006848:	23c6      	movs	r3, #198	; 0xc6
 800684a:	001a      	movs	r2, r3
 800684c:	2100      	movs	r1, #0
 800684e:	f001 f845 	bl	80078dc <memset>

    request.op_code = ASTRONODE_OP_CODE_MSN_RR;
 8006852:	21c8      	movs	r1, #200	; 0xc8
 8006854:	2318      	movs	r3, #24
 8006856:	18cb      	adds	r3, r1, r3
 8006858:	19db      	adds	r3, r3, r7
 800685a:	221a      	movs	r2, #26
 800685c:	701a      	strb	r2, [r3, #0]

    if (astronode_transport_send_receive(&request, &answer) == RS_SUCCESS)
 800685e:	2318      	movs	r3, #24
 8006860:	18fa      	adds	r2, r7, r3
 8006862:	2318      	movs	r3, #24
 8006864:	18cb      	adds	r3, r1, r3
 8006866:	19db      	adds	r3, r3, r7
 8006868:	0011      	movs	r1, r2
 800686a:	0018      	movs	r0, r3
 800686c:	f000 fc2c 	bl	80070c8 <astronode_transport_send_receive>
 8006870:	0003      	movs	r3, r0
 8006872:	2b01      	cmp	r3, #1
 8006874:	d16f      	bne.n	8006956 <astronode_send_msn_rr+0x13a>
    {
        if (answer.op_code == ASTRONODE_OP_CODE_MSN_RA)
 8006876:	4b3a      	ldr	r3, [pc, #232]	; (8006960 <astronode_send_msn_rr+0x144>)
 8006878:	0032      	movs	r2, r6
 800687a:	189b      	adds	r3, r3, r2
 800687c:	2118      	movs	r1, #24
 800687e:	468c      	mov	ip, r1
 8006880:	44bc      	add	ip, r7
 8006882:	4463      	add	r3, ip
 8006884:	781b      	ldrb	r3, [r3, #0]
 8006886:	2b9a      	cmp	r3, #154	; 0x9a
 8006888:	d161      	bne.n	800694e <astronode_send_msn_rr+0x132>
        {
 800688a:	466b      	mov	r3, sp
 800688c:	001e      	movs	r6, r3
            char serial_number[answer.payload_len];
 800688e:	4b34      	ldr	r3, [pc, #208]	; (8006960 <astronode_send_msn_rr+0x144>)
 8006890:	189b      	adds	r3, r3, r2
 8006892:	2218      	movs	r2, #24
 8006894:	4694      	mov	ip, r2
 8006896:	44bc      	add	ip, r7
 8006898:	4463      	add	r3, ip
 800689a:	22c4      	movs	r2, #196	; 0xc4
 800689c:	5a9b      	ldrh	r3, [r3, r2]
 800689e:	001a      	movs	r2, r3
 80068a0:	3a01      	subs	r2, #1
 80068a2:	21ca      	movs	r1, #202	; 0xca
 80068a4:	0049      	lsls	r1, r1, #1
 80068a6:	2018      	movs	r0, #24
 80068a8:	1809      	adds	r1, r1, r0
 80068aa:	19c9      	adds	r1, r1, r7
 80068ac:	600a      	str	r2, [r1, #0]
 80068ae:	001c      	movs	r4, r3
 80068b0:	2200      	movs	r2, #0
 80068b2:	0015      	movs	r5, r2
 80068b4:	0020      	movs	r0, r4
 80068b6:	0029      	movs	r1, r5
 80068b8:	0004      	movs	r4, r0
 80068ba:	0f62      	lsrs	r2, r4, #29
 80068bc:	000c      	movs	r4, r1
 80068be:	00e4      	lsls	r4, r4, #3
 80068c0:	617c      	str	r4, [r7, #20]
 80068c2:	697c      	ldr	r4, [r7, #20]
 80068c4:	4314      	orrs	r4, r2
 80068c6:	617c      	str	r4, [r7, #20]
 80068c8:	0001      	movs	r1, r0
 80068ca:	00c9      	lsls	r1, r1, #3
 80068cc:	6139      	str	r1, [r7, #16]
 80068ce:	603b      	str	r3, [r7, #0]
 80068d0:	2200      	movs	r2, #0
 80068d2:	607a      	str	r2, [r7, #4]
 80068d4:	6838      	ldr	r0, [r7, #0]
 80068d6:	6879      	ldr	r1, [r7, #4]
 80068d8:	0004      	movs	r4, r0
 80068da:	0f62      	lsrs	r2, r4, #29
 80068dc:	000c      	movs	r4, r1
 80068de:	00e4      	lsls	r4, r4, #3
 80068e0:	60fc      	str	r4, [r7, #12]
 80068e2:	68fc      	ldr	r4, [r7, #12]
 80068e4:	4314      	orrs	r4, r2
 80068e6:	60fc      	str	r4, [r7, #12]
 80068e8:	0001      	movs	r1, r0
 80068ea:	00ca      	lsls	r2, r1, #3
 80068ec:	60ba      	str	r2, [r7, #8]
 80068ee:	3307      	adds	r3, #7
 80068f0:	08db      	lsrs	r3, r3, #3
 80068f2:	00db      	lsls	r3, r3, #3
 80068f4:	4669      	mov	r1, sp
 80068f6:	1acb      	subs	r3, r1, r3
 80068f8:	469d      	mov	sp, r3
 80068fa:	466b      	mov	r3, sp
 80068fc:	3300      	adds	r3, #0
 80068fe:	24c8      	movs	r4, #200	; 0xc8
 8006900:	0064      	lsls	r4, r4, #1
 8006902:	2218      	movs	r2, #24
 8006904:	18a2      	adds	r2, r4, r2
 8006906:	19d1      	adds	r1, r2, r7
 8006908:	600b      	str	r3, [r1, #0]
            send_debug_logs("Module's Serial Number is:");
 800690a:	4b16      	ldr	r3, [pc, #88]	; (8006964 <astronode_send_msn_rr+0x148>)
 800690c:	0018      	movs	r0, r3
 800690e:	f7fb ffbd 	bl	800288c <send_debug_logs>
            snprintf(serial_number, answer.payload_len, "%s", answer.p_payload);
 8006912:	4b13      	ldr	r3, [pc, #76]	; (8006960 <astronode_send_msn_rr+0x144>)
 8006914:	22cc      	movs	r2, #204	; 0xcc
 8006916:	0052      	lsls	r2, r2, #1
 8006918:	189b      	adds	r3, r3, r2
 800691a:	2218      	movs	r2, #24
 800691c:	4694      	mov	ip, r2
 800691e:	44bc      	add	ip, r7
 8006920:	4463      	add	r3, ip
 8006922:	22c4      	movs	r2, #196	; 0xc4
 8006924:	5a9b      	ldrh	r3, [r3, r2]
 8006926:	0019      	movs	r1, r3
 8006928:	2318      	movs	r3, #24
 800692a:	18fb      	adds	r3, r7, r3
 800692c:	3301      	adds	r3, #1
 800692e:	4a0e      	ldr	r2, [pc, #56]	; (8006968 <astronode_send_msn_rr+0x14c>)
 8006930:	2018      	movs	r0, #24
 8006932:	1820      	adds	r0, r4, r0
 8006934:	19c0      	adds	r0, r0, r7
 8006936:	6800      	ldr	r0, [r0, #0]
 8006938:	f000 ff30 	bl	800779c <snprintf>
            send_debug_logs(serial_number);
 800693c:	2318      	movs	r3, #24
 800693e:	18e3      	adds	r3, r4, r3
 8006940:	19db      	adds	r3, r3, r7
 8006942:	681b      	ldr	r3, [r3, #0]
 8006944:	0018      	movs	r0, r3
 8006946:	f7fb ffa1 	bl	800288c <send_debug_logs>
 800694a:	46b5      	mov	sp, r6
        else
        {
            send_debug_logs("Failed to read module Serial Number.");
        }
    }
}
 800694c:	e003      	b.n	8006956 <astronode_send_msn_rr+0x13a>
            send_debug_logs("Failed to read module Serial Number.");
 800694e:	4b07      	ldr	r3, [pc, #28]	; (800696c <astronode_send_msn_rr+0x150>)
 8006950:	0018      	movs	r0, r3
 8006952:	f7fb ff9b 	bl	800288c <send_debug_logs>
}
 8006956:	46c0      	nop			; (mov r8, r8)
 8006958:	46bd      	mov	sp, r7
 800695a:	b06d      	add	sp, #436	; 0x1b4
 800695c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800695e:	46c0      	nop			; (mov r8, r8)
 8006960:	fffffe68 	.word	0xfffffe68
 8006964:	0800c984 	.word	0x0800c984
 8006968:	0800c964 	.word	0x0800c964
 800696c:	0800c9a0 	.word	0x0800c9a0

08006970 <astronode_send_pld_fr>:
    }
    return false ;
}

void astronode_send_pld_fr(void)
{
 8006970:	b5b0      	push	{r4, r5, r7, lr}
 8006972:	b0e4      	sub	sp, #400	; 0x190
 8006974:	af00      	add	r7, sp, #0
    astronode_app_msg_t request = {0};
 8006976:	24c8      	movs	r4, #200	; 0xc8
 8006978:	193b      	adds	r3, r7, r4
 800697a:	0018      	movs	r0, r3
 800697c:	23c6      	movs	r3, #198	; 0xc6
 800697e:	001a      	movs	r2, r3
 8006980:	2100      	movs	r1, #0
 8006982:	f000 ffab 	bl	80078dc <memset>
    astronode_app_msg_t answer = {0};
 8006986:	4b15      	ldr	r3, [pc, #84]	; (80069dc <astronode_send_pld_fr+0x6c>)
 8006988:	25c8      	movs	r5, #200	; 0xc8
 800698a:	006d      	lsls	r5, r5, #1
 800698c:	195b      	adds	r3, r3, r5
 800698e:	19db      	adds	r3, r3, r7
 8006990:	0018      	movs	r0, r3
 8006992:	23c6      	movs	r3, #198	; 0xc6
 8006994:	001a      	movs	r2, r3
 8006996:	2100      	movs	r1, #0
 8006998:	f000 ffa0 	bl	80078dc <memset>

    request.op_code = ASTRONODE_OP_CODE_PLD_FR;
 800699c:	193b      	adds	r3, r7, r4
 800699e:	2227      	movs	r2, #39	; 0x27
 80069a0:	701a      	strb	r2, [r3, #0]

    if (astronode_transport_send_receive(&request, &answer) == RS_SUCCESS)
 80069a2:	003a      	movs	r2, r7
 80069a4:	193b      	adds	r3, r7, r4
 80069a6:	0011      	movs	r1, r2
 80069a8:	0018      	movs	r0, r3
 80069aa:	f000 fb8d 	bl	80070c8 <astronode_transport_send_receive>
 80069ae:	0003      	movs	r3, r0
 80069b0:	2b01      	cmp	r3, #1
 80069b2:	d10e      	bne.n	80069d2 <astronode_send_pld_fr+0x62>
    {
        if (answer.op_code == ASTRONODE_OP_CODE_PLD_FA)
 80069b4:	4b09      	ldr	r3, [pc, #36]	; (80069dc <astronode_send_pld_fr+0x6c>)
 80069b6:	195b      	adds	r3, r3, r5
 80069b8:	19db      	adds	r3, r3, r7
 80069ba:	781b      	ldrb	r3, [r3, #0]
 80069bc:	2ba7      	cmp	r3, #167	; 0xa7
 80069be:	d104      	bne.n	80069ca <astronode_send_pld_fr+0x5a>
        {
            send_debug_logs("astronode_application: payload queue has been cleared.");
 80069c0:	4b07      	ldr	r3, [pc, #28]	; (80069e0 <astronode_send_pld_fr+0x70>)
 80069c2:	0018      	movs	r0, r3
 80069c4:	f7fb ff62 	bl	800288c <send_debug_logs>
        else
        {
            send_debug_logs("astronode_application: Failed to clear the payload queue.");
        }
    }
}
 80069c8:	e003      	b.n	80069d2 <astronode_send_pld_fr+0x62>
            send_debug_logs("astronode_application: Failed to clear the payload queue.");
 80069ca:	4b06      	ldr	r3, [pc, #24]	; (80069e4 <astronode_send_pld_fr+0x74>)
 80069cc:	0018      	movs	r0, r3
 80069ce:	f7fb ff5d 	bl	800288c <send_debug_logs>
}
 80069d2:	46c0      	nop			; (mov r8, r8)
 80069d4:	46bd      	mov	sp, r7
 80069d6:	b064      	add	sp, #400	; 0x190
 80069d8:	bdb0      	pop	{r4, r5, r7, pc}
 80069da:	46c0      	nop			; (mov r8, r8)
 80069dc:	fffffe70 	.word	0xfffffe70
 80069e0:	0800cbac 	.word	0x0800cbac
 80069e4:	0800cbe4 	.word	0x0800cbe4

080069e8 <astronode_send_rtc_rr>:
        }
    }
}

uint32_t astronode_send_rtc_rr ( void )
{
 80069e8:	b5b0      	push	{r4, r5, r7, lr}
 80069ea:	b0fa      	sub	sp, #488	; 0x1e8
 80069ec:	af00      	add	r7, sp, #0
    astronode_app_msg_t request = {0} ;
 80069ee:	258e      	movs	r5, #142	; 0x8e
 80069f0:	006d      	lsls	r5, r5, #1
 80069f2:	197b      	adds	r3, r7, r5
 80069f4:	0018      	movs	r0, r3
 80069f6:	23c6      	movs	r3, #198	; 0xc6
 80069f8:	001a      	movs	r2, r3
 80069fa:	2100      	movs	r1, #0
 80069fc:	f000 ff6e 	bl	80078dc <memset>
    astronode_app_msg_t answer = {0} ;
 8006a00:	4b28      	ldr	r3, [pc, #160]	; (8006aa4 <astronode_send_rtc_rr+0xbc>)
 8006a02:	24f4      	movs	r4, #244	; 0xf4
 8006a04:	0064      	lsls	r4, r4, #1
 8006a06:	191b      	adds	r3, r3, r4
 8006a08:	19db      	adds	r3, r3, r7
 8006a0a:	0018      	movs	r0, r3
 8006a0c:	23c6      	movs	r3, #198	; 0xc6
 8006a0e:	001a      	movs	r2, r3
 8006a10:	2100      	movs	r1, #0
 8006a12:	f000 ff63 	bl	80078dc <memset>

    request.op_code = ASTRONODE_OP_CODE_RTC_RR ;
 8006a16:	197b      	adds	r3, r7, r5
 8006a18:	2217      	movs	r2, #23
 8006a1a:	701a      	strb	r2, [r3, #0]

    if ( astronode_transport_send_receive ( &request , &answer ) == RS_SUCCESS )
 8006a1c:	2354      	movs	r3, #84	; 0x54
 8006a1e:	18fa      	adds	r2, r7, r3
 8006a20:	197b      	adds	r3, r7, r5
 8006a22:	0011      	movs	r1, r2
 8006a24:	0018      	movs	r0, r3
 8006a26:	f000 fb4f 	bl	80070c8 <astronode_transport_send_receive>
 8006a2a:	0003      	movs	r3, r0
 8006a2c:	2b01      	cmp	r3, #1
 8006a2e:	d133      	bne.n	8006a98 <astronode_send_rtc_rr+0xb0>
    {
        if ( answer.op_code == ASTRONODE_OP_CODE_RTC_RA )
 8006a30:	4b1c      	ldr	r3, [pc, #112]	; (8006aa4 <astronode_send_rtc_rr+0xbc>)
 8006a32:	0021      	movs	r1, r4
 8006a34:	185b      	adds	r3, r3, r1
 8006a36:	19db      	adds	r3, r3, r7
 8006a38:	781b      	ldrb	r3, [r3, #0]
 8006a3a:	2b97      	cmp	r3, #151	; 0x97
 8006a3c:	d128      	bne.n	8006a90 <astronode_send_rtc_rr+0xa8>
        {
            uint32_t rtc_time = answer.p_payload[0]
 8006a3e:	4b19      	ldr	r3, [pc, #100]	; (8006aa4 <astronode_send_rtc_rr+0xbc>)
 8006a40:	185b      	adds	r3, r3, r1
 8006a42:	19db      	adds	r3, r3, r7
 8006a44:	785b      	ldrb	r3, [r3, #1]
 8006a46:	001a      	movs	r2, r3
                                        + ( answer.p_payload[1] << 8 )
 8006a48:	4b16      	ldr	r3, [pc, #88]	; (8006aa4 <astronode_send_rtc_rr+0xbc>)
 8006a4a:	185b      	adds	r3, r3, r1
 8006a4c:	19db      	adds	r3, r3, r7
 8006a4e:	789b      	ldrb	r3, [r3, #2]
 8006a50:	021b      	lsls	r3, r3, #8
 8006a52:	18d2      	adds	r2, r2, r3
                                        + ( answer.p_payload[2] << 16 )
 8006a54:	4b13      	ldr	r3, [pc, #76]	; (8006aa4 <astronode_send_rtc_rr+0xbc>)
 8006a56:	185b      	adds	r3, r3, r1
 8006a58:	19db      	adds	r3, r3, r7
 8006a5a:	78db      	ldrb	r3, [r3, #3]
 8006a5c:	041b      	lsls	r3, r3, #16
 8006a5e:	18d2      	adds	r2, r2, r3
                                        + ( answer.p_payload[3] << 24 ) ;
 8006a60:	4b10      	ldr	r3, [pc, #64]	; (8006aa4 <astronode_send_rtc_rr+0xbc>)
 8006a62:	185b      	adds	r3, r3, r1
 8006a64:	19db      	adds	r3, r3, r7
 8006a66:	791b      	ldrb	r3, [r3, #4]
 8006a68:	061b      	lsls	r3, r3, #24
 8006a6a:	18d3      	adds	r3, r2, r3
            uint32_t rtc_time = answer.p_payload[0]
 8006a6c:	24f2      	movs	r4, #242	; 0xf2
 8006a6e:	0064      	lsls	r4, r4, #1
 8006a70:	193a      	adds	r2, r7, r4
 8006a72:	6013      	str	r3, [r2, #0]
            char str[ASTRONODE_UART_DEBUG_BUFFER_LENGTH] ;
            sprintf ( str , "RTC time since Astrocast Epoch (2018-01-01 00:00:00 UTC): %lds." , rtc_time ) ;
 8006a74:	193b      	adds	r3, r7, r4
 8006a76:	681a      	ldr	r2, [r3, #0]
 8006a78:	490b      	ldr	r1, [pc, #44]	; (8006aa8 <astronode_send_rtc_rr+0xc0>)
 8006a7a:	1d3b      	adds	r3, r7, #4
 8006a7c:	0018      	movs	r0, r3
 8006a7e:	f000 fec1 	bl	8007804 <sprintf>
            send_debug_logs ( str ) ;
 8006a82:	1d3b      	adds	r3, r7, #4
 8006a84:	0018      	movs	r0, r3
 8006a86:	f7fb ff01 	bl	800288c <send_debug_logs>
            return rtc_time ;
 8006a8a:	193b      	adds	r3, r7, r4
 8006a8c:	681b      	ldr	r3, [r3, #0]
 8006a8e:	e004      	b.n	8006a9a <astronode_send_rtc_rr+0xb2>
        }
        else
        {
            send_debug_logs ( "Failed to read rtc time." ) ;
 8006a90:	4b06      	ldr	r3, [pc, #24]	; (8006aac <astronode_send_rtc_rr+0xc4>)
 8006a92:	0018      	movs	r0, r3
 8006a94:	f7fb fefa 	bl	800288c <send_debug_logs>
        }
    }
    return 0 ;
 8006a98:	2300      	movs	r3, #0
}
 8006a9a:	0018      	movs	r0, r3
 8006a9c:	46bd      	mov	sp, r7
 8006a9e:	b07a      	add	sp, #488	; 0x1e8
 8006aa0:	bdb0      	pop	{r4, r5, r7, pc}
 8006aa2:	46c0      	nop			; (mov r8, r8)
 8006aa4:	fffffe6c 	.word	0xfffffe6c
 8006aa8:	0800cc80 	.word	0x0800cc80
 8006aac:	0800ccc0 	.word	0x0800ccc0

08006ab0 <astronode_send_mpn_rr>:
        }
    }
}

void astronode_send_mpn_rr(void)
{
 8006ab0:	b5f0      	push	{r4, r5, r6, r7, lr}
 8006ab2:	b0ed      	sub	sp, #436	; 0x1b4
 8006ab4:	af00      	add	r7, sp, #0
    astronode_app_msg_t request = {0};
 8006ab6:	21c8      	movs	r1, #200	; 0xc8
 8006ab8:	2318      	movs	r3, #24
 8006aba:	18cb      	adds	r3, r1, r3
 8006abc:	19db      	adds	r3, r3, r7
 8006abe:	0018      	movs	r0, r3
 8006ac0:	23c6      	movs	r3, #198	; 0xc6
 8006ac2:	001a      	movs	r2, r3
 8006ac4:	2100      	movs	r1, #0
 8006ac6:	f000 ff09 	bl	80078dc <memset>
    astronode_app_msg_t answer = {0};
 8006aca:	4b4a      	ldr	r3, [pc, #296]	; (8006bf4 <astronode_send_mpn_rr+0x144>)
 8006acc:	26cc      	movs	r6, #204	; 0xcc
 8006ace:	0076      	lsls	r6, r6, #1
 8006ad0:	199b      	adds	r3, r3, r6
 8006ad2:	2218      	movs	r2, #24
 8006ad4:	4694      	mov	ip, r2
 8006ad6:	44bc      	add	ip, r7
 8006ad8:	4463      	add	r3, ip
 8006ada:	0018      	movs	r0, r3
 8006adc:	23c6      	movs	r3, #198	; 0xc6
 8006ade:	001a      	movs	r2, r3
 8006ae0:	2100      	movs	r1, #0
 8006ae2:	f000 fefb 	bl	80078dc <memset>

    request.op_code = ASTRONODE_OP_CODE_MPN_RR;
 8006ae6:	21c8      	movs	r1, #200	; 0xc8
 8006ae8:	2318      	movs	r3, #24
 8006aea:	18cb      	adds	r3, r1, r3
 8006aec:	19db      	adds	r3, r3, r7
 8006aee:	221b      	movs	r2, #27
 8006af0:	701a      	strb	r2, [r3, #0]

    if (astronode_transport_send_receive(&request, &answer) == RS_SUCCESS)
 8006af2:	2318      	movs	r3, #24
 8006af4:	18fa      	adds	r2, r7, r3
 8006af6:	2318      	movs	r3, #24
 8006af8:	18cb      	adds	r3, r1, r3
 8006afa:	19db      	adds	r3, r3, r7
 8006afc:	0011      	movs	r1, r2
 8006afe:	0018      	movs	r0, r3
 8006b00:	f000 fae2 	bl	80070c8 <astronode_transport_send_receive>
 8006b04:	0003      	movs	r3, r0
 8006b06:	2b01      	cmp	r3, #1
 8006b08:	d16f      	bne.n	8006bea <astronode_send_mpn_rr+0x13a>
    {
        if (answer.op_code == ASTRONODE_OP_CODE_MPN_RA)
 8006b0a:	4b3a      	ldr	r3, [pc, #232]	; (8006bf4 <astronode_send_mpn_rr+0x144>)
 8006b0c:	0032      	movs	r2, r6
 8006b0e:	189b      	adds	r3, r3, r2
 8006b10:	2118      	movs	r1, #24
 8006b12:	468c      	mov	ip, r1
 8006b14:	44bc      	add	ip, r7
 8006b16:	4463      	add	r3, ip
 8006b18:	781b      	ldrb	r3, [r3, #0]
 8006b1a:	2b9b      	cmp	r3, #155	; 0x9b
 8006b1c:	d161      	bne.n	8006be2 <astronode_send_mpn_rr+0x132>
        {
 8006b1e:	466b      	mov	r3, sp
 8006b20:	001e      	movs	r6, r3
            char product_number[answer.payload_len];
 8006b22:	4b34      	ldr	r3, [pc, #208]	; (8006bf4 <astronode_send_mpn_rr+0x144>)
 8006b24:	189b      	adds	r3, r3, r2
 8006b26:	2218      	movs	r2, #24
 8006b28:	4694      	mov	ip, r2
 8006b2a:	44bc      	add	ip, r7
 8006b2c:	4463      	add	r3, ip
 8006b2e:	22c4      	movs	r2, #196	; 0xc4
 8006b30:	5a9b      	ldrh	r3, [r3, r2]
 8006b32:	001a      	movs	r2, r3
 8006b34:	3a01      	subs	r2, #1
 8006b36:	21ca      	movs	r1, #202	; 0xca
 8006b38:	0049      	lsls	r1, r1, #1
 8006b3a:	2018      	movs	r0, #24
 8006b3c:	1809      	adds	r1, r1, r0
 8006b3e:	19c9      	adds	r1, r1, r7
 8006b40:	600a      	str	r2, [r1, #0]
 8006b42:	001c      	movs	r4, r3
 8006b44:	2200      	movs	r2, #0
 8006b46:	0015      	movs	r5, r2
 8006b48:	0020      	movs	r0, r4
 8006b4a:	0029      	movs	r1, r5
 8006b4c:	0004      	movs	r4, r0
 8006b4e:	0f62      	lsrs	r2, r4, #29
 8006b50:	000c      	movs	r4, r1
 8006b52:	00e4      	lsls	r4, r4, #3
 8006b54:	617c      	str	r4, [r7, #20]
 8006b56:	697c      	ldr	r4, [r7, #20]
 8006b58:	4314      	orrs	r4, r2
 8006b5a:	617c      	str	r4, [r7, #20]
 8006b5c:	0001      	movs	r1, r0
 8006b5e:	00c9      	lsls	r1, r1, #3
 8006b60:	6139      	str	r1, [r7, #16]
 8006b62:	603b      	str	r3, [r7, #0]
 8006b64:	2200      	movs	r2, #0
 8006b66:	607a      	str	r2, [r7, #4]
 8006b68:	6838      	ldr	r0, [r7, #0]
 8006b6a:	6879      	ldr	r1, [r7, #4]
 8006b6c:	0004      	movs	r4, r0
 8006b6e:	0f62      	lsrs	r2, r4, #29
 8006b70:	000c      	movs	r4, r1
 8006b72:	00e4      	lsls	r4, r4, #3
 8006b74:	60fc      	str	r4, [r7, #12]
 8006b76:	68fc      	ldr	r4, [r7, #12]
 8006b78:	4314      	orrs	r4, r2
 8006b7a:	60fc      	str	r4, [r7, #12]
 8006b7c:	0001      	movs	r1, r0
 8006b7e:	00ca      	lsls	r2, r1, #3
 8006b80:	60ba      	str	r2, [r7, #8]
 8006b82:	3307      	adds	r3, #7
 8006b84:	08db      	lsrs	r3, r3, #3
 8006b86:	00db      	lsls	r3, r3, #3
 8006b88:	4669      	mov	r1, sp
 8006b8a:	1acb      	subs	r3, r1, r3
 8006b8c:	469d      	mov	sp, r3
 8006b8e:	466b      	mov	r3, sp
 8006b90:	3300      	adds	r3, #0
 8006b92:	24c8      	movs	r4, #200	; 0xc8
 8006b94:	0064      	lsls	r4, r4, #1
 8006b96:	2218      	movs	r2, #24
 8006b98:	18a2      	adds	r2, r4, r2
 8006b9a:	19d1      	adds	r1, r2, r7
 8006b9c:	600b      	str	r3, [r1, #0]
            send_debug_logs("Module's product number is:");
 8006b9e:	4b16      	ldr	r3, [pc, #88]	; (8006bf8 <astronode_send_mpn_rr+0x148>)
 8006ba0:	0018      	movs	r0, r3
 8006ba2:	f7fb fe73 	bl	800288c <send_debug_logs>
            snprintf(product_number, answer.payload_len, "%s", answer.p_payload);
 8006ba6:	4b13      	ldr	r3, [pc, #76]	; (8006bf4 <astronode_send_mpn_rr+0x144>)
 8006ba8:	22cc      	movs	r2, #204	; 0xcc
 8006baa:	0052      	lsls	r2, r2, #1
 8006bac:	189b      	adds	r3, r3, r2
 8006bae:	2218      	movs	r2, #24
 8006bb0:	4694      	mov	ip, r2
 8006bb2:	44bc      	add	ip, r7
 8006bb4:	4463      	add	r3, ip
 8006bb6:	22c4      	movs	r2, #196	; 0xc4
 8006bb8:	5a9b      	ldrh	r3, [r3, r2]
 8006bba:	0019      	movs	r1, r3
 8006bbc:	2318      	movs	r3, #24
 8006bbe:	18fb      	adds	r3, r7, r3
 8006bc0:	3301      	adds	r3, #1
 8006bc2:	4a0e      	ldr	r2, [pc, #56]	; (8006bfc <astronode_send_mpn_rr+0x14c>)
 8006bc4:	2018      	movs	r0, #24
 8006bc6:	1820      	adds	r0, r4, r0
 8006bc8:	19c0      	adds	r0, r0, r7
 8006bca:	6800      	ldr	r0, [r0, #0]
 8006bcc:	f000 fde6 	bl	800779c <snprintf>
            send_debug_logs(product_number);
 8006bd0:	2318      	movs	r3, #24
 8006bd2:	18e3      	adds	r3, r4, r3
 8006bd4:	19db      	adds	r3, r3, r7
 8006bd6:	681b      	ldr	r3, [r3, #0]
 8006bd8:	0018      	movs	r0, r3
 8006bda:	f7fb fe57 	bl	800288c <send_debug_logs>
 8006bde:	46b5      	mov	sp, r6
        else
        {
            send_debug_logs("Failed to read module Serial Number.");
        }
    }
}
 8006be0:	e003      	b.n	8006bea <astronode_send_mpn_rr+0x13a>
            send_debug_logs("Failed to read module Serial Number.");
 8006be2:	4b07      	ldr	r3, [pc, #28]	; (8006c00 <astronode_send_mpn_rr+0x150>)
 8006be4:	0018      	movs	r0, r3
 8006be6:	f7fb fe51 	bl	800288c <send_debug_logs>
}
 8006bea:	46c0      	nop			; (mov r8, r8)
 8006bec:	46bd      	mov	sp, r7
 8006bee:	b06d      	add	sp, #436	; 0x1b4
 8006bf0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8006bf2:	46c0      	nop			; (mov r8, r8)
 8006bf4:	fffffe68 	.word	0xfffffe68
 8006bf8:	0800ce2c 	.word	0x0800ce2c
 8006bfc:	0800c964 	.word	0x0800c964
 8006c00:	0800c9a0 	.word	0x0800c9a0

08006c04 <ascii_to_value>:

//------------------------------------------------------------------------------
// Function definitions
//------------------------------------------------------------------------------
static bool ascii_to_value(const uint8_t ascii, uint8_t *p_value)
{
 8006c04:	b580      	push	{r7, lr}
 8006c06:	b082      	sub	sp, #8
 8006c08:	af00      	add	r7, sp, #0
 8006c0a:	0002      	movs	r2, r0
 8006c0c:	6039      	str	r1, [r7, #0]
 8006c0e:	1dfb      	adds	r3, r7, #7
 8006c10:	701a      	strb	r2, [r3, #0]
    if (ascii >= '0' && ascii <= '9')
 8006c12:	1dfb      	adds	r3, r7, #7
 8006c14:	781b      	ldrb	r3, [r3, #0]
 8006c16:	2b2f      	cmp	r3, #47	; 0x2f
 8006c18:	d90b      	bls.n	8006c32 <ascii_to_value+0x2e>
 8006c1a:	1dfb      	adds	r3, r7, #7
 8006c1c:	781b      	ldrb	r3, [r3, #0]
 8006c1e:	2b39      	cmp	r3, #57	; 0x39
 8006c20:	d807      	bhi.n	8006c32 <ascii_to_value+0x2e>
    {
        *p_value = ascii - '0';
 8006c22:	1dfb      	adds	r3, r7, #7
 8006c24:	781b      	ldrb	r3, [r3, #0]
 8006c26:	3b30      	subs	r3, #48	; 0x30
 8006c28:	b2da      	uxtb	r2, r3
 8006c2a:	683b      	ldr	r3, [r7, #0]
 8006c2c:	701a      	strb	r2, [r3, #0]
        return true;
 8006c2e:	2301      	movs	r3, #1
 8006c30:	e010      	b.n	8006c54 <ascii_to_value+0x50>
    }
    else if (ascii >= 'A' && ascii <= 'F')
 8006c32:	1dfb      	adds	r3, r7, #7
 8006c34:	781b      	ldrb	r3, [r3, #0]
 8006c36:	2b40      	cmp	r3, #64	; 0x40
 8006c38:	d90b      	bls.n	8006c52 <ascii_to_value+0x4e>
 8006c3a:	1dfb      	adds	r3, r7, #7
 8006c3c:	781b      	ldrb	r3, [r3, #0]
 8006c3e:	2b46      	cmp	r3, #70	; 0x46
 8006c40:	d807      	bhi.n	8006c52 <ascii_to_value+0x4e>
    {
        *p_value = ascii - 'A' + 10;
 8006c42:	1dfb      	adds	r3, r7, #7
 8006c44:	781b      	ldrb	r3, [r3, #0]
 8006c46:	3b37      	subs	r3, #55	; 0x37
 8006c48:	b2da      	uxtb	r2, r3
 8006c4a:	683b      	ldr	r3, [r7, #0]
 8006c4c:	701a      	strb	r2, [r3, #0]
        return true;
 8006c4e:	2301      	movs	r3, #1
 8006c50:	e000      	b.n	8006c54 <ascii_to_value+0x50>
    }
    else
    {
        return false;
 8006c52:	2300      	movs	r3, #0
    }
}
 8006c54:	0018      	movs	r0, r3
 8006c56:	46bd      	mov	sp, r7
 8006c58:	b002      	add	sp, #8
 8006c5a:	bd80      	pop	{r7, pc}

08006c5c <astronode_create_request_transport>:

static uint16_t astronode_create_request_transport(astronode_app_msg_t *p_source_message, uint8_t *p_destination_buffer)
{
 8006c5c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8006c5e:	b085      	sub	sp, #20
 8006c60:	af00      	add	r7, sp, #0
 8006c62:	6078      	str	r0, [r7, #4]
 8006c64:	6039      	str	r1, [r7, #0]
    uint16_t index = 0;
 8006c66:	250e      	movs	r5, #14
 8006c68:	197b      	adds	r3, r7, r5
 8006c6a:	2200      	movs	r2, #0
 8006c6c:	801a      	strh	r2, [r3, #0]

    p_destination_buffer[index++] = ASTRONODE_TRANSPORT_STX;
 8006c6e:	197b      	adds	r3, r7, r5
 8006c70:	881b      	ldrh	r3, [r3, #0]
 8006c72:	197a      	adds	r2, r7, r5
 8006c74:	1c59      	adds	r1, r3, #1
 8006c76:	8011      	strh	r1, [r2, #0]
 8006c78:	001a      	movs	r2, r3
 8006c7a:	683b      	ldr	r3, [r7, #0]
 8006c7c:	189b      	adds	r3, r3, r2
 8006c7e:	2202      	movs	r2, #2
 8006c80:	701a      	strb	r2, [r3, #0]

    uint16_t crc = calculate_crc((const uint8_t *)&p_source_message->op_code, 1, 0xFFFF);
 8006c82:	687b      	ldr	r3, [r7, #4]
 8006c84:	260a      	movs	r6, #10
 8006c86:	19bc      	adds	r4, r7, r6
 8006c88:	4a44      	ldr	r2, [pc, #272]	; (8006d9c <astronode_create_request_transport+0x140>)
 8006c8a:	2101      	movs	r1, #1
 8006c8c:	0018      	movs	r0, r3
 8006c8e:	f000 fa7d 	bl	800718c <calculate_crc>
 8006c92:	0003      	movs	r3, r0
 8006c94:	8023      	strh	r3, [r4, #0]
    crc = calculate_crc((const uint8_t *)&p_source_message->p_payload, p_source_message->payload_len, crc);
 8006c96:	687b      	ldr	r3, [r7, #4]
 8006c98:	1c58      	adds	r0, r3, #1
 8006c9a:	687b      	ldr	r3, [r7, #4]
 8006c9c:	22c4      	movs	r2, #196	; 0xc4
 8006c9e:	5a99      	ldrh	r1, [r3, r2]
 8006ca0:	19bc      	adds	r4, r7, r6
 8006ca2:	19bb      	adds	r3, r7, r6
 8006ca4:	881b      	ldrh	r3, [r3, #0]
 8006ca6:	001a      	movs	r2, r3
 8006ca8:	f000 fa70 	bl	800718c <calculate_crc>
 8006cac:	0003      	movs	r3, r0
 8006cae:	8023      	strh	r3, [r4, #0]
    crc = ((crc << 8) & 0xff00) | ((crc >> 8) & 0x00ff);
 8006cb0:	19bb      	adds	r3, r7, r6
 8006cb2:	881b      	ldrh	r3, [r3, #0]
 8006cb4:	021b      	lsls	r3, r3, #8
 8006cb6:	b21a      	sxth	r2, r3
 8006cb8:	0031      	movs	r1, r6
 8006cba:	19bb      	adds	r3, r7, r6
 8006cbc:	881b      	ldrh	r3, [r3, #0]
 8006cbe:	0a1b      	lsrs	r3, r3, #8
 8006cc0:	b29b      	uxth	r3, r3
 8006cc2:	b21b      	sxth	r3, r3
 8006cc4:	4313      	orrs	r3, r2
 8006cc6:	b21a      	sxth	r2, r3
 8006cc8:	187b      	adds	r3, r7, r1
 8006cca:	801a      	strh	r2, [r3, #0]

    uint8_to_ascii_buffer(p_source_message->op_code, &p_destination_buffer[index]);
 8006ccc:	687b      	ldr	r3, [r7, #4]
 8006cce:	7818      	ldrb	r0, [r3, #0]
 8006cd0:	197b      	adds	r3, r7, r5
 8006cd2:	881b      	ldrh	r3, [r3, #0]
 8006cd4:	683a      	ldr	r2, [r7, #0]
 8006cd6:	18d3      	adds	r3, r2, r3
 8006cd8:	0019      	movs	r1, r3
 8006cda:	f000 fbeb 	bl	80074b4 <uint8_to_ascii_buffer>
    index += 2;
 8006cde:	197b      	adds	r3, r7, r5
 8006ce0:	197a      	adds	r2, r7, r5
 8006ce2:	8812      	ldrh	r2, [r2, #0]
 8006ce4:	3202      	adds	r2, #2
 8006ce6:	801a      	strh	r2, [r3, #0]

    for (uint16_t i = 0; i < p_source_message->payload_len; i++)
 8006ce8:	230c      	movs	r3, #12
 8006cea:	18fb      	adds	r3, r7, r3
 8006cec:	2200      	movs	r2, #0
 8006cee:	801a      	strh	r2, [r3, #0]
 8006cf0:	e017      	b.n	8006d22 <astronode_create_request_transport+0xc6>
    {
        uint8_to_ascii_buffer(p_source_message->p_payload[i], &p_destination_buffer[index]);
 8006cf2:	240c      	movs	r4, #12
 8006cf4:	193b      	adds	r3, r7, r4
 8006cf6:	881b      	ldrh	r3, [r3, #0]
 8006cf8:	687a      	ldr	r2, [r7, #4]
 8006cfa:	18d3      	adds	r3, r2, r3
 8006cfc:	7858      	ldrb	r0, [r3, #1]
 8006cfe:	250e      	movs	r5, #14
 8006d00:	197b      	adds	r3, r7, r5
 8006d02:	881b      	ldrh	r3, [r3, #0]
 8006d04:	683a      	ldr	r2, [r7, #0]
 8006d06:	18d3      	adds	r3, r2, r3
 8006d08:	0019      	movs	r1, r3
 8006d0a:	f000 fbd3 	bl	80074b4 <uint8_to_ascii_buffer>
        index += 2;
 8006d0e:	197b      	adds	r3, r7, r5
 8006d10:	197a      	adds	r2, r7, r5
 8006d12:	8812      	ldrh	r2, [r2, #0]
 8006d14:	3202      	adds	r2, #2
 8006d16:	801a      	strh	r2, [r3, #0]
    for (uint16_t i = 0; i < p_source_message->payload_len; i++)
 8006d18:	193b      	adds	r3, r7, r4
 8006d1a:	881a      	ldrh	r2, [r3, #0]
 8006d1c:	193b      	adds	r3, r7, r4
 8006d1e:	3201      	adds	r2, #1
 8006d20:	801a      	strh	r2, [r3, #0]
 8006d22:	687b      	ldr	r3, [r7, #4]
 8006d24:	22c4      	movs	r2, #196	; 0xc4
 8006d26:	5a9b      	ldrh	r3, [r3, r2]
 8006d28:	220c      	movs	r2, #12
 8006d2a:	18ba      	adds	r2, r7, r2
 8006d2c:	8812      	ldrh	r2, [r2, #0]
 8006d2e:	429a      	cmp	r2, r3
 8006d30:	d3df      	bcc.n	8006cf2 <astronode_create_request_transport+0x96>
    }

    uint8_to_ascii_buffer(crc >> 8, &p_destination_buffer[index]);
 8006d32:	250a      	movs	r5, #10
 8006d34:	197b      	adds	r3, r7, r5
 8006d36:	881b      	ldrh	r3, [r3, #0]
 8006d38:	0a1b      	lsrs	r3, r3, #8
 8006d3a:	b29b      	uxth	r3, r3
 8006d3c:	b2d8      	uxtb	r0, r3
 8006d3e:	240e      	movs	r4, #14
 8006d40:	193b      	adds	r3, r7, r4
 8006d42:	881b      	ldrh	r3, [r3, #0]
 8006d44:	683a      	ldr	r2, [r7, #0]
 8006d46:	18d3      	adds	r3, r2, r3
 8006d48:	0019      	movs	r1, r3
 8006d4a:	f000 fbb3 	bl	80074b4 <uint8_to_ascii_buffer>
    index += 2;
 8006d4e:	0021      	movs	r1, r4
 8006d50:	187b      	adds	r3, r7, r1
 8006d52:	187a      	adds	r2, r7, r1
 8006d54:	8812      	ldrh	r2, [r2, #0]
 8006d56:	3202      	adds	r2, #2
 8006d58:	801a      	strh	r2, [r3, #0]
    uint8_to_ascii_buffer(crc & 0xFF, &p_destination_buffer[index]);
 8006d5a:	197b      	adds	r3, r7, r5
 8006d5c:	881b      	ldrh	r3, [r3, #0]
 8006d5e:	b2d8      	uxtb	r0, r3
 8006d60:	000c      	movs	r4, r1
 8006d62:	187b      	adds	r3, r7, r1
 8006d64:	881b      	ldrh	r3, [r3, #0]
 8006d66:	683a      	ldr	r2, [r7, #0]
 8006d68:	18d3      	adds	r3, r2, r3
 8006d6a:	0019      	movs	r1, r3
 8006d6c:	f000 fba2 	bl	80074b4 <uint8_to_ascii_buffer>
    index += 2;
 8006d70:	0020      	movs	r0, r4
 8006d72:	183b      	adds	r3, r7, r0
 8006d74:	183a      	adds	r2, r7, r0
 8006d76:	8812      	ldrh	r2, [r2, #0]
 8006d78:	3202      	adds	r2, #2
 8006d7a:	801a      	strh	r2, [r3, #0]

    p_destination_buffer[index++] = ASTRONODE_TRANSPORT_ETX;
 8006d7c:	183b      	adds	r3, r7, r0
 8006d7e:	881b      	ldrh	r3, [r3, #0]
 8006d80:	183a      	adds	r2, r7, r0
 8006d82:	1c59      	adds	r1, r3, #1
 8006d84:	8011      	strh	r1, [r2, #0]
 8006d86:	001a      	movs	r2, r3
 8006d88:	683b      	ldr	r3, [r7, #0]
 8006d8a:	189b      	adds	r3, r3, r2
 8006d8c:	2203      	movs	r2, #3
 8006d8e:	701a      	strb	r2, [r3, #0]

    return index;
 8006d90:	183b      	adds	r3, r7, r0
 8006d92:	881b      	ldrh	r3, [r3, #0]
}
 8006d94:	0018      	movs	r0, r3
 8006d96:	46bd      	mov	sp, r7
 8006d98:	b005      	add	sp, #20
 8006d9a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8006d9c:	0000ffff 	.word	0x0000ffff

08006da0 <astronode_decode_answer_transport>:

static return_status_t astronode_decode_answer_transport(uint8_t *p_source_buffer, uint16_t length_buffer, astronode_app_msg_t *p_destination_message)
{
 8006da0:	b5f0      	push	{r4, r5, r6, r7, lr}
 8006da2:	b089      	sub	sp, #36	; 0x24
 8006da4:	af00      	add	r7, sp, #0
 8006da6:	60f8      	str	r0, [r7, #12]
 8006da8:	607a      	str	r2, [r7, #4]
 8006daa:	230a      	movs	r3, #10
 8006dac:	18fb      	adds	r3, r7, r3
 8006dae:	1c0a      	adds	r2, r1, #0
 8006db0:	801a      	strh	r2, [r3, #0]
    if (p_source_buffer[0] != ASTRONODE_TRANSPORT_STX)
 8006db2:	68fb      	ldr	r3, [r7, #12]
 8006db4:	781b      	ldrb	r3, [r3, #0]
 8006db6:	2b02      	cmp	r3, #2
 8006db8:	d005      	beq.n	8006dc6 <astronode_decode_answer_transport+0x26>
    {
        send_debug_logs("ERROR : Message received from the Astronode does not start with STX character.");
 8006dba:	4bbd      	ldr	r3, [pc, #756]	; (80070b0 <astronode_decode_answer_transport+0x310>)
 8006dbc:	0018      	movs	r0, r3
 8006dbe:	f7fb fd65 	bl	800288c <send_debug_logs>
        return RS_FAILURE;
 8006dc2:	2300      	movs	r3, #0
 8006dc4:	e170      	b.n	80070a8 <astronode_decode_answer_transport+0x308>
    }

    if (length_buffer % 2 == 1 || length_buffer < 8) // 8: STX, ETX, 2 x opcode, 4 x CRC
 8006dc6:	210a      	movs	r1, #10
 8006dc8:	187b      	adds	r3, r7, r1
 8006dca:	881b      	ldrh	r3, [r3, #0]
 8006dcc:	2201      	movs	r2, #1
 8006dce:	4013      	ands	r3, r2
 8006dd0:	b29b      	uxth	r3, r3
 8006dd2:	2b00      	cmp	r3, #0
 8006dd4:	d103      	bne.n	8006dde <astronode_decode_answer_transport+0x3e>
 8006dd6:	187b      	adds	r3, r7, r1
 8006dd8:	881b      	ldrh	r3, [r3, #0]
 8006dda:	2b07      	cmp	r3, #7
 8006ddc:	d805      	bhi.n	8006dea <astronode_decode_answer_transport+0x4a>
    {
        send_debug_logs("ERROR : Message received from the Astronode is missing at least one character.");
 8006dde:	4bb5      	ldr	r3, [pc, #724]	; (80070b4 <astronode_decode_answer_transport+0x314>)
 8006de0:	0018      	movs	r0, r3
 8006de2:	f7fb fd53 	bl	800288c <send_debug_logs>
        return RS_FAILURE;
 8006de6:	2300      	movs	r3, #0
 8006de8:	e15e      	b.n	80070a8 <astronode_decode_answer_transport+0x308>
    }

    p_destination_message->payload_len = (length_buffer - 8) / 2;
 8006dea:	230a      	movs	r3, #10
 8006dec:	18fb      	adds	r3, r7, r3
 8006dee:	881b      	ldrh	r3, [r3, #0]
 8006df0:	3b08      	subs	r3, #8
 8006df2:	2b00      	cmp	r3, #0
 8006df4:	da00      	bge.n	8006df8 <astronode_decode_answer_transport+0x58>
 8006df6:	3301      	adds	r3, #1
 8006df8:	105b      	asrs	r3, r3, #1
 8006dfa:	b299      	uxth	r1, r3
 8006dfc:	687b      	ldr	r3, [r7, #4]
 8006dfe:	22c4      	movs	r2, #196	; 0xc4
 8006e00:	5299      	strh	r1, [r3, r2]

    if (p_source_buffer[length_buffer - 1] != ASTRONODE_TRANSPORT_ETX)
 8006e02:	230a      	movs	r3, #10
 8006e04:	18fb      	adds	r3, r7, r3
 8006e06:	881b      	ldrh	r3, [r3, #0]
 8006e08:	3b01      	subs	r3, #1
 8006e0a:	68fa      	ldr	r2, [r7, #12]
 8006e0c:	18d3      	adds	r3, r2, r3
 8006e0e:	781b      	ldrb	r3, [r3, #0]
 8006e10:	2b03      	cmp	r3, #3
 8006e12:	d005      	beq.n	8006e20 <astronode_decode_answer_transport+0x80>
    {
        send_debug_logs("ERROR : Message received from the Astronode does not end with ETX character.");
 8006e14:	4ba8      	ldr	r3, [pc, #672]	; (80070b8 <astronode_decode_answer_transport+0x318>)
 8006e16:	0018      	movs	r0, r3
 8006e18:	f7fb fd38 	bl	800288c <send_debug_logs>
        return RS_FAILURE;
 8006e1c:	2300      	movs	r3, #0
 8006e1e:	e143      	b.n	80070a8 <astronode_decode_answer_transport+0x308>
    }

    uint8_t nibble_high = 0;
 8006e20:	2117      	movs	r1, #23
 8006e22:	187b      	adds	r3, r7, r1
 8006e24:	2200      	movs	r2, #0
 8006e26:	701a      	strb	r2, [r3, #0]
    uint8_t nibble_low = 0;
 8006e28:	2416      	movs	r4, #22
 8006e2a:	193b      	adds	r3, r7, r4
 8006e2c:	2200      	movs	r2, #0
 8006e2e:	701a      	strb	r2, [r3, #0]

    // Op code
    if (ascii_to_value(p_source_buffer[1], &nibble_high) == false
 8006e30:	68fb      	ldr	r3, [r7, #12]
 8006e32:	3301      	adds	r3, #1
 8006e34:	781b      	ldrb	r3, [r3, #0]
 8006e36:	187a      	adds	r2, r7, r1
 8006e38:	0011      	movs	r1, r2
 8006e3a:	0018      	movs	r0, r3
 8006e3c:	f7ff fee2 	bl	8006c04 <ascii_to_value>
 8006e40:	0003      	movs	r3, r0
 8006e42:	001a      	movs	r2, r3
 8006e44:	2301      	movs	r3, #1
 8006e46:	4053      	eors	r3, r2
 8006e48:	b2db      	uxtb	r3, r3
 8006e4a:	2b00      	cmp	r3, #0
 8006e4c:	d10e      	bne.n	8006e6c <astronode_decode_answer_transport+0xcc>
        || ascii_to_value(p_source_buffer[2], &nibble_low) == false)
 8006e4e:	68fb      	ldr	r3, [r7, #12]
 8006e50:	3302      	adds	r3, #2
 8006e52:	781b      	ldrb	r3, [r3, #0]
 8006e54:	193a      	adds	r2, r7, r4
 8006e56:	0011      	movs	r1, r2
 8006e58:	0018      	movs	r0, r3
 8006e5a:	f7ff fed3 	bl	8006c04 <ascii_to_value>
 8006e5e:	0003      	movs	r3, r0
 8006e60:	001a      	movs	r2, r3
 8006e62:	2301      	movs	r3, #1
 8006e64:	4053      	eors	r3, r2
 8006e66:	b2db      	uxtb	r3, r3
 8006e68:	2b00      	cmp	r3, #0
 8006e6a:	d005      	beq.n	8006e78 <astronode_decode_answer_transport+0xd8>
    {
        send_debug_logs("ERROR : Message received from the Astronode contains a non-ASCII character.");
 8006e6c:	4b93      	ldr	r3, [pc, #588]	; (80070bc <astronode_decode_answer_transport+0x31c>)
 8006e6e:	0018      	movs	r0, r3
 8006e70:	f7fb fd0c 	bl	800288c <send_debug_logs>
        return RS_FAILURE;
 8006e74:	2300      	movs	r3, #0
 8006e76:	e117      	b.n	80070a8 <astronode_decode_answer_transport+0x308>
    }

    p_destination_message->op_code = (nibble_high << 4) + nibble_low;
 8006e78:	2317      	movs	r3, #23
 8006e7a:	18fb      	adds	r3, r7, r3
 8006e7c:	781b      	ldrb	r3, [r3, #0]
 8006e7e:	011b      	lsls	r3, r3, #4
 8006e80:	b2da      	uxtb	r2, r3
 8006e82:	2316      	movs	r3, #22
 8006e84:	18fb      	adds	r3, r7, r3
 8006e86:	781b      	ldrb	r3, [r3, #0]
 8006e88:	18d3      	adds	r3, r2, r3
 8006e8a:	b2da      	uxtb	r2, r3
 8006e8c:	687b      	ldr	r3, [r7, #4]
 8006e8e:	701a      	strb	r2, [r3, #0]

    // Payload
    for (uint16_t i = 3, j = 0; i < length_buffer - 5; i += 2)
 8006e90:	231e      	movs	r3, #30
 8006e92:	18fb      	adds	r3, r7, r3
 8006e94:	2203      	movs	r2, #3
 8006e96:	801a      	strh	r2, [r3, #0]
 8006e98:	231c      	movs	r3, #28
 8006e9a:	18fb      	adds	r3, r7, r3
 8006e9c:	2200      	movs	r2, #0
 8006e9e:	801a      	strh	r2, [r3, #0]
 8006ea0:	e045      	b.n	8006f2e <astronode_decode_answer_transport+0x18e>
    {
        if (ascii_to_value(p_source_buffer[i], &nibble_high) == false
 8006ea2:	241e      	movs	r4, #30
 8006ea4:	193b      	adds	r3, r7, r4
 8006ea6:	881b      	ldrh	r3, [r3, #0]
 8006ea8:	68fa      	ldr	r2, [r7, #12]
 8006eaa:	18d3      	adds	r3, r2, r3
 8006eac:	781b      	ldrb	r3, [r3, #0]
 8006eae:	2217      	movs	r2, #23
 8006eb0:	18ba      	adds	r2, r7, r2
 8006eb2:	0011      	movs	r1, r2
 8006eb4:	0018      	movs	r0, r3
 8006eb6:	f7ff fea5 	bl	8006c04 <ascii_to_value>
 8006eba:	0003      	movs	r3, r0
 8006ebc:	001a      	movs	r2, r3
 8006ebe:	2301      	movs	r3, #1
 8006ec0:	4053      	eors	r3, r2
 8006ec2:	b2db      	uxtb	r3, r3
 8006ec4:	2b00      	cmp	r3, #0
 8006ec6:	d112      	bne.n	8006eee <astronode_decode_answer_transport+0x14e>
            || ascii_to_value(p_source_buffer[i + 1], &nibble_low) == false)
 8006ec8:	193b      	adds	r3, r7, r4
 8006eca:	881b      	ldrh	r3, [r3, #0]
 8006ecc:	3301      	adds	r3, #1
 8006ece:	68fa      	ldr	r2, [r7, #12]
 8006ed0:	18d3      	adds	r3, r2, r3
 8006ed2:	781b      	ldrb	r3, [r3, #0]
 8006ed4:	2216      	movs	r2, #22
 8006ed6:	18ba      	adds	r2, r7, r2
 8006ed8:	0011      	movs	r1, r2
 8006eda:	0018      	movs	r0, r3
 8006edc:	f7ff fe92 	bl	8006c04 <ascii_to_value>
 8006ee0:	0003      	movs	r3, r0
 8006ee2:	001a      	movs	r2, r3
 8006ee4:	2301      	movs	r3, #1
 8006ee6:	4053      	eors	r3, r2
 8006ee8:	b2db      	uxtb	r3, r3
 8006eea:	2b00      	cmp	r3, #0
 8006eec:	d005      	beq.n	8006efa <astronode_decode_answer_transport+0x15a>
        {
            send_debug_logs("ERROR : Message received from the Astronode contains a non-ASCII character.");
 8006eee:	4b73      	ldr	r3, [pc, #460]	; (80070bc <astronode_decode_answer_transport+0x31c>)
 8006ef0:	0018      	movs	r0, r3
 8006ef2:	f7fb fccb 	bl	800288c <send_debug_logs>
            return RS_FAILURE;
 8006ef6:	2300      	movs	r3, #0
 8006ef8:	e0d6      	b.n	80070a8 <astronode_decode_answer_transport+0x308>
        }

        p_destination_message->p_payload[j++] = (nibble_high << 4) + nibble_low;
 8006efa:	2317      	movs	r3, #23
 8006efc:	18fb      	adds	r3, r7, r3
 8006efe:	781b      	ldrb	r3, [r3, #0]
 8006f00:	011b      	lsls	r3, r3, #4
 8006f02:	b2d9      	uxtb	r1, r3
 8006f04:	2316      	movs	r3, #22
 8006f06:	18fb      	adds	r3, r7, r3
 8006f08:	781a      	ldrb	r2, [r3, #0]
 8006f0a:	201c      	movs	r0, #28
 8006f0c:	183b      	adds	r3, r7, r0
 8006f0e:	881b      	ldrh	r3, [r3, #0]
 8006f10:	1838      	adds	r0, r7, r0
 8006f12:	1c5c      	adds	r4, r3, #1
 8006f14:	8004      	strh	r4, [r0, #0]
 8006f16:	0018      	movs	r0, r3
 8006f18:	188b      	adds	r3, r1, r2
 8006f1a:	b2da      	uxtb	r2, r3
 8006f1c:	687b      	ldr	r3, [r7, #4]
 8006f1e:	181b      	adds	r3, r3, r0
 8006f20:	705a      	strb	r2, [r3, #1]
    for (uint16_t i = 3, j = 0; i < length_buffer - 5; i += 2)
 8006f22:	221e      	movs	r2, #30
 8006f24:	18bb      	adds	r3, r7, r2
 8006f26:	18ba      	adds	r2, r7, r2
 8006f28:	8812      	ldrh	r2, [r2, #0]
 8006f2a:	3202      	adds	r2, #2
 8006f2c:	801a      	strh	r2, [r3, #0]
 8006f2e:	231e      	movs	r3, #30
 8006f30:	18fb      	adds	r3, r7, r3
 8006f32:	881a      	ldrh	r2, [r3, #0]
 8006f34:	260a      	movs	r6, #10
 8006f36:	19bb      	adds	r3, r7, r6
 8006f38:	881b      	ldrh	r3, [r3, #0]
 8006f3a:	3b05      	subs	r3, #5
 8006f3c:	429a      	cmp	r2, r3
 8006f3e:	dbb0      	blt.n	8006ea2 <astronode_decode_answer_transport+0x102>
    }

    // CRC
    uint16_t crc_calculated = calculate_crc((const uint8_t *)&p_destination_message->op_code, 1, 0xFFFF);
 8006f40:	687b      	ldr	r3, [r7, #4]
 8006f42:	251a      	movs	r5, #26
 8006f44:	197c      	adds	r4, r7, r5
 8006f46:	4a5e      	ldr	r2, [pc, #376]	; (80070c0 <astronode_decode_answer_transport+0x320>)
 8006f48:	2101      	movs	r1, #1
 8006f4a:	0018      	movs	r0, r3
 8006f4c:	f000 f91e 	bl	800718c <calculate_crc>
 8006f50:	0003      	movs	r3, r0
 8006f52:	8023      	strh	r3, [r4, #0]
    crc_calculated = calculate_crc((const uint8_t *)&p_destination_message->p_payload, p_destination_message->payload_len, crc_calculated);
 8006f54:	687b      	ldr	r3, [r7, #4]
 8006f56:	1c58      	adds	r0, r3, #1
 8006f58:	687b      	ldr	r3, [r7, #4]
 8006f5a:	22c4      	movs	r2, #196	; 0xc4
 8006f5c:	5a99      	ldrh	r1, [r3, r2]
 8006f5e:	197c      	adds	r4, r7, r5
 8006f60:	197b      	adds	r3, r7, r5
 8006f62:	881b      	ldrh	r3, [r3, #0]
 8006f64:	001a      	movs	r2, r3
 8006f66:	f000 f911 	bl	800718c <calculate_crc>
 8006f6a:	0003      	movs	r3, r0
 8006f6c:	8023      	strh	r3, [r4, #0]
    crc_calculated = ((crc_calculated << 8) & 0xff00) | ((crc_calculated >> 8) & 0x00ff);
 8006f6e:	197b      	adds	r3, r7, r5
 8006f70:	881b      	ldrh	r3, [r3, #0]
 8006f72:	021b      	lsls	r3, r3, #8
 8006f74:	b21a      	sxth	r2, r3
 8006f76:	0029      	movs	r1, r5
 8006f78:	197b      	adds	r3, r7, r5
 8006f7a:	881b      	ldrh	r3, [r3, #0]
 8006f7c:	0a1b      	lsrs	r3, r3, #8
 8006f7e:	b29b      	uxth	r3, r3
 8006f80:	b21b      	sxth	r3, r3
 8006f82:	4313      	orrs	r3, r2
 8006f84:	b21a      	sxth	r2, r3
 8006f86:	187b      	adds	r3, r7, r1
 8006f88:	801a      	strh	r2, [r3, #0]


    if (ascii_to_value(p_source_buffer[length_buffer - 5], &nibble_high) == false
 8006f8a:	19bb      	adds	r3, r7, r6
 8006f8c:	881b      	ldrh	r3, [r3, #0]
 8006f8e:	3b05      	subs	r3, #5
 8006f90:	68fa      	ldr	r2, [r7, #12]
 8006f92:	18d3      	adds	r3, r2, r3
 8006f94:	781b      	ldrb	r3, [r3, #0]
 8006f96:	2217      	movs	r2, #23
 8006f98:	18ba      	adds	r2, r7, r2
 8006f9a:	0011      	movs	r1, r2
 8006f9c:	0018      	movs	r0, r3
 8006f9e:	f7ff fe31 	bl	8006c04 <ascii_to_value>
 8006fa2:	0003      	movs	r3, r0
 8006fa4:	001a      	movs	r2, r3
 8006fa6:	2301      	movs	r3, #1
 8006fa8:	4053      	eors	r3, r2
 8006faa:	b2db      	uxtb	r3, r3
 8006fac:	2b00      	cmp	r3, #0
 8006fae:	d112      	bne.n	8006fd6 <astronode_decode_answer_transport+0x236>
        || ascii_to_value(p_source_buffer[length_buffer - 4], &nibble_low) == false)
 8006fb0:	19bb      	adds	r3, r7, r6
 8006fb2:	881b      	ldrh	r3, [r3, #0]
 8006fb4:	3b04      	subs	r3, #4
 8006fb6:	68fa      	ldr	r2, [r7, #12]
 8006fb8:	18d3      	adds	r3, r2, r3
 8006fba:	781b      	ldrb	r3, [r3, #0]
 8006fbc:	2216      	movs	r2, #22
 8006fbe:	18ba      	adds	r2, r7, r2
 8006fc0:	0011      	movs	r1, r2
 8006fc2:	0018      	movs	r0, r3
 8006fc4:	f7ff fe1e 	bl	8006c04 <ascii_to_value>
 8006fc8:	0003      	movs	r3, r0
 8006fca:	001a      	movs	r2, r3
 8006fcc:	2301      	movs	r3, #1
 8006fce:	4053      	eors	r3, r2
 8006fd0:	b2db      	uxtb	r3, r3
 8006fd2:	2b00      	cmp	r3, #0
 8006fd4:	d005      	beq.n	8006fe2 <astronode_decode_answer_transport+0x242>
    {
        send_debug_logs("ERROR : Message received from the Astronode contains a non-ASCII character.");
 8006fd6:	4b39      	ldr	r3, [pc, #228]	; (80070bc <astronode_decode_answer_transport+0x31c>)
 8006fd8:	0018      	movs	r0, r3
 8006fda:	f7fb fc57 	bl	800288c <send_debug_logs>
        return RS_FAILURE;
 8006fde:	2300      	movs	r3, #0
 8006fe0:	e062      	b.n	80070a8 <astronode_decode_answer_transport+0x308>
    }

    uint16_t crc_received = (nibble_high << 12) + (nibble_low << 8);
 8006fe2:	2017      	movs	r0, #23
 8006fe4:	183b      	adds	r3, r7, r0
 8006fe6:	781b      	ldrb	r3, [r3, #0]
 8006fe8:	b29b      	uxth	r3, r3
 8006fea:	031b      	lsls	r3, r3, #12
 8006fec:	b299      	uxth	r1, r3
 8006fee:	2416      	movs	r4, #22
 8006ff0:	193b      	adds	r3, r7, r4
 8006ff2:	781b      	ldrb	r3, [r3, #0]
 8006ff4:	b29b      	uxth	r3, r3
 8006ff6:	021b      	lsls	r3, r3, #8
 8006ff8:	b29a      	uxth	r2, r3
 8006ffa:	2318      	movs	r3, #24
 8006ffc:	18fb      	adds	r3, r7, r3
 8006ffe:	188a      	adds	r2, r1, r2
 8007000:	801a      	strh	r2, [r3, #0]

    if (ascii_to_value(p_source_buffer[length_buffer - 3], &nibble_high) == false
 8007002:	250a      	movs	r5, #10
 8007004:	197b      	adds	r3, r7, r5
 8007006:	881b      	ldrh	r3, [r3, #0]
 8007008:	3b03      	subs	r3, #3
 800700a:	68fa      	ldr	r2, [r7, #12]
 800700c:	18d3      	adds	r3, r2, r3
 800700e:	781b      	ldrb	r3, [r3, #0]
 8007010:	183a      	adds	r2, r7, r0
 8007012:	0011      	movs	r1, r2
 8007014:	0018      	movs	r0, r3
 8007016:	f7ff fdf5 	bl	8006c04 <ascii_to_value>
 800701a:	0003      	movs	r3, r0
 800701c:	001a      	movs	r2, r3
 800701e:	2301      	movs	r3, #1
 8007020:	4053      	eors	r3, r2
 8007022:	b2db      	uxtb	r3, r3
 8007024:	2b00      	cmp	r3, #0
 8007026:	d111      	bne.n	800704c <astronode_decode_answer_transport+0x2ac>
        || ascii_to_value(p_source_buffer[length_buffer - 2], &nibble_low) == false)
 8007028:	197b      	adds	r3, r7, r5
 800702a:	881b      	ldrh	r3, [r3, #0]
 800702c:	3b02      	subs	r3, #2
 800702e:	68fa      	ldr	r2, [r7, #12]
 8007030:	18d3      	adds	r3, r2, r3
 8007032:	781b      	ldrb	r3, [r3, #0]
 8007034:	193a      	adds	r2, r7, r4
 8007036:	0011      	movs	r1, r2
 8007038:	0018      	movs	r0, r3
 800703a:	f7ff fde3 	bl	8006c04 <ascii_to_value>
 800703e:	0003      	movs	r3, r0
 8007040:	001a      	movs	r2, r3
 8007042:	2301      	movs	r3, #1
 8007044:	4053      	eors	r3, r2
 8007046:	b2db      	uxtb	r3, r3
 8007048:	2b00      	cmp	r3, #0
 800704a:	d005      	beq.n	8007058 <astronode_decode_answer_transport+0x2b8>
    {
        send_debug_logs("ERROR : Message received from the Astronode contains a non-ASCII character.");
 800704c:	4b1b      	ldr	r3, [pc, #108]	; (80070bc <astronode_decode_answer_transport+0x31c>)
 800704e:	0018      	movs	r0, r3
 8007050:	f7fb fc1c 	bl	800288c <send_debug_logs>
        return RS_FAILURE;
 8007054:	2300      	movs	r3, #0
 8007056:	e027      	b.n	80070a8 <astronode_decode_answer_transport+0x308>
    }

    crc_received += (nibble_high << 4) + nibble_low;
 8007058:	2317      	movs	r3, #23
 800705a:	18fb      	adds	r3, r7, r3
 800705c:	781b      	ldrb	r3, [r3, #0]
 800705e:	b29b      	uxth	r3, r3
 8007060:	011b      	lsls	r3, r3, #4
 8007062:	b29a      	uxth	r2, r3
 8007064:	2316      	movs	r3, #22
 8007066:	18fb      	adds	r3, r7, r3
 8007068:	781b      	ldrb	r3, [r3, #0]
 800706a:	b29b      	uxth	r3, r3
 800706c:	18d3      	adds	r3, r2, r3
 800706e:	b299      	uxth	r1, r3
 8007070:	2018      	movs	r0, #24
 8007072:	183b      	adds	r3, r7, r0
 8007074:	183a      	adds	r2, r7, r0
 8007076:	8812      	ldrh	r2, [r2, #0]
 8007078:	188a      	adds	r2, r1, r2
 800707a:	801a      	strh	r2, [r3, #0]

    if (crc_received != crc_calculated)
 800707c:	183a      	adds	r2, r7, r0
 800707e:	231a      	movs	r3, #26
 8007080:	18fb      	adds	r3, r7, r3
 8007082:	8812      	ldrh	r2, [r2, #0]
 8007084:	881b      	ldrh	r3, [r3, #0]
 8007086:	429a      	cmp	r2, r3
 8007088:	d005      	beq.n	8007096 <astronode_decode_answer_transport+0x2f6>
    {
        send_debug_logs("ERROR : CRC sent by the Astronode does not match the expected CRC");
 800708a:	4b0e      	ldr	r3, [pc, #56]	; (80070c4 <astronode_decode_answer_transport+0x324>)
 800708c:	0018      	movs	r0, r3
 800708e:	f7fb fbfd 	bl	800288c <send_debug_logs>
        return RS_FAILURE;
 8007092:	2300      	movs	r3, #0
 8007094:	e008      	b.n	80070a8 <astronode_decode_answer_transport+0x308>
    }

    if (p_destination_message->op_code == ASTRONODE_OP_CODE_ERROR)
 8007096:	687b      	ldr	r3, [r7, #4]
 8007098:	781b      	ldrb	r3, [r3, #0]
 800709a:	2bff      	cmp	r3, #255	; 0xff
 800709c:	d103      	bne.n	80070a6 <astronode_decode_answer_transport+0x306>
    {
        check_for_error(p_destination_message);
 800709e:	687b      	ldr	r3, [r7, #4]
 80070a0:	0018      	movs	r0, r3
 80070a2:	f000 f8c3 	bl	800722c <check_for_error>
    }

    return RS_SUCCESS;
 80070a6:	2301      	movs	r3, #1
}
 80070a8:	0018      	movs	r0, r3
 80070aa:	46bd      	mov	sp, r7
 80070ac:	b009      	add	sp, #36	; 0x24
 80070ae:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80070b0:	0800d410 	.word	0x0800d410
 80070b4:	0800d460 	.word	0x0800d460
 80070b8:	0800d4b0 	.word	0x0800d4b0
 80070bc:	0800d500 	.word	0x0800d500
 80070c0:	0000ffff 	.word	0x0000ffff
 80070c4:	0800d54c 	.word	0x0800d54c

080070c8 <astronode_transport_send_receive>:

return_status_t astronode_transport_send_receive(astronode_app_msg_t *p_request, astronode_app_msg_t *p_answer)
{
 80070c8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80070ca:	4c2b      	ldr	r4, [pc, #172]	; (8007178 <astronode_transport_send_receive+0xb0>)
 80070cc:	44a5      	add	sp, r4
 80070ce:	af00      	add	r7, sp, #0
 80070d0:	6078      	str	r0, [r7, #4]
 80070d2:	6039      	str	r1, [r7, #0]
    uint8_t request_transport[ASTRONODE_TRANSPORT_MSG_MAX_LEN_BYTES] = {0};
 80070d4:	4b29      	ldr	r3, [pc, #164]	; (800717c <astronode_transport_send_receive+0xb4>)
 80070d6:	25ca      	movs	r5, #202	; 0xca
 80070d8:	00ad      	lsls	r5, r5, #2
 80070da:	195b      	adds	r3, r3, r5
 80070dc:	19db      	adds	r3, r3, r7
 80070de:	2200      	movs	r2, #0
 80070e0:	601a      	str	r2, [r3, #0]
 80070e2:	3304      	adds	r3, #4
 80070e4:	22c4      	movs	r2, #196	; 0xc4
 80070e6:	0052      	lsls	r2, r2, #1
 80070e8:	2100      	movs	r1, #0
 80070ea:	0018      	movs	r0, r3
 80070ec:	f000 fbf6 	bl	80078dc <memset>
    uint8_t answer_transport[ASTRONODE_TRANSPORT_MSG_MAX_LEN_BYTES] = {0};
 80070f0:	4b23      	ldr	r3, [pc, #140]	; (8007180 <astronode_transport_send_receive+0xb8>)
 80070f2:	195b      	adds	r3, r3, r5
 80070f4:	19db      	adds	r3, r3, r7
 80070f6:	2200      	movs	r2, #0
 80070f8:	601a      	str	r2, [r3, #0]
 80070fa:	3304      	adds	r3, #4
 80070fc:	22c4      	movs	r2, #196	; 0xc4
 80070fe:	0052      	lsls	r2, r2, #1
 8007100:	2100      	movs	r1, #0
 8007102:	0018      	movs	r0, r3
 8007104:	f000 fbea 	bl	80078dc <memset>
    uint16_t answer_length =  0;
 8007108:	4b1e      	ldr	r3, [pc, #120]	; (8007184 <astronode_transport_send_receive+0xbc>)
 800710a:	195b      	adds	r3, r3, r5
 800710c:	19db      	adds	r3, r3, r7
 800710e:	2200      	movs	r2, #0
 8007110:	801a      	strh	r2, [r3, #0]

    uint16_t request_length = astronode_create_request_transport(p_request, request_transport);
 8007112:	4e1d      	ldr	r6, [pc, #116]	; (8007188 <astronode_transport_send_receive+0xc0>)
 8007114:	19bc      	adds	r4, r7, r6
 8007116:	23cc      	movs	r3, #204	; 0xcc
 8007118:	005b      	lsls	r3, r3, #1
 800711a:	18fa      	adds	r2, r7, r3
 800711c:	687b      	ldr	r3, [r7, #4]
 800711e:	0011      	movs	r1, r2
 8007120:	0018      	movs	r0, r3
 8007122:	f7ff fd9b 	bl	8006c5c <astronode_create_request_transport>
 8007126:	0003      	movs	r3, r0
 8007128:	8023      	strh	r3, [r4, #0]

    send_astronode_request(request_transport, request_length);
 800712a:	19bb      	adds	r3, r7, r6
 800712c:	881a      	ldrh	r2, [r3, #0]
 800712e:	23cc      	movs	r3, #204	; 0xcc
 8007130:	005b      	lsls	r3, r3, #1
 8007132:	18fb      	adds	r3, r7, r3
 8007134:	0011      	movs	r1, r2
 8007136:	0018      	movs	r0, r3
 8007138:	f7fb fbf2 	bl	8002920 <send_astronode_request>
    if(receive_astronode_answer(answer_transport, &answer_length) == RS_SUCCESS)
 800713c:	230a      	movs	r3, #10
 800713e:	18fa      	adds	r2, r7, r3
 8007140:	240c      	movs	r4, #12
 8007142:	193b      	adds	r3, r7, r4
 8007144:	0011      	movs	r1, r2
 8007146:	0018      	movs	r0, r3
 8007148:	f000 f92c 	bl	80073a4 <receive_astronode_answer>
 800714c:	0003      	movs	r3, r0
 800714e:	2b01      	cmp	r3, #1
 8007150:	d10a      	bne.n	8007168 <astronode_transport_send_receive+0xa0>
    {
        return astronode_decode_answer_transport(answer_transport, answer_length, p_answer);
 8007152:	4b0c      	ldr	r3, [pc, #48]	; (8007184 <astronode_transport_send_receive+0xbc>)
 8007154:	195b      	adds	r3, r3, r5
 8007156:	19db      	adds	r3, r3, r7
 8007158:	8819      	ldrh	r1, [r3, #0]
 800715a:	683a      	ldr	r2, [r7, #0]
 800715c:	193b      	adds	r3, r7, r4
 800715e:	0018      	movs	r0, r3
 8007160:	f7ff fe1e 	bl	8006da0 <astronode_decode_answer_transport>
 8007164:	0003      	movs	r3, r0
 8007166:	e000      	b.n	800716a <astronode_transport_send_receive+0xa2>
    }
    else
    {
        return RS_FAILURE;
 8007168:	2300      	movs	r3, #0
    }
}
 800716a:	0018      	movs	r0, r3
 800716c:	46bd      	mov	sp, r7
 800716e:	23cb      	movs	r3, #203	; 0xcb
 8007170:	009b      	lsls	r3, r3, #2
 8007172:	449d      	add	sp, r3
 8007174:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8007176:	46c0      	nop			; (mov r8, r8)
 8007178:	fffffcd4 	.word	0xfffffcd4
 800717c:	fffffe70 	.word	0xfffffe70
 8007180:	fffffce4 	.word	0xfffffce4
 8007184:	fffffce2 	.word	0xfffffce2
 8007188:	00000326 	.word	0x00000326

0800718c <calculate_crc>:

static uint16_t calculate_crc(const uint8_t *p_data, uint16_t data_len, uint16_t init_value)
{
 800718c:	b590      	push	{r4, r7, lr}
 800718e:	b085      	sub	sp, #20
 8007190:	af00      	add	r7, sp, #0
 8007192:	6078      	str	r0, [r7, #4]
 8007194:	0008      	movs	r0, r1
 8007196:	0011      	movs	r1, r2
 8007198:	1cbb      	adds	r3, r7, #2
 800719a:	1c02      	adds	r2, r0, #0
 800719c:	801a      	strh	r2, [r3, #0]
 800719e:	003b      	movs	r3, r7
 80071a0:	1c0a      	adds	r2, r1, #0
 80071a2:	801a      	strh	r2, [r3, #0]
    uint16_t crc = init_value;
 80071a4:	230e      	movs	r3, #14
 80071a6:	18fb      	adds	r3, r7, r3
 80071a8:	003a      	movs	r2, r7
 80071aa:	8812      	ldrh	r2, [r2, #0]
 80071ac:	801a      	strh	r2, [r3, #0]

    while (data_len--)
 80071ae:	e02e      	b.n	800720e <calculate_crc+0x82>
    {
        uint16_t x = crc >> 8 ^ *p_data++;
 80071b0:	240e      	movs	r4, #14
 80071b2:	193b      	adds	r3, r7, r4
 80071b4:	881b      	ldrh	r3, [r3, #0]
 80071b6:	0a1b      	lsrs	r3, r3, #8
 80071b8:	b299      	uxth	r1, r3
 80071ba:	687b      	ldr	r3, [r7, #4]
 80071bc:	1c5a      	adds	r2, r3, #1
 80071be:	607a      	str	r2, [r7, #4]
 80071c0:	781b      	ldrb	r3, [r3, #0]
 80071c2:	b29a      	uxth	r2, r3
 80071c4:	200c      	movs	r0, #12
 80071c6:	183b      	adds	r3, r7, r0
 80071c8:	404a      	eors	r2, r1
 80071ca:	801a      	strh	r2, [r3, #0]
        x ^= x >> 4;
 80071cc:	183b      	adds	r3, r7, r0
 80071ce:	881b      	ldrh	r3, [r3, #0]
 80071d0:	091b      	lsrs	r3, r3, #4
 80071d2:	b299      	uxth	r1, r3
 80071d4:	183b      	adds	r3, r7, r0
 80071d6:	183a      	adds	r2, r7, r0
 80071d8:	8812      	ldrh	r2, [r2, #0]
 80071da:	404a      	eors	r2, r1
 80071dc:	801a      	strh	r2, [r3, #0]
        crc = (crc << 8) ^ (x << 12) ^ (x << 5) ^ (x);
 80071de:	0021      	movs	r1, r4
 80071e0:	187b      	adds	r3, r7, r1
 80071e2:	881b      	ldrh	r3, [r3, #0]
 80071e4:	021b      	lsls	r3, r3, #8
 80071e6:	b21a      	sxth	r2, r3
 80071e8:	183b      	adds	r3, r7, r0
 80071ea:	881b      	ldrh	r3, [r3, #0]
 80071ec:	031b      	lsls	r3, r3, #12
 80071ee:	b21b      	sxth	r3, r3
 80071f0:	4053      	eors	r3, r2
 80071f2:	b21a      	sxth	r2, r3
 80071f4:	183b      	adds	r3, r7, r0
 80071f6:	881b      	ldrh	r3, [r3, #0]
 80071f8:	015b      	lsls	r3, r3, #5
 80071fa:	b21b      	sxth	r3, r3
 80071fc:	4053      	eors	r3, r2
 80071fe:	b21a      	sxth	r2, r3
 8007200:	183b      	adds	r3, r7, r0
 8007202:	2000      	movs	r0, #0
 8007204:	5e1b      	ldrsh	r3, [r3, r0]
 8007206:	4053      	eors	r3, r2
 8007208:	b21a      	sxth	r2, r3
 800720a:	187b      	adds	r3, r7, r1
 800720c:	801a      	strh	r2, [r3, #0]
    while (data_len--)
 800720e:	1cbb      	adds	r3, r7, #2
 8007210:	881b      	ldrh	r3, [r3, #0]
 8007212:	1cba      	adds	r2, r7, #2
 8007214:	1e59      	subs	r1, r3, #1
 8007216:	8011      	strh	r1, [r2, #0]
 8007218:	2b00      	cmp	r3, #0
 800721a:	d1c9      	bne.n	80071b0 <calculate_crc+0x24>
    }
    return crc;
 800721c:	230e      	movs	r3, #14
 800721e:	18fb      	adds	r3, r7, r3
 8007220:	881b      	ldrh	r3, [r3, #0]
}
 8007222:	0018      	movs	r0, r3
 8007224:	46bd      	mov	sp, r7
 8007226:	b005      	add	sp, #20
 8007228:	bd90      	pop	{r4, r7, pc}
	...

0800722c <check_for_error>:

static void check_for_error(astronode_app_msg_t *p_answer)
{
 800722c:	b580      	push	{r7, lr}
 800722e:	b084      	sub	sp, #16
 8007230:	af00      	add	r7, sp, #0
 8007232:	6078      	str	r0, [r7, #4]
    uint16_t error_code = p_answer->p_payload[0] + (p_answer->p_payload[1] << 8);
 8007234:	687b      	ldr	r3, [r7, #4]
 8007236:	785b      	ldrb	r3, [r3, #1]
 8007238:	b299      	uxth	r1, r3
 800723a:	687b      	ldr	r3, [r7, #4]
 800723c:	789b      	ldrb	r3, [r3, #2]
 800723e:	b29b      	uxth	r3, r3
 8007240:	021b      	lsls	r3, r3, #8
 8007242:	b29a      	uxth	r2, r3
 8007244:	200e      	movs	r0, #14
 8007246:	183b      	adds	r3, r7, r0
 8007248:	188a      	adds	r2, r1, r2
 800724a:	801a      	strh	r2, [r3, #0]

    switch (error_code)
 800724c:	183b      	adds	r3, r7, r0
 800724e:	881b      	ldrh	r3, [r3, #0]
 8007250:	4a40      	ldr	r2, [pc, #256]	; (8007354 <check_for_error+0x128>)
 8007252:	4293      	cmp	r3, r2
 8007254:	d100      	bne.n	8007258 <check_for_error+0x2c>
 8007256:	e06f      	b.n	8007338 <check_for_error+0x10c>
 8007258:	4a3e      	ldr	r2, [pc, #248]	; (8007354 <check_for_error+0x128>)
 800725a:	4293      	cmp	r3, r2
 800725c:	dd00      	ble.n	8007260 <check_for_error+0x34>
 800725e:	e070      	b.n	8007342 <check_for_error+0x116>
 8007260:	4a3d      	ldr	r2, [pc, #244]	; (8007358 <check_for_error+0x12c>)
 8007262:	4293      	cmp	r3, r2
 8007264:	d100      	bne.n	8007268 <check_for_error+0x3c>
 8007266:	e062      	b.n	800732e <check_for_error+0x102>
 8007268:	4a3b      	ldr	r2, [pc, #236]	; (8007358 <check_for_error+0x12c>)
 800726a:	4293      	cmp	r3, r2
 800726c:	dd00      	ble.n	8007270 <check_for_error+0x44>
 800726e:	e068      	b.n	8007342 <check_for_error+0x116>
 8007270:	4a3a      	ldr	r2, [pc, #232]	; (800735c <check_for_error+0x130>)
 8007272:	4293      	cmp	r3, r2
 8007274:	d056      	beq.n	8007324 <check_for_error+0xf8>
 8007276:	4a39      	ldr	r2, [pc, #228]	; (800735c <check_for_error+0x130>)
 8007278:	4293      	cmp	r3, r2
 800727a:	dd00      	ble.n	800727e <check_for_error+0x52>
 800727c:	e061      	b.n	8007342 <check_for_error+0x116>
 800727e:	4a38      	ldr	r2, [pc, #224]	; (8007360 <check_for_error+0x134>)
 8007280:	4293      	cmp	r3, r2
 8007282:	d04a      	beq.n	800731a <check_for_error+0xee>
 8007284:	4a36      	ldr	r2, [pc, #216]	; (8007360 <check_for_error+0x134>)
 8007286:	4293      	cmp	r3, r2
 8007288:	dc5b      	bgt.n	8007342 <check_for_error+0x116>
 800728a:	4a36      	ldr	r2, [pc, #216]	; (8007364 <check_for_error+0x138>)
 800728c:	4293      	cmp	r3, r2
 800728e:	d03f      	beq.n	8007310 <check_for_error+0xe4>
 8007290:	4a34      	ldr	r2, [pc, #208]	; (8007364 <check_for_error+0x138>)
 8007292:	4293      	cmp	r3, r2
 8007294:	dc55      	bgt.n	8007342 <check_for_error+0x116>
 8007296:	4a34      	ldr	r2, [pc, #208]	; (8007368 <check_for_error+0x13c>)
 8007298:	4293      	cmp	r3, r2
 800729a:	d034      	beq.n	8007306 <check_for_error+0xda>
 800729c:	4a32      	ldr	r2, [pc, #200]	; (8007368 <check_for_error+0x13c>)
 800729e:	4293      	cmp	r3, r2
 80072a0:	dc4f      	bgt.n	8007342 <check_for_error+0x116>
 80072a2:	4a32      	ldr	r2, [pc, #200]	; (800736c <check_for_error+0x140>)
 80072a4:	4293      	cmp	r3, r2
 80072a6:	d029      	beq.n	80072fc <check_for_error+0xd0>
 80072a8:	4a30      	ldr	r2, [pc, #192]	; (800736c <check_for_error+0x140>)
 80072aa:	4293      	cmp	r3, r2
 80072ac:	dc49      	bgt.n	8007342 <check_for_error+0x116>
 80072ae:	4a30      	ldr	r2, [pc, #192]	; (8007370 <check_for_error+0x144>)
 80072b0:	4293      	cmp	r3, r2
 80072b2:	d01e      	beq.n	80072f2 <check_for_error+0xc6>
 80072b4:	4a2e      	ldr	r2, [pc, #184]	; (8007370 <check_for_error+0x144>)
 80072b6:	4293      	cmp	r3, r2
 80072b8:	dc43      	bgt.n	8007342 <check_for_error+0x116>
 80072ba:	2222      	movs	r2, #34	; 0x22
 80072bc:	32ff      	adds	r2, #255	; 0xff
 80072be:	4293      	cmp	r3, r2
 80072c0:	d012      	beq.n	80072e8 <check_for_error+0xbc>
 80072c2:	2291      	movs	r2, #145	; 0x91
 80072c4:	0052      	lsls	r2, r2, #1
 80072c6:	4293      	cmp	r3, r2
 80072c8:	da3b      	bge.n	8007342 <check_for_error+0x116>
 80072ca:	2b01      	cmp	r3, #1
 80072cc:	d002      	beq.n	80072d4 <check_for_error+0xa8>
 80072ce:	2b11      	cmp	r3, #17
 80072d0:	d005      	beq.n	80072de <check_for_error+0xb2>
 80072d2:	e036      	b.n	8007342 <check_for_error+0x116>
    {
        case ASTRONODE_ERR_CODE_CRC_NOT_VALID:
            send_debug_logs("[ERROR] CRC_NOT_VALID : Discrepancy between provided CRC and expected CRC.");
 80072d4:	4b27      	ldr	r3, [pc, #156]	; (8007374 <check_for_error+0x148>)
 80072d6:	0018      	movs	r0, r3
 80072d8:	f7fb fad8 	bl	800288c <send_debug_logs>
            break;
 80072dc:	e036      	b.n	800734c <check_for_error+0x120>

        case ASTRONODE_ERR_CODE_LENGTH_NOT_VALID:
            send_debug_logs("[ERROR] LENGTH_NOT_VALID : Message exceeds the maximum length allowed by the given operation code.");
 80072de:	4b26      	ldr	r3, [pc, #152]	; (8007378 <check_for_error+0x14c>)
 80072e0:	0018      	movs	r0, r3
 80072e2:	f7fb fad3 	bl	800288c <send_debug_logs>
            break;
 80072e6:	e031      	b.n	800734c <check_for_error+0x120>

        case ASTRONODE_ERR_CODE_OPCODE_NOT_VALID:
            send_debug_logs("[ERROR] OPCODE_NOT_VALID : Invalid operation code used.");
 80072e8:	4b24      	ldr	r3, [pc, #144]	; (800737c <check_for_error+0x150>)
 80072ea:	0018      	movs	r0, r3
 80072ec:	f7fb face 	bl	800288c <send_debug_logs>
            break;
 80072f0:	e02c      	b.n	800734c <check_for_error+0x120>

        case ASTRONODE_ERR_CODE_FORMAT_NOT_VALID:
            send_debug_logs("[ERROR] FORMAT_NOT_VALID : At least one of the fields (SSID, password, token) is not composed of exclusively printable standard ASCII characters (0x20 to 0x7E).");
 80072f2:	4b23      	ldr	r3, [pc, #140]	; (8007380 <check_for_error+0x154>)
 80072f4:	0018      	movs	r0, r3
 80072f6:	f7fb fac9 	bl	800288c <send_debug_logs>
            break;
 80072fa:	e027      	b.n	800734c <check_for_error+0x120>

        case ASTRONODE_ERR_CODE_FLASH_WRITING_FAILED:
            send_debug_logs("[ERROR] FLASH_WRITING_FAILED : Failed to write the Wi-Fi settings (SSID, password, token) to the flash.");
 80072fc:	4b21      	ldr	r3, [pc, #132]	; (8007384 <check_for_error+0x158>)
 80072fe:	0018      	movs	r0, r3
 8007300:	f7fb fac4 	bl	800288c <send_debug_logs>
            break;
 8007304:	e022      	b.n	800734c <check_for_error+0x120>

        case ASTRONODE_ERR_CODE_BUFFER_FULL:
            send_debug_logs("[ERROR] BUFFER_FULL : Failed to queue the payload because the sending queue is already full.");
 8007306:	4b20      	ldr	r3, [pc, #128]	; (8007388 <check_for_error+0x15c>)
 8007308:	0018      	movs	r0, r3
 800730a:	f7fb fabf 	bl	800288c <send_debug_logs>
            break;
 800730e:	e01d      	b.n	800734c <check_for_error+0x120>

        case ASTRONODE_ERR_CODE_DUPLICATE_ID:
            send_debug_logs("[ERROR] DUPLICATE_ID : Failed to queue the payload because the Payload ID provided by the asset is already in use in the Astronode queue.");
 8007310:	4b1e      	ldr	r3, [pc, #120]	; (800738c <check_for_error+0x160>)
 8007312:	0018      	movs	r0, r3
 8007314:	f7fb faba 	bl	800288c <send_debug_logs>
            break;
 8007318:	e018      	b.n	800734c <check_for_error+0x120>

        case ASTRONODE_ERR_CODE_BUFFER_EMPTY:
            send_debug_logs("[ERROR] BUFFER_EMPTY : Failed to dequeue a payload from the buffer because the buffer is empty.");
 800731a:	4b1d      	ldr	r3, [pc, #116]	; (8007390 <check_for_error+0x164>)
 800731c:	0018      	movs	r0, r3
 800731e:	f7fb fab5 	bl	800288c <send_debug_logs>
            break;
 8007322:	e013      	b.n	800734c <check_for_error+0x120>

        case ASTRONODE_ERR_CODE_INVALID_POS:
            send_debug_logs("[ERROR] INVALID_POS : Failed to update the geolocation information. Latitude and longitude fields must in the range [-90,90] degrees and [-180,180] degrees, respectively.");
 8007324:	4b1b      	ldr	r3, [pc, #108]	; (8007394 <check_for_error+0x168>)
 8007326:	0018      	movs	r0, r3
 8007328:	f7fb fab0 	bl	800288c <send_debug_logs>
            break;
 800732c:	e00e      	b.n	800734c <check_for_error+0x120>

        case ASTRONODE_ERR_CODE_NO_ACK:
            send_debug_logs("[ERROR] NO_ACK : No satellite acknowledgement available for any payload.");
 800732e:	4b1a      	ldr	r3, [pc, #104]	; (8007398 <check_for_error+0x16c>)
 8007330:	0018      	movs	r0, r3
 8007332:	f7fb faab 	bl	800288c <send_debug_logs>
            break;
 8007336:	e009      	b.n	800734c <check_for_error+0x120>

        case ASTRONODE_ERR_CODE_NO_CLEAR:
            send_debug_logs("[ERROR] NO_CLEAR : No payload ack to clear, or it was already cleared.");
 8007338:	4b18      	ldr	r3, [pc, #96]	; (800739c <check_for_error+0x170>)
 800733a:	0018      	movs	r0, r3
 800733c:	f7fb faa6 	bl	800288c <send_debug_logs>
            break;
 8007340:	e004      	b.n	800734c <check_for_error+0x120>

        default:
            send_debug_logs("[ERROR] error_code is not defined.");
 8007342:	4b17      	ldr	r3, [pc, #92]	; (80073a0 <check_for_error+0x174>)
 8007344:	0018      	movs	r0, r3
 8007346:	f7fb faa1 	bl	800288c <send_debug_logs>
            break;
 800734a:	46c0      	nop			; (mov r8, r8)
    }
}
 800734c:	46c0      	nop			; (mov r8, r8)
 800734e:	46bd      	mov	sp, r7
 8007350:	b004      	add	sp, #16
 8007352:	bd80      	pop	{r7, pc}
 8007354:	00004601 	.word	0x00004601
 8007358:	00004501 	.word	0x00004501
 800735c:	00003501 	.word	0x00003501
 8007360:	00002601 	.word	0x00002601
 8007364:	00002511 	.word	0x00002511
 8007368:	00002501 	.word	0x00002501
 800736c:	00000611 	.word	0x00000611
 8007370:	00000601 	.word	0x00000601
 8007374:	0800d590 	.word	0x0800d590
 8007378:	0800d5dc 	.word	0x0800d5dc
 800737c:	0800d640 	.word	0x0800d640
 8007380:	0800d678 	.word	0x0800d678
 8007384:	0800d71c 	.word	0x0800d71c
 8007388:	0800d784 	.word	0x0800d784
 800738c:	0800d7e4 	.word	0x0800d7e4
 8007390:	0800d870 	.word	0x0800d870
 8007394:	0800d8d0 	.word	0x0800d8d0
 8007398:	0800d97c 	.word	0x0800d97c
 800739c:	0800d9c8 	.word	0x0800d9c8
 80073a0:	0800da10 	.word	0x0800da10

080073a4 <receive_astronode_answer>:

static return_status_t receive_astronode_answer(uint8_t *p_rx_buffer, uint16_t *p_buffer_length)
{
 80073a4:	b5b0      	push	{r4, r5, r7, lr}
 80073a6:	b086      	sub	sp, #24
 80073a8:	af00      	add	r7, sp, #0
 80073aa:	6078      	str	r0, [r7, #4]
 80073ac:	6039      	str	r1, [r7, #0]
    uint8_t rx_char = 0;
 80073ae:	230f      	movs	r3, #15
 80073b0:	18fb      	adds	r3, r7, r3
 80073b2:	2200      	movs	r2, #0
 80073b4:	701a      	strb	r2, [r3, #0]
    uint16_t length = 0;
 80073b6:	2316      	movs	r3, #22
 80073b8:	18fb      	adds	r3, r7, r3
 80073ba:	2200      	movs	r2, #0
 80073bc:	801a      	strh	r2, [r3, #0]
    uint32_t timeout_answer_received = get_systick();
 80073be:	f7fb fae1 	bl	8002984 <get_systick>
 80073c2:	0003      	movs	r3, r0
 80073c4:	613b      	str	r3, [r7, #16]
    bool is_answer_received = false;
 80073c6:	2315      	movs	r3, #21
 80073c8:	18fb      	adds	r3, r7, r3
 80073ca:	2200      	movs	r2, #0
 80073cc:	701a      	strb	r2, [r3, #0]

    while (is_answer_received == false)
 80073ce:	e054      	b.n	800747a <receive_astronode_answer+0xd6>
    {
        if (is_systick_timeout_over(timeout_answer_received, ASTRONODE_ANSWER_TIMEOUT_MS))
 80073d0:	4a34      	ldr	r2, [pc, #208]	; (80074a4 <receive_astronode_answer+0x100>)
 80073d2:	693b      	ldr	r3, [r7, #16]
 80073d4:	0011      	movs	r1, r2
 80073d6:	0018      	movs	r0, r3
 80073d8:	f7fb fadc 	bl	8002994 <is_systick_timeout_over>
 80073dc:	1e03      	subs	r3, r0, #0
 80073de:	d005      	beq.n	80073ec <receive_astronode_answer+0x48>
        {
            send_debug_logs("ERROR : Received answer timeout..");
 80073e0:	4b31      	ldr	r3, [pc, #196]	; (80074a8 <receive_astronode_answer+0x104>)
 80073e2:	0018      	movs	r0, r3
 80073e4:	f7fb fa52 	bl	800288c <send_debug_logs>
            return RS_FAILURE;
 80073e8:	2300      	movs	r3, #0
 80073ea:	e057      	b.n	800749c <receive_astronode_answer+0xf8>
        }
        if (is_astronode_character_received(&rx_char))
 80073ec:	250f      	movs	r5, #15
 80073ee:	197b      	adds	r3, r7, r5
 80073f0:	0018      	movs	r0, r3
 80073f2:	f7fb fab3 	bl	800295c <is_astronode_character_received>
 80073f6:	0003      	movs	r3, r0
 80073f8:	0019      	movs	r1, r3
 80073fa:	2016      	movs	r0, #22
 80073fc:	183b      	adds	r3, r7, r0
 80073fe:	183a      	adds	r2, r7, r0
 8007400:	8812      	ldrh	r2, [r2, #0]
 8007402:	801a      	strh	r2, [r3, #0]
 8007404:	2415      	movs	r4, #21
 8007406:	193b      	adds	r3, r7, r4
 8007408:	193a      	adds	r2, r7, r4
 800740a:	7812      	ldrb	r2, [r2, #0]
 800740c:	701a      	strb	r2, [r3, #0]
 800740e:	2900      	cmp	r1, #0
 8007410:	d033      	beq.n	800747a <receive_astronode_answer+0xd6>
        {
            if (rx_char == ASTRONODE_TRANSPORT_STX)
 8007412:	197b      	adds	r3, r7, r5
 8007414:	781b      	ldrb	r3, [r3, #0]
 8007416:	2b02      	cmp	r3, #2
 8007418:	d105      	bne.n	8007426 <receive_astronode_answer+0x82>
            {
                is_answer_received = false;
 800741a:	193b      	adds	r3, r7, r4
 800741c:	2200      	movs	r2, #0
 800741e:	701a      	strb	r2, [r3, #0]
                length = 0;
 8007420:	183b      	adds	r3, r7, r0
 8007422:	2200      	movs	r2, #0
 8007424:	801a      	strh	r2, [r3, #0]
            }

            p_rx_buffer[length] = rx_char;
 8007426:	2116      	movs	r1, #22
 8007428:	187b      	adds	r3, r7, r1
 800742a:	881b      	ldrh	r3, [r3, #0]
 800742c:	687a      	ldr	r2, [r7, #4]
 800742e:	18d3      	adds	r3, r2, r3
 8007430:	220f      	movs	r2, #15
 8007432:	18ba      	adds	r2, r7, r2
 8007434:	7812      	ldrb	r2, [r2, #0]
 8007436:	701a      	strb	r2, [r3, #0]
            length++;
 8007438:	187b      	adds	r3, r7, r1
 800743a:	881a      	ldrh	r2, [r3, #0]
 800743c:	187b      	adds	r3, r7, r1
 800743e:	3201      	adds	r2, #1
 8007440:	801a      	strh	r2, [r3, #0]

            if (length > ASTRONODE_MAX_LENGTH_RESPONSE)
 8007442:	187b      	adds	r3, r7, r1
 8007444:	881b      	ldrh	r3, [r3, #0]
 8007446:	2bb2      	cmp	r3, #178	; 0xb2
 8007448:	d905      	bls.n	8007456 <receive_astronode_answer+0xb2>
            {
                send_debug_logs("ERROR : Message received from the Astronode exceed maximum length allowed.");
 800744a:	4b18      	ldr	r3, [pc, #96]	; (80074ac <receive_astronode_answer+0x108>)
 800744c:	0018      	movs	r0, r3
 800744e:	f7fb fa1d 	bl	800288c <send_debug_logs>
                return RS_FAILURE;
 8007452:	2300      	movs	r3, #0
 8007454:	e022      	b.n	800749c <receive_astronode_answer+0xf8>
            }

            if (rx_char == ASTRONODE_TRANSPORT_ETX)
 8007456:	230f      	movs	r3, #15
 8007458:	18fb      	adds	r3, r7, r3
 800745a:	781b      	ldrb	r3, [r3, #0]
 800745c:	2b03      	cmp	r3, #3
 800745e:	d10c      	bne.n	800747a <receive_astronode_answer+0xd6>
            {
                if (length > 1)
 8007460:	2216      	movs	r2, #22
 8007462:	18bb      	adds	r3, r7, r2
 8007464:	881b      	ldrh	r3, [r3, #0]
 8007466:	2b01      	cmp	r3, #1
 8007468:	d907      	bls.n	800747a <receive_astronode_answer+0xd6>
                {
                    *p_buffer_length = length;
 800746a:	683b      	ldr	r3, [r7, #0]
 800746c:	18ba      	adds	r2, r7, r2
 800746e:	8812      	ldrh	r2, [r2, #0]
 8007470:	801a      	strh	r2, [r3, #0]
                    is_answer_received = true;
 8007472:	2315      	movs	r3, #21
 8007474:	18fb      	adds	r3, r7, r3
 8007476:	2201      	movs	r2, #1
 8007478:	701a      	strb	r2, [r3, #0]
    while (is_answer_received == false)
 800747a:	2315      	movs	r3, #21
 800747c:	18fb      	adds	r3, r7, r3
 800747e:	781b      	ldrb	r3, [r3, #0]
 8007480:	2201      	movs	r2, #1
 8007482:	4053      	eors	r3, r2
 8007484:	b2db      	uxtb	r3, r3
 8007486:	2b00      	cmp	r3, #0
 8007488:	d1a2      	bne.n	80073d0 <receive_astronode_answer+0x2c>
                }
            }
        }
    }
    send_debug_logs("Message received from the Astronode <-- ");
 800748a:	4b09      	ldr	r3, [pc, #36]	; (80074b0 <receive_astronode_answer+0x10c>)
 800748c:	0018      	movs	r0, r3
 800748e:	f7fb f9fd 	bl	800288c <send_debug_logs>
    send_debug_logs((char *) p_rx_buffer);
 8007492:	687b      	ldr	r3, [r7, #4]
 8007494:	0018      	movs	r0, r3
 8007496:	f7fb f9f9 	bl	800288c <send_debug_logs>

    return RS_SUCCESS;
 800749a:	2301      	movs	r3, #1
}
 800749c:	0018      	movs	r0, r3
 800749e:	46bd      	mov	sp, r7
 80074a0:	b006      	add	sp, #24
 80074a2:	bdb0      	pop	{r4, r5, r7, pc}
 80074a4:	000005dc 	.word	0x000005dc
 80074a8:	0800da34 	.word	0x0800da34
 80074ac:	0800da58 	.word	0x0800da58
 80074b0:	0800daa4 	.word	0x0800daa4

080074b4 <uint8_to_ascii_buffer>:

static void uint8_to_ascii_buffer(const uint8_t value, uint8_t *p_target_buffer)
{
 80074b4:	b580      	push	{r7, lr}
 80074b6:	b082      	sub	sp, #8
 80074b8:	af00      	add	r7, sp, #0
 80074ba:	0002      	movs	r2, r0
 80074bc:	6039      	str	r1, [r7, #0]
 80074be:	1dfb      	adds	r3, r7, #7
 80074c0:	701a      	strb	r2, [r3, #0]
    p_target_buffer[0] = g_ascii_lookup[value >> 4];
 80074c2:	1dfb      	adds	r3, r7, #7
 80074c4:	781b      	ldrb	r3, [r3, #0]
 80074c6:	091b      	lsrs	r3, r3, #4
 80074c8:	b2db      	uxtb	r3, r3
 80074ca:	001a      	movs	r2, r3
 80074cc:	4b08      	ldr	r3, [pc, #32]	; (80074f0 <uint8_to_ascii_buffer+0x3c>)
 80074ce:	5c9a      	ldrb	r2, [r3, r2]
 80074d0:	683b      	ldr	r3, [r7, #0]
 80074d2:	701a      	strb	r2, [r3, #0]
    p_target_buffer[1] = g_ascii_lookup[value & 0x0F];
 80074d4:	1dfb      	adds	r3, r7, #7
 80074d6:	781b      	ldrb	r3, [r3, #0]
 80074d8:	220f      	movs	r2, #15
 80074da:	401a      	ands	r2, r3
 80074dc:	683b      	ldr	r3, [r7, #0]
 80074de:	3301      	adds	r3, #1
 80074e0:	4903      	ldr	r1, [pc, #12]	; (80074f0 <uint8_to_ascii_buffer+0x3c>)
 80074e2:	5c8a      	ldrb	r2, [r1, r2]
 80074e4:	701a      	strb	r2, [r3, #0]
}
 80074e6:	46c0      	nop			; (mov r8, r8)
 80074e8:	46bd      	mov	sp, r7
 80074ea:	b002      	add	sp, #8
 80074ec:	bd80      	pop	{r7, pc}
 80074ee:	46c0      	nop			; (mov r8, r8)
 80074f0:	0800dbcc 	.word	0x0800dbcc

080074f4 <my_astro_init>:
 */
#include "my_astronode.h"


bool my_astro_init ( void )
{
 80074f4:	b590      	push	{r4, r7, lr}
 80074f6:	b087      	sub	sp, #28
 80074f8:	af04      	add	r7, sp, #16
	bool cfg_wr = false ;
 80074fa:	1dfb      	adds	r3, r7, #7
 80074fc:	2200      	movs	r2, #0
 80074fe:	701a      	strb	r2, [r3, #0]
	tim_seconds = 0 ;
 8007500:	4b21      	ldr	r3, [pc, #132]	; (8007588 <my_astro_init+0x94>)
 8007502:	2200      	movs	r2, #0
 8007504:	801a      	strh	r2, [r3, #0]

	HAL_TIM_Base_Start_IT ( MY_TIMER ) ;
 8007506:	4b21      	ldr	r3, [pc, #132]	; (800758c <my_astro_init+0x98>)
 8007508:	0018      	movs	r0, r3
 800750a:	f7fd fce9 	bl	8004ee0 <HAL_TIM_Base_Start_IT>
	while ( tim_seconds < MY_ASTRO_INIT_TIME && !cfg_wr )
 800750e:	e015      	b.n	800753c <my_astro_init+0x48>
	{
		reset_astronode () ;
 8007510:	f7fb f9ec 	bl	80028ec <reset_astronode>
		HAL_Delay ( 100 ) ;
 8007514:	2064      	movs	r0, #100	; 0x64
 8007516:	f7fb fd63 	bl	8002fe0 <HAL_Delay>
		// Deep Sleep Mode (false) NOT used
		// Satellite Ack Event Pin Mask (true): EVT pin shows EVT register Payload Ack bit state
		// Reset Notification Event Pin Mask (true):  EVT pin shows EVT register Reset Event Notification bit state
		// Command Available Event Pin Mask (true): EVT pin shows EVT register Command Available bit state
		// Message Transmission (Tx) Pending Event Pin Mask (false):  EVT pin does not show EVT register Msg Tx Pending bit state
		cfg_wr = astronode_send_cfg_wr ( true , true , true , false , true , true , true , false  ) ;
 800751a:	1dfc      	adds	r4, r7, #7
 800751c:	2300      	movs	r3, #0
 800751e:	9303      	str	r3, [sp, #12]
 8007520:	2301      	movs	r3, #1
 8007522:	9302      	str	r3, [sp, #8]
 8007524:	2301      	movs	r3, #1
 8007526:	9301      	str	r3, [sp, #4]
 8007528:	2301      	movs	r3, #1
 800752a:	9300      	str	r3, [sp, #0]
 800752c:	2300      	movs	r3, #0
 800752e:	2201      	movs	r2, #1
 8007530:	2101      	movs	r1, #1
 8007532:	2001      	movs	r0, #1
 8007534:	f7ff f81c 	bl	8006570 <astronode_send_cfg_wr>
 8007538:	0003      	movs	r3, r0
 800753a:	7023      	strb	r3, [r4, #0]
	while ( tim_seconds < MY_ASTRO_INIT_TIME && !cfg_wr )
 800753c:	4b12      	ldr	r3, [pc, #72]	; (8007588 <my_astro_init+0x94>)
 800753e:	881b      	ldrh	r3, [r3, #0]
 8007540:	2b3b      	cmp	r3, #59	; 0x3b
 8007542:	d806      	bhi.n	8007552 <my_astro_init+0x5e>
 8007544:	1dfb      	adds	r3, r7, #7
 8007546:	781b      	ldrb	r3, [r3, #0]
 8007548:	2201      	movs	r2, #1
 800754a:	4053      	eors	r3, r2
 800754c:	b2db      	uxtb	r3, r3
 800754e:	2b00      	cmp	r3, #0
 8007550:	d1de      	bne.n	8007510 <my_astro_init+0x1c>
	}
	//tim_seconds = 0 ;
	HAL_TIM_Base_Stop_IT ( MY_TIMER ) ;
 8007552:	4b0e      	ldr	r3, [pc, #56]	; (800758c <my_astro_init+0x98>)
 8007554:	0018      	movs	r0, r3
 8007556:	f7fd fd25 	bl	8004fa4 <HAL_TIM_Base_Stop_IT>
	if ( cfg_wr )
 800755a:	1dfb      	adds	r3, r7, #7
 800755c:	781b      	ldrb	r3, [r3, #0]
 800755e:	2b00      	cmp	r3, #0
 8007560:	d00d      	beq.n	800757e <my_astro_init+0x8a>
	{
		astronode_send_rtc_rr () ;
 8007562:	f7ff fa41 	bl	80069e8 <astronode_send_rtc_rr>
		astronode_send_cfg_sr () ;
 8007566:	f7fe ffcb 	bl	8006500 <astronode_send_cfg_sr>
		astronode_send_mpn_rr () ;
 800756a:	f7ff faa1 	bl	8006ab0 <astronode_send_mpn_rr>
		astronode_send_msn_rr () ;
 800756e:	f7ff f955 	bl	800681c <astronode_send_msn_rr>
		astronode_send_mgi_rr () ;
 8007572:	f7ff f8a9 	bl	80066c8 <astronode_send_mgi_rr>
		astronode_send_pld_fr () ;
 8007576:	f7ff f9fb 	bl	8006970 <astronode_send_pld_fr>
		return true ;
 800757a:	2301      	movs	r3, #1
 800757c:	e000      	b.n	8007580 <my_astro_init+0x8c>
	}
	else
	{
		return false ;
 800757e:	2300      	movs	r3, #0
	}
}
 8007580:	0018      	movs	r0, r3
 8007582:	46bd      	mov	sp, r7
 8007584:	b003      	add	sp, #12
 8007586:	bd90      	pop	{r4, r7, pc}
 8007588:	20000890 	.word	0x20000890
 800758c:	20000708 	.word	0x20000708

08007590 <my_rtc_get_time_s>:
{
	HAL_RTC_GetDate ( &hrtc , d , RTC_FORMAT_BIN ) ;
	HAL_RTC_GetTime ( &hrtc , t , RTC_FORMAT_BIN ) ;
}
uint16_t my_rtc_get_time_s ( char* dt_s )
{
 8007590:	b5f0      	push	{r4, r5, r6, r7, lr}
 8007592:	b08d      	sub	sp, #52	; 0x34
 8007594:	af04      	add	r7, sp, #16
 8007596:	6078      	str	r0, [r7, #4]
	RTC_DateTypeDef gDate;
	RTC_TimeTypeDef gTime;

	//char cdt[20];

	HAL_RTC_GetTime ( &hrtc , &gTime , RTC_FORMAT_BIN ) ;
 8007598:	2508      	movs	r5, #8
 800759a:	1979      	adds	r1, r7, r5
 800759c:	4b1b      	ldr	r3, [pc, #108]	; (800760c <my_rtc_get_time_s+0x7c>)
 800759e:	2200      	movs	r2, #0
 80075a0:	0018      	movs	r0, r3
 80075a2:	f7fd f8ef 	bl	8004784 <HAL_RTC_GetTime>
	HAL_RTC_GetDate ( &hrtc , &gDate , RTC_FORMAT_BIN ) ;
 80075a6:	241c      	movs	r4, #28
 80075a8:	1939      	adds	r1, r7, r4
 80075aa:	4b18      	ldr	r3, [pc, #96]	; (800760c <my_rtc_get_time_s+0x7c>)
 80075ac:	2200      	movs	r2, #0
 80075ae:	0018      	movs	r0, r3
 80075b0:	f7fd f9d6 	bl	8004960 <HAL_RTC_GetDate>

	sprintf ( dt_s , "%4d.%02d.%02d %02d:%02d:%02d" , 2000 + gDate.Year , gDate.Month , gDate.Date , gTime.Hours , gTime.Minutes , gTime.Seconds) ;
 80075b4:	0021      	movs	r1, r4
 80075b6:	187b      	adds	r3, r7, r1
 80075b8:	78db      	ldrb	r3, [r3, #3]
 80075ba:	22fa      	movs	r2, #250	; 0xfa
 80075bc:	00d2      	lsls	r2, r2, #3
 80075be:	189a      	adds	r2, r3, r2
 80075c0:	187b      	adds	r3, r7, r1
 80075c2:	785b      	ldrb	r3, [r3, #1]
 80075c4:	469c      	mov	ip, r3
 80075c6:	187b      	adds	r3, r7, r1
 80075c8:	789b      	ldrb	r3, [r3, #2]
 80075ca:	001c      	movs	r4, r3
 80075cc:	0028      	movs	r0, r5
 80075ce:	183b      	adds	r3, r7, r0
 80075d0:	781b      	ldrb	r3, [r3, #0]
 80075d2:	001d      	movs	r5, r3
 80075d4:	183b      	adds	r3, r7, r0
 80075d6:	785b      	ldrb	r3, [r3, #1]
 80075d8:	001e      	movs	r6, r3
 80075da:	183b      	adds	r3, r7, r0
 80075dc:	789b      	ldrb	r3, [r3, #2]
 80075de:	490c      	ldr	r1, [pc, #48]	; (8007610 <my_rtc_get_time_s+0x80>)
 80075e0:	6878      	ldr	r0, [r7, #4]
 80075e2:	9303      	str	r3, [sp, #12]
 80075e4:	9602      	str	r6, [sp, #8]
 80075e6:	9501      	str	r5, [sp, #4]
 80075e8:	9400      	str	r4, [sp, #0]
 80075ea:	4663      	mov	r3, ip
 80075ec:	f000 f90a 	bl	8007804 <sprintf>

	return (uint16_t) ( 2000 + gDate.Year ) ;
 80075f0:	211c      	movs	r1, #28
 80075f2:	187b      	adds	r3, r7, r1
 80075f4:	78db      	ldrb	r3, [r3, #3]
 80075f6:	b29b      	uxth	r3, r3
 80075f8:	22fa      	movs	r2, #250	; 0xfa
 80075fa:	00d2      	lsls	r2, r2, #3
 80075fc:	4694      	mov	ip, r2
 80075fe:	4463      	add	r3, ip
 8007600:	b29b      	uxth	r3, r3
}
 8007602:	0018      	movs	r0, r3
 8007604:	46bd      	mov	sp, r7
 8007606:	b009      	add	sp, #36	; 0x24
 8007608:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800760a:	46c0      	nop			; (mov r8, r8)
 800760c:	200006dc 	.word	0x200006dc
 8007610:	0800dad0 	.word	0x0800dad0

08007614 <std>:
 8007614:	2300      	movs	r3, #0
 8007616:	b510      	push	{r4, lr}
 8007618:	0004      	movs	r4, r0
 800761a:	6003      	str	r3, [r0, #0]
 800761c:	6043      	str	r3, [r0, #4]
 800761e:	6083      	str	r3, [r0, #8]
 8007620:	8181      	strh	r1, [r0, #12]
 8007622:	6643      	str	r3, [r0, #100]	; 0x64
 8007624:	81c2      	strh	r2, [r0, #14]
 8007626:	6103      	str	r3, [r0, #16]
 8007628:	6143      	str	r3, [r0, #20]
 800762a:	6183      	str	r3, [r0, #24]
 800762c:	0019      	movs	r1, r3
 800762e:	2208      	movs	r2, #8
 8007630:	305c      	adds	r0, #92	; 0x5c
 8007632:	f000 f953 	bl	80078dc <memset>
 8007636:	4b0b      	ldr	r3, [pc, #44]	; (8007664 <std+0x50>)
 8007638:	61e4      	str	r4, [r4, #28]
 800763a:	6223      	str	r3, [r4, #32]
 800763c:	4b0a      	ldr	r3, [pc, #40]	; (8007668 <std+0x54>)
 800763e:	6263      	str	r3, [r4, #36]	; 0x24
 8007640:	4b0a      	ldr	r3, [pc, #40]	; (800766c <std+0x58>)
 8007642:	62a3      	str	r3, [r4, #40]	; 0x28
 8007644:	4b0a      	ldr	r3, [pc, #40]	; (8007670 <std+0x5c>)
 8007646:	62e3      	str	r3, [r4, #44]	; 0x2c
 8007648:	4b0a      	ldr	r3, [pc, #40]	; (8007674 <std+0x60>)
 800764a:	429c      	cmp	r4, r3
 800764c:	d005      	beq.n	800765a <std+0x46>
 800764e:	4b0a      	ldr	r3, [pc, #40]	; (8007678 <std+0x64>)
 8007650:	429c      	cmp	r4, r3
 8007652:	d002      	beq.n	800765a <std+0x46>
 8007654:	4b09      	ldr	r3, [pc, #36]	; (800767c <std+0x68>)
 8007656:	429c      	cmp	r4, r3
 8007658:	d103      	bne.n	8007662 <std+0x4e>
 800765a:	0020      	movs	r0, r4
 800765c:	3058      	adds	r0, #88	; 0x58
 800765e:	f000 f9c5 	bl	80079ec <__retarget_lock_init_recursive>
 8007662:	bd10      	pop	{r4, pc}
 8007664:	08007845 	.word	0x08007845
 8007668:	0800786d 	.word	0x0800786d
 800766c:	080078a5 	.word	0x080078a5
 8007670:	080078d1 	.word	0x080078d1
 8007674:	2000089c 	.word	0x2000089c
 8007678:	20000904 	.word	0x20000904
 800767c:	2000096c 	.word	0x2000096c

08007680 <stdio_exit_handler>:
 8007680:	b510      	push	{r4, lr}
 8007682:	4a03      	ldr	r2, [pc, #12]	; (8007690 <stdio_exit_handler+0x10>)
 8007684:	4903      	ldr	r1, [pc, #12]	; (8007694 <stdio_exit_handler+0x14>)
 8007686:	4804      	ldr	r0, [pc, #16]	; (8007698 <stdio_exit_handler+0x18>)
 8007688:	f000 f86c 	bl	8007764 <_fwalk_sglue>
 800768c:	bd10      	pop	{r4, pc}
 800768e:	46c0      	nop			; (mov r8, r8)
 8007690:	20000010 	.word	0x20000010
 8007694:	08009bdd 	.word	0x08009bdd
 8007698:	20000188 	.word	0x20000188

0800769c <cleanup_stdio>:
 800769c:	6841      	ldr	r1, [r0, #4]
 800769e:	4b0b      	ldr	r3, [pc, #44]	; (80076cc <cleanup_stdio+0x30>)
 80076a0:	b510      	push	{r4, lr}
 80076a2:	0004      	movs	r4, r0
 80076a4:	4299      	cmp	r1, r3
 80076a6:	d001      	beq.n	80076ac <cleanup_stdio+0x10>
 80076a8:	f002 fa98 	bl	8009bdc <_fclose_r>
 80076ac:	68a1      	ldr	r1, [r4, #8]
 80076ae:	4b08      	ldr	r3, [pc, #32]	; (80076d0 <cleanup_stdio+0x34>)
 80076b0:	4299      	cmp	r1, r3
 80076b2:	d002      	beq.n	80076ba <cleanup_stdio+0x1e>
 80076b4:	0020      	movs	r0, r4
 80076b6:	f002 fa91 	bl	8009bdc <_fclose_r>
 80076ba:	68e1      	ldr	r1, [r4, #12]
 80076bc:	4b05      	ldr	r3, [pc, #20]	; (80076d4 <cleanup_stdio+0x38>)
 80076be:	4299      	cmp	r1, r3
 80076c0:	d002      	beq.n	80076c8 <cleanup_stdio+0x2c>
 80076c2:	0020      	movs	r0, r4
 80076c4:	f002 fa8a 	bl	8009bdc <_fclose_r>
 80076c8:	bd10      	pop	{r4, pc}
 80076ca:	46c0      	nop			; (mov r8, r8)
 80076cc:	2000089c 	.word	0x2000089c
 80076d0:	20000904 	.word	0x20000904
 80076d4:	2000096c 	.word	0x2000096c

080076d8 <global_stdio_init.part.0>:
 80076d8:	b510      	push	{r4, lr}
 80076da:	4b09      	ldr	r3, [pc, #36]	; (8007700 <global_stdio_init.part.0+0x28>)
 80076dc:	4a09      	ldr	r2, [pc, #36]	; (8007704 <global_stdio_init.part.0+0x2c>)
 80076de:	2104      	movs	r1, #4
 80076e0:	601a      	str	r2, [r3, #0]
 80076e2:	4809      	ldr	r0, [pc, #36]	; (8007708 <global_stdio_init.part.0+0x30>)
 80076e4:	2200      	movs	r2, #0
 80076e6:	f7ff ff95 	bl	8007614 <std>
 80076ea:	2201      	movs	r2, #1
 80076ec:	2109      	movs	r1, #9
 80076ee:	4807      	ldr	r0, [pc, #28]	; (800770c <global_stdio_init.part.0+0x34>)
 80076f0:	f7ff ff90 	bl	8007614 <std>
 80076f4:	2202      	movs	r2, #2
 80076f6:	2112      	movs	r1, #18
 80076f8:	4805      	ldr	r0, [pc, #20]	; (8007710 <global_stdio_init.part.0+0x38>)
 80076fa:	f7ff ff8b 	bl	8007614 <std>
 80076fe:	bd10      	pop	{r4, pc}
 8007700:	200009d4 	.word	0x200009d4
 8007704:	08007681 	.word	0x08007681
 8007708:	2000089c 	.word	0x2000089c
 800770c:	20000904 	.word	0x20000904
 8007710:	2000096c 	.word	0x2000096c

08007714 <__sfp_lock_acquire>:
 8007714:	b510      	push	{r4, lr}
 8007716:	4802      	ldr	r0, [pc, #8]	; (8007720 <__sfp_lock_acquire+0xc>)
 8007718:	f000 f96a 	bl	80079f0 <__retarget_lock_acquire_recursive>
 800771c:	bd10      	pop	{r4, pc}
 800771e:	46c0      	nop			; (mov r8, r8)
 8007720:	200009de 	.word	0x200009de

08007724 <__sfp_lock_release>:
 8007724:	b510      	push	{r4, lr}
 8007726:	4802      	ldr	r0, [pc, #8]	; (8007730 <__sfp_lock_release+0xc>)
 8007728:	f000 f963 	bl	80079f2 <__retarget_lock_release_recursive>
 800772c:	bd10      	pop	{r4, pc}
 800772e:	46c0      	nop			; (mov r8, r8)
 8007730:	200009de 	.word	0x200009de

08007734 <__sinit>:
 8007734:	b510      	push	{r4, lr}
 8007736:	0004      	movs	r4, r0
 8007738:	f7ff ffec 	bl	8007714 <__sfp_lock_acquire>
 800773c:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800773e:	2b00      	cmp	r3, #0
 8007740:	d002      	beq.n	8007748 <__sinit+0x14>
 8007742:	f7ff ffef 	bl	8007724 <__sfp_lock_release>
 8007746:	bd10      	pop	{r4, pc}
 8007748:	4b04      	ldr	r3, [pc, #16]	; (800775c <__sinit+0x28>)
 800774a:	6363      	str	r3, [r4, #52]	; 0x34
 800774c:	4b04      	ldr	r3, [pc, #16]	; (8007760 <__sinit+0x2c>)
 800774e:	681b      	ldr	r3, [r3, #0]
 8007750:	2b00      	cmp	r3, #0
 8007752:	d1f6      	bne.n	8007742 <__sinit+0xe>
 8007754:	f7ff ffc0 	bl	80076d8 <global_stdio_init.part.0>
 8007758:	e7f3      	b.n	8007742 <__sinit+0xe>
 800775a:	46c0      	nop			; (mov r8, r8)
 800775c:	0800769d 	.word	0x0800769d
 8007760:	200009d4 	.word	0x200009d4

08007764 <_fwalk_sglue>:
 8007764:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8007766:	0014      	movs	r4, r2
 8007768:	2600      	movs	r6, #0
 800776a:	9000      	str	r0, [sp, #0]
 800776c:	9101      	str	r1, [sp, #4]
 800776e:	68a5      	ldr	r5, [r4, #8]
 8007770:	6867      	ldr	r7, [r4, #4]
 8007772:	3f01      	subs	r7, #1
 8007774:	d504      	bpl.n	8007780 <_fwalk_sglue+0x1c>
 8007776:	6824      	ldr	r4, [r4, #0]
 8007778:	2c00      	cmp	r4, #0
 800777a:	d1f8      	bne.n	800776e <_fwalk_sglue+0xa>
 800777c:	0030      	movs	r0, r6
 800777e:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8007780:	89ab      	ldrh	r3, [r5, #12]
 8007782:	2b01      	cmp	r3, #1
 8007784:	d908      	bls.n	8007798 <_fwalk_sglue+0x34>
 8007786:	220e      	movs	r2, #14
 8007788:	5eab      	ldrsh	r3, [r5, r2]
 800778a:	3301      	adds	r3, #1
 800778c:	d004      	beq.n	8007798 <_fwalk_sglue+0x34>
 800778e:	0029      	movs	r1, r5
 8007790:	9800      	ldr	r0, [sp, #0]
 8007792:	9b01      	ldr	r3, [sp, #4]
 8007794:	4798      	blx	r3
 8007796:	4306      	orrs	r6, r0
 8007798:	3568      	adds	r5, #104	; 0x68
 800779a:	e7ea      	b.n	8007772 <_fwalk_sglue+0xe>

0800779c <snprintf>:
 800779c:	b40c      	push	{r2, r3}
 800779e:	b530      	push	{r4, r5, lr}
 80077a0:	4b17      	ldr	r3, [pc, #92]	; (8007800 <snprintf+0x64>)
 80077a2:	000c      	movs	r4, r1
 80077a4:	681d      	ldr	r5, [r3, #0]
 80077a6:	b09d      	sub	sp, #116	; 0x74
 80077a8:	2900      	cmp	r1, #0
 80077aa:	da08      	bge.n	80077be <snprintf+0x22>
 80077ac:	238b      	movs	r3, #139	; 0x8b
 80077ae:	2001      	movs	r0, #1
 80077b0:	602b      	str	r3, [r5, #0]
 80077b2:	4240      	negs	r0, r0
 80077b4:	b01d      	add	sp, #116	; 0x74
 80077b6:	bc30      	pop	{r4, r5}
 80077b8:	bc08      	pop	{r3}
 80077ba:	b002      	add	sp, #8
 80077bc:	4718      	bx	r3
 80077be:	2382      	movs	r3, #130	; 0x82
 80077c0:	466a      	mov	r2, sp
 80077c2:	009b      	lsls	r3, r3, #2
 80077c4:	8293      	strh	r3, [r2, #20]
 80077c6:	2300      	movs	r3, #0
 80077c8:	9002      	str	r0, [sp, #8]
 80077ca:	9006      	str	r0, [sp, #24]
 80077cc:	4299      	cmp	r1, r3
 80077ce:	d000      	beq.n	80077d2 <snprintf+0x36>
 80077d0:	1e4b      	subs	r3, r1, #1
 80077d2:	9304      	str	r3, [sp, #16]
 80077d4:	9307      	str	r3, [sp, #28]
 80077d6:	2301      	movs	r3, #1
 80077d8:	466a      	mov	r2, sp
 80077da:	425b      	negs	r3, r3
 80077dc:	82d3      	strh	r3, [r2, #22]
 80077de:	0028      	movs	r0, r5
 80077e0:	ab21      	add	r3, sp, #132	; 0x84
 80077e2:	9a20      	ldr	r2, [sp, #128]	; 0x80
 80077e4:	a902      	add	r1, sp, #8
 80077e6:	9301      	str	r3, [sp, #4]
 80077e8:	f000 ffb6 	bl	8008758 <_svfprintf_r>
 80077ec:	1c43      	adds	r3, r0, #1
 80077ee:	da01      	bge.n	80077f4 <snprintf+0x58>
 80077f0:	238b      	movs	r3, #139	; 0x8b
 80077f2:	602b      	str	r3, [r5, #0]
 80077f4:	2c00      	cmp	r4, #0
 80077f6:	d0dd      	beq.n	80077b4 <snprintf+0x18>
 80077f8:	2200      	movs	r2, #0
 80077fa:	9b02      	ldr	r3, [sp, #8]
 80077fc:	701a      	strb	r2, [r3, #0]
 80077fe:	e7d9      	b.n	80077b4 <snprintf+0x18>
 8007800:	200002a8 	.word	0x200002a8

08007804 <sprintf>:
 8007804:	b40e      	push	{r1, r2, r3}
 8007806:	b500      	push	{lr}
 8007808:	490b      	ldr	r1, [pc, #44]	; (8007838 <sprintf+0x34>)
 800780a:	b09c      	sub	sp, #112	; 0x70
 800780c:	ab1d      	add	r3, sp, #116	; 0x74
 800780e:	9002      	str	r0, [sp, #8]
 8007810:	9006      	str	r0, [sp, #24]
 8007812:	9107      	str	r1, [sp, #28]
 8007814:	9104      	str	r1, [sp, #16]
 8007816:	4809      	ldr	r0, [pc, #36]	; (800783c <sprintf+0x38>)
 8007818:	4909      	ldr	r1, [pc, #36]	; (8007840 <sprintf+0x3c>)
 800781a:	cb04      	ldmia	r3!, {r2}
 800781c:	9105      	str	r1, [sp, #20]
 800781e:	6800      	ldr	r0, [r0, #0]
 8007820:	a902      	add	r1, sp, #8
 8007822:	9301      	str	r3, [sp, #4]
 8007824:	f000 ff98 	bl	8008758 <_svfprintf_r>
 8007828:	2200      	movs	r2, #0
 800782a:	9b02      	ldr	r3, [sp, #8]
 800782c:	701a      	strb	r2, [r3, #0]
 800782e:	b01c      	add	sp, #112	; 0x70
 8007830:	bc08      	pop	{r3}
 8007832:	b003      	add	sp, #12
 8007834:	4718      	bx	r3
 8007836:	46c0      	nop			; (mov r8, r8)
 8007838:	7fffffff 	.word	0x7fffffff
 800783c:	200002a8 	.word	0x200002a8
 8007840:	ffff0208 	.word	0xffff0208

08007844 <__sread>:
 8007844:	b570      	push	{r4, r5, r6, lr}
 8007846:	000c      	movs	r4, r1
 8007848:	250e      	movs	r5, #14
 800784a:	5f49      	ldrsh	r1, [r1, r5]
 800784c:	f000 f87c 	bl	8007948 <_read_r>
 8007850:	2800      	cmp	r0, #0
 8007852:	db03      	blt.n	800785c <__sread+0x18>
 8007854:	6d23      	ldr	r3, [r4, #80]	; 0x50
 8007856:	181b      	adds	r3, r3, r0
 8007858:	6523      	str	r3, [r4, #80]	; 0x50
 800785a:	bd70      	pop	{r4, r5, r6, pc}
 800785c:	89a3      	ldrh	r3, [r4, #12]
 800785e:	4a02      	ldr	r2, [pc, #8]	; (8007868 <__sread+0x24>)
 8007860:	4013      	ands	r3, r2
 8007862:	81a3      	strh	r3, [r4, #12]
 8007864:	e7f9      	b.n	800785a <__sread+0x16>
 8007866:	46c0      	nop			; (mov r8, r8)
 8007868:	ffffefff 	.word	0xffffefff

0800786c <__swrite>:
 800786c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800786e:	001f      	movs	r7, r3
 8007870:	898b      	ldrh	r3, [r1, #12]
 8007872:	0005      	movs	r5, r0
 8007874:	000c      	movs	r4, r1
 8007876:	0016      	movs	r6, r2
 8007878:	05db      	lsls	r3, r3, #23
 800787a:	d505      	bpl.n	8007888 <__swrite+0x1c>
 800787c:	230e      	movs	r3, #14
 800787e:	5ec9      	ldrsh	r1, [r1, r3]
 8007880:	2200      	movs	r2, #0
 8007882:	2302      	movs	r3, #2
 8007884:	f000 f84c 	bl	8007920 <_lseek_r>
 8007888:	89a3      	ldrh	r3, [r4, #12]
 800788a:	4a05      	ldr	r2, [pc, #20]	; (80078a0 <__swrite+0x34>)
 800788c:	0028      	movs	r0, r5
 800788e:	4013      	ands	r3, r2
 8007890:	81a3      	strh	r3, [r4, #12]
 8007892:	0032      	movs	r2, r6
 8007894:	230e      	movs	r3, #14
 8007896:	5ee1      	ldrsh	r1, [r4, r3]
 8007898:	003b      	movs	r3, r7
 800789a:	f000 f869 	bl	8007970 <_write_r>
 800789e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80078a0:	ffffefff 	.word	0xffffefff

080078a4 <__sseek>:
 80078a4:	b570      	push	{r4, r5, r6, lr}
 80078a6:	000c      	movs	r4, r1
 80078a8:	250e      	movs	r5, #14
 80078aa:	5f49      	ldrsh	r1, [r1, r5]
 80078ac:	f000 f838 	bl	8007920 <_lseek_r>
 80078b0:	89a3      	ldrh	r3, [r4, #12]
 80078b2:	1c42      	adds	r2, r0, #1
 80078b4:	d103      	bne.n	80078be <__sseek+0x1a>
 80078b6:	4a05      	ldr	r2, [pc, #20]	; (80078cc <__sseek+0x28>)
 80078b8:	4013      	ands	r3, r2
 80078ba:	81a3      	strh	r3, [r4, #12]
 80078bc:	bd70      	pop	{r4, r5, r6, pc}
 80078be:	2280      	movs	r2, #128	; 0x80
 80078c0:	0152      	lsls	r2, r2, #5
 80078c2:	4313      	orrs	r3, r2
 80078c4:	81a3      	strh	r3, [r4, #12]
 80078c6:	6520      	str	r0, [r4, #80]	; 0x50
 80078c8:	e7f8      	b.n	80078bc <__sseek+0x18>
 80078ca:	46c0      	nop			; (mov r8, r8)
 80078cc:	ffffefff 	.word	0xffffefff

080078d0 <__sclose>:
 80078d0:	b510      	push	{r4, lr}
 80078d2:	230e      	movs	r3, #14
 80078d4:	5ec9      	ldrsh	r1, [r1, r3]
 80078d6:	f000 f811 	bl	80078fc <_close_r>
 80078da:	bd10      	pop	{r4, pc}

080078dc <memset>:
 80078dc:	0003      	movs	r3, r0
 80078de:	1882      	adds	r2, r0, r2
 80078e0:	4293      	cmp	r3, r2
 80078e2:	d100      	bne.n	80078e6 <memset+0xa>
 80078e4:	4770      	bx	lr
 80078e6:	7019      	strb	r1, [r3, #0]
 80078e8:	3301      	adds	r3, #1
 80078ea:	e7f9      	b.n	80078e0 <memset+0x4>

080078ec <__locale_mb_cur_max>:
 80078ec:	2294      	movs	r2, #148	; 0x94
 80078ee:	4b02      	ldr	r3, [pc, #8]	; (80078f8 <__locale_mb_cur_max+0xc>)
 80078f0:	0052      	lsls	r2, r2, #1
 80078f2:	5c98      	ldrb	r0, [r3, r2]
 80078f4:	4770      	bx	lr
 80078f6:	46c0      	nop			; (mov r8, r8)
 80078f8:	2000001c 	.word	0x2000001c

080078fc <_close_r>:
 80078fc:	2300      	movs	r3, #0
 80078fe:	b570      	push	{r4, r5, r6, lr}
 8007900:	4d06      	ldr	r5, [pc, #24]	; (800791c <_close_r+0x20>)
 8007902:	0004      	movs	r4, r0
 8007904:	0008      	movs	r0, r1
 8007906:	602b      	str	r3, [r5, #0]
 8007908:	f7fb fa51 	bl	8002dae <_close>
 800790c:	1c43      	adds	r3, r0, #1
 800790e:	d103      	bne.n	8007918 <_close_r+0x1c>
 8007910:	682b      	ldr	r3, [r5, #0]
 8007912:	2b00      	cmp	r3, #0
 8007914:	d000      	beq.n	8007918 <_close_r+0x1c>
 8007916:	6023      	str	r3, [r4, #0]
 8007918:	bd70      	pop	{r4, r5, r6, pc}
 800791a:	46c0      	nop			; (mov r8, r8)
 800791c:	200009d8 	.word	0x200009d8

08007920 <_lseek_r>:
 8007920:	b570      	push	{r4, r5, r6, lr}
 8007922:	0004      	movs	r4, r0
 8007924:	0008      	movs	r0, r1
 8007926:	0011      	movs	r1, r2
 8007928:	001a      	movs	r2, r3
 800792a:	2300      	movs	r3, #0
 800792c:	4d05      	ldr	r5, [pc, #20]	; (8007944 <_lseek_r+0x24>)
 800792e:	602b      	str	r3, [r5, #0]
 8007930:	f7fb fa5e 	bl	8002df0 <_lseek>
 8007934:	1c43      	adds	r3, r0, #1
 8007936:	d103      	bne.n	8007940 <_lseek_r+0x20>
 8007938:	682b      	ldr	r3, [r5, #0]
 800793a:	2b00      	cmp	r3, #0
 800793c:	d000      	beq.n	8007940 <_lseek_r+0x20>
 800793e:	6023      	str	r3, [r4, #0]
 8007940:	bd70      	pop	{r4, r5, r6, pc}
 8007942:	46c0      	nop			; (mov r8, r8)
 8007944:	200009d8 	.word	0x200009d8

08007948 <_read_r>:
 8007948:	b570      	push	{r4, r5, r6, lr}
 800794a:	0004      	movs	r4, r0
 800794c:	0008      	movs	r0, r1
 800794e:	0011      	movs	r1, r2
 8007950:	001a      	movs	r2, r3
 8007952:	2300      	movs	r3, #0
 8007954:	4d05      	ldr	r5, [pc, #20]	; (800796c <_read_r+0x24>)
 8007956:	602b      	str	r3, [r5, #0]
 8007958:	f7fb f9f0 	bl	8002d3c <_read>
 800795c:	1c43      	adds	r3, r0, #1
 800795e:	d103      	bne.n	8007968 <_read_r+0x20>
 8007960:	682b      	ldr	r3, [r5, #0]
 8007962:	2b00      	cmp	r3, #0
 8007964:	d000      	beq.n	8007968 <_read_r+0x20>
 8007966:	6023      	str	r3, [r4, #0]
 8007968:	bd70      	pop	{r4, r5, r6, pc}
 800796a:	46c0      	nop			; (mov r8, r8)
 800796c:	200009d8 	.word	0x200009d8

08007970 <_write_r>:
 8007970:	b570      	push	{r4, r5, r6, lr}
 8007972:	0004      	movs	r4, r0
 8007974:	0008      	movs	r0, r1
 8007976:	0011      	movs	r1, r2
 8007978:	001a      	movs	r2, r3
 800797a:	2300      	movs	r3, #0
 800797c:	4d05      	ldr	r5, [pc, #20]	; (8007994 <_write_r+0x24>)
 800797e:	602b      	str	r3, [r5, #0]
 8007980:	f7fb f9f9 	bl	8002d76 <_write>
 8007984:	1c43      	adds	r3, r0, #1
 8007986:	d103      	bne.n	8007990 <_write_r+0x20>
 8007988:	682b      	ldr	r3, [r5, #0]
 800798a:	2b00      	cmp	r3, #0
 800798c:	d000      	beq.n	8007990 <_write_r+0x20>
 800798e:	6023      	str	r3, [r4, #0]
 8007990:	bd70      	pop	{r4, r5, r6, pc}
 8007992:	46c0      	nop			; (mov r8, r8)
 8007994:	200009d8 	.word	0x200009d8

08007998 <__errno>:
 8007998:	4b01      	ldr	r3, [pc, #4]	; (80079a0 <__errno+0x8>)
 800799a:	6818      	ldr	r0, [r3, #0]
 800799c:	4770      	bx	lr
 800799e:	46c0      	nop			; (mov r8, r8)
 80079a0:	200002a8 	.word	0x200002a8

080079a4 <__libc_init_array>:
 80079a4:	b570      	push	{r4, r5, r6, lr}
 80079a6:	2600      	movs	r6, #0
 80079a8:	4c0c      	ldr	r4, [pc, #48]	; (80079dc <__libc_init_array+0x38>)
 80079aa:	4d0d      	ldr	r5, [pc, #52]	; (80079e0 <__libc_init_array+0x3c>)
 80079ac:	1b64      	subs	r4, r4, r5
 80079ae:	10a4      	asrs	r4, r4, #2
 80079b0:	42a6      	cmp	r6, r4
 80079b2:	d109      	bne.n	80079c8 <__libc_init_array+0x24>
 80079b4:	2600      	movs	r6, #0
 80079b6:	f004 fced 	bl	800c394 <_init>
 80079ba:	4c0a      	ldr	r4, [pc, #40]	; (80079e4 <__libc_init_array+0x40>)
 80079bc:	4d0a      	ldr	r5, [pc, #40]	; (80079e8 <__libc_init_array+0x44>)
 80079be:	1b64      	subs	r4, r4, r5
 80079c0:	10a4      	asrs	r4, r4, #2
 80079c2:	42a6      	cmp	r6, r4
 80079c4:	d105      	bne.n	80079d2 <__libc_init_array+0x2e>
 80079c6:	bd70      	pop	{r4, r5, r6, pc}
 80079c8:	00b3      	lsls	r3, r6, #2
 80079ca:	58eb      	ldr	r3, [r5, r3]
 80079cc:	4798      	blx	r3
 80079ce:	3601      	adds	r6, #1
 80079d0:	e7ee      	b.n	80079b0 <__libc_init_array+0xc>
 80079d2:	00b3      	lsls	r3, r6, #2
 80079d4:	58eb      	ldr	r3, [r5, r3]
 80079d6:	4798      	blx	r3
 80079d8:	3601      	adds	r6, #1
 80079da:	e7f2      	b.n	80079c2 <__libc_init_array+0x1e>
 80079dc:	0800df74 	.word	0x0800df74
 80079e0:	0800df74 	.word	0x0800df74
 80079e4:	0800df7c 	.word	0x0800df7c
 80079e8:	0800df74 	.word	0x0800df74

080079ec <__retarget_lock_init_recursive>:
 80079ec:	4770      	bx	lr

080079ee <__retarget_lock_close_recursive>:
 80079ee:	4770      	bx	lr

080079f0 <__retarget_lock_acquire_recursive>:
 80079f0:	4770      	bx	lr

080079f2 <__retarget_lock_release_recursive>:
 80079f2:	4770      	bx	lr

080079f4 <memcpy>:
 80079f4:	2300      	movs	r3, #0
 80079f6:	b510      	push	{r4, lr}
 80079f8:	429a      	cmp	r2, r3
 80079fa:	d100      	bne.n	80079fe <memcpy+0xa>
 80079fc:	bd10      	pop	{r4, pc}
 80079fe:	5ccc      	ldrb	r4, [r1, r3]
 8007a00:	54c4      	strb	r4, [r0, r3]
 8007a02:	3301      	adds	r3, #1
 8007a04:	e7f8      	b.n	80079f8 <memcpy+0x4>
	...

08007a08 <register_fini>:
 8007a08:	4b03      	ldr	r3, [pc, #12]	; (8007a18 <register_fini+0x10>)
 8007a0a:	b510      	push	{r4, lr}
 8007a0c:	2b00      	cmp	r3, #0
 8007a0e:	d002      	beq.n	8007a16 <register_fini+0xe>
 8007a10:	4802      	ldr	r0, [pc, #8]	; (8007a1c <register_fini+0x14>)
 8007a12:	f000 f805 	bl	8007a20 <atexit>
 8007a16:	bd10      	pop	{r4, pc}
 8007a18:	00000000 	.word	0x00000000
 8007a1c:	08009e69 	.word	0x08009e69

08007a20 <atexit>:
 8007a20:	2300      	movs	r3, #0
 8007a22:	b510      	push	{r4, lr}
 8007a24:	0001      	movs	r1, r0
 8007a26:	001a      	movs	r2, r3
 8007a28:	0018      	movs	r0, r3
 8007a2a:	f002 fa79 	bl	8009f20 <__register_exitproc>
 8007a2e:	bd10      	pop	{r4, pc}

08007a30 <_malloc_trim_r>:
 8007a30:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8007a32:	0004      	movs	r4, r0
 8007a34:	2008      	movs	r0, #8
 8007a36:	000d      	movs	r5, r1
 8007a38:	f002 fa2a 	bl	8009e90 <sysconf>
 8007a3c:	0006      	movs	r6, r0
 8007a3e:	0020      	movs	r0, r4
 8007a40:	f000 fb22 	bl	8008088 <__malloc_lock>
 8007a44:	2203      	movs	r2, #3
 8007a46:	4f21      	ldr	r7, [pc, #132]	; (8007acc <_malloc_trim_r+0x9c>)
 8007a48:	0031      	movs	r1, r6
 8007a4a:	68bb      	ldr	r3, [r7, #8]
 8007a4c:	685b      	ldr	r3, [r3, #4]
 8007a4e:	4393      	bics	r3, r2
 8007a50:	1b58      	subs	r0, r3, r5
 8007a52:	3811      	subs	r0, #17
 8007a54:	1980      	adds	r0, r0, r6
 8007a56:	9301      	str	r3, [sp, #4]
 8007a58:	f7f8 fb70 	bl	800013c <__udivsi3>
 8007a5c:	1e45      	subs	r5, r0, #1
 8007a5e:	4375      	muls	r5, r6
 8007a60:	42ae      	cmp	r6, r5
 8007a62:	dd04      	ble.n	8007a6e <_malloc_trim_r+0x3e>
 8007a64:	0020      	movs	r0, r4
 8007a66:	f000 fb17 	bl	8008098 <__malloc_unlock>
 8007a6a:	2000      	movs	r0, #0
 8007a6c:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8007a6e:	2100      	movs	r1, #0
 8007a70:	0020      	movs	r0, r4
 8007a72:	f002 f9e7 	bl	8009e44 <_sbrk_r>
 8007a76:	68bb      	ldr	r3, [r7, #8]
 8007a78:	9a01      	ldr	r2, [sp, #4]
 8007a7a:	189b      	adds	r3, r3, r2
 8007a7c:	4298      	cmp	r0, r3
 8007a7e:	d1f1      	bne.n	8007a64 <_malloc_trim_r+0x34>
 8007a80:	0020      	movs	r0, r4
 8007a82:	4269      	negs	r1, r5
 8007a84:	f002 f9de 	bl	8009e44 <_sbrk_r>
 8007a88:	3001      	adds	r0, #1
 8007a8a:	d110      	bne.n	8007aae <_malloc_trim_r+0x7e>
 8007a8c:	2100      	movs	r1, #0
 8007a8e:	0020      	movs	r0, r4
 8007a90:	f002 f9d8 	bl	8009e44 <_sbrk_r>
 8007a94:	68ba      	ldr	r2, [r7, #8]
 8007a96:	1a81      	subs	r1, r0, r2
 8007a98:	290f      	cmp	r1, #15
 8007a9a:	dde3      	ble.n	8007a64 <_malloc_trim_r+0x34>
 8007a9c:	4d0c      	ldr	r5, [pc, #48]	; (8007ad0 <_malloc_trim_r+0xa0>)
 8007a9e:	4b0d      	ldr	r3, [pc, #52]	; (8007ad4 <_malloc_trim_r+0xa4>)
 8007aa0:	682d      	ldr	r5, [r5, #0]
 8007aa2:	1b40      	subs	r0, r0, r5
 8007aa4:	6018      	str	r0, [r3, #0]
 8007aa6:	2301      	movs	r3, #1
 8007aa8:	430b      	orrs	r3, r1
 8007aaa:	6053      	str	r3, [r2, #4]
 8007aac:	e7da      	b.n	8007a64 <_malloc_trim_r+0x34>
 8007aae:	2601      	movs	r6, #1
 8007ab0:	9b01      	ldr	r3, [sp, #4]
 8007ab2:	68ba      	ldr	r2, [r7, #8]
 8007ab4:	1b5b      	subs	r3, r3, r5
 8007ab6:	4333      	orrs	r3, r6
 8007ab8:	6053      	str	r3, [r2, #4]
 8007aba:	4a06      	ldr	r2, [pc, #24]	; (8007ad4 <_malloc_trim_r+0xa4>)
 8007abc:	0020      	movs	r0, r4
 8007abe:	6813      	ldr	r3, [r2, #0]
 8007ac0:	1b5b      	subs	r3, r3, r5
 8007ac2:	6013      	str	r3, [r2, #0]
 8007ac4:	f000 fae8 	bl	8008098 <__malloc_unlock>
 8007ac8:	0030      	movs	r0, r6
 8007aca:	e7cf      	b.n	8007a6c <_malloc_trim_r+0x3c>
 8007acc:	200002b0 	.word	0x200002b0
 8007ad0:	200006b8 	.word	0x200006b8
 8007ad4:	200009e4 	.word	0x200009e4

08007ad8 <_free_r>:
 8007ad8:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8007ada:	1e0d      	subs	r5, r1, #0
 8007adc:	9001      	str	r0, [sp, #4]
 8007ade:	d02d      	beq.n	8007b3c <_free_r+0x64>
 8007ae0:	f000 fad2 	bl	8008088 <__malloc_lock>
 8007ae4:	2301      	movs	r3, #1
 8007ae6:	0029      	movs	r1, r5
 8007ae8:	469c      	mov	ip, r3
 8007aea:	3908      	subs	r1, #8
 8007aec:	684f      	ldr	r7, [r1, #4]
 8007aee:	4662      	mov	r2, ip
 8007af0:	003b      	movs	r3, r7
 8007af2:	4664      	mov	r4, ip
 8007af4:	4393      	bics	r3, r2
 8007af6:	18c8      	adds	r0, r1, r3
 8007af8:	6845      	ldr	r5, [r0, #4]
 8007afa:	3202      	adds	r2, #2
 8007afc:	4395      	bics	r5, r2
 8007afe:	4a4a      	ldr	r2, [pc, #296]	; (8007c28 <_free_r+0x150>)
 8007b00:	4027      	ands	r7, r4
 8007b02:	6896      	ldr	r6, [r2, #8]
 8007b04:	4286      	cmp	r6, r0
 8007b06:	d11a      	bne.n	8007b3e <_free_r+0x66>
 8007b08:	195b      	adds	r3, r3, r5
 8007b0a:	2f00      	cmp	r7, #0
 8007b0c:	d106      	bne.n	8007b1c <_free_r+0x44>
 8007b0e:	6808      	ldr	r0, [r1, #0]
 8007b10:	1a09      	subs	r1, r1, r0
 8007b12:	688d      	ldr	r5, [r1, #8]
 8007b14:	181b      	adds	r3, r3, r0
 8007b16:	68c8      	ldr	r0, [r1, #12]
 8007b18:	60e8      	str	r0, [r5, #12]
 8007b1a:	6085      	str	r5, [r0, #8]
 8007b1c:	2001      	movs	r0, #1
 8007b1e:	4318      	orrs	r0, r3
 8007b20:	6048      	str	r0, [r1, #4]
 8007b22:	6091      	str	r1, [r2, #8]
 8007b24:	4a41      	ldr	r2, [pc, #260]	; (8007c2c <_free_r+0x154>)
 8007b26:	6812      	ldr	r2, [r2, #0]
 8007b28:	429a      	cmp	r2, r3
 8007b2a:	d804      	bhi.n	8007b36 <_free_r+0x5e>
 8007b2c:	4b40      	ldr	r3, [pc, #256]	; (8007c30 <_free_r+0x158>)
 8007b2e:	9801      	ldr	r0, [sp, #4]
 8007b30:	6819      	ldr	r1, [r3, #0]
 8007b32:	f7ff ff7d 	bl	8007a30 <_malloc_trim_r>
 8007b36:	9801      	ldr	r0, [sp, #4]
 8007b38:	f000 faae 	bl	8008098 <__malloc_unlock>
 8007b3c:	bdf7      	pop	{r0, r1, r2, r4, r5, r6, r7, pc}
 8007b3e:	2600      	movs	r6, #0
 8007b40:	6045      	str	r5, [r0, #4]
 8007b42:	42b7      	cmp	r7, r6
 8007b44:	d109      	bne.n	8007b5a <_free_r+0x82>
 8007b46:	680f      	ldr	r7, [r1, #0]
 8007b48:	4c3a      	ldr	r4, [pc, #232]	; (8007c34 <_free_r+0x15c>)
 8007b4a:	1bc9      	subs	r1, r1, r7
 8007b4c:	19db      	adds	r3, r3, r7
 8007b4e:	688f      	ldr	r7, [r1, #8]
 8007b50:	42a7      	cmp	r7, r4
 8007b52:	d02c      	beq.n	8007bae <_free_r+0xd6>
 8007b54:	68cc      	ldr	r4, [r1, #12]
 8007b56:	60fc      	str	r4, [r7, #12]
 8007b58:	60a7      	str	r7, [r4, #8]
 8007b5a:	1947      	adds	r7, r0, r5
 8007b5c:	687c      	ldr	r4, [r7, #4]
 8007b5e:	2701      	movs	r7, #1
 8007b60:	423c      	tst	r4, r7
 8007b62:	d10b      	bne.n	8007b7c <_free_r+0xa4>
 8007b64:	195b      	adds	r3, r3, r5
 8007b66:	6885      	ldr	r5, [r0, #8]
 8007b68:	2e00      	cmp	r6, #0
 8007b6a:	d122      	bne.n	8007bb2 <_free_r+0xda>
 8007b6c:	4c31      	ldr	r4, [pc, #196]	; (8007c34 <_free_r+0x15c>)
 8007b6e:	42a5      	cmp	r5, r4
 8007b70:	d11f      	bne.n	8007bb2 <_free_r+0xda>
 8007b72:	003e      	movs	r6, r7
 8007b74:	6151      	str	r1, [r2, #20]
 8007b76:	6111      	str	r1, [r2, #16]
 8007b78:	60cd      	str	r5, [r1, #12]
 8007b7a:	608d      	str	r5, [r1, #8]
 8007b7c:	2501      	movs	r5, #1
 8007b7e:	0028      	movs	r0, r5
 8007b80:	4318      	orrs	r0, r3
 8007b82:	6048      	str	r0, [r1, #4]
 8007b84:	50cb      	str	r3, [r1, r3]
 8007b86:	2e00      	cmp	r6, #0
 8007b88:	d1d5      	bne.n	8007b36 <_free_r+0x5e>
 8007b8a:	2080      	movs	r0, #128	; 0x80
 8007b8c:	0080      	lsls	r0, r0, #2
 8007b8e:	4283      	cmp	r3, r0
 8007b90:	d213      	bcs.n	8007bba <_free_r+0xe2>
 8007b92:	08d8      	lsrs	r0, r3, #3
 8007b94:	095b      	lsrs	r3, r3, #5
 8007b96:	409d      	lsls	r5, r3
 8007b98:	6853      	ldr	r3, [r2, #4]
 8007b9a:	431d      	orrs	r5, r3
 8007b9c:	00c3      	lsls	r3, r0, #3
 8007b9e:	189b      	adds	r3, r3, r2
 8007ba0:	6055      	str	r5, [r2, #4]
 8007ba2:	689a      	ldr	r2, [r3, #8]
 8007ba4:	60cb      	str	r3, [r1, #12]
 8007ba6:	608a      	str	r2, [r1, #8]
 8007ba8:	6099      	str	r1, [r3, #8]
 8007baa:	60d1      	str	r1, [r2, #12]
 8007bac:	e7c3      	b.n	8007b36 <_free_r+0x5e>
 8007bae:	4666      	mov	r6, ip
 8007bb0:	e7d3      	b.n	8007b5a <_free_r+0x82>
 8007bb2:	68c0      	ldr	r0, [r0, #12]
 8007bb4:	60e8      	str	r0, [r5, #12]
 8007bb6:	6085      	str	r5, [r0, #8]
 8007bb8:	e7e0      	b.n	8007b7c <_free_r+0xa4>
 8007bba:	0a5d      	lsrs	r5, r3, #9
 8007bbc:	2d04      	cmp	r5, #4
 8007bbe:	d812      	bhi.n	8007be6 <_free_r+0x10e>
 8007bc0:	0998      	lsrs	r0, r3, #6
 8007bc2:	3038      	adds	r0, #56	; 0x38
 8007bc4:	00c6      	lsls	r6, r0, #3
 8007bc6:	18b6      	adds	r6, r6, r2
 8007bc8:	68b5      	ldr	r5, [r6, #8]
 8007bca:	2703      	movs	r7, #3
 8007bcc:	42ae      	cmp	r6, r5
 8007bce:	d125      	bne.n	8007c1c <_free_r+0x144>
 8007bd0:	2301      	movs	r3, #1
 8007bd2:	1080      	asrs	r0, r0, #2
 8007bd4:	4083      	lsls	r3, r0
 8007bd6:	6850      	ldr	r0, [r2, #4]
 8007bd8:	4303      	orrs	r3, r0
 8007bda:	6053      	str	r3, [r2, #4]
 8007bdc:	60ce      	str	r6, [r1, #12]
 8007bde:	608d      	str	r5, [r1, #8]
 8007be0:	60b1      	str	r1, [r6, #8]
 8007be2:	60e9      	str	r1, [r5, #12]
 8007be4:	e7a7      	b.n	8007b36 <_free_r+0x5e>
 8007be6:	2d14      	cmp	r5, #20
 8007be8:	d802      	bhi.n	8007bf0 <_free_r+0x118>
 8007bea:	0028      	movs	r0, r5
 8007bec:	305b      	adds	r0, #91	; 0x5b
 8007bee:	e7e9      	b.n	8007bc4 <_free_r+0xec>
 8007bf0:	2d54      	cmp	r5, #84	; 0x54
 8007bf2:	d802      	bhi.n	8007bfa <_free_r+0x122>
 8007bf4:	0b18      	lsrs	r0, r3, #12
 8007bf6:	306e      	adds	r0, #110	; 0x6e
 8007bf8:	e7e4      	b.n	8007bc4 <_free_r+0xec>
 8007bfa:	20aa      	movs	r0, #170	; 0xaa
 8007bfc:	0040      	lsls	r0, r0, #1
 8007bfe:	4285      	cmp	r5, r0
 8007c00:	d802      	bhi.n	8007c08 <_free_r+0x130>
 8007c02:	0bd8      	lsrs	r0, r3, #15
 8007c04:	3077      	adds	r0, #119	; 0x77
 8007c06:	e7dd      	b.n	8007bc4 <_free_r+0xec>
 8007c08:	4e0b      	ldr	r6, [pc, #44]	; (8007c38 <_free_r+0x160>)
 8007c0a:	207e      	movs	r0, #126	; 0x7e
 8007c0c:	42b5      	cmp	r5, r6
 8007c0e:	d8d9      	bhi.n	8007bc4 <_free_r+0xec>
 8007c10:	0c98      	lsrs	r0, r3, #18
 8007c12:	307c      	adds	r0, #124	; 0x7c
 8007c14:	e7d6      	b.n	8007bc4 <_free_r+0xec>
 8007c16:	68ad      	ldr	r5, [r5, #8]
 8007c18:	42ae      	cmp	r6, r5
 8007c1a:	d003      	beq.n	8007c24 <_free_r+0x14c>
 8007c1c:	686a      	ldr	r2, [r5, #4]
 8007c1e:	43ba      	bics	r2, r7
 8007c20:	429a      	cmp	r2, r3
 8007c22:	d8f8      	bhi.n	8007c16 <_free_r+0x13e>
 8007c24:	68ee      	ldr	r6, [r5, #12]
 8007c26:	e7d9      	b.n	8007bdc <_free_r+0x104>
 8007c28:	200002b0 	.word	0x200002b0
 8007c2c:	200006bc 	.word	0x200006bc
 8007c30:	20000a14 	.word	0x20000a14
 8007c34:	200002b8 	.word	0x200002b8
 8007c38:	00000554 	.word	0x00000554

08007c3c <_malloc_r>:
 8007c3c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8007c3e:	000d      	movs	r5, r1
 8007c40:	b087      	sub	sp, #28
 8007c42:	350b      	adds	r5, #11
 8007c44:	9001      	str	r0, [sp, #4]
 8007c46:	2d16      	cmp	r5, #22
 8007c48:	d908      	bls.n	8007c5c <_malloc_r+0x20>
 8007c4a:	2207      	movs	r2, #7
 8007c4c:	4395      	bics	r5, r2
 8007c4e:	d506      	bpl.n	8007c5e <_malloc_r+0x22>
 8007c50:	230c      	movs	r3, #12
 8007c52:	9a01      	ldr	r2, [sp, #4]
 8007c54:	6013      	str	r3, [r2, #0]
 8007c56:	2000      	movs	r0, #0
 8007c58:	b007      	add	sp, #28
 8007c5a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8007c5c:	2510      	movs	r5, #16
 8007c5e:	42a9      	cmp	r1, r5
 8007c60:	d8f6      	bhi.n	8007c50 <_malloc_r+0x14>
 8007c62:	9801      	ldr	r0, [sp, #4]
 8007c64:	f000 fa10 	bl	8008088 <__malloc_lock>
 8007c68:	23fc      	movs	r3, #252	; 0xfc
 8007c6a:	4ebe      	ldr	r6, [pc, #760]	; (8007f64 <_malloc_r+0x328>)
 8007c6c:	005b      	lsls	r3, r3, #1
 8007c6e:	429d      	cmp	r5, r3
 8007c70:	d219      	bcs.n	8007ca6 <_malloc_r+0x6a>
 8007c72:	002a      	movs	r2, r5
 8007c74:	3208      	adds	r2, #8
 8007c76:	18b2      	adds	r2, r6, r2
 8007c78:	0011      	movs	r1, r2
 8007c7a:	6854      	ldr	r4, [r2, #4]
 8007c7c:	3908      	subs	r1, #8
 8007c7e:	08eb      	lsrs	r3, r5, #3
 8007c80:	428c      	cmp	r4, r1
 8007c82:	d103      	bne.n	8007c8c <_malloc_r+0x50>
 8007c84:	68d4      	ldr	r4, [r2, #12]
 8007c86:	3302      	adds	r3, #2
 8007c88:	42a2      	cmp	r2, r4
 8007c8a:	d022      	beq.n	8007cd2 <_malloc_r+0x96>
 8007c8c:	2203      	movs	r2, #3
 8007c8e:	6863      	ldr	r3, [r4, #4]
 8007c90:	68a1      	ldr	r1, [r4, #8]
 8007c92:	4393      	bics	r3, r2
 8007c94:	68e2      	ldr	r2, [r4, #12]
 8007c96:	18e3      	adds	r3, r4, r3
 8007c98:	60ca      	str	r2, [r1, #12]
 8007c9a:	6091      	str	r1, [r2, #8]
 8007c9c:	2201      	movs	r2, #1
 8007c9e:	6859      	ldr	r1, [r3, #4]
 8007ca0:	430a      	orrs	r2, r1
 8007ca2:	605a      	str	r2, [r3, #4]
 8007ca4:	e02a      	b.n	8007cfc <_malloc_r+0xc0>
 8007ca6:	233f      	movs	r3, #63	; 0x3f
 8007ca8:	0a6a      	lsrs	r2, r5, #9
 8007caa:	d003      	beq.n	8007cb4 <_malloc_r+0x78>
 8007cac:	2a04      	cmp	r2, #4
 8007cae:	d82b      	bhi.n	8007d08 <_malloc_r+0xcc>
 8007cb0:	09ab      	lsrs	r3, r5, #6
 8007cb2:	3338      	adds	r3, #56	; 0x38
 8007cb4:	2203      	movs	r2, #3
 8007cb6:	4694      	mov	ip, r2
 8007cb8:	00d9      	lsls	r1, r3, #3
 8007cba:	1989      	adds	r1, r1, r6
 8007cbc:	68cc      	ldr	r4, [r1, #12]
 8007cbe:	428c      	cmp	r4, r1
 8007cc0:	d006      	beq.n	8007cd0 <_malloc_r+0x94>
 8007cc2:	4660      	mov	r0, ip
 8007cc4:	6862      	ldr	r2, [r4, #4]
 8007cc6:	4382      	bics	r2, r0
 8007cc8:	1b57      	subs	r7, r2, r5
 8007cca:	2f0f      	cmp	r7, #15
 8007ccc:	dd34      	ble.n	8007d38 <_malloc_r+0xfc>
 8007cce:	3b01      	subs	r3, #1
 8007cd0:	3301      	adds	r3, #1
 8007cd2:	6934      	ldr	r4, [r6, #16]
 8007cd4:	49a4      	ldr	r1, [pc, #656]	; (8007f68 <_malloc_r+0x32c>)
 8007cd6:	428c      	cmp	r4, r1
 8007cd8:	d055      	beq.n	8007d86 <_malloc_r+0x14a>
 8007cda:	2003      	movs	r0, #3
 8007cdc:	6862      	ldr	r2, [r4, #4]
 8007cde:	4382      	bics	r2, r0
 8007ce0:	1b50      	subs	r0, r2, r5
 8007ce2:	280f      	cmp	r0, #15
 8007ce4:	dd36      	ble.n	8007d54 <_malloc_r+0x118>
 8007ce6:	2301      	movs	r3, #1
 8007ce8:	1967      	adds	r7, r4, r5
 8007cea:	431d      	orrs	r5, r3
 8007cec:	4303      	orrs	r3, r0
 8007cee:	6065      	str	r5, [r4, #4]
 8007cf0:	6177      	str	r7, [r6, #20]
 8007cf2:	6137      	str	r7, [r6, #16]
 8007cf4:	60f9      	str	r1, [r7, #12]
 8007cf6:	60b9      	str	r1, [r7, #8]
 8007cf8:	607b      	str	r3, [r7, #4]
 8007cfa:	50a0      	str	r0, [r4, r2]
 8007cfc:	9801      	ldr	r0, [sp, #4]
 8007cfe:	f000 f9cb 	bl	8008098 <__malloc_unlock>
 8007d02:	0020      	movs	r0, r4
 8007d04:	3008      	adds	r0, #8
 8007d06:	e7a7      	b.n	8007c58 <_malloc_r+0x1c>
 8007d08:	2a14      	cmp	r2, #20
 8007d0a:	d802      	bhi.n	8007d12 <_malloc_r+0xd6>
 8007d0c:	0013      	movs	r3, r2
 8007d0e:	335b      	adds	r3, #91	; 0x5b
 8007d10:	e7d0      	b.n	8007cb4 <_malloc_r+0x78>
 8007d12:	2a54      	cmp	r2, #84	; 0x54
 8007d14:	d802      	bhi.n	8007d1c <_malloc_r+0xe0>
 8007d16:	0b2b      	lsrs	r3, r5, #12
 8007d18:	336e      	adds	r3, #110	; 0x6e
 8007d1a:	e7cb      	b.n	8007cb4 <_malloc_r+0x78>
 8007d1c:	23aa      	movs	r3, #170	; 0xaa
 8007d1e:	005b      	lsls	r3, r3, #1
 8007d20:	429a      	cmp	r2, r3
 8007d22:	d802      	bhi.n	8007d2a <_malloc_r+0xee>
 8007d24:	0beb      	lsrs	r3, r5, #15
 8007d26:	3377      	adds	r3, #119	; 0x77
 8007d28:	e7c4      	b.n	8007cb4 <_malloc_r+0x78>
 8007d2a:	4990      	ldr	r1, [pc, #576]	; (8007f6c <_malloc_r+0x330>)
 8007d2c:	237e      	movs	r3, #126	; 0x7e
 8007d2e:	428a      	cmp	r2, r1
 8007d30:	d8c0      	bhi.n	8007cb4 <_malloc_r+0x78>
 8007d32:	0cab      	lsrs	r3, r5, #18
 8007d34:	337c      	adds	r3, #124	; 0x7c
 8007d36:	e7bd      	b.n	8007cb4 <_malloc_r+0x78>
 8007d38:	68e0      	ldr	r0, [r4, #12]
 8007d3a:	2f00      	cmp	r7, #0
 8007d3c:	db08      	blt.n	8007d50 <_malloc_r+0x114>
 8007d3e:	68a3      	ldr	r3, [r4, #8]
 8007d40:	60d8      	str	r0, [r3, #12]
 8007d42:	6083      	str	r3, [r0, #8]
 8007d44:	2301      	movs	r3, #1
 8007d46:	18a2      	adds	r2, r4, r2
 8007d48:	6851      	ldr	r1, [r2, #4]
 8007d4a:	430b      	orrs	r3, r1
 8007d4c:	6053      	str	r3, [r2, #4]
 8007d4e:	e7d5      	b.n	8007cfc <_malloc_r+0xc0>
 8007d50:	0004      	movs	r4, r0
 8007d52:	e7b4      	b.n	8007cbe <_malloc_r+0x82>
 8007d54:	6171      	str	r1, [r6, #20]
 8007d56:	6131      	str	r1, [r6, #16]
 8007d58:	2800      	cmp	r0, #0
 8007d5a:	daf3      	bge.n	8007d44 <_malloc_r+0x108>
 8007d5c:	6871      	ldr	r1, [r6, #4]
 8007d5e:	468c      	mov	ip, r1
 8007d60:	2180      	movs	r1, #128	; 0x80
 8007d62:	0089      	lsls	r1, r1, #2
 8007d64:	428a      	cmp	r2, r1
 8007d66:	d300      	bcc.n	8007d6a <_malloc_r+0x12e>
 8007d68:	e08c      	b.n	8007e84 <_malloc_r+0x248>
 8007d6a:	08d1      	lsrs	r1, r2, #3
 8007d6c:	0950      	lsrs	r0, r2, #5
 8007d6e:	2201      	movs	r2, #1
 8007d70:	4082      	lsls	r2, r0
 8007d72:	4660      	mov	r0, ip
 8007d74:	4302      	orrs	r2, r0
 8007d76:	6072      	str	r2, [r6, #4]
 8007d78:	00ca      	lsls	r2, r1, #3
 8007d7a:	1992      	adds	r2, r2, r6
 8007d7c:	6891      	ldr	r1, [r2, #8]
 8007d7e:	60e2      	str	r2, [r4, #12]
 8007d80:	60a1      	str	r1, [r4, #8]
 8007d82:	6094      	str	r4, [r2, #8]
 8007d84:	60cc      	str	r4, [r1, #12]
 8007d86:	2201      	movs	r2, #1
 8007d88:	4876      	ldr	r0, [pc, #472]	; (8007f64 <_malloc_r+0x328>)
 8007d8a:	1099      	asrs	r1, r3, #2
 8007d8c:	408a      	lsls	r2, r1
 8007d8e:	6841      	ldr	r1, [r0, #4]
 8007d90:	4291      	cmp	r1, r2
 8007d92:	d328      	bcc.n	8007de6 <_malloc_r+0x1aa>
 8007d94:	420a      	tst	r2, r1
 8007d96:	d105      	bne.n	8007da4 <_malloc_r+0x168>
 8007d98:	2403      	movs	r4, #3
 8007d9a:	43a3      	bics	r3, r4
 8007d9c:	0052      	lsls	r2, r2, #1
 8007d9e:	3304      	adds	r3, #4
 8007da0:	420a      	tst	r2, r1
 8007da2:	d0fb      	beq.n	8007d9c <_malloc_r+0x160>
 8007da4:	496f      	ldr	r1, [pc, #444]	; (8007f64 <_malloc_r+0x328>)
 8007da6:	9104      	str	r1, [sp, #16]
 8007da8:	00d9      	lsls	r1, r3, #3
 8007daa:	1841      	adds	r1, r0, r1
 8007dac:	468c      	mov	ip, r1
 8007dae:	000f      	movs	r7, r1
 8007db0:	9302      	str	r3, [sp, #8]
 8007db2:	68fc      	ldr	r4, [r7, #12]
 8007db4:	42bc      	cmp	r4, r7
 8007db6:	d000      	beq.n	8007dba <_malloc_r+0x17e>
 8007db8:	e09b      	b.n	8007ef2 <_malloc_r+0x2b6>
 8007dba:	2403      	movs	r4, #3
 8007dbc:	9902      	ldr	r1, [sp, #8]
 8007dbe:	3708      	adds	r7, #8
 8007dc0:	3101      	adds	r1, #1
 8007dc2:	9102      	str	r1, [sp, #8]
 8007dc4:	4221      	tst	r1, r4
 8007dc6:	d1f4      	bne.n	8007db2 <_malloc_r+0x176>
 8007dc8:	2103      	movs	r1, #3
 8007dca:	420b      	tst	r3, r1
 8007dcc:	d000      	beq.n	8007dd0 <_malloc_r+0x194>
 8007dce:	e0b7      	b.n	8007f40 <_malloc_r+0x304>
 8007dd0:	6843      	ldr	r3, [r0, #4]
 8007dd2:	4393      	bics	r3, r2
 8007dd4:	6043      	str	r3, [r0, #4]
 8007dd6:	9b04      	ldr	r3, [sp, #16]
 8007dd8:	0052      	lsls	r2, r2, #1
 8007dda:	6859      	ldr	r1, [r3, #4]
 8007ddc:	4291      	cmp	r1, r2
 8007dde:	d302      	bcc.n	8007de6 <_malloc_r+0x1aa>
 8007de0:	2a00      	cmp	r2, #0
 8007de2:	d000      	beq.n	8007de6 <_malloc_r+0x1aa>
 8007de4:	e0bb      	b.n	8007f5e <_malloc_r+0x322>
 8007de6:	2203      	movs	r2, #3
 8007de8:	6883      	ldr	r3, [r0, #8]
 8007dea:	9302      	str	r3, [sp, #8]
 8007dec:	685b      	ldr	r3, [r3, #4]
 8007dee:	4393      	bics	r3, r2
 8007df0:	9303      	str	r3, [sp, #12]
 8007df2:	42ab      	cmp	r3, r5
 8007df4:	d303      	bcc.n	8007dfe <_malloc_r+0x1c2>
 8007df6:	1b59      	subs	r1, r3, r5
 8007df8:	290f      	cmp	r1, #15
 8007dfa:	dd00      	ble.n	8007dfe <_malloc_r+0x1c2>
 8007dfc:	e123      	b.n	8008046 <_malloc_r+0x40a>
 8007dfe:	9b02      	ldr	r3, [sp, #8]
 8007e00:	9a03      	ldr	r2, [sp, #12]
 8007e02:	2008      	movs	r0, #8
 8007e04:	189e      	adds	r6, r3, r2
 8007e06:	4b5a      	ldr	r3, [pc, #360]	; (8007f70 <_malloc_r+0x334>)
 8007e08:	681f      	ldr	r7, [r3, #0]
 8007e0a:	f002 f841 	bl	8009e90 <sysconf>
 8007e0e:	4b59      	ldr	r3, [pc, #356]	; (8007f74 <_malloc_r+0x338>)
 8007e10:	3710      	adds	r7, #16
 8007e12:	681b      	ldr	r3, [r3, #0]
 8007e14:	197f      	adds	r7, r7, r5
 8007e16:	9004      	str	r0, [sp, #16]
 8007e18:	3301      	adds	r3, #1
 8007e1a:	d003      	beq.n	8007e24 <_malloc_r+0x1e8>
 8007e1c:	1e7b      	subs	r3, r7, #1
 8007e1e:	181b      	adds	r3, r3, r0
 8007e20:	4247      	negs	r7, r0
 8007e22:	401f      	ands	r7, r3
 8007e24:	0039      	movs	r1, r7
 8007e26:	9801      	ldr	r0, [sp, #4]
 8007e28:	f002 f80c 	bl	8009e44 <_sbrk_r>
 8007e2c:	0004      	movs	r4, r0
 8007e2e:	1c43      	adds	r3, r0, #1
 8007e30:	d100      	bne.n	8007e34 <_malloc_r+0x1f8>
 8007e32:	e0de      	b.n	8007ff2 <_malloc_r+0x3b6>
 8007e34:	4286      	cmp	r6, r0
 8007e36:	d904      	bls.n	8007e42 <_malloc_r+0x206>
 8007e38:	4b4a      	ldr	r3, [pc, #296]	; (8007f64 <_malloc_r+0x328>)
 8007e3a:	9a02      	ldr	r2, [sp, #8]
 8007e3c:	429a      	cmp	r2, r3
 8007e3e:	d000      	beq.n	8007e42 <_malloc_r+0x206>
 8007e40:	e0d7      	b.n	8007ff2 <_malloc_r+0x3b6>
 8007e42:	4a4d      	ldr	r2, [pc, #308]	; (8007f78 <_malloc_r+0x33c>)
 8007e44:	6813      	ldr	r3, [r2, #0]
 8007e46:	18fb      	adds	r3, r7, r3
 8007e48:	6013      	str	r3, [r2, #0]
 8007e4a:	9a04      	ldr	r2, [sp, #16]
 8007e4c:	3a01      	subs	r2, #1
 8007e4e:	42a6      	cmp	r6, r4
 8007e50:	d000      	beq.n	8007e54 <_malloc_r+0x218>
 8007e52:	e097      	b.n	8007f84 <_malloc_r+0x348>
 8007e54:	4216      	tst	r6, r2
 8007e56:	d000      	beq.n	8007e5a <_malloc_r+0x21e>
 8007e58:	e094      	b.n	8007f84 <_malloc_r+0x348>
 8007e5a:	4b42      	ldr	r3, [pc, #264]	; (8007f64 <_malloc_r+0x328>)
 8007e5c:	689a      	ldr	r2, [r3, #8]
 8007e5e:	9b03      	ldr	r3, [sp, #12]
 8007e60:	19df      	adds	r7, r3, r7
 8007e62:	2301      	movs	r3, #1
 8007e64:	433b      	orrs	r3, r7
 8007e66:	6053      	str	r3, [r2, #4]
 8007e68:	4b43      	ldr	r3, [pc, #268]	; (8007f78 <_malloc_r+0x33c>)
 8007e6a:	4a44      	ldr	r2, [pc, #272]	; (8007f7c <_malloc_r+0x340>)
 8007e6c:	681b      	ldr	r3, [r3, #0]
 8007e6e:	6811      	ldr	r1, [r2, #0]
 8007e70:	428b      	cmp	r3, r1
 8007e72:	d900      	bls.n	8007e76 <_malloc_r+0x23a>
 8007e74:	6013      	str	r3, [r2, #0]
 8007e76:	4a42      	ldr	r2, [pc, #264]	; (8007f80 <_malloc_r+0x344>)
 8007e78:	6811      	ldr	r1, [r2, #0]
 8007e7a:	428b      	cmp	r3, r1
 8007e7c:	d800      	bhi.n	8007e80 <_malloc_r+0x244>
 8007e7e:	e0b8      	b.n	8007ff2 <_malloc_r+0x3b6>
 8007e80:	6013      	str	r3, [r2, #0]
 8007e82:	e0b6      	b.n	8007ff2 <_malloc_r+0x3b6>
 8007e84:	0a50      	lsrs	r0, r2, #9
 8007e86:	2804      	cmp	r0, #4
 8007e88:	d811      	bhi.n	8007eae <_malloc_r+0x272>
 8007e8a:	0991      	lsrs	r1, r2, #6
 8007e8c:	3138      	adds	r1, #56	; 0x38
 8007e8e:	00cf      	lsls	r7, r1, #3
 8007e90:	19bf      	adds	r7, r7, r6
 8007e92:	68b8      	ldr	r0, [r7, #8]
 8007e94:	4287      	cmp	r7, r0
 8007e96:	d125      	bne.n	8007ee4 <_malloc_r+0x2a8>
 8007e98:	2201      	movs	r2, #1
 8007e9a:	1089      	asrs	r1, r1, #2
 8007e9c:	408a      	lsls	r2, r1
 8007e9e:	4661      	mov	r1, ip
 8007ea0:	430a      	orrs	r2, r1
 8007ea2:	6072      	str	r2, [r6, #4]
 8007ea4:	60e7      	str	r7, [r4, #12]
 8007ea6:	60a0      	str	r0, [r4, #8]
 8007ea8:	60bc      	str	r4, [r7, #8]
 8007eaa:	60c4      	str	r4, [r0, #12]
 8007eac:	e76b      	b.n	8007d86 <_malloc_r+0x14a>
 8007eae:	2814      	cmp	r0, #20
 8007eb0:	d802      	bhi.n	8007eb8 <_malloc_r+0x27c>
 8007eb2:	0001      	movs	r1, r0
 8007eb4:	315b      	adds	r1, #91	; 0x5b
 8007eb6:	e7ea      	b.n	8007e8e <_malloc_r+0x252>
 8007eb8:	2854      	cmp	r0, #84	; 0x54
 8007eba:	d802      	bhi.n	8007ec2 <_malloc_r+0x286>
 8007ebc:	0b11      	lsrs	r1, r2, #12
 8007ebe:	316e      	adds	r1, #110	; 0x6e
 8007ec0:	e7e5      	b.n	8007e8e <_malloc_r+0x252>
 8007ec2:	21aa      	movs	r1, #170	; 0xaa
 8007ec4:	0049      	lsls	r1, r1, #1
 8007ec6:	4288      	cmp	r0, r1
 8007ec8:	d802      	bhi.n	8007ed0 <_malloc_r+0x294>
 8007eca:	0bd1      	lsrs	r1, r2, #15
 8007ecc:	3177      	adds	r1, #119	; 0x77
 8007ece:	e7de      	b.n	8007e8e <_malloc_r+0x252>
 8007ed0:	4f26      	ldr	r7, [pc, #152]	; (8007f6c <_malloc_r+0x330>)
 8007ed2:	217e      	movs	r1, #126	; 0x7e
 8007ed4:	42b8      	cmp	r0, r7
 8007ed6:	d8da      	bhi.n	8007e8e <_malloc_r+0x252>
 8007ed8:	0c91      	lsrs	r1, r2, #18
 8007eda:	317c      	adds	r1, #124	; 0x7c
 8007edc:	e7d7      	b.n	8007e8e <_malloc_r+0x252>
 8007ede:	6880      	ldr	r0, [r0, #8]
 8007ee0:	4287      	cmp	r7, r0
 8007ee2:	d004      	beq.n	8007eee <_malloc_r+0x2b2>
 8007ee4:	2603      	movs	r6, #3
 8007ee6:	6841      	ldr	r1, [r0, #4]
 8007ee8:	43b1      	bics	r1, r6
 8007eea:	4291      	cmp	r1, r2
 8007eec:	d8f7      	bhi.n	8007ede <_malloc_r+0x2a2>
 8007eee:	68c7      	ldr	r7, [r0, #12]
 8007ef0:	e7d8      	b.n	8007ea4 <_malloc_r+0x268>
 8007ef2:	2603      	movs	r6, #3
 8007ef4:	6861      	ldr	r1, [r4, #4]
 8007ef6:	43b1      	bics	r1, r6
 8007ef8:	9103      	str	r1, [sp, #12]
 8007efa:	68e6      	ldr	r6, [r4, #12]
 8007efc:	1b49      	subs	r1, r1, r5
 8007efe:	290f      	cmp	r1, #15
 8007f00:	dd10      	ble.n	8007f24 <_malloc_r+0x2e8>
 8007f02:	2201      	movs	r2, #1
 8007f04:	1963      	adds	r3, r4, r5
 8007f06:	4315      	orrs	r5, r2
 8007f08:	6065      	str	r5, [r4, #4]
 8007f0a:	68a5      	ldr	r5, [r4, #8]
 8007f0c:	430a      	orrs	r2, r1
 8007f0e:	60ee      	str	r6, [r5, #12]
 8007f10:	60b5      	str	r5, [r6, #8]
 8007f12:	6143      	str	r3, [r0, #20]
 8007f14:	6103      	str	r3, [r0, #16]
 8007f16:	4814      	ldr	r0, [pc, #80]	; (8007f68 <_malloc_r+0x32c>)
 8007f18:	605a      	str	r2, [r3, #4]
 8007f1a:	60d8      	str	r0, [r3, #12]
 8007f1c:	6098      	str	r0, [r3, #8]
 8007f1e:	9b03      	ldr	r3, [sp, #12]
 8007f20:	50e1      	str	r1, [r4, r3]
 8007f22:	e6eb      	b.n	8007cfc <_malloc_r+0xc0>
 8007f24:	2900      	cmp	r1, #0
 8007f26:	db09      	blt.n	8007f3c <_malloc_r+0x300>
 8007f28:	9b03      	ldr	r3, [sp, #12]
 8007f2a:	18e1      	adds	r1, r4, r3
 8007f2c:	2301      	movs	r3, #1
 8007f2e:	684a      	ldr	r2, [r1, #4]
 8007f30:	4313      	orrs	r3, r2
 8007f32:	604b      	str	r3, [r1, #4]
 8007f34:	68a3      	ldr	r3, [r4, #8]
 8007f36:	60de      	str	r6, [r3, #12]
 8007f38:	60b3      	str	r3, [r6, #8]
 8007f3a:	e6df      	b.n	8007cfc <_malloc_r+0xc0>
 8007f3c:	0034      	movs	r4, r6
 8007f3e:	e739      	b.n	8007db4 <_malloc_r+0x178>
 8007f40:	2108      	movs	r1, #8
 8007f42:	4249      	negs	r1, r1
 8007f44:	448c      	add	ip, r1
 8007f46:	4661      	mov	r1, ip
 8007f48:	6889      	ldr	r1, [r1, #8]
 8007f4a:	3b01      	subs	r3, #1
 8007f4c:	4561      	cmp	r1, ip
 8007f4e:	d100      	bne.n	8007f52 <_malloc_r+0x316>
 8007f50:	e73a      	b.n	8007dc8 <_malloc_r+0x18c>
 8007f52:	e740      	b.n	8007dd6 <_malloc_r+0x19a>
 8007f54:	3304      	adds	r3, #4
 8007f56:	0052      	lsls	r2, r2, #1
 8007f58:	420a      	tst	r2, r1
 8007f5a:	d0fb      	beq.n	8007f54 <_malloc_r+0x318>
 8007f5c:	e724      	b.n	8007da8 <_malloc_r+0x16c>
 8007f5e:	9b02      	ldr	r3, [sp, #8]
 8007f60:	e7fa      	b.n	8007f58 <_malloc_r+0x31c>
 8007f62:	46c0      	nop			; (mov r8, r8)
 8007f64:	200002b0 	.word	0x200002b0
 8007f68:	200002b8 	.word	0x200002b8
 8007f6c:	00000554 	.word	0x00000554
 8007f70:	20000a14 	.word	0x20000a14
 8007f74:	200006b8 	.word	0x200006b8
 8007f78:	200009e4 	.word	0x200009e4
 8007f7c:	20000a0c 	.word	0x20000a0c
 8007f80:	20000a10 	.word	0x20000a10
 8007f84:	4934      	ldr	r1, [pc, #208]	; (8008058 <_malloc_r+0x41c>)
 8007f86:	6808      	ldr	r0, [r1, #0]
 8007f88:	3001      	adds	r0, #1
 8007f8a:	d140      	bne.n	800800e <_malloc_r+0x3d2>
 8007f8c:	600c      	str	r4, [r1, #0]
 8007f8e:	2107      	movs	r1, #7
 8007f90:	0026      	movs	r6, r4
 8007f92:	2300      	movs	r3, #0
 8007f94:	400e      	ands	r6, r1
 8007f96:	420c      	tst	r4, r1
 8007f98:	d002      	beq.n	8007fa0 <_malloc_r+0x364>
 8007f9a:	3308      	adds	r3, #8
 8007f9c:	1b9b      	subs	r3, r3, r6
 8007f9e:	18e4      	adds	r4, r4, r3
 8007fa0:	19e1      	adds	r1, r4, r7
 8007fa2:	9105      	str	r1, [sp, #20]
 8007fa4:	9f05      	ldr	r7, [sp, #20]
 8007fa6:	9904      	ldr	r1, [sp, #16]
 8007fa8:	4017      	ands	r7, r2
 8007faa:	18cb      	adds	r3, r1, r3
 8007fac:	1bdf      	subs	r7, r3, r7
 8007fae:	4017      	ands	r7, r2
 8007fb0:	0039      	movs	r1, r7
 8007fb2:	9801      	ldr	r0, [sp, #4]
 8007fb4:	f001 ff46 	bl	8009e44 <_sbrk_r>
 8007fb8:	1c43      	adds	r3, r0, #1
 8007fba:	d107      	bne.n	8007fcc <_malloc_r+0x390>
 8007fbc:	1e37      	subs	r7, r6, #0
 8007fbe:	9805      	ldr	r0, [sp, #20]
 8007fc0:	d004      	beq.n	8007fcc <_malloc_r+0x390>
 8007fc2:	0030      	movs	r0, r6
 8007fc4:	2700      	movs	r7, #0
 8007fc6:	9b05      	ldr	r3, [sp, #20]
 8007fc8:	3808      	subs	r0, #8
 8007fca:	1818      	adds	r0, r3, r0
 8007fcc:	4a23      	ldr	r2, [pc, #140]	; (800805c <_malloc_r+0x420>)
 8007fce:	1b00      	subs	r0, r0, r4
 8007fd0:	6813      	ldr	r3, [r2, #0]
 8007fd2:	19c0      	adds	r0, r0, r7
 8007fd4:	19db      	adds	r3, r3, r7
 8007fd6:	6013      	str	r3, [r2, #0]
 8007fd8:	2201      	movs	r2, #1
 8007fda:	4b21      	ldr	r3, [pc, #132]	; (8008060 <_malloc_r+0x424>)
 8007fdc:	9902      	ldr	r1, [sp, #8]
 8007fde:	4310      	orrs	r0, r2
 8007fe0:	609c      	str	r4, [r3, #8]
 8007fe2:	6060      	str	r0, [r4, #4]
 8007fe4:	4299      	cmp	r1, r3
 8007fe6:	d100      	bne.n	8007fea <_malloc_r+0x3ae>
 8007fe8:	e73e      	b.n	8007e68 <_malloc_r+0x22c>
 8007fea:	9b03      	ldr	r3, [sp, #12]
 8007fec:	2b0f      	cmp	r3, #15
 8007fee:	d813      	bhi.n	8008018 <_malloc_r+0x3dc>
 8007ff0:	6062      	str	r2, [r4, #4]
 8007ff2:	2203      	movs	r2, #3
 8007ff4:	4b1a      	ldr	r3, [pc, #104]	; (8008060 <_malloc_r+0x424>)
 8007ff6:	689b      	ldr	r3, [r3, #8]
 8007ff8:	685b      	ldr	r3, [r3, #4]
 8007ffa:	4393      	bics	r3, r2
 8007ffc:	1b59      	subs	r1, r3, r5
 8007ffe:	42ab      	cmp	r3, r5
 8008000:	d301      	bcc.n	8008006 <_malloc_r+0x3ca>
 8008002:	290f      	cmp	r1, #15
 8008004:	dc1f      	bgt.n	8008046 <_malloc_r+0x40a>
 8008006:	9801      	ldr	r0, [sp, #4]
 8008008:	f000 f846 	bl	8008098 <__malloc_unlock>
 800800c:	e623      	b.n	8007c56 <_malloc_r+0x1a>
 800800e:	4913      	ldr	r1, [pc, #76]	; (800805c <_malloc_r+0x420>)
 8008010:	1ba6      	subs	r6, r4, r6
 8008012:	18f6      	adds	r6, r6, r3
 8008014:	600e      	str	r6, [r1, #0]
 8008016:	e7ba      	b.n	8007f8e <_malloc_r+0x352>
 8008018:	2107      	movs	r1, #7
 800801a:	9b03      	ldr	r3, [sp, #12]
 800801c:	3b0c      	subs	r3, #12
 800801e:	438b      	bics	r3, r1
 8008020:	9902      	ldr	r1, [sp, #8]
 8008022:	6849      	ldr	r1, [r1, #4]
 8008024:	400a      	ands	r2, r1
 8008026:	9902      	ldr	r1, [sp, #8]
 8008028:	431a      	orrs	r2, r3
 800802a:	604a      	str	r2, [r1, #4]
 800802c:	18ca      	adds	r2, r1, r3
 800802e:	2105      	movs	r1, #5
 8008030:	6051      	str	r1, [r2, #4]
 8008032:	6091      	str	r1, [r2, #8]
 8008034:	2b0f      	cmp	r3, #15
 8008036:	d800      	bhi.n	800803a <_malloc_r+0x3fe>
 8008038:	e716      	b.n	8007e68 <_malloc_r+0x22c>
 800803a:	9902      	ldr	r1, [sp, #8]
 800803c:	9801      	ldr	r0, [sp, #4]
 800803e:	3108      	adds	r1, #8
 8008040:	f7ff fd4a 	bl	8007ad8 <_free_r>
 8008044:	e710      	b.n	8007e68 <_malloc_r+0x22c>
 8008046:	2201      	movs	r2, #1
 8008048:	0013      	movs	r3, r2
 800804a:	4805      	ldr	r0, [pc, #20]	; (8008060 <_malloc_r+0x424>)
 800804c:	432b      	orrs	r3, r5
 800804e:	6884      	ldr	r4, [r0, #8]
 8008050:	6063      	str	r3, [r4, #4]
 8008052:	1963      	adds	r3, r4, r5
 8008054:	6083      	str	r3, [r0, #8]
 8008056:	e623      	b.n	8007ca0 <_malloc_r+0x64>
 8008058:	200006b8 	.word	0x200006b8
 800805c:	200009e4 	.word	0x200009e4
 8008060:	200002b0 	.word	0x200002b0

08008064 <__ascii_mbtowc>:
 8008064:	b082      	sub	sp, #8
 8008066:	2900      	cmp	r1, #0
 8008068:	d100      	bne.n	800806c <__ascii_mbtowc+0x8>
 800806a:	a901      	add	r1, sp, #4
 800806c:	1e10      	subs	r0, r2, #0
 800806e:	d006      	beq.n	800807e <__ascii_mbtowc+0x1a>
 8008070:	2b00      	cmp	r3, #0
 8008072:	d006      	beq.n	8008082 <__ascii_mbtowc+0x1e>
 8008074:	7813      	ldrb	r3, [r2, #0]
 8008076:	600b      	str	r3, [r1, #0]
 8008078:	7810      	ldrb	r0, [r2, #0]
 800807a:	1e43      	subs	r3, r0, #1
 800807c:	4198      	sbcs	r0, r3
 800807e:	b002      	add	sp, #8
 8008080:	4770      	bx	lr
 8008082:	2002      	movs	r0, #2
 8008084:	4240      	negs	r0, r0
 8008086:	e7fa      	b.n	800807e <__ascii_mbtowc+0x1a>

08008088 <__malloc_lock>:
 8008088:	b510      	push	{r4, lr}
 800808a:	4802      	ldr	r0, [pc, #8]	; (8008094 <__malloc_lock+0xc>)
 800808c:	f7ff fcb0 	bl	80079f0 <__retarget_lock_acquire_recursive>
 8008090:	bd10      	pop	{r4, pc}
 8008092:	46c0      	nop			; (mov r8, r8)
 8008094:	200009dd 	.word	0x200009dd

08008098 <__malloc_unlock>:
 8008098:	b510      	push	{r4, lr}
 800809a:	4802      	ldr	r0, [pc, #8]	; (80080a4 <__malloc_unlock+0xc>)
 800809c:	f7ff fca9 	bl	80079f2 <__retarget_lock_release_recursive>
 80080a0:	bd10      	pop	{r4, pc}
 80080a2:	46c0      	nop			; (mov r8, r8)
 80080a4:	200009dd 	.word	0x200009dd

080080a8 <_Balloc>:
 80080a8:	6c43      	ldr	r3, [r0, #68]	; 0x44
 80080aa:	b570      	push	{r4, r5, r6, lr}
 80080ac:	0006      	movs	r6, r0
 80080ae:	000c      	movs	r4, r1
 80080b0:	2b00      	cmp	r3, #0
 80080b2:	d012      	beq.n	80080da <_Balloc+0x32>
 80080b4:	6c73      	ldr	r3, [r6, #68]	; 0x44
 80080b6:	00a2      	lsls	r2, r4, #2
 80080b8:	189b      	adds	r3, r3, r2
 80080ba:	6818      	ldr	r0, [r3, #0]
 80080bc:	2800      	cmp	r0, #0
 80080be:	d115      	bne.n	80080ec <_Balloc+0x44>
 80080c0:	2101      	movs	r1, #1
 80080c2:	000d      	movs	r5, r1
 80080c4:	40a5      	lsls	r5, r4
 80080c6:	1d6a      	adds	r2, r5, #5
 80080c8:	0030      	movs	r0, r6
 80080ca:	0092      	lsls	r2, r2, #2
 80080cc:	f001 ff86 	bl	8009fdc <_calloc_r>
 80080d0:	2800      	cmp	r0, #0
 80080d2:	d009      	beq.n	80080e8 <_Balloc+0x40>
 80080d4:	6044      	str	r4, [r0, #4]
 80080d6:	6085      	str	r5, [r0, #8]
 80080d8:	e00a      	b.n	80080f0 <_Balloc+0x48>
 80080da:	2221      	movs	r2, #33	; 0x21
 80080dc:	2104      	movs	r1, #4
 80080de:	f001 ff7d 	bl	8009fdc <_calloc_r>
 80080e2:	6470      	str	r0, [r6, #68]	; 0x44
 80080e4:	2800      	cmp	r0, #0
 80080e6:	d1e5      	bne.n	80080b4 <_Balloc+0xc>
 80080e8:	2000      	movs	r0, #0
 80080ea:	bd70      	pop	{r4, r5, r6, pc}
 80080ec:	6802      	ldr	r2, [r0, #0]
 80080ee:	601a      	str	r2, [r3, #0]
 80080f0:	2300      	movs	r3, #0
 80080f2:	6103      	str	r3, [r0, #16]
 80080f4:	60c3      	str	r3, [r0, #12]
 80080f6:	e7f8      	b.n	80080ea <_Balloc+0x42>

080080f8 <_Bfree>:
 80080f8:	2900      	cmp	r1, #0
 80080fa:	d006      	beq.n	800810a <_Bfree+0x12>
 80080fc:	684a      	ldr	r2, [r1, #4]
 80080fe:	6c43      	ldr	r3, [r0, #68]	; 0x44
 8008100:	0092      	lsls	r2, r2, #2
 8008102:	189b      	adds	r3, r3, r2
 8008104:	681a      	ldr	r2, [r3, #0]
 8008106:	600a      	str	r2, [r1, #0]
 8008108:	6019      	str	r1, [r3, #0]
 800810a:	4770      	bx	lr

0800810c <__multadd>:
 800810c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800810e:	000e      	movs	r6, r1
 8008110:	9001      	str	r0, [sp, #4]
 8008112:	000c      	movs	r4, r1
 8008114:	001d      	movs	r5, r3
 8008116:	2000      	movs	r0, #0
 8008118:	690f      	ldr	r7, [r1, #16]
 800811a:	3614      	adds	r6, #20
 800811c:	6833      	ldr	r3, [r6, #0]
 800811e:	3001      	adds	r0, #1
 8008120:	b299      	uxth	r1, r3
 8008122:	4351      	muls	r1, r2
 8008124:	0c1b      	lsrs	r3, r3, #16
 8008126:	4353      	muls	r3, r2
 8008128:	1949      	adds	r1, r1, r5
 800812a:	0c0d      	lsrs	r5, r1, #16
 800812c:	195b      	adds	r3, r3, r5
 800812e:	0c1d      	lsrs	r5, r3, #16
 8008130:	b289      	uxth	r1, r1
 8008132:	041b      	lsls	r3, r3, #16
 8008134:	185b      	adds	r3, r3, r1
 8008136:	c608      	stmia	r6!, {r3}
 8008138:	4287      	cmp	r7, r0
 800813a:	dcef      	bgt.n	800811c <__multadd+0x10>
 800813c:	2d00      	cmp	r5, #0
 800813e:	d022      	beq.n	8008186 <__multadd+0x7a>
 8008140:	68a3      	ldr	r3, [r4, #8]
 8008142:	42bb      	cmp	r3, r7
 8008144:	dc19      	bgt.n	800817a <__multadd+0x6e>
 8008146:	6861      	ldr	r1, [r4, #4]
 8008148:	9801      	ldr	r0, [sp, #4]
 800814a:	3101      	adds	r1, #1
 800814c:	f7ff ffac 	bl	80080a8 <_Balloc>
 8008150:	1e06      	subs	r6, r0, #0
 8008152:	d105      	bne.n	8008160 <__multadd+0x54>
 8008154:	0032      	movs	r2, r6
 8008156:	21ba      	movs	r1, #186	; 0xba
 8008158:	4b0c      	ldr	r3, [pc, #48]	; (800818c <__multadd+0x80>)
 800815a:	480d      	ldr	r0, [pc, #52]	; (8008190 <__multadd+0x84>)
 800815c:	f001 ff20 	bl	8009fa0 <__assert_func>
 8008160:	0021      	movs	r1, r4
 8008162:	6922      	ldr	r2, [r4, #16]
 8008164:	310c      	adds	r1, #12
 8008166:	3202      	adds	r2, #2
 8008168:	0092      	lsls	r2, r2, #2
 800816a:	300c      	adds	r0, #12
 800816c:	f7ff fc42 	bl	80079f4 <memcpy>
 8008170:	0021      	movs	r1, r4
 8008172:	9801      	ldr	r0, [sp, #4]
 8008174:	f7ff ffc0 	bl	80080f8 <_Bfree>
 8008178:	0034      	movs	r4, r6
 800817a:	1d3b      	adds	r3, r7, #4
 800817c:	009b      	lsls	r3, r3, #2
 800817e:	18e3      	adds	r3, r4, r3
 8008180:	605d      	str	r5, [r3, #4]
 8008182:	1c7b      	adds	r3, r7, #1
 8008184:	6123      	str	r3, [r4, #16]
 8008186:	0020      	movs	r0, r4
 8008188:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 800818a:	46c0      	nop			; (mov r8, r8)
 800818c:	0800dce7 	.word	0x0800dce7
 8008190:	0800dcf8 	.word	0x0800dcf8

08008194 <__hi0bits>:
 8008194:	0003      	movs	r3, r0
 8008196:	0c02      	lsrs	r2, r0, #16
 8008198:	2000      	movs	r0, #0
 800819a:	4282      	cmp	r2, r0
 800819c:	d101      	bne.n	80081a2 <__hi0bits+0xe>
 800819e:	041b      	lsls	r3, r3, #16
 80081a0:	3010      	adds	r0, #16
 80081a2:	0e1a      	lsrs	r2, r3, #24
 80081a4:	d101      	bne.n	80081aa <__hi0bits+0x16>
 80081a6:	3008      	adds	r0, #8
 80081a8:	021b      	lsls	r3, r3, #8
 80081aa:	0f1a      	lsrs	r2, r3, #28
 80081ac:	d101      	bne.n	80081b2 <__hi0bits+0x1e>
 80081ae:	3004      	adds	r0, #4
 80081b0:	011b      	lsls	r3, r3, #4
 80081b2:	0f9a      	lsrs	r2, r3, #30
 80081b4:	d101      	bne.n	80081ba <__hi0bits+0x26>
 80081b6:	3002      	adds	r0, #2
 80081b8:	009b      	lsls	r3, r3, #2
 80081ba:	2b00      	cmp	r3, #0
 80081bc:	db03      	blt.n	80081c6 <__hi0bits+0x32>
 80081be:	3001      	adds	r0, #1
 80081c0:	005b      	lsls	r3, r3, #1
 80081c2:	d400      	bmi.n	80081c6 <__hi0bits+0x32>
 80081c4:	2020      	movs	r0, #32
 80081c6:	4770      	bx	lr

080081c8 <__lo0bits>:
 80081c8:	6803      	ldr	r3, [r0, #0]
 80081ca:	0001      	movs	r1, r0
 80081cc:	2207      	movs	r2, #7
 80081ce:	0018      	movs	r0, r3
 80081d0:	4010      	ands	r0, r2
 80081d2:	4213      	tst	r3, r2
 80081d4:	d00d      	beq.n	80081f2 <__lo0bits+0x2a>
 80081d6:	3a06      	subs	r2, #6
 80081d8:	2000      	movs	r0, #0
 80081da:	4213      	tst	r3, r2
 80081dc:	d105      	bne.n	80081ea <__lo0bits+0x22>
 80081de:	3002      	adds	r0, #2
 80081e0:	4203      	tst	r3, r0
 80081e2:	d003      	beq.n	80081ec <__lo0bits+0x24>
 80081e4:	40d3      	lsrs	r3, r2
 80081e6:	0010      	movs	r0, r2
 80081e8:	600b      	str	r3, [r1, #0]
 80081ea:	4770      	bx	lr
 80081ec:	089b      	lsrs	r3, r3, #2
 80081ee:	600b      	str	r3, [r1, #0]
 80081f0:	e7fb      	b.n	80081ea <__lo0bits+0x22>
 80081f2:	b29a      	uxth	r2, r3
 80081f4:	2a00      	cmp	r2, #0
 80081f6:	d101      	bne.n	80081fc <__lo0bits+0x34>
 80081f8:	2010      	movs	r0, #16
 80081fa:	0c1b      	lsrs	r3, r3, #16
 80081fc:	b2da      	uxtb	r2, r3
 80081fe:	2a00      	cmp	r2, #0
 8008200:	d101      	bne.n	8008206 <__lo0bits+0x3e>
 8008202:	3008      	adds	r0, #8
 8008204:	0a1b      	lsrs	r3, r3, #8
 8008206:	071a      	lsls	r2, r3, #28
 8008208:	d101      	bne.n	800820e <__lo0bits+0x46>
 800820a:	3004      	adds	r0, #4
 800820c:	091b      	lsrs	r3, r3, #4
 800820e:	079a      	lsls	r2, r3, #30
 8008210:	d101      	bne.n	8008216 <__lo0bits+0x4e>
 8008212:	3002      	adds	r0, #2
 8008214:	089b      	lsrs	r3, r3, #2
 8008216:	07da      	lsls	r2, r3, #31
 8008218:	d4e9      	bmi.n	80081ee <__lo0bits+0x26>
 800821a:	3001      	adds	r0, #1
 800821c:	085b      	lsrs	r3, r3, #1
 800821e:	d1e6      	bne.n	80081ee <__lo0bits+0x26>
 8008220:	2020      	movs	r0, #32
 8008222:	e7e2      	b.n	80081ea <__lo0bits+0x22>

08008224 <__i2b>:
 8008224:	b510      	push	{r4, lr}
 8008226:	000c      	movs	r4, r1
 8008228:	2101      	movs	r1, #1
 800822a:	f7ff ff3d 	bl	80080a8 <_Balloc>
 800822e:	2800      	cmp	r0, #0
 8008230:	d107      	bne.n	8008242 <__i2b+0x1e>
 8008232:	2146      	movs	r1, #70	; 0x46
 8008234:	4c05      	ldr	r4, [pc, #20]	; (800824c <__i2b+0x28>)
 8008236:	0002      	movs	r2, r0
 8008238:	4b05      	ldr	r3, [pc, #20]	; (8008250 <__i2b+0x2c>)
 800823a:	0020      	movs	r0, r4
 800823c:	31ff      	adds	r1, #255	; 0xff
 800823e:	f001 feaf 	bl	8009fa0 <__assert_func>
 8008242:	2301      	movs	r3, #1
 8008244:	6144      	str	r4, [r0, #20]
 8008246:	6103      	str	r3, [r0, #16]
 8008248:	bd10      	pop	{r4, pc}
 800824a:	46c0      	nop			; (mov r8, r8)
 800824c:	0800dcf8 	.word	0x0800dcf8
 8008250:	0800dce7 	.word	0x0800dce7

08008254 <__multiply>:
 8008254:	b5f0      	push	{r4, r5, r6, r7, lr}
 8008256:	0015      	movs	r5, r2
 8008258:	690a      	ldr	r2, [r1, #16]
 800825a:	692b      	ldr	r3, [r5, #16]
 800825c:	000c      	movs	r4, r1
 800825e:	b08b      	sub	sp, #44	; 0x2c
 8008260:	429a      	cmp	r2, r3
 8008262:	da01      	bge.n	8008268 <__multiply+0x14>
 8008264:	002c      	movs	r4, r5
 8008266:	000d      	movs	r5, r1
 8008268:	6927      	ldr	r7, [r4, #16]
 800826a:	692e      	ldr	r6, [r5, #16]
 800826c:	6861      	ldr	r1, [r4, #4]
 800826e:	19bb      	adds	r3, r7, r6
 8008270:	9303      	str	r3, [sp, #12]
 8008272:	68a3      	ldr	r3, [r4, #8]
 8008274:	19ba      	adds	r2, r7, r6
 8008276:	4293      	cmp	r3, r2
 8008278:	da00      	bge.n	800827c <__multiply+0x28>
 800827a:	3101      	adds	r1, #1
 800827c:	f7ff ff14 	bl	80080a8 <_Balloc>
 8008280:	9002      	str	r0, [sp, #8]
 8008282:	2800      	cmp	r0, #0
 8008284:	d106      	bne.n	8008294 <__multiply+0x40>
 8008286:	21b1      	movs	r1, #177	; 0xb1
 8008288:	4b48      	ldr	r3, [pc, #288]	; (80083ac <__multiply+0x158>)
 800828a:	4849      	ldr	r0, [pc, #292]	; (80083b0 <__multiply+0x15c>)
 800828c:	9a02      	ldr	r2, [sp, #8]
 800828e:	0049      	lsls	r1, r1, #1
 8008290:	f001 fe86 	bl	8009fa0 <__assert_func>
 8008294:	9b02      	ldr	r3, [sp, #8]
 8008296:	2200      	movs	r2, #0
 8008298:	3314      	adds	r3, #20
 800829a:	469c      	mov	ip, r3
 800829c:	19bb      	adds	r3, r7, r6
 800829e:	009b      	lsls	r3, r3, #2
 80082a0:	4463      	add	r3, ip
 80082a2:	9304      	str	r3, [sp, #16]
 80082a4:	4663      	mov	r3, ip
 80082a6:	9904      	ldr	r1, [sp, #16]
 80082a8:	428b      	cmp	r3, r1
 80082aa:	d32a      	bcc.n	8008302 <__multiply+0xae>
 80082ac:	0023      	movs	r3, r4
 80082ae:	00bf      	lsls	r7, r7, #2
 80082b0:	3314      	adds	r3, #20
 80082b2:	3514      	adds	r5, #20
 80082b4:	9308      	str	r3, [sp, #32]
 80082b6:	00b6      	lsls	r6, r6, #2
 80082b8:	19db      	adds	r3, r3, r7
 80082ba:	9305      	str	r3, [sp, #20]
 80082bc:	19ab      	adds	r3, r5, r6
 80082be:	9309      	str	r3, [sp, #36]	; 0x24
 80082c0:	2304      	movs	r3, #4
 80082c2:	9306      	str	r3, [sp, #24]
 80082c4:	0023      	movs	r3, r4
 80082c6:	9a05      	ldr	r2, [sp, #20]
 80082c8:	3315      	adds	r3, #21
 80082ca:	9501      	str	r5, [sp, #4]
 80082cc:	429a      	cmp	r2, r3
 80082ce:	d305      	bcc.n	80082dc <__multiply+0x88>
 80082d0:	1b13      	subs	r3, r2, r4
 80082d2:	3b15      	subs	r3, #21
 80082d4:	089b      	lsrs	r3, r3, #2
 80082d6:	3301      	adds	r3, #1
 80082d8:	009b      	lsls	r3, r3, #2
 80082da:	9306      	str	r3, [sp, #24]
 80082dc:	9b01      	ldr	r3, [sp, #4]
 80082de:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80082e0:	4293      	cmp	r3, r2
 80082e2:	d310      	bcc.n	8008306 <__multiply+0xb2>
 80082e4:	9b03      	ldr	r3, [sp, #12]
 80082e6:	2b00      	cmp	r3, #0
 80082e8:	dd05      	ble.n	80082f6 <__multiply+0xa2>
 80082ea:	9b04      	ldr	r3, [sp, #16]
 80082ec:	3b04      	subs	r3, #4
 80082ee:	9304      	str	r3, [sp, #16]
 80082f0:	681b      	ldr	r3, [r3, #0]
 80082f2:	2b00      	cmp	r3, #0
 80082f4:	d056      	beq.n	80083a4 <__multiply+0x150>
 80082f6:	9b02      	ldr	r3, [sp, #8]
 80082f8:	9a03      	ldr	r2, [sp, #12]
 80082fa:	0018      	movs	r0, r3
 80082fc:	611a      	str	r2, [r3, #16]
 80082fe:	b00b      	add	sp, #44	; 0x2c
 8008300:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8008302:	c304      	stmia	r3!, {r2}
 8008304:	e7cf      	b.n	80082a6 <__multiply+0x52>
 8008306:	9b01      	ldr	r3, [sp, #4]
 8008308:	6818      	ldr	r0, [r3, #0]
 800830a:	b280      	uxth	r0, r0
 800830c:	2800      	cmp	r0, #0
 800830e:	d01e      	beq.n	800834e <__multiply+0xfa>
 8008310:	4667      	mov	r7, ip
 8008312:	2500      	movs	r5, #0
 8008314:	9e08      	ldr	r6, [sp, #32]
 8008316:	ce02      	ldmia	r6!, {r1}
 8008318:	683b      	ldr	r3, [r7, #0]
 800831a:	9307      	str	r3, [sp, #28]
 800831c:	b28b      	uxth	r3, r1
 800831e:	4343      	muls	r3, r0
 8008320:	001a      	movs	r2, r3
 8008322:	466b      	mov	r3, sp
 8008324:	8b9b      	ldrh	r3, [r3, #28]
 8008326:	18d3      	adds	r3, r2, r3
 8008328:	195b      	adds	r3, r3, r5
 800832a:	0c0d      	lsrs	r5, r1, #16
 800832c:	4345      	muls	r5, r0
 800832e:	9a07      	ldr	r2, [sp, #28]
 8008330:	0c11      	lsrs	r1, r2, #16
 8008332:	1869      	adds	r1, r5, r1
 8008334:	0c1a      	lsrs	r2, r3, #16
 8008336:	188a      	adds	r2, r1, r2
 8008338:	b29b      	uxth	r3, r3
 800833a:	0c15      	lsrs	r5, r2, #16
 800833c:	0412      	lsls	r2, r2, #16
 800833e:	431a      	orrs	r2, r3
 8008340:	9b05      	ldr	r3, [sp, #20]
 8008342:	c704      	stmia	r7!, {r2}
 8008344:	42b3      	cmp	r3, r6
 8008346:	d8e6      	bhi.n	8008316 <__multiply+0xc2>
 8008348:	4663      	mov	r3, ip
 800834a:	9a06      	ldr	r2, [sp, #24]
 800834c:	509d      	str	r5, [r3, r2]
 800834e:	9b01      	ldr	r3, [sp, #4]
 8008350:	6818      	ldr	r0, [r3, #0]
 8008352:	0c00      	lsrs	r0, r0, #16
 8008354:	d020      	beq.n	8008398 <__multiply+0x144>
 8008356:	4663      	mov	r3, ip
 8008358:	0025      	movs	r5, r4
 800835a:	4661      	mov	r1, ip
 800835c:	2700      	movs	r7, #0
 800835e:	681b      	ldr	r3, [r3, #0]
 8008360:	3514      	adds	r5, #20
 8008362:	682a      	ldr	r2, [r5, #0]
 8008364:	680e      	ldr	r6, [r1, #0]
 8008366:	b292      	uxth	r2, r2
 8008368:	4342      	muls	r2, r0
 800836a:	0c36      	lsrs	r6, r6, #16
 800836c:	1992      	adds	r2, r2, r6
 800836e:	19d2      	adds	r2, r2, r7
 8008370:	0416      	lsls	r6, r2, #16
 8008372:	b29b      	uxth	r3, r3
 8008374:	431e      	orrs	r6, r3
 8008376:	600e      	str	r6, [r1, #0]
 8008378:	cd40      	ldmia	r5!, {r6}
 800837a:	684b      	ldr	r3, [r1, #4]
 800837c:	0c36      	lsrs	r6, r6, #16
 800837e:	4346      	muls	r6, r0
 8008380:	b29b      	uxth	r3, r3
 8008382:	0c12      	lsrs	r2, r2, #16
 8008384:	18f3      	adds	r3, r6, r3
 8008386:	189b      	adds	r3, r3, r2
 8008388:	9a05      	ldr	r2, [sp, #20]
 800838a:	0c1f      	lsrs	r7, r3, #16
 800838c:	3104      	adds	r1, #4
 800838e:	42aa      	cmp	r2, r5
 8008390:	d8e7      	bhi.n	8008362 <__multiply+0x10e>
 8008392:	4662      	mov	r2, ip
 8008394:	9906      	ldr	r1, [sp, #24]
 8008396:	5053      	str	r3, [r2, r1]
 8008398:	9b01      	ldr	r3, [sp, #4]
 800839a:	3304      	adds	r3, #4
 800839c:	9301      	str	r3, [sp, #4]
 800839e:	2304      	movs	r3, #4
 80083a0:	449c      	add	ip, r3
 80083a2:	e79b      	b.n	80082dc <__multiply+0x88>
 80083a4:	9b03      	ldr	r3, [sp, #12]
 80083a6:	3b01      	subs	r3, #1
 80083a8:	9303      	str	r3, [sp, #12]
 80083aa:	e79b      	b.n	80082e4 <__multiply+0x90>
 80083ac:	0800dce7 	.word	0x0800dce7
 80083b0:	0800dcf8 	.word	0x0800dcf8

080083b4 <__pow5mult>:
 80083b4:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80083b6:	2303      	movs	r3, #3
 80083b8:	0015      	movs	r5, r2
 80083ba:	0007      	movs	r7, r0
 80083bc:	000e      	movs	r6, r1
 80083be:	401a      	ands	r2, r3
 80083c0:	421d      	tst	r5, r3
 80083c2:	d008      	beq.n	80083d6 <__pow5mult+0x22>
 80083c4:	491a      	ldr	r1, [pc, #104]	; (8008430 <__pow5mult+0x7c>)
 80083c6:	3a01      	subs	r2, #1
 80083c8:	0092      	lsls	r2, r2, #2
 80083ca:	5852      	ldr	r2, [r2, r1]
 80083cc:	2300      	movs	r3, #0
 80083ce:	0031      	movs	r1, r6
 80083d0:	f7ff fe9c 	bl	800810c <__multadd>
 80083d4:	0006      	movs	r6, r0
 80083d6:	10ad      	asrs	r5, r5, #2
 80083d8:	d027      	beq.n	800842a <__pow5mult+0x76>
 80083da:	6c3c      	ldr	r4, [r7, #64]	; 0x40
 80083dc:	2c00      	cmp	r4, #0
 80083de:	d107      	bne.n	80083f0 <__pow5mult+0x3c>
 80083e0:	0038      	movs	r0, r7
 80083e2:	4914      	ldr	r1, [pc, #80]	; (8008434 <__pow5mult+0x80>)
 80083e4:	f7ff ff1e 	bl	8008224 <__i2b>
 80083e8:	2300      	movs	r3, #0
 80083ea:	0004      	movs	r4, r0
 80083ec:	6438      	str	r0, [r7, #64]	; 0x40
 80083ee:	6003      	str	r3, [r0, #0]
 80083f0:	2301      	movs	r3, #1
 80083f2:	421d      	tst	r5, r3
 80083f4:	d00a      	beq.n	800840c <__pow5mult+0x58>
 80083f6:	0031      	movs	r1, r6
 80083f8:	0022      	movs	r2, r4
 80083fa:	0038      	movs	r0, r7
 80083fc:	f7ff ff2a 	bl	8008254 <__multiply>
 8008400:	0031      	movs	r1, r6
 8008402:	9001      	str	r0, [sp, #4]
 8008404:	0038      	movs	r0, r7
 8008406:	f7ff fe77 	bl	80080f8 <_Bfree>
 800840a:	9e01      	ldr	r6, [sp, #4]
 800840c:	106d      	asrs	r5, r5, #1
 800840e:	d00c      	beq.n	800842a <__pow5mult+0x76>
 8008410:	6820      	ldr	r0, [r4, #0]
 8008412:	2800      	cmp	r0, #0
 8008414:	d107      	bne.n	8008426 <__pow5mult+0x72>
 8008416:	0022      	movs	r2, r4
 8008418:	0021      	movs	r1, r4
 800841a:	0038      	movs	r0, r7
 800841c:	f7ff ff1a 	bl	8008254 <__multiply>
 8008420:	2300      	movs	r3, #0
 8008422:	6020      	str	r0, [r4, #0]
 8008424:	6003      	str	r3, [r0, #0]
 8008426:	0004      	movs	r4, r0
 8008428:	e7e2      	b.n	80083f0 <__pow5mult+0x3c>
 800842a:	0030      	movs	r0, r6
 800842c:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 800842e:	46c0      	nop			; (mov r8, r8)
 8008430:	0800de48 	.word	0x0800de48
 8008434:	00000271 	.word	0x00000271

08008438 <__lshift>:
 8008438:	b5f0      	push	{r4, r5, r6, r7, lr}
 800843a:	000c      	movs	r4, r1
 800843c:	0017      	movs	r7, r2
 800843e:	6923      	ldr	r3, [r4, #16]
 8008440:	1155      	asrs	r5, r2, #5
 8008442:	b087      	sub	sp, #28
 8008444:	18eb      	adds	r3, r5, r3
 8008446:	9302      	str	r3, [sp, #8]
 8008448:	3301      	adds	r3, #1
 800844a:	9301      	str	r3, [sp, #4]
 800844c:	6849      	ldr	r1, [r1, #4]
 800844e:	68a3      	ldr	r3, [r4, #8]
 8008450:	9004      	str	r0, [sp, #16]
 8008452:	9a01      	ldr	r2, [sp, #4]
 8008454:	4293      	cmp	r3, r2
 8008456:	db10      	blt.n	800847a <__lshift+0x42>
 8008458:	9804      	ldr	r0, [sp, #16]
 800845a:	f7ff fe25 	bl	80080a8 <_Balloc>
 800845e:	2300      	movs	r3, #0
 8008460:	0002      	movs	r2, r0
 8008462:	0006      	movs	r6, r0
 8008464:	0019      	movs	r1, r3
 8008466:	3214      	adds	r2, #20
 8008468:	4298      	cmp	r0, r3
 800846a:	d10c      	bne.n	8008486 <__lshift+0x4e>
 800846c:	31df      	adds	r1, #223	; 0xdf
 800846e:	0032      	movs	r2, r6
 8008470:	4b26      	ldr	r3, [pc, #152]	; (800850c <__lshift+0xd4>)
 8008472:	4827      	ldr	r0, [pc, #156]	; (8008510 <__lshift+0xd8>)
 8008474:	31ff      	adds	r1, #255	; 0xff
 8008476:	f001 fd93 	bl	8009fa0 <__assert_func>
 800847a:	3101      	adds	r1, #1
 800847c:	005b      	lsls	r3, r3, #1
 800847e:	e7e8      	b.n	8008452 <__lshift+0x1a>
 8008480:	0098      	lsls	r0, r3, #2
 8008482:	5011      	str	r1, [r2, r0]
 8008484:	3301      	adds	r3, #1
 8008486:	42ab      	cmp	r3, r5
 8008488:	dbfa      	blt.n	8008480 <__lshift+0x48>
 800848a:	43eb      	mvns	r3, r5
 800848c:	17db      	asrs	r3, r3, #31
 800848e:	401d      	ands	r5, r3
 8008490:	211f      	movs	r1, #31
 8008492:	0023      	movs	r3, r4
 8008494:	0038      	movs	r0, r7
 8008496:	00ad      	lsls	r5, r5, #2
 8008498:	1955      	adds	r5, r2, r5
 800849a:	6922      	ldr	r2, [r4, #16]
 800849c:	3314      	adds	r3, #20
 800849e:	0092      	lsls	r2, r2, #2
 80084a0:	4008      	ands	r0, r1
 80084a2:	4684      	mov	ip, r0
 80084a4:	189a      	adds	r2, r3, r2
 80084a6:	420f      	tst	r7, r1
 80084a8:	d02a      	beq.n	8008500 <__lshift+0xc8>
 80084aa:	3101      	adds	r1, #1
 80084ac:	1a09      	subs	r1, r1, r0
 80084ae:	9105      	str	r1, [sp, #20]
 80084b0:	2100      	movs	r1, #0
 80084b2:	9503      	str	r5, [sp, #12]
 80084b4:	4667      	mov	r7, ip
 80084b6:	6818      	ldr	r0, [r3, #0]
 80084b8:	40b8      	lsls	r0, r7
 80084ba:	4308      	orrs	r0, r1
 80084bc:	9903      	ldr	r1, [sp, #12]
 80084be:	c101      	stmia	r1!, {r0}
 80084c0:	9103      	str	r1, [sp, #12]
 80084c2:	9805      	ldr	r0, [sp, #20]
 80084c4:	cb02      	ldmia	r3!, {r1}
 80084c6:	40c1      	lsrs	r1, r0
 80084c8:	429a      	cmp	r2, r3
 80084ca:	d8f3      	bhi.n	80084b4 <__lshift+0x7c>
 80084cc:	0020      	movs	r0, r4
 80084ce:	3015      	adds	r0, #21
 80084d0:	2304      	movs	r3, #4
 80084d2:	4282      	cmp	r2, r0
 80084d4:	d304      	bcc.n	80084e0 <__lshift+0xa8>
 80084d6:	1b13      	subs	r3, r2, r4
 80084d8:	3b15      	subs	r3, #21
 80084da:	089b      	lsrs	r3, r3, #2
 80084dc:	3301      	adds	r3, #1
 80084de:	009b      	lsls	r3, r3, #2
 80084e0:	50e9      	str	r1, [r5, r3]
 80084e2:	2900      	cmp	r1, #0
 80084e4:	d002      	beq.n	80084ec <__lshift+0xb4>
 80084e6:	9b02      	ldr	r3, [sp, #8]
 80084e8:	3302      	adds	r3, #2
 80084ea:	9301      	str	r3, [sp, #4]
 80084ec:	9b01      	ldr	r3, [sp, #4]
 80084ee:	9804      	ldr	r0, [sp, #16]
 80084f0:	3b01      	subs	r3, #1
 80084f2:	0021      	movs	r1, r4
 80084f4:	6133      	str	r3, [r6, #16]
 80084f6:	f7ff fdff 	bl	80080f8 <_Bfree>
 80084fa:	0030      	movs	r0, r6
 80084fc:	b007      	add	sp, #28
 80084fe:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8008500:	cb02      	ldmia	r3!, {r1}
 8008502:	c502      	stmia	r5!, {r1}
 8008504:	429a      	cmp	r2, r3
 8008506:	d8fb      	bhi.n	8008500 <__lshift+0xc8>
 8008508:	e7f0      	b.n	80084ec <__lshift+0xb4>
 800850a:	46c0      	nop			; (mov r8, r8)
 800850c:	0800dce7 	.word	0x0800dce7
 8008510:	0800dcf8 	.word	0x0800dcf8

08008514 <__mcmp>:
 8008514:	b530      	push	{r4, r5, lr}
 8008516:	690b      	ldr	r3, [r1, #16]
 8008518:	6904      	ldr	r4, [r0, #16]
 800851a:	0002      	movs	r2, r0
 800851c:	1ae0      	subs	r0, r4, r3
 800851e:	429c      	cmp	r4, r3
 8008520:	d10e      	bne.n	8008540 <__mcmp+0x2c>
 8008522:	3214      	adds	r2, #20
 8008524:	009b      	lsls	r3, r3, #2
 8008526:	3114      	adds	r1, #20
 8008528:	0014      	movs	r4, r2
 800852a:	18c9      	adds	r1, r1, r3
 800852c:	18d2      	adds	r2, r2, r3
 800852e:	3a04      	subs	r2, #4
 8008530:	3904      	subs	r1, #4
 8008532:	6815      	ldr	r5, [r2, #0]
 8008534:	680b      	ldr	r3, [r1, #0]
 8008536:	429d      	cmp	r5, r3
 8008538:	d003      	beq.n	8008542 <__mcmp+0x2e>
 800853a:	2001      	movs	r0, #1
 800853c:	429d      	cmp	r5, r3
 800853e:	d303      	bcc.n	8008548 <__mcmp+0x34>
 8008540:	bd30      	pop	{r4, r5, pc}
 8008542:	4294      	cmp	r4, r2
 8008544:	d3f3      	bcc.n	800852e <__mcmp+0x1a>
 8008546:	e7fb      	b.n	8008540 <__mcmp+0x2c>
 8008548:	4240      	negs	r0, r0
 800854a:	e7f9      	b.n	8008540 <__mcmp+0x2c>

0800854c <__mdiff>:
 800854c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800854e:	000e      	movs	r6, r1
 8008550:	0007      	movs	r7, r0
 8008552:	0011      	movs	r1, r2
 8008554:	0030      	movs	r0, r6
 8008556:	b087      	sub	sp, #28
 8008558:	0014      	movs	r4, r2
 800855a:	f7ff ffdb 	bl	8008514 <__mcmp>
 800855e:	1e05      	subs	r5, r0, #0
 8008560:	d110      	bne.n	8008584 <__mdiff+0x38>
 8008562:	0001      	movs	r1, r0
 8008564:	0038      	movs	r0, r7
 8008566:	f7ff fd9f 	bl	80080a8 <_Balloc>
 800856a:	1e02      	subs	r2, r0, #0
 800856c:	d104      	bne.n	8008578 <__mdiff+0x2c>
 800856e:	4b3f      	ldr	r3, [pc, #252]	; (800866c <__mdiff+0x120>)
 8008570:	483f      	ldr	r0, [pc, #252]	; (8008670 <__mdiff+0x124>)
 8008572:	4940      	ldr	r1, [pc, #256]	; (8008674 <__mdiff+0x128>)
 8008574:	f001 fd14 	bl	8009fa0 <__assert_func>
 8008578:	2301      	movs	r3, #1
 800857a:	6145      	str	r5, [r0, #20]
 800857c:	6103      	str	r3, [r0, #16]
 800857e:	0010      	movs	r0, r2
 8008580:	b007      	add	sp, #28
 8008582:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8008584:	2301      	movs	r3, #1
 8008586:	9301      	str	r3, [sp, #4]
 8008588:	2800      	cmp	r0, #0
 800858a:	db04      	blt.n	8008596 <__mdiff+0x4a>
 800858c:	0023      	movs	r3, r4
 800858e:	0034      	movs	r4, r6
 8008590:	001e      	movs	r6, r3
 8008592:	2300      	movs	r3, #0
 8008594:	9301      	str	r3, [sp, #4]
 8008596:	0038      	movs	r0, r7
 8008598:	6861      	ldr	r1, [r4, #4]
 800859a:	f7ff fd85 	bl	80080a8 <_Balloc>
 800859e:	1e02      	subs	r2, r0, #0
 80085a0:	d103      	bne.n	80085aa <__mdiff+0x5e>
 80085a2:	4b32      	ldr	r3, [pc, #200]	; (800866c <__mdiff+0x120>)
 80085a4:	4832      	ldr	r0, [pc, #200]	; (8008670 <__mdiff+0x124>)
 80085a6:	4934      	ldr	r1, [pc, #208]	; (8008678 <__mdiff+0x12c>)
 80085a8:	e7e4      	b.n	8008574 <__mdiff+0x28>
 80085aa:	9b01      	ldr	r3, [sp, #4]
 80085ac:	2700      	movs	r7, #0
 80085ae:	60c3      	str	r3, [r0, #12]
 80085b0:	6920      	ldr	r0, [r4, #16]
 80085b2:	3414      	adds	r4, #20
 80085b4:	0083      	lsls	r3, r0, #2
 80085b6:	18e3      	adds	r3, r4, r3
 80085b8:	0021      	movs	r1, r4
 80085ba:	9401      	str	r4, [sp, #4]
 80085bc:	0034      	movs	r4, r6
 80085be:	9302      	str	r3, [sp, #8]
 80085c0:	6933      	ldr	r3, [r6, #16]
 80085c2:	3414      	adds	r4, #20
 80085c4:	009b      	lsls	r3, r3, #2
 80085c6:	18e3      	adds	r3, r4, r3
 80085c8:	9303      	str	r3, [sp, #12]
 80085ca:	0013      	movs	r3, r2
 80085cc:	3314      	adds	r3, #20
 80085ce:	469c      	mov	ip, r3
 80085d0:	9305      	str	r3, [sp, #20]
 80085d2:	9104      	str	r1, [sp, #16]
 80085d4:	9b04      	ldr	r3, [sp, #16]
 80085d6:	cc02      	ldmia	r4!, {r1}
 80085d8:	cb20      	ldmia	r3!, {r5}
 80085da:	9304      	str	r3, [sp, #16]
 80085dc:	b2ab      	uxth	r3, r5
 80085de:	19df      	adds	r7, r3, r7
 80085e0:	b28b      	uxth	r3, r1
 80085e2:	1afb      	subs	r3, r7, r3
 80085e4:	0c09      	lsrs	r1, r1, #16
 80085e6:	0c2d      	lsrs	r5, r5, #16
 80085e8:	1a6d      	subs	r5, r5, r1
 80085ea:	1419      	asrs	r1, r3, #16
 80085ec:	1869      	adds	r1, r5, r1
 80085ee:	b29b      	uxth	r3, r3
 80085f0:	140f      	asrs	r7, r1, #16
 80085f2:	0409      	lsls	r1, r1, #16
 80085f4:	4319      	orrs	r1, r3
 80085f6:	4663      	mov	r3, ip
 80085f8:	c302      	stmia	r3!, {r1}
 80085fa:	469c      	mov	ip, r3
 80085fc:	9b03      	ldr	r3, [sp, #12]
 80085fe:	42a3      	cmp	r3, r4
 8008600:	d8e8      	bhi.n	80085d4 <__mdiff+0x88>
 8008602:	0031      	movs	r1, r6
 8008604:	9c03      	ldr	r4, [sp, #12]
 8008606:	3115      	adds	r1, #21
 8008608:	2304      	movs	r3, #4
 800860a:	428c      	cmp	r4, r1
 800860c:	d304      	bcc.n	8008618 <__mdiff+0xcc>
 800860e:	1ba3      	subs	r3, r4, r6
 8008610:	3b15      	subs	r3, #21
 8008612:	089b      	lsrs	r3, r3, #2
 8008614:	3301      	adds	r3, #1
 8008616:	009b      	lsls	r3, r3, #2
 8008618:	9901      	ldr	r1, [sp, #4]
 800861a:	18cd      	adds	r5, r1, r3
 800861c:	9905      	ldr	r1, [sp, #20]
 800861e:	002e      	movs	r6, r5
 8008620:	18cb      	adds	r3, r1, r3
 8008622:	469c      	mov	ip, r3
 8008624:	9902      	ldr	r1, [sp, #8]
 8008626:	428e      	cmp	r6, r1
 8008628:	d310      	bcc.n	800864c <__mdiff+0x100>
 800862a:	9e02      	ldr	r6, [sp, #8]
 800862c:	1ee9      	subs	r1, r5, #3
 800862e:	2400      	movs	r4, #0
 8008630:	428e      	cmp	r6, r1
 8008632:	d304      	bcc.n	800863e <__mdiff+0xf2>
 8008634:	0031      	movs	r1, r6
 8008636:	3103      	adds	r1, #3
 8008638:	1b49      	subs	r1, r1, r5
 800863a:	0889      	lsrs	r1, r1, #2
 800863c:	008c      	lsls	r4, r1, #2
 800863e:	191b      	adds	r3, r3, r4
 8008640:	3b04      	subs	r3, #4
 8008642:	6819      	ldr	r1, [r3, #0]
 8008644:	2900      	cmp	r1, #0
 8008646:	d00f      	beq.n	8008668 <__mdiff+0x11c>
 8008648:	6110      	str	r0, [r2, #16]
 800864a:	e798      	b.n	800857e <__mdiff+0x32>
 800864c:	ce02      	ldmia	r6!, {r1}
 800864e:	b28c      	uxth	r4, r1
 8008650:	19e4      	adds	r4, r4, r7
 8008652:	0c0f      	lsrs	r7, r1, #16
 8008654:	1421      	asrs	r1, r4, #16
 8008656:	1879      	adds	r1, r7, r1
 8008658:	b2a4      	uxth	r4, r4
 800865a:	140f      	asrs	r7, r1, #16
 800865c:	0409      	lsls	r1, r1, #16
 800865e:	4321      	orrs	r1, r4
 8008660:	4664      	mov	r4, ip
 8008662:	c402      	stmia	r4!, {r1}
 8008664:	46a4      	mov	ip, r4
 8008666:	e7dd      	b.n	8008624 <__mdiff+0xd8>
 8008668:	3801      	subs	r0, #1
 800866a:	e7e9      	b.n	8008640 <__mdiff+0xf4>
 800866c:	0800dce7 	.word	0x0800dce7
 8008670:	0800dcf8 	.word	0x0800dcf8
 8008674:	00000237 	.word	0x00000237
 8008678:	00000245 	.word	0x00000245

0800867c <__d2b>:
 800867c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800867e:	2101      	movs	r1, #1
 8008680:	0014      	movs	r4, r2
 8008682:	001d      	movs	r5, r3
 8008684:	9f08      	ldr	r7, [sp, #32]
 8008686:	f7ff fd0f 	bl	80080a8 <_Balloc>
 800868a:	1e06      	subs	r6, r0, #0
 800868c:	d105      	bne.n	800869a <__d2b+0x1e>
 800868e:	0032      	movs	r2, r6
 8008690:	4b24      	ldr	r3, [pc, #144]	; (8008724 <__d2b+0xa8>)
 8008692:	4825      	ldr	r0, [pc, #148]	; (8008728 <__d2b+0xac>)
 8008694:	4925      	ldr	r1, [pc, #148]	; (800872c <__d2b+0xb0>)
 8008696:	f001 fc83 	bl	8009fa0 <__assert_func>
 800869a:	032b      	lsls	r3, r5, #12
 800869c:	006d      	lsls	r5, r5, #1
 800869e:	0b1b      	lsrs	r3, r3, #12
 80086a0:	0d6d      	lsrs	r5, r5, #21
 80086a2:	d125      	bne.n	80086f0 <__d2b+0x74>
 80086a4:	9301      	str	r3, [sp, #4]
 80086a6:	2c00      	cmp	r4, #0
 80086a8:	d028      	beq.n	80086fc <__d2b+0x80>
 80086aa:	4668      	mov	r0, sp
 80086ac:	9400      	str	r4, [sp, #0]
 80086ae:	f7ff fd8b 	bl	80081c8 <__lo0bits>
 80086b2:	9b01      	ldr	r3, [sp, #4]
 80086b4:	9900      	ldr	r1, [sp, #0]
 80086b6:	2800      	cmp	r0, #0
 80086b8:	d01e      	beq.n	80086f8 <__d2b+0x7c>
 80086ba:	2220      	movs	r2, #32
 80086bc:	001c      	movs	r4, r3
 80086be:	1a12      	subs	r2, r2, r0
 80086c0:	4094      	lsls	r4, r2
 80086c2:	0022      	movs	r2, r4
 80086c4:	40c3      	lsrs	r3, r0
 80086c6:	430a      	orrs	r2, r1
 80086c8:	6172      	str	r2, [r6, #20]
 80086ca:	9301      	str	r3, [sp, #4]
 80086cc:	9c01      	ldr	r4, [sp, #4]
 80086ce:	61b4      	str	r4, [r6, #24]
 80086d0:	1e63      	subs	r3, r4, #1
 80086d2:	419c      	sbcs	r4, r3
 80086d4:	3401      	adds	r4, #1
 80086d6:	6134      	str	r4, [r6, #16]
 80086d8:	2d00      	cmp	r5, #0
 80086da:	d017      	beq.n	800870c <__d2b+0x90>
 80086dc:	2435      	movs	r4, #53	; 0x35
 80086de:	4b14      	ldr	r3, [pc, #80]	; (8008730 <__d2b+0xb4>)
 80086e0:	18ed      	adds	r5, r5, r3
 80086e2:	182d      	adds	r5, r5, r0
 80086e4:	603d      	str	r5, [r7, #0]
 80086e6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80086e8:	1a24      	subs	r4, r4, r0
 80086ea:	601c      	str	r4, [r3, #0]
 80086ec:	0030      	movs	r0, r6
 80086ee:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 80086f0:	2280      	movs	r2, #128	; 0x80
 80086f2:	0352      	lsls	r2, r2, #13
 80086f4:	4313      	orrs	r3, r2
 80086f6:	e7d5      	b.n	80086a4 <__d2b+0x28>
 80086f8:	6171      	str	r1, [r6, #20]
 80086fa:	e7e7      	b.n	80086cc <__d2b+0x50>
 80086fc:	a801      	add	r0, sp, #4
 80086fe:	f7ff fd63 	bl	80081c8 <__lo0bits>
 8008702:	9b01      	ldr	r3, [sp, #4]
 8008704:	2401      	movs	r4, #1
 8008706:	6173      	str	r3, [r6, #20]
 8008708:	3020      	adds	r0, #32
 800870a:	e7e4      	b.n	80086d6 <__d2b+0x5a>
 800870c:	4b09      	ldr	r3, [pc, #36]	; (8008734 <__d2b+0xb8>)
 800870e:	18c0      	adds	r0, r0, r3
 8008710:	4b09      	ldr	r3, [pc, #36]	; (8008738 <__d2b+0xbc>)
 8008712:	6038      	str	r0, [r7, #0]
 8008714:	18e3      	adds	r3, r4, r3
 8008716:	009b      	lsls	r3, r3, #2
 8008718:	18f3      	adds	r3, r6, r3
 800871a:	6958      	ldr	r0, [r3, #20]
 800871c:	f7ff fd3a 	bl	8008194 <__hi0bits>
 8008720:	0164      	lsls	r4, r4, #5
 8008722:	e7e0      	b.n	80086e6 <__d2b+0x6a>
 8008724:	0800dce7 	.word	0x0800dce7
 8008728:	0800dcf8 	.word	0x0800dcf8
 800872c:	0000030f 	.word	0x0000030f
 8008730:	fffffbcd 	.word	0xfffffbcd
 8008734:	fffffbce 	.word	0xfffffbce
 8008738:	3fffffff 	.word	0x3fffffff

0800873c <__ascii_wctomb>:
 800873c:	0003      	movs	r3, r0
 800873e:	1e08      	subs	r0, r1, #0
 8008740:	d005      	beq.n	800874e <__ascii_wctomb+0x12>
 8008742:	2aff      	cmp	r2, #255	; 0xff
 8008744:	d904      	bls.n	8008750 <__ascii_wctomb+0x14>
 8008746:	228a      	movs	r2, #138	; 0x8a
 8008748:	2001      	movs	r0, #1
 800874a:	601a      	str	r2, [r3, #0]
 800874c:	4240      	negs	r0, r0
 800874e:	4770      	bx	lr
 8008750:	2001      	movs	r0, #1
 8008752:	700a      	strb	r2, [r1, #0]
 8008754:	e7fb      	b.n	800874e <__ascii_wctomb+0x12>
	...

08008758 <_svfprintf_r>:
 8008758:	b5f0      	push	{r4, r5, r6, r7, lr}
 800875a:	b0d9      	sub	sp, #356	; 0x164
 800875c:	001c      	movs	r4, r3
 800875e:	910b      	str	r1, [sp, #44]	; 0x2c
 8008760:	9208      	str	r2, [sp, #32]
 8008762:	900a      	str	r0, [sp, #40]	; 0x28
 8008764:	f001 fb6a 	bl	8009e3c <_localeconv_r>
 8008768:	6803      	ldr	r3, [r0, #0]
 800876a:	0018      	movs	r0, r3
 800876c:	931c      	str	r3, [sp, #112]	; 0x70
 800876e:	f7f7 fcc9 	bl	8000104 <strlen>
 8008772:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8008774:	9016      	str	r0, [sp, #88]	; 0x58
 8008776:	899b      	ldrh	r3, [r3, #12]
 8008778:	061b      	lsls	r3, r3, #24
 800877a:	d517      	bpl.n	80087ac <_svfprintf_r+0x54>
 800877c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800877e:	691b      	ldr	r3, [r3, #16]
 8008780:	2b00      	cmp	r3, #0
 8008782:	d113      	bne.n	80087ac <_svfprintf_r+0x54>
 8008784:	2140      	movs	r1, #64	; 0x40
 8008786:	980a      	ldr	r0, [sp, #40]	; 0x28
 8008788:	f7ff fa58 	bl	8007c3c <_malloc_r>
 800878c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800878e:	6018      	str	r0, [r3, #0]
 8008790:	6118      	str	r0, [r3, #16]
 8008792:	2800      	cmp	r0, #0
 8008794:	d107      	bne.n	80087a6 <_svfprintf_r+0x4e>
 8008796:	230c      	movs	r3, #12
 8008798:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800879a:	6013      	str	r3, [r2, #0]
 800879c:	3b0d      	subs	r3, #13
 800879e:	9317      	str	r3, [sp, #92]	; 0x5c
 80087a0:	9817      	ldr	r0, [sp, #92]	; 0x5c
 80087a2:	b059      	add	sp, #356	; 0x164
 80087a4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80087a6:	2340      	movs	r3, #64	; 0x40
 80087a8:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 80087aa:	6153      	str	r3, [r2, #20]
 80087ac:	2300      	movs	r3, #0
 80087ae:	2200      	movs	r2, #0
 80087b0:	932e      	str	r3, [sp, #184]	; 0xb8
 80087b2:	932d      	str	r3, [sp, #180]	; 0xb4
 80087b4:	930e      	str	r3, [sp, #56]	; 0x38
 80087b6:	2300      	movs	r3, #0
 80087b8:	9214      	str	r2, [sp, #80]	; 0x50
 80087ba:	9315      	str	r3, [sp, #84]	; 0x54
 80087bc:	2300      	movs	r3, #0
 80087be:	af2f      	add	r7, sp, #188	; 0xbc
 80087c0:	972c      	str	r7, [sp, #176]	; 0xb0
 80087c2:	931f      	str	r3, [sp, #124]	; 0x7c
 80087c4:	931e      	str	r3, [sp, #120]	; 0x78
 80087c6:	9312      	str	r3, [sp, #72]	; 0x48
 80087c8:	931b      	str	r3, [sp, #108]	; 0x6c
 80087ca:	931d      	str	r3, [sp, #116]	; 0x74
 80087cc:	9317      	str	r3, [sp, #92]	; 0x5c
 80087ce:	9d08      	ldr	r5, [sp, #32]
 80087d0:	782b      	ldrb	r3, [r5, #0]
 80087d2:	2b00      	cmp	r3, #0
 80087d4:	d002      	beq.n	80087dc <_svfprintf_r+0x84>
 80087d6:	2b25      	cmp	r3, #37	; 0x25
 80087d8:	d000      	beq.n	80087dc <_svfprintf_r+0x84>
 80087da:	e091      	b.n	8008900 <_svfprintf_r+0x1a8>
 80087dc:	9b08      	ldr	r3, [sp, #32]
 80087de:	1aee      	subs	r6, r5, r3
 80087e0:	429d      	cmp	r5, r3
 80087e2:	d016      	beq.n	8008812 <_svfprintf_r+0xba>
 80087e4:	603b      	str	r3, [r7, #0]
 80087e6:	9b2e      	ldr	r3, [sp, #184]	; 0xb8
 80087e8:	607e      	str	r6, [r7, #4]
 80087ea:	199b      	adds	r3, r3, r6
 80087ec:	932e      	str	r3, [sp, #184]	; 0xb8
 80087ee:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
 80087f0:	3708      	adds	r7, #8
 80087f2:	3301      	adds	r3, #1
 80087f4:	932d      	str	r3, [sp, #180]	; 0xb4
 80087f6:	2b07      	cmp	r3, #7
 80087f8:	dd08      	ble.n	800880c <_svfprintf_r+0xb4>
 80087fa:	990b      	ldr	r1, [sp, #44]	; 0x2c
 80087fc:	980a      	ldr	r0, [sp, #40]	; 0x28
 80087fe:	aa2c      	add	r2, sp, #176	; 0xb0
 8008800:	f002 face 	bl	800ada0 <__ssprint_r>
 8008804:	2800      	cmp	r0, #0
 8008806:	d000      	beq.n	800880a <_svfprintf_r+0xb2>
 8008808:	e1cf      	b.n	8008baa <_svfprintf_r+0x452>
 800880a:	af2f      	add	r7, sp, #188	; 0xbc
 800880c:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800880e:	199b      	adds	r3, r3, r6
 8008810:	9317      	str	r3, [sp, #92]	; 0x5c
 8008812:	782b      	ldrb	r3, [r5, #0]
 8008814:	2b00      	cmp	r3, #0
 8008816:	d101      	bne.n	800881c <_svfprintf_r+0xc4>
 8008818:	f001 f99e 	bl	8009b58 <_svfprintf_r+0x1400>
 800881c:	221b      	movs	r2, #27
 800881e:	2300      	movs	r3, #0
 8008820:	a91e      	add	r1, sp, #120	; 0x78
 8008822:	1852      	adds	r2, r2, r1
 8008824:	7013      	strb	r3, [r2, #0]
 8008826:	2201      	movs	r2, #1
 8008828:	001e      	movs	r6, r3
 800882a:	4252      	negs	r2, r2
 800882c:	3501      	adds	r5, #1
 800882e:	9209      	str	r2, [sp, #36]	; 0x24
 8008830:	9318      	str	r3, [sp, #96]	; 0x60
 8008832:	1c6b      	adds	r3, r5, #1
 8008834:	9313      	str	r3, [sp, #76]	; 0x4c
 8008836:	782b      	ldrb	r3, [r5, #0]
 8008838:	930f      	str	r3, [sp, #60]	; 0x3c
 800883a:	980f      	ldr	r0, [sp, #60]	; 0x3c
 800883c:	3820      	subs	r0, #32
 800883e:	285a      	cmp	r0, #90	; 0x5a
 8008840:	d901      	bls.n	8008846 <_svfprintf_r+0xee>
 8008842:	f000 fe20 	bl	8009486 <_svfprintf_r+0xd2e>
 8008846:	f7f7 fc6f 	bl	8000128 <__gnu_thumb1_case_uhi>
 800884a:	0078      	.short	0x0078
 800884c:	061e061e 	.word	0x061e061e
 8008850:	061e0082 	.word	0x061e0082
 8008854:	061e061e 	.word	0x061e061e
 8008858:	061e005d 	.word	0x061e005d
 800885c:	0084061e 	.word	0x0084061e
 8008860:	061e008c 	.word	0x061e008c
 8008864:	0091008a 	.word	0x0091008a
 8008868:	00b2061e 	.word	0x00b2061e
 800886c:	00b400b4 	.word	0x00b400b4
 8008870:	00b400b4 	.word	0x00b400b4
 8008874:	00b400b4 	.word	0x00b400b4
 8008878:	00b400b4 	.word	0x00b400b4
 800887c:	061e00b4 	.word	0x061e00b4
 8008880:	061e061e 	.word	0x061e061e
 8008884:	061e061e 	.word	0x061e061e
 8008888:	061e061e 	.word	0x061e061e
 800888c:	061e013b 	.word	0x061e013b
 8008890:	00f400e0 	.word	0x00f400e0
 8008894:	013b013b 	.word	0x013b013b
 8008898:	061e013b 	.word	0x061e013b
 800889c:	061e061e 	.word	0x061e061e
 80088a0:	00c7061e 	.word	0x00c7061e
 80088a4:	061e061e 	.word	0x061e061e
 80088a8:	061e04c7 	.word	0x061e04c7
 80088ac:	061e061e 	.word	0x061e061e
 80088b0:	061e050a 	.word	0x061e050a
 80088b4:	061e052a 	.word	0x061e052a
 80088b8:	055c061e 	.word	0x055c061e
 80088bc:	061e061e 	.word	0x061e061e
 80088c0:	061e061e 	.word	0x061e061e
 80088c4:	061e061e 	.word	0x061e061e
 80088c8:	061e061e 	.word	0x061e061e
 80088cc:	061e013b 	.word	0x061e013b
 80088d0:	00f600e0 	.word	0x00f600e0
 80088d4:	013b013b 	.word	0x013b013b
 80088d8:	00c9013b 	.word	0x00c9013b
 80088dc:	00dc00f6 	.word	0x00dc00f6
 80088e0:	00d5061e 	.word	0x00d5061e
 80088e4:	04a7061e 	.word	0x04a7061e
 80088e8:	04fa04c9 	.word	0x04fa04c9
 80088ec:	061e00dc 	.word	0x061e00dc
 80088f0:	0080050a 	.word	0x0080050a
 80088f4:	061e052c 	.word	0x061e052c
 80088f8:	057c061e 	.word	0x057c061e
 80088fc:	0080061e 	.word	0x0080061e
 8008900:	3501      	adds	r5, #1
 8008902:	e765      	b.n	80087d0 <_svfprintf_r+0x78>
 8008904:	980a      	ldr	r0, [sp, #40]	; 0x28
 8008906:	f001 fa99 	bl	8009e3c <_localeconv_r>
 800890a:	6843      	ldr	r3, [r0, #4]
 800890c:	0018      	movs	r0, r3
 800890e:	931d      	str	r3, [sp, #116]	; 0x74
 8008910:	f7f7 fbf8 	bl	8000104 <strlen>
 8008914:	901b      	str	r0, [sp, #108]	; 0x6c
 8008916:	980a      	ldr	r0, [sp, #40]	; 0x28
 8008918:	f001 fa90 	bl	8009e3c <_localeconv_r>
 800891c:	6883      	ldr	r3, [r0, #8]
 800891e:	9312      	str	r3, [sp, #72]	; 0x48
 8008920:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8008922:	2b00      	cmp	r3, #0
 8008924:	d011      	beq.n	800894a <_svfprintf_r+0x1f2>
 8008926:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8008928:	2b00      	cmp	r3, #0
 800892a:	d00e      	beq.n	800894a <_svfprintf_r+0x1f2>
 800892c:	781b      	ldrb	r3, [r3, #0]
 800892e:	2b00      	cmp	r3, #0
 8008930:	d00b      	beq.n	800894a <_svfprintf_r+0x1f2>
 8008932:	2380      	movs	r3, #128	; 0x80
 8008934:	00db      	lsls	r3, r3, #3
 8008936:	431e      	orrs	r6, r3
 8008938:	e007      	b.n	800894a <_svfprintf_r+0x1f2>
 800893a:	231b      	movs	r3, #27
 800893c:	aa1e      	add	r2, sp, #120	; 0x78
 800893e:	189b      	adds	r3, r3, r2
 8008940:	781a      	ldrb	r2, [r3, #0]
 8008942:	2a00      	cmp	r2, #0
 8008944:	d101      	bne.n	800894a <_svfprintf_r+0x1f2>
 8008946:	3220      	adds	r2, #32
 8008948:	701a      	strb	r2, [r3, #0]
 800894a:	9d13      	ldr	r5, [sp, #76]	; 0x4c
 800894c:	e771      	b.n	8008832 <_svfprintf_r+0xda>
 800894e:	2301      	movs	r3, #1
 8008950:	e7f1      	b.n	8008936 <_svfprintf_r+0x1de>
 8008952:	cc08      	ldmia	r4!, {r3}
 8008954:	9318      	str	r3, [sp, #96]	; 0x60
 8008956:	2b00      	cmp	r3, #0
 8008958:	daf7      	bge.n	800894a <_svfprintf_r+0x1f2>
 800895a:	425b      	negs	r3, r3
 800895c:	9318      	str	r3, [sp, #96]	; 0x60
 800895e:	2304      	movs	r3, #4
 8008960:	e7e9      	b.n	8008936 <_svfprintf_r+0x1de>
 8008962:	231b      	movs	r3, #27
 8008964:	aa1e      	add	r2, sp, #120	; 0x78
 8008966:	189b      	adds	r3, r3, r2
 8008968:	222b      	movs	r2, #43	; 0x2b
 800896a:	e7ed      	b.n	8008948 <_svfprintf_r+0x1f0>
 800896c:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 800896e:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8008970:	7812      	ldrb	r2, [r2, #0]
 8008972:	3301      	adds	r3, #1
 8008974:	920f      	str	r2, [sp, #60]	; 0x3c
 8008976:	2a2a      	cmp	r2, #42	; 0x2a
 8008978:	d010      	beq.n	800899c <_svfprintf_r+0x244>
 800897a:	2200      	movs	r2, #0
 800897c:	9209      	str	r2, [sp, #36]	; 0x24
 800897e:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8008980:	9313      	str	r3, [sp, #76]	; 0x4c
 8008982:	3a30      	subs	r2, #48	; 0x30
 8008984:	2a09      	cmp	r2, #9
 8008986:	d900      	bls.n	800898a <_svfprintf_r+0x232>
 8008988:	e757      	b.n	800883a <_svfprintf_r+0xe2>
 800898a:	200a      	movs	r0, #10
 800898c:	9909      	ldr	r1, [sp, #36]	; 0x24
 800898e:	4341      	muls	r1, r0
 8008990:	188a      	adds	r2, r1, r2
 8008992:	9209      	str	r2, [sp, #36]	; 0x24
 8008994:	781a      	ldrb	r2, [r3, #0]
 8008996:	3301      	adds	r3, #1
 8008998:	920f      	str	r2, [sp, #60]	; 0x3c
 800899a:	e7f0      	b.n	800897e <_svfprintf_r+0x226>
 800899c:	cc04      	ldmia	r4!, {r2}
 800899e:	9209      	str	r2, [sp, #36]	; 0x24
 80089a0:	2a00      	cmp	r2, #0
 80089a2:	da02      	bge.n	80089aa <_svfprintf_r+0x252>
 80089a4:	2201      	movs	r2, #1
 80089a6:	4252      	negs	r2, r2
 80089a8:	9209      	str	r2, [sp, #36]	; 0x24
 80089aa:	9313      	str	r3, [sp, #76]	; 0x4c
 80089ac:	e7cd      	b.n	800894a <_svfprintf_r+0x1f2>
 80089ae:	2380      	movs	r3, #128	; 0x80
 80089b0:	e7c1      	b.n	8008936 <_svfprintf_r+0x1de>
 80089b2:	2200      	movs	r2, #0
 80089b4:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 80089b6:	9218      	str	r2, [sp, #96]	; 0x60
 80089b8:	210a      	movs	r1, #10
 80089ba:	9a18      	ldr	r2, [sp, #96]	; 0x60
 80089bc:	434a      	muls	r2, r1
 80089be:	990f      	ldr	r1, [sp, #60]	; 0x3c
 80089c0:	3930      	subs	r1, #48	; 0x30
 80089c2:	188a      	adds	r2, r1, r2
 80089c4:	9218      	str	r2, [sp, #96]	; 0x60
 80089c6:	001a      	movs	r2, r3
 80089c8:	7812      	ldrb	r2, [r2, #0]
 80089ca:	3301      	adds	r3, #1
 80089cc:	920f      	str	r2, [sp, #60]	; 0x3c
 80089ce:	3a30      	subs	r2, #48	; 0x30
 80089d0:	9313      	str	r3, [sp, #76]	; 0x4c
 80089d2:	2a09      	cmp	r2, #9
 80089d4:	d9f0      	bls.n	80089b8 <_svfprintf_r+0x260>
 80089d6:	e730      	b.n	800883a <_svfprintf_r+0xe2>
 80089d8:	2308      	movs	r3, #8
 80089da:	e7ac      	b.n	8008936 <_svfprintf_r+0x1de>
 80089dc:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 80089de:	781b      	ldrb	r3, [r3, #0]
 80089e0:	2b68      	cmp	r3, #104	; 0x68
 80089e2:	d105      	bne.n	80089f0 <_svfprintf_r+0x298>
 80089e4:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 80089e6:	3301      	adds	r3, #1
 80089e8:	9313      	str	r3, [sp, #76]	; 0x4c
 80089ea:	2380      	movs	r3, #128	; 0x80
 80089ec:	009b      	lsls	r3, r3, #2
 80089ee:	e7a2      	b.n	8008936 <_svfprintf_r+0x1de>
 80089f0:	2340      	movs	r3, #64	; 0x40
 80089f2:	e7a0      	b.n	8008936 <_svfprintf_r+0x1de>
 80089f4:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 80089f6:	781b      	ldrb	r3, [r3, #0]
 80089f8:	2b6c      	cmp	r3, #108	; 0x6c
 80089fa:	d104      	bne.n	8008a06 <_svfprintf_r+0x2ae>
 80089fc:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 80089fe:	3301      	adds	r3, #1
 8008a00:	9313      	str	r3, [sp, #76]	; 0x4c
 8008a02:	2320      	movs	r3, #32
 8008a04:	e797      	b.n	8008936 <_svfprintf_r+0x1de>
 8008a06:	2310      	movs	r3, #16
 8008a08:	e795      	b.n	8008936 <_svfprintf_r+0x1de>
 8008a0a:	0021      	movs	r1, r4
 8008a0c:	c904      	ldmia	r1!, {r2}
 8008a0e:	ab3f      	add	r3, sp, #252	; 0xfc
 8008a10:	910d      	str	r1, [sp, #52]	; 0x34
 8008a12:	211b      	movs	r1, #27
 8008a14:	701a      	strb	r2, [r3, #0]
 8008a16:	2200      	movs	r2, #0
 8008a18:	a81e      	add	r0, sp, #120	; 0x78
 8008a1a:	1809      	adds	r1, r1, r0
 8008a1c:	700a      	strb	r2, [r1, #0]
 8008a1e:	920c      	str	r2, [sp, #48]	; 0x30
 8008a20:	3201      	adds	r2, #1
 8008a22:	9209      	str	r2, [sp, #36]	; 0x24
 8008a24:	2200      	movs	r2, #0
 8008a26:	9308      	str	r3, [sp, #32]
 8008a28:	0015      	movs	r5, r2
 8008a2a:	9219      	str	r2, [sp, #100]	; 0x64
 8008a2c:	9210      	str	r2, [sp, #64]	; 0x40
 8008a2e:	9211      	str	r2, [sp, #68]	; 0x44
 8008a30:	e1f1      	b.n	8008e16 <_svfprintf_r+0x6be>
 8008a32:	2310      	movs	r3, #16
 8008a34:	431e      	orrs	r6, r3
 8008a36:	06b3      	lsls	r3, r6, #26
 8008a38:	d531      	bpl.n	8008a9e <_svfprintf_r+0x346>
 8008a3a:	2307      	movs	r3, #7
 8008a3c:	3407      	adds	r4, #7
 8008a3e:	439c      	bics	r4, r3
 8008a40:	0022      	movs	r2, r4
 8008a42:	ca18      	ldmia	r2!, {r3, r4}
 8008a44:	9306      	str	r3, [sp, #24]
 8008a46:	9407      	str	r4, [sp, #28]
 8008a48:	920d      	str	r2, [sp, #52]	; 0x34
 8008a4a:	9a07      	ldr	r2, [sp, #28]
 8008a4c:	2301      	movs	r3, #1
 8008a4e:	2a00      	cmp	r2, #0
 8008a50:	da0b      	bge.n	8008a6a <_svfprintf_r+0x312>
 8008a52:	9c06      	ldr	r4, [sp, #24]
 8008a54:	9d07      	ldr	r5, [sp, #28]
 8008a56:	2200      	movs	r2, #0
 8008a58:	4261      	negs	r1, r4
 8008a5a:	41aa      	sbcs	r2, r5
 8008a5c:	9106      	str	r1, [sp, #24]
 8008a5e:	9207      	str	r2, [sp, #28]
 8008a60:	221b      	movs	r2, #27
 8008a62:	a91e      	add	r1, sp, #120	; 0x78
 8008a64:	1852      	adds	r2, r2, r1
 8008a66:	212d      	movs	r1, #45	; 0x2d
 8008a68:	7011      	strb	r1, [r2, #0]
 8008a6a:	9907      	ldr	r1, [sp, #28]
 8008a6c:	9a06      	ldr	r2, [sp, #24]
 8008a6e:	430a      	orrs	r2, r1
 8008a70:	9909      	ldr	r1, [sp, #36]	; 0x24
 8008a72:	3101      	adds	r1, #1
 8008a74:	d101      	bne.n	8008a7a <_svfprintf_r+0x322>
 8008a76:	f001 f87b 	bl	8009b70 <_svfprintf_r+0x1418>
 8008a7a:	2180      	movs	r1, #128	; 0x80
 8008a7c:	0034      	movs	r4, r6
 8008a7e:	438c      	bics	r4, r1
 8008a80:	2a00      	cmp	r2, #0
 8008a82:	d001      	beq.n	8008a88 <_svfprintf_r+0x330>
 8008a84:	f001 f879 	bl	8009b7a <_svfprintf_r+0x1422>
 8008a88:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8008a8a:	2a00      	cmp	r2, #0
 8008a8c:	d101      	bne.n	8008a92 <_svfprintf_r+0x33a>
 8008a8e:	f000 fcef 	bl	8009470 <_svfprintf_r+0xd18>
 8008a92:	2b01      	cmp	r3, #1
 8008a94:	d001      	beq.n	8008a9a <_svfprintf_r+0x342>
 8008a96:	f001 f874 	bl	8009b82 <_svfprintf_r+0x142a>
 8008a9a:	f000 fc79 	bl	8009390 <_svfprintf_r+0xc38>
 8008a9e:	0022      	movs	r2, r4
 8008aa0:	ca08      	ldmia	r2!, {r3}
 8008aa2:	920d      	str	r2, [sp, #52]	; 0x34
 8008aa4:	06f2      	lsls	r2, r6, #27
 8008aa6:	d503      	bpl.n	8008ab0 <_svfprintf_r+0x358>
 8008aa8:	9306      	str	r3, [sp, #24]
 8008aaa:	17db      	asrs	r3, r3, #31
 8008aac:	9307      	str	r3, [sp, #28]
 8008aae:	e7cc      	b.n	8008a4a <_svfprintf_r+0x2f2>
 8008ab0:	0672      	lsls	r2, r6, #25
 8008ab2:	d501      	bpl.n	8008ab8 <_svfprintf_r+0x360>
 8008ab4:	b21b      	sxth	r3, r3
 8008ab6:	e7f7      	b.n	8008aa8 <_svfprintf_r+0x350>
 8008ab8:	05b2      	lsls	r2, r6, #22
 8008aba:	d5f5      	bpl.n	8008aa8 <_svfprintf_r+0x350>
 8008abc:	b25b      	sxtb	r3, r3
 8008abe:	e7f3      	b.n	8008aa8 <_svfprintf_r+0x350>
 8008ac0:	2307      	movs	r3, #7
 8008ac2:	3407      	adds	r4, #7
 8008ac4:	439c      	bics	r4, r3
 8008ac6:	0022      	movs	r2, r4
 8008ac8:	ca18      	ldmia	r2!, {r3, r4}
 8008aca:	920d      	str	r2, [sp, #52]	; 0x34
 8008acc:	2201      	movs	r2, #1
 8008ace:	9314      	str	r3, [sp, #80]	; 0x50
 8008ad0:	9415      	str	r4, [sp, #84]	; 0x54
 8008ad2:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8008ad4:	9d14      	ldr	r5, [sp, #80]	; 0x50
 8008ad6:	005c      	lsls	r4, r3, #1
 8008ad8:	0864      	lsrs	r4, r4, #1
 8008ada:	0028      	movs	r0, r5
 8008adc:	0021      	movs	r1, r4
 8008ade:	4b3e      	ldr	r3, [pc, #248]	; (8008bd8 <_svfprintf_r+0x480>)
 8008ae0:	4252      	negs	r2, r2
 8008ae2:	f7f9 fb69 	bl	80021b8 <__aeabi_dcmpun>
 8008ae6:	2800      	cmp	r0, #0
 8008ae8:	d126      	bne.n	8008b38 <_svfprintf_r+0x3e0>
 8008aea:	2201      	movs	r2, #1
 8008aec:	0028      	movs	r0, r5
 8008aee:	0021      	movs	r1, r4
 8008af0:	4b39      	ldr	r3, [pc, #228]	; (8008bd8 <_svfprintf_r+0x480>)
 8008af2:	4252      	negs	r2, r2
 8008af4:	f7f7 fcb8 	bl	8000468 <__aeabi_dcmple>
 8008af8:	2800      	cmp	r0, #0
 8008afa:	d11d      	bne.n	8008b38 <_svfprintf_r+0x3e0>
 8008afc:	9814      	ldr	r0, [sp, #80]	; 0x50
 8008afe:	9915      	ldr	r1, [sp, #84]	; 0x54
 8008b00:	2200      	movs	r2, #0
 8008b02:	2300      	movs	r3, #0
 8008b04:	f7f7 fca6 	bl	8000454 <__aeabi_dcmplt>
 8008b08:	2800      	cmp	r0, #0
 8008b0a:	d004      	beq.n	8008b16 <_svfprintf_r+0x3be>
 8008b0c:	231b      	movs	r3, #27
 8008b0e:	aa1e      	add	r2, sp, #120	; 0x78
 8008b10:	189b      	adds	r3, r3, r2
 8008b12:	222d      	movs	r2, #45	; 0x2d
 8008b14:	701a      	strb	r2, [r3, #0]
 8008b16:	4b31      	ldr	r3, [pc, #196]	; (8008bdc <_svfprintf_r+0x484>)
 8008b18:	9308      	str	r3, [sp, #32]
 8008b1a:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8008b1c:	2b47      	cmp	r3, #71	; 0x47
 8008b1e:	dd01      	ble.n	8008b24 <_svfprintf_r+0x3cc>
 8008b20:	4b2f      	ldr	r3, [pc, #188]	; (8008be0 <_svfprintf_r+0x488>)
 8008b22:	9308      	str	r3, [sp, #32]
 8008b24:	2380      	movs	r3, #128	; 0x80
 8008b26:	439e      	bics	r6, r3
 8008b28:	2300      	movs	r3, #0
 8008b2a:	930c      	str	r3, [sp, #48]	; 0x30
 8008b2c:	3303      	adds	r3, #3
 8008b2e:	9309      	str	r3, [sp, #36]	; 0x24
 8008b30:	2300      	movs	r3, #0
 8008b32:	9319      	str	r3, [sp, #100]	; 0x64
 8008b34:	f000 fc78 	bl	8009428 <_svfprintf_r+0xcd0>
 8008b38:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8008b3a:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8008b3c:	0010      	movs	r0, r2
 8008b3e:	0019      	movs	r1, r3
 8008b40:	f7f9 fb3a 	bl	80021b8 <__aeabi_dcmpun>
 8008b44:	2800      	cmp	r0, #0
 8008b46:	d00e      	beq.n	8008b66 <_svfprintf_r+0x40e>
 8008b48:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8008b4a:	2b00      	cmp	r3, #0
 8008b4c:	da04      	bge.n	8008b58 <_svfprintf_r+0x400>
 8008b4e:	231b      	movs	r3, #27
 8008b50:	aa1e      	add	r2, sp, #120	; 0x78
 8008b52:	189b      	adds	r3, r3, r2
 8008b54:	222d      	movs	r2, #45	; 0x2d
 8008b56:	701a      	strb	r2, [r3, #0]
 8008b58:	4b22      	ldr	r3, [pc, #136]	; (8008be4 <_svfprintf_r+0x48c>)
 8008b5a:	9308      	str	r3, [sp, #32]
 8008b5c:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8008b5e:	2b47      	cmp	r3, #71	; 0x47
 8008b60:	dde0      	ble.n	8008b24 <_svfprintf_r+0x3cc>
 8008b62:	4b21      	ldr	r3, [pc, #132]	; (8008be8 <_svfprintf_r+0x490>)
 8008b64:	e7dd      	b.n	8008b22 <_svfprintf_r+0x3ca>
 8008b66:	2320      	movs	r3, #32
 8008b68:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8008b6a:	439a      	bics	r2, r3
 8008b6c:	9210      	str	r2, [sp, #64]	; 0x40
 8008b6e:	2a41      	cmp	r2, #65	; 0x41
 8008b70:	d123      	bne.n	8008bba <_svfprintf_r+0x462>
 8008b72:	2230      	movs	r2, #48	; 0x30
 8008b74:	990f      	ldr	r1, [sp, #60]	; 0x3c
 8008b76:	ab25      	add	r3, sp, #148	; 0x94
 8008b78:	701a      	strb	r2, [r3, #0]
 8008b7a:	3248      	adds	r2, #72	; 0x48
 8008b7c:	2961      	cmp	r1, #97	; 0x61
 8008b7e:	d000      	beq.n	8008b82 <_svfprintf_r+0x42a>
 8008b80:	3a20      	subs	r2, #32
 8008b82:	705a      	strb	r2, [r3, #1]
 8008b84:	2302      	movs	r3, #2
 8008b86:	431e      	orrs	r6, r3
 8008b88:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008b8a:	2b63      	cmp	r3, #99	; 0x63
 8008b8c:	dd2e      	ble.n	8008bec <_svfprintf_r+0x494>
 8008b8e:	980a      	ldr	r0, [sp, #40]	; 0x28
 8008b90:	1c59      	adds	r1, r3, #1
 8008b92:	f7ff f853 	bl	8007c3c <_malloc_r>
 8008b96:	9008      	str	r0, [sp, #32]
 8008b98:	2800      	cmp	r0, #0
 8008b9a:	d000      	beq.n	8008b9e <_svfprintf_r+0x446>
 8008b9c:	e216      	b.n	8008fcc <_svfprintf_r+0x874>
 8008b9e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8008ba0:	899a      	ldrh	r2, [r3, #12]
 8008ba2:	2340      	movs	r3, #64	; 0x40
 8008ba4:	4313      	orrs	r3, r2
 8008ba6:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8008ba8:	8193      	strh	r3, [r2, #12]
 8008baa:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8008bac:	899b      	ldrh	r3, [r3, #12]
 8008bae:	065b      	lsls	r3, r3, #25
 8008bb0:	d400      	bmi.n	8008bb4 <_svfprintf_r+0x45c>
 8008bb2:	e5f5      	b.n	80087a0 <_svfprintf_r+0x48>
 8008bb4:	2301      	movs	r3, #1
 8008bb6:	425b      	negs	r3, r3
 8008bb8:	e5f1      	b.n	800879e <_svfprintf_r+0x46>
 8008bba:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008bbc:	900c      	str	r0, [sp, #48]	; 0x30
 8008bbe:	3301      	adds	r3, #1
 8008bc0:	d100      	bne.n	8008bc4 <_svfprintf_r+0x46c>
 8008bc2:	e206      	b.n	8008fd2 <_svfprintf_r+0x87a>
 8008bc4:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8008bc6:	2b47      	cmp	r3, #71	; 0x47
 8008bc8:	d114      	bne.n	8008bf4 <_svfprintf_r+0x49c>
 8008bca:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008bcc:	2b00      	cmp	r3, #0
 8008bce:	d111      	bne.n	8008bf4 <_svfprintf_r+0x49c>
 8008bd0:	3301      	adds	r3, #1
 8008bd2:	9309      	str	r3, [sp, #36]	; 0x24
 8008bd4:	e00e      	b.n	8008bf4 <_svfprintf_r+0x49c>
 8008bd6:	46c0      	nop			; (mov r8, r8)
 8008bd8:	7fefffff 	.word	0x7fefffff
 8008bdc:	0800de54 	.word	0x0800de54
 8008be0:	0800de58 	.word	0x0800de58
 8008be4:	0800de5c 	.word	0x0800de5c
 8008be8:	0800de60 	.word	0x0800de60
 8008bec:	2300      	movs	r3, #0
 8008bee:	930c      	str	r3, [sp, #48]	; 0x30
 8008bf0:	ab3f      	add	r3, sp, #252	; 0xfc
 8008bf2:	9308      	str	r3, [sp, #32]
 8008bf4:	2380      	movs	r3, #128	; 0x80
 8008bf6:	005b      	lsls	r3, r3, #1
 8008bf8:	4333      	orrs	r3, r6
 8008bfa:	931a      	str	r3, [sp, #104]	; 0x68
 8008bfc:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8008bfe:	9d14      	ldr	r5, [sp, #80]	; 0x50
 8008c00:	2b00      	cmp	r3, #0
 8008c02:	db00      	blt.n	8008c06 <_svfprintf_r+0x4ae>
 8008c04:	e1e7      	b.n	8008fd6 <_svfprintf_r+0x87e>
 8008c06:	2280      	movs	r2, #128	; 0x80
 8008c08:	0612      	lsls	r2, r2, #24
 8008c0a:	4694      	mov	ip, r2
 8008c0c:	4463      	add	r3, ip
 8008c0e:	930e      	str	r3, [sp, #56]	; 0x38
 8008c10:	232d      	movs	r3, #45	; 0x2d
 8008c12:	9322      	str	r3, [sp, #136]	; 0x88
 8008c14:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8008c16:	2b41      	cmp	r3, #65	; 0x41
 8008c18:	d000      	beq.n	8008c1c <_svfprintf_r+0x4c4>
 8008c1a:	e1f5      	b.n	8009008 <_svfprintf_r+0x8b0>
 8008c1c:	0028      	movs	r0, r5
 8008c1e:	aa26      	add	r2, sp, #152	; 0x98
 8008c20:	990e      	ldr	r1, [sp, #56]	; 0x38
 8008c22:	f001 f94b 	bl	8009ebc <frexp>
 8008c26:	23ff      	movs	r3, #255	; 0xff
 8008c28:	2200      	movs	r2, #0
 8008c2a:	059b      	lsls	r3, r3, #22
 8008c2c:	f7f8 fc80 	bl	8001530 <__aeabi_dmul>
 8008c30:	2200      	movs	r2, #0
 8008c32:	2300      	movs	r3, #0
 8008c34:	0004      	movs	r4, r0
 8008c36:	000d      	movs	r5, r1
 8008c38:	f7f7 fc06 	bl	8000448 <__aeabi_dcmpeq>
 8008c3c:	2800      	cmp	r0, #0
 8008c3e:	d001      	beq.n	8008c44 <_svfprintf_r+0x4ec>
 8008c40:	2301      	movs	r3, #1
 8008c42:	9326      	str	r3, [sp, #152]	; 0x98
 8008c44:	4bda      	ldr	r3, [pc, #872]	; (8008fb0 <_svfprintf_r+0x858>)
 8008c46:	9319      	str	r3, [sp, #100]	; 0x64
 8008c48:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8008c4a:	2b61      	cmp	r3, #97	; 0x61
 8008c4c:	d001      	beq.n	8008c52 <_svfprintf_r+0x4fa>
 8008c4e:	4bd9      	ldr	r3, [pc, #868]	; (8008fb4 <_svfprintf_r+0x85c>)
 8008c50:	9319      	str	r3, [sp, #100]	; 0x64
 8008c52:	9b08      	ldr	r3, [sp, #32]
 8008c54:	930e      	str	r3, [sp, #56]	; 0x38
 8008c56:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008c58:	3b01      	subs	r3, #1
 8008c5a:	9311      	str	r3, [sp, #68]	; 0x44
 8008c5c:	2200      	movs	r2, #0
 8008c5e:	4bd6      	ldr	r3, [pc, #856]	; (8008fb8 <_svfprintf_r+0x860>)
 8008c60:	0020      	movs	r0, r4
 8008c62:	0029      	movs	r1, r5
 8008c64:	f7f8 fc64 	bl	8001530 <__aeabi_dmul>
 8008c68:	000d      	movs	r5, r1
 8008c6a:	0004      	movs	r4, r0
 8008c6c:	f7f9 fac2 	bl	80021f4 <__aeabi_d2iz>
 8008c70:	9021      	str	r0, [sp, #132]	; 0x84
 8008c72:	f7f9 faf5 	bl	8002260 <__aeabi_i2d>
 8008c76:	0002      	movs	r2, r0
 8008c78:	000b      	movs	r3, r1
 8008c7a:	0020      	movs	r0, r4
 8008c7c:	0029      	movs	r1, r5
 8008c7e:	f7f8 ff19 	bl	8001ab4 <__aeabi_dsub>
 8008c82:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8008c84:	000d      	movs	r5, r1
 8008c86:	001a      	movs	r2, r3
 8008c88:	3201      	adds	r2, #1
 8008c8a:	9921      	ldr	r1, [sp, #132]	; 0x84
 8008c8c:	920e      	str	r2, [sp, #56]	; 0x38
 8008c8e:	9223      	str	r2, [sp, #140]	; 0x8c
 8008c90:	9a19      	ldr	r2, [sp, #100]	; 0x64
 8008c92:	0004      	movs	r4, r0
 8008c94:	5c52      	ldrb	r2, [r2, r1]
 8008c96:	701a      	strb	r2, [r3, #0]
 8008c98:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8008c9a:	9320      	str	r3, [sp, #128]	; 0x80
 8008c9c:	3301      	adds	r3, #1
 8008c9e:	d00a      	beq.n	8008cb6 <_svfprintf_r+0x55e>
 8008ca0:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8008ca2:	2200      	movs	r2, #0
 8008ca4:	3b01      	subs	r3, #1
 8008ca6:	9311      	str	r3, [sp, #68]	; 0x44
 8008ca8:	0020      	movs	r0, r4
 8008caa:	2300      	movs	r3, #0
 8008cac:	0029      	movs	r1, r5
 8008cae:	f7f7 fbcb 	bl	8000448 <__aeabi_dcmpeq>
 8008cb2:	2800      	cmp	r0, #0
 8008cb4:	d0d2      	beq.n	8008c5c <_svfprintf_r+0x504>
 8008cb6:	2200      	movs	r2, #0
 8008cb8:	0020      	movs	r0, r4
 8008cba:	0029      	movs	r1, r5
 8008cbc:	4bbf      	ldr	r3, [pc, #764]	; (8008fbc <_svfprintf_r+0x864>)
 8008cbe:	f7f7 fbdd 	bl	800047c <__aeabi_dcmpgt>
 8008cc2:	2800      	cmp	r0, #0
 8008cc4:	d10c      	bne.n	8008ce0 <_svfprintf_r+0x588>
 8008cc6:	2200      	movs	r2, #0
 8008cc8:	0020      	movs	r0, r4
 8008cca:	0029      	movs	r1, r5
 8008ccc:	4bbb      	ldr	r3, [pc, #748]	; (8008fbc <_svfprintf_r+0x864>)
 8008cce:	f7f7 fbbb 	bl	8000448 <__aeabi_dcmpeq>
 8008cd2:	2800      	cmp	r0, #0
 8008cd4:	d100      	bne.n	8008cd8 <_svfprintf_r+0x580>
 8008cd6:	e191      	b.n	8008ffc <_svfprintf_r+0x8a4>
 8008cd8:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8008cda:	07db      	lsls	r3, r3, #31
 8008cdc:	d400      	bmi.n	8008ce0 <_svfprintf_r+0x588>
 8008cde:	e18d      	b.n	8008ffc <_svfprintf_r+0x8a4>
 8008ce0:	2030      	movs	r0, #48	; 0x30
 8008ce2:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8008ce4:	932a      	str	r3, [sp, #168]	; 0xa8
 8008ce6:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8008ce8:	7bdb      	ldrb	r3, [r3, #15]
 8008cea:	9a2a      	ldr	r2, [sp, #168]	; 0xa8
 8008cec:	3a01      	subs	r2, #1
 8008cee:	922a      	str	r2, [sp, #168]	; 0xa8
 8008cf0:	7811      	ldrb	r1, [r2, #0]
 8008cf2:	4299      	cmp	r1, r3
 8008cf4:	d100      	bne.n	8008cf8 <_svfprintf_r+0x5a0>
 8008cf6:	e171      	b.n	8008fdc <_svfprintf_r+0x884>
 8008cf8:	1c4b      	adds	r3, r1, #1
 8008cfa:	b2db      	uxtb	r3, r3
 8008cfc:	2939      	cmp	r1, #57	; 0x39
 8008cfe:	d101      	bne.n	8008d04 <_svfprintf_r+0x5ac>
 8008d00:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8008d02:	7a9b      	ldrb	r3, [r3, #10]
 8008d04:	7013      	strb	r3, [r2, #0]
 8008d06:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8008d08:	9a08      	ldr	r2, [sp, #32]
 8008d0a:	9d26      	ldr	r5, [sp, #152]	; 0x98
 8008d0c:	1a9b      	subs	r3, r3, r2
 8008d0e:	930e      	str	r3, [sp, #56]	; 0x38
 8008d10:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8008d12:	2b47      	cmp	r3, #71	; 0x47
 8008d14:	d000      	beq.n	8008d18 <_svfprintf_r+0x5c0>
 8008d16:	e1c4      	b.n	80090a2 <_svfprintf_r+0x94a>
 8008d18:	1ceb      	adds	r3, r5, #3
 8008d1a:	db03      	blt.n	8008d24 <_svfprintf_r+0x5cc>
 8008d1c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008d1e:	42ab      	cmp	r3, r5
 8008d20:	db00      	blt.n	8008d24 <_svfprintf_r+0x5cc>
 8008d22:	e1e6      	b.n	80090f2 <_svfprintf_r+0x99a>
 8008d24:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8008d26:	3b02      	subs	r3, #2
 8008d28:	930f      	str	r3, [sp, #60]	; 0x3c
 8008d2a:	223c      	movs	r2, #60	; 0x3c
 8008d2c:	466b      	mov	r3, sp
 8008d2e:	990f      	ldr	r1, [sp, #60]	; 0x3c
 8008d30:	189b      	adds	r3, r3, r2
 8008d32:	1e6c      	subs	r4, r5, #1
 8008d34:	3a1c      	subs	r2, #28
 8008d36:	2000      	movs	r0, #0
 8008d38:	781b      	ldrb	r3, [r3, #0]
 8008d3a:	9426      	str	r4, [sp, #152]	; 0x98
 8008d3c:	4391      	bics	r1, r2
 8008d3e:	2941      	cmp	r1, #65	; 0x41
 8008d40:	d102      	bne.n	8008d48 <_svfprintf_r+0x5f0>
 8008d42:	330f      	adds	r3, #15
 8008d44:	b2db      	uxtb	r3, r3
 8008d46:	3001      	adds	r0, #1
 8008d48:	a928      	add	r1, sp, #160	; 0xa0
 8008d4a:	700b      	strb	r3, [r1, #0]
 8008d4c:	232b      	movs	r3, #43	; 0x2b
 8008d4e:	2c00      	cmp	r4, #0
 8008d50:	da02      	bge.n	8008d58 <_svfprintf_r+0x600>
 8008d52:	2401      	movs	r4, #1
 8008d54:	3302      	adds	r3, #2
 8008d56:	1b64      	subs	r4, r4, r5
 8008d58:	704b      	strb	r3, [r1, #1]
 8008d5a:	2c09      	cmp	r4, #9
 8008d5c:	dc00      	bgt.n	8008d60 <_svfprintf_r+0x608>
 8008d5e:	e1ba      	b.n	80090d6 <_svfprintf_r+0x97e>
 8008d60:	2337      	movs	r3, #55	; 0x37
 8008d62:	250a      	movs	r5, #10
 8008d64:	aa1e      	add	r2, sp, #120	; 0x78
 8008d66:	189b      	adds	r3, r3, r2
 8008d68:	9310      	str	r3, [sp, #64]	; 0x40
 8008d6a:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8008d6c:	0020      	movs	r0, r4
 8008d6e:	9309      	str	r3, [sp, #36]	; 0x24
 8008d70:	0029      	movs	r1, r5
 8008d72:	3b01      	subs	r3, #1
 8008d74:	9310      	str	r3, [sp, #64]	; 0x40
 8008d76:	f7f7 fb51 	bl	800041c <__aeabi_idivmod>
 8008d7a:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8008d7c:	3130      	adds	r1, #48	; 0x30
 8008d7e:	7019      	strb	r1, [r3, #0]
 8008d80:	0020      	movs	r0, r4
 8008d82:	0029      	movs	r1, r5
 8008d84:	9411      	str	r4, [sp, #68]	; 0x44
 8008d86:	f7f7 fa63 	bl	8000250 <__divsi3>
 8008d8a:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8008d8c:	0004      	movs	r4, r0
 8008d8e:	2b63      	cmp	r3, #99	; 0x63
 8008d90:	dceb      	bgt.n	8008d6a <_svfprintf_r+0x612>
 8008d92:	222a      	movs	r2, #42	; 0x2a
 8008d94:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008d96:	a81e      	add	r0, sp, #120	; 0x78
 8008d98:	1e99      	subs	r1, r3, #2
 8008d9a:	1812      	adds	r2, r2, r0
 8008d9c:	2037      	movs	r0, #55	; 0x37
 8008d9e:	000b      	movs	r3, r1
 8008da0:	3430      	adds	r4, #48	; 0x30
 8008da2:	700c      	strb	r4, [r1, #0]
 8008da4:	ac1e      	add	r4, sp, #120	; 0x78
 8008da6:	1900      	adds	r0, r0, r4
 8008da8:	4283      	cmp	r3, r0
 8008daa:	d200      	bcs.n	8008dae <_svfprintf_r+0x656>
 8008dac:	e18e      	b.n	80090cc <_svfprintf_r+0x974>
 8008dae:	2300      	movs	r3, #0
 8008db0:	4281      	cmp	r1, r0
 8008db2:	d804      	bhi.n	8008dbe <_svfprintf_r+0x666>
 8008db4:	aa1e      	add	r2, sp, #120	; 0x78
 8008db6:	3339      	adds	r3, #57	; 0x39
 8008db8:	189b      	adds	r3, r3, r2
 8008dba:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8008dbc:	1a9b      	subs	r3, r3, r2
 8008dbe:	222a      	movs	r2, #42	; 0x2a
 8008dc0:	a91e      	add	r1, sp, #120	; 0x78
 8008dc2:	1852      	adds	r2, r2, r1
 8008dc4:	18d3      	adds	r3, r2, r3
 8008dc6:	aa28      	add	r2, sp, #160	; 0xa0
 8008dc8:	1a9b      	subs	r3, r3, r2
 8008dca:	931e      	str	r3, [sp, #120]	; 0x78
 8008dcc:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 8008dce:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8008dd0:	4694      	mov	ip, r2
 8008dd2:	4463      	add	r3, ip
 8008dd4:	9309      	str	r3, [sp, #36]	; 0x24
 8008dd6:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8008dd8:	2b01      	cmp	r3, #1
 8008dda:	dc01      	bgt.n	8008de0 <_svfprintf_r+0x688>
 8008ddc:	07f3      	lsls	r3, r6, #31
 8008dde:	d504      	bpl.n	8008dea <_svfprintf_r+0x692>
 8008de0:	9a16      	ldr	r2, [sp, #88]	; 0x58
 8008de2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008de4:	4694      	mov	ip, r2
 8008de6:	4463      	add	r3, ip
 8008de8:	9309      	str	r3, [sp, #36]	; 0x24
 8008dea:	2280      	movs	r2, #128	; 0x80
 8008dec:	4b74      	ldr	r3, [pc, #464]	; (8008fc0 <_svfprintf_r+0x868>)
 8008dee:	0052      	lsls	r2, r2, #1
 8008df0:	4033      	ands	r3, r6
 8008df2:	431a      	orrs	r2, r3
 8008df4:	2300      	movs	r3, #0
 8008df6:	001d      	movs	r5, r3
 8008df8:	921a      	str	r2, [sp, #104]	; 0x68
 8008dfa:	9310      	str	r3, [sp, #64]	; 0x40
 8008dfc:	9311      	str	r3, [sp, #68]	; 0x44
 8008dfe:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8008e00:	9e1a      	ldr	r6, [sp, #104]	; 0x68
 8008e02:	9319      	str	r3, [sp, #100]	; 0x64
 8008e04:	2b00      	cmp	r3, #0
 8008e06:	d006      	beq.n	8008e16 <_svfprintf_r+0x6be>
 8008e08:	231b      	movs	r3, #27
 8008e0a:	aa1e      	add	r2, sp, #120	; 0x78
 8008e0c:	189b      	adds	r3, r3, r2
 8008e0e:	222d      	movs	r2, #45	; 0x2d
 8008e10:	701a      	strb	r2, [r3, #0]
 8008e12:	2300      	movs	r3, #0
 8008e14:	9319      	str	r3, [sp, #100]	; 0x64
 8008e16:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8008e18:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8008e1a:	931a      	str	r3, [sp, #104]	; 0x68
 8008e1c:	4293      	cmp	r3, r2
 8008e1e:	da00      	bge.n	8008e22 <_svfprintf_r+0x6ca>
 8008e20:	921a      	str	r2, [sp, #104]	; 0x68
 8008e22:	231b      	movs	r3, #27
 8008e24:	aa1e      	add	r2, sp, #120	; 0x78
 8008e26:	189b      	adds	r3, r3, r2
 8008e28:	781b      	ldrb	r3, [r3, #0]
 8008e2a:	1e5a      	subs	r2, r3, #1
 8008e2c:	4193      	sbcs	r3, r2
 8008e2e:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 8008e30:	18d3      	adds	r3, r2, r3
 8008e32:	931a      	str	r3, [sp, #104]	; 0x68
 8008e34:	0032      	movs	r2, r6
 8008e36:	2302      	movs	r3, #2
 8008e38:	401a      	ands	r2, r3
 8008e3a:	9220      	str	r2, [sp, #128]	; 0x80
 8008e3c:	421e      	tst	r6, r3
 8008e3e:	d002      	beq.n	8008e46 <_svfprintf_r+0x6ee>
 8008e40:	9b1a      	ldr	r3, [sp, #104]	; 0x68
 8008e42:	3302      	adds	r3, #2
 8008e44:	931a      	str	r3, [sp, #104]	; 0x68
 8008e46:	2384      	movs	r3, #132	; 0x84
 8008e48:	0032      	movs	r2, r6
 8008e4a:	401a      	ands	r2, r3
 8008e4c:	9221      	str	r2, [sp, #132]	; 0x84
 8008e4e:	421e      	tst	r6, r3
 8008e50:	d11f      	bne.n	8008e92 <_svfprintf_r+0x73a>
 8008e52:	9b18      	ldr	r3, [sp, #96]	; 0x60
 8008e54:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 8008e56:	1a9c      	subs	r4, r3, r2
 8008e58:	2c00      	cmp	r4, #0
 8008e5a:	dd1a      	ble.n	8008e92 <_svfprintf_r+0x73a>
 8008e5c:	0039      	movs	r1, r7
 8008e5e:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
 8008e60:	4858      	ldr	r0, [pc, #352]	; (8008fc4 <_svfprintf_r+0x86c>)
 8008e62:	9a2e      	ldr	r2, [sp, #184]	; 0xb8
 8008e64:	3301      	adds	r3, #1
 8008e66:	3108      	adds	r1, #8
 8008e68:	6038      	str	r0, [r7, #0]
 8008e6a:	2c10      	cmp	r4, #16
 8008e6c:	dd00      	ble.n	8008e70 <_svfprintf_r+0x718>
 8008e6e:	e31c      	b.n	80094aa <_svfprintf_r+0xd52>
 8008e70:	607c      	str	r4, [r7, #4]
 8008e72:	18a4      	adds	r4, r4, r2
 8008e74:	000f      	movs	r7, r1
 8008e76:	942e      	str	r4, [sp, #184]	; 0xb8
 8008e78:	932d      	str	r3, [sp, #180]	; 0xb4
 8008e7a:	2b07      	cmp	r3, #7
 8008e7c:	dd09      	ble.n	8008e92 <_svfprintf_r+0x73a>
 8008e7e:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8008e80:	980a      	ldr	r0, [sp, #40]	; 0x28
 8008e82:	aa2c      	add	r2, sp, #176	; 0xb0
 8008e84:	f001 ff8c 	bl	800ada0 <__ssprint_r>
 8008e88:	2800      	cmp	r0, #0
 8008e8a:	d001      	beq.n	8008e90 <_svfprintf_r+0x738>
 8008e8c:	f000 fe43 	bl	8009b16 <_svfprintf_r+0x13be>
 8008e90:	af2f      	add	r7, sp, #188	; 0xbc
 8008e92:	221b      	movs	r2, #27
 8008e94:	a91e      	add	r1, sp, #120	; 0x78
 8008e96:	1852      	adds	r2, r2, r1
 8008e98:	7811      	ldrb	r1, [r2, #0]
 8008e9a:	9b2e      	ldr	r3, [sp, #184]	; 0xb8
 8008e9c:	2900      	cmp	r1, #0
 8008e9e:	d014      	beq.n	8008eca <_svfprintf_r+0x772>
 8008ea0:	603a      	str	r2, [r7, #0]
 8008ea2:	2201      	movs	r2, #1
 8008ea4:	189b      	adds	r3, r3, r2
 8008ea6:	932e      	str	r3, [sp, #184]	; 0xb8
 8008ea8:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
 8008eaa:	607a      	str	r2, [r7, #4]
 8008eac:	189b      	adds	r3, r3, r2
 8008eae:	932d      	str	r3, [sp, #180]	; 0xb4
 8008eb0:	3708      	adds	r7, #8
 8008eb2:	2b07      	cmp	r3, #7
 8008eb4:	dd09      	ble.n	8008eca <_svfprintf_r+0x772>
 8008eb6:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8008eb8:	980a      	ldr	r0, [sp, #40]	; 0x28
 8008eba:	aa2c      	add	r2, sp, #176	; 0xb0
 8008ebc:	f001 ff70 	bl	800ada0 <__ssprint_r>
 8008ec0:	2800      	cmp	r0, #0
 8008ec2:	d001      	beq.n	8008ec8 <_svfprintf_r+0x770>
 8008ec4:	f000 fe27 	bl	8009b16 <_svfprintf_r+0x13be>
 8008ec8:	af2f      	add	r7, sp, #188	; 0xbc
 8008eca:	9a20      	ldr	r2, [sp, #128]	; 0x80
 8008ecc:	9b2e      	ldr	r3, [sp, #184]	; 0xb8
 8008ece:	2a00      	cmp	r2, #0
 8008ed0:	d015      	beq.n	8008efe <_svfprintf_r+0x7a6>
 8008ed2:	aa25      	add	r2, sp, #148	; 0x94
 8008ed4:	603a      	str	r2, [r7, #0]
 8008ed6:	2202      	movs	r2, #2
 8008ed8:	189b      	adds	r3, r3, r2
 8008eda:	932e      	str	r3, [sp, #184]	; 0xb8
 8008edc:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
 8008ede:	607a      	str	r2, [r7, #4]
 8008ee0:	3301      	adds	r3, #1
 8008ee2:	932d      	str	r3, [sp, #180]	; 0xb4
 8008ee4:	3708      	adds	r7, #8
 8008ee6:	2b07      	cmp	r3, #7
 8008ee8:	dd09      	ble.n	8008efe <_svfprintf_r+0x7a6>
 8008eea:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8008eec:	980a      	ldr	r0, [sp, #40]	; 0x28
 8008eee:	aa2c      	add	r2, sp, #176	; 0xb0
 8008ef0:	f001 ff56 	bl	800ada0 <__ssprint_r>
 8008ef4:	2800      	cmp	r0, #0
 8008ef6:	d001      	beq.n	8008efc <_svfprintf_r+0x7a4>
 8008ef8:	f000 fe0d 	bl	8009b16 <_svfprintf_r+0x13be>
 8008efc:	af2f      	add	r7, sp, #188	; 0xbc
 8008efe:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8008f00:	2b80      	cmp	r3, #128	; 0x80
 8008f02:	d11f      	bne.n	8008f44 <_svfprintf_r+0x7ec>
 8008f04:	9b18      	ldr	r3, [sp, #96]	; 0x60
 8008f06:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 8008f08:	1a9c      	subs	r4, r3, r2
 8008f0a:	2c00      	cmp	r4, #0
 8008f0c:	dd1a      	ble.n	8008f44 <_svfprintf_r+0x7ec>
 8008f0e:	0039      	movs	r1, r7
 8008f10:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
 8008f12:	482d      	ldr	r0, [pc, #180]	; (8008fc8 <_svfprintf_r+0x870>)
 8008f14:	9a2e      	ldr	r2, [sp, #184]	; 0xb8
 8008f16:	3301      	adds	r3, #1
 8008f18:	3108      	adds	r1, #8
 8008f1a:	6038      	str	r0, [r7, #0]
 8008f1c:	2c10      	cmp	r4, #16
 8008f1e:	dd00      	ble.n	8008f22 <_svfprintf_r+0x7ca>
 8008f20:	e2d6      	b.n	80094d0 <_svfprintf_r+0xd78>
 8008f22:	607c      	str	r4, [r7, #4]
 8008f24:	18a4      	adds	r4, r4, r2
 8008f26:	000f      	movs	r7, r1
 8008f28:	942e      	str	r4, [sp, #184]	; 0xb8
 8008f2a:	932d      	str	r3, [sp, #180]	; 0xb4
 8008f2c:	2b07      	cmp	r3, #7
 8008f2e:	dd09      	ble.n	8008f44 <_svfprintf_r+0x7ec>
 8008f30:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8008f32:	980a      	ldr	r0, [sp, #40]	; 0x28
 8008f34:	aa2c      	add	r2, sp, #176	; 0xb0
 8008f36:	f001 ff33 	bl	800ada0 <__ssprint_r>
 8008f3a:	2800      	cmp	r0, #0
 8008f3c:	d001      	beq.n	8008f42 <_svfprintf_r+0x7ea>
 8008f3e:	f000 fdea 	bl	8009b16 <_svfprintf_r+0x13be>
 8008f42:	af2f      	add	r7, sp, #188	; 0xbc
 8008f44:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8008f46:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8008f48:	1a9c      	subs	r4, r3, r2
 8008f4a:	2c00      	cmp	r4, #0
 8008f4c:	dd1a      	ble.n	8008f84 <_svfprintf_r+0x82c>
 8008f4e:	0039      	movs	r1, r7
 8008f50:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
 8008f52:	481d      	ldr	r0, [pc, #116]	; (8008fc8 <_svfprintf_r+0x870>)
 8008f54:	9a2e      	ldr	r2, [sp, #184]	; 0xb8
 8008f56:	3301      	adds	r3, #1
 8008f58:	3108      	adds	r1, #8
 8008f5a:	6038      	str	r0, [r7, #0]
 8008f5c:	2c10      	cmp	r4, #16
 8008f5e:	dd00      	ble.n	8008f62 <_svfprintf_r+0x80a>
 8008f60:	e2c9      	b.n	80094f6 <_svfprintf_r+0xd9e>
 8008f62:	18a2      	adds	r2, r4, r2
 8008f64:	607c      	str	r4, [r7, #4]
 8008f66:	922e      	str	r2, [sp, #184]	; 0xb8
 8008f68:	000f      	movs	r7, r1
 8008f6a:	932d      	str	r3, [sp, #180]	; 0xb4
 8008f6c:	2b07      	cmp	r3, #7
 8008f6e:	dd09      	ble.n	8008f84 <_svfprintf_r+0x82c>
 8008f70:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8008f72:	980a      	ldr	r0, [sp, #40]	; 0x28
 8008f74:	aa2c      	add	r2, sp, #176	; 0xb0
 8008f76:	f001 ff13 	bl	800ada0 <__ssprint_r>
 8008f7a:	2800      	cmp	r0, #0
 8008f7c:	d001      	beq.n	8008f82 <_svfprintf_r+0x82a>
 8008f7e:	f000 fdca 	bl	8009b16 <_svfprintf_r+0x13be>
 8008f82:	af2f      	add	r7, sp, #188	; 0xbc
 8008f84:	9b2e      	ldr	r3, [sp, #184]	; 0xb8
 8008f86:	9319      	str	r3, [sp, #100]	; 0x64
 8008f88:	05f3      	lsls	r3, r6, #23
 8008f8a:	d500      	bpl.n	8008f8e <_svfprintf_r+0x836>
 8008f8c:	e2ce      	b.n	800952c <_svfprintf_r+0xdd4>
 8008f8e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8008f90:	9b08      	ldr	r3, [sp, #32]
 8008f92:	4694      	mov	ip, r2
 8008f94:	603b      	str	r3, [r7, #0]
 8008f96:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008f98:	607b      	str	r3, [r7, #4]
 8008f9a:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8008f9c:	4463      	add	r3, ip
 8008f9e:	932e      	str	r3, [sp, #184]	; 0xb8
 8008fa0:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
 8008fa2:	3301      	adds	r3, #1
 8008fa4:	932d      	str	r3, [sp, #180]	; 0xb4
 8008fa6:	2b07      	cmp	r3, #7
 8008fa8:	dd00      	ble.n	8008fac <_svfprintf_r+0x854>
 8008faa:	e3a3      	b.n	80096f4 <_svfprintf_r+0xf9c>
 8008fac:	3708      	adds	r7, #8
 8008fae:	e301      	b.n	80095b4 <_svfprintf_r+0xe5c>
 8008fb0:	0800de64 	.word	0x0800de64
 8008fb4:	0800de75 	.word	0x0800de75
 8008fb8:	40300000 	.word	0x40300000
 8008fbc:	3fe00000 	.word	0x3fe00000
 8008fc0:	fffffbff 	.word	0xfffffbff
 8008fc4:	0800de88 	.word	0x0800de88
 8008fc8:	0800de98 	.word	0x0800de98
 8008fcc:	9b08      	ldr	r3, [sp, #32]
 8008fce:	930c      	str	r3, [sp, #48]	; 0x30
 8008fd0:	e610      	b.n	8008bf4 <_svfprintf_r+0x49c>
 8008fd2:	2306      	movs	r3, #6
 8008fd4:	e5fd      	b.n	8008bd2 <_svfprintf_r+0x47a>
 8008fd6:	930e      	str	r3, [sp, #56]	; 0x38
 8008fd8:	2300      	movs	r3, #0
 8008fda:	e61a      	b.n	8008c12 <_svfprintf_r+0x4ba>
 8008fdc:	7010      	strb	r0, [r2, #0]
 8008fde:	e684      	b.n	8008cea <_svfprintf_r+0x592>
 8008fe0:	7018      	strb	r0, [r3, #0]
 8008fe2:	3301      	adds	r3, #1
 8008fe4:	1aca      	subs	r2, r1, r3
 8008fe6:	d5fb      	bpl.n	8008fe0 <_svfprintf_r+0x888>
 8008fe8:	9a20      	ldr	r2, [sp, #128]	; 0x80
 8008fea:	2300      	movs	r3, #0
 8008fec:	3201      	adds	r2, #1
 8008fee:	db01      	blt.n	8008ff4 <_svfprintf_r+0x89c>
 8008ff0:	9b20      	ldr	r3, [sp, #128]	; 0x80
 8008ff2:	3301      	adds	r3, #1
 8008ff4:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8008ff6:	18d3      	adds	r3, r2, r3
 8008ff8:	9323      	str	r3, [sp, #140]	; 0x8c
 8008ffa:	e684      	b.n	8008d06 <_svfprintf_r+0x5ae>
 8008ffc:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8008ffe:	9920      	ldr	r1, [sp, #128]	; 0x80
 8009000:	2030      	movs	r0, #48	; 0x30
 8009002:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8009004:	1851      	adds	r1, r2, r1
 8009006:	e7ed      	b.n	8008fe4 <_svfprintf_r+0x88c>
 8009008:	9a10      	ldr	r2, [sp, #64]	; 0x40
 800900a:	2303      	movs	r3, #3
 800900c:	9c09      	ldr	r4, [sp, #36]	; 0x24
 800900e:	2a46      	cmp	r2, #70	; 0x46
 8009010:	d006      	beq.n	8009020 <_svfprintf_r+0x8c8>
 8009012:	0014      	movs	r4, r2
 8009014:	3c45      	subs	r4, #69	; 0x45
 8009016:	4262      	negs	r2, r4
 8009018:	4154      	adcs	r4, r2
 800901a:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800901c:	3b01      	subs	r3, #1
 800901e:	1914      	adds	r4, r2, r4
 8009020:	aa2a      	add	r2, sp, #168	; 0xa8
 8009022:	9204      	str	r2, [sp, #16]
 8009024:	aa27      	add	r2, sp, #156	; 0x9c
 8009026:	9203      	str	r2, [sp, #12]
 8009028:	aa26      	add	r2, sp, #152	; 0x98
 800902a:	9202      	str	r2, [sp, #8]
 800902c:	9300      	str	r3, [sp, #0]
 800902e:	002a      	movs	r2, r5
 8009030:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8009032:	980a      	ldr	r0, [sp, #40]	; 0x28
 8009034:	9401      	str	r4, [sp, #4]
 8009036:	f001 f8af 	bl	800a198 <_dtoa_r>
 800903a:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800903c:	9008      	str	r0, [sp, #32]
 800903e:	2b47      	cmp	r3, #71	; 0x47
 8009040:	d103      	bne.n	800904a <_svfprintf_r+0x8f2>
 8009042:	07f3      	lsls	r3, r6, #31
 8009044:	d401      	bmi.n	800904a <_svfprintf_r+0x8f2>
 8009046:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
 8009048:	e65e      	b.n	8008d08 <_svfprintf_r+0x5b0>
 800904a:	9b08      	ldr	r3, [sp, #32]
 800904c:	191b      	adds	r3, r3, r4
 800904e:	9311      	str	r3, [sp, #68]	; 0x44
 8009050:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8009052:	2b46      	cmp	r3, #70	; 0x46
 8009054:	d112      	bne.n	800907c <_svfprintf_r+0x924>
 8009056:	9b08      	ldr	r3, [sp, #32]
 8009058:	781b      	ldrb	r3, [r3, #0]
 800905a:	2b30      	cmp	r3, #48	; 0x30
 800905c:	d10a      	bne.n	8009074 <_svfprintf_r+0x91c>
 800905e:	2200      	movs	r2, #0
 8009060:	2300      	movs	r3, #0
 8009062:	0028      	movs	r0, r5
 8009064:	990e      	ldr	r1, [sp, #56]	; 0x38
 8009066:	f7f7 f9ef 	bl	8000448 <__aeabi_dcmpeq>
 800906a:	2800      	cmp	r0, #0
 800906c:	d102      	bne.n	8009074 <_svfprintf_r+0x91c>
 800906e:	2301      	movs	r3, #1
 8009070:	1b1b      	subs	r3, r3, r4
 8009072:	9326      	str	r3, [sp, #152]	; 0x98
 8009074:	9a11      	ldr	r2, [sp, #68]	; 0x44
 8009076:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8009078:	18d3      	adds	r3, r2, r3
 800907a:	9311      	str	r3, [sp, #68]	; 0x44
 800907c:	2200      	movs	r2, #0
 800907e:	2300      	movs	r3, #0
 8009080:	0028      	movs	r0, r5
 8009082:	990e      	ldr	r1, [sp, #56]	; 0x38
 8009084:	f7f7 f9e0 	bl	8000448 <__aeabi_dcmpeq>
 8009088:	2800      	cmp	r0, #0
 800908a:	d001      	beq.n	8009090 <_svfprintf_r+0x938>
 800908c:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800908e:	932a      	str	r3, [sp, #168]	; 0xa8
 8009090:	2230      	movs	r2, #48	; 0x30
 8009092:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
 8009094:	9911      	ldr	r1, [sp, #68]	; 0x44
 8009096:	4299      	cmp	r1, r3
 8009098:	d9d5      	bls.n	8009046 <_svfprintf_r+0x8ee>
 800909a:	1c59      	adds	r1, r3, #1
 800909c:	912a      	str	r1, [sp, #168]	; 0xa8
 800909e:	701a      	strb	r2, [r3, #0]
 80090a0:	e7f7      	b.n	8009092 <_svfprintf_r+0x93a>
 80090a2:	9b10      	ldr	r3, [sp, #64]	; 0x40
 80090a4:	2b46      	cmp	r3, #70	; 0x46
 80090a6:	d000      	beq.n	80090aa <_svfprintf_r+0x952>
 80090a8:	e63f      	b.n	8008d2a <_svfprintf_r+0x5d2>
 80090aa:	2201      	movs	r2, #1
 80090ac:	0033      	movs	r3, r6
 80090ae:	9909      	ldr	r1, [sp, #36]	; 0x24
 80090b0:	4013      	ands	r3, r2
 80090b2:	430b      	orrs	r3, r1
 80090b4:	2d00      	cmp	r5, #0
 80090b6:	dd2c      	ble.n	8009112 <_svfprintf_r+0x9ba>
 80090b8:	2b00      	cmp	r3, #0
 80090ba:	d046      	beq.n	800914a <_svfprintf_r+0x9f2>
 80090bc:	000a      	movs	r2, r1
 80090be:	9b16      	ldr	r3, [sp, #88]	; 0x58
 80090c0:	18eb      	adds	r3, r5, r3
 80090c2:	18d3      	adds	r3, r2, r3
 80090c4:	9309      	str	r3, [sp, #36]	; 0x24
 80090c6:	2366      	movs	r3, #102	; 0x66
 80090c8:	930f      	str	r3, [sp, #60]	; 0x3c
 80090ca:	e030      	b.n	800912e <_svfprintf_r+0x9d6>
 80090cc:	781c      	ldrb	r4, [r3, #0]
 80090ce:	3301      	adds	r3, #1
 80090d0:	7014      	strb	r4, [r2, #0]
 80090d2:	3201      	adds	r2, #1
 80090d4:	e668      	b.n	8008da8 <_svfprintf_r+0x650>
 80090d6:	222a      	movs	r2, #42	; 0x2a
 80090d8:	ab1e      	add	r3, sp, #120	; 0x78
 80090da:	18d2      	adds	r2, r2, r3
 80090dc:	2800      	cmp	r0, #0
 80090de:	d104      	bne.n	80090ea <_svfprintf_r+0x992>
 80090e0:	2330      	movs	r3, #48	; 0x30
 80090e2:	222b      	movs	r2, #43	; 0x2b
 80090e4:	708b      	strb	r3, [r1, #2]
 80090e6:	ab1e      	add	r3, sp, #120	; 0x78
 80090e8:	18d2      	adds	r2, r2, r3
 80090ea:	3430      	adds	r4, #48	; 0x30
 80090ec:	1c53      	adds	r3, r2, #1
 80090ee:	7014      	strb	r4, [r2, #0]
 80090f0:	e669      	b.n	8008dc6 <_svfprintf_r+0x66e>
 80090f2:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80090f4:	42ab      	cmp	r3, r5
 80090f6:	dd12      	ble.n	800911e <_svfprintf_r+0x9c6>
 80090f8:	9a16      	ldr	r2, [sp, #88]	; 0x58
 80090fa:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80090fc:	4694      	mov	ip, r2
 80090fe:	4463      	add	r3, ip
 8009100:	9309      	str	r3, [sp, #36]	; 0x24
 8009102:	2367      	movs	r3, #103	; 0x67
 8009104:	930f      	str	r3, [sp, #60]	; 0x3c
 8009106:	2d00      	cmp	r5, #0
 8009108:	dc11      	bgt.n	800912e <_svfprintf_r+0x9d6>
 800910a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800910c:	1b5b      	subs	r3, r3, r5
 800910e:	3301      	adds	r3, #1
 8009110:	e00c      	b.n	800912c <_svfprintf_r+0x9d4>
 8009112:	2b00      	cmp	r3, #0
 8009114:	d01b      	beq.n	800914e <_svfprintf_r+0x9f6>
 8009116:	9b16      	ldr	r3, [sp, #88]	; 0x58
 8009118:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800911a:	3301      	adds	r3, #1
 800911c:	e7d1      	b.n	80090c2 <_svfprintf_r+0x96a>
 800911e:	2367      	movs	r3, #103	; 0x67
 8009120:	9509      	str	r5, [sp, #36]	; 0x24
 8009122:	930f      	str	r3, [sp, #60]	; 0x3c
 8009124:	07f3      	lsls	r3, r6, #31
 8009126:	d502      	bpl.n	800912e <_svfprintf_r+0x9d6>
 8009128:	9b16      	ldr	r3, [sp, #88]	; 0x58
 800912a:	18eb      	adds	r3, r5, r3
 800912c:	9309      	str	r3, [sp, #36]	; 0x24
 800912e:	2380      	movs	r3, #128	; 0x80
 8009130:	0032      	movs	r2, r6
 8009132:	00db      	lsls	r3, r3, #3
 8009134:	401a      	ands	r2, r3
 8009136:	9211      	str	r2, [sp, #68]	; 0x44
 8009138:	2200      	movs	r2, #0
 800913a:	9210      	str	r2, [sp, #64]	; 0x40
 800913c:	421e      	tst	r6, r3
 800913e:	d100      	bne.n	8009142 <_svfprintf_r+0x9ea>
 8009140:	e65d      	b.n	8008dfe <_svfprintf_r+0x6a6>
 8009142:	4295      	cmp	r5, r2
 8009144:	dc25      	bgt.n	8009192 <_svfprintf_r+0xa3a>
 8009146:	9211      	str	r2, [sp, #68]	; 0x44
 8009148:	e659      	b.n	8008dfe <_svfprintf_r+0x6a6>
 800914a:	9509      	str	r5, [sp, #36]	; 0x24
 800914c:	e7bb      	b.n	80090c6 <_svfprintf_r+0x96e>
 800914e:	2366      	movs	r3, #102	; 0x66
 8009150:	9209      	str	r2, [sp, #36]	; 0x24
 8009152:	930f      	str	r3, [sp, #60]	; 0x3c
 8009154:	e7eb      	b.n	800912e <_svfprintf_r+0x9d6>
 8009156:	42ab      	cmp	r3, r5
 8009158:	da0e      	bge.n	8009178 <_svfprintf_r+0xa20>
 800915a:	1aed      	subs	r5, r5, r3
 800915c:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800915e:	785b      	ldrb	r3, [r3, #1]
 8009160:	2b00      	cmp	r3, #0
 8009162:	d012      	beq.n	800918a <_svfprintf_r+0xa32>
 8009164:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8009166:	3301      	adds	r3, #1
 8009168:	9311      	str	r3, [sp, #68]	; 0x44
 800916a:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800916c:	3301      	adds	r3, #1
 800916e:	9312      	str	r3, [sp, #72]	; 0x48
 8009170:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8009172:	781b      	ldrb	r3, [r3, #0]
 8009174:	2bff      	cmp	r3, #255	; 0xff
 8009176:	d1ee      	bne.n	8009156 <_svfprintf_r+0x9fe>
 8009178:	9a10      	ldr	r2, [sp, #64]	; 0x40
 800917a:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800917c:	189b      	adds	r3, r3, r2
 800917e:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
 8009180:	4353      	muls	r3, r2
 8009182:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8009184:	189b      	adds	r3, r3, r2
 8009186:	9309      	str	r3, [sp, #36]	; 0x24
 8009188:	e639      	b.n	8008dfe <_svfprintf_r+0x6a6>
 800918a:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800918c:	3301      	adds	r3, #1
 800918e:	9310      	str	r3, [sp, #64]	; 0x40
 8009190:	e7ee      	b.n	8009170 <_svfprintf_r+0xa18>
 8009192:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8009194:	9311      	str	r3, [sp, #68]	; 0x44
 8009196:	e7eb      	b.n	8009170 <_svfprintf_r+0xa18>
 8009198:	1d23      	adds	r3, r4, #4
 800919a:	930d      	str	r3, [sp, #52]	; 0x34
 800919c:	06b3      	lsls	r3, r6, #26
 800919e:	d509      	bpl.n	80091b4 <_svfprintf_r+0xa5c>
 80091a0:	6823      	ldr	r3, [r4, #0]
 80091a2:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 80091a4:	601a      	str	r2, [r3, #0]
 80091a6:	17d2      	asrs	r2, r2, #31
 80091a8:	605a      	str	r2, [r3, #4]
 80091aa:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 80091ac:	9c0d      	ldr	r4, [sp, #52]	; 0x34
 80091ae:	9308      	str	r3, [sp, #32]
 80091b0:	f7ff fb0d 	bl	80087ce <_svfprintf_r+0x76>
 80091b4:	06f3      	lsls	r3, r6, #27
 80091b6:	d503      	bpl.n	80091c0 <_svfprintf_r+0xa68>
 80091b8:	6823      	ldr	r3, [r4, #0]
 80091ba:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 80091bc:	601a      	str	r2, [r3, #0]
 80091be:	e7f4      	b.n	80091aa <_svfprintf_r+0xa52>
 80091c0:	0673      	lsls	r3, r6, #25
 80091c2:	d503      	bpl.n	80091cc <_svfprintf_r+0xa74>
 80091c4:	6823      	ldr	r3, [r4, #0]
 80091c6:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 80091c8:	801a      	strh	r2, [r3, #0]
 80091ca:	e7ee      	b.n	80091aa <_svfprintf_r+0xa52>
 80091cc:	05b6      	lsls	r6, r6, #22
 80091ce:	d5f3      	bpl.n	80091b8 <_svfprintf_r+0xa60>
 80091d0:	6823      	ldr	r3, [r4, #0]
 80091d2:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 80091d4:	701a      	strb	r2, [r3, #0]
 80091d6:	e7e8      	b.n	80091aa <_svfprintf_r+0xa52>
 80091d8:	2310      	movs	r3, #16
 80091da:	431e      	orrs	r6, r3
 80091dc:	2320      	movs	r3, #32
 80091de:	0030      	movs	r0, r6
 80091e0:	4018      	ands	r0, r3
 80091e2:	421e      	tst	r6, r3
 80091e4:	d00f      	beq.n	8009206 <_svfprintf_r+0xaae>
 80091e6:	3b19      	subs	r3, #25
 80091e8:	3407      	adds	r4, #7
 80091ea:	439c      	bics	r4, r3
 80091ec:	0022      	movs	r2, r4
 80091ee:	ca18      	ldmia	r2!, {r3, r4}
 80091f0:	9306      	str	r3, [sp, #24]
 80091f2:	9407      	str	r4, [sp, #28]
 80091f4:	920d      	str	r2, [sp, #52]	; 0x34
 80091f6:	4bc9      	ldr	r3, [pc, #804]	; (800951c <_svfprintf_r+0xdc4>)
 80091f8:	401e      	ands	r6, r3
 80091fa:	2300      	movs	r3, #0
 80091fc:	221b      	movs	r2, #27
 80091fe:	a91e      	add	r1, sp, #120	; 0x78
 8009200:	1852      	adds	r2, r2, r1
 8009202:	2100      	movs	r1, #0
 8009204:	e430      	b.n	8008a68 <_svfprintf_r+0x310>
 8009206:	0022      	movs	r2, r4
 8009208:	ca08      	ldmia	r2!, {r3}
 800920a:	0031      	movs	r1, r6
 800920c:	920d      	str	r2, [sp, #52]	; 0x34
 800920e:	2210      	movs	r2, #16
 8009210:	4011      	ands	r1, r2
 8009212:	4216      	tst	r6, r2
 8009214:	d002      	beq.n	800921c <_svfprintf_r+0xac4>
 8009216:	9306      	str	r3, [sp, #24]
 8009218:	9007      	str	r0, [sp, #28]
 800921a:	e7ec      	b.n	80091f6 <_svfprintf_r+0xa9e>
 800921c:	2240      	movs	r2, #64	; 0x40
 800921e:	0030      	movs	r0, r6
 8009220:	4010      	ands	r0, r2
 8009222:	4216      	tst	r6, r2
 8009224:	d003      	beq.n	800922e <_svfprintf_r+0xad6>
 8009226:	b29b      	uxth	r3, r3
 8009228:	9306      	str	r3, [sp, #24]
 800922a:	9107      	str	r1, [sp, #28]
 800922c:	e7e3      	b.n	80091f6 <_svfprintf_r+0xa9e>
 800922e:	2280      	movs	r2, #128	; 0x80
 8009230:	0031      	movs	r1, r6
 8009232:	0092      	lsls	r2, r2, #2
 8009234:	4011      	ands	r1, r2
 8009236:	4216      	tst	r6, r2
 8009238:	d0f6      	beq.n	8009228 <_svfprintf_r+0xad0>
 800923a:	b2db      	uxtb	r3, r3
 800923c:	e7eb      	b.n	8009216 <_svfprintf_r+0xabe>
 800923e:	0023      	movs	r3, r4
 8009240:	cb04      	ldmia	r3!, {r2}
 8009242:	49b7      	ldr	r1, [pc, #732]	; (8009520 <_svfprintf_r+0xdc8>)
 8009244:	9206      	str	r2, [sp, #24]
 8009246:	aa25      	add	r2, sp, #148	; 0x94
 8009248:	8011      	strh	r1, [r2, #0]
 800924a:	4ab6      	ldr	r2, [pc, #728]	; (8009524 <_svfprintf_r+0xdcc>)
 800924c:	930d      	str	r3, [sp, #52]	; 0x34
 800924e:	2300      	movs	r3, #0
 8009250:	921f      	str	r2, [sp, #124]	; 0x7c
 8009252:	2278      	movs	r2, #120	; 0x78
 8009254:	9307      	str	r3, [sp, #28]
 8009256:	3302      	adds	r3, #2
 8009258:	431e      	orrs	r6, r3
 800925a:	920f      	str	r2, [sp, #60]	; 0x3c
 800925c:	e7ce      	b.n	80091fc <_svfprintf_r+0xaa4>
 800925e:	0023      	movs	r3, r4
 8009260:	cb04      	ldmia	r3!, {r2}
 8009262:	2400      	movs	r4, #0
 8009264:	930d      	str	r3, [sp, #52]	; 0x34
 8009266:	231b      	movs	r3, #27
 8009268:	9208      	str	r2, [sp, #32]
 800926a:	aa1e      	add	r2, sp, #120	; 0x78
 800926c:	189b      	adds	r3, r3, r2
 800926e:	701c      	strb	r4, [r3, #0]
 8009270:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009272:	3301      	adds	r3, #1
 8009274:	d00e      	beq.n	8009294 <_svfprintf_r+0xb3c>
 8009276:	0021      	movs	r1, r4
 8009278:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800927a:	9808      	ldr	r0, [sp, #32]
 800927c:	f000 fe13 	bl	8009ea6 <memchr>
 8009280:	900c      	str	r0, [sp, #48]	; 0x30
 8009282:	42a0      	cmp	r0, r4
 8009284:	d100      	bne.n	8009288 <_svfprintf_r+0xb30>
 8009286:	e10d      	b.n	80094a4 <_svfprintf_r+0xd4c>
 8009288:	9a08      	ldr	r2, [sp, #32]
 800928a:	1a83      	subs	r3, r0, r2
 800928c:	9309      	str	r3, [sp, #36]	; 0x24
 800928e:	0023      	movs	r3, r4
 8009290:	940c      	str	r4, [sp, #48]	; 0x30
 8009292:	e44e      	b.n	8008b32 <_svfprintf_r+0x3da>
 8009294:	9808      	ldr	r0, [sp, #32]
 8009296:	f7f6 ff35 	bl	8000104 <strlen>
 800929a:	9009      	str	r0, [sp, #36]	; 0x24
 800929c:	e7f7      	b.n	800928e <_svfprintf_r+0xb36>
 800929e:	2310      	movs	r3, #16
 80092a0:	431e      	orrs	r6, r3
 80092a2:	2320      	movs	r3, #32
 80092a4:	0030      	movs	r0, r6
 80092a6:	4018      	ands	r0, r3
 80092a8:	421e      	tst	r6, r3
 80092aa:	d009      	beq.n	80092c0 <_svfprintf_r+0xb68>
 80092ac:	3b19      	subs	r3, #25
 80092ae:	3407      	adds	r4, #7
 80092b0:	439c      	bics	r4, r3
 80092b2:	0022      	movs	r2, r4
 80092b4:	ca18      	ldmia	r2!, {r3, r4}
 80092b6:	9306      	str	r3, [sp, #24]
 80092b8:	9407      	str	r4, [sp, #28]
 80092ba:	920d      	str	r2, [sp, #52]	; 0x34
 80092bc:	2301      	movs	r3, #1
 80092be:	e79d      	b.n	80091fc <_svfprintf_r+0xaa4>
 80092c0:	0023      	movs	r3, r4
 80092c2:	cb04      	ldmia	r3!, {r2}
 80092c4:	0031      	movs	r1, r6
 80092c6:	930d      	str	r3, [sp, #52]	; 0x34
 80092c8:	2310      	movs	r3, #16
 80092ca:	4019      	ands	r1, r3
 80092cc:	421e      	tst	r6, r3
 80092ce:	d003      	beq.n	80092d8 <_svfprintf_r+0xb80>
 80092d0:	9206      	str	r2, [sp, #24]
 80092d2:	9007      	str	r0, [sp, #28]
 80092d4:	3b0f      	subs	r3, #15
 80092d6:	e791      	b.n	80091fc <_svfprintf_r+0xaa4>
 80092d8:	2340      	movs	r3, #64	; 0x40
 80092da:	0030      	movs	r0, r6
 80092dc:	4018      	ands	r0, r3
 80092de:	421e      	tst	r6, r3
 80092e0:	d003      	beq.n	80092ea <_svfprintf_r+0xb92>
 80092e2:	b293      	uxth	r3, r2
 80092e4:	9306      	str	r3, [sp, #24]
 80092e6:	9107      	str	r1, [sp, #28]
 80092e8:	e7e8      	b.n	80092bc <_svfprintf_r+0xb64>
 80092ea:	2380      	movs	r3, #128	; 0x80
 80092ec:	0031      	movs	r1, r6
 80092ee:	009b      	lsls	r3, r3, #2
 80092f0:	4019      	ands	r1, r3
 80092f2:	421e      	tst	r6, r3
 80092f4:	d003      	beq.n	80092fe <_svfprintf_r+0xba6>
 80092f6:	b2d3      	uxtb	r3, r2
 80092f8:	9306      	str	r3, [sp, #24]
 80092fa:	9007      	str	r0, [sp, #28]
 80092fc:	e7de      	b.n	80092bc <_svfprintf_r+0xb64>
 80092fe:	9206      	str	r2, [sp, #24]
 8009300:	e7f1      	b.n	80092e6 <_svfprintf_r+0xb8e>
 8009302:	4b89      	ldr	r3, [pc, #548]	; (8009528 <_svfprintf_r+0xdd0>)
 8009304:	0030      	movs	r0, r6
 8009306:	931f      	str	r3, [sp, #124]	; 0x7c
 8009308:	2320      	movs	r3, #32
 800930a:	4018      	ands	r0, r3
 800930c:	421e      	tst	r6, r3
 800930e:	d01a      	beq.n	8009346 <_svfprintf_r+0xbee>
 8009310:	3b19      	subs	r3, #25
 8009312:	3407      	adds	r4, #7
 8009314:	439c      	bics	r4, r3
 8009316:	0022      	movs	r2, r4
 8009318:	ca18      	ldmia	r2!, {r3, r4}
 800931a:	9306      	str	r3, [sp, #24]
 800931c:	9407      	str	r4, [sp, #28]
 800931e:	920d      	str	r2, [sp, #52]	; 0x34
 8009320:	07f3      	lsls	r3, r6, #31
 8009322:	d50a      	bpl.n	800933a <_svfprintf_r+0xbe2>
 8009324:	9b06      	ldr	r3, [sp, #24]
 8009326:	9a07      	ldr	r2, [sp, #28]
 8009328:	4313      	orrs	r3, r2
 800932a:	d006      	beq.n	800933a <_svfprintf_r+0xbe2>
 800932c:	2230      	movs	r2, #48	; 0x30
 800932e:	ab25      	add	r3, sp, #148	; 0x94
 8009330:	701a      	strb	r2, [r3, #0]
 8009332:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8009334:	705a      	strb	r2, [r3, #1]
 8009336:	2302      	movs	r3, #2
 8009338:	431e      	orrs	r6, r3
 800933a:	4b78      	ldr	r3, [pc, #480]	; (800951c <_svfprintf_r+0xdc4>)
 800933c:	401e      	ands	r6, r3
 800933e:	2302      	movs	r3, #2
 8009340:	e75c      	b.n	80091fc <_svfprintf_r+0xaa4>
 8009342:	4b78      	ldr	r3, [pc, #480]	; (8009524 <_svfprintf_r+0xdcc>)
 8009344:	e7de      	b.n	8009304 <_svfprintf_r+0xbac>
 8009346:	0023      	movs	r3, r4
 8009348:	cb04      	ldmia	r3!, {r2}
 800934a:	0031      	movs	r1, r6
 800934c:	930d      	str	r3, [sp, #52]	; 0x34
 800934e:	2310      	movs	r3, #16
 8009350:	4019      	ands	r1, r3
 8009352:	421e      	tst	r6, r3
 8009354:	d002      	beq.n	800935c <_svfprintf_r+0xc04>
 8009356:	9206      	str	r2, [sp, #24]
 8009358:	9007      	str	r0, [sp, #28]
 800935a:	e7e1      	b.n	8009320 <_svfprintf_r+0xbc8>
 800935c:	2340      	movs	r3, #64	; 0x40
 800935e:	0030      	movs	r0, r6
 8009360:	4018      	ands	r0, r3
 8009362:	421e      	tst	r6, r3
 8009364:	d003      	beq.n	800936e <_svfprintf_r+0xc16>
 8009366:	b293      	uxth	r3, r2
 8009368:	9306      	str	r3, [sp, #24]
 800936a:	9107      	str	r1, [sp, #28]
 800936c:	e7d8      	b.n	8009320 <_svfprintf_r+0xbc8>
 800936e:	2380      	movs	r3, #128	; 0x80
 8009370:	0031      	movs	r1, r6
 8009372:	009b      	lsls	r3, r3, #2
 8009374:	4019      	ands	r1, r3
 8009376:	421e      	tst	r6, r3
 8009378:	d002      	beq.n	8009380 <_svfprintf_r+0xc28>
 800937a:	b2d3      	uxtb	r3, r2
 800937c:	9306      	str	r3, [sp, #24]
 800937e:	e7eb      	b.n	8009358 <_svfprintf_r+0xc00>
 8009380:	9206      	str	r2, [sp, #24]
 8009382:	e7f2      	b.n	800936a <_svfprintf_r+0xc12>
 8009384:	9b07      	ldr	r3, [sp, #28]
 8009386:	2b00      	cmp	r3, #0
 8009388:	d10a      	bne.n	80093a0 <_svfprintf_r+0xc48>
 800938a:	9b06      	ldr	r3, [sp, #24]
 800938c:	2b09      	cmp	r3, #9
 800938e:	d807      	bhi.n	80093a0 <_svfprintf_r+0xc48>
 8009390:	23e7      	movs	r3, #231	; 0xe7
 8009392:	aa1e      	add	r2, sp, #120	; 0x78
 8009394:	189b      	adds	r3, r3, r2
 8009396:	9a06      	ldr	r2, [sp, #24]
 8009398:	3230      	adds	r2, #48	; 0x30
 800939a:	701a      	strb	r2, [r3, #0]
 800939c:	f000 fc18 	bl	8009bd0 <_svfprintf_r+0x1478>
 80093a0:	2680      	movs	r6, #128	; 0x80
 80093a2:	2300      	movs	r3, #0
 80093a4:	00f6      	lsls	r6, r6, #3
 80093a6:	930e      	str	r3, [sp, #56]	; 0x38
 80093a8:	ad58      	add	r5, sp, #352	; 0x160
 80093aa:	4026      	ands	r6, r4
 80093ac:	220a      	movs	r2, #10
 80093ae:	9806      	ldr	r0, [sp, #24]
 80093b0:	9907      	ldr	r1, [sp, #28]
 80093b2:	2300      	movs	r3, #0
 80093b4:	f7f7 f876 	bl	80004a4 <__aeabi_uldivmod>
 80093b8:	1e6b      	subs	r3, r5, #1
 80093ba:	3230      	adds	r2, #48	; 0x30
 80093bc:	9308      	str	r3, [sp, #32]
 80093be:	701a      	strb	r2, [r3, #0]
 80093c0:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80093c2:	900c      	str	r0, [sp, #48]	; 0x30
 80093c4:	3301      	adds	r3, #1
 80093c6:	9110      	str	r1, [sp, #64]	; 0x40
 80093c8:	930e      	str	r3, [sp, #56]	; 0x38
 80093ca:	2e00      	cmp	r6, #0
 80093cc:	d01d      	beq.n	800940a <_svfprintf_r+0xcb2>
 80093ce:	9b12      	ldr	r3, [sp, #72]	; 0x48
 80093d0:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80093d2:	781b      	ldrb	r3, [r3, #0]
 80093d4:	429a      	cmp	r2, r3
 80093d6:	d118      	bne.n	800940a <_svfprintf_r+0xcb2>
 80093d8:	2aff      	cmp	r2, #255	; 0xff
 80093da:	d016      	beq.n	800940a <_svfprintf_r+0xcb2>
 80093dc:	9b07      	ldr	r3, [sp, #28]
 80093de:	2b00      	cmp	r3, #0
 80093e0:	d102      	bne.n	80093e8 <_svfprintf_r+0xc90>
 80093e2:	9b06      	ldr	r3, [sp, #24]
 80093e4:	2b09      	cmp	r3, #9
 80093e6:	d910      	bls.n	800940a <_svfprintf_r+0xcb2>
 80093e8:	9b08      	ldr	r3, [sp, #32]
 80093ea:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
 80093ec:	991d      	ldr	r1, [sp, #116]	; 0x74
 80093ee:	1a9b      	subs	r3, r3, r2
 80093f0:	0018      	movs	r0, r3
 80093f2:	9308      	str	r3, [sp, #32]
 80093f4:	f000 fd0e 	bl	8009e14 <strncpy>
 80093f8:	2200      	movs	r2, #0
 80093fa:	9b12      	ldr	r3, [sp, #72]	; 0x48
 80093fc:	920e      	str	r2, [sp, #56]	; 0x38
 80093fe:	785b      	ldrb	r3, [r3, #1]
 8009400:	1e5a      	subs	r2, r3, #1
 8009402:	4193      	sbcs	r3, r2
 8009404:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8009406:	18d3      	adds	r3, r2, r3
 8009408:	9312      	str	r3, [sp, #72]	; 0x48
 800940a:	9b07      	ldr	r3, [sp, #28]
 800940c:	2b00      	cmp	r3, #0
 800940e:	d10f      	bne.n	8009430 <_svfprintf_r+0xcd8>
 8009410:	9b06      	ldr	r3, [sp, #24]
 8009412:	2b09      	cmp	r3, #9
 8009414:	d80c      	bhi.n	8009430 <_svfprintf_r+0xcd8>
 8009416:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009418:	9a08      	ldr	r2, [sp, #32]
 800941a:	9319      	str	r3, [sp, #100]	; 0x64
 800941c:	ab58      	add	r3, sp, #352	; 0x160
 800941e:	1a9b      	subs	r3, r3, r2
 8009420:	9309      	str	r3, [sp, #36]	; 0x24
 8009422:	2300      	movs	r3, #0
 8009424:	0026      	movs	r6, r4
 8009426:	930c      	str	r3, [sp, #48]	; 0x30
 8009428:	001d      	movs	r5, r3
 800942a:	9310      	str	r3, [sp, #64]	; 0x40
 800942c:	9311      	str	r3, [sp, #68]	; 0x44
 800942e:	e4f2      	b.n	8008e16 <_svfprintf_r+0x6be>
 8009430:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8009432:	9d08      	ldr	r5, [sp, #32]
 8009434:	9306      	str	r3, [sp, #24]
 8009436:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8009438:	9307      	str	r3, [sp, #28]
 800943a:	e7b7      	b.n	80093ac <_svfprintf_r+0xc54>
 800943c:	200f      	movs	r0, #15
 800943e:	ab58      	add	r3, sp, #352	; 0x160
 8009440:	9308      	str	r3, [sp, #32]
 8009442:	9b08      	ldr	r3, [sp, #32]
 8009444:	9a1f      	ldr	r2, [sp, #124]	; 0x7c
 8009446:	3b01      	subs	r3, #1
 8009448:	9308      	str	r3, [sp, #32]
 800944a:	9b06      	ldr	r3, [sp, #24]
 800944c:	4003      	ands	r3, r0
 800944e:	5cd3      	ldrb	r3, [r2, r3]
 8009450:	9a08      	ldr	r2, [sp, #32]
 8009452:	7013      	strb	r3, [r2, #0]
 8009454:	9b07      	ldr	r3, [sp, #28]
 8009456:	0719      	lsls	r1, r3, #28
 8009458:	9b06      	ldr	r3, [sp, #24]
 800945a:	091a      	lsrs	r2, r3, #4
 800945c:	9b07      	ldr	r3, [sp, #28]
 800945e:	4311      	orrs	r1, r2
 8009460:	091b      	lsrs	r3, r3, #4
 8009462:	9307      	str	r3, [sp, #28]
 8009464:	000b      	movs	r3, r1
 8009466:	9a07      	ldr	r2, [sp, #28]
 8009468:	9106      	str	r1, [sp, #24]
 800946a:	4313      	orrs	r3, r2
 800946c:	d1e9      	bne.n	8009442 <_svfprintf_r+0xcea>
 800946e:	e7d2      	b.n	8009416 <_svfprintf_r+0xcbe>
 8009470:	aa58      	add	r2, sp, #352	; 0x160
 8009472:	9208      	str	r2, [sp, #32]
 8009474:	2b00      	cmp	r3, #0
 8009476:	d1ce      	bne.n	8009416 <_svfprintf_r+0xcbe>
 8009478:	07f6      	lsls	r6, r6, #31
 800947a:	d5cc      	bpl.n	8009416 <_svfprintf_r+0xcbe>
 800947c:	aa1e      	add	r2, sp, #120	; 0x78
 800947e:	33e7      	adds	r3, #231	; 0xe7
 8009480:	189b      	adds	r3, r3, r2
 8009482:	2230      	movs	r2, #48	; 0x30
 8009484:	e789      	b.n	800939a <_svfprintf_r+0xc42>
 8009486:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8009488:	2b00      	cmp	r3, #0
 800948a:	d100      	bne.n	800948e <_svfprintf_r+0xd36>
 800948c:	e364      	b.n	8009b58 <_svfprintf_r+0x1400>
 800948e:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8009490:	211b      	movs	r1, #27
 8009492:	ab3f      	add	r3, sp, #252	; 0xfc
 8009494:	701a      	strb	r2, [r3, #0]
 8009496:	2200      	movs	r2, #0
 8009498:	a81e      	add	r0, sp, #120	; 0x78
 800949a:	1809      	adds	r1, r1, r0
 800949c:	700a      	strb	r2, [r1, #0]
 800949e:	940d      	str	r4, [sp, #52]	; 0x34
 80094a0:	f7ff fabd 	bl	8008a1e <_svfprintf_r+0x2c6>
 80094a4:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80094a6:	f7ff fb44 	bl	8008b32 <_svfprintf_r+0x3da>
 80094aa:	2010      	movs	r0, #16
 80094ac:	1812      	adds	r2, r2, r0
 80094ae:	6078      	str	r0, [r7, #4]
 80094b0:	922e      	str	r2, [sp, #184]	; 0xb8
 80094b2:	932d      	str	r3, [sp, #180]	; 0xb4
 80094b4:	2b07      	cmp	r3, #7
 80094b6:	dd08      	ble.n	80094ca <_svfprintf_r+0xd72>
 80094b8:	990b      	ldr	r1, [sp, #44]	; 0x2c
 80094ba:	980a      	ldr	r0, [sp, #40]	; 0x28
 80094bc:	aa2c      	add	r2, sp, #176	; 0xb0
 80094be:	f001 fc6f 	bl	800ada0 <__ssprint_r>
 80094c2:	2800      	cmp	r0, #0
 80094c4:	d000      	beq.n	80094c8 <_svfprintf_r+0xd70>
 80094c6:	e326      	b.n	8009b16 <_svfprintf_r+0x13be>
 80094c8:	a92f      	add	r1, sp, #188	; 0xbc
 80094ca:	000f      	movs	r7, r1
 80094cc:	3c10      	subs	r4, #16
 80094ce:	e4c5      	b.n	8008e5c <_svfprintf_r+0x704>
 80094d0:	2010      	movs	r0, #16
 80094d2:	1812      	adds	r2, r2, r0
 80094d4:	6078      	str	r0, [r7, #4]
 80094d6:	922e      	str	r2, [sp, #184]	; 0xb8
 80094d8:	932d      	str	r3, [sp, #180]	; 0xb4
 80094da:	2b07      	cmp	r3, #7
 80094dc:	dd08      	ble.n	80094f0 <_svfprintf_r+0xd98>
 80094de:	990b      	ldr	r1, [sp, #44]	; 0x2c
 80094e0:	980a      	ldr	r0, [sp, #40]	; 0x28
 80094e2:	aa2c      	add	r2, sp, #176	; 0xb0
 80094e4:	f001 fc5c 	bl	800ada0 <__ssprint_r>
 80094e8:	2800      	cmp	r0, #0
 80094ea:	d000      	beq.n	80094ee <_svfprintf_r+0xd96>
 80094ec:	e313      	b.n	8009b16 <_svfprintf_r+0x13be>
 80094ee:	a92f      	add	r1, sp, #188	; 0xbc
 80094f0:	000f      	movs	r7, r1
 80094f2:	3c10      	subs	r4, #16
 80094f4:	e50b      	b.n	8008f0e <_svfprintf_r+0x7b6>
 80094f6:	2010      	movs	r0, #16
 80094f8:	1812      	adds	r2, r2, r0
 80094fa:	6078      	str	r0, [r7, #4]
 80094fc:	922e      	str	r2, [sp, #184]	; 0xb8
 80094fe:	932d      	str	r3, [sp, #180]	; 0xb4
 8009500:	2b07      	cmp	r3, #7
 8009502:	dd08      	ble.n	8009516 <_svfprintf_r+0xdbe>
 8009504:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8009506:	980a      	ldr	r0, [sp, #40]	; 0x28
 8009508:	aa2c      	add	r2, sp, #176	; 0xb0
 800950a:	f001 fc49 	bl	800ada0 <__ssprint_r>
 800950e:	2800      	cmp	r0, #0
 8009510:	d000      	beq.n	8009514 <_svfprintf_r+0xdbc>
 8009512:	e300      	b.n	8009b16 <_svfprintf_r+0x13be>
 8009514:	a92f      	add	r1, sp, #188	; 0xbc
 8009516:	000f      	movs	r7, r1
 8009518:	3c10      	subs	r4, #16
 800951a:	e518      	b.n	8008f4e <_svfprintf_r+0x7f6>
 800951c:	fffffbff 	.word	0xfffffbff
 8009520:	00007830 	.word	0x00007830
 8009524:	0800de64 	.word	0x0800de64
 8009528:	0800de75 	.word	0x0800de75
 800952c:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800952e:	2b65      	cmp	r3, #101	; 0x65
 8009530:	dc00      	bgt.n	8009534 <_svfprintf_r+0xddc>
 8009532:	e241      	b.n	80099b8 <_svfprintf_r+0x1260>
 8009534:	9814      	ldr	r0, [sp, #80]	; 0x50
 8009536:	9915      	ldr	r1, [sp, #84]	; 0x54
 8009538:	2200      	movs	r2, #0
 800953a:	2300      	movs	r3, #0
 800953c:	f7f6 ff84 	bl	8000448 <__aeabi_dcmpeq>
 8009540:	2800      	cmp	r0, #0
 8009542:	d077      	beq.n	8009634 <_svfprintf_r+0xedc>
 8009544:	4bca      	ldr	r3, [pc, #808]	; (8009870 <_svfprintf_r+0x1118>)
 8009546:	603b      	str	r3, [r7, #0]
 8009548:	2301      	movs	r3, #1
 800954a:	607b      	str	r3, [r7, #4]
 800954c:	9b19      	ldr	r3, [sp, #100]	; 0x64
 800954e:	3708      	adds	r7, #8
 8009550:	3301      	adds	r3, #1
 8009552:	932e      	str	r3, [sp, #184]	; 0xb8
 8009554:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
 8009556:	3301      	adds	r3, #1
 8009558:	932d      	str	r3, [sp, #180]	; 0xb4
 800955a:	2b07      	cmp	r3, #7
 800955c:	dd08      	ble.n	8009570 <_svfprintf_r+0xe18>
 800955e:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8009560:	980a      	ldr	r0, [sp, #40]	; 0x28
 8009562:	aa2c      	add	r2, sp, #176	; 0xb0
 8009564:	f001 fc1c 	bl	800ada0 <__ssprint_r>
 8009568:	2800      	cmp	r0, #0
 800956a:	d000      	beq.n	800956e <_svfprintf_r+0xe16>
 800956c:	e2d3      	b.n	8009b16 <_svfprintf_r+0x13be>
 800956e:	af2f      	add	r7, sp, #188	; 0xbc
 8009570:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8009572:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8009574:	4293      	cmp	r3, r2
 8009576:	db01      	blt.n	800957c <_svfprintf_r+0xe24>
 8009578:	07f3      	lsls	r3, r6, #31
 800957a:	d51b      	bpl.n	80095b4 <_svfprintf_r+0xe5c>
 800957c:	9b1c      	ldr	r3, [sp, #112]	; 0x70
 800957e:	9a16      	ldr	r2, [sp, #88]	; 0x58
 8009580:	603b      	str	r3, [r7, #0]
 8009582:	9b16      	ldr	r3, [sp, #88]	; 0x58
 8009584:	607b      	str	r3, [r7, #4]
 8009586:	9b2e      	ldr	r3, [sp, #184]	; 0xb8
 8009588:	3708      	adds	r7, #8
 800958a:	189b      	adds	r3, r3, r2
 800958c:	932e      	str	r3, [sp, #184]	; 0xb8
 800958e:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
 8009590:	3301      	adds	r3, #1
 8009592:	932d      	str	r3, [sp, #180]	; 0xb4
 8009594:	2b07      	cmp	r3, #7
 8009596:	dd08      	ble.n	80095aa <_svfprintf_r+0xe52>
 8009598:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800959a:	980a      	ldr	r0, [sp, #40]	; 0x28
 800959c:	aa2c      	add	r2, sp, #176	; 0xb0
 800959e:	f001 fbff 	bl	800ada0 <__ssprint_r>
 80095a2:	2800      	cmp	r0, #0
 80095a4:	d000      	beq.n	80095a8 <_svfprintf_r+0xe50>
 80095a6:	e2b6      	b.n	8009b16 <_svfprintf_r+0x13be>
 80095a8:	af2f      	add	r7, sp, #188	; 0xbc
 80095aa:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80095ac:	2510      	movs	r5, #16
 80095ae:	1e5c      	subs	r4, r3, #1
 80095b0:	2c00      	cmp	r4, #0
 80095b2:	dc2e      	bgt.n	8009612 <_svfprintf_r+0xeba>
 80095b4:	0776      	lsls	r6, r6, #29
 80095b6:	d500      	bpl.n	80095ba <_svfprintf_r+0xe62>
 80095b8:	e290      	b.n	8009adc <_svfprintf_r+0x1384>
 80095ba:	9b18      	ldr	r3, [sp, #96]	; 0x60
 80095bc:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 80095be:	4293      	cmp	r3, r2
 80095c0:	da00      	bge.n	80095c4 <_svfprintf_r+0xe6c>
 80095c2:	0013      	movs	r3, r2
 80095c4:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 80095c6:	18d3      	adds	r3, r2, r3
 80095c8:	9317      	str	r3, [sp, #92]	; 0x5c
 80095ca:	9b2e      	ldr	r3, [sp, #184]	; 0xb8
 80095cc:	2b00      	cmp	r3, #0
 80095ce:	d007      	beq.n	80095e0 <_svfprintf_r+0xe88>
 80095d0:	990b      	ldr	r1, [sp, #44]	; 0x2c
 80095d2:	980a      	ldr	r0, [sp, #40]	; 0x28
 80095d4:	aa2c      	add	r2, sp, #176	; 0xb0
 80095d6:	f001 fbe3 	bl	800ada0 <__ssprint_r>
 80095da:	2800      	cmp	r0, #0
 80095dc:	d000      	beq.n	80095e0 <_svfprintf_r+0xe88>
 80095de:	e29a      	b.n	8009b16 <_svfprintf_r+0x13be>
 80095e0:	2300      	movs	r3, #0
 80095e2:	932d      	str	r3, [sp, #180]	; 0xb4
 80095e4:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80095e6:	2b00      	cmp	r3, #0
 80095e8:	d000      	beq.n	80095ec <_svfprintf_r+0xe94>
 80095ea:	e2b0      	b.n	8009b4e <_svfprintf_r+0x13f6>
 80095ec:	af2f      	add	r7, sp, #188	; 0xbc
 80095ee:	e5dc      	b.n	80091aa <_svfprintf_r+0xa52>
 80095f0:	3210      	adds	r2, #16
 80095f2:	607d      	str	r5, [r7, #4]
 80095f4:	922e      	str	r2, [sp, #184]	; 0xb8
 80095f6:	932d      	str	r3, [sp, #180]	; 0xb4
 80095f8:	2b07      	cmp	r3, #7
 80095fa:	dd08      	ble.n	800960e <_svfprintf_r+0xeb6>
 80095fc:	990b      	ldr	r1, [sp, #44]	; 0x2c
 80095fe:	980a      	ldr	r0, [sp, #40]	; 0x28
 8009600:	aa2c      	add	r2, sp, #176	; 0xb0
 8009602:	f001 fbcd 	bl	800ada0 <__ssprint_r>
 8009606:	2800      	cmp	r0, #0
 8009608:	d000      	beq.n	800960c <_svfprintf_r+0xeb4>
 800960a:	e284      	b.n	8009b16 <_svfprintf_r+0x13be>
 800960c:	a92f      	add	r1, sp, #188	; 0xbc
 800960e:	000f      	movs	r7, r1
 8009610:	3c10      	subs	r4, #16
 8009612:	0039      	movs	r1, r7
 8009614:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
 8009616:	4897      	ldr	r0, [pc, #604]	; (8009874 <_svfprintf_r+0x111c>)
 8009618:	9a2e      	ldr	r2, [sp, #184]	; 0xb8
 800961a:	3301      	adds	r3, #1
 800961c:	3108      	adds	r1, #8
 800961e:	6038      	str	r0, [r7, #0]
 8009620:	2c10      	cmp	r4, #16
 8009622:	dce5      	bgt.n	80095f0 <_svfprintf_r+0xe98>
 8009624:	607c      	str	r4, [r7, #4]
 8009626:	18a4      	adds	r4, r4, r2
 8009628:	942e      	str	r4, [sp, #184]	; 0xb8
 800962a:	000f      	movs	r7, r1
 800962c:	932d      	str	r3, [sp, #180]	; 0xb4
 800962e:	2b07      	cmp	r3, #7
 8009630:	ddc0      	ble.n	80095b4 <_svfprintf_r+0xe5c>
 8009632:	e05f      	b.n	80096f4 <_svfprintf_r+0xf9c>
 8009634:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8009636:	2b00      	cmp	r3, #0
 8009638:	dc78      	bgt.n	800972c <_svfprintf_r+0xfd4>
 800963a:	4b8d      	ldr	r3, [pc, #564]	; (8009870 <_svfprintf_r+0x1118>)
 800963c:	603b      	str	r3, [r7, #0]
 800963e:	2301      	movs	r3, #1
 8009640:	607b      	str	r3, [r7, #4]
 8009642:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8009644:	3708      	adds	r7, #8
 8009646:	3301      	adds	r3, #1
 8009648:	932e      	str	r3, [sp, #184]	; 0xb8
 800964a:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
 800964c:	3301      	adds	r3, #1
 800964e:	932d      	str	r3, [sp, #180]	; 0xb4
 8009650:	2b07      	cmp	r3, #7
 8009652:	dd08      	ble.n	8009666 <_svfprintf_r+0xf0e>
 8009654:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8009656:	980a      	ldr	r0, [sp, #40]	; 0x28
 8009658:	aa2c      	add	r2, sp, #176	; 0xb0
 800965a:	f001 fba1 	bl	800ada0 <__ssprint_r>
 800965e:	2800      	cmp	r0, #0
 8009660:	d000      	beq.n	8009664 <_svfprintf_r+0xf0c>
 8009662:	e258      	b.n	8009b16 <_svfprintf_r+0x13be>
 8009664:	af2f      	add	r7, sp, #188	; 0xbc
 8009666:	990e      	ldr	r1, [sp, #56]	; 0x38
 8009668:	9b26      	ldr	r3, [sp, #152]	; 0x98
 800966a:	9a2e      	ldr	r2, [sp, #184]	; 0xb8
 800966c:	430b      	orrs	r3, r1
 800966e:	2101      	movs	r1, #1
 8009670:	4031      	ands	r1, r6
 8009672:	430b      	orrs	r3, r1
 8009674:	d09e      	beq.n	80095b4 <_svfprintf_r+0xe5c>
 8009676:	9b1c      	ldr	r3, [sp, #112]	; 0x70
 8009678:	603b      	str	r3, [r7, #0]
 800967a:	9b16      	ldr	r3, [sp, #88]	; 0x58
 800967c:	607b      	str	r3, [r7, #4]
 800967e:	189a      	adds	r2, r3, r2
 8009680:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
 8009682:	922e      	str	r2, [sp, #184]	; 0xb8
 8009684:	3301      	adds	r3, #1
 8009686:	932d      	str	r3, [sp, #180]	; 0xb4
 8009688:	3708      	adds	r7, #8
 800968a:	2b07      	cmp	r3, #7
 800968c:	dd08      	ble.n	80096a0 <_svfprintf_r+0xf48>
 800968e:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8009690:	980a      	ldr	r0, [sp, #40]	; 0x28
 8009692:	aa2c      	add	r2, sp, #176	; 0xb0
 8009694:	f001 fb84 	bl	800ada0 <__ssprint_r>
 8009698:	2800      	cmp	r0, #0
 800969a:	d000      	beq.n	800969e <_svfprintf_r+0xf46>
 800969c:	e23b      	b.n	8009b16 <_svfprintf_r+0x13be>
 800969e:	af2f      	add	r7, sp, #188	; 0xbc
 80096a0:	9c26      	ldr	r4, [sp, #152]	; 0x98
 80096a2:	2c00      	cmp	r4, #0
 80096a4:	da19      	bge.n	80096da <_svfprintf_r+0xf82>
 80096a6:	0038      	movs	r0, r7
 80096a8:	2510      	movs	r5, #16
 80096aa:	4264      	negs	r4, r4
 80096ac:	992d      	ldr	r1, [sp, #180]	; 0xb4
 80096ae:	4a71      	ldr	r2, [pc, #452]	; (8009874 <_svfprintf_r+0x111c>)
 80096b0:	9b2e      	ldr	r3, [sp, #184]	; 0xb8
 80096b2:	3101      	adds	r1, #1
 80096b4:	3708      	adds	r7, #8
 80096b6:	6002      	str	r2, [r0, #0]
 80096b8:	2c10      	cmp	r4, #16
 80096ba:	dc25      	bgt.n	8009708 <_svfprintf_r+0xfb0>
 80096bc:	6044      	str	r4, [r0, #4]
 80096be:	18e4      	adds	r4, r4, r3
 80096c0:	942e      	str	r4, [sp, #184]	; 0xb8
 80096c2:	912d      	str	r1, [sp, #180]	; 0xb4
 80096c4:	2907      	cmp	r1, #7
 80096c6:	dd08      	ble.n	80096da <_svfprintf_r+0xf82>
 80096c8:	990b      	ldr	r1, [sp, #44]	; 0x2c
 80096ca:	980a      	ldr	r0, [sp, #40]	; 0x28
 80096cc:	aa2c      	add	r2, sp, #176	; 0xb0
 80096ce:	f001 fb67 	bl	800ada0 <__ssprint_r>
 80096d2:	2800      	cmp	r0, #0
 80096d4:	d000      	beq.n	80096d8 <_svfprintf_r+0xf80>
 80096d6:	e21e      	b.n	8009b16 <_svfprintf_r+0x13be>
 80096d8:	af2f      	add	r7, sp, #188	; 0xbc
 80096da:	9b08      	ldr	r3, [sp, #32]
 80096dc:	9a2e      	ldr	r2, [sp, #184]	; 0xb8
 80096de:	603b      	str	r3, [r7, #0]
 80096e0:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80096e2:	18d2      	adds	r2, r2, r3
 80096e4:	922e      	str	r2, [sp, #184]	; 0xb8
 80096e6:	9a2d      	ldr	r2, [sp, #180]	; 0xb4
 80096e8:	607b      	str	r3, [r7, #4]
 80096ea:	3201      	adds	r2, #1
 80096ec:	922d      	str	r2, [sp, #180]	; 0xb4
 80096ee:	2a07      	cmp	r2, #7
 80096f0:	dc00      	bgt.n	80096f4 <_svfprintf_r+0xf9c>
 80096f2:	e45b      	b.n	8008fac <_svfprintf_r+0x854>
 80096f4:	990b      	ldr	r1, [sp, #44]	; 0x2c
 80096f6:	980a      	ldr	r0, [sp, #40]	; 0x28
 80096f8:	aa2c      	add	r2, sp, #176	; 0xb0
 80096fa:	f001 fb51 	bl	800ada0 <__ssprint_r>
 80096fe:	2800      	cmp	r0, #0
 8009700:	d000      	beq.n	8009704 <_svfprintf_r+0xfac>
 8009702:	e208      	b.n	8009b16 <_svfprintf_r+0x13be>
 8009704:	af2f      	add	r7, sp, #188	; 0xbc
 8009706:	e755      	b.n	80095b4 <_svfprintf_r+0xe5c>
 8009708:	3310      	adds	r3, #16
 800970a:	6045      	str	r5, [r0, #4]
 800970c:	932e      	str	r3, [sp, #184]	; 0xb8
 800970e:	912d      	str	r1, [sp, #180]	; 0xb4
 8009710:	2907      	cmp	r1, #7
 8009712:	dd08      	ble.n	8009726 <_svfprintf_r+0xfce>
 8009714:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8009716:	980a      	ldr	r0, [sp, #40]	; 0x28
 8009718:	aa2c      	add	r2, sp, #176	; 0xb0
 800971a:	f001 fb41 	bl	800ada0 <__ssprint_r>
 800971e:	2800      	cmp	r0, #0
 8009720:	d000      	beq.n	8009724 <_svfprintf_r+0xfcc>
 8009722:	e1f8      	b.n	8009b16 <_svfprintf_r+0x13be>
 8009724:	af2f      	add	r7, sp, #188	; 0xbc
 8009726:	0038      	movs	r0, r7
 8009728:	3c10      	subs	r4, #16
 800972a:	e7bf      	b.n	80096ac <_svfprintf_r+0xf54>
 800972c:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800972e:	002c      	movs	r4, r5
 8009730:	429d      	cmp	r5, r3
 8009732:	dd00      	ble.n	8009736 <_svfprintf_r+0xfde>
 8009734:	001c      	movs	r4, r3
 8009736:	2c00      	cmp	r4, #0
 8009738:	dd14      	ble.n	8009764 <_svfprintf_r+0x100c>
 800973a:	9b08      	ldr	r3, [sp, #32]
 800973c:	607c      	str	r4, [r7, #4]
 800973e:	603b      	str	r3, [r7, #0]
 8009740:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8009742:	3708      	adds	r7, #8
 8009744:	18e3      	adds	r3, r4, r3
 8009746:	932e      	str	r3, [sp, #184]	; 0xb8
 8009748:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
 800974a:	3301      	adds	r3, #1
 800974c:	932d      	str	r3, [sp, #180]	; 0xb4
 800974e:	2b07      	cmp	r3, #7
 8009750:	dd08      	ble.n	8009764 <_svfprintf_r+0x100c>
 8009752:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8009754:	980a      	ldr	r0, [sp, #40]	; 0x28
 8009756:	aa2c      	add	r2, sp, #176	; 0xb0
 8009758:	f001 fb22 	bl	800ada0 <__ssprint_r>
 800975c:	2800      	cmp	r0, #0
 800975e:	d000      	beq.n	8009762 <_svfprintf_r+0x100a>
 8009760:	e1d9      	b.n	8009b16 <_svfprintf_r+0x13be>
 8009762:	af2f      	add	r7, sp, #188	; 0xbc
 8009764:	43e3      	mvns	r3, r4
 8009766:	17db      	asrs	r3, r3, #31
 8009768:	401c      	ands	r4, r3
 800976a:	1b2c      	subs	r4, r5, r4
 800976c:	2c00      	cmp	r4, #0
 800976e:	dd18      	ble.n	80097a2 <_svfprintf_r+0x104a>
 8009770:	0039      	movs	r1, r7
 8009772:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
 8009774:	483f      	ldr	r0, [pc, #252]	; (8009874 <_svfprintf_r+0x111c>)
 8009776:	9a2e      	ldr	r2, [sp, #184]	; 0xb8
 8009778:	3301      	adds	r3, #1
 800977a:	3108      	adds	r1, #8
 800977c:	6038      	str	r0, [r7, #0]
 800977e:	2c10      	cmp	r4, #16
 8009780:	dc7a      	bgt.n	8009878 <_svfprintf_r+0x1120>
 8009782:	607c      	str	r4, [r7, #4]
 8009784:	18a4      	adds	r4, r4, r2
 8009786:	000f      	movs	r7, r1
 8009788:	942e      	str	r4, [sp, #184]	; 0xb8
 800978a:	932d      	str	r3, [sp, #180]	; 0xb4
 800978c:	2b07      	cmp	r3, #7
 800978e:	dd08      	ble.n	80097a2 <_svfprintf_r+0x104a>
 8009790:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8009792:	980a      	ldr	r0, [sp, #40]	; 0x28
 8009794:	aa2c      	add	r2, sp, #176	; 0xb0
 8009796:	f001 fb03 	bl	800ada0 <__ssprint_r>
 800979a:	2800      	cmp	r0, #0
 800979c:	d000      	beq.n	80097a0 <_svfprintf_r+0x1048>
 800979e:	e1ba      	b.n	8009b16 <_svfprintf_r+0x13be>
 80097a0:	af2f      	add	r7, sp, #188	; 0xbc
 80097a2:	9b08      	ldr	r3, [sp, #32]
 80097a4:	195d      	adds	r5, r3, r5
 80097a6:	0573      	lsls	r3, r6, #21
 80097a8:	d50b      	bpl.n	80097c2 <_svfprintf_r+0x106a>
 80097aa:	9b11      	ldr	r3, [sp, #68]	; 0x44
 80097ac:	2b00      	cmp	r3, #0
 80097ae:	d176      	bne.n	800989e <_svfprintf_r+0x1146>
 80097b0:	9b10      	ldr	r3, [sp, #64]	; 0x40
 80097b2:	2b00      	cmp	r3, #0
 80097b4:	d176      	bne.n	80098a4 <_svfprintf_r+0x114c>
 80097b6:	9b08      	ldr	r3, [sp, #32]
 80097b8:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80097ba:	189b      	adds	r3, r3, r2
 80097bc:	429d      	cmp	r5, r3
 80097be:	d900      	bls.n	80097c2 <_svfprintf_r+0x106a>
 80097c0:	001d      	movs	r5, r3
 80097c2:	9b26      	ldr	r3, [sp, #152]	; 0x98
 80097c4:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80097c6:	4293      	cmp	r3, r2
 80097c8:	db01      	blt.n	80097ce <_svfprintf_r+0x1076>
 80097ca:	07f3      	lsls	r3, r6, #31
 80097cc:	d516      	bpl.n	80097fc <_svfprintf_r+0x10a4>
 80097ce:	9b1c      	ldr	r3, [sp, #112]	; 0x70
 80097d0:	9a16      	ldr	r2, [sp, #88]	; 0x58
 80097d2:	603b      	str	r3, [r7, #0]
 80097d4:	9b16      	ldr	r3, [sp, #88]	; 0x58
 80097d6:	607b      	str	r3, [r7, #4]
 80097d8:	9b2e      	ldr	r3, [sp, #184]	; 0xb8
 80097da:	3708      	adds	r7, #8
 80097dc:	189b      	adds	r3, r3, r2
 80097de:	932e      	str	r3, [sp, #184]	; 0xb8
 80097e0:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
 80097e2:	3301      	adds	r3, #1
 80097e4:	932d      	str	r3, [sp, #180]	; 0xb4
 80097e6:	2b07      	cmp	r3, #7
 80097e8:	dd08      	ble.n	80097fc <_svfprintf_r+0x10a4>
 80097ea:	990b      	ldr	r1, [sp, #44]	; 0x2c
 80097ec:	980a      	ldr	r0, [sp, #40]	; 0x28
 80097ee:	aa2c      	add	r2, sp, #176	; 0xb0
 80097f0:	f001 fad6 	bl	800ada0 <__ssprint_r>
 80097f4:	2800      	cmp	r0, #0
 80097f6:	d000      	beq.n	80097fa <_svfprintf_r+0x10a2>
 80097f8:	e18d      	b.n	8009b16 <_svfprintf_r+0x13be>
 80097fa:	af2f      	add	r7, sp, #188	; 0xbc
 80097fc:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80097fe:	9b08      	ldr	r3, [sp, #32]
 8009800:	4694      	mov	ip, r2
 8009802:	9c26      	ldr	r4, [sp, #152]	; 0x98
 8009804:	4463      	add	r3, ip
 8009806:	1b5b      	subs	r3, r3, r5
 8009808:	1b14      	subs	r4, r2, r4
 800980a:	429c      	cmp	r4, r3
 800980c:	dd00      	ble.n	8009810 <_svfprintf_r+0x10b8>
 800980e:	001c      	movs	r4, r3
 8009810:	9b2e      	ldr	r3, [sp, #184]	; 0xb8
 8009812:	2c00      	cmp	r4, #0
 8009814:	dd12      	ble.n	800983c <_svfprintf_r+0x10e4>
 8009816:	18e3      	adds	r3, r4, r3
 8009818:	932e      	str	r3, [sp, #184]	; 0xb8
 800981a:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
 800981c:	603d      	str	r5, [r7, #0]
 800981e:	3301      	adds	r3, #1
 8009820:	607c      	str	r4, [r7, #4]
 8009822:	932d      	str	r3, [sp, #180]	; 0xb4
 8009824:	3708      	adds	r7, #8
 8009826:	2b07      	cmp	r3, #7
 8009828:	dd08      	ble.n	800983c <_svfprintf_r+0x10e4>
 800982a:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800982c:	980a      	ldr	r0, [sp, #40]	; 0x28
 800982e:	aa2c      	add	r2, sp, #176	; 0xb0
 8009830:	f001 fab6 	bl	800ada0 <__ssprint_r>
 8009834:	2800      	cmp	r0, #0
 8009836:	d000      	beq.n	800983a <_svfprintf_r+0x10e2>
 8009838:	e16d      	b.n	8009b16 <_svfprintf_r+0x13be>
 800983a:	af2f      	add	r7, sp, #188	; 0xbc
 800983c:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800983e:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8009840:	2510      	movs	r5, #16
 8009842:	1ad3      	subs	r3, r2, r3
 8009844:	43e2      	mvns	r2, r4
 8009846:	17d2      	asrs	r2, r2, #31
 8009848:	4014      	ands	r4, r2
 800984a:	1b1c      	subs	r4, r3, r4
 800984c:	2c00      	cmp	r4, #0
 800984e:	dc00      	bgt.n	8009852 <_svfprintf_r+0x10fa>
 8009850:	e6b0      	b.n	80095b4 <_svfprintf_r+0xe5c>
 8009852:	0039      	movs	r1, r7
 8009854:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
 8009856:	4807      	ldr	r0, [pc, #28]	; (8009874 <_svfprintf_r+0x111c>)
 8009858:	9a2e      	ldr	r2, [sp, #184]	; 0xb8
 800985a:	3301      	adds	r3, #1
 800985c:	3108      	adds	r1, #8
 800985e:	6038      	str	r0, [r7, #0]
 8009860:	2c10      	cmp	r4, #16
 8009862:	dd00      	ble.n	8009866 <_svfprintf_r+0x110e>
 8009864:	e096      	b.n	8009994 <_svfprintf_r+0x123c>
 8009866:	1912      	adds	r2, r2, r4
 8009868:	607c      	str	r4, [r7, #4]
 800986a:	922e      	str	r2, [sp, #184]	; 0xb8
 800986c:	e6dd      	b.n	800962a <_svfprintf_r+0xed2>
 800986e:	46c0      	nop			; (mov r8, r8)
 8009870:	0800de86 	.word	0x0800de86
 8009874:	0800de98 	.word	0x0800de98
 8009878:	2010      	movs	r0, #16
 800987a:	1812      	adds	r2, r2, r0
 800987c:	6078      	str	r0, [r7, #4]
 800987e:	922e      	str	r2, [sp, #184]	; 0xb8
 8009880:	932d      	str	r3, [sp, #180]	; 0xb4
 8009882:	2b07      	cmp	r3, #7
 8009884:	dd08      	ble.n	8009898 <_svfprintf_r+0x1140>
 8009886:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8009888:	980a      	ldr	r0, [sp, #40]	; 0x28
 800988a:	aa2c      	add	r2, sp, #176	; 0xb0
 800988c:	f001 fa88 	bl	800ada0 <__ssprint_r>
 8009890:	2800      	cmp	r0, #0
 8009892:	d000      	beq.n	8009896 <_svfprintf_r+0x113e>
 8009894:	e13f      	b.n	8009b16 <_svfprintf_r+0x13be>
 8009896:	a92f      	add	r1, sp, #188	; 0xbc
 8009898:	000f      	movs	r7, r1
 800989a:	3c10      	subs	r4, #16
 800989c:	e768      	b.n	8009770 <_svfprintf_r+0x1018>
 800989e:	9b10      	ldr	r3, [sp, #64]	; 0x40
 80098a0:	2b00      	cmp	r3, #0
 80098a2:	d05d      	beq.n	8009960 <_svfprintf_r+0x1208>
 80098a4:	9b10      	ldr	r3, [sp, #64]	; 0x40
 80098a6:	3b01      	subs	r3, #1
 80098a8:	9310      	str	r3, [sp, #64]	; 0x40
 80098aa:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 80098ac:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
 80098ae:	603b      	str	r3, [r7, #0]
 80098b0:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 80098b2:	607b      	str	r3, [r7, #4]
 80098b4:	9b2e      	ldr	r3, [sp, #184]	; 0xb8
 80098b6:	3708      	adds	r7, #8
 80098b8:	189b      	adds	r3, r3, r2
 80098ba:	932e      	str	r3, [sp, #184]	; 0xb8
 80098bc:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
 80098be:	3301      	adds	r3, #1
 80098c0:	932d      	str	r3, [sp, #180]	; 0xb4
 80098c2:	2b07      	cmp	r3, #7
 80098c4:	dd08      	ble.n	80098d8 <_svfprintf_r+0x1180>
 80098c6:	990b      	ldr	r1, [sp, #44]	; 0x2c
 80098c8:	980a      	ldr	r0, [sp, #40]	; 0x28
 80098ca:	aa2c      	add	r2, sp, #176	; 0xb0
 80098cc:	f001 fa68 	bl	800ada0 <__ssprint_r>
 80098d0:	2800      	cmp	r0, #0
 80098d2:	d000      	beq.n	80098d6 <_svfprintf_r+0x117e>
 80098d4:	e11f      	b.n	8009b16 <_svfprintf_r+0x13be>
 80098d6:	af2f      	add	r7, sp, #188	; 0xbc
 80098d8:	9b08      	ldr	r3, [sp, #32]
 80098da:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80098dc:	189c      	adds	r4, r3, r2
 80098de:	9b12      	ldr	r3, [sp, #72]	; 0x48
 80098e0:	1b64      	subs	r4, r4, r5
 80098e2:	781b      	ldrb	r3, [r3, #0]
 80098e4:	429c      	cmp	r4, r3
 80098e6:	dd00      	ble.n	80098ea <_svfprintf_r+0x1192>
 80098e8:	001c      	movs	r4, r3
 80098ea:	9b2e      	ldr	r3, [sp, #184]	; 0xb8
 80098ec:	2c00      	cmp	r4, #0
 80098ee:	dd12      	ble.n	8009916 <_svfprintf_r+0x11be>
 80098f0:	18e3      	adds	r3, r4, r3
 80098f2:	932e      	str	r3, [sp, #184]	; 0xb8
 80098f4:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
 80098f6:	603d      	str	r5, [r7, #0]
 80098f8:	3301      	adds	r3, #1
 80098fa:	607c      	str	r4, [r7, #4]
 80098fc:	932d      	str	r3, [sp, #180]	; 0xb4
 80098fe:	3708      	adds	r7, #8
 8009900:	2b07      	cmp	r3, #7
 8009902:	dd08      	ble.n	8009916 <_svfprintf_r+0x11be>
 8009904:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8009906:	980a      	ldr	r0, [sp, #40]	; 0x28
 8009908:	aa2c      	add	r2, sp, #176	; 0xb0
 800990a:	f001 fa49 	bl	800ada0 <__ssprint_r>
 800990e:	2800      	cmp	r0, #0
 8009910:	d000      	beq.n	8009914 <_svfprintf_r+0x11bc>
 8009912:	e100      	b.n	8009b16 <_svfprintf_r+0x13be>
 8009914:	af2f      	add	r7, sp, #188	; 0xbc
 8009916:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8009918:	781a      	ldrb	r2, [r3, #0]
 800991a:	43e3      	mvns	r3, r4
 800991c:	17db      	asrs	r3, r3, #31
 800991e:	401c      	ands	r4, r3
 8009920:	1b14      	subs	r4, r2, r4
 8009922:	2c00      	cmp	r4, #0
 8009924:	dd18      	ble.n	8009958 <_svfprintf_r+0x1200>
 8009926:	0039      	movs	r1, r7
 8009928:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
 800992a:	48aa      	ldr	r0, [pc, #680]	; (8009bd4 <_svfprintf_r+0x147c>)
 800992c:	9a2e      	ldr	r2, [sp, #184]	; 0xb8
 800992e:	3301      	adds	r3, #1
 8009930:	3108      	adds	r1, #8
 8009932:	6038      	str	r0, [r7, #0]
 8009934:	2c10      	cmp	r4, #16
 8009936:	dc1a      	bgt.n	800996e <_svfprintf_r+0x1216>
 8009938:	1912      	adds	r2, r2, r4
 800993a:	607c      	str	r4, [r7, #4]
 800993c:	922e      	str	r2, [sp, #184]	; 0xb8
 800993e:	000f      	movs	r7, r1
 8009940:	932d      	str	r3, [sp, #180]	; 0xb4
 8009942:	2b07      	cmp	r3, #7
 8009944:	dd08      	ble.n	8009958 <_svfprintf_r+0x1200>
 8009946:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8009948:	980a      	ldr	r0, [sp, #40]	; 0x28
 800994a:	aa2c      	add	r2, sp, #176	; 0xb0
 800994c:	f001 fa28 	bl	800ada0 <__ssprint_r>
 8009950:	2800      	cmp	r0, #0
 8009952:	d000      	beq.n	8009956 <_svfprintf_r+0x11fe>
 8009954:	e0df      	b.n	8009b16 <_svfprintf_r+0x13be>
 8009956:	af2f      	add	r7, sp, #188	; 0xbc
 8009958:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800995a:	781b      	ldrb	r3, [r3, #0]
 800995c:	18ed      	adds	r5, r5, r3
 800995e:	e724      	b.n	80097aa <_svfprintf_r+0x1052>
 8009960:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8009962:	3b01      	subs	r3, #1
 8009964:	9312      	str	r3, [sp, #72]	; 0x48
 8009966:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8009968:	3b01      	subs	r3, #1
 800996a:	9311      	str	r3, [sp, #68]	; 0x44
 800996c:	e79d      	b.n	80098aa <_svfprintf_r+0x1152>
 800996e:	2010      	movs	r0, #16
 8009970:	1812      	adds	r2, r2, r0
 8009972:	6078      	str	r0, [r7, #4]
 8009974:	922e      	str	r2, [sp, #184]	; 0xb8
 8009976:	932d      	str	r3, [sp, #180]	; 0xb4
 8009978:	2b07      	cmp	r3, #7
 800997a:	dd08      	ble.n	800998e <_svfprintf_r+0x1236>
 800997c:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800997e:	980a      	ldr	r0, [sp, #40]	; 0x28
 8009980:	aa2c      	add	r2, sp, #176	; 0xb0
 8009982:	f001 fa0d 	bl	800ada0 <__ssprint_r>
 8009986:	2800      	cmp	r0, #0
 8009988:	d000      	beq.n	800998c <_svfprintf_r+0x1234>
 800998a:	e0c4      	b.n	8009b16 <_svfprintf_r+0x13be>
 800998c:	a92f      	add	r1, sp, #188	; 0xbc
 800998e:	000f      	movs	r7, r1
 8009990:	3c10      	subs	r4, #16
 8009992:	e7c8      	b.n	8009926 <_svfprintf_r+0x11ce>
 8009994:	3210      	adds	r2, #16
 8009996:	607d      	str	r5, [r7, #4]
 8009998:	922e      	str	r2, [sp, #184]	; 0xb8
 800999a:	932d      	str	r3, [sp, #180]	; 0xb4
 800999c:	2b07      	cmp	r3, #7
 800999e:	dd08      	ble.n	80099b2 <_svfprintf_r+0x125a>
 80099a0:	990b      	ldr	r1, [sp, #44]	; 0x2c
 80099a2:	980a      	ldr	r0, [sp, #40]	; 0x28
 80099a4:	aa2c      	add	r2, sp, #176	; 0xb0
 80099a6:	f001 f9fb 	bl	800ada0 <__ssprint_r>
 80099aa:	2800      	cmp	r0, #0
 80099ac:	d000      	beq.n	80099b0 <_svfprintf_r+0x1258>
 80099ae:	e0b2      	b.n	8009b16 <_svfprintf_r+0x13be>
 80099b0:	a92f      	add	r1, sp, #188	; 0xbc
 80099b2:	000f      	movs	r7, r1
 80099b4:	3c10      	subs	r4, #16
 80099b6:	e74c      	b.n	8009852 <_svfprintf_r+0x10fa>
 80099b8:	003c      	movs	r4, r7
 80099ba:	9919      	ldr	r1, [sp, #100]	; 0x64
 80099bc:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
 80099be:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80099c0:	3101      	adds	r1, #1
 80099c2:	3301      	adds	r3, #1
 80099c4:	3408      	adds	r4, #8
 80099c6:	2a01      	cmp	r2, #1
 80099c8:	dc03      	bgt.n	80099d2 <_svfprintf_r+0x127a>
 80099ca:	2201      	movs	r2, #1
 80099cc:	4216      	tst	r6, r2
 80099ce:	d100      	bne.n	80099d2 <_svfprintf_r+0x127a>
 80099d0:	e07f      	b.n	8009ad2 <_svfprintf_r+0x137a>
 80099d2:	9a08      	ldr	r2, [sp, #32]
 80099d4:	912e      	str	r1, [sp, #184]	; 0xb8
 80099d6:	603a      	str	r2, [r7, #0]
 80099d8:	2201      	movs	r2, #1
 80099da:	932d      	str	r3, [sp, #180]	; 0xb4
 80099dc:	607a      	str	r2, [r7, #4]
 80099de:	2b07      	cmp	r3, #7
 80099e0:	dd08      	ble.n	80099f4 <_svfprintf_r+0x129c>
 80099e2:	990b      	ldr	r1, [sp, #44]	; 0x2c
 80099e4:	980a      	ldr	r0, [sp, #40]	; 0x28
 80099e6:	aa2c      	add	r2, sp, #176	; 0xb0
 80099e8:	f001 f9da 	bl	800ada0 <__ssprint_r>
 80099ec:	2800      	cmp	r0, #0
 80099ee:	d000      	beq.n	80099f2 <_svfprintf_r+0x129a>
 80099f0:	e091      	b.n	8009b16 <_svfprintf_r+0x13be>
 80099f2:	ac2f      	add	r4, sp, #188	; 0xbc
 80099f4:	9b1c      	ldr	r3, [sp, #112]	; 0x70
 80099f6:	9a16      	ldr	r2, [sp, #88]	; 0x58
 80099f8:	6023      	str	r3, [r4, #0]
 80099fa:	9b16      	ldr	r3, [sp, #88]	; 0x58
 80099fc:	6063      	str	r3, [r4, #4]
 80099fe:	9b2e      	ldr	r3, [sp, #184]	; 0xb8
 8009a00:	3408      	adds	r4, #8
 8009a02:	189b      	adds	r3, r3, r2
 8009a04:	932e      	str	r3, [sp, #184]	; 0xb8
 8009a06:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
 8009a08:	3301      	adds	r3, #1
 8009a0a:	932d      	str	r3, [sp, #180]	; 0xb4
 8009a0c:	2b07      	cmp	r3, #7
 8009a0e:	dd07      	ble.n	8009a20 <_svfprintf_r+0x12c8>
 8009a10:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8009a12:	980a      	ldr	r0, [sp, #40]	; 0x28
 8009a14:	aa2c      	add	r2, sp, #176	; 0xb0
 8009a16:	f001 f9c3 	bl	800ada0 <__ssprint_r>
 8009a1a:	2800      	cmp	r0, #0
 8009a1c:	d17b      	bne.n	8009b16 <_svfprintf_r+0x13be>
 8009a1e:	ac2f      	add	r4, sp, #188	; 0xbc
 8009a20:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
 8009a22:	2200      	movs	r2, #0
 8009a24:	9814      	ldr	r0, [sp, #80]	; 0x50
 8009a26:	9915      	ldr	r1, [sp, #84]	; 0x54
 8009a28:	9309      	str	r3, [sp, #36]	; 0x24
 8009a2a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8009a2c:	9f2e      	ldr	r7, [sp, #184]	; 0xb8
 8009a2e:	1e5d      	subs	r5, r3, #1
 8009a30:	2300      	movs	r3, #0
 8009a32:	f7f6 fd09 	bl	8000448 <__aeabi_dcmpeq>
 8009a36:	2800      	cmp	r0, #0
 8009a38:	d126      	bne.n	8009a88 <_svfprintf_r+0x1330>
 8009a3a:	9b08      	ldr	r3, [sp, #32]
 8009a3c:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8009a3e:	3301      	adds	r3, #1
 8009a40:	990e      	ldr	r1, [sp, #56]	; 0x38
 8009a42:	6023      	str	r3, [r4, #0]
 8009a44:	1e7b      	subs	r3, r7, #1
 8009a46:	3201      	adds	r2, #1
 8009a48:	185b      	adds	r3, r3, r1
 8009a4a:	6065      	str	r5, [r4, #4]
 8009a4c:	932e      	str	r3, [sp, #184]	; 0xb8
 8009a4e:	922d      	str	r2, [sp, #180]	; 0xb4
 8009a50:	3408      	adds	r4, #8
 8009a52:	2a07      	cmp	r2, #7
 8009a54:	dd07      	ble.n	8009a66 <_svfprintf_r+0x130e>
 8009a56:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8009a58:	980a      	ldr	r0, [sp, #40]	; 0x28
 8009a5a:	aa2c      	add	r2, sp, #176	; 0xb0
 8009a5c:	f001 f9a0 	bl	800ada0 <__ssprint_r>
 8009a60:	2800      	cmp	r0, #0
 8009a62:	d158      	bne.n	8009b16 <_svfprintf_r+0x13be>
 8009a64:	ac2f      	add	r4, sp, #188	; 0xbc
 8009a66:	ab28      	add	r3, sp, #160	; 0xa0
 8009a68:	6023      	str	r3, [r4, #0]
 8009a6a:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 8009a6c:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 8009a6e:	6063      	str	r3, [r4, #4]
 8009a70:	9b2e      	ldr	r3, [sp, #184]	; 0xb8
 8009a72:	189b      	adds	r3, r3, r2
 8009a74:	932e      	str	r3, [sp, #184]	; 0xb8
 8009a76:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
 8009a78:	3301      	adds	r3, #1
 8009a7a:	932d      	str	r3, [sp, #180]	; 0xb4
 8009a7c:	2b07      	cmp	r3, #7
 8009a7e:	dd00      	ble.n	8009a82 <_svfprintf_r+0x132a>
 8009a80:	e638      	b.n	80096f4 <_svfprintf_r+0xf9c>
 8009a82:	3408      	adds	r4, #8
 8009a84:	0027      	movs	r7, r4
 8009a86:	e595      	b.n	80095b4 <_svfprintf_r+0xe5c>
 8009a88:	2710      	movs	r7, #16
 8009a8a:	2d00      	cmp	r5, #0
 8009a8c:	ddeb      	ble.n	8009a66 <_svfprintf_r+0x130e>
 8009a8e:	0021      	movs	r1, r4
 8009a90:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
 8009a92:	4850      	ldr	r0, [pc, #320]	; (8009bd4 <_svfprintf_r+0x147c>)
 8009a94:	9a2e      	ldr	r2, [sp, #184]	; 0xb8
 8009a96:	3301      	adds	r3, #1
 8009a98:	3108      	adds	r1, #8
 8009a9a:	6020      	str	r0, [r4, #0]
 8009a9c:	2d10      	cmp	r5, #16
 8009a9e:	dc07      	bgt.n	8009ab0 <_svfprintf_r+0x1358>
 8009aa0:	6065      	str	r5, [r4, #4]
 8009aa2:	000c      	movs	r4, r1
 8009aa4:	18ad      	adds	r5, r5, r2
 8009aa6:	952e      	str	r5, [sp, #184]	; 0xb8
 8009aa8:	932d      	str	r3, [sp, #180]	; 0xb4
 8009aaa:	2b07      	cmp	r3, #7
 8009aac:	dddb      	ble.n	8009a66 <_svfprintf_r+0x130e>
 8009aae:	e7d2      	b.n	8009a56 <_svfprintf_r+0x12fe>
 8009ab0:	3210      	adds	r2, #16
 8009ab2:	6067      	str	r7, [r4, #4]
 8009ab4:	922e      	str	r2, [sp, #184]	; 0xb8
 8009ab6:	932d      	str	r3, [sp, #180]	; 0xb4
 8009ab8:	2b07      	cmp	r3, #7
 8009aba:	dd07      	ble.n	8009acc <_svfprintf_r+0x1374>
 8009abc:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8009abe:	980a      	ldr	r0, [sp, #40]	; 0x28
 8009ac0:	aa2c      	add	r2, sp, #176	; 0xb0
 8009ac2:	f001 f96d 	bl	800ada0 <__ssprint_r>
 8009ac6:	2800      	cmp	r0, #0
 8009ac8:	d125      	bne.n	8009b16 <_svfprintf_r+0x13be>
 8009aca:	a92f      	add	r1, sp, #188	; 0xbc
 8009acc:	000c      	movs	r4, r1
 8009ace:	3d10      	subs	r5, #16
 8009ad0:	e7dd      	b.n	8009a8e <_svfprintf_r+0x1336>
 8009ad2:	9808      	ldr	r0, [sp, #32]
 8009ad4:	912e      	str	r1, [sp, #184]	; 0xb8
 8009ad6:	c705      	stmia	r7!, {r0, r2}
 8009ad8:	932d      	str	r3, [sp, #180]	; 0xb4
 8009ada:	e7e6      	b.n	8009aaa <_svfprintf_r+0x1352>
 8009adc:	9b18      	ldr	r3, [sp, #96]	; 0x60
 8009ade:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 8009ae0:	2510      	movs	r5, #16
 8009ae2:	1a9c      	subs	r4, r3, r2
 8009ae4:	2c00      	cmp	r4, #0
 8009ae6:	dc00      	bgt.n	8009aea <_svfprintf_r+0x1392>
 8009ae8:	e567      	b.n	80095ba <_svfprintf_r+0xe62>
 8009aea:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
 8009aec:	493a      	ldr	r1, [pc, #232]	; (8009bd8 <_svfprintf_r+0x1480>)
 8009aee:	9a2e      	ldr	r2, [sp, #184]	; 0xb8
 8009af0:	3301      	adds	r3, #1
 8009af2:	6039      	str	r1, [r7, #0]
 8009af4:	2c10      	cmp	r4, #16
 8009af6:	dc19      	bgt.n	8009b2c <_svfprintf_r+0x13d4>
 8009af8:	607c      	str	r4, [r7, #4]
 8009afa:	18a4      	adds	r4, r4, r2
 8009afc:	942e      	str	r4, [sp, #184]	; 0xb8
 8009afe:	932d      	str	r3, [sp, #180]	; 0xb4
 8009b00:	2b07      	cmp	r3, #7
 8009b02:	dc00      	bgt.n	8009b06 <_svfprintf_r+0x13ae>
 8009b04:	e559      	b.n	80095ba <_svfprintf_r+0xe62>
 8009b06:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8009b08:	980a      	ldr	r0, [sp, #40]	; 0x28
 8009b0a:	aa2c      	add	r2, sp, #176	; 0xb0
 8009b0c:	f001 f948 	bl	800ada0 <__ssprint_r>
 8009b10:	2800      	cmp	r0, #0
 8009b12:	d100      	bne.n	8009b16 <_svfprintf_r+0x13be>
 8009b14:	e551      	b.n	80095ba <_svfprintf_r+0xe62>
 8009b16:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8009b18:	2b00      	cmp	r3, #0
 8009b1a:	d101      	bne.n	8009b20 <_svfprintf_r+0x13c8>
 8009b1c:	f7ff f845 	bl	8008baa <_svfprintf_r+0x452>
 8009b20:	0019      	movs	r1, r3
 8009b22:	980a      	ldr	r0, [sp, #40]	; 0x28
 8009b24:	f7fd ffd8 	bl	8007ad8 <_free_r>
 8009b28:	f7ff f83f 	bl	8008baa <_svfprintf_r+0x452>
 8009b2c:	3210      	adds	r2, #16
 8009b2e:	607d      	str	r5, [r7, #4]
 8009b30:	922e      	str	r2, [sp, #184]	; 0xb8
 8009b32:	932d      	str	r3, [sp, #180]	; 0xb4
 8009b34:	3708      	adds	r7, #8
 8009b36:	2b07      	cmp	r3, #7
 8009b38:	dd07      	ble.n	8009b4a <_svfprintf_r+0x13f2>
 8009b3a:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8009b3c:	980a      	ldr	r0, [sp, #40]	; 0x28
 8009b3e:	aa2c      	add	r2, sp, #176	; 0xb0
 8009b40:	f001 f92e 	bl	800ada0 <__ssprint_r>
 8009b44:	2800      	cmp	r0, #0
 8009b46:	d1e6      	bne.n	8009b16 <_svfprintf_r+0x13be>
 8009b48:	af2f      	add	r7, sp, #188	; 0xbc
 8009b4a:	3c10      	subs	r4, #16
 8009b4c:	e7cd      	b.n	8009aea <_svfprintf_r+0x1392>
 8009b4e:	990c      	ldr	r1, [sp, #48]	; 0x30
 8009b50:	980a      	ldr	r0, [sp, #40]	; 0x28
 8009b52:	f7fd ffc1 	bl	8007ad8 <_free_r>
 8009b56:	e549      	b.n	80095ec <_svfprintf_r+0xe94>
 8009b58:	9b2e      	ldr	r3, [sp, #184]	; 0xb8
 8009b5a:	2b00      	cmp	r3, #0
 8009b5c:	d101      	bne.n	8009b62 <_svfprintf_r+0x140a>
 8009b5e:	f7ff f824 	bl	8008baa <_svfprintf_r+0x452>
 8009b62:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8009b64:	980a      	ldr	r0, [sp, #40]	; 0x28
 8009b66:	aa2c      	add	r2, sp, #176	; 0xb0
 8009b68:	f001 f91a 	bl	800ada0 <__ssprint_r>
 8009b6c:	f7ff f81d 	bl	8008baa <_svfprintf_r+0x452>
 8009b70:	0034      	movs	r4, r6
 8009b72:	2a00      	cmp	r2, #0
 8009b74:	d101      	bne.n	8009b7a <_svfprintf_r+0x1422>
 8009b76:	f7fe ff8c 	bl	8008a92 <_svfprintf_r+0x33a>
 8009b7a:	2b01      	cmp	r3, #1
 8009b7c:	d101      	bne.n	8009b82 <_svfprintf_r+0x142a>
 8009b7e:	f7ff fc01 	bl	8009384 <_svfprintf_r+0xc2c>
 8009b82:	2b02      	cmp	r3, #2
 8009b84:	d100      	bne.n	8009b88 <_svfprintf_r+0x1430>
 8009b86:	e459      	b.n	800943c <_svfprintf_r+0xce4>
 8009b88:	2507      	movs	r5, #7
 8009b8a:	ab58      	add	r3, sp, #352	; 0x160
 8009b8c:	9308      	str	r3, [sp, #32]
 8009b8e:	9a08      	ldr	r2, [sp, #32]
 8009b90:	0013      	movs	r3, r2
 8009b92:	3b01      	subs	r3, #1
 8009b94:	9308      	str	r3, [sp, #32]
 8009b96:	9b06      	ldr	r3, [sp, #24]
 8009b98:	9908      	ldr	r1, [sp, #32]
 8009b9a:	402b      	ands	r3, r5
 8009b9c:	3330      	adds	r3, #48	; 0x30
 8009b9e:	700b      	strb	r3, [r1, #0]
 8009ba0:	9907      	ldr	r1, [sp, #28]
 8009ba2:	074e      	lsls	r6, r1, #29
 8009ba4:	9906      	ldr	r1, [sp, #24]
 8009ba6:	08c8      	lsrs	r0, r1, #3
 8009ba8:	9907      	ldr	r1, [sp, #28]
 8009baa:	4306      	orrs	r6, r0
 8009bac:	08c9      	lsrs	r1, r1, #3
 8009bae:	9107      	str	r1, [sp, #28]
 8009bb0:	0031      	movs	r1, r6
 8009bb2:	9807      	ldr	r0, [sp, #28]
 8009bb4:	9606      	str	r6, [sp, #24]
 8009bb6:	4301      	orrs	r1, r0
 8009bb8:	d1e9      	bne.n	8009b8e <_svfprintf_r+0x1436>
 8009bba:	07e1      	lsls	r1, r4, #31
 8009bbc:	d400      	bmi.n	8009bc0 <_svfprintf_r+0x1468>
 8009bbe:	e42a      	b.n	8009416 <_svfprintf_r+0xcbe>
 8009bc0:	2b30      	cmp	r3, #48	; 0x30
 8009bc2:	d100      	bne.n	8009bc6 <_svfprintf_r+0x146e>
 8009bc4:	e427      	b.n	8009416 <_svfprintf_r+0xcbe>
 8009bc6:	2130      	movs	r1, #48	; 0x30
 8009bc8:	9b08      	ldr	r3, [sp, #32]
 8009bca:	3b01      	subs	r3, #1
 8009bcc:	7019      	strb	r1, [r3, #0]
 8009bce:	1e93      	subs	r3, r2, #2
 8009bd0:	9308      	str	r3, [sp, #32]
 8009bd2:	e420      	b.n	8009416 <_svfprintf_r+0xcbe>
 8009bd4:	0800de98 	.word	0x0800de98
 8009bd8:	0800de88 	.word	0x0800de88

08009bdc <_fclose_r>:
 8009bdc:	b570      	push	{r4, r5, r6, lr}
 8009bde:	0005      	movs	r5, r0
 8009be0:	1e0c      	subs	r4, r1, #0
 8009be2:	d102      	bne.n	8009bea <_fclose_r+0xe>
 8009be4:	2600      	movs	r6, #0
 8009be6:	0030      	movs	r0, r6
 8009be8:	bd70      	pop	{r4, r5, r6, pc}
 8009bea:	2800      	cmp	r0, #0
 8009bec:	d004      	beq.n	8009bf8 <_fclose_r+0x1c>
 8009bee:	6b43      	ldr	r3, [r0, #52]	; 0x34
 8009bf0:	2b00      	cmp	r3, #0
 8009bf2:	d101      	bne.n	8009bf8 <_fclose_r+0x1c>
 8009bf4:	f7fd fd9e 	bl	8007734 <__sinit>
 8009bf8:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8009bfa:	07db      	lsls	r3, r3, #31
 8009bfc:	d405      	bmi.n	8009c0a <_fclose_r+0x2e>
 8009bfe:	89a3      	ldrh	r3, [r4, #12]
 8009c00:	059b      	lsls	r3, r3, #22
 8009c02:	d402      	bmi.n	8009c0a <_fclose_r+0x2e>
 8009c04:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8009c06:	f7fd fef3 	bl	80079f0 <__retarget_lock_acquire_recursive>
 8009c0a:	220c      	movs	r2, #12
 8009c0c:	5ea3      	ldrsh	r3, [r4, r2]
 8009c0e:	2b00      	cmp	r3, #0
 8009c10:	d109      	bne.n	8009c26 <_fclose_r+0x4a>
 8009c12:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8009c14:	3301      	adds	r3, #1
 8009c16:	0016      	movs	r6, r2
 8009c18:	401e      	ands	r6, r3
 8009c1a:	421a      	tst	r2, r3
 8009c1c:	d1e2      	bne.n	8009be4 <_fclose_r+0x8>
 8009c1e:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8009c20:	f7fd fee7 	bl	80079f2 <__retarget_lock_release_recursive>
 8009c24:	e7df      	b.n	8009be6 <_fclose_r+0xa>
 8009c26:	0021      	movs	r1, r4
 8009c28:	0028      	movs	r0, r5
 8009c2a:	f000 f837 	bl	8009c9c <__sflush_r>
 8009c2e:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8009c30:	0006      	movs	r6, r0
 8009c32:	2b00      	cmp	r3, #0
 8009c34:	d006      	beq.n	8009c44 <_fclose_r+0x68>
 8009c36:	0028      	movs	r0, r5
 8009c38:	69e1      	ldr	r1, [r4, #28]
 8009c3a:	4798      	blx	r3
 8009c3c:	2800      	cmp	r0, #0
 8009c3e:	da01      	bge.n	8009c44 <_fclose_r+0x68>
 8009c40:	2601      	movs	r6, #1
 8009c42:	4276      	negs	r6, r6
 8009c44:	89a3      	ldrh	r3, [r4, #12]
 8009c46:	061b      	lsls	r3, r3, #24
 8009c48:	d503      	bpl.n	8009c52 <_fclose_r+0x76>
 8009c4a:	0028      	movs	r0, r5
 8009c4c:	6921      	ldr	r1, [r4, #16]
 8009c4e:	f7fd ff43 	bl	8007ad8 <_free_r>
 8009c52:	6b21      	ldr	r1, [r4, #48]	; 0x30
 8009c54:	2900      	cmp	r1, #0
 8009c56:	d008      	beq.n	8009c6a <_fclose_r+0x8e>
 8009c58:	0023      	movs	r3, r4
 8009c5a:	3340      	adds	r3, #64	; 0x40
 8009c5c:	4299      	cmp	r1, r3
 8009c5e:	d002      	beq.n	8009c66 <_fclose_r+0x8a>
 8009c60:	0028      	movs	r0, r5
 8009c62:	f7fd ff39 	bl	8007ad8 <_free_r>
 8009c66:	2300      	movs	r3, #0
 8009c68:	6323      	str	r3, [r4, #48]	; 0x30
 8009c6a:	6c61      	ldr	r1, [r4, #68]	; 0x44
 8009c6c:	2900      	cmp	r1, #0
 8009c6e:	d004      	beq.n	8009c7a <_fclose_r+0x9e>
 8009c70:	0028      	movs	r0, r5
 8009c72:	f7fd ff31 	bl	8007ad8 <_free_r>
 8009c76:	2300      	movs	r3, #0
 8009c78:	6463      	str	r3, [r4, #68]	; 0x44
 8009c7a:	f7fd fd4b 	bl	8007714 <__sfp_lock_acquire>
 8009c7e:	2300      	movs	r3, #0
 8009c80:	81a3      	strh	r3, [r4, #12]
 8009c82:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8009c84:	07db      	lsls	r3, r3, #31
 8009c86:	d402      	bmi.n	8009c8e <_fclose_r+0xb2>
 8009c88:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8009c8a:	f7fd feb2 	bl	80079f2 <__retarget_lock_release_recursive>
 8009c8e:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8009c90:	f7fd fead 	bl	80079ee <__retarget_lock_close_recursive>
 8009c94:	f7fd fd46 	bl	8007724 <__sfp_lock_release>
 8009c98:	e7a5      	b.n	8009be6 <_fclose_r+0xa>
	...

08009c9c <__sflush_r>:
 8009c9c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8009c9e:	230c      	movs	r3, #12
 8009ca0:	5eca      	ldrsh	r2, [r1, r3]
 8009ca2:	000c      	movs	r4, r1
 8009ca4:	0005      	movs	r5, r0
 8009ca6:	b291      	uxth	r1, r2
 8009ca8:	0713      	lsls	r3, r2, #28
 8009caa:	d464      	bmi.n	8009d76 <__sflush_r+0xda>
 8009cac:	2380      	movs	r3, #128	; 0x80
 8009cae:	011b      	lsls	r3, r3, #4
 8009cb0:	4313      	orrs	r3, r2
 8009cb2:	6862      	ldr	r2, [r4, #4]
 8009cb4:	81a3      	strh	r3, [r4, #12]
 8009cb6:	2a00      	cmp	r2, #0
 8009cb8:	dc04      	bgt.n	8009cc4 <__sflush_r+0x28>
 8009cba:	6be2      	ldr	r2, [r4, #60]	; 0x3c
 8009cbc:	2a00      	cmp	r2, #0
 8009cbe:	dc01      	bgt.n	8009cc4 <__sflush_r+0x28>
 8009cc0:	2000      	movs	r0, #0
 8009cc2:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8009cc4:	6aa7      	ldr	r7, [r4, #40]	; 0x28
 8009cc6:	2f00      	cmp	r7, #0
 8009cc8:	d0fa      	beq.n	8009cc0 <__sflush_r+0x24>
 8009cca:	2200      	movs	r2, #0
 8009ccc:	2080      	movs	r0, #128	; 0x80
 8009cce:	682e      	ldr	r6, [r5, #0]
 8009cd0:	602a      	str	r2, [r5, #0]
 8009cd2:	001a      	movs	r2, r3
 8009cd4:	0140      	lsls	r0, r0, #5
 8009cd6:	69e1      	ldr	r1, [r4, #28]
 8009cd8:	4002      	ands	r2, r0
 8009cda:	4203      	tst	r3, r0
 8009cdc:	d038      	beq.n	8009d50 <__sflush_r+0xb4>
 8009cde:	6d20      	ldr	r0, [r4, #80]	; 0x50
 8009ce0:	89a3      	ldrh	r3, [r4, #12]
 8009ce2:	075b      	lsls	r3, r3, #29
 8009ce4:	d506      	bpl.n	8009cf4 <__sflush_r+0x58>
 8009ce6:	6863      	ldr	r3, [r4, #4]
 8009ce8:	1ac0      	subs	r0, r0, r3
 8009cea:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8009cec:	2b00      	cmp	r3, #0
 8009cee:	d001      	beq.n	8009cf4 <__sflush_r+0x58>
 8009cf0:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8009cf2:	1ac0      	subs	r0, r0, r3
 8009cf4:	0002      	movs	r2, r0
 8009cf6:	2300      	movs	r3, #0
 8009cf8:	0028      	movs	r0, r5
 8009cfa:	6aa7      	ldr	r7, [r4, #40]	; 0x28
 8009cfc:	69e1      	ldr	r1, [r4, #28]
 8009cfe:	47b8      	blx	r7
 8009d00:	89a2      	ldrh	r2, [r4, #12]
 8009d02:	1c43      	adds	r3, r0, #1
 8009d04:	d106      	bne.n	8009d14 <__sflush_r+0x78>
 8009d06:	6829      	ldr	r1, [r5, #0]
 8009d08:	291d      	cmp	r1, #29
 8009d0a:	d830      	bhi.n	8009d6e <__sflush_r+0xd2>
 8009d0c:	4b2c      	ldr	r3, [pc, #176]	; (8009dc0 <__sflush_r+0x124>)
 8009d0e:	410b      	asrs	r3, r1
 8009d10:	07db      	lsls	r3, r3, #31
 8009d12:	d42c      	bmi.n	8009d6e <__sflush_r+0xd2>
 8009d14:	4b2b      	ldr	r3, [pc, #172]	; (8009dc4 <__sflush_r+0x128>)
 8009d16:	4013      	ands	r3, r2
 8009d18:	2200      	movs	r2, #0
 8009d1a:	6062      	str	r2, [r4, #4]
 8009d1c:	6922      	ldr	r2, [r4, #16]
 8009d1e:	b21b      	sxth	r3, r3
 8009d20:	81a3      	strh	r3, [r4, #12]
 8009d22:	6022      	str	r2, [r4, #0]
 8009d24:	04db      	lsls	r3, r3, #19
 8009d26:	d505      	bpl.n	8009d34 <__sflush_r+0x98>
 8009d28:	1c43      	adds	r3, r0, #1
 8009d2a:	d102      	bne.n	8009d32 <__sflush_r+0x96>
 8009d2c:	682b      	ldr	r3, [r5, #0]
 8009d2e:	2b00      	cmp	r3, #0
 8009d30:	d100      	bne.n	8009d34 <__sflush_r+0x98>
 8009d32:	6520      	str	r0, [r4, #80]	; 0x50
 8009d34:	6b21      	ldr	r1, [r4, #48]	; 0x30
 8009d36:	602e      	str	r6, [r5, #0]
 8009d38:	2900      	cmp	r1, #0
 8009d3a:	d0c1      	beq.n	8009cc0 <__sflush_r+0x24>
 8009d3c:	0023      	movs	r3, r4
 8009d3e:	3340      	adds	r3, #64	; 0x40
 8009d40:	4299      	cmp	r1, r3
 8009d42:	d002      	beq.n	8009d4a <__sflush_r+0xae>
 8009d44:	0028      	movs	r0, r5
 8009d46:	f7fd fec7 	bl	8007ad8 <_free_r>
 8009d4a:	2000      	movs	r0, #0
 8009d4c:	6320      	str	r0, [r4, #48]	; 0x30
 8009d4e:	e7b8      	b.n	8009cc2 <__sflush_r+0x26>
 8009d50:	2301      	movs	r3, #1
 8009d52:	0028      	movs	r0, r5
 8009d54:	47b8      	blx	r7
 8009d56:	1c43      	adds	r3, r0, #1
 8009d58:	d1c2      	bne.n	8009ce0 <__sflush_r+0x44>
 8009d5a:	682b      	ldr	r3, [r5, #0]
 8009d5c:	2b00      	cmp	r3, #0
 8009d5e:	d0bf      	beq.n	8009ce0 <__sflush_r+0x44>
 8009d60:	2b1d      	cmp	r3, #29
 8009d62:	d001      	beq.n	8009d68 <__sflush_r+0xcc>
 8009d64:	2b16      	cmp	r3, #22
 8009d66:	d101      	bne.n	8009d6c <__sflush_r+0xd0>
 8009d68:	602e      	str	r6, [r5, #0]
 8009d6a:	e7a9      	b.n	8009cc0 <__sflush_r+0x24>
 8009d6c:	89a2      	ldrh	r2, [r4, #12]
 8009d6e:	2340      	movs	r3, #64	; 0x40
 8009d70:	4313      	orrs	r3, r2
 8009d72:	81a3      	strh	r3, [r4, #12]
 8009d74:	e7a5      	b.n	8009cc2 <__sflush_r+0x26>
 8009d76:	6926      	ldr	r6, [r4, #16]
 8009d78:	2e00      	cmp	r6, #0
 8009d7a:	d0a1      	beq.n	8009cc0 <__sflush_r+0x24>
 8009d7c:	6827      	ldr	r7, [r4, #0]
 8009d7e:	6026      	str	r6, [r4, #0]
 8009d80:	1bbb      	subs	r3, r7, r6
 8009d82:	9301      	str	r3, [sp, #4]
 8009d84:	2300      	movs	r3, #0
 8009d86:	0789      	lsls	r1, r1, #30
 8009d88:	d100      	bne.n	8009d8c <__sflush_r+0xf0>
 8009d8a:	6963      	ldr	r3, [r4, #20]
 8009d8c:	60a3      	str	r3, [r4, #8]
 8009d8e:	9b01      	ldr	r3, [sp, #4]
 8009d90:	2b00      	cmp	r3, #0
 8009d92:	dc00      	bgt.n	8009d96 <__sflush_r+0xfa>
 8009d94:	e794      	b.n	8009cc0 <__sflush_r+0x24>
 8009d96:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8009d98:	0032      	movs	r2, r6
 8009d9a:	001f      	movs	r7, r3
 8009d9c:	0028      	movs	r0, r5
 8009d9e:	9b01      	ldr	r3, [sp, #4]
 8009da0:	69e1      	ldr	r1, [r4, #28]
 8009da2:	47b8      	blx	r7
 8009da4:	2800      	cmp	r0, #0
 8009da6:	dc06      	bgt.n	8009db6 <__sflush_r+0x11a>
 8009da8:	2340      	movs	r3, #64	; 0x40
 8009daa:	2001      	movs	r0, #1
 8009dac:	89a2      	ldrh	r2, [r4, #12]
 8009dae:	4240      	negs	r0, r0
 8009db0:	4313      	orrs	r3, r2
 8009db2:	81a3      	strh	r3, [r4, #12]
 8009db4:	e785      	b.n	8009cc2 <__sflush_r+0x26>
 8009db6:	9b01      	ldr	r3, [sp, #4]
 8009db8:	1836      	adds	r6, r6, r0
 8009dba:	1a1b      	subs	r3, r3, r0
 8009dbc:	9301      	str	r3, [sp, #4]
 8009dbe:	e7e6      	b.n	8009d8e <__sflush_r+0xf2>
 8009dc0:	dfbffffe 	.word	0xdfbffffe
 8009dc4:	fffff7ff 	.word	0xfffff7ff

08009dc8 <_fflush_r>:
 8009dc8:	b570      	push	{r4, r5, r6, lr}
 8009dca:	0005      	movs	r5, r0
 8009dcc:	000c      	movs	r4, r1
 8009dce:	2800      	cmp	r0, #0
 8009dd0:	d004      	beq.n	8009ddc <_fflush_r+0x14>
 8009dd2:	6b43      	ldr	r3, [r0, #52]	; 0x34
 8009dd4:	2b00      	cmp	r3, #0
 8009dd6:	d101      	bne.n	8009ddc <_fflush_r+0x14>
 8009dd8:	f7fd fcac 	bl	8007734 <__sinit>
 8009ddc:	220c      	movs	r2, #12
 8009dde:	5ea3      	ldrsh	r3, [r4, r2]
 8009de0:	1e1e      	subs	r6, r3, #0
 8009de2:	d015      	beq.n	8009e10 <_fflush_r+0x48>
 8009de4:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8009de6:	07d2      	lsls	r2, r2, #31
 8009de8:	d404      	bmi.n	8009df4 <_fflush_r+0x2c>
 8009dea:	059b      	lsls	r3, r3, #22
 8009dec:	d402      	bmi.n	8009df4 <_fflush_r+0x2c>
 8009dee:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8009df0:	f7fd fdfe 	bl	80079f0 <__retarget_lock_acquire_recursive>
 8009df4:	0021      	movs	r1, r4
 8009df6:	0028      	movs	r0, r5
 8009df8:	f7ff ff50 	bl	8009c9c <__sflush_r>
 8009dfc:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8009dfe:	0006      	movs	r6, r0
 8009e00:	07db      	lsls	r3, r3, #31
 8009e02:	d405      	bmi.n	8009e10 <_fflush_r+0x48>
 8009e04:	89a3      	ldrh	r3, [r4, #12]
 8009e06:	059b      	lsls	r3, r3, #22
 8009e08:	d402      	bmi.n	8009e10 <_fflush_r+0x48>
 8009e0a:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8009e0c:	f7fd fdf1 	bl	80079f2 <__retarget_lock_release_recursive>
 8009e10:	0030      	movs	r0, r6
 8009e12:	bd70      	pop	{r4, r5, r6, pc}

08009e14 <strncpy>:
 8009e14:	0003      	movs	r3, r0
 8009e16:	b530      	push	{r4, r5, lr}
 8009e18:	001d      	movs	r5, r3
 8009e1a:	2a00      	cmp	r2, #0
 8009e1c:	d006      	beq.n	8009e2c <strncpy+0x18>
 8009e1e:	780c      	ldrb	r4, [r1, #0]
 8009e20:	3a01      	subs	r2, #1
 8009e22:	3301      	adds	r3, #1
 8009e24:	702c      	strb	r4, [r5, #0]
 8009e26:	3101      	adds	r1, #1
 8009e28:	2c00      	cmp	r4, #0
 8009e2a:	d1f5      	bne.n	8009e18 <strncpy+0x4>
 8009e2c:	2100      	movs	r1, #0
 8009e2e:	189a      	adds	r2, r3, r2
 8009e30:	4293      	cmp	r3, r2
 8009e32:	d100      	bne.n	8009e36 <strncpy+0x22>
 8009e34:	bd30      	pop	{r4, r5, pc}
 8009e36:	7019      	strb	r1, [r3, #0]
 8009e38:	3301      	adds	r3, #1
 8009e3a:	e7f9      	b.n	8009e30 <strncpy+0x1c>

08009e3c <_localeconv_r>:
 8009e3c:	4800      	ldr	r0, [pc, #0]	; (8009e40 <_localeconv_r+0x4>)
 8009e3e:	4770      	bx	lr
 8009e40:	2000010c 	.word	0x2000010c

08009e44 <_sbrk_r>:
 8009e44:	2300      	movs	r3, #0
 8009e46:	b570      	push	{r4, r5, r6, lr}
 8009e48:	4d06      	ldr	r5, [pc, #24]	; (8009e64 <_sbrk_r+0x20>)
 8009e4a:	0004      	movs	r4, r0
 8009e4c:	0008      	movs	r0, r1
 8009e4e:	602b      	str	r3, [r5, #0]
 8009e50:	f7f8 ffda 	bl	8002e08 <_sbrk>
 8009e54:	1c43      	adds	r3, r0, #1
 8009e56:	d103      	bne.n	8009e60 <_sbrk_r+0x1c>
 8009e58:	682b      	ldr	r3, [r5, #0]
 8009e5a:	2b00      	cmp	r3, #0
 8009e5c:	d000      	beq.n	8009e60 <_sbrk_r+0x1c>
 8009e5e:	6023      	str	r3, [r4, #0]
 8009e60:	bd70      	pop	{r4, r5, r6, pc}
 8009e62:	46c0      	nop			; (mov r8, r8)
 8009e64:	200009d8 	.word	0x200009d8

08009e68 <__libc_fini_array>:
 8009e68:	b570      	push	{r4, r5, r6, lr}
 8009e6a:	4c07      	ldr	r4, [pc, #28]	; (8009e88 <__libc_fini_array+0x20>)
 8009e6c:	4d07      	ldr	r5, [pc, #28]	; (8009e8c <__libc_fini_array+0x24>)
 8009e6e:	1b64      	subs	r4, r4, r5
 8009e70:	10a4      	asrs	r4, r4, #2
 8009e72:	2c00      	cmp	r4, #0
 8009e74:	d102      	bne.n	8009e7c <__libc_fini_array+0x14>
 8009e76:	f002 fa93 	bl	800c3a0 <_fini>
 8009e7a:	bd70      	pop	{r4, r5, r6, pc}
 8009e7c:	3c01      	subs	r4, #1
 8009e7e:	00a3      	lsls	r3, r4, #2
 8009e80:	58eb      	ldr	r3, [r5, r3]
 8009e82:	4798      	blx	r3
 8009e84:	e7f5      	b.n	8009e72 <__libc_fini_array+0xa>
 8009e86:	46c0      	nop			; (mov r8, r8)
 8009e88:	0800df80 	.word	0x0800df80
 8009e8c:	0800df7c 	.word	0x0800df7c

08009e90 <sysconf>:
 8009e90:	2380      	movs	r3, #128	; 0x80
 8009e92:	b510      	push	{r4, lr}
 8009e94:	2808      	cmp	r0, #8
 8009e96:	d004      	beq.n	8009ea2 <sysconf+0x12>
 8009e98:	f7fd fd7e 	bl	8007998 <__errno>
 8009e9c:	2316      	movs	r3, #22
 8009e9e:	6003      	str	r3, [r0, #0]
 8009ea0:	3b17      	subs	r3, #23
 8009ea2:	0018      	movs	r0, r3
 8009ea4:	bd10      	pop	{r4, pc}

08009ea6 <memchr>:
 8009ea6:	b2c9      	uxtb	r1, r1
 8009ea8:	1882      	adds	r2, r0, r2
 8009eaa:	4290      	cmp	r0, r2
 8009eac:	d101      	bne.n	8009eb2 <memchr+0xc>
 8009eae:	2000      	movs	r0, #0
 8009eb0:	4770      	bx	lr
 8009eb2:	7803      	ldrb	r3, [r0, #0]
 8009eb4:	428b      	cmp	r3, r1
 8009eb6:	d0fb      	beq.n	8009eb0 <memchr+0xa>
 8009eb8:	3001      	adds	r0, #1
 8009eba:	e7f6      	b.n	8009eaa <memchr+0x4>

08009ebc <frexp>:
 8009ebc:	b570      	push	{r4, r5, r6, lr}
 8009ebe:	0014      	movs	r4, r2
 8009ec0:	2500      	movs	r5, #0
 8009ec2:	6025      	str	r5, [r4, #0]
 8009ec4:	4d10      	ldr	r5, [pc, #64]	; (8009f08 <frexp+0x4c>)
 8009ec6:	004b      	lsls	r3, r1, #1
 8009ec8:	000a      	movs	r2, r1
 8009eca:	085b      	lsrs	r3, r3, #1
 8009ecc:	42ab      	cmp	r3, r5
 8009ece:	dc1a      	bgt.n	8009f06 <frexp+0x4a>
 8009ed0:	001d      	movs	r5, r3
 8009ed2:	4305      	orrs	r5, r0
 8009ed4:	d017      	beq.n	8009f06 <frexp+0x4a>
 8009ed6:	4d0d      	ldr	r5, [pc, #52]	; (8009f0c <frexp+0x50>)
 8009ed8:	4229      	tst	r1, r5
 8009eda:	d109      	bne.n	8009ef0 <frexp+0x34>
 8009edc:	2200      	movs	r2, #0
 8009ede:	4b0c      	ldr	r3, [pc, #48]	; (8009f10 <frexp+0x54>)
 8009ee0:	f7f7 fb26 	bl	8001530 <__aeabi_dmul>
 8009ee4:	2536      	movs	r5, #54	; 0x36
 8009ee6:	000a      	movs	r2, r1
 8009ee8:	004b      	lsls	r3, r1, #1
 8009eea:	426d      	negs	r5, r5
 8009eec:	085b      	lsrs	r3, r3, #1
 8009eee:	6025      	str	r5, [r4, #0]
 8009ef0:	4d08      	ldr	r5, [pc, #32]	; (8009f14 <frexp+0x58>)
 8009ef2:	151b      	asrs	r3, r3, #20
 8009ef4:	195b      	adds	r3, r3, r5
 8009ef6:	6825      	ldr	r5, [r4, #0]
 8009ef8:	18eb      	adds	r3, r5, r3
 8009efa:	6023      	str	r3, [r4, #0]
 8009efc:	4b06      	ldr	r3, [pc, #24]	; (8009f18 <frexp+0x5c>)
 8009efe:	401a      	ands	r2, r3
 8009f00:	4b06      	ldr	r3, [pc, #24]	; (8009f1c <frexp+0x60>)
 8009f02:	4313      	orrs	r3, r2
 8009f04:	0019      	movs	r1, r3
 8009f06:	bd70      	pop	{r4, r5, r6, pc}
 8009f08:	7fefffff 	.word	0x7fefffff
 8009f0c:	7ff00000 	.word	0x7ff00000
 8009f10:	43500000 	.word	0x43500000
 8009f14:	fffffc02 	.word	0xfffffc02
 8009f18:	800fffff 	.word	0x800fffff
 8009f1c:	3fe00000 	.word	0x3fe00000

08009f20 <__register_exitproc>:
 8009f20:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8009f22:	4f1c      	ldr	r7, [pc, #112]	; (8009f94 <__register_exitproc+0x74>)
 8009f24:	0004      	movs	r4, r0
 8009f26:	6838      	ldr	r0, [r7, #0]
 8009f28:	0016      	movs	r6, r2
 8009f2a:	9301      	str	r3, [sp, #4]
 8009f2c:	9100      	str	r1, [sp, #0]
 8009f2e:	f7fd fd5f 	bl	80079f0 <__retarget_lock_acquire_recursive>
 8009f32:	4a19      	ldr	r2, [pc, #100]	; (8009f98 <__register_exitproc+0x78>)
 8009f34:	6813      	ldr	r3, [r2, #0]
 8009f36:	2b00      	cmp	r3, #0
 8009f38:	d101      	bne.n	8009f3e <__register_exitproc+0x1e>
 8009f3a:	4b18      	ldr	r3, [pc, #96]	; (8009f9c <__register_exitproc+0x7c>)
 8009f3c:	6013      	str	r3, [r2, #0]
 8009f3e:	685a      	ldr	r2, [r3, #4]
 8009f40:	6838      	ldr	r0, [r7, #0]
 8009f42:	2a1f      	cmp	r2, #31
 8009f44:	dd04      	ble.n	8009f50 <__register_exitproc+0x30>
 8009f46:	f7fd fd54 	bl	80079f2 <__retarget_lock_release_recursive>
 8009f4a:	2001      	movs	r0, #1
 8009f4c:	4240      	negs	r0, r0
 8009f4e:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8009f50:	2c00      	cmp	r4, #0
 8009f52:	d014      	beq.n	8009f7e <__register_exitproc+0x5e>
 8009f54:	0091      	lsls	r1, r2, #2
 8009f56:	1859      	adds	r1, r3, r1
 8009f58:	000f      	movs	r7, r1
 8009f5a:	3788      	adds	r7, #136	; 0x88
 8009f5c:	603e      	str	r6, [r7, #0]
 8009f5e:	2701      	movs	r7, #1
 8009f60:	001e      	movs	r6, r3
 8009f62:	4097      	lsls	r7, r2
 8009f64:	3685      	adds	r6, #133	; 0x85
 8009f66:	36ff      	adds	r6, #255	; 0xff
 8009f68:	6875      	ldr	r5, [r6, #4]
 8009f6a:	31fc      	adds	r1, #252	; 0xfc
 8009f6c:	433d      	orrs	r5, r7
 8009f6e:	6075      	str	r5, [r6, #4]
 8009f70:	9d01      	ldr	r5, [sp, #4]
 8009f72:	60cd      	str	r5, [r1, #12]
 8009f74:	2c02      	cmp	r4, #2
 8009f76:	d102      	bne.n	8009f7e <__register_exitproc+0x5e>
 8009f78:	68b1      	ldr	r1, [r6, #8]
 8009f7a:	4339      	orrs	r1, r7
 8009f7c:	60b1      	str	r1, [r6, #8]
 8009f7e:	1c51      	adds	r1, r2, #1
 8009f80:	6059      	str	r1, [r3, #4]
 8009f82:	3202      	adds	r2, #2
 8009f84:	9900      	ldr	r1, [sp, #0]
 8009f86:	0092      	lsls	r2, r2, #2
 8009f88:	50d1      	str	r1, [r2, r3]
 8009f8a:	f7fd fd32 	bl	80079f2 <__retarget_lock_release_recursive>
 8009f8e:	2000      	movs	r0, #0
 8009f90:	e7dd      	b.n	8009f4e <__register_exitproc+0x2e>
 8009f92:	46c0      	nop			; (mov r8, r8)
 8009f94:	200002ac 	.word	0x200002ac
 8009f98:	200009e0 	.word	0x200009e0
 8009f9c:	20000a18 	.word	0x20000a18

08009fa0 <__assert_func>:
 8009fa0:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
 8009fa2:	0014      	movs	r4, r2
 8009fa4:	001a      	movs	r2, r3
 8009fa6:	4b09      	ldr	r3, [pc, #36]	; (8009fcc <__assert_func+0x2c>)
 8009fa8:	0005      	movs	r5, r0
 8009faa:	681b      	ldr	r3, [r3, #0]
 8009fac:	000e      	movs	r6, r1
 8009fae:	68d8      	ldr	r0, [r3, #12]
 8009fb0:	4b07      	ldr	r3, [pc, #28]	; (8009fd0 <__assert_func+0x30>)
 8009fb2:	2c00      	cmp	r4, #0
 8009fb4:	d101      	bne.n	8009fba <__assert_func+0x1a>
 8009fb6:	4b07      	ldr	r3, [pc, #28]	; (8009fd4 <__assert_func+0x34>)
 8009fb8:	001c      	movs	r4, r3
 8009fba:	4907      	ldr	r1, [pc, #28]	; (8009fd8 <__assert_func+0x38>)
 8009fbc:	9301      	str	r3, [sp, #4]
 8009fbe:	9402      	str	r4, [sp, #8]
 8009fc0:	002b      	movs	r3, r5
 8009fc2:	9600      	str	r6, [sp, #0]
 8009fc4:	f000 fedc 	bl	800ad80 <fiprintf>
 8009fc8:	f001 fef0 	bl	800bdac <abort>
 8009fcc:	200002a8 	.word	0x200002a8
 8009fd0:	0800dea8 	.word	0x0800dea8
 8009fd4:	0800dee3 	.word	0x0800dee3
 8009fd8:	0800deb5 	.word	0x0800deb5

08009fdc <_calloc_r>:
 8009fdc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009fde:	2400      	movs	r4, #0
 8009fe0:	0c0b      	lsrs	r3, r1, #16
 8009fe2:	0c16      	lsrs	r6, r2, #16
 8009fe4:	42a3      	cmp	r3, r4
 8009fe6:	d133      	bne.n	800a050 <_calloc_r+0x74>
 8009fe8:	42a6      	cmp	r6, r4
 8009fea:	d121      	bne.n	800a030 <_calloc_r+0x54>
 8009fec:	b28b      	uxth	r3, r1
 8009fee:	b291      	uxth	r1, r2
 8009ff0:	4359      	muls	r1, r3
 8009ff2:	f7fd fe23 	bl	8007c3c <_malloc_r>
 8009ff6:	1e05      	subs	r5, r0, #0
 8009ff8:	d033      	beq.n	800a062 <_calloc_r+0x86>
 8009ffa:	0003      	movs	r3, r0
 8009ffc:	3b08      	subs	r3, #8
 8009ffe:	685a      	ldr	r2, [r3, #4]
 800a000:	2303      	movs	r3, #3
 800a002:	439a      	bics	r2, r3
 800a004:	3a04      	subs	r2, #4
 800a006:	2a24      	cmp	r2, #36	; 0x24
 800a008:	d832      	bhi.n	800a070 <_calloc_r+0x94>
 800a00a:	0003      	movs	r3, r0
 800a00c:	2a13      	cmp	r2, #19
 800a00e:	d90a      	bls.n	800a026 <_calloc_r+0x4a>
 800a010:	6004      	str	r4, [r0, #0]
 800a012:	6044      	str	r4, [r0, #4]
 800a014:	3308      	adds	r3, #8
 800a016:	2a1b      	cmp	r2, #27
 800a018:	d905      	bls.n	800a026 <_calloc_r+0x4a>
 800a01a:	6084      	str	r4, [r0, #8]
 800a01c:	60c4      	str	r4, [r0, #12]
 800a01e:	2a24      	cmp	r2, #36	; 0x24
 800a020:	d021      	beq.n	800a066 <_calloc_r+0x8a>
 800a022:	0003      	movs	r3, r0
 800a024:	3310      	adds	r3, #16
 800a026:	2200      	movs	r2, #0
 800a028:	601a      	str	r2, [r3, #0]
 800a02a:	605a      	str	r2, [r3, #4]
 800a02c:	609a      	str	r2, [r3, #8]
 800a02e:	e018      	b.n	800a062 <_calloc_r+0x86>
 800a030:	1c33      	adds	r3, r6, #0
 800a032:	1c0d      	adds	r5, r1, #0
 800a034:	b289      	uxth	r1, r1
 800a036:	b292      	uxth	r2, r2
 800a038:	434a      	muls	r2, r1
 800a03a:	b2ad      	uxth	r5, r5
 800a03c:	b299      	uxth	r1, r3
 800a03e:	4369      	muls	r1, r5
 800a040:	0c13      	lsrs	r3, r2, #16
 800a042:	18c9      	adds	r1, r1, r3
 800a044:	0c0b      	lsrs	r3, r1, #16
 800a046:	d107      	bne.n	800a058 <_calloc_r+0x7c>
 800a048:	0409      	lsls	r1, r1, #16
 800a04a:	b292      	uxth	r2, r2
 800a04c:	4311      	orrs	r1, r2
 800a04e:	e7d0      	b.n	8009ff2 <_calloc_r+0x16>
 800a050:	2e00      	cmp	r6, #0
 800a052:	d101      	bne.n	800a058 <_calloc_r+0x7c>
 800a054:	1c15      	adds	r5, r2, #0
 800a056:	e7ed      	b.n	800a034 <_calloc_r+0x58>
 800a058:	f7fd fc9e 	bl	8007998 <__errno>
 800a05c:	230c      	movs	r3, #12
 800a05e:	2500      	movs	r5, #0
 800a060:	6003      	str	r3, [r0, #0]
 800a062:	0028      	movs	r0, r5
 800a064:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800a066:	0003      	movs	r3, r0
 800a068:	6104      	str	r4, [r0, #16]
 800a06a:	3318      	adds	r3, #24
 800a06c:	6144      	str	r4, [r0, #20]
 800a06e:	e7da      	b.n	800a026 <_calloc_r+0x4a>
 800a070:	2100      	movs	r1, #0
 800a072:	f7fd fc33 	bl	80078dc <memset>
 800a076:	e7f4      	b.n	800a062 <_calloc_r+0x86>

0800a078 <quorem>:
 800a078:	b5f0      	push	{r4, r5, r6, r7, lr}
 800a07a:	6902      	ldr	r2, [r0, #16]
 800a07c:	690b      	ldr	r3, [r1, #16]
 800a07e:	b089      	sub	sp, #36	; 0x24
 800a080:	0007      	movs	r7, r0
 800a082:	9104      	str	r1, [sp, #16]
 800a084:	2000      	movs	r0, #0
 800a086:	429a      	cmp	r2, r3
 800a088:	db69      	blt.n	800a15e <quorem+0xe6>
 800a08a:	3b01      	subs	r3, #1
 800a08c:	009c      	lsls	r4, r3, #2
 800a08e:	9301      	str	r3, [sp, #4]
 800a090:	000b      	movs	r3, r1
 800a092:	3314      	adds	r3, #20
 800a094:	9306      	str	r3, [sp, #24]
 800a096:	191b      	adds	r3, r3, r4
 800a098:	9305      	str	r3, [sp, #20]
 800a09a:	003b      	movs	r3, r7
 800a09c:	3314      	adds	r3, #20
 800a09e:	9303      	str	r3, [sp, #12]
 800a0a0:	191c      	adds	r4, r3, r4
 800a0a2:	9b05      	ldr	r3, [sp, #20]
 800a0a4:	6826      	ldr	r6, [r4, #0]
 800a0a6:	681d      	ldr	r5, [r3, #0]
 800a0a8:	0030      	movs	r0, r6
 800a0aa:	3501      	adds	r5, #1
 800a0ac:	0029      	movs	r1, r5
 800a0ae:	f7f6 f845 	bl	800013c <__udivsi3>
 800a0b2:	9002      	str	r0, [sp, #8]
 800a0b4:	42ae      	cmp	r6, r5
 800a0b6:	d329      	bcc.n	800a10c <quorem+0x94>
 800a0b8:	9b06      	ldr	r3, [sp, #24]
 800a0ba:	2600      	movs	r6, #0
 800a0bc:	469c      	mov	ip, r3
 800a0be:	9d03      	ldr	r5, [sp, #12]
 800a0c0:	9606      	str	r6, [sp, #24]
 800a0c2:	4662      	mov	r2, ip
 800a0c4:	ca08      	ldmia	r2!, {r3}
 800a0c6:	6828      	ldr	r0, [r5, #0]
 800a0c8:	4694      	mov	ip, r2
 800a0ca:	9a02      	ldr	r2, [sp, #8]
 800a0cc:	b299      	uxth	r1, r3
 800a0ce:	4351      	muls	r1, r2
 800a0d0:	0c1b      	lsrs	r3, r3, #16
 800a0d2:	4353      	muls	r3, r2
 800a0d4:	1989      	adds	r1, r1, r6
 800a0d6:	0c0a      	lsrs	r2, r1, #16
 800a0d8:	189b      	adds	r3, r3, r2
 800a0da:	9307      	str	r3, [sp, #28]
 800a0dc:	0c1e      	lsrs	r6, r3, #16
 800a0de:	9b06      	ldr	r3, [sp, #24]
 800a0e0:	b282      	uxth	r2, r0
 800a0e2:	18d2      	adds	r2, r2, r3
 800a0e4:	466b      	mov	r3, sp
 800a0e6:	b289      	uxth	r1, r1
 800a0e8:	8b9b      	ldrh	r3, [r3, #28]
 800a0ea:	1a52      	subs	r2, r2, r1
 800a0ec:	0c01      	lsrs	r1, r0, #16
 800a0ee:	1ac9      	subs	r1, r1, r3
 800a0f0:	1413      	asrs	r3, r2, #16
 800a0f2:	18cb      	adds	r3, r1, r3
 800a0f4:	1419      	asrs	r1, r3, #16
 800a0f6:	b292      	uxth	r2, r2
 800a0f8:	041b      	lsls	r3, r3, #16
 800a0fa:	4313      	orrs	r3, r2
 800a0fc:	c508      	stmia	r5!, {r3}
 800a0fe:	9b05      	ldr	r3, [sp, #20]
 800a100:	9106      	str	r1, [sp, #24]
 800a102:	4563      	cmp	r3, ip
 800a104:	d2dd      	bcs.n	800a0c2 <quorem+0x4a>
 800a106:	6823      	ldr	r3, [r4, #0]
 800a108:	2b00      	cmp	r3, #0
 800a10a:	d030      	beq.n	800a16e <quorem+0xf6>
 800a10c:	0038      	movs	r0, r7
 800a10e:	9904      	ldr	r1, [sp, #16]
 800a110:	f7fe fa00 	bl	8008514 <__mcmp>
 800a114:	2800      	cmp	r0, #0
 800a116:	db21      	blt.n	800a15c <quorem+0xe4>
 800a118:	0038      	movs	r0, r7
 800a11a:	2600      	movs	r6, #0
 800a11c:	9b02      	ldr	r3, [sp, #8]
 800a11e:	9c04      	ldr	r4, [sp, #16]
 800a120:	3301      	adds	r3, #1
 800a122:	9302      	str	r3, [sp, #8]
 800a124:	3014      	adds	r0, #20
 800a126:	3414      	adds	r4, #20
 800a128:	6803      	ldr	r3, [r0, #0]
 800a12a:	cc02      	ldmia	r4!, {r1}
 800a12c:	b29d      	uxth	r5, r3
 800a12e:	19ad      	adds	r5, r5, r6
 800a130:	b28a      	uxth	r2, r1
 800a132:	1aaa      	subs	r2, r5, r2
 800a134:	0c09      	lsrs	r1, r1, #16
 800a136:	0c1b      	lsrs	r3, r3, #16
 800a138:	1a5b      	subs	r3, r3, r1
 800a13a:	1411      	asrs	r1, r2, #16
 800a13c:	185b      	adds	r3, r3, r1
 800a13e:	141e      	asrs	r6, r3, #16
 800a140:	b292      	uxth	r2, r2
 800a142:	041b      	lsls	r3, r3, #16
 800a144:	4313      	orrs	r3, r2
 800a146:	c008      	stmia	r0!, {r3}
 800a148:	9b05      	ldr	r3, [sp, #20]
 800a14a:	42a3      	cmp	r3, r4
 800a14c:	d2ec      	bcs.n	800a128 <quorem+0xb0>
 800a14e:	9b01      	ldr	r3, [sp, #4]
 800a150:	9a03      	ldr	r2, [sp, #12]
 800a152:	009b      	lsls	r3, r3, #2
 800a154:	18d3      	adds	r3, r2, r3
 800a156:	681a      	ldr	r2, [r3, #0]
 800a158:	2a00      	cmp	r2, #0
 800a15a:	d015      	beq.n	800a188 <quorem+0x110>
 800a15c:	9802      	ldr	r0, [sp, #8]
 800a15e:	b009      	add	sp, #36	; 0x24
 800a160:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800a162:	6823      	ldr	r3, [r4, #0]
 800a164:	2b00      	cmp	r3, #0
 800a166:	d106      	bne.n	800a176 <quorem+0xfe>
 800a168:	9b01      	ldr	r3, [sp, #4]
 800a16a:	3b01      	subs	r3, #1
 800a16c:	9301      	str	r3, [sp, #4]
 800a16e:	9b03      	ldr	r3, [sp, #12]
 800a170:	3c04      	subs	r4, #4
 800a172:	42a3      	cmp	r3, r4
 800a174:	d3f5      	bcc.n	800a162 <quorem+0xea>
 800a176:	9b01      	ldr	r3, [sp, #4]
 800a178:	613b      	str	r3, [r7, #16]
 800a17a:	e7c7      	b.n	800a10c <quorem+0x94>
 800a17c:	681a      	ldr	r2, [r3, #0]
 800a17e:	2a00      	cmp	r2, #0
 800a180:	d106      	bne.n	800a190 <quorem+0x118>
 800a182:	9a01      	ldr	r2, [sp, #4]
 800a184:	3a01      	subs	r2, #1
 800a186:	9201      	str	r2, [sp, #4]
 800a188:	9a03      	ldr	r2, [sp, #12]
 800a18a:	3b04      	subs	r3, #4
 800a18c:	429a      	cmp	r2, r3
 800a18e:	d3f5      	bcc.n	800a17c <quorem+0x104>
 800a190:	9b01      	ldr	r3, [sp, #4]
 800a192:	613b      	str	r3, [r7, #16]
 800a194:	e7e2      	b.n	800a15c <quorem+0xe4>
	...

0800a198 <_dtoa_r>:
 800a198:	b5f0      	push	{r4, r5, r6, r7, lr}
 800a19a:	0014      	movs	r4, r2
 800a19c:	001d      	movs	r5, r3
 800a19e:	6b81      	ldr	r1, [r0, #56]	; 0x38
 800a1a0:	b09d      	sub	sp, #116	; 0x74
 800a1a2:	9408      	str	r4, [sp, #32]
 800a1a4:	9509      	str	r5, [sp, #36]	; 0x24
 800a1a6:	9e25      	ldr	r6, [sp, #148]	; 0x94
 800a1a8:	9004      	str	r0, [sp, #16]
 800a1aa:	2900      	cmp	r1, #0
 800a1ac:	d009      	beq.n	800a1c2 <_dtoa_r+0x2a>
 800a1ae:	2301      	movs	r3, #1
 800a1b0:	6bc2      	ldr	r2, [r0, #60]	; 0x3c
 800a1b2:	4093      	lsls	r3, r2
 800a1b4:	604a      	str	r2, [r1, #4]
 800a1b6:	608b      	str	r3, [r1, #8]
 800a1b8:	f7fd ff9e 	bl	80080f8 <_Bfree>
 800a1bc:	2300      	movs	r3, #0
 800a1be:	9a04      	ldr	r2, [sp, #16]
 800a1c0:	6393      	str	r3, [r2, #56]	; 0x38
 800a1c2:	2d00      	cmp	r5, #0
 800a1c4:	da1e      	bge.n	800a204 <_dtoa_r+0x6c>
 800a1c6:	2301      	movs	r3, #1
 800a1c8:	6033      	str	r3, [r6, #0]
 800a1ca:	006b      	lsls	r3, r5, #1
 800a1cc:	085b      	lsrs	r3, r3, #1
 800a1ce:	9309      	str	r3, [sp, #36]	; 0x24
 800a1d0:	9f09      	ldr	r7, [sp, #36]	; 0x24
 800a1d2:	4bb5      	ldr	r3, [pc, #724]	; (800a4a8 <_dtoa_r+0x310>)
 800a1d4:	4ab4      	ldr	r2, [pc, #720]	; (800a4a8 <_dtoa_r+0x310>)
 800a1d6:	403b      	ands	r3, r7
 800a1d8:	4293      	cmp	r3, r2
 800a1da:	d116      	bne.n	800a20a <_dtoa_r+0x72>
 800a1dc:	4bb3      	ldr	r3, [pc, #716]	; (800a4ac <_dtoa_r+0x314>)
 800a1de:	9a24      	ldr	r2, [sp, #144]	; 0x90
 800a1e0:	6013      	str	r3, [r2, #0]
 800a1e2:	033b      	lsls	r3, r7, #12
 800a1e4:	0b1b      	lsrs	r3, r3, #12
 800a1e6:	4323      	orrs	r3, r4
 800a1e8:	d101      	bne.n	800a1ee <_dtoa_r+0x56>
 800a1ea:	f000 fdb2 	bl	800ad52 <_dtoa_r+0xbba>
 800a1ee:	4bb0      	ldr	r3, [pc, #704]	; (800a4b0 <_dtoa_r+0x318>)
 800a1f0:	9a26      	ldr	r2, [sp, #152]	; 0x98
 800a1f2:	9306      	str	r3, [sp, #24]
 800a1f4:	2a00      	cmp	r2, #0
 800a1f6:	d002      	beq.n	800a1fe <_dtoa_r+0x66>
 800a1f8:	4bae      	ldr	r3, [pc, #696]	; (800a4b4 <_dtoa_r+0x31c>)
 800a1fa:	9a26      	ldr	r2, [sp, #152]	; 0x98
 800a1fc:	6013      	str	r3, [r2, #0]
 800a1fe:	9806      	ldr	r0, [sp, #24]
 800a200:	b01d      	add	sp, #116	; 0x74
 800a202:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800a204:	2300      	movs	r3, #0
 800a206:	6033      	str	r3, [r6, #0]
 800a208:	e7e2      	b.n	800a1d0 <_dtoa_r+0x38>
 800a20a:	9a08      	ldr	r2, [sp, #32]
 800a20c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a20e:	9210      	str	r2, [sp, #64]	; 0x40
 800a210:	9311      	str	r3, [sp, #68]	; 0x44
 800a212:	9810      	ldr	r0, [sp, #64]	; 0x40
 800a214:	9911      	ldr	r1, [sp, #68]	; 0x44
 800a216:	2200      	movs	r2, #0
 800a218:	2300      	movs	r3, #0
 800a21a:	f7f6 f915 	bl	8000448 <__aeabi_dcmpeq>
 800a21e:	1e06      	subs	r6, r0, #0
 800a220:	d009      	beq.n	800a236 <_dtoa_r+0x9e>
 800a222:	2301      	movs	r3, #1
 800a224:	9a24      	ldr	r2, [sp, #144]	; 0x90
 800a226:	6013      	str	r3, [r2, #0]
 800a228:	4ba3      	ldr	r3, [pc, #652]	; (800a4b8 <_dtoa_r+0x320>)
 800a22a:	9306      	str	r3, [sp, #24]
 800a22c:	9b26      	ldr	r3, [sp, #152]	; 0x98
 800a22e:	2b00      	cmp	r3, #0
 800a230:	d0e5      	beq.n	800a1fe <_dtoa_r+0x66>
 800a232:	4ba2      	ldr	r3, [pc, #648]	; (800a4bc <_dtoa_r+0x324>)
 800a234:	e7e1      	b.n	800a1fa <_dtoa_r+0x62>
 800a236:	ab1a      	add	r3, sp, #104	; 0x68
 800a238:	9301      	str	r3, [sp, #4]
 800a23a:	ab1b      	add	r3, sp, #108	; 0x6c
 800a23c:	9300      	str	r3, [sp, #0]
 800a23e:	9804      	ldr	r0, [sp, #16]
 800a240:	9a10      	ldr	r2, [sp, #64]	; 0x40
 800a242:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800a244:	f7fe fa1a 	bl	800867c <__d2b>
 800a248:	007a      	lsls	r2, r7, #1
 800a24a:	9005      	str	r0, [sp, #20]
 800a24c:	0d52      	lsrs	r2, r2, #21
 800a24e:	d100      	bne.n	800a252 <_dtoa_r+0xba>
 800a250:	e07b      	b.n	800a34a <_dtoa_r+0x1b2>
 800a252:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800a254:	9617      	str	r6, [sp, #92]	; 0x5c
 800a256:	0319      	lsls	r1, r3, #12
 800a258:	4b99      	ldr	r3, [pc, #612]	; (800a4c0 <_dtoa_r+0x328>)
 800a25a:	0b09      	lsrs	r1, r1, #12
 800a25c:	430b      	orrs	r3, r1
 800a25e:	4999      	ldr	r1, [pc, #612]	; (800a4c4 <_dtoa_r+0x32c>)
 800a260:	1857      	adds	r7, r2, r1
 800a262:	9810      	ldr	r0, [sp, #64]	; 0x40
 800a264:	9911      	ldr	r1, [sp, #68]	; 0x44
 800a266:	0019      	movs	r1, r3
 800a268:	2200      	movs	r2, #0
 800a26a:	4b97      	ldr	r3, [pc, #604]	; (800a4c8 <_dtoa_r+0x330>)
 800a26c:	f7f7 fc22 	bl	8001ab4 <__aeabi_dsub>
 800a270:	4a96      	ldr	r2, [pc, #600]	; (800a4cc <_dtoa_r+0x334>)
 800a272:	4b97      	ldr	r3, [pc, #604]	; (800a4d0 <_dtoa_r+0x338>)
 800a274:	f7f7 f95c 	bl	8001530 <__aeabi_dmul>
 800a278:	4a96      	ldr	r2, [pc, #600]	; (800a4d4 <_dtoa_r+0x33c>)
 800a27a:	4b97      	ldr	r3, [pc, #604]	; (800a4d8 <_dtoa_r+0x340>)
 800a27c:	f7f6 f9fe 	bl	800067c <__aeabi_dadd>
 800a280:	0004      	movs	r4, r0
 800a282:	0038      	movs	r0, r7
 800a284:	000d      	movs	r5, r1
 800a286:	f7f7 ffeb 	bl	8002260 <__aeabi_i2d>
 800a28a:	4a94      	ldr	r2, [pc, #592]	; (800a4dc <_dtoa_r+0x344>)
 800a28c:	4b94      	ldr	r3, [pc, #592]	; (800a4e0 <_dtoa_r+0x348>)
 800a28e:	f7f7 f94f 	bl	8001530 <__aeabi_dmul>
 800a292:	0002      	movs	r2, r0
 800a294:	000b      	movs	r3, r1
 800a296:	0020      	movs	r0, r4
 800a298:	0029      	movs	r1, r5
 800a29a:	f7f6 f9ef 	bl	800067c <__aeabi_dadd>
 800a29e:	0004      	movs	r4, r0
 800a2a0:	000d      	movs	r5, r1
 800a2a2:	f7f7 ffa7 	bl	80021f4 <__aeabi_d2iz>
 800a2a6:	2200      	movs	r2, #0
 800a2a8:	9003      	str	r0, [sp, #12]
 800a2aa:	2300      	movs	r3, #0
 800a2ac:	0020      	movs	r0, r4
 800a2ae:	0029      	movs	r1, r5
 800a2b0:	f7f6 f8d0 	bl	8000454 <__aeabi_dcmplt>
 800a2b4:	2800      	cmp	r0, #0
 800a2b6:	d00b      	beq.n	800a2d0 <_dtoa_r+0x138>
 800a2b8:	9803      	ldr	r0, [sp, #12]
 800a2ba:	f7f7 ffd1 	bl	8002260 <__aeabi_i2d>
 800a2be:	002b      	movs	r3, r5
 800a2c0:	0022      	movs	r2, r4
 800a2c2:	f7f6 f8c1 	bl	8000448 <__aeabi_dcmpeq>
 800a2c6:	4243      	negs	r3, r0
 800a2c8:	4158      	adcs	r0, r3
 800a2ca:	9b03      	ldr	r3, [sp, #12]
 800a2cc:	1a1b      	subs	r3, r3, r0
 800a2ce:	9303      	str	r3, [sp, #12]
 800a2d0:	2301      	movs	r3, #1
 800a2d2:	9316      	str	r3, [sp, #88]	; 0x58
 800a2d4:	9b03      	ldr	r3, [sp, #12]
 800a2d6:	2b16      	cmp	r3, #22
 800a2d8:	d810      	bhi.n	800a2fc <_dtoa_r+0x164>
 800a2da:	9810      	ldr	r0, [sp, #64]	; 0x40
 800a2dc:	9911      	ldr	r1, [sp, #68]	; 0x44
 800a2de:	9a03      	ldr	r2, [sp, #12]
 800a2e0:	4b80      	ldr	r3, [pc, #512]	; (800a4e4 <_dtoa_r+0x34c>)
 800a2e2:	00d2      	lsls	r2, r2, #3
 800a2e4:	189b      	adds	r3, r3, r2
 800a2e6:	681a      	ldr	r2, [r3, #0]
 800a2e8:	685b      	ldr	r3, [r3, #4]
 800a2ea:	f7f6 f8b3 	bl	8000454 <__aeabi_dcmplt>
 800a2ee:	2800      	cmp	r0, #0
 800a2f0:	d047      	beq.n	800a382 <_dtoa_r+0x1ea>
 800a2f2:	9b03      	ldr	r3, [sp, #12]
 800a2f4:	3b01      	subs	r3, #1
 800a2f6:	9303      	str	r3, [sp, #12]
 800a2f8:	2300      	movs	r3, #0
 800a2fa:	9316      	str	r3, [sp, #88]	; 0x58
 800a2fc:	2200      	movs	r2, #0
 800a2fe:	9b1a      	ldr	r3, [sp, #104]	; 0x68
 800a300:	920a      	str	r2, [sp, #40]	; 0x28
 800a302:	1bdb      	subs	r3, r3, r7
 800a304:	1e5a      	subs	r2, r3, #1
 800a306:	d53e      	bpl.n	800a386 <_dtoa_r+0x1ee>
 800a308:	2201      	movs	r2, #1
 800a30a:	1ad3      	subs	r3, r2, r3
 800a30c:	930a      	str	r3, [sp, #40]	; 0x28
 800a30e:	2300      	movs	r3, #0
 800a310:	930c      	str	r3, [sp, #48]	; 0x30
 800a312:	9b03      	ldr	r3, [sp, #12]
 800a314:	2b00      	cmp	r3, #0
 800a316:	db38      	blt.n	800a38a <_dtoa_r+0x1f2>
 800a318:	9a03      	ldr	r2, [sp, #12]
 800a31a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800a31c:	4694      	mov	ip, r2
 800a31e:	4463      	add	r3, ip
 800a320:	930c      	str	r3, [sp, #48]	; 0x30
 800a322:	2300      	movs	r3, #0
 800a324:	9213      	str	r2, [sp, #76]	; 0x4c
 800a326:	930d      	str	r3, [sp, #52]	; 0x34
 800a328:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800a32a:	2401      	movs	r4, #1
 800a32c:	2b09      	cmp	r3, #9
 800a32e:	d867      	bhi.n	800a400 <_dtoa_r+0x268>
 800a330:	2b05      	cmp	r3, #5
 800a332:	dd02      	ble.n	800a33a <_dtoa_r+0x1a2>
 800a334:	2400      	movs	r4, #0
 800a336:	3b04      	subs	r3, #4
 800a338:	9322      	str	r3, [sp, #136]	; 0x88
 800a33a:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800a33c:	1e98      	subs	r0, r3, #2
 800a33e:	2803      	cmp	r0, #3
 800a340:	d867      	bhi.n	800a412 <_dtoa_r+0x27a>
 800a342:	f7f5 fee7 	bl	8000114 <__gnu_thumb1_case_uqi>
 800a346:	3a2b      	.short	0x3a2b
 800a348:	5b38      	.short	0x5b38
 800a34a:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800a34c:	9e1a      	ldr	r6, [sp, #104]	; 0x68
 800a34e:	18f6      	adds	r6, r6, r3
 800a350:	4b65      	ldr	r3, [pc, #404]	; (800a4e8 <_dtoa_r+0x350>)
 800a352:	18f2      	adds	r2, r6, r3
 800a354:	2a20      	cmp	r2, #32
 800a356:	dd0f      	ble.n	800a378 <_dtoa_r+0x1e0>
 800a358:	2340      	movs	r3, #64	; 0x40
 800a35a:	1a9b      	subs	r3, r3, r2
 800a35c:	409f      	lsls	r7, r3
 800a35e:	4b63      	ldr	r3, [pc, #396]	; (800a4ec <_dtoa_r+0x354>)
 800a360:	0038      	movs	r0, r7
 800a362:	18f3      	adds	r3, r6, r3
 800a364:	40dc      	lsrs	r4, r3
 800a366:	4320      	orrs	r0, r4
 800a368:	f7f7 ffaa 	bl	80022c0 <__aeabi_ui2d>
 800a36c:	2201      	movs	r2, #1
 800a36e:	4b60      	ldr	r3, [pc, #384]	; (800a4f0 <_dtoa_r+0x358>)
 800a370:	1e77      	subs	r7, r6, #1
 800a372:	18cb      	adds	r3, r1, r3
 800a374:	9217      	str	r2, [sp, #92]	; 0x5c
 800a376:	e776      	b.n	800a266 <_dtoa_r+0xce>
 800a378:	2320      	movs	r3, #32
 800a37a:	0020      	movs	r0, r4
 800a37c:	1a9b      	subs	r3, r3, r2
 800a37e:	4098      	lsls	r0, r3
 800a380:	e7f2      	b.n	800a368 <_dtoa_r+0x1d0>
 800a382:	9016      	str	r0, [sp, #88]	; 0x58
 800a384:	e7ba      	b.n	800a2fc <_dtoa_r+0x164>
 800a386:	920c      	str	r2, [sp, #48]	; 0x30
 800a388:	e7c3      	b.n	800a312 <_dtoa_r+0x17a>
 800a38a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800a38c:	9a03      	ldr	r2, [sp, #12]
 800a38e:	1a9b      	subs	r3, r3, r2
 800a390:	930a      	str	r3, [sp, #40]	; 0x28
 800a392:	4253      	negs	r3, r2
 800a394:	930d      	str	r3, [sp, #52]	; 0x34
 800a396:	2300      	movs	r3, #0
 800a398:	9313      	str	r3, [sp, #76]	; 0x4c
 800a39a:	e7c5      	b.n	800a328 <_dtoa_r+0x190>
 800a39c:	2300      	movs	r3, #0
 800a39e:	930f      	str	r3, [sp, #60]	; 0x3c
 800a3a0:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 800a3a2:	930b      	str	r3, [sp, #44]	; 0x2c
 800a3a4:	9307      	str	r3, [sp, #28]
 800a3a6:	2b00      	cmp	r3, #0
 800a3a8:	dc13      	bgt.n	800a3d2 <_dtoa_r+0x23a>
 800a3aa:	2301      	movs	r3, #1
 800a3ac:	001a      	movs	r2, r3
 800a3ae:	930b      	str	r3, [sp, #44]	; 0x2c
 800a3b0:	9307      	str	r3, [sp, #28]
 800a3b2:	9223      	str	r2, [sp, #140]	; 0x8c
 800a3b4:	e00d      	b.n	800a3d2 <_dtoa_r+0x23a>
 800a3b6:	2301      	movs	r3, #1
 800a3b8:	e7f1      	b.n	800a39e <_dtoa_r+0x206>
 800a3ba:	2300      	movs	r3, #0
 800a3bc:	9a23      	ldr	r2, [sp, #140]	; 0x8c
 800a3be:	930f      	str	r3, [sp, #60]	; 0x3c
 800a3c0:	4694      	mov	ip, r2
 800a3c2:	9b03      	ldr	r3, [sp, #12]
 800a3c4:	4463      	add	r3, ip
 800a3c6:	930b      	str	r3, [sp, #44]	; 0x2c
 800a3c8:	3301      	adds	r3, #1
 800a3ca:	9307      	str	r3, [sp, #28]
 800a3cc:	2b00      	cmp	r3, #0
 800a3ce:	dc00      	bgt.n	800a3d2 <_dtoa_r+0x23a>
 800a3d0:	2301      	movs	r3, #1
 800a3d2:	2100      	movs	r1, #0
 800a3d4:	2204      	movs	r2, #4
 800a3d6:	0010      	movs	r0, r2
 800a3d8:	3014      	adds	r0, #20
 800a3da:	4298      	cmp	r0, r3
 800a3dc:	d91d      	bls.n	800a41a <_dtoa_r+0x282>
 800a3de:	9b04      	ldr	r3, [sp, #16]
 800a3e0:	0018      	movs	r0, r3
 800a3e2:	63d9      	str	r1, [r3, #60]	; 0x3c
 800a3e4:	f7fd fe60 	bl	80080a8 <_Balloc>
 800a3e8:	9006      	str	r0, [sp, #24]
 800a3ea:	2800      	cmp	r0, #0
 800a3ec:	d118      	bne.n	800a420 <_dtoa_r+0x288>
 800a3ee:	21b0      	movs	r1, #176	; 0xb0
 800a3f0:	4b40      	ldr	r3, [pc, #256]	; (800a4f4 <_dtoa_r+0x35c>)
 800a3f2:	4841      	ldr	r0, [pc, #260]	; (800a4f8 <_dtoa_r+0x360>)
 800a3f4:	9a06      	ldr	r2, [sp, #24]
 800a3f6:	31ff      	adds	r1, #255	; 0xff
 800a3f8:	f7ff fdd2 	bl	8009fa0 <__assert_func>
 800a3fc:	2301      	movs	r3, #1
 800a3fe:	e7dd      	b.n	800a3bc <_dtoa_r+0x224>
 800a400:	2300      	movs	r3, #0
 800a402:	940f      	str	r4, [sp, #60]	; 0x3c
 800a404:	9322      	str	r3, [sp, #136]	; 0x88
 800a406:	3b01      	subs	r3, #1
 800a408:	930b      	str	r3, [sp, #44]	; 0x2c
 800a40a:	9307      	str	r3, [sp, #28]
 800a40c:	2200      	movs	r2, #0
 800a40e:	3313      	adds	r3, #19
 800a410:	e7cf      	b.n	800a3b2 <_dtoa_r+0x21a>
 800a412:	2301      	movs	r3, #1
 800a414:	930f      	str	r3, [sp, #60]	; 0x3c
 800a416:	3b02      	subs	r3, #2
 800a418:	e7f6      	b.n	800a408 <_dtoa_r+0x270>
 800a41a:	3101      	adds	r1, #1
 800a41c:	0052      	lsls	r2, r2, #1
 800a41e:	e7da      	b.n	800a3d6 <_dtoa_r+0x23e>
 800a420:	9b04      	ldr	r3, [sp, #16]
 800a422:	9a06      	ldr	r2, [sp, #24]
 800a424:	639a      	str	r2, [r3, #56]	; 0x38
 800a426:	9b07      	ldr	r3, [sp, #28]
 800a428:	2b0e      	cmp	r3, #14
 800a42a:	d900      	bls.n	800a42e <_dtoa_r+0x296>
 800a42c:	e0e3      	b.n	800a5f6 <_dtoa_r+0x45e>
 800a42e:	2c00      	cmp	r4, #0
 800a430:	d100      	bne.n	800a434 <_dtoa_r+0x29c>
 800a432:	e0e0      	b.n	800a5f6 <_dtoa_r+0x45e>
 800a434:	9b03      	ldr	r3, [sp, #12]
 800a436:	2b00      	cmp	r3, #0
 800a438:	dd62      	ble.n	800a500 <_dtoa_r+0x368>
 800a43a:	210f      	movs	r1, #15
 800a43c:	9a03      	ldr	r2, [sp, #12]
 800a43e:	4b29      	ldr	r3, [pc, #164]	; (800a4e4 <_dtoa_r+0x34c>)
 800a440:	400a      	ands	r2, r1
 800a442:	00d2      	lsls	r2, r2, #3
 800a444:	189b      	adds	r3, r3, r2
 800a446:	681e      	ldr	r6, [r3, #0]
 800a448:	685f      	ldr	r7, [r3, #4]
 800a44a:	9b03      	ldr	r3, [sp, #12]
 800a44c:	2402      	movs	r4, #2
 800a44e:	111d      	asrs	r5, r3, #4
 800a450:	05db      	lsls	r3, r3, #23
 800a452:	d50a      	bpl.n	800a46a <_dtoa_r+0x2d2>
 800a454:	4b29      	ldr	r3, [pc, #164]	; (800a4fc <_dtoa_r+0x364>)
 800a456:	400d      	ands	r5, r1
 800a458:	6a1a      	ldr	r2, [r3, #32]
 800a45a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a45c:	9810      	ldr	r0, [sp, #64]	; 0x40
 800a45e:	9911      	ldr	r1, [sp, #68]	; 0x44
 800a460:	f7f6 fc6c 	bl	8000d3c <__aeabi_ddiv>
 800a464:	9008      	str	r0, [sp, #32]
 800a466:	9109      	str	r1, [sp, #36]	; 0x24
 800a468:	3401      	adds	r4, #1
 800a46a:	4b24      	ldr	r3, [pc, #144]	; (800a4fc <_dtoa_r+0x364>)
 800a46c:	930e      	str	r3, [sp, #56]	; 0x38
 800a46e:	2d00      	cmp	r5, #0
 800a470:	d108      	bne.n	800a484 <_dtoa_r+0x2ec>
 800a472:	9808      	ldr	r0, [sp, #32]
 800a474:	9909      	ldr	r1, [sp, #36]	; 0x24
 800a476:	0032      	movs	r2, r6
 800a478:	003b      	movs	r3, r7
 800a47a:	f7f6 fc5f 	bl	8000d3c <__aeabi_ddiv>
 800a47e:	9008      	str	r0, [sp, #32]
 800a480:	9109      	str	r1, [sp, #36]	; 0x24
 800a482:	e058      	b.n	800a536 <_dtoa_r+0x39e>
 800a484:	2301      	movs	r3, #1
 800a486:	421d      	tst	r5, r3
 800a488:	d009      	beq.n	800a49e <_dtoa_r+0x306>
 800a48a:	18e4      	adds	r4, r4, r3
 800a48c:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800a48e:	0030      	movs	r0, r6
 800a490:	681a      	ldr	r2, [r3, #0]
 800a492:	685b      	ldr	r3, [r3, #4]
 800a494:	0039      	movs	r1, r7
 800a496:	f7f7 f84b 	bl	8001530 <__aeabi_dmul>
 800a49a:	0006      	movs	r6, r0
 800a49c:	000f      	movs	r7, r1
 800a49e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800a4a0:	106d      	asrs	r5, r5, #1
 800a4a2:	3308      	adds	r3, #8
 800a4a4:	e7e2      	b.n	800a46c <_dtoa_r+0x2d4>
 800a4a6:	46c0      	nop			; (mov r8, r8)
 800a4a8:	7ff00000 	.word	0x7ff00000
 800a4ac:	0000270f 	.word	0x0000270f
 800a4b0:	0800deed 	.word	0x0800deed
 800a4b4:	0800def0 	.word	0x0800def0
 800a4b8:	0800de86 	.word	0x0800de86
 800a4bc:	0800de87 	.word	0x0800de87
 800a4c0:	3ff00000 	.word	0x3ff00000
 800a4c4:	fffffc01 	.word	0xfffffc01
 800a4c8:	3ff80000 	.word	0x3ff80000
 800a4cc:	636f4361 	.word	0x636f4361
 800a4d0:	3fd287a7 	.word	0x3fd287a7
 800a4d4:	8b60c8b3 	.word	0x8b60c8b3
 800a4d8:	3fc68a28 	.word	0x3fc68a28
 800a4dc:	509f79fb 	.word	0x509f79fb
 800a4e0:	3fd34413 	.word	0x3fd34413
 800a4e4:	0800dd80 	.word	0x0800dd80
 800a4e8:	00000432 	.word	0x00000432
 800a4ec:	00000412 	.word	0x00000412
 800a4f0:	fe100000 	.word	0xfe100000
 800a4f4:	0800dce7 	.word	0x0800dce7
 800a4f8:	0800def1 	.word	0x0800def1
 800a4fc:	0800dd58 	.word	0x0800dd58
 800a500:	9b03      	ldr	r3, [sp, #12]
 800a502:	2402      	movs	r4, #2
 800a504:	2b00      	cmp	r3, #0
 800a506:	d016      	beq.n	800a536 <_dtoa_r+0x39e>
 800a508:	9810      	ldr	r0, [sp, #64]	; 0x40
 800a50a:	9911      	ldr	r1, [sp, #68]	; 0x44
 800a50c:	220f      	movs	r2, #15
 800a50e:	425d      	negs	r5, r3
 800a510:	402a      	ands	r2, r5
 800a512:	4bdd      	ldr	r3, [pc, #884]	; (800a888 <_dtoa_r+0x6f0>)
 800a514:	00d2      	lsls	r2, r2, #3
 800a516:	189b      	adds	r3, r3, r2
 800a518:	681a      	ldr	r2, [r3, #0]
 800a51a:	685b      	ldr	r3, [r3, #4]
 800a51c:	f7f7 f808 	bl	8001530 <__aeabi_dmul>
 800a520:	2701      	movs	r7, #1
 800a522:	2300      	movs	r3, #0
 800a524:	9008      	str	r0, [sp, #32]
 800a526:	9109      	str	r1, [sp, #36]	; 0x24
 800a528:	4ed8      	ldr	r6, [pc, #864]	; (800a88c <_dtoa_r+0x6f4>)
 800a52a:	112d      	asrs	r5, r5, #4
 800a52c:	2d00      	cmp	r5, #0
 800a52e:	d000      	beq.n	800a532 <_dtoa_r+0x39a>
 800a530:	e091      	b.n	800a656 <_dtoa_r+0x4be>
 800a532:	2b00      	cmp	r3, #0
 800a534:	d1a3      	bne.n	800a47e <_dtoa_r+0x2e6>
 800a536:	9e08      	ldr	r6, [sp, #32]
 800a538:	9f09      	ldr	r7, [sp, #36]	; 0x24
 800a53a:	9b16      	ldr	r3, [sp, #88]	; 0x58
 800a53c:	2b00      	cmp	r3, #0
 800a53e:	d100      	bne.n	800a542 <_dtoa_r+0x3aa>
 800a540:	e094      	b.n	800a66c <_dtoa_r+0x4d4>
 800a542:	2200      	movs	r2, #0
 800a544:	0030      	movs	r0, r6
 800a546:	0039      	movs	r1, r7
 800a548:	4bd1      	ldr	r3, [pc, #836]	; (800a890 <_dtoa_r+0x6f8>)
 800a54a:	f7f5 ff83 	bl	8000454 <__aeabi_dcmplt>
 800a54e:	2800      	cmp	r0, #0
 800a550:	d100      	bne.n	800a554 <_dtoa_r+0x3bc>
 800a552:	e08b      	b.n	800a66c <_dtoa_r+0x4d4>
 800a554:	9b07      	ldr	r3, [sp, #28]
 800a556:	2b00      	cmp	r3, #0
 800a558:	d100      	bne.n	800a55c <_dtoa_r+0x3c4>
 800a55a:	e087      	b.n	800a66c <_dtoa_r+0x4d4>
 800a55c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800a55e:	2b00      	cmp	r3, #0
 800a560:	dd45      	ble.n	800a5ee <_dtoa_r+0x456>
 800a562:	9b03      	ldr	r3, [sp, #12]
 800a564:	2200      	movs	r2, #0
 800a566:	3b01      	subs	r3, #1
 800a568:	930e      	str	r3, [sp, #56]	; 0x38
 800a56a:	0030      	movs	r0, r6
 800a56c:	4bc9      	ldr	r3, [pc, #804]	; (800a894 <_dtoa_r+0x6fc>)
 800a56e:	0039      	movs	r1, r7
 800a570:	f7f6 ffde 	bl	8001530 <__aeabi_dmul>
 800a574:	9008      	str	r0, [sp, #32]
 800a576:	9109      	str	r1, [sp, #36]	; 0x24
 800a578:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800a57a:	3401      	adds	r4, #1
 800a57c:	0020      	movs	r0, r4
 800a57e:	9e08      	ldr	r6, [sp, #32]
 800a580:	9f09      	ldr	r7, [sp, #36]	; 0x24
 800a582:	9312      	str	r3, [sp, #72]	; 0x48
 800a584:	f7f7 fe6c 	bl	8002260 <__aeabi_i2d>
 800a588:	0032      	movs	r2, r6
 800a58a:	003b      	movs	r3, r7
 800a58c:	f7f6 ffd0 	bl	8001530 <__aeabi_dmul>
 800a590:	2200      	movs	r2, #0
 800a592:	4bc1      	ldr	r3, [pc, #772]	; (800a898 <_dtoa_r+0x700>)
 800a594:	f7f6 f872 	bl	800067c <__aeabi_dadd>
 800a598:	4ac0      	ldr	r2, [pc, #768]	; (800a89c <_dtoa_r+0x704>)
 800a59a:	9014      	str	r0, [sp, #80]	; 0x50
 800a59c:	9115      	str	r1, [sp, #84]	; 0x54
 800a59e:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800a5a0:	9c15      	ldr	r4, [sp, #84]	; 0x54
 800a5a2:	4694      	mov	ip, r2
 800a5a4:	9308      	str	r3, [sp, #32]
 800a5a6:	9409      	str	r4, [sp, #36]	; 0x24
 800a5a8:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800a5aa:	4463      	add	r3, ip
 800a5ac:	9318      	str	r3, [sp, #96]	; 0x60
 800a5ae:	9309      	str	r3, [sp, #36]	; 0x24
 800a5b0:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800a5b2:	2b00      	cmp	r3, #0
 800a5b4:	d15e      	bne.n	800a674 <_dtoa_r+0x4dc>
 800a5b6:	2200      	movs	r2, #0
 800a5b8:	4bb9      	ldr	r3, [pc, #740]	; (800a8a0 <_dtoa_r+0x708>)
 800a5ba:	0030      	movs	r0, r6
 800a5bc:	0039      	movs	r1, r7
 800a5be:	f7f7 fa79 	bl	8001ab4 <__aeabi_dsub>
 800a5c2:	9a08      	ldr	r2, [sp, #32]
 800a5c4:	9b18      	ldr	r3, [sp, #96]	; 0x60
 800a5c6:	0004      	movs	r4, r0
 800a5c8:	000d      	movs	r5, r1
 800a5ca:	f7f5 ff57 	bl	800047c <__aeabi_dcmpgt>
 800a5ce:	2800      	cmp	r0, #0
 800a5d0:	d000      	beq.n	800a5d4 <_dtoa_r+0x43c>
 800a5d2:	e2b3      	b.n	800ab3c <_dtoa_r+0x9a4>
 800a5d4:	48b3      	ldr	r0, [pc, #716]	; (800a8a4 <_dtoa_r+0x70c>)
 800a5d6:	9915      	ldr	r1, [sp, #84]	; 0x54
 800a5d8:	4684      	mov	ip, r0
 800a5da:	4461      	add	r1, ip
 800a5dc:	000b      	movs	r3, r1
 800a5de:	0020      	movs	r0, r4
 800a5e0:	0029      	movs	r1, r5
 800a5e2:	9a08      	ldr	r2, [sp, #32]
 800a5e4:	f7f5 ff36 	bl	8000454 <__aeabi_dcmplt>
 800a5e8:	2800      	cmp	r0, #0
 800a5ea:	d000      	beq.n	800a5ee <_dtoa_r+0x456>
 800a5ec:	e2a3      	b.n	800ab36 <_dtoa_r+0x99e>
 800a5ee:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800a5f0:	9c11      	ldr	r4, [sp, #68]	; 0x44
 800a5f2:	9308      	str	r3, [sp, #32]
 800a5f4:	9409      	str	r4, [sp, #36]	; 0x24
 800a5f6:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800a5f8:	2b00      	cmp	r3, #0
 800a5fa:	da00      	bge.n	800a5fe <_dtoa_r+0x466>
 800a5fc:	e179      	b.n	800a8f2 <_dtoa_r+0x75a>
 800a5fe:	9a03      	ldr	r2, [sp, #12]
 800a600:	2a0e      	cmp	r2, #14
 800a602:	dd00      	ble.n	800a606 <_dtoa_r+0x46e>
 800a604:	e175      	b.n	800a8f2 <_dtoa_r+0x75a>
 800a606:	4ba0      	ldr	r3, [pc, #640]	; (800a888 <_dtoa_r+0x6f0>)
 800a608:	00d2      	lsls	r2, r2, #3
 800a60a:	189b      	adds	r3, r3, r2
 800a60c:	681e      	ldr	r6, [r3, #0]
 800a60e:	685f      	ldr	r7, [r3, #4]
 800a610:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 800a612:	2b00      	cmp	r3, #0
 800a614:	db00      	blt.n	800a618 <_dtoa_r+0x480>
 800a616:	e0e5      	b.n	800a7e4 <_dtoa_r+0x64c>
 800a618:	9b07      	ldr	r3, [sp, #28]
 800a61a:	2b00      	cmp	r3, #0
 800a61c:	dd00      	ble.n	800a620 <_dtoa_r+0x488>
 800a61e:	e0e1      	b.n	800a7e4 <_dtoa_r+0x64c>
 800a620:	d000      	beq.n	800a624 <_dtoa_r+0x48c>
 800a622:	e288      	b.n	800ab36 <_dtoa_r+0x99e>
 800a624:	2200      	movs	r2, #0
 800a626:	0030      	movs	r0, r6
 800a628:	0039      	movs	r1, r7
 800a62a:	4b9d      	ldr	r3, [pc, #628]	; (800a8a0 <_dtoa_r+0x708>)
 800a62c:	f7f6 ff80 	bl	8001530 <__aeabi_dmul>
 800a630:	9a08      	ldr	r2, [sp, #32]
 800a632:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a634:	f7f5 ff2c 	bl	8000490 <__aeabi_dcmpge>
 800a638:	9e07      	ldr	r6, [sp, #28]
 800a63a:	0037      	movs	r7, r6
 800a63c:	2800      	cmp	r0, #0
 800a63e:	d000      	beq.n	800a642 <_dtoa_r+0x4aa>
 800a640:	e25f      	b.n	800ab02 <_dtoa_r+0x96a>
 800a642:	9b06      	ldr	r3, [sp, #24]
 800a644:	9a06      	ldr	r2, [sp, #24]
 800a646:	3301      	adds	r3, #1
 800a648:	9308      	str	r3, [sp, #32]
 800a64a:	2331      	movs	r3, #49	; 0x31
 800a64c:	7013      	strb	r3, [r2, #0]
 800a64e:	9b03      	ldr	r3, [sp, #12]
 800a650:	3301      	adds	r3, #1
 800a652:	9303      	str	r3, [sp, #12]
 800a654:	e25a      	b.n	800ab0c <_dtoa_r+0x974>
 800a656:	423d      	tst	r5, r7
 800a658:	d005      	beq.n	800a666 <_dtoa_r+0x4ce>
 800a65a:	6832      	ldr	r2, [r6, #0]
 800a65c:	6873      	ldr	r3, [r6, #4]
 800a65e:	f7f6 ff67 	bl	8001530 <__aeabi_dmul>
 800a662:	003b      	movs	r3, r7
 800a664:	3401      	adds	r4, #1
 800a666:	106d      	asrs	r5, r5, #1
 800a668:	3608      	adds	r6, #8
 800a66a:	e75f      	b.n	800a52c <_dtoa_r+0x394>
 800a66c:	9b03      	ldr	r3, [sp, #12]
 800a66e:	930e      	str	r3, [sp, #56]	; 0x38
 800a670:	9b07      	ldr	r3, [sp, #28]
 800a672:	e783      	b.n	800a57c <_dtoa_r+0x3e4>
 800a674:	9a12      	ldr	r2, [sp, #72]	; 0x48
 800a676:	4b84      	ldr	r3, [pc, #528]	; (800a888 <_dtoa_r+0x6f0>)
 800a678:	3a01      	subs	r2, #1
 800a67a:	00d2      	lsls	r2, r2, #3
 800a67c:	990f      	ldr	r1, [sp, #60]	; 0x3c
 800a67e:	189b      	adds	r3, r3, r2
 800a680:	9c08      	ldr	r4, [sp, #32]
 800a682:	9d09      	ldr	r5, [sp, #36]	; 0x24
 800a684:	681a      	ldr	r2, [r3, #0]
 800a686:	685b      	ldr	r3, [r3, #4]
 800a688:	2900      	cmp	r1, #0
 800a68a:	d051      	beq.n	800a730 <_dtoa_r+0x598>
 800a68c:	2000      	movs	r0, #0
 800a68e:	4986      	ldr	r1, [pc, #536]	; (800a8a8 <_dtoa_r+0x710>)
 800a690:	f7f6 fb54 	bl	8000d3c <__aeabi_ddiv>
 800a694:	0022      	movs	r2, r4
 800a696:	002b      	movs	r3, r5
 800a698:	f7f7 fa0c 	bl	8001ab4 <__aeabi_dsub>
 800a69c:	9a06      	ldr	r2, [sp, #24]
 800a69e:	0004      	movs	r4, r0
 800a6a0:	4694      	mov	ip, r2
 800a6a2:	000d      	movs	r5, r1
 800a6a4:	9b06      	ldr	r3, [sp, #24]
 800a6a6:	9314      	str	r3, [sp, #80]	; 0x50
 800a6a8:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800a6aa:	4463      	add	r3, ip
 800a6ac:	9318      	str	r3, [sp, #96]	; 0x60
 800a6ae:	0039      	movs	r1, r7
 800a6b0:	0030      	movs	r0, r6
 800a6b2:	f7f7 fd9f 	bl	80021f4 <__aeabi_d2iz>
 800a6b6:	9012      	str	r0, [sp, #72]	; 0x48
 800a6b8:	f7f7 fdd2 	bl	8002260 <__aeabi_i2d>
 800a6bc:	0002      	movs	r2, r0
 800a6be:	000b      	movs	r3, r1
 800a6c0:	0030      	movs	r0, r6
 800a6c2:	0039      	movs	r1, r7
 800a6c4:	f7f7 f9f6 	bl	8001ab4 <__aeabi_dsub>
 800a6c8:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800a6ca:	9a14      	ldr	r2, [sp, #80]	; 0x50
 800a6cc:	3301      	adds	r3, #1
 800a6ce:	9308      	str	r3, [sp, #32]
 800a6d0:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800a6d2:	0006      	movs	r6, r0
 800a6d4:	3330      	adds	r3, #48	; 0x30
 800a6d6:	7013      	strb	r3, [r2, #0]
 800a6d8:	0022      	movs	r2, r4
 800a6da:	002b      	movs	r3, r5
 800a6dc:	000f      	movs	r7, r1
 800a6de:	f7f5 feb9 	bl	8000454 <__aeabi_dcmplt>
 800a6e2:	2800      	cmp	r0, #0
 800a6e4:	d174      	bne.n	800a7d0 <_dtoa_r+0x638>
 800a6e6:	0032      	movs	r2, r6
 800a6e8:	003b      	movs	r3, r7
 800a6ea:	2000      	movs	r0, #0
 800a6ec:	4968      	ldr	r1, [pc, #416]	; (800a890 <_dtoa_r+0x6f8>)
 800a6ee:	f7f7 f9e1 	bl	8001ab4 <__aeabi_dsub>
 800a6f2:	0022      	movs	r2, r4
 800a6f4:	002b      	movs	r3, r5
 800a6f6:	f7f5 fead 	bl	8000454 <__aeabi_dcmplt>
 800a6fa:	2800      	cmp	r0, #0
 800a6fc:	d000      	beq.n	800a700 <_dtoa_r+0x568>
 800a6fe:	e0d7      	b.n	800a8b0 <_dtoa_r+0x718>
 800a700:	9b18      	ldr	r3, [sp, #96]	; 0x60
 800a702:	9a08      	ldr	r2, [sp, #32]
 800a704:	4293      	cmp	r3, r2
 800a706:	d100      	bne.n	800a70a <_dtoa_r+0x572>
 800a708:	e771      	b.n	800a5ee <_dtoa_r+0x456>
 800a70a:	2200      	movs	r2, #0
 800a70c:	0020      	movs	r0, r4
 800a70e:	0029      	movs	r1, r5
 800a710:	4b60      	ldr	r3, [pc, #384]	; (800a894 <_dtoa_r+0x6fc>)
 800a712:	f7f6 ff0d 	bl	8001530 <__aeabi_dmul>
 800a716:	4b5f      	ldr	r3, [pc, #380]	; (800a894 <_dtoa_r+0x6fc>)
 800a718:	0004      	movs	r4, r0
 800a71a:	000d      	movs	r5, r1
 800a71c:	0030      	movs	r0, r6
 800a71e:	0039      	movs	r1, r7
 800a720:	2200      	movs	r2, #0
 800a722:	f7f6 ff05 	bl	8001530 <__aeabi_dmul>
 800a726:	9b08      	ldr	r3, [sp, #32]
 800a728:	0006      	movs	r6, r0
 800a72a:	000f      	movs	r7, r1
 800a72c:	9314      	str	r3, [sp, #80]	; 0x50
 800a72e:	e7be      	b.n	800a6ae <_dtoa_r+0x516>
 800a730:	0020      	movs	r0, r4
 800a732:	0029      	movs	r1, r5
 800a734:	f7f6 fefc 	bl	8001530 <__aeabi_dmul>
 800a738:	9a06      	ldr	r2, [sp, #24]
 800a73a:	9b06      	ldr	r3, [sp, #24]
 800a73c:	4694      	mov	ip, r2
 800a73e:	9308      	str	r3, [sp, #32]
 800a740:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800a742:	9014      	str	r0, [sp, #80]	; 0x50
 800a744:	9115      	str	r1, [sp, #84]	; 0x54
 800a746:	4463      	add	r3, ip
 800a748:	9319      	str	r3, [sp, #100]	; 0x64
 800a74a:	0030      	movs	r0, r6
 800a74c:	0039      	movs	r1, r7
 800a74e:	f7f7 fd51 	bl	80021f4 <__aeabi_d2iz>
 800a752:	9018      	str	r0, [sp, #96]	; 0x60
 800a754:	f7f7 fd84 	bl	8002260 <__aeabi_i2d>
 800a758:	0002      	movs	r2, r0
 800a75a:	000b      	movs	r3, r1
 800a75c:	0030      	movs	r0, r6
 800a75e:	0039      	movs	r1, r7
 800a760:	f7f7 f9a8 	bl	8001ab4 <__aeabi_dsub>
 800a764:	9e18      	ldr	r6, [sp, #96]	; 0x60
 800a766:	9b08      	ldr	r3, [sp, #32]
 800a768:	3630      	adds	r6, #48	; 0x30
 800a76a:	9a19      	ldr	r2, [sp, #100]	; 0x64
 800a76c:	701e      	strb	r6, [r3, #0]
 800a76e:	3301      	adds	r3, #1
 800a770:	0004      	movs	r4, r0
 800a772:	000d      	movs	r5, r1
 800a774:	9308      	str	r3, [sp, #32]
 800a776:	4293      	cmp	r3, r2
 800a778:	d12d      	bne.n	800a7d6 <_dtoa_r+0x63e>
 800a77a:	9814      	ldr	r0, [sp, #80]	; 0x50
 800a77c:	9915      	ldr	r1, [sp, #84]	; 0x54
 800a77e:	9a06      	ldr	r2, [sp, #24]
 800a780:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800a782:	4694      	mov	ip, r2
 800a784:	4463      	add	r3, ip
 800a786:	2200      	movs	r2, #0
 800a788:	9308      	str	r3, [sp, #32]
 800a78a:	4b47      	ldr	r3, [pc, #284]	; (800a8a8 <_dtoa_r+0x710>)
 800a78c:	f7f5 ff76 	bl	800067c <__aeabi_dadd>
 800a790:	0002      	movs	r2, r0
 800a792:	000b      	movs	r3, r1
 800a794:	0020      	movs	r0, r4
 800a796:	0029      	movs	r1, r5
 800a798:	f7f5 fe70 	bl	800047c <__aeabi_dcmpgt>
 800a79c:	2800      	cmp	r0, #0
 800a79e:	d000      	beq.n	800a7a2 <_dtoa_r+0x60a>
 800a7a0:	e086      	b.n	800a8b0 <_dtoa_r+0x718>
 800a7a2:	9a14      	ldr	r2, [sp, #80]	; 0x50
 800a7a4:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800a7a6:	2000      	movs	r0, #0
 800a7a8:	493f      	ldr	r1, [pc, #252]	; (800a8a8 <_dtoa_r+0x710>)
 800a7aa:	f7f7 f983 	bl	8001ab4 <__aeabi_dsub>
 800a7ae:	0002      	movs	r2, r0
 800a7b0:	000b      	movs	r3, r1
 800a7b2:	0020      	movs	r0, r4
 800a7b4:	0029      	movs	r1, r5
 800a7b6:	f7f5 fe4d 	bl	8000454 <__aeabi_dcmplt>
 800a7ba:	2800      	cmp	r0, #0
 800a7bc:	d100      	bne.n	800a7c0 <_dtoa_r+0x628>
 800a7be:	e716      	b.n	800a5ee <_dtoa_r+0x456>
 800a7c0:	9b08      	ldr	r3, [sp, #32]
 800a7c2:	001a      	movs	r2, r3
 800a7c4:	3a01      	subs	r2, #1
 800a7c6:	9208      	str	r2, [sp, #32]
 800a7c8:	7812      	ldrb	r2, [r2, #0]
 800a7ca:	2a30      	cmp	r2, #48	; 0x30
 800a7cc:	d0f8      	beq.n	800a7c0 <_dtoa_r+0x628>
 800a7ce:	9308      	str	r3, [sp, #32]
 800a7d0:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800a7d2:	9303      	str	r3, [sp, #12]
 800a7d4:	e046      	b.n	800a864 <_dtoa_r+0x6cc>
 800a7d6:	2200      	movs	r2, #0
 800a7d8:	4b2e      	ldr	r3, [pc, #184]	; (800a894 <_dtoa_r+0x6fc>)
 800a7da:	f7f6 fea9 	bl	8001530 <__aeabi_dmul>
 800a7de:	0006      	movs	r6, r0
 800a7e0:	000f      	movs	r7, r1
 800a7e2:	e7b2      	b.n	800a74a <_dtoa_r+0x5b2>
 800a7e4:	9b06      	ldr	r3, [sp, #24]
 800a7e6:	9a06      	ldr	r2, [sp, #24]
 800a7e8:	930a      	str	r3, [sp, #40]	; 0x28
 800a7ea:	9b07      	ldr	r3, [sp, #28]
 800a7ec:	9c08      	ldr	r4, [sp, #32]
 800a7ee:	9d09      	ldr	r5, [sp, #36]	; 0x24
 800a7f0:	3b01      	subs	r3, #1
 800a7f2:	189b      	adds	r3, r3, r2
 800a7f4:	930b      	str	r3, [sp, #44]	; 0x2c
 800a7f6:	0032      	movs	r2, r6
 800a7f8:	003b      	movs	r3, r7
 800a7fa:	0020      	movs	r0, r4
 800a7fc:	0029      	movs	r1, r5
 800a7fe:	f7f6 fa9d 	bl	8000d3c <__aeabi_ddiv>
 800a802:	f7f7 fcf7 	bl	80021f4 <__aeabi_d2iz>
 800a806:	9007      	str	r0, [sp, #28]
 800a808:	f7f7 fd2a 	bl	8002260 <__aeabi_i2d>
 800a80c:	0032      	movs	r2, r6
 800a80e:	003b      	movs	r3, r7
 800a810:	f7f6 fe8e 	bl	8001530 <__aeabi_dmul>
 800a814:	0002      	movs	r2, r0
 800a816:	000b      	movs	r3, r1
 800a818:	0020      	movs	r0, r4
 800a81a:	0029      	movs	r1, r5
 800a81c:	f7f7 f94a 	bl	8001ab4 <__aeabi_dsub>
 800a820:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800a822:	001a      	movs	r2, r3
 800a824:	3201      	adds	r2, #1
 800a826:	920a      	str	r2, [sp, #40]	; 0x28
 800a828:	9208      	str	r2, [sp, #32]
 800a82a:	9a07      	ldr	r2, [sp, #28]
 800a82c:	3230      	adds	r2, #48	; 0x30
 800a82e:	701a      	strb	r2, [r3, #0]
 800a830:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800a832:	429a      	cmp	r2, r3
 800a834:	d14f      	bne.n	800a8d6 <_dtoa_r+0x73e>
 800a836:	0002      	movs	r2, r0
 800a838:	000b      	movs	r3, r1
 800a83a:	f7f5 ff1f 	bl	800067c <__aeabi_dadd>
 800a83e:	0032      	movs	r2, r6
 800a840:	003b      	movs	r3, r7
 800a842:	0004      	movs	r4, r0
 800a844:	000d      	movs	r5, r1
 800a846:	f7f5 fe19 	bl	800047c <__aeabi_dcmpgt>
 800a84a:	2800      	cmp	r0, #0
 800a84c:	d12e      	bne.n	800a8ac <_dtoa_r+0x714>
 800a84e:	0032      	movs	r2, r6
 800a850:	003b      	movs	r3, r7
 800a852:	0020      	movs	r0, r4
 800a854:	0029      	movs	r1, r5
 800a856:	f7f5 fdf7 	bl	8000448 <__aeabi_dcmpeq>
 800a85a:	2800      	cmp	r0, #0
 800a85c:	d002      	beq.n	800a864 <_dtoa_r+0x6cc>
 800a85e:	9b07      	ldr	r3, [sp, #28]
 800a860:	07de      	lsls	r6, r3, #31
 800a862:	d423      	bmi.n	800a8ac <_dtoa_r+0x714>
 800a864:	9905      	ldr	r1, [sp, #20]
 800a866:	9804      	ldr	r0, [sp, #16]
 800a868:	f7fd fc46 	bl	80080f8 <_Bfree>
 800a86c:	2300      	movs	r3, #0
 800a86e:	9a08      	ldr	r2, [sp, #32]
 800a870:	7013      	strb	r3, [r2, #0]
 800a872:	9b03      	ldr	r3, [sp, #12]
 800a874:	9a24      	ldr	r2, [sp, #144]	; 0x90
 800a876:	3301      	adds	r3, #1
 800a878:	6013      	str	r3, [r2, #0]
 800a87a:	9b26      	ldr	r3, [sp, #152]	; 0x98
 800a87c:	2b00      	cmp	r3, #0
 800a87e:	d100      	bne.n	800a882 <_dtoa_r+0x6ea>
 800a880:	e4bd      	b.n	800a1fe <_dtoa_r+0x66>
 800a882:	9a08      	ldr	r2, [sp, #32]
 800a884:	601a      	str	r2, [r3, #0]
 800a886:	e4ba      	b.n	800a1fe <_dtoa_r+0x66>
 800a888:	0800dd80 	.word	0x0800dd80
 800a88c:	0800dd58 	.word	0x0800dd58
 800a890:	3ff00000 	.word	0x3ff00000
 800a894:	40240000 	.word	0x40240000
 800a898:	401c0000 	.word	0x401c0000
 800a89c:	fcc00000 	.word	0xfcc00000
 800a8a0:	40140000 	.word	0x40140000
 800a8a4:	7cc00000 	.word	0x7cc00000
 800a8a8:	3fe00000 	.word	0x3fe00000
 800a8ac:	9b03      	ldr	r3, [sp, #12]
 800a8ae:	930e      	str	r3, [sp, #56]	; 0x38
 800a8b0:	9b08      	ldr	r3, [sp, #32]
 800a8b2:	9308      	str	r3, [sp, #32]
 800a8b4:	3b01      	subs	r3, #1
 800a8b6:	781a      	ldrb	r2, [r3, #0]
 800a8b8:	2a39      	cmp	r2, #57	; 0x39
 800a8ba:	d108      	bne.n	800a8ce <_dtoa_r+0x736>
 800a8bc:	9a06      	ldr	r2, [sp, #24]
 800a8be:	429a      	cmp	r2, r3
 800a8c0:	d1f7      	bne.n	800a8b2 <_dtoa_r+0x71a>
 800a8c2:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800a8c4:	9906      	ldr	r1, [sp, #24]
 800a8c6:	3201      	adds	r2, #1
 800a8c8:	920e      	str	r2, [sp, #56]	; 0x38
 800a8ca:	2230      	movs	r2, #48	; 0x30
 800a8cc:	700a      	strb	r2, [r1, #0]
 800a8ce:	781a      	ldrb	r2, [r3, #0]
 800a8d0:	3201      	adds	r2, #1
 800a8d2:	701a      	strb	r2, [r3, #0]
 800a8d4:	e77c      	b.n	800a7d0 <_dtoa_r+0x638>
 800a8d6:	2200      	movs	r2, #0
 800a8d8:	4ba9      	ldr	r3, [pc, #676]	; (800ab80 <_dtoa_r+0x9e8>)
 800a8da:	f7f6 fe29 	bl	8001530 <__aeabi_dmul>
 800a8de:	2200      	movs	r2, #0
 800a8e0:	2300      	movs	r3, #0
 800a8e2:	0004      	movs	r4, r0
 800a8e4:	000d      	movs	r5, r1
 800a8e6:	f7f5 fdaf 	bl	8000448 <__aeabi_dcmpeq>
 800a8ea:	2800      	cmp	r0, #0
 800a8ec:	d100      	bne.n	800a8f0 <_dtoa_r+0x758>
 800a8ee:	e782      	b.n	800a7f6 <_dtoa_r+0x65e>
 800a8f0:	e7b8      	b.n	800a864 <_dtoa_r+0x6cc>
 800a8f2:	9f0f      	ldr	r7, [sp, #60]	; 0x3c
 800a8f4:	9d0d      	ldr	r5, [sp, #52]	; 0x34
 800a8f6:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 800a8f8:	2f00      	cmp	r7, #0
 800a8fa:	d012      	beq.n	800a922 <_dtoa_r+0x78a>
 800a8fc:	9a22      	ldr	r2, [sp, #136]	; 0x88
 800a8fe:	2a01      	cmp	r2, #1
 800a900:	dc6e      	bgt.n	800a9e0 <_dtoa_r+0x848>
 800a902:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 800a904:	2a00      	cmp	r2, #0
 800a906:	d065      	beq.n	800a9d4 <_dtoa_r+0x83c>
 800a908:	4a9e      	ldr	r2, [pc, #632]	; (800ab84 <_dtoa_r+0x9ec>)
 800a90a:	189b      	adds	r3, r3, r2
 800a90c:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800a90e:	2101      	movs	r1, #1
 800a910:	18d2      	adds	r2, r2, r3
 800a912:	920a      	str	r2, [sp, #40]	; 0x28
 800a914:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800a916:	9804      	ldr	r0, [sp, #16]
 800a918:	18d3      	adds	r3, r2, r3
 800a91a:	930c      	str	r3, [sp, #48]	; 0x30
 800a91c:	f7fd fc82 	bl	8008224 <__i2b>
 800a920:	0007      	movs	r7, r0
 800a922:	2c00      	cmp	r4, #0
 800a924:	d00e      	beq.n	800a944 <_dtoa_r+0x7ac>
 800a926:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800a928:	2b00      	cmp	r3, #0
 800a92a:	dd0b      	ble.n	800a944 <_dtoa_r+0x7ac>
 800a92c:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800a92e:	0023      	movs	r3, r4
 800a930:	4294      	cmp	r4, r2
 800a932:	dd00      	ble.n	800a936 <_dtoa_r+0x79e>
 800a934:	0013      	movs	r3, r2
 800a936:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800a938:	1ae4      	subs	r4, r4, r3
 800a93a:	1ad2      	subs	r2, r2, r3
 800a93c:	920a      	str	r2, [sp, #40]	; 0x28
 800a93e:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800a940:	1ad3      	subs	r3, r2, r3
 800a942:	930c      	str	r3, [sp, #48]	; 0x30
 800a944:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800a946:	2b00      	cmp	r3, #0
 800a948:	d01e      	beq.n	800a988 <_dtoa_r+0x7f0>
 800a94a:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800a94c:	2b00      	cmp	r3, #0
 800a94e:	d05c      	beq.n	800aa0a <_dtoa_r+0x872>
 800a950:	2d00      	cmp	r5, #0
 800a952:	dd10      	ble.n	800a976 <_dtoa_r+0x7de>
 800a954:	0039      	movs	r1, r7
 800a956:	002a      	movs	r2, r5
 800a958:	9804      	ldr	r0, [sp, #16]
 800a95a:	f7fd fd2b 	bl	80083b4 <__pow5mult>
 800a95e:	9a05      	ldr	r2, [sp, #20]
 800a960:	0001      	movs	r1, r0
 800a962:	0007      	movs	r7, r0
 800a964:	9804      	ldr	r0, [sp, #16]
 800a966:	f7fd fc75 	bl	8008254 <__multiply>
 800a96a:	0006      	movs	r6, r0
 800a96c:	9905      	ldr	r1, [sp, #20]
 800a96e:	9804      	ldr	r0, [sp, #16]
 800a970:	f7fd fbc2 	bl	80080f8 <_Bfree>
 800a974:	9605      	str	r6, [sp, #20]
 800a976:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800a978:	1b5a      	subs	r2, r3, r5
 800a97a:	42ab      	cmp	r3, r5
 800a97c:	d004      	beq.n	800a988 <_dtoa_r+0x7f0>
 800a97e:	9905      	ldr	r1, [sp, #20]
 800a980:	9804      	ldr	r0, [sp, #16]
 800a982:	f7fd fd17 	bl	80083b4 <__pow5mult>
 800a986:	9005      	str	r0, [sp, #20]
 800a988:	2101      	movs	r1, #1
 800a98a:	9804      	ldr	r0, [sp, #16]
 800a98c:	f7fd fc4a 	bl	8008224 <__i2b>
 800a990:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800a992:	0006      	movs	r6, r0
 800a994:	2b00      	cmp	r3, #0
 800a996:	dd3a      	ble.n	800aa0e <_dtoa_r+0x876>
 800a998:	001a      	movs	r2, r3
 800a99a:	0001      	movs	r1, r0
 800a99c:	9804      	ldr	r0, [sp, #16]
 800a99e:	f7fd fd09 	bl	80083b4 <__pow5mult>
 800a9a2:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800a9a4:	0006      	movs	r6, r0
 800a9a6:	2500      	movs	r5, #0
 800a9a8:	2b01      	cmp	r3, #1
 800a9aa:	dc38      	bgt.n	800aa1e <_dtoa_r+0x886>
 800a9ac:	2500      	movs	r5, #0
 800a9ae:	9b08      	ldr	r3, [sp, #32]
 800a9b0:	42ab      	cmp	r3, r5
 800a9b2:	d130      	bne.n	800aa16 <_dtoa_r+0x87e>
 800a9b4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a9b6:	031b      	lsls	r3, r3, #12
 800a9b8:	42ab      	cmp	r3, r5
 800a9ba:	d12c      	bne.n	800aa16 <_dtoa_r+0x87e>
 800a9bc:	4b72      	ldr	r3, [pc, #456]	; (800ab88 <_dtoa_r+0x9f0>)
 800a9be:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800a9c0:	4213      	tst	r3, r2
 800a9c2:	d028      	beq.n	800aa16 <_dtoa_r+0x87e>
 800a9c4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800a9c6:	3501      	adds	r5, #1
 800a9c8:	3301      	adds	r3, #1
 800a9ca:	930a      	str	r3, [sp, #40]	; 0x28
 800a9cc:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800a9ce:	3301      	adds	r3, #1
 800a9d0:	930c      	str	r3, [sp, #48]	; 0x30
 800a9d2:	e020      	b.n	800aa16 <_dtoa_r+0x87e>
 800a9d4:	2336      	movs	r3, #54	; 0x36
 800a9d6:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 800a9d8:	9d0d      	ldr	r5, [sp, #52]	; 0x34
 800a9da:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 800a9dc:	1a9b      	subs	r3, r3, r2
 800a9de:	e795      	b.n	800a90c <_dtoa_r+0x774>
 800a9e0:	9b07      	ldr	r3, [sp, #28]
 800a9e2:	1e5d      	subs	r5, r3, #1
 800a9e4:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800a9e6:	42ab      	cmp	r3, r5
 800a9e8:	db07      	blt.n	800a9fa <_dtoa_r+0x862>
 800a9ea:	1b5d      	subs	r5, r3, r5
 800a9ec:	9b07      	ldr	r3, [sp, #28]
 800a9ee:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 800a9f0:	2b00      	cmp	r3, #0
 800a9f2:	da8b      	bge.n	800a90c <_dtoa_r+0x774>
 800a9f4:	1ae4      	subs	r4, r4, r3
 800a9f6:	2300      	movs	r3, #0
 800a9f8:	e788      	b.n	800a90c <_dtoa_r+0x774>
 800a9fa:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800a9fc:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 800a9fe:	1aeb      	subs	r3, r5, r3
 800aa00:	18d3      	adds	r3, r2, r3
 800aa02:	950d      	str	r5, [sp, #52]	; 0x34
 800aa04:	9313      	str	r3, [sp, #76]	; 0x4c
 800aa06:	2500      	movs	r5, #0
 800aa08:	e7f0      	b.n	800a9ec <_dtoa_r+0x854>
 800aa0a:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800aa0c:	e7b7      	b.n	800a97e <_dtoa_r+0x7e6>
 800aa0e:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800aa10:	2500      	movs	r5, #0
 800aa12:	2b01      	cmp	r3, #1
 800aa14:	ddca      	ble.n	800a9ac <_dtoa_r+0x814>
 800aa16:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800aa18:	2001      	movs	r0, #1
 800aa1a:	2b00      	cmp	r3, #0
 800aa1c:	d008      	beq.n	800aa30 <_dtoa_r+0x898>
 800aa1e:	6933      	ldr	r3, [r6, #16]
 800aa20:	3303      	adds	r3, #3
 800aa22:	009b      	lsls	r3, r3, #2
 800aa24:	18f3      	adds	r3, r6, r3
 800aa26:	6858      	ldr	r0, [r3, #4]
 800aa28:	f7fd fbb4 	bl	8008194 <__hi0bits>
 800aa2c:	2320      	movs	r3, #32
 800aa2e:	1a18      	subs	r0, r3, r0
 800aa30:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800aa32:	1818      	adds	r0, r3, r0
 800aa34:	0002      	movs	r2, r0
 800aa36:	231f      	movs	r3, #31
 800aa38:	401a      	ands	r2, r3
 800aa3a:	4218      	tst	r0, r3
 800aa3c:	d047      	beq.n	800aace <_dtoa_r+0x936>
 800aa3e:	3301      	adds	r3, #1
 800aa40:	1a9b      	subs	r3, r3, r2
 800aa42:	2b04      	cmp	r3, #4
 800aa44:	dd3f      	ble.n	800aac6 <_dtoa_r+0x92e>
 800aa46:	231c      	movs	r3, #28
 800aa48:	1a9b      	subs	r3, r3, r2
 800aa4a:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800aa4c:	18e4      	adds	r4, r4, r3
 800aa4e:	18d2      	adds	r2, r2, r3
 800aa50:	920a      	str	r2, [sp, #40]	; 0x28
 800aa52:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800aa54:	18d3      	adds	r3, r2, r3
 800aa56:	930c      	str	r3, [sp, #48]	; 0x30
 800aa58:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800aa5a:	2b00      	cmp	r3, #0
 800aa5c:	dd05      	ble.n	800aa6a <_dtoa_r+0x8d2>
 800aa5e:	001a      	movs	r2, r3
 800aa60:	9905      	ldr	r1, [sp, #20]
 800aa62:	9804      	ldr	r0, [sp, #16]
 800aa64:	f7fd fce8 	bl	8008438 <__lshift>
 800aa68:	9005      	str	r0, [sp, #20]
 800aa6a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800aa6c:	2b00      	cmp	r3, #0
 800aa6e:	dd05      	ble.n	800aa7c <_dtoa_r+0x8e4>
 800aa70:	0031      	movs	r1, r6
 800aa72:	001a      	movs	r2, r3
 800aa74:	9804      	ldr	r0, [sp, #16]
 800aa76:	f7fd fcdf 	bl	8008438 <__lshift>
 800aa7a:	0006      	movs	r6, r0
 800aa7c:	9b16      	ldr	r3, [sp, #88]	; 0x58
 800aa7e:	2b00      	cmp	r3, #0
 800aa80:	d027      	beq.n	800aad2 <_dtoa_r+0x93a>
 800aa82:	0031      	movs	r1, r6
 800aa84:	9805      	ldr	r0, [sp, #20]
 800aa86:	f7fd fd45 	bl	8008514 <__mcmp>
 800aa8a:	2800      	cmp	r0, #0
 800aa8c:	da21      	bge.n	800aad2 <_dtoa_r+0x93a>
 800aa8e:	9b03      	ldr	r3, [sp, #12]
 800aa90:	220a      	movs	r2, #10
 800aa92:	3b01      	subs	r3, #1
 800aa94:	9303      	str	r3, [sp, #12]
 800aa96:	9905      	ldr	r1, [sp, #20]
 800aa98:	2300      	movs	r3, #0
 800aa9a:	9804      	ldr	r0, [sp, #16]
 800aa9c:	f7fd fb36 	bl	800810c <__multadd>
 800aaa0:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800aaa2:	9005      	str	r0, [sp, #20]
 800aaa4:	2b00      	cmp	r3, #0
 800aaa6:	d100      	bne.n	800aaaa <_dtoa_r+0x912>
 800aaa8:	e15d      	b.n	800ad66 <_dtoa_r+0xbce>
 800aaaa:	2300      	movs	r3, #0
 800aaac:	0039      	movs	r1, r7
 800aaae:	220a      	movs	r2, #10
 800aab0:	9804      	ldr	r0, [sp, #16]
 800aab2:	f7fd fb2b 	bl	800810c <__multadd>
 800aab6:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800aab8:	0007      	movs	r7, r0
 800aaba:	2b00      	cmp	r3, #0
 800aabc:	dc49      	bgt.n	800ab52 <_dtoa_r+0x9ba>
 800aabe:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800aac0:	2b02      	cmp	r3, #2
 800aac2:	dc0e      	bgt.n	800aae2 <_dtoa_r+0x94a>
 800aac4:	e045      	b.n	800ab52 <_dtoa_r+0x9ba>
 800aac6:	2b04      	cmp	r3, #4
 800aac8:	d0c6      	beq.n	800aa58 <_dtoa_r+0x8c0>
 800aaca:	331c      	adds	r3, #28
 800aacc:	e7bd      	b.n	800aa4a <_dtoa_r+0x8b2>
 800aace:	0013      	movs	r3, r2
 800aad0:	e7fb      	b.n	800aaca <_dtoa_r+0x932>
 800aad2:	9b07      	ldr	r3, [sp, #28]
 800aad4:	2b00      	cmp	r3, #0
 800aad6:	dc36      	bgt.n	800ab46 <_dtoa_r+0x9ae>
 800aad8:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800aada:	2b02      	cmp	r3, #2
 800aadc:	dd33      	ble.n	800ab46 <_dtoa_r+0x9ae>
 800aade:	9b07      	ldr	r3, [sp, #28]
 800aae0:	930b      	str	r3, [sp, #44]	; 0x2c
 800aae2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800aae4:	2b00      	cmp	r3, #0
 800aae6:	d10c      	bne.n	800ab02 <_dtoa_r+0x96a>
 800aae8:	0031      	movs	r1, r6
 800aaea:	2205      	movs	r2, #5
 800aaec:	9804      	ldr	r0, [sp, #16]
 800aaee:	f7fd fb0d 	bl	800810c <__multadd>
 800aaf2:	0006      	movs	r6, r0
 800aaf4:	0001      	movs	r1, r0
 800aaf6:	9805      	ldr	r0, [sp, #20]
 800aaf8:	f7fd fd0c 	bl	8008514 <__mcmp>
 800aafc:	2800      	cmp	r0, #0
 800aafe:	dd00      	ble.n	800ab02 <_dtoa_r+0x96a>
 800ab00:	e59f      	b.n	800a642 <_dtoa_r+0x4aa>
 800ab02:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 800ab04:	43db      	mvns	r3, r3
 800ab06:	9303      	str	r3, [sp, #12]
 800ab08:	9b06      	ldr	r3, [sp, #24]
 800ab0a:	9308      	str	r3, [sp, #32]
 800ab0c:	2500      	movs	r5, #0
 800ab0e:	0031      	movs	r1, r6
 800ab10:	9804      	ldr	r0, [sp, #16]
 800ab12:	f7fd faf1 	bl	80080f8 <_Bfree>
 800ab16:	2f00      	cmp	r7, #0
 800ab18:	d100      	bne.n	800ab1c <_dtoa_r+0x984>
 800ab1a:	e6a3      	b.n	800a864 <_dtoa_r+0x6cc>
 800ab1c:	2d00      	cmp	r5, #0
 800ab1e:	d005      	beq.n	800ab2c <_dtoa_r+0x994>
 800ab20:	42bd      	cmp	r5, r7
 800ab22:	d003      	beq.n	800ab2c <_dtoa_r+0x994>
 800ab24:	0029      	movs	r1, r5
 800ab26:	9804      	ldr	r0, [sp, #16]
 800ab28:	f7fd fae6 	bl	80080f8 <_Bfree>
 800ab2c:	0039      	movs	r1, r7
 800ab2e:	9804      	ldr	r0, [sp, #16]
 800ab30:	f7fd fae2 	bl	80080f8 <_Bfree>
 800ab34:	e696      	b.n	800a864 <_dtoa_r+0x6cc>
 800ab36:	2600      	movs	r6, #0
 800ab38:	0037      	movs	r7, r6
 800ab3a:	e7e2      	b.n	800ab02 <_dtoa_r+0x96a>
 800ab3c:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800ab3e:	9e12      	ldr	r6, [sp, #72]	; 0x48
 800ab40:	9303      	str	r3, [sp, #12]
 800ab42:	0037      	movs	r7, r6
 800ab44:	e57d      	b.n	800a642 <_dtoa_r+0x4aa>
 800ab46:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800ab48:	2b00      	cmp	r3, #0
 800ab4a:	d100      	bne.n	800ab4e <_dtoa_r+0x9b6>
 800ab4c:	e0c3      	b.n	800acd6 <_dtoa_r+0xb3e>
 800ab4e:	9b07      	ldr	r3, [sp, #28]
 800ab50:	930b      	str	r3, [sp, #44]	; 0x2c
 800ab52:	2c00      	cmp	r4, #0
 800ab54:	dd05      	ble.n	800ab62 <_dtoa_r+0x9ca>
 800ab56:	0039      	movs	r1, r7
 800ab58:	0022      	movs	r2, r4
 800ab5a:	9804      	ldr	r0, [sp, #16]
 800ab5c:	f7fd fc6c 	bl	8008438 <__lshift>
 800ab60:	0007      	movs	r7, r0
 800ab62:	0038      	movs	r0, r7
 800ab64:	2d00      	cmp	r5, #0
 800ab66:	d024      	beq.n	800abb2 <_dtoa_r+0xa1a>
 800ab68:	6879      	ldr	r1, [r7, #4]
 800ab6a:	9804      	ldr	r0, [sp, #16]
 800ab6c:	f7fd fa9c 	bl	80080a8 <_Balloc>
 800ab70:	1e04      	subs	r4, r0, #0
 800ab72:	d111      	bne.n	800ab98 <_dtoa_r+0xa00>
 800ab74:	0022      	movs	r2, r4
 800ab76:	4b05      	ldr	r3, [pc, #20]	; (800ab8c <_dtoa_r+0x9f4>)
 800ab78:	4805      	ldr	r0, [pc, #20]	; (800ab90 <_dtoa_r+0x9f8>)
 800ab7a:	4906      	ldr	r1, [pc, #24]	; (800ab94 <_dtoa_r+0x9fc>)
 800ab7c:	e43c      	b.n	800a3f8 <_dtoa_r+0x260>
 800ab7e:	46c0      	nop			; (mov r8, r8)
 800ab80:	40240000 	.word	0x40240000
 800ab84:	00000433 	.word	0x00000433
 800ab88:	7ff00000 	.word	0x7ff00000
 800ab8c:	0800dce7 	.word	0x0800dce7
 800ab90:	0800def1 	.word	0x0800def1
 800ab94:	000002ef 	.word	0x000002ef
 800ab98:	0039      	movs	r1, r7
 800ab9a:	693a      	ldr	r2, [r7, #16]
 800ab9c:	310c      	adds	r1, #12
 800ab9e:	3202      	adds	r2, #2
 800aba0:	0092      	lsls	r2, r2, #2
 800aba2:	300c      	adds	r0, #12
 800aba4:	f7fc ff26 	bl	80079f4 <memcpy>
 800aba8:	2201      	movs	r2, #1
 800abaa:	0021      	movs	r1, r4
 800abac:	9804      	ldr	r0, [sp, #16]
 800abae:	f7fd fc43 	bl	8008438 <__lshift>
 800abb2:	9b06      	ldr	r3, [sp, #24]
 800abb4:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800abb6:	9307      	str	r3, [sp, #28]
 800abb8:	3b01      	subs	r3, #1
 800abba:	189b      	adds	r3, r3, r2
 800abbc:	2201      	movs	r2, #1
 800abbe:	003d      	movs	r5, r7
 800abc0:	0007      	movs	r7, r0
 800abc2:	930e      	str	r3, [sp, #56]	; 0x38
 800abc4:	9b08      	ldr	r3, [sp, #32]
 800abc6:	4013      	ands	r3, r2
 800abc8:	930d      	str	r3, [sp, #52]	; 0x34
 800abca:	0031      	movs	r1, r6
 800abcc:	9805      	ldr	r0, [sp, #20]
 800abce:	f7ff fa53 	bl	800a078 <quorem>
 800abd2:	0029      	movs	r1, r5
 800abd4:	0004      	movs	r4, r0
 800abd6:	900b      	str	r0, [sp, #44]	; 0x2c
 800abd8:	9805      	ldr	r0, [sp, #20]
 800abda:	f7fd fc9b 	bl	8008514 <__mcmp>
 800abde:	003a      	movs	r2, r7
 800abe0:	900c      	str	r0, [sp, #48]	; 0x30
 800abe2:	0031      	movs	r1, r6
 800abe4:	9804      	ldr	r0, [sp, #16]
 800abe6:	f7fd fcb1 	bl	800854c <__mdiff>
 800abea:	2201      	movs	r2, #1
 800abec:	68c3      	ldr	r3, [r0, #12]
 800abee:	3430      	adds	r4, #48	; 0x30
 800abf0:	9008      	str	r0, [sp, #32]
 800abf2:	920a      	str	r2, [sp, #40]	; 0x28
 800abf4:	2b00      	cmp	r3, #0
 800abf6:	d104      	bne.n	800ac02 <_dtoa_r+0xa6a>
 800abf8:	0001      	movs	r1, r0
 800abfa:	9805      	ldr	r0, [sp, #20]
 800abfc:	f7fd fc8a 	bl	8008514 <__mcmp>
 800ac00:	900a      	str	r0, [sp, #40]	; 0x28
 800ac02:	9908      	ldr	r1, [sp, #32]
 800ac04:	9804      	ldr	r0, [sp, #16]
 800ac06:	f7fd fa77 	bl	80080f8 <_Bfree>
 800ac0a:	9b07      	ldr	r3, [sp, #28]
 800ac0c:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800ac0e:	3301      	adds	r3, #1
 800ac10:	9308      	str	r3, [sp, #32]
 800ac12:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800ac14:	4313      	orrs	r3, r2
 800ac16:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800ac18:	4313      	orrs	r3, r2
 800ac1a:	d109      	bne.n	800ac30 <_dtoa_r+0xa98>
 800ac1c:	2c39      	cmp	r4, #57	; 0x39
 800ac1e:	d022      	beq.n	800ac66 <_dtoa_r+0xace>
 800ac20:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800ac22:	2b00      	cmp	r3, #0
 800ac24:	dd01      	ble.n	800ac2a <_dtoa_r+0xa92>
 800ac26:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
 800ac28:	3431      	adds	r4, #49	; 0x31
 800ac2a:	9b07      	ldr	r3, [sp, #28]
 800ac2c:	701c      	strb	r4, [r3, #0]
 800ac2e:	e76e      	b.n	800ab0e <_dtoa_r+0x976>
 800ac30:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800ac32:	2b00      	cmp	r3, #0
 800ac34:	db04      	blt.n	800ac40 <_dtoa_r+0xaa8>
 800ac36:	9a22      	ldr	r2, [sp, #136]	; 0x88
 800ac38:	4313      	orrs	r3, r2
 800ac3a:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800ac3c:	4313      	orrs	r3, r2
 800ac3e:	d11e      	bne.n	800ac7e <_dtoa_r+0xae6>
 800ac40:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800ac42:	2b00      	cmp	r3, #0
 800ac44:	ddf1      	ble.n	800ac2a <_dtoa_r+0xa92>
 800ac46:	9905      	ldr	r1, [sp, #20]
 800ac48:	2201      	movs	r2, #1
 800ac4a:	9804      	ldr	r0, [sp, #16]
 800ac4c:	f7fd fbf4 	bl	8008438 <__lshift>
 800ac50:	0031      	movs	r1, r6
 800ac52:	9005      	str	r0, [sp, #20]
 800ac54:	f7fd fc5e 	bl	8008514 <__mcmp>
 800ac58:	2800      	cmp	r0, #0
 800ac5a:	dc02      	bgt.n	800ac62 <_dtoa_r+0xaca>
 800ac5c:	d1e5      	bne.n	800ac2a <_dtoa_r+0xa92>
 800ac5e:	07e3      	lsls	r3, r4, #31
 800ac60:	d5e3      	bpl.n	800ac2a <_dtoa_r+0xa92>
 800ac62:	2c39      	cmp	r4, #57	; 0x39
 800ac64:	d1df      	bne.n	800ac26 <_dtoa_r+0xa8e>
 800ac66:	2339      	movs	r3, #57	; 0x39
 800ac68:	9a07      	ldr	r2, [sp, #28]
 800ac6a:	7013      	strb	r3, [r2, #0]
 800ac6c:	9b08      	ldr	r3, [sp, #32]
 800ac6e:	9308      	str	r3, [sp, #32]
 800ac70:	3b01      	subs	r3, #1
 800ac72:	781a      	ldrb	r2, [r3, #0]
 800ac74:	2a39      	cmp	r2, #57	; 0x39
 800ac76:	d063      	beq.n	800ad40 <_dtoa_r+0xba8>
 800ac78:	3201      	adds	r2, #1
 800ac7a:	701a      	strb	r2, [r3, #0]
 800ac7c:	e747      	b.n	800ab0e <_dtoa_r+0x976>
 800ac7e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800ac80:	2b00      	cmp	r3, #0
 800ac82:	dd03      	ble.n	800ac8c <_dtoa_r+0xaf4>
 800ac84:	2c39      	cmp	r4, #57	; 0x39
 800ac86:	d0ee      	beq.n	800ac66 <_dtoa_r+0xace>
 800ac88:	3401      	adds	r4, #1
 800ac8a:	e7ce      	b.n	800ac2a <_dtoa_r+0xa92>
 800ac8c:	9b07      	ldr	r3, [sp, #28]
 800ac8e:	9a07      	ldr	r2, [sp, #28]
 800ac90:	701c      	strb	r4, [r3, #0]
 800ac92:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800ac94:	4293      	cmp	r3, r2
 800ac96:	d03e      	beq.n	800ad16 <_dtoa_r+0xb7e>
 800ac98:	2300      	movs	r3, #0
 800ac9a:	220a      	movs	r2, #10
 800ac9c:	9905      	ldr	r1, [sp, #20]
 800ac9e:	9804      	ldr	r0, [sp, #16]
 800aca0:	f7fd fa34 	bl	800810c <__multadd>
 800aca4:	2300      	movs	r3, #0
 800aca6:	9005      	str	r0, [sp, #20]
 800aca8:	220a      	movs	r2, #10
 800acaa:	0029      	movs	r1, r5
 800acac:	9804      	ldr	r0, [sp, #16]
 800acae:	42bd      	cmp	r5, r7
 800acb0:	d106      	bne.n	800acc0 <_dtoa_r+0xb28>
 800acb2:	f7fd fa2b 	bl	800810c <__multadd>
 800acb6:	0005      	movs	r5, r0
 800acb8:	0007      	movs	r7, r0
 800acba:	9b08      	ldr	r3, [sp, #32]
 800acbc:	9307      	str	r3, [sp, #28]
 800acbe:	e784      	b.n	800abca <_dtoa_r+0xa32>
 800acc0:	f7fd fa24 	bl	800810c <__multadd>
 800acc4:	0039      	movs	r1, r7
 800acc6:	0005      	movs	r5, r0
 800acc8:	2300      	movs	r3, #0
 800acca:	220a      	movs	r2, #10
 800accc:	9804      	ldr	r0, [sp, #16]
 800acce:	f7fd fa1d 	bl	800810c <__multadd>
 800acd2:	0007      	movs	r7, r0
 800acd4:	e7f1      	b.n	800acba <_dtoa_r+0xb22>
 800acd6:	9b07      	ldr	r3, [sp, #28]
 800acd8:	930b      	str	r3, [sp, #44]	; 0x2c
 800acda:	2500      	movs	r5, #0
 800acdc:	0031      	movs	r1, r6
 800acde:	9805      	ldr	r0, [sp, #20]
 800ace0:	f7ff f9ca 	bl	800a078 <quorem>
 800ace4:	9b06      	ldr	r3, [sp, #24]
 800ace6:	3030      	adds	r0, #48	; 0x30
 800ace8:	5558      	strb	r0, [r3, r5]
 800acea:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800acec:	3501      	adds	r5, #1
 800acee:	0004      	movs	r4, r0
 800acf0:	42ab      	cmp	r3, r5
 800acf2:	dd07      	ble.n	800ad04 <_dtoa_r+0xb6c>
 800acf4:	2300      	movs	r3, #0
 800acf6:	220a      	movs	r2, #10
 800acf8:	9905      	ldr	r1, [sp, #20]
 800acfa:	9804      	ldr	r0, [sp, #16]
 800acfc:	f7fd fa06 	bl	800810c <__multadd>
 800ad00:	9005      	str	r0, [sp, #20]
 800ad02:	e7eb      	b.n	800acdc <_dtoa_r+0xb44>
 800ad04:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800ad06:	2301      	movs	r3, #1
 800ad08:	2a00      	cmp	r2, #0
 800ad0a:	dd00      	ble.n	800ad0e <_dtoa_r+0xb76>
 800ad0c:	0013      	movs	r3, r2
 800ad0e:	2500      	movs	r5, #0
 800ad10:	9a06      	ldr	r2, [sp, #24]
 800ad12:	18d3      	adds	r3, r2, r3
 800ad14:	9308      	str	r3, [sp, #32]
 800ad16:	9905      	ldr	r1, [sp, #20]
 800ad18:	2201      	movs	r2, #1
 800ad1a:	9804      	ldr	r0, [sp, #16]
 800ad1c:	f7fd fb8c 	bl	8008438 <__lshift>
 800ad20:	0031      	movs	r1, r6
 800ad22:	9005      	str	r0, [sp, #20]
 800ad24:	f7fd fbf6 	bl	8008514 <__mcmp>
 800ad28:	2800      	cmp	r0, #0
 800ad2a:	dc9f      	bgt.n	800ac6c <_dtoa_r+0xad4>
 800ad2c:	d101      	bne.n	800ad32 <_dtoa_r+0xb9a>
 800ad2e:	07e4      	lsls	r4, r4, #31
 800ad30:	d49c      	bmi.n	800ac6c <_dtoa_r+0xad4>
 800ad32:	9b08      	ldr	r3, [sp, #32]
 800ad34:	9308      	str	r3, [sp, #32]
 800ad36:	3b01      	subs	r3, #1
 800ad38:	781a      	ldrb	r2, [r3, #0]
 800ad3a:	2a30      	cmp	r2, #48	; 0x30
 800ad3c:	d0fa      	beq.n	800ad34 <_dtoa_r+0xb9c>
 800ad3e:	e6e6      	b.n	800ab0e <_dtoa_r+0x976>
 800ad40:	9a06      	ldr	r2, [sp, #24]
 800ad42:	429a      	cmp	r2, r3
 800ad44:	d193      	bne.n	800ac6e <_dtoa_r+0xad6>
 800ad46:	9b03      	ldr	r3, [sp, #12]
 800ad48:	3301      	adds	r3, #1
 800ad4a:	9303      	str	r3, [sp, #12]
 800ad4c:	2331      	movs	r3, #49	; 0x31
 800ad4e:	7013      	strb	r3, [r2, #0]
 800ad50:	e6dd      	b.n	800ab0e <_dtoa_r+0x976>
 800ad52:	4b09      	ldr	r3, [pc, #36]	; (800ad78 <_dtoa_r+0xbe0>)
 800ad54:	9a26      	ldr	r2, [sp, #152]	; 0x98
 800ad56:	9306      	str	r3, [sp, #24]
 800ad58:	4b08      	ldr	r3, [pc, #32]	; (800ad7c <_dtoa_r+0xbe4>)
 800ad5a:	2a00      	cmp	r2, #0
 800ad5c:	d001      	beq.n	800ad62 <_dtoa_r+0xbca>
 800ad5e:	f7ff fa4c 	bl	800a1fa <_dtoa_r+0x62>
 800ad62:	f7ff fa4c 	bl	800a1fe <_dtoa_r+0x66>
 800ad66:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800ad68:	2b00      	cmp	r3, #0
 800ad6a:	dcb6      	bgt.n	800acda <_dtoa_r+0xb42>
 800ad6c:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800ad6e:	2b02      	cmp	r3, #2
 800ad70:	dd00      	ble.n	800ad74 <_dtoa_r+0xbdc>
 800ad72:	e6b6      	b.n	800aae2 <_dtoa_r+0x94a>
 800ad74:	e7b1      	b.n	800acda <_dtoa_r+0xb42>
 800ad76:	46c0      	nop			; (mov r8, r8)
 800ad78:	0800dee4 	.word	0x0800dee4
 800ad7c:	0800deec 	.word	0x0800deec

0800ad80 <fiprintf>:
 800ad80:	b40e      	push	{r1, r2, r3}
 800ad82:	b517      	push	{r0, r1, r2, r4, lr}
 800ad84:	4c05      	ldr	r4, [pc, #20]	; (800ad9c <fiprintf+0x1c>)
 800ad86:	ab05      	add	r3, sp, #20
 800ad88:	cb04      	ldmia	r3!, {r2}
 800ad8a:	0001      	movs	r1, r0
 800ad8c:	6820      	ldr	r0, [r4, #0]
 800ad8e:	9301      	str	r3, [sp, #4]
 800ad90:	f000 f8be 	bl	800af10 <_vfiprintf_r>
 800ad94:	bc1e      	pop	{r1, r2, r3, r4}
 800ad96:	bc08      	pop	{r3}
 800ad98:	b003      	add	sp, #12
 800ad9a:	4718      	bx	r3
 800ad9c:	200002a8 	.word	0x200002a8

0800ada0 <__ssprint_r>:
 800ada0:	b5f0      	push	{r4, r5, r6, r7, lr}
 800ada2:	6813      	ldr	r3, [r2, #0]
 800ada4:	b087      	sub	sp, #28
 800ada6:	0017      	movs	r7, r2
 800ada8:	9303      	str	r3, [sp, #12]
 800adaa:	6893      	ldr	r3, [r2, #8]
 800adac:	2200      	movs	r2, #0
 800adae:	000c      	movs	r4, r1
 800adb0:	9005      	str	r0, [sp, #20]
 800adb2:	9202      	str	r2, [sp, #8]
 800adb4:	9201      	str	r2, [sp, #4]
 800adb6:	4293      	cmp	r3, r2
 800adb8:	d10d      	bne.n	800add6 <__ssprint_r+0x36>
 800adba:	2000      	movs	r0, #0
 800adbc:	2300      	movs	r3, #0
 800adbe:	607b      	str	r3, [r7, #4]
 800adc0:	b007      	add	sp, #28
 800adc2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800adc4:	9b03      	ldr	r3, [sp, #12]
 800adc6:	681b      	ldr	r3, [r3, #0]
 800adc8:	9302      	str	r3, [sp, #8]
 800adca:	9b03      	ldr	r3, [sp, #12]
 800adcc:	685b      	ldr	r3, [r3, #4]
 800adce:	9301      	str	r3, [sp, #4]
 800add0:	9b03      	ldr	r3, [sp, #12]
 800add2:	3308      	adds	r3, #8
 800add4:	9303      	str	r3, [sp, #12]
 800add6:	9a01      	ldr	r2, [sp, #4]
 800add8:	68a6      	ldr	r6, [r4, #8]
 800adda:	6823      	ldr	r3, [r4, #0]
 800addc:	2a00      	cmp	r2, #0
 800adde:	d0f1      	beq.n	800adc4 <__ssprint_r+0x24>
 800ade0:	42b2      	cmp	r2, r6
 800ade2:	d32e      	bcc.n	800ae42 <__ssprint_r+0xa2>
 800ade4:	2190      	movs	r1, #144	; 0x90
 800ade6:	89a2      	ldrh	r2, [r4, #12]
 800ade8:	00c9      	lsls	r1, r1, #3
 800adea:	420a      	tst	r2, r1
 800adec:	d029      	beq.n	800ae42 <__ssprint_r+0xa2>
 800adee:	2003      	movs	r0, #3
 800adf0:	6921      	ldr	r1, [r4, #16]
 800adf2:	1a5b      	subs	r3, r3, r1
 800adf4:	9304      	str	r3, [sp, #16]
 800adf6:	6963      	ldr	r3, [r4, #20]
 800adf8:	4343      	muls	r3, r0
 800adfa:	0fdd      	lsrs	r5, r3, #31
 800adfc:	18ed      	adds	r5, r5, r3
 800adfe:	9b04      	ldr	r3, [sp, #16]
 800ae00:	9801      	ldr	r0, [sp, #4]
 800ae02:	3301      	adds	r3, #1
 800ae04:	181b      	adds	r3, r3, r0
 800ae06:	106d      	asrs	r5, r5, #1
 800ae08:	42ab      	cmp	r3, r5
 800ae0a:	d900      	bls.n	800ae0e <__ssprint_r+0x6e>
 800ae0c:	001d      	movs	r5, r3
 800ae0e:	0552      	lsls	r2, r2, #21
 800ae10:	d532      	bpl.n	800ae78 <__ssprint_r+0xd8>
 800ae12:	0029      	movs	r1, r5
 800ae14:	9805      	ldr	r0, [sp, #20]
 800ae16:	f7fc ff11 	bl	8007c3c <_malloc_r>
 800ae1a:	1e06      	subs	r6, r0, #0
 800ae1c:	d036      	beq.n	800ae8c <__ssprint_r+0xec>
 800ae1e:	9a04      	ldr	r2, [sp, #16]
 800ae20:	6921      	ldr	r1, [r4, #16]
 800ae22:	f7fc fde7 	bl	80079f4 <memcpy>
 800ae26:	89a2      	ldrh	r2, [r4, #12]
 800ae28:	4b1e      	ldr	r3, [pc, #120]	; (800aea4 <__ssprint_r+0x104>)
 800ae2a:	401a      	ands	r2, r3
 800ae2c:	2380      	movs	r3, #128	; 0x80
 800ae2e:	4313      	orrs	r3, r2
 800ae30:	81a3      	strh	r3, [r4, #12]
 800ae32:	9b04      	ldr	r3, [sp, #16]
 800ae34:	6126      	str	r6, [r4, #16]
 800ae36:	18f6      	adds	r6, r6, r3
 800ae38:	6026      	str	r6, [r4, #0]
 800ae3a:	6165      	str	r5, [r4, #20]
 800ae3c:	9e01      	ldr	r6, [sp, #4]
 800ae3e:	1aed      	subs	r5, r5, r3
 800ae40:	60a5      	str	r5, [r4, #8]
 800ae42:	9b01      	ldr	r3, [sp, #4]
 800ae44:	429e      	cmp	r6, r3
 800ae46:	d900      	bls.n	800ae4a <__ssprint_r+0xaa>
 800ae48:	001e      	movs	r6, r3
 800ae4a:	0032      	movs	r2, r6
 800ae4c:	9902      	ldr	r1, [sp, #8]
 800ae4e:	6820      	ldr	r0, [r4, #0]
 800ae50:	f000 ff99 	bl	800bd86 <memmove>
 800ae54:	9a01      	ldr	r2, [sp, #4]
 800ae56:	68a3      	ldr	r3, [r4, #8]
 800ae58:	4694      	mov	ip, r2
 800ae5a:	1b9b      	subs	r3, r3, r6
 800ae5c:	60a3      	str	r3, [r4, #8]
 800ae5e:	6823      	ldr	r3, [r4, #0]
 800ae60:	199b      	adds	r3, r3, r6
 800ae62:	6023      	str	r3, [r4, #0]
 800ae64:	9b02      	ldr	r3, [sp, #8]
 800ae66:	4463      	add	r3, ip
 800ae68:	9302      	str	r3, [sp, #8]
 800ae6a:	68bb      	ldr	r3, [r7, #8]
 800ae6c:	1a9b      	subs	r3, r3, r2
 800ae6e:	60bb      	str	r3, [r7, #8]
 800ae70:	d0a3      	beq.n	800adba <__ssprint_r+0x1a>
 800ae72:	2300      	movs	r3, #0
 800ae74:	9301      	str	r3, [sp, #4]
 800ae76:	e7ae      	b.n	800add6 <__ssprint_r+0x36>
 800ae78:	002a      	movs	r2, r5
 800ae7a:	9805      	ldr	r0, [sp, #20]
 800ae7c:	f000 ff9e 	bl	800bdbc <_realloc_r>
 800ae80:	1e06      	subs	r6, r0, #0
 800ae82:	d1d6      	bne.n	800ae32 <__ssprint_r+0x92>
 800ae84:	6921      	ldr	r1, [r4, #16]
 800ae86:	9805      	ldr	r0, [sp, #20]
 800ae88:	f7fc fe26 	bl	8007ad8 <_free_r>
 800ae8c:	230c      	movs	r3, #12
 800ae8e:	9a05      	ldr	r2, [sp, #20]
 800ae90:	2001      	movs	r0, #1
 800ae92:	6013      	str	r3, [r2, #0]
 800ae94:	89a2      	ldrh	r2, [r4, #12]
 800ae96:	3334      	adds	r3, #52	; 0x34
 800ae98:	4313      	orrs	r3, r2
 800ae9a:	81a3      	strh	r3, [r4, #12]
 800ae9c:	2300      	movs	r3, #0
 800ae9e:	4240      	negs	r0, r0
 800aea0:	60bb      	str	r3, [r7, #8]
 800aea2:	e78b      	b.n	800adbc <__ssprint_r+0x1c>
 800aea4:	fffffb7f 	.word	0xfffffb7f

0800aea8 <__sprint_r>:
 800aea8:	b5f0      	push	{r4, r5, r6, r7, lr}
 800aeaa:	6893      	ldr	r3, [r2, #8]
 800aeac:	b085      	sub	sp, #20
 800aeae:	9001      	str	r0, [sp, #4]
 800aeb0:	000d      	movs	r5, r1
 800aeb2:	0014      	movs	r4, r2
 800aeb4:	1e18      	subs	r0, r3, #0
 800aeb6:	d018      	beq.n	800aeea <__sprint_r+0x42>
 800aeb8:	6e4b      	ldr	r3, [r1, #100]	; 0x64
 800aeba:	049b      	lsls	r3, r3, #18
 800aebc:	d524      	bpl.n	800af08 <__sprint_r+0x60>
 800aebe:	6817      	ldr	r7, [r2, #0]
 800aec0:	2600      	movs	r6, #0
 800aec2:	683b      	ldr	r3, [r7, #0]
 800aec4:	9302      	str	r3, [sp, #8]
 800aec6:	687b      	ldr	r3, [r7, #4]
 800aec8:	9300      	str	r3, [sp, #0]
 800aeca:	089b      	lsrs	r3, r3, #2
 800aecc:	9303      	str	r3, [sp, #12]
 800aece:	9b03      	ldr	r3, [sp, #12]
 800aed0:	42b3      	cmp	r3, r6
 800aed2:	dc0e      	bgt.n	800aef2 <__sprint_r+0x4a>
 800aed4:	2203      	movs	r2, #3
 800aed6:	9b00      	ldr	r3, [sp, #0]
 800aed8:	68a0      	ldr	r0, [r4, #8]
 800aeda:	4393      	bics	r3, r2
 800aedc:	1ac0      	subs	r0, r0, r3
 800aede:	60a0      	str	r0, [r4, #8]
 800aee0:	3708      	adds	r7, #8
 800aee2:	2800      	cmp	r0, #0
 800aee4:	d1ec      	bne.n	800aec0 <__sprint_r+0x18>
 800aee6:	2300      	movs	r3, #0
 800aee8:	60a3      	str	r3, [r4, #8]
 800aeea:	2300      	movs	r3, #0
 800aeec:	6063      	str	r3, [r4, #4]
 800aeee:	b005      	add	sp, #20
 800aef0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800aef2:	9902      	ldr	r1, [sp, #8]
 800aef4:	00b3      	lsls	r3, r6, #2
 800aef6:	58c9      	ldr	r1, [r1, r3]
 800aef8:	002a      	movs	r2, r5
 800aefa:	9801      	ldr	r0, [sp, #4]
 800aefc:	f000 ff1a 	bl	800bd34 <_fputwc_r>
 800af00:	1c43      	adds	r3, r0, #1
 800af02:	d0f0      	beq.n	800aee6 <__sprint_r+0x3e>
 800af04:	3601      	adds	r6, #1
 800af06:	e7e2      	b.n	800aece <__sprint_r+0x26>
 800af08:	9801      	ldr	r0, [sp, #4]
 800af0a:	f000 fd13 	bl	800b934 <__sfvwrite_r>
 800af0e:	e7ea      	b.n	800aee6 <__sprint_r+0x3e>

0800af10 <_vfiprintf_r>:
 800af10:	b5f0      	push	{r4, r5, r6, r7, lr}
 800af12:	b0c1      	sub	sp, #260	; 0x104
 800af14:	001c      	movs	r4, r3
 800af16:	001f      	movs	r7, r3
 800af18:	9006      	str	r0, [sp, #24]
 800af1a:	9103      	str	r1, [sp, #12]
 800af1c:	9207      	str	r2, [sp, #28]
 800af1e:	2800      	cmp	r0, #0
 800af20:	d004      	beq.n	800af2c <_vfiprintf_r+0x1c>
 800af22:	6b43      	ldr	r3, [r0, #52]	; 0x34
 800af24:	2b00      	cmp	r3, #0
 800af26:	d101      	bne.n	800af2c <_vfiprintf_r+0x1c>
 800af28:	f7fc fc04 	bl	8007734 <__sinit>
 800af2c:	9b03      	ldr	r3, [sp, #12]
 800af2e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800af30:	07db      	lsls	r3, r3, #31
 800af32:	d407      	bmi.n	800af44 <_vfiprintf_r+0x34>
 800af34:	9b03      	ldr	r3, [sp, #12]
 800af36:	899b      	ldrh	r3, [r3, #12]
 800af38:	059b      	lsls	r3, r3, #22
 800af3a:	d403      	bmi.n	800af44 <_vfiprintf_r+0x34>
 800af3c:	9b03      	ldr	r3, [sp, #12]
 800af3e:	6d98      	ldr	r0, [r3, #88]	; 0x58
 800af40:	f7fc fd56 	bl	80079f0 <__retarget_lock_acquire_recursive>
 800af44:	9b03      	ldr	r3, [sp, #12]
 800af46:	220c      	movs	r2, #12
 800af48:	5e9a      	ldrsh	r2, [r3, r2]
 800af4a:	2380      	movs	r3, #128	; 0x80
 800af4c:	019b      	lsls	r3, r3, #6
 800af4e:	421a      	tst	r2, r3
 800af50:	d107      	bne.n	800af62 <_vfiprintf_r+0x52>
 800af52:	4313      	orrs	r3, r2
 800af54:	9a03      	ldr	r2, [sp, #12]
 800af56:	8193      	strh	r3, [r2, #12]
 800af58:	6e53      	ldr	r3, [r2, #100]	; 0x64
 800af5a:	4aa3      	ldr	r2, [pc, #652]	; (800b1e8 <_vfiprintf_r+0x2d8>)
 800af5c:	4013      	ands	r3, r2
 800af5e:	9a03      	ldr	r2, [sp, #12]
 800af60:	6653      	str	r3, [r2, #100]	; 0x64
 800af62:	9b03      	ldr	r3, [sp, #12]
 800af64:	899b      	ldrh	r3, [r3, #12]
 800af66:	071b      	lsls	r3, r3, #28
 800af68:	d503      	bpl.n	800af72 <_vfiprintf_r+0x62>
 800af6a:	9b03      	ldr	r3, [sp, #12]
 800af6c:	691b      	ldr	r3, [r3, #16]
 800af6e:	2b00      	cmp	r3, #0
 800af70:	d118      	bne.n	800afa4 <_vfiprintf_r+0x94>
 800af72:	9903      	ldr	r1, [sp, #12]
 800af74:	9806      	ldr	r0, [sp, #24]
 800af76:	f000 fe3b 	bl	800bbf0 <__swsetup_r>
 800af7a:	2800      	cmp	r0, #0
 800af7c:	d012      	beq.n	800afa4 <_vfiprintf_r+0x94>
 800af7e:	9b03      	ldr	r3, [sp, #12]
 800af80:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800af82:	07db      	lsls	r3, r3, #31
 800af84:	d505      	bpl.n	800af92 <_vfiprintf_r+0x82>
 800af86:	2301      	movs	r3, #1
 800af88:	425b      	negs	r3, r3
 800af8a:	9308      	str	r3, [sp, #32]
 800af8c:	9808      	ldr	r0, [sp, #32]
 800af8e:	b041      	add	sp, #260	; 0x104
 800af90:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800af92:	9b03      	ldr	r3, [sp, #12]
 800af94:	899b      	ldrh	r3, [r3, #12]
 800af96:	059b      	lsls	r3, r3, #22
 800af98:	d4f5      	bmi.n	800af86 <_vfiprintf_r+0x76>
 800af9a:	9b03      	ldr	r3, [sp, #12]
 800af9c:	6d98      	ldr	r0, [r3, #88]	; 0x58
 800af9e:	f7fc fd28 	bl	80079f2 <__retarget_lock_release_recursive>
 800afa2:	e7f0      	b.n	800af86 <_vfiprintf_r+0x76>
 800afa4:	221a      	movs	r2, #26
 800afa6:	9b03      	ldr	r3, [sp, #12]
 800afa8:	899b      	ldrh	r3, [r3, #12]
 800afaa:	401a      	ands	r2, r3
 800afac:	2a0a      	cmp	r2, #10
 800afae:	d116      	bne.n	800afde <_vfiprintf_r+0xce>
 800afb0:	9a03      	ldr	r2, [sp, #12]
 800afb2:	210e      	movs	r1, #14
 800afb4:	5e52      	ldrsh	r2, [r2, r1]
 800afb6:	2a00      	cmp	r2, #0
 800afb8:	db11      	blt.n	800afde <_vfiprintf_r+0xce>
 800afba:	9a03      	ldr	r2, [sp, #12]
 800afbc:	6e52      	ldr	r2, [r2, #100]	; 0x64
 800afbe:	07d2      	lsls	r2, r2, #31
 800afc0:	d405      	bmi.n	800afce <_vfiprintf_r+0xbe>
 800afc2:	059b      	lsls	r3, r3, #22
 800afc4:	d403      	bmi.n	800afce <_vfiprintf_r+0xbe>
 800afc6:	9b03      	ldr	r3, [sp, #12]
 800afc8:	6d98      	ldr	r0, [r3, #88]	; 0x58
 800afca:	f7fc fd12 	bl	80079f2 <__retarget_lock_release_recursive>
 800afce:	0023      	movs	r3, r4
 800afd0:	9a07      	ldr	r2, [sp, #28]
 800afd2:	9903      	ldr	r1, [sp, #12]
 800afd4:	9806      	ldr	r0, [sp, #24]
 800afd6:	f000 fc69 	bl	800b8ac <__sbprintf>
 800afda:	9008      	str	r0, [sp, #32]
 800afdc:	e7d6      	b.n	800af8c <_vfiprintf_r+0x7c>
 800afde:	2300      	movs	r3, #0
 800afe0:	ad17      	add	r5, sp, #92	; 0x5c
 800afe2:	9514      	str	r5, [sp, #80]	; 0x50
 800afe4:	9316      	str	r3, [sp, #88]	; 0x58
 800afe6:	9315      	str	r3, [sp, #84]	; 0x54
 800afe8:	930c      	str	r3, [sp, #48]	; 0x30
 800afea:	930d      	str	r3, [sp, #52]	; 0x34
 800afec:	930e      	str	r3, [sp, #56]	; 0x38
 800afee:	930f      	str	r3, [sp, #60]	; 0x3c
 800aff0:	9308      	str	r3, [sp, #32]
 800aff2:	9c07      	ldr	r4, [sp, #28]
 800aff4:	7823      	ldrb	r3, [r4, #0]
 800aff6:	2b00      	cmp	r3, #0
 800aff8:	d002      	beq.n	800b000 <_vfiprintf_r+0xf0>
 800affa:	2b25      	cmp	r3, #37	; 0x25
 800affc:	d000      	beq.n	800b000 <_vfiprintf_r+0xf0>
 800affe:	e08d      	b.n	800b11c <_vfiprintf_r+0x20c>
 800b000:	9b07      	ldr	r3, [sp, #28]
 800b002:	1ae6      	subs	r6, r4, r3
 800b004:	429c      	cmp	r4, r3
 800b006:	d016      	beq.n	800b036 <_vfiprintf_r+0x126>
 800b008:	602b      	str	r3, [r5, #0]
 800b00a:	9b16      	ldr	r3, [sp, #88]	; 0x58
 800b00c:	606e      	str	r6, [r5, #4]
 800b00e:	199b      	adds	r3, r3, r6
 800b010:	9316      	str	r3, [sp, #88]	; 0x58
 800b012:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800b014:	3508      	adds	r5, #8
 800b016:	3301      	adds	r3, #1
 800b018:	9315      	str	r3, [sp, #84]	; 0x54
 800b01a:	2b07      	cmp	r3, #7
 800b01c:	dd08      	ble.n	800b030 <_vfiprintf_r+0x120>
 800b01e:	9903      	ldr	r1, [sp, #12]
 800b020:	9806      	ldr	r0, [sp, #24]
 800b022:	aa14      	add	r2, sp, #80	; 0x50
 800b024:	f7ff ff40 	bl	800aea8 <__sprint_r>
 800b028:	2800      	cmp	r0, #0
 800b02a:	d000      	beq.n	800b02e <_vfiprintf_r+0x11e>
 800b02c:	e3d9      	b.n	800b7e2 <_vfiprintf_r+0x8d2>
 800b02e:	ad17      	add	r5, sp, #92	; 0x5c
 800b030:	9b08      	ldr	r3, [sp, #32]
 800b032:	199b      	adds	r3, r3, r6
 800b034:	9308      	str	r3, [sp, #32]
 800b036:	7823      	ldrb	r3, [r4, #0]
 800b038:	2b00      	cmp	r3, #0
 800b03a:	d101      	bne.n	800b040 <_vfiprintf_r+0x130>
 800b03c:	f000 fbf6 	bl	800b82c <_vfiprintf_r+0x91c>
 800b040:	2200      	movs	r2, #0
 800b042:	a912      	add	r1, sp, #72	; 0x48
 800b044:	70ca      	strb	r2, [r1, #3]
 800b046:	2101      	movs	r1, #1
 800b048:	1c63      	adds	r3, r4, #1
 800b04a:	0014      	movs	r4, r2
 800b04c:	4249      	negs	r1, r1
 800b04e:	9105      	str	r1, [sp, #20]
 800b050:	9209      	str	r2, [sp, #36]	; 0x24
 800b052:	1c5a      	adds	r2, r3, #1
 800b054:	781b      	ldrb	r3, [r3, #0]
 800b056:	9207      	str	r2, [sp, #28]
 800b058:	0018      	movs	r0, r3
 800b05a:	3820      	subs	r0, #32
 800b05c:	285a      	cmp	r0, #90	; 0x5a
 800b05e:	d900      	bls.n	800b062 <_vfiprintf_r+0x152>
 800b060:	e362      	b.n	800b728 <_vfiprintf_r+0x818>
 800b062:	f7f5 f861 	bl	8000128 <__gnu_thumb1_case_uhi>
 800b066:	0078      	.short	0x0078
 800b068:	03610361 	.word	0x03610361
 800b06c:	03610081 	.word	0x03610081
 800b070:	03610361 	.word	0x03610361
 800b074:	0361005d 	.word	0x0361005d
 800b078:	00830361 	.word	0x00830361
 800b07c:	0361008b 	.word	0x0361008b
 800b080:	008f0089 	.word	0x008f0089
 800b084:	00ad0361 	.word	0x00ad0361
 800b088:	00af00af 	.word	0x00af00af
 800b08c:	00af00af 	.word	0x00af00af
 800b090:	00af00af 	.word	0x00af00af
 800b094:	00af00af 	.word	0x00af00af
 800b098:	036100af 	.word	0x036100af
 800b09c:	03610361 	.word	0x03610361
 800b0a0:	03610361 	.word	0x03610361
 800b0a4:	03610361 	.word	0x03610361
 800b0a8:	03610361 	.word	0x03610361
 800b0ac:	00e600da 	.word	0x00e600da
 800b0b0:	03610361 	.word	0x03610361
 800b0b4:	03610361 	.word	0x03610361
 800b0b8:	03610361 	.word	0x03610361
 800b0bc:	03610361 	.word	0x03610361
 800b0c0:	03610361 	.word	0x03610361
 800b0c4:	03610143 	.word	0x03610143
 800b0c8:	03610361 	.word	0x03610361
 800b0cc:	03610182 	.word	0x03610182
 800b0d0:	0361027c 	.word	0x0361027c
 800b0d4:	02ae0361 	.word	0x02ae0361
 800b0d8:	03610361 	.word	0x03610361
 800b0dc:	03610361 	.word	0x03610361
 800b0e0:	03610361 	.word	0x03610361
 800b0e4:	03610361 	.word	0x03610361
 800b0e8:	03610361 	.word	0x03610361
 800b0ec:	00e800da 	.word	0x00e800da
 800b0f0:	03610361 	.word	0x03610361
 800b0f4:	00c30361 	.word	0x00c30361
 800b0f8:	00d600e8 	.word	0x00d600e8
 800b0fc:	00cf0361 	.word	0x00cf0361
 800b100:	01260361 	.word	0x01260361
 800b104:	01740145 	.word	0x01740145
 800b108:	036100d6 	.word	0x036100d6
 800b10c:	007f0182 	.word	0x007f0182
 800b110:	0361027e 	.word	0x0361027e
 800b114:	02cd0361 	.word	0x02cd0361
 800b118:	007f0361 	.word	0x007f0361
 800b11c:	3401      	adds	r4, #1
 800b11e:	e769      	b.n	800aff4 <_vfiprintf_r+0xe4>
 800b120:	9806      	ldr	r0, [sp, #24]
 800b122:	f7fe fe8b 	bl	8009e3c <_localeconv_r>
 800b126:	6843      	ldr	r3, [r0, #4]
 800b128:	0018      	movs	r0, r3
 800b12a:	930f      	str	r3, [sp, #60]	; 0x3c
 800b12c:	f7f4 ffea 	bl	8000104 <strlen>
 800b130:	900e      	str	r0, [sp, #56]	; 0x38
 800b132:	9806      	ldr	r0, [sp, #24]
 800b134:	f7fe fe82 	bl	8009e3c <_localeconv_r>
 800b138:	6883      	ldr	r3, [r0, #8]
 800b13a:	930d      	str	r3, [sp, #52]	; 0x34
 800b13c:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800b13e:	2b00      	cmp	r3, #0
 800b140:	d010      	beq.n	800b164 <_vfiprintf_r+0x254>
 800b142:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800b144:	2b00      	cmp	r3, #0
 800b146:	d00d      	beq.n	800b164 <_vfiprintf_r+0x254>
 800b148:	781b      	ldrb	r3, [r3, #0]
 800b14a:	2b00      	cmp	r3, #0
 800b14c:	d00a      	beq.n	800b164 <_vfiprintf_r+0x254>
 800b14e:	2380      	movs	r3, #128	; 0x80
 800b150:	00db      	lsls	r3, r3, #3
 800b152:	431c      	orrs	r4, r3
 800b154:	e006      	b.n	800b164 <_vfiprintf_r+0x254>
 800b156:	ab12      	add	r3, sp, #72	; 0x48
 800b158:	78da      	ldrb	r2, [r3, #3]
 800b15a:	3303      	adds	r3, #3
 800b15c:	2a00      	cmp	r2, #0
 800b15e:	d101      	bne.n	800b164 <_vfiprintf_r+0x254>
 800b160:	3220      	adds	r2, #32
 800b162:	701a      	strb	r2, [r3, #0]
 800b164:	9b07      	ldr	r3, [sp, #28]
 800b166:	e774      	b.n	800b052 <_vfiprintf_r+0x142>
 800b168:	2301      	movs	r3, #1
 800b16a:	e7f2      	b.n	800b152 <_vfiprintf_r+0x242>
 800b16c:	cf08      	ldmia	r7!, {r3}
 800b16e:	9309      	str	r3, [sp, #36]	; 0x24
 800b170:	2b00      	cmp	r3, #0
 800b172:	daf7      	bge.n	800b164 <_vfiprintf_r+0x254>
 800b174:	425b      	negs	r3, r3
 800b176:	9309      	str	r3, [sp, #36]	; 0x24
 800b178:	2304      	movs	r3, #4
 800b17a:	e7ea      	b.n	800b152 <_vfiprintf_r+0x242>
 800b17c:	222b      	movs	r2, #43	; 0x2b
 800b17e:	ab12      	add	r3, sp, #72	; 0x48
 800b180:	70da      	strb	r2, [r3, #3]
 800b182:	e7ef      	b.n	800b164 <_vfiprintf_r+0x254>
 800b184:	9b07      	ldr	r3, [sp, #28]
 800b186:	1c5a      	adds	r2, r3, #1
 800b188:	781b      	ldrb	r3, [r3, #0]
 800b18a:	2b2a      	cmp	r3, #42	; 0x2a
 800b18c:	d00f      	beq.n	800b1ae <_vfiprintf_r+0x29e>
 800b18e:	2100      	movs	r1, #0
 800b190:	9105      	str	r1, [sp, #20]
 800b192:	0019      	movs	r1, r3
 800b194:	3930      	subs	r1, #48	; 0x30
 800b196:	9207      	str	r2, [sp, #28]
 800b198:	2909      	cmp	r1, #9
 800b19a:	d900      	bls.n	800b19e <_vfiprintf_r+0x28e>
 800b19c:	e75c      	b.n	800b058 <_vfiprintf_r+0x148>
 800b19e:	200a      	movs	r0, #10
 800b1a0:	9b05      	ldr	r3, [sp, #20]
 800b1a2:	4343      	muls	r3, r0
 800b1a4:	185b      	adds	r3, r3, r1
 800b1a6:	9305      	str	r3, [sp, #20]
 800b1a8:	7813      	ldrb	r3, [r2, #0]
 800b1aa:	3201      	adds	r2, #1
 800b1ac:	e7f1      	b.n	800b192 <_vfiprintf_r+0x282>
 800b1ae:	cf08      	ldmia	r7!, {r3}
 800b1b0:	9305      	str	r3, [sp, #20]
 800b1b2:	2b00      	cmp	r3, #0
 800b1b4:	da02      	bge.n	800b1bc <_vfiprintf_r+0x2ac>
 800b1b6:	2301      	movs	r3, #1
 800b1b8:	425b      	negs	r3, r3
 800b1ba:	9305      	str	r3, [sp, #20]
 800b1bc:	9207      	str	r2, [sp, #28]
 800b1be:	e7d1      	b.n	800b164 <_vfiprintf_r+0x254>
 800b1c0:	2380      	movs	r3, #128	; 0x80
 800b1c2:	e7c6      	b.n	800b152 <_vfiprintf_r+0x242>
 800b1c4:	2100      	movs	r1, #0
 800b1c6:	9a07      	ldr	r2, [sp, #28]
 800b1c8:	9109      	str	r1, [sp, #36]	; 0x24
 800b1ca:	200a      	movs	r0, #10
 800b1cc:	9909      	ldr	r1, [sp, #36]	; 0x24
 800b1ce:	3b30      	subs	r3, #48	; 0x30
 800b1d0:	4341      	muls	r1, r0
 800b1d2:	185b      	adds	r3, r3, r1
 800b1d4:	9309      	str	r3, [sp, #36]	; 0x24
 800b1d6:	0013      	movs	r3, r2
 800b1d8:	781b      	ldrb	r3, [r3, #0]
 800b1da:	3201      	adds	r2, #1
 800b1dc:	0019      	movs	r1, r3
 800b1de:	3930      	subs	r1, #48	; 0x30
 800b1e0:	9207      	str	r2, [sp, #28]
 800b1e2:	2909      	cmp	r1, #9
 800b1e4:	d9f1      	bls.n	800b1ca <_vfiprintf_r+0x2ba>
 800b1e6:	e737      	b.n	800b058 <_vfiprintf_r+0x148>
 800b1e8:	ffffdfff 	.word	0xffffdfff
 800b1ec:	9b07      	ldr	r3, [sp, #28]
 800b1ee:	781b      	ldrb	r3, [r3, #0]
 800b1f0:	2b68      	cmp	r3, #104	; 0x68
 800b1f2:	d105      	bne.n	800b200 <_vfiprintf_r+0x2f0>
 800b1f4:	9b07      	ldr	r3, [sp, #28]
 800b1f6:	3301      	adds	r3, #1
 800b1f8:	9307      	str	r3, [sp, #28]
 800b1fa:	2380      	movs	r3, #128	; 0x80
 800b1fc:	009b      	lsls	r3, r3, #2
 800b1fe:	e7a8      	b.n	800b152 <_vfiprintf_r+0x242>
 800b200:	2340      	movs	r3, #64	; 0x40
 800b202:	e7a6      	b.n	800b152 <_vfiprintf_r+0x242>
 800b204:	9b07      	ldr	r3, [sp, #28]
 800b206:	781b      	ldrb	r3, [r3, #0]
 800b208:	2b6c      	cmp	r3, #108	; 0x6c
 800b20a:	d104      	bne.n	800b216 <_vfiprintf_r+0x306>
 800b20c:	9b07      	ldr	r3, [sp, #28]
 800b20e:	3301      	adds	r3, #1
 800b210:	9307      	str	r3, [sp, #28]
 800b212:	2320      	movs	r3, #32
 800b214:	e79d      	b.n	800b152 <_vfiprintf_r+0x242>
 800b216:	2310      	movs	r3, #16
 800b218:	e79b      	b.n	800b152 <_vfiprintf_r+0x242>
 800b21a:	003a      	movs	r2, r7
 800b21c:	ca08      	ldmia	r2!, {r3}
 800b21e:	ae27      	add	r6, sp, #156	; 0x9c
 800b220:	7033      	strb	r3, [r6, #0]
 800b222:	2300      	movs	r3, #0
 800b224:	9204      	str	r2, [sp, #16]
 800b226:	aa12      	add	r2, sp, #72	; 0x48
 800b228:	70d3      	strb	r3, [r2, #3]
 800b22a:	2201      	movs	r2, #1
 800b22c:	930b      	str	r3, [sp, #44]	; 0x2c
 800b22e:	9205      	str	r2, [sp, #20]
 800b230:	e0b0      	b.n	800b394 <_vfiprintf_r+0x484>
 800b232:	2310      	movs	r3, #16
 800b234:	431c      	orrs	r4, r3
 800b236:	06a3      	lsls	r3, r4, #26
 800b238:	d52a      	bpl.n	800b290 <_vfiprintf_r+0x380>
 800b23a:	2307      	movs	r3, #7
 800b23c:	3707      	adds	r7, #7
 800b23e:	439f      	bics	r7, r3
 800b240:	0039      	movs	r1, r7
 800b242:	c90c      	ldmia	r1!, {r2, r3}
 800b244:	9200      	str	r2, [sp, #0]
 800b246:	9301      	str	r3, [sp, #4]
 800b248:	9104      	str	r1, [sp, #16]
 800b24a:	9a01      	ldr	r2, [sp, #4]
 800b24c:	2301      	movs	r3, #1
 800b24e:	2a00      	cmp	r2, #0
 800b250:	da09      	bge.n	800b266 <_vfiprintf_r+0x356>
 800b252:	9e00      	ldr	r6, [sp, #0]
 800b254:	9f01      	ldr	r7, [sp, #4]
 800b256:	2200      	movs	r2, #0
 800b258:	4271      	negs	r1, r6
 800b25a:	41ba      	sbcs	r2, r7
 800b25c:	9100      	str	r1, [sp, #0]
 800b25e:	9201      	str	r2, [sp, #4]
 800b260:	212d      	movs	r1, #45	; 0x2d
 800b262:	aa12      	add	r2, sp, #72	; 0x48
 800b264:	70d1      	strb	r1, [r2, #3]
 800b266:	9901      	ldr	r1, [sp, #4]
 800b268:	9a00      	ldr	r2, [sp, #0]
 800b26a:	430a      	orrs	r2, r1
 800b26c:	9905      	ldr	r1, [sp, #20]
 800b26e:	3101      	adds	r1, #1
 800b270:	d100      	bne.n	800b274 <_vfiprintf_r+0x364>
 800b272:	e2e9      	b.n	800b848 <_vfiprintf_r+0x938>
 800b274:	2180      	movs	r1, #128	; 0x80
 800b276:	0027      	movs	r7, r4
 800b278:	438f      	bics	r7, r1
 800b27a:	2a00      	cmp	r2, #0
 800b27c:	d000      	beq.n	800b280 <_vfiprintf_r+0x370>
 800b27e:	e2e7      	b.n	800b850 <_vfiprintf_r+0x940>
 800b280:	9a05      	ldr	r2, [sp, #20]
 800b282:	2a00      	cmp	r2, #0
 800b284:	d100      	bne.n	800b288 <_vfiprintf_r+0x378>
 800b286:	e243      	b.n	800b710 <_vfiprintf_r+0x800>
 800b288:	2b01      	cmp	r3, #1
 800b28a:	d000      	beq.n	800b28e <_vfiprintf_r+0x37e>
 800b28c:	e2e3      	b.n	800b856 <_vfiprintf_r+0x946>
 800b28e:	e1e7      	b.n	800b660 <_vfiprintf_r+0x750>
 800b290:	003a      	movs	r2, r7
 800b292:	ca08      	ldmia	r2!, {r3}
 800b294:	9204      	str	r2, [sp, #16]
 800b296:	06e2      	lsls	r2, r4, #27
 800b298:	d503      	bpl.n	800b2a2 <_vfiprintf_r+0x392>
 800b29a:	9300      	str	r3, [sp, #0]
 800b29c:	17db      	asrs	r3, r3, #31
 800b29e:	9301      	str	r3, [sp, #4]
 800b2a0:	e7d3      	b.n	800b24a <_vfiprintf_r+0x33a>
 800b2a2:	0662      	lsls	r2, r4, #25
 800b2a4:	d501      	bpl.n	800b2aa <_vfiprintf_r+0x39a>
 800b2a6:	b21b      	sxth	r3, r3
 800b2a8:	e7f7      	b.n	800b29a <_vfiprintf_r+0x38a>
 800b2aa:	05a2      	lsls	r2, r4, #22
 800b2ac:	d5f5      	bpl.n	800b29a <_vfiprintf_r+0x38a>
 800b2ae:	b25b      	sxtb	r3, r3
 800b2b0:	e7f3      	b.n	800b29a <_vfiprintf_r+0x38a>
 800b2b2:	1d3b      	adds	r3, r7, #4
 800b2b4:	9304      	str	r3, [sp, #16]
 800b2b6:	06a3      	lsls	r3, r4, #26
 800b2b8:	d506      	bpl.n	800b2c8 <_vfiprintf_r+0x3b8>
 800b2ba:	683b      	ldr	r3, [r7, #0]
 800b2bc:	9a08      	ldr	r2, [sp, #32]
 800b2be:	601a      	str	r2, [r3, #0]
 800b2c0:	17d2      	asrs	r2, r2, #31
 800b2c2:	605a      	str	r2, [r3, #4]
 800b2c4:	9f04      	ldr	r7, [sp, #16]
 800b2c6:	e694      	b.n	800aff2 <_vfiprintf_r+0xe2>
 800b2c8:	06e3      	lsls	r3, r4, #27
 800b2ca:	d503      	bpl.n	800b2d4 <_vfiprintf_r+0x3c4>
 800b2cc:	683b      	ldr	r3, [r7, #0]
 800b2ce:	9a08      	ldr	r2, [sp, #32]
 800b2d0:	601a      	str	r2, [r3, #0]
 800b2d2:	e7f7      	b.n	800b2c4 <_vfiprintf_r+0x3b4>
 800b2d4:	0663      	lsls	r3, r4, #25
 800b2d6:	d503      	bpl.n	800b2e0 <_vfiprintf_r+0x3d0>
 800b2d8:	683b      	ldr	r3, [r7, #0]
 800b2da:	9a08      	ldr	r2, [sp, #32]
 800b2dc:	801a      	strh	r2, [r3, #0]
 800b2de:	e7f1      	b.n	800b2c4 <_vfiprintf_r+0x3b4>
 800b2e0:	05a4      	lsls	r4, r4, #22
 800b2e2:	d5f3      	bpl.n	800b2cc <_vfiprintf_r+0x3bc>
 800b2e4:	683b      	ldr	r3, [r7, #0]
 800b2e6:	9a08      	ldr	r2, [sp, #32]
 800b2e8:	701a      	strb	r2, [r3, #0]
 800b2ea:	e7eb      	b.n	800b2c4 <_vfiprintf_r+0x3b4>
 800b2ec:	2310      	movs	r3, #16
 800b2ee:	431c      	orrs	r4, r3
 800b2f0:	2320      	movs	r3, #32
 800b2f2:	0020      	movs	r0, r4
 800b2f4:	4018      	ands	r0, r3
 800b2f6:	421c      	tst	r4, r3
 800b2f8:	d00d      	beq.n	800b316 <_vfiprintf_r+0x406>
 800b2fa:	3b19      	subs	r3, #25
 800b2fc:	3707      	adds	r7, #7
 800b2fe:	439f      	bics	r7, r3
 800b300:	0039      	movs	r1, r7
 800b302:	c90c      	ldmia	r1!, {r2, r3}
 800b304:	9200      	str	r2, [sp, #0]
 800b306:	9301      	str	r3, [sp, #4]
 800b308:	9104      	str	r1, [sp, #16]
 800b30a:	4bcc      	ldr	r3, [pc, #816]	; (800b63c <_vfiprintf_r+0x72c>)
 800b30c:	401c      	ands	r4, r3
 800b30e:	2300      	movs	r3, #0
 800b310:	2100      	movs	r1, #0
 800b312:	aa12      	add	r2, sp, #72	; 0x48
 800b314:	e7a6      	b.n	800b264 <_vfiprintf_r+0x354>
 800b316:	003a      	movs	r2, r7
 800b318:	ca08      	ldmia	r2!, {r3}
 800b31a:	0021      	movs	r1, r4
 800b31c:	9204      	str	r2, [sp, #16]
 800b31e:	2210      	movs	r2, #16
 800b320:	4011      	ands	r1, r2
 800b322:	4214      	tst	r4, r2
 800b324:	d002      	beq.n	800b32c <_vfiprintf_r+0x41c>
 800b326:	9300      	str	r3, [sp, #0]
 800b328:	9001      	str	r0, [sp, #4]
 800b32a:	e7ee      	b.n	800b30a <_vfiprintf_r+0x3fa>
 800b32c:	2240      	movs	r2, #64	; 0x40
 800b32e:	0020      	movs	r0, r4
 800b330:	4010      	ands	r0, r2
 800b332:	4214      	tst	r4, r2
 800b334:	d003      	beq.n	800b33e <_vfiprintf_r+0x42e>
 800b336:	b29b      	uxth	r3, r3
 800b338:	9300      	str	r3, [sp, #0]
 800b33a:	9101      	str	r1, [sp, #4]
 800b33c:	e7e5      	b.n	800b30a <_vfiprintf_r+0x3fa>
 800b33e:	2280      	movs	r2, #128	; 0x80
 800b340:	0021      	movs	r1, r4
 800b342:	0092      	lsls	r2, r2, #2
 800b344:	4011      	ands	r1, r2
 800b346:	4214      	tst	r4, r2
 800b348:	d0f6      	beq.n	800b338 <_vfiprintf_r+0x428>
 800b34a:	b2db      	uxtb	r3, r3
 800b34c:	e7eb      	b.n	800b326 <_vfiprintf_r+0x416>
 800b34e:	003b      	movs	r3, r7
 800b350:	cb04      	ldmia	r3!, {r2}
 800b352:	49bb      	ldr	r1, [pc, #748]	; (800b640 <_vfiprintf_r+0x730>)
 800b354:	9304      	str	r3, [sp, #16]
 800b356:	2300      	movs	r3, #0
 800b358:	9200      	str	r2, [sp, #0]
 800b35a:	aa13      	add	r2, sp, #76	; 0x4c
 800b35c:	8011      	strh	r1, [r2, #0]
 800b35e:	4ab9      	ldr	r2, [pc, #740]	; (800b644 <_vfiprintf_r+0x734>)
 800b360:	9301      	str	r3, [sp, #4]
 800b362:	3302      	adds	r3, #2
 800b364:	431c      	orrs	r4, r3
 800b366:	920c      	str	r2, [sp, #48]	; 0x30
 800b368:	e7d2      	b.n	800b310 <_vfiprintf_r+0x400>
 800b36a:	003b      	movs	r3, r7
 800b36c:	2700      	movs	r7, #0
 800b36e:	cb40      	ldmia	r3!, {r6}
 800b370:	9304      	str	r3, [sp, #16]
 800b372:	ab12      	add	r3, sp, #72	; 0x48
 800b374:	70df      	strb	r7, [r3, #3]
 800b376:	9b05      	ldr	r3, [sp, #20]
 800b378:	3301      	adds	r3, #1
 800b37a:	d100      	bne.n	800b37e <_vfiprintf_r+0x46e>
 800b37c:	e0ea      	b.n	800b554 <_vfiprintf_r+0x644>
 800b37e:	0039      	movs	r1, r7
 800b380:	0030      	movs	r0, r6
 800b382:	9a05      	ldr	r2, [sp, #20]
 800b384:	f7fe fd8f 	bl	8009ea6 <memchr>
 800b388:	900b      	str	r0, [sp, #44]	; 0x2c
 800b38a:	42b8      	cmp	r0, r7
 800b38c:	d002      	beq.n	800b394 <_vfiprintf_r+0x484>
 800b38e:	1b83      	subs	r3, r0, r6
 800b390:	9305      	str	r3, [sp, #20]
 800b392:	970b      	str	r7, [sp, #44]	; 0x2c
 800b394:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800b396:	9a05      	ldr	r2, [sp, #20]
 800b398:	930a      	str	r3, [sp, #40]	; 0x28
 800b39a:	4293      	cmp	r3, r2
 800b39c:	da00      	bge.n	800b3a0 <_vfiprintf_r+0x490>
 800b39e:	920a      	str	r2, [sp, #40]	; 0x28
 800b3a0:	ab12      	add	r3, sp, #72	; 0x48
 800b3a2:	3303      	adds	r3, #3
 800b3a4:	781b      	ldrb	r3, [r3, #0]
 800b3a6:	1e5a      	subs	r2, r3, #1
 800b3a8:	4193      	sbcs	r3, r2
 800b3aa:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800b3ac:	18d3      	adds	r3, r2, r3
 800b3ae:	930a      	str	r3, [sp, #40]	; 0x28
 800b3b0:	0022      	movs	r2, r4
 800b3b2:	2302      	movs	r3, #2
 800b3b4:	401a      	ands	r2, r3
 800b3b6:	9210      	str	r2, [sp, #64]	; 0x40
 800b3b8:	421c      	tst	r4, r3
 800b3ba:	d002      	beq.n	800b3c2 <_vfiprintf_r+0x4b2>
 800b3bc:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800b3be:	3302      	adds	r3, #2
 800b3c0:	930a      	str	r3, [sp, #40]	; 0x28
 800b3c2:	2384      	movs	r3, #132	; 0x84
 800b3c4:	0022      	movs	r2, r4
 800b3c6:	401a      	ands	r2, r3
 800b3c8:	9211      	str	r2, [sp, #68]	; 0x44
 800b3ca:	421c      	tst	r4, r3
 800b3cc:	d11e      	bne.n	800b40c <_vfiprintf_r+0x4fc>
 800b3ce:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b3d0:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800b3d2:	1a9f      	subs	r7, r3, r2
 800b3d4:	2f00      	cmp	r7, #0
 800b3d6:	dd19      	ble.n	800b40c <_vfiprintf_r+0x4fc>
 800b3d8:	0029      	movs	r1, r5
 800b3da:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800b3dc:	489a      	ldr	r0, [pc, #616]	; (800b648 <_vfiprintf_r+0x738>)
 800b3de:	9a16      	ldr	r2, [sp, #88]	; 0x58
 800b3e0:	3301      	adds	r3, #1
 800b3e2:	3108      	adds	r1, #8
 800b3e4:	6028      	str	r0, [r5, #0]
 800b3e6:	2f10      	cmp	r7, #16
 800b3e8:	dd00      	ble.n	800b3ec <_vfiprintf_r+0x4dc>
 800b3ea:	e1a7      	b.n	800b73c <_vfiprintf_r+0x82c>
 800b3ec:	606f      	str	r7, [r5, #4]
 800b3ee:	18bf      	adds	r7, r7, r2
 800b3f0:	000d      	movs	r5, r1
 800b3f2:	9716      	str	r7, [sp, #88]	; 0x58
 800b3f4:	9315      	str	r3, [sp, #84]	; 0x54
 800b3f6:	2b07      	cmp	r3, #7
 800b3f8:	dd08      	ble.n	800b40c <_vfiprintf_r+0x4fc>
 800b3fa:	9903      	ldr	r1, [sp, #12]
 800b3fc:	9806      	ldr	r0, [sp, #24]
 800b3fe:	aa14      	add	r2, sp, #80	; 0x50
 800b400:	f7ff fd52 	bl	800aea8 <__sprint_r>
 800b404:	2800      	cmp	r0, #0
 800b406:	d000      	beq.n	800b40a <_vfiprintf_r+0x4fa>
 800b408:	e1eb      	b.n	800b7e2 <_vfiprintf_r+0x8d2>
 800b40a:	ad17      	add	r5, sp, #92	; 0x5c
 800b40c:	a912      	add	r1, sp, #72	; 0x48
 800b40e:	78c8      	ldrb	r0, [r1, #3]
 800b410:	9a16      	ldr	r2, [sp, #88]	; 0x58
 800b412:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800b414:	3103      	adds	r1, #3
 800b416:	2800      	cmp	r0, #0
 800b418:	d012      	beq.n	800b440 <_vfiprintf_r+0x530>
 800b41a:	6029      	str	r1, [r5, #0]
 800b41c:	2101      	movs	r1, #1
 800b41e:	3301      	adds	r3, #1
 800b420:	1852      	adds	r2, r2, r1
 800b422:	6069      	str	r1, [r5, #4]
 800b424:	9216      	str	r2, [sp, #88]	; 0x58
 800b426:	9315      	str	r3, [sp, #84]	; 0x54
 800b428:	3508      	adds	r5, #8
 800b42a:	2b07      	cmp	r3, #7
 800b42c:	dd08      	ble.n	800b440 <_vfiprintf_r+0x530>
 800b42e:	9903      	ldr	r1, [sp, #12]
 800b430:	9806      	ldr	r0, [sp, #24]
 800b432:	aa14      	add	r2, sp, #80	; 0x50
 800b434:	f7ff fd38 	bl	800aea8 <__sprint_r>
 800b438:	2800      	cmp	r0, #0
 800b43a:	d000      	beq.n	800b43e <_vfiprintf_r+0x52e>
 800b43c:	e1d1      	b.n	800b7e2 <_vfiprintf_r+0x8d2>
 800b43e:	ad17      	add	r5, sp, #92	; 0x5c
 800b440:	9910      	ldr	r1, [sp, #64]	; 0x40
 800b442:	9a16      	ldr	r2, [sp, #88]	; 0x58
 800b444:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800b446:	2900      	cmp	r1, #0
 800b448:	d013      	beq.n	800b472 <_vfiprintf_r+0x562>
 800b44a:	a913      	add	r1, sp, #76	; 0x4c
 800b44c:	6029      	str	r1, [r5, #0]
 800b44e:	2102      	movs	r1, #2
 800b450:	3301      	adds	r3, #1
 800b452:	1852      	adds	r2, r2, r1
 800b454:	6069      	str	r1, [r5, #4]
 800b456:	9216      	str	r2, [sp, #88]	; 0x58
 800b458:	9315      	str	r3, [sp, #84]	; 0x54
 800b45a:	3508      	adds	r5, #8
 800b45c:	2b07      	cmp	r3, #7
 800b45e:	dd08      	ble.n	800b472 <_vfiprintf_r+0x562>
 800b460:	9903      	ldr	r1, [sp, #12]
 800b462:	9806      	ldr	r0, [sp, #24]
 800b464:	aa14      	add	r2, sp, #80	; 0x50
 800b466:	f7ff fd1f 	bl	800aea8 <__sprint_r>
 800b46a:	2800      	cmp	r0, #0
 800b46c:	d000      	beq.n	800b470 <_vfiprintf_r+0x560>
 800b46e:	e1b8      	b.n	800b7e2 <_vfiprintf_r+0x8d2>
 800b470:	ad17      	add	r5, sp, #92	; 0x5c
 800b472:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800b474:	2b80      	cmp	r3, #128	; 0x80
 800b476:	d11e      	bne.n	800b4b6 <_vfiprintf_r+0x5a6>
 800b478:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b47a:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800b47c:	1a9f      	subs	r7, r3, r2
 800b47e:	2f00      	cmp	r7, #0
 800b480:	dd19      	ble.n	800b4b6 <_vfiprintf_r+0x5a6>
 800b482:	0029      	movs	r1, r5
 800b484:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800b486:	4871      	ldr	r0, [pc, #452]	; (800b64c <_vfiprintf_r+0x73c>)
 800b488:	9a16      	ldr	r2, [sp, #88]	; 0x58
 800b48a:	3301      	adds	r3, #1
 800b48c:	3108      	adds	r1, #8
 800b48e:	6028      	str	r0, [r5, #0]
 800b490:	2f10      	cmp	r7, #16
 800b492:	dd00      	ble.n	800b496 <_vfiprintf_r+0x586>
 800b494:	e164      	b.n	800b760 <_vfiprintf_r+0x850>
 800b496:	606f      	str	r7, [r5, #4]
 800b498:	18bf      	adds	r7, r7, r2
 800b49a:	000d      	movs	r5, r1
 800b49c:	9716      	str	r7, [sp, #88]	; 0x58
 800b49e:	9315      	str	r3, [sp, #84]	; 0x54
 800b4a0:	2b07      	cmp	r3, #7
 800b4a2:	dd08      	ble.n	800b4b6 <_vfiprintf_r+0x5a6>
 800b4a4:	9903      	ldr	r1, [sp, #12]
 800b4a6:	9806      	ldr	r0, [sp, #24]
 800b4a8:	aa14      	add	r2, sp, #80	; 0x50
 800b4aa:	f7ff fcfd 	bl	800aea8 <__sprint_r>
 800b4ae:	2800      	cmp	r0, #0
 800b4b0:	d000      	beq.n	800b4b4 <_vfiprintf_r+0x5a4>
 800b4b2:	e196      	b.n	800b7e2 <_vfiprintf_r+0x8d2>
 800b4b4:	ad17      	add	r5, sp, #92	; 0x5c
 800b4b6:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800b4b8:	9a05      	ldr	r2, [sp, #20]
 800b4ba:	1a9f      	subs	r7, r3, r2
 800b4bc:	2f00      	cmp	r7, #0
 800b4be:	dd19      	ble.n	800b4f4 <_vfiprintf_r+0x5e4>
 800b4c0:	0029      	movs	r1, r5
 800b4c2:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800b4c4:	4861      	ldr	r0, [pc, #388]	; (800b64c <_vfiprintf_r+0x73c>)
 800b4c6:	9a16      	ldr	r2, [sp, #88]	; 0x58
 800b4c8:	3301      	adds	r3, #1
 800b4ca:	3108      	adds	r1, #8
 800b4cc:	6028      	str	r0, [r5, #0]
 800b4ce:	2f10      	cmp	r7, #16
 800b4d0:	dd00      	ble.n	800b4d4 <_vfiprintf_r+0x5c4>
 800b4d2:	e157      	b.n	800b784 <_vfiprintf_r+0x874>
 800b4d4:	606f      	str	r7, [r5, #4]
 800b4d6:	18bf      	adds	r7, r7, r2
 800b4d8:	000d      	movs	r5, r1
 800b4da:	9716      	str	r7, [sp, #88]	; 0x58
 800b4dc:	9315      	str	r3, [sp, #84]	; 0x54
 800b4de:	2b07      	cmp	r3, #7
 800b4e0:	dd08      	ble.n	800b4f4 <_vfiprintf_r+0x5e4>
 800b4e2:	9903      	ldr	r1, [sp, #12]
 800b4e4:	9806      	ldr	r0, [sp, #24]
 800b4e6:	aa14      	add	r2, sp, #80	; 0x50
 800b4e8:	f7ff fcde 	bl	800aea8 <__sprint_r>
 800b4ec:	2800      	cmp	r0, #0
 800b4ee:	d000      	beq.n	800b4f2 <_vfiprintf_r+0x5e2>
 800b4f0:	e177      	b.n	800b7e2 <_vfiprintf_r+0x8d2>
 800b4f2:	ad17      	add	r5, sp, #92	; 0x5c
 800b4f4:	9b05      	ldr	r3, [sp, #20]
 800b4f6:	9a05      	ldr	r2, [sp, #20]
 800b4f8:	606b      	str	r3, [r5, #4]
 800b4fa:	9b16      	ldr	r3, [sp, #88]	; 0x58
 800b4fc:	602e      	str	r6, [r5, #0]
 800b4fe:	189b      	adds	r3, r3, r2
 800b500:	9316      	str	r3, [sp, #88]	; 0x58
 800b502:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800b504:	3508      	adds	r5, #8
 800b506:	3301      	adds	r3, #1
 800b508:	9315      	str	r3, [sp, #84]	; 0x54
 800b50a:	2b07      	cmp	r3, #7
 800b50c:	dd08      	ble.n	800b520 <_vfiprintf_r+0x610>
 800b50e:	9903      	ldr	r1, [sp, #12]
 800b510:	9806      	ldr	r0, [sp, #24]
 800b512:	aa14      	add	r2, sp, #80	; 0x50
 800b514:	f7ff fcc8 	bl	800aea8 <__sprint_r>
 800b518:	2800      	cmp	r0, #0
 800b51a:	d000      	beq.n	800b51e <_vfiprintf_r+0x60e>
 800b51c:	e161      	b.n	800b7e2 <_vfiprintf_r+0x8d2>
 800b51e:	ad17      	add	r5, sp, #92	; 0x5c
 800b520:	0764      	lsls	r4, r4, #29
 800b522:	d500      	bpl.n	800b526 <_vfiprintf_r+0x616>
 800b524:	e140      	b.n	800b7a8 <_vfiprintf_r+0x898>
 800b526:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b528:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800b52a:	4293      	cmp	r3, r2
 800b52c:	da00      	bge.n	800b530 <_vfiprintf_r+0x620>
 800b52e:	0013      	movs	r3, r2
 800b530:	9a08      	ldr	r2, [sp, #32]
 800b532:	18d3      	adds	r3, r2, r3
 800b534:	9308      	str	r3, [sp, #32]
 800b536:	9b16      	ldr	r3, [sp, #88]	; 0x58
 800b538:	2b00      	cmp	r3, #0
 800b53a:	d007      	beq.n	800b54c <_vfiprintf_r+0x63c>
 800b53c:	9903      	ldr	r1, [sp, #12]
 800b53e:	9806      	ldr	r0, [sp, #24]
 800b540:	aa14      	add	r2, sp, #80	; 0x50
 800b542:	f7ff fcb1 	bl	800aea8 <__sprint_r>
 800b546:	2800      	cmp	r0, #0
 800b548:	d000      	beq.n	800b54c <_vfiprintf_r+0x63c>
 800b54a:	e14a      	b.n	800b7e2 <_vfiprintf_r+0x8d2>
 800b54c:	2300      	movs	r3, #0
 800b54e:	ad17      	add	r5, sp, #92	; 0x5c
 800b550:	9315      	str	r3, [sp, #84]	; 0x54
 800b552:	e6b7      	b.n	800b2c4 <_vfiprintf_r+0x3b4>
 800b554:	0030      	movs	r0, r6
 800b556:	f7f4 fdd5 	bl	8000104 <strlen>
 800b55a:	9005      	str	r0, [sp, #20]
 800b55c:	e719      	b.n	800b392 <_vfiprintf_r+0x482>
 800b55e:	2310      	movs	r3, #16
 800b560:	431c      	orrs	r4, r3
 800b562:	2320      	movs	r3, #32
 800b564:	0020      	movs	r0, r4
 800b566:	4018      	ands	r0, r3
 800b568:	421c      	tst	r4, r3
 800b56a:	d009      	beq.n	800b580 <_vfiprintf_r+0x670>
 800b56c:	3b19      	subs	r3, #25
 800b56e:	3707      	adds	r7, #7
 800b570:	439f      	bics	r7, r3
 800b572:	0039      	movs	r1, r7
 800b574:	c90c      	ldmia	r1!, {r2, r3}
 800b576:	9200      	str	r2, [sp, #0]
 800b578:	9301      	str	r3, [sp, #4]
 800b57a:	9104      	str	r1, [sp, #16]
 800b57c:	2301      	movs	r3, #1
 800b57e:	e6c7      	b.n	800b310 <_vfiprintf_r+0x400>
 800b580:	003b      	movs	r3, r7
 800b582:	cb04      	ldmia	r3!, {r2}
 800b584:	0021      	movs	r1, r4
 800b586:	9304      	str	r3, [sp, #16]
 800b588:	2310      	movs	r3, #16
 800b58a:	4019      	ands	r1, r3
 800b58c:	421c      	tst	r4, r3
 800b58e:	d003      	beq.n	800b598 <_vfiprintf_r+0x688>
 800b590:	9200      	str	r2, [sp, #0]
 800b592:	9001      	str	r0, [sp, #4]
 800b594:	3b0f      	subs	r3, #15
 800b596:	e6bb      	b.n	800b310 <_vfiprintf_r+0x400>
 800b598:	2340      	movs	r3, #64	; 0x40
 800b59a:	0020      	movs	r0, r4
 800b59c:	4018      	ands	r0, r3
 800b59e:	421c      	tst	r4, r3
 800b5a0:	d003      	beq.n	800b5aa <_vfiprintf_r+0x69a>
 800b5a2:	b293      	uxth	r3, r2
 800b5a4:	9300      	str	r3, [sp, #0]
 800b5a6:	9101      	str	r1, [sp, #4]
 800b5a8:	e7e8      	b.n	800b57c <_vfiprintf_r+0x66c>
 800b5aa:	2380      	movs	r3, #128	; 0x80
 800b5ac:	0021      	movs	r1, r4
 800b5ae:	009b      	lsls	r3, r3, #2
 800b5b0:	4019      	ands	r1, r3
 800b5b2:	421c      	tst	r4, r3
 800b5b4:	d003      	beq.n	800b5be <_vfiprintf_r+0x6ae>
 800b5b6:	b2d3      	uxtb	r3, r2
 800b5b8:	9300      	str	r3, [sp, #0]
 800b5ba:	9001      	str	r0, [sp, #4]
 800b5bc:	e7de      	b.n	800b57c <_vfiprintf_r+0x66c>
 800b5be:	9200      	str	r2, [sp, #0]
 800b5c0:	e7f1      	b.n	800b5a6 <_vfiprintf_r+0x696>
 800b5c2:	4a23      	ldr	r2, [pc, #140]	; (800b650 <_vfiprintf_r+0x740>)
 800b5c4:	0020      	movs	r0, r4
 800b5c6:	920c      	str	r2, [sp, #48]	; 0x30
 800b5c8:	2220      	movs	r2, #32
 800b5ca:	4010      	ands	r0, r2
 800b5cc:	4214      	tst	r4, r2
 800b5ce:	d019      	beq.n	800b604 <_vfiprintf_r+0x6f4>
 800b5d0:	3a19      	subs	r2, #25
 800b5d2:	3707      	adds	r7, #7
 800b5d4:	4397      	bics	r7, r2
 800b5d6:	0038      	movs	r0, r7
 800b5d8:	c806      	ldmia	r0!, {r1, r2}
 800b5da:	9100      	str	r1, [sp, #0]
 800b5dc:	9201      	str	r2, [sp, #4]
 800b5de:	9004      	str	r0, [sp, #16]
 800b5e0:	07e2      	lsls	r2, r4, #31
 800b5e2:	d509      	bpl.n	800b5f8 <_vfiprintf_r+0x6e8>
 800b5e4:	9a00      	ldr	r2, [sp, #0]
 800b5e6:	9901      	ldr	r1, [sp, #4]
 800b5e8:	430a      	orrs	r2, r1
 800b5ea:	d005      	beq.n	800b5f8 <_vfiprintf_r+0x6e8>
 800b5ec:	aa13      	add	r2, sp, #76	; 0x4c
 800b5ee:	2130      	movs	r1, #48	; 0x30
 800b5f0:	7053      	strb	r3, [r2, #1]
 800b5f2:	2302      	movs	r3, #2
 800b5f4:	7011      	strb	r1, [r2, #0]
 800b5f6:	431c      	orrs	r4, r3
 800b5f8:	4b10      	ldr	r3, [pc, #64]	; (800b63c <_vfiprintf_r+0x72c>)
 800b5fa:	401c      	ands	r4, r3
 800b5fc:	2302      	movs	r3, #2
 800b5fe:	e687      	b.n	800b310 <_vfiprintf_r+0x400>
 800b600:	4a10      	ldr	r2, [pc, #64]	; (800b644 <_vfiprintf_r+0x734>)
 800b602:	e7df      	b.n	800b5c4 <_vfiprintf_r+0x6b4>
 800b604:	0039      	movs	r1, r7
 800b606:	c904      	ldmia	r1!, {r2}
 800b608:	0026      	movs	r6, r4
 800b60a:	9104      	str	r1, [sp, #16]
 800b60c:	2110      	movs	r1, #16
 800b60e:	400e      	ands	r6, r1
 800b610:	420c      	tst	r4, r1
 800b612:	d002      	beq.n	800b61a <_vfiprintf_r+0x70a>
 800b614:	9200      	str	r2, [sp, #0]
 800b616:	9001      	str	r0, [sp, #4]
 800b618:	e7e2      	b.n	800b5e0 <_vfiprintf_r+0x6d0>
 800b61a:	2140      	movs	r1, #64	; 0x40
 800b61c:	0020      	movs	r0, r4
 800b61e:	4008      	ands	r0, r1
 800b620:	420c      	tst	r4, r1
 800b622:	d003      	beq.n	800b62c <_vfiprintf_r+0x71c>
 800b624:	b292      	uxth	r2, r2
 800b626:	9200      	str	r2, [sp, #0]
 800b628:	9601      	str	r6, [sp, #4]
 800b62a:	e7d9      	b.n	800b5e0 <_vfiprintf_r+0x6d0>
 800b62c:	2180      	movs	r1, #128	; 0x80
 800b62e:	0026      	movs	r6, r4
 800b630:	0089      	lsls	r1, r1, #2
 800b632:	400e      	ands	r6, r1
 800b634:	420c      	tst	r4, r1
 800b636:	d0f6      	beq.n	800b626 <_vfiprintf_r+0x716>
 800b638:	b2d2      	uxtb	r2, r2
 800b63a:	e7eb      	b.n	800b614 <_vfiprintf_r+0x704>
 800b63c:	fffffbff 	.word	0xfffffbff
 800b640:	00007830 	.word	0x00007830
 800b644:	0800de64 	.word	0x0800de64
 800b648:	0800df49 	.word	0x0800df49
 800b64c:	0800df59 	.word	0x0800df59
 800b650:	0800de75 	.word	0x0800de75
 800b654:	9b01      	ldr	r3, [sp, #4]
 800b656:	2b00      	cmp	r3, #0
 800b658:	d109      	bne.n	800b66e <_vfiprintf_r+0x75e>
 800b65a:	9b00      	ldr	r3, [sp, #0]
 800b65c:	2b09      	cmp	r3, #9
 800b65e:	d806      	bhi.n	800b66e <_vfiprintf_r+0x75e>
 800b660:	26b7      	movs	r6, #183	; 0xb7
 800b662:	ab12      	add	r3, sp, #72	; 0x48
 800b664:	18f6      	adds	r6, r6, r3
 800b666:	9b00      	ldr	r3, [sp, #0]
 800b668:	3330      	adds	r3, #48	; 0x30
 800b66a:	7033      	strb	r3, [r6, #0]
 800b66c:	e115      	b.n	800b89a <_vfiprintf_r+0x98a>
 800b66e:	2380      	movs	r3, #128	; 0x80
 800b670:	2400      	movs	r4, #0
 800b672:	00db      	lsls	r3, r3, #3
 800b674:	403b      	ands	r3, r7
 800b676:	ae40      	add	r6, sp, #256	; 0x100
 800b678:	930a      	str	r3, [sp, #40]	; 0x28
 800b67a:	220a      	movs	r2, #10
 800b67c:	9800      	ldr	r0, [sp, #0]
 800b67e:	9901      	ldr	r1, [sp, #4]
 800b680:	2300      	movs	r3, #0
 800b682:	f7f4 ff0f 	bl	80004a4 <__aeabi_uldivmod>
 800b686:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800b688:	3e01      	subs	r6, #1
 800b68a:	3230      	adds	r2, #48	; 0x30
 800b68c:	900b      	str	r0, [sp, #44]	; 0x2c
 800b68e:	9110      	str	r1, [sp, #64]	; 0x40
 800b690:	7032      	strb	r2, [r6, #0]
 800b692:	3401      	adds	r4, #1
 800b694:	2b00      	cmp	r3, #0
 800b696:	d01a      	beq.n	800b6ce <_vfiprintf_r+0x7be>
 800b698:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800b69a:	781b      	ldrb	r3, [r3, #0]
 800b69c:	42a3      	cmp	r3, r4
 800b69e:	d116      	bne.n	800b6ce <_vfiprintf_r+0x7be>
 800b6a0:	2cff      	cmp	r4, #255	; 0xff
 800b6a2:	d014      	beq.n	800b6ce <_vfiprintf_r+0x7be>
 800b6a4:	9b01      	ldr	r3, [sp, #4]
 800b6a6:	2b00      	cmp	r3, #0
 800b6a8:	d102      	bne.n	800b6b0 <_vfiprintf_r+0x7a0>
 800b6aa:	9b00      	ldr	r3, [sp, #0]
 800b6ac:	2b09      	cmp	r3, #9
 800b6ae:	d90e      	bls.n	800b6ce <_vfiprintf_r+0x7be>
 800b6b0:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800b6b2:	990f      	ldr	r1, [sp, #60]	; 0x3c
 800b6b4:	1af6      	subs	r6, r6, r3
 800b6b6:	001a      	movs	r2, r3
 800b6b8:	0030      	movs	r0, r6
 800b6ba:	f7fe fbab 	bl	8009e14 <strncpy>
 800b6be:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800b6c0:	2400      	movs	r4, #0
 800b6c2:	785b      	ldrb	r3, [r3, #1]
 800b6c4:	1e5a      	subs	r2, r3, #1
 800b6c6:	4193      	sbcs	r3, r2
 800b6c8:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800b6ca:	18d3      	adds	r3, r2, r3
 800b6cc:	930d      	str	r3, [sp, #52]	; 0x34
 800b6ce:	9b01      	ldr	r3, [sp, #4]
 800b6d0:	2b00      	cmp	r3, #0
 800b6d2:	d103      	bne.n	800b6dc <_vfiprintf_r+0x7cc>
 800b6d4:	9b00      	ldr	r3, [sp, #0]
 800b6d6:	2b09      	cmp	r3, #9
 800b6d8:	d800      	bhi.n	800b6dc <_vfiprintf_r+0x7cc>
 800b6da:	e0de      	b.n	800b89a <_vfiprintf_r+0x98a>
 800b6dc:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800b6de:	9300      	str	r3, [sp, #0]
 800b6e0:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800b6e2:	9301      	str	r3, [sp, #4]
 800b6e4:	e7c9      	b.n	800b67a <_vfiprintf_r+0x76a>
 800b6e6:	200f      	movs	r0, #15
 800b6e8:	9b00      	ldr	r3, [sp, #0]
 800b6ea:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800b6ec:	4003      	ands	r3, r0
 800b6ee:	5cd3      	ldrb	r3, [r2, r3]
 800b6f0:	3e01      	subs	r6, #1
 800b6f2:	7033      	strb	r3, [r6, #0]
 800b6f4:	9b01      	ldr	r3, [sp, #4]
 800b6f6:	0719      	lsls	r1, r3, #28
 800b6f8:	9b00      	ldr	r3, [sp, #0]
 800b6fa:	091a      	lsrs	r2, r3, #4
 800b6fc:	9b01      	ldr	r3, [sp, #4]
 800b6fe:	4311      	orrs	r1, r2
 800b700:	091b      	lsrs	r3, r3, #4
 800b702:	9301      	str	r3, [sp, #4]
 800b704:	000b      	movs	r3, r1
 800b706:	9a01      	ldr	r2, [sp, #4]
 800b708:	9100      	str	r1, [sp, #0]
 800b70a:	4313      	orrs	r3, r2
 800b70c:	d1ec      	bne.n	800b6e8 <_vfiprintf_r+0x7d8>
 800b70e:	e0c4      	b.n	800b89a <_vfiprintf_r+0x98a>
 800b710:	ae40      	add	r6, sp, #256	; 0x100
 800b712:	2b00      	cmp	r3, #0
 800b714:	d000      	beq.n	800b718 <_vfiprintf_r+0x808>
 800b716:	e0c0      	b.n	800b89a <_vfiprintf_r+0x98a>
 800b718:	07e4      	lsls	r4, r4, #31
 800b71a:	d400      	bmi.n	800b71e <_vfiprintf_r+0x80e>
 800b71c:	e0bd      	b.n	800b89a <_vfiprintf_r+0x98a>
 800b71e:	26b7      	movs	r6, #183	; 0xb7
 800b720:	ab12      	add	r3, sp, #72	; 0x48
 800b722:	18f6      	adds	r6, r6, r3
 800b724:	2330      	movs	r3, #48	; 0x30
 800b726:	e7a0      	b.n	800b66a <_vfiprintf_r+0x75a>
 800b728:	2b00      	cmp	r3, #0
 800b72a:	d100      	bne.n	800b72e <_vfiprintf_r+0x81e>
 800b72c:	e07e      	b.n	800b82c <_vfiprintf_r+0x91c>
 800b72e:	ae27      	add	r6, sp, #156	; 0x9c
 800b730:	7033      	strb	r3, [r6, #0]
 800b732:	2300      	movs	r3, #0
 800b734:	aa12      	add	r2, sp, #72	; 0x48
 800b736:	70d3      	strb	r3, [r2, #3]
 800b738:	9704      	str	r7, [sp, #16]
 800b73a:	e576      	b.n	800b22a <_vfiprintf_r+0x31a>
 800b73c:	2010      	movs	r0, #16
 800b73e:	1812      	adds	r2, r2, r0
 800b740:	6068      	str	r0, [r5, #4]
 800b742:	9216      	str	r2, [sp, #88]	; 0x58
 800b744:	9315      	str	r3, [sp, #84]	; 0x54
 800b746:	2b07      	cmp	r3, #7
 800b748:	dd07      	ble.n	800b75a <_vfiprintf_r+0x84a>
 800b74a:	9903      	ldr	r1, [sp, #12]
 800b74c:	9806      	ldr	r0, [sp, #24]
 800b74e:	aa14      	add	r2, sp, #80	; 0x50
 800b750:	f7ff fbaa 	bl	800aea8 <__sprint_r>
 800b754:	2800      	cmp	r0, #0
 800b756:	d144      	bne.n	800b7e2 <_vfiprintf_r+0x8d2>
 800b758:	a917      	add	r1, sp, #92	; 0x5c
 800b75a:	000d      	movs	r5, r1
 800b75c:	3f10      	subs	r7, #16
 800b75e:	e63b      	b.n	800b3d8 <_vfiprintf_r+0x4c8>
 800b760:	2010      	movs	r0, #16
 800b762:	1812      	adds	r2, r2, r0
 800b764:	6068      	str	r0, [r5, #4]
 800b766:	9216      	str	r2, [sp, #88]	; 0x58
 800b768:	9315      	str	r3, [sp, #84]	; 0x54
 800b76a:	2b07      	cmp	r3, #7
 800b76c:	dd07      	ble.n	800b77e <_vfiprintf_r+0x86e>
 800b76e:	9903      	ldr	r1, [sp, #12]
 800b770:	9806      	ldr	r0, [sp, #24]
 800b772:	aa14      	add	r2, sp, #80	; 0x50
 800b774:	f7ff fb98 	bl	800aea8 <__sprint_r>
 800b778:	2800      	cmp	r0, #0
 800b77a:	d132      	bne.n	800b7e2 <_vfiprintf_r+0x8d2>
 800b77c:	a917      	add	r1, sp, #92	; 0x5c
 800b77e:	000d      	movs	r5, r1
 800b780:	3f10      	subs	r7, #16
 800b782:	e67e      	b.n	800b482 <_vfiprintf_r+0x572>
 800b784:	2010      	movs	r0, #16
 800b786:	1812      	adds	r2, r2, r0
 800b788:	6068      	str	r0, [r5, #4]
 800b78a:	9216      	str	r2, [sp, #88]	; 0x58
 800b78c:	9315      	str	r3, [sp, #84]	; 0x54
 800b78e:	2b07      	cmp	r3, #7
 800b790:	dd07      	ble.n	800b7a2 <_vfiprintf_r+0x892>
 800b792:	9903      	ldr	r1, [sp, #12]
 800b794:	9806      	ldr	r0, [sp, #24]
 800b796:	aa14      	add	r2, sp, #80	; 0x50
 800b798:	f7ff fb86 	bl	800aea8 <__sprint_r>
 800b79c:	2800      	cmp	r0, #0
 800b79e:	d120      	bne.n	800b7e2 <_vfiprintf_r+0x8d2>
 800b7a0:	a917      	add	r1, sp, #92	; 0x5c
 800b7a2:	000d      	movs	r5, r1
 800b7a4:	3f10      	subs	r7, #16
 800b7a6:	e68b      	b.n	800b4c0 <_vfiprintf_r+0x5b0>
 800b7a8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b7aa:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800b7ac:	2610      	movs	r6, #16
 800b7ae:	1a9c      	subs	r4, r3, r2
 800b7b0:	2c00      	cmp	r4, #0
 800b7b2:	dc00      	bgt.n	800b7b6 <_vfiprintf_r+0x8a6>
 800b7b4:	e6b7      	b.n	800b526 <_vfiprintf_r+0x616>
 800b7b6:	9915      	ldr	r1, [sp, #84]	; 0x54
 800b7b8:	4a3b      	ldr	r2, [pc, #236]	; (800b8a8 <_vfiprintf_r+0x998>)
 800b7ba:	9b16      	ldr	r3, [sp, #88]	; 0x58
 800b7bc:	3101      	adds	r1, #1
 800b7be:	602a      	str	r2, [r5, #0]
 800b7c0:	2c10      	cmp	r4, #16
 800b7c2:	dc22      	bgt.n	800b80a <_vfiprintf_r+0x8fa>
 800b7c4:	606c      	str	r4, [r5, #4]
 800b7c6:	18e4      	adds	r4, r4, r3
 800b7c8:	9416      	str	r4, [sp, #88]	; 0x58
 800b7ca:	9115      	str	r1, [sp, #84]	; 0x54
 800b7cc:	2907      	cmp	r1, #7
 800b7ce:	dc00      	bgt.n	800b7d2 <_vfiprintf_r+0x8c2>
 800b7d0:	e6a9      	b.n	800b526 <_vfiprintf_r+0x616>
 800b7d2:	9903      	ldr	r1, [sp, #12]
 800b7d4:	9806      	ldr	r0, [sp, #24]
 800b7d6:	aa14      	add	r2, sp, #80	; 0x50
 800b7d8:	f7ff fb66 	bl	800aea8 <__sprint_r>
 800b7dc:	2800      	cmp	r0, #0
 800b7de:	d100      	bne.n	800b7e2 <_vfiprintf_r+0x8d2>
 800b7e0:	e6a1      	b.n	800b526 <_vfiprintf_r+0x616>
 800b7e2:	9b03      	ldr	r3, [sp, #12]
 800b7e4:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800b7e6:	07db      	lsls	r3, r3, #31
 800b7e8:	d407      	bmi.n	800b7fa <_vfiprintf_r+0x8ea>
 800b7ea:	9b03      	ldr	r3, [sp, #12]
 800b7ec:	899b      	ldrh	r3, [r3, #12]
 800b7ee:	059b      	lsls	r3, r3, #22
 800b7f0:	d403      	bmi.n	800b7fa <_vfiprintf_r+0x8ea>
 800b7f2:	9b03      	ldr	r3, [sp, #12]
 800b7f4:	6d98      	ldr	r0, [r3, #88]	; 0x58
 800b7f6:	f7fc f8fc 	bl	80079f2 <__retarget_lock_release_recursive>
 800b7fa:	9b03      	ldr	r3, [sp, #12]
 800b7fc:	899b      	ldrh	r3, [r3, #12]
 800b7fe:	065b      	lsls	r3, r3, #25
 800b800:	d401      	bmi.n	800b806 <_vfiprintf_r+0x8f6>
 800b802:	f7ff fbc3 	bl	800af8c <_vfiprintf_r+0x7c>
 800b806:	f7ff fbbe 	bl	800af86 <_vfiprintf_r+0x76>
 800b80a:	3310      	adds	r3, #16
 800b80c:	606e      	str	r6, [r5, #4]
 800b80e:	9316      	str	r3, [sp, #88]	; 0x58
 800b810:	9115      	str	r1, [sp, #84]	; 0x54
 800b812:	3508      	adds	r5, #8
 800b814:	2907      	cmp	r1, #7
 800b816:	dd07      	ble.n	800b828 <_vfiprintf_r+0x918>
 800b818:	9903      	ldr	r1, [sp, #12]
 800b81a:	9806      	ldr	r0, [sp, #24]
 800b81c:	aa14      	add	r2, sp, #80	; 0x50
 800b81e:	f7ff fb43 	bl	800aea8 <__sprint_r>
 800b822:	2800      	cmp	r0, #0
 800b824:	d1dd      	bne.n	800b7e2 <_vfiprintf_r+0x8d2>
 800b826:	ad17      	add	r5, sp, #92	; 0x5c
 800b828:	3c10      	subs	r4, #16
 800b82a:	e7c4      	b.n	800b7b6 <_vfiprintf_r+0x8a6>
 800b82c:	9b16      	ldr	r3, [sp, #88]	; 0x58
 800b82e:	2b00      	cmp	r3, #0
 800b830:	d102      	bne.n	800b838 <_vfiprintf_r+0x928>
 800b832:	2300      	movs	r3, #0
 800b834:	9315      	str	r3, [sp, #84]	; 0x54
 800b836:	e7d4      	b.n	800b7e2 <_vfiprintf_r+0x8d2>
 800b838:	9903      	ldr	r1, [sp, #12]
 800b83a:	9806      	ldr	r0, [sp, #24]
 800b83c:	aa14      	add	r2, sp, #80	; 0x50
 800b83e:	f7ff fb33 	bl	800aea8 <__sprint_r>
 800b842:	2800      	cmp	r0, #0
 800b844:	d0f5      	beq.n	800b832 <_vfiprintf_r+0x922>
 800b846:	e7cc      	b.n	800b7e2 <_vfiprintf_r+0x8d2>
 800b848:	0027      	movs	r7, r4
 800b84a:	2a00      	cmp	r2, #0
 800b84c:	d100      	bne.n	800b850 <_vfiprintf_r+0x940>
 800b84e:	e51b      	b.n	800b288 <_vfiprintf_r+0x378>
 800b850:	2b01      	cmp	r3, #1
 800b852:	d100      	bne.n	800b856 <_vfiprintf_r+0x946>
 800b854:	e6fe      	b.n	800b654 <_vfiprintf_r+0x744>
 800b856:	ae40      	add	r6, sp, #256	; 0x100
 800b858:	2b02      	cmp	r3, #2
 800b85a:	d100      	bne.n	800b85e <_vfiprintf_r+0x94e>
 800b85c:	e743      	b.n	800b6e6 <_vfiprintf_r+0x7d6>
 800b85e:	2307      	movs	r3, #7
 800b860:	469c      	mov	ip, r3
 800b862:	4663      	mov	r3, ip
 800b864:	9900      	ldr	r1, [sp, #0]
 800b866:	0032      	movs	r2, r6
 800b868:	400b      	ands	r3, r1
 800b86a:	9901      	ldr	r1, [sp, #4]
 800b86c:	3e01      	subs	r6, #1
 800b86e:	074c      	lsls	r4, r1, #29
 800b870:	9900      	ldr	r1, [sp, #0]
 800b872:	3330      	adds	r3, #48	; 0x30
 800b874:	08c8      	lsrs	r0, r1, #3
 800b876:	9901      	ldr	r1, [sp, #4]
 800b878:	4304      	orrs	r4, r0
 800b87a:	08c9      	lsrs	r1, r1, #3
 800b87c:	9101      	str	r1, [sp, #4]
 800b87e:	0021      	movs	r1, r4
 800b880:	9801      	ldr	r0, [sp, #4]
 800b882:	7033      	strb	r3, [r6, #0]
 800b884:	9400      	str	r4, [sp, #0]
 800b886:	4301      	orrs	r1, r0
 800b888:	d1eb      	bne.n	800b862 <_vfiprintf_r+0x952>
 800b88a:	07f9      	lsls	r1, r7, #31
 800b88c:	d505      	bpl.n	800b89a <_vfiprintf_r+0x98a>
 800b88e:	2b30      	cmp	r3, #48	; 0x30
 800b890:	d003      	beq.n	800b89a <_vfiprintf_r+0x98a>
 800b892:	2330      	movs	r3, #48	; 0x30
 800b894:	3e01      	subs	r6, #1
 800b896:	7033      	strb	r3, [r6, #0]
 800b898:	1e96      	subs	r6, r2, #2
 800b89a:	9b05      	ldr	r3, [sp, #20]
 800b89c:	003c      	movs	r4, r7
 800b89e:	930b      	str	r3, [sp, #44]	; 0x2c
 800b8a0:	ab40      	add	r3, sp, #256	; 0x100
 800b8a2:	1b9b      	subs	r3, r3, r6
 800b8a4:	9305      	str	r3, [sp, #20]
 800b8a6:	e575      	b.n	800b394 <_vfiprintf_r+0x484>
 800b8a8:	0800df49 	.word	0x0800df49

0800b8ac <__sbprintf>:
 800b8ac:	b5f0      	push	{r4, r5, r6, r7, lr}
 800b8ae:	0015      	movs	r5, r2
 800b8b0:	2202      	movs	r2, #2
 800b8b2:	4c1e      	ldr	r4, [pc, #120]	; (800b92c <__sbprintf+0x80>)
 800b8b4:	001f      	movs	r7, r3
 800b8b6:	898b      	ldrh	r3, [r1, #12]
 800b8b8:	44a5      	add	sp, r4
 800b8ba:	4393      	bics	r3, r2
 800b8bc:	466a      	mov	r2, sp
 800b8be:	8193      	strh	r3, [r2, #12]
 800b8c0:	6e4b      	ldr	r3, [r1, #100]	; 0x64
 800b8c2:	0006      	movs	r6, r0
 800b8c4:	9319      	str	r3, [sp, #100]	; 0x64
 800b8c6:	89cb      	ldrh	r3, [r1, #14]
 800b8c8:	a816      	add	r0, sp, #88	; 0x58
 800b8ca:	81d3      	strh	r3, [r2, #14]
 800b8cc:	69cb      	ldr	r3, [r1, #28]
 800b8ce:	000c      	movs	r4, r1
 800b8d0:	9307      	str	r3, [sp, #28]
 800b8d2:	6a4b      	ldr	r3, [r1, #36]	; 0x24
 800b8d4:	9309      	str	r3, [sp, #36]	; 0x24
 800b8d6:	ab1a      	add	r3, sp, #104	; 0x68
 800b8d8:	9300      	str	r3, [sp, #0]
 800b8da:	9304      	str	r3, [sp, #16]
 800b8dc:	2380      	movs	r3, #128	; 0x80
 800b8de:	00db      	lsls	r3, r3, #3
 800b8e0:	9302      	str	r3, [sp, #8]
 800b8e2:	9305      	str	r3, [sp, #20]
 800b8e4:	2300      	movs	r3, #0
 800b8e6:	9306      	str	r3, [sp, #24]
 800b8e8:	f7fc f880 	bl	80079ec <__retarget_lock_init_recursive>
 800b8ec:	002a      	movs	r2, r5
 800b8ee:	003b      	movs	r3, r7
 800b8f0:	4669      	mov	r1, sp
 800b8f2:	0030      	movs	r0, r6
 800b8f4:	f7ff fb0c 	bl	800af10 <_vfiprintf_r>
 800b8f8:	1e05      	subs	r5, r0, #0
 800b8fa:	db07      	blt.n	800b90c <__sbprintf+0x60>
 800b8fc:	4669      	mov	r1, sp
 800b8fe:	0030      	movs	r0, r6
 800b900:	f7fe fa62 	bl	8009dc8 <_fflush_r>
 800b904:	2800      	cmp	r0, #0
 800b906:	d001      	beq.n	800b90c <__sbprintf+0x60>
 800b908:	2501      	movs	r5, #1
 800b90a:	426d      	negs	r5, r5
 800b90c:	466b      	mov	r3, sp
 800b90e:	899a      	ldrh	r2, [r3, #12]
 800b910:	2340      	movs	r3, #64	; 0x40
 800b912:	421a      	tst	r2, r3
 800b914:	d002      	beq.n	800b91c <__sbprintf+0x70>
 800b916:	89a2      	ldrh	r2, [r4, #12]
 800b918:	4313      	orrs	r3, r2
 800b91a:	81a3      	strh	r3, [r4, #12]
 800b91c:	9816      	ldr	r0, [sp, #88]	; 0x58
 800b91e:	f7fc f866 	bl	80079ee <__retarget_lock_close_recursive>
 800b922:	0028      	movs	r0, r5
 800b924:	4b02      	ldr	r3, [pc, #8]	; (800b930 <__sbprintf+0x84>)
 800b926:	449d      	add	sp, r3
 800b928:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800b92a:	46c0      	nop			; (mov r8, r8)
 800b92c:	fffffb94 	.word	0xfffffb94
 800b930:	0000046c 	.word	0x0000046c

0800b934 <__sfvwrite_r>:
 800b934:	b5f0      	push	{r4, r5, r6, r7, lr}
 800b936:	6893      	ldr	r3, [r2, #8]
 800b938:	b087      	sub	sp, #28
 800b93a:	000c      	movs	r4, r1
 800b93c:	9002      	str	r0, [sp, #8]
 800b93e:	9204      	str	r2, [sp, #16]
 800b940:	2b00      	cmp	r3, #0
 800b942:	d102      	bne.n	800b94a <__sfvwrite_r+0x16>
 800b944:	2000      	movs	r0, #0
 800b946:	b007      	add	sp, #28
 800b948:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800b94a:	898b      	ldrh	r3, [r1, #12]
 800b94c:	071b      	lsls	r3, r3, #28
 800b94e:	d557      	bpl.n	800ba00 <__sfvwrite_r+0xcc>
 800b950:	690b      	ldr	r3, [r1, #16]
 800b952:	2b00      	cmp	r3, #0
 800b954:	d054      	beq.n	800ba00 <__sfvwrite_r+0xcc>
 800b956:	9b04      	ldr	r3, [sp, #16]
 800b958:	2202      	movs	r2, #2
 800b95a:	681b      	ldr	r3, [r3, #0]
 800b95c:	9301      	str	r3, [sp, #4]
 800b95e:	89a3      	ldrh	r3, [r4, #12]
 800b960:	001f      	movs	r7, r3
 800b962:	4017      	ands	r7, r2
 800b964:	4213      	tst	r3, r2
 800b966:	d171      	bne.n	800ba4c <__sfvwrite_r+0x118>
 800b968:	2201      	movs	r2, #1
 800b96a:	2101      	movs	r1, #1
 800b96c:	401a      	ands	r2, r3
 800b96e:	420b      	tst	r3, r1
 800b970:	d100      	bne.n	800b974 <__sfvwrite_r+0x40>
 800b972:	e0a5      	b.n	800bac0 <__sfvwrite_r+0x18c>
 800b974:	0038      	movs	r0, r7
 800b976:	003e      	movs	r6, r7
 800b978:	9703      	str	r7, [sp, #12]
 800b97a:	9b03      	ldr	r3, [sp, #12]
 800b97c:	2b00      	cmp	r3, #0
 800b97e:	d100      	bne.n	800b982 <__sfvwrite_r+0x4e>
 800b980:	e10b      	b.n	800bb9a <__sfvwrite_r+0x266>
 800b982:	2800      	cmp	r0, #0
 800b984:	d10a      	bne.n	800b99c <__sfvwrite_r+0x68>
 800b986:	001a      	movs	r2, r3
 800b988:	210a      	movs	r1, #10
 800b98a:	0030      	movs	r0, r6
 800b98c:	f7fe fa8b 	bl	8009ea6 <memchr>
 800b990:	9b03      	ldr	r3, [sp, #12]
 800b992:	1c5f      	adds	r7, r3, #1
 800b994:	2800      	cmp	r0, #0
 800b996:	d001      	beq.n	800b99c <__sfvwrite_r+0x68>
 800b998:	3001      	adds	r0, #1
 800b99a:	1b87      	subs	r7, r0, r6
 800b99c:	9b03      	ldr	r3, [sp, #12]
 800b99e:	9705      	str	r7, [sp, #20]
 800b9a0:	429f      	cmp	r7, r3
 800b9a2:	d900      	bls.n	800b9a6 <__sfvwrite_r+0x72>
 800b9a4:	9305      	str	r3, [sp, #20]
 800b9a6:	6820      	ldr	r0, [r4, #0]
 800b9a8:	6922      	ldr	r2, [r4, #16]
 800b9aa:	68a5      	ldr	r5, [r4, #8]
 800b9ac:	6963      	ldr	r3, [r4, #20]
 800b9ae:	4290      	cmp	r0, r2
 800b9b0:	d800      	bhi.n	800b9b4 <__sfvwrite_r+0x80>
 800b9b2:	e0fb      	b.n	800bbac <__sfvwrite_r+0x278>
 800b9b4:	9a05      	ldr	r2, [sp, #20]
 800b9b6:	18ed      	adds	r5, r5, r3
 800b9b8:	42aa      	cmp	r2, r5
 800b9ba:	dc00      	bgt.n	800b9be <__sfvwrite_r+0x8a>
 800b9bc:	e0f6      	b.n	800bbac <__sfvwrite_r+0x278>
 800b9be:	0031      	movs	r1, r6
 800b9c0:	002a      	movs	r2, r5
 800b9c2:	f000 f9e0 	bl	800bd86 <memmove>
 800b9c6:	6823      	ldr	r3, [r4, #0]
 800b9c8:	0021      	movs	r1, r4
 800b9ca:	195b      	adds	r3, r3, r5
 800b9cc:	9802      	ldr	r0, [sp, #8]
 800b9ce:	6023      	str	r3, [r4, #0]
 800b9d0:	f7fe f9fa 	bl	8009dc8 <_fflush_r>
 800b9d4:	2800      	cmp	r0, #0
 800b9d6:	d16e      	bne.n	800bab6 <__sfvwrite_r+0x182>
 800b9d8:	2001      	movs	r0, #1
 800b9da:	1b7f      	subs	r7, r7, r5
 800b9dc:	d105      	bne.n	800b9ea <__sfvwrite_r+0xb6>
 800b9de:	0021      	movs	r1, r4
 800b9e0:	9802      	ldr	r0, [sp, #8]
 800b9e2:	f7fe f9f1 	bl	8009dc8 <_fflush_r>
 800b9e6:	2800      	cmp	r0, #0
 800b9e8:	d165      	bne.n	800bab6 <__sfvwrite_r+0x182>
 800b9ea:	9b03      	ldr	r3, [sp, #12]
 800b9ec:	9a04      	ldr	r2, [sp, #16]
 800b9ee:	1b5b      	subs	r3, r3, r5
 800b9f0:	9303      	str	r3, [sp, #12]
 800b9f2:	9b04      	ldr	r3, [sp, #16]
 800b9f4:	1976      	adds	r6, r6, r5
 800b9f6:	689b      	ldr	r3, [r3, #8]
 800b9f8:	1b5b      	subs	r3, r3, r5
 800b9fa:	6093      	str	r3, [r2, #8]
 800b9fc:	d1bd      	bne.n	800b97a <__sfvwrite_r+0x46>
 800b9fe:	e7a1      	b.n	800b944 <__sfvwrite_r+0x10>
 800ba00:	0021      	movs	r1, r4
 800ba02:	9802      	ldr	r0, [sp, #8]
 800ba04:	f000 f8f4 	bl	800bbf0 <__swsetup_r>
 800ba08:	2800      	cmp	r0, #0
 800ba0a:	d0a4      	beq.n	800b956 <__sfvwrite_r+0x22>
 800ba0c:	2001      	movs	r0, #1
 800ba0e:	4240      	negs	r0, r0
 800ba10:	e799      	b.n	800b946 <__sfvwrite_r+0x12>
 800ba12:	9b01      	ldr	r3, [sp, #4]
 800ba14:	681e      	ldr	r6, [r3, #0]
 800ba16:	685d      	ldr	r5, [r3, #4]
 800ba18:	3308      	adds	r3, #8
 800ba1a:	9301      	str	r3, [sp, #4]
 800ba1c:	6a67      	ldr	r7, [r4, #36]	; 0x24
 800ba1e:	69e1      	ldr	r1, [r4, #28]
 800ba20:	2d00      	cmp	r5, #0
 800ba22:	d0f6      	beq.n	800ba12 <__sfvwrite_r+0xde>
 800ba24:	4a6e      	ldr	r2, [pc, #440]	; (800bbe0 <__sfvwrite_r+0x2ac>)
 800ba26:	002b      	movs	r3, r5
 800ba28:	4295      	cmp	r5, r2
 800ba2a:	d900      	bls.n	800ba2e <__sfvwrite_r+0xfa>
 800ba2c:	0013      	movs	r3, r2
 800ba2e:	0032      	movs	r2, r6
 800ba30:	9802      	ldr	r0, [sp, #8]
 800ba32:	47b8      	blx	r7
 800ba34:	2800      	cmp	r0, #0
 800ba36:	dd3e      	ble.n	800bab6 <__sfvwrite_r+0x182>
 800ba38:	9b04      	ldr	r3, [sp, #16]
 800ba3a:	9a04      	ldr	r2, [sp, #16]
 800ba3c:	689b      	ldr	r3, [r3, #8]
 800ba3e:	1836      	adds	r6, r6, r0
 800ba40:	1a1b      	subs	r3, r3, r0
 800ba42:	1a2d      	subs	r5, r5, r0
 800ba44:	6093      	str	r3, [r2, #8]
 800ba46:	2b00      	cmp	r3, #0
 800ba48:	d1e8      	bne.n	800ba1c <__sfvwrite_r+0xe8>
 800ba4a:	e77b      	b.n	800b944 <__sfvwrite_r+0x10>
 800ba4c:	2600      	movs	r6, #0
 800ba4e:	0035      	movs	r5, r6
 800ba50:	e7e4      	b.n	800ba1c <__sfvwrite_r+0xe8>
 800ba52:	9b01      	ldr	r3, [sp, #4]
 800ba54:	681b      	ldr	r3, [r3, #0]
 800ba56:	9303      	str	r3, [sp, #12]
 800ba58:	9b01      	ldr	r3, [sp, #4]
 800ba5a:	685d      	ldr	r5, [r3, #4]
 800ba5c:	3308      	adds	r3, #8
 800ba5e:	9301      	str	r3, [sp, #4]
 800ba60:	220c      	movs	r2, #12
 800ba62:	5ea3      	ldrsh	r3, [r4, r2]
 800ba64:	6820      	ldr	r0, [r4, #0]
 800ba66:	68a6      	ldr	r6, [r4, #8]
 800ba68:	2d00      	cmp	r5, #0
 800ba6a:	d0f2      	beq.n	800ba52 <__sfvwrite_r+0x11e>
 800ba6c:	2180      	movs	r1, #128	; 0x80
 800ba6e:	0089      	lsls	r1, r1, #2
 800ba70:	b29a      	uxth	r2, r3
 800ba72:	420b      	tst	r3, r1
 800ba74:	d062      	beq.n	800bb3c <__sfvwrite_r+0x208>
 800ba76:	42ae      	cmp	r6, r5
 800ba78:	d837      	bhi.n	800baea <__sfvwrite_r+0x1b6>
 800ba7a:	2390      	movs	r3, #144	; 0x90
 800ba7c:	00db      	lsls	r3, r3, #3
 800ba7e:	421a      	tst	r2, r3
 800ba80:	d033      	beq.n	800baea <__sfvwrite_r+0x1b6>
 800ba82:	6921      	ldr	r1, [r4, #16]
 800ba84:	1a43      	subs	r3, r0, r1
 800ba86:	2003      	movs	r0, #3
 800ba88:	9305      	str	r3, [sp, #20]
 800ba8a:	6963      	ldr	r3, [r4, #20]
 800ba8c:	4343      	muls	r3, r0
 800ba8e:	0fdf      	lsrs	r7, r3, #31
 800ba90:	18ff      	adds	r7, r7, r3
 800ba92:	9b05      	ldr	r3, [sp, #20]
 800ba94:	107f      	asrs	r7, r7, #1
 800ba96:	3301      	adds	r3, #1
 800ba98:	195b      	adds	r3, r3, r5
 800ba9a:	42bb      	cmp	r3, r7
 800ba9c:	d900      	bls.n	800baa0 <__sfvwrite_r+0x16c>
 800ba9e:	001f      	movs	r7, r3
 800baa0:	0552      	lsls	r2, r2, #21
 800baa2:	d53c      	bpl.n	800bb1e <__sfvwrite_r+0x1ea>
 800baa4:	0039      	movs	r1, r7
 800baa6:	9802      	ldr	r0, [sp, #8]
 800baa8:	f7fc f8c8 	bl	8007c3c <_malloc_r>
 800baac:	1e06      	subs	r6, r0, #0
 800baae:	d10a      	bne.n	800bac6 <__sfvwrite_r+0x192>
 800bab0:	230c      	movs	r3, #12
 800bab2:	9a02      	ldr	r2, [sp, #8]
 800bab4:	6013      	str	r3, [r2, #0]
 800bab6:	2340      	movs	r3, #64	; 0x40
 800bab8:	89a2      	ldrh	r2, [r4, #12]
 800baba:	4313      	orrs	r3, r2
 800babc:	81a3      	strh	r3, [r4, #12]
 800babe:	e7a5      	b.n	800ba0c <__sfvwrite_r+0xd8>
 800bac0:	0015      	movs	r5, r2
 800bac2:	9203      	str	r2, [sp, #12]
 800bac4:	e7cc      	b.n	800ba60 <__sfvwrite_r+0x12c>
 800bac6:	9a05      	ldr	r2, [sp, #20]
 800bac8:	6921      	ldr	r1, [r4, #16]
 800baca:	f7fb ff93 	bl	80079f4 <memcpy>
 800bace:	89a2      	ldrh	r2, [r4, #12]
 800bad0:	4b44      	ldr	r3, [pc, #272]	; (800bbe4 <__sfvwrite_r+0x2b0>)
 800bad2:	401a      	ands	r2, r3
 800bad4:	2380      	movs	r3, #128	; 0x80
 800bad6:	4313      	orrs	r3, r2
 800bad8:	81a3      	strh	r3, [r4, #12]
 800bada:	9b05      	ldr	r3, [sp, #20]
 800badc:	6126      	str	r6, [r4, #16]
 800bade:	18f6      	adds	r6, r6, r3
 800bae0:	6026      	str	r6, [r4, #0]
 800bae2:	002e      	movs	r6, r5
 800bae4:	6167      	str	r7, [r4, #20]
 800bae6:	1aff      	subs	r7, r7, r3
 800bae8:	60a7      	str	r7, [r4, #8]
 800baea:	002f      	movs	r7, r5
 800baec:	42ae      	cmp	r6, r5
 800baee:	d900      	bls.n	800baf2 <__sfvwrite_r+0x1be>
 800baf0:	002e      	movs	r6, r5
 800baf2:	0032      	movs	r2, r6
 800baf4:	9903      	ldr	r1, [sp, #12]
 800baf6:	6820      	ldr	r0, [r4, #0]
 800baf8:	f000 f945 	bl	800bd86 <memmove>
 800bafc:	68a3      	ldr	r3, [r4, #8]
 800bafe:	1b9b      	subs	r3, r3, r6
 800bb00:	60a3      	str	r3, [r4, #8]
 800bb02:	6823      	ldr	r3, [r4, #0]
 800bb04:	199b      	adds	r3, r3, r6
 800bb06:	6023      	str	r3, [r4, #0]
 800bb08:	9b03      	ldr	r3, [sp, #12]
 800bb0a:	9a04      	ldr	r2, [sp, #16]
 800bb0c:	19db      	adds	r3, r3, r7
 800bb0e:	9303      	str	r3, [sp, #12]
 800bb10:	9b04      	ldr	r3, [sp, #16]
 800bb12:	1bed      	subs	r5, r5, r7
 800bb14:	689b      	ldr	r3, [r3, #8]
 800bb16:	1bdb      	subs	r3, r3, r7
 800bb18:	6093      	str	r3, [r2, #8]
 800bb1a:	d1a1      	bne.n	800ba60 <__sfvwrite_r+0x12c>
 800bb1c:	e712      	b.n	800b944 <__sfvwrite_r+0x10>
 800bb1e:	003a      	movs	r2, r7
 800bb20:	9802      	ldr	r0, [sp, #8]
 800bb22:	f000 f94b 	bl	800bdbc <_realloc_r>
 800bb26:	1e06      	subs	r6, r0, #0
 800bb28:	d1d7      	bne.n	800bada <__sfvwrite_r+0x1a6>
 800bb2a:	6921      	ldr	r1, [r4, #16]
 800bb2c:	9802      	ldr	r0, [sp, #8]
 800bb2e:	f7fb ffd3 	bl	8007ad8 <_free_r>
 800bb32:	2280      	movs	r2, #128	; 0x80
 800bb34:	89a3      	ldrh	r3, [r4, #12]
 800bb36:	4393      	bics	r3, r2
 800bb38:	81a3      	strh	r3, [r4, #12]
 800bb3a:	e7b9      	b.n	800bab0 <__sfvwrite_r+0x17c>
 800bb3c:	6923      	ldr	r3, [r4, #16]
 800bb3e:	4283      	cmp	r3, r0
 800bb40:	d302      	bcc.n	800bb48 <__sfvwrite_r+0x214>
 800bb42:	6967      	ldr	r7, [r4, #20]
 800bb44:	42af      	cmp	r7, r5
 800bb46:	d916      	bls.n	800bb76 <__sfvwrite_r+0x242>
 800bb48:	42ae      	cmp	r6, r5
 800bb4a:	d900      	bls.n	800bb4e <__sfvwrite_r+0x21a>
 800bb4c:	002e      	movs	r6, r5
 800bb4e:	0032      	movs	r2, r6
 800bb50:	9903      	ldr	r1, [sp, #12]
 800bb52:	f000 f918 	bl	800bd86 <memmove>
 800bb56:	68a3      	ldr	r3, [r4, #8]
 800bb58:	6822      	ldr	r2, [r4, #0]
 800bb5a:	1b9b      	subs	r3, r3, r6
 800bb5c:	1992      	adds	r2, r2, r6
 800bb5e:	0037      	movs	r7, r6
 800bb60:	60a3      	str	r3, [r4, #8]
 800bb62:	6022      	str	r2, [r4, #0]
 800bb64:	2b00      	cmp	r3, #0
 800bb66:	d1cf      	bne.n	800bb08 <__sfvwrite_r+0x1d4>
 800bb68:	0021      	movs	r1, r4
 800bb6a:	9802      	ldr	r0, [sp, #8]
 800bb6c:	f7fe f92c 	bl	8009dc8 <_fflush_r>
 800bb70:	2800      	cmp	r0, #0
 800bb72:	d0c9      	beq.n	800bb08 <__sfvwrite_r+0x1d4>
 800bb74:	e79f      	b.n	800bab6 <__sfvwrite_r+0x182>
 800bb76:	4b1c      	ldr	r3, [pc, #112]	; (800bbe8 <__sfvwrite_r+0x2b4>)
 800bb78:	0028      	movs	r0, r5
 800bb7a:	429d      	cmp	r5, r3
 800bb7c:	d900      	bls.n	800bb80 <__sfvwrite_r+0x24c>
 800bb7e:	481b      	ldr	r0, [pc, #108]	; (800bbec <__sfvwrite_r+0x2b8>)
 800bb80:	0039      	movs	r1, r7
 800bb82:	f7f4 fb65 	bl	8000250 <__divsi3>
 800bb86:	003b      	movs	r3, r7
 800bb88:	6a66      	ldr	r6, [r4, #36]	; 0x24
 800bb8a:	4343      	muls	r3, r0
 800bb8c:	9a03      	ldr	r2, [sp, #12]
 800bb8e:	69e1      	ldr	r1, [r4, #28]
 800bb90:	9802      	ldr	r0, [sp, #8]
 800bb92:	47b0      	blx	r6
 800bb94:	1e07      	subs	r7, r0, #0
 800bb96:	dcb7      	bgt.n	800bb08 <__sfvwrite_r+0x1d4>
 800bb98:	e78d      	b.n	800bab6 <__sfvwrite_r+0x182>
 800bb9a:	9b01      	ldr	r3, [sp, #4]
 800bb9c:	2000      	movs	r0, #0
 800bb9e:	681e      	ldr	r6, [r3, #0]
 800bba0:	685b      	ldr	r3, [r3, #4]
 800bba2:	9303      	str	r3, [sp, #12]
 800bba4:	9b01      	ldr	r3, [sp, #4]
 800bba6:	3308      	adds	r3, #8
 800bba8:	9301      	str	r3, [sp, #4]
 800bbaa:	e6e6      	b.n	800b97a <__sfvwrite_r+0x46>
 800bbac:	9a05      	ldr	r2, [sp, #20]
 800bbae:	4293      	cmp	r3, r2
 800bbb0:	dc08      	bgt.n	800bbc4 <__sfvwrite_r+0x290>
 800bbb2:	6a65      	ldr	r5, [r4, #36]	; 0x24
 800bbb4:	0032      	movs	r2, r6
 800bbb6:	69e1      	ldr	r1, [r4, #28]
 800bbb8:	9802      	ldr	r0, [sp, #8]
 800bbba:	47a8      	blx	r5
 800bbbc:	1e05      	subs	r5, r0, #0
 800bbbe:	dd00      	ble.n	800bbc2 <__sfvwrite_r+0x28e>
 800bbc0:	e70a      	b.n	800b9d8 <__sfvwrite_r+0xa4>
 800bbc2:	e778      	b.n	800bab6 <__sfvwrite_r+0x182>
 800bbc4:	9a05      	ldr	r2, [sp, #20]
 800bbc6:	0031      	movs	r1, r6
 800bbc8:	f000 f8dd 	bl	800bd86 <memmove>
 800bbcc:	9a05      	ldr	r2, [sp, #20]
 800bbce:	68a3      	ldr	r3, [r4, #8]
 800bbd0:	0015      	movs	r5, r2
 800bbd2:	1a9b      	subs	r3, r3, r2
 800bbd4:	60a3      	str	r3, [r4, #8]
 800bbd6:	6823      	ldr	r3, [r4, #0]
 800bbd8:	189b      	adds	r3, r3, r2
 800bbda:	6023      	str	r3, [r4, #0]
 800bbdc:	e6fc      	b.n	800b9d8 <__sfvwrite_r+0xa4>
 800bbde:	46c0      	nop			; (mov r8, r8)
 800bbe0:	7ffffc00 	.word	0x7ffffc00
 800bbe4:	fffffb7f 	.word	0xfffffb7f
 800bbe8:	7ffffffe 	.word	0x7ffffffe
 800bbec:	7fffffff 	.word	0x7fffffff

0800bbf0 <__swsetup_r>:
 800bbf0:	4b30      	ldr	r3, [pc, #192]	; (800bcb4 <__swsetup_r+0xc4>)
 800bbf2:	b570      	push	{r4, r5, r6, lr}
 800bbf4:	0005      	movs	r5, r0
 800bbf6:	6818      	ldr	r0, [r3, #0]
 800bbf8:	000c      	movs	r4, r1
 800bbfa:	2800      	cmp	r0, #0
 800bbfc:	d004      	beq.n	800bc08 <__swsetup_r+0x18>
 800bbfe:	6b43      	ldr	r3, [r0, #52]	; 0x34
 800bc00:	2b00      	cmp	r3, #0
 800bc02:	d101      	bne.n	800bc08 <__swsetup_r+0x18>
 800bc04:	f7fb fd96 	bl	8007734 <__sinit>
 800bc08:	230c      	movs	r3, #12
 800bc0a:	5ee2      	ldrsh	r2, [r4, r3]
 800bc0c:	b293      	uxth	r3, r2
 800bc0e:	0711      	lsls	r1, r2, #28
 800bc10:	d423      	bmi.n	800bc5a <__swsetup_r+0x6a>
 800bc12:	06d9      	lsls	r1, r3, #27
 800bc14:	d407      	bmi.n	800bc26 <__swsetup_r+0x36>
 800bc16:	2309      	movs	r3, #9
 800bc18:	2001      	movs	r0, #1
 800bc1a:	602b      	str	r3, [r5, #0]
 800bc1c:	3337      	adds	r3, #55	; 0x37
 800bc1e:	4313      	orrs	r3, r2
 800bc20:	81a3      	strh	r3, [r4, #12]
 800bc22:	4240      	negs	r0, r0
 800bc24:	bd70      	pop	{r4, r5, r6, pc}
 800bc26:	075b      	lsls	r3, r3, #29
 800bc28:	d513      	bpl.n	800bc52 <__swsetup_r+0x62>
 800bc2a:	6b21      	ldr	r1, [r4, #48]	; 0x30
 800bc2c:	2900      	cmp	r1, #0
 800bc2e:	d008      	beq.n	800bc42 <__swsetup_r+0x52>
 800bc30:	0023      	movs	r3, r4
 800bc32:	3340      	adds	r3, #64	; 0x40
 800bc34:	4299      	cmp	r1, r3
 800bc36:	d002      	beq.n	800bc3e <__swsetup_r+0x4e>
 800bc38:	0028      	movs	r0, r5
 800bc3a:	f7fb ff4d 	bl	8007ad8 <_free_r>
 800bc3e:	2300      	movs	r3, #0
 800bc40:	6323      	str	r3, [r4, #48]	; 0x30
 800bc42:	2224      	movs	r2, #36	; 0x24
 800bc44:	89a3      	ldrh	r3, [r4, #12]
 800bc46:	4393      	bics	r3, r2
 800bc48:	81a3      	strh	r3, [r4, #12]
 800bc4a:	2300      	movs	r3, #0
 800bc4c:	6063      	str	r3, [r4, #4]
 800bc4e:	6923      	ldr	r3, [r4, #16]
 800bc50:	6023      	str	r3, [r4, #0]
 800bc52:	2308      	movs	r3, #8
 800bc54:	89a2      	ldrh	r2, [r4, #12]
 800bc56:	4313      	orrs	r3, r2
 800bc58:	81a3      	strh	r3, [r4, #12]
 800bc5a:	6923      	ldr	r3, [r4, #16]
 800bc5c:	2b00      	cmp	r3, #0
 800bc5e:	d10b      	bne.n	800bc78 <__swsetup_r+0x88>
 800bc60:	21a0      	movs	r1, #160	; 0xa0
 800bc62:	2280      	movs	r2, #128	; 0x80
 800bc64:	89a3      	ldrh	r3, [r4, #12]
 800bc66:	0089      	lsls	r1, r1, #2
 800bc68:	0092      	lsls	r2, r2, #2
 800bc6a:	400b      	ands	r3, r1
 800bc6c:	4293      	cmp	r3, r2
 800bc6e:	d003      	beq.n	800bc78 <__swsetup_r+0x88>
 800bc70:	0021      	movs	r1, r4
 800bc72:	0028      	movs	r0, r5
 800bc74:	f000 fa8e 	bl	800c194 <__smakebuf_r>
 800bc78:	220c      	movs	r2, #12
 800bc7a:	5ea3      	ldrsh	r3, [r4, r2]
 800bc7c:	2001      	movs	r0, #1
 800bc7e:	001a      	movs	r2, r3
 800bc80:	b299      	uxth	r1, r3
 800bc82:	4002      	ands	r2, r0
 800bc84:	4203      	tst	r3, r0
 800bc86:	d00f      	beq.n	800bca8 <__swsetup_r+0xb8>
 800bc88:	2200      	movs	r2, #0
 800bc8a:	60a2      	str	r2, [r4, #8]
 800bc8c:	6962      	ldr	r2, [r4, #20]
 800bc8e:	4252      	negs	r2, r2
 800bc90:	61a2      	str	r2, [r4, #24]
 800bc92:	2000      	movs	r0, #0
 800bc94:	6922      	ldr	r2, [r4, #16]
 800bc96:	4282      	cmp	r2, r0
 800bc98:	d1c4      	bne.n	800bc24 <__swsetup_r+0x34>
 800bc9a:	0609      	lsls	r1, r1, #24
 800bc9c:	d5c2      	bpl.n	800bc24 <__swsetup_r+0x34>
 800bc9e:	2240      	movs	r2, #64	; 0x40
 800bca0:	4313      	orrs	r3, r2
 800bca2:	81a3      	strh	r3, [r4, #12]
 800bca4:	3801      	subs	r0, #1
 800bca6:	e7bd      	b.n	800bc24 <__swsetup_r+0x34>
 800bca8:	0788      	lsls	r0, r1, #30
 800bcaa:	d400      	bmi.n	800bcae <__swsetup_r+0xbe>
 800bcac:	6962      	ldr	r2, [r4, #20]
 800bcae:	60a2      	str	r2, [r4, #8]
 800bcb0:	e7ef      	b.n	800bc92 <__swsetup_r+0xa2>
 800bcb2:	46c0      	nop			; (mov r8, r8)
 800bcb4:	200002a8 	.word	0x200002a8

0800bcb8 <__fputwc>:
 800bcb8:	b5f0      	push	{r4, r5, r6, r7, lr}
 800bcba:	b085      	sub	sp, #20
 800bcbc:	000e      	movs	r6, r1
 800bcbe:	0015      	movs	r5, r2
 800bcc0:	9001      	str	r0, [sp, #4]
 800bcc2:	f7fb fe13 	bl	80078ec <__locale_mb_cur_max>
 800bcc6:	0004      	movs	r4, r0
 800bcc8:	2801      	cmp	r0, #1
 800bcca:	d119      	bne.n	800bd00 <__fputwc+0x48>
 800bccc:	1e73      	subs	r3, r6, #1
 800bcce:	2bfe      	cmp	r3, #254	; 0xfe
 800bcd0:	d816      	bhi.n	800bd00 <__fputwc+0x48>
 800bcd2:	ab02      	add	r3, sp, #8
 800bcd4:	711e      	strb	r6, [r3, #4]
 800bcd6:	2700      	movs	r7, #0
 800bcd8:	42a7      	cmp	r7, r4
 800bcda:	d020      	beq.n	800bd1e <__fputwc+0x66>
 800bcdc:	ab03      	add	r3, sp, #12
 800bcde:	5dd9      	ldrb	r1, [r3, r7]
 800bce0:	68ab      	ldr	r3, [r5, #8]
 800bce2:	3b01      	subs	r3, #1
 800bce4:	60ab      	str	r3, [r5, #8]
 800bce6:	2b00      	cmp	r3, #0
 800bce8:	da04      	bge.n	800bcf4 <__fputwc+0x3c>
 800bcea:	69aa      	ldr	r2, [r5, #24]
 800bcec:	4293      	cmp	r3, r2
 800bcee:	db19      	blt.n	800bd24 <__fputwc+0x6c>
 800bcf0:	290a      	cmp	r1, #10
 800bcf2:	d017      	beq.n	800bd24 <__fputwc+0x6c>
 800bcf4:	682b      	ldr	r3, [r5, #0]
 800bcf6:	1c5a      	adds	r2, r3, #1
 800bcf8:	602a      	str	r2, [r5, #0]
 800bcfa:	7019      	strb	r1, [r3, #0]
 800bcfc:	3701      	adds	r7, #1
 800bcfe:	e7eb      	b.n	800bcd8 <__fputwc+0x20>
 800bd00:	002b      	movs	r3, r5
 800bd02:	0032      	movs	r2, r6
 800bd04:	9801      	ldr	r0, [sp, #4]
 800bd06:	335c      	adds	r3, #92	; 0x5c
 800bd08:	a903      	add	r1, sp, #12
 800bd0a:	f000 f9fd 	bl	800c108 <_wcrtomb_r>
 800bd0e:	0004      	movs	r4, r0
 800bd10:	1c43      	adds	r3, r0, #1
 800bd12:	d1e0      	bne.n	800bcd6 <__fputwc+0x1e>
 800bd14:	2340      	movs	r3, #64	; 0x40
 800bd16:	0006      	movs	r6, r0
 800bd18:	89aa      	ldrh	r2, [r5, #12]
 800bd1a:	4313      	orrs	r3, r2
 800bd1c:	81ab      	strh	r3, [r5, #12]
 800bd1e:	0030      	movs	r0, r6
 800bd20:	b005      	add	sp, #20
 800bd22:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800bd24:	002a      	movs	r2, r5
 800bd26:	9801      	ldr	r0, [sp, #4]
 800bd28:	f000 fa72 	bl	800c210 <__swbuf_r>
 800bd2c:	1c43      	adds	r3, r0, #1
 800bd2e:	d1e5      	bne.n	800bcfc <__fputwc+0x44>
 800bd30:	0006      	movs	r6, r0
 800bd32:	e7f4      	b.n	800bd1e <__fputwc+0x66>

0800bd34 <_fputwc_r>:
 800bd34:	6e53      	ldr	r3, [r2, #100]	; 0x64
 800bd36:	b570      	push	{r4, r5, r6, lr}
 800bd38:	0005      	movs	r5, r0
 800bd3a:	000e      	movs	r6, r1
 800bd3c:	0014      	movs	r4, r2
 800bd3e:	07db      	lsls	r3, r3, #31
 800bd40:	d405      	bmi.n	800bd4e <_fputwc_r+0x1a>
 800bd42:	8993      	ldrh	r3, [r2, #12]
 800bd44:	059b      	lsls	r3, r3, #22
 800bd46:	d402      	bmi.n	800bd4e <_fputwc_r+0x1a>
 800bd48:	6d90      	ldr	r0, [r2, #88]	; 0x58
 800bd4a:	f7fb fe51 	bl	80079f0 <__retarget_lock_acquire_recursive>
 800bd4e:	230c      	movs	r3, #12
 800bd50:	5ee2      	ldrsh	r2, [r4, r3]
 800bd52:	2380      	movs	r3, #128	; 0x80
 800bd54:	019b      	lsls	r3, r3, #6
 800bd56:	421a      	tst	r2, r3
 800bd58:	d104      	bne.n	800bd64 <_fputwc_r+0x30>
 800bd5a:	431a      	orrs	r2, r3
 800bd5c:	81a2      	strh	r2, [r4, #12]
 800bd5e:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800bd60:	4313      	orrs	r3, r2
 800bd62:	6663      	str	r3, [r4, #100]	; 0x64
 800bd64:	0028      	movs	r0, r5
 800bd66:	0022      	movs	r2, r4
 800bd68:	0031      	movs	r1, r6
 800bd6a:	f7ff ffa5 	bl	800bcb8 <__fputwc>
 800bd6e:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800bd70:	0005      	movs	r5, r0
 800bd72:	07db      	lsls	r3, r3, #31
 800bd74:	d405      	bmi.n	800bd82 <_fputwc_r+0x4e>
 800bd76:	89a3      	ldrh	r3, [r4, #12]
 800bd78:	059b      	lsls	r3, r3, #22
 800bd7a:	d402      	bmi.n	800bd82 <_fputwc_r+0x4e>
 800bd7c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800bd7e:	f7fb fe38 	bl	80079f2 <__retarget_lock_release_recursive>
 800bd82:	0028      	movs	r0, r5
 800bd84:	bd70      	pop	{r4, r5, r6, pc}

0800bd86 <memmove>:
 800bd86:	b510      	push	{r4, lr}
 800bd88:	4288      	cmp	r0, r1
 800bd8a:	d902      	bls.n	800bd92 <memmove+0xc>
 800bd8c:	188b      	adds	r3, r1, r2
 800bd8e:	4298      	cmp	r0, r3
 800bd90:	d303      	bcc.n	800bd9a <memmove+0x14>
 800bd92:	2300      	movs	r3, #0
 800bd94:	e007      	b.n	800bda6 <memmove+0x20>
 800bd96:	5c8b      	ldrb	r3, [r1, r2]
 800bd98:	5483      	strb	r3, [r0, r2]
 800bd9a:	3a01      	subs	r2, #1
 800bd9c:	d2fb      	bcs.n	800bd96 <memmove+0x10>
 800bd9e:	bd10      	pop	{r4, pc}
 800bda0:	5ccc      	ldrb	r4, [r1, r3]
 800bda2:	54c4      	strb	r4, [r0, r3]
 800bda4:	3301      	adds	r3, #1
 800bda6:	429a      	cmp	r2, r3
 800bda8:	d1fa      	bne.n	800bda0 <memmove+0x1a>
 800bdaa:	e7f8      	b.n	800bd9e <memmove+0x18>

0800bdac <abort>:
 800bdac:	2006      	movs	r0, #6
 800bdae:	b510      	push	{r4, lr}
 800bdb0:	f000 faac 	bl	800c30c <raise>
 800bdb4:	2001      	movs	r0, #1
 800bdb6:	f7f6 ffb5 	bl	8002d24 <_exit>
	...

0800bdbc <_realloc_r>:
 800bdbc:	b5f0      	push	{r4, r5, r6, r7, lr}
 800bdbe:	b087      	sub	sp, #28
 800bdc0:	1e0c      	subs	r4, r1, #0
 800bdc2:	9001      	str	r0, [sp, #4]
 800bdc4:	9205      	str	r2, [sp, #20]
 800bdc6:	d106      	bne.n	800bdd6 <_realloc_r+0x1a>
 800bdc8:	0011      	movs	r1, r2
 800bdca:	f7fb ff37 	bl	8007c3c <_malloc_r>
 800bdce:	0007      	movs	r7, r0
 800bdd0:	0038      	movs	r0, r7
 800bdd2:	b007      	add	sp, #28
 800bdd4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800bdd6:	9801      	ldr	r0, [sp, #4]
 800bdd8:	f7fc f956 	bl	8008088 <__malloc_lock>
 800bddc:	0023      	movs	r3, r4
 800bdde:	3b08      	subs	r3, #8
 800bde0:	685f      	ldr	r7, [r3, #4]
 800bde2:	9304      	str	r3, [sp, #16]
 800bde4:	9b05      	ldr	r3, [sp, #20]
 800bde6:	330b      	adds	r3, #11
 800bde8:	2b16      	cmp	r3, #22
 800bdea:	d908      	bls.n	800bdfe <_realloc_r+0x42>
 800bdec:	2207      	movs	r2, #7
 800bdee:	4393      	bics	r3, r2
 800bdf0:	9300      	str	r3, [sp, #0]
 800bdf2:	d506      	bpl.n	800be02 <_realloc_r+0x46>
 800bdf4:	230c      	movs	r3, #12
 800bdf6:	9a01      	ldr	r2, [sp, #4]
 800bdf8:	2700      	movs	r7, #0
 800bdfa:	6013      	str	r3, [r2, #0]
 800bdfc:	e7e8      	b.n	800bdd0 <_realloc_r+0x14>
 800bdfe:	2310      	movs	r3, #16
 800be00:	9300      	str	r3, [sp, #0]
 800be02:	9b00      	ldr	r3, [sp, #0]
 800be04:	9a05      	ldr	r2, [sp, #20]
 800be06:	4293      	cmp	r3, r2
 800be08:	d3f4      	bcc.n	800bdf4 <_realloc_r+0x38>
 800be0a:	9b04      	ldr	r3, [sp, #16]
 800be0c:	003a      	movs	r2, r7
 800be0e:	9302      	str	r3, [sp, #8]
 800be10:	2303      	movs	r3, #3
 800be12:	439a      	bics	r2, r3
 800be14:	9b00      	ldr	r3, [sp, #0]
 800be16:	9203      	str	r2, [sp, #12]
 800be18:	4293      	cmp	r3, r2
 800be1a:	dc00      	bgt.n	800be1e <_realloc_r+0x62>
 800be1c:	e169      	b.n	800c0f2 <_realloc_r+0x336>
 800be1e:	9b04      	ldr	r3, [sp, #16]
 800be20:	48b8      	ldr	r0, [pc, #736]	; (800c104 <_realloc_r+0x348>)
 800be22:	189b      	adds	r3, r3, r2
 800be24:	6882      	ldr	r2, [r0, #8]
 800be26:	4694      	mov	ip, r2
 800be28:	685a      	ldr	r2, [r3, #4]
 800be2a:	459c      	cmp	ip, r3
 800be2c:	d006      	beq.n	800be3c <_realloc_r+0x80>
 800be2e:	2501      	movs	r5, #1
 800be30:	0011      	movs	r1, r2
 800be32:	43a9      	bics	r1, r5
 800be34:	1859      	adds	r1, r3, r1
 800be36:	6849      	ldr	r1, [r1, #4]
 800be38:	4229      	tst	r1, r5
 800be3a:	d144      	bne.n	800bec6 <_realloc_r+0x10a>
 800be3c:	2103      	movs	r1, #3
 800be3e:	438a      	bics	r2, r1
 800be40:	9903      	ldr	r1, [sp, #12]
 800be42:	188e      	adds	r6, r1, r2
 800be44:	9900      	ldr	r1, [sp, #0]
 800be46:	459c      	cmp	ip, r3
 800be48:	d117      	bne.n	800be7a <_realloc_r+0xbe>
 800be4a:	3110      	adds	r1, #16
 800be4c:	42b1      	cmp	r1, r6
 800be4e:	dc3c      	bgt.n	800beca <_realloc_r+0x10e>
 800be50:	9a00      	ldr	r2, [sp, #0]
 800be52:	2101      	movs	r1, #1
 800be54:	4694      	mov	ip, r2
 800be56:	1ab6      	subs	r6, r6, r2
 800be58:	0022      	movs	r2, r4
 800be5a:	9b04      	ldr	r3, [sp, #16]
 800be5c:	430e      	orrs	r6, r1
 800be5e:	4463      	add	r3, ip
 800be60:	6083      	str	r3, [r0, #8]
 800be62:	3a08      	subs	r2, #8
 800be64:	605e      	str	r6, [r3, #4]
 800be66:	6853      	ldr	r3, [r2, #4]
 800be68:	9801      	ldr	r0, [sp, #4]
 800be6a:	400b      	ands	r3, r1
 800be6c:	4661      	mov	r1, ip
 800be6e:	430b      	orrs	r3, r1
 800be70:	6053      	str	r3, [r2, #4]
 800be72:	f7fc f911 	bl	8008098 <__malloc_unlock>
 800be76:	0027      	movs	r7, r4
 800be78:	e7aa      	b.n	800bdd0 <_realloc_r+0x14>
 800be7a:	42b1      	cmp	r1, r6
 800be7c:	dc25      	bgt.n	800beca <_realloc_r+0x10e>
 800be7e:	68da      	ldr	r2, [r3, #12]
 800be80:	689b      	ldr	r3, [r3, #8]
 800be82:	60da      	str	r2, [r3, #12]
 800be84:	6093      	str	r3, [r2, #8]
 800be86:	9b00      	ldr	r3, [sp, #0]
 800be88:	9a02      	ldr	r2, [sp, #8]
 800be8a:	1af4      	subs	r4, r6, r3
 800be8c:	9b02      	ldr	r3, [sp, #8]
 800be8e:	1992      	adds	r2, r2, r6
 800be90:	6858      	ldr	r0, [r3, #4]
 800be92:	2301      	movs	r3, #1
 800be94:	4018      	ands	r0, r3
 800be96:	2c0f      	cmp	r4, #15
 800be98:	d800      	bhi.n	800be9c <_realloc_r+0xe0>
 800be9a:	e12c      	b.n	800c0f6 <_realloc_r+0x33a>
 800be9c:	9d00      	ldr	r5, [sp, #0]
 800be9e:	9902      	ldr	r1, [sp, #8]
 800bea0:	4328      	orrs	r0, r5
 800bea2:	1949      	adds	r1, r1, r5
 800bea4:	9d02      	ldr	r5, [sp, #8]
 800bea6:	431c      	orrs	r4, r3
 800bea8:	6068      	str	r0, [r5, #4]
 800beaa:	604c      	str	r4, [r1, #4]
 800beac:	6850      	ldr	r0, [r2, #4]
 800beae:	3108      	adds	r1, #8
 800beb0:	4303      	orrs	r3, r0
 800beb2:	6053      	str	r3, [r2, #4]
 800beb4:	9801      	ldr	r0, [sp, #4]
 800beb6:	f7fb fe0f 	bl	8007ad8 <_free_r>
 800beba:	9801      	ldr	r0, [sp, #4]
 800bebc:	f7fc f8ec 	bl	8008098 <__malloc_unlock>
 800bec0:	9f02      	ldr	r7, [sp, #8]
 800bec2:	3708      	adds	r7, #8
 800bec4:	e784      	b.n	800bdd0 <_realloc_r+0x14>
 800bec6:	2200      	movs	r2, #0
 800bec8:	0013      	movs	r3, r2
 800beca:	07ff      	lsls	r7, r7, #31
 800becc:	d500      	bpl.n	800bed0 <_realloc_r+0x114>
 800bece:	e0c6      	b.n	800c05e <_realloc_r+0x2a2>
 800bed0:	0021      	movs	r1, r4
 800bed2:	2003      	movs	r0, #3
 800bed4:	3908      	subs	r1, #8
 800bed6:	680d      	ldr	r5, [r1, #0]
 800bed8:	9904      	ldr	r1, [sp, #16]
 800beda:	1b4d      	subs	r5, r1, r5
 800bedc:	6869      	ldr	r1, [r5, #4]
 800bede:	4381      	bics	r1, r0
 800bee0:	9803      	ldr	r0, [sp, #12]
 800bee2:	180f      	adds	r7, r1, r0
 800bee4:	2b00      	cmp	r3, #0
 800bee6:	d100      	bne.n	800beea <_realloc_r+0x12e>
 800bee8:	e084      	b.n	800bff4 <_realloc_r+0x238>
 800beea:	19d6      	adds	r6, r2, r7
 800beec:	459c      	cmp	ip, r3
 800beee:	d148      	bne.n	800bf82 <_realloc_r+0x1c6>
 800bef0:	9b00      	ldr	r3, [sp, #0]
 800bef2:	3310      	adds	r3, #16
 800bef4:	42b3      	cmp	r3, r6
 800bef6:	dc7d      	bgt.n	800bff4 <_realloc_r+0x238>
 800bef8:	68aa      	ldr	r2, [r5, #8]
 800befa:	68eb      	ldr	r3, [r5, #12]
 800befc:	002f      	movs	r7, r5
 800befe:	60d3      	str	r3, [r2, #12]
 800bf00:	609a      	str	r2, [r3, #8]
 800bf02:	0002      	movs	r2, r0
 800bf04:	3a04      	subs	r2, #4
 800bf06:	3708      	adds	r7, #8
 800bf08:	2a24      	cmp	r2, #36	; 0x24
 800bf0a:	d835      	bhi.n	800bf78 <_realloc_r+0x1bc>
 800bf0c:	003b      	movs	r3, r7
 800bf0e:	2a13      	cmp	r2, #19
 800bf10:	d908      	bls.n	800bf24 <_realloc_r+0x168>
 800bf12:	6823      	ldr	r3, [r4, #0]
 800bf14:	60ab      	str	r3, [r5, #8]
 800bf16:	6863      	ldr	r3, [r4, #4]
 800bf18:	60eb      	str	r3, [r5, #12]
 800bf1a:	2a1b      	cmp	r2, #27
 800bf1c:	d81a      	bhi.n	800bf54 <_realloc_r+0x198>
 800bf1e:	002b      	movs	r3, r5
 800bf20:	3408      	adds	r4, #8
 800bf22:	3310      	adds	r3, #16
 800bf24:	6822      	ldr	r2, [r4, #0]
 800bf26:	601a      	str	r2, [r3, #0]
 800bf28:	6862      	ldr	r2, [r4, #4]
 800bf2a:	605a      	str	r2, [r3, #4]
 800bf2c:	68a2      	ldr	r2, [r4, #8]
 800bf2e:	609a      	str	r2, [r3, #8]
 800bf30:	9b00      	ldr	r3, [sp, #0]
 800bf32:	4a74      	ldr	r2, [pc, #464]	; (800c104 <_realloc_r+0x348>)
 800bf34:	18eb      	adds	r3, r5, r3
 800bf36:	6093      	str	r3, [r2, #8]
 800bf38:	9a00      	ldr	r2, [sp, #0]
 800bf3a:	1ab6      	subs	r6, r6, r2
 800bf3c:	2201      	movs	r2, #1
 800bf3e:	4316      	orrs	r6, r2
 800bf40:	605e      	str	r6, [r3, #4]
 800bf42:	686b      	ldr	r3, [r5, #4]
 800bf44:	4013      	ands	r3, r2
 800bf46:	9a00      	ldr	r2, [sp, #0]
 800bf48:	4313      	orrs	r3, r2
 800bf4a:	606b      	str	r3, [r5, #4]
 800bf4c:	9801      	ldr	r0, [sp, #4]
 800bf4e:	f7fc f8a3 	bl	8008098 <__malloc_unlock>
 800bf52:	e73d      	b.n	800bdd0 <_realloc_r+0x14>
 800bf54:	68a3      	ldr	r3, [r4, #8]
 800bf56:	612b      	str	r3, [r5, #16]
 800bf58:	68e3      	ldr	r3, [r4, #12]
 800bf5a:	616b      	str	r3, [r5, #20]
 800bf5c:	2a24      	cmp	r2, #36	; 0x24
 800bf5e:	d003      	beq.n	800bf68 <_realloc_r+0x1ac>
 800bf60:	002b      	movs	r3, r5
 800bf62:	3410      	adds	r4, #16
 800bf64:	3318      	adds	r3, #24
 800bf66:	e7dd      	b.n	800bf24 <_realloc_r+0x168>
 800bf68:	6923      	ldr	r3, [r4, #16]
 800bf6a:	61ab      	str	r3, [r5, #24]
 800bf6c:	002b      	movs	r3, r5
 800bf6e:	6962      	ldr	r2, [r4, #20]
 800bf70:	3320      	adds	r3, #32
 800bf72:	61ea      	str	r2, [r5, #28]
 800bf74:	3418      	adds	r4, #24
 800bf76:	e7d5      	b.n	800bf24 <_realloc_r+0x168>
 800bf78:	0021      	movs	r1, r4
 800bf7a:	0038      	movs	r0, r7
 800bf7c:	f7ff ff03 	bl	800bd86 <memmove>
 800bf80:	e7d6      	b.n	800bf30 <_realloc_r+0x174>
 800bf82:	9a00      	ldr	r2, [sp, #0]
 800bf84:	42b2      	cmp	r2, r6
 800bf86:	dc35      	bgt.n	800bff4 <_realloc_r+0x238>
 800bf88:	0028      	movs	r0, r5
 800bf8a:	68da      	ldr	r2, [r3, #12]
 800bf8c:	689b      	ldr	r3, [r3, #8]
 800bf8e:	3008      	adds	r0, #8
 800bf90:	60da      	str	r2, [r3, #12]
 800bf92:	6093      	str	r3, [r2, #8]
 800bf94:	68aa      	ldr	r2, [r5, #8]
 800bf96:	68eb      	ldr	r3, [r5, #12]
 800bf98:	60d3      	str	r3, [r2, #12]
 800bf9a:	609a      	str	r2, [r3, #8]
 800bf9c:	9a03      	ldr	r2, [sp, #12]
 800bf9e:	3a04      	subs	r2, #4
 800bfa0:	2a24      	cmp	r2, #36	; 0x24
 800bfa2:	d823      	bhi.n	800bfec <_realloc_r+0x230>
 800bfa4:	2a13      	cmp	r2, #19
 800bfa6:	d907      	bls.n	800bfb8 <_realloc_r+0x1fc>
 800bfa8:	6823      	ldr	r3, [r4, #0]
 800bfaa:	60ab      	str	r3, [r5, #8]
 800bfac:	6863      	ldr	r3, [r4, #4]
 800bfae:	60eb      	str	r3, [r5, #12]
 800bfb0:	2a1b      	cmp	r2, #27
 800bfb2:	d809      	bhi.n	800bfc8 <_realloc_r+0x20c>
 800bfb4:	3408      	adds	r4, #8
 800bfb6:	3008      	adds	r0, #8
 800bfb8:	6823      	ldr	r3, [r4, #0]
 800bfba:	6003      	str	r3, [r0, #0]
 800bfbc:	6863      	ldr	r3, [r4, #4]
 800bfbe:	6043      	str	r3, [r0, #4]
 800bfc0:	68a3      	ldr	r3, [r4, #8]
 800bfc2:	6083      	str	r3, [r0, #8]
 800bfc4:	9502      	str	r5, [sp, #8]
 800bfc6:	e75e      	b.n	800be86 <_realloc_r+0xca>
 800bfc8:	68a3      	ldr	r3, [r4, #8]
 800bfca:	612b      	str	r3, [r5, #16]
 800bfcc:	68e3      	ldr	r3, [r4, #12]
 800bfce:	616b      	str	r3, [r5, #20]
 800bfd0:	2a24      	cmp	r2, #36	; 0x24
 800bfd2:	d003      	beq.n	800bfdc <_realloc_r+0x220>
 800bfd4:	0028      	movs	r0, r5
 800bfd6:	3410      	adds	r4, #16
 800bfd8:	3018      	adds	r0, #24
 800bfda:	e7ed      	b.n	800bfb8 <_realloc_r+0x1fc>
 800bfdc:	0028      	movs	r0, r5
 800bfde:	6923      	ldr	r3, [r4, #16]
 800bfe0:	3020      	adds	r0, #32
 800bfe2:	61ab      	str	r3, [r5, #24]
 800bfe4:	6963      	ldr	r3, [r4, #20]
 800bfe6:	3418      	adds	r4, #24
 800bfe8:	61eb      	str	r3, [r5, #28]
 800bfea:	e7e5      	b.n	800bfb8 <_realloc_r+0x1fc>
 800bfec:	0021      	movs	r1, r4
 800bfee:	f7ff feca 	bl	800bd86 <memmove>
 800bff2:	e7e7      	b.n	800bfc4 <_realloc_r+0x208>
 800bff4:	9b00      	ldr	r3, [sp, #0]
 800bff6:	42bb      	cmp	r3, r7
 800bff8:	dc31      	bgt.n	800c05e <_realloc_r+0x2a2>
 800bffa:	0028      	movs	r0, r5
 800bffc:	68aa      	ldr	r2, [r5, #8]
 800bffe:	68eb      	ldr	r3, [r5, #12]
 800c000:	3008      	adds	r0, #8
 800c002:	60d3      	str	r3, [r2, #12]
 800c004:	609a      	str	r2, [r3, #8]
 800c006:	9a03      	ldr	r2, [sp, #12]
 800c008:	3a04      	subs	r2, #4
 800c00a:	2a24      	cmp	r2, #36	; 0x24
 800c00c:	d823      	bhi.n	800c056 <_realloc_r+0x29a>
 800c00e:	2a13      	cmp	r2, #19
 800c010:	d907      	bls.n	800c022 <_realloc_r+0x266>
 800c012:	6823      	ldr	r3, [r4, #0]
 800c014:	60ab      	str	r3, [r5, #8]
 800c016:	6863      	ldr	r3, [r4, #4]
 800c018:	60eb      	str	r3, [r5, #12]
 800c01a:	2a1b      	cmp	r2, #27
 800c01c:	d809      	bhi.n	800c032 <_realloc_r+0x276>
 800c01e:	3408      	adds	r4, #8
 800c020:	3008      	adds	r0, #8
 800c022:	6823      	ldr	r3, [r4, #0]
 800c024:	6003      	str	r3, [r0, #0]
 800c026:	6863      	ldr	r3, [r4, #4]
 800c028:	6043      	str	r3, [r0, #4]
 800c02a:	68a3      	ldr	r3, [r4, #8]
 800c02c:	6083      	str	r3, [r0, #8]
 800c02e:	003e      	movs	r6, r7
 800c030:	e7c8      	b.n	800bfc4 <_realloc_r+0x208>
 800c032:	68a3      	ldr	r3, [r4, #8]
 800c034:	612b      	str	r3, [r5, #16]
 800c036:	68e3      	ldr	r3, [r4, #12]
 800c038:	616b      	str	r3, [r5, #20]
 800c03a:	2a24      	cmp	r2, #36	; 0x24
 800c03c:	d003      	beq.n	800c046 <_realloc_r+0x28a>
 800c03e:	0028      	movs	r0, r5
 800c040:	3410      	adds	r4, #16
 800c042:	3018      	adds	r0, #24
 800c044:	e7ed      	b.n	800c022 <_realloc_r+0x266>
 800c046:	0028      	movs	r0, r5
 800c048:	6923      	ldr	r3, [r4, #16]
 800c04a:	3020      	adds	r0, #32
 800c04c:	61ab      	str	r3, [r5, #24]
 800c04e:	6963      	ldr	r3, [r4, #20]
 800c050:	3418      	adds	r4, #24
 800c052:	61eb      	str	r3, [r5, #28]
 800c054:	e7e5      	b.n	800c022 <_realloc_r+0x266>
 800c056:	0021      	movs	r1, r4
 800c058:	f7ff fe95 	bl	800bd86 <memmove>
 800c05c:	e7e7      	b.n	800c02e <_realloc_r+0x272>
 800c05e:	9905      	ldr	r1, [sp, #20]
 800c060:	9801      	ldr	r0, [sp, #4]
 800c062:	f7fb fdeb 	bl	8007c3c <_malloc_r>
 800c066:	1e07      	subs	r7, r0, #0
 800c068:	d100      	bne.n	800c06c <_realloc_r+0x2b0>
 800c06a:	e76f      	b.n	800bf4c <_realloc_r+0x190>
 800c06c:	0023      	movs	r3, r4
 800c06e:	2201      	movs	r2, #1
 800c070:	3b08      	subs	r3, #8
 800c072:	685b      	ldr	r3, [r3, #4]
 800c074:	4393      	bics	r3, r2
 800c076:	9a04      	ldr	r2, [sp, #16]
 800c078:	18d3      	adds	r3, r2, r3
 800c07a:	0002      	movs	r2, r0
 800c07c:	3a08      	subs	r2, #8
 800c07e:	4293      	cmp	r3, r2
 800c080:	d105      	bne.n	800c08e <_realloc_r+0x2d2>
 800c082:	685e      	ldr	r6, [r3, #4]
 800c084:	2303      	movs	r3, #3
 800c086:	439e      	bics	r6, r3
 800c088:	9b03      	ldr	r3, [sp, #12]
 800c08a:	18f6      	adds	r6, r6, r3
 800c08c:	e6fb      	b.n	800be86 <_realloc_r+0xca>
 800c08e:	9a03      	ldr	r2, [sp, #12]
 800c090:	3a04      	subs	r2, #4
 800c092:	2a24      	cmp	r2, #36	; 0x24
 800c094:	d829      	bhi.n	800c0ea <_realloc_r+0x32e>
 800c096:	0003      	movs	r3, r0
 800c098:	0021      	movs	r1, r4
 800c09a:	2a13      	cmp	r2, #19
 800c09c:	d908      	bls.n	800c0b0 <_realloc_r+0x2f4>
 800c09e:	6823      	ldr	r3, [r4, #0]
 800c0a0:	6003      	str	r3, [r0, #0]
 800c0a2:	6863      	ldr	r3, [r4, #4]
 800c0a4:	6043      	str	r3, [r0, #4]
 800c0a6:	2a1b      	cmp	r2, #27
 800c0a8:	d80d      	bhi.n	800c0c6 <_realloc_r+0x30a>
 800c0aa:	0003      	movs	r3, r0
 800c0ac:	3108      	adds	r1, #8
 800c0ae:	3308      	adds	r3, #8
 800c0b0:	680a      	ldr	r2, [r1, #0]
 800c0b2:	601a      	str	r2, [r3, #0]
 800c0b4:	684a      	ldr	r2, [r1, #4]
 800c0b6:	605a      	str	r2, [r3, #4]
 800c0b8:	688a      	ldr	r2, [r1, #8]
 800c0ba:	609a      	str	r2, [r3, #8]
 800c0bc:	0021      	movs	r1, r4
 800c0be:	9801      	ldr	r0, [sp, #4]
 800c0c0:	f7fb fd0a 	bl	8007ad8 <_free_r>
 800c0c4:	e742      	b.n	800bf4c <_realloc_r+0x190>
 800c0c6:	68a3      	ldr	r3, [r4, #8]
 800c0c8:	6083      	str	r3, [r0, #8]
 800c0ca:	68e3      	ldr	r3, [r4, #12]
 800c0cc:	60c3      	str	r3, [r0, #12]
 800c0ce:	2a24      	cmp	r2, #36	; 0x24
 800c0d0:	d003      	beq.n	800c0da <_realloc_r+0x31e>
 800c0d2:	0003      	movs	r3, r0
 800c0d4:	3110      	adds	r1, #16
 800c0d6:	3310      	adds	r3, #16
 800c0d8:	e7ea      	b.n	800c0b0 <_realloc_r+0x2f4>
 800c0da:	6923      	ldr	r3, [r4, #16]
 800c0dc:	3118      	adds	r1, #24
 800c0de:	6103      	str	r3, [r0, #16]
 800c0e0:	0003      	movs	r3, r0
 800c0e2:	6962      	ldr	r2, [r4, #20]
 800c0e4:	3318      	adds	r3, #24
 800c0e6:	6142      	str	r2, [r0, #20]
 800c0e8:	e7e2      	b.n	800c0b0 <_realloc_r+0x2f4>
 800c0ea:	0021      	movs	r1, r4
 800c0ec:	f7ff fe4b 	bl	800bd86 <memmove>
 800c0f0:	e7e4      	b.n	800c0bc <_realloc_r+0x300>
 800c0f2:	9e03      	ldr	r6, [sp, #12]
 800c0f4:	e6c7      	b.n	800be86 <_realloc_r+0xca>
 800c0f6:	9902      	ldr	r1, [sp, #8]
 800c0f8:	4306      	orrs	r6, r0
 800c0fa:	604e      	str	r6, [r1, #4]
 800c0fc:	6851      	ldr	r1, [r2, #4]
 800c0fe:	430b      	orrs	r3, r1
 800c100:	6053      	str	r3, [r2, #4]
 800c102:	e6da      	b.n	800beba <_realloc_r+0xfe>
 800c104:	200002b0 	.word	0x200002b0

0800c108 <_wcrtomb_r>:
 800c108:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
 800c10a:	001d      	movs	r5, r3
 800c10c:	4b09      	ldr	r3, [pc, #36]	; (800c134 <_wcrtomb_r+0x2c>)
 800c10e:	0004      	movs	r4, r0
 800c110:	33e0      	adds	r3, #224	; 0xe0
 800c112:	681e      	ldr	r6, [r3, #0]
 800c114:	002b      	movs	r3, r5
 800c116:	2900      	cmp	r1, #0
 800c118:	d101      	bne.n	800c11e <_wcrtomb_r+0x16>
 800c11a:	000a      	movs	r2, r1
 800c11c:	a901      	add	r1, sp, #4
 800c11e:	0020      	movs	r0, r4
 800c120:	47b0      	blx	r6
 800c122:	1c43      	adds	r3, r0, #1
 800c124:	d103      	bne.n	800c12e <_wcrtomb_r+0x26>
 800c126:	2300      	movs	r3, #0
 800c128:	602b      	str	r3, [r5, #0]
 800c12a:	338a      	adds	r3, #138	; 0x8a
 800c12c:	6023      	str	r3, [r4, #0]
 800c12e:	b004      	add	sp, #16
 800c130:	bd70      	pop	{r4, r5, r6, pc}
 800c132:	46c0      	nop			; (mov r8, r8)
 800c134:	2000001c 	.word	0x2000001c

0800c138 <__swhatbuf_r>:
 800c138:	b570      	push	{r4, r5, r6, lr}
 800c13a:	000e      	movs	r6, r1
 800c13c:	001d      	movs	r5, r3
 800c13e:	230e      	movs	r3, #14
 800c140:	5ec9      	ldrsh	r1, [r1, r3]
 800c142:	0014      	movs	r4, r2
 800c144:	b096      	sub	sp, #88	; 0x58
 800c146:	2900      	cmp	r1, #0
 800c148:	da09      	bge.n	800c15e <__swhatbuf_r+0x26>
 800c14a:	89b2      	ldrh	r2, [r6, #12]
 800c14c:	2380      	movs	r3, #128	; 0x80
 800c14e:	0011      	movs	r1, r2
 800c150:	4019      	ands	r1, r3
 800c152:	421a      	tst	r2, r3
 800c154:	d018      	beq.n	800c188 <__swhatbuf_r+0x50>
 800c156:	2100      	movs	r1, #0
 800c158:	3b40      	subs	r3, #64	; 0x40
 800c15a:	0008      	movs	r0, r1
 800c15c:	e010      	b.n	800c180 <__swhatbuf_r+0x48>
 800c15e:	466a      	mov	r2, sp
 800c160:	f000 f8de 	bl	800c320 <_fstat_r>
 800c164:	2800      	cmp	r0, #0
 800c166:	dbf0      	blt.n	800c14a <__swhatbuf_r+0x12>
 800c168:	23f0      	movs	r3, #240	; 0xf0
 800c16a:	9901      	ldr	r1, [sp, #4]
 800c16c:	021b      	lsls	r3, r3, #8
 800c16e:	4019      	ands	r1, r3
 800c170:	4b07      	ldr	r3, [pc, #28]	; (800c190 <__swhatbuf_r+0x58>)
 800c172:	2080      	movs	r0, #128	; 0x80
 800c174:	18c9      	adds	r1, r1, r3
 800c176:	424b      	negs	r3, r1
 800c178:	4159      	adcs	r1, r3
 800c17a:	2380      	movs	r3, #128	; 0x80
 800c17c:	0100      	lsls	r0, r0, #4
 800c17e:	00db      	lsls	r3, r3, #3
 800c180:	6029      	str	r1, [r5, #0]
 800c182:	6023      	str	r3, [r4, #0]
 800c184:	b016      	add	sp, #88	; 0x58
 800c186:	bd70      	pop	{r4, r5, r6, pc}
 800c188:	2380      	movs	r3, #128	; 0x80
 800c18a:	00db      	lsls	r3, r3, #3
 800c18c:	e7e5      	b.n	800c15a <__swhatbuf_r+0x22>
 800c18e:	46c0      	nop			; (mov r8, r8)
 800c190:	ffffe000 	.word	0xffffe000

0800c194 <__smakebuf_r>:
 800c194:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800c196:	2602      	movs	r6, #2
 800c198:	898b      	ldrh	r3, [r1, #12]
 800c19a:	0005      	movs	r5, r0
 800c19c:	000c      	movs	r4, r1
 800c19e:	4233      	tst	r3, r6
 800c1a0:	d006      	beq.n	800c1b0 <__smakebuf_r+0x1c>
 800c1a2:	0023      	movs	r3, r4
 800c1a4:	3343      	adds	r3, #67	; 0x43
 800c1a6:	6023      	str	r3, [r4, #0]
 800c1a8:	6123      	str	r3, [r4, #16]
 800c1aa:	2301      	movs	r3, #1
 800c1ac:	6163      	str	r3, [r4, #20]
 800c1ae:	bdf7      	pop	{r0, r1, r2, r4, r5, r6, r7, pc}
 800c1b0:	466a      	mov	r2, sp
 800c1b2:	ab01      	add	r3, sp, #4
 800c1b4:	f7ff ffc0 	bl	800c138 <__swhatbuf_r>
 800c1b8:	9900      	ldr	r1, [sp, #0]
 800c1ba:	0007      	movs	r7, r0
 800c1bc:	0028      	movs	r0, r5
 800c1be:	f7fb fd3d 	bl	8007c3c <_malloc_r>
 800c1c2:	2800      	cmp	r0, #0
 800c1c4:	d108      	bne.n	800c1d8 <__smakebuf_r+0x44>
 800c1c6:	220c      	movs	r2, #12
 800c1c8:	5ea3      	ldrsh	r3, [r4, r2]
 800c1ca:	059a      	lsls	r2, r3, #22
 800c1cc:	d4ef      	bmi.n	800c1ae <__smakebuf_r+0x1a>
 800c1ce:	2203      	movs	r2, #3
 800c1d0:	4393      	bics	r3, r2
 800c1d2:	431e      	orrs	r6, r3
 800c1d4:	81a6      	strh	r6, [r4, #12]
 800c1d6:	e7e4      	b.n	800c1a2 <__smakebuf_r+0xe>
 800c1d8:	2380      	movs	r3, #128	; 0x80
 800c1da:	89a2      	ldrh	r2, [r4, #12]
 800c1dc:	6020      	str	r0, [r4, #0]
 800c1de:	4313      	orrs	r3, r2
 800c1e0:	81a3      	strh	r3, [r4, #12]
 800c1e2:	9b00      	ldr	r3, [sp, #0]
 800c1e4:	6120      	str	r0, [r4, #16]
 800c1e6:	6163      	str	r3, [r4, #20]
 800c1e8:	9b01      	ldr	r3, [sp, #4]
 800c1ea:	2b00      	cmp	r3, #0
 800c1ec:	d00c      	beq.n	800c208 <__smakebuf_r+0x74>
 800c1ee:	0028      	movs	r0, r5
 800c1f0:	230e      	movs	r3, #14
 800c1f2:	5ee1      	ldrsh	r1, [r4, r3]
 800c1f4:	f000 f8a6 	bl	800c344 <_isatty_r>
 800c1f8:	2800      	cmp	r0, #0
 800c1fa:	d005      	beq.n	800c208 <__smakebuf_r+0x74>
 800c1fc:	2303      	movs	r3, #3
 800c1fe:	89a2      	ldrh	r2, [r4, #12]
 800c200:	439a      	bics	r2, r3
 800c202:	3b02      	subs	r3, #2
 800c204:	4313      	orrs	r3, r2
 800c206:	81a3      	strh	r3, [r4, #12]
 800c208:	89a3      	ldrh	r3, [r4, #12]
 800c20a:	433b      	orrs	r3, r7
 800c20c:	81a3      	strh	r3, [r4, #12]
 800c20e:	e7ce      	b.n	800c1ae <__smakebuf_r+0x1a>

0800c210 <__swbuf_r>:
 800c210:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c212:	0006      	movs	r6, r0
 800c214:	000d      	movs	r5, r1
 800c216:	0014      	movs	r4, r2
 800c218:	2800      	cmp	r0, #0
 800c21a:	d004      	beq.n	800c226 <__swbuf_r+0x16>
 800c21c:	6b43      	ldr	r3, [r0, #52]	; 0x34
 800c21e:	2b00      	cmp	r3, #0
 800c220:	d101      	bne.n	800c226 <__swbuf_r+0x16>
 800c222:	f7fb fa87 	bl	8007734 <__sinit>
 800c226:	69a3      	ldr	r3, [r4, #24]
 800c228:	60a3      	str	r3, [r4, #8]
 800c22a:	89a3      	ldrh	r3, [r4, #12]
 800c22c:	071b      	lsls	r3, r3, #28
 800c22e:	d52e      	bpl.n	800c28e <__swbuf_r+0x7e>
 800c230:	6923      	ldr	r3, [r4, #16]
 800c232:	2b00      	cmp	r3, #0
 800c234:	d02b      	beq.n	800c28e <__swbuf_r+0x7e>
 800c236:	230c      	movs	r3, #12
 800c238:	5ee2      	ldrsh	r2, [r4, r3]
 800c23a:	2380      	movs	r3, #128	; 0x80
 800c23c:	019b      	lsls	r3, r3, #6
 800c23e:	b2ef      	uxtb	r7, r5
 800c240:	b2ed      	uxtb	r5, r5
 800c242:	421a      	tst	r2, r3
 800c244:	d02c      	beq.n	800c2a0 <__swbuf_r+0x90>
 800c246:	6923      	ldr	r3, [r4, #16]
 800c248:	6820      	ldr	r0, [r4, #0]
 800c24a:	1ac0      	subs	r0, r0, r3
 800c24c:	6963      	ldr	r3, [r4, #20]
 800c24e:	4283      	cmp	r3, r0
 800c250:	dc05      	bgt.n	800c25e <__swbuf_r+0x4e>
 800c252:	0021      	movs	r1, r4
 800c254:	0030      	movs	r0, r6
 800c256:	f7fd fdb7 	bl	8009dc8 <_fflush_r>
 800c25a:	2800      	cmp	r0, #0
 800c25c:	d11d      	bne.n	800c29a <__swbuf_r+0x8a>
 800c25e:	68a3      	ldr	r3, [r4, #8]
 800c260:	3001      	adds	r0, #1
 800c262:	3b01      	subs	r3, #1
 800c264:	60a3      	str	r3, [r4, #8]
 800c266:	6823      	ldr	r3, [r4, #0]
 800c268:	1c5a      	adds	r2, r3, #1
 800c26a:	6022      	str	r2, [r4, #0]
 800c26c:	701f      	strb	r7, [r3, #0]
 800c26e:	6963      	ldr	r3, [r4, #20]
 800c270:	4283      	cmp	r3, r0
 800c272:	d004      	beq.n	800c27e <__swbuf_r+0x6e>
 800c274:	89a3      	ldrh	r3, [r4, #12]
 800c276:	07db      	lsls	r3, r3, #31
 800c278:	d507      	bpl.n	800c28a <__swbuf_r+0x7a>
 800c27a:	2d0a      	cmp	r5, #10
 800c27c:	d105      	bne.n	800c28a <__swbuf_r+0x7a>
 800c27e:	0021      	movs	r1, r4
 800c280:	0030      	movs	r0, r6
 800c282:	f7fd fda1 	bl	8009dc8 <_fflush_r>
 800c286:	2800      	cmp	r0, #0
 800c288:	d107      	bne.n	800c29a <__swbuf_r+0x8a>
 800c28a:	0028      	movs	r0, r5
 800c28c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800c28e:	0021      	movs	r1, r4
 800c290:	0030      	movs	r0, r6
 800c292:	f7ff fcad 	bl	800bbf0 <__swsetup_r>
 800c296:	2800      	cmp	r0, #0
 800c298:	d0cd      	beq.n	800c236 <__swbuf_r+0x26>
 800c29a:	2501      	movs	r5, #1
 800c29c:	426d      	negs	r5, r5
 800c29e:	e7f4      	b.n	800c28a <__swbuf_r+0x7a>
 800c2a0:	4313      	orrs	r3, r2
 800c2a2:	81a3      	strh	r3, [r4, #12]
 800c2a4:	4a02      	ldr	r2, [pc, #8]	; (800c2b0 <__swbuf_r+0xa0>)
 800c2a6:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800c2a8:	4013      	ands	r3, r2
 800c2aa:	6663      	str	r3, [r4, #100]	; 0x64
 800c2ac:	e7cb      	b.n	800c246 <__swbuf_r+0x36>
 800c2ae:	46c0      	nop			; (mov r8, r8)
 800c2b0:	ffffdfff 	.word	0xffffdfff

0800c2b4 <_raise_r>:
 800c2b4:	b570      	push	{r4, r5, r6, lr}
 800c2b6:	0004      	movs	r4, r0
 800c2b8:	000d      	movs	r5, r1
 800c2ba:	291f      	cmp	r1, #31
 800c2bc:	d904      	bls.n	800c2c8 <_raise_r+0x14>
 800c2be:	2316      	movs	r3, #22
 800c2c0:	6003      	str	r3, [r0, #0]
 800c2c2:	2001      	movs	r0, #1
 800c2c4:	4240      	negs	r0, r0
 800c2c6:	bd70      	pop	{r4, r5, r6, pc}
 800c2c8:	0003      	movs	r3, r0
 800c2ca:	33fc      	adds	r3, #252	; 0xfc
 800c2cc:	69db      	ldr	r3, [r3, #28]
 800c2ce:	2b00      	cmp	r3, #0
 800c2d0:	d004      	beq.n	800c2dc <_raise_r+0x28>
 800c2d2:	008a      	lsls	r2, r1, #2
 800c2d4:	189b      	adds	r3, r3, r2
 800c2d6:	681a      	ldr	r2, [r3, #0]
 800c2d8:	2a00      	cmp	r2, #0
 800c2da:	d108      	bne.n	800c2ee <_raise_r+0x3a>
 800c2dc:	0020      	movs	r0, r4
 800c2de:	f000 f855 	bl	800c38c <_getpid_r>
 800c2e2:	002a      	movs	r2, r5
 800c2e4:	0001      	movs	r1, r0
 800c2e6:	0020      	movs	r0, r4
 800c2e8:	f000 f83e 	bl	800c368 <_kill_r>
 800c2ec:	e7eb      	b.n	800c2c6 <_raise_r+0x12>
 800c2ee:	2000      	movs	r0, #0
 800c2f0:	2a01      	cmp	r2, #1
 800c2f2:	d0e8      	beq.n	800c2c6 <_raise_r+0x12>
 800c2f4:	1c51      	adds	r1, r2, #1
 800c2f6:	d103      	bne.n	800c300 <_raise_r+0x4c>
 800c2f8:	2316      	movs	r3, #22
 800c2fa:	3001      	adds	r0, #1
 800c2fc:	6023      	str	r3, [r4, #0]
 800c2fe:	e7e2      	b.n	800c2c6 <_raise_r+0x12>
 800c300:	2400      	movs	r4, #0
 800c302:	0028      	movs	r0, r5
 800c304:	601c      	str	r4, [r3, #0]
 800c306:	4790      	blx	r2
 800c308:	0020      	movs	r0, r4
 800c30a:	e7dc      	b.n	800c2c6 <_raise_r+0x12>

0800c30c <raise>:
 800c30c:	b510      	push	{r4, lr}
 800c30e:	4b03      	ldr	r3, [pc, #12]	; (800c31c <raise+0x10>)
 800c310:	0001      	movs	r1, r0
 800c312:	6818      	ldr	r0, [r3, #0]
 800c314:	f7ff ffce 	bl	800c2b4 <_raise_r>
 800c318:	bd10      	pop	{r4, pc}
 800c31a:	46c0      	nop			; (mov r8, r8)
 800c31c:	200002a8 	.word	0x200002a8

0800c320 <_fstat_r>:
 800c320:	2300      	movs	r3, #0
 800c322:	b570      	push	{r4, r5, r6, lr}
 800c324:	4d06      	ldr	r5, [pc, #24]	; (800c340 <_fstat_r+0x20>)
 800c326:	0004      	movs	r4, r0
 800c328:	0008      	movs	r0, r1
 800c32a:	0011      	movs	r1, r2
 800c32c:	602b      	str	r3, [r5, #0]
 800c32e:	f7f6 fd48 	bl	8002dc2 <_fstat>
 800c332:	1c43      	adds	r3, r0, #1
 800c334:	d103      	bne.n	800c33e <_fstat_r+0x1e>
 800c336:	682b      	ldr	r3, [r5, #0]
 800c338:	2b00      	cmp	r3, #0
 800c33a:	d000      	beq.n	800c33e <_fstat_r+0x1e>
 800c33c:	6023      	str	r3, [r4, #0]
 800c33e:	bd70      	pop	{r4, r5, r6, pc}
 800c340:	200009d8 	.word	0x200009d8

0800c344 <_isatty_r>:
 800c344:	2300      	movs	r3, #0
 800c346:	b570      	push	{r4, r5, r6, lr}
 800c348:	4d06      	ldr	r5, [pc, #24]	; (800c364 <_isatty_r+0x20>)
 800c34a:	0004      	movs	r4, r0
 800c34c:	0008      	movs	r0, r1
 800c34e:	602b      	str	r3, [r5, #0]
 800c350:	f7f6 fd45 	bl	8002dde <_isatty>
 800c354:	1c43      	adds	r3, r0, #1
 800c356:	d103      	bne.n	800c360 <_isatty_r+0x1c>
 800c358:	682b      	ldr	r3, [r5, #0]
 800c35a:	2b00      	cmp	r3, #0
 800c35c:	d000      	beq.n	800c360 <_isatty_r+0x1c>
 800c35e:	6023      	str	r3, [r4, #0]
 800c360:	bd70      	pop	{r4, r5, r6, pc}
 800c362:	46c0      	nop			; (mov r8, r8)
 800c364:	200009d8 	.word	0x200009d8

0800c368 <_kill_r>:
 800c368:	2300      	movs	r3, #0
 800c36a:	b570      	push	{r4, r5, r6, lr}
 800c36c:	4d06      	ldr	r5, [pc, #24]	; (800c388 <_kill_r+0x20>)
 800c36e:	0004      	movs	r4, r0
 800c370:	0008      	movs	r0, r1
 800c372:	0011      	movs	r1, r2
 800c374:	602b      	str	r3, [r5, #0]
 800c376:	f7f6 fcc5 	bl	8002d04 <_kill>
 800c37a:	1c43      	adds	r3, r0, #1
 800c37c:	d103      	bne.n	800c386 <_kill_r+0x1e>
 800c37e:	682b      	ldr	r3, [r5, #0]
 800c380:	2b00      	cmp	r3, #0
 800c382:	d000      	beq.n	800c386 <_kill_r+0x1e>
 800c384:	6023      	str	r3, [r4, #0]
 800c386:	bd70      	pop	{r4, r5, r6, pc}
 800c388:	200009d8 	.word	0x200009d8

0800c38c <_getpid_r>:
 800c38c:	b510      	push	{r4, lr}
 800c38e:	f7f6 fcb3 	bl	8002cf8 <_getpid>
 800c392:	bd10      	pop	{r4, pc}

0800c394 <_init>:
 800c394:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c396:	46c0      	nop			; (mov r8, r8)
 800c398:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800c39a:	bc08      	pop	{r3}
 800c39c:	469e      	mov	lr, r3
 800c39e:	4770      	bx	lr

0800c3a0 <_fini>:
 800c3a0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c3a2:	46c0      	nop			; (mov r8, r8)
 800c3a4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800c3a6:	bc08      	pop	{r3}
 800c3a8:	469e      	mov	lr, r3
 800c3aa:	4770      	bx	lr
