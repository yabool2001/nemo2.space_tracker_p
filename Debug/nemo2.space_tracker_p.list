
nemo2.space_tracker_p.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000bc  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000cb40  080000bc  080000bc  000100bc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00001cbc  0800cc00  0800cc00  0001cc00  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800e8bc  0800e8bc  000206c0  2**0
                  CONTENTS
  4 .ARM          00000008  0800e8bc  0800e8bc  0001e8bc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800e8c4  0800e8c4  000206c0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000008  0800e8c4  0800e8c4  0001e8c4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800e8cc  0800e8cc  0001e8cc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000006c0  20000000  0800e8d0  00020000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000004ec  200006c0  0800ef90  000206c0  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000bac  0800ef90  00020bac  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  000206c0  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  000206e8  2**0
                  CONTENTS, READONLY
 13 .debug_info   00014660  00000000  00000000  0002072b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00002dd6  00000000  00000000  00034d8b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001278  00000000  00000000  00037b68  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000e95  00000000  00000000  00038de0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0001f58a  00000000  00000000  00039c75  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00016f50  00000000  00000000  000591ff  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000c502d  00000000  00000000  0007014f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  000055d8  00000000  00000000  0013517c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000005c  00000000  00000000  0013a754  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000bc <__do_global_dtors_aux>:
 80000bc:	b510      	push	{r4, lr}
 80000be:	4c06      	ldr	r4, [pc, #24]	; (80000d8 <__do_global_dtors_aux+0x1c>)
 80000c0:	7823      	ldrb	r3, [r4, #0]
 80000c2:	2b00      	cmp	r3, #0
 80000c4:	d107      	bne.n	80000d6 <__do_global_dtors_aux+0x1a>
 80000c6:	4b05      	ldr	r3, [pc, #20]	; (80000dc <__do_global_dtors_aux+0x20>)
 80000c8:	2b00      	cmp	r3, #0
 80000ca:	d002      	beq.n	80000d2 <__do_global_dtors_aux+0x16>
 80000cc:	4804      	ldr	r0, [pc, #16]	; (80000e0 <__do_global_dtors_aux+0x24>)
 80000ce:	e000      	b.n	80000d2 <__do_global_dtors_aux+0x16>
 80000d0:	bf00      	nop
 80000d2:	2301      	movs	r3, #1
 80000d4:	7023      	strb	r3, [r4, #0]
 80000d6:	bd10      	pop	{r4, pc}
 80000d8:	200006c0 	.word	0x200006c0
 80000dc:	00000000 	.word	0x00000000
 80000e0:	0800cbe4 	.word	0x0800cbe4

080000e4 <frame_dummy>:
 80000e4:	4b04      	ldr	r3, [pc, #16]	; (80000f8 <frame_dummy+0x14>)
 80000e6:	b510      	push	{r4, lr}
 80000e8:	2b00      	cmp	r3, #0
 80000ea:	d003      	beq.n	80000f4 <frame_dummy+0x10>
 80000ec:	4903      	ldr	r1, [pc, #12]	; (80000fc <frame_dummy+0x18>)
 80000ee:	4804      	ldr	r0, [pc, #16]	; (8000100 <frame_dummy+0x1c>)
 80000f0:	e000      	b.n	80000f4 <frame_dummy+0x10>
 80000f2:	bf00      	nop
 80000f4:	bd10      	pop	{r4, pc}
 80000f6:	46c0      	nop			; (mov r8, r8)
 80000f8:	00000000 	.word	0x00000000
 80000fc:	200006c4 	.word	0x200006c4
 8000100:	0800cbe4 	.word	0x0800cbe4

08000104 <strlen>:
 8000104:	2300      	movs	r3, #0
 8000106:	5cc2      	ldrb	r2, [r0, r3]
 8000108:	3301      	adds	r3, #1
 800010a:	2a00      	cmp	r2, #0
 800010c:	d1fb      	bne.n	8000106 <strlen+0x2>
 800010e:	1e58      	subs	r0, r3, #1
 8000110:	4770      	bx	lr
	...

08000114 <__gnu_thumb1_case_uqi>:
 8000114:	b402      	push	{r1}
 8000116:	4671      	mov	r1, lr
 8000118:	0849      	lsrs	r1, r1, #1
 800011a:	0049      	lsls	r1, r1, #1
 800011c:	5c09      	ldrb	r1, [r1, r0]
 800011e:	0049      	lsls	r1, r1, #1
 8000120:	448e      	add	lr, r1
 8000122:	bc02      	pop	{r1}
 8000124:	4770      	bx	lr
 8000126:	46c0      	nop			; (mov r8, r8)

08000128 <__gnu_thumb1_case_uhi>:
 8000128:	b403      	push	{r0, r1}
 800012a:	4671      	mov	r1, lr
 800012c:	0849      	lsrs	r1, r1, #1
 800012e:	0040      	lsls	r0, r0, #1
 8000130:	0049      	lsls	r1, r1, #1
 8000132:	5a09      	ldrh	r1, [r1, r0]
 8000134:	0049      	lsls	r1, r1, #1
 8000136:	448e      	add	lr, r1
 8000138:	bc03      	pop	{r0, r1}
 800013a:	4770      	bx	lr

0800013c <__udivsi3>:
 800013c:	2200      	movs	r2, #0
 800013e:	0843      	lsrs	r3, r0, #1
 8000140:	428b      	cmp	r3, r1
 8000142:	d374      	bcc.n	800022e <__udivsi3+0xf2>
 8000144:	0903      	lsrs	r3, r0, #4
 8000146:	428b      	cmp	r3, r1
 8000148:	d35f      	bcc.n	800020a <__udivsi3+0xce>
 800014a:	0a03      	lsrs	r3, r0, #8
 800014c:	428b      	cmp	r3, r1
 800014e:	d344      	bcc.n	80001da <__udivsi3+0x9e>
 8000150:	0b03      	lsrs	r3, r0, #12
 8000152:	428b      	cmp	r3, r1
 8000154:	d328      	bcc.n	80001a8 <__udivsi3+0x6c>
 8000156:	0c03      	lsrs	r3, r0, #16
 8000158:	428b      	cmp	r3, r1
 800015a:	d30d      	bcc.n	8000178 <__udivsi3+0x3c>
 800015c:	22ff      	movs	r2, #255	; 0xff
 800015e:	0209      	lsls	r1, r1, #8
 8000160:	ba12      	rev	r2, r2
 8000162:	0c03      	lsrs	r3, r0, #16
 8000164:	428b      	cmp	r3, r1
 8000166:	d302      	bcc.n	800016e <__udivsi3+0x32>
 8000168:	1212      	asrs	r2, r2, #8
 800016a:	0209      	lsls	r1, r1, #8
 800016c:	d065      	beq.n	800023a <__udivsi3+0xfe>
 800016e:	0b03      	lsrs	r3, r0, #12
 8000170:	428b      	cmp	r3, r1
 8000172:	d319      	bcc.n	80001a8 <__udivsi3+0x6c>
 8000174:	e000      	b.n	8000178 <__udivsi3+0x3c>
 8000176:	0a09      	lsrs	r1, r1, #8
 8000178:	0bc3      	lsrs	r3, r0, #15
 800017a:	428b      	cmp	r3, r1
 800017c:	d301      	bcc.n	8000182 <__udivsi3+0x46>
 800017e:	03cb      	lsls	r3, r1, #15
 8000180:	1ac0      	subs	r0, r0, r3
 8000182:	4152      	adcs	r2, r2
 8000184:	0b83      	lsrs	r3, r0, #14
 8000186:	428b      	cmp	r3, r1
 8000188:	d301      	bcc.n	800018e <__udivsi3+0x52>
 800018a:	038b      	lsls	r3, r1, #14
 800018c:	1ac0      	subs	r0, r0, r3
 800018e:	4152      	adcs	r2, r2
 8000190:	0b43      	lsrs	r3, r0, #13
 8000192:	428b      	cmp	r3, r1
 8000194:	d301      	bcc.n	800019a <__udivsi3+0x5e>
 8000196:	034b      	lsls	r3, r1, #13
 8000198:	1ac0      	subs	r0, r0, r3
 800019a:	4152      	adcs	r2, r2
 800019c:	0b03      	lsrs	r3, r0, #12
 800019e:	428b      	cmp	r3, r1
 80001a0:	d301      	bcc.n	80001a6 <__udivsi3+0x6a>
 80001a2:	030b      	lsls	r3, r1, #12
 80001a4:	1ac0      	subs	r0, r0, r3
 80001a6:	4152      	adcs	r2, r2
 80001a8:	0ac3      	lsrs	r3, r0, #11
 80001aa:	428b      	cmp	r3, r1
 80001ac:	d301      	bcc.n	80001b2 <__udivsi3+0x76>
 80001ae:	02cb      	lsls	r3, r1, #11
 80001b0:	1ac0      	subs	r0, r0, r3
 80001b2:	4152      	adcs	r2, r2
 80001b4:	0a83      	lsrs	r3, r0, #10
 80001b6:	428b      	cmp	r3, r1
 80001b8:	d301      	bcc.n	80001be <__udivsi3+0x82>
 80001ba:	028b      	lsls	r3, r1, #10
 80001bc:	1ac0      	subs	r0, r0, r3
 80001be:	4152      	adcs	r2, r2
 80001c0:	0a43      	lsrs	r3, r0, #9
 80001c2:	428b      	cmp	r3, r1
 80001c4:	d301      	bcc.n	80001ca <__udivsi3+0x8e>
 80001c6:	024b      	lsls	r3, r1, #9
 80001c8:	1ac0      	subs	r0, r0, r3
 80001ca:	4152      	adcs	r2, r2
 80001cc:	0a03      	lsrs	r3, r0, #8
 80001ce:	428b      	cmp	r3, r1
 80001d0:	d301      	bcc.n	80001d6 <__udivsi3+0x9a>
 80001d2:	020b      	lsls	r3, r1, #8
 80001d4:	1ac0      	subs	r0, r0, r3
 80001d6:	4152      	adcs	r2, r2
 80001d8:	d2cd      	bcs.n	8000176 <__udivsi3+0x3a>
 80001da:	09c3      	lsrs	r3, r0, #7
 80001dc:	428b      	cmp	r3, r1
 80001de:	d301      	bcc.n	80001e4 <__udivsi3+0xa8>
 80001e0:	01cb      	lsls	r3, r1, #7
 80001e2:	1ac0      	subs	r0, r0, r3
 80001e4:	4152      	adcs	r2, r2
 80001e6:	0983      	lsrs	r3, r0, #6
 80001e8:	428b      	cmp	r3, r1
 80001ea:	d301      	bcc.n	80001f0 <__udivsi3+0xb4>
 80001ec:	018b      	lsls	r3, r1, #6
 80001ee:	1ac0      	subs	r0, r0, r3
 80001f0:	4152      	adcs	r2, r2
 80001f2:	0943      	lsrs	r3, r0, #5
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d301      	bcc.n	80001fc <__udivsi3+0xc0>
 80001f8:	014b      	lsls	r3, r1, #5
 80001fa:	1ac0      	subs	r0, r0, r3
 80001fc:	4152      	adcs	r2, r2
 80001fe:	0903      	lsrs	r3, r0, #4
 8000200:	428b      	cmp	r3, r1
 8000202:	d301      	bcc.n	8000208 <__udivsi3+0xcc>
 8000204:	010b      	lsls	r3, r1, #4
 8000206:	1ac0      	subs	r0, r0, r3
 8000208:	4152      	adcs	r2, r2
 800020a:	08c3      	lsrs	r3, r0, #3
 800020c:	428b      	cmp	r3, r1
 800020e:	d301      	bcc.n	8000214 <__udivsi3+0xd8>
 8000210:	00cb      	lsls	r3, r1, #3
 8000212:	1ac0      	subs	r0, r0, r3
 8000214:	4152      	adcs	r2, r2
 8000216:	0883      	lsrs	r3, r0, #2
 8000218:	428b      	cmp	r3, r1
 800021a:	d301      	bcc.n	8000220 <__udivsi3+0xe4>
 800021c:	008b      	lsls	r3, r1, #2
 800021e:	1ac0      	subs	r0, r0, r3
 8000220:	4152      	adcs	r2, r2
 8000222:	0843      	lsrs	r3, r0, #1
 8000224:	428b      	cmp	r3, r1
 8000226:	d301      	bcc.n	800022c <__udivsi3+0xf0>
 8000228:	004b      	lsls	r3, r1, #1
 800022a:	1ac0      	subs	r0, r0, r3
 800022c:	4152      	adcs	r2, r2
 800022e:	1a41      	subs	r1, r0, r1
 8000230:	d200      	bcs.n	8000234 <__udivsi3+0xf8>
 8000232:	4601      	mov	r1, r0
 8000234:	4152      	adcs	r2, r2
 8000236:	4610      	mov	r0, r2
 8000238:	4770      	bx	lr
 800023a:	e7ff      	b.n	800023c <__udivsi3+0x100>
 800023c:	b501      	push	{r0, lr}
 800023e:	2000      	movs	r0, #0
 8000240:	f000 f8f0 	bl	8000424 <__aeabi_idiv0>
 8000244:	bd02      	pop	{r1, pc}
 8000246:	46c0      	nop			; (mov r8, r8)

08000248 <__aeabi_uidivmod>:
 8000248:	2900      	cmp	r1, #0
 800024a:	d0f7      	beq.n	800023c <__udivsi3+0x100>
 800024c:	e776      	b.n	800013c <__udivsi3>
 800024e:	4770      	bx	lr

08000250 <__divsi3>:
 8000250:	4603      	mov	r3, r0
 8000252:	430b      	orrs	r3, r1
 8000254:	d47f      	bmi.n	8000356 <__divsi3+0x106>
 8000256:	2200      	movs	r2, #0
 8000258:	0843      	lsrs	r3, r0, #1
 800025a:	428b      	cmp	r3, r1
 800025c:	d374      	bcc.n	8000348 <__divsi3+0xf8>
 800025e:	0903      	lsrs	r3, r0, #4
 8000260:	428b      	cmp	r3, r1
 8000262:	d35f      	bcc.n	8000324 <__divsi3+0xd4>
 8000264:	0a03      	lsrs	r3, r0, #8
 8000266:	428b      	cmp	r3, r1
 8000268:	d344      	bcc.n	80002f4 <__divsi3+0xa4>
 800026a:	0b03      	lsrs	r3, r0, #12
 800026c:	428b      	cmp	r3, r1
 800026e:	d328      	bcc.n	80002c2 <__divsi3+0x72>
 8000270:	0c03      	lsrs	r3, r0, #16
 8000272:	428b      	cmp	r3, r1
 8000274:	d30d      	bcc.n	8000292 <__divsi3+0x42>
 8000276:	22ff      	movs	r2, #255	; 0xff
 8000278:	0209      	lsls	r1, r1, #8
 800027a:	ba12      	rev	r2, r2
 800027c:	0c03      	lsrs	r3, r0, #16
 800027e:	428b      	cmp	r3, r1
 8000280:	d302      	bcc.n	8000288 <__divsi3+0x38>
 8000282:	1212      	asrs	r2, r2, #8
 8000284:	0209      	lsls	r1, r1, #8
 8000286:	d065      	beq.n	8000354 <__divsi3+0x104>
 8000288:	0b03      	lsrs	r3, r0, #12
 800028a:	428b      	cmp	r3, r1
 800028c:	d319      	bcc.n	80002c2 <__divsi3+0x72>
 800028e:	e000      	b.n	8000292 <__divsi3+0x42>
 8000290:	0a09      	lsrs	r1, r1, #8
 8000292:	0bc3      	lsrs	r3, r0, #15
 8000294:	428b      	cmp	r3, r1
 8000296:	d301      	bcc.n	800029c <__divsi3+0x4c>
 8000298:	03cb      	lsls	r3, r1, #15
 800029a:	1ac0      	subs	r0, r0, r3
 800029c:	4152      	adcs	r2, r2
 800029e:	0b83      	lsrs	r3, r0, #14
 80002a0:	428b      	cmp	r3, r1
 80002a2:	d301      	bcc.n	80002a8 <__divsi3+0x58>
 80002a4:	038b      	lsls	r3, r1, #14
 80002a6:	1ac0      	subs	r0, r0, r3
 80002a8:	4152      	adcs	r2, r2
 80002aa:	0b43      	lsrs	r3, r0, #13
 80002ac:	428b      	cmp	r3, r1
 80002ae:	d301      	bcc.n	80002b4 <__divsi3+0x64>
 80002b0:	034b      	lsls	r3, r1, #13
 80002b2:	1ac0      	subs	r0, r0, r3
 80002b4:	4152      	adcs	r2, r2
 80002b6:	0b03      	lsrs	r3, r0, #12
 80002b8:	428b      	cmp	r3, r1
 80002ba:	d301      	bcc.n	80002c0 <__divsi3+0x70>
 80002bc:	030b      	lsls	r3, r1, #12
 80002be:	1ac0      	subs	r0, r0, r3
 80002c0:	4152      	adcs	r2, r2
 80002c2:	0ac3      	lsrs	r3, r0, #11
 80002c4:	428b      	cmp	r3, r1
 80002c6:	d301      	bcc.n	80002cc <__divsi3+0x7c>
 80002c8:	02cb      	lsls	r3, r1, #11
 80002ca:	1ac0      	subs	r0, r0, r3
 80002cc:	4152      	adcs	r2, r2
 80002ce:	0a83      	lsrs	r3, r0, #10
 80002d0:	428b      	cmp	r3, r1
 80002d2:	d301      	bcc.n	80002d8 <__divsi3+0x88>
 80002d4:	028b      	lsls	r3, r1, #10
 80002d6:	1ac0      	subs	r0, r0, r3
 80002d8:	4152      	adcs	r2, r2
 80002da:	0a43      	lsrs	r3, r0, #9
 80002dc:	428b      	cmp	r3, r1
 80002de:	d301      	bcc.n	80002e4 <__divsi3+0x94>
 80002e0:	024b      	lsls	r3, r1, #9
 80002e2:	1ac0      	subs	r0, r0, r3
 80002e4:	4152      	adcs	r2, r2
 80002e6:	0a03      	lsrs	r3, r0, #8
 80002e8:	428b      	cmp	r3, r1
 80002ea:	d301      	bcc.n	80002f0 <__divsi3+0xa0>
 80002ec:	020b      	lsls	r3, r1, #8
 80002ee:	1ac0      	subs	r0, r0, r3
 80002f0:	4152      	adcs	r2, r2
 80002f2:	d2cd      	bcs.n	8000290 <__divsi3+0x40>
 80002f4:	09c3      	lsrs	r3, r0, #7
 80002f6:	428b      	cmp	r3, r1
 80002f8:	d301      	bcc.n	80002fe <__divsi3+0xae>
 80002fa:	01cb      	lsls	r3, r1, #7
 80002fc:	1ac0      	subs	r0, r0, r3
 80002fe:	4152      	adcs	r2, r2
 8000300:	0983      	lsrs	r3, r0, #6
 8000302:	428b      	cmp	r3, r1
 8000304:	d301      	bcc.n	800030a <__divsi3+0xba>
 8000306:	018b      	lsls	r3, r1, #6
 8000308:	1ac0      	subs	r0, r0, r3
 800030a:	4152      	adcs	r2, r2
 800030c:	0943      	lsrs	r3, r0, #5
 800030e:	428b      	cmp	r3, r1
 8000310:	d301      	bcc.n	8000316 <__divsi3+0xc6>
 8000312:	014b      	lsls	r3, r1, #5
 8000314:	1ac0      	subs	r0, r0, r3
 8000316:	4152      	adcs	r2, r2
 8000318:	0903      	lsrs	r3, r0, #4
 800031a:	428b      	cmp	r3, r1
 800031c:	d301      	bcc.n	8000322 <__divsi3+0xd2>
 800031e:	010b      	lsls	r3, r1, #4
 8000320:	1ac0      	subs	r0, r0, r3
 8000322:	4152      	adcs	r2, r2
 8000324:	08c3      	lsrs	r3, r0, #3
 8000326:	428b      	cmp	r3, r1
 8000328:	d301      	bcc.n	800032e <__divsi3+0xde>
 800032a:	00cb      	lsls	r3, r1, #3
 800032c:	1ac0      	subs	r0, r0, r3
 800032e:	4152      	adcs	r2, r2
 8000330:	0883      	lsrs	r3, r0, #2
 8000332:	428b      	cmp	r3, r1
 8000334:	d301      	bcc.n	800033a <__divsi3+0xea>
 8000336:	008b      	lsls	r3, r1, #2
 8000338:	1ac0      	subs	r0, r0, r3
 800033a:	4152      	adcs	r2, r2
 800033c:	0843      	lsrs	r3, r0, #1
 800033e:	428b      	cmp	r3, r1
 8000340:	d301      	bcc.n	8000346 <__divsi3+0xf6>
 8000342:	004b      	lsls	r3, r1, #1
 8000344:	1ac0      	subs	r0, r0, r3
 8000346:	4152      	adcs	r2, r2
 8000348:	1a41      	subs	r1, r0, r1
 800034a:	d200      	bcs.n	800034e <__divsi3+0xfe>
 800034c:	4601      	mov	r1, r0
 800034e:	4152      	adcs	r2, r2
 8000350:	4610      	mov	r0, r2
 8000352:	4770      	bx	lr
 8000354:	e05d      	b.n	8000412 <__divsi3+0x1c2>
 8000356:	0fca      	lsrs	r2, r1, #31
 8000358:	d000      	beq.n	800035c <__divsi3+0x10c>
 800035a:	4249      	negs	r1, r1
 800035c:	1003      	asrs	r3, r0, #32
 800035e:	d300      	bcc.n	8000362 <__divsi3+0x112>
 8000360:	4240      	negs	r0, r0
 8000362:	4053      	eors	r3, r2
 8000364:	2200      	movs	r2, #0
 8000366:	469c      	mov	ip, r3
 8000368:	0903      	lsrs	r3, r0, #4
 800036a:	428b      	cmp	r3, r1
 800036c:	d32d      	bcc.n	80003ca <__divsi3+0x17a>
 800036e:	0a03      	lsrs	r3, r0, #8
 8000370:	428b      	cmp	r3, r1
 8000372:	d312      	bcc.n	800039a <__divsi3+0x14a>
 8000374:	22fc      	movs	r2, #252	; 0xfc
 8000376:	0189      	lsls	r1, r1, #6
 8000378:	ba12      	rev	r2, r2
 800037a:	0a03      	lsrs	r3, r0, #8
 800037c:	428b      	cmp	r3, r1
 800037e:	d30c      	bcc.n	800039a <__divsi3+0x14a>
 8000380:	0189      	lsls	r1, r1, #6
 8000382:	1192      	asrs	r2, r2, #6
 8000384:	428b      	cmp	r3, r1
 8000386:	d308      	bcc.n	800039a <__divsi3+0x14a>
 8000388:	0189      	lsls	r1, r1, #6
 800038a:	1192      	asrs	r2, r2, #6
 800038c:	428b      	cmp	r3, r1
 800038e:	d304      	bcc.n	800039a <__divsi3+0x14a>
 8000390:	0189      	lsls	r1, r1, #6
 8000392:	d03a      	beq.n	800040a <__divsi3+0x1ba>
 8000394:	1192      	asrs	r2, r2, #6
 8000396:	e000      	b.n	800039a <__divsi3+0x14a>
 8000398:	0989      	lsrs	r1, r1, #6
 800039a:	09c3      	lsrs	r3, r0, #7
 800039c:	428b      	cmp	r3, r1
 800039e:	d301      	bcc.n	80003a4 <__divsi3+0x154>
 80003a0:	01cb      	lsls	r3, r1, #7
 80003a2:	1ac0      	subs	r0, r0, r3
 80003a4:	4152      	adcs	r2, r2
 80003a6:	0983      	lsrs	r3, r0, #6
 80003a8:	428b      	cmp	r3, r1
 80003aa:	d301      	bcc.n	80003b0 <__divsi3+0x160>
 80003ac:	018b      	lsls	r3, r1, #6
 80003ae:	1ac0      	subs	r0, r0, r3
 80003b0:	4152      	adcs	r2, r2
 80003b2:	0943      	lsrs	r3, r0, #5
 80003b4:	428b      	cmp	r3, r1
 80003b6:	d301      	bcc.n	80003bc <__divsi3+0x16c>
 80003b8:	014b      	lsls	r3, r1, #5
 80003ba:	1ac0      	subs	r0, r0, r3
 80003bc:	4152      	adcs	r2, r2
 80003be:	0903      	lsrs	r3, r0, #4
 80003c0:	428b      	cmp	r3, r1
 80003c2:	d301      	bcc.n	80003c8 <__divsi3+0x178>
 80003c4:	010b      	lsls	r3, r1, #4
 80003c6:	1ac0      	subs	r0, r0, r3
 80003c8:	4152      	adcs	r2, r2
 80003ca:	08c3      	lsrs	r3, r0, #3
 80003cc:	428b      	cmp	r3, r1
 80003ce:	d301      	bcc.n	80003d4 <__divsi3+0x184>
 80003d0:	00cb      	lsls	r3, r1, #3
 80003d2:	1ac0      	subs	r0, r0, r3
 80003d4:	4152      	adcs	r2, r2
 80003d6:	0883      	lsrs	r3, r0, #2
 80003d8:	428b      	cmp	r3, r1
 80003da:	d301      	bcc.n	80003e0 <__divsi3+0x190>
 80003dc:	008b      	lsls	r3, r1, #2
 80003de:	1ac0      	subs	r0, r0, r3
 80003e0:	4152      	adcs	r2, r2
 80003e2:	d2d9      	bcs.n	8000398 <__divsi3+0x148>
 80003e4:	0843      	lsrs	r3, r0, #1
 80003e6:	428b      	cmp	r3, r1
 80003e8:	d301      	bcc.n	80003ee <__divsi3+0x19e>
 80003ea:	004b      	lsls	r3, r1, #1
 80003ec:	1ac0      	subs	r0, r0, r3
 80003ee:	4152      	adcs	r2, r2
 80003f0:	1a41      	subs	r1, r0, r1
 80003f2:	d200      	bcs.n	80003f6 <__divsi3+0x1a6>
 80003f4:	4601      	mov	r1, r0
 80003f6:	4663      	mov	r3, ip
 80003f8:	4152      	adcs	r2, r2
 80003fa:	105b      	asrs	r3, r3, #1
 80003fc:	4610      	mov	r0, r2
 80003fe:	d301      	bcc.n	8000404 <__divsi3+0x1b4>
 8000400:	4240      	negs	r0, r0
 8000402:	2b00      	cmp	r3, #0
 8000404:	d500      	bpl.n	8000408 <__divsi3+0x1b8>
 8000406:	4249      	negs	r1, r1
 8000408:	4770      	bx	lr
 800040a:	4663      	mov	r3, ip
 800040c:	105b      	asrs	r3, r3, #1
 800040e:	d300      	bcc.n	8000412 <__divsi3+0x1c2>
 8000410:	4240      	negs	r0, r0
 8000412:	b501      	push	{r0, lr}
 8000414:	2000      	movs	r0, #0
 8000416:	f000 f805 	bl	8000424 <__aeabi_idiv0>
 800041a:	bd02      	pop	{r1, pc}

0800041c <__aeabi_idivmod>:
 800041c:	2900      	cmp	r1, #0
 800041e:	d0f8      	beq.n	8000412 <__divsi3+0x1c2>
 8000420:	e716      	b.n	8000250 <__divsi3>
 8000422:	4770      	bx	lr

08000424 <__aeabi_idiv0>:
 8000424:	4770      	bx	lr
 8000426:	46c0      	nop			; (mov r8, r8)

08000428 <__aeabi_cdrcmple>:
 8000428:	4684      	mov	ip, r0
 800042a:	0010      	movs	r0, r2
 800042c:	4662      	mov	r2, ip
 800042e:	468c      	mov	ip, r1
 8000430:	0019      	movs	r1, r3
 8000432:	4663      	mov	r3, ip
 8000434:	e000      	b.n	8000438 <__aeabi_cdcmpeq>
 8000436:	46c0      	nop			; (mov r8, r8)

08000438 <__aeabi_cdcmpeq>:
 8000438:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800043a:	f001 f815 	bl	8001468 <__ledf2>
 800043e:	2800      	cmp	r0, #0
 8000440:	d401      	bmi.n	8000446 <__aeabi_cdcmpeq+0xe>
 8000442:	2100      	movs	r1, #0
 8000444:	42c8      	cmn	r0, r1
 8000446:	bd1f      	pop	{r0, r1, r2, r3, r4, pc}

08000448 <__aeabi_dcmpeq>:
 8000448:	b510      	push	{r4, lr}
 800044a:	f000 ff65 	bl	8001318 <__eqdf2>
 800044e:	4240      	negs	r0, r0
 8000450:	3001      	adds	r0, #1
 8000452:	bd10      	pop	{r4, pc}

08000454 <__aeabi_dcmplt>:
 8000454:	b510      	push	{r4, lr}
 8000456:	f001 f807 	bl	8001468 <__ledf2>
 800045a:	2800      	cmp	r0, #0
 800045c:	db01      	blt.n	8000462 <__aeabi_dcmplt+0xe>
 800045e:	2000      	movs	r0, #0
 8000460:	bd10      	pop	{r4, pc}
 8000462:	2001      	movs	r0, #1
 8000464:	bd10      	pop	{r4, pc}
 8000466:	46c0      	nop			; (mov r8, r8)

08000468 <__aeabi_dcmple>:
 8000468:	b510      	push	{r4, lr}
 800046a:	f000 fffd 	bl	8001468 <__ledf2>
 800046e:	2800      	cmp	r0, #0
 8000470:	dd01      	ble.n	8000476 <__aeabi_dcmple+0xe>
 8000472:	2000      	movs	r0, #0
 8000474:	bd10      	pop	{r4, pc}
 8000476:	2001      	movs	r0, #1
 8000478:	bd10      	pop	{r4, pc}
 800047a:	46c0      	nop			; (mov r8, r8)

0800047c <__aeabi_dcmpgt>:
 800047c:	b510      	push	{r4, lr}
 800047e:	f000 ff8d 	bl	800139c <__gedf2>
 8000482:	2800      	cmp	r0, #0
 8000484:	dc01      	bgt.n	800048a <__aeabi_dcmpgt+0xe>
 8000486:	2000      	movs	r0, #0
 8000488:	bd10      	pop	{r4, pc}
 800048a:	2001      	movs	r0, #1
 800048c:	bd10      	pop	{r4, pc}
 800048e:	46c0      	nop			; (mov r8, r8)

08000490 <__aeabi_dcmpge>:
 8000490:	b510      	push	{r4, lr}
 8000492:	f000 ff83 	bl	800139c <__gedf2>
 8000496:	2800      	cmp	r0, #0
 8000498:	da01      	bge.n	800049e <__aeabi_dcmpge+0xe>
 800049a:	2000      	movs	r0, #0
 800049c:	bd10      	pop	{r4, pc}
 800049e:	2001      	movs	r0, #1
 80004a0:	bd10      	pop	{r4, pc}
 80004a2:	46c0      	nop			; (mov r8, r8)

080004a4 <__aeabi_uldivmod>:
 80004a4:	2b00      	cmp	r3, #0
 80004a6:	d111      	bne.n	80004cc <__aeabi_uldivmod+0x28>
 80004a8:	2a00      	cmp	r2, #0
 80004aa:	d10f      	bne.n	80004cc <__aeabi_uldivmod+0x28>
 80004ac:	2900      	cmp	r1, #0
 80004ae:	d100      	bne.n	80004b2 <__aeabi_uldivmod+0xe>
 80004b0:	2800      	cmp	r0, #0
 80004b2:	d002      	beq.n	80004ba <__aeabi_uldivmod+0x16>
 80004b4:	2100      	movs	r1, #0
 80004b6:	43c9      	mvns	r1, r1
 80004b8:	0008      	movs	r0, r1
 80004ba:	b407      	push	{r0, r1, r2}
 80004bc:	4802      	ldr	r0, [pc, #8]	; (80004c8 <__aeabi_uldivmod+0x24>)
 80004be:	a102      	add	r1, pc, #8	; (adr r1, 80004c8 <__aeabi_uldivmod+0x24>)
 80004c0:	1840      	adds	r0, r0, r1
 80004c2:	9002      	str	r0, [sp, #8]
 80004c4:	bd03      	pop	{r0, r1, pc}
 80004c6:	46c0      	nop			; (mov r8, r8)
 80004c8:	ffffff5d 	.word	0xffffff5d
 80004cc:	b403      	push	{r0, r1}
 80004ce:	4668      	mov	r0, sp
 80004d0:	b501      	push	{r0, lr}
 80004d2:	9802      	ldr	r0, [sp, #8]
 80004d4:	f000 f806 	bl	80004e4 <__udivmoddi4>
 80004d8:	9b01      	ldr	r3, [sp, #4]
 80004da:	469e      	mov	lr, r3
 80004dc:	b002      	add	sp, #8
 80004de:	bc0c      	pop	{r2, r3}
 80004e0:	4770      	bx	lr
 80004e2:	46c0      	nop			; (mov r8, r8)

080004e4 <__udivmoddi4>:
 80004e4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80004e6:	4657      	mov	r7, sl
 80004e8:	464e      	mov	r6, r9
 80004ea:	4645      	mov	r5, r8
 80004ec:	46de      	mov	lr, fp
 80004ee:	b5e0      	push	{r5, r6, r7, lr}
 80004f0:	0004      	movs	r4, r0
 80004f2:	000d      	movs	r5, r1
 80004f4:	4692      	mov	sl, r2
 80004f6:	4699      	mov	r9, r3
 80004f8:	b083      	sub	sp, #12
 80004fa:	428b      	cmp	r3, r1
 80004fc:	d830      	bhi.n	8000560 <__udivmoddi4+0x7c>
 80004fe:	d02d      	beq.n	800055c <__udivmoddi4+0x78>
 8000500:	4649      	mov	r1, r9
 8000502:	4650      	mov	r0, sl
 8000504:	f001 ff20 	bl	8002348 <__clzdi2>
 8000508:	0029      	movs	r1, r5
 800050a:	0006      	movs	r6, r0
 800050c:	0020      	movs	r0, r4
 800050e:	f001 ff1b 	bl	8002348 <__clzdi2>
 8000512:	1a33      	subs	r3, r6, r0
 8000514:	4698      	mov	r8, r3
 8000516:	3b20      	subs	r3, #32
 8000518:	d434      	bmi.n	8000584 <__udivmoddi4+0xa0>
 800051a:	469b      	mov	fp, r3
 800051c:	4653      	mov	r3, sl
 800051e:	465a      	mov	r2, fp
 8000520:	4093      	lsls	r3, r2
 8000522:	4642      	mov	r2, r8
 8000524:	001f      	movs	r7, r3
 8000526:	4653      	mov	r3, sl
 8000528:	4093      	lsls	r3, r2
 800052a:	001e      	movs	r6, r3
 800052c:	42af      	cmp	r7, r5
 800052e:	d83b      	bhi.n	80005a8 <__udivmoddi4+0xc4>
 8000530:	42af      	cmp	r7, r5
 8000532:	d100      	bne.n	8000536 <__udivmoddi4+0x52>
 8000534:	e079      	b.n	800062a <__udivmoddi4+0x146>
 8000536:	465b      	mov	r3, fp
 8000538:	1ba4      	subs	r4, r4, r6
 800053a:	41bd      	sbcs	r5, r7
 800053c:	2b00      	cmp	r3, #0
 800053e:	da00      	bge.n	8000542 <__udivmoddi4+0x5e>
 8000540:	e076      	b.n	8000630 <__udivmoddi4+0x14c>
 8000542:	2200      	movs	r2, #0
 8000544:	2300      	movs	r3, #0
 8000546:	9200      	str	r2, [sp, #0]
 8000548:	9301      	str	r3, [sp, #4]
 800054a:	2301      	movs	r3, #1
 800054c:	465a      	mov	r2, fp
 800054e:	4093      	lsls	r3, r2
 8000550:	9301      	str	r3, [sp, #4]
 8000552:	2301      	movs	r3, #1
 8000554:	4642      	mov	r2, r8
 8000556:	4093      	lsls	r3, r2
 8000558:	9300      	str	r3, [sp, #0]
 800055a:	e029      	b.n	80005b0 <__udivmoddi4+0xcc>
 800055c:	4282      	cmp	r2, r0
 800055e:	d9cf      	bls.n	8000500 <__udivmoddi4+0x1c>
 8000560:	2200      	movs	r2, #0
 8000562:	2300      	movs	r3, #0
 8000564:	9200      	str	r2, [sp, #0]
 8000566:	9301      	str	r3, [sp, #4]
 8000568:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800056a:	2b00      	cmp	r3, #0
 800056c:	d001      	beq.n	8000572 <__udivmoddi4+0x8e>
 800056e:	601c      	str	r4, [r3, #0]
 8000570:	605d      	str	r5, [r3, #4]
 8000572:	9800      	ldr	r0, [sp, #0]
 8000574:	9901      	ldr	r1, [sp, #4]
 8000576:	b003      	add	sp, #12
 8000578:	bcf0      	pop	{r4, r5, r6, r7}
 800057a:	46bb      	mov	fp, r7
 800057c:	46b2      	mov	sl, r6
 800057e:	46a9      	mov	r9, r5
 8000580:	46a0      	mov	r8, r4
 8000582:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000584:	4642      	mov	r2, r8
 8000586:	469b      	mov	fp, r3
 8000588:	2320      	movs	r3, #32
 800058a:	1a9b      	subs	r3, r3, r2
 800058c:	4652      	mov	r2, sl
 800058e:	40da      	lsrs	r2, r3
 8000590:	4641      	mov	r1, r8
 8000592:	0013      	movs	r3, r2
 8000594:	464a      	mov	r2, r9
 8000596:	408a      	lsls	r2, r1
 8000598:	0017      	movs	r7, r2
 800059a:	4642      	mov	r2, r8
 800059c:	431f      	orrs	r7, r3
 800059e:	4653      	mov	r3, sl
 80005a0:	4093      	lsls	r3, r2
 80005a2:	001e      	movs	r6, r3
 80005a4:	42af      	cmp	r7, r5
 80005a6:	d9c3      	bls.n	8000530 <__udivmoddi4+0x4c>
 80005a8:	2200      	movs	r2, #0
 80005aa:	2300      	movs	r3, #0
 80005ac:	9200      	str	r2, [sp, #0]
 80005ae:	9301      	str	r3, [sp, #4]
 80005b0:	4643      	mov	r3, r8
 80005b2:	2b00      	cmp	r3, #0
 80005b4:	d0d8      	beq.n	8000568 <__udivmoddi4+0x84>
 80005b6:	07fb      	lsls	r3, r7, #31
 80005b8:	0872      	lsrs	r2, r6, #1
 80005ba:	431a      	orrs	r2, r3
 80005bc:	4646      	mov	r6, r8
 80005be:	087b      	lsrs	r3, r7, #1
 80005c0:	e00e      	b.n	80005e0 <__udivmoddi4+0xfc>
 80005c2:	42ab      	cmp	r3, r5
 80005c4:	d101      	bne.n	80005ca <__udivmoddi4+0xe6>
 80005c6:	42a2      	cmp	r2, r4
 80005c8:	d80c      	bhi.n	80005e4 <__udivmoddi4+0x100>
 80005ca:	1aa4      	subs	r4, r4, r2
 80005cc:	419d      	sbcs	r5, r3
 80005ce:	2001      	movs	r0, #1
 80005d0:	1924      	adds	r4, r4, r4
 80005d2:	416d      	adcs	r5, r5
 80005d4:	2100      	movs	r1, #0
 80005d6:	3e01      	subs	r6, #1
 80005d8:	1824      	adds	r4, r4, r0
 80005da:	414d      	adcs	r5, r1
 80005dc:	2e00      	cmp	r6, #0
 80005de:	d006      	beq.n	80005ee <__udivmoddi4+0x10a>
 80005e0:	42ab      	cmp	r3, r5
 80005e2:	d9ee      	bls.n	80005c2 <__udivmoddi4+0xde>
 80005e4:	3e01      	subs	r6, #1
 80005e6:	1924      	adds	r4, r4, r4
 80005e8:	416d      	adcs	r5, r5
 80005ea:	2e00      	cmp	r6, #0
 80005ec:	d1f8      	bne.n	80005e0 <__udivmoddi4+0xfc>
 80005ee:	9800      	ldr	r0, [sp, #0]
 80005f0:	9901      	ldr	r1, [sp, #4]
 80005f2:	465b      	mov	r3, fp
 80005f4:	1900      	adds	r0, r0, r4
 80005f6:	4169      	adcs	r1, r5
 80005f8:	2b00      	cmp	r3, #0
 80005fa:	db24      	blt.n	8000646 <__udivmoddi4+0x162>
 80005fc:	002b      	movs	r3, r5
 80005fe:	465a      	mov	r2, fp
 8000600:	4644      	mov	r4, r8
 8000602:	40d3      	lsrs	r3, r2
 8000604:	002a      	movs	r2, r5
 8000606:	40e2      	lsrs	r2, r4
 8000608:	001c      	movs	r4, r3
 800060a:	465b      	mov	r3, fp
 800060c:	0015      	movs	r5, r2
 800060e:	2b00      	cmp	r3, #0
 8000610:	db2a      	blt.n	8000668 <__udivmoddi4+0x184>
 8000612:	0026      	movs	r6, r4
 8000614:	409e      	lsls	r6, r3
 8000616:	0033      	movs	r3, r6
 8000618:	0026      	movs	r6, r4
 800061a:	4647      	mov	r7, r8
 800061c:	40be      	lsls	r6, r7
 800061e:	0032      	movs	r2, r6
 8000620:	1a80      	subs	r0, r0, r2
 8000622:	4199      	sbcs	r1, r3
 8000624:	9000      	str	r0, [sp, #0]
 8000626:	9101      	str	r1, [sp, #4]
 8000628:	e79e      	b.n	8000568 <__udivmoddi4+0x84>
 800062a:	42a3      	cmp	r3, r4
 800062c:	d8bc      	bhi.n	80005a8 <__udivmoddi4+0xc4>
 800062e:	e782      	b.n	8000536 <__udivmoddi4+0x52>
 8000630:	4642      	mov	r2, r8
 8000632:	2320      	movs	r3, #32
 8000634:	2100      	movs	r1, #0
 8000636:	1a9b      	subs	r3, r3, r2
 8000638:	2200      	movs	r2, #0
 800063a:	9100      	str	r1, [sp, #0]
 800063c:	9201      	str	r2, [sp, #4]
 800063e:	2201      	movs	r2, #1
 8000640:	40da      	lsrs	r2, r3
 8000642:	9201      	str	r2, [sp, #4]
 8000644:	e785      	b.n	8000552 <__udivmoddi4+0x6e>
 8000646:	4642      	mov	r2, r8
 8000648:	2320      	movs	r3, #32
 800064a:	1a9b      	subs	r3, r3, r2
 800064c:	002a      	movs	r2, r5
 800064e:	4646      	mov	r6, r8
 8000650:	409a      	lsls	r2, r3
 8000652:	0023      	movs	r3, r4
 8000654:	40f3      	lsrs	r3, r6
 8000656:	4644      	mov	r4, r8
 8000658:	4313      	orrs	r3, r2
 800065a:	002a      	movs	r2, r5
 800065c:	40e2      	lsrs	r2, r4
 800065e:	001c      	movs	r4, r3
 8000660:	465b      	mov	r3, fp
 8000662:	0015      	movs	r5, r2
 8000664:	2b00      	cmp	r3, #0
 8000666:	dad4      	bge.n	8000612 <__udivmoddi4+0x12e>
 8000668:	4642      	mov	r2, r8
 800066a:	002f      	movs	r7, r5
 800066c:	2320      	movs	r3, #32
 800066e:	0026      	movs	r6, r4
 8000670:	4097      	lsls	r7, r2
 8000672:	1a9b      	subs	r3, r3, r2
 8000674:	40de      	lsrs	r6, r3
 8000676:	003b      	movs	r3, r7
 8000678:	4333      	orrs	r3, r6
 800067a:	e7cd      	b.n	8000618 <__udivmoddi4+0x134>

0800067c <__aeabi_dadd>:
 800067c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800067e:	464f      	mov	r7, r9
 8000680:	4646      	mov	r6, r8
 8000682:	46d6      	mov	lr, sl
 8000684:	0004      	movs	r4, r0
 8000686:	b5c0      	push	{r6, r7, lr}
 8000688:	001f      	movs	r7, r3
 800068a:	030b      	lsls	r3, r1, #12
 800068c:	0010      	movs	r0, r2
 800068e:	004e      	lsls	r6, r1, #1
 8000690:	0a5b      	lsrs	r3, r3, #9
 8000692:	0fcd      	lsrs	r5, r1, #31
 8000694:	0f61      	lsrs	r1, r4, #29
 8000696:	007a      	lsls	r2, r7, #1
 8000698:	4319      	orrs	r1, r3
 800069a:	00e3      	lsls	r3, r4, #3
 800069c:	033c      	lsls	r4, r7, #12
 800069e:	0fff      	lsrs	r7, r7, #31
 80006a0:	46bc      	mov	ip, r7
 80006a2:	0a64      	lsrs	r4, r4, #9
 80006a4:	0f47      	lsrs	r7, r0, #29
 80006a6:	4327      	orrs	r7, r4
 80006a8:	0d76      	lsrs	r6, r6, #21
 80006aa:	0d52      	lsrs	r2, r2, #21
 80006ac:	00c0      	lsls	r0, r0, #3
 80006ae:	46b9      	mov	r9, r7
 80006b0:	4680      	mov	r8, r0
 80006b2:	1ab7      	subs	r7, r6, r2
 80006b4:	4565      	cmp	r5, ip
 80006b6:	d100      	bne.n	80006ba <__aeabi_dadd+0x3e>
 80006b8:	e09b      	b.n	80007f2 <__aeabi_dadd+0x176>
 80006ba:	2f00      	cmp	r7, #0
 80006bc:	dc00      	bgt.n	80006c0 <__aeabi_dadd+0x44>
 80006be:	e084      	b.n	80007ca <__aeabi_dadd+0x14e>
 80006c0:	2a00      	cmp	r2, #0
 80006c2:	d100      	bne.n	80006c6 <__aeabi_dadd+0x4a>
 80006c4:	e0be      	b.n	8000844 <__aeabi_dadd+0x1c8>
 80006c6:	4ac8      	ldr	r2, [pc, #800]	; (80009e8 <__aeabi_dadd+0x36c>)
 80006c8:	4296      	cmp	r6, r2
 80006ca:	d100      	bne.n	80006ce <__aeabi_dadd+0x52>
 80006cc:	e124      	b.n	8000918 <__aeabi_dadd+0x29c>
 80006ce:	2280      	movs	r2, #128	; 0x80
 80006d0:	464c      	mov	r4, r9
 80006d2:	0412      	lsls	r2, r2, #16
 80006d4:	4314      	orrs	r4, r2
 80006d6:	46a1      	mov	r9, r4
 80006d8:	2f38      	cmp	r7, #56	; 0x38
 80006da:	dd00      	ble.n	80006de <__aeabi_dadd+0x62>
 80006dc:	e167      	b.n	80009ae <__aeabi_dadd+0x332>
 80006de:	2f1f      	cmp	r7, #31
 80006e0:	dd00      	ble.n	80006e4 <__aeabi_dadd+0x68>
 80006e2:	e1d6      	b.n	8000a92 <__aeabi_dadd+0x416>
 80006e4:	2220      	movs	r2, #32
 80006e6:	464c      	mov	r4, r9
 80006e8:	1bd2      	subs	r2, r2, r7
 80006ea:	4094      	lsls	r4, r2
 80006ec:	46a2      	mov	sl, r4
 80006ee:	4644      	mov	r4, r8
 80006f0:	40fc      	lsrs	r4, r7
 80006f2:	0020      	movs	r0, r4
 80006f4:	4654      	mov	r4, sl
 80006f6:	4304      	orrs	r4, r0
 80006f8:	4640      	mov	r0, r8
 80006fa:	4090      	lsls	r0, r2
 80006fc:	1e42      	subs	r2, r0, #1
 80006fe:	4190      	sbcs	r0, r2
 8000700:	464a      	mov	r2, r9
 8000702:	40fa      	lsrs	r2, r7
 8000704:	4304      	orrs	r4, r0
 8000706:	1a89      	subs	r1, r1, r2
 8000708:	1b1c      	subs	r4, r3, r4
 800070a:	42a3      	cmp	r3, r4
 800070c:	4192      	sbcs	r2, r2
 800070e:	4252      	negs	r2, r2
 8000710:	1a8b      	subs	r3, r1, r2
 8000712:	469a      	mov	sl, r3
 8000714:	4653      	mov	r3, sl
 8000716:	021b      	lsls	r3, r3, #8
 8000718:	d400      	bmi.n	800071c <__aeabi_dadd+0xa0>
 800071a:	e0d4      	b.n	80008c6 <__aeabi_dadd+0x24a>
 800071c:	4653      	mov	r3, sl
 800071e:	025a      	lsls	r2, r3, #9
 8000720:	0a53      	lsrs	r3, r2, #9
 8000722:	469a      	mov	sl, r3
 8000724:	4653      	mov	r3, sl
 8000726:	2b00      	cmp	r3, #0
 8000728:	d100      	bne.n	800072c <__aeabi_dadd+0xb0>
 800072a:	e104      	b.n	8000936 <__aeabi_dadd+0x2ba>
 800072c:	4650      	mov	r0, sl
 800072e:	f001 fded 	bl	800230c <__clzsi2>
 8000732:	0003      	movs	r3, r0
 8000734:	3b08      	subs	r3, #8
 8000736:	2220      	movs	r2, #32
 8000738:	0020      	movs	r0, r4
 800073a:	1ad2      	subs	r2, r2, r3
 800073c:	4651      	mov	r1, sl
 800073e:	40d0      	lsrs	r0, r2
 8000740:	4099      	lsls	r1, r3
 8000742:	0002      	movs	r2, r0
 8000744:	409c      	lsls	r4, r3
 8000746:	430a      	orrs	r2, r1
 8000748:	42b3      	cmp	r3, r6
 800074a:	da00      	bge.n	800074e <__aeabi_dadd+0xd2>
 800074c:	e102      	b.n	8000954 <__aeabi_dadd+0x2d8>
 800074e:	1b9b      	subs	r3, r3, r6
 8000750:	1c59      	adds	r1, r3, #1
 8000752:	291f      	cmp	r1, #31
 8000754:	dd00      	ble.n	8000758 <__aeabi_dadd+0xdc>
 8000756:	e0a7      	b.n	80008a8 <__aeabi_dadd+0x22c>
 8000758:	2320      	movs	r3, #32
 800075a:	0010      	movs	r0, r2
 800075c:	0026      	movs	r6, r4
 800075e:	1a5b      	subs	r3, r3, r1
 8000760:	409c      	lsls	r4, r3
 8000762:	4098      	lsls	r0, r3
 8000764:	40ce      	lsrs	r6, r1
 8000766:	40ca      	lsrs	r2, r1
 8000768:	1e63      	subs	r3, r4, #1
 800076a:	419c      	sbcs	r4, r3
 800076c:	4330      	orrs	r0, r6
 800076e:	4692      	mov	sl, r2
 8000770:	2600      	movs	r6, #0
 8000772:	4304      	orrs	r4, r0
 8000774:	0763      	lsls	r3, r4, #29
 8000776:	d009      	beq.n	800078c <__aeabi_dadd+0x110>
 8000778:	230f      	movs	r3, #15
 800077a:	4023      	ands	r3, r4
 800077c:	2b04      	cmp	r3, #4
 800077e:	d005      	beq.n	800078c <__aeabi_dadd+0x110>
 8000780:	1d23      	adds	r3, r4, #4
 8000782:	42a3      	cmp	r3, r4
 8000784:	41a4      	sbcs	r4, r4
 8000786:	4264      	negs	r4, r4
 8000788:	44a2      	add	sl, r4
 800078a:	001c      	movs	r4, r3
 800078c:	4653      	mov	r3, sl
 800078e:	021b      	lsls	r3, r3, #8
 8000790:	d400      	bmi.n	8000794 <__aeabi_dadd+0x118>
 8000792:	e09b      	b.n	80008cc <__aeabi_dadd+0x250>
 8000794:	4b94      	ldr	r3, [pc, #592]	; (80009e8 <__aeabi_dadd+0x36c>)
 8000796:	3601      	adds	r6, #1
 8000798:	429e      	cmp	r6, r3
 800079a:	d100      	bne.n	800079e <__aeabi_dadd+0x122>
 800079c:	e0b8      	b.n	8000910 <__aeabi_dadd+0x294>
 800079e:	4653      	mov	r3, sl
 80007a0:	4992      	ldr	r1, [pc, #584]	; (80009ec <__aeabi_dadd+0x370>)
 80007a2:	08e4      	lsrs	r4, r4, #3
 80007a4:	400b      	ands	r3, r1
 80007a6:	0019      	movs	r1, r3
 80007a8:	075b      	lsls	r3, r3, #29
 80007aa:	4323      	orrs	r3, r4
 80007ac:	0572      	lsls	r2, r6, #21
 80007ae:	024c      	lsls	r4, r1, #9
 80007b0:	0b24      	lsrs	r4, r4, #12
 80007b2:	0d52      	lsrs	r2, r2, #21
 80007b4:	0512      	lsls	r2, r2, #20
 80007b6:	07ed      	lsls	r5, r5, #31
 80007b8:	4322      	orrs	r2, r4
 80007ba:	432a      	orrs	r2, r5
 80007bc:	0018      	movs	r0, r3
 80007be:	0011      	movs	r1, r2
 80007c0:	bce0      	pop	{r5, r6, r7}
 80007c2:	46ba      	mov	sl, r7
 80007c4:	46b1      	mov	r9, r6
 80007c6:	46a8      	mov	r8, r5
 80007c8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80007ca:	2f00      	cmp	r7, #0
 80007cc:	d048      	beq.n	8000860 <__aeabi_dadd+0x1e4>
 80007ce:	1b97      	subs	r7, r2, r6
 80007d0:	2e00      	cmp	r6, #0
 80007d2:	d000      	beq.n	80007d6 <__aeabi_dadd+0x15a>
 80007d4:	e10e      	b.n	80009f4 <__aeabi_dadd+0x378>
 80007d6:	000c      	movs	r4, r1
 80007d8:	431c      	orrs	r4, r3
 80007da:	d100      	bne.n	80007de <__aeabi_dadd+0x162>
 80007dc:	e1b7      	b.n	8000b4e <__aeabi_dadd+0x4d2>
 80007de:	1e7c      	subs	r4, r7, #1
 80007e0:	2f01      	cmp	r7, #1
 80007e2:	d100      	bne.n	80007e6 <__aeabi_dadd+0x16a>
 80007e4:	e226      	b.n	8000c34 <__aeabi_dadd+0x5b8>
 80007e6:	4d80      	ldr	r5, [pc, #512]	; (80009e8 <__aeabi_dadd+0x36c>)
 80007e8:	42af      	cmp	r7, r5
 80007ea:	d100      	bne.n	80007ee <__aeabi_dadd+0x172>
 80007ec:	e1d5      	b.n	8000b9a <__aeabi_dadd+0x51e>
 80007ee:	0027      	movs	r7, r4
 80007f0:	e107      	b.n	8000a02 <__aeabi_dadd+0x386>
 80007f2:	2f00      	cmp	r7, #0
 80007f4:	dc00      	bgt.n	80007f8 <__aeabi_dadd+0x17c>
 80007f6:	e0b2      	b.n	800095e <__aeabi_dadd+0x2e2>
 80007f8:	2a00      	cmp	r2, #0
 80007fa:	d047      	beq.n	800088c <__aeabi_dadd+0x210>
 80007fc:	4a7a      	ldr	r2, [pc, #488]	; (80009e8 <__aeabi_dadd+0x36c>)
 80007fe:	4296      	cmp	r6, r2
 8000800:	d100      	bne.n	8000804 <__aeabi_dadd+0x188>
 8000802:	e089      	b.n	8000918 <__aeabi_dadd+0x29c>
 8000804:	2280      	movs	r2, #128	; 0x80
 8000806:	464c      	mov	r4, r9
 8000808:	0412      	lsls	r2, r2, #16
 800080a:	4314      	orrs	r4, r2
 800080c:	46a1      	mov	r9, r4
 800080e:	2f38      	cmp	r7, #56	; 0x38
 8000810:	dc6b      	bgt.n	80008ea <__aeabi_dadd+0x26e>
 8000812:	2f1f      	cmp	r7, #31
 8000814:	dc00      	bgt.n	8000818 <__aeabi_dadd+0x19c>
 8000816:	e16e      	b.n	8000af6 <__aeabi_dadd+0x47a>
 8000818:	003a      	movs	r2, r7
 800081a:	4648      	mov	r0, r9
 800081c:	3a20      	subs	r2, #32
 800081e:	40d0      	lsrs	r0, r2
 8000820:	4684      	mov	ip, r0
 8000822:	2f20      	cmp	r7, #32
 8000824:	d007      	beq.n	8000836 <__aeabi_dadd+0x1ba>
 8000826:	2240      	movs	r2, #64	; 0x40
 8000828:	4648      	mov	r0, r9
 800082a:	1bd2      	subs	r2, r2, r7
 800082c:	4090      	lsls	r0, r2
 800082e:	0002      	movs	r2, r0
 8000830:	4640      	mov	r0, r8
 8000832:	4310      	orrs	r0, r2
 8000834:	4680      	mov	r8, r0
 8000836:	4640      	mov	r0, r8
 8000838:	1e42      	subs	r2, r0, #1
 800083a:	4190      	sbcs	r0, r2
 800083c:	4662      	mov	r2, ip
 800083e:	0004      	movs	r4, r0
 8000840:	4314      	orrs	r4, r2
 8000842:	e057      	b.n	80008f4 <__aeabi_dadd+0x278>
 8000844:	464a      	mov	r2, r9
 8000846:	4302      	orrs	r2, r0
 8000848:	d100      	bne.n	800084c <__aeabi_dadd+0x1d0>
 800084a:	e103      	b.n	8000a54 <__aeabi_dadd+0x3d8>
 800084c:	1e7a      	subs	r2, r7, #1
 800084e:	2f01      	cmp	r7, #1
 8000850:	d100      	bne.n	8000854 <__aeabi_dadd+0x1d8>
 8000852:	e193      	b.n	8000b7c <__aeabi_dadd+0x500>
 8000854:	4c64      	ldr	r4, [pc, #400]	; (80009e8 <__aeabi_dadd+0x36c>)
 8000856:	42a7      	cmp	r7, r4
 8000858:	d100      	bne.n	800085c <__aeabi_dadd+0x1e0>
 800085a:	e18a      	b.n	8000b72 <__aeabi_dadd+0x4f6>
 800085c:	0017      	movs	r7, r2
 800085e:	e73b      	b.n	80006d8 <__aeabi_dadd+0x5c>
 8000860:	4c63      	ldr	r4, [pc, #396]	; (80009f0 <__aeabi_dadd+0x374>)
 8000862:	1c72      	adds	r2, r6, #1
 8000864:	4222      	tst	r2, r4
 8000866:	d000      	beq.n	800086a <__aeabi_dadd+0x1ee>
 8000868:	e0e0      	b.n	8000a2c <__aeabi_dadd+0x3b0>
 800086a:	000a      	movs	r2, r1
 800086c:	431a      	orrs	r2, r3
 800086e:	2e00      	cmp	r6, #0
 8000870:	d000      	beq.n	8000874 <__aeabi_dadd+0x1f8>
 8000872:	e174      	b.n	8000b5e <__aeabi_dadd+0x4e2>
 8000874:	2a00      	cmp	r2, #0
 8000876:	d100      	bne.n	800087a <__aeabi_dadd+0x1fe>
 8000878:	e1d0      	b.n	8000c1c <__aeabi_dadd+0x5a0>
 800087a:	464a      	mov	r2, r9
 800087c:	4302      	orrs	r2, r0
 800087e:	d000      	beq.n	8000882 <__aeabi_dadd+0x206>
 8000880:	e1e3      	b.n	8000c4a <__aeabi_dadd+0x5ce>
 8000882:	074a      	lsls	r2, r1, #29
 8000884:	08db      	lsrs	r3, r3, #3
 8000886:	4313      	orrs	r3, r2
 8000888:	08c9      	lsrs	r1, r1, #3
 800088a:	e029      	b.n	80008e0 <__aeabi_dadd+0x264>
 800088c:	464a      	mov	r2, r9
 800088e:	4302      	orrs	r2, r0
 8000890:	d100      	bne.n	8000894 <__aeabi_dadd+0x218>
 8000892:	e17d      	b.n	8000b90 <__aeabi_dadd+0x514>
 8000894:	1e7a      	subs	r2, r7, #1
 8000896:	2f01      	cmp	r7, #1
 8000898:	d100      	bne.n	800089c <__aeabi_dadd+0x220>
 800089a:	e0e0      	b.n	8000a5e <__aeabi_dadd+0x3e2>
 800089c:	4c52      	ldr	r4, [pc, #328]	; (80009e8 <__aeabi_dadd+0x36c>)
 800089e:	42a7      	cmp	r7, r4
 80008a0:	d100      	bne.n	80008a4 <__aeabi_dadd+0x228>
 80008a2:	e166      	b.n	8000b72 <__aeabi_dadd+0x4f6>
 80008a4:	0017      	movs	r7, r2
 80008a6:	e7b2      	b.n	800080e <__aeabi_dadd+0x192>
 80008a8:	0010      	movs	r0, r2
 80008aa:	3b1f      	subs	r3, #31
 80008ac:	40d8      	lsrs	r0, r3
 80008ae:	2920      	cmp	r1, #32
 80008b0:	d003      	beq.n	80008ba <__aeabi_dadd+0x23e>
 80008b2:	2340      	movs	r3, #64	; 0x40
 80008b4:	1a5b      	subs	r3, r3, r1
 80008b6:	409a      	lsls	r2, r3
 80008b8:	4314      	orrs	r4, r2
 80008ba:	1e63      	subs	r3, r4, #1
 80008bc:	419c      	sbcs	r4, r3
 80008be:	2300      	movs	r3, #0
 80008c0:	2600      	movs	r6, #0
 80008c2:	469a      	mov	sl, r3
 80008c4:	4304      	orrs	r4, r0
 80008c6:	0763      	lsls	r3, r4, #29
 80008c8:	d000      	beq.n	80008cc <__aeabi_dadd+0x250>
 80008ca:	e755      	b.n	8000778 <__aeabi_dadd+0xfc>
 80008cc:	4652      	mov	r2, sl
 80008ce:	08e3      	lsrs	r3, r4, #3
 80008d0:	0752      	lsls	r2, r2, #29
 80008d2:	4313      	orrs	r3, r2
 80008d4:	4652      	mov	r2, sl
 80008d6:	0037      	movs	r7, r6
 80008d8:	08d1      	lsrs	r1, r2, #3
 80008da:	4a43      	ldr	r2, [pc, #268]	; (80009e8 <__aeabi_dadd+0x36c>)
 80008dc:	4297      	cmp	r7, r2
 80008de:	d01f      	beq.n	8000920 <__aeabi_dadd+0x2a4>
 80008e0:	0309      	lsls	r1, r1, #12
 80008e2:	057a      	lsls	r2, r7, #21
 80008e4:	0b0c      	lsrs	r4, r1, #12
 80008e6:	0d52      	lsrs	r2, r2, #21
 80008e8:	e764      	b.n	80007b4 <__aeabi_dadd+0x138>
 80008ea:	4642      	mov	r2, r8
 80008ec:	464c      	mov	r4, r9
 80008ee:	4314      	orrs	r4, r2
 80008f0:	1e62      	subs	r2, r4, #1
 80008f2:	4194      	sbcs	r4, r2
 80008f4:	18e4      	adds	r4, r4, r3
 80008f6:	429c      	cmp	r4, r3
 80008f8:	4192      	sbcs	r2, r2
 80008fa:	4252      	negs	r2, r2
 80008fc:	4692      	mov	sl, r2
 80008fe:	448a      	add	sl, r1
 8000900:	4653      	mov	r3, sl
 8000902:	021b      	lsls	r3, r3, #8
 8000904:	d5df      	bpl.n	80008c6 <__aeabi_dadd+0x24a>
 8000906:	4b38      	ldr	r3, [pc, #224]	; (80009e8 <__aeabi_dadd+0x36c>)
 8000908:	3601      	adds	r6, #1
 800090a:	429e      	cmp	r6, r3
 800090c:	d000      	beq.n	8000910 <__aeabi_dadd+0x294>
 800090e:	e0b3      	b.n	8000a78 <__aeabi_dadd+0x3fc>
 8000910:	0032      	movs	r2, r6
 8000912:	2400      	movs	r4, #0
 8000914:	2300      	movs	r3, #0
 8000916:	e74d      	b.n	80007b4 <__aeabi_dadd+0x138>
 8000918:	074a      	lsls	r2, r1, #29
 800091a:	08db      	lsrs	r3, r3, #3
 800091c:	4313      	orrs	r3, r2
 800091e:	08c9      	lsrs	r1, r1, #3
 8000920:	001a      	movs	r2, r3
 8000922:	430a      	orrs	r2, r1
 8000924:	d100      	bne.n	8000928 <__aeabi_dadd+0x2ac>
 8000926:	e200      	b.n	8000d2a <__aeabi_dadd+0x6ae>
 8000928:	2480      	movs	r4, #128	; 0x80
 800092a:	0324      	lsls	r4, r4, #12
 800092c:	430c      	orrs	r4, r1
 800092e:	0324      	lsls	r4, r4, #12
 8000930:	4a2d      	ldr	r2, [pc, #180]	; (80009e8 <__aeabi_dadd+0x36c>)
 8000932:	0b24      	lsrs	r4, r4, #12
 8000934:	e73e      	b.n	80007b4 <__aeabi_dadd+0x138>
 8000936:	0020      	movs	r0, r4
 8000938:	f001 fce8 	bl	800230c <__clzsi2>
 800093c:	0003      	movs	r3, r0
 800093e:	3318      	adds	r3, #24
 8000940:	2b1f      	cmp	r3, #31
 8000942:	dc00      	bgt.n	8000946 <__aeabi_dadd+0x2ca>
 8000944:	e6f7      	b.n	8000736 <__aeabi_dadd+0xba>
 8000946:	0022      	movs	r2, r4
 8000948:	3808      	subs	r0, #8
 800094a:	4082      	lsls	r2, r0
 800094c:	2400      	movs	r4, #0
 800094e:	42b3      	cmp	r3, r6
 8000950:	db00      	blt.n	8000954 <__aeabi_dadd+0x2d8>
 8000952:	e6fc      	b.n	800074e <__aeabi_dadd+0xd2>
 8000954:	1af6      	subs	r6, r6, r3
 8000956:	4b25      	ldr	r3, [pc, #148]	; (80009ec <__aeabi_dadd+0x370>)
 8000958:	401a      	ands	r2, r3
 800095a:	4692      	mov	sl, r2
 800095c:	e70a      	b.n	8000774 <__aeabi_dadd+0xf8>
 800095e:	2f00      	cmp	r7, #0
 8000960:	d02b      	beq.n	80009ba <__aeabi_dadd+0x33e>
 8000962:	1b97      	subs	r7, r2, r6
 8000964:	2e00      	cmp	r6, #0
 8000966:	d100      	bne.n	800096a <__aeabi_dadd+0x2ee>
 8000968:	e0b8      	b.n	8000adc <__aeabi_dadd+0x460>
 800096a:	4c1f      	ldr	r4, [pc, #124]	; (80009e8 <__aeabi_dadd+0x36c>)
 800096c:	42a2      	cmp	r2, r4
 800096e:	d100      	bne.n	8000972 <__aeabi_dadd+0x2f6>
 8000970:	e11c      	b.n	8000bac <__aeabi_dadd+0x530>
 8000972:	2480      	movs	r4, #128	; 0x80
 8000974:	0424      	lsls	r4, r4, #16
 8000976:	4321      	orrs	r1, r4
 8000978:	2f38      	cmp	r7, #56	; 0x38
 800097a:	dd00      	ble.n	800097e <__aeabi_dadd+0x302>
 800097c:	e11e      	b.n	8000bbc <__aeabi_dadd+0x540>
 800097e:	2f1f      	cmp	r7, #31
 8000980:	dd00      	ble.n	8000984 <__aeabi_dadd+0x308>
 8000982:	e19e      	b.n	8000cc2 <__aeabi_dadd+0x646>
 8000984:	2620      	movs	r6, #32
 8000986:	000c      	movs	r4, r1
 8000988:	1bf6      	subs	r6, r6, r7
 800098a:	0018      	movs	r0, r3
 800098c:	40b3      	lsls	r3, r6
 800098e:	40b4      	lsls	r4, r6
 8000990:	40f8      	lsrs	r0, r7
 8000992:	1e5e      	subs	r6, r3, #1
 8000994:	41b3      	sbcs	r3, r6
 8000996:	40f9      	lsrs	r1, r7
 8000998:	4304      	orrs	r4, r0
 800099a:	431c      	orrs	r4, r3
 800099c:	4489      	add	r9, r1
 800099e:	4444      	add	r4, r8
 80009a0:	4544      	cmp	r4, r8
 80009a2:	419b      	sbcs	r3, r3
 80009a4:	425b      	negs	r3, r3
 80009a6:	444b      	add	r3, r9
 80009a8:	469a      	mov	sl, r3
 80009aa:	0016      	movs	r6, r2
 80009ac:	e7a8      	b.n	8000900 <__aeabi_dadd+0x284>
 80009ae:	4642      	mov	r2, r8
 80009b0:	464c      	mov	r4, r9
 80009b2:	4314      	orrs	r4, r2
 80009b4:	1e62      	subs	r2, r4, #1
 80009b6:	4194      	sbcs	r4, r2
 80009b8:	e6a6      	b.n	8000708 <__aeabi_dadd+0x8c>
 80009ba:	4c0d      	ldr	r4, [pc, #52]	; (80009f0 <__aeabi_dadd+0x374>)
 80009bc:	1c72      	adds	r2, r6, #1
 80009be:	4222      	tst	r2, r4
 80009c0:	d000      	beq.n	80009c4 <__aeabi_dadd+0x348>
 80009c2:	e0a8      	b.n	8000b16 <__aeabi_dadd+0x49a>
 80009c4:	000a      	movs	r2, r1
 80009c6:	431a      	orrs	r2, r3
 80009c8:	2e00      	cmp	r6, #0
 80009ca:	d000      	beq.n	80009ce <__aeabi_dadd+0x352>
 80009cc:	e10a      	b.n	8000be4 <__aeabi_dadd+0x568>
 80009ce:	2a00      	cmp	r2, #0
 80009d0:	d100      	bne.n	80009d4 <__aeabi_dadd+0x358>
 80009d2:	e15e      	b.n	8000c92 <__aeabi_dadd+0x616>
 80009d4:	464a      	mov	r2, r9
 80009d6:	4302      	orrs	r2, r0
 80009d8:	d000      	beq.n	80009dc <__aeabi_dadd+0x360>
 80009da:	e161      	b.n	8000ca0 <__aeabi_dadd+0x624>
 80009dc:	074a      	lsls	r2, r1, #29
 80009de:	08db      	lsrs	r3, r3, #3
 80009e0:	4313      	orrs	r3, r2
 80009e2:	08c9      	lsrs	r1, r1, #3
 80009e4:	e77c      	b.n	80008e0 <__aeabi_dadd+0x264>
 80009e6:	46c0      	nop			; (mov r8, r8)
 80009e8:	000007ff 	.word	0x000007ff
 80009ec:	ff7fffff 	.word	0xff7fffff
 80009f0:	000007fe 	.word	0x000007fe
 80009f4:	4ccf      	ldr	r4, [pc, #828]	; (8000d34 <__aeabi_dadd+0x6b8>)
 80009f6:	42a2      	cmp	r2, r4
 80009f8:	d100      	bne.n	80009fc <__aeabi_dadd+0x380>
 80009fa:	e0ce      	b.n	8000b9a <__aeabi_dadd+0x51e>
 80009fc:	2480      	movs	r4, #128	; 0x80
 80009fe:	0424      	lsls	r4, r4, #16
 8000a00:	4321      	orrs	r1, r4
 8000a02:	2f38      	cmp	r7, #56	; 0x38
 8000a04:	dc5b      	bgt.n	8000abe <__aeabi_dadd+0x442>
 8000a06:	2f1f      	cmp	r7, #31
 8000a08:	dd00      	ble.n	8000a0c <__aeabi_dadd+0x390>
 8000a0a:	e0dc      	b.n	8000bc6 <__aeabi_dadd+0x54a>
 8000a0c:	2520      	movs	r5, #32
 8000a0e:	000c      	movs	r4, r1
 8000a10:	1bed      	subs	r5, r5, r7
 8000a12:	001e      	movs	r6, r3
 8000a14:	40ab      	lsls	r3, r5
 8000a16:	40ac      	lsls	r4, r5
 8000a18:	40fe      	lsrs	r6, r7
 8000a1a:	1e5d      	subs	r5, r3, #1
 8000a1c:	41ab      	sbcs	r3, r5
 8000a1e:	4334      	orrs	r4, r6
 8000a20:	40f9      	lsrs	r1, r7
 8000a22:	431c      	orrs	r4, r3
 8000a24:	464b      	mov	r3, r9
 8000a26:	1a5b      	subs	r3, r3, r1
 8000a28:	4699      	mov	r9, r3
 8000a2a:	e04c      	b.n	8000ac6 <__aeabi_dadd+0x44a>
 8000a2c:	464a      	mov	r2, r9
 8000a2e:	1a1c      	subs	r4, r3, r0
 8000a30:	1a88      	subs	r0, r1, r2
 8000a32:	42a3      	cmp	r3, r4
 8000a34:	4192      	sbcs	r2, r2
 8000a36:	4252      	negs	r2, r2
 8000a38:	4692      	mov	sl, r2
 8000a3a:	0002      	movs	r2, r0
 8000a3c:	4650      	mov	r0, sl
 8000a3e:	1a12      	subs	r2, r2, r0
 8000a40:	4692      	mov	sl, r2
 8000a42:	0212      	lsls	r2, r2, #8
 8000a44:	d478      	bmi.n	8000b38 <__aeabi_dadd+0x4bc>
 8000a46:	4653      	mov	r3, sl
 8000a48:	4323      	orrs	r3, r4
 8000a4a:	d000      	beq.n	8000a4e <__aeabi_dadd+0x3d2>
 8000a4c:	e66a      	b.n	8000724 <__aeabi_dadd+0xa8>
 8000a4e:	2100      	movs	r1, #0
 8000a50:	2500      	movs	r5, #0
 8000a52:	e745      	b.n	80008e0 <__aeabi_dadd+0x264>
 8000a54:	074a      	lsls	r2, r1, #29
 8000a56:	08db      	lsrs	r3, r3, #3
 8000a58:	4313      	orrs	r3, r2
 8000a5a:	08c9      	lsrs	r1, r1, #3
 8000a5c:	e73d      	b.n	80008da <__aeabi_dadd+0x25e>
 8000a5e:	181c      	adds	r4, r3, r0
 8000a60:	429c      	cmp	r4, r3
 8000a62:	419b      	sbcs	r3, r3
 8000a64:	4449      	add	r1, r9
 8000a66:	468a      	mov	sl, r1
 8000a68:	425b      	negs	r3, r3
 8000a6a:	449a      	add	sl, r3
 8000a6c:	4653      	mov	r3, sl
 8000a6e:	2601      	movs	r6, #1
 8000a70:	021b      	lsls	r3, r3, #8
 8000a72:	d400      	bmi.n	8000a76 <__aeabi_dadd+0x3fa>
 8000a74:	e727      	b.n	80008c6 <__aeabi_dadd+0x24a>
 8000a76:	2602      	movs	r6, #2
 8000a78:	4652      	mov	r2, sl
 8000a7a:	4baf      	ldr	r3, [pc, #700]	; (8000d38 <__aeabi_dadd+0x6bc>)
 8000a7c:	2101      	movs	r1, #1
 8000a7e:	401a      	ands	r2, r3
 8000a80:	0013      	movs	r3, r2
 8000a82:	4021      	ands	r1, r4
 8000a84:	0862      	lsrs	r2, r4, #1
 8000a86:	430a      	orrs	r2, r1
 8000a88:	07dc      	lsls	r4, r3, #31
 8000a8a:	085b      	lsrs	r3, r3, #1
 8000a8c:	469a      	mov	sl, r3
 8000a8e:	4314      	orrs	r4, r2
 8000a90:	e670      	b.n	8000774 <__aeabi_dadd+0xf8>
 8000a92:	003a      	movs	r2, r7
 8000a94:	464c      	mov	r4, r9
 8000a96:	3a20      	subs	r2, #32
 8000a98:	40d4      	lsrs	r4, r2
 8000a9a:	46a4      	mov	ip, r4
 8000a9c:	2f20      	cmp	r7, #32
 8000a9e:	d007      	beq.n	8000ab0 <__aeabi_dadd+0x434>
 8000aa0:	2240      	movs	r2, #64	; 0x40
 8000aa2:	4648      	mov	r0, r9
 8000aa4:	1bd2      	subs	r2, r2, r7
 8000aa6:	4090      	lsls	r0, r2
 8000aa8:	0002      	movs	r2, r0
 8000aaa:	4640      	mov	r0, r8
 8000aac:	4310      	orrs	r0, r2
 8000aae:	4680      	mov	r8, r0
 8000ab0:	4640      	mov	r0, r8
 8000ab2:	1e42      	subs	r2, r0, #1
 8000ab4:	4190      	sbcs	r0, r2
 8000ab6:	4662      	mov	r2, ip
 8000ab8:	0004      	movs	r4, r0
 8000aba:	4314      	orrs	r4, r2
 8000abc:	e624      	b.n	8000708 <__aeabi_dadd+0x8c>
 8000abe:	4319      	orrs	r1, r3
 8000ac0:	000c      	movs	r4, r1
 8000ac2:	1e63      	subs	r3, r4, #1
 8000ac4:	419c      	sbcs	r4, r3
 8000ac6:	4643      	mov	r3, r8
 8000ac8:	1b1c      	subs	r4, r3, r4
 8000aca:	45a0      	cmp	r8, r4
 8000acc:	419b      	sbcs	r3, r3
 8000ace:	4649      	mov	r1, r9
 8000ad0:	425b      	negs	r3, r3
 8000ad2:	1acb      	subs	r3, r1, r3
 8000ad4:	469a      	mov	sl, r3
 8000ad6:	4665      	mov	r5, ip
 8000ad8:	0016      	movs	r6, r2
 8000ada:	e61b      	b.n	8000714 <__aeabi_dadd+0x98>
 8000adc:	000c      	movs	r4, r1
 8000ade:	431c      	orrs	r4, r3
 8000ae0:	d100      	bne.n	8000ae4 <__aeabi_dadd+0x468>
 8000ae2:	e0c7      	b.n	8000c74 <__aeabi_dadd+0x5f8>
 8000ae4:	1e7c      	subs	r4, r7, #1
 8000ae6:	2f01      	cmp	r7, #1
 8000ae8:	d100      	bne.n	8000aec <__aeabi_dadd+0x470>
 8000aea:	e0f9      	b.n	8000ce0 <__aeabi_dadd+0x664>
 8000aec:	4e91      	ldr	r6, [pc, #580]	; (8000d34 <__aeabi_dadd+0x6b8>)
 8000aee:	42b7      	cmp	r7, r6
 8000af0:	d05c      	beq.n	8000bac <__aeabi_dadd+0x530>
 8000af2:	0027      	movs	r7, r4
 8000af4:	e740      	b.n	8000978 <__aeabi_dadd+0x2fc>
 8000af6:	2220      	movs	r2, #32
 8000af8:	464c      	mov	r4, r9
 8000afa:	4640      	mov	r0, r8
 8000afc:	1bd2      	subs	r2, r2, r7
 8000afe:	4094      	lsls	r4, r2
 8000b00:	40f8      	lsrs	r0, r7
 8000b02:	4304      	orrs	r4, r0
 8000b04:	4640      	mov	r0, r8
 8000b06:	4090      	lsls	r0, r2
 8000b08:	1e42      	subs	r2, r0, #1
 8000b0a:	4190      	sbcs	r0, r2
 8000b0c:	464a      	mov	r2, r9
 8000b0e:	40fa      	lsrs	r2, r7
 8000b10:	4304      	orrs	r4, r0
 8000b12:	1889      	adds	r1, r1, r2
 8000b14:	e6ee      	b.n	80008f4 <__aeabi_dadd+0x278>
 8000b16:	4c87      	ldr	r4, [pc, #540]	; (8000d34 <__aeabi_dadd+0x6b8>)
 8000b18:	42a2      	cmp	r2, r4
 8000b1a:	d100      	bne.n	8000b1e <__aeabi_dadd+0x4a2>
 8000b1c:	e6f9      	b.n	8000912 <__aeabi_dadd+0x296>
 8000b1e:	1818      	adds	r0, r3, r0
 8000b20:	4298      	cmp	r0, r3
 8000b22:	419b      	sbcs	r3, r3
 8000b24:	4449      	add	r1, r9
 8000b26:	425b      	negs	r3, r3
 8000b28:	18cb      	adds	r3, r1, r3
 8000b2a:	07dc      	lsls	r4, r3, #31
 8000b2c:	0840      	lsrs	r0, r0, #1
 8000b2e:	085b      	lsrs	r3, r3, #1
 8000b30:	469a      	mov	sl, r3
 8000b32:	0016      	movs	r6, r2
 8000b34:	4304      	orrs	r4, r0
 8000b36:	e6c6      	b.n	80008c6 <__aeabi_dadd+0x24a>
 8000b38:	4642      	mov	r2, r8
 8000b3a:	1ad4      	subs	r4, r2, r3
 8000b3c:	45a0      	cmp	r8, r4
 8000b3e:	4180      	sbcs	r0, r0
 8000b40:	464b      	mov	r3, r9
 8000b42:	4240      	negs	r0, r0
 8000b44:	1a59      	subs	r1, r3, r1
 8000b46:	1a0b      	subs	r3, r1, r0
 8000b48:	469a      	mov	sl, r3
 8000b4a:	4665      	mov	r5, ip
 8000b4c:	e5ea      	b.n	8000724 <__aeabi_dadd+0xa8>
 8000b4e:	464b      	mov	r3, r9
 8000b50:	464a      	mov	r2, r9
 8000b52:	08c0      	lsrs	r0, r0, #3
 8000b54:	075b      	lsls	r3, r3, #29
 8000b56:	4665      	mov	r5, ip
 8000b58:	4303      	orrs	r3, r0
 8000b5a:	08d1      	lsrs	r1, r2, #3
 8000b5c:	e6bd      	b.n	80008da <__aeabi_dadd+0x25e>
 8000b5e:	2a00      	cmp	r2, #0
 8000b60:	d000      	beq.n	8000b64 <__aeabi_dadd+0x4e8>
 8000b62:	e08e      	b.n	8000c82 <__aeabi_dadd+0x606>
 8000b64:	464b      	mov	r3, r9
 8000b66:	4303      	orrs	r3, r0
 8000b68:	d117      	bne.n	8000b9a <__aeabi_dadd+0x51e>
 8000b6a:	2180      	movs	r1, #128	; 0x80
 8000b6c:	2500      	movs	r5, #0
 8000b6e:	0309      	lsls	r1, r1, #12
 8000b70:	e6da      	b.n	8000928 <__aeabi_dadd+0x2ac>
 8000b72:	074a      	lsls	r2, r1, #29
 8000b74:	08db      	lsrs	r3, r3, #3
 8000b76:	4313      	orrs	r3, r2
 8000b78:	08c9      	lsrs	r1, r1, #3
 8000b7a:	e6d1      	b.n	8000920 <__aeabi_dadd+0x2a4>
 8000b7c:	1a1c      	subs	r4, r3, r0
 8000b7e:	464a      	mov	r2, r9
 8000b80:	42a3      	cmp	r3, r4
 8000b82:	419b      	sbcs	r3, r3
 8000b84:	1a89      	subs	r1, r1, r2
 8000b86:	425b      	negs	r3, r3
 8000b88:	1acb      	subs	r3, r1, r3
 8000b8a:	469a      	mov	sl, r3
 8000b8c:	2601      	movs	r6, #1
 8000b8e:	e5c1      	b.n	8000714 <__aeabi_dadd+0x98>
 8000b90:	074a      	lsls	r2, r1, #29
 8000b92:	08db      	lsrs	r3, r3, #3
 8000b94:	4313      	orrs	r3, r2
 8000b96:	08c9      	lsrs	r1, r1, #3
 8000b98:	e69f      	b.n	80008da <__aeabi_dadd+0x25e>
 8000b9a:	4643      	mov	r3, r8
 8000b9c:	08d8      	lsrs	r0, r3, #3
 8000b9e:	464b      	mov	r3, r9
 8000ba0:	464a      	mov	r2, r9
 8000ba2:	075b      	lsls	r3, r3, #29
 8000ba4:	4665      	mov	r5, ip
 8000ba6:	4303      	orrs	r3, r0
 8000ba8:	08d1      	lsrs	r1, r2, #3
 8000baa:	e6b9      	b.n	8000920 <__aeabi_dadd+0x2a4>
 8000bac:	4643      	mov	r3, r8
 8000bae:	08d8      	lsrs	r0, r3, #3
 8000bb0:	464b      	mov	r3, r9
 8000bb2:	464a      	mov	r2, r9
 8000bb4:	075b      	lsls	r3, r3, #29
 8000bb6:	4303      	orrs	r3, r0
 8000bb8:	08d1      	lsrs	r1, r2, #3
 8000bba:	e6b1      	b.n	8000920 <__aeabi_dadd+0x2a4>
 8000bbc:	4319      	orrs	r1, r3
 8000bbe:	000c      	movs	r4, r1
 8000bc0:	1e63      	subs	r3, r4, #1
 8000bc2:	419c      	sbcs	r4, r3
 8000bc4:	e6eb      	b.n	800099e <__aeabi_dadd+0x322>
 8000bc6:	003c      	movs	r4, r7
 8000bc8:	000d      	movs	r5, r1
 8000bca:	3c20      	subs	r4, #32
 8000bcc:	40e5      	lsrs	r5, r4
 8000bce:	2f20      	cmp	r7, #32
 8000bd0:	d003      	beq.n	8000bda <__aeabi_dadd+0x55e>
 8000bd2:	2440      	movs	r4, #64	; 0x40
 8000bd4:	1be4      	subs	r4, r4, r7
 8000bd6:	40a1      	lsls	r1, r4
 8000bd8:	430b      	orrs	r3, r1
 8000bda:	001c      	movs	r4, r3
 8000bdc:	1e63      	subs	r3, r4, #1
 8000bde:	419c      	sbcs	r4, r3
 8000be0:	432c      	orrs	r4, r5
 8000be2:	e770      	b.n	8000ac6 <__aeabi_dadd+0x44a>
 8000be4:	2a00      	cmp	r2, #0
 8000be6:	d0e1      	beq.n	8000bac <__aeabi_dadd+0x530>
 8000be8:	464a      	mov	r2, r9
 8000bea:	4302      	orrs	r2, r0
 8000bec:	d0c1      	beq.n	8000b72 <__aeabi_dadd+0x4f6>
 8000bee:	074a      	lsls	r2, r1, #29
 8000bf0:	08db      	lsrs	r3, r3, #3
 8000bf2:	4313      	orrs	r3, r2
 8000bf4:	2280      	movs	r2, #128	; 0x80
 8000bf6:	08c9      	lsrs	r1, r1, #3
 8000bf8:	0312      	lsls	r2, r2, #12
 8000bfa:	4211      	tst	r1, r2
 8000bfc:	d008      	beq.n	8000c10 <__aeabi_dadd+0x594>
 8000bfe:	4648      	mov	r0, r9
 8000c00:	08c4      	lsrs	r4, r0, #3
 8000c02:	4214      	tst	r4, r2
 8000c04:	d104      	bne.n	8000c10 <__aeabi_dadd+0x594>
 8000c06:	4643      	mov	r3, r8
 8000c08:	0021      	movs	r1, r4
 8000c0a:	08db      	lsrs	r3, r3, #3
 8000c0c:	0742      	lsls	r2, r0, #29
 8000c0e:	4313      	orrs	r3, r2
 8000c10:	0f5a      	lsrs	r2, r3, #29
 8000c12:	00db      	lsls	r3, r3, #3
 8000c14:	0752      	lsls	r2, r2, #29
 8000c16:	08db      	lsrs	r3, r3, #3
 8000c18:	4313      	orrs	r3, r2
 8000c1a:	e681      	b.n	8000920 <__aeabi_dadd+0x2a4>
 8000c1c:	464b      	mov	r3, r9
 8000c1e:	4303      	orrs	r3, r0
 8000c20:	d100      	bne.n	8000c24 <__aeabi_dadd+0x5a8>
 8000c22:	e714      	b.n	8000a4e <__aeabi_dadd+0x3d2>
 8000c24:	464b      	mov	r3, r9
 8000c26:	464a      	mov	r2, r9
 8000c28:	08c0      	lsrs	r0, r0, #3
 8000c2a:	075b      	lsls	r3, r3, #29
 8000c2c:	4665      	mov	r5, ip
 8000c2e:	4303      	orrs	r3, r0
 8000c30:	08d1      	lsrs	r1, r2, #3
 8000c32:	e655      	b.n	80008e0 <__aeabi_dadd+0x264>
 8000c34:	1ac4      	subs	r4, r0, r3
 8000c36:	45a0      	cmp	r8, r4
 8000c38:	4180      	sbcs	r0, r0
 8000c3a:	464b      	mov	r3, r9
 8000c3c:	4240      	negs	r0, r0
 8000c3e:	1a59      	subs	r1, r3, r1
 8000c40:	1a0b      	subs	r3, r1, r0
 8000c42:	469a      	mov	sl, r3
 8000c44:	4665      	mov	r5, ip
 8000c46:	2601      	movs	r6, #1
 8000c48:	e564      	b.n	8000714 <__aeabi_dadd+0x98>
 8000c4a:	1a1c      	subs	r4, r3, r0
 8000c4c:	464a      	mov	r2, r9
 8000c4e:	42a3      	cmp	r3, r4
 8000c50:	4180      	sbcs	r0, r0
 8000c52:	1a8a      	subs	r2, r1, r2
 8000c54:	4240      	negs	r0, r0
 8000c56:	1a12      	subs	r2, r2, r0
 8000c58:	4692      	mov	sl, r2
 8000c5a:	0212      	lsls	r2, r2, #8
 8000c5c:	d549      	bpl.n	8000cf2 <__aeabi_dadd+0x676>
 8000c5e:	4642      	mov	r2, r8
 8000c60:	1ad4      	subs	r4, r2, r3
 8000c62:	45a0      	cmp	r8, r4
 8000c64:	4180      	sbcs	r0, r0
 8000c66:	464b      	mov	r3, r9
 8000c68:	4240      	negs	r0, r0
 8000c6a:	1a59      	subs	r1, r3, r1
 8000c6c:	1a0b      	subs	r3, r1, r0
 8000c6e:	469a      	mov	sl, r3
 8000c70:	4665      	mov	r5, ip
 8000c72:	e57f      	b.n	8000774 <__aeabi_dadd+0xf8>
 8000c74:	464b      	mov	r3, r9
 8000c76:	464a      	mov	r2, r9
 8000c78:	08c0      	lsrs	r0, r0, #3
 8000c7a:	075b      	lsls	r3, r3, #29
 8000c7c:	4303      	orrs	r3, r0
 8000c7e:	08d1      	lsrs	r1, r2, #3
 8000c80:	e62b      	b.n	80008da <__aeabi_dadd+0x25e>
 8000c82:	464a      	mov	r2, r9
 8000c84:	08db      	lsrs	r3, r3, #3
 8000c86:	4302      	orrs	r2, r0
 8000c88:	d138      	bne.n	8000cfc <__aeabi_dadd+0x680>
 8000c8a:	074a      	lsls	r2, r1, #29
 8000c8c:	4313      	orrs	r3, r2
 8000c8e:	08c9      	lsrs	r1, r1, #3
 8000c90:	e646      	b.n	8000920 <__aeabi_dadd+0x2a4>
 8000c92:	464b      	mov	r3, r9
 8000c94:	464a      	mov	r2, r9
 8000c96:	08c0      	lsrs	r0, r0, #3
 8000c98:	075b      	lsls	r3, r3, #29
 8000c9a:	4303      	orrs	r3, r0
 8000c9c:	08d1      	lsrs	r1, r2, #3
 8000c9e:	e61f      	b.n	80008e0 <__aeabi_dadd+0x264>
 8000ca0:	181c      	adds	r4, r3, r0
 8000ca2:	429c      	cmp	r4, r3
 8000ca4:	419b      	sbcs	r3, r3
 8000ca6:	4449      	add	r1, r9
 8000ca8:	468a      	mov	sl, r1
 8000caa:	425b      	negs	r3, r3
 8000cac:	449a      	add	sl, r3
 8000cae:	4653      	mov	r3, sl
 8000cb0:	021b      	lsls	r3, r3, #8
 8000cb2:	d400      	bmi.n	8000cb6 <__aeabi_dadd+0x63a>
 8000cb4:	e607      	b.n	80008c6 <__aeabi_dadd+0x24a>
 8000cb6:	4652      	mov	r2, sl
 8000cb8:	4b1f      	ldr	r3, [pc, #124]	; (8000d38 <__aeabi_dadd+0x6bc>)
 8000cba:	2601      	movs	r6, #1
 8000cbc:	401a      	ands	r2, r3
 8000cbe:	4692      	mov	sl, r2
 8000cc0:	e601      	b.n	80008c6 <__aeabi_dadd+0x24a>
 8000cc2:	003c      	movs	r4, r7
 8000cc4:	000e      	movs	r6, r1
 8000cc6:	3c20      	subs	r4, #32
 8000cc8:	40e6      	lsrs	r6, r4
 8000cca:	2f20      	cmp	r7, #32
 8000ccc:	d003      	beq.n	8000cd6 <__aeabi_dadd+0x65a>
 8000cce:	2440      	movs	r4, #64	; 0x40
 8000cd0:	1be4      	subs	r4, r4, r7
 8000cd2:	40a1      	lsls	r1, r4
 8000cd4:	430b      	orrs	r3, r1
 8000cd6:	001c      	movs	r4, r3
 8000cd8:	1e63      	subs	r3, r4, #1
 8000cda:	419c      	sbcs	r4, r3
 8000cdc:	4334      	orrs	r4, r6
 8000cde:	e65e      	b.n	800099e <__aeabi_dadd+0x322>
 8000ce0:	4443      	add	r3, r8
 8000ce2:	4283      	cmp	r3, r0
 8000ce4:	4180      	sbcs	r0, r0
 8000ce6:	4449      	add	r1, r9
 8000ce8:	468a      	mov	sl, r1
 8000cea:	4240      	negs	r0, r0
 8000cec:	001c      	movs	r4, r3
 8000cee:	4482      	add	sl, r0
 8000cf0:	e6bc      	b.n	8000a6c <__aeabi_dadd+0x3f0>
 8000cf2:	4653      	mov	r3, sl
 8000cf4:	4323      	orrs	r3, r4
 8000cf6:	d100      	bne.n	8000cfa <__aeabi_dadd+0x67e>
 8000cf8:	e6a9      	b.n	8000a4e <__aeabi_dadd+0x3d2>
 8000cfa:	e5e4      	b.n	80008c6 <__aeabi_dadd+0x24a>
 8000cfc:	074a      	lsls	r2, r1, #29
 8000cfe:	4313      	orrs	r3, r2
 8000d00:	2280      	movs	r2, #128	; 0x80
 8000d02:	08c9      	lsrs	r1, r1, #3
 8000d04:	0312      	lsls	r2, r2, #12
 8000d06:	4211      	tst	r1, r2
 8000d08:	d009      	beq.n	8000d1e <__aeabi_dadd+0x6a2>
 8000d0a:	4648      	mov	r0, r9
 8000d0c:	08c4      	lsrs	r4, r0, #3
 8000d0e:	4214      	tst	r4, r2
 8000d10:	d105      	bne.n	8000d1e <__aeabi_dadd+0x6a2>
 8000d12:	4643      	mov	r3, r8
 8000d14:	4665      	mov	r5, ip
 8000d16:	0021      	movs	r1, r4
 8000d18:	08db      	lsrs	r3, r3, #3
 8000d1a:	0742      	lsls	r2, r0, #29
 8000d1c:	4313      	orrs	r3, r2
 8000d1e:	0f5a      	lsrs	r2, r3, #29
 8000d20:	00db      	lsls	r3, r3, #3
 8000d22:	08db      	lsrs	r3, r3, #3
 8000d24:	0752      	lsls	r2, r2, #29
 8000d26:	4313      	orrs	r3, r2
 8000d28:	e5fa      	b.n	8000920 <__aeabi_dadd+0x2a4>
 8000d2a:	2300      	movs	r3, #0
 8000d2c:	4a01      	ldr	r2, [pc, #4]	; (8000d34 <__aeabi_dadd+0x6b8>)
 8000d2e:	001c      	movs	r4, r3
 8000d30:	e540      	b.n	80007b4 <__aeabi_dadd+0x138>
 8000d32:	46c0      	nop			; (mov r8, r8)
 8000d34:	000007ff 	.word	0x000007ff
 8000d38:	ff7fffff 	.word	0xff7fffff

08000d3c <__aeabi_ddiv>:
 8000d3c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000d3e:	4657      	mov	r7, sl
 8000d40:	464e      	mov	r6, r9
 8000d42:	4645      	mov	r5, r8
 8000d44:	46de      	mov	lr, fp
 8000d46:	b5e0      	push	{r5, r6, r7, lr}
 8000d48:	030c      	lsls	r4, r1, #12
 8000d4a:	001f      	movs	r7, r3
 8000d4c:	004b      	lsls	r3, r1, #1
 8000d4e:	4681      	mov	r9, r0
 8000d50:	4692      	mov	sl, r2
 8000d52:	0005      	movs	r5, r0
 8000d54:	b085      	sub	sp, #20
 8000d56:	0b24      	lsrs	r4, r4, #12
 8000d58:	0d5b      	lsrs	r3, r3, #21
 8000d5a:	0fce      	lsrs	r6, r1, #31
 8000d5c:	2b00      	cmp	r3, #0
 8000d5e:	d100      	bne.n	8000d62 <__aeabi_ddiv+0x26>
 8000d60:	e152      	b.n	8001008 <__aeabi_ddiv+0x2cc>
 8000d62:	4ad2      	ldr	r2, [pc, #840]	; (80010ac <__aeabi_ddiv+0x370>)
 8000d64:	4293      	cmp	r3, r2
 8000d66:	d100      	bne.n	8000d6a <__aeabi_ddiv+0x2e>
 8000d68:	e16e      	b.n	8001048 <__aeabi_ddiv+0x30c>
 8000d6a:	0f42      	lsrs	r2, r0, #29
 8000d6c:	00e4      	lsls	r4, r4, #3
 8000d6e:	4314      	orrs	r4, r2
 8000d70:	2280      	movs	r2, #128	; 0x80
 8000d72:	0412      	lsls	r2, r2, #16
 8000d74:	4322      	orrs	r2, r4
 8000d76:	4690      	mov	r8, r2
 8000d78:	4acd      	ldr	r2, [pc, #820]	; (80010b0 <__aeabi_ddiv+0x374>)
 8000d7a:	00c5      	lsls	r5, r0, #3
 8000d7c:	4693      	mov	fp, r2
 8000d7e:	449b      	add	fp, r3
 8000d80:	2300      	movs	r3, #0
 8000d82:	4699      	mov	r9, r3
 8000d84:	9300      	str	r3, [sp, #0]
 8000d86:	033c      	lsls	r4, r7, #12
 8000d88:	007b      	lsls	r3, r7, #1
 8000d8a:	4650      	mov	r0, sl
 8000d8c:	0b24      	lsrs	r4, r4, #12
 8000d8e:	0d5b      	lsrs	r3, r3, #21
 8000d90:	0fff      	lsrs	r7, r7, #31
 8000d92:	2b00      	cmp	r3, #0
 8000d94:	d100      	bne.n	8000d98 <__aeabi_ddiv+0x5c>
 8000d96:	e11a      	b.n	8000fce <__aeabi_ddiv+0x292>
 8000d98:	4ac4      	ldr	r2, [pc, #784]	; (80010ac <__aeabi_ddiv+0x370>)
 8000d9a:	4293      	cmp	r3, r2
 8000d9c:	d100      	bne.n	8000da0 <__aeabi_ddiv+0x64>
 8000d9e:	e15e      	b.n	800105e <__aeabi_ddiv+0x322>
 8000da0:	0f42      	lsrs	r2, r0, #29
 8000da2:	00e4      	lsls	r4, r4, #3
 8000da4:	4322      	orrs	r2, r4
 8000da6:	2480      	movs	r4, #128	; 0x80
 8000da8:	0424      	lsls	r4, r4, #16
 8000daa:	4314      	orrs	r4, r2
 8000dac:	4ac0      	ldr	r2, [pc, #768]	; (80010b0 <__aeabi_ddiv+0x374>)
 8000dae:	00c1      	lsls	r1, r0, #3
 8000db0:	4694      	mov	ip, r2
 8000db2:	465a      	mov	r2, fp
 8000db4:	4463      	add	r3, ip
 8000db6:	1ad3      	subs	r3, r2, r3
 8000db8:	469b      	mov	fp, r3
 8000dba:	2000      	movs	r0, #0
 8000dbc:	0033      	movs	r3, r6
 8000dbe:	407b      	eors	r3, r7
 8000dc0:	469a      	mov	sl, r3
 8000dc2:	464b      	mov	r3, r9
 8000dc4:	2b0f      	cmp	r3, #15
 8000dc6:	d827      	bhi.n	8000e18 <__aeabi_ddiv+0xdc>
 8000dc8:	4aba      	ldr	r2, [pc, #744]	; (80010b4 <__aeabi_ddiv+0x378>)
 8000dca:	009b      	lsls	r3, r3, #2
 8000dcc:	58d3      	ldr	r3, [r2, r3]
 8000dce:	469f      	mov	pc, r3
 8000dd0:	46b2      	mov	sl, r6
 8000dd2:	9b00      	ldr	r3, [sp, #0]
 8000dd4:	2b02      	cmp	r3, #2
 8000dd6:	d016      	beq.n	8000e06 <__aeabi_ddiv+0xca>
 8000dd8:	2b03      	cmp	r3, #3
 8000dda:	d100      	bne.n	8000dde <__aeabi_ddiv+0xa2>
 8000ddc:	e287      	b.n	80012ee <__aeabi_ddiv+0x5b2>
 8000dde:	2b01      	cmp	r3, #1
 8000de0:	d000      	beq.n	8000de4 <__aeabi_ddiv+0xa8>
 8000de2:	e0d5      	b.n	8000f90 <__aeabi_ddiv+0x254>
 8000de4:	2300      	movs	r3, #0
 8000de6:	2200      	movs	r2, #0
 8000de8:	2500      	movs	r5, #0
 8000dea:	051b      	lsls	r3, r3, #20
 8000dec:	4313      	orrs	r3, r2
 8000dee:	4652      	mov	r2, sl
 8000df0:	07d2      	lsls	r2, r2, #31
 8000df2:	4313      	orrs	r3, r2
 8000df4:	0028      	movs	r0, r5
 8000df6:	0019      	movs	r1, r3
 8000df8:	b005      	add	sp, #20
 8000dfa:	bcf0      	pop	{r4, r5, r6, r7}
 8000dfc:	46bb      	mov	fp, r7
 8000dfe:	46b2      	mov	sl, r6
 8000e00:	46a9      	mov	r9, r5
 8000e02:	46a0      	mov	r8, r4
 8000e04:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000e06:	2200      	movs	r2, #0
 8000e08:	2500      	movs	r5, #0
 8000e0a:	4ba8      	ldr	r3, [pc, #672]	; (80010ac <__aeabi_ddiv+0x370>)
 8000e0c:	e7ed      	b.n	8000dea <__aeabi_ddiv+0xae>
 8000e0e:	46ba      	mov	sl, r7
 8000e10:	46a0      	mov	r8, r4
 8000e12:	000d      	movs	r5, r1
 8000e14:	9000      	str	r0, [sp, #0]
 8000e16:	e7dc      	b.n	8000dd2 <__aeabi_ddiv+0x96>
 8000e18:	4544      	cmp	r4, r8
 8000e1a:	d200      	bcs.n	8000e1e <__aeabi_ddiv+0xe2>
 8000e1c:	e1c4      	b.n	80011a8 <__aeabi_ddiv+0x46c>
 8000e1e:	d100      	bne.n	8000e22 <__aeabi_ddiv+0xe6>
 8000e20:	e1bf      	b.n	80011a2 <__aeabi_ddiv+0x466>
 8000e22:	2301      	movs	r3, #1
 8000e24:	425b      	negs	r3, r3
 8000e26:	469c      	mov	ip, r3
 8000e28:	002e      	movs	r6, r5
 8000e2a:	4640      	mov	r0, r8
 8000e2c:	2500      	movs	r5, #0
 8000e2e:	44e3      	add	fp, ip
 8000e30:	0223      	lsls	r3, r4, #8
 8000e32:	0e0c      	lsrs	r4, r1, #24
 8000e34:	431c      	orrs	r4, r3
 8000e36:	0c1b      	lsrs	r3, r3, #16
 8000e38:	4699      	mov	r9, r3
 8000e3a:	0423      	lsls	r3, r4, #16
 8000e3c:	020a      	lsls	r2, r1, #8
 8000e3e:	0c1f      	lsrs	r7, r3, #16
 8000e40:	4649      	mov	r1, r9
 8000e42:	9200      	str	r2, [sp, #0]
 8000e44:	9701      	str	r7, [sp, #4]
 8000e46:	f7ff f9ff 	bl	8000248 <__aeabi_uidivmod>
 8000e4a:	0002      	movs	r2, r0
 8000e4c:	437a      	muls	r2, r7
 8000e4e:	040b      	lsls	r3, r1, #16
 8000e50:	0c31      	lsrs	r1, r6, #16
 8000e52:	4680      	mov	r8, r0
 8000e54:	4319      	orrs	r1, r3
 8000e56:	428a      	cmp	r2, r1
 8000e58:	d907      	bls.n	8000e6a <__aeabi_ddiv+0x12e>
 8000e5a:	2301      	movs	r3, #1
 8000e5c:	425b      	negs	r3, r3
 8000e5e:	469c      	mov	ip, r3
 8000e60:	1909      	adds	r1, r1, r4
 8000e62:	44e0      	add	r8, ip
 8000e64:	428c      	cmp	r4, r1
 8000e66:	d800      	bhi.n	8000e6a <__aeabi_ddiv+0x12e>
 8000e68:	e201      	b.n	800126e <__aeabi_ddiv+0x532>
 8000e6a:	1a88      	subs	r0, r1, r2
 8000e6c:	4649      	mov	r1, r9
 8000e6e:	f7ff f9eb 	bl	8000248 <__aeabi_uidivmod>
 8000e72:	9a01      	ldr	r2, [sp, #4]
 8000e74:	0436      	lsls	r6, r6, #16
 8000e76:	4342      	muls	r2, r0
 8000e78:	0409      	lsls	r1, r1, #16
 8000e7a:	0c36      	lsrs	r6, r6, #16
 8000e7c:	0003      	movs	r3, r0
 8000e7e:	430e      	orrs	r6, r1
 8000e80:	42b2      	cmp	r2, r6
 8000e82:	d904      	bls.n	8000e8e <__aeabi_ddiv+0x152>
 8000e84:	1936      	adds	r6, r6, r4
 8000e86:	3b01      	subs	r3, #1
 8000e88:	42b4      	cmp	r4, r6
 8000e8a:	d800      	bhi.n	8000e8e <__aeabi_ddiv+0x152>
 8000e8c:	e1e9      	b.n	8001262 <__aeabi_ddiv+0x526>
 8000e8e:	1ab0      	subs	r0, r6, r2
 8000e90:	4642      	mov	r2, r8
 8000e92:	9e00      	ldr	r6, [sp, #0]
 8000e94:	0412      	lsls	r2, r2, #16
 8000e96:	431a      	orrs	r2, r3
 8000e98:	0c33      	lsrs	r3, r6, #16
 8000e9a:	001f      	movs	r7, r3
 8000e9c:	0c11      	lsrs	r1, r2, #16
 8000e9e:	4690      	mov	r8, r2
 8000ea0:	9302      	str	r3, [sp, #8]
 8000ea2:	0413      	lsls	r3, r2, #16
 8000ea4:	0432      	lsls	r2, r6, #16
 8000ea6:	0c16      	lsrs	r6, r2, #16
 8000ea8:	0032      	movs	r2, r6
 8000eaa:	0c1b      	lsrs	r3, r3, #16
 8000eac:	435a      	muls	r2, r3
 8000eae:	9603      	str	r6, [sp, #12]
 8000eb0:	437b      	muls	r3, r7
 8000eb2:	434e      	muls	r6, r1
 8000eb4:	4379      	muls	r1, r7
 8000eb6:	0c17      	lsrs	r7, r2, #16
 8000eb8:	46bc      	mov	ip, r7
 8000eba:	199b      	adds	r3, r3, r6
 8000ebc:	4463      	add	r3, ip
 8000ebe:	429e      	cmp	r6, r3
 8000ec0:	d903      	bls.n	8000eca <__aeabi_ddiv+0x18e>
 8000ec2:	2680      	movs	r6, #128	; 0x80
 8000ec4:	0276      	lsls	r6, r6, #9
 8000ec6:	46b4      	mov	ip, r6
 8000ec8:	4461      	add	r1, ip
 8000eca:	0c1e      	lsrs	r6, r3, #16
 8000ecc:	1871      	adds	r1, r6, r1
 8000ece:	0416      	lsls	r6, r2, #16
 8000ed0:	041b      	lsls	r3, r3, #16
 8000ed2:	0c36      	lsrs	r6, r6, #16
 8000ed4:	199e      	adds	r6, r3, r6
 8000ed6:	4288      	cmp	r0, r1
 8000ed8:	d302      	bcc.n	8000ee0 <__aeabi_ddiv+0x1a4>
 8000eda:	d112      	bne.n	8000f02 <__aeabi_ddiv+0x1c6>
 8000edc:	42b5      	cmp	r5, r6
 8000ede:	d210      	bcs.n	8000f02 <__aeabi_ddiv+0x1c6>
 8000ee0:	4643      	mov	r3, r8
 8000ee2:	1e5a      	subs	r2, r3, #1
 8000ee4:	9b00      	ldr	r3, [sp, #0]
 8000ee6:	469c      	mov	ip, r3
 8000ee8:	4465      	add	r5, ip
 8000eea:	001f      	movs	r7, r3
 8000eec:	429d      	cmp	r5, r3
 8000eee:	419b      	sbcs	r3, r3
 8000ef0:	425b      	negs	r3, r3
 8000ef2:	191b      	adds	r3, r3, r4
 8000ef4:	18c0      	adds	r0, r0, r3
 8000ef6:	4284      	cmp	r4, r0
 8000ef8:	d200      	bcs.n	8000efc <__aeabi_ddiv+0x1c0>
 8000efa:	e19e      	b.n	800123a <__aeabi_ddiv+0x4fe>
 8000efc:	d100      	bne.n	8000f00 <__aeabi_ddiv+0x1c4>
 8000efe:	e199      	b.n	8001234 <__aeabi_ddiv+0x4f8>
 8000f00:	4690      	mov	r8, r2
 8000f02:	1bae      	subs	r6, r5, r6
 8000f04:	42b5      	cmp	r5, r6
 8000f06:	41ad      	sbcs	r5, r5
 8000f08:	1a40      	subs	r0, r0, r1
 8000f0a:	426d      	negs	r5, r5
 8000f0c:	1b40      	subs	r0, r0, r5
 8000f0e:	4284      	cmp	r4, r0
 8000f10:	d100      	bne.n	8000f14 <__aeabi_ddiv+0x1d8>
 8000f12:	e1d2      	b.n	80012ba <__aeabi_ddiv+0x57e>
 8000f14:	4649      	mov	r1, r9
 8000f16:	f7ff f997 	bl	8000248 <__aeabi_uidivmod>
 8000f1a:	9a01      	ldr	r2, [sp, #4]
 8000f1c:	040b      	lsls	r3, r1, #16
 8000f1e:	4342      	muls	r2, r0
 8000f20:	0c31      	lsrs	r1, r6, #16
 8000f22:	0005      	movs	r5, r0
 8000f24:	4319      	orrs	r1, r3
 8000f26:	428a      	cmp	r2, r1
 8000f28:	d900      	bls.n	8000f2c <__aeabi_ddiv+0x1f0>
 8000f2a:	e16c      	b.n	8001206 <__aeabi_ddiv+0x4ca>
 8000f2c:	1a88      	subs	r0, r1, r2
 8000f2e:	4649      	mov	r1, r9
 8000f30:	f7ff f98a 	bl	8000248 <__aeabi_uidivmod>
 8000f34:	9a01      	ldr	r2, [sp, #4]
 8000f36:	0436      	lsls	r6, r6, #16
 8000f38:	4342      	muls	r2, r0
 8000f3a:	0409      	lsls	r1, r1, #16
 8000f3c:	0c36      	lsrs	r6, r6, #16
 8000f3e:	0003      	movs	r3, r0
 8000f40:	430e      	orrs	r6, r1
 8000f42:	42b2      	cmp	r2, r6
 8000f44:	d900      	bls.n	8000f48 <__aeabi_ddiv+0x20c>
 8000f46:	e153      	b.n	80011f0 <__aeabi_ddiv+0x4b4>
 8000f48:	9803      	ldr	r0, [sp, #12]
 8000f4a:	1ab6      	subs	r6, r6, r2
 8000f4c:	0002      	movs	r2, r0
 8000f4e:	042d      	lsls	r5, r5, #16
 8000f50:	431d      	orrs	r5, r3
 8000f52:	9f02      	ldr	r7, [sp, #8]
 8000f54:	042b      	lsls	r3, r5, #16
 8000f56:	0c1b      	lsrs	r3, r3, #16
 8000f58:	435a      	muls	r2, r3
 8000f5a:	437b      	muls	r3, r7
 8000f5c:	469c      	mov	ip, r3
 8000f5e:	0c29      	lsrs	r1, r5, #16
 8000f60:	4348      	muls	r0, r1
 8000f62:	0c13      	lsrs	r3, r2, #16
 8000f64:	4484      	add	ip, r0
 8000f66:	4463      	add	r3, ip
 8000f68:	4379      	muls	r1, r7
 8000f6a:	4298      	cmp	r0, r3
 8000f6c:	d903      	bls.n	8000f76 <__aeabi_ddiv+0x23a>
 8000f6e:	2080      	movs	r0, #128	; 0x80
 8000f70:	0240      	lsls	r0, r0, #9
 8000f72:	4684      	mov	ip, r0
 8000f74:	4461      	add	r1, ip
 8000f76:	0c18      	lsrs	r0, r3, #16
 8000f78:	0412      	lsls	r2, r2, #16
 8000f7a:	041b      	lsls	r3, r3, #16
 8000f7c:	0c12      	lsrs	r2, r2, #16
 8000f7e:	1840      	adds	r0, r0, r1
 8000f80:	189b      	adds	r3, r3, r2
 8000f82:	4286      	cmp	r6, r0
 8000f84:	d200      	bcs.n	8000f88 <__aeabi_ddiv+0x24c>
 8000f86:	e100      	b.n	800118a <__aeabi_ddiv+0x44e>
 8000f88:	d100      	bne.n	8000f8c <__aeabi_ddiv+0x250>
 8000f8a:	e0fb      	b.n	8001184 <__aeabi_ddiv+0x448>
 8000f8c:	2301      	movs	r3, #1
 8000f8e:	431d      	orrs	r5, r3
 8000f90:	4b49      	ldr	r3, [pc, #292]	; (80010b8 <__aeabi_ddiv+0x37c>)
 8000f92:	445b      	add	r3, fp
 8000f94:	2b00      	cmp	r3, #0
 8000f96:	dc00      	bgt.n	8000f9a <__aeabi_ddiv+0x25e>
 8000f98:	e0aa      	b.n	80010f0 <__aeabi_ddiv+0x3b4>
 8000f9a:	076a      	lsls	r2, r5, #29
 8000f9c:	d000      	beq.n	8000fa0 <__aeabi_ddiv+0x264>
 8000f9e:	e13d      	b.n	800121c <__aeabi_ddiv+0x4e0>
 8000fa0:	08e9      	lsrs	r1, r5, #3
 8000fa2:	4642      	mov	r2, r8
 8000fa4:	01d2      	lsls	r2, r2, #7
 8000fa6:	d506      	bpl.n	8000fb6 <__aeabi_ddiv+0x27a>
 8000fa8:	4642      	mov	r2, r8
 8000faa:	4b44      	ldr	r3, [pc, #272]	; (80010bc <__aeabi_ddiv+0x380>)
 8000fac:	401a      	ands	r2, r3
 8000fae:	2380      	movs	r3, #128	; 0x80
 8000fb0:	4690      	mov	r8, r2
 8000fb2:	00db      	lsls	r3, r3, #3
 8000fb4:	445b      	add	r3, fp
 8000fb6:	4a42      	ldr	r2, [pc, #264]	; (80010c0 <__aeabi_ddiv+0x384>)
 8000fb8:	4293      	cmp	r3, r2
 8000fba:	dd00      	ble.n	8000fbe <__aeabi_ddiv+0x282>
 8000fbc:	e723      	b.n	8000e06 <__aeabi_ddiv+0xca>
 8000fbe:	4642      	mov	r2, r8
 8000fc0:	055b      	lsls	r3, r3, #21
 8000fc2:	0755      	lsls	r5, r2, #29
 8000fc4:	0252      	lsls	r2, r2, #9
 8000fc6:	430d      	orrs	r5, r1
 8000fc8:	0b12      	lsrs	r2, r2, #12
 8000fca:	0d5b      	lsrs	r3, r3, #21
 8000fcc:	e70d      	b.n	8000dea <__aeabi_ddiv+0xae>
 8000fce:	4651      	mov	r1, sl
 8000fd0:	4321      	orrs	r1, r4
 8000fd2:	d100      	bne.n	8000fd6 <__aeabi_ddiv+0x29a>
 8000fd4:	e07c      	b.n	80010d0 <__aeabi_ddiv+0x394>
 8000fd6:	2c00      	cmp	r4, #0
 8000fd8:	d100      	bne.n	8000fdc <__aeabi_ddiv+0x2a0>
 8000fda:	e0fb      	b.n	80011d4 <__aeabi_ddiv+0x498>
 8000fdc:	0020      	movs	r0, r4
 8000fde:	f001 f995 	bl	800230c <__clzsi2>
 8000fe2:	0002      	movs	r2, r0
 8000fe4:	3a0b      	subs	r2, #11
 8000fe6:	231d      	movs	r3, #29
 8000fe8:	1a9b      	subs	r3, r3, r2
 8000fea:	4652      	mov	r2, sl
 8000fec:	0001      	movs	r1, r0
 8000fee:	40da      	lsrs	r2, r3
 8000ff0:	4653      	mov	r3, sl
 8000ff2:	3908      	subs	r1, #8
 8000ff4:	408b      	lsls	r3, r1
 8000ff6:	408c      	lsls	r4, r1
 8000ff8:	0019      	movs	r1, r3
 8000ffa:	4314      	orrs	r4, r2
 8000ffc:	4b31      	ldr	r3, [pc, #196]	; (80010c4 <__aeabi_ddiv+0x388>)
 8000ffe:	4458      	add	r0, fp
 8001000:	469b      	mov	fp, r3
 8001002:	4483      	add	fp, r0
 8001004:	2000      	movs	r0, #0
 8001006:	e6d9      	b.n	8000dbc <__aeabi_ddiv+0x80>
 8001008:	0003      	movs	r3, r0
 800100a:	4323      	orrs	r3, r4
 800100c:	4698      	mov	r8, r3
 800100e:	d044      	beq.n	800109a <__aeabi_ddiv+0x35e>
 8001010:	2c00      	cmp	r4, #0
 8001012:	d100      	bne.n	8001016 <__aeabi_ddiv+0x2da>
 8001014:	e0cf      	b.n	80011b6 <__aeabi_ddiv+0x47a>
 8001016:	0020      	movs	r0, r4
 8001018:	f001 f978 	bl	800230c <__clzsi2>
 800101c:	0001      	movs	r1, r0
 800101e:	0002      	movs	r2, r0
 8001020:	390b      	subs	r1, #11
 8001022:	231d      	movs	r3, #29
 8001024:	1a5b      	subs	r3, r3, r1
 8001026:	4649      	mov	r1, r9
 8001028:	0010      	movs	r0, r2
 800102a:	40d9      	lsrs	r1, r3
 800102c:	3808      	subs	r0, #8
 800102e:	4084      	lsls	r4, r0
 8001030:	000b      	movs	r3, r1
 8001032:	464d      	mov	r5, r9
 8001034:	4323      	orrs	r3, r4
 8001036:	4698      	mov	r8, r3
 8001038:	4085      	lsls	r5, r0
 800103a:	4b23      	ldr	r3, [pc, #140]	; (80010c8 <__aeabi_ddiv+0x38c>)
 800103c:	1a9b      	subs	r3, r3, r2
 800103e:	469b      	mov	fp, r3
 8001040:	2300      	movs	r3, #0
 8001042:	4699      	mov	r9, r3
 8001044:	9300      	str	r3, [sp, #0]
 8001046:	e69e      	b.n	8000d86 <__aeabi_ddiv+0x4a>
 8001048:	0002      	movs	r2, r0
 800104a:	4322      	orrs	r2, r4
 800104c:	4690      	mov	r8, r2
 800104e:	d11d      	bne.n	800108c <__aeabi_ddiv+0x350>
 8001050:	2208      	movs	r2, #8
 8001052:	469b      	mov	fp, r3
 8001054:	2302      	movs	r3, #2
 8001056:	2500      	movs	r5, #0
 8001058:	4691      	mov	r9, r2
 800105a:	9300      	str	r3, [sp, #0]
 800105c:	e693      	b.n	8000d86 <__aeabi_ddiv+0x4a>
 800105e:	4651      	mov	r1, sl
 8001060:	4321      	orrs	r1, r4
 8001062:	d109      	bne.n	8001078 <__aeabi_ddiv+0x33c>
 8001064:	2302      	movs	r3, #2
 8001066:	464a      	mov	r2, r9
 8001068:	431a      	orrs	r2, r3
 800106a:	4b18      	ldr	r3, [pc, #96]	; (80010cc <__aeabi_ddiv+0x390>)
 800106c:	4691      	mov	r9, r2
 800106e:	469c      	mov	ip, r3
 8001070:	2400      	movs	r4, #0
 8001072:	2002      	movs	r0, #2
 8001074:	44e3      	add	fp, ip
 8001076:	e6a1      	b.n	8000dbc <__aeabi_ddiv+0x80>
 8001078:	2303      	movs	r3, #3
 800107a:	464a      	mov	r2, r9
 800107c:	431a      	orrs	r2, r3
 800107e:	4b13      	ldr	r3, [pc, #76]	; (80010cc <__aeabi_ddiv+0x390>)
 8001080:	4691      	mov	r9, r2
 8001082:	469c      	mov	ip, r3
 8001084:	4651      	mov	r1, sl
 8001086:	2003      	movs	r0, #3
 8001088:	44e3      	add	fp, ip
 800108a:	e697      	b.n	8000dbc <__aeabi_ddiv+0x80>
 800108c:	220c      	movs	r2, #12
 800108e:	469b      	mov	fp, r3
 8001090:	2303      	movs	r3, #3
 8001092:	46a0      	mov	r8, r4
 8001094:	4691      	mov	r9, r2
 8001096:	9300      	str	r3, [sp, #0]
 8001098:	e675      	b.n	8000d86 <__aeabi_ddiv+0x4a>
 800109a:	2304      	movs	r3, #4
 800109c:	4699      	mov	r9, r3
 800109e:	2300      	movs	r3, #0
 80010a0:	469b      	mov	fp, r3
 80010a2:	3301      	adds	r3, #1
 80010a4:	2500      	movs	r5, #0
 80010a6:	9300      	str	r3, [sp, #0]
 80010a8:	e66d      	b.n	8000d86 <__aeabi_ddiv+0x4a>
 80010aa:	46c0      	nop			; (mov r8, r8)
 80010ac:	000007ff 	.word	0x000007ff
 80010b0:	fffffc01 	.word	0xfffffc01
 80010b4:	0800e454 	.word	0x0800e454
 80010b8:	000003ff 	.word	0x000003ff
 80010bc:	feffffff 	.word	0xfeffffff
 80010c0:	000007fe 	.word	0x000007fe
 80010c4:	000003f3 	.word	0x000003f3
 80010c8:	fffffc0d 	.word	0xfffffc0d
 80010cc:	fffff801 	.word	0xfffff801
 80010d0:	464a      	mov	r2, r9
 80010d2:	2301      	movs	r3, #1
 80010d4:	431a      	orrs	r2, r3
 80010d6:	4691      	mov	r9, r2
 80010d8:	2400      	movs	r4, #0
 80010da:	2001      	movs	r0, #1
 80010dc:	e66e      	b.n	8000dbc <__aeabi_ddiv+0x80>
 80010de:	2300      	movs	r3, #0
 80010e0:	2280      	movs	r2, #128	; 0x80
 80010e2:	469a      	mov	sl, r3
 80010e4:	2500      	movs	r5, #0
 80010e6:	4b88      	ldr	r3, [pc, #544]	; (8001308 <__aeabi_ddiv+0x5cc>)
 80010e8:	0312      	lsls	r2, r2, #12
 80010ea:	e67e      	b.n	8000dea <__aeabi_ddiv+0xae>
 80010ec:	2501      	movs	r5, #1
 80010ee:	426d      	negs	r5, r5
 80010f0:	2201      	movs	r2, #1
 80010f2:	1ad2      	subs	r2, r2, r3
 80010f4:	2a38      	cmp	r2, #56	; 0x38
 80010f6:	dd00      	ble.n	80010fa <__aeabi_ddiv+0x3be>
 80010f8:	e674      	b.n	8000de4 <__aeabi_ddiv+0xa8>
 80010fa:	2a1f      	cmp	r2, #31
 80010fc:	dc00      	bgt.n	8001100 <__aeabi_ddiv+0x3c4>
 80010fe:	e0bd      	b.n	800127c <__aeabi_ddiv+0x540>
 8001100:	211f      	movs	r1, #31
 8001102:	4249      	negs	r1, r1
 8001104:	1acb      	subs	r3, r1, r3
 8001106:	4641      	mov	r1, r8
 8001108:	40d9      	lsrs	r1, r3
 800110a:	000b      	movs	r3, r1
 800110c:	2a20      	cmp	r2, #32
 800110e:	d004      	beq.n	800111a <__aeabi_ddiv+0x3de>
 8001110:	4641      	mov	r1, r8
 8001112:	4a7e      	ldr	r2, [pc, #504]	; (800130c <__aeabi_ddiv+0x5d0>)
 8001114:	445a      	add	r2, fp
 8001116:	4091      	lsls	r1, r2
 8001118:	430d      	orrs	r5, r1
 800111a:	0029      	movs	r1, r5
 800111c:	1e4a      	subs	r2, r1, #1
 800111e:	4191      	sbcs	r1, r2
 8001120:	4319      	orrs	r1, r3
 8001122:	2307      	movs	r3, #7
 8001124:	001d      	movs	r5, r3
 8001126:	2200      	movs	r2, #0
 8001128:	400d      	ands	r5, r1
 800112a:	420b      	tst	r3, r1
 800112c:	d100      	bne.n	8001130 <__aeabi_ddiv+0x3f4>
 800112e:	e0d0      	b.n	80012d2 <__aeabi_ddiv+0x596>
 8001130:	220f      	movs	r2, #15
 8001132:	2300      	movs	r3, #0
 8001134:	400a      	ands	r2, r1
 8001136:	2a04      	cmp	r2, #4
 8001138:	d100      	bne.n	800113c <__aeabi_ddiv+0x400>
 800113a:	e0c7      	b.n	80012cc <__aeabi_ddiv+0x590>
 800113c:	1d0a      	adds	r2, r1, #4
 800113e:	428a      	cmp	r2, r1
 8001140:	4189      	sbcs	r1, r1
 8001142:	4249      	negs	r1, r1
 8001144:	185b      	adds	r3, r3, r1
 8001146:	0011      	movs	r1, r2
 8001148:	021a      	lsls	r2, r3, #8
 800114a:	d400      	bmi.n	800114e <__aeabi_ddiv+0x412>
 800114c:	e0be      	b.n	80012cc <__aeabi_ddiv+0x590>
 800114e:	2301      	movs	r3, #1
 8001150:	2200      	movs	r2, #0
 8001152:	2500      	movs	r5, #0
 8001154:	e649      	b.n	8000dea <__aeabi_ddiv+0xae>
 8001156:	2280      	movs	r2, #128	; 0x80
 8001158:	4643      	mov	r3, r8
 800115a:	0312      	lsls	r2, r2, #12
 800115c:	4213      	tst	r3, r2
 800115e:	d008      	beq.n	8001172 <__aeabi_ddiv+0x436>
 8001160:	4214      	tst	r4, r2
 8001162:	d106      	bne.n	8001172 <__aeabi_ddiv+0x436>
 8001164:	4322      	orrs	r2, r4
 8001166:	0312      	lsls	r2, r2, #12
 8001168:	46ba      	mov	sl, r7
 800116a:	000d      	movs	r5, r1
 800116c:	4b66      	ldr	r3, [pc, #408]	; (8001308 <__aeabi_ddiv+0x5cc>)
 800116e:	0b12      	lsrs	r2, r2, #12
 8001170:	e63b      	b.n	8000dea <__aeabi_ddiv+0xae>
 8001172:	2280      	movs	r2, #128	; 0x80
 8001174:	4643      	mov	r3, r8
 8001176:	0312      	lsls	r2, r2, #12
 8001178:	431a      	orrs	r2, r3
 800117a:	0312      	lsls	r2, r2, #12
 800117c:	46b2      	mov	sl, r6
 800117e:	4b62      	ldr	r3, [pc, #392]	; (8001308 <__aeabi_ddiv+0x5cc>)
 8001180:	0b12      	lsrs	r2, r2, #12
 8001182:	e632      	b.n	8000dea <__aeabi_ddiv+0xae>
 8001184:	2b00      	cmp	r3, #0
 8001186:	d100      	bne.n	800118a <__aeabi_ddiv+0x44e>
 8001188:	e702      	b.n	8000f90 <__aeabi_ddiv+0x254>
 800118a:	19a6      	adds	r6, r4, r6
 800118c:	1e6a      	subs	r2, r5, #1
 800118e:	42a6      	cmp	r6, r4
 8001190:	d200      	bcs.n	8001194 <__aeabi_ddiv+0x458>
 8001192:	e089      	b.n	80012a8 <__aeabi_ddiv+0x56c>
 8001194:	4286      	cmp	r6, r0
 8001196:	d200      	bcs.n	800119a <__aeabi_ddiv+0x45e>
 8001198:	e09f      	b.n	80012da <__aeabi_ddiv+0x59e>
 800119a:	d100      	bne.n	800119e <__aeabi_ddiv+0x462>
 800119c:	e0af      	b.n	80012fe <__aeabi_ddiv+0x5c2>
 800119e:	0015      	movs	r5, r2
 80011a0:	e6f4      	b.n	8000f8c <__aeabi_ddiv+0x250>
 80011a2:	42a9      	cmp	r1, r5
 80011a4:	d900      	bls.n	80011a8 <__aeabi_ddiv+0x46c>
 80011a6:	e63c      	b.n	8000e22 <__aeabi_ddiv+0xe6>
 80011a8:	4643      	mov	r3, r8
 80011aa:	07de      	lsls	r6, r3, #31
 80011ac:	0858      	lsrs	r0, r3, #1
 80011ae:	086b      	lsrs	r3, r5, #1
 80011b0:	431e      	orrs	r6, r3
 80011b2:	07ed      	lsls	r5, r5, #31
 80011b4:	e63c      	b.n	8000e30 <__aeabi_ddiv+0xf4>
 80011b6:	f001 f8a9 	bl	800230c <__clzsi2>
 80011ba:	0001      	movs	r1, r0
 80011bc:	0002      	movs	r2, r0
 80011be:	3115      	adds	r1, #21
 80011c0:	3220      	adds	r2, #32
 80011c2:	291c      	cmp	r1, #28
 80011c4:	dc00      	bgt.n	80011c8 <__aeabi_ddiv+0x48c>
 80011c6:	e72c      	b.n	8001022 <__aeabi_ddiv+0x2e6>
 80011c8:	464b      	mov	r3, r9
 80011ca:	3808      	subs	r0, #8
 80011cc:	4083      	lsls	r3, r0
 80011ce:	2500      	movs	r5, #0
 80011d0:	4698      	mov	r8, r3
 80011d2:	e732      	b.n	800103a <__aeabi_ddiv+0x2fe>
 80011d4:	f001 f89a 	bl	800230c <__clzsi2>
 80011d8:	0003      	movs	r3, r0
 80011da:	001a      	movs	r2, r3
 80011dc:	3215      	adds	r2, #21
 80011de:	3020      	adds	r0, #32
 80011e0:	2a1c      	cmp	r2, #28
 80011e2:	dc00      	bgt.n	80011e6 <__aeabi_ddiv+0x4aa>
 80011e4:	e6ff      	b.n	8000fe6 <__aeabi_ddiv+0x2aa>
 80011e6:	4654      	mov	r4, sl
 80011e8:	3b08      	subs	r3, #8
 80011ea:	2100      	movs	r1, #0
 80011ec:	409c      	lsls	r4, r3
 80011ee:	e705      	b.n	8000ffc <__aeabi_ddiv+0x2c0>
 80011f0:	1936      	adds	r6, r6, r4
 80011f2:	3b01      	subs	r3, #1
 80011f4:	42b4      	cmp	r4, r6
 80011f6:	d900      	bls.n	80011fa <__aeabi_ddiv+0x4be>
 80011f8:	e6a6      	b.n	8000f48 <__aeabi_ddiv+0x20c>
 80011fa:	42b2      	cmp	r2, r6
 80011fc:	d800      	bhi.n	8001200 <__aeabi_ddiv+0x4c4>
 80011fe:	e6a3      	b.n	8000f48 <__aeabi_ddiv+0x20c>
 8001200:	1e83      	subs	r3, r0, #2
 8001202:	1936      	adds	r6, r6, r4
 8001204:	e6a0      	b.n	8000f48 <__aeabi_ddiv+0x20c>
 8001206:	1909      	adds	r1, r1, r4
 8001208:	3d01      	subs	r5, #1
 800120a:	428c      	cmp	r4, r1
 800120c:	d900      	bls.n	8001210 <__aeabi_ddiv+0x4d4>
 800120e:	e68d      	b.n	8000f2c <__aeabi_ddiv+0x1f0>
 8001210:	428a      	cmp	r2, r1
 8001212:	d800      	bhi.n	8001216 <__aeabi_ddiv+0x4da>
 8001214:	e68a      	b.n	8000f2c <__aeabi_ddiv+0x1f0>
 8001216:	1e85      	subs	r5, r0, #2
 8001218:	1909      	adds	r1, r1, r4
 800121a:	e687      	b.n	8000f2c <__aeabi_ddiv+0x1f0>
 800121c:	220f      	movs	r2, #15
 800121e:	402a      	ands	r2, r5
 8001220:	2a04      	cmp	r2, #4
 8001222:	d100      	bne.n	8001226 <__aeabi_ddiv+0x4ea>
 8001224:	e6bc      	b.n	8000fa0 <__aeabi_ddiv+0x264>
 8001226:	1d29      	adds	r1, r5, #4
 8001228:	42a9      	cmp	r1, r5
 800122a:	41ad      	sbcs	r5, r5
 800122c:	426d      	negs	r5, r5
 800122e:	08c9      	lsrs	r1, r1, #3
 8001230:	44a8      	add	r8, r5
 8001232:	e6b6      	b.n	8000fa2 <__aeabi_ddiv+0x266>
 8001234:	42af      	cmp	r7, r5
 8001236:	d900      	bls.n	800123a <__aeabi_ddiv+0x4fe>
 8001238:	e662      	b.n	8000f00 <__aeabi_ddiv+0x1c4>
 800123a:	4281      	cmp	r1, r0
 800123c:	d804      	bhi.n	8001248 <__aeabi_ddiv+0x50c>
 800123e:	d000      	beq.n	8001242 <__aeabi_ddiv+0x506>
 8001240:	e65e      	b.n	8000f00 <__aeabi_ddiv+0x1c4>
 8001242:	42ae      	cmp	r6, r5
 8001244:	d800      	bhi.n	8001248 <__aeabi_ddiv+0x50c>
 8001246:	e65b      	b.n	8000f00 <__aeabi_ddiv+0x1c4>
 8001248:	2302      	movs	r3, #2
 800124a:	425b      	negs	r3, r3
 800124c:	469c      	mov	ip, r3
 800124e:	9b00      	ldr	r3, [sp, #0]
 8001250:	44e0      	add	r8, ip
 8001252:	469c      	mov	ip, r3
 8001254:	4465      	add	r5, ip
 8001256:	429d      	cmp	r5, r3
 8001258:	419b      	sbcs	r3, r3
 800125a:	425b      	negs	r3, r3
 800125c:	191b      	adds	r3, r3, r4
 800125e:	18c0      	adds	r0, r0, r3
 8001260:	e64f      	b.n	8000f02 <__aeabi_ddiv+0x1c6>
 8001262:	42b2      	cmp	r2, r6
 8001264:	d800      	bhi.n	8001268 <__aeabi_ddiv+0x52c>
 8001266:	e612      	b.n	8000e8e <__aeabi_ddiv+0x152>
 8001268:	1e83      	subs	r3, r0, #2
 800126a:	1936      	adds	r6, r6, r4
 800126c:	e60f      	b.n	8000e8e <__aeabi_ddiv+0x152>
 800126e:	428a      	cmp	r2, r1
 8001270:	d800      	bhi.n	8001274 <__aeabi_ddiv+0x538>
 8001272:	e5fa      	b.n	8000e6a <__aeabi_ddiv+0x12e>
 8001274:	1e83      	subs	r3, r0, #2
 8001276:	4698      	mov	r8, r3
 8001278:	1909      	adds	r1, r1, r4
 800127a:	e5f6      	b.n	8000e6a <__aeabi_ddiv+0x12e>
 800127c:	4b24      	ldr	r3, [pc, #144]	; (8001310 <__aeabi_ddiv+0x5d4>)
 800127e:	0028      	movs	r0, r5
 8001280:	445b      	add	r3, fp
 8001282:	4641      	mov	r1, r8
 8001284:	409d      	lsls	r5, r3
 8001286:	4099      	lsls	r1, r3
 8001288:	40d0      	lsrs	r0, r2
 800128a:	1e6b      	subs	r3, r5, #1
 800128c:	419d      	sbcs	r5, r3
 800128e:	4643      	mov	r3, r8
 8001290:	4301      	orrs	r1, r0
 8001292:	4329      	orrs	r1, r5
 8001294:	40d3      	lsrs	r3, r2
 8001296:	074a      	lsls	r2, r1, #29
 8001298:	d100      	bne.n	800129c <__aeabi_ddiv+0x560>
 800129a:	e755      	b.n	8001148 <__aeabi_ddiv+0x40c>
 800129c:	220f      	movs	r2, #15
 800129e:	400a      	ands	r2, r1
 80012a0:	2a04      	cmp	r2, #4
 80012a2:	d000      	beq.n	80012a6 <__aeabi_ddiv+0x56a>
 80012a4:	e74a      	b.n	800113c <__aeabi_ddiv+0x400>
 80012a6:	e74f      	b.n	8001148 <__aeabi_ddiv+0x40c>
 80012a8:	0015      	movs	r5, r2
 80012aa:	4286      	cmp	r6, r0
 80012ac:	d000      	beq.n	80012b0 <__aeabi_ddiv+0x574>
 80012ae:	e66d      	b.n	8000f8c <__aeabi_ddiv+0x250>
 80012b0:	9a00      	ldr	r2, [sp, #0]
 80012b2:	429a      	cmp	r2, r3
 80012b4:	d000      	beq.n	80012b8 <__aeabi_ddiv+0x57c>
 80012b6:	e669      	b.n	8000f8c <__aeabi_ddiv+0x250>
 80012b8:	e66a      	b.n	8000f90 <__aeabi_ddiv+0x254>
 80012ba:	4b16      	ldr	r3, [pc, #88]	; (8001314 <__aeabi_ddiv+0x5d8>)
 80012bc:	445b      	add	r3, fp
 80012be:	2b00      	cmp	r3, #0
 80012c0:	dc00      	bgt.n	80012c4 <__aeabi_ddiv+0x588>
 80012c2:	e713      	b.n	80010ec <__aeabi_ddiv+0x3b0>
 80012c4:	2501      	movs	r5, #1
 80012c6:	2100      	movs	r1, #0
 80012c8:	44a8      	add	r8, r5
 80012ca:	e66a      	b.n	8000fa2 <__aeabi_ddiv+0x266>
 80012cc:	075d      	lsls	r5, r3, #29
 80012ce:	025b      	lsls	r3, r3, #9
 80012d0:	0b1a      	lsrs	r2, r3, #12
 80012d2:	08c9      	lsrs	r1, r1, #3
 80012d4:	2300      	movs	r3, #0
 80012d6:	430d      	orrs	r5, r1
 80012d8:	e587      	b.n	8000dea <__aeabi_ddiv+0xae>
 80012da:	9900      	ldr	r1, [sp, #0]
 80012dc:	3d02      	subs	r5, #2
 80012de:	004a      	lsls	r2, r1, #1
 80012e0:	428a      	cmp	r2, r1
 80012e2:	41bf      	sbcs	r7, r7
 80012e4:	427f      	negs	r7, r7
 80012e6:	193f      	adds	r7, r7, r4
 80012e8:	19f6      	adds	r6, r6, r7
 80012ea:	9200      	str	r2, [sp, #0]
 80012ec:	e7dd      	b.n	80012aa <__aeabi_ddiv+0x56e>
 80012ee:	2280      	movs	r2, #128	; 0x80
 80012f0:	4643      	mov	r3, r8
 80012f2:	0312      	lsls	r2, r2, #12
 80012f4:	431a      	orrs	r2, r3
 80012f6:	0312      	lsls	r2, r2, #12
 80012f8:	4b03      	ldr	r3, [pc, #12]	; (8001308 <__aeabi_ddiv+0x5cc>)
 80012fa:	0b12      	lsrs	r2, r2, #12
 80012fc:	e575      	b.n	8000dea <__aeabi_ddiv+0xae>
 80012fe:	9900      	ldr	r1, [sp, #0]
 8001300:	4299      	cmp	r1, r3
 8001302:	d3ea      	bcc.n	80012da <__aeabi_ddiv+0x59e>
 8001304:	0015      	movs	r5, r2
 8001306:	e7d3      	b.n	80012b0 <__aeabi_ddiv+0x574>
 8001308:	000007ff 	.word	0x000007ff
 800130c:	0000043e 	.word	0x0000043e
 8001310:	0000041e 	.word	0x0000041e
 8001314:	000003ff 	.word	0x000003ff

08001318 <__eqdf2>:
 8001318:	b5f0      	push	{r4, r5, r6, r7, lr}
 800131a:	464e      	mov	r6, r9
 800131c:	4645      	mov	r5, r8
 800131e:	46de      	mov	lr, fp
 8001320:	4657      	mov	r7, sl
 8001322:	4690      	mov	r8, r2
 8001324:	b5e0      	push	{r5, r6, r7, lr}
 8001326:	0017      	movs	r7, r2
 8001328:	031a      	lsls	r2, r3, #12
 800132a:	0b12      	lsrs	r2, r2, #12
 800132c:	0005      	movs	r5, r0
 800132e:	4684      	mov	ip, r0
 8001330:	4819      	ldr	r0, [pc, #100]	; (8001398 <__eqdf2+0x80>)
 8001332:	030e      	lsls	r6, r1, #12
 8001334:	004c      	lsls	r4, r1, #1
 8001336:	4691      	mov	r9, r2
 8001338:	005a      	lsls	r2, r3, #1
 800133a:	0fdb      	lsrs	r3, r3, #31
 800133c:	469b      	mov	fp, r3
 800133e:	0b36      	lsrs	r6, r6, #12
 8001340:	0d64      	lsrs	r4, r4, #21
 8001342:	0fc9      	lsrs	r1, r1, #31
 8001344:	0d52      	lsrs	r2, r2, #21
 8001346:	4284      	cmp	r4, r0
 8001348:	d019      	beq.n	800137e <__eqdf2+0x66>
 800134a:	4282      	cmp	r2, r0
 800134c:	d010      	beq.n	8001370 <__eqdf2+0x58>
 800134e:	2001      	movs	r0, #1
 8001350:	4294      	cmp	r4, r2
 8001352:	d10e      	bne.n	8001372 <__eqdf2+0x5a>
 8001354:	454e      	cmp	r6, r9
 8001356:	d10c      	bne.n	8001372 <__eqdf2+0x5a>
 8001358:	2001      	movs	r0, #1
 800135a:	45c4      	cmp	ip, r8
 800135c:	d109      	bne.n	8001372 <__eqdf2+0x5a>
 800135e:	4559      	cmp	r1, fp
 8001360:	d017      	beq.n	8001392 <__eqdf2+0x7a>
 8001362:	2c00      	cmp	r4, #0
 8001364:	d105      	bne.n	8001372 <__eqdf2+0x5a>
 8001366:	0030      	movs	r0, r6
 8001368:	4328      	orrs	r0, r5
 800136a:	1e43      	subs	r3, r0, #1
 800136c:	4198      	sbcs	r0, r3
 800136e:	e000      	b.n	8001372 <__eqdf2+0x5a>
 8001370:	2001      	movs	r0, #1
 8001372:	bcf0      	pop	{r4, r5, r6, r7}
 8001374:	46bb      	mov	fp, r7
 8001376:	46b2      	mov	sl, r6
 8001378:	46a9      	mov	r9, r5
 800137a:	46a0      	mov	r8, r4
 800137c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800137e:	0033      	movs	r3, r6
 8001380:	2001      	movs	r0, #1
 8001382:	432b      	orrs	r3, r5
 8001384:	d1f5      	bne.n	8001372 <__eqdf2+0x5a>
 8001386:	42a2      	cmp	r2, r4
 8001388:	d1f3      	bne.n	8001372 <__eqdf2+0x5a>
 800138a:	464b      	mov	r3, r9
 800138c:	433b      	orrs	r3, r7
 800138e:	d1f0      	bne.n	8001372 <__eqdf2+0x5a>
 8001390:	e7e2      	b.n	8001358 <__eqdf2+0x40>
 8001392:	2000      	movs	r0, #0
 8001394:	e7ed      	b.n	8001372 <__eqdf2+0x5a>
 8001396:	46c0      	nop			; (mov r8, r8)
 8001398:	000007ff 	.word	0x000007ff

0800139c <__gedf2>:
 800139c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800139e:	4647      	mov	r7, r8
 80013a0:	46ce      	mov	lr, r9
 80013a2:	0004      	movs	r4, r0
 80013a4:	0018      	movs	r0, r3
 80013a6:	0016      	movs	r6, r2
 80013a8:	031b      	lsls	r3, r3, #12
 80013aa:	0b1b      	lsrs	r3, r3, #12
 80013ac:	4d2d      	ldr	r5, [pc, #180]	; (8001464 <__gedf2+0xc8>)
 80013ae:	004a      	lsls	r2, r1, #1
 80013b0:	4699      	mov	r9, r3
 80013b2:	b580      	push	{r7, lr}
 80013b4:	0043      	lsls	r3, r0, #1
 80013b6:	030f      	lsls	r7, r1, #12
 80013b8:	46a4      	mov	ip, r4
 80013ba:	46b0      	mov	r8, r6
 80013bc:	0b3f      	lsrs	r7, r7, #12
 80013be:	0d52      	lsrs	r2, r2, #21
 80013c0:	0fc9      	lsrs	r1, r1, #31
 80013c2:	0d5b      	lsrs	r3, r3, #21
 80013c4:	0fc0      	lsrs	r0, r0, #31
 80013c6:	42aa      	cmp	r2, r5
 80013c8:	d021      	beq.n	800140e <__gedf2+0x72>
 80013ca:	42ab      	cmp	r3, r5
 80013cc:	d013      	beq.n	80013f6 <__gedf2+0x5a>
 80013ce:	2a00      	cmp	r2, #0
 80013d0:	d122      	bne.n	8001418 <__gedf2+0x7c>
 80013d2:	433c      	orrs	r4, r7
 80013d4:	2b00      	cmp	r3, #0
 80013d6:	d102      	bne.n	80013de <__gedf2+0x42>
 80013d8:	464d      	mov	r5, r9
 80013da:	432e      	orrs	r6, r5
 80013dc:	d022      	beq.n	8001424 <__gedf2+0x88>
 80013de:	2c00      	cmp	r4, #0
 80013e0:	d010      	beq.n	8001404 <__gedf2+0x68>
 80013e2:	4281      	cmp	r1, r0
 80013e4:	d022      	beq.n	800142c <__gedf2+0x90>
 80013e6:	2002      	movs	r0, #2
 80013e8:	3901      	subs	r1, #1
 80013ea:	4008      	ands	r0, r1
 80013ec:	3801      	subs	r0, #1
 80013ee:	bcc0      	pop	{r6, r7}
 80013f0:	46b9      	mov	r9, r7
 80013f2:	46b0      	mov	r8, r6
 80013f4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80013f6:	464d      	mov	r5, r9
 80013f8:	432e      	orrs	r6, r5
 80013fa:	d129      	bne.n	8001450 <__gedf2+0xb4>
 80013fc:	2a00      	cmp	r2, #0
 80013fe:	d1f0      	bne.n	80013e2 <__gedf2+0x46>
 8001400:	433c      	orrs	r4, r7
 8001402:	d1ee      	bne.n	80013e2 <__gedf2+0x46>
 8001404:	2800      	cmp	r0, #0
 8001406:	d1f2      	bne.n	80013ee <__gedf2+0x52>
 8001408:	2001      	movs	r0, #1
 800140a:	4240      	negs	r0, r0
 800140c:	e7ef      	b.n	80013ee <__gedf2+0x52>
 800140e:	003d      	movs	r5, r7
 8001410:	4325      	orrs	r5, r4
 8001412:	d11d      	bne.n	8001450 <__gedf2+0xb4>
 8001414:	4293      	cmp	r3, r2
 8001416:	d0ee      	beq.n	80013f6 <__gedf2+0x5a>
 8001418:	2b00      	cmp	r3, #0
 800141a:	d1e2      	bne.n	80013e2 <__gedf2+0x46>
 800141c:	464c      	mov	r4, r9
 800141e:	4326      	orrs	r6, r4
 8001420:	d1df      	bne.n	80013e2 <__gedf2+0x46>
 8001422:	e7e0      	b.n	80013e6 <__gedf2+0x4a>
 8001424:	2000      	movs	r0, #0
 8001426:	2c00      	cmp	r4, #0
 8001428:	d0e1      	beq.n	80013ee <__gedf2+0x52>
 800142a:	e7dc      	b.n	80013e6 <__gedf2+0x4a>
 800142c:	429a      	cmp	r2, r3
 800142e:	dc0a      	bgt.n	8001446 <__gedf2+0xaa>
 8001430:	dbe8      	blt.n	8001404 <__gedf2+0x68>
 8001432:	454f      	cmp	r7, r9
 8001434:	d8d7      	bhi.n	80013e6 <__gedf2+0x4a>
 8001436:	d00e      	beq.n	8001456 <__gedf2+0xba>
 8001438:	2000      	movs	r0, #0
 800143a:	454f      	cmp	r7, r9
 800143c:	d2d7      	bcs.n	80013ee <__gedf2+0x52>
 800143e:	2900      	cmp	r1, #0
 8001440:	d0e2      	beq.n	8001408 <__gedf2+0x6c>
 8001442:	0008      	movs	r0, r1
 8001444:	e7d3      	b.n	80013ee <__gedf2+0x52>
 8001446:	4243      	negs	r3, r0
 8001448:	4158      	adcs	r0, r3
 800144a:	0040      	lsls	r0, r0, #1
 800144c:	3801      	subs	r0, #1
 800144e:	e7ce      	b.n	80013ee <__gedf2+0x52>
 8001450:	2002      	movs	r0, #2
 8001452:	4240      	negs	r0, r0
 8001454:	e7cb      	b.n	80013ee <__gedf2+0x52>
 8001456:	45c4      	cmp	ip, r8
 8001458:	d8c5      	bhi.n	80013e6 <__gedf2+0x4a>
 800145a:	2000      	movs	r0, #0
 800145c:	45c4      	cmp	ip, r8
 800145e:	d2c6      	bcs.n	80013ee <__gedf2+0x52>
 8001460:	e7ed      	b.n	800143e <__gedf2+0xa2>
 8001462:	46c0      	nop			; (mov r8, r8)
 8001464:	000007ff 	.word	0x000007ff

08001468 <__ledf2>:
 8001468:	b5f0      	push	{r4, r5, r6, r7, lr}
 800146a:	4647      	mov	r7, r8
 800146c:	46ce      	mov	lr, r9
 800146e:	0004      	movs	r4, r0
 8001470:	0018      	movs	r0, r3
 8001472:	0016      	movs	r6, r2
 8001474:	031b      	lsls	r3, r3, #12
 8001476:	0b1b      	lsrs	r3, r3, #12
 8001478:	4d2c      	ldr	r5, [pc, #176]	; (800152c <__ledf2+0xc4>)
 800147a:	004a      	lsls	r2, r1, #1
 800147c:	4699      	mov	r9, r3
 800147e:	b580      	push	{r7, lr}
 8001480:	0043      	lsls	r3, r0, #1
 8001482:	030f      	lsls	r7, r1, #12
 8001484:	46a4      	mov	ip, r4
 8001486:	46b0      	mov	r8, r6
 8001488:	0b3f      	lsrs	r7, r7, #12
 800148a:	0d52      	lsrs	r2, r2, #21
 800148c:	0fc9      	lsrs	r1, r1, #31
 800148e:	0d5b      	lsrs	r3, r3, #21
 8001490:	0fc0      	lsrs	r0, r0, #31
 8001492:	42aa      	cmp	r2, r5
 8001494:	d00d      	beq.n	80014b2 <__ledf2+0x4a>
 8001496:	42ab      	cmp	r3, r5
 8001498:	d010      	beq.n	80014bc <__ledf2+0x54>
 800149a:	2a00      	cmp	r2, #0
 800149c:	d127      	bne.n	80014ee <__ledf2+0x86>
 800149e:	433c      	orrs	r4, r7
 80014a0:	2b00      	cmp	r3, #0
 80014a2:	d111      	bne.n	80014c8 <__ledf2+0x60>
 80014a4:	464d      	mov	r5, r9
 80014a6:	432e      	orrs	r6, r5
 80014a8:	d10e      	bne.n	80014c8 <__ledf2+0x60>
 80014aa:	2000      	movs	r0, #0
 80014ac:	2c00      	cmp	r4, #0
 80014ae:	d015      	beq.n	80014dc <__ledf2+0x74>
 80014b0:	e00e      	b.n	80014d0 <__ledf2+0x68>
 80014b2:	003d      	movs	r5, r7
 80014b4:	4325      	orrs	r5, r4
 80014b6:	d110      	bne.n	80014da <__ledf2+0x72>
 80014b8:	4293      	cmp	r3, r2
 80014ba:	d118      	bne.n	80014ee <__ledf2+0x86>
 80014bc:	464d      	mov	r5, r9
 80014be:	432e      	orrs	r6, r5
 80014c0:	d10b      	bne.n	80014da <__ledf2+0x72>
 80014c2:	2a00      	cmp	r2, #0
 80014c4:	d102      	bne.n	80014cc <__ledf2+0x64>
 80014c6:	433c      	orrs	r4, r7
 80014c8:	2c00      	cmp	r4, #0
 80014ca:	d00b      	beq.n	80014e4 <__ledf2+0x7c>
 80014cc:	4281      	cmp	r1, r0
 80014ce:	d014      	beq.n	80014fa <__ledf2+0x92>
 80014d0:	2002      	movs	r0, #2
 80014d2:	3901      	subs	r1, #1
 80014d4:	4008      	ands	r0, r1
 80014d6:	3801      	subs	r0, #1
 80014d8:	e000      	b.n	80014dc <__ledf2+0x74>
 80014da:	2002      	movs	r0, #2
 80014dc:	bcc0      	pop	{r6, r7}
 80014de:	46b9      	mov	r9, r7
 80014e0:	46b0      	mov	r8, r6
 80014e2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80014e4:	2800      	cmp	r0, #0
 80014e6:	d1f9      	bne.n	80014dc <__ledf2+0x74>
 80014e8:	2001      	movs	r0, #1
 80014ea:	4240      	negs	r0, r0
 80014ec:	e7f6      	b.n	80014dc <__ledf2+0x74>
 80014ee:	2b00      	cmp	r3, #0
 80014f0:	d1ec      	bne.n	80014cc <__ledf2+0x64>
 80014f2:	464c      	mov	r4, r9
 80014f4:	4326      	orrs	r6, r4
 80014f6:	d1e9      	bne.n	80014cc <__ledf2+0x64>
 80014f8:	e7ea      	b.n	80014d0 <__ledf2+0x68>
 80014fa:	429a      	cmp	r2, r3
 80014fc:	dd04      	ble.n	8001508 <__ledf2+0xa0>
 80014fe:	4243      	negs	r3, r0
 8001500:	4158      	adcs	r0, r3
 8001502:	0040      	lsls	r0, r0, #1
 8001504:	3801      	subs	r0, #1
 8001506:	e7e9      	b.n	80014dc <__ledf2+0x74>
 8001508:	429a      	cmp	r2, r3
 800150a:	dbeb      	blt.n	80014e4 <__ledf2+0x7c>
 800150c:	454f      	cmp	r7, r9
 800150e:	d8df      	bhi.n	80014d0 <__ledf2+0x68>
 8001510:	d006      	beq.n	8001520 <__ledf2+0xb8>
 8001512:	2000      	movs	r0, #0
 8001514:	454f      	cmp	r7, r9
 8001516:	d2e1      	bcs.n	80014dc <__ledf2+0x74>
 8001518:	2900      	cmp	r1, #0
 800151a:	d0e5      	beq.n	80014e8 <__ledf2+0x80>
 800151c:	0008      	movs	r0, r1
 800151e:	e7dd      	b.n	80014dc <__ledf2+0x74>
 8001520:	45c4      	cmp	ip, r8
 8001522:	d8d5      	bhi.n	80014d0 <__ledf2+0x68>
 8001524:	2000      	movs	r0, #0
 8001526:	45c4      	cmp	ip, r8
 8001528:	d2d8      	bcs.n	80014dc <__ledf2+0x74>
 800152a:	e7f5      	b.n	8001518 <__ledf2+0xb0>
 800152c:	000007ff 	.word	0x000007ff

08001530 <__aeabi_dmul>:
 8001530:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001532:	4645      	mov	r5, r8
 8001534:	46de      	mov	lr, fp
 8001536:	4657      	mov	r7, sl
 8001538:	464e      	mov	r6, r9
 800153a:	b5e0      	push	{r5, r6, r7, lr}
 800153c:	001f      	movs	r7, r3
 800153e:	030b      	lsls	r3, r1, #12
 8001540:	0b1b      	lsrs	r3, r3, #12
 8001542:	469b      	mov	fp, r3
 8001544:	004d      	lsls	r5, r1, #1
 8001546:	0fcb      	lsrs	r3, r1, #31
 8001548:	0004      	movs	r4, r0
 800154a:	4691      	mov	r9, r2
 800154c:	4698      	mov	r8, r3
 800154e:	b087      	sub	sp, #28
 8001550:	0d6d      	lsrs	r5, r5, #21
 8001552:	d100      	bne.n	8001556 <__aeabi_dmul+0x26>
 8001554:	e1cd      	b.n	80018f2 <__aeabi_dmul+0x3c2>
 8001556:	4bce      	ldr	r3, [pc, #824]	; (8001890 <__aeabi_dmul+0x360>)
 8001558:	429d      	cmp	r5, r3
 800155a:	d100      	bne.n	800155e <__aeabi_dmul+0x2e>
 800155c:	e1e9      	b.n	8001932 <__aeabi_dmul+0x402>
 800155e:	465a      	mov	r2, fp
 8001560:	0f43      	lsrs	r3, r0, #29
 8001562:	00d2      	lsls	r2, r2, #3
 8001564:	4313      	orrs	r3, r2
 8001566:	2280      	movs	r2, #128	; 0x80
 8001568:	0412      	lsls	r2, r2, #16
 800156a:	431a      	orrs	r2, r3
 800156c:	00c3      	lsls	r3, r0, #3
 800156e:	469a      	mov	sl, r3
 8001570:	4bc8      	ldr	r3, [pc, #800]	; (8001894 <__aeabi_dmul+0x364>)
 8001572:	4693      	mov	fp, r2
 8001574:	469c      	mov	ip, r3
 8001576:	2300      	movs	r3, #0
 8001578:	2600      	movs	r6, #0
 800157a:	4465      	add	r5, ip
 800157c:	9300      	str	r3, [sp, #0]
 800157e:	033c      	lsls	r4, r7, #12
 8001580:	007b      	lsls	r3, r7, #1
 8001582:	4648      	mov	r0, r9
 8001584:	0b24      	lsrs	r4, r4, #12
 8001586:	0d5b      	lsrs	r3, r3, #21
 8001588:	0fff      	lsrs	r7, r7, #31
 800158a:	2b00      	cmp	r3, #0
 800158c:	d100      	bne.n	8001590 <__aeabi_dmul+0x60>
 800158e:	e189      	b.n	80018a4 <__aeabi_dmul+0x374>
 8001590:	4abf      	ldr	r2, [pc, #764]	; (8001890 <__aeabi_dmul+0x360>)
 8001592:	4293      	cmp	r3, r2
 8001594:	d019      	beq.n	80015ca <__aeabi_dmul+0x9a>
 8001596:	0f42      	lsrs	r2, r0, #29
 8001598:	00e4      	lsls	r4, r4, #3
 800159a:	4322      	orrs	r2, r4
 800159c:	2480      	movs	r4, #128	; 0x80
 800159e:	0424      	lsls	r4, r4, #16
 80015a0:	4314      	orrs	r4, r2
 80015a2:	4abc      	ldr	r2, [pc, #752]	; (8001894 <__aeabi_dmul+0x364>)
 80015a4:	2100      	movs	r1, #0
 80015a6:	4694      	mov	ip, r2
 80015a8:	4642      	mov	r2, r8
 80015aa:	4463      	add	r3, ip
 80015ac:	195b      	adds	r3, r3, r5
 80015ae:	9301      	str	r3, [sp, #4]
 80015b0:	9b01      	ldr	r3, [sp, #4]
 80015b2:	407a      	eors	r2, r7
 80015b4:	3301      	adds	r3, #1
 80015b6:	00c0      	lsls	r0, r0, #3
 80015b8:	b2d2      	uxtb	r2, r2
 80015ba:	9302      	str	r3, [sp, #8]
 80015bc:	2e0a      	cmp	r6, #10
 80015be:	dd1c      	ble.n	80015fa <__aeabi_dmul+0xca>
 80015c0:	003a      	movs	r2, r7
 80015c2:	2e0b      	cmp	r6, #11
 80015c4:	d05e      	beq.n	8001684 <__aeabi_dmul+0x154>
 80015c6:	4647      	mov	r7, r8
 80015c8:	e056      	b.n	8001678 <__aeabi_dmul+0x148>
 80015ca:	4649      	mov	r1, r9
 80015cc:	4bb0      	ldr	r3, [pc, #704]	; (8001890 <__aeabi_dmul+0x360>)
 80015ce:	4321      	orrs	r1, r4
 80015d0:	18eb      	adds	r3, r5, r3
 80015d2:	9301      	str	r3, [sp, #4]
 80015d4:	2900      	cmp	r1, #0
 80015d6:	d12a      	bne.n	800162e <__aeabi_dmul+0xfe>
 80015d8:	2080      	movs	r0, #128	; 0x80
 80015da:	2202      	movs	r2, #2
 80015dc:	0100      	lsls	r0, r0, #4
 80015de:	002b      	movs	r3, r5
 80015e0:	4684      	mov	ip, r0
 80015e2:	4316      	orrs	r6, r2
 80015e4:	4642      	mov	r2, r8
 80015e6:	4463      	add	r3, ip
 80015e8:	407a      	eors	r2, r7
 80015ea:	b2d2      	uxtb	r2, r2
 80015ec:	9302      	str	r3, [sp, #8]
 80015ee:	2e0a      	cmp	r6, #10
 80015f0:	dd00      	ble.n	80015f4 <__aeabi_dmul+0xc4>
 80015f2:	e231      	b.n	8001a58 <__aeabi_dmul+0x528>
 80015f4:	2000      	movs	r0, #0
 80015f6:	2400      	movs	r4, #0
 80015f8:	2102      	movs	r1, #2
 80015fa:	2e02      	cmp	r6, #2
 80015fc:	dc26      	bgt.n	800164c <__aeabi_dmul+0x11c>
 80015fe:	3e01      	subs	r6, #1
 8001600:	2e01      	cmp	r6, #1
 8001602:	d852      	bhi.n	80016aa <__aeabi_dmul+0x17a>
 8001604:	2902      	cmp	r1, #2
 8001606:	d04c      	beq.n	80016a2 <__aeabi_dmul+0x172>
 8001608:	2901      	cmp	r1, #1
 800160a:	d000      	beq.n	800160e <__aeabi_dmul+0xde>
 800160c:	e118      	b.n	8001840 <__aeabi_dmul+0x310>
 800160e:	2300      	movs	r3, #0
 8001610:	2400      	movs	r4, #0
 8001612:	2500      	movs	r5, #0
 8001614:	051b      	lsls	r3, r3, #20
 8001616:	4323      	orrs	r3, r4
 8001618:	07d2      	lsls	r2, r2, #31
 800161a:	4313      	orrs	r3, r2
 800161c:	0028      	movs	r0, r5
 800161e:	0019      	movs	r1, r3
 8001620:	b007      	add	sp, #28
 8001622:	bcf0      	pop	{r4, r5, r6, r7}
 8001624:	46bb      	mov	fp, r7
 8001626:	46b2      	mov	sl, r6
 8001628:	46a9      	mov	r9, r5
 800162a:	46a0      	mov	r8, r4
 800162c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800162e:	2180      	movs	r1, #128	; 0x80
 8001630:	2203      	movs	r2, #3
 8001632:	0109      	lsls	r1, r1, #4
 8001634:	002b      	movs	r3, r5
 8001636:	468c      	mov	ip, r1
 8001638:	4316      	orrs	r6, r2
 800163a:	4642      	mov	r2, r8
 800163c:	4463      	add	r3, ip
 800163e:	407a      	eors	r2, r7
 8001640:	b2d2      	uxtb	r2, r2
 8001642:	9302      	str	r3, [sp, #8]
 8001644:	2e0a      	cmp	r6, #10
 8001646:	dd00      	ble.n	800164a <__aeabi_dmul+0x11a>
 8001648:	e228      	b.n	8001a9c <__aeabi_dmul+0x56c>
 800164a:	2103      	movs	r1, #3
 800164c:	2501      	movs	r5, #1
 800164e:	40b5      	lsls	r5, r6
 8001650:	46ac      	mov	ip, r5
 8001652:	26a6      	movs	r6, #166	; 0xa6
 8001654:	4663      	mov	r3, ip
 8001656:	00f6      	lsls	r6, r6, #3
 8001658:	4035      	ands	r5, r6
 800165a:	4233      	tst	r3, r6
 800165c:	d10b      	bne.n	8001676 <__aeabi_dmul+0x146>
 800165e:	2690      	movs	r6, #144	; 0x90
 8001660:	00b6      	lsls	r6, r6, #2
 8001662:	4233      	tst	r3, r6
 8001664:	d118      	bne.n	8001698 <__aeabi_dmul+0x168>
 8001666:	3eb9      	subs	r6, #185	; 0xb9
 8001668:	3eff      	subs	r6, #255	; 0xff
 800166a:	421e      	tst	r6, r3
 800166c:	d01d      	beq.n	80016aa <__aeabi_dmul+0x17a>
 800166e:	46a3      	mov	fp, r4
 8001670:	4682      	mov	sl, r0
 8001672:	9100      	str	r1, [sp, #0]
 8001674:	e000      	b.n	8001678 <__aeabi_dmul+0x148>
 8001676:	0017      	movs	r7, r2
 8001678:	9900      	ldr	r1, [sp, #0]
 800167a:	003a      	movs	r2, r7
 800167c:	2902      	cmp	r1, #2
 800167e:	d010      	beq.n	80016a2 <__aeabi_dmul+0x172>
 8001680:	465c      	mov	r4, fp
 8001682:	4650      	mov	r0, sl
 8001684:	2903      	cmp	r1, #3
 8001686:	d1bf      	bne.n	8001608 <__aeabi_dmul+0xd8>
 8001688:	2380      	movs	r3, #128	; 0x80
 800168a:	031b      	lsls	r3, r3, #12
 800168c:	431c      	orrs	r4, r3
 800168e:	0324      	lsls	r4, r4, #12
 8001690:	0005      	movs	r5, r0
 8001692:	4b7f      	ldr	r3, [pc, #508]	; (8001890 <__aeabi_dmul+0x360>)
 8001694:	0b24      	lsrs	r4, r4, #12
 8001696:	e7bd      	b.n	8001614 <__aeabi_dmul+0xe4>
 8001698:	2480      	movs	r4, #128	; 0x80
 800169a:	2200      	movs	r2, #0
 800169c:	4b7c      	ldr	r3, [pc, #496]	; (8001890 <__aeabi_dmul+0x360>)
 800169e:	0324      	lsls	r4, r4, #12
 80016a0:	e7b8      	b.n	8001614 <__aeabi_dmul+0xe4>
 80016a2:	2400      	movs	r4, #0
 80016a4:	2500      	movs	r5, #0
 80016a6:	4b7a      	ldr	r3, [pc, #488]	; (8001890 <__aeabi_dmul+0x360>)
 80016a8:	e7b4      	b.n	8001614 <__aeabi_dmul+0xe4>
 80016aa:	4653      	mov	r3, sl
 80016ac:	041e      	lsls	r6, r3, #16
 80016ae:	0c36      	lsrs	r6, r6, #16
 80016b0:	0c1f      	lsrs	r7, r3, #16
 80016b2:	0033      	movs	r3, r6
 80016b4:	0c01      	lsrs	r1, r0, #16
 80016b6:	0400      	lsls	r0, r0, #16
 80016b8:	0c00      	lsrs	r0, r0, #16
 80016ba:	4343      	muls	r3, r0
 80016bc:	4698      	mov	r8, r3
 80016be:	0003      	movs	r3, r0
 80016c0:	437b      	muls	r3, r7
 80016c2:	4699      	mov	r9, r3
 80016c4:	0033      	movs	r3, r6
 80016c6:	434b      	muls	r3, r1
 80016c8:	469c      	mov	ip, r3
 80016ca:	4643      	mov	r3, r8
 80016cc:	000d      	movs	r5, r1
 80016ce:	0c1b      	lsrs	r3, r3, #16
 80016d0:	469a      	mov	sl, r3
 80016d2:	437d      	muls	r5, r7
 80016d4:	44cc      	add	ip, r9
 80016d6:	44d4      	add	ip, sl
 80016d8:	9500      	str	r5, [sp, #0]
 80016da:	45e1      	cmp	r9, ip
 80016dc:	d904      	bls.n	80016e8 <__aeabi_dmul+0x1b8>
 80016de:	2380      	movs	r3, #128	; 0x80
 80016e0:	025b      	lsls	r3, r3, #9
 80016e2:	4699      	mov	r9, r3
 80016e4:	444d      	add	r5, r9
 80016e6:	9500      	str	r5, [sp, #0]
 80016e8:	4663      	mov	r3, ip
 80016ea:	0c1b      	lsrs	r3, r3, #16
 80016ec:	001d      	movs	r5, r3
 80016ee:	4663      	mov	r3, ip
 80016f0:	041b      	lsls	r3, r3, #16
 80016f2:	469c      	mov	ip, r3
 80016f4:	4643      	mov	r3, r8
 80016f6:	041b      	lsls	r3, r3, #16
 80016f8:	0c1b      	lsrs	r3, r3, #16
 80016fa:	4698      	mov	r8, r3
 80016fc:	4663      	mov	r3, ip
 80016fe:	4443      	add	r3, r8
 8001700:	9303      	str	r3, [sp, #12]
 8001702:	0c23      	lsrs	r3, r4, #16
 8001704:	4698      	mov	r8, r3
 8001706:	0033      	movs	r3, r6
 8001708:	0424      	lsls	r4, r4, #16
 800170a:	0c24      	lsrs	r4, r4, #16
 800170c:	4363      	muls	r3, r4
 800170e:	469c      	mov	ip, r3
 8001710:	0023      	movs	r3, r4
 8001712:	437b      	muls	r3, r7
 8001714:	4699      	mov	r9, r3
 8001716:	4643      	mov	r3, r8
 8001718:	435e      	muls	r6, r3
 800171a:	435f      	muls	r7, r3
 800171c:	444e      	add	r6, r9
 800171e:	4663      	mov	r3, ip
 8001720:	46b2      	mov	sl, r6
 8001722:	0c1e      	lsrs	r6, r3, #16
 8001724:	4456      	add	r6, sl
 8001726:	45b1      	cmp	r9, r6
 8001728:	d903      	bls.n	8001732 <__aeabi_dmul+0x202>
 800172a:	2380      	movs	r3, #128	; 0x80
 800172c:	025b      	lsls	r3, r3, #9
 800172e:	4699      	mov	r9, r3
 8001730:	444f      	add	r7, r9
 8001732:	0c33      	lsrs	r3, r6, #16
 8001734:	4699      	mov	r9, r3
 8001736:	003b      	movs	r3, r7
 8001738:	444b      	add	r3, r9
 800173a:	9305      	str	r3, [sp, #20]
 800173c:	4663      	mov	r3, ip
 800173e:	46ac      	mov	ip, r5
 8001740:	041f      	lsls	r7, r3, #16
 8001742:	0c3f      	lsrs	r7, r7, #16
 8001744:	0436      	lsls	r6, r6, #16
 8001746:	19f6      	adds	r6, r6, r7
 8001748:	44b4      	add	ip, r6
 800174a:	4663      	mov	r3, ip
 800174c:	9304      	str	r3, [sp, #16]
 800174e:	465b      	mov	r3, fp
 8001750:	0c1b      	lsrs	r3, r3, #16
 8001752:	469c      	mov	ip, r3
 8001754:	465b      	mov	r3, fp
 8001756:	041f      	lsls	r7, r3, #16
 8001758:	0c3f      	lsrs	r7, r7, #16
 800175a:	003b      	movs	r3, r7
 800175c:	4343      	muls	r3, r0
 800175e:	4699      	mov	r9, r3
 8001760:	4663      	mov	r3, ip
 8001762:	4343      	muls	r3, r0
 8001764:	469a      	mov	sl, r3
 8001766:	464b      	mov	r3, r9
 8001768:	4660      	mov	r0, ip
 800176a:	0c1b      	lsrs	r3, r3, #16
 800176c:	469b      	mov	fp, r3
 800176e:	4348      	muls	r0, r1
 8001770:	4379      	muls	r1, r7
 8001772:	4451      	add	r1, sl
 8001774:	4459      	add	r1, fp
 8001776:	458a      	cmp	sl, r1
 8001778:	d903      	bls.n	8001782 <__aeabi_dmul+0x252>
 800177a:	2380      	movs	r3, #128	; 0x80
 800177c:	025b      	lsls	r3, r3, #9
 800177e:	469a      	mov	sl, r3
 8001780:	4450      	add	r0, sl
 8001782:	0c0b      	lsrs	r3, r1, #16
 8001784:	469a      	mov	sl, r3
 8001786:	464b      	mov	r3, r9
 8001788:	041b      	lsls	r3, r3, #16
 800178a:	0c1b      	lsrs	r3, r3, #16
 800178c:	4699      	mov	r9, r3
 800178e:	003b      	movs	r3, r7
 8001790:	4363      	muls	r3, r4
 8001792:	0409      	lsls	r1, r1, #16
 8001794:	4645      	mov	r5, r8
 8001796:	4449      	add	r1, r9
 8001798:	4699      	mov	r9, r3
 800179a:	4663      	mov	r3, ip
 800179c:	435c      	muls	r4, r3
 800179e:	436b      	muls	r3, r5
 80017a0:	469c      	mov	ip, r3
 80017a2:	464b      	mov	r3, r9
 80017a4:	0c1b      	lsrs	r3, r3, #16
 80017a6:	4698      	mov	r8, r3
 80017a8:	436f      	muls	r7, r5
 80017aa:	193f      	adds	r7, r7, r4
 80017ac:	4447      	add	r7, r8
 80017ae:	4450      	add	r0, sl
 80017b0:	42bc      	cmp	r4, r7
 80017b2:	d903      	bls.n	80017bc <__aeabi_dmul+0x28c>
 80017b4:	2380      	movs	r3, #128	; 0x80
 80017b6:	025b      	lsls	r3, r3, #9
 80017b8:	4698      	mov	r8, r3
 80017ba:	44c4      	add	ip, r8
 80017bc:	9b04      	ldr	r3, [sp, #16]
 80017be:	9d00      	ldr	r5, [sp, #0]
 80017c0:	4698      	mov	r8, r3
 80017c2:	4445      	add	r5, r8
 80017c4:	42b5      	cmp	r5, r6
 80017c6:	41b6      	sbcs	r6, r6
 80017c8:	4273      	negs	r3, r6
 80017ca:	4698      	mov	r8, r3
 80017cc:	464b      	mov	r3, r9
 80017ce:	041e      	lsls	r6, r3, #16
 80017d0:	9b05      	ldr	r3, [sp, #20]
 80017d2:	043c      	lsls	r4, r7, #16
 80017d4:	4699      	mov	r9, r3
 80017d6:	0c36      	lsrs	r6, r6, #16
 80017d8:	19a4      	adds	r4, r4, r6
 80017da:	444c      	add	r4, r9
 80017dc:	46a1      	mov	r9, r4
 80017de:	4683      	mov	fp, r0
 80017e0:	186e      	adds	r6, r5, r1
 80017e2:	44c1      	add	r9, r8
 80017e4:	428e      	cmp	r6, r1
 80017e6:	4189      	sbcs	r1, r1
 80017e8:	44cb      	add	fp, r9
 80017ea:	465d      	mov	r5, fp
 80017ec:	4249      	negs	r1, r1
 80017ee:	186d      	adds	r5, r5, r1
 80017f0:	429c      	cmp	r4, r3
 80017f2:	41a4      	sbcs	r4, r4
 80017f4:	45c1      	cmp	r9, r8
 80017f6:	419b      	sbcs	r3, r3
 80017f8:	4583      	cmp	fp, r0
 80017fa:	4180      	sbcs	r0, r0
 80017fc:	428d      	cmp	r5, r1
 80017fe:	4189      	sbcs	r1, r1
 8001800:	425b      	negs	r3, r3
 8001802:	4264      	negs	r4, r4
 8001804:	431c      	orrs	r4, r3
 8001806:	4240      	negs	r0, r0
 8001808:	9b03      	ldr	r3, [sp, #12]
 800180a:	4249      	negs	r1, r1
 800180c:	4301      	orrs	r1, r0
 800180e:	0270      	lsls	r0, r6, #9
 8001810:	0c3f      	lsrs	r7, r7, #16
 8001812:	4318      	orrs	r0, r3
 8001814:	19e4      	adds	r4, r4, r7
 8001816:	1e47      	subs	r7, r0, #1
 8001818:	41b8      	sbcs	r0, r7
 800181a:	1864      	adds	r4, r4, r1
 800181c:	4464      	add	r4, ip
 800181e:	0df6      	lsrs	r6, r6, #23
 8001820:	0261      	lsls	r1, r4, #9
 8001822:	4330      	orrs	r0, r6
 8001824:	0dec      	lsrs	r4, r5, #23
 8001826:	026e      	lsls	r6, r5, #9
 8001828:	430c      	orrs	r4, r1
 800182a:	4330      	orrs	r0, r6
 800182c:	01c9      	lsls	r1, r1, #7
 800182e:	d400      	bmi.n	8001832 <__aeabi_dmul+0x302>
 8001830:	e0f1      	b.n	8001a16 <__aeabi_dmul+0x4e6>
 8001832:	2101      	movs	r1, #1
 8001834:	0843      	lsrs	r3, r0, #1
 8001836:	4001      	ands	r1, r0
 8001838:	430b      	orrs	r3, r1
 800183a:	07e0      	lsls	r0, r4, #31
 800183c:	4318      	orrs	r0, r3
 800183e:	0864      	lsrs	r4, r4, #1
 8001840:	4915      	ldr	r1, [pc, #84]	; (8001898 <__aeabi_dmul+0x368>)
 8001842:	9b02      	ldr	r3, [sp, #8]
 8001844:	468c      	mov	ip, r1
 8001846:	4463      	add	r3, ip
 8001848:	2b00      	cmp	r3, #0
 800184a:	dc00      	bgt.n	800184e <__aeabi_dmul+0x31e>
 800184c:	e097      	b.n	800197e <__aeabi_dmul+0x44e>
 800184e:	0741      	lsls	r1, r0, #29
 8001850:	d009      	beq.n	8001866 <__aeabi_dmul+0x336>
 8001852:	210f      	movs	r1, #15
 8001854:	4001      	ands	r1, r0
 8001856:	2904      	cmp	r1, #4
 8001858:	d005      	beq.n	8001866 <__aeabi_dmul+0x336>
 800185a:	1d01      	adds	r1, r0, #4
 800185c:	4281      	cmp	r1, r0
 800185e:	4180      	sbcs	r0, r0
 8001860:	4240      	negs	r0, r0
 8001862:	1824      	adds	r4, r4, r0
 8001864:	0008      	movs	r0, r1
 8001866:	01e1      	lsls	r1, r4, #7
 8001868:	d506      	bpl.n	8001878 <__aeabi_dmul+0x348>
 800186a:	2180      	movs	r1, #128	; 0x80
 800186c:	00c9      	lsls	r1, r1, #3
 800186e:	468c      	mov	ip, r1
 8001870:	4b0a      	ldr	r3, [pc, #40]	; (800189c <__aeabi_dmul+0x36c>)
 8001872:	401c      	ands	r4, r3
 8001874:	9b02      	ldr	r3, [sp, #8]
 8001876:	4463      	add	r3, ip
 8001878:	4909      	ldr	r1, [pc, #36]	; (80018a0 <__aeabi_dmul+0x370>)
 800187a:	428b      	cmp	r3, r1
 800187c:	dd00      	ble.n	8001880 <__aeabi_dmul+0x350>
 800187e:	e710      	b.n	80016a2 <__aeabi_dmul+0x172>
 8001880:	0761      	lsls	r1, r4, #29
 8001882:	08c5      	lsrs	r5, r0, #3
 8001884:	0264      	lsls	r4, r4, #9
 8001886:	055b      	lsls	r3, r3, #21
 8001888:	430d      	orrs	r5, r1
 800188a:	0b24      	lsrs	r4, r4, #12
 800188c:	0d5b      	lsrs	r3, r3, #21
 800188e:	e6c1      	b.n	8001614 <__aeabi_dmul+0xe4>
 8001890:	000007ff 	.word	0x000007ff
 8001894:	fffffc01 	.word	0xfffffc01
 8001898:	000003ff 	.word	0x000003ff
 800189c:	feffffff 	.word	0xfeffffff
 80018a0:	000007fe 	.word	0x000007fe
 80018a4:	464b      	mov	r3, r9
 80018a6:	4323      	orrs	r3, r4
 80018a8:	d059      	beq.n	800195e <__aeabi_dmul+0x42e>
 80018aa:	2c00      	cmp	r4, #0
 80018ac:	d100      	bne.n	80018b0 <__aeabi_dmul+0x380>
 80018ae:	e0a3      	b.n	80019f8 <__aeabi_dmul+0x4c8>
 80018b0:	0020      	movs	r0, r4
 80018b2:	f000 fd2b 	bl	800230c <__clzsi2>
 80018b6:	0001      	movs	r1, r0
 80018b8:	0003      	movs	r3, r0
 80018ba:	390b      	subs	r1, #11
 80018bc:	221d      	movs	r2, #29
 80018be:	1a52      	subs	r2, r2, r1
 80018c0:	4649      	mov	r1, r9
 80018c2:	0018      	movs	r0, r3
 80018c4:	40d1      	lsrs	r1, r2
 80018c6:	464a      	mov	r2, r9
 80018c8:	3808      	subs	r0, #8
 80018ca:	4082      	lsls	r2, r0
 80018cc:	4084      	lsls	r4, r0
 80018ce:	0010      	movs	r0, r2
 80018d0:	430c      	orrs	r4, r1
 80018d2:	4a74      	ldr	r2, [pc, #464]	; (8001aa4 <__aeabi_dmul+0x574>)
 80018d4:	1aeb      	subs	r3, r5, r3
 80018d6:	4694      	mov	ip, r2
 80018d8:	4642      	mov	r2, r8
 80018da:	4463      	add	r3, ip
 80018dc:	9301      	str	r3, [sp, #4]
 80018de:	9b01      	ldr	r3, [sp, #4]
 80018e0:	407a      	eors	r2, r7
 80018e2:	3301      	adds	r3, #1
 80018e4:	2100      	movs	r1, #0
 80018e6:	b2d2      	uxtb	r2, r2
 80018e8:	9302      	str	r3, [sp, #8]
 80018ea:	2e0a      	cmp	r6, #10
 80018ec:	dd00      	ble.n	80018f0 <__aeabi_dmul+0x3c0>
 80018ee:	e667      	b.n	80015c0 <__aeabi_dmul+0x90>
 80018f0:	e683      	b.n	80015fa <__aeabi_dmul+0xca>
 80018f2:	465b      	mov	r3, fp
 80018f4:	4303      	orrs	r3, r0
 80018f6:	469a      	mov	sl, r3
 80018f8:	d02a      	beq.n	8001950 <__aeabi_dmul+0x420>
 80018fa:	465b      	mov	r3, fp
 80018fc:	2b00      	cmp	r3, #0
 80018fe:	d06d      	beq.n	80019dc <__aeabi_dmul+0x4ac>
 8001900:	4658      	mov	r0, fp
 8001902:	f000 fd03 	bl	800230c <__clzsi2>
 8001906:	0001      	movs	r1, r0
 8001908:	0003      	movs	r3, r0
 800190a:	390b      	subs	r1, #11
 800190c:	221d      	movs	r2, #29
 800190e:	1a52      	subs	r2, r2, r1
 8001910:	0021      	movs	r1, r4
 8001912:	0018      	movs	r0, r3
 8001914:	465d      	mov	r5, fp
 8001916:	40d1      	lsrs	r1, r2
 8001918:	3808      	subs	r0, #8
 800191a:	4085      	lsls	r5, r0
 800191c:	000a      	movs	r2, r1
 800191e:	4084      	lsls	r4, r0
 8001920:	432a      	orrs	r2, r5
 8001922:	4693      	mov	fp, r2
 8001924:	46a2      	mov	sl, r4
 8001926:	4d5f      	ldr	r5, [pc, #380]	; (8001aa4 <__aeabi_dmul+0x574>)
 8001928:	2600      	movs	r6, #0
 800192a:	1aed      	subs	r5, r5, r3
 800192c:	2300      	movs	r3, #0
 800192e:	9300      	str	r3, [sp, #0]
 8001930:	e625      	b.n	800157e <__aeabi_dmul+0x4e>
 8001932:	465b      	mov	r3, fp
 8001934:	4303      	orrs	r3, r0
 8001936:	469a      	mov	sl, r3
 8001938:	d105      	bne.n	8001946 <__aeabi_dmul+0x416>
 800193a:	2300      	movs	r3, #0
 800193c:	469b      	mov	fp, r3
 800193e:	3302      	adds	r3, #2
 8001940:	2608      	movs	r6, #8
 8001942:	9300      	str	r3, [sp, #0]
 8001944:	e61b      	b.n	800157e <__aeabi_dmul+0x4e>
 8001946:	2303      	movs	r3, #3
 8001948:	4682      	mov	sl, r0
 800194a:	260c      	movs	r6, #12
 800194c:	9300      	str	r3, [sp, #0]
 800194e:	e616      	b.n	800157e <__aeabi_dmul+0x4e>
 8001950:	2300      	movs	r3, #0
 8001952:	469b      	mov	fp, r3
 8001954:	3301      	adds	r3, #1
 8001956:	2604      	movs	r6, #4
 8001958:	2500      	movs	r5, #0
 800195a:	9300      	str	r3, [sp, #0]
 800195c:	e60f      	b.n	800157e <__aeabi_dmul+0x4e>
 800195e:	4642      	mov	r2, r8
 8001960:	3301      	adds	r3, #1
 8001962:	9501      	str	r5, [sp, #4]
 8001964:	431e      	orrs	r6, r3
 8001966:	9b01      	ldr	r3, [sp, #4]
 8001968:	407a      	eors	r2, r7
 800196a:	3301      	adds	r3, #1
 800196c:	2400      	movs	r4, #0
 800196e:	2000      	movs	r0, #0
 8001970:	2101      	movs	r1, #1
 8001972:	b2d2      	uxtb	r2, r2
 8001974:	9302      	str	r3, [sp, #8]
 8001976:	2e0a      	cmp	r6, #10
 8001978:	dd00      	ble.n	800197c <__aeabi_dmul+0x44c>
 800197a:	e621      	b.n	80015c0 <__aeabi_dmul+0x90>
 800197c:	e63d      	b.n	80015fa <__aeabi_dmul+0xca>
 800197e:	2101      	movs	r1, #1
 8001980:	1ac9      	subs	r1, r1, r3
 8001982:	2938      	cmp	r1, #56	; 0x38
 8001984:	dd00      	ble.n	8001988 <__aeabi_dmul+0x458>
 8001986:	e642      	b.n	800160e <__aeabi_dmul+0xde>
 8001988:	291f      	cmp	r1, #31
 800198a:	dd47      	ble.n	8001a1c <__aeabi_dmul+0x4ec>
 800198c:	261f      	movs	r6, #31
 800198e:	0025      	movs	r5, r4
 8001990:	4276      	negs	r6, r6
 8001992:	1af3      	subs	r3, r6, r3
 8001994:	40dd      	lsrs	r5, r3
 8001996:	002b      	movs	r3, r5
 8001998:	2920      	cmp	r1, #32
 800199a:	d005      	beq.n	80019a8 <__aeabi_dmul+0x478>
 800199c:	4942      	ldr	r1, [pc, #264]	; (8001aa8 <__aeabi_dmul+0x578>)
 800199e:	9d02      	ldr	r5, [sp, #8]
 80019a0:	468c      	mov	ip, r1
 80019a2:	4465      	add	r5, ip
 80019a4:	40ac      	lsls	r4, r5
 80019a6:	4320      	orrs	r0, r4
 80019a8:	1e41      	subs	r1, r0, #1
 80019aa:	4188      	sbcs	r0, r1
 80019ac:	4318      	orrs	r0, r3
 80019ae:	2307      	movs	r3, #7
 80019b0:	001d      	movs	r5, r3
 80019b2:	2400      	movs	r4, #0
 80019b4:	4005      	ands	r5, r0
 80019b6:	4203      	tst	r3, r0
 80019b8:	d04a      	beq.n	8001a50 <__aeabi_dmul+0x520>
 80019ba:	230f      	movs	r3, #15
 80019bc:	2400      	movs	r4, #0
 80019be:	4003      	ands	r3, r0
 80019c0:	2b04      	cmp	r3, #4
 80019c2:	d042      	beq.n	8001a4a <__aeabi_dmul+0x51a>
 80019c4:	1d03      	adds	r3, r0, #4
 80019c6:	4283      	cmp	r3, r0
 80019c8:	4180      	sbcs	r0, r0
 80019ca:	4240      	negs	r0, r0
 80019cc:	1824      	adds	r4, r4, r0
 80019ce:	0018      	movs	r0, r3
 80019d0:	0223      	lsls	r3, r4, #8
 80019d2:	d53a      	bpl.n	8001a4a <__aeabi_dmul+0x51a>
 80019d4:	2301      	movs	r3, #1
 80019d6:	2400      	movs	r4, #0
 80019d8:	2500      	movs	r5, #0
 80019da:	e61b      	b.n	8001614 <__aeabi_dmul+0xe4>
 80019dc:	f000 fc96 	bl	800230c <__clzsi2>
 80019e0:	0001      	movs	r1, r0
 80019e2:	0003      	movs	r3, r0
 80019e4:	3115      	adds	r1, #21
 80019e6:	3320      	adds	r3, #32
 80019e8:	291c      	cmp	r1, #28
 80019ea:	dd8f      	ble.n	800190c <__aeabi_dmul+0x3dc>
 80019ec:	3808      	subs	r0, #8
 80019ee:	2200      	movs	r2, #0
 80019f0:	4084      	lsls	r4, r0
 80019f2:	4692      	mov	sl, r2
 80019f4:	46a3      	mov	fp, r4
 80019f6:	e796      	b.n	8001926 <__aeabi_dmul+0x3f6>
 80019f8:	f000 fc88 	bl	800230c <__clzsi2>
 80019fc:	0001      	movs	r1, r0
 80019fe:	0003      	movs	r3, r0
 8001a00:	3115      	adds	r1, #21
 8001a02:	3320      	adds	r3, #32
 8001a04:	291c      	cmp	r1, #28
 8001a06:	dc00      	bgt.n	8001a0a <__aeabi_dmul+0x4da>
 8001a08:	e758      	b.n	80018bc <__aeabi_dmul+0x38c>
 8001a0a:	0002      	movs	r2, r0
 8001a0c:	464c      	mov	r4, r9
 8001a0e:	3a08      	subs	r2, #8
 8001a10:	2000      	movs	r0, #0
 8001a12:	4094      	lsls	r4, r2
 8001a14:	e75d      	b.n	80018d2 <__aeabi_dmul+0x3a2>
 8001a16:	9b01      	ldr	r3, [sp, #4]
 8001a18:	9302      	str	r3, [sp, #8]
 8001a1a:	e711      	b.n	8001840 <__aeabi_dmul+0x310>
 8001a1c:	4b23      	ldr	r3, [pc, #140]	; (8001aac <__aeabi_dmul+0x57c>)
 8001a1e:	0026      	movs	r6, r4
 8001a20:	469c      	mov	ip, r3
 8001a22:	0003      	movs	r3, r0
 8001a24:	9d02      	ldr	r5, [sp, #8]
 8001a26:	40cb      	lsrs	r3, r1
 8001a28:	4465      	add	r5, ip
 8001a2a:	40ae      	lsls	r6, r5
 8001a2c:	431e      	orrs	r6, r3
 8001a2e:	0003      	movs	r3, r0
 8001a30:	40ab      	lsls	r3, r5
 8001a32:	1e58      	subs	r0, r3, #1
 8001a34:	4183      	sbcs	r3, r0
 8001a36:	0030      	movs	r0, r6
 8001a38:	4318      	orrs	r0, r3
 8001a3a:	40cc      	lsrs	r4, r1
 8001a3c:	0743      	lsls	r3, r0, #29
 8001a3e:	d0c7      	beq.n	80019d0 <__aeabi_dmul+0x4a0>
 8001a40:	230f      	movs	r3, #15
 8001a42:	4003      	ands	r3, r0
 8001a44:	2b04      	cmp	r3, #4
 8001a46:	d1bd      	bne.n	80019c4 <__aeabi_dmul+0x494>
 8001a48:	e7c2      	b.n	80019d0 <__aeabi_dmul+0x4a0>
 8001a4a:	0765      	lsls	r5, r4, #29
 8001a4c:	0264      	lsls	r4, r4, #9
 8001a4e:	0b24      	lsrs	r4, r4, #12
 8001a50:	08c0      	lsrs	r0, r0, #3
 8001a52:	2300      	movs	r3, #0
 8001a54:	4305      	orrs	r5, r0
 8001a56:	e5dd      	b.n	8001614 <__aeabi_dmul+0xe4>
 8001a58:	2500      	movs	r5, #0
 8001a5a:	2302      	movs	r3, #2
 8001a5c:	2e0f      	cmp	r6, #15
 8001a5e:	d10c      	bne.n	8001a7a <__aeabi_dmul+0x54a>
 8001a60:	2480      	movs	r4, #128	; 0x80
 8001a62:	465b      	mov	r3, fp
 8001a64:	0324      	lsls	r4, r4, #12
 8001a66:	4223      	tst	r3, r4
 8001a68:	d00e      	beq.n	8001a88 <__aeabi_dmul+0x558>
 8001a6a:	4221      	tst	r1, r4
 8001a6c:	d10c      	bne.n	8001a88 <__aeabi_dmul+0x558>
 8001a6e:	430c      	orrs	r4, r1
 8001a70:	0324      	lsls	r4, r4, #12
 8001a72:	003a      	movs	r2, r7
 8001a74:	4b0e      	ldr	r3, [pc, #56]	; (8001ab0 <__aeabi_dmul+0x580>)
 8001a76:	0b24      	lsrs	r4, r4, #12
 8001a78:	e5cc      	b.n	8001614 <__aeabi_dmul+0xe4>
 8001a7a:	2e0b      	cmp	r6, #11
 8001a7c:	d000      	beq.n	8001a80 <__aeabi_dmul+0x550>
 8001a7e:	e5a2      	b.n	80015c6 <__aeabi_dmul+0x96>
 8001a80:	468b      	mov	fp, r1
 8001a82:	46aa      	mov	sl, r5
 8001a84:	9300      	str	r3, [sp, #0]
 8001a86:	e5f7      	b.n	8001678 <__aeabi_dmul+0x148>
 8001a88:	2480      	movs	r4, #128	; 0x80
 8001a8a:	465b      	mov	r3, fp
 8001a8c:	0324      	lsls	r4, r4, #12
 8001a8e:	431c      	orrs	r4, r3
 8001a90:	0324      	lsls	r4, r4, #12
 8001a92:	4642      	mov	r2, r8
 8001a94:	4655      	mov	r5, sl
 8001a96:	4b06      	ldr	r3, [pc, #24]	; (8001ab0 <__aeabi_dmul+0x580>)
 8001a98:	0b24      	lsrs	r4, r4, #12
 8001a9a:	e5bb      	b.n	8001614 <__aeabi_dmul+0xe4>
 8001a9c:	464d      	mov	r5, r9
 8001a9e:	0021      	movs	r1, r4
 8001aa0:	2303      	movs	r3, #3
 8001aa2:	e7db      	b.n	8001a5c <__aeabi_dmul+0x52c>
 8001aa4:	fffffc0d 	.word	0xfffffc0d
 8001aa8:	0000043e 	.word	0x0000043e
 8001aac:	0000041e 	.word	0x0000041e
 8001ab0:	000007ff 	.word	0x000007ff

08001ab4 <__aeabi_dsub>:
 8001ab4:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001ab6:	4657      	mov	r7, sl
 8001ab8:	464e      	mov	r6, r9
 8001aba:	4645      	mov	r5, r8
 8001abc:	46de      	mov	lr, fp
 8001abe:	b5e0      	push	{r5, r6, r7, lr}
 8001ac0:	000d      	movs	r5, r1
 8001ac2:	0004      	movs	r4, r0
 8001ac4:	0019      	movs	r1, r3
 8001ac6:	0010      	movs	r0, r2
 8001ac8:	032b      	lsls	r3, r5, #12
 8001aca:	0a5b      	lsrs	r3, r3, #9
 8001acc:	0f62      	lsrs	r2, r4, #29
 8001ace:	431a      	orrs	r2, r3
 8001ad0:	00e3      	lsls	r3, r4, #3
 8001ad2:	030c      	lsls	r4, r1, #12
 8001ad4:	0a64      	lsrs	r4, r4, #9
 8001ad6:	0f47      	lsrs	r7, r0, #29
 8001ad8:	4327      	orrs	r7, r4
 8001ada:	4cd0      	ldr	r4, [pc, #832]	; (8001e1c <__aeabi_dsub+0x368>)
 8001adc:	006e      	lsls	r6, r5, #1
 8001ade:	4691      	mov	r9, r2
 8001ae0:	b083      	sub	sp, #12
 8001ae2:	004a      	lsls	r2, r1, #1
 8001ae4:	00c0      	lsls	r0, r0, #3
 8001ae6:	4698      	mov	r8, r3
 8001ae8:	46a2      	mov	sl, r4
 8001aea:	0d76      	lsrs	r6, r6, #21
 8001aec:	0fed      	lsrs	r5, r5, #31
 8001aee:	0d52      	lsrs	r2, r2, #21
 8001af0:	0fc9      	lsrs	r1, r1, #31
 8001af2:	9001      	str	r0, [sp, #4]
 8001af4:	42a2      	cmp	r2, r4
 8001af6:	d100      	bne.n	8001afa <__aeabi_dsub+0x46>
 8001af8:	e0b9      	b.n	8001c6e <__aeabi_dsub+0x1ba>
 8001afa:	2401      	movs	r4, #1
 8001afc:	4061      	eors	r1, r4
 8001afe:	468b      	mov	fp, r1
 8001b00:	428d      	cmp	r5, r1
 8001b02:	d100      	bne.n	8001b06 <__aeabi_dsub+0x52>
 8001b04:	e08d      	b.n	8001c22 <__aeabi_dsub+0x16e>
 8001b06:	1ab4      	subs	r4, r6, r2
 8001b08:	46a4      	mov	ip, r4
 8001b0a:	2c00      	cmp	r4, #0
 8001b0c:	dc00      	bgt.n	8001b10 <__aeabi_dsub+0x5c>
 8001b0e:	e0b7      	b.n	8001c80 <__aeabi_dsub+0x1cc>
 8001b10:	2a00      	cmp	r2, #0
 8001b12:	d100      	bne.n	8001b16 <__aeabi_dsub+0x62>
 8001b14:	e0cb      	b.n	8001cae <__aeabi_dsub+0x1fa>
 8001b16:	4ac1      	ldr	r2, [pc, #772]	; (8001e1c <__aeabi_dsub+0x368>)
 8001b18:	4296      	cmp	r6, r2
 8001b1a:	d100      	bne.n	8001b1e <__aeabi_dsub+0x6a>
 8001b1c:	e186      	b.n	8001e2c <__aeabi_dsub+0x378>
 8001b1e:	2280      	movs	r2, #128	; 0x80
 8001b20:	0412      	lsls	r2, r2, #16
 8001b22:	4317      	orrs	r7, r2
 8001b24:	4662      	mov	r2, ip
 8001b26:	2a38      	cmp	r2, #56	; 0x38
 8001b28:	dd00      	ble.n	8001b2c <__aeabi_dsub+0x78>
 8001b2a:	e1a4      	b.n	8001e76 <__aeabi_dsub+0x3c2>
 8001b2c:	2a1f      	cmp	r2, #31
 8001b2e:	dd00      	ble.n	8001b32 <__aeabi_dsub+0x7e>
 8001b30:	e21d      	b.n	8001f6e <__aeabi_dsub+0x4ba>
 8001b32:	4661      	mov	r1, ip
 8001b34:	2220      	movs	r2, #32
 8001b36:	003c      	movs	r4, r7
 8001b38:	1a52      	subs	r2, r2, r1
 8001b3a:	0001      	movs	r1, r0
 8001b3c:	4090      	lsls	r0, r2
 8001b3e:	4094      	lsls	r4, r2
 8001b40:	1e42      	subs	r2, r0, #1
 8001b42:	4190      	sbcs	r0, r2
 8001b44:	4662      	mov	r2, ip
 8001b46:	46a0      	mov	r8, r4
 8001b48:	4664      	mov	r4, ip
 8001b4a:	40d7      	lsrs	r7, r2
 8001b4c:	464a      	mov	r2, r9
 8001b4e:	40e1      	lsrs	r1, r4
 8001b50:	4644      	mov	r4, r8
 8001b52:	1bd2      	subs	r2, r2, r7
 8001b54:	4691      	mov	r9, r2
 8001b56:	430c      	orrs	r4, r1
 8001b58:	4304      	orrs	r4, r0
 8001b5a:	1b1c      	subs	r4, r3, r4
 8001b5c:	42a3      	cmp	r3, r4
 8001b5e:	4192      	sbcs	r2, r2
 8001b60:	464b      	mov	r3, r9
 8001b62:	4252      	negs	r2, r2
 8001b64:	1a9b      	subs	r3, r3, r2
 8001b66:	469a      	mov	sl, r3
 8001b68:	4653      	mov	r3, sl
 8001b6a:	021b      	lsls	r3, r3, #8
 8001b6c:	d400      	bmi.n	8001b70 <__aeabi_dsub+0xbc>
 8001b6e:	e12b      	b.n	8001dc8 <__aeabi_dsub+0x314>
 8001b70:	4653      	mov	r3, sl
 8001b72:	025a      	lsls	r2, r3, #9
 8001b74:	0a53      	lsrs	r3, r2, #9
 8001b76:	469a      	mov	sl, r3
 8001b78:	4653      	mov	r3, sl
 8001b7a:	2b00      	cmp	r3, #0
 8001b7c:	d100      	bne.n	8001b80 <__aeabi_dsub+0xcc>
 8001b7e:	e166      	b.n	8001e4e <__aeabi_dsub+0x39a>
 8001b80:	4650      	mov	r0, sl
 8001b82:	f000 fbc3 	bl	800230c <__clzsi2>
 8001b86:	0003      	movs	r3, r0
 8001b88:	3b08      	subs	r3, #8
 8001b8a:	2220      	movs	r2, #32
 8001b8c:	0020      	movs	r0, r4
 8001b8e:	1ad2      	subs	r2, r2, r3
 8001b90:	4651      	mov	r1, sl
 8001b92:	40d0      	lsrs	r0, r2
 8001b94:	4099      	lsls	r1, r3
 8001b96:	0002      	movs	r2, r0
 8001b98:	409c      	lsls	r4, r3
 8001b9a:	430a      	orrs	r2, r1
 8001b9c:	429e      	cmp	r6, r3
 8001b9e:	dd00      	ble.n	8001ba2 <__aeabi_dsub+0xee>
 8001ba0:	e164      	b.n	8001e6c <__aeabi_dsub+0x3b8>
 8001ba2:	1b9b      	subs	r3, r3, r6
 8001ba4:	1c59      	adds	r1, r3, #1
 8001ba6:	291f      	cmp	r1, #31
 8001ba8:	dd00      	ble.n	8001bac <__aeabi_dsub+0xf8>
 8001baa:	e0fe      	b.n	8001daa <__aeabi_dsub+0x2f6>
 8001bac:	2320      	movs	r3, #32
 8001bae:	0010      	movs	r0, r2
 8001bb0:	0026      	movs	r6, r4
 8001bb2:	1a5b      	subs	r3, r3, r1
 8001bb4:	409c      	lsls	r4, r3
 8001bb6:	4098      	lsls	r0, r3
 8001bb8:	40ce      	lsrs	r6, r1
 8001bba:	40ca      	lsrs	r2, r1
 8001bbc:	1e63      	subs	r3, r4, #1
 8001bbe:	419c      	sbcs	r4, r3
 8001bc0:	4330      	orrs	r0, r6
 8001bc2:	4692      	mov	sl, r2
 8001bc4:	2600      	movs	r6, #0
 8001bc6:	4304      	orrs	r4, r0
 8001bc8:	0763      	lsls	r3, r4, #29
 8001bca:	d009      	beq.n	8001be0 <__aeabi_dsub+0x12c>
 8001bcc:	230f      	movs	r3, #15
 8001bce:	4023      	ands	r3, r4
 8001bd0:	2b04      	cmp	r3, #4
 8001bd2:	d005      	beq.n	8001be0 <__aeabi_dsub+0x12c>
 8001bd4:	1d23      	adds	r3, r4, #4
 8001bd6:	42a3      	cmp	r3, r4
 8001bd8:	41a4      	sbcs	r4, r4
 8001bda:	4264      	negs	r4, r4
 8001bdc:	44a2      	add	sl, r4
 8001bde:	001c      	movs	r4, r3
 8001be0:	4653      	mov	r3, sl
 8001be2:	021b      	lsls	r3, r3, #8
 8001be4:	d400      	bmi.n	8001be8 <__aeabi_dsub+0x134>
 8001be6:	e0f2      	b.n	8001dce <__aeabi_dsub+0x31a>
 8001be8:	4b8c      	ldr	r3, [pc, #560]	; (8001e1c <__aeabi_dsub+0x368>)
 8001bea:	3601      	adds	r6, #1
 8001bec:	429e      	cmp	r6, r3
 8001bee:	d100      	bne.n	8001bf2 <__aeabi_dsub+0x13e>
 8001bf0:	e10f      	b.n	8001e12 <__aeabi_dsub+0x35e>
 8001bf2:	4653      	mov	r3, sl
 8001bf4:	498a      	ldr	r1, [pc, #552]	; (8001e20 <__aeabi_dsub+0x36c>)
 8001bf6:	08e4      	lsrs	r4, r4, #3
 8001bf8:	400b      	ands	r3, r1
 8001bfa:	0019      	movs	r1, r3
 8001bfc:	075b      	lsls	r3, r3, #29
 8001bfe:	4323      	orrs	r3, r4
 8001c00:	0572      	lsls	r2, r6, #21
 8001c02:	024c      	lsls	r4, r1, #9
 8001c04:	0b24      	lsrs	r4, r4, #12
 8001c06:	0d52      	lsrs	r2, r2, #21
 8001c08:	0512      	lsls	r2, r2, #20
 8001c0a:	4322      	orrs	r2, r4
 8001c0c:	07ed      	lsls	r5, r5, #31
 8001c0e:	432a      	orrs	r2, r5
 8001c10:	0018      	movs	r0, r3
 8001c12:	0011      	movs	r1, r2
 8001c14:	b003      	add	sp, #12
 8001c16:	bcf0      	pop	{r4, r5, r6, r7}
 8001c18:	46bb      	mov	fp, r7
 8001c1a:	46b2      	mov	sl, r6
 8001c1c:	46a9      	mov	r9, r5
 8001c1e:	46a0      	mov	r8, r4
 8001c20:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001c22:	1ab4      	subs	r4, r6, r2
 8001c24:	46a4      	mov	ip, r4
 8001c26:	2c00      	cmp	r4, #0
 8001c28:	dd59      	ble.n	8001cde <__aeabi_dsub+0x22a>
 8001c2a:	2a00      	cmp	r2, #0
 8001c2c:	d100      	bne.n	8001c30 <__aeabi_dsub+0x17c>
 8001c2e:	e0b0      	b.n	8001d92 <__aeabi_dsub+0x2de>
 8001c30:	4556      	cmp	r6, sl
 8001c32:	d100      	bne.n	8001c36 <__aeabi_dsub+0x182>
 8001c34:	e0fa      	b.n	8001e2c <__aeabi_dsub+0x378>
 8001c36:	2280      	movs	r2, #128	; 0x80
 8001c38:	0412      	lsls	r2, r2, #16
 8001c3a:	4317      	orrs	r7, r2
 8001c3c:	4662      	mov	r2, ip
 8001c3e:	2a38      	cmp	r2, #56	; 0x38
 8001c40:	dd00      	ble.n	8001c44 <__aeabi_dsub+0x190>
 8001c42:	e0d4      	b.n	8001dee <__aeabi_dsub+0x33a>
 8001c44:	2a1f      	cmp	r2, #31
 8001c46:	dc00      	bgt.n	8001c4a <__aeabi_dsub+0x196>
 8001c48:	e1c0      	b.n	8001fcc <__aeabi_dsub+0x518>
 8001c4a:	0039      	movs	r1, r7
 8001c4c:	3a20      	subs	r2, #32
 8001c4e:	40d1      	lsrs	r1, r2
 8001c50:	4662      	mov	r2, ip
 8001c52:	2a20      	cmp	r2, #32
 8001c54:	d006      	beq.n	8001c64 <__aeabi_dsub+0x1b0>
 8001c56:	4664      	mov	r4, ip
 8001c58:	2240      	movs	r2, #64	; 0x40
 8001c5a:	1b12      	subs	r2, r2, r4
 8001c5c:	003c      	movs	r4, r7
 8001c5e:	4094      	lsls	r4, r2
 8001c60:	4304      	orrs	r4, r0
 8001c62:	9401      	str	r4, [sp, #4]
 8001c64:	9c01      	ldr	r4, [sp, #4]
 8001c66:	1e62      	subs	r2, r4, #1
 8001c68:	4194      	sbcs	r4, r2
 8001c6a:	430c      	orrs	r4, r1
 8001c6c:	e0c3      	b.n	8001df6 <__aeabi_dsub+0x342>
 8001c6e:	003c      	movs	r4, r7
 8001c70:	4304      	orrs	r4, r0
 8001c72:	d02b      	beq.n	8001ccc <__aeabi_dsub+0x218>
 8001c74:	468b      	mov	fp, r1
 8001c76:	428d      	cmp	r5, r1
 8001c78:	d02e      	beq.n	8001cd8 <__aeabi_dsub+0x224>
 8001c7a:	4c6a      	ldr	r4, [pc, #424]	; (8001e24 <__aeabi_dsub+0x370>)
 8001c7c:	46a4      	mov	ip, r4
 8001c7e:	44b4      	add	ip, r6
 8001c80:	4664      	mov	r4, ip
 8001c82:	2c00      	cmp	r4, #0
 8001c84:	d05f      	beq.n	8001d46 <__aeabi_dsub+0x292>
 8001c86:	1b94      	subs	r4, r2, r6
 8001c88:	46a4      	mov	ip, r4
 8001c8a:	2e00      	cmp	r6, #0
 8001c8c:	d000      	beq.n	8001c90 <__aeabi_dsub+0x1dc>
 8001c8e:	e120      	b.n	8001ed2 <__aeabi_dsub+0x41e>
 8001c90:	464c      	mov	r4, r9
 8001c92:	431c      	orrs	r4, r3
 8001c94:	d100      	bne.n	8001c98 <__aeabi_dsub+0x1e4>
 8001c96:	e1c7      	b.n	8002028 <__aeabi_dsub+0x574>
 8001c98:	4661      	mov	r1, ip
 8001c9a:	1e4c      	subs	r4, r1, #1
 8001c9c:	2901      	cmp	r1, #1
 8001c9e:	d100      	bne.n	8001ca2 <__aeabi_dsub+0x1ee>
 8001ca0:	e223      	b.n	80020ea <__aeabi_dsub+0x636>
 8001ca2:	4d5e      	ldr	r5, [pc, #376]	; (8001e1c <__aeabi_dsub+0x368>)
 8001ca4:	45ac      	cmp	ip, r5
 8001ca6:	d100      	bne.n	8001caa <__aeabi_dsub+0x1f6>
 8001ca8:	e1d8      	b.n	800205c <__aeabi_dsub+0x5a8>
 8001caa:	46a4      	mov	ip, r4
 8001cac:	e11a      	b.n	8001ee4 <__aeabi_dsub+0x430>
 8001cae:	003a      	movs	r2, r7
 8001cb0:	4302      	orrs	r2, r0
 8001cb2:	d100      	bne.n	8001cb6 <__aeabi_dsub+0x202>
 8001cb4:	e0e4      	b.n	8001e80 <__aeabi_dsub+0x3cc>
 8001cb6:	0022      	movs	r2, r4
 8001cb8:	3a01      	subs	r2, #1
 8001cba:	2c01      	cmp	r4, #1
 8001cbc:	d100      	bne.n	8001cc0 <__aeabi_dsub+0x20c>
 8001cbe:	e1c3      	b.n	8002048 <__aeabi_dsub+0x594>
 8001cc0:	4956      	ldr	r1, [pc, #344]	; (8001e1c <__aeabi_dsub+0x368>)
 8001cc2:	428c      	cmp	r4, r1
 8001cc4:	d100      	bne.n	8001cc8 <__aeabi_dsub+0x214>
 8001cc6:	e0b1      	b.n	8001e2c <__aeabi_dsub+0x378>
 8001cc8:	4694      	mov	ip, r2
 8001cca:	e72b      	b.n	8001b24 <__aeabi_dsub+0x70>
 8001ccc:	2401      	movs	r4, #1
 8001cce:	4061      	eors	r1, r4
 8001cd0:	468b      	mov	fp, r1
 8001cd2:	428d      	cmp	r5, r1
 8001cd4:	d000      	beq.n	8001cd8 <__aeabi_dsub+0x224>
 8001cd6:	e716      	b.n	8001b06 <__aeabi_dsub+0x52>
 8001cd8:	4952      	ldr	r1, [pc, #328]	; (8001e24 <__aeabi_dsub+0x370>)
 8001cda:	468c      	mov	ip, r1
 8001cdc:	44b4      	add	ip, r6
 8001cde:	4664      	mov	r4, ip
 8001ce0:	2c00      	cmp	r4, #0
 8001ce2:	d100      	bne.n	8001ce6 <__aeabi_dsub+0x232>
 8001ce4:	e0d3      	b.n	8001e8e <__aeabi_dsub+0x3da>
 8001ce6:	1b91      	subs	r1, r2, r6
 8001ce8:	468c      	mov	ip, r1
 8001cea:	2e00      	cmp	r6, #0
 8001cec:	d100      	bne.n	8001cf0 <__aeabi_dsub+0x23c>
 8001cee:	e15e      	b.n	8001fae <__aeabi_dsub+0x4fa>
 8001cf0:	494a      	ldr	r1, [pc, #296]	; (8001e1c <__aeabi_dsub+0x368>)
 8001cf2:	428a      	cmp	r2, r1
 8001cf4:	d100      	bne.n	8001cf8 <__aeabi_dsub+0x244>
 8001cf6:	e1be      	b.n	8002076 <__aeabi_dsub+0x5c2>
 8001cf8:	2180      	movs	r1, #128	; 0x80
 8001cfa:	464c      	mov	r4, r9
 8001cfc:	0409      	lsls	r1, r1, #16
 8001cfe:	430c      	orrs	r4, r1
 8001d00:	46a1      	mov	r9, r4
 8001d02:	4661      	mov	r1, ip
 8001d04:	2938      	cmp	r1, #56	; 0x38
 8001d06:	dd00      	ble.n	8001d0a <__aeabi_dsub+0x256>
 8001d08:	e1ba      	b.n	8002080 <__aeabi_dsub+0x5cc>
 8001d0a:	291f      	cmp	r1, #31
 8001d0c:	dd00      	ble.n	8001d10 <__aeabi_dsub+0x25c>
 8001d0e:	e227      	b.n	8002160 <__aeabi_dsub+0x6ac>
 8001d10:	2420      	movs	r4, #32
 8001d12:	1a64      	subs	r4, r4, r1
 8001d14:	4649      	mov	r1, r9
 8001d16:	40a1      	lsls	r1, r4
 8001d18:	001e      	movs	r6, r3
 8001d1a:	4688      	mov	r8, r1
 8001d1c:	4661      	mov	r1, ip
 8001d1e:	40a3      	lsls	r3, r4
 8001d20:	40ce      	lsrs	r6, r1
 8001d22:	4641      	mov	r1, r8
 8001d24:	1e5c      	subs	r4, r3, #1
 8001d26:	41a3      	sbcs	r3, r4
 8001d28:	4331      	orrs	r1, r6
 8001d2a:	4319      	orrs	r1, r3
 8001d2c:	000c      	movs	r4, r1
 8001d2e:	4663      	mov	r3, ip
 8001d30:	4649      	mov	r1, r9
 8001d32:	40d9      	lsrs	r1, r3
 8001d34:	187f      	adds	r7, r7, r1
 8001d36:	1824      	adds	r4, r4, r0
 8001d38:	4284      	cmp	r4, r0
 8001d3a:	419b      	sbcs	r3, r3
 8001d3c:	425b      	negs	r3, r3
 8001d3e:	469a      	mov	sl, r3
 8001d40:	0016      	movs	r6, r2
 8001d42:	44ba      	add	sl, r7
 8001d44:	e05d      	b.n	8001e02 <__aeabi_dsub+0x34e>
 8001d46:	4c38      	ldr	r4, [pc, #224]	; (8001e28 <__aeabi_dsub+0x374>)
 8001d48:	1c72      	adds	r2, r6, #1
 8001d4a:	4222      	tst	r2, r4
 8001d4c:	d000      	beq.n	8001d50 <__aeabi_dsub+0x29c>
 8001d4e:	e0df      	b.n	8001f10 <__aeabi_dsub+0x45c>
 8001d50:	464a      	mov	r2, r9
 8001d52:	431a      	orrs	r2, r3
 8001d54:	2e00      	cmp	r6, #0
 8001d56:	d000      	beq.n	8001d5a <__aeabi_dsub+0x2a6>
 8001d58:	e15c      	b.n	8002014 <__aeabi_dsub+0x560>
 8001d5a:	2a00      	cmp	r2, #0
 8001d5c:	d100      	bne.n	8001d60 <__aeabi_dsub+0x2ac>
 8001d5e:	e1cf      	b.n	8002100 <__aeabi_dsub+0x64c>
 8001d60:	003a      	movs	r2, r7
 8001d62:	4302      	orrs	r2, r0
 8001d64:	d100      	bne.n	8001d68 <__aeabi_dsub+0x2b4>
 8001d66:	e17f      	b.n	8002068 <__aeabi_dsub+0x5b4>
 8001d68:	1a1c      	subs	r4, r3, r0
 8001d6a:	464a      	mov	r2, r9
 8001d6c:	42a3      	cmp	r3, r4
 8001d6e:	4189      	sbcs	r1, r1
 8001d70:	1bd2      	subs	r2, r2, r7
 8001d72:	4249      	negs	r1, r1
 8001d74:	1a52      	subs	r2, r2, r1
 8001d76:	4692      	mov	sl, r2
 8001d78:	0212      	lsls	r2, r2, #8
 8001d7a:	d400      	bmi.n	8001d7e <__aeabi_dsub+0x2ca>
 8001d7c:	e20a      	b.n	8002194 <__aeabi_dsub+0x6e0>
 8001d7e:	1ac4      	subs	r4, r0, r3
 8001d80:	42a0      	cmp	r0, r4
 8001d82:	4180      	sbcs	r0, r0
 8001d84:	464b      	mov	r3, r9
 8001d86:	4240      	negs	r0, r0
 8001d88:	1aff      	subs	r7, r7, r3
 8001d8a:	1a3b      	subs	r3, r7, r0
 8001d8c:	469a      	mov	sl, r3
 8001d8e:	465d      	mov	r5, fp
 8001d90:	e71a      	b.n	8001bc8 <__aeabi_dsub+0x114>
 8001d92:	003a      	movs	r2, r7
 8001d94:	4302      	orrs	r2, r0
 8001d96:	d073      	beq.n	8001e80 <__aeabi_dsub+0x3cc>
 8001d98:	0022      	movs	r2, r4
 8001d9a:	3a01      	subs	r2, #1
 8001d9c:	2c01      	cmp	r4, #1
 8001d9e:	d100      	bne.n	8001da2 <__aeabi_dsub+0x2ee>
 8001da0:	e0cb      	b.n	8001f3a <__aeabi_dsub+0x486>
 8001da2:	4554      	cmp	r4, sl
 8001da4:	d042      	beq.n	8001e2c <__aeabi_dsub+0x378>
 8001da6:	4694      	mov	ip, r2
 8001da8:	e748      	b.n	8001c3c <__aeabi_dsub+0x188>
 8001daa:	0010      	movs	r0, r2
 8001dac:	3b1f      	subs	r3, #31
 8001dae:	40d8      	lsrs	r0, r3
 8001db0:	2920      	cmp	r1, #32
 8001db2:	d003      	beq.n	8001dbc <__aeabi_dsub+0x308>
 8001db4:	2340      	movs	r3, #64	; 0x40
 8001db6:	1a5b      	subs	r3, r3, r1
 8001db8:	409a      	lsls	r2, r3
 8001dba:	4314      	orrs	r4, r2
 8001dbc:	1e63      	subs	r3, r4, #1
 8001dbe:	419c      	sbcs	r4, r3
 8001dc0:	2300      	movs	r3, #0
 8001dc2:	2600      	movs	r6, #0
 8001dc4:	469a      	mov	sl, r3
 8001dc6:	4304      	orrs	r4, r0
 8001dc8:	0763      	lsls	r3, r4, #29
 8001dca:	d000      	beq.n	8001dce <__aeabi_dsub+0x31a>
 8001dcc:	e6fe      	b.n	8001bcc <__aeabi_dsub+0x118>
 8001dce:	4652      	mov	r2, sl
 8001dd0:	08e3      	lsrs	r3, r4, #3
 8001dd2:	0752      	lsls	r2, r2, #29
 8001dd4:	4313      	orrs	r3, r2
 8001dd6:	4652      	mov	r2, sl
 8001dd8:	46b4      	mov	ip, r6
 8001dda:	08d2      	lsrs	r2, r2, #3
 8001ddc:	490f      	ldr	r1, [pc, #60]	; (8001e1c <__aeabi_dsub+0x368>)
 8001dde:	458c      	cmp	ip, r1
 8001de0:	d02a      	beq.n	8001e38 <__aeabi_dsub+0x384>
 8001de2:	0312      	lsls	r2, r2, #12
 8001de4:	0b14      	lsrs	r4, r2, #12
 8001de6:	4662      	mov	r2, ip
 8001de8:	0552      	lsls	r2, r2, #21
 8001dea:	0d52      	lsrs	r2, r2, #21
 8001dec:	e70c      	b.n	8001c08 <__aeabi_dsub+0x154>
 8001dee:	003c      	movs	r4, r7
 8001df0:	4304      	orrs	r4, r0
 8001df2:	1e62      	subs	r2, r4, #1
 8001df4:	4194      	sbcs	r4, r2
 8001df6:	18e4      	adds	r4, r4, r3
 8001df8:	429c      	cmp	r4, r3
 8001dfa:	4192      	sbcs	r2, r2
 8001dfc:	4252      	negs	r2, r2
 8001dfe:	444a      	add	r2, r9
 8001e00:	4692      	mov	sl, r2
 8001e02:	4653      	mov	r3, sl
 8001e04:	021b      	lsls	r3, r3, #8
 8001e06:	d5df      	bpl.n	8001dc8 <__aeabi_dsub+0x314>
 8001e08:	4b04      	ldr	r3, [pc, #16]	; (8001e1c <__aeabi_dsub+0x368>)
 8001e0a:	3601      	adds	r6, #1
 8001e0c:	429e      	cmp	r6, r3
 8001e0e:	d000      	beq.n	8001e12 <__aeabi_dsub+0x35e>
 8001e10:	e0a0      	b.n	8001f54 <__aeabi_dsub+0x4a0>
 8001e12:	0032      	movs	r2, r6
 8001e14:	2400      	movs	r4, #0
 8001e16:	2300      	movs	r3, #0
 8001e18:	e6f6      	b.n	8001c08 <__aeabi_dsub+0x154>
 8001e1a:	46c0      	nop			; (mov r8, r8)
 8001e1c:	000007ff 	.word	0x000007ff
 8001e20:	ff7fffff 	.word	0xff7fffff
 8001e24:	fffff801 	.word	0xfffff801
 8001e28:	000007fe 	.word	0x000007fe
 8001e2c:	08db      	lsrs	r3, r3, #3
 8001e2e:	464a      	mov	r2, r9
 8001e30:	0752      	lsls	r2, r2, #29
 8001e32:	4313      	orrs	r3, r2
 8001e34:	464a      	mov	r2, r9
 8001e36:	08d2      	lsrs	r2, r2, #3
 8001e38:	0019      	movs	r1, r3
 8001e3a:	4311      	orrs	r1, r2
 8001e3c:	d100      	bne.n	8001e40 <__aeabi_dsub+0x38c>
 8001e3e:	e1b5      	b.n	80021ac <__aeabi_dsub+0x6f8>
 8001e40:	2480      	movs	r4, #128	; 0x80
 8001e42:	0324      	lsls	r4, r4, #12
 8001e44:	4314      	orrs	r4, r2
 8001e46:	0324      	lsls	r4, r4, #12
 8001e48:	4ad5      	ldr	r2, [pc, #852]	; (80021a0 <__aeabi_dsub+0x6ec>)
 8001e4a:	0b24      	lsrs	r4, r4, #12
 8001e4c:	e6dc      	b.n	8001c08 <__aeabi_dsub+0x154>
 8001e4e:	0020      	movs	r0, r4
 8001e50:	f000 fa5c 	bl	800230c <__clzsi2>
 8001e54:	0003      	movs	r3, r0
 8001e56:	3318      	adds	r3, #24
 8001e58:	2b1f      	cmp	r3, #31
 8001e5a:	dc00      	bgt.n	8001e5e <__aeabi_dsub+0x3aa>
 8001e5c:	e695      	b.n	8001b8a <__aeabi_dsub+0xd6>
 8001e5e:	0022      	movs	r2, r4
 8001e60:	3808      	subs	r0, #8
 8001e62:	4082      	lsls	r2, r0
 8001e64:	2400      	movs	r4, #0
 8001e66:	429e      	cmp	r6, r3
 8001e68:	dc00      	bgt.n	8001e6c <__aeabi_dsub+0x3b8>
 8001e6a:	e69a      	b.n	8001ba2 <__aeabi_dsub+0xee>
 8001e6c:	1af6      	subs	r6, r6, r3
 8001e6e:	4bcd      	ldr	r3, [pc, #820]	; (80021a4 <__aeabi_dsub+0x6f0>)
 8001e70:	401a      	ands	r2, r3
 8001e72:	4692      	mov	sl, r2
 8001e74:	e6a8      	b.n	8001bc8 <__aeabi_dsub+0x114>
 8001e76:	003c      	movs	r4, r7
 8001e78:	4304      	orrs	r4, r0
 8001e7a:	1e62      	subs	r2, r4, #1
 8001e7c:	4194      	sbcs	r4, r2
 8001e7e:	e66c      	b.n	8001b5a <__aeabi_dsub+0xa6>
 8001e80:	464a      	mov	r2, r9
 8001e82:	08db      	lsrs	r3, r3, #3
 8001e84:	0752      	lsls	r2, r2, #29
 8001e86:	4313      	orrs	r3, r2
 8001e88:	464a      	mov	r2, r9
 8001e8a:	08d2      	lsrs	r2, r2, #3
 8001e8c:	e7a6      	b.n	8001ddc <__aeabi_dsub+0x328>
 8001e8e:	4cc6      	ldr	r4, [pc, #792]	; (80021a8 <__aeabi_dsub+0x6f4>)
 8001e90:	1c72      	adds	r2, r6, #1
 8001e92:	4222      	tst	r2, r4
 8001e94:	d000      	beq.n	8001e98 <__aeabi_dsub+0x3e4>
 8001e96:	e0ac      	b.n	8001ff2 <__aeabi_dsub+0x53e>
 8001e98:	464a      	mov	r2, r9
 8001e9a:	431a      	orrs	r2, r3
 8001e9c:	2e00      	cmp	r6, #0
 8001e9e:	d000      	beq.n	8001ea2 <__aeabi_dsub+0x3ee>
 8001ea0:	e105      	b.n	80020ae <__aeabi_dsub+0x5fa>
 8001ea2:	2a00      	cmp	r2, #0
 8001ea4:	d100      	bne.n	8001ea8 <__aeabi_dsub+0x3f4>
 8001ea6:	e156      	b.n	8002156 <__aeabi_dsub+0x6a2>
 8001ea8:	003a      	movs	r2, r7
 8001eaa:	4302      	orrs	r2, r0
 8001eac:	d100      	bne.n	8001eb0 <__aeabi_dsub+0x3fc>
 8001eae:	e0db      	b.n	8002068 <__aeabi_dsub+0x5b4>
 8001eb0:	181c      	adds	r4, r3, r0
 8001eb2:	429c      	cmp	r4, r3
 8001eb4:	419b      	sbcs	r3, r3
 8001eb6:	444f      	add	r7, r9
 8001eb8:	46ba      	mov	sl, r7
 8001eba:	425b      	negs	r3, r3
 8001ebc:	449a      	add	sl, r3
 8001ebe:	4653      	mov	r3, sl
 8001ec0:	021b      	lsls	r3, r3, #8
 8001ec2:	d400      	bmi.n	8001ec6 <__aeabi_dsub+0x412>
 8001ec4:	e780      	b.n	8001dc8 <__aeabi_dsub+0x314>
 8001ec6:	4652      	mov	r2, sl
 8001ec8:	4bb6      	ldr	r3, [pc, #728]	; (80021a4 <__aeabi_dsub+0x6f0>)
 8001eca:	2601      	movs	r6, #1
 8001ecc:	401a      	ands	r2, r3
 8001ece:	4692      	mov	sl, r2
 8001ed0:	e77a      	b.n	8001dc8 <__aeabi_dsub+0x314>
 8001ed2:	4cb3      	ldr	r4, [pc, #716]	; (80021a0 <__aeabi_dsub+0x6ec>)
 8001ed4:	42a2      	cmp	r2, r4
 8001ed6:	d100      	bne.n	8001eda <__aeabi_dsub+0x426>
 8001ed8:	e0c0      	b.n	800205c <__aeabi_dsub+0x5a8>
 8001eda:	2480      	movs	r4, #128	; 0x80
 8001edc:	464d      	mov	r5, r9
 8001ede:	0424      	lsls	r4, r4, #16
 8001ee0:	4325      	orrs	r5, r4
 8001ee2:	46a9      	mov	r9, r5
 8001ee4:	4664      	mov	r4, ip
 8001ee6:	2c38      	cmp	r4, #56	; 0x38
 8001ee8:	dc53      	bgt.n	8001f92 <__aeabi_dsub+0x4de>
 8001eea:	4661      	mov	r1, ip
 8001eec:	2c1f      	cmp	r4, #31
 8001eee:	dd00      	ble.n	8001ef2 <__aeabi_dsub+0x43e>
 8001ef0:	e0cd      	b.n	800208e <__aeabi_dsub+0x5da>
 8001ef2:	2520      	movs	r5, #32
 8001ef4:	001e      	movs	r6, r3
 8001ef6:	1b2d      	subs	r5, r5, r4
 8001ef8:	464c      	mov	r4, r9
 8001efa:	40ab      	lsls	r3, r5
 8001efc:	40ac      	lsls	r4, r5
 8001efe:	40ce      	lsrs	r6, r1
 8001f00:	1e5d      	subs	r5, r3, #1
 8001f02:	41ab      	sbcs	r3, r5
 8001f04:	4334      	orrs	r4, r6
 8001f06:	4323      	orrs	r3, r4
 8001f08:	464c      	mov	r4, r9
 8001f0a:	40cc      	lsrs	r4, r1
 8001f0c:	1b3f      	subs	r7, r7, r4
 8001f0e:	e045      	b.n	8001f9c <__aeabi_dsub+0x4e8>
 8001f10:	464a      	mov	r2, r9
 8001f12:	1a1c      	subs	r4, r3, r0
 8001f14:	1bd1      	subs	r1, r2, r7
 8001f16:	42a3      	cmp	r3, r4
 8001f18:	4192      	sbcs	r2, r2
 8001f1a:	4252      	negs	r2, r2
 8001f1c:	4692      	mov	sl, r2
 8001f1e:	000a      	movs	r2, r1
 8001f20:	4651      	mov	r1, sl
 8001f22:	1a52      	subs	r2, r2, r1
 8001f24:	4692      	mov	sl, r2
 8001f26:	0212      	lsls	r2, r2, #8
 8001f28:	d500      	bpl.n	8001f2c <__aeabi_dsub+0x478>
 8001f2a:	e083      	b.n	8002034 <__aeabi_dsub+0x580>
 8001f2c:	4653      	mov	r3, sl
 8001f2e:	4323      	orrs	r3, r4
 8001f30:	d000      	beq.n	8001f34 <__aeabi_dsub+0x480>
 8001f32:	e621      	b.n	8001b78 <__aeabi_dsub+0xc4>
 8001f34:	2200      	movs	r2, #0
 8001f36:	2500      	movs	r5, #0
 8001f38:	e753      	b.n	8001de2 <__aeabi_dsub+0x32e>
 8001f3a:	181c      	adds	r4, r3, r0
 8001f3c:	429c      	cmp	r4, r3
 8001f3e:	419b      	sbcs	r3, r3
 8001f40:	444f      	add	r7, r9
 8001f42:	46ba      	mov	sl, r7
 8001f44:	425b      	negs	r3, r3
 8001f46:	449a      	add	sl, r3
 8001f48:	4653      	mov	r3, sl
 8001f4a:	2601      	movs	r6, #1
 8001f4c:	021b      	lsls	r3, r3, #8
 8001f4e:	d400      	bmi.n	8001f52 <__aeabi_dsub+0x49e>
 8001f50:	e73a      	b.n	8001dc8 <__aeabi_dsub+0x314>
 8001f52:	2602      	movs	r6, #2
 8001f54:	4652      	mov	r2, sl
 8001f56:	4b93      	ldr	r3, [pc, #588]	; (80021a4 <__aeabi_dsub+0x6f0>)
 8001f58:	2101      	movs	r1, #1
 8001f5a:	401a      	ands	r2, r3
 8001f5c:	0013      	movs	r3, r2
 8001f5e:	4021      	ands	r1, r4
 8001f60:	0862      	lsrs	r2, r4, #1
 8001f62:	430a      	orrs	r2, r1
 8001f64:	07dc      	lsls	r4, r3, #31
 8001f66:	085b      	lsrs	r3, r3, #1
 8001f68:	469a      	mov	sl, r3
 8001f6a:	4314      	orrs	r4, r2
 8001f6c:	e62c      	b.n	8001bc8 <__aeabi_dsub+0x114>
 8001f6e:	0039      	movs	r1, r7
 8001f70:	3a20      	subs	r2, #32
 8001f72:	40d1      	lsrs	r1, r2
 8001f74:	4662      	mov	r2, ip
 8001f76:	2a20      	cmp	r2, #32
 8001f78:	d006      	beq.n	8001f88 <__aeabi_dsub+0x4d4>
 8001f7a:	4664      	mov	r4, ip
 8001f7c:	2240      	movs	r2, #64	; 0x40
 8001f7e:	1b12      	subs	r2, r2, r4
 8001f80:	003c      	movs	r4, r7
 8001f82:	4094      	lsls	r4, r2
 8001f84:	4304      	orrs	r4, r0
 8001f86:	9401      	str	r4, [sp, #4]
 8001f88:	9c01      	ldr	r4, [sp, #4]
 8001f8a:	1e62      	subs	r2, r4, #1
 8001f8c:	4194      	sbcs	r4, r2
 8001f8e:	430c      	orrs	r4, r1
 8001f90:	e5e3      	b.n	8001b5a <__aeabi_dsub+0xa6>
 8001f92:	4649      	mov	r1, r9
 8001f94:	4319      	orrs	r1, r3
 8001f96:	000b      	movs	r3, r1
 8001f98:	1e5c      	subs	r4, r3, #1
 8001f9a:	41a3      	sbcs	r3, r4
 8001f9c:	1ac4      	subs	r4, r0, r3
 8001f9e:	42a0      	cmp	r0, r4
 8001fa0:	419b      	sbcs	r3, r3
 8001fa2:	425b      	negs	r3, r3
 8001fa4:	1afb      	subs	r3, r7, r3
 8001fa6:	469a      	mov	sl, r3
 8001fa8:	465d      	mov	r5, fp
 8001faa:	0016      	movs	r6, r2
 8001fac:	e5dc      	b.n	8001b68 <__aeabi_dsub+0xb4>
 8001fae:	4649      	mov	r1, r9
 8001fb0:	4319      	orrs	r1, r3
 8001fb2:	d100      	bne.n	8001fb6 <__aeabi_dsub+0x502>
 8001fb4:	e0ae      	b.n	8002114 <__aeabi_dsub+0x660>
 8001fb6:	4661      	mov	r1, ip
 8001fb8:	4664      	mov	r4, ip
 8001fba:	3901      	subs	r1, #1
 8001fbc:	2c01      	cmp	r4, #1
 8001fbe:	d100      	bne.n	8001fc2 <__aeabi_dsub+0x50e>
 8001fc0:	e0e0      	b.n	8002184 <__aeabi_dsub+0x6d0>
 8001fc2:	4c77      	ldr	r4, [pc, #476]	; (80021a0 <__aeabi_dsub+0x6ec>)
 8001fc4:	45a4      	cmp	ip, r4
 8001fc6:	d056      	beq.n	8002076 <__aeabi_dsub+0x5c2>
 8001fc8:	468c      	mov	ip, r1
 8001fca:	e69a      	b.n	8001d02 <__aeabi_dsub+0x24e>
 8001fcc:	4661      	mov	r1, ip
 8001fce:	2220      	movs	r2, #32
 8001fd0:	003c      	movs	r4, r7
 8001fd2:	1a52      	subs	r2, r2, r1
 8001fd4:	4094      	lsls	r4, r2
 8001fd6:	0001      	movs	r1, r0
 8001fd8:	4090      	lsls	r0, r2
 8001fda:	46a0      	mov	r8, r4
 8001fdc:	4664      	mov	r4, ip
 8001fde:	1e42      	subs	r2, r0, #1
 8001fe0:	4190      	sbcs	r0, r2
 8001fe2:	4662      	mov	r2, ip
 8001fe4:	40e1      	lsrs	r1, r4
 8001fe6:	4644      	mov	r4, r8
 8001fe8:	40d7      	lsrs	r7, r2
 8001fea:	430c      	orrs	r4, r1
 8001fec:	4304      	orrs	r4, r0
 8001fee:	44b9      	add	r9, r7
 8001ff0:	e701      	b.n	8001df6 <__aeabi_dsub+0x342>
 8001ff2:	496b      	ldr	r1, [pc, #428]	; (80021a0 <__aeabi_dsub+0x6ec>)
 8001ff4:	428a      	cmp	r2, r1
 8001ff6:	d100      	bne.n	8001ffa <__aeabi_dsub+0x546>
 8001ff8:	e70c      	b.n	8001e14 <__aeabi_dsub+0x360>
 8001ffa:	1818      	adds	r0, r3, r0
 8001ffc:	4298      	cmp	r0, r3
 8001ffe:	419b      	sbcs	r3, r3
 8002000:	444f      	add	r7, r9
 8002002:	425b      	negs	r3, r3
 8002004:	18fb      	adds	r3, r7, r3
 8002006:	07dc      	lsls	r4, r3, #31
 8002008:	0840      	lsrs	r0, r0, #1
 800200a:	085b      	lsrs	r3, r3, #1
 800200c:	469a      	mov	sl, r3
 800200e:	0016      	movs	r6, r2
 8002010:	4304      	orrs	r4, r0
 8002012:	e6d9      	b.n	8001dc8 <__aeabi_dsub+0x314>
 8002014:	2a00      	cmp	r2, #0
 8002016:	d000      	beq.n	800201a <__aeabi_dsub+0x566>
 8002018:	e081      	b.n	800211e <__aeabi_dsub+0x66a>
 800201a:	003b      	movs	r3, r7
 800201c:	4303      	orrs	r3, r0
 800201e:	d11d      	bne.n	800205c <__aeabi_dsub+0x5a8>
 8002020:	2280      	movs	r2, #128	; 0x80
 8002022:	2500      	movs	r5, #0
 8002024:	0312      	lsls	r2, r2, #12
 8002026:	e70b      	b.n	8001e40 <__aeabi_dsub+0x38c>
 8002028:	08c0      	lsrs	r0, r0, #3
 800202a:	077b      	lsls	r3, r7, #29
 800202c:	465d      	mov	r5, fp
 800202e:	4303      	orrs	r3, r0
 8002030:	08fa      	lsrs	r2, r7, #3
 8002032:	e6d3      	b.n	8001ddc <__aeabi_dsub+0x328>
 8002034:	1ac4      	subs	r4, r0, r3
 8002036:	42a0      	cmp	r0, r4
 8002038:	4180      	sbcs	r0, r0
 800203a:	464b      	mov	r3, r9
 800203c:	4240      	negs	r0, r0
 800203e:	1aff      	subs	r7, r7, r3
 8002040:	1a3b      	subs	r3, r7, r0
 8002042:	469a      	mov	sl, r3
 8002044:	465d      	mov	r5, fp
 8002046:	e597      	b.n	8001b78 <__aeabi_dsub+0xc4>
 8002048:	1a1c      	subs	r4, r3, r0
 800204a:	464a      	mov	r2, r9
 800204c:	42a3      	cmp	r3, r4
 800204e:	419b      	sbcs	r3, r3
 8002050:	1bd7      	subs	r7, r2, r7
 8002052:	425b      	negs	r3, r3
 8002054:	1afb      	subs	r3, r7, r3
 8002056:	469a      	mov	sl, r3
 8002058:	2601      	movs	r6, #1
 800205a:	e585      	b.n	8001b68 <__aeabi_dsub+0xb4>
 800205c:	08c0      	lsrs	r0, r0, #3
 800205e:	077b      	lsls	r3, r7, #29
 8002060:	465d      	mov	r5, fp
 8002062:	4303      	orrs	r3, r0
 8002064:	08fa      	lsrs	r2, r7, #3
 8002066:	e6e7      	b.n	8001e38 <__aeabi_dsub+0x384>
 8002068:	464a      	mov	r2, r9
 800206a:	08db      	lsrs	r3, r3, #3
 800206c:	0752      	lsls	r2, r2, #29
 800206e:	4313      	orrs	r3, r2
 8002070:	464a      	mov	r2, r9
 8002072:	08d2      	lsrs	r2, r2, #3
 8002074:	e6b5      	b.n	8001de2 <__aeabi_dsub+0x32e>
 8002076:	08c0      	lsrs	r0, r0, #3
 8002078:	077b      	lsls	r3, r7, #29
 800207a:	4303      	orrs	r3, r0
 800207c:	08fa      	lsrs	r2, r7, #3
 800207e:	e6db      	b.n	8001e38 <__aeabi_dsub+0x384>
 8002080:	4649      	mov	r1, r9
 8002082:	4319      	orrs	r1, r3
 8002084:	000b      	movs	r3, r1
 8002086:	1e59      	subs	r1, r3, #1
 8002088:	418b      	sbcs	r3, r1
 800208a:	001c      	movs	r4, r3
 800208c:	e653      	b.n	8001d36 <__aeabi_dsub+0x282>
 800208e:	464d      	mov	r5, r9
 8002090:	3c20      	subs	r4, #32
 8002092:	40e5      	lsrs	r5, r4
 8002094:	2920      	cmp	r1, #32
 8002096:	d005      	beq.n	80020a4 <__aeabi_dsub+0x5f0>
 8002098:	2440      	movs	r4, #64	; 0x40
 800209a:	1a64      	subs	r4, r4, r1
 800209c:	4649      	mov	r1, r9
 800209e:	40a1      	lsls	r1, r4
 80020a0:	430b      	orrs	r3, r1
 80020a2:	4698      	mov	r8, r3
 80020a4:	4643      	mov	r3, r8
 80020a6:	1e5c      	subs	r4, r3, #1
 80020a8:	41a3      	sbcs	r3, r4
 80020aa:	432b      	orrs	r3, r5
 80020ac:	e776      	b.n	8001f9c <__aeabi_dsub+0x4e8>
 80020ae:	2a00      	cmp	r2, #0
 80020b0:	d0e1      	beq.n	8002076 <__aeabi_dsub+0x5c2>
 80020b2:	003a      	movs	r2, r7
 80020b4:	08db      	lsrs	r3, r3, #3
 80020b6:	4302      	orrs	r2, r0
 80020b8:	d100      	bne.n	80020bc <__aeabi_dsub+0x608>
 80020ba:	e6b8      	b.n	8001e2e <__aeabi_dsub+0x37a>
 80020bc:	464a      	mov	r2, r9
 80020be:	0752      	lsls	r2, r2, #29
 80020c0:	2480      	movs	r4, #128	; 0x80
 80020c2:	4313      	orrs	r3, r2
 80020c4:	464a      	mov	r2, r9
 80020c6:	0324      	lsls	r4, r4, #12
 80020c8:	08d2      	lsrs	r2, r2, #3
 80020ca:	4222      	tst	r2, r4
 80020cc:	d007      	beq.n	80020de <__aeabi_dsub+0x62a>
 80020ce:	08fe      	lsrs	r6, r7, #3
 80020d0:	4226      	tst	r6, r4
 80020d2:	d104      	bne.n	80020de <__aeabi_dsub+0x62a>
 80020d4:	465d      	mov	r5, fp
 80020d6:	0032      	movs	r2, r6
 80020d8:	08c3      	lsrs	r3, r0, #3
 80020da:	077f      	lsls	r7, r7, #29
 80020dc:	433b      	orrs	r3, r7
 80020de:	0f59      	lsrs	r1, r3, #29
 80020e0:	00db      	lsls	r3, r3, #3
 80020e2:	0749      	lsls	r1, r1, #29
 80020e4:	08db      	lsrs	r3, r3, #3
 80020e6:	430b      	orrs	r3, r1
 80020e8:	e6a6      	b.n	8001e38 <__aeabi_dsub+0x384>
 80020ea:	1ac4      	subs	r4, r0, r3
 80020ec:	42a0      	cmp	r0, r4
 80020ee:	4180      	sbcs	r0, r0
 80020f0:	464b      	mov	r3, r9
 80020f2:	4240      	negs	r0, r0
 80020f4:	1aff      	subs	r7, r7, r3
 80020f6:	1a3b      	subs	r3, r7, r0
 80020f8:	469a      	mov	sl, r3
 80020fa:	465d      	mov	r5, fp
 80020fc:	2601      	movs	r6, #1
 80020fe:	e533      	b.n	8001b68 <__aeabi_dsub+0xb4>
 8002100:	003b      	movs	r3, r7
 8002102:	4303      	orrs	r3, r0
 8002104:	d100      	bne.n	8002108 <__aeabi_dsub+0x654>
 8002106:	e715      	b.n	8001f34 <__aeabi_dsub+0x480>
 8002108:	08c0      	lsrs	r0, r0, #3
 800210a:	077b      	lsls	r3, r7, #29
 800210c:	465d      	mov	r5, fp
 800210e:	4303      	orrs	r3, r0
 8002110:	08fa      	lsrs	r2, r7, #3
 8002112:	e666      	b.n	8001de2 <__aeabi_dsub+0x32e>
 8002114:	08c0      	lsrs	r0, r0, #3
 8002116:	077b      	lsls	r3, r7, #29
 8002118:	4303      	orrs	r3, r0
 800211a:	08fa      	lsrs	r2, r7, #3
 800211c:	e65e      	b.n	8001ddc <__aeabi_dsub+0x328>
 800211e:	003a      	movs	r2, r7
 8002120:	08db      	lsrs	r3, r3, #3
 8002122:	4302      	orrs	r2, r0
 8002124:	d100      	bne.n	8002128 <__aeabi_dsub+0x674>
 8002126:	e682      	b.n	8001e2e <__aeabi_dsub+0x37a>
 8002128:	464a      	mov	r2, r9
 800212a:	0752      	lsls	r2, r2, #29
 800212c:	2480      	movs	r4, #128	; 0x80
 800212e:	4313      	orrs	r3, r2
 8002130:	464a      	mov	r2, r9
 8002132:	0324      	lsls	r4, r4, #12
 8002134:	08d2      	lsrs	r2, r2, #3
 8002136:	4222      	tst	r2, r4
 8002138:	d007      	beq.n	800214a <__aeabi_dsub+0x696>
 800213a:	08fe      	lsrs	r6, r7, #3
 800213c:	4226      	tst	r6, r4
 800213e:	d104      	bne.n	800214a <__aeabi_dsub+0x696>
 8002140:	465d      	mov	r5, fp
 8002142:	0032      	movs	r2, r6
 8002144:	08c3      	lsrs	r3, r0, #3
 8002146:	077f      	lsls	r7, r7, #29
 8002148:	433b      	orrs	r3, r7
 800214a:	0f59      	lsrs	r1, r3, #29
 800214c:	00db      	lsls	r3, r3, #3
 800214e:	08db      	lsrs	r3, r3, #3
 8002150:	0749      	lsls	r1, r1, #29
 8002152:	430b      	orrs	r3, r1
 8002154:	e670      	b.n	8001e38 <__aeabi_dsub+0x384>
 8002156:	08c0      	lsrs	r0, r0, #3
 8002158:	077b      	lsls	r3, r7, #29
 800215a:	4303      	orrs	r3, r0
 800215c:	08fa      	lsrs	r2, r7, #3
 800215e:	e640      	b.n	8001de2 <__aeabi_dsub+0x32e>
 8002160:	464c      	mov	r4, r9
 8002162:	3920      	subs	r1, #32
 8002164:	40cc      	lsrs	r4, r1
 8002166:	4661      	mov	r1, ip
 8002168:	2920      	cmp	r1, #32
 800216a:	d006      	beq.n	800217a <__aeabi_dsub+0x6c6>
 800216c:	4666      	mov	r6, ip
 800216e:	2140      	movs	r1, #64	; 0x40
 8002170:	1b89      	subs	r1, r1, r6
 8002172:	464e      	mov	r6, r9
 8002174:	408e      	lsls	r6, r1
 8002176:	4333      	orrs	r3, r6
 8002178:	4698      	mov	r8, r3
 800217a:	4643      	mov	r3, r8
 800217c:	1e59      	subs	r1, r3, #1
 800217e:	418b      	sbcs	r3, r1
 8002180:	431c      	orrs	r4, r3
 8002182:	e5d8      	b.n	8001d36 <__aeabi_dsub+0x282>
 8002184:	181c      	adds	r4, r3, r0
 8002186:	4284      	cmp	r4, r0
 8002188:	4180      	sbcs	r0, r0
 800218a:	444f      	add	r7, r9
 800218c:	46ba      	mov	sl, r7
 800218e:	4240      	negs	r0, r0
 8002190:	4482      	add	sl, r0
 8002192:	e6d9      	b.n	8001f48 <__aeabi_dsub+0x494>
 8002194:	4653      	mov	r3, sl
 8002196:	4323      	orrs	r3, r4
 8002198:	d100      	bne.n	800219c <__aeabi_dsub+0x6e8>
 800219a:	e6cb      	b.n	8001f34 <__aeabi_dsub+0x480>
 800219c:	e614      	b.n	8001dc8 <__aeabi_dsub+0x314>
 800219e:	46c0      	nop			; (mov r8, r8)
 80021a0:	000007ff 	.word	0x000007ff
 80021a4:	ff7fffff 	.word	0xff7fffff
 80021a8:	000007fe 	.word	0x000007fe
 80021ac:	2300      	movs	r3, #0
 80021ae:	4a01      	ldr	r2, [pc, #4]	; (80021b4 <__aeabi_dsub+0x700>)
 80021b0:	001c      	movs	r4, r3
 80021b2:	e529      	b.n	8001c08 <__aeabi_dsub+0x154>
 80021b4:	000007ff 	.word	0x000007ff

080021b8 <__aeabi_dcmpun>:
 80021b8:	b570      	push	{r4, r5, r6, lr}
 80021ba:	0005      	movs	r5, r0
 80021bc:	480c      	ldr	r0, [pc, #48]	; (80021f0 <__aeabi_dcmpun+0x38>)
 80021be:	031c      	lsls	r4, r3, #12
 80021c0:	0016      	movs	r6, r2
 80021c2:	005b      	lsls	r3, r3, #1
 80021c4:	030a      	lsls	r2, r1, #12
 80021c6:	0049      	lsls	r1, r1, #1
 80021c8:	0b12      	lsrs	r2, r2, #12
 80021ca:	0d49      	lsrs	r1, r1, #21
 80021cc:	0b24      	lsrs	r4, r4, #12
 80021ce:	0d5b      	lsrs	r3, r3, #21
 80021d0:	4281      	cmp	r1, r0
 80021d2:	d008      	beq.n	80021e6 <__aeabi_dcmpun+0x2e>
 80021d4:	4a06      	ldr	r2, [pc, #24]	; (80021f0 <__aeabi_dcmpun+0x38>)
 80021d6:	2000      	movs	r0, #0
 80021d8:	4293      	cmp	r3, r2
 80021da:	d103      	bne.n	80021e4 <__aeabi_dcmpun+0x2c>
 80021dc:	0020      	movs	r0, r4
 80021de:	4330      	orrs	r0, r6
 80021e0:	1e43      	subs	r3, r0, #1
 80021e2:	4198      	sbcs	r0, r3
 80021e4:	bd70      	pop	{r4, r5, r6, pc}
 80021e6:	2001      	movs	r0, #1
 80021e8:	432a      	orrs	r2, r5
 80021ea:	d1fb      	bne.n	80021e4 <__aeabi_dcmpun+0x2c>
 80021ec:	e7f2      	b.n	80021d4 <__aeabi_dcmpun+0x1c>
 80021ee:	46c0      	nop			; (mov r8, r8)
 80021f0:	000007ff 	.word	0x000007ff

080021f4 <__aeabi_d2iz>:
 80021f4:	000a      	movs	r2, r1
 80021f6:	b530      	push	{r4, r5, lr}
 80021f8:	4c13      	ldr	r4, [pc, #76]	; (8002248 <__aeabi_d2iz+0x54>)
 80021fa:	0053      	lsls	r3, r2, #1
 80021fc:	0309      	lsls	r1, r1, #12
 80021fe:	0005      	movs	r5, r0
 8002200:	0b09      	lsrs	r1, r1, #12
 8002202:	2000      	movs	r0, #0
 8002204:	0d5b      	lsrs	r3, r3, #21
 8002206:	0fd2      	lsrs	r2, r2, #31
 8002208:	42a3      	cmp	r3, r4
 800220a:	dd04      	ble.n	8002216 <__aeabi_d2iz+0x22>
 800220c:	480f      	ldr	r0, [pc, #60]	; (800224c <__aeabi_d2iz+0x58>)
 800220e:	4283      	cmp	r3, r0
 8002210:	dd02      	ble.n	8002218 <__aeabi_d2iz+0x24>
 8002212:	4b0f      	ldr	r3, [pc, #60]	; (8002250 <__aeabi_d2iz+0x5c>)
 8002214:	18d0      	adds	r0, r2, r3
 8002216:	bd30      	pop	{r4, r5, pc}
 8002218:	2080      	movs	r0, #128	; 0x80
 800221a:	0340      	lsls	r0, r0, #13
 800221c:	4301      	orrs	r1, r0
 800221e:	480d      	ldr	r0, [pc, #52]	; (8002254 <__aeabi_d2iz+0x60>)
 8002220:	1ac0      	subs	r0, r0, r3
 8002222:	281f      	cmp	r0, #31
 8002224:	dd08      	ble.n	8002238 <__aeabi_d2iz+0x44>
 8002226:	480c      	ldr	r0, [pc, #48]	; (8002258 <__aeabi_d2iz+0x64>)
 8002228:	1ac3      	subs	r3, r0, r3
 800222a:	40d9      	lsrs	r1, r3
 800222c:	000b      	movs	r3, r1
 800222e:	4258      	negs	r0, r3
 8002230:	2a00      	cmp	r2, #0
 8002232:	d1f0      	bne.n	8002216 <__aeabi_d2iz+0x22>
 8002234:	0018      	movs	r0, r3
 8002236:	e7ee      	b.n	8002216 <__aeabi_d2iz+0x22>
 8002238:	4c08      	ldr	r4, [pc, #32]	; (800225c <__aeabi_d2iz+0x68>)
 800223a:	40c5      	lsrs	r5, r0
 800223c:	46a4      	mov	ip, r4
 800223e:	4463      	add	r3, ip
 8002240:	4099      	lsls	r1, r3
 8002242:	000b      	movs	r3, r1
 8002244:	432b      	orrs	r3, r5
 8002246:	e7f2      	b.n	800222e <__aeabi_d2iz+0x3a>
 8002248:	000003fe 	.word	0x000003fe
 800224c:	0000041d 	.word	0x0000041d
 8002250:	7fffffff 	.word	0x7fffffff
 8002254:	00000433 	.word	0x00000433
 8002258:	00000413 	.word	0x00000413
 800225c:	fffffbed 	.word	0xfffffbed

08002260 <__aeabi_i2d>:
 8002260:	b570      	push	{r4, r5, r6, lr}
 8002262:	2800      	cmp	r0, #0
 8002264:	d016      	beq.n	8002294 <__aeabi_i2d+0x34>
 8002266:	17c3      	asrs	r3, r0, #31
 8002268:	18c5      	adds	r5, r0, r3
 800226a:	405d      	eors	r5, r3
 800226c:	0fc4      	lsrs	r4, r0, #31
 800226e:	0028      	movs	r0, r5
 8002270:	f000 f84c 	bl	800230c <__clzsi2>
 8002274:	4b11      	ldr	r3, [pc, #68]	; (80022bc <__aeabi_i2d+0x5c>)
 8002276:	1a1b      	subs	r3, r3, r0
 8002278:	280a      	cmp	r0, #10
 800227a:	dc16      	bgt.n	80022aa <__aeabi_i2d+0x4a>
 800227c:	0002      	movs	r2, r0
 800227e:	002e      	movs	r6, r5
 8002280:	3215      	adds	r2, #21
 8002282:	4096      	lsls	r6, r2
 8002284:	220b      	movs	r2, #11
 8002286:	1a12      	subs	r2, r2, r0
 8002288:	40d5      	lsrs	r5, r2
 800228a:	055b      	lsls	r3, r3, #21
 800228c:	032d      	lsls	r5, r5, #12
 800228e:	0b2d      	lsrs	r5, r5, #12
 8002290:	0d5b      	lsrs	r3, r3, #21
 8002292:	e003      	b.n	800229c <__aeabi_i2d+0x3c>
 8002294:	2400      	movs	r4, #0
 8002296:	2300      	movs	r3, #0
 8002298:	2500      	movs	r5, #0
 800229a:	2600      	movs	r6, #0
 800229c:	051b      	lsls	r3, r3, #20
 800229e:	432b      	orrs	r3, r5
 80022a0:	07e4      	lsls	r4, r4, #31
 80022a2:	4323      	orrs	r3, r4
 80022a4:	0030      	movs	r0, r6
 80022a6:	0019      	movs	r1, r3
 80022a8:	bd70      	pop	{r4, r5, r6, pc}
 80022aa:	380b      	subs	r0, #11
 80022ac:	4085      	lsls	r5, r0
 80022ae:	055b      	lsls	r3, r3, #21
 80022b0:	032d      	lsls	r5, r5, #12
 80022b2:	2600      	movs	r6, #0
 80022b4:	0b2d      	lsrs	r5, r5, #12
 80022b6:	0d5b      	lsrs	r3, r3, #21
 80022b8:	e7f0      	b.n	800229c <__aeabi_i2d+0x3c>
 80022ba:	46c0      	nop			; (mov r8, r8)
 80022bc:	0000041e 	.word	0x0000041e

080022c0 <__aeabi_ui2d>:
 80022c0:	b510      	push	{r4, lr}
 80022c2:	1e04      	subs	r4, r0, #0
 80022c4:	d010      	beq.n	80022e8 <__aeabi_ui2d+0x28>
 80022c6:	f000 f821 	bl	800230c <__clzsi2>
 80022ca:	4b0f      	ldr	r3, [pc, #60]	; (8002308 <__aeabi_ui2d+0x48>)
 80022cc:	1a1b      	subs	r3, r3, r0
 80022ce:	280a      	cmp	r0, #10
 80022d0:	dc11      	bgt.n	80022f6 <__aeabi_ui2d+0x36>
 80022d2:	220b      	movs	r2, #11
 80022d4:	0021      	movs	r1, r4
 80022d6:	1a12      	subs	r2, r2, r0
 80022d8:	40d1      	lsrs	r1, r2
 80022da:	3015      	adds	r0, #21
 80022dc:	030a      	lsls	r2, r1, #12
 80022de:	055b      	lsls	r3, r3, #21
 80022e0:	4084      	lsls	r4, r0
 80022e2:	0b12      	lsrs	r2, r2, #12
 80022e4:	0d5b      	lsrs	r3, r3, #21
 80022e6:	e001      	b.n	80022ec <__aeabi_ui2d+0x2c>
 80022e8:	2300      	movs	r3, #0
 80022ea:	2200      	movs	r2, #0
 80022ec:	051b      	lsls	r3, r3, #20
 80022ee:	4313      	orrs	r3, r2
 80022f0:	0020      	movs	r0, r4
 80022f2:	0019      	movs	r1, r3
 80022f4:	bd10      	pop	{r4, pc}
 80022f6:	0022      	movs	r2, r4
 80022f8:	380b      	subs	r0, #11
 80022fa:	4082      	lsls	r2, r0
 80022fc:	055b      	lsls	r3, r3, #21
 80022fe:	0312      	lsls	r2, r2, #12
 8002300:	2400      	movs	r4, #0
 8002302:	0b12      	lsrs	r2, r2, #12
 8002304:	0d5b      	lsrs	r3, r3, #21
 8002306:	e7f1      	b.n	80022ec <__aeabi_ui2d+0x2c>
 8002308:	0000041e 	.word	0x0000041e

0800230c <__clzsi2>:
 800230c:	211c      	movs	r1, #28
 800230e:	2301      	movs	r3, #1
 8002310:	041b      	lsls	r3, r3, #16
 8002312:	4298      	cmp	r0, r3
 8002314:	d301      	bcc.n	800231a <__clzsi2+0xe>
 8002316:	0c00      	lsrs	r0, r0, #16
 8002318:	3910      	subs	r1, #16
 800231a:	0a1b      	lsrs	r3, r3, #8
 800231c:	4298      	cmp	r0, r3
 800231e:	d301      	bcc.n	8002324 <__clzsi2+0x18>
 8002320:	0a00      	lsrs	r0, r0, #8
 8002322:	3908      	subs	r1, #8
 8002324:	091b      	lsrs	r3, r3, #4
 8002326:	4298      	cmp	r0, r3
 8002328:	d301      	bcc.n	800232e <__clzsi2+0x22>
 800232a:	0900      	lsrs	r0, r0, #4
 800232c:	3904      	subs	r1, #4
 800232e:	a202      	add	r2, pc, #8	; (adr r2, 8002338 <__clzsi2+0x2c>)
 8002330:	5c10      	ldrb	r0, [r2, r0]
 8002332:	1840      	adds	r0, r0, r1
 8002334:	4770      	bx	lr
 8002336:	46c0      	nop			; (mov r8, r8)
 8002338:	02020304 	.word	0x02020304
 800233c:	01010101 	.word	0x01010101
	...

08002348 <__clzdi2>:
 8002348:	b510      	push	{r4, lr}
 800234a:	2900      	cmp	r1, #0
 800234c:	d103      	bne.n	8002356 <__clzdi2+0xe>
 800234e:	f7ff ffdd 	bl	800230c <__clzsi2>
 8002352:	3020      	adds	r0, #32
 8002354:	e002      	b.n	800235c <__clzdi2+0x14>
 8002356:	0008      	movs	r0, r1
 8002358:	f7ff ffd8 	bl	800230c <__clzsi2>
 800235c:	bd10      	pop	{r4, pc}
 800235e:	46c0      	nop			; (mov r8, r8)

08002360 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8002360:	b590      	push	{r4, r7, lr}
 8002362:	b091      	sub	sp, #68	; 0x44
 8002364:	af10      	add	r7, sp, #64	; 0x40
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8002366:	f000 fec7 	bl	80030f8 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800236a:	f000 f867 	bl	800243c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800236e:	f000 fa2f 	bl	80027d0 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 8002372:	f000 f991 	bl	8002698 <MX_USART2_UART_Init>
  MX_RTC_Init();
 8002376:	f000 f8ad 	bl	80024d4 <MX_RTC_Init>
  MX_TIM6_Init();
 800237a:	f000 f94f 	bl	800261c <MX_TIM6_Init>
  MX_USART3_UART_Init();
 800237e:	f000 f9d9 	bl	8002734 <MX_USART3_UART_Init>
  /* USER CODE BEGIN 2 */

  // System hello
  HAL_UART_Transmit ( HUART_DBG , (uint8_t*) hello , strlen (hello) , UART_TIMEOUT ) ;
 8002382:	4b29      	ldr	r3, [pc, #164]	; (8002428 <main+0xc8>)
 8002384:	681c      	ldr	r4, [r3, #0]
 8002386:	4b28      	ldr	r3, [pc, #160]	; (8002428 <main+0xc8>)
 8002388:	681b      	ldr	r3, [r3, #0]
 800238a:	0018      	movs	r0, r3
 800238c:	f7fd feba 	bl	8000104 <strlen>
 8002390:	0003      	movs	r3, r0
 8002392:	b29a      	uxth	r2, r3
 8002394:	23fa      	movs	r3, #250	; 0xfa
 8002396:	009b      	lsls	r3, r3, #2
 8002398:	4824      	ldr	r0, [pc, #144]	; (800242c <main+0xcc>)
 800239a:	0021      	movs	r1, r4
 800239c:	f003 fa14 	bl	80057c8 <HAL_UART_Transmit>

  // System Init
  my_tim_init ( HTIM ) ;
 80023a0:	4c23      	ldr	r4, [pc, #140]	; (8002430 <main+0xd0>)
 80023a2:	466b      	mov	r3, sp
 80023a4:	0018      	movs	r0, r3
 80023a6:	0023      	movs	r3, r4
 80023a8:	3310      	adds	r3, #16
 80023aa:	223c      	movs	r2, #60	; 0x3c
 80023ac:	0019      	movs	r1, r3
 80023ae:	f005 ff49 	bl	8008244 <memcpy>
 80023b2:	6820      	ldr	r0, [r4, #0]
 80023b4:	6861      	ldr	r1, [r4, #4]
 80023b6:	68a2      	ldr	r2, [r4, #8]
 80023b8:	68e3      	ldr	r3, [r4, #12]
 80023ba:	f000 fb43 	bl	8002a44 <my_tim_init>

  if ( !is_system_initialized () )
 80023be:	f000 fbf3 	bl	8002ba8 <is_system_initialized>
 80023c2:	0003      	movs	r3, r0
 80023c4:	001a      	movs	r2, r3
 80023c6:	2301      	movs	r3, #1
 80023c8:	4053      	eors	r3, r2
 80023ca:	b2db      	uxtb	r3, r3
 80023cc:	2b00      	cmp	r3, #0
 80023ce:	d017      	beq.n	8002400 <main+0xa0>
	  if ( !my_astro_init ( htim6 ) )
 80023d0:	4c17      	ldr	r4, [pc, #92]	; (8002430 <main+0xd0>)
 80023d2:	466b      	mov	r3, sp
 80023d4:	0018      	movs	r0, r3
 80023d6:	0023      	movs	r3, r4
 80023d8:	3310      	adds	r3, #16
 80023da:	223c      	movs	r2, #60	; 0x3c
 80023dc:	0019      	movs	r1, r3
 80023de:	f005 ff31 	bl	8008244 <memcpy>
 80023e2:	6820      	ldr	r0, [r4, #0]
 80023e4:	6861      	ldr	r1, [r4, #4]
 80023e6:	68a2      	ldr	r2, [r4, #8]
 80023e8:	68e3      	ldr	r3, [r4, #12]
 80023ea:	f000 fb6d 	bl	8002ac8 <my_astro_init>
 80023ee:	0003      	movs	r3, r0
 80023f0:	001a      	movs	r2, r3
 80023f2:	2301      	movs	r3, #1
 80023f4:	4053      	eors	r3, r2
 80023f6:	b2db      	uxtb	r3, r3
 80023f8:	2b00      	cmp	r3, #0
 80023fa:	d001      	beq.n	8002400 <main+0xa0>
		  HAL_NVIC_SystemReset () ;
 80023fc:	f001 f81f 	bl	800343e <HAL_NVIC_SystemReset>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  if ( is_astro_evt_flag ) // W takim układzie nowe przerwanie w trakcie obługi starego nie spowoduje, ze coś pominę
 8002400:	4b0c      	ldr	r3, [pc, #48]	; (8002434 <main+0xd4>)
 8002402:	781b      	ldrb	r3, [r3, #0]
 8002404:	2b00      	cmp	r3, #0
 8002406:	d0fb      	beq.n	8002400 <main+0xa0>
	  {
		  while ( is_evt_pin_high() )
 8002408:	e005      	b.n	8002416 <main+0xb6>
		  {
			  send_debug_logs ( "main.c - running sm: is_evt_pin_high" ) ;
 800240a:	4b0b      	ldr	r3, [pc, #44]	; (8002438 <main+0xd8>)
 800240c:	0018      	movs	r0, r3
 800240e:	f000 fa6d 	bl	80028ec <send_debug_logs>
			  my_astro_read_evt_reg () ;
 8002412:	f005 fcaf 	bl	8007d74 <my_astro_read_evt_reg>
		  while ( is_evt_pin_high() )
 8002416:	f000 fae5 	bl	80029e4 <is_evt_pin_high>
 800241a:	1e03      	subs	r3, r0, #0
 800241c:	d1f5      	bne.n	800240a <main+0xaa>
		  }
	  	  is_astro_evt_flag = false ;
 800241e:	4b05      	ldr	r3, [pc, #20]	; (8002434 <main+0xd4>)
 8002420:	2200      	movs	r2, #0
 8002422:	701a      	strb	r2, [r3, #0]
	  if ( is_astro_evt_flag ) // W takim układzie nowe przerwanie w trakcie obługi starego nie spowoduje, ze coś pominę
 8002424:	e7ec      	b.n	8002400 <main+0xa0>
 8002426:	46c0      	nop			; (mov r8, r8)
 8002428:	20000000 	.word	0x20000000
 800242c:	20000754 	.word	0x20000754
 8002430:	20000708 	.word	0x20000708
 8002434:	20000892 	.word	0x20000892
 8002438:	0800cc20 	.word	0x0800cc20

0800243c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800243c:	b590      	push	{r4, r7, lr}
 800243e:	b095      	sub	sp, #84	; 0x54
 8002440:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8002442:	2414      	movs	r4, #20
 8002444:	193b      	adds	r3, r7, r4
 8002446:	0018      	movs	r0, r3
 8002448:	233c      	movs	r3, #60	; 0x3c
 800244a:	001a      	movs	r2, r3
 800244c:	2100      	movs	r1, #0
 800244e:	f005 fe6d 	bl	800812c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8002452:	1d3b      	adds	r3, r7, #4
 8002454:	0018      	movs	r0, r3
 8002456:	2310      	movs	r3, #16
 8002458:	001a      	movs	r2, r3
 800245a:	2100      	movs	r1, #0
 800245c:	f005 fe66 	bl	800812c <memset>

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1);
 8002460:	2380      	movs	r3, #128	; 0x80
 8002462:	009b      	lsls	r3, r3, #2
 8002464:	0018      	movs	r0, r3
 8002466:	f001 f9d5 	bl	8003814 <HAL_PWREx_ControlVoltageScaling>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_LSI;
 800246a:	193b      	adds	r3, r7, r4
 800246c:	220a      	movs	r2, #10
 800246e:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8002470:	193b      	adds	r3, r7, r4
 8002472:	2280      	movs	r2, #128	; 0x80
 8002474:	0052      	lsls	r2, r2, #1
 8002476:	60da      	str	r2, [r3, #12]
  RCC_OscInitStruct.HSIDiv = RCC_HSI_DIV1;
 8002478:	0021      	movs	r1, r4
 800247a:	187b      	adds	r3, r7, r1
 800247c:	2200      	movs	r2, #0
 800247e:	611a      	str	r2, [r3, #16]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8002480:	187b      	adds	r3, r7, r1
 8002482:	2240      	movs	r2, #64	; 0x40
 8002484:	615a      	str	r2, [r3, #20]
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 8002486:	187b      	adds	r3, r7, r1
 8002488:	2201      	movs	r2, #1
 800248a:	619a      	str	r2, [r3, #24]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 800248c:	187b      	adds	r3, r7, r1
 800248e:	2200      	movs	r2, #0
 8002490:	621a      	str	r2, [r3, #32]
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8002492:	187b      	adds	r3, r7, r1
 8002494:	0018      	movs	r0, r3
 8002496:	f001 fa09 	bl	80038ac <HAL_RCC_OscConfig>
 800249a:	1e03      	subs	r3, r0, #0
 800249c:	d001      	beq.n	80024a2 <SystemClock_Config+0x66>
  {
    Error_Handler();
 800249e:	f000 fbd5 	bl	8002c4c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80024a2:	1d3b      	adds	r3, r7, #4
 80024a4:	2207      	movs	r2, #7
 80024a6:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 80024a8:	1d3b      	adds	r3, r7, #4
 80024aa:	2200      	movs	r2, #0
 80024ac:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80024ae:	1d3b      	adds	r3, r7, #4
 80024b0:	2200      	movs	r2, #0
 80024b2:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80024b4:	1d3b      	adds	r3, r7, #4
 80024b6:	2200      	movs	r2, #0
 80024b8:	60da      	str	r2, [r3, #12]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 80024ba:	1d3b      	adds	r3, r7, #4
 80024bc:	2100      	movs	r1, #0
 80024be:	0018      	movs	r0, r3
 80024c0:	f001 fd54 	bl	8003f6c <HAL_RCC_ClockConfig>
 80024c4:	1e03      	subs	r3, r0, #0
 80024c6:	d001      	beq.n	80024cc <SystemClock_Config+0x90>
  {
    Error_Handler();
 80024c8:	f000 fbc0 	bl	8002c4c <Error_Handler>
  }
}
 80024cc:	46c0      	nop			; (mov r8, r8)
 80024ce:	46bd      	mov	sp, r7
 80024d0:	b015      	add	sp, #84	; 0x54
 80024d2:	bd90      	pop	{r4, r7, pc}

080024d4 <MX_RTC_Init>:
  * @brief RTC Initialization Function
  * @param None
  * @retval None
  */
static void MX_RTC_Init(void)
{
 80024d4:	b580      	push	{r7, lr}
 80024d6:	b090      	sub	sp, #64	; 0x40
 80024d8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN RTC_Init 0 */

  /* USER CODE END RTC_Init 0 */

  RTC_TimeTypeDef sTime = {0};
 80024da:	232c      	movs	r3, #44	; 0x2c
 80024dc:	18fb      	adds	r3, r7, r3
 80024de:	0018      	movs	r0, r3
 80024e0:	2314      	movs	r3, #20
 80024e2:	001a      	movs	r2, r3
 80024e4:	2100      	movs	r1, #0
 80024e6:	f005 fe21 	bl	800812c <memset>
  RTC_DateTypeDef sDate = {0};
 80024ea:	2328      	movs	r3, #40	; 0x28
 80024ec:	18fb      	adds	r3, r7, r3
 80024ee:	2200      	movs	r2, #0
 80024f0:	601a      	str	r2, [r3, #0]
  RTC_AlarmTypeDef sAlarm = {0};
 80024f2:	003b      	movs	r3, r7
 80024f4:	0018      	movs	r0, r3
 80024f6:	2328      	movs	r3, #40	; 0x28
 80024f8:	001a      	movs	r2, r3
 80024fa:	2100      	movs	r1, #0
 80024fc:	f005 fe16 	bl	800812c <memset>

  /* USER CODE END RTC_Init 1 */

  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 8002500:	4b44      	ldr	r3, [pc, #272]	; (8002614 <MX_RTC_Init+0x140>)
 8002502:	4a45      	ldr	r2, [pc, #276]	; (8002618 <MX_RTC_Init+0x144>)
 8002504:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 8002506:	4b43      	ldr	r3, [pc, #268]	; (8002614 <MX_RTC_Init+0x140>)
 8002508:	2200      	movs	r2, #0
 800250a:	609a      	str	r2, [r3, #8]
  hrtc.Init.AsynchPrediv = 127;
 800250c:	4b41      	ldr	r3, [pc, #260]	; (8002614 <MX_RTC_Init+0x140>)
 800250e:	227f      	movs	r2, #127	; 0x7f
 8002510:	60da      	str	r2, [r3, #12]
  hrtc.Init.SynchPrediv = 255;
 8002512:	4b40      	ldr	r3, [pc, #256]	; (8002614 <MX_RTC_Init+0x140>)
 8002514:	22ff      	movs	r2, #255	; 0xff
 8002516:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 8002518:	4b3e      	ldr	r3, [pc, #248]	; (8002614 <MX_RTC_Init+0x140>)
 800251a:	2200      	movs	r2, #0
 800251c:	615a      	str	r2, [r3, #20]
  hrtc.Init.OutPutRemap = RTC_OUTPUT_REMAP_NONE;
 800251e:	4b3d      	ldr	r3, [pc, #244]	; (8002614 <MX_RTC_Init+0x140>)
 8002520:	2200      	movs	r2, #0
 8002522:	619a      	str	r2, [r3, #24]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 8002524:	4b3b      	ldr	r3, [pc, #236]	; (8002614 <MX_RTC_Init+0x140>)
 8002526:	2200      	movs	r2, #0
 8002528:	61da      	str	r2, [r3, #28]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 800252a:	4b3a      	ldr	r3, [pc, #232]	; (8002614 <MX_RTC_Init+0x140>)
 800252c:	2280      	movs	r2, #128	; 0x80
 800252e:	05d2      	lsls	r2, r2, #23
 8002530:	621a      	str	r2, [r3, #32]
  hrtc.Init.OutPutPullUp = RTC_OUTPUT_PULLUP_NONE;
 8002532:	4b38      	ldr	r3, [pc, #224]	; (8002614 <MX_RTC_Init+0x140>)
 8002534:	2200      	movs	r2, #0
 8002536:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 8002538:	4b36      	ldr	r3, [pc, #216]	; (8002614 <MX_RTC_Init+0x140>)
 800253a:	0018      	movs	r0, r3
 800253c:	f002 f8fc 	bl	8004738 <HAL_RTC_Init>
 8002540:	1e03      	subs	r3, r0, #0
 8002542:	d001      	beq.n	8002548 <MX_RTC_Init+0x74>
  {
    Error_Handler();
 8002544:	f000 fb82 	bl	8002c4c <Error_Handler>

  /* USER CODE END Check_RTC_BKUP */

  /** Initialize RTC and set the Time and Date
  */
  sTime.Hours = 0;
 8002548:	212c      	movs	r1, #44	; 0x2c
 800254a:	187b      	adds	r3, r7, r1
 800254c:	2200      	movs	r2, #0
 800254e:	701a      	strb	r2, [r3, #0]
  sTime.Minutes = 0;
 8002550:	187b      	adds	r3, r7, r1
 8002552:	2200      	movs	r2, #0
 8002554:	705a      	strb	r2, [r3, #1]
  sTime.Seconds = 0;
 8002556:	187b      	adds	r3, r7, r1
 8002558:	2200      	movs	r2, #0
 800255a:	709a      	strb	r2, [r3, #2]
  sTime.SubSeconds = 0;
 800255c:	187b      	adds	r3, r7, r1
 800255e:	2200      	movs	r2, #0
 8002560:	605a      	str	r2, [r3, #4]
  sTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 8002562:	187b      	adds	r3, r7, r1
 8002564:	2200      	movs	r2, #0
 8002566:	60da      	str	r2, [r3, #12]
  sTime.StoreOperation = RTC_STOREOPERATION_RESET;
 8002568:	187b      	adds	r3, r7, r1
 800256a:	2200      	movs	r2, #0
 800256c:	611a      	str	r2, [r3, #16]
  if (HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BIN) != HAL_OK)
 800256e:	1879      	adds	r1, r7, r1
 8002570:	4b28      	ldr	r3, [pc, #160]	; (8002614 <MX_RTC_Init+0x140>)
 8002572:	2200      	movs	r2, #0
 8002574:	0018      	movs	r0, r3
 8002576:	f002 f981 	bl	800487c <HAL_RTC_SetTime>
 800257a:	1e03      	subs	r3, r0, #0
 800257c:	d001      	beq.n	8002582 <MX_RTC_Init+0xae>
  {
    Error_Handler();
 800257e:	f000 fb65 	bl	8002c4c <Error_Handler>
  }
  sDate.WeekDay = RTC_WEEKDAY_SATURDAY;
 8002582:	2128      	movs	r1, #40	; 0x28
 8002584:	187b      	adds	r3, r7, r1
 8002586:	2206      	movs	r2, #6
 8002588:	701a      	strb	r2, [r3, #0]
  sDate.Month = RTC_MONTH_JANUARY;
 800258a:	187b      	adds	r3, r7, r1
 800258c:	2201      	movs	r2, #1
 800258e:	705a      	strb	r2, [r3, #1]
  sDate.Date = 1;
 8002590:	187b      	adds	r3, r7, r1
 8002592:	2201      	movs	r2, #1
 8002594:	709a      	strb	r2, [r3, #2]
  sDate.Year = 0;
 8002596:	187b      	adds	r3, r7, r1
 8002598:	2200      	movs	r2, #0
 800259a:	70da      	strb	r2, [r3, #3]

  if (HAL_RTC_SetDate(&hrtc, &sDate, RTC_FORMAT_BIN) != HAL_OK)
 800259c:	1879      	adds	r1, r7, r1
 800259e:	4b1d      	ldr	r3, [pc, #116]	; (8002614 <MX_RTC_Init+0x140>)
 80025a0:	2200      	movs	r2, #0
 80025a2:	0018      	movs	r0, r3
 80025a4:	f002 fa6e 	bl	8004a84 <HAL_RTC_SetDate>
 80025a8:	1e03      	subs	r3, r0, #0
 80025aa:	d001      	beq.n	80025b0 <MX_RTC_Init+0xdc>
  {
    Error_Handler();
 80025ac:	f000 fb4e 	bl	8002c4c <Error_Handler>
  }

  /** Enable the Alarm A
  */
  sAlarm.AlarmTime.Hours = 0;
 80025b0:	003b      	movs	r3, r7
 80025b2:	2200      	movs	r2, #0
 80025b4:	701a      	strb	r2, [r3, #0]
  sAlarm.AlarmTime.Minutes = 0;
 80025b6:	003b      	movs	r3, r7
 80025b8:	2200      	movs	r2, #0
 80025ba:	705a      	strb	r2, [r3, #1]
  sAlarm.AlarmTime.Seconds = 0;
 80025bc:	003b      	movs	r3, r7
 80025be:	2200      	movs	r2, #0
 80025c0:	709a      	strb	r2, [r3, #2]
  sAlarm.AlarmTime.SubSeconds = 0;
 80025c2:	003b      	movs	r3, r7
 80025c4:	2200      	movs	r2, #0
 80025c6:	605a      	str	r2, [r3, #4]
  sAlarm.AlarmTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 80025c8:	003b      	movs	r3, r7
 80025ca:	2200      	movs	r2, #0
 80025cc:	60da      	str	r2, [r3, #12]
  sAlarm.AlarmTime.StoreOperation = RTC_STOREOPERATION_RESET;
 80025ce:	003b      	movs	r3, r7
 80025d0:	2200      	movs	r2, #0
 80025d2:	611a      	str	r2, [r3, #16]
  sAlarm.AlarmMask = RTC_ALARMMASK_NONE;
 80025d4:	003b      	movs	r3, r7
 80025d6:	2200      	movs	r2, #0
 80025d8:	615a      	str	r2, [r3, #20]
  sAlarm.AlarmSubSecondMask = RTC_ALARMSUBSECONDMASK_ALL;
 80025da:	003b      	movs	r3, r7
 80025dc:	2200      	movs	r2, #0
 80025de:	619a      	str	r2, [r3, #24]
  sAlarm.AlarmDateWeekDaySel = RTC_ALARMDATEWEEKDAYSEL_DATE;
 80025e0:	003b      	movs	r3, r7
 80025e2:	2200      	movs	r2, #0
 80025e4:	61da      	str	r2, [r3, #28]
  sAlarm.AlarmDateWeekDay = 1;
 80025e6:	003b      	movs	r3, r7
 80025e8:	2220      	movs	r2, #32
 80025ea:	2101      	movs	r1, #1
 80025ec:	5499      	strb	r1, [r3, r2]
  sAlarm.Alarm = RTC_ALARM_A;
 80025ee:	003b      	movs	r3, r7
 80025f0:	2280      	movs	r2, #128	; 0x80
 80025f2:	0052      	lsls	r2, r2, #1
 80025f4:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_RTC_SetAlarm(&hrtc, &sAlarm, RTC_FORMAT_BIN) != HAL_OK)
 80025f6:	0039      	movs	r1, r7
 80025f8:	4b06      	ldr	r3, [pc, #24]	; (8002614 <MX_RTC_Init+0x140>)
 80025fa:	2200      	movs	r2, #0
 80025fc:	0018      	movs	r0, r3
 80025fe:	f002 fb21 	bl	8004c44 <HAL_RTC_SetAlarm>
 8002602:	1e03      	subs	r3, r0, #0
 8002604:	d001      	beq.n	800260a <MX_RTC_Init+0x136>
  {
    Error_Handler();
 8002606:	f000 fb21 	bl	8002c4c <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 800260a:	46c0      	nop			; (mov r8, r8)
 800260c:	46bd      	mov	sp, r7
 800260e:	b010      	add	sp, #64	; 0x40
 8002610:	bd80      	pop	{r7, pc}
 8002612:	46c0      	nop			; (mov r8, r8)
 8002614:	200006dc 	.word	0x200006dc
 8002618:	40002800 	.word	0x40002800

0800261c <MX_TIM6_Init>:
  * @brief TIM6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM6_Init(void)
{
 800261c:	b580      	push	{r7, lr}
 800261e:	b084      	sub	sp, #16
 8002620:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM6_Init 0 */

  /* USER CODE END TIM6_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002622:	1d3b      	adds	r3, r7, #4
 8002624:	0018      	movs	r0, r3
 8002626:	230c      	movs	r3, #12
 8002628:	001a      	movs	r2, r3
 800262a:	2100      	movs	r1, #0
 800262c:	f005 fd7e 	bl	800812c <memset>

  /* USER CODE BEGIN TIM6_Init 1 */

  /* USER CODE END TIM6_Init 1 */
  htim6.Instance = TIM6;
 8002630:	4b15      	ldr	r3, [pc, #84]	; (8002688 <MX_TIM6_Init+0x6c>)
 8002632:	4a16      	ldr	r2, [pc, #88]	; (800268c <MX_TIM6_Init+0x70>)
 8002634:	601a      	str	r2, [r3, #0]
  htim6.Init.Prescaler = 16000-1;
 8002636:	4b14      	ldr	r3, [pc, #80]	; (8002688 <MX_TIM6_Init+0x6c>)
 8002638:	4a15      	ldr	r2, [pc, #84]	; (8002690 <MX_TIM6_Init+0x74>)
 800263a:	605a      	str	r2, [r3, #4]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 800263c:	4b12      	ldr	r3, [pc, #72]	; (8002688 <MX_TIM6_Init+0x6c>)
 800263e:	2200      	movs	r2, #0
 8002640:	609a      	str	r2, [r3, #8]
  htim6.Init.Period = 1000-1;
 8002642:	4b11      	ldr	r3, [pc, #68]	; (8002688 <MX_TIM6_Init+0x6c>)
 8002644:	4a13      	ldr	r2, [pc, #76]	; (8002694 <MX_TIM6_Init+0x78>)
 8002646:	60da      	str	r2, [r3, #12]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002648:	4b0f      	ldr	r3, [pc, #60]	; (8002688 <MX_TIM6_Init+0x6c>)
 800264a:	2200      	movs	r2, #0
 800264c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 800264e:	4b0e      	ldr	r3, [pc, #56]	; (8002688 <MX_TIM6_Init+0x6c>)
 8002650:	0018      	movs	r0, r3
 8002652:	f002 fd10 	bl	8005076 <HAL_TIM_Base_Init>
 8002656:	1e03      	subs	r3, r0, #0
 8002658:	d001      	beq.n	800265e <MX_TIM6_Init+0x42>
  {
    Error_Handler();
 800265a:	f000 faf7 	bl	8002c4c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800265e:	1d3b      	adds	r3, r7, #4
 8002660:	2200      	movs	r2, #0
 8002662:	601a      	str	r2, [r3, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002664:	1d3b      	adds	r3, r7, #4
 8002666:	2200      	movs	r2, #0
 8002668:	609a      	str	r2, [r3, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 800266a:	1d3a      	adds	r2, r7, #4
 800266c:	4b06      	ldr	r3, [pc, #24]	; (8002688 <MX_TIM6_Init+0x6c>)
 800266e:	0011      	movs	r1, r2
 8002670:	0018      	movs	r0, r3
 8002672:	f002 ffc5 	bl	8005600 <HAL_TIMEx_MasterConfigSynchronization>
 8002676:	1e03      	subs	r3, r0, #0
 8002678:	d001      	beq.n	800267e <MX_TIM6_Init+0x62>
  {
    Error_Handler();
 800267a:	f000 fae7 	bl	8002c4c <Error_Handler>
  }
  /* USER CODE BEGIN TIM6_Init 2 */

  /* USER CODE END TIM6_Init 2 */

}
 800267e:	46c0      	nop			; (mov r8, r8)
 8002680:	46bd      	mov	sp, r7
 8002682:	b004      	add	sp, #16
 8002684:	bd80      	pop	{r7, pc}
 8002686:	46c0      	nop			; (mov r8, r8)
 8002688:	20000708 	.word	0x20000708
 800268c:	40001000 	.word	0x40001000
 8002690:	00003e7f 	.word	0x00003e7f
 8002694:	000003e7 	.word	0x000003e7

08002698 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8002698:	b580      	push	{r7, lr}
 800269a:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 800269c:	4b23      	ldr	r3, [pc, #140]	; (800272c <MX_USART2_UART_Init+0x94>)
 800269e:	4a24      	ldr	r2, [pc, #144]	; (8002730 <MX_USART2_UART_Init+0x98>)
 80026a0:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 80026a2:	4b22      	ldr	r3, [pc, #136]	; (800272c <MX_USART2_UART_Init+0x94>)
 80026a4:	22e1      	movs	r2, #225	; 0xe1
 80026a6:	0252      	lsls	r2, r2, #9
 80026a8:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80026aa:	4b20      	ldr	r3, [pc, #128]	; (800272c <MX_USART2_UART_Init+0x94>)
 80026ac:	2200      	movs	r2, #0
 80026ae:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80026b0:	4b1e      	ldr	r3, [pc, #120]	; (800272c <MX_USART2_UART_Init+0x94>)
 80026b2:	2200      	movs	r2, #0
 80026b4:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80026b6:	4b1d      	ldr	r3, [pc, #116]	; (800272c <MX_USART2_UART_Init+0x94>)
 80026b8:	2200      	movs	r2, #0
 80026ba:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80026bc:	4b1b      	ldr	r3, [pc, #108]	; (800272c <MX_USART2_UART_Init+0x94>)
 80026be:	220c      	movs	r2, #12
 80026c0:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80026c2:	4b1a      	ldr	r3, [pc, #104]	; (800272c <MX_USART2_UART_Init+0x94>)
 80026c4:	2200      	movs	r2, #0
 80026c6:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80026c8:	4b18      	ldr	r3, [pc, #96]	; (800272c <MX_USART2_UART_Init+0x94>)
 80026ca:	2200      	movs	r2, #0
 80026cc:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80026ce:	4b17      	ldr	r3, [pc, #92]	; (800272c <MX_USART2_UART_Init+0x94>)
 80026d0:	2200      	movs	r2, #0
 80026d2:	621a      	str	r2, [r3, #32]
  huart2.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 80026d4:	4b15      	ldr	r3, [pc, #84]	; (800272c <MX_USART2_UART_Init+0x94>)
 80026d6:	2200      	movs	r2, #0
 80026d8:	625a      	str	r2, [r3, #36]	; 0x24
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80026da:	4b14      	ldr	r3, [pc, #80]	; (800272c <MX_USART2_UART_Init+0x94>)
 80026dc:	2200      	movs	r2, #0
 80026de:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80026e0:	4b12      	ldr	r3, [pc, #72]	; (800272c <MX_USART2_UART_Init+0x94>)
 80026e2:	0018      	movs	r0, r3
 80026e4:	f003 f81a 	bl	800571c <HAL_UART_Init>
 80026e8:	1e03      	subs	r3, r0, #0
 80026ea:	d001      	beq.n	80026f0 <MX_USART2_UART_Init+0x58>
  {
    Error_Handler();
 80026ec:	f000 faae 	bl	8002c4c <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart2, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 80026f0:	4b0e      	ldr	r3, [pc, #56]	; (800272c <MX_USART2_UART_Init+0x94>)
 80026f2:	2100      	movs	r1, #0
 80026f4:	0018      	movs	r0, r3
 80026f6:	f003 ff3f 	bl	8006578 <HAL_UARTEx_SetTxFifoThreshold>
 80026fa:	1e03      	subs	r3, r0, #0
 80026fc:	d001      	beq.n	8002702 <MX_USART2_UART_Init+0x6a>
  {
    Error_Handler();
 80026fe:	f000 faa5 	bl	8002c4c <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart2, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8002702:	4b0a      	ldr	r3, [pc, #40]	; (800272c <MX_USART2_UART_Init+0x94>)
 8002704:	2100      	movs	r1, #0
 8002706:	0018      	movs	r0, r3
 8002708:	f003 ff76 	bl	80065f8 <HAL_UARTEx_SetRxFifoThreshold>
 800270c:	1e03      	subs	r3, r0, #0
 800270e:	d001      	beq.n	8002714 <MX_USART2_UART_Init+0x7c>
  {
    Error_Handler();
 8002710:	f000 fa9c 	bl	8002c4c <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart2) != HAL_OK)
 8002714:	4b05      	ldr	r3, [pc, #20]	; (800272c <MX_USART2_UART_Init+0x94>)
 8002716:	0018      	movs	r0, r3
 8002718:	f003 fef4 	bl	8006504 <HAL_UARTEx_DisableFifoMode>
 800271c:	1e03      	subs	r3, r0, #0
 800271e:	d001      	beq.n	8002724 <MX_USART2_UART_Init+0x8c>
  {
    Error_Handler();
 8002720:	f000 fa94 	bl	8002c4c <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8002724:	46c0      	nop			; (mov r8, r8)
 8002726:	46bd      	mov	sp, r7
 8002728:	bd80      	pop	{r7, pc}
 800272a:	46c0      	nop			; (mov r8, r8)
 800272c:	20000754 	.word	0x20000754
 8002730:	40004400 	.word	0x40004400

08002734 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8002734:	b580      	push	{r7, lr}
 8002736:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8002738:	4b23      	ldr	r3, [pc, #140]	; (80027c8 <MX_USART3_UART_Init+0x94>)
 800273a:	4a24      	ldr	r2, [pc, #144]	; (80027cc <MX_USART3_UART_Init+0x98>)
 800273c:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 9600;
 800273e:	4b22      	ldr	r3, [pc, #136]	; (80027c8 <MX_USART3_UART_Init+0x94>)
 8002740:	2296      	movs	r2, #150	; 0x96
 8002742:	0192      	lsls	r2, r2, #6
 8002744:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8002746:	4b20      	ldr	r3, [pc, #128]	; (80027c8 <MX_USART3_UART_Init+0x94>)
 8002748:	2200      	movs	r2, #0
 800274a:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 800274c:	4b1e      	ldr	r3, [pc, #120]	; (80027c8 <MX_USART3_UART_Init+0x94>)
 800274e:	2200      	movs	r2, #0
 8002750:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8002752:	4b1d      	ldr	r3, [pc, #116]	; (80027c8 <MX_USART3_UART_Init+0x94>)
 8002754:	2200      	movs	r2, #0
 8002756:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8002758:	4b1b      	ldr	r3, [pc, #108]	; (80027c8 <MX_USART3_UART_Init+0x94>)
 800275a:	220c      	movs	r2, #12
 800275c:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800275e:	4b1a      	ldr	r3, [pc, #104]	; (80027c8 <MX_USART3_UART_Init+0x94>)
 8002760:	2200      	movs	r2, #0
 8002762:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8002764:	4b18      	ldr	r3, [pc, #96]	; (80027c8 <MX_USART3_UART_Init+0x94>)
 8002766:	2200      	movs	r2, #0
 8002768:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800276a:	4b17      	ldr	r3, [pc, #92]	; (80027c8 <MX_USART3_UART_Init+0x94>)
 800276c:	2200      	movs	r2, #0
 800276e:	621a      	str	r2, [r3, #32]
  huart3.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8002770:	4b15      	ldr	r3, [pc, #84]	; (80027c8 <MX_USART3_UART_Init+0x94>)
 8002772:	2200      	movs	r2, #0
 8002774:	625a      	str	r2, [r3, #36]	; 0x24
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8002776:	4b14      	ldr	r3, [pc, #80]	; (80027c8 <MX_USART3_UART_Init+0x94>)
 8002778:	2200      	movs	r2, #0
 800277a:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart3) != HAL_OK)
 800277c:	4b12      	ldr	r3, [pc, #72]	; (80027c8 <MX_USART3_UART_Init+0x94>)
 800277e:	0018      	movs	r0, r3
 8002780:	f002 ffcc 	bl	800571c <HAL_UART_Init>
 8002784:	1e03      	subs	r3, r0, #0
 8002786:	d001      	beq.n	800278c <MX_USART3_UART_Init+0x58>
  {
    Error_Handler();
 8002788:	f000 fa60 	bl	8002c4c <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart3, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 800278c:	4b0e      	ldr	r3, [pc, #56]	; (80027c8 <MX_USART3_UART_Init+0x94>)
 800278e:	2100      	movs	r1, #0
 8002790:	0018      	movs	r0, r3
 8002792:	f003 fef1 	bl	8006578 <HAL_UARTEx_SetTxFifoThreshold>
 8002796:	1e03      	subs	r3, r0, #0
 8002798:	d001      	beq.n	800279e <MX_USART3_UART_Init+0x6a>
  {
    Error_Handler();
 800279a:	f000 fa57 	bl	8002c4c <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart3, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 800279e:	4b0a      	ldr	r3, [pc, #40]	; (80027c8 <MX_USART3_UART_Init+0x94>)
 80027a0:	2100      	movs	r1, #0
 80027a2:	0018      	movs	r0, r3
 80027a4:	f003 ff28 	bl	80065f8 <HAL_UARTEx_SetRxFifoThreshold>
 80027a8:	1e03      	subs	r3, r0, #0
 80027aa:	d001      	beq.n	80027b0 <MX_USART3_UART_Init+0x7c>
  {
    Error_Handler();
 80027ac:	f000 fa4e 	bl	8002c4c <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart3) != HAL_OK)
 80027b0:	4b05      	ldr	r3, [pc, #20]	; (80027c8 <MX_USART3_UART_Init+0x94>)
 80027b2:	0018      	movs	r0, r3
 80027b4:	f003 fea6 	bl	8006504 <HAL_UARTEx_DisableFifoMode>
 80027b8:	1e03      	subs	r3, r0, #0
 80027ba:	d001      	beq.n	80027c0 <MX_USART3_UART_Init+0x8c>
  {
    Error_Handler();
 80027bc:	f000 fa46 	bl	8002c4c <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 80027c0:	46c0      	nop			; (mov r8, r8)
 80027c2:	46bd      	mov	sp, r7
 80027c4:	bd80      	pop	{r7, pc}
 80027c6:	46c0      	nop			; (mov r8, r8)
 80027c8:	200007e8 	.word	0x200007e8
 80027cc:	40004800 	.word	0x40004800

080027d0 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80027d0:	b590      	push	{r4, r7, lr}
 80027d2:	b08b      	sub	sp, #44	; 0x2c
 80027d4:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80027d6:	2414      	movs	r4, #20
 80027d8:	193b      	adds	r3, r7, r4
 80027da:	0018      	movs	r0, r3
 80027dc:	2314      	movs	r3, #20
 80027de:	001a      	movs	r2, r3
 80027e0:	2100      	movs	r1, #0
 80027e2:	f005 fca3 	bl	800812c <memset>
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80027e6:	4b3f      	ldr	r3, [pc, #252]	; (80028e4 <MX_GPIO_Init+0x114>)
 80027e8:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80027ea:	4b3e      	ldr	r3, [pc, #248]	; (80028e4 <MX_GPIO_Init+0x114>)
 80027ec:	2104      	movs	r1, #4
 80027ee:	430a      	orrs	r2, r1
 80027f0:	635a      	str	r2, [r3, #52]	; 0x34
 80027f2:	4b3c      	ldr	r3, [pc, #240]	; (80028e4 <MX_GPIO_Init+0x114>)
 80027f4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80027f6:	2204      	movs	r2, #4
 80027f8:	4013      	ands	r3, r2
 80027fa:	613b      	str	r3, [r7, #16]
 80027fc:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 80027fe:	4b39      	ldr	r3, [pc, #228]	; (80028e4 <MX_GPIO_Init+0x114>)
 8002800:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002802:	4b38      	ldr	r3, [pc, #224]	; (80028e4 <MX_GPIO_Init+0x114>)
 8002804:	2120      	movs	r1, #32
 8002806:	430a      	orrs	r2, r1
 8002808:	635a      	str	r2, [r3, #52]	; 0x34
 800280a:	4b36      	ldr	r3, [pc, #216]	; (80028e4 <MX_GPIO_Init+0x114>)
 800280c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800280e:	2220      	movs	r2, #32
 8002810:	4013      	ands	r3, r2
 8002812:	60fb      	str	r3, [r7, #12]
 8002814:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8002816:	4b33      	ldr	r3, [pc, #204]	; (80028e4 <MX_GPIO_Init+0x114>)
 8002818:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800281a:	4b32      	ldr	r3, [pc, #200]	; (80028e4 <MX_GPIO_Init+0x114>)
 800281c:	2101      	movs	r1, #1
 800281e:	430a      	orrs	r2, r1
 8002820:	635a      	str	r2, [r3, #52]	; 0x34
 8002822:	4b30      	ldr	r3, [pc, #192]	; (80028e4 <MX_GPIO_Init+0x114>)
 8002824:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002826:	2201      	movs	r2, #1
 8002828:	4013      	ands	r3, r2
 800282a:	60bb      	str	r3, [r7, #8]
 800282c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800282e:	4b2d      	ldr	r3, [pc, #180]	; (80028e4 <MX_GPIO_Init+0x114>)
 8002830:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002832:	4b2c      	ldr	r3, [pc, #176]	; (80028e4 <MX_GPIO_Init+0x114>)
 8002834:	2102      	movs	r1, #2
 8002836:	430a      	orrs	r2, r1
 8002838:	635a      	str	r2, [r3, #52]	; 0x34
 800283a:	4b2a      	ldr	r3, [pc, #168]	; (80028e4 <MX_GPIO_Init+0x114>)
 800283c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800283e:	2202      	movs	r2, #2
 8002840:	4013      	ands	r3, r2
 8002842:	607b      	str	r3, [r7, #4]
 8002844:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LDG_GPIO_Port, LDG_Pin, GPIO_PIN_RESET);
 8002846:	23a0      	movs	r3, #160	; 0xa0
 8002848:	05db      	lsls	r3, r3, #23
 800284a:	2200      	movs	r2, #0
 800284c:	2120      	movs	r1, #32
 800284e:	0018      	movs	r0, r3
 8002850:	f000 ff8f 	bl	8003772 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, ASTRO_WKUP_Pin|ASTRO_RST_Pin, GPIO_PIN_RESET);
 8002854:	4b24      	ldr	r3, [pc, #144]	; (80028e8 <MX_GPIO_Init+0x118>)
 8002856:	2200      	movs	r2, #0
 8002858:	2103      	movs	r1, #3
 800285a:	0018      	movs	r0, r3
 800285c:	f000 ff89 	bl	8003772 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : LDG_Pin */
  GPIO_InitStruct.Pin = LDG_Pin;
 8002860:	193b      	adds	r3, r7, r4
 8002862:	2220      	movs	r2, #32
 8002864:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002866:	193b      	adds	r3, r7, r4
 8002868:	2201      	movs	r2, #1
 800286a:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800286c:	193b      	adds	r3, r7, r4
 800286e:	2200      	movs	r2, #0
 8002870:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8002872:	193b      	adds	r3, r7, r4
 8002874:	2202      	movs	r2, #2
 8002876:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(LDG_GPIO_Port, &GPIO_InitStruct);
 8002878:	193a      	adds	r2, r7, r4
 800287a:	23a0      	movs	r3, #160	; 0xa0
 800287c:	05db      	lsls	r3, r3, #23
 800287e:	0011      	movs	r1, r2
 8002880:	0018      	movs	r0, r3
 8002882:	f000 fded 	bl	8003460 <HAL_GPIO_Init>

  /*Configure GPIO pins : ASTRO_WKUP_Pin ASTRO_RST_Pin */
  GPIO_InitStruct.Pin = ASTRO_WKUP_Pin|ASTRO_RST_Pin;
 8002886:	193b      	adds	r3, r7, r4
 8002888:	2203      	movs	r2, #3
 800288a:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800288c:	193b      	adds	r3, r7, r4
 800288e:	2201      	movs	r2, #1
 8002890:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002892:	193b      	adds	r3, r7, r4
 8002894:	2200      	movs	r2, #0
 8002896:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002898:	193b      	adds	r3, r7, r4
 800289a:	2200      	movs	r2, #0
 800289c:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800289e:	193b      	adds	r3, r7, r4
 80028a0:	4a11      	ldr	r2, [pc, #68]	; (80028e8 <MX_GPIO_Init+0x118>)
 80028a2:	0019      	movs	r1, r3
 80028a4:	0010      	movs	r0, r2
 80028a6:	f000 fddb 	bl	8003460 <HAL_GPIO_Init>

  /*Configure GPIO pin : ASTRO_EVT_IT2_Pin */
  GPIO_InitStruct.Pin = ASTRO_EVT_IT2_Pin;
 80028aa:	0021      	movs	r1, r4
 80028ac:	187b      	adds	r3, r7, r1
 80028ae:	2204      	movs	r2, #4
 80028b0:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80028b2:	187b      	adds	r3, r7, r1
 80028b4:	2288      	movs	r2, #136	; 0x88
 80028b6:	0352      	lsls	r2, r2, #13
 80028b8:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80028ba:	187b      	adds	r3, r7, r1
 80028bc:	2200      	movs	r2, #0
 80028be:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(ASTRO_EVT_IT2_GPIO_Port, &GPIO_InitStruct);
 80028c0:	187b      	adds	r3, r7, r1
 80028c2:	4a09      	ldr	r2, [pc, #36]	; (80028e8 <MX_GPIO_Init+0x118>)
 80028c4:	0019      	movs	r1, r3
 80028c6:	0010      	movs	r0, r2
 80028c8:	f000 fdca 	bl	8003460 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI2_3_IRQn, 3, 0);
 80028cc:	2200      	movs	r2, #0
 80028ce:	2103      	movs	r1, #3
 80028d0:	2006      	movs	r0, #6
 80028d2:	f000 fd8f 	bl	80033f4 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI2_3_IRQn);
 80028d6:	2006      	movs	r0, #6
 80028d8:	f000 fda1 	bl	800341e <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80028dc:	46c0      	nop			; (mov r8, r8)
 80028de:	46bd      	mov	sp, r7
 80028e0:	b00b      	add	sp, #44	; 0x2c
 80028e2:	bd90      	pop	{r4, r7, pc}
 80028e4:	40021000 	.word	0x40021000
 80028e8:	50000400 	.word	0x50000400

080028ec <send_debug_logs>:

/* USER CODE BEGIN 4 */
void send_debug_logs ( char* p_tx_buffer )
{
 80028ec:	b580      	push	{r7, lr}
 80028ee:	b084      	sub	sp, #16
 80028f0:	af00      	add	r7, sp, #0
 80028f2:	6078      	str	r0, [r7, #4]
    uint32_t length = strlen ( p_tx_buffer ) ;
 80028f4:	687b      	ldr	r3, [r7, #4]
 80028f6:	0018      	movs	r0, r3
 80028f8:	f7fd fc04 	bl	8000104 <strlen>
 80028fc:	0003      	movs	r3, r0
 80028fe:	60fb      	str	r3, [r7, #12]

    if ( length > UART_TX_MAX_BUFF_SIZE )
 8002900:	68fb      	ldr	r3, [r7, #12]
 8002902:	2bfa      	cmp	r3, #250	; 0xfa
 8002904:	d908      	bls.n	8002918 <send_debug_logs+0x2c>
    {
        HAL_UART_Transmit ( HUART_DBG , ( uint8_t* ) "[ERROR] UART buffer reached max length.\n" , 42 , 1000 ) ;
 8002906:	23fa      	movs	r3, #250	; 0xfa
 8002908:	009b      	lsls	r3, r3, #2
 800290a:	490d      	ldr	r1, [pc, #52]	; (8002940 <send_debug_logs+0x54>)
 800290c:	480d      	ldr	r0, [pc, #52]	; (8002944 <send_debug_logs+0x58>)
 800290e:	222a      	movs	r2, #42	; 0x2a
 8002910:	f002 ff5a 	bl	80057c8 <HAL_UART_Transmit>
        length = UART_TX_MAX_BUFF_SIZE;
 8002914:	23fa      	movs	r3, #250	; 0xfa
 8002916:	60fb      	str	r3, [r7, #12]
    }

    HAL_UART_Transmit ( HUART_DBG , ( uint8_t* ) p_tx_buffer , length , 1000 ) ;
 8002918:	68fb      	ldr	r3, [r7, #12]
 800291a:	b29a      	uxth	r2, r3
 800291c:	23fa      	movs	r3, #250	; 0xfa
 800291e:	009b      	lsls	r3, r3, #2
 8002920:	6879      	ldr	r1, [r7, #4]
 8002922:	4808      	ldr	r0, [pc, #32]	; (8002944 <send_debug_logs+0x58>)
 8002924:	f002 ff50 	bl	80057c8 <HAL_UART_Transmit>
    HAL_UART_Transmit ( HUART_DBG , ( uint8_t* ) "\n" , 1 , 1000 ) ;
 8002928:	23fa      	movs	r3, #250	; 0xfa
 800292a:	009b      	lsls	r3, r3, #2
 800292c:	4906      	ldr	r1, [pc, #24]	; (8002948 <send_debug_logs+0x5c>)
 800292e:	4805      	ldr	r0, [pc, #20]	; (8002944 <send_debug_logs+0x58>)
 8002930:	2201      	movs	r2, #1
 8002932:	f002 ff49 	bl	80057c8 <HAL_UART_Transmit>
}
 8002936:	46c0      	nop			; (mov r8, r8)
 8002938:	46bd      	mov	sp, r7
 800293a:	b004      	add	sp, #16
 800293c:	bd80      	pop	{r7, pc}
 800293e:	46c0      	nop			; (mov r8, r8)
 8002940:	0800cc48 	.word	0x0800cc48
 8002944:	20000754 	.word	0x20000754
 8002948:	0800cc74 	.word	0x0800cc74

0800294c <reset_astronode>:
void reset_astronode ( void )
{
 800294c:	b580      	push	{r7, lr}
 800294e:	af00      	add	r7, sp, #0
    HAL_GPIO_WritePin ( ASTRO_RST_GPIO_Port , ASTRO_RST_Pin , GPIO_PIN_SET ) ;
 8002950:	4b0a      	ldr	r3, [pc, #40]	; (800297c <reset_astronode+0x30>)
 8002952:	2201      	movs	r2, #1
 8002954:	2102      	movs	r1, #2
 8002956:	0018      	movs	r0, r3
 8002958:	f000 ff0b 	bl	8003772 <HAL_GPIO_WritePin>
    HAL_Delay ( 1 ) ;
 800295c:	2001      	movs	r0, #1
 800295e:	f000 fc51 	bl	8003204 <HAL_Delay>
    HAL_GPIO_WritePin ( ASTRO_RST_GPIO_Port , ASTRO_RST_Pin , GPIO_PIN_RESET ) ;
 8002962:	4b06      	ldr	r3, [pc, #24]	; (800297c <reset_astronode+0x30>)
 8002964:	2200      	movs	r2, #0
 8002966:	2102      	movs	r1, #2
 8002968:	0018      	movs	r0, r3
 800296a:	f000 ff02 	bl	8003772 <HAL_GPIO_WritePin>
    HAL_Delay ( 250 ) ;
 800296e:	20fa      	movs	r0, #250	; 0xfa
 8002970:	f000 fc48 	bl	8003204 <HAL_Delay>
}
 8002974:	46c0      	nop			; (mov r8, r8)
 8002976:	46bd      	mov	sp, r7
 8002978:	bd80      	pop	{r7, pc}
 800297a:	46c0      	nop			; (mov r8, r8)
 800297c:	50000400 	.word	0x50000400

08002980 <send_astronode_request>:
void send_astronode_request ( uint8_t* p_tx_buffer , uint32_t length )
{
 8002980:	b580      	push	{r7, lr}
 8002982:	b082      	sub	sp, #8
 8002984:	af00      	add	r7, sp, #0
 8002986:	6078      	str	r0, [r7, #4]
 8002988:	6039      	str	r1, [r7, #0]
    send_debug_logs ( "Message sent to the Astronode --> " ) ;
 800298a:	4b0a      	ldr	r3, [pc, #40]	; (80029b4 <send_astronode_request+0x34>)
 800298c:	0018      	movs	r0, r3
 800298e:	f7ff ffad 	bl	80028ec <send_debug_logs>
    send_debug_logs ( ( char* ) p_tx_buffer ) ;
 8002992:	687b      	ldr	r3, [r7, #4]
 8002994:	0018      	movs	r0, r3
 8002996:	f7ff ffa9 	bl	80028ec <send_debug_logs>

    HAL_UART_Transmit ( HUART_ASTRO , p_tx_buffer , length , 1000 ) ;
 800299a:	683b      	ldr	r3, [r7, #0]
 800299c:	b29a      	uxth	r2, r3
 800299e:	23fa      	movs	r3, #250	; 0xfa
 80029a0:	009b      	lsls	r3, r3, #2
 80029a2:	6879      	ldr	r1, [r7, #4]
 80029a4:	4804      	ldr	r0, [pc, #16]	; (80029b8 <send_astronode_request+0x38>)
 80029a6:	f002 ff0f 	bl	80057c8 <HAL_UART_Transmit>
}
 80029aa:	46c0      	nop			; (mov r8, r8)
 80029ac:	46bd      	mov	sp, r7
 80029ae:	b002      	add	sp, #8
 80029b0:	bd80      	pop	{r7, pc}
 80029b2:	46c0      	nop			; (mov r8, r8)
 80029b4:	0800cc78 	.word	0x0800cc78
 80029b8:	200007e8 	.word	0x200007e8

080029bc <is_astronode_character_received>:
bool is_astronode_character_received ( uint8_t* p_rx_char )
{
 80029bc:	b580      	push	{r7, lr}
 80029be:	b082      	sub	sp, #8
 80029c0:	af00      	add	r7, sp, #0
 80029c2:	6078      	str	r0, [r7, #4]
    return ( HAL_UART_Receive ( HUART_ASTRO , p_rx_char , 1 , 100 ) == HAL_OK ? true : false ) ;
 80029c4:	6879      	ldr	r1, [r7, #4]
 80029c6:	4806      	ldr	r0, [pc, #24]	; (80029e0 <is_astronode_character_received+0x24>)
 80029c8:	2364      	movs	r3, #100	; 0x64
 80029ca:	2201      	movs	r2, #1
 80029cc:	f002 ff98 	bl	8005900 <HAL_UART_Receive>
 80029d0:	0003      	movs	r3, r0
 80029d2:	425a      	negs	r2, r3
 80029d4:	4153      	adcs	r3, r2
 80029d6:	b2db      	uxtb	r3, r3
}
 80029d8:	0018      	movs	r0, r3
 80029da:	46bd      	mov	sp, r7
 80029dc:	b002      	add	sp, #8
 80029de:	bd80      	pop	{r7, pc}
 80029e0:	200007e8 	.word	0x200007e8

080029e4 <is_evt_pin_high>:
bool is_evt_pin_high ( void )
{
 80029e4:	b580      	push	{r7, lr}
 80029e6:	af00      	add	r7, sp, #0
	return ( HAL_GPIO_ReadPin ( /*GPIOA*/ ASTRO_EVT_IT2_GPIO_Port , ASTRO_EVT_IT2_Pin ) == GPIO_PIN_SET ? true : false);
 80029e8:	4b06      	ldr	r3, [pc, #24]	; (8002a04 <is_evt_pin_high+0x20>)
 80029ea:	2104      	movs	r1, #4
 80029ec:	0018      	movs	r0, r3
 80029ee:	f000 fea3 	bl	8003738 <HAL_GPIO_ReadPin>
 80029f2:	0003      	movs	r3, r0
 80029f4:	3b01      	subs	r3, #1
 80029f6:	425a      	negs	r2, r3
 80029f8:	4153      	adcs	r3, r2
 80029fa:	b2db      	uxtb	r3, r3
}
 80029fc:	0018      	movs	r0, r3
 80029fe:	46bd      	mov	sp, r7
 8002a00:	bd80      	pop	{r7, pc}
 8002a02:	46c0      	nop			; (mov r8, r8)
 8002a04:	50000400 	.word	0x50000400

08002a08 <get_systick>:
uint32_t get_systick ( void )
{
 8002a08:	b580      	push	{r7, lr}
 8002a0a:	af00      	add	r7, sp, #0
    return HAL_GetTick() ;
 8002a0c:	f000 fbf0 	bl	80031f0 <HAL_GetTick>
 8002a10:	0003      	movs	r3, r0
}
 8002a12:	0018      	movs	r0, r3
 8002a14:	46bd      	mov	sp, r7
 8002a16:	bd80      	pop	{r7, pc}

08002a18 <is_systick_timeout_over>:
bool is_systick_timeout_over ( uint32_t starting_value , uint16_t duration )
{
 8002a18:	b580      	push	{r7, lr}
 8002a1a:	b082      	sub	sp, #8
 8002a1c:	af00      	add	r7, sp, #0
 8002a1e:	6078      	str	r0, [r7, #4]
 8002a20:	000a      	movs	r2, r1
 8002a22:	1cbb      	adds	r3, r7, #2
 8002a24:	801a      	strh	r2, [r3, #0]
    return ( get_systick () - starting_value > duration ) ? true : false ;
 8002a26:	f7ff ffef 	bl	8002a08 <get_systick>
 8002a2a:	0002      	movs	r2, r0
 8002a2c:	687b      	ldr	r3, [r7, #4]
 8002a2e:	1ad3      	subs	r3, r2, r3
 8002a30:	1cba      	adds	r2, r7, #2
 8002a32:	8812      	ldrh	r2, [r2, #0]
 8002a34:	429a      	cmp	r2, r3
 8002a36:	419b      	sbcs	r3, r3
 8002a38:	425b      	negs	r3, r3
 8002a3a:	b2db      	uxtb	r3, r3
}
 8002a3c:	0018      	movs	r0, r3
 8002a3e:	46bd      	mov	sp, r7
 8002a40:	b002      	add	sp, #8
 8002a42:	bd80      	pop	{r7, pc}

08002a44 <my_tim_init>:

// TIM functions
void my_tim_init ( TIM_HandleTypeDef htim )
{
 8002a44:	b084      	sub	sp, #16
 8002a46:	b5b0      	push	{r4, r5, r7, lr}
 8002a48:	af00      	add	r7, sp, #0
 8002a4a:	250c      	movs	r5, #12
 8002a4c:	1d2c      	adds	r4, r5, #4
 8002a4e:	19e4      	adds	r4, r4, r7
 8002a50:	6020      	str	r0, [r4, #0]
 8002a52:	6061      	str	r1, [r4, #4]
 8002a54:	60a2      	str	r2, [r4, #8]
 8002a56:	60e3      	str	r3, [r4, #12]
	__HAL_TIM_CLEAR_IT ( &htim , TIM_IT_UPDATE ) ;
 8002a58:	1d2b      	adds	r3, r5, #4
 8002a5a:	19db      	adds	r3, r3, r7
 8002a5c:	681b      	ldr	r3, [r3, #0]
 8002a5e:	2202      	movs	r2, #2
 8002a60:	4252      	negs	r2, r2
 8002a62:	611a      	str	r2, [r3, #16]
}
 8002a64:	46c0      	nop			; (mov r8, r8)
 8002a66:	46bd      	mov	sp, r7
 8002a68:	bcb0      	pop	{r4, r5, r7}
 8002a6a:	bc08      	pop	{r3}
 8002a6c:	b004      	add	sp, #16
 8002a6e:	4718      	bx	r3

08002a70 <my_tim_start>:

void my_tim_start ( TIM_HandleTypeDef htim )
{
 8002a70:	b084      	sub	sp, #16
 8002a72:	b5b0      	push	{r4, r5, r7, lr}
 8002a74:	af00      	add	r7, sp, #0
 8002a76:	2510      	movs	r5, #16
 8002a78:	197c      	adds	r4, r7, r5
 8002a7a:	6020      	str	r0, [r4, #0]
 8002a7c:	6061      	str	r1, [r4, #4]
 8002a7e:	60a2      	str	r2, [r4, #8]
 8002a80:	60e3      	str	r3, [r4, #12]
	tim_seconds = 0 ;
 8002a82:	4b06      	ldr	r3, [pc, #24]	; (8002a9c <my_tim_start+0x2c>)
 8002a84:	2200      	movs	r2, #0
 8002a86:	801a      	strh	r2, [r3, #0]
	HAL_TIM_Base_Start_IT ( &htim ) ;
 8002a88:	197b      	adds	r3, r7, r5
 8002a8a:	0018      	movs	r0, r3
 8002a8c:	f002 fb4c 	bl	8005128 <HAL_TIM_Base_Start_IT>
}
 8002a90:	46c0      	nop			; (mov r8, r8)
 8002a92:	46bd      	mov	sp, r7
 8002a94:	bcb0      	pop	{r4, r5, r7}
 8002a96:	bc08      	pop	{r3}
 8002a98:	b004      	add	sp, #16
 8002a9a:	4718      	bx	r3
 8002a9c:	20000890 	.word	0x20000890

08002aa0 <my_tim_stop>:

void my_tim_stop ( TIM_HandleTypeDef htim )
{
 8002aa0:	b084      	sub	sp, #16
 8002aa2:	b5b0      	push	{r4, r5, r7, lr}
 8002aa4:	af00      	add	r7, sp, #0
 8002aa6:	2510      	movs	r5, #16
 8002aa8:	197c      	adds	r4, r7, r5
 8002aaa:	6020      	str	r0, [r4, #0]
 8002aac:	6061      	str	r1, [r4, #4]
 8002aae:	60a2      	str	r2, [r4, #8]
 8002ab0:	60e3      	str	r3, [r4, #12]
	HAL_TIM_Base_Stop_IT ( &htim ) ;
 8002ab2:	197b      	adds	r3, r7, r5
 8002ab4:	0018      	movs	r0, r3
 8002ab6:	f002 fb99 	bl	80051ec <HAL_TIM_Base_Stop_IT>
}
 8002aba:	46c0      	nop			; (mov r8, r8)
 8002abc:	46bd      	mov	sp, r7
 8002abe:	bcb0      	pop	{r4, r5, r7}
 8002ac0:	bc08      	pop	{r3}
 8002ac2:	b004      	add	sp, #16
 8002ac4:	4718      	bx	r3
	...

08002ac8 <my_astro_init>:

// Astronode functions
bool my_astro_init ( TIM_HandleTypeDef htim )
{
 8002ac8:	b084      	sub	sp, #16
 8002aca:	b5b0      	push	{r4, r5, r7, lr}
 8002acc:	b092      	sub	sp, #72	; 0x48
 8002ace:	af10      	add	r7, sp, #64	; 0x40
 8002ad0:	2518      	movs	r5, #24
 8002ad2:	197c      	adds	r4, r7, r5
 8002ad4:	6020      	str	r0, [r4, #0]
 8002ad6:	6061      	str	r1, [r4, #4]
 8002ad8:	60a2      	str	r2, [r4, #8]
 8002ada:	60e3      	str	r3, [r4, #12]
	bool cfg_wr = false ;
 8002adc:	1dfb      	adds	r3, r7, #7
 8002ade:	2200      	movs	r2, #0
 8002ae0:	701a      	strb	r2, [r3, #0]
	tim_seconds = 0 ;
 8002ae2:	4b30      	ldr	r3, [pc, #192]	; (8002ba4 <my_astro_init+0xdc>)
 8002ae4:	2200      	movs	r2, #0
 8002ae6:	801a      	strh	r2, [r3, #0]

	my_tim_start ( htim ) ;
 8002ae8:	197c      	adds	r4, r7, r5
 8002aea:	466b      	mov	r3, sp
 8002aec:	0018      	movs	r0, r3
 8002aee:	0023      	movs	r3, r4
 8002af0:	3310      	adds	r3, #16
 8002af2:	223c      	movs	r2, #60	; 0x3c
 8002af4:	0019      	movs	r1, r3
 8002af6:	f005 fba5 	bl	8008244 <memcpy>
 8002afa:	6820      	ldr	r0, [r4, #0]
 8002afc:	6861      	ldr	r1, [r4, #4]
 8002afe:	68a2      	ldr	r2, [r4, #8]
 8002b00:	68e3      	ldr	r3, [r4, #12]
 8002b02:	f7ff ffb5 	bl	8002a70 <my_tim_start>
	while ( tim_seconds < MY_ASTRO_INIT_TIME && !cfg_wr )
 8002b06:	e015      	b.n	8002b34 <my_astro_init+0x6c>
	{
		reset_astronode () ;
 8002b08:	f7ff ff20 	bl	800294c <reset_astronode>
		HAL_Delay ( 100 ) ;
 8002b0c:	2064      	movs	r0, #100	; 0x64
 8002b0e:	f000 fb79 	bl	8003204 <HAL_Delay>
		// Deep Sleep Mode (false) NOT used
		// Satellite Ack Event Pin Mask (true): EVT pin shows EVT register Payload Ack bit state
		// Reset Notification Event Pin Mask (true):  EVT pin shows EVT register Reset Event Notification bit state
		// Command Available Event Pin Mask (true): EVT pin shows EVT register Command Available bit state
		// Message Transmission (Tx) Pending Event Pin Mask (false):  EVT pin does not show EVT register Msg Tx Pending bit state
		cfg_wr = astronode_send_cfg_wr ( true , true , true , false , true , true , true , false  ) ;
 8002b12:	1dfc      	adds	r4, r7, #7
 8002b14:	2300      	movs	r3, #0
 8002b16:	9303      	str	r3, [sp, #12]
 8002b18:	2301      	movs	r3, #1
 8002b1a:	9302      	str	r3, [sp, #8]
 8002b1c:	2301      	movs	r3, #1
 8002b1e:	9301      	str	r3, [sp, #4]
 8002b20:	2301      	movs	r3, #1
 8002b22:	9300      	str	r3, [sp, #0]
 8002b24:	2300      	movs	r3, #0
 8002b26:	2201      	movs	r2, #1
 8002b28:	2101      	movs	r1, #1
 8002b2a:	2001      	movs	r0, #1
 8002b2c:	f003 fe3c 	bl	80067a8 <astronode_send_cfg_wr>
 8002b30:	0003      	movs	r3, r0
 8002b32:	7023      	strb	r3, [r4, #0]
	while ( tim_seconds < MY_ASTRO_INIT_TIME && !cfg_wr )
 8002b34:	4b1b      	ldr	r3, [pc, #108]	; (8002ba4 <my_astro_init+0xdc>)
 8002b36:	881b      	ldrh	r3, [r3, #0]
 8002b38:	2b09      	cmp	r3, #9
 8002b3a:	d806      	bhi.n	8002b4a <my_astro_init+0x82>
 8002b3c:	1dfb      	adds	r3, r7, #7
 8002b3e:	781b      	ldrb	r3, [r3, #0]
 8002b40:	2201      	movs	r2, #1
 8002b42:	4053      	eors	r3, r2
 8002b44:	b2db      	uxtb	r3, r3
 8002b46:	2b00      	cmp	r3, #0
 8002b48:	d1de      	bne.n	8002b08 <my_astro_init+0x40>
	}
	tim_seconds = 0 ;
 8002b4a:	4b16      	ldr	r3, [pc, #88]	; (8002ba4 <my_astro_init+0xdc>)
 8002b4c:	2200      	movs	r2, #0
 8002b4e:	801a      	strh	r2, [r3, #0]
	my_tim_stop ( htim ) ;
 8002b50:	2318      	movs	r3, #24
 8002b52:	18fc      	adds	r4, r7, r3
 8002b54:	466b      	mov	r3, sp
 8002b56:	0018      	movs	r0, r3
 8002b58:	0023      	movs	r3, r4
 8002b5a:	3310      	adds	r3, #16
 8002b5c:	223c      	movs	r2, #60	; 0x3c
 8002b5e:	0019      	movs	r1, r3
 8002b60:	f005 fb70 	bl	8008244 <memcpy>
 8002b64:	6820      	ldr	r0, [r4, #0]
 8002b66:	6861      	ldr	r1, [r4, #4]
 8002b68:	68a2      	ldr	r2, [r4, #8]
 8002b6a:	68e3      	ldr	r3, [r4, #12]
 8002b6c:	f7ff ff98 	bl	8002aa0 <my_tim_stop>
	if ( cfg_wr )
 8002b70:	1dfb      	adds	r3, r7, #7
 8002b72:	781b      	ldrb	r3, [r3, #0]
 8002b74:	2b00      	cmp	r3, #0
 8002b76:	d00d      	beq.n	8002b94 <my_astro_init+0xcc>
	{
		astronode_send_rtc_rr () ;
 8002b78:	f004 f912 	bl	8006da0 <astronode_send_rtc_rr>
		astronode_send_cfg_sr () ;
 8002b7c:	f003 fddc 	bl	8006738 <astronode_send_cfg_sr>
		astronode_send_mpn_rr () ;
 8002b80:	f004 fa08 	bl	8006f94 <astronode_send_mpn_rr>
		astronode_send_msn_rr () ;
 8002b84:	f003 ff66 	bl	8006a54 <astronode_send_msn_rr>
		astronode_send_mgi_rr () ;
 8002b88:	f003 feba 	bl	8006900 <astronode_send_mgi_rr>
		astronode_send_pld_fr () ;
 8002b8c:	f004 f88c 	bl	8006ca8 <astronode_send_pld_fr>
		return true ;
 8002b90:	2301      	movs	r3, #1
 8002b92:	e000      	b.n	8002b96 <my_astro_init+0xce>
	}
	else
	{
		return false ;
 8002b94:	2300      	movs	r3, #0
	}
}
 8002b96:	0018      	movs	r0, r3
 8002b98:	46bd      	mov	sp, r7
 8002b9a:	b002      	add	sp, #8
 8002b9c:	bcb0      	pop	{r4, r5, r7}
 8002b9e:	bc08      	pop	{r3}
 8002ba0:	b004      	add	sp, #16
 8002ba2:	4718      	bx	r3
 8002ba4:	20000890 	.word	0x20000890

08002ba8 <is_system_initialized>:


// System functions
bool is_system_initialized ( void )
{
 8002ba8:	b590      	push	{r4, r7, lr}
 8002baa:	b083      	sub	sp, #12
 8002bac:	af00      	add	r7, sp, #0
	// Nie próbuj robić nic z Astronode, bo nie wiesz czy nie trzeba go zainicjować restartem. Ogranicz się do samego systemu.
	uint16_t yyyy = my_rtc_get_time_s ( rtc_dt_s ) ;
 8002bae:	1dbc      	adds	r4, r7, #6
 8002bb0:	4b0a      	ldr	r3, [pc, #40]	; (8002bdc <is_system_initialized+0x34>)
 8002bb2:	0018      	movs	r0, r3
 8002bb4:	f005 f914 	bl	8007de0 <my_rtc_get_time_s>
 8002bb8:	0003      	movs	r3, r0
 8002bba:	8023      	strh	r3, [r4, #0]
	send_debug_logs ( rtc_dt_s ) ;
 8002bbc:	4b07      	ldr	r3, [pc, #28]	; (8002bdc <is_system_initialized+0x34>)
 8002bbe:	0018      	movs	r0, r3
 8002bc0:	f7ff fe94 	bl	80028ec <send_debug_logs>
	return ( yyyy >= FIRMWARE_RELEASE_YEAR ) ? true : false ;
 8002bc4:	1dbb      	adds	r3, r7, #6
 8002bc6:	881b      	ldrh	r3, [r3, #0]
 8002bc8:	4a05      	ldr	r2, [pc, #20]	; (8002be0 <is_system_initialized+0x38>)
 8002bca:	429a      	cmp	r2, r3
 8002bcc:	419b      	sbcs	r3, r3
 8002bce:	425b      	negs	r3, r3
 8002bd0:	b2db      	uxtb	r3, r3
}
 8002bd2:	0018      	movs	r0, r3
 8002bd4:	46bd      	mov	sp, r7
 8002bd6:	b003      	add	sp, #12
 8002bd8:	bd90      	pop	{r4, r7, pc}
 8002bda:	46c0      	nop			; (mov r8, r8)
 8002bdc:	2000087c 	.word	0x2000087c
 8002be0:	000007e6 	.word	0x000007e6

08002be4 <HAL_TIM_PeriodElapsedCallback>:
}

// TIM Callbacks

void HAL_TIM_PeriodElapsedCallback ( TIM_HandleTypeDef *htim )
{
 8002be4:	b580      	push	{r7, lr}
 8002be6:	b082      	sub	sp, #8
 8002be8:	af00      	add	r7, sp, #0
 8002bea:	6078      	str	r0, [r7, #4]
	if ( htim->Instance == TIM6 )
 8002bec:	687b      	ldr	r3, [r7, #4]
 8002bee:	681b      	ldr	r3, [r3, #0]
 8002bf0:	4a0a      	ldr	r2, [pc, #40]	; (8002c1c <HAL_TIM_PeriodElapsedCallback+0x38>)
 8002bf2:	4293      	cmp	r3, r2
 8002bf4:	d10d      	bne.n	8002c12 <HAL_TIM_PeriodElapsedCallback+0x2e>
	{
		tim_seconds++ ;
 8002bf6:	4b0a      	ldr	r3, [pc, #40]	; (8002c20 <HAL_TIM_PeriodElapsedCallback+0x3c>)
 8002bf8:	881b      	ldrh	r3, [r3, #0]
 8002bfa:	3301      	adds	r3, #1
 8002bfc:	b29a      	uxth	r2, r3
 8002bfe:	4b08      	ldr	r3, [pc, #32]	; (8002c20 <HAL_TIM_PeriodElapsedCallback+0x3c>)
 8002c00:	801a      	strh	r2, [r3, #0]
		if ( tim_seconds > TIM_SECONDS_THS_SYSTEM_RESET )
 8002c02:	4b07      	ldr	r3, [pc, #28]	; (8002c20 <HAL_TIM_PeriodElapsedCallback+0x3c>)
 8002c04:	881a      	ldrh	r2, [r3, #0]
 8002c06:	2396      	movs	r3, #150	; 0x96
 8002c08:	005b      	lsls	r3, r3, #1
 8002c0a:	429a      	cmp	r2, r3
 8002c0c:	d901      	bls.n	8002c12 <HAL_TIM_PeriodElapsedCallback+0x2e>
		  {
			  HAL_NVIC_SystemReset () ;
 8002c0e:	f000 fc16 	bl	800343e <HAL_NVIC_SystemReset>
		  }
	}
}
 8002c12:	46c0      	nop			; (mov r8, r8)
 8002c14:	46bd      	mov	sp, r7
 8002c16:	b002      	add	sp, #8
 8002c18:	bd80      	pop	{r7, pc}
 8002c1a:	46c0      	nop			; (mov r8, r8)
 8002c1c:	40001000 	.word	0x40001000
 8002c20:	20000890 	.word	0x20000890

08002c24 <HAL_GPIO_EXTI_Rising_Callback>:

// EXTI Callbacks
void HAL_GPIO_EXTI_Rising_Callback ( uint16_t GPIO_Pin )
{
 8002c24:	b580      	push	{r7, lr}
 8002c26:	b082      	sub	sp, #8
 8002c28:	af00      	add	r7, sp, #0
 8002c2a:	0002      	movs	r2, r0
 8002c2c:	1dbb      	adds	r3, r7, #6
 8002c2e:	801a      	strh	r2, [r3, #0]
	//zamiast poniższego może lepiej wrócić do pierwotnego przeglądania GPIO w trybie input bez przerwania
	if ( GPIO_Pin == 0x4 ) // ASTRO_EVT_Pin = 0x1000
 8002c30:	1dbb      	adds	r3, r7, #6
 8002c32:	881b      	ldrh	r3, [r3, #0]
 8002c34:	2b04      	cmp	r3, #4
 8002c36:	d102      	bne.n	8002c3e <HAL_GPIO_EXTI_Rising_Callback+0x1a>
	{
		is_astro_evt_flag = true ;
 8002c38:	4b03      	ldr	r3, [pc, #12]	; (8002c48 <HAL_GPIO_EXTI_Rising_Callback+0x24>)
 8002c3a:	2201      	movs	r2, #1
 8002c3c:	701a      	strb	r2, [r3, #0]
	}
}
 8002c3e:	46c0      	nop			; (mov r8, r8)
 8002c40:	46bd      	mov	sp, r7
 8002c42:	b002      	add	sp, #8
 8002c44:	bd80      	pop	{r7, pc}
 8002c46:	46c0      	nop			; (mov r8, r8)
 8002c48:	20000892 	.word	0x20000892

08002c4c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8002c4c:	b580      	push	{r7, lr}
 8002c4e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8002c50:	b672      	cpsid	i
}
 8002c52:	46c0      	nop			; (mov r8, r8)
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8002c54:	e7fe      	b.n	8002c54 <Error_Handler+0x8>
	...

08002c58 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002c58:	b580      	push	{r7, lr}
 8002c5a:	b082      	sub	sp, #8
 8002c5c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002c5e:	4b11      	ldr	r3, [pc, #68]	; (8002ca4 <HAL_MspInit+0x4c>)
 8002c60:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002c62:	4b10      	ldr	r3, [pc, #64]	; (8002ca4 <HAL_MspInit+0x4c>)
 8002c64:	2101      	movs	r1, #1
 8002c66:	430a      	orrs	r2, r1
 8002c68:	641a      	str	r2, [r3, #64]	; 0x40
 8002c6a:	4b0e      	ldr	r3, [pc, #56]	; (8002ca4 <HAL_MspInit+0x4c>)
 8002c6c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c6e:	2201      	movs	r2, #1
 8002c70:	4013      	ands	r3, r2
 8002c72:	607b      	str	r3, [r7, #4]
 8002c74:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8002c76:	4b0b      	ldr	r3, [pc, #44]	; (8002ca4 <HAL_MspInit+0x4c>)
 8002c78:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8002c7a:	4b0a      	ldr	r3, [pc, #40]	; (8002ca4 <HAL_MspInit+0x4c>)
 8002c7c:	2180      	movs	r1, #128	; 0x80
 8002c7e:	0549      	lsls	r1, r1, #21
 8002c80:	430a      	orrs	r2, r1
 8002c82:	63da      	str	r2, [r3, #60]	; 0x3c
 8002c84:	4b07      	ldr	r3, [pc, #28]	; (8002ca4 <HAL_MspInit+0x4c>)
 8002c86:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8002c88:	2380      	movs	r3, #128	; 0x80
 8002c8a:	055b      	lsls	r3, r3, #21
 8002c8c:	4013      	ands	r3, r2
 8002c8e:	603b      	str	r3, [r7, #0]
 8002c90:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  /** Disable the internal Pull-Up in Dead Battery pins of UCPD peripheral
  */
  HAL_SYSCFG_StrobeDBattpinsConfig(SYSCFG_CFGR1_UCPD1_STROBE | SYSCFG_CFGR1_UCPD2_STROBE);
 8002c92:	23c0      	movs	r3, #192	; 0xc0
 8002c94:	00db      	lsls	r3, r3, #3
 8002c96:	0018      	movs	r0, r3
 8002c98:	f000 fad8 	bl	800324c <HAL_SYSCFG_StrobeDBattpinsConfig>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002c9c:	46c0      	nop			; (mov r8, r8)
 8002c9e:	46bd      	mov	sp, r7
 8002ca0:	b002      	add	sp, #8
 8002ca2:	bd80      	pop	{r7, pc}
 8002ca4:	40021000 	.word	0x40021000

08002ca8 <HAL_RTC_MspInit>:
* This function configures the hardware resources used in this example
* @param hrtc: RTC handle pointer
* @retval None
*/
void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{
 8002ca8:	b590      	push	{r4, r7, lr}
 8002caa:	b097      	sub	sp, #92	; 0x5c
 8002cac:	af00      	add	r7, sp, #0
 8002cae:	6078      	str	r0, [r7, #4]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8002cb0:	240c      	movs	r4, #12
 8002cb2:	193b      	adds	r3, r7, r4
 8002cb4:	0018      	movs	r0, r3
 8002cb6:	234c      	movs	r3, #76	; 0x4c
 8002cb8:	001a      	movs	r2, r3
 8002cba:	2100      	movs	r1, #0
 8002cbc:	f005 fa36 	bl	800812c <memset>
  if(hrtc->Instance==RTC)
 8002cc0:	687b      	ldr	r3, [r7, #4]
 8002cc2:	681b      	ldr	r3, [r3, #0]
 8002cc4:	4a15      	ldr	r2, [pc, #84]	; (8002d1c <HAL_RTC_MspInit+0x74>)
 8002cc6:	4293      	cmp	r3, r2
 8002cc8:	d124      	bne.n	8002d14 <HAL_RTC_MspInit+0x6c>

  /* USER CODE END RTC_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 8002cca:	193b      	adds	r3, r7, r4
 8002ccc:	2280      	movs	r2, #128	; 0x80
 8002cce:	0292      	lsls	r2, r2, #10
 8002cd0:	601a      	str	r2, [r3, #0]
    PeriphClkInit.RTCClockSelection = RCC_RTCCLKSOURCE_LSI;
 8002cd2:	193b      	adds	r3, r7, r4
 8002cd4:	2280      	movs	r2, #128	; 0x80
 8002cd6:	0092      	lsls	r2, r2, #2
 8002cd8:	641a      	str	r2, [r3, #64]	; 0x40
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8002cda:	193b      	adds	r3, r7, r4
 8002cdc:	0018      	movs	r0, r3
 8002cde:	f001 faef 	bl	80042c0 <HAL_RCCEx_PeriphCLKConfig>
 8002ce2:	1e03      	subs	r3, r0, #0
 8002ce4:	d001      	beq.n	8002cea <HAL_RTC_MspInit+0x42>
    {
      Error_Handler();
 8002ce6:	f7ff ffb1 	bl	8002c4c <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_RTC_ENABLE();
 8002cea:	4b0d      	ldr	r3, [pc, #52]	; (8002d20 <HAL_RTC_MspInit+0x78>)
 8002cec:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8002cee:	4b0c      	ldr	r3, [pc, #48]	; (8002d20 <HAL_RTC_MspInit+0x78>)
 8002cf0:	2180      	movs	r1, #128	; 0x80
 8002cf2:	0209      	lsls	r1, r1, #8
 8002cf4:	430a      	orrs	r2, r1
 8002cf6:	65da      	str	r2, [r3, #92]	; 0x5c
    __HAL_RCC_RTCAPB_CLK_ENABLE();
 8002cf8:	4b09      	ldr	r3, [pc, #36]	; (8002d20 <HAL_RTC_MspInit+0x78>)
 8002cfa:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8002cfc:	4b08      	ldr	r3, [pc, #32]	; (8002d20 <HAL_RTC_MspInit+0x78>)
 8002cfe:	2180      	movs	r1, #128	; 0x80
 8002d00:	00c9      	lsls	r1, r1, #3
 8002d02:	430a      	orrs	r2, r1
 8002d04:	63da      	str	r2, [r3, #60]	; 0x3c
 8002d06:	4b06      	ldr	r3, [pc, #24]	; (8002d20 <HAL_RTC_MspInit+0x78>)
 8002d08:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8002d0a:	2380      	movs	r3, #128	; 0x80
 8002d0c:	00db      	lsls	r3, r3, #3
 8002d0e:	4013      	ands	r3, r2
 8002d10:	60bb      	str	r3, [r7, #8]
 8002d12:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }

}
 8002d14:	46c0      	nop			; (mov r8, r8)
 8002d16:	46bd      	mov	sp, r7
 8002d18:	b017      	add	sp, #92	; 0x5c
 8002d1a:	bd90      	pop	{r4, r7, pc}
 8002d1c:	40002800 	.word	0x40002800
 8002d20:	40021000 	.word	0x40021000

08002d24 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8002d24:	b580      	push	{r7, lr}
 8002d26:	b084      	sub	sp, #16
 8002d28:	af00      	add	r7, sp, #0
 8002d2a:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM6)
 8002d2c:	687b      	ldr	r3, [r7, #4]
 8002d2e:	681b      	ldr	r3, [r3, #0]
 8002d30:	4a0d      	ldr	r2, [pc, #52]	; (8002d68 <HAL_TIM_Base_MspInit+0x44>)
 8002d32:	4293      	cmp	r3, r2
 8002d34:	d113      	bne.n	8002d5e <HAL_TIM_Base_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM6_MspInit 0 */

  /* USER CODE END TIM6_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM6_CLK_ENABLE();
 8002d36:	4b0d      	ldr	r3, [pc, #52]	; (8002d6c <HAL_TIM_Base_MspInit+0x48>)
 8002d38:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8002d3a:	4b0c      	ldr	r3, [pc, #48]	; (8002d6c <HAL_TIM_Base_MspInit+0x48>)
 8002d3c:	2110      	movs	r1, #16
 8002d3e:	430a      	orrs	r2, r1
 8002d40:	63da      	str	r2, [r3, #60]	; 0x3c
 8002d42:	4b0a      	ldr	r3, [pc, #40]	; (8002d6c <HAL_TIM_Base_MspInit+0x48>)
 8002d44:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002d46:	2210      	movs	r2, #16
 8002d48:	4013      	ands	r3, r2
 8002d4a:	60fb      	str	r3, [r7, #12]
 8002d4c:	68fb      	ldr	r3, [r7, #12]
    /* TIM6 interrupt Init */
    HAL_NVIC_SetPriority(TIM6_DAC_LPTIM1_IRQn, 2, 0);
 8002d4e:	2200      	movs	r2, #0
 8002d50:	2102      	movs	r1, #2
 8002d52:	2011      	movs	r0, #17
 8002d54:	f000 fb4e 	bl	80033f4 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM6_DAC_LPTIM1_IRQn);
 8002d58:	2011      	movs	r0, #17
 8002d5a:	f000 fb60 	bl	800341e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM6_MspInit 1 */

  /* USER CODE END TIM6_MspInit 1 */
  }

}
 8002d5e:	46c0      	nop			; (mov r8, r8)
 8002d60:	46bd      	mov	sp, r7
 8002d62:	b004      	add	sp, #16
 8002d64:	bd80      	pop	{r7, pc}
 8002d66:	46c0      	nop			; (mov r8, r8)
 8002d68:	40001000 	.word	0x40001000
 8002d6c:	40021000 	.word	0x40021000

08002d70 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8002d70:	b590      	push	{r4, r7, lr}
 8002d72:	b09f      	sub	sp, #124	; 0x7c
 8002d74:	af00      	add	r7, sp, #0
 8002d76:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002d78:	2364      	movs	r3, #100	; 0x64
 8002d7a:	18fb      	adds	r3, r7, r3
 8002d7c:	0018      	movs	r0, r3
 8002d7e:	2314      	movs	r3, #20
 8002d80:	001a      	movs	r2, r3
 8002d82:	2100      	movs	r1, #0
 8002d84:	f005 f9d2 	bl	800812c <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8002d88:	2418      	movs	r4, #24
 8002d8a:	193b      	adds	r3, r7, r4
 8002d8c:	0018      	movs	r0, r3
 8002d8e:	234c      	movs	r3, #76	; 0x4c
 8002d90:	001a      	movs	r2, r3
 8002d92:	2100      	movs	r1, #0
 8002d94:	f005 f9ca 	bl	800812c <memset>
  if(huart->Instance==USART2)
 8002d98:	687b      	ldr	r3, [r7, #4]
 8002d9a:	681b      	ldr	r3, [r3, #0]
 8002d9c:	4a45      	ldr	r2, [pc, #276]	; (8002eb4 <HAL_UART_MspInit+0x144>)
 8002d9e:	4293      	cmp	r3, r2
 8002da0:	d13f      	bne.n	8002e22 <HAL_UART_MspInit+0xb2>

  /* USER CODE END USART2_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8002da2:	193b      	adds	r3, r7, r4
 8002da4:	2202      	movs	r2, #2
 8002da6:	601a      	str	r2, [r3, #0]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8002da8:	193b      	adds	r3, r7, r4
 8002daa:	2200      	movs	r2, #0
 8002dac:	609a      	str	r2, [r3, #8]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8002dae:	193b      	adds	r3, r7, r4
 8002db0:	0018      	movs	r0, r3
 8002db2:	f001 fa85 	bl	80042c0 <HAL_RCCEx_PeriphCLKConfig>
 8002db6:	1e03      	subs	r3, r0, #0
 8002db8:	d001      	beq.n	8002dbe <HAL_UART_MspInit+0x4e>
    {
      Error_Handler();
 8002dba:	f7ff ff47 	bl	8002c4c <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8002dbe:	4b3e      	ldr	r3, [pc, #248]	; (8002eb8 <HAL_UART_MspInit+0x148>)
 8002dc0:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8002dc2:	4b3d      	ldr	r3, [pc, #244]	; (8002eb8 <HAL_UART_MspInit+0x148>)
 8002dc4:	2180      	movs	r1, #128	; 0x80
 8002dc6:	0289      	lsls	r1, r1, #10
 8002dc8:	430a      	orrs	r2, r1
 8002dca:	63da      	str	r2, [r3, #60]	; 0x3c
 8002dcc:	4b3a      	ldr	r3, [pc, #232]	; (8002eb8 <HAL_UART_MspInit+0x148>)
 8002dce:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8002dd0:	2380      	movs	r3, #128	; 0x80
 8002dd2:	029b      	lsls	r3, r3, #10
 8002dd4:	4013      	ands	r3, r2
 8002dd6:	617b      	str	r3, [r7, #20]
 8002dd8:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002dda:	4b37      	ldr	r3, [pc, #220]	; (8002eb8 <HAL_UART_MspInit+0x148>)
 8002ddc:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002dde:	4b36      	ldr	r3, [pc, #216]	; (8002eb8 <HAL_UART_MspInit+0x148>)
 8002de0:	2101      	movs	r1, #1
 8002de2:	430a      	orrs	r2, r1
 8002de4:	635a      	str	r2, [r3, #52]	; 0x34
 8002de6:	4b34      	ldr	r3, [pc, #208]	; (8002eb8 <HAL_UART_MspInit+0x148>)
 8002de8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002dea:	2201      	movs	r2, #1
 8002dec:	4013      	ands	r3, r2
 8002dee:	613b      	str	r3, [r7, #16]
 8002df0:	693b      	ldr	r3, [r7, #16]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = DBG_TX_Pin|DBG_RX_Pin;
 8002df2:	2164      	movs	r1, #100	; 0x64
 8002df4:	187b      	adds	r3, r7, r1
 8002df6:	220c      	movs	r2, #12
 8002df8:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002dfa:	187b      	adds	r3, r7, r1
 8002dfc:	2202      	movs	r2, #2
 8002dfe:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002e00:	187b      	adds	r3, r7, r1
 8002e02:	2200      	movs	r2, #0
 8002e04:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002e06:	187b      	adds	r3, r7, r1
 8002e08:	2200      	movs	r2, #0
 8002e0a:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_USART2;
 8002e0c:	187b      	adds	r3, r7, r1
 8002e0e:	2201      	movs	r2, #1
 8002e10:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002e12:	187a      	adds	r2, r7, r1
 8002e14:	23a0      	movs	r3, #160	; 0xa0
 8002e16:	05db      	lsls	r3, r3, #23
 8002e18:	0011      	movs	r1, r2
 8002e1a:	0018      	movs	r0, r3
 8002e1c:	f000 fb20 	bl	8003460 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 8002e20:	e044      	b.n	8002eac <HAL_UART_MspInit+0x13c>
  else if(huart->Instance==USART3)
 8002e22:	687b      	ldr	r3, [r7, #4]
 8002e24:	681b      	ldr	r3, [r3, #0]
 8002e26:	4a25      	ldr	r2, [pc, #148]	; (8002ebc <HAL_UART_MspInit+0x14c>)
 8002e28:	4293      	cmp	r3, r2
 8002e2a:	d13f      	bne.n	8002eac <HAL_UART_MspInit+0x13c>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 8002e2c:	2118      	movs	r1, #24
 8002e2e:	187b      	adds	r3, r7, r1
 8002e30:	2204      	movs	r2, #4
 8002e32:	601a      	str	r2, [r3, #0]
    PeriphClkInit.Usart3ClockSelection = RCC_USART3CLKSOURCE_PCLK1;
 8002e34:	187b      	adds	r3, r7, r1
 8002e36:	2200      	movs	r2, #0
 8002e38:	60da      	str	r2, [r3, #12]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8002e3a:	187b      	adds	r3, r7, r1
 8002e3c:	0018      	movs	r0, r3
 8002e3e:	f001 fa3f 	bl	80042c0 <HAL_RCCEx_PeriphCLKConfig>
 8002e42:	1e03      	subs	r3, r0, #0
 8002e44:	d001      	beq.n	8002e4a <HAL_UART_MspInit+0xda>
      Error_Handler();
 8002e46:	f7ff ff01 	bl	8002c4c <Error_Handler>
    __HAL_RCC_USART3_CLK_ENABLE();
 8002e4a:	4b1b      	ldr	r3, [pc, #108]	; (8002eb8 <HAL_UART_MspInit+0x148>)
 8002e4c:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8002e4e:	4b1a      	ldr	r3, [pc, #104]	; (8002eb8 <HAL_UART_MspInit+0x148>)
 8002e50:	2180      	movs	r1, #128	; 0x80
 8002e52:	02c9      	lsls	r1, r1, #11
 8002e54:	430a      	orrs	r2, r1
 8002e56:	63da      	str	r2, [r3, #60]	; 0x3c
 8002e58:	4b17      	ldr	r3, [pc, #92]	; (8002eb8 <HAL_UART_MspInit+0x148>)
 8002e5a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8002e5c:	2380      	movs	r3, #128	; 0x80
 8002e5e:	02db      	lsls	r3, r3, #11
 8002e60:	4013      	ands	r3, r2
 8002e62:	60fb      	str	r3, [r7, #12]
 8002e64:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002e66:	4b14      	ldr	r3, [pc, #80]	; (8002eb8 <HAL_UART_MspInit+0x148>)
 8002e68:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002e6a:	4b13      	ldr	r3, [pc, #76]	; (8002eb8 <HAL_UART_MspInit+0x148>)
 8002e6c:	2102      	movs	r1, #2
 8002e6e:	430a      	orrs	r2, r1
 8002e70:	635a      	str	r2, [r3, #52]	; 0x34
 8002e72:	4b11      	ldr	r3, [pc, #68]	; (8002eb8 <HAL_UART_MspInit+0x148>)
 8002e74:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002e76:	2202      	movs	r2, #2
 8002e78:	4013      	ands	r3, r2
 8002e7a:	60bb      	str	r3, [r7, #8]
 8002e7c:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = ASTRO_TX_Pin|ASTRO_RX_Pin;
 8002e7e:	2164      	movs	r1, #100	; 0x64
 8002e80:	187b      	adds	r3, r7, r1
 8002e82:	22c0      	movs	r2, #192	; 0xc0
 8002e84:	0092      	lsls	r2, r2, #2
 8002e86:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002e88:	187b      	adds	r3, r7, r1
 8002e8a:	2202      	movs	r2, #2
 8002e8c:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002e8e:	187b      	adds	r3, r7, r1
 8002e90:	2200      	movs	r2, #0
 8002e92:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002e94:	187b      	adds	r3, r7, r1
 8002e96:	2200      	movs	r2, #0
 8002e98:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF4_USART3;
 8002e9a:	187b      	adds	r3, r7, r1
 8002e9c:	2204      	movs	r2, #4
 8002e9e:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002ea0:	187b      	adds	r3, r7, r1
 8002ea2:	4a07      	ldr	r2, [pc, #28]	; (8002ec0 <HAL_UART_MspInit+0x150>)
 8002ea4:	0019      	movs	r1, r3
 8002ea6:	0010      	movs	r0, r2
 8002ea8:	f000 fada 	bl	8003460 <HAL_GPIO_Init>
}
 8002eac:	46c0      	nop			; (mov r8, r8)
 8002eae:	46bd      	mov	sp, r7
 8002eb0:	b01f      	add	sp, #124	; 0x7c
 8002eb2:	bd90      	pop	{r4, r7, pc}
 8002eb4:	40004400 	.word	0x40004400
 8002eb8:	40021000 	.word	0x40021000
 8002ebc:	40004800 	.word	0x40004800
 8002ec0:	50000400 	.word	0x50000400

08002ec4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002ec4:	b580      	push	{r7, lr}
 8002ec6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8002ec8:	e7fe      	b.n	8002ec8 <NMI_Handler+0x4>

08002eca <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002eca:	b580      	push	{r7, lr}
 8002ecc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002ece:	e7fe      	b.n	8002ece <HardFault_Handler+0x4>

08002ed0 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8002ed0:	b580      	push	{r7, lr}
 8002ed2:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 8002ed4:	46c0      	nop			; (mov r8, r8)
 8002ed6:	46bd      	mov	sp, r7
 8002ed8:	bd80      	pop	{r7, pc}

08002eda <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8002eda:	b580      	push	{r7, lr}
 8002edc:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8002ede:	46c0      	nop			; (mov r8, r8)
 8002ee0:	46bd      	mov	sp, r7
 8002ee2:	bd80      	pop	{r7, pc}

08002ee4 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002ee4:	b580      	push	{r7, lr}
 8002ee6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002ee8:	f000 f970 	bl	80031cc <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002eec:	46c0      	nop			; (mov r8, r8)
 8002eee:	46bd      	mov	sp, r7
 8002ef0:	bd80      	pop	{r7, pc}

08002ef2 <EXTI2_3_IRQHandler>:

/**
  * @brief This function handles EXTI line 2 and line 3 interrupts.
  */
void EXTI2_3_IRQHandler(void)
{
 8002ef2:	b580      	push	{r7, lr}
 8002ef4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI2_3_IRQn 0 */

  /* USER CODE END EXTI2_3_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(ASTRO_EVT_IT2_Pin);
 8002ef6:	2004      	movs	r0, #4
 8002ef8:	f000 fc58 	bl	80037ac <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI2_3_IRQn 1 */

  /* USER CODE END EXTI2_3_IRQn 1 */
}
 8002efc:	46c0      	nop			; (mov r8, r8)
 8002efe:	46bd      	mov	sp, r7
 8002f00:	bd80      	pop	{r7, pc}
	...

08002f04 <TIM6_DAC_LPTIM1_IRQHandler>:

/**
  * @brief This function handles TIM6, DAC and LPTIM1 global Interrupts.
  */
void TIM6_DAC_LPTIM1_IRQHandler(void)
{
 8002f04:	b580      	push	{r7, lr}
 8002f06:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_LPTIM1_IRQn 0 */

  /* USER CODE END TIM6_DAC_LPTIM1_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8002f08:	4b03      	ldr	r3, [pc, #12]	; (8002f18 <TIM6_DAC_LPTIM1_IRQHandler+0x14>)
 8002f0a:	0018      	movs	r0, r3
 8002f0c:	f002 f99c 	bl	8005248 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_LPTIM1_IRQn 1 */

  /* USER CODE END TIM6_DAC_LPTIM1_IRQn 1 */
}
 8002f10:	46c0      	nop			; (mov r8, r8)
 8002f12:	46bd      	mov	sp, r7
 8002f14:	bd80      	pop	{r7, pc}
 8002f16:	46c0      	nop			; (mov r8, r8)
 8002f18:	20000708 	.word	0x20000708

08002f1c <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8002f1c:	b580      	push	{r7, lr}
 8002f1e:	af00      	add	r7, sp, #0
  return 1;
 8002f20:	2301      	movs	r3, #1
}
 8002f22:	0018      	movs	r0, r3
 8002f24:	46bd      	mov	sp, r7
 8002f26:	bd80      	pop	{r7, pc}

08002f28 <_kill>:

int _kill(int pid, int sig)
{
 8002f28:	b580      	push	{r7, lr}
 8002f2a:	b082      	sub	sp, #8
 8002f2c:	af00      	add	r7, sp, #0
 8002f2e:	6078      	str	r0, [r7, #4]
 8002f30:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8002f32:	f005 f959 	bl	80081e8 <__errno>
 8002f36:	0003      	movs	r3, r0
 8002f38:	2216      	movs	r2, #22
 8002f3a:	601a      	str	r2, [r3, #0]
  return -1;
 8002f3c:	2301      	movs	r3, #1
 8002f3e:	425b      	negs	r3, r3
}
 8002f40:	0018      	movs	r0, r3
 8002f42:	46bd      	mov	sp, r7
 8002f44:	b002      	add	sp, #8
 8002f46:	bd80      	pop	{r7, pc}

08002f48 <_exit>:

void _exit (int status)
{
 8002f48:	b580      	push	{r7, lr}
 8002f4a:	b082      	sub	sp, #8
 8002f4c:	af00      	add	r7, sp, #0
 8002f4e:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8002f50:	2301      	movs	r3, #1
 8002f52:	425a      	negs	r2, r3
 8002f54:	687b      	ldr	r3, [r7, #4]
 8002f56:	0011      	movs	r1, r2
 8002f58:	0018      	movs	r0, r3
 8002f5a:	f7ff ffe5 	bl	8002f28 <_kill>
  while (1) {}    /* Make sure we hang here */
 8002f5e:	e7fe      	b.n	8002f5e <_exit+0x16>

08002f60 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8002f60:	b580      	push	{r7, lr}
 8002f62:	b086      	sub	sp, #24
 8002f64:	af00      	add	r7, sp, #0
 8002f66:	60f8      	str	r0, [r7, #12]
 8002f68:	60b9      	str	r1, [r7, #8]
 8002f6a:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002f6c:	2300      	movs	r3, #0
 8002f6e:	617b      	str	r3, [r7, #20]
 8002f70:	e00a      	b.n	8002f88 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8002f72:	e000      	b.n	8002f76 <_read+0x16>
 8002f74:	bf00      	nop
 8002f76:	0001      	movs	r1, r0
 8002f78:	68bb      	ldr	r3, [r7, #8]
 8002f7a:	1c5a      	adds	r2, r3, #1
 8002f7c:	60ba      	str	r2, [r7, #8]
 8002f7e:	b2ca      	uxtb	r2, r1
 8002f80:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002f82:	697b      	ldr	r3, [r7, #20]
 8002f84:	3301      	adds	r3, #1
 8002f86:	617b      	str	r3, [r7, #20]
 8002f88:	697a      	ldr	r2, [r7, #20]
 8002f8a:	687b      	ldr	r3, [r7, #4]
 8002f8c:	429a      	cmp	r2, r3
 8002f8e:	dbf0      	blt.n	8002f72 <_read+0x12>
  }

  return len;
 8002f90:	687b      	ldr	r3, [r7, #4]
}
 8002f92:	0018      	movs	r0, r3
 8002f94:	46bd      	mov	sp, r7
 8002f96:	b006      	add	sp, #24
 8002f98:	bd80      	pop	{r7, pc}

08002f9a <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8002f9a:	b580      	push	{r7, lr}
 8002f9c:	b086      	sub	sp, #24
 8002f9e:	af00      	add	r7, sp, #0
 8002fa0:	60f8      	str	r0, [r7, #12]
 8002fa2:	60b9      	str	r1, [r7, #8]
 8002fa4:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002fa6:	2300      	movs	r3, #0
 8002fa8:	617b      	str	r3, [r7, #20]
 8002faa:	e009      	b.n	8002fc0 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8002fac:	68bb      	ldr	r3, [r7, #8]
 8002fae:	1c5a      	adds	r2, r3, #1
 8002fb0:	60ba      	str	r2, [r7, #8]
 8002fb2:	781b      	ldrb	r3, [r3, #0]
 8002fb4:	0018      	movs	r0, r3
 8002fb6:	e000      	b.n	8002fba <_write+0x20>
 8002fb8:	bf00      	nop
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002fba:	697b      	ldr	r3, [r7, #20]
 8002fbc:	3301      	adds	r3, #1
 8002fbe:	617b      	str	r3, [r7, #20]
 8002fc0:	697a      	ldr	r2, [r7, #20]
 8002fc2:	687b      	ldr	r3, [r7, #4]
 8002fc4:	429a      	cmp	r2, r3
 8002fc6:	dbf1      	blt.n	8002fac <_write+0x12>
  }
  return len;
 8002fc8:	687b      	ldr	r3, [r7, #4]
}
 8002fca:	0018      	movs	r0, r3
 8002fcc:	46bd      	mov	sp, r7
 8002fce:	b006      	add	sp, #24
 8002fd0:	bd80      	pop	{r7, pc}

08002fd2 <_close>:

int _close(int file)
{
 8002fd2:	b580      	push	{r7, lr}
 8002fd4:	b082      	sub	sp, #8
 8002fd6:	af00      	add	r7, sp, #0
 8002fd8:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8002fda:	2301      	movs	r3, #1
 8002fdc:	425b      	negs	r3, r3
}
 8002fde:	0018      	movs	r0, r3
 8002fe0:	46bd      	mov	sp, r7
 8002fe2:	b002      	add	sp, #8
 8002fe4:	bd80      	pop	{r7, pc}

08002fe6 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8002fe6:	b580      	push	{r7, lr}
 8002fe8:	b082      	sub	sp, #8
 8002fea:	af00      	add	r7, sp, #0
 8002fec:	6078      	str	r0, [r7, #4]
 8002fee:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8002ff0:	683b      	ldr	r3, [r7, #0]
 8002ff2:	2280      	movs	r2, #128	; 0x80
 8002ff4:	0192      	lsls	r2, r2, #6
 8002ff6:	605a      	str	r2, [r3, #4]
  return 0;
 8002ff8:	2300      	movs	r3, #0
}
 8002ffa:	0018      	movs	r0, r3
 8002ffc:	46bd      	mov	sp, r7
 8002ffe:	b002      	add	sp, #8
 8003000:	bd80      	pop	{r7, pc}

08003002 <_isatty>:

int _isatty(int file)
{
 8003002:	b580      	push	{r7, lr}
 8003004:	b082      	sub	sp, #8
 8003006:	af00      	add	r7, sp, #0
 8003008:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 800300a:	2301      	movs	r3, #1
}
 800300c:	0018      	movs	r0, r3
 800300e:	46bd      	mov	sp, r7
 8003010:	b002      	add	sp, #8
 8003012:	bd80      	pop	{r7, pc}

08003014 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8003014:	b580      	push	{r7, lr}
 8003016:	b084      	sub	sp, #16
 8003018:	af00      	add	r7, sp, #0
 800301a:	60f8      	str	r0, [r7, #12]
 800301c:	60b9      	str	r1, [r7, #8]
 800301e:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8003020:	2300      	movs	r3, #0
}
 8003022:	0018      	movs	r0, r3
 8003024:	46bd      	mov	sp, r7
 8003026:	b004      	add	sp, #16
 8003028:	bd80      	pop	{r7, pc}
	...

0800302c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 800302c:	b580      	push	{r7, lr}
 800302e:	b086      	sub	sp, #24
 8003030:	af00      	add	r7, sp, #0
 8003032:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8003034:	4a14      	ldr	r2, [pc, #80]	; (8003088 <_sbrk+0x5c>)
 8003036:	4b15      	ldr	r3, [pc, #84]	; (800308c <_sbrk+0x60>)
 8003038:	1ad3      	subs	r3, r2, r3
 800303a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 800303c:	697b      	ldr	r3, [r7, #20]
 800303e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8003040:	4b13      	ldr	r3, [pc, #76]	; (8003090 <_sbrk+0x64>)
 8003042:	681b      	ldr	r3, [r3, #0]
 8003044:	2b00      	cmp	r3, #0
 8003046:	d102      	bne.n	800304e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8003048:	4b11      	ldr	r3, [pc, #68]	; (8003090 <_sbrk+0x64>)
 800304a:	4a12      	ldr	r2, [pc, #72]	; (8003094 <_sbrk+0x68>)
 800304c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800304e:	4b10      	ldr	r3, [pc, #64]	; (8003090 <_sbrk+0x64>)
 8003050:	681a      	ldr	r2, [r3, #0]
 8003052:	687b      	ldr	r3, [r7, #4]
 8003054:	18d3      	adds	r3, r2, r3
 8003056:	693a      	ldr	r2, [r7, #16]
 8003058:	429a      	cmp	r2, r3
 800305a:	d207      	bcs.n	800306c <_sbrk+0x40>
  {
    errno = ENOMEM;
 800305c:	f005 f8c4 	bl	80081e8 <__errno>
 8003060:	0003      	movs	r3, r0
 8003062:	220c      	movs	r2, #12
 8003064:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8003066:	2301      	movs	r3, #1
 8003068:	425b      	negs	r3, r3
 800306a:	e009      	b.n	8003080 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 800306c:	4b08      	ldr	r3, [pc, #32]	; (8003090 <_sbrk+0x64>)
 800306e:	681b      	ldr	r3, [r3, #0]
 8003070:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8003072:	4b07      	ldr	r3, [pc, #28]	; (8003090 <_sbrk+0x64>)
 8003074:	681a      	ldr	r2, [r3, #0]
 8003076:	687b      	ldr	r3, [r7, #4]
 8003078:	18d2      	adds	r2, r2, r3
 800307a:	4b05      	ldr	r3, [pc, #20]	; (8003090 <_sbrk+0x64>)
 800307c:	601a      	str	r2, [r3, #0]

  return (void *)prev_heap_end;
 800307e:	68fb      	ldr	r3, [r7, #12]
}
 8003080:	0018      	movs	r0, r3
 8003082:	46bd      	mov	sp, r7
 8003084:	b006      	add	sp, #24
 8003086:	bd80      	pop	{r7, pc}
 8003088:	20024000 	.word	0x20024000
 800308c:	00000400 	.word	0x00000400
 8003090:	20000894 	.word	0x20000894
 8003094:	20000bb0 	.word	0x20000bb0

08003098 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8003098:	b580      	push	{r7, lr}
 800309a:	af00      	add	r7, sp, #0
  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800309c:	46c0      	nop			; (mov r8, r8)
 800309e:	46bd      	mov	sp, r7
 80030a0:	bd80      	pop	{r7, pc}
	...

080030a4 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 80030a4:	480d      	ldr	r0, [pc, #52]	; (80030dc <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 80030a6:	4685      	mov	sp, r0

/* Call the clock system initialization function.*/
  bl  SystemInit
 80030a8:	f7ff fff6 	bl	8003098 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80030ac:	480c      	ldr	r0, [pc, #48]	; (80030e0 <LoopForever+0x6>)
  ldr r1, =_edata
 80030ae:	490d      	ldr	r1, [pc, #52]	; (80030e4 <LoopForever+0xa>)
  ldr r2, =_sidata
 80030b0:	4a0d      	ldr	r2, [pc, #52]	; (80030e8 <LoopForever+0xe>)
  movs r3, #0
 80030b2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80030b4:	e002      	b.n	80030bc <LoopCopyDataInit>

080030b6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80030b6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80030b8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80030ba:	3304      	adds	r3, #4

080030bc <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80030bc:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80030be:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80030c0:	d3f9      	bcc.n	80030b6 <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80030c2:	4a0a      	ldr	r2, [pc, #40]	; (80030ec <LoopForever+0x12>)
  ldr r4, =_ebss
 80030c4:	4c0a      	ldr	r4, [pc, #40]	; (80030f0 <LoopForever+0x16>)
  movs r3, #0
 80030c6:	2300      	movs	r3, #0
  b LoopFillZerobss
 80030c8:	e001      	b.n	80030ce <LoopFillZerobss>

080030ca <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80030ca:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80030cc:	3204      	adds	r2, #4

080030ce <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80030ce:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80030d0:	d3fb      	bcc.n	80030ca <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 80030d2:	f005 f88f 	bl	80081f4 <__libc_init_array>
/* Call the application s entry point.*/
  bl main
 80030d6:	f7ff f943 	bl	8002360 <main>

080030da <LoopForever>:

LoopForever:
  b LoopForever
 80030da:	e7fe      	b.n	80030da <LoopForever>
  ldr   r0, =_estack
 80030dc:	20024000 	.word	0x20024000
  ldr r0, =_sdata
 80030e0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80030e4:	200006c0 	.word	0x200006c0
  ldr r2, =_sidata
 80030e8:	0800e8d0 	.word	0x0800e8d0
  ldr r2, =_sbss
 80030ec:	200006c0 	.word	0x200006c0
  ldr r4, =_ebss
 80030f0:	20000bac 	.word	0x20000bac

080030f4 <ADC1_COMP_IRQHandler>:
 * @retval None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80030f4:	e7fe      	b.n	80030f4 <ADC1_COMP_IRQHandler>
	...

080030f8 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80030f8:	b580      	push	{r7, lr}
 80030fa:	b082      	sub	sp, #8
 80030fc:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 80030fe:	1dfb      	adds	r3, r7, #7
 8003100:	2200      	movs	r2, #0
 8003102:	701a      	strb	r2, [r3, #0]
#if (INSTRUCTION_CACHE_ENABLE == 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_DISABLE();
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8003104:	4b0b      	ldr	r3, [pc, #44]	; (8003134 <HAL_Init+0x3c>)
 8003106:	681a      	ldr	r2, [r3, #0]
 8003108:	4b0a      	ldr	r3, [pc, #40]	; (8003134 <HAL_Init+0x3c>)
 800310a:	2180      	movs	r1, #128	; 0x80
 800310c:	0049      	lsls	r1, r1, #1
 800310e:	430a      	orrs	r2, r1
 8003110:	601a      	str	r2, [r3, #0]
#endif /* PREFETCH_ENABLE */

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8003112:	2000      	movs	r0, #0
 8003114:	f000 f810 	bl	8003138 <HAL_InitTick>
 8003118:	1e03      	subs	r3, r0, #0
 800311a:	d003      	beq.n	8003124 <HAL_Init+0x2c>
  {
    status = HAL_ERROR;
 800311c:	1dfb      	adds	r3, r7, #7
 800311e:	2201      	movs	r2, #1
 8003120:	701a      	strb	r2, [r3, #0]
 8003122:	e001      	b.n	8003128 <HAL_Init+0x30>
  }
  else
  {
  /* Init the low level hardware */
  HAL_MspInit();
 8003124:	f7ff fd98 	bl	8002c58 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8003128:	1dfb      	adds	r3, r7, #7
 800312a:	781b      	ldrb	r3, [r3, #0]
}
 800312c:	0018      	movs	r0, r3
 800312e:	46bd      	mov	sp, r7
 8003130:	b002      	add	sp, #8
 8003132:	bd80      	pop	{r7, pc}
 8003134:	40022000 	.word	0x40022000

08003138 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8003138:	b590      	push	{r4, r7, lr}
 800313a:	b085      	sub	sp, #20
 800313c:	af00      	add	r7, sp, #0
 800313e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8003140:	230f      	movs	r3, #15
 8003142:	18fb      	adds	r3, r7, r3
 8003144:	2200      	movs	r2, #0
 8003146:	701a      	strb	r2, [r3, #0]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/ 
  if ((uint32_t)uwTickFreq != 0U)
 8003148:	4b1d      	ldr	r3, [pc, #116]	; (80031c0 <HAL_InitTick+0x88>)
 800314a:	781b      	ldrb	r3, [r3, #0]
 800314c:	2b00      	cmp	r3, #0
 800314e:	d02b      	beq.n	80031a8 <HAL_InitTick+0x70>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U /(uint32_t)uwTickFreq)) == 0U)
 8003150:	4b1c      	ldr	r3, [pc, #112]	; (80031c4 <HAL_InitTick+0x8c>)
 8003152:	681c      	ldr	r4, [r3, #0]
 8003154:	4b1a      	ldr	r3, [pc, #104]	; (80031c0 <HAL_InitTick+0x88>)
 8003156:	781b      	ldrb	r3, [r3, #0]
 8003158:	0019      	movs	r1, r3
 800315a:	23fa      	movs	r3, #250	; 0xfa
 800315c:	0098      	lsls	r0, r3, #2
 800315e:	f7fc ffed 	bl	800013c <__udivsi3>
 8003162:	0003      	movs	r3, r0
 8003164:	0019      	movs	r1, r3
 8003166:	0020      	movs	r0, r4
 8003168:	f7fc ffe8 	bl	800013c <__udivsi3>
 800316c:	0003      	movs	r3, r0
 800316e:	0018      	movs	r0, r3
 8003170:	f000 f969 	bl	8003446 <HAL_SYSTICK_Config>
 8003174:	1e03      	subs	r3, r0, #0
 8003176:	d112      	bne.n	800319e <HAL_InitTick+0x66>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8003178:	687b      	ldr	r3, [r7, #4]
 800317a:	2b03      	cmp	r3, #3
 800317c:	d80a      	bhi.n	8003194 <HAL_InitTick+0x5c>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800317e:	6879      	ldr	r1, [r7, #4]
 8003180:	2301      	movs	r3, #1
 8003182:	425b      	negs	r3, r3
 8003184:	2200      	movs	r2, #0
 8003186:	0018      	movs	r0, r3
 8003188:	f000 f934 	bl	80033f4 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 800318c:	4b0e      	ldr	r3, [pc, #56]	; (80031c8 <HAL_InitTick+0x90>)
 800318e:	687a      	ldr	r2, [r7, #4]
 8003190:	601a      	str	r2, [r3, #0]
 8003192:	e00d      	b.n	80031b0 <HAL_InitTick+0x78>
      }
      else
      {
        status = HAL_ERROR;
 8003194:	230f      	movs	r3, #15
 8003196:	18fb      	adds	r3, r7, r3
 8003198:	2201      	movs	r2, #1
 800319a:	701a      	strb	r2, [r3, #0]
 800319c:	e008      	b.n	80031b0 <HAL_InitTick+0x78>
      }
    }
    else
    {
      status = HAL_ERROR;
 800319e:	230f      	movs	r3, #15
 80031a0:	18fb      	adds	r3, r7, r3
 80031a2:	2201      	movs	r2, #1
 80031a4:	701a      	strb	r2, [r3, #0]
 80031a6:	e003      	b.n	80031b0 <HAL_InitTick+0x78>
    }
  }
  else
  {
    status = HAL_ERROR;
 80031a8:	230f      	movs	r3, #15
 80031aa:	18fb      	adds	r3, r7, r3
 80031ac:	2201      	movs	r2, #1
 80031ae:	701a      	strb	r2, [r3, #0]
  }

  /* Return function status */
  return status;
 80031b0:	230f      	movs	r3, #15
 80031b2:	18fb      	adds	r3, r7, r3
 80031b4:	781b      	ldrb	r3, [r3, #0]
}
 80031b6:	0018      	movs	r0, r3
 80031b8:	46bd      	mov	sp, r7
 80031ba:	b005      	add	sp, #20
 80031bc:	bd90      	pop	{r4, r7, pc}
 80031be:	46c0      	nop			; (mov r8, r8)
 80031c0:	2000000c 	.word	0x2000000c
 80031c4:	20000004 	.word	0x20000004
 80031c8:	20000008 	.word	0x20000008

080031cc <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80031cc:	b580      	push	{r7, lr}
 80031ce:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 80031d0:	4b05      	ldr	r3, [pc, #20]	; (80031e8 <HAL_IncTick+0x1c>)
 80031d2:	781b      	ldrb	r3, [r3, #0]
 80031d4:	001a      	movs	r2, r3
 80031d6:	4b05      	ldr	r3, [pc, #20]	; (80031ec <HAL_IncTick+0x20>)
 80031d8:	681b      	ldr	r3, [r3, #0]
 80031da:	18d2      	adds	r2, r2, r3
 80031dc:	4b03      	ldr	r3, [pc, #12]	; (80031ec <HAL_IncTick+0x20>)
 80031de:	601a      	str	r2, [r3, #0]
}
 80031e0:	46c0      	nop			; (mov r8, r8)
 80031e2:	46bd      	mov	sp, r7
 80031e4:	bd80      	pop	{r7, pc}
 80031e6:	46c0      	nop			; (mov r8, r8)
 80031e8:	2000000c 	.word	0x2000000c
 80031ec:	20000898 	.word	0x20000898

080031f0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80031f0:	b580      	push	{r7, lr}
 80031f2:	af00      	add	r7, sp, #0
  return uwTick;
 80031f4:	4b02      	ldr	r3, [pc, #8]	; (8003200 <HAL_GetTick+0x10>)
 80031f6:	681b      	ldr	r3, [r3, #0]
}
 80031f8:	0018      	movs	r0, r3
 80031fa:	46bd      	mov	sp, r7
 80031fc:	bd80      	pop	{r7, pc}
 80031fe:	46c0      	nop			; (mov r8, r8)
 8003200:	20000898 	.word	0x20000898

08003204 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8003204:	b580      	push	{r7, lr}
 8003206:	b084      	sub	sp, #16
 8003208:	af00      	add	r7, sp, #0
 800320a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800320c:	f7ff fff0 	bl	80031f0 <HAL_GetTick>
 8003210:	0003      	movs	r3, r0
 8003212:	60bb      	str	r3, [r7, #8]
  uint32_t wait = Delay;
 8003214:	687b      	ldr	r3, [r7, #4]
 8003216:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8003218:	68fb      	ldr	r3, [r7, #12]
 800321a:	3301      	adds	r3, #1
 800321c:	d005      	beq.n	800322a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800321e:	4b0a      	ldr	r3, [pc, #40]	; (8003248 <HAL_Delay+0x44>)
 8003220:	781b      	ldrb	r3, [r3, #0]
 8003222:	001a      	movs	r2, r3
 8003224:	68fb      	ldr	r3, [r7, #12]
 8003226:	189b      	adds	r3, r3, r2
 8003228:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800322a:	46c0      	nop			; (mov r8, r8)
 800322c:	f7ff ffe0 	bl	80031f0 <HAL_GetTick>
 8003230:	0002      	movs	r2, r0
 8003232:	68bb      	ldr	r3, [r7, #8]
 8003234:	1ad3      	subs	r3, r2, r3
 8003236:	68fa      	ldr	r2, [r7, #12]
 8003238:	429a      	cmp	r2, r3
 800323a:	d8f7      	bhi.n	800322c <HAL_Delay+0x28>
  {
  }
}
 800323c:	46c0      	nop			; (mov r8, r8)
 800323e:	46c0      	nop			; (mov r8, r8)
 8003240:	46bd      	mov	sp, r7
 8003242:	b004      	add	sp, #16
 8003244:	bd80      	pop	{r7, pc}
 8003246:	46c0      	nop			; (mov r8, r8)
 8003248:	2000000c 	.word	0x2000000c

0800324c <HAL_SYSCFG_StrobeDBattpinsConfig>:
  *         @arg @ref SYSCFG_UCPD1_STROBE
  *         @arg @ref SYSCFG_UCPD2_STROBE
  * @retval None
  */
void HAL_SYSCFG_StrobeDBattpinsConfig(uint32_t ConfigDeadBattery)
{
 800324c:	b580      	push	{r7, lr}
 800324e:	b082      	sub	sp, #8
 8003250:	af00      	add	r7, sp, #0
 8003252:	6078      	str	r0, [r7, #4]
  assert_param(IS_SYSCFG_DBATT_CONFIG(ConfigDeadBattery));

  /* Change strobe configuration of GPIO depending on UCPDx dead battery settings */
  MODIFY_REG(SYSCFG->CFGR1, (SYSCFG_CFGR1_UCPD1_STROBE | SYSCFG_CFGR1_UCPD2_STROBE), ConfigDeadBattery);
 8003254:	4b06      	ldr	r3, [pc, #24]	; (8003270 <HAL_SYSCFG_StrobeDBattpinsConfig+0x24>)
 8003256:	681b      	ldr	r3, [r3, #0]
 8003258:	4a06      	ldr	r2, [pc, #24]	; (8003274 <HAL_SYSCFG_StrobeDBattpinsConfig+0x28>)
 800325a:	4013      	ands	r3, r2
 800325c:	0019      	movs	r1, r3
 800325e:	4b04      	ldr	r3, [pc, #16]	; (8003270 <HAL_SYSCFG_StrobeDBattpinsConfig+0x24>)
 8003260:	687a      	ldr	r2, [r7, #4]
 8003262:	430a      	orrs	r2, r1
 8003264:	601a      	str	r2, [r3, #0]
}
 8003266:	46c0      	nop			; (mov r8, r8)
 8003268:	46bd      	mov	sp, r7
 800326a:	b002      	add	sp, #8
 800326c:	bd80      	pop	{r7, pc}
 800326e:	46c0      	nop			; (mov r8, r8)
 8003270:	40010000 	.word	0x40010000
 8003274:	fffff9ff 	.word	0xfffff9ff

08003278 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003278:	b580      	push	{r7, lr}
 800327a:	b082      	sub	sp, #8
 800327c:	af00      	add	r7, sp, #0
 800327e:	0002      	movs	r2, r0
 8003280:	1dfb      	adds	r3, r7, #7
 8003282:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8003284:	1dfb      	adds	r3, r7, #7
 8003286:	781b      	ldrb	r3, [r3, #0]
 8003288:	2b7f      	cmp	r3, #127	; 0x7f
 800328a:	d809      	bhi.n	80032a0 <__NVIC_EnableIRQ+0x28>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800328c:	1dfb      	adds	r3, r7, #7
 800328e:	781b      	ldrb	r3, [r3, #0]
 8003290:	001a      	movs	r2, r3
 8003292:	231f      	movs	r3, #31
 8003294:	401a      	ands	r2, r3
 8003296:	4b04      	ldr	r3, [pc, #16]	; (80032a8 <__NVIC_EnableIRQ+0x30>)
 8003298:	2101      	movs	r1, #1
 800329a:	4091      	lsls	r1, r2
 800329c:	000a      	movs	r2, r1
 800329e:	601a      	str	r2, [r3, #0]
    __COMPILER_BARRIER();
  }
}
 80032a0:	46c0      	nop			; (mov r8, r8)
 80032a2:	46bd      	mov	sp, r7
 80032a4:	b002      	add	sp, #8
 80032a6:	bd80      	pop	{r7, pc}
 80032a8:	e000e100 	.word	0xe000e100

080032ac <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80032ac:	b590      	push	{r4, r7, lr}
 80032ae:	b083      	sub	sp, #12
 80032b0:	af00      	add	r7, sp, #0
 80032b2:	0002      	movs	r2, r0
 80032b4:	6039      	str	r1, [r7, #0]
 80032b6:	1dfb      	adds	r3, r7, #7
 80032b8:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 80032ba:	1dfb      	adds	r3, r7, #7
 80032bc:	781b      	ldrb	r3, [r3, #0]
 80032be:	2b7f      	cmp	r3, #127	; 0x7f
 80032c0:	d828      	bhi.n	8003314 <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80032c2:	4a2f      	ldr	r2, [pc, #188]	; (8003380 <__NVIC_SetPriority+0xd4>)
 80032c4:	1dfb      	adds	r3, r7, #7
 80032c6:	781b      	ldrb	r3, [r3, #0]
 80032c8:	b25b      	sxtb	r3, r3
 80032ca:	089b      	lsrs	r3, r3, #2
 80032cc:	33c0      	adds	r3, #192	; 0xc0
 80032ce:	009b      	lsls	r3, r3, #2
 80032d0:	589b      	ldr	r3, [r3, r2]
 80032d2:	1dfa      	adds	r2, r7, #7
 80032d4:	7812      	ldrb	r2, [r2, #0]
 80032d6:	0011      	movs	r1, r2
 80032d8:	2203      	movs	r2, #3
 80032da:	400a      	ands	r2, r1
 80032dc:	00d2      	lsls	r2, r2, #3
 80032de:	21ff      	movs	r1, #255	; 0xff
 80032e0:	4091      	lsls	r1, r2
 80032e2:	000a      	movs	r2, r1
 80032e4:	43d2      	mvns	r2, r2
 80032e6:	401a      	ands	r2, r3
 80032e8:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 80032ea:	683b      	ldr	r3, [r7, #0]
 80032ec:	019b      	lsls	r3, r3, #6
 80032ee:	22ff      	movs	r2, #255	; 0xff
 80032f0:	401a      	ands	r2, r3
 80032f2:	1dfb      	adds	r3, r7, #7
 80032f4:	781b      	ldrb	r3, [r3, #0]
 80032f6:	0018      	movs	r0, r3
 80032f8:	2303      	movs	r3, #3
 80032fa:	4003      	ands	r3, r0
 80032fc:	00db      	lsls	r3, r3, #3
 80032fe:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8003300:	481f      	ldr	r0, [pc, #124]	; (8003380 <__NVIC_SetPriority+0xd4>)
 8003302:	1dfb      	adds	r3, r7, #7
 8003304:	781b      	ldrb	r3, [r3, #0]
 8003306:	b25b      	sxtb	r3, r3
 8003308:	089b      	lsrs	r3, r3, #2
 800330a:	430a      	orrs	r2, r1
 800330c:	33c0      	adds	r3, #192	; 0xc0
 800330e:	009b      	lsls	r3, r3, #2
 8003310:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 8003312:	e031      	b.n	8003378 <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8003314:	4a1b      	ldr	r2, [pc, #108]	; (8003384 <__NVIC_SetPriority+0xd8>)
 8003316:	1dfb      	adds	r3, r7, #7
 8003318:	781b      	ldrb	r3, [r3, #0]
 800331a:	0019      	movs	r1, r3
 800331c:	230f      	movs	r3, #15
 800331e:	400b      	ands	r3, r1
 8003320:	3b08      	subs	r3, #8
 8003322:	089b      	lsrs	r3, r3, #2
 8003324:	3306      	adds	r3, #6
 8003326:	009b      	lsls	r3, r3, #2
 8003328:	18d3      	adds	r3, r2, r3
 800332a:	3304      	adds	r3, #4
 800332c:	681b      	ldr	r3, [r3, #0]
 800332e:	1dfa      	adds	r2, r7, #7
 8003330:	7812      	ldrb	r2, [r2, #0]
 8003332:	0011      	movs	r1, r2
 8003334:	2203      	movs	r2, #3
 8003336:	400a      	ands	r2, r1
 8003338:	00d2      	lsls	r2, r2, #3
 800333a:	21ff      	movs	r1, #255	; 0xff
 800333c:	4091      	lsls	r1, r2
 800333e:	000a      	movs	r2, r1
 8003340:	43d2      	mvns	r2, r2
 8003342:	401a      	ands	r2, r3
 8003344:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8003346:	683b      	ldr	r3, [r7, #0]
 8003348:	019b      	lsls	r3, r3, #6
 800334a:	22ff      	movs	r2, #255	; 0xff
 800334c:	401a      	ands	r2, r3
 800334e:	1dfb      	adds	r3, r7, #7
 8003350:	781b      	ldrb	r3, [r3, #0]
 8003352:	0018      	movs	r0, r3
 8003354:	2303      	movs	r3, #3
 8003356:	4003      	ands	r3, r0
 8003358:	00db      	lsls	r3, r3, #3
 800335a:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 800335c:	4809      	ldr	r0, [pc, #36]	; (8003384 <__NVIC_SetPriority+0xd8>)
 800335e:	1dfb      	adds	r3, r7, #7
 8003360:	781b      	ldrb	r3, [r3, #0]
 8003362:	001c      	movs	r4, r3
 8003364:	230f      	movs	r3, #15
 8003366:	4023      	ands	r3, r4
 8003368:	3b08      	subs	r3, #8
 800336a:	089b      	lsrs	r3, r3, #2
 800336c:	430a      	orrs	r2, r1
 800336e:	3306      	adds	r3, #6
 8003370:	009b      	lsls	r3, r3, #2
 8003372:	18c3      	adds	r3, r0, r3
 8003374:	3304      	adds	r3, #4
 8003376:	601a      	str	r2, [r3, #0]
}
 8003378:	46c0      	nop			; (mov r8, r8)
 800337a:	46bd      	mov	sp, r7
 800337c:	b003      	add	sp, #12
 800337e:	bd90      	pop	{r4, r7, pc}
 8003380:	e000e100 	.word	0xe000e100
 8003384:	e000ed00 	.word	0xe000ed00

08003388 <__NVIC_SystemReset>:
/**
  \brief   System Reset
  \details Initiates a system reset request to reset the MCU.
 */
__NO_RETURN __STATIC_INLINE void __NVIC_SystemReset(void)
{
 8003388:	b580      	push	{r7, lr}
 800338a:	af00      	add	r7, sp, #0
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 800338c:	f3bf 8f4f 	dsb	sy
}
 8003390:	46c0      	nop			; (mov r8, r8)
  __DSB();                                                          /* Ensure all outstanding memory accesses included
                                                                       buffered write are completed before reset */
  SCB->AIRCR  = ((0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003392:	4b04      	ldr	r3, [pc, #16]	; (80033a4 <__NVIC_SystemReset+0x1c>)
 8003394:	4a04      	ldr	r2, [pc, #16]	; (80033a8 <__NVIC_SystemReset+0x20>)
 8003396:	60da      	str	r2, [r3, #12]
  __ASM volatile ("dsb 0xF":::"memory");
 8003398:	f3bf 8f4f 	dsb	sy
}
 800339c:	46c0      	nop			; (mov r8, r8)
                 SCB_AIRCR_SYSRESETREQ_Msk);
  __DSB();                                                          /* Ensure completion of memory access */

  for(;;)                                                           /* wait until reset */
  {
    __NOP();
 800339e:	46c0      	nop			; (mov r8, r8)
 80033a0:	e7fd      	b.n	800339e <__NVIC_SystemReset+0x16>
 80033a2:	46c0      	nop			; (mov r8, r8)
 80033a4:	e000ed00 	.word	0xe000ed00
 80033a8:	05fa0004 	.word	0x05fa0004

080033ac <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80033ac:	b580      	push	{r7, lr}
 80033ae:	b082      	sub	sp, #8
 80033b0:	af00      	add	r7, sp, #0
 80033b2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80033b4:	687b      	ldr	r3, [r7, #4]
 80033b6:	1e5a      	subs	r2, r3, #1
 80033b8:	2380      	movs	r3, #128	; 0x80
 80033ba:	045b      	lsls	r3, r3, #17
 80033bc:	429a      	cmp	r2, r3
 80033be:	d301      	bcc.n	80033c4 <SysTick_Config+0x18>
  {
    return (1UL);                                                   /* Reload value impossible */
 80033c0:	2301      	movs	r3, #1
 80033c2:	e010      	b.n	80033e6 <SysTick_Config+0x3a>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80033c4:	4b0a      	ldr	r3, [pc, #40]	; (80033f0 <SysTick_Config+0x44>)
 80033c6:	687a      	ldr	r2, [r7, #4]
 80033c8:	3a01      	subs	r2, #1
 80033ca:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80033cc:	2301      	movs	r3, #1
 80033ce:	425b      	negs	r3, r3
 80033d0:	2103      	movs	r1, #3
 80033d2:	0018      	movs	r0, r3
 80033d4:	f7ff ff6a 	bl	80032ac <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80033d8:	4b05      	ldr	r3, [pc, #20]	; (80033f0 <SysTick_Config+0x44>)
 80033da:	2200      	movs	r2, #0
 80033dc:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80033de:	4b04      	ldr	r3, [pc, #16]	; (80033f0 <SysTick_Config+0x44>)
 80033e0:	2207      	movs	r2, #7
 80033e2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80033e4:	2300      	movs	r3, #0
}
 80033e6:	0018      	movs	r0, r3
 80033e8:	46bd      	mov	sp, r7
 80033ea:	b002      	add	sp, #8
 80033ec:	bd80      	pop	{r7, pc}
 80033ee:	46c0      	nop			; (mov r8, r8)
 80033f0:	e000e010 	.word	0xe000e010

080033f4 <HAL_NVIC_SetPriority>:
  *         with stm32g0xx devices, this parameter is a dummy value and it is ignored, because
  *         no subpriority supported in Cortex M0+ based products.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80033f4:	b580      	push	{r7, lr}
 80033f6:	b084      	sub	sp, #16
 80033f8:	af00      	add	r7, sp, #0
 80033fa:	60b9      	str	r1, [r7, #8]
 80033fc:	607a      	str	r2, [r7, #4]
 80033fe:	210f      	movs	r1, #15
 8003400:	187b      	adds	r3, r7, r1
 8003402:	1c02      	adds	r2, r0, #0
 8003404:	701a      	strb	r2, [r3, #0]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(SubPriority);

  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn, PreemptPriority);
 8003406:	68ba      	ldr	r2, [r7, #8]
 8003408:	187b      	adds	r3, r7, r1
 800340a:	781b      	ldrb	r3, [r3, #0]
 800340c:	b25b      	sxtb	r3, r3
 800340e:	0011      	movs	r1, r2
 8003410:	0018      	movs	r0, r3
 8003412:	f7ff ff4b 	bl	80032ac <__NVIC_SetPriority>
}
 8003416:	46c0      	nop			; (mov r8, r8)
 8003418:	46bd      	mov	sp, r7
 800341a:	b004      	add	sp, #16
 800341c:	bd80      	pop	{r7, pc}

0800341e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g0xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800341e:	b580      	push	{r7, lr}
 8003420:	b082      	sub	sp, #8
 8003422:	af00      	add	r7, sp, #0
 8003424:	0002      	movs	r2, r0
 8003426:	1dfb      	adds	r3, r7, #7
 8003428:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800342a:	1dfb      	adds	r3, r7, #7
 800342c:	781b      	ldrb	r3, [r3, #0]
 800342e:	b25b      	sxtb	r3, r3
 8003430:	0018      	movs	r0, r3
 8003432:	f7ff ff21 	bl	8003278 <__NVIC_EnableIRQ>
}
 8003436:	46c0      	nop			; (mov r8, r8)
 8003438:	46bd      	mov	sp, r7
 800343a:	b002      	add	sp, #8
 800343c:	bd80      	pop	{r7, pc}

0800343e <HAL_NVIC_SystemReset>:
/**
  * @brief  Initiate a system reset request to reset the MCU.
  * @retval None
  */
void HAL_NVIC_SystemReset(void)
{
 800343e:	b580      	push	{r7, lr}
 8003440:	af00      	add	r7, sp, #0
  /* System Reset */
  NVIC_SystemReset();
 8003442:	f7ff ffa1 	bl	8003388 <__NVIC_SystemReset>

08003446 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8003446:	b580      	push	{r7, lr}
 8003448:	b082      	sub	sp, #8
 800344a:	af00      	add	r7, sp, #0
 800344c:	6078      	str	r0, [r7, #4]
  return SysTick_Config(TicksNumb);
 800344e:	687b      	ldr	r3, [r7, #4]
 8003450:	0018      	movs	r0, r3
 8003452:	f7ff ffab 	bl	80033ac <SysTick_Config>
 8003456:	0003      	movs	r3, r0
}
 8003458:	0018      	movs	r0, r3
 800345a:	46bd      	mov	sp, r7
 800345c:	b002      	add	sp, #8
 800345e:	bd80      	pop	{r7, pc}

08003460 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003460:	b580      	push	{r7, lr}
 8003462:	b086      	sub	sp, #24
 8003464:	af00      	add	r7, sp, #0
 8003466:	6078      	str	r0, [r7, #4]
 8003468:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800346a:	2300      	movs	r3, #0
 800346c:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800346e:	e14d      	b.n	800370c <HAL_GPIO_Init+0x2ac>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8003470:	683b      	ldr	r3, [r7, #0]
 8003472:	681b      	ldr	r3, [r3, #0]
 8003474:	2101      	movs	r1, #1
 8003476:	697a      	ldr	r2, [r7, #20]
 8003478:	4091      	lsls	r1, r2
 800347a:	000a      	movs	r2, r1
 800347c:	4013      	ands	r3, r2
 800347e:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8003480:	68fb      	ldr	r3, [r7, #12]
 8003482:	2b00      	cmp	r3, #0
 8003484:	d100      	bne.n	8003488 <HAL_GPIO_Init+0x28>
 8003486:	e13e      	b.n	8003706 <HAL_GPIO_Init+0x2a6>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8003488:	683b      	ldr	r3, [r7, #0]
 800348a:	685b      	ldr	r3, [r3, #4]
 800348c:	2203      	movs	r2, #3
 800348e:	4013      	ands	r3, r2
 8003490:	2b01      	cmp	r3, #1
 8003492:	d005      	beq.n	80034a0 <HAL_GPIO_Init+0x40>
 8003494:	683b      	ldr	r3, [r7, #0]
 8003496:	685b      	ldr	r3, [r3, #4]
 8003498:	2203      	movs	r2, #3
 800349a:	4013      	ands	r3, r2
 800349c:	2b02      	cmp	r3, #2
 800349e:	d130      	bne.n	8003502 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80034a0:	687b      	ldr	r3, [r7, #4]
 80034a2:	689b      	ldr	r3, [r3, #8]
 80034a4:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 80034a6:	697b      	ldr	r3, [r7, #20]
 80034a8:	005b      	lsls	r3, r3, #1
 80034aa:	2203      	movs	r2, #3
 80034ac:	409a      	lsls	r2, r3
 80034ae:	0013      	movs	r3, r2
 80034b0:	43da      	mvns	r2, r3
 80034b2:	693b      	ldr	r3, [r7, #16]
 80034b4:	4013      	ands	r3, r2
 80034b6:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 80034b8:	683b      	ldr	r3, [r7, #0]
 80034ba:	68da      	ldr	r2, [r3, #12]
 80034bc:	697b      	ldr	r3, [r7, #20]
 80034be:	005b      	lsls	r3, r3, #1
 80034c0:	409a      	lsls	r2, r3
 80034c2:	0013      	movs	r3, r2
 80034c4:	693a      	ldr	r2, [r7, #16]
 80034c6:	4313      	orrs	r3, r2
 80034c8:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80034ca:	687b      	ldr	r3, [r7, #4]
 80034cc:	693a      	ldr	r2, [r7, #16]
 80034ce:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80034d0:	687b      	ldr	r3, [r7, #4]
 80034d2:	685b      	ldr	r3, [r3, #4]
 80034d4:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80034d6:	2201      	movs	r2, #1
 80034d8:	697b      	ldr	r3, [r7, #20]
 80034da:	409a      	lsls	r2, r3
 80034dc:	0013      	movs	r3, r2
 80034de:	43da      	mvns	r2, r3
 80034e0:	693b      	ldr	r3, [r7, #16]
 80034e2:	4013      	ands	r3, r2
 80034e4:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80034e6:	683b      	ldr	r3, [r7, #0]
 80034e8:	685b      	ldr	r3, [r3, #4]
 80034ea:	091b      	lsrs	r3, r3, #4
 80034ec:	2201      	movs	r2, #1
 80034ee:	401a      	ands	r2, r3
 80034f0:	697b      	ldr	r3, [r7, #20]
 80034f2:	409a      	lsls	r2, r3
 80034f4:	0013      	movs	r3, r2
 80034f6:	693a      	ldr	r2, [r7, #16]
 80034f8:	4313      	orrs	r3, r2
 80034fa:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80034fc:	687b      	ldr	r3, [r7, #4]
 80034fe:	693a      	ldr	r2, [r7, #16]
 8003500:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8003502:	683b      	ldr	r3, [r7, #0]
 8003504:	685b      	ldr	r3, [r3, #4]
 8003506:	2203      	movs	r2, #3
 8003508:	4013      	ands	r3, r2
 800350a:	2b03      	cmp	r3, #3
 800350c:	d017      	beq.n	800353e <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 800350e:	687b      	ldr	r3, [r7, #4]
 8003510:	68db      	ldr	r3, [r3, #12]
 8003512:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 8003514:	697b      	ldr	r3, [r7, #20]
 8003516:	005b      	lsls	r3, r3, #1
 8003518:	2203      	movs	r2, #3
 800351a:	409a      	lsls	r2, r3
 800351c:	0013      	movs	r3, r2
 800351e:	43da      	mvns	r2, r3
 8003520:	693b      	ldr	r3, [r7, #16]
 8003522:	4013      	ands	r3, r2
 8003524:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 8003526:	683b      	ldr	r3, [r7, #0]
 8003528:	689a      	ldr	r2, [r3, #8]
 800352a:	697b      	ldr	r3, [r7, #20]
 800352c:	005b      	lsls	r3, r3, #1
 800352e:	409a      	lsls	r2, r3
 8003530:	0013      	movs	r3, r2
 8003532:	693a      	ldr	r2, [r7, #16]
 8003534:	4313      	orrs	r3, r2
 8003536:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8003538:	687b      	ldr	r3, [r7, #4]
 800353a:	693a      	ldr	r2, [r7, #16]
 800353c:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800353e:	683b      	ldr	r3, [r7, #0]
 8003540:	685b      	ldr	r3, [r3, #4]
 8003542:	2203      	movs	r2, #3
 8003544:	4013      	ands	r3, r2
 8003546:	2b02      	cmp	r3, #2
 8003548:	d123      	bne.n	8003592 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 800354a:	697b      	ldr	r3, [r7, #20]
 800354c:	08da      	lsrs	r2, r3, #3
 800354e:	687b      	ldr	r3, [r7, #4]
 8003550:	3208      	adds	r2, #8
 8003552:	0092      	lsls	r2, r2, #2
 8003554:	58d3      	ldr	r3, [r2, r3]
 8003556:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8003558:	697b      	ldr	r3, [r7, #20]
 800355a:	2207      	movs	r2, #7
 800355c:	4013      	ands	r3, r2
 800355e:	009b      	lsls	r3, r3, #2
 8003560:	220f      	movs	r2, #15
 8003562:	409a      	lsls	r2, r3
 8003564:	0013      	movs	r3, r2
 8003566:	43da      	mvns	r2, r3
 8003568:	693b      	ldr	r3, [r7, #16]
 800356a:	4013      	ands	r3, r2
 800356c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 800356e:	683b      	ldr	r3, [r7, #0]
 8003570:	691a      	ldr	r2, [r3, #16]
 8003572:	697b      	ldr	r3, [r7, #20]
 8003574:	2107      	movs	r1, #7
 8003576:	400b      	ands	r3, r1
 8003578:	009b      	lsls	r3, r3, #2
 800357a:	409a      	lsls	r2, r3
 800357c:	0013      	movs	r3, r2
 800357e:	693a      	ldr	r2, [r7, #16]
 8003580:	4313      	orrs	r3, r2
 8003582:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8003584:	697b      	ldr	r3, [r7, #20]
 8003586:	08da      	lsrs	r2, r3, #3
 8003588:	687b      	ldr	r3, [r7, #4]
 800358a:	3208      	adds	r2, #8
 800358c:	0092      	lsls	r2, r2, #2
 800358e:	6939      	ldr	r1, [r7, #16]
 8003590:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003592:	687b      	ldr	r3, [r7, #4]
 8003594:	681b      	ldr	r3, [r3, #0]
 8003596:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8003598:	697b      	ldr	r3, [r7, #20]
 800359a:	005b      	lsls	r3, r3, #1
 800359c:	2203      	movs	r2, #3
 800359e:	409a      	lsls	r2, r3
 80035a0:	0013      	movs	r3, r2
 80035a2:	43da      	mvns	r2, r3
 80035a4:	693b      	ldr	r3, [r7, #16]
 80035a6:	4013      	ands	r3, r2
 80035a8:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 80035aa:	683b      	ldr	r3, [r7, #0]
 80035ac:	685b      	ldr	r3, [r3, #4]
 80035ae:	2203      	movs	r2, #3
 80035b0:	401a      	ands	r2, r3
 80035b2:	697b      	ldr	r3, [r7, #20]
 80035b4:	005b      	lsls	r3, r3, #1
 80035b6:	409a      	lsls	r2, r3
 80035b8:	0013      	movs	r3, r2
 80035ba:	693a      	ldr	r2, [r7, #16]
 80035bc:	4313      	orrs	r3, r2
 80035be:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80035c0:	687b      	ldr	r3, [r7, #4]
 80035c2:	693a      	ldr	r2, [r7, #16]
 80035c4:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80035c6:	683b      	ldr	r3, [r7, #0]
 80035c8:	685a      	ldr	r2, [r3, #4]
 80035ca:	23c0      	movs	r3, #192	; 0xc0
 80035cc:	029b      	lsls	r3, r3, #10
 80035ce:	4013      	ands	r3, r2
 80035d0:	d100      	bne.n	80035d4 <HAL_GPIO_Init+0x174>
 80035d2:	e098      	b.n	8003706 <HAL_GPIO_Init+0x2a6>
      {
        temp = EXTI->EXTICR[position >> 2u];
 80035d4:	4a53      	ldr	r2, [pc, #332]	; (8003724 <HAL_GPIO_Init+0x2c4>)
 80035d6:	697b      	ldr	r3, [r7, #20]
 80035d8:	089b      	lsrs	r3, r3, #2
 80035da:	3318      	adds	r3, #24
 80035dc:	009b      	lsls	r3, r3, #2
 80035de:	589b      	ldr	r3, [r3, r2]
 80035e0:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (8u * (position & 0x03u)));
 80035e2:	697b      	ldr	r3, [r7, #20]
 80035e4:	2203      	movs	r2, #3
 80035e6:	4013      	ands	r3, r2
 80035e8:	00db      	lsls	r3, r3, #3
 80035ea:	220f      	movs	r2, #15
 80035ec:	409a      	lsls	r2, r3
 80035ee:	0013      	movs	r3, r2
 80035f0:	43da      	mvns	r2, r3
 80035f2:	693b      	ldr	r3, [r7, #16]
 80035f4:	4013      	ands	r3, r2
 80035f6:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (8u * (position & 0x03u)));
 80035f8:	687a      	ldr	r2, [r7, #4]
 80035fa:	23a0      	movs	r3, #160	; 0xa0
 80035fc:	05db      	lsls	r3, r3, #23
 80035fe:	429a      	cmp	r2, r3
 8003600:	d019      	beq.n	8003636 <HAL_GPIO_Init+0x1d6>
 8003602:	687b      	ldr	r3, [r7, #4]
 8003604:	4a48      	ldr	r2, [pc, #288]	; (8003728 <HAL_GPIO_Init+0x2c8>)
 8003606:	4293      	cmp	r3, r2
 8003608:	d013      	beq.n	8003632 <HAL_GPIO_Init+0x1d2>
 800360a:	687b      	ldr	r3, [r7, #4]
 800360c:	4a47      	ldr	r2, [pc, #284]	; (800372c <HAL_GPIO_Init+0x2cc>)
 800360e:	4293      	cmp	r3, r2
 8003610:	d00d      	beq.n	800362e <HAL_GPIO_Init+0x1ce>
 8003612:	687b      	ldr	r3, [r7, #4]
 8003614:	4a46      	ldr	r2, [pc, #280]	; (8003730 <HAL_GPIO_Init+0x2d0>)
 8003616:	4293      	cmp	r3, r2
 8003618:	d007      	beq.n	800362a <HAL_GPIO_Init+0x1ca>
 800361a:	687b      	ldr	r3, [r7, #4]
 800361c:	4a45      	ldr	r2, [pc, #276]	; (8003734 <HAL_GPIO_Init+0x2d4>)
 800361e:	4293      	cmp	r3, r2
 8003620:	d101      	bne.n	8003626 <HAL_GPIO_Init+0x1c6>
 8003622:	2304      	movs	r3, #4
 8003624:	e008      	b.n	8003638 <HAL_GPIO_Init+0x1d8>
 8003626:	2305      	movs	r3, #5
 8003628:	e006      	b.n	8003638 <HAL_GPIO_Init+0x1d8>
 800362a:	2303      	movs	r3, #3
 800362c:	e004      	b.n	8003638 <HAL_GPIO_Init+0x1d8>
 800362e:	2302      	movs	r3, #2
 8003630:	e002      	b.n	8003638 <HAL_GPIO_Init+0x1d8>
 8003632:	2301      	movs	r3, #1
 8003634:	e000      	b.n	8003638 <HAL_GPIO_Init+0x1d8>
 8003636:	2300      	movs	r3, #0
 8003638:	697a      	ldr	r2, [r7, #20]
 800363a:	2103      	movs	r1, #3
 800363c:	400a      	ands	r2, r1
 800363e:	00d2      	lsls	r2, r2, #3
 8003640:	4093      	lsls	r3, r2
 8003642:	693a      	ldr	r2, [r7, #16]
 8003644:	4313      	orrs	r3, r2
 8003646:	613b      	str	r3, [r7, #16]
        EXTI->EXTICR[position >> 2u] = temp;
 8003648:	4936      	ldr	r1, [pc, #216]	; (8003724 <HAL_GPIO_Init+0x2c4>)
 800364a:	697b      	ldr	r3, [r7, #20]
 800364c:	089b      	lsrs	r3, r3, #2
 800364e:	3318      	adds	r3, #24
 8003650:	009b      	lsls	r3, r3, #2
 8003652:	693a      	ldr	r2, [r7, #16]
 8003654:	505a      	str	r2, [r3, r1]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8003656:	4b33      	ldr	r3, [pc, #204]	; (8003724 <HAL_GPIO_Init+0x2c4>)
 8003658:	681b      	ldr	r3, [r3, #0]
 800365a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800365c:	68fb      	ldr	r3, [r7, #12]
 800365e:	43da      	mvns	r2, r3
 8003660:	693b      	ldr	r3, [r7, #16]
 8003662:	4013      	ands	r3, r2
 8003664:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8003666:	683b      	ldr	r3, [r7, #0]
 8003668:	685a      	ldr	r2, [r3, #4]
 800366a:	2380      	movs	r3, #128	; 0x80
 800366c:	035b      	lsls	r3, r3, #13
 800366e:	4013      	ands	r3, r2
 8003670:	d003      	beq.n	800367a <HAL_GPIO_Init+0x21a>
        {
          temp |= iocurrent;
 8003672:	693a      	ldr	r2, [r7, #16]
 8003674:	68fb      	ldr	r3, [r7, #12]
 8003676:	4313      	orrs	r3, r2
 8003678:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 800367a:	4b2a      	ldr	r3, [pc, #168]	; (8003724 <HAL_GPIO_Init+0x2c4>)
 800367c:	693a      	ldr	r2, [r7, #16]
 800367e:	601a      	str	r2, [r3, #0]

        temp = EXTI->FTSR1;
 8003680:	4b28      	ldr	r3, [pc, #160]	; (8003724 <HAL_GPIO_Init+0x2c4>)
 8003682:	685b      	ldr	r3, [r3, #4]
 8003684:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003686:	68fb      	ldr	r3, [r7, #12]
 8003688:	43da      	mvns	r2, r3
 800368a:	693b      	ldr	r3, [r7, #16]
 800368c:	4013      	ands	r3, r2
 800368e:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8003690:	683b      	ldr	r3, [r7, #0]
 8003692:	685a      	ldr	r2, [r3, #4]
 8003694:	2380      	movs	r3, #128	; 0x80
 8003696:	039b      	lsls	r3, r3, #14
 8003698:	4013      	ands	r3, r2
 800369a:	d003      	beq.n	80036a4 <HAL_GPIO_Init+0x244>
        {
          temp |= iocurrent;
 800369c:	693a      	ldr	r2, [r7, #16]
 800369e:	68fb      	ldr	r3, [r7, #12]
 80036a0:	4313      	orrs	r3, r2
 80036a2:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 80036a4:	4b1f      	ldr	r3, [pc, #124]	; (8003724 <HAL_GPIO_Init+0x2c4>)
 80036a6:	693a      	ldr	r2, [r7, #16]
 80036a8:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 80036aa:	4a1e      	ldr	r2, [pc, #120]	; (8003724 <HAL_GPIO_Init+0x2c4>)
 80036ac:	2384      	movs	r3, #132	; 0x84
 80036ae:	58d3      	ldr	r3, [r2, r3]
 80036b0:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80036b2:	68fb      	ldr	r3, [r7, #12]
 80036b4:	43da      	mvns	r2, r3
 80036b6:	693b      	ldr	r3, [r7, #16]
 80036b8:	4013      	ands	r3, r2
 80036ba:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 80036bc:	683b      	ldr	r3, [r7, #0]
 80036be:	685a      	ldr	r2, [r3, #4]
 80036c0:	2380      	movs	r3, #128	; 0x80
 80036c2:	029b      	lsls	r3, r3, #10
 80036c4:	4013      	ands	r3, r2
 80036c6:	d003      	beq.n	80036d0 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 80036c8:	693a      	ldr	r2, [r7, #16]
 80036ca:	68fb      	ldr	r3, [r7, #12]
 80036cc:	4313      	orrs	r3, r2
 80036ce:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 80036d0:	4914      	ldr	r1, [pc, #80]	; (8003724 <HAL_GPIO_Init+0x2c4>)
 80036d2:	2284      	movs	r2, #132	; 0x84
 80036d4:	693b      	ldr	r3, [r7, #16]
 80036d6:	508b      	str	r3, [r1, r2]

        temp = EXTI->IMR1;
 80036d8:	4a12      	ldr	r2, [pc, #72]	; (8003724 <HAL_GPIO_Init+0x2c4>)
 80036da:	2380      	movs	r3, #128	; 0x80
 80036dc:	58d3      	ldr	r3, [r2, r3]
 80036de:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80036e0:	68fb      	ldr	r3, [r7, #12]
 80036e2:	43da      	mvns	r2, r3
 80036e4:	693b      	ldr	r3, [r7, #16]
 80036e6:	4013      	ands	r3, r2
 80036e8:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 80036ea:	683b      	ldr	r3, [r7, #0]
 80036ec:	685a      	ldr	r2, [r3, #4]
 80036ee:	2380      	movs	r3, #128	; 0x80
 80036f0:	025b      	lsls	r3, r3, #9
 80036f2:	4013      	ands	r3, r2
 80036f4:	d003      	beq.n	80036fe <HAL_GPIO_Init+0x29e>
        {
          temp |= iocurrent;
 80036f6:	693a      	ldr	r2, [r7, #16]
 80036f8:	68fb      	ldr	r3, [r7, #12]
 80036fa:	4313      	orrs	r3, r2
 80036fc:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 80036fe:	4909      	ldr	r1, [pc, #36]	; (8003724 <HAL_GPIO_Init+0x2c4>)
 8003700:	2280      	movs	r2, #128	; 0x80
 8003702:	693b      	ldr	r3, [r7, #16]
 8003704:	508b      	str	r3, [r1, r2]
      }
    }

    position++;
 8003706:	697b      	ldr	r3, [r7, #20]
 8003708:	3301      	adds	r3, #1
 800370a:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800370c:	683b      	ldr	r3, [r7, #0]
 800370e:	681a      	ldr	r2, [r3, #0]
 8003710:	697b      	ldr	r3, [r7, #20]
 8003712:	40da      	lsrs	r2, r3
 8003714:	1e13      	subs	r3, r2, #0
 8003716:	d000      	beq.n	800371a <HAL_GPIO_Init+0x2ba>
 8003718:	e6aa      	b.n	8003470 <HAL_GPIO_Init+0x10>
  }
}
 800371a:	46c0      	nop			; (mov r8, r8)
 800371c:	46c0      	nop			; (mov r8, r8)
 800371e:	46bd      	mov	sp, r7
 8003720:	b006      	add	sp, #24
 8003722:	bd80      	pop	{r7, pc}
 8003724:	40021800 	.word	0x40021800
 8003728:	50000400 	.word	0x50000400
 800372c:	50000800 	.word	0x50000800
 8003730:	50000c00 	.word	0x50000c00
 8003734:	50001000 	.word	0x50001000

08003738 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8003738:	b580      	push	{r7, lr}
 800373a:	b084      	sub	sp, #16
 800373c:	af00      	add	r7, sp, #0
 800373e:	6078      	str	r0, [r7, #4]
 8003740:	000a      	movs	r2, r1
 8003742:	1cbb      	adds	r3, r7, #2
 8003744:	801a      	strh	r2, [r3, #0]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00u)
 8003746:	687b      	ldr	r3, [r7, #4]
 8003748:	691b      	ldr	r3, [r3, #16]
 800374a:	1cba      	adds	r2, r7, #2
 800374c:	8812      	ldrh	r2, [r2, #0]
 800374e:	4013      	ands	r3, r2
 8003750:	d004      	beq.n	800375c <HAL_GPIO_ReadPin+0x24>
  {
    bitstatus = GPIO_PIN_SET;
 8003752:	230f      	movs	r3, #15
 8003754:	18fb      	adds	r3, r7, r3
 8003756:	2201      	movs	r2, #1
 8003758:	701a      	strb	r2, [r3, #0]
 800375a:	e003      	b.n	8003764 <HAL_GPIO_ReadPin+0x2c>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 800375c:	230f      	movs	r3, #15
 800375e:	18fb      	adds	r3, r7, r3
 8003760:	2200      	movs	r2, #0
 8003762:	701a      	strb	r2, [r3, #0]
  }
  return bitstatus;
 8003764:	230f      	movs	r3, #15
 8003766:	18fb      	adds	r3, r7, r3
 8003768:	781b      	ldrb	r3, [r3, #0]
}
 800376a:	0018      	movs	r0, r3
 800376c:	46bd      	mov	sp, r7
 800376e:	b004      	add	sp, #16
 8003770:	bd80      	pop	{r7, pc}

08003772 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003772:	b580      	push	{r7, lr}
 8003774:	b082      	sub	sp, #8
 8003776:	af00      	add	r7, sp, #0
 8003778:	6078      	str	r0, [r7, #4]
 800377a:	0008      	movs	r0, r1
 800377c:	0011      	movs	r1, r2
 800377e:	1cbb      	adds	r3, r7, #2
 8003780:	1c02      	adds	r2, r0, #0
 8003782:	801a      	strh	r2, [r3, #0]
 8003784:	1c7b      	adds	r3, r7, #1
 8003786:	1c0a      	adds	r2, r1, #0
 8003788:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 800378a:	1c7b      	adds	r3, r7, #1
 800378c:	781b      	ldrb	r3, [r3, #0]
 800378e:	2b00      	cmp	r3, #0
 8003790:	d004      	beq.n	800379c <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8003792:	1cbb      	adds	r3, r7, #2
 8003794:	881a      	ldrh	r2, [r3, #0]
 8003796:	687b      	ldr	r3, [r7, #4]
 8003798:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 800379a:	e003      	b.n	80037a4 <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 800379c:	1cbb      	adds	r3, r7, #2
 800379e:	881a      	ldrh	r2, [r3, #0]
 80037a0:	687b      	ldr	r3, [r7, #4]
 80037a2:	629a      	str	r2, [r3, #40]	; 0x28
}
 80037a4:	46c0      	nop			; (mov r8, r8)
 80037a6:	46bd      	mov	sp, r7
 80037a8:	b002      	add	sp, #8
 80037aa:	bd80      	pop	{r7, pc}

080037ac <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 80037ac:	b580      	push	{r7, lr}
 80037ae:	b082      	sub	sp, #8
 80037b0:	af00      	add	r7, sp, #0
 80037b2:	0002      	movs	r2, r0
 80037b4:	1dbb      	adds	r3, r7, #6
 80037b6:	801a      	strh	r2, [r3, #0]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_RISING_IT(GPIO_Pin) != 0x00u)
 80037b8:	4b10      	ldr	r3, [pc, #64]	; (80037fc <HAL_GPIO_EXTI_IRQHandler+0x50>)
 80037ba:	68db      	ldr	r3, [r3, #12]
 80037bc:	1dba      	adds	r2, r7, #6
 80037be:	8812      	ldrh	r2, [r2, #0]
 80037c0:	4013      	ands	r3, r2
 80037c2:	d008      	beq.n	80037d6 <HAL_GPIO_EXTI_IRQHandler+0x2a>
  {
    __HAL_GPIO_EXTI_CLEAR_RISING_IT(GPIO_Pin);
 80037c4:	4b0d      	ldr	r3, [pc, #52]	; (80037fc <HAL_GPIO_EXTI_IRQHandler+0x50>)
 80037c6:	1dba      	adds	r2, r7, #6
 80037c8:	8812      	ldrh	r2, [r2, #0]
 80037ca:	60da      	str	r2, [r3, #12]
    HAL_GPIO_EXTI_Rising_Callback(GPIO_Pin);
 80037cc:	1dbb      	adds	r3, r7, #6
 80037ce:	881b      	ldrh	r3, [r3, #0]
 80037d0:	0018      	movs	r0, r3
 80037d2:	f7ff fa27 	bl	8002c24 <HAL_GPIO_EXTI_Rising_Callback>
  }

  if (__HAL_GPIO_EXTI_GET_FALLING_IT(GPIO_Pin) != 0x00u)
 80037d6:	4b09      	ldr	r3, [pc, #36]	; (80037fc <HAL_GPIO_EXTI_IRQHandler+0x50>)
 80037d8:	691b      	ldr	r3, [r3, #16]
 80037da:	1dba      	adds	r2, r7, #6
 80037dc:	8812      	ldrh	r2, [r2, #0]
 80037de:	4013      	ands	r3, r2
 80037e0:	d008      	beq.n	80037f4 <HAL_GPIO_EXTI_IRQHandler+0x48>
  {
    __HAL_GPIO_EXTI_CLEAR_FALLING_IT(GPIO_Pin);
 80037e2:	4b06      	ldr	r3, [pc, #24]	; (80037fc <HAL_GPIO_EXTI_IRQHandler+0x50>)
 80037e4:	1dba      	adds	r2, r7, #6
 80037e6:	8812      	ldrh	r2, [r2, #0]
 80037e8:	611a      	str	r2, [r3, #16]
    HAL_GPIO_EXTI_Falling_Callback(GPIO_Pin);
 80037ea:	1dbb      	adds	r3, r7, #6
 80037ec:	881b      	ldrh	r3, [r3, #0]
 80037ee:	0018      	movs	r0, r3
 80037f0:	f000 f806 	bl	8003800 <HAL_GPIO_EXTI_Falling_Callback>
  }
}
 80037f4:	46c0      	nop			; (mov r8, r8)
 80037f6:	46bd      	mov	sp, r7
 80037f8:	b002      	add	sp, #8
 80037fa:	bd80      	pop	{r7, pc}
 80037fc:	40021800 	.word	0x40021800

08003800 <HAL_GPIO_EXTI_Falling_Callback>:
  * @brief  EXTI line detection callback.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Falling_Callback(uint16_t GPIO_Pin)
{
 8003800:	b580      	push	{r7, lr}
 8003802:	b082      	sub	sp, #8
 8003804:	af00      	add	r7, sp, #0
 8003806:	0002      	movs	r2, r0
 8003808:	1dbb      	adds	r3, r7, #6
 800380a:	801a      	strh	r2, [r3, #0]
  UNUSED(GPIO_Pin);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Falling_Callback could be implemented in the user file
   */
}
 800380c:	46c0      	nop			; (mov r8, r8)
 800380e:	46bd      	mov	sp, r7
 8003810:	b002      	add	sp, #8
 8003812:	bd80      	pop	{r7, pc}

08003814 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        6 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8003814:	b580      	push	{r7, lr}
 8003816:	b084      	sub	sp, #16
 8003818:	af00      	add	r7, sp, #0
 800381a:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  /* Modify voltage scaling range */
  MODIFY_REG(PWR->CR1, PWR_CR1_VOS, VoltageScaling);
 800381c:	4b19      	ldr	r3, [pc, #100]	; (8003884 <HAL_PWREx_ControlVoltageScaling+0x70>)
 800381e:	681b      	ldr	r3, [r3, #0]
 8003820:	4a19      	ldr	r2, [pc, #100]	; (8003888 <HAL_PWREx_ControlVoltageScaling+0x74>)
 8003822:	4013      	ands	r3, r2
 8003824:	0019      	movs	r1, r3
 8003826:	4b17      	ldr	r3, [pc, #92]	; (8003884 <HAL_PWREx_ControlVoltageScaling+0x70>)
 8003828:	687a      	ldr	r2, [r7, #4]
 800382a:	430a      	orrs	r2, r1
 800382c:	601a      	str	r2, [r3, #0]

  /* In case of Range 1 selected, we need to ensure that main regulator reaches new value */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 800382e:	687a      	ldr	r2, [r7, #4]
 8003830:	2380      	movs	r3, #128	; 0x80
 8003832:	009b      	lsls	r3, r3, #2
 8003834:	429a      	cmp	r2, r3
 8003836:	d11f      	bne.n	8003878 <HAL_PWREx_ControlVoltageScaling+0x64>
  {
    /* Set timeout value */
    wait_loop_index = ((PWR_VOSF_SETTING_DELAY_6_US * SystemCoreClock) / 1000000U) + 1U;
 8003838:	4b14      	ldr	r3, [pc, #80]	; (800388c <HAL_PWREx_ControlVoltageScaling+0x78>)
 800383a:	681a      	ldr	r2, [r3, #0]
 800383c:	0013      	movs	r3, r2
 800383e:	005b      	lsls	r3, r3, #1
 8003840:	189b      	adds	r3, r3, r2
 8003842:	005b      	lsls	r3, r3, #1
 8003844:	4912      	ldr	r1, [pc, #72]	; (8003890 <HAL_PWREx_ControlVoltageScaling+0x7c>)
 8003846:	0018      	movs	r0, r3
 8003848:	f7fc fc78 	bl	800013c <__udivsi3>
 800384c:	0003      	movs	r3, r0
 800384e:	3301      	adds	r3, #1
 8003850:	60fb      	str	r3, [r7, #12]

    /* Wait until VOSF is reset */
    while (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8003852:	e008      	b.n	8003866 <HAL_PWREx_ControlVoltageScaling+0x52>
    {
      if (wait_loop_index != 0U)
 8003854:	68fb      	ldr	r3, [r7, #12]
 8003856:	2b00      	cmp	r3, #0
 8003858:	d003      	beq.n	8003862 <HAL_PWREx_ControlVoltageScaling+0x4e>
      {
        wait_loop_index--;
 800385a:	68fb      	ldr	r3, [r7, #12]
 800385c:	3b01      	subs	r3, #1
 800385e:	60fb      	str	r3, [r7, #12]
 8003860:	e001      	b.n	8003866 <HAL_PWREx_ControlVoltageScaling+0x52>
      }
      else
      {
        return HAL_TIMEOUT;
 8003862:	2303      	movs	r3, #3
 8003864:	e009      	b.n	800387a <HAL_PWREx_ControlVoltageScaling+0x66>
    while (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8003866:	4b07      	ldr	r3, [pc, #28]	; (8003884 <HAL_PWREx_ControlVoltageScaling+0x70>)
 8003868:	695a      	ldr	r2, [r3, #20]
 800386a:	2380      	movs	r3, #128	; 0x80
 800386c:	00db      	lsls	r3, r3, #3
 800386e:	401a      	ands	r2, r3
 8003870:	2380      	movs	r3, #128	; 0x80
 8003872:	00db      	lsls	r3, r3, #3
 8003874:	429a      	cmp	r2, r3
 8003876:	d0ed      	beq.n	8003854 <HAL_PWREx_ControlVoltageScaling+0x40>
      }
    }
  }

  return HAL_OK;
 8003878:	2300      	movs	r3, #0
}
 800387a:	0018      	movs	r0, r3
 800387c:	46bd      	mov	sp, r7
 800387e:	b004      	add	sp, #16
 8003880:	bd80      	pop	{r7, pc}
 8003882:	46c0      	nop			; (mov r8, r8)
 8003884:	40007000 	.word	0x40007000
 8003888:	fffff9ff 	.word	0xfffff9ff
 800388c:	20000004 	.word	0x20000004
 8003890:	000f4240 	.word	0x000f4240

08003894 <LL_RCC_GetAPB1Prescaler>:
  *         @arg @ref LL_RCC_APB1_DIV_4
  *         @arg @ref LL_RCC_APB1_DIV_8
  *         @arg @ref LL_RCC_APB1_DIV_16
  */
__STATIC_INLINE uint32_t LL_RCC_GetAPB1Prescaler(void)
{
 8003894:	b580      	push	{r7, lr}
 8003896:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE));
 8003898:	4b03      	ldr	r3, [pc, #12]	; (80038a8 <LL_RCC_GetAPB1Prescaler+0x14>)
 800389a:	689a      	ldr	r2, [r3, #8]
 800389c:	23e0      	movs	r3, #224	; 0xe0
 800389e:	01db      	lsls	r3, r3, #7
 80038a0:	4013      	ands	r3, r2
}
 80038a2:	0018      	movs	r0, r3
 80038a4:	46bd      	mov	sp, r7
 80038a6:	bd80      	pop	{r7, pc}
 80038a8:	40021000 	.word	0x40021000

080038ac <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to LSE Off
  *         first and then to LSE On or LSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80038ac:	b580      	push	{r7, lr}
 80038ae:	b088      	sub	sp, #32
 80038b0:	af00      	add	r7, sp, #0
 80038b2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80038b4:	687b      	ldr	r3, [r7, #4]
 80038b6:	2b00      	cmp	r3, #0
 80038b8:	d102      	bne.n	80038c0 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 80038ba:	2301      	movs	r3, #1
 80038bc:	f000 fb50 	bl	8003f60 <HAL_RCC_OscConfig+0x6b4>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80038c0:	687b      	ldr	r3, [r7, #4]
 80038c2:	681b      	ldr	r3, [r3, #0]
 80038c4:	2201      	movs	r2, #1
 80038c6:	4013      	ands	r3, r2
 80038c8:	d100      	bne.n	80038cc <HAL_RCC_OscConfig+0x20>
 80038ca:	e07c      	b.n	80039c6 <HAL_RCC_OscConfig+0x11a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80038cc:	4bc3      	ldr	r3, [pc, #780]	; (8003bdc <HAL_RCC_OscConfig+0x330>)
 80038ce:	689b      	ldr	r3, [r3, #8]
 80038d0:	2238      	movs	r2, #56	; 0x38
 80038d2:	4013      	ands	r3, r2
 80038d4:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 80038d6:	4bc1      	ldr	r3, [pc, #772]	; (8003bdc <HAL_RCC_OscConfig+0x330>)
 80038d8:	68db      	ldr	r3, [r3, #12]
 80038da:	2203      	movs	r2, #3
 80038dc:	4013      	ands	r3, r2
 80038de:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckcfg == RCC_PLLSOURCE_HSE))
 80038e0:	69bb      	ldr	r3, [r7, #24]
 80038e2:	2b10      	cmp	r3, #16
 80038e4:	d102      	bne.n	80038ec <HAL_RCC_OscConfig+0x40>
 80038e6:	697b      	ldr	r3, [r7, #20]
 80038e8:	2b03      	cmp	r3, #3
 80038ea:	d002      	beq.n	80038f2 <HAL_RCC_OscConfig+0x46>
        || (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSE))
 80038ec:	69bb      	ldr	r3, [r7, #24]
 80038ee:	2b08      	cmp	r3, #8
 80038f0:	d10b      	bne.n	800390a <HAL_RCC_OscConfig+0x5e>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80038f2:	4bba      	ldr	r3, [pc, #744]	; (8003bdc <HAL_RCC_OscConfig+0x330>)
 80038f4:	681a      	ldr	r2, [r3, #0]
 80038f6:	2380      	movs	r3, #128	; 0x80
 80038f8:	029b      	lsls	r3, r3, #10
 80038fa:	4013      	ands	r3, r2
 80038fc:	d062      	beq.n	80039c4 <HAL_RCC_OscConfig+0x118>
 80038fe:	687b      	ldr	r3, [r7, #4]
 8003900:	685b      	ldr	r3, [r3, #4]
 8003902:	2b00      	cmp	r3, #0
 8003904:	d15e      	bne.n	80039c4 <HAL_RCC_OscConfig+0x118>
      {
        return HAL_ERROR;
 8003906:	2301      	movs	r3, #1
 8003908:	e32a      	b.n	8003f60 <HAL_RCC_OscConfig+0x6b4>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800390a:	687b      	ldr	r3, [r7, #4]
 800390c:	685a      	ldr	r2, [r3, #4]
 800390e:	2380      	movs	r3, #128	; 0x80
 8003910:	025b      	lsls	r3, r3, #9
 8003912:	429a      	cmp	r2, r3
 8003914:	d107      	bne.n	8003926 <HAL_RCC_OscConfig+0x7a>
 8003916:	4bb1      	ldr	r3, [pc, #708]	; (8003bdc <HAL_RCC_OscConfig+0x330>)
 8003918:	681a      	ldr	r2, [r3, #0]
 800391a:	4bb0      	ldr	r3, [pc, #704]	; (8003bdc <HAL_RCC_OscConfig+0x330>)
 800391c:	2180      	movs	r1, #128	; 0x80
 800391e:	0249      	lsls	r1, r1, #9
 8003920:	430a      	orrs	r2, r1
 8003922:	601a      	str	r2, [r3, #0]
 8003924:	e020      	b.n	8003968 <HAL_RCC_OscConfig+0xbc>
 8003926:	687b      	ldr	r3, [r7, #4]
 8003928:	685a      	ldr	r2, [r3, #4]
 800392a:	23a0      	movs	r3, #160	; 0xa0
 800392c:	02db      	lsls	r3, r3, #11
 800392e:	429a      	cmp	r2, r3
 8003930:	d10e      	bne.n	8003950 <HAL_RCC_OscConfig+0xa4>
 8003932:	4baa      	ldr	r3, [pc, #680]	; (8003bdc <HAL_RCC_OscConfig+0x330>)
 8003934:	681a      	ldr	r2, [r3, #0]
 8003936:	4ba9      	ldr	r3, [pc, #676]	; (8003bdc <HAL_RCC_OscConfig+0x330>)
 8003938:	2180      	movs	r1, #128	; 0x80
 800393a:	02c9      	lsls	r1, r1, #11
 800393c:	430a      	orrs	r2, r1
 800393e:	601a      	str	r2, [r3, #0]
 8003940:	4ba6      	ldr	r3, [pc, #664]	; (8003bdc <HAL_RCC_OscConfig+0x330>)
 8003942:	681a      	ldr	r2, [r3, #0]
 8003944:	4ba5      	ldr	r3, [pc, #660]	; (8003bdc <HAL_RCC_OscConfig+0x330>)
 8003946:	2180      	movs	r1, #128	; 0x80
 8003948:	0249      	lsls	r1, r1, #9
 800394a:	430a      	orrs	r2, r1
 800394c:	601a      	str	r2, [r3, #0]
 800394e:	e00b      	b.n	8003968 <HAL_RCC_OscConfig+0xbc>
 8003950:	4ba2      	ldr	r3, [pc, #648]	; (8003bdc <HAL_RCC_OscConfig+0x330>)
 8003952:	681a      	ldr	r2, [r3, #0]
 8003954:	4ba1      	ldr	r3, [pc, #644]	; (8003bdc <HAL_RCC_OscConfig+0x330>)
 8003956:	49a2      	ldr	r1, [pc, #648]	; (8003be0 <HAL_RCC_OscConfig+0x334>)
 8003958:	400a      	ands	r2, r1
 800395a:	601a      	str	r2, [r3, #0]
 800395c:	4b9f      	ldr	r3, [pc, #636]	; (8003bdc <HAL_RCC_OscConfig+0x330>)
 800395e:	681a      	ldr	r2, [r3, #0]
 8003960:	4b9e      	ldr	r3, [pc, #632]	; (8003bdc <HAL_RCC_OscConfig+0x330>)
 8003962:	49a0      	ldr	r1, [pc, #640]	; (8003be4 <HAL_RCC_OscConfig+0x338>)
 8003964:	400a      	ands	r2, r1
 8003966:	601a      	str	r2, [r3, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8003968:	687b      	ldr	r3, [r7, #4]
 800396a:	685b      	ldr	r3, [r3, #4]
 800396c:	2b00      	cmp	r3, #0
 800396e:	d014      	beq.n	800399a <HAL_RCC_OscConfig+0xee>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003970:	f7ff fc3e 	bl	80031f0 <HAL_GetTick>
 8003974:	0003      	movs	r3, r0
 8003976:	613b      	str	r3, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003978:	e008      	b.n	800398c <HAL_RCC_OscConfig+0xe0>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800397a:	f7ff fc39 	bl	80031f0 <HAL_GetTick>
 800397e:	0002      	movs	r2, r0
 8003980:	693b      	ldr	r3, [r7, #16]
 8003982:	1ad3      	subs	r3, r2, r3
 8003984:	2b64      	cmp	r3, #100	; 0x64
 8003986:	d901      	bls.n	800398c <HAL_RCC_OscConfig+0xe0>
          {
            return HAL_TIMEOUT;
 8003988:	2303      	movs	r3, #3
 800398a:	e2e9      	b.n	8003f60 <HAL_RCC_OscConfig+0x6b4>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800398c:	4b93      	ldr	r3, [pc, #588]	; (8003bdc <HAL_RCC_OscConfig+0x330>)
 800398e:	681a      	ldr	r2, [r3, #0]
 8003990:	2380      	movs	r3, #128	; 0x80
 8003992:	029b      	lsls	r3, r3, #10
 8003994:	4013      	ands	r3, r2
 8003996:	d0f0      	beq.n	800397a <HAL_RCC_OscConfig+0xce>
 8003998:	e015      	b.n	80039c6 <HAL_RCC_OscConfig+0x11a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800399a:	f7ff fc29 	bl	80031f0 <HAL_GetTick>
 800399e:	0003      	movs	r3, r0
 80039a0:	613b      	str	r3, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80039a2:	e008      	b.n	80039b6 <HAL_RCC_OscConfig+0x10a>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80039a4:	f7ff fc24 	bl	80031f0 <HAL_GetTick>
 80039a8:	0002      	movs	r2, r0
 80039aa:	693b      	ldr	r3, [r7, #16]
 80039ac:	1ad3      	subs	r3, r2, r3
 80039ae:	2b64      	cmp	r3, #100	; 0x64
 80039b0:	d901      	bls.n	80039b6 <HAL_RCC_OscConfig+0x10a>
          {
            return HAL_TIMEOUT;
 80039b2:	2303      	movs	r3, #3
 80039b4:	e2d4      	b.n	8003f60 <HAL_RCC_OscConfig+0x6b4>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80039b6:	4b89      	ldr	r3, [pc, #548]	; (8003bdc <HAL_RCC_OscConfig+0x330>)
 80039b8:	681a      	ldr	r2, [r3, #0]
 80039ba:	2380      	movs	r3, #128	; 0x80
 80039bc:	029b      	lsls	r3, r3, #10
 80039be:	4013      	ands	r3, r2
 80039c0:	d1f0      	bne.n	80039a4 <HAL_RCC_OscConfig+0xf8>
 80039c2:	e000      	b.n	80039c6 <HAL_RCC_OscConfig+0x11a>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80039c4:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80039c6:	687b      	ldr	r3, [r7, #4]
 80039c8:	681b      	ldr	r3, [r3, #0]
 80039ca:	2202      	movs	r2, #2
 80039cc:	4013      	ands	r3, r2
 80039ce:	d100      	bne.n	80039d2 <HAL_RCC_OscConfig+0x126>
 80039d0:	e099      	b.n	8003b06 <HAL_RCC_OscConfig+0x25a>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    assert_param(IS_RCC_HSIDIV(RCC_OscInitStruct->HSIDiv));

    /* Check if HSI16 is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80039d2:	4b82      	ldr	r3, [pc, #520]	; (8003bdc <HAL_RCC_OscConfig+0x330>)
 80039d4:	689b      	ldr	r3, [r3, #8]
 80039d6:	2238      	movs	r2, #56	; 0x38
 80039d8:	4013      	ands	r3, r2
 80039da:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 80039dc:	4b7f      	ldr	r3, [pc, #508]	; (8003bdc <HAL_RCC_OscConfig+0x330>)
 80039de:	68db      	ldr	r3, [r3, #12]
 80039e0:	2203      	movs	r2, #3
 80039e2:	4013      	ands	r3, r2
 80039e4:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckcfg == RCC_PLLSOURCE_HSI))
 80039e6:	69bb      	ldr	r3, [r7, #24]
 80039e8:	2b10      	cmp	r3, #16
 80039ea:	d102      	bne.n	80039f2 <HAL_RCC_OscConfig+0x146>
 80039ec:	697b      	ldr	r3, [r7, #20]
 80039ee:	2b02      	cmp	r3, #2
 80039f0:	d002      	beq.n	80039f8 <HAL_RCC_OscConfig+0x14c>
        || (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI))
 80039f2:	69bb      	ldr	r3, [r7, #24]
 80039f4:	2b00      	cmp	r3, #0
 80039f6:	d135      	bne.n	8003a64 <HAL_RCC_OscConfig+0x1b8>
    {
      /* When HSI is used as system clock or as PLL input clock it can not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80039f8:	4b78      	ldr	r3, [pc, #480]	; (8003bdc <HAL_RCC_OscConfig+0x330>)
 80039fa:	681a      	ldr	r2, [r3, #0]
 80039fc:	2380      	movs	r3, #128	; 0x80
 80039fe:	00db      	lsls	r3, r3, #3
 8003a00:	4013      	ands	r3, r2
 8003a02:	d005      	beq.n	8003a10 <HAL_RCC_OscConfig+0x164>
 8003a04:	687b      	ldr	r3, [r7, #4]
 8003a06:	68db      	ldr	r3, [r3, #12]
 8003a08:	2b00      	cmp	r3, #0
 8003a0a:	d101      	bne.n	8003a10 <HAL_RCC_OscConfig+0x164>
      {
        return HAL_ERROR;
 8003a0c:	2301      	movs	r3, #1
 8003a0e:	e2a7      	b.n	8003f60 <HAL_RCC_OscConfig+0x6b4>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003a10:	4b72      	ldr	r3, [pc, #456]	; (8003bdc <HAL_RCC_OscConfig+0x330>)
 8003a12:	685b      	ldr	r3, [r3, #4]
 8003a14:	4a74      	ldr	r2, [pc, #464]	; (8003be8 <HAL_RCC_OscConfig+0x33c>)
 8003a16:	4013      	ands	r3, r2
 8003a18:	0019      	movs	r1, r3
 8003a1a:	687b      	ldr	r3, [r7, #4]
 8003a1c:	695b      	ldr	r3, [r3, #20]
 8003a1e:	021a      	lsls	r2, r3, #8
 8003a20:	4b6e      	ldr	r3, [pc, #440]	; (8003bdc <HAL_RCC_OscConfig+0x330>)
 8003a22:	430a      	orrs	r2, r1
 8003a24:	605a      	str	r2, [r3, #4]

        if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI)
 8003a26:	69bb      	ldr	r3, [r7, #24]
 8003a28:	2b00      	cmp	r3, #0
 8003a2a:	d112      	bne.n	8003a52 <HAL_RCC_OscConfig+0x1a6>
        {
          /* Adjust the HSI16 division factor */
          __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 8003a2c:	4b6b      	ldr	r3, [pc, #428]	; (8003bdc <HAL_RCC_OscConfig+0x330>)
 8003a2e:	681b      	ldr	r3, [r3, #0]
 8003a30:	4a6e      	ldr	r2, [pc, #440]	; (8003bec <HAL_RCC_OscConfig+0x340>)
 8003a32:	4013      	ands	r3, r2
 8003a34:	0019      	movs	r1, r3
 8003a36:	687b      	ldr	r3, [r7, #4]
 8003a38:	691a      	ldr	r2, [r3, #16]
 8003a3a:	4b68      	ldr	r3, [pc, #416]	; (8003bdc <HAL_RCC_OscConfig+0x330>)
 8003a3c:	430a      	orrs	r2, r1
 8003a3e:	601a      	str	r2, [r3, #0]

          /* Update the SystemCoreClock global variable with HSISYS value  */
          SystemCoreClock = (HSI_VALUE / (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos)));
 8003a40:	4b66      	ldr	r3, [pc, #408]	; (8003bdc <HAL_RCC_OscConfig+0x330>)
 8003a42:	681b      	ldr	r3, [r3, #0]
 8003a44:	0adb      	lsrs	r3, r3, #11
 8003a46:	2207      	movs	r2, #7
 8003a48:	4013      	ands	r3, r2
 8003a4a:	4a69      	ldr	r2, [pc, #420]	; (8003bf0 <HAL_RCC_OscConfig+0x344>)
 8003a4c:	40da      	lsrs	r2, r3
 8003a4e:	4b69      	ldr	r3, [pc, #420]	; (8003bf4 <HAL_RCC_OscConfig+0x348>)
 8003a50:	601a      	str	r2, [r3, #0]
        }

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8003a52:	4b69      	ldr	r3, [pc, #420]	; (8003bf8 <HAL_RCC_OscConfig+0x34c>)
 8003a54:	681b      	ldr	r3, [r3, #0]
 8003a56:	0018      	movs	r0, r3
 8003a58:	f7ff fb6e 	bl	8003138 <HAL_InitTick>
 8003a5c:	1e03      	subs	r3, r0, #0
 8003a5e:	d051      	beq.n	8003b04 <HAL_RCC_OscConfig+0x258>
        {
          return HAL_ERROR;
 8003a60:	2301      	movs	r3, #1
 8003a62:	e27d      	b.n	8003f60 <HAL_RCC_OscConfig+0x6b4>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8003a64:	687b      	ldr	r3, [r7, #4]
 8003a66:	68db      	ldr	r3, [r3, #12]
 8003a68:	2b00      	cmp	r3, #0
 8003a6a:	d030      	beq.n	8003ace <HAL_RCC_OscConfig+0x222>
      {
        /* Configure the HSI16 division factor */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 8003a6c:	4b5b      	ldr	r3, [pc, #364]	; (8003bdc <HAL_RCC_OscConfig+0x330>)
 8003a6e:	681b      	ldr	r3, [r3, #0]
 8003a70:	4a5e      	ldr	r2, [pc, #376]	; (8003bec <HAL_RCC_OscConfig+0x340>)
 8003a72:	4013      	ands	r3, r2
 8003a74:	0019      	movs	r1, r3
 8003a76:	687b      	ldr	r3, [r7, #4]
 8003a78:	691a      	ldr	r2, [r3, #16]
 8003a7a:	4b58      	ldr	r3, [pc, #352]	; (8003bdc <HAL_RCC_OscConfig+0x330>)
 8003a7c:	430a      	orrs	r2, r1
 8003a7e:	601a      	str	r2, [r3, #0]

        /* Enable the Internal High Speed oscillator (HSI16). */
        __HAL_RCC_HSI_ENABLE();
 8003a80:	4b56      	ldr	r3, [pc, #344]	; (8003bdc <HAL_RCC_OscConfig+0x330>)
 8003a82:	681a      	ldr	r2, [r3, #0]
 8003a84:	4b55      	ldr	r3, [pc, #340]	; (8003bdc <HAL_RCC_OscConfig+0x330>)
 8003a86:	2180      	movs	r1, #128	; 0x80
 8003a88:	0049      	lsls	r1, r1, #1
 8003a8a:	430a      	orrs	r2, r1
 8003a8c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003a8e:	f7ff fbaf 	bl	80031f0 <HAL_GetTick>
 8003a92:	0003      	movs	r3, r0
 8003a94:	613b      	str	r3, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003a96:	e008      	b.n	8003aaa <HAL_RCC_OscConfig+0x1fe>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003a98:	f7ff fbaa 	bl	80031f0 <HAL_GetTick>
 8003a9c:	0002      	movs	r2, r0
 8003a9e:	693b      	ldr	r3, [r7, #16]
 8003aa0:	1ad3      	subs	r3, r2, r3
 8003aa2:	2b02      	cmp	r3, #2
 8003aa4:	d901      	bls.n	8003aaa <HAL_RCC_OscConfig+0x1fe>
          {
            return HAL_TIMEOUT;
 8003aa6:	2303      	movs	r3, #3
 8003aa8:	e25a      	b.n	8003f60 <HAL_RCC_OscConfig+0x6b4>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003aaa:	4b4c      	ldr	r3, [pc, #304]	; (8003bdc <HAL_RCC_OscConfig+0x330>)
 8003aac:	681a      	ldr	r2, [r3, #0]
 8003aae:	2380      	movs	r3, #128	; 0x80
 8003ab0:	00db      	lsls	r3, r3, #3
 8003ab2:	4013      	ands	r3, r2
 8003ab4:	d0f0      	beq.n	8003a98 <HAL_RCC_OscConfig+0x1ec>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003ab6:	4b49      	ldr	r3, [pc, #292]	; (8003bdc <HAL_RCC_OscConfig+0x330>)
 8003ab8:	685b      	ldr	r3, [r3, #4]
 8003aba:	4a4b      	ldr	r2, [pc, #300]	; (8003be8 <HAL_RCC_OscConfig+0x33c>)
 8003abc:	4013      	ands	r3, r2
 8003abe:	0019      	movs	r1, r3
 8003ac0:	687b      	ldr	r3, [r7, #4]
 8003ac2:	695b      	ldr	r3, [r3, #20]
 8003ac4:	021a      	lsls	r2, r3, #8
 8003ac6:	4b45      	ldr	r3, [pc, #276]	; (8003bdc <HAL_RCC_OscConfig+0x330>)
 8003ac8:	430a      	orrs	r2, r1
 8003aca:	605a      	str	r2, [r3, #4]
 8003acc:	e01b      	b.n	8003b06 <HAL_RCC_OscConfig+0x25a>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI16). */
        __HAL_RCC_HSI_DISABLE();
 8003ace:	4b43      	ldr	r3, [pc, #268]	; (8003bdc <HAL_RCC_OscConfig+0x330>)
 8003ad0:	681a      	ldr	r2, [r3, #0]
 8003ad2:	4b42      	ldr	r3, [pc, #264]	; (8003bdc <HAL_RCC_OscConfig+0x330>)
 8003ad4:	4949      	ldr	r1, [pc, #292]	; (8003bfc <HAL_RCC_OscConfig+0x350>)
 8003ad6:	400a      	ands	r2, r1
 8003ad8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003ada:	f7ff fb89 	bl	80031f0 <HAL_GetTick>
 8003ade:	0003      	movs	r3, r0
 8003ae0:	613b      	str	r3, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8003ae2:	e008      	b.n	8003af6 <HAL_RCC_OscConfig+0x24a>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003ae4:	f7ff fb84 	bl	80031f0 <HAL_GetTick>
 8003ae8:	0002      	movs	r2, r0
 8003aea:	693b      	ldr	r3, [r7, #16]
 8003aec:	1ad3      	subs	r3, r2, r3
 8003aee:	2b02      	cmp	r3, #2
 8003af0:	d901      	bls.n	8003af6 <HAL_RCC_OscConfig+0x24a>
          {
            return HAL_TIMEOUT;
 8003af2:	2303      	movs	r3, #3
 8003af4:	e234      	b.n	8003f60 <HAL_RCC_OscConfig+0x6b4>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8003af6:	4b39      	ldr	r3, [pc, #228]	; (8003bdc <HAL_RCC_OscConfig+0x330>)
 8003af8:	681a      	ldr	r2, [r3, #0]
 8003afa:	2380      	movs	r3, #128	; 0x80
 8003afc:	00db      	lsls	r3, r3, #3
 8003afe:	4013      	ands	r3, r2
 8003b00:	d1f0      	bne.n	8003ae4 <HAL_RCC_OscConfig+0x238>
 8003b02:	e000      	b.n	8003b06 <HAL_RCC_OscConfig+0x25a>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003b04:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003b06:	687b      	ldr	r3, [r7, #4]
 8003b08:	681b      	ldr	r3, [r3, #0]
 8003b0a:	2208      	movs	r2, #8
 8003b0c:	4013      	ands	r3, r2
 8003b0e:	d047      	beq.n	8003ba0 <HAL_RCC_OscConfig+0x2f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check if LSI is used as system clock */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSI)
 8003b10:	4b32      	ldr	r3, [pc, #200]	; (8003bdc <HAL_RCC_OscConfig+0x330>)
 8003b12:	689b      	ldr	r3, [r3, #8]
 8003b14:	2238      	movs	r2, #56	; 0x38
 8003b16:	4013      	ands	r3, r2
 8003b18:	2b18      	cmp	r3, #24
 8003b1a:	d10a      	bne.n	8003b32 <HAL_RCC_OscConfig+0x286>
    {
      /* When LSI is used as system clock it will not be disabled */
      if ((((RCC->CSR) & RCC_CSR_LSIRDY) != 0U) && (RCC_OscInitStruct->LSIState == RCC_LSI_OFF))
 8003b1c:	4b2f      	ldr	r3, [pc, #188]	; (8003bdc <HAL_RCC_OscConfig+0x330>)
 8003b1e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003b20:	2202      	movs	r2, #2
 8003b22:	4013      	ands	r3, r2
 8003b24:	d03c      	beq.n	8003ba0 <HAL_RCC_OscConfig+0x2f4>
 8003b26:	687b      	ldr	r3, [r7, #4]
 8003b28:	699b      	ldr	r3, [r3, #24]
 8003b2a:	2b00      	cmp	r3, #0
 8003b2c:	d138      	bne.n	8003ba0 <HAL_RCC_OscConfig+0x2f4>
      {
        return HAL_ERROR;
 8003b2e:	2301      	movs	r3, #1
 8003b30:	e216      	b.n	8003f60 <HAL_RCC_OscConfig+0x6b4>
      }
    }
    else
    {
      /* Check the LSI State */
      if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8003b32:	687b      	ldr	r3, [r7, #4]
 8003b34:	699b      	ldr	r3, [r3, #24]
 8003b36:	2b00      	cmp	r3, #0
 8003b38:	d019      	beq.n	8003b6e <HAL_RCC_OscConfig+0x2c2>
      {
        /* Enable the Internal Low Speed oscillator (LSI). */
        __HAL_RCC_LSI_ENABLE();
 8003b3a:	4b28      	ldr	r3, [pc, #160]	; (8003bdc <HAL_RCC_OscConfig+0x330>)
 8003b3c:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8003b3e:	4b27      	ldr	r3, [pc, #156]	; (8003bdc <HAL_RCC_OscConfig+0x330>)
 8003b40:	2101      	movs	r1, #1
 8003b42:	430a      	orrs	r2, r1
 8003b44:	661a      	str	r2, [r3, #96]	; 0x60

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003b46:	f7ff fb53 	bl	80031f0 <HAL_GetTick>
 8003b4a:	0003      	movs	r3, r0
 8003b4c:	613b      	str	r3, [r7, #16]

        /* Wait till LSI is ready */
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8003b4e:	e008      	b.n	8003b62 <HAL_RCC_OscConfig+0x2b6>
        {
          if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003b50:	f7ff fb4e 	bl	80031f0 <HAL_GetTick>
 8003b54:	0002      	movs	r2, r0
 8003b56:	693b      	ldr	r3, [r7, #16]
 8003b58:	1ad3      	subs	r3, r2, r3
 8003b5a:	2b02      	cmp	r3, #2
 8003b5c:	d901      	bls.n	8003b62 <HAL_RCC_OscConfig+0x2b6>
          {
            return HAL_TIMEOUT;
 8003b5e:	2303      	movs	r3, #3
 8003b60:	e1fe      	b.n	8003f60 <HAL_RCC_OscConfig+0x6b4>
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8003b62:	4b1e      	ldr	r3, [pc, #120]	; (8003bdc <HAL_RCC_OscConfig+0x330>)
 8003b64:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003b66:	2202      	movs	r2, #2
 8003b68:	4013      	ands	r3, r2
 8003b6a:	d0f1      	beq.n	8003b50 <HAL_RCC_OscConfig+0x2a4>
 8003b6c:	e018      	b.n	8003ba0 <HAL_RCC_OscConfig+0x2f4>
        }
      }
      else
      {
        /* Disable the Internal Low Speed oscillator (LSI). */
        __HAL_RCC_LSI_DISABLE();
 8003b6e:	4b1b      	ldr	r3, [pc, #108]	; (8003bdc <HAL_RCC_OscConfig+0x330>)
 8003b70:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8003b72:	4b1a      	ldr	r3, [pc, #104]	; (8003bdc <HAL_RCC_OscConfig+0x330>)
 8003b74:	2101      	movs	r1, #1
 8003b76:	438a      	bics	r2, r1
 8003b78:	661a      	str	r2, [r3, #96]	; 0x60

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003b7a:	f7ff fb39 	bl	80031f0 <HAL_GetTick>
 8003b7e:	0003      	movs	r3, r0
 8003b80:	613b      	str	r3, [r7, #16]

        /* Wait till LSI is disabled */
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8003b82:	e008      	b.n	8003b96 <HAL_RCC_OscConfig+0x2ea>
        {
          if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003b84:	f7ff fb34 	bl	80031f0 <HAL_GetTick>
 8003b88:	0002      	movs	r2, r0
 8003b8a:	693b      	ldr	r3, [r7, #16]
 8003b8c:	1ad3      	subs	r3, r2, r3
 8003b8e:	2b02      	cmp	r3, #2
 8003b90:	d901      	bls.n	8003b96 <HAL_RCC_OscConfig+0x2ea>
          {
            return HAL_TIMEOUT;
 8003b92:	2303      	movs	r3, #3
 8003b94:	e1e4      	b.n	8003f60 <HAL_RCC_OscConfig+0x6b4>
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8003b96:	4b11      	ldr	r3, [pc, #68]	; (8003bdc <HAL_RCC_OscConfig+0x330>)
 8003b98:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003b9a:	2202      	movs	r2, #2
 8003b9c:	4013      	ands	r3, r2
 8003b9e:	d1f1      	bne.n	8003b84 <HAL_RCC_OscConfig+0x2d8>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003ba0:	687b      	ldr	r3, [r7, #4]
 8003ba2:	681b      	ldr	r3, [r3, #0]
 8003ba4:	2204      	movs	r2, #4
 8003ba6:	4013      	ands	r3, r2
 8003ba8:	d100      	bne.n	8003bac <HAL_RCC_OscConfig+0x300>
 8003baa:	e0c7      	b.n	8003d3c <HAL_RCC_OscConfig+0x490>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003bac:	231f      	movs	r3, #31
 8003bae:	18fb      	adds	r3, r7, r3
 8003bb0:	2200      	movs	r2, #0
 8003bb2:	701a      	strb	r2, [r3, #0]

    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* When the LSE is used as system clock, it is not allowed disable it */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSE)
 8003bb4:	4b09      	ldr	r3, [pc, #36]	; (8003bdc <HAL_RCC_OscConfig+0x330>)
 8003bb6:	689b      	ldr	r3, [r3, #8]
 8003bb8:	2238      	movs	r2, #56	; 0x38
 8003bba:	4013      	ands	r3, r2
 8003bbc:	2b20      	cmp	r3, #32
 8003bbe:	d11f      	bne.n	8003c00 <HAL_RCC_OscConfig+0x354>
    {
      if ((((RCC->BDCR) & RCC_BDCR_LSERDY) != 0U) && (RCC_OscInitStruct->LSEState == RCC_LSE_OFF))
 8003bc0:	4b06      	ldr	r3, [pc, #24]	; (8003bdc <HAL_RCC_OscConfig+0x330>)
 8003bc2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003bc4:	2202      	movs	r2, #2
 8003bc6:	4013      	ands	r3, r2
 8003bc8:	d100      	bne.n	8003bcc <HAL_RCC_OscConfig+0x320>
 8003bca:	e0b7      	b.n	8003d3c <HAL_RCC_OscConfig+0x490>
 8003bcc:	687b      	ldr	r3, [r7, #4]
 8003bce:	689b      	ldr	r3, [r3, #8]
 8003bd0:	2b00      	cmp	r3, #0
 8003bd2:	d000      	beq.n	8003bd6 <HAL_RCC_OscConfig+0x32a>
 8003bd4:	e0b2      	b.n	8003d3c <HAL_RCC_OscConfig+0x490>
      {
        return HAL_ERROR;
 8003bd6:	2301      	movs	r3, #1
 8003bd8:	e1c2      	b.n	8003f60 <HAL_RCC_OscConfig+0x6b4>
 8003bda:	46c0      	nop			; (mov r8, r8)
 8003bdc:	40021000 	.word	0x40021000
 8003be0:	fffeffff 	.word	0xfffeffff
 8003be4:	fffbffff 	.word	0xfffbffff
 8003be8:	ffff80ff 	.word	0xffff80ff
 8003bec:	ffffc7ff 	.word	0xffffc7ff
 8003bf0:	00f42400 	.word	0x00f42400
 8003bf4:	20000004 	.word	0x20000004
 8003bf8:	20000008 	.word	0x20000008
 8003bfc:	fffffeff 	.word	0xfffffeff
    }
    else
    {
      /* Update LSE configuration in Backup Domain control register    */
      /* Requires to enable write access to Backup Domain of necessary */
      if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8003c00:	4bb5      	ldr	r3, [pc, #724]	; (8003ed8 <HAL_RCC_OscConfig+0x62c>)
 8003c02:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8003c04:	2380      	movs	r3, #128	; 0x80
 8003c06:	055b      	lsls	r3, r3, #21
 8003c08:	4013      	ands	r3, r2
 8003c0a:	d101      	bne.n	8003c10 <HAL_RCC_OscConfig+0x364>
 8003c0c:	2301      	movs	r3, #1
 8003c0e:	e000      	b.n	8003c12 <HAL_RCC_OscConfig+0x366>
 8003c10:	2300      	movs	r3, #0
 8003c12:	2b00      	cmp	r3, #0
 8003c14:	d011      	beq.n	8003c3a <HAL_RCC_OscConfig+0x38e>
      {
        __HAL_RCC_PWR_CLK_ENABLE();
 8003c16:	4bb0      	ldr	r3, [pc, #704]	; (8003ed8 <HAL_RCC_OscConfig+0x62c>)
 8003c18:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8003c1a:	4baf      	ldr	r3, [pc, #700]	; (8003ed8 <HAL_RCC_OscConfig+0x62c>)
 8003c1c:	2180      	movs	r1, #128	; 0x80
 8003c1e:	0549      	lsls	r1, r1, #21
 8003c20:	430a      	orrs	r2, r1
 8003c22:	63da      	str	r2, [r3, #60]	; 0x3c
 8003c24:	4bac      	ldr	r3, [pc, #688]	; (8003ed8 <HAL_RCC_OscConfig+0x62c>)
 8003c26:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8003c28:	2380      	movs	r3, #128	; 0x80
 8003c2a:	055b      	lsls	r3, r3, #21
 8003c2c:	4013      	ands	r3, r2
 8003c2e:	60fb      	str	r3, [r7, #12]
 8003c30:	68fb      	ldr	r3, [r7, #12]
        pwrclkchanged = SET;
 8003c32:	231f      	movs	r3, #31
 8003c34:	18fb      	adds	r3, r7, r3
 8003c36:	2201      	movs	r2, #1
 8003c38:	701a      	strb	r2, [r3, #0]
      }

      if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003c3a:	4ba8      	ldr	r3, [pc, #672]	; (8003edc <HAL_RCC_OscConfig+0x630>)
 8003c3c:	681a      	ldr	r2, [r3, #0]
 8003c3e:	2380      	movs	r3, #128	; 0x80
 8003c40:	005b      	lsls	r3, r3, #1
 8003c42:	4013      	ands	r3, r2
 8003c44:	d11a      	bne.n	8003c7c <HAL_RCC_OscConfig+0x3d0>
      {
        /* Enable write access to Backup domain */
        SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8003c46:	4ba5      	ldr	r3, [pc, #660]	; (8003edc <HAL_RCC_OscConfig+0x630>)
 8003c48:	681a      	ldr	r2, [r3, #0]
 8003c4a:	4ba4      	ldr	r3, [pc, #656]	; (8003edc <HAL_RCC_OscConfig+0x630>)
 8003c4c:	2180      	movs	r1, #128	; 0x80
 8003c4e:	0049      	lsls	r1, r1, #1
 8003c50:	430a      	orrs	r2, r1
 8003c52:	601a      	str	r2, [r3, #0]

        /* Wait for Backup domain Write protection disable */
        tickstart = HAL_GetTick();
 8003c54:	f7ff facc 	bl	80031f0 <HAL_GetTick>
 8003c58:	0003      	movs	r3, r0
 8003c5a:	613b      	str	r3, [r7, #16]

        while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003c5c:	e008      	b.n	8003c70 <HAL_RCC_OscConfig+0x3c4>
        {
          if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003c5e:	f7ff fac7 	bl	80031f0 <HAL_GetTick>
 8003c62:	0002      	movs	r2, r0
 8003c64:	693b      	ldr	r3, [r7, #16]
 8003c66:	1ad3      	subs	r3, r2, r3
 8003c68:	2b02      	cmp	r3, #2
 8003c6a:	d901      	bls.n	8003c70 <HAL_RCC_OscConfig+0x3c4>
          {
            return HAL_TIMEOUT;
 8003c6c:	2303      	movs	r3, #3
 8003c6e:	e177      	b.n	8003f60 <HAL_RCC_OscConfig+0x6b4>
        while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003c70:	4b9a      	ldr	r3, [pc, #616]	; (8003edc <HAL_RCC_OscConfig+0x630>)
 8003c72:	681a      	ldr	r2, [r3, #0]
 8003c74:	2380      	movs	r3, #128	; 0x80
 8003c76:	005b      	lsls	r3, r3, #1
 8003c78:	4013      	ands	r3, r2
 8003c7a:	d0f0      	beq.n	8003c5e <HAL_RCC_OscConfig+0x3b2>
          }
        }
      }

      /* Set the new LSE configuration -----------------------------------------*/
      __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003c7c:	687b      	ldr	r3, [r7, #4]
 8003c7e:	689b      	ldr	r3, [r3, #8]
 8003c80:	2b01      	cmp	r3, #1
 8003c82:	d106      	bne.n	8003c92 <HAL_RCC_OscConfig+0x3e6>
 8003c84:	4b94      	ldr	r3, [pc, #592]	; (8003ed8 <HAL_RCC_OscConfig+0x62c>)
 8003c86:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8003c88:	4b93      	ldr	r3, [pc, #588]	; (8003ed8 <HAL_RCC_OscConfig+0x62c>)
 8003c8a:	2101      	movs	r1, #1
 8003c8c:	430a      	orrs	r2, r1
 8003c8e:	65da      	str	r2, [r3, #92]	; 0x5c
 8003c90:	e01c      	b.n	8003ccc <HAL_RCC_OscConfig+0x420>
 8003c92:	687b      	ldr	r3, [r7, #4]
 8003c94:	689b      	ldr	r3, [r3, #8]
 8003c96:	2b05      	cmp	r3, #5
 8003c98:	d10c      	bne.n	8003cb4 <HAL_RCC_OscConfig+0x408>
 8003c9a:	4b8f      	ldr	r3, [pc, #572]	; (8003ed8 <HAL_RCC_OscConfig+0x62c>)
 8003c9c:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8003c9e:	4b8e      	ldr	r3, [pc, #568]	; (8003ed8 <HAL_RCC_OscConfig+0x62c>)
 8003ca0:	2104      	movs	r1, #4
 8003ca2:	430a      	orrs	r2, r1
 8003ca4:	65da      	str	r2, [r3, #92]	; 0x5c
 8003ca6:	4b8c      	ldr	r3, [pc, #560]	; (8003ed8 <HAL_RCC_OscConfig+0x62c>)
 8003ca8:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8003caa:	4b8b      	ldr	r3, [pc, #556]	; (8003ed8 <HAL_RCC_OscConfig+0x62c>)
 8003cac:	2101      	movs	r1, #1
 8003cae:	430a      	orrs	r2, r1
 8003cb0:	65da      	str	r2, [r3, #92]	; 0x5c
 8003cb2:	e00b      	b.n	8003ccc <HAL_RCC_OscConfig+0x420>
 8003cb4:	4b88      	ldr	r3, [pc, #544]	; (8003ed8 <HAL_RCC_OscConfig+0x62c>)
 8003cb6:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8003cb8:	4b87      	ldr	r3, [pc, #540]	; (8003ed8 <HAL_RCC_OscConfig+0x62c>)
 8003cba:	2101      	movs	r1, #1
 8003cbc:	438a      	bics	r2, r1
 8003cbe:	65da      	str	r2, [r3, #92]	; 0x5c
 8003cc0:	4b85      	ldr	r3, [pc, #532]	; (8003ed8 <HAL_RCC_OscConfig+0x62c>)
 8003cc2:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8003cc4:	4b84      	ldr	r3, [pc, #528]	; (8003ed8 <HAL_RCC_OscConfig+0x62c>)
 8003cc6:	2104      	movs	r1, #4
 8003cc8:	438a      	bics	r2, r1
 8003cca:	65da      	str	r2, [r3, #92]	; 0x5c

      /* Check the LSE State */
      if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8003ccc:	687b      	ldr	r3, [r7, #4]
 8003cce:	689b      	ldr	r3, [r3, #8]
 8003cd0:	2b00      	cmp	r3, #0
 8003cd2:	d014      	beq.n	8003cfe <HAL_RCC_OscConfig+0x452>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003cd4:	f7ff fa8c 	bl	80031f0 <HAL_GetTick>
 8003cd8:	0003      	movs	r3, r0
 8003cda:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003cdc:	e009      	b.n	8003cf2 <HAL_RCC_OscConfig+0x446>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003cde:	f7ff fa87 	bl	80031f0 <HAL_GetTick>
 8003ce2:	0002      	movs	r2, r0
 8003ce4:	693b      	ldr	r3, [r7, #16]
 8003ce6:	1ad3      	subs	r3, r2, r3
 8003ce8:	4a7d      	ldr	r2, [pc, #500]	; (8003ee0 <HAL_RCC_OscConfig+0x634>)
 8003cea:	4293      	cmp	r3, r2
 8003cec:	d901      	bls.n	8003cf2 <HAL_RCC_OscConfig+0x446>
          {
            return HAL_TIMEOUT;
 8003cee:	2303      	movs	r3, #3
 8003cf0:	e136      	b.n	8003f60 <HAL_RCC_OscConfig+0x6b4>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003cf2:	4b79      	ldr	r3, [pc, #484]	; (8003ed8 <HAL_RCC_OscConfig+0x62c>)
 8003cf4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003cf6:	2202      	movs	r2, #2
 8003cf8:	4013      	ands	r3, r2
 8003cfa:	d0f0      	beq.n	8003cde <HAL_RCC_OscConfig+0x432>
 8003cfc:	e013      	b.n	8003d26 <HAL_RCC_OscConfig+0x47a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003cfe:	f7ff fa77 	bl	80031f0 <HAL_GetTick>
 8003d02:	0003      	movs	r3, r0
 8003d04:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is disabled */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8003d06:	e009      	b.n	8003d1c <HAL_RCC_OscConfig+0x470>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003d08:	f7ff fa72 	bl	80031f0 <HAL_GetTick>
 8003d0c:	0002      	movs	r2, r0
 8003d0e:	693b      	ldr	r3, [r7, #16]
 8003d10:	1ad3      	subs	r3, r2, r3
 8003d12:	4a73      	ldr	r2, [pc, #460]	; (8003ee0 <HAL_RCC_OscConfig+0x634>)
 8003d14:	4293      	cmp	r3, r2
 8003d16:	d901      	bls.n	8003d1c <HAL_RCC_OscConfig+0x470>
          {
            return HAL_TIMEOUT;
 8003d18:	2303      	movs	r3, #3
 8003d1a:	e121      	b.n	8003f60 <HAL_RCC_OscConfig+0x6b4>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8003d1c:	4b6e      	ldr	r3, [pc, #440]	; (8003ed8 <HAL_RCC_OscConfig+0x62c>)
 8003d1e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003d20:	2202      	movs	r2, #2
 8003d22:	4013      	ands	r3, r2
 8003d24:	d1f0      	bne.n	8003d08 <HAL_RCC_OscConfig+0x45c>
          }
        }
      }

      /* Restore clock configuration if changed */
      if (pwrclkchanged == SET)
 8003d26:	231f      	movs	r3, #31
 8003d28:	18fb      	adds	r3, r7, r3
 8003d2a:	781b      	ldrb	r3, [r3, #0]
 8003d2c:	2b01      	cmp	r3, #1
 8003d2e:	d105      	bne.n	8003d3c <HAL_RCC_OscConfig+0x490>
      {
        __HAL_RCC_PWR_CLK_DISABLE();
 8003d30:	4b69      	ldr	r3, [pc, #420]	; (8003ed8 <HAL_RCC_OscConfig+0x62c>)
 8003d32:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8003d34:	4b68      	ldr	r3, [pc, #416]	; (8003ed8 <HAL_RCC_OscConfig+0x62c>)
 8003d36:	496b      	ldr	r1, [pc, #428]	; (8003ee4 <HAL_RCC_OscConfig+0x638>)
 8003d38:	400a      	ands	r2, r1
 8003d3a:	63da      	str	r2, [r3, #60]	; 0x3c
      }
    }
  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8003d3c:	687b      	ldr	r3, [r7, #4]
 8003d3e:	681b      	ldr	r3, [r3, #0]
 8003d40:	2220      	movs	r2, #32
 8003d42:	4013      	ands	r3, r2
 8003d44:	d039      	beq.n	8003dba <HAL_RCC_OscConfig+0x50e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if (RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8003d46:	687b      	ldr	r3, [r7, #4]
 8003d48:	69db      	ldr	r3, [r3, #28]
 8003d4a:	2b00      	cmp	r3, #0
 8003d4c:	d01b      	beq.n	8003d86 <HAL_RCC_OscConfig+0x4da>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8003d4e:	4b62      	ldr	r3, [pc, #392]	; (8003ed8 <HAL_RCC_OscConfig+0x62c>)
 8003d50:	681a      	ldr	r2, [r3, #0]
 8003d52:	4b61      	ldr	r3, [pc, #388]	; (8003ed8 <HAL_RCC_OscConfig+0x62c>)
 8003d54:	2180      	movs	r1, #128	; 0x80
 8003d56:	03c9      	lsls	r1, r1, #15
 8003d58:	430a      	orrs	r2, r1
 8003d5a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003d5c:	f7ff fa48 	bl	80031f0 <HAL_GetTick>
 8003d60:	0003      	movs	r3, r0
 8003d62:	613b      	str	r3, [r7, #16]

      /* Wait till HSI48 is ready */
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) == 0U)
 8003d64:	e008      	b.n	8003d78 <HAL_RCC_OscConfig+0x4cc>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8003d66:	f7ff fa43 	bl	80031f0 <HAL_GetTick>
 8003d6a:	0002      	movs	r2, r0
 8003d6c:	693b      	ldr	r3, [r7, #16]
 8003d6e:	1ad3      	subs	r3, r2, r3
 8003d70:	2b02      	cmp	r3, #2
 8003d72:	d901      	bls.n	8003d78 <HAL_RCC_OscConfig+0x4cc>
        {
          return HAL_TIMEOUT;
 8003d74:	2303      	movs	r3, #3
 8003d76:	e0f3      	b.n	8003f60 <HAL_RCC_OscConfig+0x6b4>
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) == 0U)
 8003d78:	4b57      	ldr	r3, [pc, #348]	; (8003ed8 <HAL_RCC_OscConfig+0x62c>)
 8003d7a:	681a      	ldr	r2, [r3, #0]
 8003d7c:	2380      	movs	r3, #128	; 0x80
 8003d7e:	041b      	lsls	r3, r3, #16
 8003d80:	4013      	ands	r3, r2
 8003d82:	d0f0      	beq.n	8003d66 <HAL_RCC_OscConfig+0x4ba>
 8003d84:	e019      	b.n	8003dba <HAL_RCC_OscConfig+0x50e>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8003d86:	4b54      	ldr	r3, [pc, #336]	; (8003ed8 <HAL_RCC_OscConfig+0x62c>)
 8003d88:	681a      	ldr	r2, [r3, #0]
 8003d8a:	4b53      	ldr	r3, [pc, #332]	; (8003ed8 <HAL_RCC_OscConfig+0x62c>)
 8003d8c:	4956      	ldr	r1, [pc, #344]	; (8003ee8 <HAL_RCC_OscConfig+0x63c>)
 8003d8e:	400a      	ands	r2, r1
 8003d90:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003d92:	f7ff fa2d 	bl	80031f0 <HAL_GetTick>
 8003d96:	0003      	movs	r3, r0
 8003d98:	613b      	str	r3, [r7, #16]

      /* Wait till HSI48 is disabled */
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) != 0U)
 8003d9a:	e008      	b.n	8003dae <HAL_RCC_OscConfig+0x502>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8003d9c:	f7ff fa28 	bl	80031f0 <HAL_GetTick>
 8003da0:	0002      	movs	r2, r0
 8003da2:	693b      	ldr	r3, [r7, #16]
 8003da4:	1ad3      	subs	r3, r2, r3
 8003da6:	2b02      	cmp	r3, #2
 8003da8:	d901      	bls.n	8003dae <HAL_RCC_OscConfig+0x502>
        {
          return HAL_TIMEOUT;
 8003daa:	2303      	movs	r3, #3
 8003dac:	e0d8      	b.n	8003f60 <HAL_RCC_OscConfig+0x6b4>
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) != 0U)
 8003dae:	4b4a      	ldr	r3, [pc, #296]	; (8003ed8 <HAL_RCC_OscConfig+0x62c>)
 8003db0:	681a      	ldr	r2, [r3, #0]
 8003db2:	2380      	movs	r3, #128	; 0x80
 8003db4:	041b      	lsls	r3, r3, #16
 8003db6:	4013      	ands	r3, r2
 8003db8:	d1f0      	bne.n	8003d9c <HAL_RCC_OscConfig+0x4f0>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8003dba:	687b      	ldr	r3, [r7, #4]
 8003dbc:	6a1b      	ldr	r3, [r3, #32]
 8003dbe:	2b00      	cmp	r3, #0
 8003dc0:	d100      	bne.n	8003dc4 <HAL_RCC_OscConfig+0x518>
 8003dc2:	e0cc      	b.n	8003f5e <HAL_RCC_OscConfig+0x6b2>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8003dc4:	4b44      	ldr	r3, [pc, #272]	; (8003ed8 <HAL_RCC_OscConfig+0x62c>)
 8003dc6:	689b      	ldr	r3, [r3, #8]
 8003dc8:	2238      	movs	r2, #56	; 0x38
 8003dca:	4013      	ands	r3, r2
 8003dcc:	2b10      	cmp	r3, #16
 8003dce:	d100      	bne.n	8003dd2 <HAL_RCC_OscConfig+0x526>
 8003dd0:	e07b      	b.n	8003eca <HAL_RCC_OscConfig+0x61e>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8003dd2:	687b      	ldr	r3, [r7, #4]
 8003dd4:	6a1b      	ldr	r3, [r3, #32]
 8003dd6:	2b02      	cmp	r3, #2
 8003dd8:	d156      	bne.n	8003e88 <HAL_RCC_OscConfig+0x5dc>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
#endif /* RCC_PLLQ_SUPPORT */
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003dda:	4b3f      	ldr	r3, [pc, #252]	; (8003ed8 <HAL_RCC_OscConfig+0x62c>)
 8003ddc:	681a      	ldr	r2, [r3, #0]
 8003dde:	4b3e      	ldr	r3, [pc, #248]	; (8003ed8 <HAL_RCC_OscConfig+0x62c>)
 8003de0:	4942      	ldr	r1, [pc, #264]	; (8003eec <HAL_RCC_OscConfig+0x640>)
 8003de2:	400a      	ands	r2, r1
 8003de4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003de6:	f7ff fa03 	bl	80031f0 <HAL_GetTick>
 8003dea:	0003      	movs	r3, r0
 8003dec:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003dee:	e008      	b.n	8003e02 <HAL_RCC_OscConfig+0x556>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003df0:	f7ff f9fe 	bl	80031f0 <HAL_GetTick>
 8003df4:	0002      	movs	r2, r0
 8003df6:	693b      	ldr	r3, [r7, #16]
 8003df8:	1ad3      	subs	r3, r2, r3
 8003dfa:	2b02      	cmp	r3, #2
 8003dfc:	d901      	bls.n	8003e02 <HAL_RCC_OscConfig+0x556>
          {
            return HAL_TIMEOUT;
 8003dfe:	2303      	movs	r3, #3
 8003e00:	e0ae      	b.n	8003f60 <HAL_RCC_OscConfig+0x6b4>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003e02:	4b35      	ldr	r3, [pc, #212]	; (8003ed8 <HAL_RCC_OscConfig+0x62c>)
 8003e04:	681a      	ldr	r2, [r3, #0]
 8003e06:	2380      	movs	r3, #128	; 0x80
 8003e08:	049b      	lsls	r3, r3, #18
 8003e0a:	4013      	ands	r3, r2
 8003e0c:	d1f0      	bne.n	8003df0 <HAL_RCC_OscConfig+0x544>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLQ_SUPPORT)
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003e0e:	4b32      	ldr	r3, [pc, #200]	; (8003ed8 <HAL_RCC_OscConfig+0x62c>)
 8003e10:	68db      	ldr	r3, [r3, #12]
 8003e12:	4a37      	ldr	r2, [pc, #220]	; (8003ef0 <HAL_RCC_OscConfig+0x644>)
 8003e14:	4013      	ands	r3, r2
 8003e16:	0019      	movs	r1, r3
 8003e18:	687b      	ldr	r3, [r7, #4]
 8003e1a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8003e1c:	687b      	ldr	r3, [r7, #4]
 8003e1e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003e20:	431a      	orrs	r2, r3
 8003e22:	687b      	ldr	r3, [r7, #4]
 8003e24:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003e26:	021b      	lsls	r3, r3, #8
 8003e28:	431a      	orrs	r2, r3
 8003e2a:	687b      	ldr	r3, [r7, #4]
 8003e2c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003e2e:	431a      	orrs	r2, r3
 8003e30:	687b      	ldr	r3, [r7, #4]
 8003e32:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003e34:	431a      	orrs	r2, r3
 8003e36:	687b      	ldr	r3, [r7, #4]
 8003e38:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003e3a:	431a      	orrs	r2, r3
 8003e3c:	4b26      	ldr	r3, [pc, #152]	; (8003ed8 <HAL_RCC_OscConfig+0x62c>)
 8003e3e:	430a      	orrs	r2, r1
 8003e40:	60da      	str	r2, [r3, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLR);
#endif /* RCC_PLLQ_SUPPORT */

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003e42:	4b25      	ldr	r3, [pc, #148]	; (8003ed8 <HAL_RCC_OscConfig+0x62c>)
 8003e44:	681a      	ldr	r2, [r3, #0]
 8003e46:	4b24      	ldr	r3, [pc, #144]	; (8003ed8 <HAL_RCC_OscConfig+0x62c>)
 8003e48:	2180      	movs	r1, #128	; 0x80
 8003e4a:	0449      	lsls	r1, r1, #17
 8003e4c:	430a      	orrs	r2, r1
 8003e4e:	601a      	str	r2, [r3, #0]

        /* Enable PLLR Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLRCLK);
 8003e50:	4b21      	ldr	r3, [pc, #132]	; (8003ed8 <HAL_RCC_OscConfig+0x62c>)
 8003e52:	68da      	ldr	r2, [r3, #12]
 8003e54:	4b20      	ldr	r3, [pc, #128]	; (8003ed8 <HAL_RCC_OscConfig+0x62c>)
 8003e56:	2180      	movs	r1, #128	; 0x80
 8003e58:	0549      	lsls	r1, r1, #21
 8003e5a:	430a      	orrs	r2, r1
 8003e5c:	60da      	str	r2, [r3, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003e5e:	f7ff f9c7 	bl	80031f0 <HAL_GetTick>
 8003e62:	0003      	movs	r3, r0
 8003e64:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003e66:	e008      	b.n	8003e7a <HAL_RCC_OscConfig+0x5ce>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003e68:	f7ff f9c2 	bl	80031f0 <HAL_GetTick>
 8003e6c:	0002      	movs	r2, r0
 8003e6e:	693b      	ldr	r3, [r7, #16]
 8003e70:	1ad3      	subs	r3, r2, r3
 8003e72:	2b02      	cmp	r3, #2
 8003e74:	d901      	bls.n	8003e7a <HAL_RCC_OscConfig+0x5ce>
          {
            return HAL_TIMEOUT;
 8003e76:	2303      	movs	r3, #3
 8003e78:	e072      	b.n	8003f60 <HAL_RCC_OscConfig+0x6b4>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003e7a:	4b17      	ldr	r3, [pc, #92]	; (8003ed8 <HAL_RCC_OscConfig+0x62c>)
 8003e7c:	681a      	ldr	r2, [r3, #0]
 8003e7e:	2380      	movs	r3, #128	; 0x80
 8003e80:	049b      	lsls	r3, r3, #18
 8003e82:	4013      	ands	r3, r2
 8003e84:	d0f0      	beq.n	8003e68 <HAL_RCC_OscConfig+0x5bc>
 8003e86:	e06a      	b.n	8003f5e <HAL_RCC_OscConfig+0x6b2>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003e88:	4b13      	ldr	r3, [pc, #76]	; (8003ed8 <HAL_RCC_OscConfig+0x62c>)
 8003e8a:	681a      	ldr	r2, [r3, #0]
 8003e8c:	4b12      	ldr	r3, [pc, #72]	; (8003ed8 <HAL_RCC_OscConfig+0x62c>)
 8003e8e:	4917      	ldr	r1, [pc, #92]	; (8003eec <HAL_RCC_OscConfig+0x640>)
 8003e90:	400a      	ands	r2, r1
 8003e92:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003e94:	f7ff f9ac 	bl	80031f0 <HAL_GetTick>
 8003e98:	0003      	movs	r3, r0
 8003e9a:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003e9c:	e008      	b.n	8003eb0 <HAL_RCC_OscConfig+0x604>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003e9e:	f7ff f9a7 	bl	80031f0 <HAL_GetTick>
 8003ea2:	0002      	movs	r2, r0
 8003ea4:	693b      	ldr	r3, [r7, #16]
 8003ea6:	1ad3      	subs	r3, r2, r3
 8003ea8:	2b02      	cmp	r3, #2
 8003eaa:	d901      	bls.n	8003eb0 <HAL_RCC_OscConfig+0x604>
          {
            return HAL_TIMEOUT;
 8003eac:	2303      	movs	r3, #3
 8003eae:	e057      	b.n	8003f60 <HAL_RCC_OscConfig+0x6b4>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003eb0:	4b09      	ldr	r3, [pc, #36]	; (8003ed8 <HAL_RCC_OscConfig+0x62c>)
 8003eb2:	681a      	ldr	r2, [r3, #0]
 8003eb4:	2380      	movs	r3, #128	; 0x80
 8003eb6:	049b      	lsls	r3, r3, #18
 8003eb8:	4013      	ands	r3, r2
 8003eba:	d1f0      	bne.n	8003e9e <HAL_RCC_OscConfig+0x5f2>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLQ_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLPEN | RCC_PLLCFGR_PLLQEN | RCC_PLLCFGR_PLLREN);
 8003ebc:	4b06      	ldr	r3, [pc, #24]	; (8003ed8 <HAL_RCC_OscConfig+0x62c>)
 8003ebe:	68da      	ldr	r2, [r3, #12]
 8003ec0:	4b05      	ldr	r3, [pc, #20]	; (8003ed8 <HAL_RCC_OscConfig+0x62c>)
 8003ec2:	490c      	ldr	r1, [pc, #48]	; (8003ef4 <HAL_RCC_OscConfig+0x648>)
 8003ec4:	400a      	ands	r2, r1
 8003ec6:	60da      	str	r2, [r3, #12]
 8003ec8:	e049      	b.n	8003f5e <HAL_RCC_OscConfig+0x6b2>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003eca:	687b      	ldr	r3, [r7, #4]
 8003ecc:	6a1b      	ldr	r3, [r3, #32]
 8003ece:	2b01      	cmp	r3, #1
 8003ed0:	d112      	bne.n	8003ef8 <HAL_RCC_OscConfig+0x64c>
      {
        return HAL_ERROR;
 8003ed2:	2301      	movs	r3, #1
 8003ed4:	e044      	b.n	8003f60 <HAL_RCC_OscConfig+0x6b4>
 8003ed6:	46c0      	nop			; (mov r8, r8)
 8003ed8:	40021000 	.word	0x40021000
 8003edc:	40007000 	.word	0x40007000
 8003ee0:	00001388 	.word	0x00001388
 8003ee4:	efffffff 	.word	0xefffffff
 8003ee8:	ffbfffff 	.word	0xffbfffff
 8003eec:	feffffff 	.word	0xfeffffff
 8003ef0:	11c1808c 	.word	0x11c1808c
 8003ef4:	eefefffc 	.word	0xeefefffc
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        temp_pllckcfg = RCC->PLLCFGR;
 8003ef8:	4b1b      	ldr	r3, [pc, #108]	; (8003f68 <HAL_RCC_OscConfig+0x6bc>)
 8003efa:	68db      	ldr	r3, [r3, #12]
 8003efc:	617b      	str	r3, [r7, #20]
        if ((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003efe:	697b      	ldr	r3, [r7, #20]
 8003f00:	2203      	movs	r2, #3
 8003f02:	401a      	ands	r2, r3
 8003f04:	687b      	ldr	r3, [r7, #4]
 8003f06:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f08:	429a      	cmp	r2, r3
 8003f0a:	d126      	bne.n	8003f5a <HAL_RCC_OscConfig+0x6ae>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8003f0c:	697b      	ldr	r3, [r7, #20]
 8003f0e:	2270      	movs	r2, #112	; 0x70
 8003f10:	401a      	ands	r2, r3
 8003f12:	687b      	ldr	r3, [r7, #4]
 8003f14:	6a9b      	ldr	r3, [r3, #40]	; 0x28
        if ((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003f16:	429a      	cmp	r2, r3
 8003f18:	d11f      	bne.n	8003f5a <HAL_RCC_OscConfig+0x6ae>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8003f1a:	697a      	ldr	r2, [r7, #20]
 8003f1c:	23fe      	movs	r3, #254	; 0xfe
 8003f1e:	01db      	lsls	r3, r3, #7
 8003f20:	401a      	ands	r2, r3
 8003f22:	687b      	ldr	r3, [r7, #4]
 8003f24:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003f26:	021b      	lsls	r3, r3, #8
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8003f28:	429a      	cmp	r2, r3
 8003f2a:	d116      	bne.n	8003f5a <HAL_RCC_OscConfig+0x6ae>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8003f2c:	697a      	ldr	r2, [r7, #20]
 8003f2e:	23f8      	movs	r3, #248	; 0xf8
 8003f30:	039b      	lsls	r3, r3, #14
 8003f32:	401a      	ands	r2, r3
 8003f34:	687b      	ldr	r3, [r7, #4]
 8003f36:	6b1b      	ldr	r3, [r3, #48]	; 0x30
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8003f38:	429a      	cmp	r2, r3
 8003f3a:	d10e      	bne.n	8003f5a <HAL_RCC_OscConfig+0x6ae>
#if defined (RCC_PLLQ_SUPPORT)
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
 8003f3c:	697a      	ldr	r2, [r7, #20]
 8003f3e:	23e0      	movs	r3, #224	; 0xe0
 8003f40:	051b      	lsls	r3, r3, #20
 8003f42:	401a      	ands	r2, r3
 8003f44:	687b      	ldr	r3, [r7, #4]
 8003f46:	6b5b      	ldr	r3, [r3, #52]	; 0x34
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8003f48:	429a      	cmp	r2, r3
 8003f4a:	d106      	bne.n	8003f5a <HAL_RCC_OscConfig+0x6ae>
#endif /* RCC_PLLQ_SUPPORT */
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != RCC_OscInitStruct->PLL.PLLR))
 8003f4c:	697b      	ldr	r3, [r7, #20]
 8003f4e:	0f5b      	lsrs	r3, r3, #29
 8003f50:	075a      	lsls	r2, r3, #29
 8003f52:	687b      	ldr	r3, [r7, #4]
 8003f54:	6b9b      	ldr	r3, [r3, #56]	; 0x38
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
 8003f56:	429a      	cmp	r2, r3
 8003f58:	d001      	beq.n	8003f5e <HAL_RCC_OscConfig+0x6b2>
        {
          return HAL_ERROR;
 8003f5a:	2301      	movs	r3, #1
 8003f5c:	e000      	b.n	8003f60 <HAL_RCC_OscConfig+0x6b4>
        }
      }
    }
  }
  return HAL_OK;
 8003f5e:	2300      	movs	r3, #0
}
 8003f60:	0018      	movs	r0, r3
 8003f62:	46bd      	mov	sp, r7
 8003f64:	b008      	add	sp, #32
 8003f66:	bd80      	pop	{r7, pc}
 8003f68:	40021000 	.word	0x40021000

08003f6c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003f6c:	b580      	push	{r7, lr}
 8003f6e:	b084      	sub	sp, #16
 8003f70:	af00      	add	r7, sp, #0
 8003f72:	6078      	str	r0, [r7, #4]
 8003f74:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8003f76:	687b      	ldr	r3, [r7, #4]
 8003f78:	2b00      	cmp	r3, #0
 8003f7a:	d101      	bne.n	8003f80 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003f7c:	2301      	movs	r3, #1
 8003f7e:	e0e9      	b.n	8004154 <HAL_RCC_ClockConfig+0x1e8>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the FLASH clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8003f80:	4b76      	ldr	r3, [pc, #472]	; (800415c <HAL_RCC_ClockConfig+0x1f0>)
 8003f82:	681b      	ldr	r3, [r3, #0]
 8003f84:	2207      	movs	r2, #7
 8003f86:	4013      	ands	r3, r2
 8003f88:	683a      	ldr	r2, [r7, #0]
 8003f8a:	429a      	cmp	r2, r3
 8003f8c:	d91e      	bls.n	8003fcc <HAL_RCC_ClockConfig+0x60>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003f8e:	4b73      	ldr	r3, [pc, #460]	; (800415c <HAL_RCC_ClockConfig+0x1f0>)
 8003f90:	681b      	ldr	r3, [r3, #0]
 8003f92:	2207      	movs	r2, #7
 8003f94:	4393      	bics	r3, r2
 8003f96:	0019      	movs	r1, r3
 8003f98:	4b70      	ldr	r3, [pc, #448]	; (800415c <HAL_RCC_ClockConfig+0x1f0>)
 8003f9a:	683a      	ldr	r2, [r7, #0]
 8003f9c:	430a      	orrs	r2, r1
 8003f9e:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8003fa0:	f7ff f926 	bl	80031f0 <HAL_GetTick>
 8003fa4:	0003      	movs	r3, r0
 8003fa6:	60fb      	str	r3, [r7, #12]

    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8003fa8:	e009      	b.n	8003fbe <HAL_RCC_ClockConfig+0x52>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003faa:	f7ff f921 	bl	80031f0 <HAL_GetTick>
 8003fae:	0002      	movs	r2, r0
 8003fb0:	68fb      	ldr	r3, [r7, #12]
 8003fb2:	1ad3      	subs	r3, r2, r3
 8003fb4:	4a6a      	ldr	r2, [pc, #424]	; (8004160 <HAL_RCC_ClockConfig+0x1f4>)
 8003fb6:	4293      	cmp	r3, r2
 8003fb8:	d901      	bls.n	8003fbe <HAL_RCC_ClockConfig+0x52>
      {
        return HAL_TIMEOUT;
 8003fba:	2303      	movs	r3, #3
 8003fbc:	e0ca      	b.n	8004154 <HAL_RCC_ClockConfig+0x1e8>
    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8003fbe:	4b67      	ldr	r3, [pc, #412]	; (800415c <HAL_RCC_ClockConfig+0x1f0>)
 8003fc0:	681b      	ldr	r3, [r3, #0]
 8003fc2:	2207      	movs	r2, #7
 8003fc4:	4013      	ands	r3, r2
 8003fc6:	683a      	ldr	r2, [r7, #0]
 8003fc8:	429a      	cmp	r2, r3
 8003fca:	d1ee      	bne.n	8003faa <HAL_RCC_ClockConfig+0x3e>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003fcc:	687b      	ldr	r3, [r7, #4]
 8003fce:	681b      	ldr	r3, [r3, #0]
 8003fd0:	2202      	movs	r2, #2
 8003fd2:	4013      	ands	r3, r2
 8003fd4:	d015      	beq.n	8004002 <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003fd6:	687b      	ldr	r3, [r7, #4]
 8003fd8:	681b      	ldr	r3, [r3, #0]
 8003fda:	2204      	movs	r2, #4
 8003fdc:	4013      	ands	r3, r2
 8003fde:	d006      	beq.n	8003fee <HAL_RCC_ClockConfig+0x82>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_HCLK_DIV16);
 8003fe0:	4b60      	ldr	r3, [pc, #384]	; (8004164 <HAL_RCC_ClockConfig+0x1f8>)
 8003fe2:	689a      	ldr	r2, [r3, #8]
 8003fe4:	4b5f      	ldr	r3, [pc, #380]	; (8004164 <HAL_RCC_ClockConfig+0x1f8>)
 8003fe6:	21e0      	movs	r1, #224	; 0xe0
 8003fe8:	01c9      	lsls	r1, r1, #7
 8003fea:	430a      	orrs	r2, r1
 8003fec:	609a      	str	r2, [r3, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003fee:	4b5d      	ldr	r3, [pc, #372]	; (8004164 <HAL_RCC_ClockConfig+0x1f8>)
 8003ff0:	689b      	ldr	r3, [r3, #8]
 8003ff2:	4a5d      	ldr	r2, [pc, #372]	; (8004168 <HAL_RCC_ClockConfig+0x1fc>)
 8003ff4:	4013      	ands	r3, r2
 8003ff6:	0019      	movs	r1, r3
 8003ff8:	687b      	ldr	r3, [r7, #4]
 8003ffa:	689a      	ldr	r2, [r3, #8]
 8003ffc:	4b59      	ldr	r3, [pc, #356]	; (8004164 <HAL_RCC_ClockConfig+0x1f8>)
 8003ffe:	430a      	orrs	r2, r1
 8004000:	609a      	str	r2, [r3, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004002:	687b      	ldr	r3, [r7, #4]
 8004004:	681b      	ldr	r3, [r3, #0]
 8004006:	2201      	movs	r2, #1
 8004008:	4013      	ands	r3, r2
 800400a:	d057      	beq.n	80040bc <HAL_RCC_ClockConfig+0x150>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800400c:	687b      	ldr	r3, [r7, #4]
 800400e:	685b      	ldr	r3, [r3, #4]
 8004010:	2b01      	cmp	r3, #1
 8004012:	d107      	bne.n	8004024 <HAL_RCC_ClockConfig+0xb8>
    {
      /* Check the HSE ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8004014:	4b53      	ldr	r3, [pc, #332]	; (8004164 <HAL_RCC_ClockConfig+0x1f8>)
 8004016:	681a      	ldr	r2, [r3, #0]
 8004018:	2380      	movs	r3, #128	; 0x80
 800401a:	029b      	lsls	r3, r3, #10
 800401c:	4013      	ands	r3, r2
 800401e:	d12b      	bne.n	8004078 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8004020:	2301      	movs	r3, #1
 8004022:	e097      	b.n	8004154 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8004024:	687b      	ldr	r3, [r7, #4]
 8004026:	685b      	ldr	r3, [r3, #4]
 8004028:	2b02      	cmp	r3, #2
 800402a:	d107      	bne.n	800403c <HAL_RCC_ClockConfig+0xd0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800402c:	4b4d      	ldr	r3, [pc, #308]	; (8004164 <HAL_RCC_ClockConfig+0x1f8>)
 800402e:	681a      	ldr	r2, [r3, #0]
 8004030:	2380      	movs	r3, #128	; 0x80
 8004032:	049b      	lsls	r3, r3, #18
 8004034:	4013      	ands	r3, r2
 8004036:	d11f      	bne.n	8004078 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8004038:	2301      	movs	r3, #1
 800403a:	e08b      	b.n	8004154 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* HSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 800403c:	687b      	ldr	r3, [r7, #4]
 800403e:	685b      	ldr	r3, [r3, #4]
 8004040:	2b00      	cmp	r3, #0
 8004042:	d107      	bne.n	8004054 <HAL_RCC_ClockConfig+0xe8>
    {
      /* Check the HSI ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8004044:	4b47      	ldr	r3, [pc, #284]	; (8004164 <HAL_RCC_ClockConfig+0x1f8>)
 8004046:	681a      	ldr	r2, [r3, #0]
 8004048:	2380      	movs	r3, #128	; 0x80
 800404a:	00db      	lsls	r3, r3, #3
 800404c:	4013      	ands	r3, r2
 800404e:	d113      	bne.n	8004078 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8004050:	2301      	movs	r3, #1
 8004052:	e07f      	b.n	8004154 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* LSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_LSI)
 8004054:	687b      	ldr	r3, [r7, #4]
 8004056:	685b      	ldr	r3, [r3, #4]
 8004058:	2b03      	cmp	r3, #3
 800405a:	d106      	bne.n	800406a <HAL_RCC_ClockConfig+0xfe>
    {
      /* Check the LSI ready flag */
      if (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800405c:	4b41      	ldr	r3, [pc, #260]	; (8004164 <HAL_RCC_ClockConfig+0x1f8>)
 800405e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004060:	2202      	movs	r2, #2
 8004062:	4013      	ands	r3, r2
 8004064:	d108      	bne.n	8004078 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8004066:	2301      	movs	r3, #1
 8004068:	e074      	b.n	8004154 <HAL_RCC_ClockConfig+0x1e8>
    }
    /* LSE is selected as System Clock Source */
    else
    {
      /* Check the LSE ready flag */
      if (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800406a:	4b3e      	ldr	r3, [pc, #248]	; (8004164 <HAL_RCC_ClockConfig+0x1f8>)
 800406c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800406e:	2202      	movs	r2, #2
 8004070:	4013      	ands	r3, r2
 8004072:	d101      	bne.n	8004078 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8004074:	2301      	movs	r3, #1
 8004076:	e06d      	b.n	8004154 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8004078:	4b3a      	ldr	r3, [pc, #232]	; (8004164 <HAL_RCC_ClockConfig+0x1f8>)
 800407a:	689b      	ldr	r3, [r3, #8]
 800407c:	2207      	movs	r2, #7
 800407e:	4393      	bics	r3, r2
 8004080:	0019      	movs	r1, r3
 8004082:	687b      	ldr	r3, [r7, #4]
 8004084:	685a      	ldr	r2, [r3, #4]
 8004086:	4b37      	ldr	r3, [pc, #220]	; (8004164 <HAL_RCC_ClockConfig+0x1f8>)
 8004088:	430a      	orrs	r2, r1
 800408a:	609a      	str	r2, [r3, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800408c:	f7ff f8b0 	bl	80031f0 <HAL_GetTick>
 8004090:	0003      	movs	r3, r0
 8004092:	60fb      	str	r3, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004094:	e009      	b.n	80040aa <HAL_RCC_ClockConfig+0x13e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004096:	f7ff f8ab 	bl	80031f0 <HAL_GetTick>
 800409a:	0002      	movs	r2, r0
 800409c:	68fb      	ldr	r3, [r7, #12]
 800409e:	1ad3      	subs	r3, r2, r3
 80040a0:	4a2f      	ldr	r2, [pc, #188]	; (8004160 <HAL_RCC_ClockConfig+0x1f4>)
 80040a2:	4293      	cmp	r3, r2
 80040a4:	d901      	bls.n	80040aa <HAL_RCC_ClockConfig+0x13e>
      {
        return HAL_TIMEOUT;
 80040a6:	2303      	movs	r3, #3
 80040a8:	e054      	b.n	8004154 <HAL_RCC_ClockConfig+0x1e8>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80040aa:	4b2e      	ldr	r3, [pc, #184]	; (8004164 <HAL_RCC_ClockConfig+0x1f8>)
 80040ac:	689b      	ldr	r3, [r3, #8]
 80040ae:	2238      	movs	r2, #56	; 0x38
 80040b0:	401a      	ands	r2, r3
 80040b2:	687b      	ldr	r3, [r7, #4]
 80040b4:	685b      	ldr	r3, [r3, #4]
 80040b6:	00db      	lsls	r3, r3, #3
 80040b8:	429a      	cmp	r2, r3
 80040ba:	d1ec      	bne.n	8004096 <HAL_RCC_ClockConfig+0x12a>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80040bc:	4b27      	ldr	r3, [pc, #156]	; (800415c <HAL_RCC_ClockConfig+0x1f0>)
 80040be:	681b      	ldr	r3, [r3, #0]
 80040c0:	2207      	movs	r2, #7
 80040c2:	4013      	ands	r3, r2
 80040c4:	683a      	ldr	r2, [r7, #0]
 80040c6:	429a      	cmp	r2, r3
 80040c8:	d21e      	bcs.n	8004108 <HAL_RCC_ClockConfig+0x19c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80040ca:	4b24      	ldr	r3, [pc, #144]	; (800415c <HAL_RCC_ClockConfig+0x1f0>)
 80040cc:	681b      	ldr	r3, [r3, #0]
 80040ce:	2207      	movs	r2, #7
 80040d0:	4393      	bics	r3, r2
 80040d2:	0019      	movs	r1, r3
 80040d4:	4b21      	ldr	r3, [pc, #132]	; (800415c <HAL_RCC_ClockConfig+0x1f0>)
 80040d6:	683a      	ldr	r2, [r7, #0]
 80040d8:	430a      	orrs	r2, r1
 80040da:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 80040dc:	f7ff f888 	bl	80031f0 <HAL_GetTick>
 80040e0:	0003      	movs	r3, r0
 80040e2:	60fb      	str	r3, [r7, #12]

    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 80040e4:	e009      	b.n	80040fa <HAL_RCC_ClockConfig+0x18e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80040e6:	f7ff f883 	bl	80031f0 <HAL_GetTick>
 80040ea:	0002      	movs	r2, r0
 80040ec:	68fb      	ldr	r3, [r7, #12]
 80040ee:	1ad3      	subs	r3, r2, r3
 80040f0:	4a1b      	ldr	r2, [pc, #108]	; (8004160 <HAL_RCC_ClockConfig+0x1f4>)
 80040f2:	4293      	cmp	r3, r2
 80040f4:	d901      	bls.n	80040fa <HAL_RCC_ClockConfig+0x18e>
      {
        return HAL_TIMEOUT;
 80040f6:	2303      	movs	r3, #3
 80040f8:	e02c      	b.n	8004154 <HAL_RCC_ClockConfig+0x1e8>
    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 80040fa:	4b18      	ldr	r3, [pc, #96]	; (800415c <HAL_RCC_ClockConfig+0x1f0>)
 80040fc:	681b      	ldr	r3, [r3, #0]
 80040fe:	2207      	movs	r2, #7
 8004100:	4013      	ands	r3, r2
 8004102:	683a      	ldr	r2, [r7, #0]
 8004104:	429a      	cmp	r2, r3
 8004106:	d1ee      	bne.n	80040e6 <HAL_RCC_ClockConfig+0x17a>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004108:	687b      	ldr	r3, [r7, #4]
 800410a:	681b      	ldr	r3, [r3, #0]
 800410c:	2204      	movs	r2, #4
 800410e:	4013      	ands	r3, r2
 8004110:	d009      	beq.n	8004126 <HAL_RCC_ClockConfig+0x1ba>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 8004112:	4b14      	ldr	r3, [pc, #80]	; (8004164 <HAL_RCC_ClockConfig+0x1f8>)
 8004114:	689b      	ldr	r3, [r3, #8]
 8004116:	4a15      	ldr	r2, [pc, #84]	; (800416c <HAL_RCC_ClockConfig+0x200>)
 8004118:	4013      	ands	r3, r2
 800411a:	0019      	movs	r1, r3
 800411c:	687b      	ldr	r3, [r7, #4]
 800411e:	68da      	ldr	r2, [r3, #12]
 8004120:	4b10      	ldr	r3, [pc, #64]	; (8004164 <HAL_RCC_ClockConfig+0x1f8>)
 8004122:	430a      	orrs	r2, r1
 8004124:	609a      	str	r2, [r3, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = (HAL_RCC_GetSysClockFreq() >> ((AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos]) & 0x1FU));
 8004126:	f000 f829 	bl	800417c <HAL_RCC_GetSysClockFreq>
 800412a:	0001      	movs	r1, r0
 800412c:	4b0d      	ldr	r3, [pc, #52]	; (8004164 <HAL_RCC_ClockConfig+0x1f8>)
 800412e:	689b      	ldr	r3, [r3, #8]
 8004130:	0a1b      	lsrs	r3, r3, #8
 8004132:	220f      	movs	r2, #15
 8004134:	401a      	ands	r2, r3
 8004136:	4b0e      	ldr	r3, [pc, #56]	; (8004170 <HAL_RCC_ClockConfig+0x204>)
 8004138:	0092      	lsls	r2, r2, #2
 800413a:	58d3      	ldr	r3, [r2, r3]
 800413c:	221f      	movs	r2, #31
 800413e:	4013      	ands	r3, r2
 8004140:	000a      	movs	r2, r1
 8004142:	40da      	lsrs	r2, r3
 8004144:	4b0b      	ldr	r3, [pc, #44]	; (8004174 <HAL_RCC_ClockConfig+0x208>)
 8004146:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 8004148:	4b0b      	ldr	r3, [pc, #44]	; (8004178 <HAL_RCC_ClockConfig+0x20c>)
 800414a:	681b      	ldr	r3, [r3, #0]
 800414c:	0018      	movs	r0, r3
 800414e:	f7fe fff3 	bl	8003138 <HAL_InitTick>
 8004152:	0003      	movs	r3, r0
}
 8004154:	0018      	movs	r0, r3
 8004156:	46bd      	mov	sp, r7
 8004158:	b004      	add	sp, #16
 800415a:	bd80      	pop	{r7, pc}
 800415c:	40022000 	.word	0x40022000
 8004160:	00001388 	.word	0x00001388
 8004164:	40021000 	.word	0x40021000
 8004168:	fffff0ff 	.word	0xfffff0ff
 800416c:	ffff8fff 	.word	0xffff8fff
 8004170:	0800e494 	.word	0x0800e494
 8004174:	20000004 	.word	0x20000004
 8004178:	20000008 	.word	0x20000008

0800417c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800417c:	b580      	push	{r7, lr}
 800417e:	b086      	sub	sp, #24
 8004180:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm, hsidiv;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8004182:	4b3c      	ldr	r3, [pc, #240]	; (8004274 <HAL_RCC_GetSysClockFreq+0xf8>)
 8004184:	689b      	ldr	r3, [r3, #8]
 8004186:	2238      	movs	r2, #56	; 0x38
 8004188:	4013      	ands	r3, r2
 800418a:	d10f      	bne.n	80041ac <HAL_RCC_GetSysClockFreq+0x30>
  {
    /* HSISYS can be derived for HSI16 */
    hsidiv = (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos));
 800418c:	4b39      	ldr	r3, [pc, #228]	; (8004274 <HAL_RCC_GetSysClockFreq+0xf8>)
 800418e:	681b      	ldr	r3, [r3, #0]
 8004190:	0adb      	lsrs	r3, r3, #11
 8004192:	2207      	movs	r2, #7
 8004194:	4013      	ands	r3, r2
 8004196:	2201      	movs	r2, #1
 8004198:	409a      	lsls	r2, r3
 800419a:	0013      	movs	r3, r2
 800419c:	603b      	str	r3, [r7, #0]

    /* HSI used as system clock source */
    sysclockfreq = (HSI_VALUE / hsidiv);
 800419e:	6839      	ldr	r1, [r7, #0]
 80041a0:	4835      	ldr	r0, [pc, #212]	; (8004278 <HAL_RCC_GetSysClockFreq+0xfc>)
 80041a2:	f7fb ffcb 	bl	800013c <__udivsi3>
 80041a6:	0003      	movs	r3, r0
 80041a8:	613b      	str	r3, [r7, #16]
 80041aa:	e05d      	b.n	8004268 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 80041ac:	4b31      	ldr	r3, [pc, #196]	; (8004274 <HAL_RCC_GetSysClockFreq+0xf8>)
 80041ae:	689b      	ldr	r3, [r3, #8]
 80041b0:	2238      	movs	r2, #56	; 0x38
 80041b2:	4013      	ands	r3, r2
 80041b4:	2b08      	cmp	r3, #8
 80041b6:	d102      	bne.n	80041be <HAL_RCC_GetSysClockFreq+0x42>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 80041b8:	4b30      	ldr	r3, [pc, #192]	; (800427c <HAL_RCC_GetSysClockFreq+0x100>)
 80041ba:	613b      	str	r3, [r7, #16]
 80041bc:	e054      	b.n	8004268 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80041be:	4b2d      	ldr	r3, [pc, #180]	; (8004274 <HAL_RCC_GetSysClockFreq+0xf8>)
 80041c0:	689b      	ldr	r3, [r3, #8]
 80041c2:	2238      	movs	r2, #56	; 0x38
 80041c4:	4013      	ands	r3, r2
 80041c6:	2b10      	cmp	r3, #16
 80041c8:	d138      	bne.n	800423c <HAL_RCC_GetSysClockFreq+0xc0>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC);
 80041ca:	4b2a      	ldr	r3, [pc, #168]	; (8004274 <HAL_RCC_GetSysClockFreq+0xf8>)
 80041cc:	68db      	ldr	r3, [r3, #12]
 80041ce:	2203      	movs	r2, #3
 80041d0:	4013      	ands	r3, r2
 80041d2:	60fb      	str	r3, [r7, #12]
    pllm = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 80041d4:	4b27      	ldr	r3, [pc, #156]	; (8004274 <HAL_RCC_GetSysClockFreq+0xf8>)
 80041d6:	68db      	ldr	r3, [r3, #12]
 80041d8:	091b      	lsrs	r3, r3, #4
 80041da:	2207      	movs	r2, #7
 80041dc:	4013      	ands	r3, r2
 80041de:	3301      	adds	r3, #1
 80041e0:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 80041e2:	68fb      	ldr	r3, [r7, #12]
 80041e4:	2b03      	cmp	r3, #3
 80041e6:	d10d      	bne.n	8004204 <HAL_RCC_GetSysClockFreq+0x88>
    {
      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = (HSE_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 80041e8:	68b9      	ldr	r1, [r7, #8]
 80041ea:	4824      	ldr	r0, [pc, #144]	; (800427c <HAL_RCC_GetSysClockFreq+0x100>)
 80041ec:	f7fb ffa6 	bl	800013c <__udivsi3>
 80041f0:	0003      	movs	r3, r0
 80041f2:	0019      	movs	r1, r3
 80041f4:	4b1f      	ldr	r3, [pc, #124]	; (8004274 <HAL_RCC_GetSysClockFreq+0xf8>)
 80041f6:	68db      	ldr	r3, [r3, #12]
 80041f8:	0a1b      	lsrs	r3, r3, #8
 80041fa:	227f      	movs	r2, #127	; 0x7f
 80041fc:	4013      	ands	r3, r2
 80041fe:	434b      	muls	r3, r1
 8004200:	617b      	str	r3, [r7, #20]
        break;
 8004202:	e00d      	b.n	8004220 <HAL_RCC_GetSysClockFreq+0xa4>

      case RCC_PLLSOURCE_HSI:  /* HSI16 used as PLL clock source */
      default:                 /* HSI16 used as PLL clock source */
        pllvco = (HSI_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos) ;
 8004204:	68b9      	ldr	r1, [r7, #8]
 8004206:	481c      	ldr	r0, [pc, #112]	; (8004278 <HAL_RCC_GetSysClockFreq+0xfc>)
 8004208:	f7fb ff98 	bl	800013c <__udivsi3>
 800420c:	0003      	movs	r3, r0
 800420e:	0019      	movs	r1, r3
 8004210:	4b18      	ldr	r3, [pc, #96]	; (8004274 <HAL_RCC_GetSysClockFreq+0xf8>)
 8004212:	68db      	ldr	r3, [r3, #12]
 8004214:	0a1b      	lsrs	r3, r3, #8
 8004216:	227f      	movs	r2, #127	; 0x7f
 8004218:	4013      	ands	r3, r2
 800421a:	434b      	muls	r3, r1
 800421c:	617b      	str	r3, [r7, #20]
        break;
 800421e:	46c0      	nop			; (mov r8, r8)
    }
    pllr = (((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U);
 8004220:	4b14      	ldr	r3, [pc, #80]	; (8004274 <HAL_RCC_GetSysClockFreq+0xf8>)
 8004222:	68db      	ldr	r3, [r3, #12]
 8004224:	0f5b      	lsrs	r3, r3, #29
 8004226:	2207      	movs	r2, #7
 8004228:	4013      	ands	r3, r2
 800422a:	3301      	adds	r3, #1
 800422c:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco / pllr;
 800422e:	6879      	ldr	r1, [r7, #4]
 8004230:	6978      	ldr	r0, [r7, #20]
 8004232:	f7fb ff83 	bl	800013c <__udivsi3>
 8004236:	0003      	movs	r3, r0
 8004238:	613b      	str	r3, [r7, #16]
 800423a:	e015      	b.n	8004268 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSE)
 800423c:	4b0d      	ldr	r3, [pc, #52]	; (8004274 <HAL_RCC_GetSysClockFreq+0xf8>)
 800423e:	689b      	ldr	r3, [r3, #8]
 8004240:	2238      	movs	r2, #56	; 0x38
 8004242:	4013      	ands	r3, r2
 8004244:	2b20      	cmp	r3, #32
 8004246:	d103      	bne.n	8004250 <HAL_RCC_GetSysClockFreq+0xd4>
  {
    /* LSE used as system clock source */
    sysclockfreq = LSE_VALUE;
 8004248:	2380      	movs	r3, #128	; 0x80
 800424a:	021b      	lsls	r3, r3, #8
 800424c:	613b      	str	r3, [r7, #16]
 800424e:	e00b      	b.n	8004268 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSI)
 8004250:	4b08      	ldr	r3, [pc, #32]	; (8004274 <HAL_RCC_GetSysClockFreq+0xf8>)
 8004252:	689b      	ldr	r3, [r3, #8]
 8004254:	2238      	movs	r2, #56	; 0x38
 8004256:	4013      	ands	r3, r2
 8004258:	2b18      	cmp	r3, #24
 800425a:	d103      	bne.n	8004264 <HAL_RCC_GetSysClockFreq+0xe8>
  {
    /* LSI used as system clock source */
    sysclockfreq = LSI_VALUE;
 800425c:	23fa      	movs	r3, #250	; 0xfa
 800425e:	01db      	lsls	r3, r3, #7
 8004260:	613b      	str	r3, [r7, #16]
 8004262:	e001      	b.n	8004268 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else
  {
    sysclockfreq = 0U;
 8004264:	2300      	movs	r3, #0
 8004266:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 8004268:	693b      	ldr	r3, [r7, #16]
}
 800426a:	0018      	movs	r0, r3
 800426c:	46bd      	mov	sp, r7
 800426e:	b006      	add	sp, #24
 8004270:	bd80      	pop	{r7, pc}
 8004272:	46c0      	nop			; (mov r8, r8)
 8004274:	40021000 	.word	0x40021000
 8004278:	00f42400 	.word	0x00f42400
 800427c:	007a1200 	.word	0x007a1200

08004280 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004280:	b580      	push	{r7, lr}
 8004282:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004284:	4b02      	ldr	r3, [pc, #8]	; (8004290 <HAL_RCC_GetHCLKFreq+0x10>)
 8004286:	681b      	ldr	r3, [r3, #0]
}
 8004288:	0018      	movs	r0, r3
 800428a:	46bd      	mov	sp, r7
 800428c:	bd80      	pop	{r7, pc}
 800428e:	46c0      	nop			; (mov r8, r8)
 8004290:	20000004 	.word	0x20000004

08004294 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004294:	b5b0      	push	{r4, r5, r7, lr}
 8004296:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_PCLK1_FREQ(HAL_RCC_GetHCLKFreq(), LL_RCC_GetAPB1Prescaler())));
 8004298:	f7ff fff2 	bl	8004280 <HAL_RCC_GetHCLKFreq>
 800429c:	0004      	movs	r4, r0
 800429e:	f7ff faf9 	bl	8003894 <LL_RCC_GetAPB1Prescaler>
 80042a2:	0003      	movs	r3, r0
 80042a4:	0b1a      	lsrs	r2, r3, #12
 80042a6:	4b05      	ldr	r3, [pc, #20]	; (80042bc <HAL_RCC_GetPCLK1Freq+0x28>)
 80042a8:	0092      	lsls	r2, r2, #2
 80042aa:	58d3      	ldr	r3, [r2, r3]
 80042ac:	221f      	movs	r2, #31
 80042ae:	4013      	ands	r3, r2
 80042b0:	40dc      	lsrs	r4, r3
 80042b2:	0023      	movs	r3, r4
}
 80042b4:	0018      	movs	r0, r3
 80042b6:	46bd      	mov	sp, r7
 80042b8:	bdb0      	pop	{r4, r5, r7, pc}
 80042ba:	46c0      	nop			; (mov r8, r8)
 80042bc:	0800e4d4 	.word	0x0800e4d4

080042c0 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80042c0:	b580      	push	{r7, lr}
 80042c2:	b086      	sub	sp, #24
 80042c4:	af00      	add	r7, sp, #0
 80042c6:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret    = HAL_OK;   /* Intermediate status */
 80042c8:	2313      	movs	r3, #19
 80042ca:	18fb      	adds	r3, r7, r3
 80042cc:	2200      	movs	r2, #0
 80042ce:	701a      	strb	r2, [r3, #0]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 80042d0:	2312      	movs	r3, #18
 80042d2:	18fb      	adds	r3, r7, r3
 80042d4:	2200      	movs	r2, #0
 80042d6:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80042d8:	687b      	ldr	r3, [r7, #4]
 80042da:	681a      	ldr	r2, [r3, #0]
 80042dc:	2380      	movs	r3, #128	; 0x80
 80042de:	029b      	lsls	r3, r3, #10
 80042e0:	4013      	ands	r3, r2
 80042e2:	d100      	bne.n	80042e6 <HAL_RCCEx_PeriphCLKConfig+0x26>
 80042e4:	e0ad      	b.n	8004442 <HAL_RCCEx_PeriphCLKConfig+0x182>
  {
    FlagStatus       pwrclkchanged = RESET;
 80042e6:	2011      	movs	r0, #17
 80042e8:	183b      	adds	r3, r7, r0
 80042ea:	2200      	movs	r2, #0
 80042ec:	701a      	strb	r2, [r3, #0]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80042ee:	4b47      	ldr	r3, [pc, #284]	; (800440c <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 80042f0:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80042f2:	2380      	movs	r3, #128	; 0x80
 80042f4:	055b      	lsls	r3, r3, #21
 80042f6:	4013      	ands	r3, r2
 80042f8:	d110      	bne.n	800431c <HAL_RCCEx_PeriphCLKConfig+0x5c>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80042fa:	4b44      	ldr	r3, [pc, #272]	; (800440c <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 80042fc:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80042fe:	4b43      	ldr	r3, [pc, #268]	; (800440c <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 8004300:	2180      	movs	r1, #128	; 0x80
 8004302:	0549      	lsls	r1, r1, #21
 8004304:	430a      	orrs	r2, r1
 8004306:	63da      	str	r2, [r3, #60]	; 0x3c
 8004308:	4b40      	ldr	r3, [pc, #256]	; (800440c <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 800430a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800430c:	2380      	movs	r3, #128	; 0x80
 800430e:	055b      	lsls	r3, r3, #21
 8004310:	4013      	ands	r3, r2
 8004312:	60bb      	str	r3, [r7, #8]
 8004314:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004316:	183b      	adds	r3, r7, r0
 8004318:	2201      	movs	r2, #1
 800431a:	701a      	strb	r2, [r3, #0]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800431c:	4b3c      	ldr	r3, [pc, #240]	; (8004410 <HAL_RCCEx_PeriphCLKConfig+0x150>)
 800431e:	681a      	ldr	r2, [r3, #0]
 8004320:	4b3b      	ldr	r3, [pc, #236]	; (8004410 <HAL_RCCEx_PeriphCLKConfig+0x150>)
 8004322:	2180      	movs	r1, #128	; 0x80
 8004324:	0049      	lsls	r1, r1, #1
 8004326:	430a      	orrs	r2, r1
 8004328:	601a      	str	r2, [r3, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800432a:	f7fe ff61 	bl	80031f0 <HAL_GetTick>
 800432e:	0003      	movs	r3, r0
 8004330:	60fb      	str	r3, [r7, #12]

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8004332:	e00b      	b.n	800434c <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004334:	f7fe ff5c 	bl	80031f0 <HAL_GetTick>
 8004338:	0002      	movs	r2, r0
 800433a:	68fb      	ldr	r3, [r7, #12]
 800433c:	1ad3      	subs	r3, r2, r3
 800433e:	2b02      	cmp	r3, #2
 8004340:	d904      	bls.n	800434c <HAL_RCCEx_PeriphCLKConfig+0x8c>
      {
        ret = HAL_TIMEOUT;
 8004342:	2313      	movs	r3, #19
 8004344:	18fb      	adds	r3, r7, r3
 8004346:	2203      	movs	r2, #3
 8004348:	701a      	strb	r2, [r3, #0]
        break;
 800434a:	e005      	b.n	8004358 <HAL_RCCEx_PeriphCLKConfig+0x98>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800434c:	4b30      	ldr	r3, [pc, #192]	; (8004410 <HAL_RCCEx_PeriphCLKConfig+0x150>)
 800434e:	681a      	ldr	r2, [r3, #0]
 8004350:	2380      	movs	r3, #128	; 0x80
 8004352:	005b      	lsls	r3, r3, #1
 8004354:	4013      	ands	r3, r2
 8004356:	d0ed      	beq.n	8004334 <HAL_RCCEx_PeriphCLKConfig+0x74>
      }
    }

    if (ret == HAL_OK)
 8004358:	2313      	movs	r3, #19
 800435a:	18fb      	adds	r3, r7, r3
 800435c:	781b      	ldrb	r3, [r3, #0]
 800435e:	2b00      	cmp	r3, #0
 8004360:	d15e      	bne.n	8004420 <HAL_RCCEx_PeriphCLKConfig+0x160>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8004362:	4b2a      	ldr	r3, [pc, #168]	; (800440c <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 8004364:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8004366:	23c0      	movs	r3, #192	; 0xc0
 8004368:	009b      	lsls	r3, r3, #2
 800436a:	4013      	ands	r3, r2
 800436c:	617b      	str	r3, [r7, #20]

      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 800436e:	697b      	ldr	r3, [r7, #20]
 8004370:	2b00      	cmp	r3, #0
 8004372:	d019      	beq.n	80043a8 <HAL_RCCEx_PeriphCLKConfig+0xe8>
 8004374:	687b      	ldr	r3, [r7, #4]
 8004376:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004378:	697a      	ldr	r2, [r7, #20]
 800437a:	429a      	cmp	r2, r3
 800437c:	d014      	beq.n	80043a8 <HAL_RCCEx_PeriphCLKConfig+0xe8>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 800437e:	4b23      	ldr	r3, [pc, #140]	; (800440c <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 8004380:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004382:	4a24      	ldr	r2, [pc, #144]	; (8004414 <HAL_RCCEx_PeriphCLKConfig+0x154>)
 8004384:	4013      	ands	r3, r2
 8004386:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8004388:	4b20      	ldr	r3, [pc, #128]	; (800440c <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 800438a:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800438c:	4b1f      	ldr	r3, [pc, #124]	; (800440c <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 800438e:	2180      	movs	r1, #128	; 0x80
 8004390:	0249      	lsls	r1, r1, #9
 8004392:	430a      	orrs	r2, r1
 8004394:	65da      	str	r2, [r3, #92]	; 0x5c
        __HAL_RCC_BACKUPRESET_RELEASE();
 8004396:	4b1d      	ldr	r3, [pc, #116]	; (800440c <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 8004398:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800439a:	4b1c      	ldr	r3, [pc, #112]	; (800440c <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 800439c:	491e      	ldr	r1, [pc, #120]	; (8004418 <HAL_RCCEx_PeriphCLKConfig+0x158>)
 800439e:	400a      	ands	r2, r1
 80043a0:	65da      	str	r2, [r3, #92]	; 0x5c
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 80043a2:	4b1a      	ldr	r3, [pc, #104]	; (800440c <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 80043a4:	697a      	ldr	r2, [r7, #20]
 80043a6:	65da      	str	r2, [r3, #92]	; 0x5c
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 80043a8:	697b      	ldr	r3, [r7, #20]
 80043aa:	2201      	movs	r2, #1
 80043ac:	4013      	ands	r3, r2
 80043ae:	d016      	beq.n	80043de <HAL_RCCEx_PeriphCLKConfig+0x11e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80043b0:	f7fe ff1e 	bl	80031f0 <HAL_GetTick>
 80043b4:	0003      	movs	r3, r0
 80043b6:	60fb      	str	r3, [r7, #12]

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80043b8:	e00c      	b.n	80043d4 <HAL_RCCEx_PeriphCLKConfig+0x114>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80043ba:	f7fe ff19 	bl	80031f0 <HAL_GetTick>
 80043be:	0002      	movs	r2, r0
 80043c0:	68fb      	ldr	r3, [r7, #12]
 80043c2:	1ad3      	subs	r3, r2, r3
 80043c4:	4a15      	ldr	r2, [pc, #84]	; (800441c <HAL_RCCEx_PeriphCLKConfig+0x15c>)
 80043c6:	4293      	cmp	r3, r2
 80043c8:	d904      	bls.n	80043d4 <HAL_RCCEx_PeriphCLKConfig+0x114>
          {
            ret = HAL_TIMEOUT;
 80043ca:	2313      	movs	r3, #19
 80043cc:	18fb      	adds	r3, r7, r3
 80043ce:	2203      	movs	r2, #3
 80043d0:	701a      	strb	r2, [r3, #0]
            break;
 80043d2:	e004      	b.n	80043de <HAL_RCCEx_PeriphCLKConfig+0x11e>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80043d4:	4b0d      	ldr	r3, [pc, #52]	; (800440c <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 80043d6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80043d8:	2202      	movs	r2, #2
 80043da:	4013      	ands	r3, r2
 80043dc:	d0ed      	beq.n	80043ba <HAL_RCCEx_PeriphCLKConfig+0xfa>
          }
        }
      }

      if (ret == HAL_OK)
 80043de:	2313      	movs	r3, #19
 80043e0:	18fb      	adds	r3, r7, r3
 80043e2:	781b      	ldrb	r3, [r3, #0]
 80043e4:	2b00      	cmp	r3, #0
 80043e6:	d10a      	bne.n	80043fe <HAL_RCCEx_PeriphCLKConfig+0x13e>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80043e8:	4b08      	ldr	r3, [pc, #32]	; (800440c <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 80043ea:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80043ec:	4a09      	ldr	r2, [pc, #36]	; (8004414 <HAL_RCCEx_PeriphCLKConfig+0x154>)
 80043ee:	4013      	ands	r3, r2
 80043f0:	0019      	movs	r1, r3
 80043f2:	687b      	ldr	r3, [r7, #4]
 80043f4:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80043f6:	4b05      	ldr	r3, [pc, #20]	; (800440c <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 80043f8:	430a      	orrs	r2, r1
 80043fa:	65da      	str	r2, [r3, #92]	; 0x5c
 80043fc:	e016      	b.n	800442c <HAL_RCCEx_PeriphCLKConfig+0x16c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 80043fe:	2312      	movs	r3, #18
 8004400:	18fb      	adds	r3, r7, r3
 8004402:	2213      	movs	r2, #19
 8004404:	18ba      	adds	r2, r7, r2
 8004406:	7812      	ldrb	r2, [r2, #0]
 8004408:	701a      	strb	r2, [r3, #0]
 800440a:	e00f      	b.n	800442c <HAL_RCCEx_PeriphCLKConfig+0x16c>
 800440c:	40021000 	.word	0x40021000
 8004410:	40007000 	.word	0x40007000
 8004414:	fffffcff 	.word	0xfffffcff
 8004418:	fffeffff 	.word	0xfffeffff
 800441c:	00001388 	.word	0x00001388
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004420:	2312      	movs	r3, #18
 8004422:	18fb      	adds	r3, r7, r3
 8004424:	2213      	movs	r2, #19
 8004426:	18ba      	adds	r2, r7, r2
 8004428:	7812      	ldrb	r2, [r2, #0]
 800442a:	701a      	strb	r2, [r3, #0]
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 800442c:	2311      	movs	r3, #17
 800442e:	18fb      	adds	r3, r7, r3
 8004430:	781b      	ldrb	r3, [r3, #0]
 8004432:	2b01      	cmp	r3, #1
 8004434:	d105      	bne.n	8004442 <HAL_RCCEx_PeriphCLKConfig+0x182>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004436:	4bb6      	ldr	r3, [pc, #728]	; (8004710 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8004438:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800443a:	4bb5      	ldr	r3, [pc, #724]	; (8004710 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 800443c:	49b5      	ldr	r1, [pc, #724]	; (8004714 <HAL_RCCEx_PeriphCLKConfig+0x454>)
 800443e:	400a      	ands	r2, r1
 8004440:	63da      	str	r2, [r3, #60]	; 0x3c
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8004442:	687b      	ldr	r3, [r7, #4]
 8004444:	681b      	ldr	r3, [r3, #0]
 8004446:	2201      	movs	r2, #1
 8004448:	4013      	ands	r3, r2
 800444a:	d009      	beq.n	8004460 <HAL_RCCEx_PeriphCLKConfig+0x1a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800444c:	4bb0      	ldr	r3, [pc, #704]	; (8004710 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 800444e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004450:	2203      	movs	r2, #3
 8004452:	4393      	bics	r3, r2
 8004454:	0019      	movs	r1, r3
 8004456:	687b      	ldr	r3, [r7, #4]
 8004458:	685a      	ldr	r2, [r3, #4]
 800445a:	4bad      	ldr	r3, [pc, #692]	; (8004710 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 800445c:	430a      	orrs	r2, r1
 800445e:	655a      	str	r2, [r3, #84]	; 0x54
  }

#if defined(RCC_CCIPR_USART2SEL)
  /*-------------------------- USART2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8004460:	687b      	ldr	r3, [r7, #4]
 8004462:	681b      	ldr	r3, [r3, #0]
 8004464:	2202      	movs	r2, #2
 8004466:	4013      	ands	r3, r2
 8004468:	d009      	beq.n	800447e <HAL_RCCEx_PeriphCLKConfig+0x1be>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 800446a:	4ba9      	ldr	r3, [pc, #676]	; (8004710 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 800446c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800446e:	220c      	movs	r2, #12
 8004470:	4393      	bics	r3, r2
 8004472:	0019      	movs	r1, r3
 8004474:	687b      	ldr	r3, [r7, #4]
 8004476:	689a      	ldr	r2, [r3, #8]
 8004478:	4ba5      	ldr	r3, [pc, #660]	; (8004710 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 800447a:	430a      	orrs	r2, r1
 800447c:	655a      	str	r2, [r3, #84]	; 0x54
  }
#endif /* RCC_CCIPR_USART2SEL */

#if defined(RCC_CCIPR_USART3SEL)
  /*-------------------------- USART3 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 800447e:	687b      	ldr	r3, [r7, #4]
 8004480:	681b      	ldr	r3, [r3, #0]
 8004482:	2204      	movs	r2, #4
 8004484:	4013      	ands	r3, r2
 8004486:	d009      	beq.n	800449c <HAL_RCCEx_PeriphCLKConfig+0x1dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8004488:	4ba1      	ldr	r3, [pc, #644]	; (8004710 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 800448a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800448c:	2230      	movs	r2, #48	; 0x30
 800448e:	4393      	bics	r3, r2
 8004490:	0019      	movs	r1, r3
 8004492:	687b      	ldr	r3, [r7, #4]
 8004494:	68da      	ldr	r2, [r3, #12]
 8004496:	4b9e      	ldr	r3, [pc, #632]	; (8004710 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8004498:	430a      	orrs	r2, r1
 800449a:	655a      	str	r2, [r3, #84]	; 0x54
  }
#endif /* RCC_CCIPR_USART3SEL */

#if defined(LPUART1)
  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 800449c:	687b      	ldr	r3, [r7, #4]
 800449e:	681b      	ldr	r3, [r3, #0]
 80044a0:	2210      	movs	r2, #16
 80044a2:	4013      	ands	r3, r2
 80044a4:	d009      	beq.n	80044ba <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 80044a6:	4b9a      	ldr	r3, [pc, #616]	; (8004710 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 80044a8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80044aa:	4a9b      	ldr	r2, [pc, #620]	; (8004718 <HAL_RCCEx_PeriphCLKConfig+0x458>)
 80044ac:	4013      	ands	r3, r2
 80044ae:	0019      	movs	r1, r3
 80044b0:	687b      	ldr	r3, [r7, #4]
 80044b2:	691a      	ldr	r2, [r3, #16]
 80044b4:	4b96      	ldr	r3, [pc, #600]	; (8004710 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 80044b6:	430a      	orrs	r2, r1
 80044b8:	655a      	str	r2, [r3, #84]	; 0x54
  }
#endif /* LPUART1 */

#if defined(LPUART2)
  /*-------------------------- LPUART2 clock source configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART2) == RCC_PERIPHCLK_LPUART2)
 80044ba:	687b      	ldr	r3, [r7, #4]
 80044bc:	681a      	ldr	r2, [r3, #0]
 80044be:	2380      	movs	r3, #128	; 0x80
 80044c0:	015b      	lsls	r3, r3, #5
 80044c2:	4013      	ands	r3, r2
 80044c4:	d009      	beq.n	80044da <HAL_RCCEx_PeriphCLKConfig+0x21a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART2CLKSOURCE(PeriphClkInit->Lpuart2ClockSelection));

    /* Configure the LPUART clock source */
    __HAL_RCC_LPUART2_CONFIG(PeriphClkInit->Lpuart2ClockSelection);
 80044c6:	4b92      	ldr	r3, [pc, #584]	; (8004710 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 80044c8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80044ca:	4a94      	ldr	r2, [pc, #592]	; (800471c <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 80044cc:	4013      	ands	r3, r2
 80044ce:	0019      	movs	r1, r3
 80044d0:	687b      	ldr	r3, [r7, #4]
 80044d2:	695a      	ldr	r2, [r3, #20]
 80044d4:	4b8e      	ldr	r3, [pc, #568]	; (8004710 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 80044d6:	430a      	orrs	r2, r1
 80044d8:	655a      	str	r2, [r3, #84]	; 0x54
  }
#endif /* LPUART2 */

#if defined(RCC_CCIPR_LPTIM1SEL)
  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 80044da:	687b      	ldr	r3, [r7, #4]
 80044dc:	681a      	ldr	r2, [r3, #0]
 80044de:	2380      	movs	r3, #128	; 0x80
 80044e0:	009b      	lsls	r3, r3, #2
 80044e2:	4013      	ands	r3, r2
 80044e4:	d009      	beq.n	80044fa <HAL_RCCEx_PeriphCLKConfig+0x23a>
  {
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80044e6:	4b8a      	ldr	r3, [pc, #552]	; (8004710 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 80044e8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80044ea:	4a8d      	ldr	r2, [pc, #564]	; (8004720 <HAL_RCCEx_PeriphCLKConfig+0x460>)
 80044ec:	4013      	ands	r3, r2
 80044ee:	0019      	movs	r1, r3
 80044f0:	687b      	ldr	r3, [r7, #4]
 80044f2:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80044f4:	4b86      	ldr	r3, [pc, #536]	; (8004710 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 80044f6:	430a      	orrs	r2, r1
 80044f8:	655a      	str	r2, [r3, #84]	; 0x54
  }
#endif /* RCC_CCIPR_LPTIM1SEL */

#if defined(RCC_CCIPR_LPTIM2SEL)
  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 80044fa:	687b      	ldr	r3, [r7, #4]
 80044fc:	681a      	ldr	r2, [r3, #0]
 80044fe:	2380      	movs	r3, #128	; 0x80
 8004500:	00db      	lsls	r3, r3, #3
 8004502:	4013      	ands	r3, r2
 8004504:	d009      	beq.n	800451a <HAL_RCCEx_PeriphCLKConfig+0x25a>
  {
    assert_param(IS_RCC_LPTIM2CLKSOURCE(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8004506:	4b82      	ldr	r3, [pc, #520]	; (8004710 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8004508:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800450a:	4a86      	ldr	r2, [pc, #536]	; (8004724 <HAL_RCCEx_PeriphCLKConfig+0x464>)
 800450c:	4013      	ands	r3, r2
 800450e:	0019      	movs	r1, r3
 8004510:	687b      	ldr	r3, [r7, #4]
 8004512:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004514:	4b7e      	ldr	r3, [pc, #504]	; (8004710 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8004516:	430a      	orrs	r2, r1
 8004518:	655a      	str	r2, [r3, #84]	; 0x54
  }
#endif /* RCC_CCIPR_LPTIM2SEL */

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800451a:	687b      	ldr	r3, [r7, #4]
 800451c:	681b      	ldr	r3, [r3, #0]
 800451e:	2220      	movs	r2, #32
 8004520:	4013      	ands	r3, r2
 8004522:	d009      	beq.n	8004538 <HAL_RCCEx_PeriphCLKConfig+0x278>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8004524:	4b7a      	ldr	r3, [pc, #488]	; (8004710 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8004526:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004528:	4a7f      	ldr	r2, [pc, #508]	; (8004728 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 800452a:	4013      	ands	r3, r2
 800452c:	0019      	movs	r1, r3
 800452e:	687b      	ldr	r3, [r7, #4]
 8004530:	699a      	ldr	r2, [r3, #24]
 8004532:	4b77      	ldr	r3, [pc, #476]	; (8004710 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8004534:	430a      	orrs	r2, r1
 8004536:	655a      	str	r2, [r3, #84]	; 0x54
  }

#if defined(RCC_CCIPR_I2C2SEL)
  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8004538:	687b      	ldr	r3, [r7, #4]
 800453a:	681b      	ldr	r3, [r3, #0]
 800453c:	2240      	movs	r2, #64	; 0x40
 800453e:	4013      	ands	r3, r2
 8004540:	d009      	beq.n	8004556 <HAL_RCCEx_PeriphCLKConfig+0x296>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8004542:	4b73      	ldr	r3, [pc, #460]	; (8004710 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8004544:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004546:	4a79      	ldr	r2, [pc, #484]	; (800472c <HAL_RCCEx_PeriphCLKConfig+0x46c>)
 8004548:	4013      	ands	r3, r2
 800454a:	0019      	movs	r1, r3
 800454c:	687b      	ldr	r3, [r7, #4]
 800454e:	69da      	ldr	r2, [r3, #28]
 8004550:	4b6f      	ldr	r3, [pc, #444]	; (8004710 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8004552:	430a      	orrs	r2, r1
 8004554:	655a      	str	r2, [r3, #84]	; 0x54
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
    }
  }
#endif /* RNG */
  /*-------------------------- ADC clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8004556:	687b      	ldr	r3, [r7, #4]
 8004558:	681a      	ldr	r2, [r3, #0]
 800455a:	2380      	movs	r3, #128	; 0x80
 800455c:	01db      	lsls	r3, r3, #7
 800455e:	4013      	ands	r3, r2
 8004560:	d015      	beq.n	800458e <HAL_RCCEx_PeriphCLKConfig+0x2ce>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8004562:	4b6b      	ldr	r3, [pc, #428]	; (8004710 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8004564:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004566:	009b      	lsls	r3, r3, #2
 8004568:	0899      	lsrs	r1, r3, #2
 800456a:	687b      	ldr	r3, [r7, #4]
 800456c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800456e:	4b68      	ldr	r3, [pc, #416]	; (8004710 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8004570:	430a      	orrs	r2, r1
 8004572:	655a      	str	r2, [r3, #84]	; 0x54

    if (PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLADC)
 8004574:	687b      	ldr	r3, [r7, #4]
 8004576:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004578:	2380      	movs	r3, #128	; 0x80
 800457a:	05db      	lsls	r3, r3, #23
 800457c:	429a      	cmp	r2, r3
 800457e:	d106      	bne.n	800458e <HAL_RCCEx_PeriphCLKConfig+0x2ce>
    {
      /* Enable PLLPCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLPCLK);
 8004580:	4b63      	ldr	r3, [pc, #396]	; (8004710 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8004582:	68da      	ldr	r2, [r3, #12]
 8004584:	4b62      	ldr	r3, [pc, #392]	; (8004710 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8004586:	2180      	movs	r1, #128	; 0x80
 8004588:	0249      	lsls	r1, r1, #9
 800458a:	430a      	orrs	r2, r1
 800458c:	60da      	str	r2, [r3, #12]
    }
  }

#if defined(CEC)
  /*-------------------------- CEC clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 800458e:	687b      	ldr	r3, [r7, #4]
 8004590:	681a      	ldr	r2, [r3, #0]
 8004592:	2380      	movs	r3, #128	; 0x80
 8004594:	031b      	lsls	r3, r3, #12
 8004596:	4013      	ands	r3, r2
 8004598:	d009      	beq.n	80045ae <HAL_RCCEx_PeriphCLKConfig+0x2ee>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 800459a:	4b5d      	ldr	r3, [pc, #372]	; (8004710 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 800459c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800459e:	2240      	movs	r2, #64	; 0x40
 80045a0:	4393      	bics	r3, r2
 80045a2:	0019      	movs	r1, r3
 80045a4:	687b      	ldr	r3, [r7, #4]
 80045a6:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80045a8:	4b59      	ldr	r3, [pc, #356]	; (8004710 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 80045aa:	430a      	orrs	r2, r1
 80045ac:	655a      	str	r2, [r3, #84]	; 0x54
  }
#endif /* CEC */

#if defined(RCC_CCIPR_TIM1SEL)
  /*-------------------------- TIM1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM1) == RCC_PERIPHCLK_TIM1)
 80045ae:	687b      	ldr	r3, [r7, #4]
 80045b0:	681a      	ldr	r2, [r3, #0]
 80045b2:	2380      	movs	r3, #128	; 0x80
 80045b4:	039b      	lsls	r3, r3, #14
 80045b6:	4013      	ands	r3, r2
 80045b8:	d016      	beq.n	80045e8 <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM1CLKSOURCE(PeriphClkInit->Tim1ClockSelection));

    /* Configure the TIM1 clock source */
    __HAL_RCC_TIM1_CONFIG(PeriphClkInit->Tim1ClockSelection);
 80045ba:	4b55      	ldr	r3, [pc, #340]	; (8004710 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 80045bc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80045be:	4a5c      	ldr	r2, [pc, #368]	; (8004730 <HAL_RCCEx_PeriphCLKConfig+0x470>)
 80045c0:	4013      	ands	r3, r2
 80045c2:	0019      	movs	r1, r3
 80045c4:	687b      	ldr	r3, [r7, #4]
 80045c6:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80045c8:	4b51      	ldr	r3, [pc, #324]	; (8004710 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 80045ca:	430a      	orrs	r2, r1
 80045cc:	655a      	str	r2, [r3, #84]	; 0x54

    if (PeriphClkInit->Tim1ClockSelection == RCC_TIM1CLKSOURCE_PLL)
 80045ce:	687b      	ldr	r3, [r7, #4]
 80045d0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80045d2:	2380      	movs	r3, #128	; 0x80
 80045d4:	03db      	lsls	r3, r3, #15
 80045d6:	429a      	cmp	r2, r3
 80045d8:	d106      	bne.n	80045e8 <HAL_RCCEx_PeriphCLKConfig+0x328>
    {
      /* Enable PLLQCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
 80045da:	4b4d      	ldr	r3, [pc, #308]	; (8004710 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 80045dc:	68da      	ldr	r2, [r3, #12]
 80045de:	4b4c      	ldr	r3, [pc, #304]	; (8004710 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 80045e0:	2180      	movs	r1, #128	; 0x80
 80045e2:	0449      	lsls	r1, r1, #17
 80045e4:	430a      	orrs	r2, r1
 80045e6:	60da      	str	r2, [r3, #12]
  }
#endif /* RCC_CCIPR_TIM1SEL */

#if defined(RCC_CCIPR_TIM15SEL)
  /*-------------------------- TIM15 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM15) == RCC_PERIPHCLK_TIM15)
 80045e8:	687b      	ldr	r3, [r7, #4]
 80045ea:	681a      	ldr	r2, [r3, #0]
 80045ec:	2380      	movs	r3, #128	; 0x80
 80045ee:	03db      	lsls	r3, r3, #15
 80045f0:	4013      	ands	r3, r2
 80045f2:	d016      	beq.n	8004622 <HAL_RCCEx_PeriphCLKConfig+0x362>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM15CLKSOURCE(PeriphClkInit->Tim15ClockSelection));

    /* Configure the TIM15 clock source */
    __HAL_RCC_TIM15_CONFIG(PeriphClkInit->Tim15ClockSelection);
 80045f4:	4b46      	ldr	r3, [pc, #280]	; (8004710 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 80045f6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80045f8:	4a4e      	ldr	r2, [pc, #312]	; (8004734 <HAL_RCCEx_PeriphCLKConfig+0x474>)
 80045fa:	4013      	ands	r3, r2
 80045fc:	0019      	movs	r1, r3
 80045fe:	687b      	ldr	r3, [r7, #4]
 8004600:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8004602:	4b43      	ldr	r3, [pc, #268]	; (8004710 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8004604:	430a      	orrs	r2, r1
 8004606:	655a      	str	r2, [r3, #84]	; 0x54

    if (PeriphClkInit->Tim15ClockSelection == RCC_TIM15CLKSOURCE_PLL)
 8004608:	687b      	ldr	r3, [r7, #4]
 800460a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800460c:	2380      	movs	r3, #128	; 0x80
 800460e:	045b      	lsls	r3, r3, #17
 8004610:	429a      	cmp	r2, r3
 8004612:	d106      	bne.n	8004622 <HAL_RCCEx_PeriphCLKConfig+0x362>
    {
      /* Enable PLLQCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
 8004614:	4b3e      	ldr	r3, [pc, #248]	; (8004710 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8004616:	68da      	ldr	r2, [r3, #12]
 8004618:	4b3d      	ldr	r3, [pc, #244]	; (8004710 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 800461a:	2180      	movs	r1, #128	; 0x80
 800461c:	0449      	lsls	r1, r1, #17
 800461e:	430a      	orrs	r2, r1
 8004620:	60da      	str	r2, [r3, #12]
    }
  }
#endif /* RCC_CCIPR_TIM15SEL */

  /*-------------------------- I2S1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S1) == RCC_PERIPHCLK_I2S1)
 8004622:	687b      	ldr	r3, [r7, #4]
 8004624:	681a      	ldr	r2, [r3, #0]
 8004626:	2380      	movs	r3, #128	; 0x80
 8004628:	011b      	lsls	r3, r3, #4
 800462a:	4013      	ands	r3, r2
 800462c:	d014      	beq.n	8004658 <HAL_RCCEx_PeriphCLKConfig+0x398>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2S1CLKSOURCE(PeriphClkInit->I2s1ClockSelection));

    /* Configure the I2S1 clock source */
    __HAL_RCC_I2S1_CONFIG(PeriphClkInit->I2s1ClockSelection);
 800462e:	4b38      	ldr	r3, [pc, #224]	; (8004710 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8004630:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004632:	2203      	movs	r2, #3
 8004634:	4393      	bics	r3, r2
 8004636:	0019      	movs	r1, r3
 8004638:	687b      	ldr	r3, [r7, #4]
 800463a:	6a1a      	ldr	r2, [r3, #32]
 800463c:	4b34      	ldr	r3, [pc, #208]	; (8004710 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 800463e:	430a      	orrs	r2, r1
 8004640:	659a      	str	r2, [r3, #88]	; 0x58

    if (PeriphClkInit->I2s1ClockSelection == RCC_I2S1CLKSOURCE_PLL)
 8004642:	687b      	ldr	r3, [r7, #4]
 8004644:	6a1b      	ldr	r3, [r3, #32]
 8004646:	2b01      	cmp	r3, #1
 8004648:	d106      	bne.n	8004658 <HAL_RCCEx_PeriphCLKConfig+0x398>
    {
      /* Enable PLLPCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLPCLK);
 800464a:	4b31      	ldr	r3, [pc, #196]	; (8004710 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 800464c:	68da      	ldr	r2, [r3, #12]
 800464e:	4b30      	ldr	r3, [pc, #192]	; (8004710 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8004650:	2180      	movs	r1, #128	; 0x80
 8004652:	0249      	lsls	r1, r1, #9
 8004654:	430a      	orrs	r2, r1
 8004656:	60da      	str	r2, [r3, #12]
    }
  }

#if defined(RCC_CCIPR2_I2S2SEL)
  /*-------------------------- I2S2 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S2) == RCC_PERIPHCLK_I2S2)
 8004658:	687b      	ldr	r3, [r7, #4]
 800465a:	681a      	ldr	r2, [r3, #0]
 800465c:	2380      	movs	r3, #128	; 0x80
 800465e:	019b      	lsls	r3, r3, #6
 8004660:	4013      	ands	r3, r2
 8004662:	d014      	beq.n	800468e <HAL_RCCEx_PeriphCLKConfig+0x3ce>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2S2CLKSOURCE(PeriphClkInit->I2s2ClockSelection));

    /* Configure the I2S2 clock source */
    __HAL_RCC_I2S2_CONFIG(PeriphClkInit->I2s2ClockSelection);
 8004664:	4b2a      	ldr	r3, [pc, #168]	; (8004710 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8004666:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004668:	220c      	movs	r2, #12
 800466a:	4393      	bics	r3, r2
 800466c:	0019      	movs	r1, r3
 800466e:	687b      	ldr	r3, [r7, #4]
 8004670:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8004672:	4b27      	ldr	r3, [pc, #156]	; (8004710 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8004674:	430a      	orrs	r2, r1
 8004676:	659a      	str	r2, [r3, #88]	; 0x58

    if (PeriphClkInit->I2s2ClockSelection == RCC_I2S2CLKSOURCE_PLL)
 8004678:	687b      	ldr	r3, [r7, #4]
 800467a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800467c:	2b04      	cmp	r3, #4
 800467e:	d106      	bne.n	800468e <HAL_RCCEx_PeriphCLKConfig+0x3ce>
    {
      /* Enable PLLPCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLPCLK);
 8004680:	4b23      	ldr	r3, [pc, #140]	; (8004710 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8004682:	68da      	ldr	r2, [r3, #12]
 8004684:	4b22      	ldr	r3, [pc, #136]	; (8004710 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8004686:	2180      	movs	r1, #128	; 0x80
 8004688:	0249      	lsls	r1, r1, #9
 800468a:	430a      	orrs	r2, r1
 800468c:	60da      	str	r2, [r3, #12]
  }
#endif /* RCC_CCIPR2_I2S2SEL */

#if defined(STM32G0C1xx) || defined(STM32G0B1xx)  || defined(STM32G0B0xx)
  /*-------------------------- USB clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 800468e:	687b      	ldr	r3, [r7, #4]
 8004690:	681a      	ldr	r2, [r3, #0]
 8004692:	2380      	movs	r3, #128	; 0x80
 8004694:	045b      	lsls	r3, r3, #17
 8004696:	4013      	ands	r3, r2
 8004698:	d016      	beq.n	80046c8 <HAL_RCCEx_PeriphCLKConfig+0x408>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800469a:	4b1d      	ldr	r3, [pc, #116]	; (8004710 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 800469c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800469e:	4a22      	ldr	r2, [pc, #136]	; (8004728 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 80046a0:	4013      	ands	r3, r2
 80046a2:	0019      	movs	r1, r3
 80046a4:	687b      	ldr	r3, [r7, #4]
 80046a6:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80046a8:	4b19      	ldr	r3, [pc, #100]	; (8004710 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 80046aa:	430a      	orrs	r2, r1
 80046ac:	659a      	str	r2, [r3, #88]	; 0x58

    if (PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 80046ae:	687b      	ldr	r3, [r7, #4]
 80046b0:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80046b2:	2380      	movs	r3, #128	; 0x80
 80046b4:	019b      	lsls	r3, r3, #6
 80046b6:	429a      	cmp	r2, r3
 80046b8:	d106      	bne.n	80046c8 <HAL_RCCEx_PeriphCLKConfig+0x408>
    {
      /* Enable PLLQCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
 80046ba:	4b15      	ldr	r3, [pc, #84]	; (8004710 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 80046bc:	68da      	ldr	r2, [r3, #12]
 80046be:	4b14      	ldr	r3, [pc, #80]	; (8004710 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 80046c0:	2180      	movs	r1, #128	; 0x80
 80046c2:	0449      	lsls	r1, r1, #17
 80046c4:	430a      	orrs	r2, r1
 80046c6:	60da      	str	r2, [r3, #12]
  }
#endif /* STM32G0C1xx || STM32G0B1xx || STM32G0B0xx */

#if defined(FDCAN1) || defined(FDCAN2)
  /*-------------------------- FDCAN clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 80046c8:	687b      	ldr	r3, [r7, #4]
 80046ca:	681a      	ldr	r2, [r3, #0]
 80046cc:	2380      	movs	r3, #128	; 0x80
 80046ce:	049b      	lsls	r3, r3, #18
 80046d0:	4013      	ands	r3, r2
 80046d2:	d016      	beq.n	8004702 <HAL_RCCEx_PeriphCLKConfig+0x442>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FDCANCLKSOURCE(PeriphClkInit->FdcanClockSelection));

    /* Configure the FDCAN clock source */
    __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 80046d4:	4b0e      	ldr	r3, [pc, #56]	; (8004710 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 80046d6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80046d8:	4a10      	ldr	r2, [pc, #64]	; (800471c <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 80046da:	4013      	ands	r3, r2
 80046dc:	0019      	movs	r1, r3
 80046de:	687b      	ldr	r3, [r7, #4]
 80046e0:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80046e2:	4b0b      	ldr	r3, [pc, #44]	; (8004710 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 80046e4:	430a      	orrs	r2, r1
 80046e6:	659a      	str	r2, [r3, #88]	; 0x58

    if (PeriphClkInit->FdcanClockSelection == RCC_FDCANCLKSOURCE_PLL)
 80046e8:	687b      	ldr	r3, [r7, #4]
 80046ea:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80046ec:	2380      	movs	r3, #128	; 0x80
 80046ee:	005b      	lsls	r3, r3, #1
 80046f0:	429a      	cmp	r2, r3
 80046f2:	d106      	bne.n	8004702 <HAL_RCCEx_PeriphCLKConfig+0x442>
    {
      /* Enable PLLQCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
 80046f4:	4b06      	ldr	r3, [pc, #24]	; (8004710 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 80046f6:	68da      	ldr	r2, [r3, #12]
 80046f8:	4b05      	ldr	r3, [pc, #20]	; (8004710 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 80046fa:	2180      	movs	r1, #128	; 0x80
 80046fc:	0449      	lsls	r1, r1, #17
 80046fe:	430a      	orrs	r2, r1
 8004700:	60da      	str	r2, [r3, #12]
    }
  }
#endif /* FDCAN1 || FDCAN2 */

  return status;
 8004702:	2312      	movs	r3, #18
 8004704:	18fb      	adds	r3, r7, r3
 8004706:	781b      	ldrb	r3, [r3, #0]
}
 8004708:	0018      	movs	r0, r3
 800470a:	46bd      	mov	sp, r7
 800470c:	b006      	add	sp, #24
 800470e:	bd80      	pop	{r7, pc}
 8004710:	40021000 	.word	0x40021000
 8004714:	efffffff 	.word	0xefffffff
 8004718:	fffff3ff 	.word	0xfffff3ff
 800471c:	fffffcff 	.word	0xfffffcff
 8004720:	fff3ffff 	.word	0xfff3ffff
 8004724:	ffcfffff 	.word	0xffcfffff
 8004728:	ffffcfff 	.word	0xffffcfff
 800472c:	ffff3fff 	.word	0xffff3fff
 8004730:	ffbfffff 	.word	0xffbfffff
 8004734:	feffffff 	.word	0xfeffffff

08004738 <HAL_RTC_Init>:
  * @brief  Initialize the RTC peripheral
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 8004738:	b5b0      	push	{r4, r5, r7, lr}
 800473a:	b084      	sub	sp, #16
 800473c:	af00      	add	r7, sp, #0
 800473e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_ERROR;
 8004740:	230f      	movs	r3, #15
 8004742:	18fb      	adds	r3, r7, r3
 8004744:	2201      	movs	r2, #1
 8004746:	701a      	strb	r2, [r3, #0]

  /* Check the RTC peripheral state */
  if(hrtc != NULL)
 8004748:	687b      	ldr	r3, [r7, #4]
 800474a:	2b00      	cmp	r3, #0
 800474c:	d100      	bne.n	8004750 <HAL_RTC_Init+0x18>
 800474e:	e08c      	b.n	800486a <HAL_RTC_Init+0x132>
    assert_param(IS_RTC_OUTPUT_REMAP(hrtc->Init.OutPutRemap));
    assert_param(IS_RTC_OUTPUT_POL(hrtc->Init.OutPutPolarity));
    assert_param(IS_RTC_OUTPUT_TYPE(hrtc->Init.OutPutType));
    assert_param(IS_RTC_OUTPUT_PULLUP(hrtc->Init.OutPutPullUp));

    if(hrtc->State == HAL_RTC_STATE_RESET)
 8004750:	687b      	ldr	r3, [r7, #4]
 8004752:	2229      	movs	r2, #41	; 0x29
 8004754:	5c9b      	ldrb	r3, [r3, r2]
 8004756:	b2db      	uxtb	r3, r3
 8004758:	2b00      	cmp	r3, #0
 800475a:	d10b      	bne.n	8004774 <HAL_RTC_Init+0x3c>
    {
      /* Allocate lock resource and initialize it */
      hrtc->Lock = HAL_UNLOCKED;
 800475c:	687b      	ldr	r3, [r7, #4]
 800475e:	2228      	movs	r2, #40	; 0x28
 8004760:	2100      	movs	r1, #0
 8004762:	5499      	strb	r1, [r3, r2]

      /* Process TAMP peripheral offset from RTC one */
      hrtc->TampOffset = (TAMP_BASE - RTC_BASE);
 8004764:	687b      	ldr	r3, [r7, #4]
 8004766:	2288      	movs	r2, #136	; 0x88
 8004768:	0212      	lsls	r2, r2, #8
 800476a:	605a      	str	r2, [r3, #4]
      {
        hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
      }
#else
      /* Initialize RTC MSP */
      HAL_RTC_MspInit(hrtc);
 800476c:	687b      	ldr	r3, [r7, #4]
 800476e:	0018      	movs	r0, r3
 8004770:	f7fe fa9a 	bl	8002ca8 <HAL_RTC_MspInit>
#endif /* (USE_HAL_RTC_REGISTER_CALLBACKS) */
    }

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_BUSY;
 8004774:	687b      	ldr	r3, [r7, #4]
 8004776:	2229      	movs	r2, #41	; 0x29
 8004778:	2102      	movs	r1, #2
 800477a:	5499      	strb	r1, [r3, r2]

    /* Check whether the calendar needs to be initialized */
    if (__HAL_RTC_IS_CALENDAR_INITIALIZED(hrtc) == 0U)
 800477c:	687b      	ldr	r3, [r7, #4]
 800477e:	681b      	ldr	r3, [r3, #0]
 8004780:	68db      	ldr	r3, [r3, #12]
 8004782:	2210      	movs	r2, #16
 8004784:	4013      	ands	r3, r2
 8004786:	2b10      	cmp	r3, #16
 8004788:	d062      	beq.n	8004850 <HAL_RTC_Init+0x118>
    {
      /* Disable the write protection for RTC registers */
      __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800478a:	687b      	ldr	r3, [r7, #4]
 800478c:	681b      	ldr	r3, [r3, #0]
 800478e:	22ca      	movs	r2, #202	; 0xca
 8004790:	625a      	str	r2, [r3, #36]	; 0x24
 8004792:	687b      	ldr	r3, [r7, #4]
 8004794:	681b      	ldr	r3, [r3, #0]
 8004796:	2253      	movs	r2, #83	; 0x53
 8004798:	625a      	str	r2, [r3, #36]	; 0x24

      /* Enter Initialization mode */
      status = RTC_EnterInitMode(hrtc);
 800479a:	250f      	movs	r5, #15
 800479c:	197c      	adds	r4, r7, r5
 800479e:	687b      	ldr	r3, [r7, #4]
 80047a0:	0018      	movs	r0, r3
 80047a2:	f000 fb9c 	bl	8004ede <RTC_EnterInitMode>
 80047a6:	0003      	movs	r3, r0
 80047a8:	7023      	strb	r3, [r4, #0]

      if(status == HAL_OK)
 80047aa:	0028      	movs	r0, r5
 80047ac:	183b      	adds	r3, r7, r0
 80047ae:	781b      	ldrb	r3, [r3, #0]
 80047b0:	2b00      	cmp	r3, #0
 80047b2:	d12c      	bne.n	800480e <HAL_RTC_Init+0xd6>
      {
        /* Clear RTC_CR FMT, OSEL and POL Bits */
        hrtc->Instance->CR &= ~(RTC_CR_FMT | RTC_CR_POL | RTC_CR_OSEL | RTC_CR_TAMPOE);
 80047b4:	687b      	ldr	r3, [r7, #4]
 80047b6:	681b      	ldr	r3, [r3, #0]
 80047b8:	699a      	ldr	r2, [r3, #24]
 80047ba:	687b      	ldr	r3, [r7, #4]
 80047bc:	681b      	ldr	r3, [r3, #0]
 80047be:	492e      	ldr	r1, [pc, #184]	; (8004878 <HAL_RTC_Init+0x140>)
 80047c0:	400a      	ands	r2, r1
 80047c2:	619a      	str	r2, [r3, #24]
        /* Set RTC_CR register */
        hrtc->Instance->CR |= (hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 80047c4:	687b      	ldr	r3, [r7, #4]
 80047c6:	681b      	ldr	r3, [r3, #0]
 80047c8:	6999      	ldr	r1, [r3, #24]
 80047ca:	687b      	ldr	r3, [r7, #4]
 80047cc:	689a      	ldr	r2, [r3, #8]
 80047ce:	687b      	ldr	r3, [r7, #4]
 80047d0:	695b      	ldr	r3, [r3, #20]
 80047d2:	431a      	orrs	r2, r3
 80047d4:	687b      	ldr	r3, [r7, #4]
 80047d6:	69db      	ldr	r3, [r3, #28]
 80047d8:	431a      	orrs	r2, r3
 80047da:	687b      	ldr	r3, [r7, #4]
 80047dc:	681b      	ldr	r3, [r3, #0]
 80047de:	430a      	orrs	r2, r1
 80047e0:	619a      	str	r2, [r3, #24]

        /* Configure the RTC PRER */
        hrtc->Instance->PRER = (hrtc->Init.SynchPrediv);
 80047e2:	687b      	ldr	r3, [r7, #4]
 80047e4:	681b      	ldr	r3, [r3, #0]
 80047e6:	687a      	ldr	r2, [r7, #4]
 80047e8:	6912      	ldr	r2, [r2, #16]
 80047ea:	611a      	str	r2, [r3, #16]
        hrtc->Instance->PRER |= (hrtc->Init.AsynchPrediv << RTC_PRER_PREDIV_A_Pos);
 80047ec:	687b      	ldr	r3, [r7, #4]
 80047ee:	681b      	ldr	r3, [r3, #0]
 80047f0:	6919      	ldr	r1, [r3, #16]
 80047f2:	687b      	ldr	r3, [r7, #4]
 80047f4:	68db      	ldr	r3, [r3, #12]
 80047f6:	041a      	lsls	r2, r3, #16
 80047f8:	687b      	ldr	r3, [r7, #4]
 80047fa:	681b      	ldr	r3, [r3, #0]
 80047fc:	430a      	orrs	r2, r1
 80047fe:	611a      	str	r2, [r3, #16]

        /* Exit Initialization mode */
        status = RTC_ExitInitMode(hrtc);
 8004800:	183c      	adds	r4, r7, r0
 8004802:	687b      	ldr	r3, [r7, #4]
 8004804:	0018      	movs	r0, r3
 8004806:	f000 fbad 	bl	8004f64 <RTC_ExitInitMode>
 800480a:	0003      	movs	r3, r0
 800480c:	7023      	strb	r3, [r4, #0]
      }

      if (status == HAL_OK)
 800480e:	230f      	movs	r3, #15
 8004810:	18fb      	adds	r3, r7, r3
 8004812:	781b      	ldrb	r3, [r3, #0]
 8004814:	2b00      	cmp	r3, #0
 8004816:	d116      	bne.n	8004846 <HAL_RTC_Init+0x10e>
      {
        hrtc->Instance->CR &= ~(RTC_CR_TAMPALRM_PU |RTC_CR_TAMPALRM_TYPE | RTC_CR_OUT2EN);
 8004818:	687b      	ldr	r3, [r7, #4]
 800481a:	681b      	ldr	r3, [r3, #0]
 800481c:	699a      	ldr	r2, [r3, #24]
 800481e:	687b      	ldr	r3, [r7, #4]
 8004820:	681b      	ldr	r3, [r3, #0]
 8004822:	00d2      	lsls	r2, r2, #3
 8004824:	08d2      	lsrs	r2, r2, #3
 8004826:	619a      	str	r2, [r3, #24]
        hrtc->Instance->CR |= (hrtc->Init.OutPutPullUp | hrtc->Init.OutPutType | hrtc->Init.OutPutRemap);
 8004828:	687b      	ldr	r3, [r7, #4]
 800482a:	681b      	ldr	r3, [r3, #0]
 800482c:	6999      	ldr	r1, [r3, #24]
 800482e:	687b      	ldr	r3, [r7, #4]
 8004830:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8004832:	687b      	ldr	r3, [r7, #4]
 8004834:	6a1b      	ldr	r3, [r3, #32]
 8004836:	431a      	orrs	r2, r3
 8004838:	687b      	ldr	r3, [r7, #4]
 800483a:	699b      	ldr	r3, [r3, #24]
 800483c:	431a      	orrs	r2, r3
 800483e:	687b      	ldr	r3, [r7, #4]
 8004840:	681b      	ldr	r3, [r3, #0]
 8004842:	430a      	orrs	r2, r1
 8004844:	619a      	str	r2, [r3, #24]
      }

      /* Enable the write protection for RTC registers */
      __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8004846:	687b      	ldr	r3, [r7, #4]
 8004848:	681b      	ldr	r3, [r3, #0]
 800484a:	22ff      	movs	r2, #255	; 0xff
 800484c:	625a      	str	r2, [r3, #36]	; 0x24
 800484e:	e003      	b.n	8004858 <HAL_RTC_Init+0x120>
    }
    else
    {
      /* The calendar is already initialized */
      status = HAL_OK;
 8004850:	230f      	movs	r3, #15
 8004852:	18fb      	adds	r3, r7, r3
 8004854:	2200      	movs	r2, #0
 8004856:	701a      	strb	r2, [r3, #0]
    }

    if (status == HAL_OK)
 8004858:	230f      	movs	r3, #15
 800485a:	18fb      	adds	r3, r7, r3
 800485c:	781b      	ldrb	r3, [r3, #0]
 800485e:	2b00      	cmp	r3, #0
 8004860:	d103      	bne.n	800486a <HAL_RTC_Init+0x132>
    {
      hrtc->State = HAL_RTC_STATE_READY;
 8004862:	687b      	ldr	r3, [r7, #4]
 8004864:	2229      	movs	r2, #41	; 0x29
 8004866:	2101      	movs	r1, #1
 8004868:	5499      	strb	r1, [r3, r2]
    }
  }

  return status;
 800486a:	230f      	movs	r3, #15
 800486c:	18fb      	adds	r3, r7, r3
 800486e:	781b      	ldrb	r3, [r3, #0]
}
 8004870:	0018      	movs	r0, r3
 8004872:	46bd      	mov	sp, r7
 8004874:	b004      	add	sp, #16
 8004876:	bdb0      	pop	{r4, r5, r7, pc}
 8004878:	fb8fffbf 	.word	0xfb8fffbf

0800487c <HAL_RTC_SetTime>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 800487c:	b5b0      	push	{r4, r5, r7, lr}
 800487e:	b086      	sub	sp, #24
 8004880:	af00      	add	r7, sp, #0
 8004882:	60f8      	str	r0, [r7, #12]
 8004884:	60b9      	str	r1, [r7, #8]
 8004886:	607a      	str	r2, [r7, #4]
  assert_param(IS_RTC_FORMAT(Format));
  assert_param(IS_RTC_DAYLIGHT_SAVING(sTime->DayLightSaving));
  assert_param(IS_RTC_STORE_OPERATION(sTime->StoreOperation));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8004888:	68fb      	ldr	r3, [r7, #12]
 800488a:	2228      	movs	r2, #40	; 0x28
 800488c:	5c9b      	ldrb	r3, [r3, r2]
 800488e:	2b01      	cmp	r3, #1
 8004890:	d101      	bne.n	8004896 <HAL_RTC_SetTime+0x1a>
 8004892:	2302      	movs	r3, #2
 8004894:	e092      	b.n	80049bc <HAL_RTC_SetTime+0x140>
 8004896:	68fb      	ldr	r3, [r7, #12]
 8004898:	2228      	movs	r2, #40	; 0x28
 800489a:	2101      	movs	r1, #1
 800489c:	5499      	strb	r1, [r3, r2]

  hrtc->State = HAL_RTC_STATE_BUSY;
 800489e:	68fb      	ldr	r3, [r7, #12]
 80048a0:	2229      	movs	r2, #41	; 0x29
 80048a2:	2102      	movs	r1, #2
 80048a4:	5499      	strb	r1, [r3, r2]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 80048a6:	68fb      	ldr	r3, [r7, #12]
 80048a8:	681b      	ldr	r3, [r3, #0]
 80048aa:	22ca      	movs	r2, #202	; 0xca
 80048ac:	625a      	str	r2, [r3, #36]	; 0x24
 80048ae:	68fb      	ldr	r3, [r7, #12]
 80048b0:	681b      	ldr	r3, [r3, #0]
 80048b2:	2253      	movs	r2, #83	; 0x53
 80048b4:	625a      	str	r2, [r3, #36]	; 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 80048b6:	2513      	movs	r5, #19
 80048b8:	197c      	adds	r4, r7, r5
 80048ba:	68fb      	ldr	r3, [r7, #12]
 80048bc:	0018      	movs	r0, r3
 80048be:	f000 fb0e 	bl	8004ede <RTC_EnterInitMode>
 80048c2:	0003      	movs	r3, r0
 80048c4:	7023      	strb	r3, [r4, #0]
  if(status == HAL_OK)
 80048c6:	197b      	adds	r3, r7, r5
 80048c8:	781b      	ldrb	r3, [r3, #0]
 80048ca:	2b00      	cmp	r3, #0
 80048cc:	d162      	bne.n	8004994 <HAL_RTC_SetTime+0x118>
  {
    if(Format == RTC_FORMAT_BIN)
 80048ce:	687b      	ldr	r3, [r7, #4]
 80048d0:	2b00      	cmp	r3, #0
 80048d2:	d125      	bne.n	8004920 <HAL_RTC_SetTime+0xa4>
    {
    if((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 80048d4:	68fb      	ldr	r3, [r7, #12]
 80048d6:	681b      	ldr	r3, [r3, #0]
 80048d8:	699b      	ldr	r3, [r3, #24]
 80048da:	2240      	movs	r2, #64	; 0x40
 80048dc:	4013      	ands	r3, r2
 80048de:	d102      	bne.n	80048e6 <HAL_RTC_SetTime+0x6a>
        assert_param(IS_RTC_HOUR12(sTime->Hours));
        assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
      }
      else
      {
        sTime->TimeFormat = 0x00U;
 80048e0:	68bb      	ldr	r3, [r7, #8]
 80048e2:	2200      	movs	r2, #0
 80048e4:	70da      	strb	r2, [r3, #3]
        assert_param(IS_RTC_HOUR24(sTime->Hours));
      }
      assert_param(IS_RTC_MINUTES(sTime->Minutes));
      assert_param(IS_RTC_SECONDS(sTime->Seconds));

      tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << RTC_TR_HU_Pos) | \
 80048e6:	68bb      	ldr	r3, [r7, #8]
 80048e8:	781b      	ldrb	r3, [r3, #0]
 80048ea:	0018      	movs	r0, r3
 80048ec:	f000 fb7e 	bl	8004fec <RTC_ByteToBcd2>
 80048f0:	0003      	movs	r3, r0
 80048f2:	041c      	lsls	r4, r3, #16
                          ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 80048f4:	68bb      	ldr	r3, [r7, #8]
 80048f6:	785b      	ldrb	r3, [r3, #1]
 80048f8:	0018      	movs	r0, r3
 80048fa:	f000 fb77 	bl	8004fec <RTC_ByteToBcd2>
 80048fe:	0003      	movs	r3, r0
 8004900:	021b      	lsls	r3, r3, #8
      tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << RTC_TR_HU_Pos) | \
 8004902:	431c      	orrs	r4, r3
                          ((uint32_t)RTC_ByteToBcd2(sTime->Seconds) << RTC_TR_SU_Pos) | \
 8004904:	68bb      	ldr	r3, [r7, #8]
 8004906:	789b      	ldrb	r3, [r3, #2]
 8004908:	0018      	movs	r0, r3
 800490a:	f000 fb6f 	bl	8004fec <RTC_ByteToBcd2>
 800490e:	0003      	movs	r3, r0
                          ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 8004910:	0022      	movs	r2, r4
 8004912:	431a      	orrs	r2, r3
                          (((uint32_t)sTime->TimeFormat) << RTC_TR_PM_Pos));
 8004914:	68bb      	ldr	r3, [r7, #8]
 8004916:	78db      	ldrb	r3, [r3, #3]
 8004918:	059b      	lsls	r3, r3, #22
      tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << RTC_TR_HU_Pos) | \
 800491a:	4313      	orrs	r3, r2
 800491c:	617b      	str	r3, [r7, #20]
 800491e:	e017      	b.n	8004950 <HAL_RTC_SetTime+0xd4>
    }
    else
    {
    if((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 8004920:	68fb      	ldr	r3, [r7, #12]
 8004922:	681b      	ldr	r3, [r3, #0]
 8004924:	699b      	ldr	r3, [r3, #24]
 8004926:	2240      	movs	r2, #64	; 0x40
 8004928:	4013      	ands	r3, r2
 800492a:	d102      	bne.n	8004932 <HAL_RTC_SetTime+0xb6>
        assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sTime->Hours)));
        assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
      }
      else
      {
        sTime->TimeFormat = 0x00U;
 800492c:	68bb      	ldr	r3, [r7, #8]
 800492e:	2200      	movs	r2, #0
 8004930:	70da      	strb	r2, [r3, #3]
        assert_param(IS_RTC_HOUR24(RTC_Bcd2ToByte(sTime->Hours)));
      }
      assert_param(IS_RTC_MINUTES(RTC_Bcd2ToByte(sTime->Minutes)));
      assert_param(IS_RTC_SECONDS(RTC_Bcd2ToByte(sTime->Seconds)));
      tmpreg = (((uint32_t)(sTime->Hours) << RTC_TR_HU_Pos) | \
 8004932:	68bb      	ldr	r3, [r7, #8]
 8004934:	781b      	ldrb	r3, [r3, #0]
 8004936:	041a      	lsls	r2, r3, #16
                ((uint32_t)(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 8004938:	68bb      	ldr	r3, [r7, #8]
 800493a:	785b      	ldrb	r3, [r3, #1]
 800493c:	021b      	lsls	r3, r3, #8
      tmpreg = (((uint32_t)(sTime->Hours) << RTC_TR_HU_Pos) | \
 800493e:	4313      	orrs	r3, r2
                ((uint32_t)(sTime->Seconds) << RTC_TR_SU_Pos) | \
 8004940:	68ba      	ldr	r2, [r7, #8]
 8004942:	7892      	ldrb	r2, [r2, #2]
                ((uint32_t)(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 8004944:	431a      	orrs	r2, r3
                ((uint32_t)(sTime->TimeFormat) << RTC_TR_PM_Pos));
 8004946:	68bb      	ldr	r3, [r7, #8]
 8004948:	78db      	ldrb	r3, [r3, #3]
 800494a:	059b      	lsls	r3, r3, #22
      tmpreg = (((uint32_t)(sTime->Hours) << RTC_TR_HU_Pos) | \
 800494c:	4313      	orrs	r3, r2
 800494e:	617b      	str	r3, [r7, #20]
    }

    /* Set the RTC_TR register */
    hrtc->Instance->TR = (uint32_t)(tmpreg & RTC_TR_RESERVED_MASK);
 8004950:	68fb      	ldr	r3, [r7, #12]
 8004952:	681b      	ldr	r3, [r3, #0]
 8004954:	697a      	ldr	r2, [r7, #20]
 8004956:	491b      	ldr	r1, [pc, #108]	; (80049c4 <HAL_RTC_SetTime+0x148>)
 8004958:	400a      	ands	r2, r1
 800495a:	601a      	str	r2, [r3, #0]

    /* This interface is deprecated. To manage Daylight Saving Time, please use HAL_RTC_DST_xxx functions */
    hrtc->Instance->CR &= ((uint32_t)~RTC_CR_BKP);
 800495c:	68fb      	ldr	r3, [r7, #12]
 800495e:	681b      	ldr	r3, [r3, #0]
 8004960:	699a      	ldr	r2, [r3, #24]
 8004962:	68fb      	ldr	r3, [r7, #12]
 8004964:	681b      	ldr	r3, [r3, #0]
 8004966:	4918      	ldr	r1, [pc, #96]	; (80049c8 <HAL_RTC_SetTime+0x14c>)
 8004968:	400a      	ands	r2, r1
 800496a:	619a      	str	r2, [r3, #24]

    /* This interface is deprecated. To manage Daylight Saving Time, please use HAL_RTC_DST_xxx functions */
    hrtc->Instance->CR |= (uint32_t)(sTime->DayLightSaving | sTime->StoreOperation);
 800496c:	68fb      	ldr	r3, [r7, #12]
 800496e:	681b      	ldr	r3, [r3, #0]
 8004970:	6999      	ldr	r1, [r3, #24]
 8004972:	68bb      	ldr	r3, [r7, #8]
 8004974:	68da      	ldr	r2, [r3, #12]
 8004976:	68bb      	ldr	r3, [r7, #8]
 8004978:	691b      	ldr	r3, [r3, #16]
 800497a:	431a      	orrs	r2, r3
 800497c:	68fb      	ldr	r3, [r7, #12]
 800497e:	681b      	ldr	r3, [r3, #0]
 8004980:	430a      	orrs	r2, r1
 8004982:	619a      	str	r2, [r3, #24]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 8004984:	2313      	movs	r3, #19
 8004986:	18fc      	adds	r4, r7, r3
 8004988:	68fb      	ldr	r3, [r7, #12]
 800498a:	0018      	movs	r0, r3
 800498c:	f000 faea 	bl	8004f64 <RTC_ExitInitMode>
 8004990:	0003      	movs	r3, r0
 8004992:	7023      	strb	r3, [r4, #0]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8004994:	68fb      	ldr	r3, [r7, #12]
 8004996:	681b      	ldr	r3, [r3, #0]
 8004998:	22ff      	movs	r2, #255	; 0xff
 800499a:	625a      	str	r2, [r3, #36]	; 0x24
  
  if (status == HAL_OK)
 800499c:	2313      	movs	r3, #19
 800499e:	18fb      	adds	r3, r7, r3
 80049a0:	781b      	ldrb	r3, [r3, #0]
 80049a2:	2b00      	cmp	r3, #0
 80049a4:	d103      	bne.n	80049ae <HAL_RTC_SetTime+0x132>
  {
   hrtc->State = HAL_RTC_STATE_READY;
 80049a6:	68fb      	ldr	r3, [r7, #12]
 80049a8:	2229      	movs	r2, #41	; 0x29
 80049aa:	2101      	movs	r1, #1
 80049ac:	5499      	strb	r1, [r3, r2]
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 80049ae:	68fb      	ldr	r3, [r7, #12]
 80049b0:	2228      	movs	r2, #40	; 0x28
 80049b2:	2100      	movs	r1, #0
 80049b4:	5499      	strb	r1, [r3, r2]

  return status;
 80049b6:	2313      	movs	r3, #19
 80049b8:	18fb      	adds	r3, r7, r3
 80049ba:	781b      	ldrb	r3, [r3, #0]
}
 80049bc:	0018      	movs	r0, r3
 80049be:	46bd      	mov	sp, r7
 80049c0:	b006      	add	sp, #24
 80049c2:	bdb0      	pop	{r4, r5, r7, pc}
 80049c4:	007f7f7f 	.word	0x007f7f7f
 80049c8:	fffbffff 	.word	0xfffbffff

080049cc <HAL_RTC_GetTime>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 80049cc:	b580      	push	{r7, lr}
 80049ce:	b086      	sub	sp, #24
 80049d0:	af00      	add	r7, sp, #0
 80049d2:	60f8      	str	r0, [r7, #12]
 80049d4:	60b9      	str	r1, [r7, #8]
 80049d6:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Get subseconds structure field from the corresponding register*/
  sTime->SubSeconds = (uint32_t)(hrtc->Instance->SSR);
 80049d8:	68fb      	ldr	r3, [r7, #12]
 80049da:	681b      	ldr	r3, [r3, #0]
 80049dc:	689a      	ldr	r2, [r3, #8]
 80049de:	68bb      	ldr	r3, [r7, #8]
 80049e0:	605a      	str	r2, [r3, #4]

  /* Get SecondFraction structure field from the corresponding register field*/
  sTime->SecondFraction = (uint32_t)(hrtc->Instance->PRER & RTC_PRER_PREDIV_S);
 80049e2:	68fb      	ldr	r3, [r7, #12]
 80049e4:	681b      	ldr	r3, [r3, #0]
 80049e6:	691b      	ldr	r3, [r3, #16]
 80049e8:	045b      	lsls	r3, r3, #17
 80049ea:	0c5a      	lsrs	r2, r3, #17
 80049ec:	68bb      	ldr	r3, [r7, #8]
 80049ee:	609a      	str	r2, [r3, #8]

  /* Get the TR register */
  tmpreg = (uint32_t)(hrtc->Instance->TR & RTC_TR_RESERVED_MASK);
 80049f0:	68fb      	ldr	r3, [r7, #12]
 80049f2:	681b      	ldr	r3, [r3, #0]
 80049f4:	681b      	ldr	r3, [r3, #0]
 80049f6:	4a22      	ldr	r2, [pc, #136]	; (8004a80 <HAL_RTC_GetTime+0xb4>)
 80049f8:	4013      	ands	r3, r2
 80049fa:	617b      	str	r3, [r7, #20]

  /* Fill the structure fields with the read parameters */
  sTime->Hours = (uint8_t)((tmpreg & (RTC_TR_HT | RTC_TR_HU)) >> RTC_TR_HU_Pos);
 80049fc:	697b      	ldr	r3, [r7, #20]
 80049fe:	0c1b      	lsrs	r3, r3, #16
 8004a00:	b2db      	uxtb	r3, r3
 8004a02:	223f      	movs	r2, #63	; 0x3f
 8004a04:	4013      	ands	r3, r2
 8004a06:	b2da      	uxtb	r2, r3
 8004a08:	68bb      	ldr	r3, [r7, #8]
 8004a0a:	701a      	strb	r2, [r3, #0]
  sTime->Minutes = (uint8_t)((tmpreg & (RTC_TR_MNT | RTC_TR_MNU)) >> RTC_TR_MNU_Pos);
 8004a0c:	697b      	ldr	r3, [r7, #20]
 8004a0e:	0a1b      	lsrs	r3, r3, #8
 8004a10:	b2db      	uxtb	r3, r3
 8004a12:	227f      	movs	r2, #127	; 0x7f
 8004a14:	4013      	ands	r3, r2
 8004a16:	b2da      	uxtb	r2, r3
 8004a18:	68bb      	ldr	r3, [r7, #8]
 8004a1a:	705a      	strb	r2, [r3, #1]
  sTime->Seconds = (uint8_t)((tmpreg & (RTC_TR_ST | RTC_TR_SU)) >> RTC_TR_SU_Pos);
 8004a1c:	697b      	ldr	r3, [r7, #20]
 8004a1e:	b2db      	uxtb	r3, r3
 8004a20:	227f      	movs	r2, #127	; 0x7f
 8004a22:	4013      	ands	r3, r2
 8004a24:	b2da      	uxtb	r2, r3
 8004a26:	68bb      	ldr	r3, [r7, #8]
 8004a28:	709a      	strb	r2, [r3, #2]
  sTime->TimeFormat = (uint8_t)((tmpreg & (RTC_TR_PM)) >> RTC_TR_PM_Pos);
 8004a2a:	697b      	ldr	r3, [r7, #20]
 8004a2c:	0d9b      	lsrs	r3, r3, #22
 8004a2e:	b2db      	uxtb	r3, r3
 8004a30:	2201      	movs	r2, #1
 8004a32:	4013      	ands	r3, r2
 8004a34:	b2da      	uxtb	r2, r3
 8004a36:	68bb      	ldr	r3, [r7, #8]
 8004a38:	70da      	strb	r2, [r3, #3]

  /* Check the input parameters format */
  if(Format == RTC_FORMAT_BIN)
 8004a3a:	687b      	ldr	r3, [r7, #4]
 8004a3c:	2b00      	cmp	r3, #0
 8004a3e:	d11a      	bne.n	8004a76 <HAL_RTC_GetTime+0xaa>
  {
    /* Convert the time structure parameters to Binary format */
    sTime->Hours = (uint8_t)RTC_Bcd2ToByte(sTime->Hours);
 8004a40:	68bb      	ldr	r3, [r7, #8]
 8004a42:	781b      	ldrb	r3, [r3, #0]
 8004a44:	0018      	movs	r0, r3
 8004a46:	f000 faf9 	bl	800503c <RTC_Bcd2ToByte>
 8004a4a:	0003      	movs	r3, r0
 8004a4c:	001a      	movs	r2, r3
 8004a4e:	68bb      	ldr	r3, [r7, #8]
 8004a50:	701a      	strb	r2, [r3, #0]
    sTime->Minutes = (uint8_t)RTC_Bcd2ToByte(sTime->Minutes);
 8004a52:	68bb      	ldr	r3, [r7, #8]
 8004a54:	785b      	ldrb	r3, [r3, #1]
 8004a56:	0018      	movs	r0, r3
 8004a58:	f000 faf0 	bl	800503c <RTC_Bcd2ToByte>
 8004a5c:	0003      	movs	r3, r0
 8004a5e:	001a      	movs	r2, r3
 8004a60:	68bb      	ldr	r3, [r7, #8]
 8004a62:	705a      	strb	r2, [r3, #1]
    sTime->Seconds = (uint8_t)RTC_Bcd2ToByte(sTime->Seconds);
 8004a64:	68bb      	ldr	r3, [r7, #8]
 8004a66:	789b      	ldrb	r3, [r3, #2]
 8004a68:	0018      	movs	r0, r3
 8004a6a:	f000 fae7 	bl	800503c <RTC_Bcd2ToByte>
 8004a6e:	0003      	movs	r3, r0
 8004a70:	001a      	movs	r2, r3
 8004a72:	68bb      	ldr	r3, [r7, #8]
 8004a74:	709a      	strb	r2, [r3, #2]
  }

  return HAL_OK;
 8004a76:	2300      	movs	r3, #0
}
 8004a78:	0018      	movs	r0, r3
 8004a7a:	46bd      	mov	sp, r7
 8004a7c:	b006      	add	sp, #24
 8004a7e:	bd80      	pop	{r7, pc}
 8004a80:	007f7f7f 	.word	0x007f7f7f

08004a84 <HAL_RTC_SetDate>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 8004a84:	b5b0      	push	{r4, r5, r7, lr}
 8004a86:	b086      	sub	sp, #24
 8004a88:	af00      	add	r7, sp, #0
 8004a8a:	60f8      	str	r0, [r7, #12]
 8004a8c:	60b9      	str	r1, [r7, #8]
 8004a8e:	607a      	str	r2, [r7, #4]

 /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

 /* Process Locked */
 __HAL_LOCK(hrtc);
 8004a90:	68fb      	ldr	r3, [r7, #12]
 8004a92:	2228      	movs	r2, #40	; 0x28
 8004a94:	5c9b      	ldrb	r3, [r3, r2]
 8004a96:	2b01      	cmp	r3, #1
 8004a98:	d101      	bne.n	8004a9e <HAL_RTC_SetDate+0x1a>
 8004a9a:	2302      	movs	r3, #2
 8004a9c:	e07e      	b.n	8004b9c <HAL_RTC_SetDate+0x118>
 8004a9e:	68fb      	ldr	r3, [r7, #12]
 8004aa0:	2228      	movs	r2, #40	; 0x28
 8004aa2:	2101      	movs	r1, #1
 8004aa4:	5499      	strb	r1, [r3, r2]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8004aa6:	68fb      	ldr	r3, [r7, #12]
 8004aa8:	2229      	movs	r2, #41	; 0x29
 8004aaa:	2102      	movs	r1, #2
 8004aac:	5499      	strb	r1, [r3, r2]

  if((Format == RTC_FORMAT_BIN) && ((sDate->Month & 0x10U) == 0x10U))
 8004aae:	687b      	ldr	r3, [r7, #4]
 8004ab0:	2b00      	cmp	r3, #0
 8004ab2:	d10e      	bne.n	8004ad2 <HAL_RTC_SetDate+0x4e>
 8004ab4:	68bb      	ldr	r3, [r7, #8]
 8004ab6:	785b      	ldrb	r3, [r3, #1]
 8004ab8:	001a      	movs	r2, r3
 8004aba:	2310      	movs	r3, #16
 8004abc:	4013      	ands	r3, r2
 8004abe:	d008      	beq.n	8004ad2 <HAL_RTC_SetDate+0x4e>
  {
    sDate->Month = (uint8_t)((sDate->Month & (uint8_t)~(0x10U)) + (uint8_t)0x0AU);
 8004ac0:	68bb      	ldr	r3, [r7, #8]
 8004ac2:	785b      	ldrb	r3, [r3, #1]
 8004ac4:	2210      	movs	r2, #16
 8004ac6:	4393      	bics	r3, r2
 8004ac8:	b2db      	uxtb	r3, r3
 8004aca:	330a      	adds	r3, #10
 8004acc:	b2da      	uxtb	r2, r3
 8004ace:	68bb      	ldr	r3, [r7, #8]
 8004ad0:	705a      	strb	r2, [r3, #1]
  }

  assert_param(IS_RTC_WEEKDAY(sDate->WeekDay));

  if(Format == RTC_FORMAT_BIN)
 8004ad2:	687b      	ldr	r3, [r7, #4]
 8004ad4:	2b00      	cmp	r3, #0
 8004ad6:	d11c      	bne.n	8004b12 <HAL_RTC_SetDate+0x8e>
  {
    assert_param(IS_RTC_YEAR(sDate->Year));
    assert_param(IS_RTC_MONTH(sDate->Month));
    assert_param(IS_RTC_DATE(sDate->Date));

   datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 8004ad8:	68bb      	ldr	r3, [r7, #8]
 8004ada:	78db      	ldrb	r3, [r3, #3]
 8004adc:	0018      	movs	r0, r3
 8004ade:	f000 fa85 	bl	8004fec <RTC_ByteToBcd2>
 8004ae2:	0003      	movs	r3, r0
 8004ae4:	041c      	lsls	r4, r3, #16
                 ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 8004ae6:	68bb      	ldr	r3, [r7, #8]
 8004ae8:	785b      	ldrb	r3, [r3, #1]
 8004aea:	0018      	movs	r0, r3
 8004aec:	f000 fa7e 	bl	8004fec <RTC_ByteToBcd2>
 8004af0:	0003      	movs	r3, r0
 8004af2:	021b      	lsls	r3, r3, #8
   datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 8004af4:	431c      	orrs	r4, r3
                 ((uint32_t)RTC_ByteToBcd2(sDate->Date)  << RTC_DR_DU_Pos) | \
 8004af6:	68bb      	ldr	r3, [r7, #8]
 8004af8:	789b      	ldrb	r3, [r3, #2]
 8004afa:	0018      	movs	r0, r3
 8004afc:	f000 fa76 	bl	8004fec <RTC_ByteToBcd2>
 8004b00:	0003      	movs	r3, r0
                 ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 8004b02:	0022      	movs	r2, r4
 8004b04:	431a      	orrs	r2, r3
                 ((uint32_t)sDate->WeekDay << RTC_DR_WDU_Pos));
 8004b06:	68bb      	ldr	r3, [r7, #8]
 8004b08:	781b      	ldrb	r3, [r3, #0]
 8004b0a:	035b      	lsls	r3, r3, #13
   datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 8004b0c:	4313      	orrs	r3, r2
 8004b0e:	617b      	str	r3, [r7, #20]
 8004b10:	e00e      	b.n	8004b30 <HAL_RTC_SetDate+0xac>
  {
    assert_param(IS_RTC_YEAR(RTC_Bcd2ToByte(sDate->Year)));
    assert_param(IS_RTC_MONTH(RTC_Bcd2ToByte(sDate->Month)));
    assert_param(IS_RTC_DATE(RTC_Bcd2ToByte(sDate->Date)));

    datetmpreg = ((((uint32_t)sDate->Year) << RTC_DR_YU_Pos) | \
 8004b12:	68bb      	ldr	r3, [r7, #8]
 8004b14:	78db      	ldrb	r3, [r3, #3]
 8004b16:	041a      	lsls	r2, r3, #16
                  (((uint32_t)sDate->Month) << RTC_DR_MU_Pos) | \
 8004b18:	68bb      	ldr	r3, [r7, #8]
 8004b1a:	785b      	ldrb	r3, [r3, #1]
 8004b1c:	021b      	lsls	r3, r3, #8
    datetmpreg = ((((uint32_t)sDate->Year) << RTC_DR_YU_Pos) | \
 8004b1e:	4313      	orrs	r3, r2
                  (((uint32_t)sDate->Date) << RTC_DR_DU_Pos)| \
 8004b20:	68ba      	ldr	r2, [r7, #8]
 8004b22:	7892      	ldrb	r2, [r2, #2]
                  (((uint32_t)sDate->Month) << RTC_DR_MU_Pos) | \
 8004b24:	431a      	orrs	r2, r3
                  (((uint32_t)sDate->WeekDay) << RTC_DR_WDU_Pos));
 8004b26:	68bb      	ldr	r3, [r7, #8]
 8004b28:	781b      	ldrb	r3, [r3, #0]
 8004b2a:	035b      	lsls	r3, r3, #13
    datetmpreg = ((((uint32_t)sDate->Year) << RTC_DR_YU_Pos) | \
 8004b2c:	4313      	orrs	r3, r2
 8004b2e:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8004b30:	68fb      	ldr	r3, [r7, #12]
 8004b32:	681b      	ldr	r3, [r3, #0]
 8004b34:	22ca      	movs	r2, #202	; 0xca
 8004b36:	625a      	str	r2, [r3, #36]	; 0x24
 8004b38:	68fb      	ldr	r3, [r7, #12]
 8004b3a:	681b      	ldr	r3, [r3, #0]
 8004b3c:	2253      	movs	r2, #83	; 0x53
 8004b3e:	625a      	str	r2, [r3, #36]	; 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 8004b40:	2513      	movs	r5, #19
 8004b42:	197c      	adds	r4, r7, r5
 8004b44:	68fb      	ldr	r3, [r7, #12]
 8004b46:	0018      	movs	r0, r3
 8004b48:	f000 f9c9 	bl	8004ede <RTC_EnterInitMode>
 8004b4c:	0003      	movs	r3, r0
 8004b4e:	7023      	strb	r3, [r4, #0]
  if(status == HAL_OK)
 8004b50:	0028      	movs	r0, r5
 8004b52:	183b      	adds	r3, r7, r0
 8004b54:	781b      	ldrb	r3, [r3, #0]
 8004b56:	2b00      	cmp	r3, #0
 8004b58:	d10c      	bne.n	8004b74 <HAL_RTC_SetDate+0xf0>
  {
    /* Set the RTC_DR register */
    hrtc->Instance->DR = (uint32_t)(datetmpreg & RTC_DR_RESERVED_MASK);
 8004b5a:	68fb      	ldr	r3, [r7, #12]
 8004b5c:	681b      	ldr	r3, [r3, #0]
 8004b5e:	697a      	ldr	r2, [r7, #20]
 8004b60:	4910      	ldr	r1, [pc, #64]	; (8004ba4 <HAL_RTC_SetDate+0x120>)
 8004b62:	400a      	ands	r2, r1
 8004b64:	605a      	str	r2, [r3, #4]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 8004b66:	183c      	adds	r4, r7, r0
 8004b68:	68fb      	ldr	r3, [r7, #12]
 8004b6a:	0018      	movs	r0, r3
 8004b6c:	f000 f9fa 	bl	8004f64 <RTC_ExitInitMode>
 8004b70:	0003      	movs	r3, r0
 8004b72:	7023      	strb	r3, [r4, #0]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8004b74:	68fb      	ldr	r3, [r7, #12]
 8004b76:	681b      	ldr	r3, [r3, #0]
 8004b78:	22ff      	movs	r2, #255	; 0xff
 8004b7a:	625a      	str	r2, [r3, #36]	; 0x24

  if (status == HAL_OK)
 8004b7c:	2313      	movs	r3, #19
 8004b7e:	18fb      	adds	r3, r7, r3
 8004b80:	781b      	ldrb	r3, [r3, #0]
 8004b82:	2b00      	cmp	r3, #0
 8004b84:	d103      	bne.n	8004b8e <HAL_RTC_SetDate+0x10a>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 8004b86:	68fb      	ldr	r3, [r7, #12]
 8004b88:	2229      	movs	r2, #41	; 0x29
 8004b8a:	2101      	movs	r1, #1
 8004b8c:	5499      	strb	r1, [r3, r2]
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8004b8e:	68fb      	ldr	r3, [r7, #12]
 8004b90:	2228      	movs	r2, #40	; 0x28
 8004b92:	2100      	movs	r1, #0
 8004b94:	5499      	strb	r1, [r3, r2]

  return status;
 8004b96:	2313      	movs	r3, #19
 8004b98:	18fb      	adds	r3, r7, r3
 8004b9a:	781b      	ldrb	r3, [r3, #0]
}
 8004b9c:	0018      	movs	r0, r3
 8004b9e:	46bd      	mov	sp, r7
 8004ba0:	b006      	add	sp, #24
 8004ba2:	bdb0      	pop	{r4, r5, r7, pc}
 8004ba4:	00ffff3f 	.word	0x00ffff3f

08004ba8 <HAL_RTC_GetDate>:
  *            @arg RTC_FORMAT_BIN:  Binary data format
  *            @arg RTC_FORMAT_BCD:  BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 8004ba8:	b580      	push	{r7, lr}
 8004baa:	b086      	sub	sp, #24
 8004bac:	af00      	add	r7, sp, #0
 8004bae:	60f8      	str	r0, [r7, #12]
 8004bb0:	60b9      	str	r1, [r7, #8]
 8004bb2:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Get the DR register */
  datetmpreg = (uint32_t)(hrtc->Instance->DR & RTC_DR_RESERVED_MASK);
 8004bb4:	68fb      	ldr	r3, [r7, #12]
 8004bb6:	681b      	ldr	r3, [r3, #0]
 8004bb8:	685b      	ldr	r3, [r3, #4]
 8004bba:	4a21      	ldr	r2, [pc, #132]	; (8004c40 <HAL_RTC_GetDate+0x98>)
 8004bbc:	4013      	ands	r3, r2
 8004bbe:	617b      	str	r3, [r7, #20]

  /* Fill the structure fields with the read parameters */
  sDate->Year = (uint8_t)((datetmpreg & (RTC_DR_YT | RTC_DR_YU)) >> RTC_DR_YU_Pos);
 8004bc0:	697b      	ldr	r3, [r7, #20]
 8004bc2:	0c1b      	lsrs	r3, r3, #16
 8004bc4:	b2da      	uxtb	r2, r3
 8004bc6:	68bb      	ldr	r3, [r7, #8]
 8004bc8:	70da      	strb	r2, [r3, #3]
  sDate->Month = (uint8_t)((datetmpreg & (RTC_DR_MT | RTC_DR_MU)) >> RTC_DR_MU_Pos);
 8004bca:	697b      	ldr	r3, [r7, #20]
 8004bcc:	0a1b      	lsrs	r3, r3, #8
 8004bce:	b2db      	uxtb	r3, r3
 8004bd0:	221f      	movs	r2, #31
 8004bd2:	4013      	ands	r3, r2
 8004bd4:	b2da      	uxtb	r2, r3
 8004bd6:	68bb      	ldr	r3, [r7, #8]
 8004bd8:	705a      	strb	r2, [r3, #1]
  sDate->Date = (uint8_t)((datetmpreg & (RTC_DR_DT | RTC_DR_DU)) >> RTC_DR_DU_Pos);
 8004bda:	697b      	ldr	r3, [r7, #20]
 8004bdc:	b2db      	uxtb	r3, r3
 8004bde:	223f      	movs	r2, #63	; 0x3f
 8004be0:	4013      	ands	r3, r2
 8004be2:	b2da      	uxtb	r2, r3
 8004be4:	68bb      	ldr	r3, [r7, #8]
 8004be6:	709a      	strb	r2, [r3, #2]
  sDate->WeekDay = (uint8_t)((datetmpreg & (RTC_DR_WDU)) >> RTC_DR_WDU_Pos);
 8004be8:	697b      	ldr	r3, [r7, #20]
 8004bea:	0b5b      	lsrs	r3, r3, #13
 8004bec:	b2db      	uxtb	r3, r3
 8004bee:	2207      	movs	r2, #7
 8004bf0:	4013      	ands	r3, r2
 8004bf2:	b2da      	uxtb	r2, r3
 8004bf4:	68bb      	ldr	r3, [r7, #8]
 8004bf6:	701a      	strb	r2, [r3, #0]

  /* Check the input parameters format */
  if(Format == RTC_FORMAT_BIN)
 8004bf8:	687b      	ldr	r3, [r7, #4]
 8004bfa:	2b00      	cmp	r3, #0
 8004bfc:	d11a      	bne.n	8004c34 <HAL_RTC_GetDate+0x8c>
  {
    /* Convert the date structure parameters to Binary format */
    sDate->Year = (uint8_t)RTC_Bcd2ToByte(sDate->Year);
 8004bfe:	68bb      	ldr	r3, [r7, #8]
 8004c00:	78db      	ldrb	r3, [r3, #3]
 8004c02:	0018      	movs	r0, r3
 8004c04:	f000 fa1a 	bl	800503c <RTC_Bcd2ToByte>
 8004c08:	0003      	movs	r3, r0
 8004c0a:	001a      	movs	r2, r3
 8004c0c:	68bb      	ldr	r3, [r7, #8]
 8004c0e:	70da      	strb	r2, [r3, #3]
    sDate->Month = (uint8_t)RTC_Bcd2ToByte(sDate->Month);
 8004c10:	68bb      	ldr	r3, [r7, #8]
 8004c12:	785b      	ldrb	r3, [r3, #1]
 8004c14:	0018      	movs	r0, r3
 8004c16:	f000 fa11 	bl	800503c <RTC_Bcd2ToByte>
 8004c1a:	0003      	movs	r3, r0
 8004c1c:	001a      	movs	r2, r3
 8004c1e:	68bb      	ldr	r3, [r7, #8]
 8004c20:	705a      	strb	r2, [r3, #1]
    sDate->Date = (uint8_t)RTC_Bcd2ToByte(sDate->Date);
 8004c22:	68bb      	ldr	r3, [r7, #8]
 8004c24:	789b      	ldrb	r3, [r3, #2]
 8004c26:	0018      	movs	r0, r3
 8004c28:	f000 fa08 	bl	800503c <RTC_Bcd2ToByte>
 8004c2c:	0003      	movs	r3, r0
 8004c2e:	001a      	movs	r2, r3
 8004c30:	68bb      	ldr	r3, [r7, #8]
 8004c32:	709a      	strb	r2, [r3, #2]
  }
  return HAL_OK;
 8004c34:	2300      	movs	r3, #0
}
 8004c36:	0018      	movs	r0, r3
 8004c38:	46bd      	mov	sp, r7
 8004c3a:	b006      	add	sp, #24
 8004c3c:	bd80      	pop	{r7, pc}
 8004c3e:	46c0      	nop			; (mov r8, r8)
 8004c40:	00ffff3f 	.word	0x00ffff3f

08004c44 <HAL_RTC_SetAlarm>:
  *             @arg RTC_FORMAT_BIN: Binary data format
  *             @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetAlarm(RTC_HandleTypeDef *hrtc, RTC_AlarmTypeDef *sAlarm, uint32_t Format)
{
 8004c44:	b590      	push	{r4, r7, lr}
 8004c46:	b089      	sub	sp, #36	; 0x24
 8004c48:	af00      	add	r7, sp, #0
 8004c4a:	60f8      	str	r0, [r7, #12]
 8004c4c:	60b9      	str	r1, [r7, #8]
 8004c4e:	607a      	str	r2, [r7, #4]
  assert_param(IS_RTC_ALARM_DATE_WEEKDAY_SEL(sAlarm->AlarmDateWeekDaySel));
  assert_param(IS_RTC_ALARM_SUB_SECOND_VALUE(sAlarm->AlarmTime.SubSeconds));
  assert_param(IS_RTC_ALARM_SUB_SECOND_MASK(sAlarm->AlarmSubSecondMask));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8004c50:	68fb      	ldr	r3, [r7, #12]
 8004c52:	2228      	movs	r2, #40	; 0x28
 8004c54:	5c9b      	ldrb	r3, [r3, r2]
 8004c56:	2b01      	cmp	r3, #1
 8004c58:	d101      	bne.n	8004c5e <HAL_RTC_SetAlarm+0x1a>
 8004c5a:	2302      	movs	r3, #2
 8004c5c:	e10c      	b.n	8004e78 <HAL_RTC_SetAlarm+0x234>
 8004c5e:	68fb      	ldr	r3, [r7, #12]
 8004c60:	2228      	movs	r2, #40	; 0x28
 8004c62:	2101      	movs	r1, #1
 8004c64:	5499      	strb	r1, [r3, r2]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8004c66:	68fb      	ldr	r3, [r7, #12]
 8004c68:	2229      	movs	r2, #41	; 0x29
 8004c6a:	2102      	movs	r1, #2
 8004c6c:	5499      	strb	r1, [r3, r2]

  if(Format == RTC_FORMAT_BIN)
 8004c6e:	687b      	ldr	r3, [r7, #4]
 8004c70:	2b00      	cmp	r3, #0
 8004c72:	d136      	bne.n	8004ce2 <HAL_RTC_SetAlarm+0x9e>
  {
    if((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 8004c74:	68fb      	ldr	r3, [r7, #12]
 8004c76:	681b      	ldr	r3, [r3, #0]
 8004c78:	699b      	ldr	r3, [r3, #24]
 8004c7a:	2240      	movs	r2, #64	; 0x40
 8004c7c:	4013      	ands	r3, r2
 8004c7e:	d102      	bne.n	8004c86 <HAL_RTC_SetAlarm+0x42>
      assert_param(IS_RTC_HOUR12(sAlarm->AlarmTime.Hours));
      assert_param(IS_RTC_HOURFORMAT12(sAlarm->AlarmTime.TimeFormat));
    }
    else
    {
      sAlarm->AlarmTime.TimeFormat = 0x00U;
 8004c80:	68bb      	ldr	r3, [r7, #8]
 8004c82:	2200      	movs	r2, #0
 8004c84:	70da      	strb	r2, [r3, #3]
    else
    {
      assert_param(IS_RTC_ALARM_DATE_WEEKDAY_WEEKDAY(sAlarm->AlarmDateWeekDay));
    }

    tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours) << RTC_ALRMAR_HU_Pos) | \
 8004c86:	68bb      	ldr	r3, [r7, #8]
 8004c88:	781b      	ldrb	r3, [r3, #0]
 8004c8a:	0018      	movs	r0, r3
 8004c8c:	f000 f9ae 	bl	8004fec <RTC_ByteToBcd2>
 8004c90:	0003      	movs	r3, r0
 8004c92:	041c      	lsls	r4, r3, #16
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Minutes) << RTC_ALRMAR_MNU_Pos) | \
 8004c94:	68bb      	ldr	r3, [r7, #8]
 8004c96:	785b      	ldrb	r3, [r3, #1]
 8004c98:	0018      	movs	r0, r3
 8004c9a:	f000 f9a7 	bl	8004fec <RTC_ByteToBcd2>
 8004c9e:	0003      	movs	r3, r0
 8004ca0:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours) << RTC_ALRMAR_HU_Pos) | \
 8004ca2:	431c      	orrs	r4, r3
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Seconds) << RTC_ALRMAR_SU_Pos) | \
 8004ca4:	68bb      	ldr	r3, [r7, #8]
 8004ca6:	789b      	ldrb	r3, [r3, #2]
 8004ca8:	0018      	movs	r0, r3
 8004caa:	f000 f99f 	bl	8004fec <RTC_ByteToBcd2>
 8004cae:	0003      	movs	r3, r0
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Minutes) << RTC_ALRMAR_MNU_Pos) | \
 8004cb0:	0022      	movs	r2, r4
 8004cb2:	431a      	orrs	r2, r3
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << RTC_ALRMAR_PM_Pos) | \
 8004cb4:	68bb      	ldr	r3, [r7, #8]
 8004cb6:	78db      	ldrb	r3, [r3, #3]
 8004cb8:	059b      	lsls	r3, r3, #22
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Seconds) << RTC_ALRMAR_SU_Pos) | \
 8004cba:	431a      	orrs	r2, r3
 8004cbc:	0014      	movs	r4, r2
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmDateWeekDay) << RTC_ALRMAR_DU_Pos) | \
 8004cbe:	68bb      	ldr	r3, [r7, #8]
 8004cc0:	2220      	movs	r2, #32
 8004cc2:	5c9b      	ldrb	r3, [r3, r2]
 8004cc4:	0018      	movs	r0, r3
 8004cc6:	f000 f991 	bl	8004fec <RTC_ByteToBcd2>
 8004cca:	0003      	movs	r3, r0
 8004ccc:	061b      	lsls	r3, r3, #24
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << RTC_ALRMAR_PM_Pos) | \
 8004cce:	0022      	movs	r2, r4
 8004cd0:	431a      	orrs	r2, r3
              ((uint32_t)sAlarm->AlarmDateWeekDaySel) | \
 8004cd2:	68bb      	ldr	r3, [r7, #8]
 8004cd4:	69db      	ldr	r3, [r3, #28]
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmDateWeekDay) << RTC_ALRMAR_DU_Pos) | \
 8004cd6:	431a      	orrs	r2, r3
              ((uint32_t)sAlarm->AlarmMask));
 8004cd8:	68bb      	ldr	r3, [r7, #8]
 8004cda:	695b      	ldr	r3, [r3, #20]
    tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours) << RTC_ALRMAR_HU_Pos) | \
 8004cdc:	4313      	orrs	r3, r2
 8004cde:	61fb      	str	r3, [r7, #28]
 8004ce0:	e022      	b.n	8004d28 <HAL_RTC_SetAlarm+0xe4>
  }
  else
  {
    if((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 8004ce2:	68fb      	ldr	r3, [r7, #12]
 8004ce4:	681b      	ldr	r3, [r3, #0]
 8004ce6:	699b      	ldr	r3, [r3, #24]
 8004ce8:	2240      	movs	r2, #64	; 0x40
 8004cea:	4013      	ands	r3, r2
 8004cec:	d102      	bne.n	8004cf4 <HAL_RTC_SetAlarm+0xb0>
      assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sAlarm->AlarmTime.Hours)));
      assert_param(IS_RTC_HOURFORMAT12(sAlarm->AlarmTime.TimeFormat));
    }
    else
    {
      sAlarm->AlarmTime.TimeFormat = 0x00U;
 8004cee:	68bb      	ldr	r3, [r7, #8]
 8004cf0:	2200      	movs	r2, #0
 8004cf2:	70da      	strb	r2, [r3, #3]
    else
    {
      assert_param(IS_RTC_ALARM_DATE_WEEKDAY_WEEKDAY(RTC_Bcd2ToByte(sAlarm->AlarmDateWeekDay)));
    }

    tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours) << RTC_ALRMAR_HU_Pos) | \
 8004cf4:	68bb      	ldr	r3, [r7, #8]
 8004cf6:	781b      	ldrb	r3, [r3, #0]
 8004cf8:	041a      	lsls	r2, r3, #16
              ((uint32_t)(sAlarm->AlarmTime.Minutes) << RTC_ALRMAR_MNU_Pos) | \
 8004cfa:	68bb      	ldr	r3, [r7, #8]
 8004cfc:	785b      	ldrb	r3, [r3, #1]
 8004cfe:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours) << RTC_ALRMAR_HU_Pos) | \
 8004d00:	4313      	orrs	r3, r2
              ((uint32_t)(sAlarm->AlarmTime.Seconds) << RTC_ALRMAR_SU_Pos) | \
 8004d02:	68ba      	ldr	r2, [r7, #8]
 8004d04:	7892      	ldrb	r2, [r2, #2]
              ((uint32_t)(sAlarm->AlarmTime.Minutes) << RTC_ALRMAR_MNU_Pos) | \
 8004d06:	431a      	orrs	r2, r3
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << RTC_ALRMAR_PM_Pos) | \
 8004d08:	68bb      	ldr	r3, [r7, #8]
 8004d0a:	78db      	ldrb	r3, [r3, #3]
 8004d0c:	059b      	lsls	r3, r3, #22
              ((uint32_t)(sAlarm->AlarmTime.Seconds) << RTC_ALRMAR_SU_Pos) | \
 8004d0e:	431a      	orrs	r2, r3
              ((uint32_t)(sAlarm->AlarmDateWeekDay) << RTC_ALRMAR_DU_Pos) | \
 8004d10:	68bb      	ldr	r3, [r7, #8]
 8004d12:	2120      	movs	r1, #32
 8004d14:	5c5b      	ldrb	r3, [r3, r1]
 8004d16:	061b      	lsls	r3, r3, #24
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << RTC_ALRMAR_PM_Pos) | \
 8004d18:	431a      	orrs	r2, r3
              ((uint32_t)sAlarm->AlarmDateWeekDaySel) | \
 8004d1a:	68bb      	ldr	r3, [r7, #8]
 8004d1c:	69db      	ldr	r3, [r3, #28]
              ((uint32_t)(sAlarm->AlarmDateWeekDay) << RTC_ALRMAR_DU_Pos) | \
 8004d1e:	431a      	orrs	r2, r3
              ((uint32_t)sAlarm->AlarmMask));
 8004d20:	68bb      	ldr	r3, [r7, #8]
 8004d22:	695b      	ldr	r3, [r3, #20]
    tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours) << RTC_ALRMAR_HU_Pos) | \
 8004d24:	4313      	orrs	r3, r2
 8004d26:	61fb      	str	r3, [r7, #28]
  }

  /* Configure the Alarm A or Alarm B Sub Second registers */
  subsecondtmpreg = (uint32_t)((uint32_t)(sAlarm->AlarmTime.SubSeconds) | (uint32_t)(sAlarm->AlarmSubSecondMask));
 8004d28:	68bb      	ldr	r3, [r7, #8]
 8004d2a:	685a      	ldr	r2, [r3, #4]
 8004d2c:	68bb      	ldr	r3, [r7, #8]
 8004d2e:	699b      	ldr	r3, [r3, #24]
 8004d30:	4313      	orrs	r3, r2
 8004d32:	61bb      	str	r3, [r7, #24]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8004d34:	68fb      	ldr	r3, [r7, #12]
 8004d36:	681b      	ldr	r3, [r3, #0]
 8004d38:	22ca      	movs	r2, #202	; 0xca
 8004d3a:	625a      	str	r2, [r3, #36]	; 0x24
 8004d3c:	68fb      	ldr	r3, [r7, #12]
 8004d3e:	681b      	ldr	r3, [r3, #0]
 8004d40:	2253      	movs	r2, #83	; 0x53
 8004d42:	625a      	str	r2, [r3, #36]	; 0x24

  /* Configure the Alarm register */
  if(sAlarm->Alarm == RTC_ALARM_A)
 8004d44:	68bb      	ldr	r3, [r7, #8]
 8004d46:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8004d48:	2380      	movs	r3, #128	; 0x80
 8004d4a:	005b      	lsls	r3, r3, #1
 8004d4c:	429a      	cmp	r2, r3
 8004d4e:	d143      	bne.n	8004dd8 <HAL_RTC_SetAlarm+0x194>
  {
    /* Disable the Alarm A interrupt */
    __HAL_RTC_ALARMA_DISABLE(hrtc);
 8004d50:	68fb      	ldr	r3, [r7, #12]
 8004d52:	681b      	ldr	r3, [r3, #0]
 8004d54:	699a      	ldr	r2, [r3, #24]
 8004d56:	68fb      	ldr	r3, [r7, #12]
 8004d58:	681b      	ldr	r3, [r3, #0]
 8004d5a:	4949      	ldr	r1, [pc, #292]	; (8004e80 <HAL_RTC_SetAlarm+0x23c>)
 8004d5c:	400a      	ands	r2, r1
 8004d5e:	619a      	str	r2, [r3, #24]

    /* In case of interrupt mode is used, the interrupt source must disabled */
    __HAL_RTC_ALARM_DISABLE_IT(hrtc, RTC_IT_ALRA);
 8004d60:	68fb      	ldr	r3, [r7, #12]
 8004d62:	681b      	ldr	r3, [r3, #0]
 8004d64:	699a      	ldr	r2, [r3, #24]
 8004d66:	68fb      	ldr	r3, [r7, #12]
 8004d68:	681b      	ldr	r3, [r3, #0]
 8004d6a:	4946      	ldr	r1, [pc, #280]	; (8004e84 <HAL_RTC_SetAlarm+0x240>)
 8004d6c:	400a      	ands	r2, r1
 8004d6e:	619a      	str	r2, [r3, #24]

    tickstart = HAL_GetTick();
 8004d70:	f7fe fa3e 	bl	80031f0 <HAL_GetTick>
 8004d74:	0003      	movs	r3, r0
 8004d76:	617b      	str	r3, [r7, #20]
    /* Wait till RTC ALRAWF flag is set and if Time out is reached exit */
    while(__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRAWF) == 0U)
 8004d78:	e016      	b.n	8004da8 <HAL_RTC_SetAlarm+0x164>
    {
      if((HAL_GetTick() - tickstart ) > RTC_TIMEOUT_VALUE)
 8004d7a:	f7fe fa39 	bl	80031f0 <HAL_GetTick>
 8004d7e:	0002      	movs	r2, r0
 8004d80:	697b      	ldr	r3, [r7, #20]
 8004d82:	1ad2      	subs	r2, r2, r3
 8004d84:	23fa      	movs	r3, #250	; 0xfa
 8004d86:	009b      	lsls	r3, r3, #2
 8004d88:	429a      	cmp	r2, r3
 8004d8a:	d90d      	bls.n	8004da8 <HAL_RTC_SetAlarm+0x164>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8004d8c:	68fb      	ldr	r3, [r7, #12]
 8004d8e:	681b      	ldr	r3, [r3, #0]
 8004d90:	22ff      	movs	r2, #255	; 0xff
 8004d92:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8004d94:	68fb      	ldr	r3, [r7, #12]
 8004d96:	2229      	movs	r2, #41	; 0x29
 8004d98:	2103      	movs	r1, #3
 8004d9a:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 8004d9c:	68fb      	ldr	r3, [r7, #12]
 8004d9e:	2228      	movs	r2, #40	; 0x28
 8004da0:	2100      	movs	r1, #0
 8004da2:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 8004da4:	2303      	movs	r3, #3
 8004da6:	e067      	b.n	8004e78 <HAL_RTC_SetAlarm+0x234>
    while(__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRAWF) == 0U)
 8004da8:	68fb      	ldr	r3, [r7, #12]
 8004daa:	681b      	ldr	r3, [r3, #0]
 8004dac:	68db      	ldr	r3, [r3, #12]
 8004dae:	2201      	movs	r2, #1
 8004db0:	4013      	ands	r3, r2
 8004db2:	d0e2      	beq.n	8004d7a <HAL_RTC_SetAlarm+0x136>
      }
    }

    hrtc->Instance->ALRMAR = (uint32_t)tmpreg;
 8004db4:	68fb      	ldr	r3, [r7, #12]
 8004db6:	681b      	ldr	r3, [r3, #0]
 8004db8:	69fa      	ldr	r2, [r7, #28]
 8004dba:	641a      	str	r2, [r3, #64]	; 0x40
    /* Configure the Alarm A Sub Second register */
    hrtc->Instance->ALRMASSR = subsecondtmpreg;
 8004dbc:	68fb      	ldr	r3, [r7, #12]
 8004dbe:	681b      	ldr	r3, [r3, #0]
 8004dc0:	69ba      	ldr	r2, [r7, #24]
 8004dc2:	645a      	str	r2, [r3, #68]	; 0x44
    /* Configure the Alarm state: Enable Alarm */
    __HAL_RTC_ALARMA_ENABLE(hrtc);
 8004dc4:	68fb      	ldr	r3, [r7, #12]
 8004dc6:	681b      	ldr	r3, [r3, #0]
 8004dc8:	699a      	ldr	r2, [r3, #24]
 8004dca:	68fb      	ldr	r3, [r7, #12]
 8004dcc:	681b      	ldr	r3, [r3, #0]
 8004dce:	2180      	movs	r1, #128	; 0x80
 8004dd0:	0049      	lsls	r1, r1, #1
 8004dd2:	430a      	orrs	r2, r1
 8004dd4:	619a      	str	r2, [r3, #24]
 8004dd6:	e042      	b.n	8004e5e <HAL_RTC_SetAlarm+0x21a>
  }
  else
  {
    /* Disable the Alarm B interrupt */
    __HAL_RTC_ALARMB_DISABLE(hrtc);
 8004dd8:	68fb      	ldr	r3, [r7, #12]
 8004dda:	681b      	ldr	r3, [r3, #0]
 8004ddc:	699a      	ldr	r2, [r3, #24]
 8004dde:	68fb      	ldr	r3, [r7, #12]
 8004de0:	681b      	ldr	r3, [r3, #0]
 8004de2:	4929      	ldr	r1, [pc, #164]	; (8004e88 <HAL_RTC_SetAlarm+0x244>)
 8004de4:	400a      	ands	r2, r1
 8004de6:	619a      	str	r2, [r3, #24]

    /* In case of interrupt mode is used, the interrupt source must disabled */
    __HAL_RTC_ALARM_DISABLE_IT(hrtc, RTC_IT_ALRB);
 8004de8:	68fb      	ldr	r3, [r7, #12]
 8004dea:	681b      	ldr	r3, [r3, #0]
 8004dec:	699a      	ldr	r2, [r3, #24]
 8004dee:	68fb      	ldr	r3, [r7, #12]
 8004df0:	681b      	ldr	r3, [r3, #0]
 8004df2:	4926      	ldr	r1, [pc, #152]	; (8004e8c <HAL_RTC_SetAlarm+0x248>)
 8004df4:	400a      	ands	r2, r1
 8004df6:	619a      	str	r2, [r3, #24]

    tickstart = HAL_GetTick();
 8004df8:	f7fe f9fa 	bl	80031f0 <HAL_GetTick>
 8004dfc:	0003      	movs	r3, r0
 8004dfe:	617b      	str	r3, [r7, #20]
    /* Wait till RTC ALRBWF flag is set and if Time out is reached exit */
    while(__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRBWF) == 0U)
 8004e00:	e016      	b.n	8004e30 <HAL_RTC_SetAlarm+0x1ec>
    {
      if((HAL_GetTick() - tickstart ) > RTC_TIMEOUT_VALUE)
 8004e02:	f7fe f9f5 	bl	80031f0 <HAL_GetTick>
 8004e06:	0002      	movs	r2, r0
 8004e08:	697b      	ldr	r3, [r7, #20]
 8004e0a:	1ad2      	subs	r2, r2, r3
 8004e0c:	23fa      	movs	r3, #250	; 0xfa
 8004e0e:	009b      	lsls	r3, r3, #2
 8004e10:	429a      	cmp	r2, r3
 8004e12:	d90d      	bls.n	8004e30 <HAL_RTC_SetAlarm+0x1ec>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8004e14:	68fb      	ldr	r3, [r7, #12]
 8004e16:	681b      	ldr	r3, [r3, #0]
 8004e18:	22ff      	movs	r2, #255	; 0xff
 8004e1a:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8004e1c:	68fb      	ldr	r3, [r7, #12]
 8004e1e:	2229      	movs	r2, #41	; 0x29
 8004e20:	2103      	movs	r1, #3
 8004e22:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 8004e24:	68fb      	ldr	r3, [r7, #12]
 8004e26:	2228      	movs	r2, #40	; 0x28
 8004e28:	2100      	movs	r1, #0
 8004e2a:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 8004e2c:	2303      	movs	r3, #3
 8004e2e:	e023      	b.n	8004e78 <HAL_RTC_SetAlarm+0x234>
    while(__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRBWF) == 0U)
 8004e30:	68fb      	ldr	r3, [r7, #12]
 8004e32:	681b      	ldr	r3, [r3, #0]
 8004e34:	68db      	ldr	r3, [r3, #12]
 8004e36:	2202      	movs	r2, #2
 8004e38:	4013      	ands	r3, r2
 8004e3a:	d0e2      	beq.n	8004e02 <HAL_RTC_SetAlarm+0x1be>
      }
    }

    hrtc->Instance->ALRMBR = (uint32_t)tmpreg;
 8004e3c:	68fb      	ldr	r3, [r7, #12]
 8004e3e:	681b      	ldr	r3, [r3, #0]
 8004e40:	69fa      	ldr	r2, [r7, #28]
 8004e42:	649a      	str	r2, [r3, #72]	; 0x48
    /* Configure the Alarm B Sub Second register */
    hrtc->Instance->ALRMBSSR = subsecondtmpreg;
 8004e44:	68fb      	ldr	r3, [r7, #12]
 8004e46:	681b      	ldr	r3, [r3, #0]
 8004e48:	69ba      	ldr	r2, [r7, #24]
 8004e4a:	64da      	str	r2, [r3, #76]	; 0x4c
    /* Configure the Alarm state: Enable Alarm */
    __HAL_RTC_ALARMB_ENABLE(hrtc);
 8004e4c:	68fb      	ldr	r3, [r7, #12]
 8004e4e:	681b      	ldr	r3, [r3, #0]
 8004e50:	699a      	ldr	r2, [r3, #24]
 8004e52:	68fb      	ldr	r3, [r7, #12]
 8004e54:	681b      	ldr	r3, [r3, #0]
 8004e56:	2180      	movs	r1, #128	; 0x80
 8004e58:	0089      	lsls	r1, r1, #2
 8004e5a:	430a      	orrs	r2, r1
 8004e5c:	619a      	str	r2, [r3, #24]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8004e5e:	68fb      	ldr	r3, [r7, #12]
 8004e60:	681b      	ldr	r3, [r3, #0]
 8004e62:	22ff      	movs	r2, #255	; 0xff
 8004e64:	625a      	str	r2, [r3, #36]	; 0x24

  /* Change RTC state */
  hrtc->State = HAL_RTC_STATE_READY;
 8004e66:	68fb      	ldr	r3, [r7, #12]
 8004e68:	2229      	movs	r2, #41	; 0x29
 8004e6a:	2101      	movs	r1, #1
 8004e6c:	5499      	strb	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8004e6e:	68fb      	ldr	r3, [r7, #12]
 8004e70:	2228      	movs	r2, #40	; 0x28
 8004e72:	2100      	movs	r1, #0
 8004e74:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8004e76:	2300      	movs	r3, #0
}
 8004e78:	0018      	movs	r0, r3
 8004e7a:	46bd      	mov	sp, r7
 8004e7c:	b009      	add	sp, #36	; 0x24
 8004e7e:	bd90      	pop	{r4, r7, pc}
 8004e80:	fffffeff 	.word	0xfffffeff
 8004e84:	ffffefff 	.word	0xffffefff
 8004e88:	fffffdff 	.word	0xfffffdff
 8004e8c:	ffffdfff 	.word	0xffffdfff

08004e90 <HAL_RTC_WaitForSynchro>:
  *         correctly copied into the RTC_TR and RTC_DR shadow registers.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef* hrtc)
{
 8004e90:	b580      	push	{r7, lr}
 8004e92:	b084      	sub	sp, #16
 8004e94:	af00      	add	r7, sp, #0
 8004e96:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Clear RSF flag */
  hrtc->Instance->ICSR &= (uint32_t)RTC_RSF_MASK;
 8004e98:	687b      	ldr	r3, [r7, #4]
 8004e9a:	681b      	ldr	r3, [r3, #0]
 8004e9c:	68da      	ldr	r2, [r3, #12]
 8004e9e:	687b      	ldr	r3, [r7, #4]
 8004ea0:	681b      	ldr	r3, [r3, #0]
 8004ea2:	21a0      	movs	r1, #160	; 0xa0
 8004ea4:	438a      	bics	r2, r1
 8004ea6:	60da      	str	r2, [r3, #12]

  tickstart = HAL_GetTick();
 8004ea8:	f7fe f9a2 	bl	80031f0 <HAL_GetTick>
 8004eac:	0003      	movs	r3, r0
 8004eae:	60fb      	str	r3, [r7, #12]

  /* Wait the registers to be synchronised */
  while((hrtc->Instance->ICSR & RTC_ICSR_RSF) == 0U)
 8004eb0:	e00a      	b.n	8004ec8 <HAL_RTC_WaitForSynchro+0x38>
  {
    if((HAL_GetTick() - tickstart ) > RTC_TIMEOUT_VALUE)
 8004eb2:	f7fe f99d 	bl	80031f0 <HAL_GetTick>
 8004eb6:	0002      	movs	r2, r0
 8004eb8:	68fb      	ldr	r3, [r7, #12]
 8004eba:	1ad2      	subs	r2, r2, r3
 8004ebc:	23fa      	movs	r3, #250	; 0xfa
 8004ebe:	009b      	lsls	r3, r3, #2
 8004ec0:	429a      	cmp	r2, r3
 8004ec2:	d901      	bls.n	8004ec8 <HAL_RTC_WaitForSynchro+0x38>
    {
      return HAL_TIMEOUT;
 8004ec4:	2303      	movs	r3, #3
 8004ec6:	e006      	b.n	8004ed6 <HAL_RTC_WaitForSynchro+0x46>
  while((hrtc->Instance->ICSR & RTC_ICSR_RSF) == 0U)
 8004ec8:	687b      	ldr	r3, [r7, #4]
 8004eca:	681b      	ldr	r3, [r3, #0]
 8004ecc:	68db      	ldr	r3, [r3, #12]
 8004ece:	2220      	movs	r2, #32
 8004ed0:	4013      	ands	r3, r2
 8004ed2:	d0ee      	beq.n	8004eb2 <HAL_RTC_WaitForSynchro+0x22>
    }
  }

  return HAL_OK;
 8004ed4:	2300      	movs	r3, #0
}
 8004ed6:	0018      	movs	r0, r3
 8004ed8:	46bd      	mov	sp, r7
 8004eda:	b004      	add	sp, #16
 8004edc:	bd80      	pop	{r7, pc}

08004ede <RTC_EnterInitMode>:
  *         __HAL_RTC_WRITEPROTECTION_DISABLE() before calling this function.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef* hrtc)
{
 8004ede:	b580      	push	{r7, lr}
 8004ee0:	b084      	sub	sp, #16
 8004ee2:	af00      	add	r7, sp, #0
 8004ee4:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;  
 8004ee6:	230f      	movs	r3, #15
 8004ee8:	18fb      	adds	r3, r7, r3
 8004eea:	2200      	movs	r2, #0
 8004eec:	701a      	strb	r2, [r3, #0]

  /* Check if the Initialization mode is set */
  if((hrtc->Instance->ICSR & RTC_ICSR_INITF) == 0U)
 8004eee:	687b      	ldr	r3, [r7, #4]
 8004ef0:	681b      	ldr	r3, [r3, #0]
 8004ef2:	68db      	ldr	r3, [r3, #12]
 8004ef4:	2240      	movs	r2, #64	; 0x40
 8004ef6:	4013      	ands	r3, r2
 8004ef8:	d12c      	bne.n	8004f54 <RTC_EnterInitMode+0x76>
  {
    /* Set the Initialization mode */
    SET_BIT(hrtc->Instance->ICSR, RTC_ICSR_INIT);
 8004efa:	687b      	ldr	r3, [r7, #4]
 8004efc:	681b      	ldr	r3, [r3, #0]
 8004efe:	68da      	ldr	r2, [r3, #12]
 8004f00:	687b      	ldr	r3, [r7, #4]
 8004f02:	681b      	ldr	r3, [r3, #0]
 8004f04:	2180      	movs	r1, #128	; 0x80
 8004f06:	430a      	orrs	r2, r1
 8004f08:	60da      	str	r2, [r3, #12]

    tickstart = HAL_GetTick();
 8004f0a:	f7fe f971 	bl	80031f0 <HAL_GetTick>
 8004f0e:	0003      	movs	r3, r0
 8004f10:	60bb      	str	r3, [r7, #8]
    /* Wait till RTC is in INIT state and if Time out is reached exit */
    while(((hrtc->Instance->ICSR & RTC_ICSR_INITF) == 0U) && (status != HAL_TIMEOUT))
 8004f12:	e014      	b.n	8004f3e <RTC_EnterInitMode+0x60>
    {
      if((HAL_GetTick()  - tickstart ) > RTC_TIMEOUT_VALUE)
 8004f14:	f7fe f96c 	bl	80031f0 <HAL_GetTick>
 8004f18:	0002      	movs	r2, r0
 8004f1a:	68bb      	ldr	r3, [r7, #8]
 8004f1c:	1ad2      	subs	r2, r2, r3
 8004f1e:	200f      	movs	r0, #15
 8004f20:	183b      	adds	r3, r7, r0
 8004f22:	1839      	adds	r1, r7, r0
 8004f24:	7809      	ldrb	r1, [r1, #0]
 8004f26:	7019      	strb	r1, [r3, #0]
 8004f28:	23fa      	movs	r3, #250	; 0xfa
 8004f2a:	009b      	lsls	r3, r3, #2
 8004f2c:	429a      	cmp	r2, r3
 8004f2e:	d906      	bls.n	8004f3e <RTC_EnterInitMode+0x60>
      {
        status = HAL_TIMEOUT;
 8004f30:	183b      	adds	r3, r7, r0
 8004f32:	2203      	movs	r2, #3
 8004f34:	701a      	strb	r2, [r3, #0]
        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8004f36:	687b      	ldr	r3, [r7, #4]
 8004f38:	2229      	movs	r2, #41	; 0x29
 8004f3a:	2103      	movs	r1, #3
 8004f3c:	5499      	strb	r1, [r3, r2]
    while(((hrtc->Instance->ICSR & RTC_ICSR_INITF) == 0U) && (status != HAL_TIMEOUT))
 8004f3e:	687b      	ldr	r3, [r7, #4]
 8004f40:	681b      	ldr	r3, [r3, #0]
 8004f42:	68db      	ldr	r3, [r3, #12]
 8004f44:	2240      	movs	r2, #64	; 0x40
 8004f46:	4013      	ands	r3, r2
 8004f48:	d104      	bne.n	8004f54 <RTC_EnterInitMode+0x76>
 8004f4a:	230f      	movs	r3, #15
 8004f4c:	18fb      	adds	r3, r7, r3
 8004f4e:	781b      	ldrb	r3, [r3, #0]
 8004f50:	2b03      	cmp	r3, #3
 8004f52:	d1df      	bne.n	8004f14 <RTC_EnterInitMode+0x36>
      }
    }
  }

  return status;
 8004f54:	230f      	movs	r3, #15
 8004f56:	18fb      	adds	r3, r7, r3
 8004f58:	781b      	ldrb	r3, [r3, #0]
}
 8004f5a:	0018      	movs	r0, r3
 8004f5c:	46bd      	mov	sp, r7
 8004f5e:	b004      	add	sp, #16
 8004f60:	bd80      	pop	{r7, pc}
	...

08004f64 <RTC_ExitInitMode>:
  * @brief  Exit the RTC Initialization mode.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_ExitInitMode(RTC_HandleTypeDef *hrtc)
{
 8004f64:	b590      	push	{r4, r7, lr}
 8004f66:	b085      	sub	sp, #20
 8004f68:	af00      	add	r7, sp, #0
 8004f6a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004f6c:	240f      	movs	r4, #15
 8004f6e:	193b      	adds	r3, r7, r4
 8004f70:	2200      	movs	r2, #0
 8004f72:	701a      	strb	r2, [r3, #0]

  /* Exit Initialization mode */
  CLEAR_BIT(RTC->ICSR, RTC_ICSR_INIT);
 8004f74:	4b1c      	ldr	r3, [pc, #112]	; (8004fe8 <RTC_ExitInitMode+0x84>)
 8004f76:	68da      	ldr	r2, [r3, #12]
 8004f78:	4b1b      	ldr	r3, [pc, #108]	; (8004fe8 <RTC_ExitInitMode+0x84>)
 8004f7a:	2180      	movs	r1, #128	; 0x80
 8004f7c:	438a      	bics	r2, r1
 8004f7e:	60da      	str	r2, [r3, #12]

  /* If CR_BYPSHAD bit = 0, wait for synchro */
  if (READ_BIT(RTC->CR, RTC_CR_BYPSHAD) == 0U)
 8004f80:	4b19      	ldr	r3, [pc, #100]	; (8004fe8 <RTC_ExitInitMode+0x84>)
 8004f82:	699b      	ldr	r3, [r3, #24]
 8004f84:	2220      	movs	r2, #32
 8004f86:	4013      	ands	r3, r2
 8004f88:	d10d      	bne.n	8004fa6 <RTC_ExitInitMode+0x42>
  {
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8004f8a:	687b      	ldr	r3, [r7, #4]
 8004f8c:	0018      	movs	r0, r3
 8004f8e:	f7ff ff7f 	bl	8004e90 <HAL_RTC_WaitForSynchro>
 8004f92:	1e03      	subs	r3, r0, #0
 8004f94:	d021      	beq.n	8004fda <RTC_ExitInitMode+0x76>
    {
      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8004f96:	687b      	ldr	r3, [r7, #4]
 8004f98:	2229      	movs	r2, #41	; 0x29
 8004f9a:	2103      	movs	r1, #3
 8004f9c:	5499      	strb	r1, [r3, r2]
      status = HAL_TIMEOUT;
 8004f9e:	193b      	adds	r3, r7, r4
 8004fa0:	2203      	movs	r2, #3
 8004fa2:	701a      	strb	r2, [r3, #0]
 8004fa4:	e019      	b.n	8004fda <RTC_ExitInitMode+0x76>
  }
  else /* WA 2.7.1 Calendar initialization may fail in case of consecutive INIT mode entry.
          Please look at STM32G0 Errata sheet on the internet for details. */
  {
    /* Clear BYPSHAD bit */
    CLEAR_BIT(RTC->CR, RTC_CR_BYPSHAD);
 8004fa6:	4b10      	ldr	r3, [pc, #64]	; (8004fe8 <RTC_ExitInitMode+0x84>)
 8004fa8:	699a      	ldr	r2, [r3, #24]
 8004faa:	4b0f      	ldr	r3, [pc, #60]	; (8004fe8 <RTC_ExitInitMode+0x84>)
 8004fac:	2120      	movs	r1, #32
 8004fae:	438a      	bics	r2, r1
 8004fb0:	619a      	str	r2, [r3, #24]
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8004fb2:	687b      	ldr	r3, [r7, #4]
 8004fb4:	0018      	movs	r0, r3
 8004fb6:	f7ff ff6b 	bl	8004e90 <HAL_RTC_WaitForSynchro>
 8004fba:	1e03      	subs	r3, r0, #0
 8004fbc:	d007      	beq.n	8004fce <RTC_ExitInitMode+0x6a>
    {
      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8004fbe:	687b      	ldr	r3, [r7, #4]
 8004fc0:	2229      	movs	r2, #41	; 0x29
 8004fc2:	2103      	movs	r1, #3
 8004fc4:	5499      	strb	r1, [r3, r2]
      status = HAL_TIMEOUT;
 8004fc6:	230f      	movs	r3, #15
 8004fc8:	18fb      	adds	r3, r7, r3
 8004fca:	2203      	movs	r2, #3
 8004fcc:	701a      	strb	r2, [r3, #0]
    }
    /* Restore BYPSHAD bit */
    SET_BIT(RTC->CR, RTC_CR_BYPSHAD);
 8004fce:	4b06      	ldr	r3, [pc, #24]	; (8004fe8 <RTC_ExitInitMode+0x84>)
 8004fd0:	699a      	ldr	r2, [r3, #24]
 8004fd2:	4b05      	ldr	r3, [pc, #20]	; (8004fe8 <RTC_ExitInitMode+0x84>)
 8004fd4:	2120      	movs	r1, #32
 8004fd6:	430a      	orrs	r2, r1
 8004fd8:	619a      	str	r2, [r3, #24]
  }

  return status;
 8004fda:	230f      	movs	r3, #15
 8004fdc:	18fb      	adds	r3, r7, r3
 8004fde:	781b      	ldrb	r3, [r3, #0]
}
 8004fe0:	0018      	movs	r0, r3
 8004fe2:	46bd      	mov	sp, r7
 8004fe4:	b005      	add	sp, #20
 8004fe6:	bd90      	pop	{r4, r7, pc}
 8004fe8:	40002800 	.word	0x40002800

08004fec <RTC_ByteToBcd2>:
  * @brief  Convert a 2 digit decimal to BCD format.
  * @param  Value Byte to be converted
  * @retval Converted byte
  */
uint8_t RTC_ByteToBcd2(uint8_t Value)
{
 8004fec:	b580      	push	{r7, lr}
 8004fee:	b084      	sub	sp, #16
 8004ff0:	af00      	add	r7, sp, #0
 8004ff2:	0002      	movs	r2, r0
 8004ff4:	1dfb      	adds	r3, r7, #7
 8004ff6:	701a      	strb	r2, [r3, #0]
  uint32_t bcdhigh = 0U;
 8004ff8:	2300      	movs	r3, #0
 8004ffa:	60fb      	str	r3, [r7, #12]
  uint8_t Param = Value;
 8004ffc:	230b      	movs	r3, #11
 8004ffe:	18fb      	adds	r3, r7, r3
 8005000:	1dfa      	adds	r2, r7, #7
 8005002:	7812      	ldrb	r2, [r2, #0]
 8005004:	701a      	strb	r2, [r3, #0]

  while(Param >= 10U)
 8005006:	e008      	b.n	800501a <RTC_ByteToBcd2+0x2e>
  {
    bcdhigh++;
 8005008:	68fb      	ldr	r3, [r7, #12]
 800500a:	3301      	adds	r3, #1
 800500c:	60fb      	str	r3, [r7, #12]
    Param -= 10U;
 800500e:	220b      	movs	r2, #11
 8005010:	18bb      	adds	r3, r7, r2
 8005012:	18ba      	adds	r2, r7, r2
 8005014:	7812      	ldrb	r2, [r2, #0]
 8005016:	3a0a      	subs	r2, #10
 8005018:	701a      	strb	r2, [r3, #0]
  while(Param >= 10U)
 800501a:	210b      	movs	r1, #11
 800501c:	187b      	adds	r3, r7, r1
 800501e:	781b      	ldrb	r3, [r3, #0]
 8005020:	2b09      	cmp	r3, #9
 8005022:	d8f1      	bhi.n	8005008 <RTC_ByteToBcd2+0x1c>
  }

  return  ((uint8_t)(bcdhigh << 4U) | Param);
 8005024:	68fb      	ldr	r3, [r7, #12]
 8005026:	b2db      	uxtb	r3, r3
 8005028:	011b      	lsls	r3, r3, #4
 800502a:	b2da      	uxtb	r2, r3
 800502c:	187b      	adds	r3, r7, r1
 800502e:	781b      	ldrb	r3, [r3, #0]
 8005030:	4313      	orrs	r3, r2
 8005032:	b2db      	uxtb	r3, r3
}
 8005034:	0018      	movs	r0, r3
 8005036:	46bd      	mov	sp, r7
 8005038:	b004      	add	sp, #16
 800503a:	bd80      	pop	{r7, pc}

0800503c <RTC_Bcd2ToByte>:
  * @brief  Convert from 2 digit BCD to Binary.
  * @param  Value BCD value to be converted
  * @retval Converted word
  */
uint8_t RTC_Bcd2ToByte(uint8_t Value)
{
 800503c:	b580      	push	{r7, lr}
 800503e:	b084      	sub	sp, #16
 8005040:	af00      	add	r7, sp, #0
 8005042:	0002      	movs	r2, r0
 8005044:	1dfb      	adds	r3, r7, #7
 8005046:	701a      	strb	r2, [r3, #0]
  uint32_t tmp;
  tmp = (((uint32_t)Value & 0xF0U) >> 4U) * 10U;
 8005048:	1dfb      	adds	r3, r7, #7
 800504a:	781b      	ldrb	r3, [r3, #0]
 800504c:	091b      	lsrs	r3, r3, #4
 800504e:	b2db      	uxtb	r3, r3
 8005050:	001a      	movs	r2, r3
 8005052:	0013      	movs	r3, r2
 8005054:	009b      	lsls	r3, r3, #2
 8005056:	189b      	adds	r3, r3, r2
 8005058:	005b      	lsls	r3, r3, #1
 800505a:	60fb      	str	r3, [r7, #12]
  return (uint8_t)(tmp + ((uint32_t)Value & 0x0FU));
 800505c:	68fb      	ldr	r3, [r7, #12]
 800505e:	b2da      	uxtb	r2, r3
 8005060:	1dfb      	adds	r3, r7, #7
 8005062:	781b      	ldrb	r3, [r3, #0]
 8005064:	210f      	movs	r1, #15
 8005066:	400b      	ands	r3, r1
 8005068:	b2db      	uxtb	r3, r3
 800506a:	18d3      	adds	r3, r2, r3
 800506c:	b2db      	uxtb	r3, r3
}
 800506e:	0018      	movs	r0, r3
 8005070:	46bd      	mov	sp, r7
 8005072:	b004      	add	sp, #16
 8005074:	bd80      	pop	{r7, pc}

08005076 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8005076:	b580      	push	{r7, lr}
 8005078:	b082      	sub	sp, #8
 800507a:	af00      	add	r7, sp, #0
 800507c:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800507e:	687b      	ldr	r3, [r7, #4]
 8005080:	2b00      	cmp	r3, #0
 8005082:	d101      	bne.n	8005088 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8005084:	2301      	movs	r3, #1
 8005086:	e04a      	b.n	800511e <HAL_TIM_Base_Init+0xa8>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005088:	687b      	ldr	r3, [r7, #4]
 800508a:	223d      	movs	r2, #61	; 0x3d
 800508c:	5c9b      	ldrb	r3, [r3, r2]
 800508e:	b2db      	uxtb	r3, r3
 8005090:	2b00      	cmp	r3, #0
 8005092:	d107      	bne.n	80050a4 <HAL_TIM_Base_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005094:	687b      	ldr	r3, [r7, #4]
 8005096:	223c      	movs	r2, #60	; 0x3c
 8005098:	2100      	movs	r1, #0
 800509a:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800509c:	687b      	ldr	r3, [r7, #4]
 800509e:	0018      	movs	r0, r3
 80050a0:	f7fd fe40 	bl	8002d24 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80050a4:	687b      	ldr	r3, [r7, #4]
 80050a6:	223d      	movs	r2, #61	; 0x3d
 80050a8:	2102      	movs	r1, #2
 80050aa:	5499      	strb	r1, [r3, r2]

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80050ac:	687b      	ldr	r3, [r7, #4]
 80050ae:	681a      	ldr	r2, [r3, #0]
 80050b0:	687b      	ldr	r3, [r7, #4]
 80050b2:	3304      	adds	r3, #4
 80050b4:	0019      	movs	r1, r3
 80050b6:	0010      	movs	r0, r2
 80050b8:	f000 fa18 	bl	80054ec <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80050bc:	687b      	ldr	r3, [r7, #4]
 80050be:	2248      	movs	r2, #72	; 0x48
 80050c0:	2101      	movs	r1, #1
 80050c2:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80050c4:	687b      	ldr	r3, [r7, #4]
 80050c6:	223e      	movs	r2, #62	; 0x3e
 80050c8:	2101      	movs	r1, #1
 80050ca:	5499      	strb	r1, [r3, r2]
 80050cc:	687b      	ldr	r3, [r7, #4]
 80050ce:	223f      	movs	r2, #63	; 0x3f
 80050d0:	2101      	movs	r1, #1
 80050d2:	5499      	strb	r1, [r3, r2]
 80050d4:	687b      	ldr	r3, [r7, #4]
 80050d6:	2240      	movs	r2, #64	; 0x40
 80050d8:	2101      	movs	r1, #1
 80050da:	5499      	strb	r1, [r3, r2]
 80050dc:	687b      	ldr	r3, [r7, #4]
 80050de:	2241      	movs	r2, #65	; 0x41
 80050e0:	2101      	movs	r1, #1
 80050e2:	5499      	strb	r1, [r3, r2]
 80050e4:	687b      	ldr	r3, [r7, #4]
 80050e6:	2242      	movs	r2, #66	; 0x42
 80050e8:	2101      	movs	r1, #1
 80050ea:	5499      	strb	r1, [r3, r2]
 80050ec:	687b      	ldr	r3, [r7, #4]
 80050ee:	2243      	movs	r2, #67	; 0x43
 80050f0:	2101      	movs	r1, #1
 80050f2:	5499      	strb	r1, [r3, r2]
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80050f4:	687b      	ldr	r3, [r7, #4]
 80050f6:	2244      	movs	r2, #68	; 0x44
 80050f8:	2101      	movs	r1, #1
 80050fa:	5499      	strb	r1, [r3, r2]
 80050fc:	687b      	ldr	r3, [r7, #4]
 80050fe:	2245      	movs	r2, #69	; 0x45
 8005100:	2101      	movs	r1, #1
 8005102:	5499      	strb	r1, [r3, r2]
 8005104:	687b      	ldr	r3, [r7, #4]
 8005106:	2246      	movs	r2, #70	; 0x46
 8005108:	2101      	movs	r1, #1
 800510a:	5499      	strb	r1, [r3, r2]
 800510c:	687b      	ldr	r3, [r7, #4]
 800510e:	2247      	movs	r2, #71	; 0x47
 8005110:	2101      	movs	r1, #1
 8005112:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005114:	687b      	ldr	r3, [r7, #4]
 8005116:	223d      	movs	r2, #61	; 0x3d
 8005118:	2101      	movs	r1, #1
 800511a:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800511c:	2300      	movs	r3, #0
}
 800511e:	0018      	movs	r0, r3
 8005120:	46bd      	mov	sp, r7
 8005122:	b002      	add	sp, #8
 8005124:	bd80      	pop	{r7, pc}
	...

08005128 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8005128:	b580      	push	{r7, lr}
 800512a:	b084      	sub	sp, #16
 800512c:	af00      	add	r7, sp, #0
 800512e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8005130:	687b      	ldr	r3, [r7, #4]
 8005132:	223d      	movs	r2, #61	; 0x3d
 8005134:	5c9b      	ldrb	r3, [r3, r2]
 8005136:	b2db      	uxtb	r3, r3
 8005138:	2b01      	cmp	r3, #1
 800513a:	d001      	beq.n	8005140 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 800513c:	2301      	movs	r3, #1
 800513e:	e047      	b.n	80051d0 <HAL_TIM_Base_Start_IT+0xa8>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005140:	687b      	ldr	r3, [r7, #4]
 8005142:	223d      	movs	r2, #61	; 0x3d
 8005144:	2102      	movs	r1, #2
 8005146:	5499      	strb	r1, [r3, r2]

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8005148:	687b      	ldr	r3, [r7, #4]
 800514a:	681b      	ldr	r3, [r3, #0]
 800514c:	68da      	ldr	r2, [r3, #12]
 800514e:	687b      	ldr	r3, [r7, #4]
 8005150:	681b      	ldr	r3, [r3, #0]
 8005152:	2101      	movs	r1, #1
 8005154:	430a      	orrs	r2, r1
 8005156:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005158:	687b      	ldr	r3, [r7, #4]
 800515a:	681b      	ldr	r3, [r3, #0]
 800515c:	4a1e      	ldr	r2, [pc, #120]	; (80051d8 <HAL_TIM_Base_Start_IT+0xb0>)
 800515e:	4293      	cmp	r3, r2
 8005160:	d014      	beq.n	800518c <HAL_TIM_Base_Start_IT+0x64>
 8005162:	687b      	ldr	r3, [r7, #4]
 8005164:	681a      	ldr	r2, [r3, #0]
 8005166:	2380      	movs	r3, #128	; 0x80
 8005168:	05db      	lsls	r3, r3, #23
 800516a:	429a      	cmp	r2, r3
 800516c:	d00e      	beq.n	800518c <HAL_TIM_Base_Start_IT+0x64>
 800516e:	687b      	ldr	r3, [r7, #4]
 8005170:	681b      	ldr	r3, [r3, #0]
 8005172:	4a1a      	ldr	r2, [pc, #104]	; (80051dc <HAL_TIM_Base_Start_IT+0xb4>)
 8005174:	4293      	cmp	r3, r2
 8005176:	d009      	beq.n	800518c <HAL_TIM_Base_Start_IT+0x64>
 8005178:	687b      	ldr	r3, [r7, #4]
 800517a:	681b      	ldr	r3, [r3, #0]
 800517c:	4a18      	ldr	r2, [pc, #96]	; (80051e0 <HAL_TIM_Base_Start_IT+0xb8>)
 800517e:	4293      	cmp	r3, r2
 8005180:	d004      	beq.n	800518c <HAL_TIM_Base_Start_IT+0x64>
 8005182:	687b      	ldr	r3, [r7, #4]
 8005184:	681b      	ldr	r3, [r3, #0]
 8005186:	4a17      	ldr	r2, [pc, #92]	; (80051e4 <HAL_TIM_Base_Start_IT+0xbc>)
 8005188:	4293      	cmp	r3, r2
 800518a:	d116      	bne.n	80051ba <HAL_TIM_Base_Start_IT+0x92>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800518c:	687b      	ldr	r3, [r7, #4]
 800518e:	681b      	ldr	r3, [r3, #0]
 8005190:	689b      	ldr	r3, [r3, #8]
 8005192:	4a15      	ldr	r2, [pc, #84]	; (80051e8 <HAL_TIM_Base_Start_IT+0xc0>)
 8005194:	4013      	ands	r3, r2
 8005196:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005198:	68fb      	ldr	r3, [r7, #12]
 800519a:	2b06      	cmp	r3, #6
 800519c:	d016      	beq.n	80051cc <HAL_TIM_Base_Start_IT+0xa4>
 800519e:	68fa      	ldr	r2, [r7, #12]
 80051a0:	2380      	movs	r3, #128	; 0x80
 80051a2:	025b      	lsls	r3, r3, #9
 80051a4:	429a      	cmp	r2, r3
 80051a6:	d011      	beq.n	80051cc <HAL_TIM_Base_Start_IT+0xa4>
    {
      __HAL_TIM_ENABLE(htim);
 80051a8:	687b      	ldr	r3, [r7, #4]
 80051aa:	681b      	ldr	r3, [r3, #0]
 80051ac:	681a      	ldr	r2, [r3, #0]
 80051ae:	687b      	ldr	r3, [r7, #4]
 80051b0:	681b      	ldr	r3, [r3, #0]
 80051b2:	2101      	movs	r1, #1
 80051b4:	430a      	orrs	r2, r1
 80051b6:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80051b8:	e008      	b.n	80051cc <HAL_TIM_Base_Start_IT+0xa4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80051ba:	687b      	ldr	r3, [r7, #4]
 80051bc:	681b      	ldr	r3, [r3, #0]
 80051be:	681a      	ldr	r2, [r3, #0]
 80051c0:	687b      	ldr	r3, [r7, #4]
 80051c2:	681b      	ldr	r3, [r3, #0]
 80051c4:	2101      	movs	r1, #1
 80051c6:	430a      	orrs	r2, r1
 80051c8:	601a      	str	r2, [r3, #0]
 80051ca:	e000      	b.n	80051ce <HAL_TIM_Base_Start_IT+0xa6>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80051cc:	46c0      	nop			; (mov r8, r8)
  }

  /* Return function status */
  return HAL_OK;
 80051ce:	2300      	movs	r3, #0
}
 80051d0:	0018      	movs	r0, r3
 80051d2:	46bd      	mov	sp, r7
 80051d4:	b004      	add	sp, #16
 80051d6:	bd80      	pop	{r7, pc}
 80051d8:	40012c00 	.word	0x40012c00
 80051dc:	40000400 	.word	0x40000400
 80051e0:	40000800 	.word	0x40000800
 80051e4:	40014000 	.word	0x40014000
 80051e8:	00010007 	.word	0x00010007

080051ec <HAL_TIM_Base_Stop_IT>:
  * @brief  Stops the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Stop_IT(TIM_HandleTypeDef *htim)
{
 80051ec:	b580      	push	{r7, lr}
 80051ee:	b082      	sub	sp, #8
 80051f0:	af00      	add	r7, sp, #0
 80051f2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Disable the TIM Update interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_UPDATE);
 80051f4:	687b      	ldr	r3, [r7, #4]
 80051f6:	681b      	ldr	r3, [r3, #0]
 80051f8:	68da      	ldr	r2, [r3, #12]
 80051fa:	687b      	ldr	r3, [r7, #4]
 80051fc:	681b      	ldr	r3, [r3, #0]
 80051fe:	2101      	movs	r1, #1
 8005200:	438a      	bics	r2, r1
 8005202:	60da      	str	r2, [r3, #12]

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8005204:	687b      	ldr	r3, [r7, #4]
 8005206:	681b      	ldr	r3, [r3, #0]
 8005208:	6a1b      	ldr	r3, [r3, #32]
 800520a:	4a0d      	ldr	r2, [pc, #52]	; (8005240 <HAL_TIM_Base_Stop_IT+0x54>)
 800520c:	4013      	ands	r3, r2
 800520e:	d10d      	bne.n	800522c <HAL_TIM_Base_Stop_IT+0x40>
 8005210:	687b      	ldr	r3, [r7, #4]
 8005212:	681b      	ldr	r3, [r3, #0]
 8005214:	6a1b      	ldr	r3, [r3, #32]
 8005216:	4a0b      	ldr	r2, [pc, #44]	; (8005244 <HAL_TIM_Base_Stop_IT+0x58>)
 8005218:	4013      	ands	r3, r2
 800521a:	d107      	bne.n	800522c <HAL_TIM_Base_Stop_IT+0x40>
 800521c:	687b      	ldr	r3, [r7, #4]
 800521e:	681b      	ldr	r3, [r3, #0]
 8005220:	681a      	ldr	r2, [r3, #0]
 8005222:	687b      	ldr	r3, [r7, #4]
 8005224:	681b      	ldr	r3, [r3, #0]
 8005226:	2101      	movs	r1, #1
 8005228:	438a      	bics	r2, r1
 800522a:	601a      	str	r2, [r3, #0]

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_READY;
 800522c:	687b      	ldr	r3, [r7, #4]
 800522e:	223d      	movs	r2, #61	; 0x3d
 8005230:	2101      	movs	r1, #1
 8005232:	5499      	strb	r1, [r3, r2]

  /* Return function status */
  return HAL_OK;
 8005234:	2300      	movs	r3, #0
}
 8005236:	0018      	movs	r0, r3
 8005238:	46bd      	mov	sp, r7
 800523a:	b002      	add	sp, #8
 800523c:	bd80      	pop	{r7, pc}
 800523e:	46c0      	nop			; (mov r8, r8)
 8005240:	00001111 	.word	0x00001111
 8005244:	00000444 	.word	0x00000444

08005248 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8005248:	b580      	push	{r7, lr}
 800524a:	b082      	sub	sp, #8
 800524c:	af00      	add	r7, sp, #0
 800524e:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8005250:	687b      	ldr	r3, [r7, #4]
 8005252:	681b      	ldr	r3, [r3, #0]
 8005254:	691b      	ldr	r3, [r3, #16]
 8005256:	2202      	movs	r2, #2
 8005258:	4013      	ands	r3, r2
 800525a:	2b02      	cmp	r3, #2
 800525c:	d124      	bne.n	80052a8 <HAL_TIM_IRQHandler+0x60>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800525e:	687b      	ldr	r3, [r7, #4]
 8005260:	681b      	ldr	r3, [r3, #0]
 8005262:	68db      	ldr	r3, [r3, #12]
 8005264:	2202      	movs	r2, #2
 8005266:	4013      	ands	r3, r2
 8005268:	2b02      	cmp	r3, #2
 800526a:	d11d      	bne.n	80052a8 <HAL_TIM_IRQHandler+0x60>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800526c:	687b      	ldr	r3, [r7, #4]
 800526e:	681b      	ldr	r3, [r3, #0]
 8005270:	2203      	movs	r2, #3
 8005272:	4252      	negs	r2, r2
 8005274:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8005276:	687b      	ldr	r3, [r7, #4]
 8005278:	2201      	movs	r2, #1
 800527a:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800527c:	687b      	ldr	r3, [r7, #4]
 800527e:	681b      	ldr	r3, [r3, #0]
 8005280:	699b      	ldr	r3, [r3, #24]
 8005282:	2203      	movs	r2, #3
 8005284:	4013      	ands	r3, r2
 8005286:	d004      	beq.n	8005292 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8005288:	687b      	ldr	r3, [r7, #4]
 800528a:	0018      	movs	r0, r3
 800528c:	f000 f916 	bl	80054bc <HAL_TIM_IC_CaptureCallback>
 8005290:	e007      	b.n	80052a2 <HAL_TIM_IRQHandler+0x5a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8005292:	687b      	ldr	r3, [r7, #4]
 8005294:	0018      	movs	r0, r3
 8005296:	f000 f909 	bl	80054ac <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800529a:	687b      	ldr	r3, [r7, #4]
 800529c:	0018      	movs	r0, r3
 800529e:	f000 f915 	bl	80054cc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80052a2:	687b      	ldr	r3, [r7, #4]
 80052a4:	2200      	movs	r2, #0
 80052a6:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80052a8:	687b      	ldr	r3, [r7, #4]
 80052aa:	681b      	ldr	r3, [r3, #0]
 80052ac:	691b      	ldr	r3, [r3, #16]
 80052ae:	2204      	movs	r2, #4
 80052b0:	4013      	ands	r3, r2
 80052b2:	2b04      	cmp	r3, #4
 80052b4:	d125      	bne.n	8005302 <HAL_TIM_IRQHandler+0xba>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80052b6:	687b      	ldr	r3, [r7, #4]
 80052b8:	681b      	ldr	r3, [r3, #0]
 80052ba:	68db      	ldr	r3, [r3, #12]
 80052bc:	2204      	movs	r2, #4
 80052be:	4013      	ands	r3, r2
 80052c0:	2b04      	cmp	r3, #4
 80052c2:	d11e      	bne.n	8005302 <HAL_TIM_IRQHandler+0xba>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80052c4:	687b      	ldr	r3, [r7, #4]
 80052c6:	681b      	ldr	r3, [r3, #0]
 80052c8:	2205      	movs	r2, #5
 80052ca:	4252      	negs	r2, r2
 80052cc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80052ce:	687b      	ldr	r3, [r7, #4]
 80052d0:	2202      	movs	r2, #2
 80052d2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80052d4:	687b      	ldr	r3, [r7, #4]
 80052d6:	681b      	ldr	r3, [r3, #0]
 80052d8:	699a      	ldr	r2, [r3, #24]
 80052da:	23c0      	movs	r3, #192	; 0xc0
 80052dc:	009b      	lsls	r3, r3, #2
 80052de:	4013      	ands	r3, r2
 80052e0:	d004      	beq.n	80052ec <HAL_TIM_IRQHandler+0xa4>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80052e2:	687b      	ldr	r3, [r7, #4]
 80052e4:	0018      	movs	r0, r3
 80052e6:	f000 f8e9 	bl	80054bc <HAL_TIM_IC_CaptureCallback>
 80052ea:	e007      	b.n	80052fc <HAL_TIM_IRQHandler+0xb4>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80052ec:	687b      	ldr	r3, [r7, #4]
 80052ee:	0018      	movs	r0, r3
 80052f0:	f000 f8dc 	bl	80054ac <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80052f4:	687b      	ldr	r3, [r7, #4]
 80052f6:	0018      	movs	r0, r3
 80052f8:	f000 f8e8 	bl	80054cc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80052fc:	687b      	ldr	r3, [r7, #4]
 80052fe:	2200      	movs	r2, #0
 8005300:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8005302:	687b      	ldr	r3, [r7, #4]
 8005304:	681b      	ldr	r3, [r3, #0]
 8005306:	691b      	ldr	r3, [r3, #16]
 8005308:	2208      	movs	r2, #8
 800530a:	4013      	ands	r3, r2
 800530c:	2b08      	cmp	r3, #8
 800530e:	d124      	bne.n	800535a <HAL_TIM_IRQHandler+0x112>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8005310:	687b      	ldr	r3, [r7, #4]
 8005312:	681b      	ldr	r3, [r3, #0]
 8005314:	68db      	ldr	r3, [r3, #12]
 8005316:	2208      	movs	r2, #8
 8005318:	4013      	ands	r3, r2
 800531a:	2b08      	cmp	r3, #8
 800531c:	d11d      	bne.n	800535a <HAL_TIM_IRQHandler+0x112>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800531e:	687b      	ldr	r3, [r7, #4]
 8005320:	681b      	ldr	r3, [r3, #0]
 8005322:	2209      	movs	r2, #9
 8005324:	4252      	negs	r2, r2
 8005326:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8005328:	687b      	ldr	r3, [r7, #4]
 800532a:	2204      	movs	r2, #4
 800532c:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800532e:	687b      	ldr	r3, [r7, #4]
 8005330:	681b      	ldr	r3, [r3, #0]
 8005332:	69db      	ldr	r3, [r3, #28]
 8005334:	2203      	movs	r2, #3
 8005336:	4013      	ands	r3, r2
 8005338:	d004      	beq.n	8005344 <HAL_TIM_IRQHandler+0xfc>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800533a:	687b      	ldr	r3, [r7, #4]
 800533c:	0018      	movs	r0, r3
 800533e:	f000 f8bd 	bl	80054bc <HAL_TIM_IC_CaptureCallback>
 8005342:	e007      	b.n	8005354 <HAL_TIM_IRQHandler+0x10c>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005344:	687b      	ldr	r3, [r7, #4]
 8005346:	0018      	movs	r0, r3
 8005348:	f000 f8b0 	bl	80054ac <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800534c:	687b      	ldr	r3, [r7, #4]
 800534e:	0018      	movs	r0, r3
 8005350:	f000 f8bc 	bl	80054cc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005354:	687b      	ldr	r3, [r7, #4]
 8005356:	2200      	movs	r2, #0
 8005358:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800535a:	687b      	ldr	r3, [r7, #4]
 800535c:	681b      	ldr	r3, [r3, #0]
 800535e:	691b      	ldr	r3, [r3, #16]
 8005360:	2210      	movs	r2, #16
 8005362:	4013      	ands	r3, r2
 8005364:	2b10      	cmp	r3, #16
 8005366:	d125      	bne.n	80053b4 <HAL_TIM_IRQHandler+0x16c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8005368:	687b      	ldr	r3, [r7, #4]
 800536a:	681b      	ldr	r3, [r3, #0]
 800536c:	68db      	ldr	r3, [r3, #12]
 800536e:	2210      	movs	r2, #16
 8005370:	4013      	ands	r3, r2
 8005372:	2b10      	cmp	r3, #16
 8005374:	d11e      	bne.n	80053b4 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8005376:	687b      	ldr	r3, [r7, #4]
 8005378:	681b      	ldr	r3, [r3, #0]
 800537a:	2211      	movs	r2, #17
 800537c:	4252      	negs	r2, r2
 800537e:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8005380:	687b      	ldr	r3, [r7, #4]
 8005382:	2208      	movs	r2, #8
 8005384:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8005386:	687b      	ldr	r3, [r7, #4]
 8005388:	681b      	ldr	r3, [r3, #0]
 800538a:	69da      	ldr	r2, [r3, #28]
 800538c:	23c0      	movs	r3, #192	; 0xc0
 800538e:	009b      	lsls	r3, r3, #2
 8005390:	4013      	ands	r3, r2
 8005392:	d004      	beq.n	800539e <HAL_TIM_IRQHandler+0x156>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005394:	687b      	ldr	r3, [r7, #4]
 8005396:	0018      	movs	r0, r3
 8005398:	f000 f890 	bl	80054bc <HAL_TIM_IC_CaptureCallback>
 800539c:	e007      	b.n	80053ae <HAL_TIM_IRQHandler+0x166>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800539e:	687b      	ldr	r3, [r7, #4]
 80053a0:	0018      	movs	r0, r3
 80053a2:	f000 f883 	bl	80054ac <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80053a6:	687b      	ldr	r3, [r7, #4]
 80053a8:	0018      	movs	r0, r3
 80053aa:	f000 f88f 	bl	80054cc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80053ae:	687b      	ldr	r3, [r7, #4]
 80053b0:	2200      	movs	r2, #0
 80053b2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80053b4:	687b      	ldr	r3, [r7, #4]
 80053b6:	681b      	ldr	r3, [r3, #0]
 80053b8:	691b      	ldr	r3, [r3, #16]
 80053ba:	2201      	movs	r2, #1
 80053bc:	4013      	ands	r3, r2
 80053be:	2b01      	cmp	r3, #1
 80053c0:	d10f      	bne.n	80053e2 <HAL_TIM_IRQHandler+0x19a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80053c2:	687b      	ldr	r3, [r7, #4]
 80053c4:	681b      	ldr	r3, [r3, #0]
 80053c6:	68db      	ldr	r3, [r3, #12]
 80053c8:	2201      	movs	r2, #1
 80053ca:	4013      	ands	r3, r2
 80053cc:	2b01      	cmp	r3, #1
 80053ce:	d108      	bne.n	80053e2 <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80053d0:	687b      	ldr	r3, [r7, #4]
 80053d2:	681b      	ldr	r3, [r3, #0]
 80053d4:	2202      	movs	r2, #2
 80053d6:	4252      	negs	r2, r2
 80053d8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80053da:	687b      	ldr	r3, [r7, #4]
 80053dc:	0018      	movs	r0, r3
 80053de:	f7fd fc01 	bl	8002be4 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80053e2:	687b      	ldr	r3, [r7, #4]
 80053e4:	681b      	ldr	r3, [r3, #0]
 80053e6:	691b      	ldr	r3, [r3, #16]
 80053e8:	2280      	movs	r2, #128	; 0x80
 80053ea:	4013      	ands	r3, r2
 80053ec:	2b80      	cmp	r3, #128	; 0x80
 80053ee:	d10f      	bne.n	8005410 <HAL_TIM_IRQHandler+0x1c8>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80053f0:	687b      	ldr	r3, [r7, #4]
 80053f2:	681b      	ldr	r3, [r3, #0]
 80053f4:	68db      	ldr	r3, [r3, #12]
 80053f6:	2280      	movs	r2, #128	; 0x80
 80053f8:	4013      	ands	r3, r2
 80053fa:	2b80      	cmp	r3, #128	; 0x80
 80053fc:	d108      	bne.n	8005410 <HAL_TIM_IRQHandler+0x1c8>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80053fe:	687b      	ldr	r3, [r7, #4]
 8005400:	681b      	ldr	r3, [r3, #0]
 8005402:	2281      	movs	r2, #129	; 0x81
 8005404:	4252      	negs	r2, r2
 8005406:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8005408:	687b      	ldr	r3, [r7, #4]
 800540a:	0018      	movs	r0, r3
 800540c:	f000 f976 	bl	80056fc <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8005410:	687b      	ldr	r3, [r7, #4]
 8005412:	681b      	ldr	r3, [r3, #0]
 8005414:	691a      	ldr	r2, [r3, #16]
 8005416:	2380      	movs	r3, #128	; 0x80
 8005418:	005b      	lsls	r3, r3, #1
 800541a:	401a      	ands	r2, r3
 800541c:	2380      	movs	r3, #128	; 0x80
 800541e:	005b      	lsls	r3, r3, #1
 8005420:	429a      	cmp	r2, r3
 8005422:	d10e      	bne.n	8005442 <HAL_TIM_IRQHandler+0x1fa>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8005424:	687b      	ldr	r3, [r7, #4]
 8005426:	681b      	ldr	r3, [r3, #0]
 8005428:	68db      	ldr	r3, [r3, #12]
 800542a:	2280      	movs	r2, #128	; 0x80
 800542c:	4013      	ands	r3, r2
 800542e:	2b80      	cmp	r3, #128	; 0x80
 8005430:	d107      	bne.n	8005442 <HAL_TIM_IRQHandler+0x1fa>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8005432:	687b      	ldr	r3, [r7, #4]
 8005434:	681b      	ldr	r3, [r3, #0]
 8005436:	4a1c      	ldr	r2, [pc, #112]	; (80054a8 <HAL_TIM_IRQHandler+0x260>)
 8005438:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 800543a:	687b      	ldr	r3, [r7, #4]
 800543c:	0018      	movs	r0, r3
 800543e:	f000 f965 	bl	800570c <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8005442:	687b      	ldr	r3, [r7, #4]
 8005444:	681b      	ldr	r3, [r3, #0]
 8005446:	691b      	ldr	r3, [r3, #16]
 8005448:	2240      	movs	r2, #64	; 0x40
 800544a:	4013      	ands	r3, r2
 800544c:	2b40      	cmp	r3, #64	; 0x40
 800544e:	d10f      	bne.n	8005470 <HAL_TIM_IRQHandler+0x228>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8005450:	687b      	ldr	r3, [r7, #4]
 8005452:	681b      	ldr	r3, [r3, #0]
 8005454:	68db      	ldr	r3, [r3, #12]
 8005456:	2240      	movs	r2, #64	; 0x40
 8005458:	4013      	ands	r3, r2
 800545a:	2b40      	cmp	r3, #64	; 0x40
 800545c:	d108      	bne.n	8005470 <HAL_TIM_IRQHandler+0x228>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800545e:	687b      	ldr	r3, [r7, #4]
 8005460:	681b      	ldr	r3, [r3, #0]
 8005462:	2241      	movs	r2, #65	; 0x41
 8005464:	4252      	negs	r2, r2
 8005466:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8005468:	687b      	ldr	r3, [r7, #4]
 800546a:	0018      	movs	r0, r3
 800546c:	f000 f836 	bl	80054dc <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8005470:	687b      	ldr	r3, [r7, #4]
 8005472:	681b      	ldr	r3, [r3, #0]
 8005474:	691b      	ldr	r3, [r3, #16]
 8005476:	2220      	movs	r2, #32
 8005478:	4013      	ands	r3, r2
 800547a:	2b20      	cmp	r3, #32
 800547c:	d10f      	bne.n	800549e <HAL_TIM_IRQHandler+0x256>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800547e:	687b      	ldr	r3, [r7, #4]
 8005480:	681b      	ldr	r3, [r3, #0]
 8005482:	68db      	ldr	r3, [r3, #12]
 8005484:	2220      	movs	r2, #32
 8005486:	4013      	ands	r3, r2
 8005488:	2b20      	cmp	r3, #32
 800548a:	d108      	bne.n	800549e <HAL_TIM_IRQHandler+0x256>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800548c:	687b      	ldr	r3, [r7, #4]
 800548e:	681b      	ldr	r3, [r3, #0]
 8005490:	2221      	movs	r2, #33	; 0x21
 8005492:	4252      	negs	r2, r2
 8005494:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8005496:	687b      	ldr	r3, [r7, #4]
 8005498:	0018      	movs	r0, r3
 800549a:	f000 f927 	bl	80056ec <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800549e:	46c0      	nop			; (mov r8, r8)
 80054a0:	46bd      	mov	sp, r7
 80054a2:	b002      	add	sp, #8
 80054a4:	bd80      	pop	{r7, pc}
 80054a6:	46c0      	nop			; (mov r8, r8)
 80054a8:	fffffeff 	.word	0xfffffeff

080054ac <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80054ac:	b580      	push	{r7, lr}
 80054ae:	b082      	sub	sp, #8
 80054b0:	af00      	add	r7, sp, #0
 80054b2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80054b4:	46c0      	nop			; (mov r8, r8)
 80054b6:	46bd      	mov	sp, r7
 80054b8:	b002      	add	sp, #8
 80054ba:	bd80      	pop	{r7, pc}

080054bc <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80054bc:	b580      	push	{r7, lr}
 80054be:	b082      	sub	sp, #8
 80054c0:	af00      	add	r7, sp, #0
 80054c2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80054c4:	46c0      	nop			; (mov r8, r8)
 80054c6:	46bd      	mov	sp, r7
 80054c8:	b002      	add	sp, #8
 80054ca:	bd80      	pop	{r7, pc}

080054cc <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80054cc:	b580      	push	{r7, lr}
 80054ce:	b082      	sub	sp, #8
 80054d0:	af00      	add	r7, sp, #0
 80054d2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80054d4:	46c0      	nop			; (mov r8, r8)
 80054d6:	46bd      	mov	sp, r7
 80054d8:	b002      	add	sp, #8
 80054da:	bd80      	pop	{r7, pc}

080054dc <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80054dc:	b580      	push	{r7, lr}
 80054de:	b082      	sub	sp, #8
 80054e0:	af00      	add	r7, sp, #0
 80054e2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80054e4:	46c0      	nop			; (mov r8, r8)
 80054e6:	46bd      	mov	sp, r7
 80054e8:	b002      	add	sp, #8
 80054ea:	bd80      	pop	{r7, pc}

080054ec <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 80054ec:	b580      	push	{r7, lr}
 80054ee:	b084      	sub	sp, #16
 80054f0:	af00      	add	r7, sp, #0
 80054f2:	6078      	str	r0, [r7, #4]
 80054f4:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80054f6:	687b      	ldr	r3, [r7, #4]
 80054f8:	681b      	ldr	r3, [r3, #0]
 80054fa:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80054fc:	687b      	ldr	r3, [r7, #4]
 80054fe:	4a38      	ldr	r2, [pc, #224]	; (80055e0 <TIM_Base_SetConfig+0xf4>)
 8005500:	4293      	cmp	r3, r2
 8005502:	d00c      	beq.n	800551e <TIM_Base_SetConfig+0x32>
 8005504:	687a      	ldr	r2, [r7, #4]
 8005506:	2380      	movs	r3, #128	; 0x80
 8005508:	05db      	lsls	r3, r3, #23
 800550a:	429a      	cmp	r2, r3
 800550c:	d007      	beq.n	800551e <TIM_Base_SetConfig+0x32>
 800550e:	687b      	ldr	r3, [r7, #4]
 8005510:	4a34      	ldr	r2, [pc, #208]	; (80055e4 <TIM_Base_SetConfig+0xf8>)
 8005512:	4293      	cmp	r3, r2
 8005514:	d003      	beq.n	800551e <TIM_Base_SetConfig+0x32>
 8005516:	687b      	ldr	r3, [r7, #4]
 8005518:	4a33      	ldr	r2, [pc, #204]	; (80055e8 <TIM_Base_SetConfig+0xfc>)
 800551a:	4293      	cmp	r3, r2
 800551c:	d108      	bne.n	8005530 <TIM_Base_SetConfig+0x44>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800551e:	68fb      	ldr	r3, [r7, #12]
 8005520:	2270      	movs	r2, #112	; 0x70
 8005522:	4393      	bics	r3, r2
 8005524:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8005526:	683b      	ldr	r3, [r7, #0]
 8005528:	685b      	ldr	r3, [r3, #4]
 800552a:	68fa      	ldr	r2, [r7, #12]
 800552c:	4313      	orrs	r3, r2
 800552e:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8005530:	687b      	ldr	r3, [r7, #4]
 8005532:	4a2b      	ldr	r2, [pc, #172]	; (80055e0 <TIM_Base_SetConfig+0xf4>)
 8005534:	4293      	cmp	r3, r2
 8005536:	d01c      	beq.n	8005572 <TIM_Base_SetConfig+0x86>
 8005538:	687a      	ldr	r2, [r7, #4]
 800553a:	2380      	movs	r3, #128	; 0x80
 800553c:	05db      	lsls	r3, r3, #23
 800553e:	429a      	cmp	r2, r3
 8005540:	d017      	beq.n	8005572 <TIM_Base_SetConfig+0x86>
 8005542:	687b      	ldr	r3, [r7, #4]
 8005544:	4a27      	ldr	r2, [pc, #156]	; (80055e4 <TIM_Base_SetConfig+0xf8>)
 8005546:	4293      	cmp	r3, r2
 8005548:	d013      	beq.n	8005572 <TIM_Base_SetConfig+0x86>
 800554a:	687b      	ldr	r3, [r7, #4]
 800554c:	4a26      	ldr	r2, [pc, #152]	; (80055e8 <TIM_Base_SetConfig+0xfc>)
 800554e:	4293      	cmp	r3, r2
 8005550:	d00f      	beq.n	8005572 <TIM_Base_SetConfig+0x86>
 8005552:	687b      	ldr	r3, [r7, #4]
 8005554:	4a25      	ldr	r2, [pc, #148]	; (80055ec <TIM_Base_SetConfig+0x100>)
 8005556:	4293      	cmp	r3, r2
 8005558:	d00b      	beq.n	8005572 <TIM_Base_SetConfig+0x86>
 800555a:	687b      	ldr	r3, [r7, #4]
 800555c:	4a24      	ldr	r2, [pc, #144]	; (80055f0 <TIM_Base_SetConfig+0x104>)
 800555e:	4293      	cmp	r3, r2
 8005560:	d007      	beq.n	8005572 <TIM_Base_SetConfig+0x86>
 8005562:	687b      	ldr	r3, [r7, #4]
 8005564:	4a23      	ldr	r2, [pc, #140]	; (80055f4 <TIM_Base_SetConfig+0x108>)
 8005566:	4293      	cmp	r3, r2
 8005568:	d003      	beq.n	8005572 <TIM_Base_SetConfig+0x86>
 800556a:	687b      	ldr	r3, [r7, #4]
 800556c:	4a22      	ldr	r2, [pc, #136]	; (80055f8 <TIM_Base_SetConfig+0x10c>)
 800556e:	4293      	cmp	r3, r2
 8005570:	d108      	bne.n	8005584 <TIM_Base_SetConfig+0x98>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8005572:	68fb      	ldr	r3, [r7, #12]
 8005574:	4a21      	ldr	r2, [pc, #132]	; (80055fc <TIM_Base_SetConfig+0x110>)
 8005576:	4013      	ands	r3, r2
 8005578:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800557a:	683b      	ldr	r3, [r7, #0]
 800557c:	68db      	ldr	r3, [r3, #12]
 800557e:	68fa      	ldr	r2, [r7, #12]
 8005580:	4313      	orrs	r3, r2
 8005582:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8005584:	68fb      	ldr	r3, [r7, #12]
 8005586:	2280      	movs	r2, #128	; 0x80
 8005588:	4393      	bics	r3, r2
 800558a:	001a      	movs	r2, r3
 800558c:	683b      	ldr	r3, [r7, #0]
 800558e:	695b      	ldr	r3, [r3, #20]
 8005590:	4313      	orrs	r3, r2
 8005592:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8005594:	687b      	ldr	r3, [r7, #4]
 8005596:	68fa      	ldr	r2, [r7, #12]
 8005598:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800559a:	683b      	ldr	r3, [r7, #0]
 800559c:	689a      	ldr	r2, [r3, #8]
 800559e:	687b      	ldr	r3, [r7, #4]
 80055a0:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80055a2:	683b      	ldr	r3, [r7, #0]
 80055a4:	681a      	ldr	r2, [r3, #0]
 80055a6:	687b      	ldr	r3, [r7, #4]
 80055a8:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80055aa:	687b      	ldr	r3, [r7, #4]
 80055ac:	4a0c      	ldr	r2, [pc, #48]	; (80055e0 <TIM_Base_SetConfig+0xf4>)
 80055ae:	4293      	cmp	r3, r2
 80055b0:	d00b      	beq.n	80055ca <TIM_Base_SetConfig+0xde>
 80055b2:	687b      	ldr	r3, [r7, #4]
 80055b4:	4a0e      	ldr	r2, [pc, #56]	; (80055f0 <TIM_Base_SetConfig+0x104>)
 80055b6:	4293      	cmp	r3, r2
 80055b8:	d007      	beq.n	80055ca <TIM_Base_SetConfig+0xde>
 80055ba:	687b      	ldr	r3, [r7, #4]
 80055bc:	4a0d      	ldr	r2, [pc, #52]	; (80055f4 <TIM_Base_SetConfig+0x108>)
 80055be:	4293      	cmp	r3, r2
 80055c0:	d003      	beq.n	80055ca <TIM_Base_SetConfig+0xde>
 80055c2:	687b      	ldr	r3, [r7, #4]
 80055c4:	4a0c      	ldr	r2, [pc, #48]	; (80055f8 <TIM_Base_SetConfig+0x10c>)
 80055c6:	4293      	cmp	r3, r2
 80055c8:	d103      	bne.n	80055d2 <TIM_Base_SetConfig+0xe6>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80055ca:	683b      	ldr	r3, [r7, #0]
 80055cc:	691a      	ldr	r2, [r3, #16]
 80055ce:	687b      	ldr	r3, [r7, #4]
 80055d0:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80055d2:	687b      	ldr	r3, [r7, #4]
 80055d4:	2201      	movs	r2, #1
 80055d6:	615a      	str	r2, [r3, #20]
}
 80055d8:	46c0      	nop			; (mov r8, r8)
 80055da:	46bd      	mov	sp, r7
 80055dc:	b004      	add	sp, #16
 80055de:	bd80      	pop	{r7, pc}
 80055e0:	40012c00 	.word	0x40012c00
 80055e4:	40000400 	.word	0x40000400
 80055e8:	40000800 	.word	0x40000800
 80055ec:	40002000 	.word	0x40002000
 80055f0:	40014000 	.word	0x40014000
 80055f4:	40014400 	.word	0x40014400
 80055f8:	40014800 	.word	0x40014800
 80055fc:	fffffcff 	.word	0xfffffcff

08005600 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8005600:	b580      	push	{r7, lr}
 8005602:	b084      	sub	sp, #16
 8005604:	af00      	add	r7, sp, #0
 8005606:	6078      	str	r0, [r7, #4]
 8005608:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800560a:	687b      	ldr	r3, [r7, #4]
 800560c:	223c      	movs	r2, #60	; 0x3c
 800560e:	5c9b      	ldrb	r3, [r3, r2]
 8005610:	2b01      	cmp	r3, #1
 8005612:	d101      	bne.n	8005618 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8005614:	2302      	movs	r3, #2
 8005616:	e05a      	b.n	80056ce <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8005618:	687b      	ldr	r3, [r7, #4]
 800561a:	223c      	movs	r2, #60	; 0x3c
 800561c:	2101      	movs	r1, #1
 800561e:	5499      	strb	r1, [r3, r2]

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005620:	687b      	ldr	r3, [r7, #4]
 8005622:	223d      	movs	r2, #61	; 0x3d
 8005624:	2102      	movs	r1, #2
 8005626:	5499      	strb	r1, [r3, r2]

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8005628:	687b      	ldr	r3, [r7, #4]
 800562a:	681b      	ldr	r3, [r3, #0]
 800562c:	685b      	ldr	r3, [r3, #4]
 800562e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8005630:	687b      	ldr	r3, [r7, #4]
 8005632:	681b      	ldr	r3, [r3, #0]
 8005634:	689b      	ldr	r3, [r3, #8]
 8005636:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8005638:	687b      	ldr	r3, [r7, #4]
 800563a:	681b      	ldr	r3, [r3, #0]
 800563c:	4a26      	ldr	r2, [pc, #152]	; (80056d8 <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 800563e:	4293      	cmp	r3, r2
 8005640:	d108      	bne.n	8005654 <HAL_TIMEx_MasterConfigSynchronization+0x54>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8005642:	68fb      	ldr	r3, [r7, #12]
 8005644:	4a25      	ldr	r2, [pc, #148]	; (80056dc <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8005646:	4013      	ands	r3, r2
 8005648:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 800564a:	683b      	ldr	r3, [r7, #0]
 800564c:	685b      	ldr	r3, [r3, #4]
 800564e:	68fa      	ldr	r2, [r7, #12]
 8005650:	4313      	orrs	r3, r2
 8005652:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8005654:	68fb      	ldr	r3, [r7, #12]
 8005656:	2270      	movs	r2, #112	; 0x70
 8005658:	4393      	bics	r3, r2
 800565a:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800565c:	683b      	ldr	r3, [r7, #0]
 800565e:	681b      	ldr	r3, [r3, #0]
 8005660:	68fa      	ldr	r2, [r7, #12]
 8005662:	4313      	orrs	r3, r2
 8005664:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8005666:	687b      	ldr	r3, [r7, #4]
 8005668:	681b      	ldr	r3, [r3, #0]
 800566a:	68fa      	ldr	r2, [r7, #12]
 800566c:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800566e:	687b      	ldr	r3, [r7, #4]
 8005670:	681b      	ldr	r3, [r3, #0]
 8005672:	4a19      	ldr	r2, [pc, #100]	; (80056d8 <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 8005674:	4293      	cmp	r3, r2
 8005676:	d014      	beq.n	80056a2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005678:	687b      	ldr	r3, [r7, #4]
 800567a:	681a      	ldr	r2, [r3, #0]
 800567c:	2380      	movs	r3, #128	; 0x80
 800567e:	05db      	lsls	r3, r3, #23
 8005680:	429a      	cmp	r2, r3
 8005682:	d00e      	beq.n	80056a2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005684:	687b      	ldr	r3, [r7, #4]
 8005686:	681b      	ldr	r3, [r3, #0]
 8005688:	4a15      	ldr	r2, [pc, #84]	; (80056e0 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 800568a:	4293      	cmp	r3, r2
 800568c:	d009      	beq.n	80056a2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800568e:	687b      	ldr	r3, [r7, #4]
 8005690:	681b      	ldr	r3, [r3, #0]
 8005692:	4a14      	ldr	r2, [pc, #80]	; (80056e4 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 8005694:	4293      	cmp	r3, r2
 8005696:	d004      	beq.n	80056a2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005698:	687b      	ldr	r3, [r7, #4]
 800569a:	681b      	ldr	r3, [r3, #0]
 800569c:	4a12      	ldr	r2, [pc, #72]	; (80056e8 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 800569e:	4293      	cmp	r3, r2
 80056a0:	d10c      	bne.n	80056bc <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80056a2:	68bb      	ldr	r3, [r7, #8]
 80056a4:	2280      	movs	r2, #128	; 0x80
 80056a6:	4393      	bics	r3, r2
 80056a8:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80056aa:	683b      	ldr	r3, [r7, #0]
 80056ac:	689b      	ldr	r3, [r3, #8]
 80056ae:	68ba      	ldr	r2, [r7, #8]
 80056b0:	4313      	orrs	r3, r2
 80056b2:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80056b4:	687b      	ldr	r3, [r7, #4]
 80056b6:	681b      	ldr	r3, [r3, #0]
 80056b8:	68ba      	ldr	r2, [r7, #8]
 80056ba:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80056bc:	687b      	ldr	r3, [r7, #4]
 80056be:	223d      	movs	r2, #61	; 0x3d
 80056c0:	2101      	movs	r1, #1
 80056c2:	5499      	strb	r1, [r3, r2]

  __HAL_UNLOCK(htim);
 80056c4:	687b      	ldr	r3, [r7, #4]
 80056c6:	223c      	movs	r2, #60	; 0x3c
 80056c8:	2100      	movs	r1, #0
 80056ca:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80056cc:	2300      	movs	r3, #0
}
 80056ce:	0018      	movs	r0, r3
 80056d0:	46bd      	mov	sp, r7
 80056d2:	b004      	add	sp, #16
 80056d4:	bd80      	pop	{r7, pc}
 80056d6:	46c0      	nop			; (mov r8, r8)
 80056d8:	40012c00 	.word	0x40012c00
 80056dc:	ff0fffff 	.word	0xff0fffff
 80056e0:	40000400 	.word	0x40000400
 80056e4:	40000800 	.word	0x40000800
 80056e8:	40014000 	.word	0x40014000

080056ec <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80056ec:	b580      	push	{r7, lr}
 80056ee:	b082      	sub	sp, #8
 80056f0:	af00      	add	r7, sp, #0
 80056f2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80056f4:	46c0      	nop			; (mov r8, r8)
 80056f6:	46bd      	mov	sp, r7
 80056f8:	b002      	add	sp, #8
 80056fa:	bd80      	pop	{r7, pc}

080056fc <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80056fc:	b580      	push	{r7, lr}
 80056fe:	b082      	sub	sp, #8
 8005700:	af00      	add	r7, sp, #0
 8005702:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8005704:	46c0      	nop			; (mov r8, r8)
 8005706:	46bd      	mov	sp, r7
 8005708:	b002      	add	sp, #8
 800570a:	bd80      	pop	{r7, pc}

0800570c <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 800570c:	b580      	push	{r7, lr}
 800570e:	b082      	sub	sp, #8
 8005710:	af00      	add	r7, sp, #0
 8005712:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8005714:	46c0      	nop			; (mov r8, r8)
 8005716:	46bd      	mov	sp, r7
 8005718:	b002      	add	sp, #8
 800571a:	bd80      	pop	{r7, pc}

0800571c <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800571c:	b580      	push	{r7, lr}
 800571e:	b082      	sub	sp, #8
 8005720:	af00      	add	r7, sp, #0
 8005722:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8005724:	687b      	ldr	r3, [r7, #4]
 8005726:	2b00      	cmp	r3, #0
 8005728:	d101      	bne.n	800572e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800572a:	2301      	movs	r3, #1
 800572c:	e046      	b.n	80057bc <HAL_UART_Init+0xa0>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800572e:	687b      	ldr	r3, [r7, #4]
 8005730:	2288      	movs	r2, #136	; 0x88
 8005732:	589b      	ldr	r3, [r3, r2]
 8005734:	2b00      	cmp	r3, #0
 8005736:	d107      	bne.n	8005748 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8005738:	687b      	ldr	r3, [r7, #4]
 800573a:	2284      	movs	r2, #132	; 0x84
 800573c:	2100      	movs	r1, #0
 800573e:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8005740:	687b      	ldr	r3, [r7, #4]
 8005742:	0018      	movs	r0, r3
 8005744:	f7fd fb14 	bl	8002d70 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8005748:	687b      	ldr	r3, [r7, #4]
 800574a:	2288      	movs	r2, #136	; 0x88
 800574c:	2124      	movs	r1, #36	; 0x24
 800574e:	5099      	str	r1, [r3, r2]

  __HAL_UART_DISABLE(huart);
 8005750:	687b      	ldr	r3, [r7, #4]
 8005752:	681b      	ldr	r3, [r3, #0]
 8005754:	681a      	ldr	r2, [r3, #0]
 8005756:	687b      	ldr	r3, [r7, #4]
 8005758:	681b      	ldr	r3, [r3, #0]
 800575a:	2101      	movs	r1, #1
 800575c:	438a      	bics	r2, r1
 800575e:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8005760:	687b      	ldr	r3, [r7, #4]
 8005762:	0018      	movs	r0, r3
 8005764:	f000 f9ae 	bl	8005ac4 <UART_SetConfig>
 8005768:	0003      	movs	r3, r0
 800576a:	2b01      	cmp	r3, #1
 800576c:	d101      	bne.n	8005772 <HAL_UART_Init+0x56>
  {
    return HAL_ERROR;
 800576e:	2301      	movs	r3, #1
 8005770:	e024      	b.n	80057bc <HAL_UART_Init+0xa0>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8005772:	687b      	ldr	r3, [r7, #4]
 8005774:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005776:	2b00      	cmp	r3, #0
 8005778:	d003      	beq.n	8005782 <HAL_UART_Init+0x66>
  {
    UART_AdvFeatureConfig(huart);
 800577a:	687b      	ldr	r3, [r7, #4]
 800577c:	0018      	movs	r0, r3
 800577e:	f000 fcf7 	bl	8006170 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8005782:	687b      	ldr	r3, [r7, #4]
 8005784:	681b      	ldr	r3, [r3, #0]
 8005786:	685a      	ldr	r2, [r3, #4]
 8005788:	687b      	ldr	r3, [r7, #4]
 800578a:	681b      	ldr	r3, [r3, #0]
 800578c:	490d      	ldr	r1, [pc, #52]	; (80057c4 <HAL_UART_Init+0xa8>)
 800578e:	400a      	ands	r2, r1
 8005790:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8005792:	687b      	ldr	r3, [r7, #4]
 8005794:	681b      	ldr	r3, [r3, #0]
 8005796:	689a      	ldr	r2, [r3, #8]
 8005798:	687b      	ldr	r3, [r7, #4]
 800579a:	681b      	ldr	r3, [r3, #0]
 800579c:	212a      	movs	r1, #42	; 0x2a
 800579e:	438a      	bics	r2, r1
 80057a0:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80057a2:	687b      	ldr	r3, [r7, #4]
 80057a4:	681b      	ldr	r3, [r3, #0]
 80057a6:	681a      	ldr	r2, [r3, #0]
 80057a8:	687b      	ldr	r3, [r7, #4]
 80057aa:	681b      	ldr	r3, [r3, #0]
 80057ac:	2101      	movs	r1, #1
 80057ae:	430a      	orrs	r2, r1
 80057b0:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80057b2:	687b      	ldr	r3, [r7, #4]
 80057b4:	0018      	movs	r0, r3
 80057b6:	f000 fd8f 	bl	80062d8 <UART_CheckIdleState>
 80057ba:	0003      	movs	r3, r0
}
 80057bc:	0018      	movs	r0, r3
 80057be:	46bd      	mov	sp, r7
 80057c0:	b002      	add	sp, #8
 80057c2:	bd80      	pop	{r7, pc}
 80057c4:	ffffb7ff 	.word	0xffffb7ff

080057c8 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80057c8:	b580      	push	{r7, lr}
 80057ca:	b08a      	sub	sp, #40	; 0x28
 80057cc:	af02      	add	r7, sp, #8
 80057ce:	60f8      	str	r0, [r7, #12]
 80057d0:	60b9      	str	r1, [r7, #8]
 80057d2:	603b      	str	r3, [r7, #0]
 80057d4:	1dbb      	adds	r3, r7, #6
 80057d6:	801a      	strh	r2, [r3, #0]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80057d8:	68fb      	ldr	r3, [r7, #12]
 80057da:	2288      	movs	r2, #136	; 0x88
 80057dc:	589b      	ldr	r3, [r3, r2]
 80057de:	2b20      	cmp	r3, #32
 80057e0:	d000      	beq.n	80057e4 <HAL_UART_Transmit+0x1c>
 80057e2:	e088      	b.n	80058f6 <HAL_UART_Transmit+0x12e>
  {
    if ((pData == NULL) || (Size == 0U))
 80057e4:	68bb      	ldr	r3, [r7, #8]
 80057e6:	2b00      	cmp	r3, #0
 80057e8:	d003      	beq.n	80057f2 <HAL_UART_Transmit+0x2a>
 80057ea:	1dbb      	adds	r3, r7, #6
 80057ec:	881b      	ldrh	r3, [r3, #0]
 80057ee:	2b00      	cmp	r3, #0
 80057f0:	d101      	bne.n	80057f6 <HAL_UART_Transmit+0x2e>
    {
      return  HAL_ERROR;
 80057f2:	2301      	movs	r3, #1
 80057f4:	e080      	b.n	80058f8 <HAL_UART_Transmit+0x130>
    }

    /* In case of 9bits/No Parity transfer, pData buffer provided as input parameter
       should be aligned on a u16 frontier, as data to be filled into TDR will be
       handled through a u16 cast. */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80057f6:	68fb      	ldr	r3, [r7, #12]
 80057f8:	689a      	ldr	r2, [r3, #8]
 80057fa:	2380      	movs	r3, #128	; 0x80
 80057fc:	015b      	lsls	r3, r3, #5
 80057fe:	429a      	cmp	r2, r3
 8005800:	d109      	bne.n	8005816 <HAL_UART_Transmit+0x4e>
 8005802:	68fb      	ldr	r3, [r7, #12]
 8005804:	691b      	ldr	r3, [r3, #16]
 8005806:	2b00      	cmp	r3, #0
 8005808:	d105      	bne.n	8005816 <HAL_UART_Transmit+0x4e>
    {
      if ((((uint32_t)pData) & 1U) != 0U)
 800580a:	68bb      	ldr	r3, [r7, #8]
 800580c:	2201      	movs	r2, #1
 800580e:	4013      	ands	r3, r2
 8005810:	d001      	beq.n	8005816 <HAL_UART_Transmit+0x4e>
      {
        return  HAL_ERROR;
 8005812:	2301      	movs	r3, #1
 8005814:	e070      	b.n	80058f8 <HAL_UART_Transmit+0x130>
      }
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005816:	68fb      	ldr	r3, [r7, #12]
 8005818:	2290      	movs	r2, #144	; 0x90
 800581a:	2100      	movs	r1, #0
 800581c:	5099      	str	r1, [r3, r2]
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800581e:	68fb      	ldr	r3, [r7, #12]
 8005820:	2288      	movs	r2, #136	; 0x88
 8005822:	2121      	movs	r1, #33	; 0x21
 8005824:	5099      	str	r1, [r3, r2]

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8005826:	f7fd fce3 	bl	80031f0 <HAL_GetTick>
 800582a:	0003      	movs	r3, r0
 800582c:	617b      	str	r3, [r7, #20]

    huart->TxXferSize  = Size;
 800582e:	68fb      	ldr	r3, [r7, #12]
 8005830:	1dba      	adds	r2, r7, #6
 8005832:	2154      	movs	r1, #84	; 0x54
 8005834:	8812      	ldrh	r2, [r2, #0]
 8005836:	525a      	strh	r2, [r3, r1]
    huart->TxXferCount = Size;
 8005838:	68fb      	ldr	r3, [r7, #12]
 800583a:	1dba      	adds	r2, r7, #6
 800583c:	2156      	movs	r1, #86	; 0x56
 800583e:	8812      	ldrh	r2, [r2, #0]
 8005840:	525a      	strh	r2, [r3, r1]

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005842:	68fb      	ldr	r3, [r7, #12]
 8005844:	689a      	ldr	r2, [r3, #8]
 8005846:	2380      	movs	r3, #128	; 0x80
 8005848:	015b      	lsls	r3, r3, #5
 800584a:	429a      	cmp	r2, r3
 800584c:	d108      	bne.n	8005860 <HAL_UART_Transmit+0x98>
 800584e:	68fb      	ldr	r3, [r7, #12]
 8005850:	691b      	ldr	r3, [r3, #16]
 8005852:	2b00      	cmp	r3, #0
 8005854:	d104      	bne.n	8005860 <HAL_UART_Transmit+0x98>
    {
      pdata8bits  = NULL;
 8005856:	2300      	movs	r3, #0
 8005858:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800585a:	68bb      	ldr	r3, [r7, #8]
 800585c:	61bb      	str	r3, [r7, #24]
 800585e:	e003      	b.n	8005868 <HAL_UART_Transmit+0xa0>
    }
    else
    {
      pdata8bits  = pData;
 8005860:	68bb      	ldr	r3, [r7, #8]
 8005862:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8005864:	2300      	movs	r3, #0
 8005866:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8005868:	e02c      	b.n	80058c4 <HAL_UART_Transmit+0xfc>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800586a:	697a      	ldr	r2, [r7, #20]
 800586c:	68f8      	ldr	r0, [r7, #12]
 800586e:	683b      	ldr	r3, [r7, #0]
 8005870:	9300      	str	r3, [sp, #0]
 8005872:	0013      	movs	r3, r2
 8005874:	2200      	movs	r2, #0
 8005876:	2180      	movs	r1, #128	; 0x80
 8005878:	f000 fd7c 	bl	8006374 <UART_WaitOnFlagUntilTimeout>
 800587c:	1e03      	subs	r3, r0, #0
 800587e:	d001      	beq.n	8005884 <HAL_UART_Transmit+0xbc>
      {
        return HAL_TIMEOUT;
 8005880:	2303      	movs	r3, #3
 8005882:	e039      	b.n	80058f8 <HAL_UART_Transmit+0x130>
      }
      if (pdata8bits == NULL)
 8005884:	69fb      	ldr	r3, [r7, #28]
 8005886:	2b00      	cmp	r3, #0
 8005888:	d10b      	bne.n	80058a2 <HAL_UART_Transmit+0xda>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 800588a:	69bb      	ldr	r3, [r7, #24]
 800588c:	881b      	ldrh	r3, [r3, #0]
 800588e:	001a      	movs	r2, r3
 8005890:	68fb      	ldr	r3, [r7, #12]
 8005892:	681b      	ldr	r3, [r3, #0]
 8005894:	05d2      	lsls	r2, r2, #23
 8005896:	0dd2      	lsrs	r2, r2, #23
 8005898:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 800589a:	69bb      	ldr	r3, [r7, #24]
 800589c:	3302      	adds	r3, #2
 800589e:	61bb      	str	r3, [r7, #24]
 80058a0:	e007      	b.n	80058b2 <HAL_UART_Transmit+0xea>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 80058a2:	69fb      	ldr	r3, [r7, #28]
 80058a4:	781a      	ldrb	r2, [r3, #0]
 80058a6:	68fb      	ldr	r3, [r7, #12]
 80058a8:	681b      	ldr	r3, [r3, #0]
 80058aa:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 80058ac:	69fb      	ldr	r3, [r7, #28]
 80058ae:	3301      	adds	r3, #1
 80058b0:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80058b2:	68fb      	ldr	r3, [r7, #12]
 80058b4:	2256      	movs	r2, #86	; 0x56
 80058b6:	5a9b      	ldrh	r3, [r3, r2]
 80058b8:	b29b      	uxth	r3, r3
 80058ba:	3b01      	subs	r3, #1
 80058bc:	b299      	uxth	r1, r3
 80058be:	68fb      	ldr	r3, [r7, #12]
 80058c0:	2256      	movs	r2, #86	; 0x56
 80058c2:	5299      	strh	r1, [r3, r2]
    while (huart->TxXferCount > 0U)
 80058c4:	68fb      	ldr	r3, [r7, #12]
 80058c6:	2256      	movs	r2, #86	; 0x56
 80058c8:	5a9b      	ldrh	r3, [r3, r2]
 80058ca:	b29b      	uxth	r3, r3
 80058cc:	2b00      	cmp	r3, #0
 80058ce:	d1cc      	bne.n	800586a <HAL_UART_Transmit+0xa2>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80058d0:	697a      	ldr	r2, [r7, #20]
 80058d2:	68f8      	ldr	r0, [r7, #12]
 80058d4:	683b      	ldr	r3, [r7, #0]
 80058d6:	9300      	str	r3, [sp, #0]
 80058d8:	0013      	movs	r3, r2
 80058da:	2200      	movs	r2, #0
 80058dc:	2140      	movs	r1, #64	; 0x40
 80058de:	f000 fd49 	bl	8006374 <UART_WaitOnFlagUntilTimeout>
 80058e2:	1e03      	subs	r3, r0, #0
 80058e4:	d001      	beq.n	80058ea <HAL_UART_Transmit+0x122>
    {
      return HAL_TIMEOUT;
 80058e6:	2303      	movs	r3, #3
 80058e8:	e006      	b.n	80058f8 <HAL_UART_Transmit+0x130>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80058ea:	68fb      	ldr	r3, [r7, #12]
 80058ec:	2288      	movs	r2, #136	; 0x88
 80058ee:	2120      	movs	r1, #32
 80058f0:	5099      	str	r1, [r3, r2]

    return HAL_OK;
 80058f2:	2300      	movs	r3, #0
 80058f4:	e000      	b.n	80058f8 <HAL_UART_Transmit+0x130>
  }
  else
  {
    return HAL_BUSY;
 80058f6:	2302      	movs	r3, #2
  }
}
 80058f8:	0018      	movs	r0, r3
 80058fa:	46bd      	mov	sp, r7
 80058fc:	b008      	add	sp, #32
 80058fe:	bd80      	pop	{r7, pc}

08005900 <HAL_UART_Receive>:
  * @param Size    Amount of data elements (u8 or u16) to be received.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005900:	b580      	push	{r7, lr}
 8005902:	b08a      	sub	sp, #40	; 0x28
 8005904:	af02      	add	r7, sp, #8
 8005906:	60f8      	str	r0, [r7, #12]
 8005908:	60b9      	str	r1, [r7, #8]
 800590a:	603b      	str	r3, [r7, #0]
 800590c:	1dbb      	adds	r3, r7, #6
 800590e:	801a      	strh	r2, [r3, #0]
  uint16_t *pdata16bits;
  uint16_t uhMask;
  uint32_t tickstart;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8005910:	68fb      	ldr	r3, [r7, #12]
 8005912:	228c      	movs	r2, #140	; 0x8c
 8005914:	589b      	ldr	r3, [r3, r2]
 8005916:	2b20      	cmp	r3, #32
 8005918:	d000      	beq.n	800591c <HAL_UART_Receive+0x1c>
 800591a:	e0cc      	b.n	8005ab6 <HAL_UART_Receive+0x1b6>
  {
    if ((pData == NULL) || (Size == 0U))
 800591c:	68bb      	ldr	r3, [r7, #8]
 800591e:	2b00      	cmp	r3, #0
 8005920:	d003      	beq.n	800592a <HAL_UART_Receive+0x2a>
 8005922:	1dbb      	adds	r3, r7, #6
 8005924:	881b      	ldrh	r3, [r3, #0]
 8005926:	2b00      	cmp	r3, #0
 8005928:	d101      	bne.n	800592e <HAL_UART_Receive+0x2e>
    {
      return  HAL_ERROR;
 800592a:	2301      	movs	r3, #1
 800592c:	e0c4      	b.n	8005ab8 <HAL_UART_Receive+0x1b8>
    }

    /* In case of 9bits/No Parity transfer, pData buffer provided as input parameter
       should be aligned on a u16 frontier, as data to be received from RDR will be
       handled through a u16 cast. */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800592e:	68fb      	ldr	r3, [r7, #12]
 8005930:	689a      	ldr	r2, [r3, #8]
 8005932:	2380      	movs	r3, #128	; 0x80
 8005934:	015b      	lsls	r3, r3, #5
 8005936:	429a      	cmp	r2, r3
 8005938:	d109      	bne.n	800594e <HAL_UART_Receive+0x4e>
 800593a:	68fb      	ldr	r3, [r7, #12]
 800593c:	691b      	ldr	r3, [r3, #16]
 800593e:	2b00      	cmp	r3, #0
 8005940:	d105      	bne.n	800594e <HAL_UART_Receive+0x4e>
    {
      if ((((uint32_t)pData) & 1U) != 0U)
 8005942:	68bb      	ldr	r3, [r7, #8]
 8005944:	2201      	movs	r2, #1
 8005946:	4013      	ands	r3, r2
 8005948:	d001      	beq.n	800594e <HAL_UART_Receive+0x4e>
      {
        return  HAL_ERROR;
 800594a:	2301      	movs	r3, #1
 800594c:	e0b4      	b.n	8005ab8 <HAL_UART_Receive+0x1b8>
      }
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800594e:	68fb      	ldr	r3, [r7, #12]
 8005950:	2290      	movs	r2, #144	; 0x90
 8005952:	2100      	movs	r1, #0
 8005954:	5099      	str	r1, [r3, r2]
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8005956:	68fb      	ldr	r3, [r7, #12]
 8005958:	228c      	movs	r2, #140	; 0x8c
 800595a:	2122      	movs	r1, #34	; 0x22
 800595c:	5099      	str	r1, [r3, r2]
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800595e:	68fb      	ldr	r3, [r7, #12]
 8005960:	2200      	movs	r2, #0
 8005962:	66da      	str	r2, [r3, #108]	; 0x6c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8005964:	f7fd fc44 	bl	80031f0 <HAL_GetTick>
 8005968:	0003      	movs	r3, r0
 800596a:	617b      	str	r3, [r7, #20]

    huart->RxXferSize  = Size;
 800596c:	68fb      	ldr	r3, [r7, #12]
 800596e:	1dba      	adds	r2, r7, #6
 8005970:	215c      	movs	r1, #92	; 0x5c
 8005972:	8812      	ldrh	r2, [r2, #0]
 8005974:	525a      	strh	r2, [r3, r1]
    huart->RxXferCount = Size;
 8005976:	68fb      	ldr	r3, [r7, #12]
 8005978:	1dba      	adds	r2, r7, #6
 800597a:	215e      	movs	r1, #94	; 0x5e
 800597c:	8812      	ldrh	r2, [r2, #0]
 800597e:	525a      	strh	r2, [r3, r1]

    /* Computation of UART mask to apply to RDR register */
    UART_MASK_COMPUTATION(huart);
 8005980:	68fb      	ldr	r3, [r7, #12]
 8005982:	689a      	ldr	r2, [r3, #8]
 8005984:	2380      	movs	r3, #128	; 0x80
 8005986:	015b      	lsls	r3, r3, #5
 8005988:	429a      	cmp	r2, r3
 800598a:	d10d      	bne.n	80059a8 <HAL_UART_Receive+0xa8>
 800598c:	68fb      	ldr	r3, [r7, #12]
 800598e:	691b      	ldr	r3, [r3, #16]
 8005990:	2b00      	cmp	r3, #0
 8005992:	d104      	bne.n	800599e <HAL_UART_Receive+0x9e>
 8005994:	68fb      	ldr	r3, [r7, #12]
 8005996:	2260      	movs	r2, #96	; 0x60
 8005998:	4949      	ldr	r1, [pc, #292]	; (8005ac0 <HAL_UART_Receive+0x1c0>)
 800599a:	5299      	strh	r1, [r3, r2]
 800599c:	e02e      	b.n	80059fc <HAL_UART_Receive+0xfc>
 800599e:	68fb      	ldr	r3, [r7, #12]
 80059a0:	2260      	movs	r2, #96	; 0x60
 80059a2:	21ff      	movs	r1, #255	; 0xff
 80059a4:	5299      	strh	r1, [r3, r2]
 80059a6:	e029      	b.n	80059fc <HAL_UART_Receive+0xfc>
 80059a8:	68fb      	ldr	r3, [r7, #12]
 80059aa:	689b      	ldr	r3, [r3, #8]
 80059ac:	2b00      	cmp	r3, #0
 80059ae:	d10d      	bne.n	80059cc <HAL_UART_Receive+0xcc>
 80059b0:	68fb      	ldr	r3, [r7, #12]
 80059b2:	691b      	ldr	r3, [r3, #16]
 80059b4:	2b00      	cmp	r3, #0
 80059b6:	d104      	bne.n	80059c2 <HAL_UART_Receive+0xc2>
 80059b8:	68fb      	ldr	r3, [r7, #12]
 80059ba:	2260      	movs	r2, #96	; 0x60
 80059bc:	21ff      	movs	r1, #255	; 0xff
 80059be:	5299      	strh	r1, [r3, r2]
 80059c0:	e01c      	b.n	80059fc <HAL_UART_Receive+0xfc>
 80059c2:	68fb      	ldr	r3, [r7, #12]
 80059c4:	2260      	movs	r2, #96	; 0x60
 80059c6:	217f      	movs	r1, #127	; 0x7f
 80059c8:	5299      	strh	r1, [r3, r2]
 80059ca:	e017      	b.n	80059fc <HAL_UART_Receive+0xfc>
 80059cc:	68fb      	ldr	r3, [r7, #12]
 80059ce:	689a      	ldr	r2, [r3, #8]
 80059d0:	2380      	movs	r3, #128	; 0x80
 80059d2:	055b      	lsls	r3, r3, #21
 80059d4:	429a      	cmp	r2, r3
 80059d6:	d10d      	bne.n	80059f4 <HAL_UART_Receive+0xf4>
 80059d8:	68fb      	ldr	r3, [r7, #12]
 80059da:	691b      	ldr	r3, [r3, #16]
 80059dc:	2b00      	cmp	r3, #0
 80059de:	d104      	bne.n	80059ea <HAL_UART_Receive+0xea>
 80059e0:	68fb      	ldr	r3, [r7, #12]
 80059e2:	2260      	movs	r2, #96	; 0x60
 80059e4:	217f      	movs	r1, #127	; 0x7f
 80059e6:	5299      	strh	r1, [r3, r2]
 80059e8:	e008      	b.n	80059fc <HAL_UART_Receive+0xfc>
 80059ea:	68fb      	ldr	r3, [r7, #12]
 80059ec:	2260      	movs	r2, #96	; 0x60
 80059ee:	213f      	movs	r1, #63	; 0x3f
 80059f0:	5299      	strh	r1, [r3, r2]
 80059f2:	e003      	b.n	80059fc <HAL_UART_Receive+0xfc>
 80059f4:	68fb      	ldr	r3, [r7, #12]
 80059f6:	2260      	movs	r2, #96	; 0x60
 80059f8:	2100      	movs	r1, #0
 80059fa:	5299      	strh	r1, [r3, r2]
    uhMask = huart->Mask;
 80059fc:	2312      	movs	r3, #18
 80059fe:	18fb      	adds	r3, r7, r3
 8005a00:	68fa      	ldr	r2, [r7, #12]
 8005a02:	2160      	movs	r1, #96	; 0x60
 8005a04:	5a52      	ldrh	r2, [r2, r1]
 8005a06:	801a      	strh	r2, [r3, #0]

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005a08:	68fb      	ldr	r3, [r7, #12]
 8005a0a:	689a      	ldr	r2, [r3, #8]
 8005a0c:	2380      	movs	r3, #128	; 0x80
 8005a0e:	015b      	lsls	r3, r3, #5
 8005a10:	429a      	cmp	r2, r3
 8005a12:	d108      	bne.n	8005a26 <HAL_UART_Receive+0x126>
 8005a14:	68fb      	ldr	r3, [r7, #12]
 8005a16:	691b      	ldr	r3, [r3, #16]
 8005a18:	2b00      	cmp	r3, #0
 8005a1a:	d104      	bne.n	8005a26 <HAL_UART_Receive+0x126>
    {
      pdata8bits  = NULL;
 8005a1c:	2300      	movs	r3, #0
 8005a1e:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8005a20:	68bb      	ldr	r3, [r7, #8]
 8005a22:	61bb      	str	r3, [r7, #24]
 8005a24:	e003      	b.n	8005a2e <HAL_UART_Receive+0x12e>
    }
    else
    {
      pdata8bits  = pData;
 8005a26:	68bb      	ldr	r3, [r7, #8]
 8005a28:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8005a2a:	2300      	movs	r3, #0
 8005a2c:	61bb      	str	r3, [r7, #24]
    }

    /* as long as data have to be received */
    while (huart->RxXferCount > 0U)
 8005a2e:	e036      	b.n	8005a9e <HAL_UART_Receive+0x19e>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 8005a30:	697a      	ldr	r2, [r7, #20]
 8005a32:	68f8      	ldr	r0, [r7, #12]
 8005a34:	683b      	ldr	r3, [r7, #0]
 8005a36:	9300      	str	r3, [sp, #0]
 8005a38:	0013      	movs	r3, r2
 8005a3a:	2200      	movs	r2, #0
 8005a3c:	2120      	movs	r1, #32
 8005a3e:	f000 fc99 	bl	8006374 <UART_WaitOnFlagUntilTimeout>
 8005a42:	1e03      	subs	r3, r0, #0
 8005a44:	d001      	beq.n	8005a4a <HAL_UART_Receive+0x14a>
      {
        return HAL_TIMEOUT;
 8005a46:	2303      	movs	r3, #3
 8005a48:	e036      	b.n	8005ab8 <HAL_UART_Receive+0x1b8>
      }
      if (pdata8bits == NULL)
 8005a4a:	69fb      	ldr	r3, [r7, #28]
 8005a4c:	2b00      	cmp	r3, #0
 8005a4e:	d10e      	bne.n	8005a6e <HAL_UART_Receive+0x16e>
      {
        *pdata16bits = (uint16_t)(huart->Instance->RDR & uhMask);
 8005a50:	68fb      	ldr	r3, [r7, #12]
 8005a52:	681b      	ldr	r3, [r3, #0]
 8005a54:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005a56:	b29b      	uxth	r3, r3
 8005a58:	2212      	movs	r2, #18
 8005a5a:	18ba      	adds	r2, r7, r2
 8005a5c:	8812      	ldrh	r2, [r2, #0]
 8005a5e:	4013      	ands	r3, r2
 8005a60:	b29a      	uxth	r2, r3
 8005a62:	69bb      	ldr	r3, [r7, #24]
 8005a64:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 8005a66:	69bb      	ldr	r3, [r7, #24]
 8005a68:	3302      	adds	r3, #2
 8005a6a:	61bb      	str	r3, [r7, #24]
 8005a6c:	e00e      	b.n	8005a8c <HAL_UART_Receive+0x18c>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->RDR & (uint8_t)uhMask);
 8005a6e:	68fb      	ldr	r3, [r7, #12]
 8005a70:	681b      	ldr	r3, [r3, #0]
 8005a72:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005a74:	b2db      	uxtb	r3, r3
 8005a76:	2212      	movs	r2, #18
 8005a78:	18ba      	adds	r2, r7, r2
 8005a7a:	8812      	ldrh	r2, [r2, #0]
 8005a7c:	b2d2      	uxtb	r2, r2
 8005a7e:	4013      	ands	r3, r2
 8005a80:	b2da      	uxtb	r2, r3
 8005a82:	69fb      	ldr	r3, [r7, #28]
 8005a84:	701a      	strb	r2, [r3, #0]
        pdata8bits++;
 8005a86:	69fb      	ldr	r3, [r7, #28]
 8005a88:	3301      	adds	r3, #1
 8005a8a:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 8005a8c:	68fb      	ldr	r3, [r7, #12]
 8005a8e:	225e      	movs	r2, #94	; 0x5e
 8005a90:	5a9b      	ldrh	r3, [r3, r2]
 8005a92:	b29b      	uxth	r3, r3
 8005a94:	3b01      	subs	r3, #1
 8005a96:	b299      	uxth	r1, r3
 8005a98:	68fb      	ldr	r3, [r7, #12]
 8005a9a:	225e      	movs	r2, #94	; 0x5e
 8005a9c:	5299      	strh	r1, [r3, r2]
    while (huart->RxXferCount > 0U)
 8005a9e:	68fb      	ldr	r3, [r7, #12]
 8005aa0:	225e      	movs	r2, #94	; 0x5e
 8005aa2:	5a9b      	ldrh	r3, [r3, r2]
 8005aa4:	b29b      	uxth	r3, r3
 8005aa6:	2b00      	cmp	r3, #0
 8005aa8:	d1c2      	bne.n	8005a30 <HAL_UART_Receive+0x130>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8005aaa:	68fb      	ldr	r3, [r7, #12]
 8005aac:	228c      	movs	r2, #140	; 0x8c
 8005aae:	2120      	movs	r1, #32
 8005ab0:	5099      	str	r1, [r3, r2]

    return HAL_OK;
 8005ab2:	2300      	movs	r3, #0
 8005ab4:	e000      	b.n	8005ab8 <HAL_UART_Receive+0x1b8>
  }
  else
  {
    return HAL_BUSY;
 8005ab6:	2302      	movs	r3, #2
  }
}
 8005ab8:	0018      	movs	r0, r3
 8005aba:	46bd      	mov	sp, r7
 8005abc:	b008      	add	sp, #32
 8005abe:	bd80      	pop	{r7, pc}
 8005ac0:	000001ff 	.word	0x000001ff

08005ac4 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8005ac4:	b5b0      	push	{r4, r5, r7, lr}
 8005ac6:	b090      	sub	sp, #64	; 0x40
 8005ac8:	af00      	add	r7, sp, #0
 8005aca:	6278      	str	r0, [r7, #36]	; 0x24
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8005acc:	231a      	movs	r3, #26
 8005ace:	2220      	movs	r2, #32
 8005ad0:	189b      	adds	r3, r3, r2
 8005ad2:	19db      	adds	r3, r3, r7
 8005ad4:	2200      	movs	r2, #0
 8005ad6:	701a      	strb	r2, [r3, #0]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8005ad8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005ada:	689a      	ldr	r2, [r3, #8]
 8005adc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005ade:	691b      	ldr	r3, [r3, #16]
 8005ae0:	431a      	orrs	r2, r3
 8005ae2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005ae4:	695b      	ldr	r3, [r3, #20]
 8005ae6:	431a      	orrs	r2, r3
 8005ae8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005aea:	69db      	ldr	r3, [r3, #28]
 8005aec:	4313      	orrs	r3, r2
 8005aee:	63fb      	str	r3, [r7, #60]	; 0x3c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8005af0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005af2:	681b      	ldr	r3, [r3, #0]
 8005af4:	681b      	ldr	r3, [r3, #0]
 8005af6:	4ac1      	ldr	r2, [pc, #772]	; (8005dfc <UART_SetConfig+0x338>)
 8005af8:	4013      	ands	r3, r2
 8005afa:	0019      	movs	r1, r3
 8005afc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005afe:	681a      	ldr	r2, [r3, #0]
 8005b00:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005b02:	430b      	orrs	r3, r1
 8005b04:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8005b06:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005b08:	681b      	ldr	r3, [r3, #0]
 8005b0a:	685b      	ldr	r3, [r3, #4]
 8005b0c:	4abc      	ldr	r2, [pc, #752]	; (8005e00 <UART_SetConfig+0x33c>)
 8005b0e:	4013      	ands	r3, r2
 8005b10:	0018      	movs	r0, r3
 8005b12:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005b14:	68d9      	ldr	r1, [r3, #12]
 8005b16:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005b18:	681a      	ldr	r2, [r3, #0]
 8005b1a:	0003      	movs	r3, r0
 8005b1c:	430b      	orrs	r3, r1
 8005b1e:	6053      	str	r3, [r2, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8005b20:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005b22:	699b      	ldr	r3, [r3, #24]
 8005b24:	63fb      	str	r3, [r7, #60]	; 0x3c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8005b26:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005b28:	681b      	ldr	r3, [r3, #0]
 8005b2a:	4ab6      	ldr	r2, [pc, #728]	; (8005e04 <UART_SetConfig+0x340>)
 8005b2c:	4293      	cmp	r3, r2
 8005b2e:	d009      	beq.n	8005b44 <UART_SetConfig+0x80>
 8005b30:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005b32:	681b      	ldr	r3, [r3, #0]
 8005b34:	4ab4      	ldr	r2, [pc, #720]	; (8005e08 <UART_SetConfig+0x344>)
 8005b36:	4293      	cmp	r3, r2
 8005b38:	d004      	beq.n	8005b44 <UART_SetConfig+0x80>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8005b3a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005b3c:	6a1b      	ldr	r3, [r3, #32]
 8005b3e:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8005b40:	4313      	orrs	r3, r2
 8005b42:	63fb      	str	r3, [r7, #60]	; 0x3c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8005b44:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005b46:	681b      	ldr	r3, [r3, #0]
 8005b48:	689b      	ldr	r3, [r3, #8]
 8005b4a:	4ab0      	ldr	r2, [pc, #704]	; (8005e0c <UART_SetConfig+0x348>)
 8005b4c:	4013      	ands	r3, r2
 8005b4e:	0019      	movs	r1, r3
 8005b50:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005b52:	681a      	ldr	r2, [r3, #0]
 8005b54:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005b56:	430b      	orrs	r3, r1
 8005b58:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8005b5a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005b5c:	681b      	ldr	r3, [r3, #0]
 8005b5e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005b60:	220f      	movs	r2, #15
 8005b62:	4393      	bics	r3, r2
 8005b64:	0018      	movs	r0, r3
 8005b66:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005b68:	6a59      	ldr	r1, [r3, #36]	; 0x24
 8005b6a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005b6c:	681a      	ldr	r2, [r3, #0]
 8005b6e:	0003      	movs	r3, r0
 8005b70:	430b      	orrs	r3, r1
 8005b72:	62d3      	str	r3, [r2, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8005b74:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005b76:	681b      	ldr	r3, [r3, #0]
 8005b78:	4aa5      	ldr	r2, [pc, #660]	; (8005e10 <UART_SetConfig+0x34c>)
 8005b7a:	4293      	cmp	r3, r2
 8005b7c:	d131      	bne.n	8005be2 <UART_SetConfig+0x11e>
 8005b7e:	4ba5      	ldr	r3, [pc, #660]	; (8005e14 <UART_SetConfig+0x350>)
 8005b80:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005b82:	2203      	movs	r2, #3
 8005b84:	4013      	ands	r3, r2
 8005b86:	2b03      	cmp	r3, #3
 8005b88:	d01d      	beq.n	8005bc6 <UART_SetConfig+0x102>
 8005b8a:	d823      	bhi.n	8005bd4 <UART_SetConfig+0x110>
 8005b8c:	2b02      	cmp	r3, #2
 8005b8e:	d00c      	beq.n	8005baa <UART_SetConfig+0xe6>
 8005b90:	d820      	bhi.n	8005bd4 <UART_SetConfig+0x110>
 8005b92:	2b00      	cmp	r3, #0
 8005b94:	d002      	beq.n	8005b9c <UART_SetConfig+0xd8>
 8005b96:	2b01      	cmp	r3, #1
 8005b98:	d00e      	beq.n	8005bb8 <UART_SetConfig+0xf4>
 8005b9a:	e01b      	b.n	8005bd4 <UART_SetConfig+0x110>
 8005b9c:	231b      	movs	r3, #27
 8005b9e:	2220      	movs	r2, #32
 8005ba0:	189b      	adds	r3, r3, r2
 8005ba2:	19db      	adds	r3, r3, r7
 8005ba4:	2200      	movs	r2, #0
 8005ba6:	701a      	strb	r2, [r3, #0]
 8005ba8:	e154      	b.n	8005e54 <UART_SetConfig+0x390>
 8005baa:	231b      	movs	r3, #27
 8005bac:	2220      	movs	r2, #32
 8005bae:	189b      	adds	r3, r3, r2
 8005bb0:	19db      	adds	r3, r3, r7
 8005bb2:	2202      	movs	r2, #2
 8005bb4:	701a      	strb	r2, [r3, #0]
 8005bb6:	e14d      	b.n	8005e54 <UART_SetConfig+0x390>
 8005bb8:	231b      	movs	r3, #27
 8005bba:	2220      	movs	r2, #32
 8005bbc:	189b      	adds	r3, r3, r2
 8005bbe:	19db      	adds	r3, r3, r7
 8005bc0:	2204      	movs	r2, #4
 8005bc2:	701a      	strb	r2, [r3, #0]
 8005bc4:	e146      	b.n	8005e54 <UART_SetConfig+0x390>
 8005bc6:	231b      	movs	r3, #27
 8005bc8:	2220      	movs	r2, #32
 8005bca:	189b      	adds	r3, r3, r2
 8005bcc:	19db      	adds	r3, r3, r7
 8005bce:	2208      	movs	r2, #8
 8005bd0:	701a      	strb	r2, [r3, #0]
 8005bd2:	e13f      	b.n	8005e54 <UART_SetConfig+0x390>
 8005bd4:	231b      	movs	r3, #27
 8005bd6:	2220      	movs	r2, #32
 8005bd8:	189b      	adds	r3, r3, r2
 8005bda:	19db      	adds	r3, r3, r7
 8005bdc:	2210      	movs	r2, #16
 8005bde:	701a      	strb	r2, [r3, #0]
 8005be0:	e138      	b.n	8005e54 <UART_SetConfig+0x390>
 8005be2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005be4:	681b      	ldr	r3, [r3, #0]
 8005be6:	4a8c      	ldr	r2, [pc, #560]	; (8005e18 <UART_SetConfig+0x354>)
 8005be8:	4293      	cmp	r3, r2
 8005bea:	d131      	bne.n	8005c50 <UART_SetConfig+0x18c>
 8005bec:	4b89      	ldr	r3, [pc, #548]	; (8005e14 <UART_SetConfig+0x350>)
 8005bee:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005bf0:	220c      	movs	r2, #12
 8005bf2:	4013      	ands	r3, r2
 8005bf4:	2b0c      	cmp	r3, #12
 8005bf6:	d01d      	beq.n	8005c34 <UART_SetConfig+0x170>
 8005bf8:	d823      	bhi.n	8005c42 <UART_SetConfig+0x17e>
 8005bfa:	2b08      	cmp	r3, #8
 8005bfc:	d00c      	beq.n	8005c18 <UART_SetConfig+0x154>
 8005bfe:	d820      	bhi.n	8005c42 <UART_SetConfig+0x17e>
 8005c00:	2b00      	cmp	r3, #0
 8005c02:	d002      	beq.n	8005c0a <UART_SetConfig+0x146>
 8005c04:	2b04      	cmp	r3, #4
 8005c06:	d00e      	beq.n	8005c26 <UART_SetConfig+0x162>
 8005c08:	e01b      	b.n	8005c42 <UART_SetConfig+0x17e>
 8005c0a:	231b      	movs	r3, #27
 8005c0c:	2220      	movs	r2, #32
 8005c0e:	189b      	adds	r3, r3, r2
 8005c10:	19db      	adds	r3, r3, r7
 8005c12:	2200      	movs	r2, #0
 8005c14:	701a      	strb	r2, [r3, #0]
 8005c16:	e11d      	b.n	8005e54 <UART_SetConfig+0x390>
 8005c18:	231b      	movs	r3, #27
 8005c1a:	2220      	movs	r2, #32
 8005c1c:	189b      	adds	r3, r3, r2
 8005c1e:	19db      	adds	r3, r3, r7
 8005c20:	2202      	movs	r2, #2
 8005c22:	701a      	strb	r2, [r3, #0]
 8005c24:	e116      	b.n	8005e54 <UART_SetConfig+0x390>
 8005c26:	231b      	movs	r3, #27
 8005c28:	2220      	movs	r2, #32
 8005c2a:	189b      	adds	r3, r3, r2
 8005c2c:	19db      	adds	r3, r3, r7
 8005c2e:	2204      	movs	r2, #4
 8005c30:	701a      	strb	r2, [r3, #0]
 8005c32:	e10f      	b.n	8005e54 <UART_SetConfig+0x390>
 8005c34:	231b      	movs	r3, #27
 8005c36:	2220      	movs	r2, #32
 8005c38:	189b      	adds	r3, r3, r2
 8005c3a:	19db      	adds	r3, r3, r7
 8005c3c:	2208      	movs	r2, #8
 8005c3e:	701a      	strb	r2, [r3, #0]
 8005c40:	e108      	b.n	8005e54 <UART_SetConfig+0x390>
 8005c42:	231b      	movs	r3, #27
 8005c44:	2220      	movs	r2, #32
 8005c46:	189b      	adds	r3, r3, r2
 8005c48:	19db      	adds	r3, r3, r7
 8005c4a:	2210      	movs	r2, #16
 8005c4c:	701a      	strb	r2, [r3, #0]
 8005c4e:	e101      	b.n	8005e54 <UART_SetConfig+0x390>
 8005c50:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005c52:	681b      	ldr	r3, [r3, #0]
 8005c54:	4a71      	ldr	r2, [pc, #452]	; (8005e1c <UART_SetConfig+0x358>)
 8005c56:	4293      	cmp	r3, r2
 8005c58:	d131      	bne.n	8005cbe <UART_SetConfig+0x1fa>
 8005c5a:	4b6e      	ldr	r3, [pc, #440]	; (8005e14 <UART_SetConfig+0x350>)
 8005c5c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005c5e:	2230      	movs	r2, #48	; 0x30
 8005c60:	4013      	ands	r3, r2
 8005c62:	2b30      	cmp	r3, #48	; 0x30
 8005c64:	d01d      	beq.n	8005ca2 <UART_SetConfig+0x1de>
 8005c66:	d823      	bhi.n	8005cb0 <UART_SetConfig+0x1ec>
 8005c68:	2b20      	cmp	r3, #32
 8005c6a:	d00c      	beq.n	8005c86 <UART_SetConfig+0x1c2>
 8005c6c:	d820      	bhi.n	8005cb0 <UART_SetConfig+0x1ec>
 8005c6e:	2b00      	cmp	r3, #0
 8005c70:	d002      	beq.n	8005c78 <UART_SetConfig+0x1b4>
 8005c72:	2b10      	cmp	r3, #16
 8005c74:	d00e      	beq.n	8005c94 <UART_SetConfig+0x1d0>
 8005c76:	e01b      	b.n	8005cb0 <UART_SetConfig+0x1ec>
 8005c78:	231b      	movs	r3, #27
 8005c7a:	2220      	movs	r2, #32
 8005c7c:	189b      	adds	r3, r3, r2
 8005c7e:	19db      	adds	r3, r3, r7
 8005c80:	2200      	movs	r2, #0
 8005c82:	701a      	strb	r2, [r3, #0]
 8005c84:	e0e6      	b.n	8005e54 <UART_SetConfig+0x390>
 8005c86:	231b      	movs	r3, #27
 8005c88:	2220      	movs	r2, #32
 8005c8a:	189b      	adds	r3, r3, r2
 8005c8c:	19db      	adds	r3, r3, r7
 8005c8e:	2202      	movs	r2, #2
 8005c90:	701a      	strb	r2, [r3, #0]
 8005c92:	e0df      	b.n	8005e54 <UART_SetConfig+0x390>
 8005c94:	231b      	movs	r3, #27
 8005c96:	2220      	movs	r2, #32
 8005c98:	189b      	adds	r3, r3, r2
 8005c9a:	19db      	adds	r3, r3, r7
 8005c9c:	2204      	movs	r2, #4
 8005c9e:	701a      	strb	r2, [r3, #0]
 8005ca0:	e0d8      	b.n	8005e54 <UART_SetConfig+0x390>
 8005ca2:	231b      	movs	r3, #27
 8005ca4:	2220      	movs	r2, #32
 8005ca6:	189b      	adds	r3, r3, r2
 8005ca8:	19db      	adds	r3, r3, r7
 8005caa:	2208      	movs	r2, #8
 8005cac:	701a      	strb	r2, [r3, #0]
 8005cae:	e0d1      	b.n	8005e54 <UART_SetConfig+0x390>
 8005cb0:	231b      	movs	r3, #27
 8005cb2:	2220      	movs	r2, #32
 8005cb4:	189b      	adds	r3, r3, r2
 8005cb6:	19db      	adds	r3, r3, r7
 8005cb8:	2210      	movs	r2, #16
 8005cba:	701a      	strb	r2, [r3, #0]
 8005cbc:	e0ca      	b.n	8005e54 <UART_SetConfig+0x390>
 8005cbe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005cc0:	681b      	ldr	r3, [r3, #0]
 8005cc2:	4a57      	ldr	r2, [pc, #348]	; (8005e20 <UART_SetConfig+0x35c>)
 8005cc4:	4293      	cmp	r3, r2
 8005cc6:	d106      	bne.n	8005cd6 <UART_SetConfig+0x212>
 8005cc8:	231b      	movs	r3, #27
 8005cca:	2220      	movs	r2, #32
 8005ccc:	189b      	adds	r3, r3, r2
 8005cce:	19db      	adds	r3, r3, r7
 8005cd0:	2200      	movs	r2, #0
 8005cd2:	701a      	strb	r2, [r3, #0]
 8005cd4:	e0be      	b.n	8005e54 <UART_SetConfig+0x390>
 8005cd6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005cd8:	681b      	ldr	r3, [r3, #0]
 8005cda:	4a52      	ldr	r2, [pc, #328]	; (8005e24 <UART_SetConfig+0x360>)
 8005cdc:	4293      	cmp	r3, r2
 8005cde:	d106      	bne.n	8005cee <UART_SetConfig+0x22a>
 8005ce0:	231b      	movs	r3, #27
 8005ce2:	2220      	movs	r2, #32
 8005ce4:	189b      	adds	r3, r3, r2
 8005ce6:	19db      	adds	r3, r3, r7
 8005ce8:	2200      	movs	r2, #0
 8005cea:	701a      	strb	r2, [r3, #0]
 8005cec:	e0b2      	b.n	8005e54 <UART_SetConfig+0x390>
 8005cee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005cf0:	681b      	ldr	r3, [r3, #0]
 8005cf2:	4a4d      	ldr	r2, [pc, #308]	; (8005e28 <UART_SetConfig+0x364>)
 8005cf4:	4293      	cmp	r3, r2
 8005cf6:	d106      	bne.n	8005d06 <UART_SetConfig+0x242>
 8005cf8:	231b      	movs	r3, #27
 8005cfa:	2220      	movs	r2, #32
 8005cfc:	189b      	adds	r3, r3, r2
 8005cfe:	19db      	adds	r3, r3, r7
 8005d00:	2200      	movs	r2, #0
 8005d02:	701a      	strb	r2, [r3, #0]
 8005d04:	e0a6      	b.n	8005e54 <UART_SetConfig+0x390>
 8005d06:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005d08:	681b      	ldr	r3, [r3, #0]
 8005d0a:	4a3e      	ldr	r2, [pc, #248]	; (8005e04 <UART_SetConfig+0x340>)
 8005d0c:	4293      	cmp	r3, r2
 8005d0e:	d13e      	bne.n	8005d8e <UART_SetConfig+0x2ca>
 8005d10:	4b40      	ldr	r3, [pc, #256]	; (8005e14 <UART_SetConfig+0x350>)
 8005d12:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8005d14:	23c0      	movs	r3, #192	; 0xc0
 8005d16:	011b      	lsls	r3, r3, #4
 8005d18:	4013      	ands	r3, r2
 8005d1a:	22c0      	movs	r2, #192	; 0xc0
 8005d1c:	0112      	lsls	r2, r2, #4
 8005d1e:	4293      	cmp	r3, r2
 8005d20:	d027      	beq.n	8005d72 <UART_SetConfig+0x2ae>
 8005d22:	22c0      	movs	r2, #192	; 0xc0
 8005d24:	0112      	lsls	r2, r2, #4
 8005d26:	4293      	cmp	r3, r2
 8005d28:	d82a      	bhi.n	8005d80 <UART_SetConfig+0x2bc>
 8005d2a:	2280      	movs	r2, #128	; 0x80
 8005d2c:	0112      	lsls	r2, r2, #4
 8005d2e:	4293      	cmp	r3, r2
 8005d30:	d011      	beq.n	8005d56 <UART_SetConfig+0x292>
 8005d32:	2280      	movs	r2, #128	; 0x80
 8005d34:	0112      	lsls	r2, r2, #4
 8005d36:	4293      	cmp	r3, r2
 8005d38:	d822      	bhi.n	8005d80 <UART_SetConfig+0x2bc>
 8005d3a:	2b00      	cmp	r3, #0
 8005d3c:	d004      	beq.n	8005d48 <UART_SetConfig+0x284>
 8005d3e:	2280      	movs	r2, #128	; 0x80
 8005d40:	00d2      	lsls	r2, r2, #3
 8005d42:	4293      	cmp	r3, r2
 8005d44:	d00e      	beq.n	8005d64 <UART_SetConfig+0x2a0>
 8005d46:	e01b      	b.n	8005d80 <UART_SetConfig+0x2bc>
 8005d48:	231b      	movs	r3, #27
 8005d4a:	2220      	movs	r2, #32
 8005d4c:	189b      	adds	r3, r3, r2
 8005d4e:	19db      	adds	r3, r3, r7
 8005d50:	2200      	movs	r2, #0
 8005d52:	701a      	strb	r2, [r3, #0]
 8005d54:	e07e      	b.n	8005e54 <UART_SetConfig+0x390>
 8005d56:	231b      	movs	r3, #27
 8005d58:	2220      	movs	r2, #32
 8005d5a:	189b      	adds	r3, r3, r2
 8005d5c:	19db      	adds	r3, r3, r7
 8005d5e:	2202      	movs	r2, #2
 8005d60:	701a      	strb	r2, [r3, #0]
 8005d62:	e077      	b.n	8005e54 <UART_SetConfig+0x390>
 8005d64:	231b      	movs	r3, #27
 8005d66:	2220      	movs	r2, #32
 8005d68:	189b      	adds	r3, r3, r2
 8005d6a:	19db      	adds	r3, r3, r7
 8005d6c:	2204      	movs	r2, #4
 8005d6e:	701a      	strb	r2, [r3, #0]
 8005d70:	e070      	b.n	8005e54 <UART_SetConfig+0x390>
 8005d72:	231b      	movs	r3, #27
 8005d74:	2220      	movs	r2, #32
 8005d76:	189b      	adds	r3, r3, r2
 8005d78:	19db      	adds	r3, r3, r7
 8005d7a:	2208      	movs	r2, #8
 8005d7c:	701a      	strb	r2, [r3, #0]
 8005d7e:	e069      	b.n	8005e54 <UART_SetConfig+0x390>
 8005d80:	231b      	movs	r3, #27
 8005d82:	2220      	movs	r2, #32
 8005d84:	189b      	adds	r3, r3, r2
 8005d86:	19db      	adds	r3, r3, r7
 8005d88:	2210      	movs	r2, #16
 8005d8a:	701a      	strb	r2, [r3, #0]
 8005d8c:	e062      	b.n	8005e54 <UART_SetConfig+0x390>
 8005d8e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005d90:	681b      	ldr	r3, [r3, #0]
 8005d92:	4a1d      	ldr	r2, [pc, #116]	; (8005e08 <UART_SetConfig+0x344>)
 8005d94:	4293      	cmp	r3, r2
 8005d96:	d157      	bne.n	8005e48 <UART_SetConfig+0x384>
 8005d98:	4b1e      	ldr	r3, [pc, #120]	; (8005e14 <UART_SetConfig+0x350>)
 8005d9a:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8005d9c:	23c0      	movs	r3, #192	; 0xc0
 8005d9e:	009b      	lsls	r3, r3, #2
 8005da0:	4013      	ands	r3, r2
 8005da2:	22c0      	movs	r2, #192	; 0xc0
 8005da4:	0092      	lsls	r2, r2, #2
 8005da6:	4293      	cmp	r3, r2
 8005da8:	d040      	beq.n	8005e2c <UART_SetConfig+0x368>
 8005daa:	22c0      	movs	r2, #192	; 0xc0
 8005dac:	0092      	lsls	r2, r2, #2
 8005dae:	4293      	cmp	r3, r2
 8005db0:	d843      	bhi.n	8005e3a <UART_SetConfig+0x376>
 8005db2:	2280      	movs	r2, #128	; 0x80
 8005db4:	0092      	lsls	r2, r2, #2
 8005db6:	4293      	cmp	r3, r2
 8005db8:	d011      	beq.n	8005dde <UART_SetConfig+0x31a>
 8005dba:	2280      	movs	r2, #128	; 0x80
 8005dbc:	0092      	lsls	r2, r2, #2
 8005dbe:	4293      	cmp	r3, r2
 8005dc0:	d83b      	bhi.n	8005e3a <UART_SetConfig+0x376>
 8005dc2:	2b00      	cmp	r3, #0
 8005dc4:	d004      	beq.n	8005dd0 <UART_SetConfig+0x30c>
 8005dc6:	2280      	movs	r2, #128	; 0x80
 8005dc8:	0052      	lsls	r2, r2, #1
 8005dca:	4293      	cmp	r3, r2
 8005dcc:	d00e      	beq.n	8005dec <UART_SetConfig+0x328>
 8005dce:	e034      	b.n	8005e3a <UART_SetConfig+0x376>
 8005dd0:	231b      	movs	r3, #27
 8005dd2:	2220      	movs	r2, #32
 8005dd4:	189b      	adds	r3, r3, r2
 8005dd6:	19db      	adds	r3, r3, r7
 8005dd8:	2200      	movs	r2, #0
 8005dda:	701a      	strb	r2, [r3, #0]
 8005ddc:	e03a      	b.n	8005e54 <UART_SetConfig+0x390>
 8005dde:	231b      	movs	r3, #27
 8005de0:	2220      	movs	r2, #32
 8005de2:	189b      	adds	r3, r3, r2
 8005de4:	19db      	adds	r3, r3, r7
 8005de6:	2202      	movs	r2, #2
 8005de8:	701a      	strb	r2, [r3, #0]
 8005dea:	e033      	b.n	8005e54 <UART_SetConfig+0x390>
 8005dec:	231b      	movs	r3, #27
 8005dee:	2220      	movs	r2, #32
 8005df0:	189b      	adds	r3, r3, r2
 8005df2:	19db      	adds	r3, r3, r7
 8005df4:	2204      	movs	r2, #4
 8005df6:	701a      	strb	r2, [r3, #0]
 8005df8:	e02c      	b.n	8005e54 <UART_SetConfig+0x390>
 8005dfa:	46c0      	nop			; (mov r8, r8)
 8005dfc:	cfff69f3 	.word	0xcfff69f3
 8005e00:	ffffcfff 	.word	0xffffcfff
 8005e04:	40008000 	.word	0x40008000
 8005e08:	40008400 	.word	0x40008400
 8005e0c:	11fff4ff 	.word	0x11fff4ff
 8005e10:	40013800 	.word	0x40013800
 8005e14:	40021000 	.word	0x40021000
 8005e18:	40004400 	.word	0x40004400
 8005e1c:	40004800 	.word	0x40004800
 8005e20:	40004c00 	.word	0x40004c00
 8005e24:	40005000 	.word	0x40005000
 8005e28:	40013c00 	.word	0x40013c00
 8005e2c:	231b      	movs	r3, #27
 8005e2e:	2220      	movs	r2, #32
 8005e30:	189b      	adds	r3, r3, r2
 8005e32:	19db      	adds	r3, r3, r7
 8005e34:	2208      	movs	r2, #8
 8005e36:	701a      	strb	r2, [r3, #0]
 8005e38:	e00c      	b.n	8005e54 <UART_SetConfig+0x390>
 8005e3a:	231b      	movs	r3, #27
 8005e3c:	2220      	movs	r2, #32
 8005e3e:	189b      	adds	r3, r3, r2
 8005e40:	19db      	adds	r3, r3, r7
 8005e42:	2210      	movs	r2, #16
 8005e44:	701a      	strb	r2, [r3, #0]
 8005e46:	e005      	b.n	8005e54 <UART_SetConfig+0x390>
 8005e48:	231b      	movs	r3, #27
 8005e4a:	2220      	movs	r2, #32
 8005e4c:	189b      	adds	r3, r3, r2
 8005e4e:	19db      	adds	r3, r3, r7
 8005e50:	2210      	movs	r2, #16
 8005e52:	701a      	strb	r2, [r3, #0]

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8005e54:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005e56:	681b      	ldr	r3, [r3, #0]
 8005e58:	4ac1      	ldr	r2, [pc, #772]	; (8006160 <UART_SetConfig+0x69c>)
 8005e5a:	4293      	cmp	r3, r2
 8005e5c:	d005      	beq.n	8005e6a <UART_SetConfig+0x3a6>
 8005e5e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005e60:	681b      	ldr	r3, [r3, #0]
 8005e62:	4ac0      	ldr	r2, [pc, #768]	; (8006164 <UART_SetConfig+0x6a0>)
 8005e64:	4293      	cmp	r3, r2
 8005e66:	d000      	beq.n	8005e6a <UART_SetConfig+0x3a6>
 8005e68:	e093      	b.n	8005f92 <UART_SetConfig+0x4ce>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8005e6a:	231b      	movs	r3, #27
 8005e6c:	2220      	movs	r2, #32
 8005e6e:	189b      	adds	r3, r3, r2
 8005e70:	19db      	adds	r3, r3, r7
 8005e72:	781b      	ldrb	r3, [r3, #0]
 8005e74:	2b08      	cmp	r3, #8
 8005e76:	d015      	beq.n	8005ea4 <UART_SetConfig+0x3e0>
 8005e78:	dc18      	bgt.n	8005eac <UART_SetConfig+0x3e8>
 8005e7a:	2b04      	cmp	r3, #4
 8005e7c:	d00d      	beq.n	8005e9a <UART_SetConfig+0x3d6>
 8005e7e:	dc15      	bgt.n	8005eac <UART_SetConfig+0x3e8>
 8005e80:	2b00      	cmp	r3, #0
 8005e82:	d002      	beq.n	8005e8a <UART_SetConfig+0x3c6>
 8005e84:	2b02      	cmp	r3, #2
 8005e86:	d005      	beq.n	8005e94 <UART_SetConfig+0x3d0>
 8005e88:	e010      	b.n	8005eac <UART_SetConfig+0x3e8>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005e8a:	f7fe fa03 	bl	8004294 <HAL_RCC_GetPCLK1Freq>
 8005e8e:	0003      	movs	r3, r0
 8005e90:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8005e92:	e014      	b.n	8005ebe <UART_SetConfig+0x3fa>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8005e94:	4bb4      	ldr	r3, [pc, #720]	; (8006168 <UART_SetConfig+0x6a4>)
 8005e96:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8005e98:	e011      	b.n	8005ebe <UART_SetConfig+0x3fa>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8005e9a:	f7fe f96f 	bl	800417c <HAL_RCC_GetSysClockFreq>
 8005e9e:	0003      	movs	r3, r0
 8005ea0:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8005ea2:	e00c      	b.n	8005ebe <UART_SetConfig+0x3fa>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8005ea4:	2380      	movs	r3, #128	; 0x80
 8005ea6:	021b      	lsls	r3, r3, #8
 8005ea8:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8005eaa:	e008      	b.n	8005ebe <UART_SetConfig+0x3fa>
      default:
        pclk = 0U;
 8005eac:	2300      	movs	r3, #0
 8005eae:	637b      	str	r3, [r7, #52]	; 0x34
        ret = HAL_ERROR;
 8005eb0:	231a      	movs	r3, #26
 8005eb2:	2220      	movs	r2, #32
 8005eb4:	189b      	adds	r3, r3, r2
 8005eb6:	19db      	adds	r3, r3, r7
 8005eb8:	2201      	movs	r2, #1
 8005eba:	701a      	strb	r2, [r3, #0]
        break;
 8005ebc:	46c0      	nop			; (mov r8, r8)
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8005ebe:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005ec0:	2b00      	cmp	r3, #0
 8005ec2:	d100      	bne.n	8005ec6 <UART_SetConfig+0x402>
 8005ec4:	e135      	b.n	8006132 <UART_SetConfig+0x66e>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8005ec6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005ec8:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8005eca:	4ba8      	ldr	r3, [pc, #672]	; (800616c <UART_SetConfig+0x6a8>)
 8005ecc:	0052      	lsls	r2, r2, #1
 8005ece:	5ad3      	ldrh	r3, [r2, r3]
 8005ed0:	0019      	movs	r1, r3
 8005ed2:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8005ed4:	f7fa f932 	bl	800013c <__udivsi3>
 8005ed8:	0003      	movs	r3, r0
 8005eda:	62bb      	str	r3, [r7, #40]	; 0x28

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8005edc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005ede:	685a      	ldr	r2, [r3, #4]
 8005ee0:	0013      	movs	r3, r2
 8005ee2:	005b      	lsls	r3, r3, #1
 8005ee4:	189b      	adds	r3, r3, r2
 8005ee6:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8005ee8:	429a      	cmp	r2, r3
 8005eea:	d305      	bcc.n	8005ef8 <UART_SetConfig+0x434>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8005eec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005eee:	685b      	ldr	r3, [r3, #4]
 8005ef0:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8005ef2:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8005ef4:	429a      	cmp	r2, r3
 8005ef6:	d906      	bls.n	8005f06 <UART_SetConfig+0x442>
      {
        ret = HAL_ERROR;
 8005ef8:	231a      	movs	r3, #26
 8005efa:	2220      	movs	r2, #32
 8005efc:	189b      	adds	r3, r3, r2
 8005efe:	19db      	adds	r3, r3, r7
 8005f00:	2201      	movs	r2, #1
 8005f02:	701a      	strb	r2, [r3, #0]
 8005f04:	e044      	b.n	8005f90 <UART_SetConfig+0x4cc>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8005f06:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005f08:	61bb      	str	r3, [r7, #24]
 8005f0a:	2300      	movs	r3, #0
 8005f0c:	61fb      	str	r3, [r7, #28]
 8005f0e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005f10:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8005f12:	4b96      	ldr	r3, [pc, #600]	; (800616c <UART_SetConfig+0x6a8>)
 8005f14:	0052      	lsls	r2, r2, #1
 8005f16:	5ad3      	ldrh	r3, [r2, r3]
 8005f18:	613b      	str	r3, [r7, #16]
 8005f1a:	2300      	movs	r3, #0
 8005f1c:	617b      	str	r3, [r7, #20]
 8005f1e:	693a      	ldr	r2, [r7, #16]
 8005f20:	697b      	ldr	r3, [r7, #20]
 8005f22:	69b8      	ldr	r0, [r7, #24]
 8005f24:	69f9      	ldr	r1, [r7, #28]
 8005f26:	f7fa fabd 	bl	80004a4 <__aeabi_uldivmod>
 8005f2a:	0002      	movs	r2, r0
 8005f2c:	000b      	movs	r3, r1
 8005f2e:	0e11      	lsrs	r1, r2, #24
 8005f30:	021d      	lsls	r5, r3, #8
 8005f32:	430d      	orrs	r5, r1
 8005f34:	0214      	lsls	r4, r2, #8
 8005f36:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005f38:	685b      	ldr	r3, [r3, #4]
 8005f3a:	085b      	lsrs	r3, r3, #1
 8005f3c:	60bb      	str	r3, [r7, #8]
 8005f3e:	2300      	movs	r3, #0
 8005f40:	60fb      	str	r3, [r7, #12]
 8005f42:	68b8      	ldr	r0, [r7, #8]
 8005f44:	68f9      	ldr	r1, [r7, #12]
 8005f46:	1900      	adds	r0, r0, r4
 8005f48:	4169      	adcs	r1, r5
 8005f4a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005f4c:	685b      	ldr	r3, [r3, #4]
 8005f4e:	603b      	str	r3, [r7, #0]
 8005f50:	2300      	movs	r3, #0
 8005f52:	607b      	str	r3, [r7, #4]
 8005f54:	683a      	ldr	r2, [r7, #0]
 8005f56:	687b      	ldr	r3, [r7, #4]
 8005f58:	f7fa faa4 	bl	80004a4 <__aeabi_uldivmod>
 8005f5c:	0002      	movs	r2, r0
 8005f5e:	000b      	movs	r3, r1
 8005f60:	0013      	movs	r3, r2
 8005f62:	633b      	str	r3, [r7, #48]	; 0x30
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8005f64:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005f66:	23c0      	movs	r3, #192	; 0xc0
 8005f68:	009b      	lsls	r3, r3, #2
 8005f6a:	429a      	cmp	r2, r3
 8005f6c:	d309      	bcc.n	8005f82 <UART_SetConfig+0x4be>
 8005f6e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005f70:	2380      	movs	r3, #128	; 0x80
 8005f72:	035b      	lsls	r3, r3, #13
 8005f74:	429a      	cmp	r2, r3
 8005f76:	d204      	bcs.n	8005f82 <UART_SetConfig+0x4be>
        {
          huart->Instance->BRR = usartdiv;
 8005f78:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005f7a:	681b      	ldr	r3, [r3, #0]
 8005f7c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005f7e:	60da      	str	r2, [r3, #12]
 8005f80:	e006      	b.n	8005f90 <UART_SetConfig+0x4cc>
        }
        else
        {
          ret = HAL_ERROR;
 8005f82:	231a      	movs	r3, #26
 8005f84:	2220      	movs	r2, #32
 8005f86:	189b      	adds	r3, r3, r2
 8005f88:	19db      	adds	r3, r3, r7
 8005f8a:	2201      	movs	r2, #1
 8005f8c:	701a      	strb	r2, [r3, #0]
    if (pclk != 0U)
 8005f8e:	e0d0      	b.n	8006132 <UART_SetConfig+0x66e>
 8005f90:	e0cf      	b.n	8006132 <UART_SetConfig+0x66e>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8005f92:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005f94:	69da      	ldr	r2, [r3, #28]
 8005f96:	2380      	movs	r3, #128	; 0x80
 8005f98:	021b      	lsls	r3, r3, #8
 8005f9a:	429a      	cmp	r2, r3
 8005f9c:	d000      	beq.n	8005fa0 <UART_SetConfig+0x4dc>
 8005f9e:	e070      	b.n	8006082 <UART_SetConfig+0x5be>
  {
    switch (clocksource)
 8005fa0:	231b      	movs	r3, #27
 8005fa2:	2220      	movs	r2, #32
 8005fa4:	189b      	adds	r3, r3, r2
 8005fa6:	19db      	adds	r3, r3, r7
 8005fa8:	781b      	ldrb	r3, [r3, #0]
 8005faa:	2b08      	cmp	r3, #8
 8005fac:	d015      	beq.n	8005fda <UART_SetConfig+0x516>
 8005fae:	dc18      	bgt.n	8005fe2 <UART_SetConfig+0x51e>
 8005fb0:	2b04      	cmp	r3, #4
 8005fb2:	d00d      	beq.n	8005fd0 <UART_SetConfig+0x50c>
 8005fb4:	dc15      	bgt.n	8005fe2 <UART_SetConfig+0x51e>
 8005fb6:	2b00      	cmp	r3, #0
 8005fb8:	d002      	beq.n	8005fc0 <UART_SetConfig+0x4fc>
 8005fba:	2b02      	cmp	r3, #2
 8005fbc:	d005      	beq.n	8005fca <UART_SetConfig+0x506>
 8005fbe:	e010      	b.n	8005fe2 <UART_SetConfig+0x51e>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005fc0:	f7fe f968 	bl	8004294 <HAL_RCC_GetPCLK1Freq>
 8005fc4:	0003      	movs	r3, r0
 8005fc6:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8005fc8:	e014      	b.n	8005ff4 <UART_SetConfig+0x530>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8005fca:	4b67      	ldr	r3, [pc, #412]	; (8006168 <UART_SetConfig+0x6a4>)
 8005fcc:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8005fce:	e011      	b.n	8005ff4 <UART_SetConfig+0x530>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8005fd0:	f7fe f8d4 	bl	800417c <HAL_RCC_GetSysClockFreq>
 8005fd4:	0003      	movs	r3, r0
 8005fd6:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8005fd8:	e00c      	b.n	8005ff4 <UART_SetConfig+0x530>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8005fda:	2380      	movs	r3, #128	; 0x80
 8005fdc:	021b      	lsls	r3, r3, #8
 8005fde:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8005fe0:	e008      	b.n	8005ff4 <UART_SetConfig+0x530>
      default:
        pclk = 0U;
 8005fe2:	2300      	movs	r3, #0
 8005fe4:	637b      	str	r3, [r7, #52]	; 0x34
        ret = HAL_ERROR;
 8005fe6:	231a      	movs	r3, #26
 8005fe8:	2220      	movs	r2, #32
 8005fea:	189b      	adds	r3, r3, r2
 8005fec:	19db      	adds	r3, r3, r7
 8005fee:	2201      	movs	r2, #1
 8005ff0:	701a      	strb	r2, [r3, #0]
        break;
 8005ff2:	46c0      	nop			; (mov r8, r8)
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8005ff4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005ff6:	2b00      	cmp	r3, #0
 8005ff8:	d100      	bne.n	8005ffc <UART_SetConfig+0x538>
 8005ffa:	e09a      	b.n	8006132 <UART_SetConfig+0x66e>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8005ffc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005ffe:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8006000:	4b5a      	ldr	r3, [pc, #360]	; (800616c <UART_SetConfig+0x6a8>)
 8006002:	0052      	lsls	r2, r2, #1
 8006004:	5ad3      	ldrh	r3, [r2, r3]
 8006006:	0019      	movs	r1, r3
 8006008:	6b78      	ldr	r0, [r7, #52]	; 0x34
 800600a:	f7fa f897 	bl	800013c <__udivsi3>
 800600e:	0003      	movs	r3, r0
 8006010:	005a      	lsls	r2, r3, #1
 8006012:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006014:	685b      	ldr	r3, [r3, #4]
 8006016:	085b      	lsrs	r3, r3, #1
 8006018:	18d2      	adds	r2, r2, r3
 800601a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800601c:	685b      	ldr	r3, [r3, #4]
 800601e:	0019      	movs	r1, r3
 8006020:	0010      	movs	r0, r2
 8006022:	f7fa f88b 	bl	800013c <__udivsi3>
 8006026:	0003      	movs	r3, r0
 8006028:	633b      	str	r3, [r7, #48]	; 0x30
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800602a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800602c:	2b0f      	cmp	r3, #15
 800602e:	d921      	bls.n	8006074 <UART_SetConfig+0x5b0>
 8006030:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006032:	2380      	movs	r3, #128	; 0x80
 8006034:	025b      	lsls	r3, r3, #9
 8006036:	429a      	cmp	r2, r3
 8006038:	d21c      	bcs.n	8006074 <UART_SetConfig+0x5b0>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800603a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800603c:	b29a      	uxth	r2, r3
 800603e:	200e      	movs	r0, #14
 8006040:	2420      	movs	r4, #32
 8006042:	1903      	adds	r3, r0, r4
 8006044:	19db      	adds	r3, r3, r7
 8006046:	210f      	movs	r1, #15
 8006048:	438a      	bics	r2, r1
 800604a:	801a      	strh	r2, [r3, #0]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800604c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800604e:	085b      	lsrs	r3, r3, #1
 8006050:	b29b      	uxth	r3, r3
 8006052:	2207      	movs	r2, #7
 8006054:	4013      	ands	r3, r2
 8006056:	b299      	uxth	r1, r3
 8006058:	1903      	adds	r3, r0, r4
 800605a:	19db      	adds	r3, r3, r7
 800605c:	1902      	adds	r2, r0, r4
 800605e:	19d2      	adds	r2, r2, r7
 8006060:	8812      	ldrh	r2, [r2, #0]
 8006062:	430a      	orrs	r2, r1
 8006064:	801a      	strh	r2, [r3, #0]
        huart->Instance->BRR = brrtemp;
 8006066:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006068:	681b      	ldr	r3, [r3, #0]
 800606a:	1902      	adds	r2, r0, r4
 800606c:	19d2      	adds	r2, r2, r7
 800606e:	8812      	ldrh	r2, [r2, #0]
 8006070:	60da      	str	r2, [r3, #12]
 8006072:	e05e      	b.n	8006132 <UART_SetConfig+0x66e>
      }
      else
      {
        ret = HAL_ERROR;
 8006074:	231a      	movs	r3, #26
 8006076:	2220      	movs	r2, #32
 8006078:	189b      	adds	r3, r3, r2
 800607a:	19db      	adds	r3, r3, r7
 800607c:	2201      	movs	r2, #1
 800607e:	701a      	strb	r2, [r3, #0]
 8006080:	e057      	b.n	8006132 <UART_SetConfig+0x66e>
      }
    }
  }
  else
  {
    switch (clocksource)
 8006082:	231b      	movs	r3, #27
 8006084:	2220      	movs	r2, #32
 8006086:	189b      	adds	r3, r3, r2
 8006088:	19db      	adds	r3, r3, r7
 800608a:	781b      	ldrb	r3, [r3, #0]
 800608c:	2b08      	cmp	r3, #8
 800608e:	d015      	beq.n	80060bc <UART_SetConfig+0x5f8>
 8006090:	dc18      	bgt.n	80060c4 <UART_SetConfig+0x600>
 8006092:	2b04      	cmp	r3, #4
 8006094:	d00d      	beq.n	80060b2 <UART_SetConfig+0x5ee>
 8006096:	dc15      	bgt.n	80060c4 <UART_SetConfig+0x600>
 8006098:	2b00      	cmp	r3, #0
 800609a:	d002      	beq.n	80060a2 <UART_SetConfig+0x5de>
 800609c:	2b02      	cmp	r3, #2
 800609e:	d005      	beq.n	80060ac <UART_SetConfig+0x5e8>
 80060a0:	e010      	b.n	80060c4 <UART_SetConfig+0x600>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80060a2:	f7fe f8f7 	bl	8004294 <HAL_RCC_GetPCLK1Freq>
 80060a6:	0003      	movs	r3, r0
 80060a8:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 80060aa:	e014      	b.n	80060d6 <UART_SetConfig+0x612>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80060ac:	4b2e      	ldr	r3, [pc, #184]	; (8006168 <UART_SetConfig+0x6a4>)
 80060ae:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 80060b0:	e011      	b.n	80060d6 <UART_SetConfig+0x612>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80060b2:	f7fe f863 	bl	800417c <HAL_RCC_GetSysClockFreq>
 80060b6:	0003      	movs	r3, r0
 80060b8:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 80060ba:	e00c      	b.n	80060d6 <UART_SetConfig+0x612>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80060bc:	2380      	movs	r3, #128	; 0x80
 80060be:	021b      	lsls	r3, r3, #8
 80060c0:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 80060c2:	e008      	b.n	80060d6 <UART_SetConfig+0x612>
      default:
        pclk = 0U;
 80060c4:	2300      	movs	r3, #0
 80060c6:	637b      	str	r3, [r7, #52]	; 0x34
        ret = HAL_ERROR;
 80060c8:	231a      	movs	r3, #26
 80060ca:	2220      	movs	r2, #32
 80060cc:	189b      	adds	r3, r3, r2
 80060ce:	19db      	adds	r3, r3, r7
 80060d0:	2201      	movs	r2, #1
 80060d2:	701a      	strb	r2, [r3, #0]
        break;
 80060d4:	46c0      	nop			; (mov r8, r8)
    }

    if (pclk != 0U)
 80060d6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80060d8:	2b00      	cmp	r3, #0
 80060da:	d02a      	beq.n	8006132 <UART_SetConfig+0x66e>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80060dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80060de:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80060e0:	4b22      	ldr	r3, [pc, #136]	; (800616c <UART_SetConfig+0x6a8>)
 80060e2:	0052      	lsls	r2, r2, #1
 80060e4:	5ad3      	ldrh	r3, [r2, r3]
 80060e6:	0019      	movs	r1, r3
 80060e8:	6b78      	ldr	r0, [r7, #52]	; 0x34
 80060ea:	f7fa f827 	bl	800013c <__udivsi3>
 80060ee:	0003      	movs	r3, r0
 80060f0:	001a      	movs	r2, r3
 80060f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80060f4:	685b      	ldr	r3, [r3, #4]
 80060f6:	085b      	lsrs	r3, r3, #1
 80060f8:	18d2      	adds	r2, r2, r3
 80060fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80060fc:	685b      	ldr	r3, [r3, #4]
 80060fe:	0019      	movs	r1, r3
 8006100:	0010      	movs	r0, r2
 8006102:	f7fa f81b 	bl	800013c <__udivsi3>
 8006106:	0003      	movs	r3, r0
 8006108:	633b      	str	r3, [r7, #48]	; 0x30
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800610a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800610c:	2b0f      	cmp	r3, #15
 800610e:	d90a      	bls.n	8006126 <UART_SetConfig+0x662>
 8006110:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006112:	2380      	movs	r3, #128	; 0x80
 8006114:	025b      	lsls	r3, r3, #9
 8006116:	429a      	cmp	r2, r3
 8006118:	d205      	bcs.n	8006126 <UART_SetConfig+0x662>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800611a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800611c:	b29a      	uxth	r2, r3
 800611e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006120:	681b      	ldr	r3, [r3, #0]
 8006122:	60da      	str	r2, [r3, #12]
 8006124:	e005      	b.n	8006132 <UART_SetConfig+0x66e>
      }
      else
      {
        ret = HAL_ERROR;
 8006126:	231a      	movs	r3, #26
 8006128:	2220      	movs	r2, #32
 800612a:	189b      	adds	r3, r3, r2
 800612c:	19db      	adds	r3, r3, r7
 800612e:	2201      	movs	r2, #1
 8006130:	701a      	strb	r2, [r3, #0]
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8006132:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006134:	226a      	movs	r2, #106	; 0x6a
 8006136:	2101      	movs	r1, #1
 8006138:	5299      	strh	r1, [r3, r2]
  huart->NbRxDataToProcess = 1;
 800613a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800613c:	2268      	movs	r2, #104	; 0x68
 800613e:	2101      	movs	r1, #1
 8006140:	5299      	strh	r1, [r3, r2]

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8006142:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006144:	2200      	movs	r2, #0
 8006146:	675a      	str	r2, [r3, #116]	; 0x74
  huart->TxISR = NULL;
 8006148:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800614a:	2200      	movs	r2, #0
 800614c:	679a      	str	r2, [r3, #120]	; 0x78

  return ret;
 800614e:	231a      	movs	r3, #26
 8006150:	2220      	movs	r2, #32
 8006152:	189b      	adds	r3, r3, r2
 8006154:	19db      	adds	r3, r3, r7
 8006156:	781b      	ldrb	r3, [r3, #0]
}
 8006158:	0018      	movs	r0, r3
 800615a:	46bd      	mov	sp, r7
 800615c:	b010      	add	sp, #64	; 0x40
 800615e:	bdb0      	pop	{r4, r5, r7, pc}
 8006160:	40008000 	.word	0x40008000
 8006164:	40008400 	.word	0x40008400
 8006168:	00f42400 	.word	0x00f42400
 800616c:	0800e4f4 	.word	0x0800e4f4

08006170 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8006170:	b580      	push	{r7, lr}
 8006172:	b082      	sub	sp, #8
 8006174:	af00      	add	r7, sp, #0
 8006176:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8006178:	687b      	ldr	r3, [r7, #4]
 800617a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800617c:	2201      	movs	r2, #1
 800617e:	4013      	ands	r3, r2
 8006180:	d00b      	beq.n	800619a <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8006182:	687b      	ldr	r3, [r7, #4]
 8006184:	681b      	ldr	r3, [r3, #0]
 8006186:	685b      	ldr	r3, [r3, #4]
 8006188:	4a4a      	ldr	r2, [pc, #296]	; (80062b4 <UART_AdvFeatureConfig+0x144>)
 800618a:	4013      	ands	r3, r2
 800618c:	0019      	movs	r1, r3
 800618e:	687b      	ldr	r3, [r7, #4]
 8006190:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006192:	687b      	ldr	r3, [r7, #4]
 8006194:	681b      	ldr	r3, [r3, #0]
 8006196:	430a      	orrs	r2, r1
 8006198:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800619a:	687b      	ldr	r3, [r7, #4]
 800619c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800619e:	2202      	movs	r2, #2
 80061a0:	4013      	ands	r3, r2
 80061a2:	d00b      	beq.n	80061bc <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80061a4:	687b      	ldr	r3, [r7, #4]
 80061a6:	681b      	ldr	r3, [r3, #0]
 80061a8:	685b      	ldr	r3, [r3, #4]
 80061aa:	4a43      	ldr	r2, [pc, #268]	; (80062b8 <UART_AdvFeatureConfig+0x148>)
 80061ac:	4013      	ands	r3, r2
 80061ae:	0019      	movs	r1, r3
 80061b0:	687b      	ldr	r3, [r7, #4]
 80061b2:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80061b4:	687b      	ldr	r3, [r7, #4]
 80061b6:	681b      	ldr	r3, [r3, #0]
 80061b8:	430a      	orrs	r2, r1
 80061ba:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80061bc:	687b      	ldr	r3, [r7, #4]
 80061be:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80061c0:	2204      	movs	r2, #4
 80061c2:	4013      	ands	r3, r2
 80061c4:	d00b      	beq.n	80061de <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80061c6:	687b      	ldr	r3, [r7, #4]
 80061c8:	681b      	ldr	r3, [r3, #0]
 80061ca:	685b      	ldr	r3, [r3, #4]
 80061cc:	4a3b      	ldr	r2, [pc, #236]	; (80062bc <UART_AdvFeatureConfig+0x14c>)
 80061ce:	4013      	ands	r3, r2
 80061d0:	0019      	movs	r1, r3
 80061d2:	687b      	ldr	r3, [r7, #4]
 80061d4:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80061d6:	687b      	ldr	r3, [r7, #4]
 80061d8:	681b      	ldr	r3, [r3, #0]
 80061da:	430a      	orrs	r2, r1
 80061dc:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80061de:	687b      	ldr	r3, [r7, #4]
 80061e0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80061e2:	2208      	movs	r2, #8
 80061e4:	4013      	ands	r3, r2
 80061e6:	d00b      	beq.n	8006200 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80061e8:	687b      	ldr	r3, [r7, #4]
 80061ea:	681b      	ldr	r3, [r3, #0]
 80061ec:	685b      	ldr	r3, [r3, #4]
 80061ee:	4a34      	ldr	r2, [pc, #208]	; (80062c0 <UART_AdvFeatureConfig+0x150>)
 80061f0:	4013      	ands	r3, r2
 80061f2:	0019      	movs	r1, r3
 80061f4:	687b      	ldr	r3, [r7, #4]
 80061f6:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80061f8:	687b      	ldr	r3, [r7, #4]
 80061fa:	681b      	ldr	r3, [r3, #0]
 80061fc:	430a      	orrs	r2, r1
 80061fe:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8006200:	687b      	ldr	r3, [r7, #4]
 8006202:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006204:	2210      	movs	r2, #16
 8006206:	4013      	ands	r3, r2
 8006208:	d00b      	beq.n	8006222 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800620a:	687b      	ldr	r3, [r7, #4]
 800620c:	681b      	ldr	r3, [r3, #0]
 800620e:	689b      	ldr	r3, [r3, #8]
 8006210:	4a2c      	ldr	r2, [pc, #176]	; (80062c4 <UART_AdvFeatureConfig+0x154>)
 8006212:	4013      	ands	r3, r2
 8006214:	0019      	movs	r1, r3
 8006216:	687b      	ldr	r3, [r7, #4]
 8006218:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800621a:	687b      	ldr	r3, [r7, #4]
 800621c:	681b      	ldr	r3, [r3, #0]
 800621e:	430a      	orrs	r2, r1
 8006220:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8006222:	687b      	ldr	r3, [r7, #4]
 8006224:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006226:	2220      	movs	r2, #32
 8006228:	4013      	ands	r3, r2
 800622a:	d00b      	beq.n	8006244 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800622c:	687b      	ldr	r3, [r7, #4]
 800622e:	681b      	ldr	r3, [r3, #0]
 8006230:	689b      	ldr	r3, [r3, #8]
 8006232:	4a25      	ldr	r2, [pc, #148]	; (80062c8 <UART_AdvFeatureConfig+0x158>)
 8006234:	4013      	ands	r3, r2
 8006236:	0019      	movs	r1, r3
 8006238:	687b      	ldr	r3, [r7, #4]
 800623a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800623c:	687b      	ldr	r3, [r7, #4]
 800623e:	681b      	ldr	r3, [r3, #0]
 8006240:	430a      	orrs	r2, r1
 8006242:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8006244:	687b      	ldr	r3, [r7, #4]
 8006246:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006248:	2240      	movs	r2, #64	; 0x40
 800624a:	4013      	ands	r3, r2
 800624c:	d01d      	beq.n	800628a <UART_AdvFeatureConfig+0x11a>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800624e:	687b      	ldr	r3, [r7, #4]
 8006250:	681b      	ldr	r3, [r3, #0]
 8006252:	685b      	ldr	r3, [r3, #4]
 8006254:	4a1d      	ldr	r2, [pc, #116]	; (80062cc <UART_AdvFeatureConfig+0x15c>)
 8006256:	4013      	ands	r3, r2
 8006258:	0019      	movs	r1, r3
 800625a:	687b      	ldr	r3, [r7, #4]
 800625c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800625e:	687b      	ldr	r3, [r7, #4]
 8006260:	681b      	ldr	r3, [r3, #0]
 8006262:	430a      	orrs	r2, r1
 8006264:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8006266:	687b      	ldr	r3, [r7, #4]
 8006268:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800626a:	2380      	movs	r3, #128	; 0x80
 800626c:	035b      	lsls	r3, r3, #13
 800626e:	429a      	cmp	r2, r3
 8006270:	d10b      	bne.n	800628a <UART_AdvFeatureConfig+0x11a>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8006272:	687b      	ldr	r3, [r7, #4]
 8006274:	681b      	ldr	r3, [r3, #0]
 8006276:	685b      	ldr	r3, [r3, #4]
 8006278:	4a15      	ldr	r2, [pc, #84]	; (80062d0 <UART_AdvFeatureConfig+0x160>)
 800627a:	4013      	ands	r3, r2
 800627c:	0019      	movs	r1, r3
 800627e:	687b      	ldr	r3, [r7, #4]
 8006280:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8006282:	687b      	ldr	r3, [r7, #4]
 8006284:	681b      	ldr	r3, [r3, #0]
 8006286:	430a      	orrs	r2, r1
 8006288:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800628a:	687b      	ldr	r3, [r7, #4]
 800628c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800628e:	2280      	movs	r2, #128	; 0x80
 8006290:	4013      	ands	r3, r2
 8006292:	d00b      	beq.n	80062ac <UART_AdvFeatureConfig+0x13c>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8006294:	687b      	ldr	r3, [r7, #4]
 8006296:	681b      	ldr	r3, [r3, #0]
 8006298:	685b      	ldr	r3, [r3, #4]
 800629a:	4a0e      	ldr	r2, [pc, #56]	; (80062d4 <UART_AdvFeatureConfig+0x164>)
 800629c:	4013      	ands	r3, r2
 800629e:	0019      	movs	r1, r3
 80062a0:	687b      	ldr	r3, [r7, #4]
 80062a2:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80062a4:	687b      	ldr	r3, [r7, #4]
 80062a6:	681b      	ldr	r3, [r3, #0]
 80062a8:	430a      	orrs	r2, r1
 80062aa:	605a      	str	r2, [r3, #4]
  }
}
 80062ac:	46c0      	nop			; (mov r8, r8)
 80062ae:	46bd      	mov	sp, r7
 80062b0:	b002      	add	sp, #8
 80062b2:	bd80      	pop	{r7, pc}
 80062b4:	fffdffff 	.word	0xfffdffff
 80062b8:	fffeffff 	.word	0xfffeffff
 80062bc:	fffbffff 	.word	0xfffbffff
 80062c0:	ffff7fff 	.word	0xffff7fff
 80062c4:	ffffefff 	.word	0xffffefff
 80062c8:	ffffdfff 	.word	0xffffdfff
 80062cc:	ffefffff 	.word	0xffefffff
 80062d0:	ff9fffff 	.word	0xff9fffff
 80062d4:	fff7ffff 	.word	0xfff7ffff

080062d8 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80062d8:	b580      	push	{r7, lr}
 80062da:	b086      	sub	sp, #24
 80062dc:	af02      	add	r7, sp, #8
 80062de:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80062e0:	687b      	ldr	r3, [r7, #4]
 80062e2:	2290      	movs	r2, #144	; 0x90
 80062e4:	2100      	movs	r1, #0
 80062e6:	5099      	str	r1, [r3, r2]

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 80062e8:	f7fc ff82 	bl	80031f0 <HAL_GetTick>
 80062ec:	0003      	movs	r3, r0
 80062ee:	60fb      	str	r3, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80062f0:	687b      	ldr	r3, [r7, #4]
 80062f2:	681b      	ldr	r3, [r3, #0]
 80062f4:	681b      	ldr	r3, [r3, #0]
 80062f6:	2208      	movs	r2, #8
 80062f8:	4013      	ands	r3, r2
 80062fa:	2b08      	cmp	r3, #8
 80062fc:	d10c      	bne.n	8006318 <UART_CheckIdleState+0x40>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80062fe:	68fb      	ldr	r3, [r7, #12]
 8006300:	2280      	movs	r2, #128	; 0x80
 8006302:	0391      	lsls	r1, r2, #14
 8006304:	6878      	ldr	r0, [r7, #4]
 8006306:	4a1a      	ldr	r2, [pc, #104]	; (8006370 <UART_CheckIdleState+0x98>)
 8006308:	9200      	str	r2, [sp, #0]
 800630a:	2200      	movs	r2, #0
 800630c:	f000 f832 	bl	8006374 <UART_WaitOnFlagUntilTimeout>
 8006310:	1e03      	subs	r3, r0, #0
 8006312:	d001      	beq.n	8006318 <UART_CheckIdleState+0x40>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8006314:	2303      	movs	r3, #3
 8006316:	e026      	b.n	8006366 <UART_CheckIdleState+0x8e>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8006318:	687b      	ldr	r3, [r7, #4]
 800631a:	681b      	ldr	r3, [r3, #0]
 800631c:	681b      	ldr	r3, [r3, #0]
 800631e:	2204      	movs	r2, #4
 8006320:	4013      	ands	r3, r2
 8006322:	2b04      	cmp	r3, #4
 8006324:	d10c      	bne.n	8006340 <UART_CheckIdleState+0x68>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8006326:	68fb      	ldr	r3, [r7, #12]
 8006328:	2280      	movs	r2, #128	; 0x80
 800632a:	03d1      	lsls	r1, r2, #15
 800632c:	6878      	ldr	r0, [r7, #4]
 800632e:	4a10      	ldr	r2, [pc, #64]	; (8006370 <UART_CheckIdleState+0x98>)
 8006330:	9200      	str	r2, [sp, #0]
 8006332:	2200      	movs	r2, #0
 8006334:	f000 f81e 	bl	8006374 <UART_WaitOnFlagUntilTimeout>
 8006338:	1e03      	subs	r3, r0, #0
 800633a:	d001      	beq.n	8006340 <UART_CheckIdleState+0x68>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800633c:	2303      	movs	r3, #3
 800633e:	e012      	b.n	8006366 <UART_CheckIdleState+0x8e>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8006340:	687b      	ldr	r3, [r7, #4]
 8006342:	2288      	movs	r2, #136	; 0x88
 8006344:	2120      	movs	r1, #32
 8006346:	5099      	str	r1, [r3, r2]
  huart->RxState = HAL_UART_STATE_READY;
 8006348:	687b      	ldr	r3, [r7, #4]
 800634a:	228c      	movs	r2, #140	; 0x8c
 800634c:	2120      	movs	r1, #32
 800634e:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006350:	687b      	ldr	r3, [r7, #4]
 8006352:	2200      	movs	r2, #0
 8006354:	66da      	str	r2, [r3, #108]	; 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8006356:	687b      	ldr	r3, [r7, #4]
 8006358:	2200      	movs	r2, #0
 800635a:	671a      	str	r2, [r3, #112]	; 0x70

  __HAL_UNLOCK(huart);
 800635c:	687b      	ldr	r3, [r7, #4]
 800635e:	2284      	movs	r2, #132	; 0x84
 8006360:	2100      	movs	r1, #0
 8006362:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8006364:	2300      	movs	r3, #0
}
 8006366:	0018      	movs	r0, r3
 8006368:	46bd      	mov	sp, r7
 800636a:	b004      	add	sp, #16
 800636c:	bd80      	pop	{r7, pc}
 800636e:	46c0      	nop			; (mov r8, r8)
 8006370:	01ffffff 	.word	0x01ffffff

08006374 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8006374:	b580      	push	{r7, lr}
 8006376:	b094      	sub	sp, #80	; 0x50
 8006378:	af00      	add	r7, sp, #0
 800637a:	60f8      	str	r0, [r7, #12]
 800637c:	60b9      	str	r1, [r7, #8]
 800637e:	603b      	str	r3, [r7, #0]
 8006380:	1dfb      	adds	r3, r7, #7
 8006382:	701a      	strb	r2, [r3, #0]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006384:	e0a7      	b.n	80064d6 <UART_WaitOnFlagUntilTimeout+0x162>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006386:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8006388:	3301      	adds	r3, #1
 800638a:	d100      	bne.n	800638e <UART_WaitOnFlagUntilTimeout+0x1a>
 800638c:	e0a3      	b.n	80064d6 <UART_WaitOnFlagUntilTimeout+0x162>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800638e:	f7fc ff2f 	bl	80031f0 <HAL_GetTick>
 8006392:	0002      	movs	r2, r0
 8006394:	683b      	ldr	r3, [r7, #0]
 8006396:	1ad3      	subs	r3, r2, r3
 8006398:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800639a:	429a      	cmp	r2, r3
 800639c:	d302      	bcc.n	80063a4 <UART_WaitOnFlagUntilTimeout+0x30>
 800639e:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80063a0:	2b00      	cmp	r3, #0
 80063a2:	d13f      	bne.n	8006424 <UART_WaitOnFlagUntilTimeout+0xb0>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80063a4:	f3ef 8310 	mrs	r3, PRIMASK
 80063a8:	62bb      	str	r3, [r7, #40]	; 0x28
  return(result);
 80063aa:	6abb      	ldr	r3, [r7, #40]	; 0x28
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 80063ac:	647b      	str	r3, [r7, #68]	; 0x44
 80063ae:	2301      	movs	r3, #1
 80063b0:	62fb      	str	r3, [r7, #44]	; 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80063b2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80063b4:	f383 8810 	msr	PRIMASK, r3
}
 80063b8:	46c0      	nop			; (mov r8, r8)
 80063ba:	68fb      	ldr	r3, [r7, #12]
 80063bc:	681b      	ldr	r3, [r3, #0]
 80063be:	681a      	ldr	r2, [r3, #0]
 80063c0:	68fb      	ldr	r3, [r7, #12]
 80063c2:	681b      	ldr	r3, [r3, #0]
 80063c4:	494e      	ldr	r1, [pc, #312]	; (8006500 <UART_WaitOnFlagUntilTimeout+0x18c>)
 80063c6:	400a      	ands	r2, r1
 80063c8:	601a      	str	r2, [r3, #0]
 80063ca:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80063cc:	633b      	str	r3, [r7, #48]	; 0x30
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80063ce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80063d0:	f383 8810 	msr	PRIMASK, r3
}
 80063d4:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80063d6:	f3ef 8310 	mrs	r3, PRIMASK
 80063da:	637b      	str	r3, [r7, #52]	; 0x34
  return(result);
 80063dc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
                                                USART_CR1_TXEIE_TXFNFIE));
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80063de:	643b      	str	r3, [r7, #64]	; 0x40
 80063e0:	2301      	movs	r3, #1
 80063e2:	63bb      	str	r3, [r7, #56]	; 0x38
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80063e4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80063e6:	f383 8810 	msr	PRIMASK, r3
}
 80063ea:	46c0      	nop			; (mov r8, r8)
 80063ec:	68fb      	ldr	r3, [r7, #12]
 80063ee:	681b      	ldr	r3, [r3, #0]
 80063f0:	689a      	ldr	r2, [r3, #8]
 80063f2:	68fb      	ldr	r3, [r7, #12]
 80063f4:	681b      	ldr	r3, [r3, #0]
 80063f6:	2101      	movs	r1, #1
 80063f8:	438a      	bics	r2, r1
 80063fa:	609a      	str	r2, [r3, #8]
 80063fc:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80063fe:	63fb      	str	r3, [r7, #60]	; 0x3c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006400:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006402:	f383 8810 	msr	PRIMASK, r3
}
 8006406:	46c0      	nop			; (mov r8, r8)

        huart->gState = HAL_UART_STATE_READY;
 8006408:	68fb      	ldr	r3, [r7, #12]
 800640a:	2288      	movs	r2, #136	; 0x88
 800640c:	2120      	movs	r1, #32
 800640e:	5099      	str	r1, [r3, r2]
        huart->RxState = HAL_UART_STATE_READY;
 8006410:	68fb      	ldr	r3, [r7, #12]
 8006412:	228c      	movs	r2, #140	; 0x8c
 8006414:	2120      	movs	r1, #32
 8006416:	5099      	str	r1, [r3, r2]

        __HAL_UNLOCK(huart);
 8006418:	68fb      	ldr	r3, [r7, #12]
 800641a:	2284      	movs	r2, #132	; 0x84
 800641c:	2100      	movs	r1, #0
 800641e:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 8006420:	2303      	movs	r3, #3
 8006422:	e069      	b.n	80064f8 <UART_WaitOnFlagUntilTimeout+0x184>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8006424:	68fb      	ldr	r3, [r7, #12]
 8006426:	681b      	ldr	r3, [r3, #0]
 8006428:	681b      	ldr	r3, [r3, #0]
 800642a:	2204      	movs	r2, #4
 800642c:	4013      	ands	r3, r2
 800642e:	d052      	beq.n	80064d6 <UART_WaitOnFlagUntilTimeout+0x162>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8006430:	68fb      	ldr	r3, [r7, #12]
 8006432:	681b      	ldr	r3, [r3, #0]
 8006434:	69da      	ldr	r2, [r3, #28]
 8006436:	2380      	movs	r3, #128	; 0x80
 8006438:	011b      	lsls	r3, r3, #4
 800643a:	401a      	ands	r2, r3
 800643c:	2380      	movs	r3, #128	; 0x80
 800643e:	011b      	lsls	r3, r3, #4
 8006440:	429a      	cmp	r2, r3
 8006442:	d148      	bne.n	80064d6 <UART_WaitOnFlagUntilTimeout+0x162>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8006444:	68fb      	ldr	r3, [r7, #12]
 8006446:	681b      	ldr	r3, [r3, #0]
 8006448:	2280      	movs	r2, #128	; 0x80
 800644a:	0112      	lsls	r2, r2, #4
 800644c:	621a      	str	r2, [r3, #32]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800644e:	f3ef 8310 	mrs	r3, PRIMASK
 8006452:	613b      	str	r3, [r7, #16]
  return(result);
 8006454:	693b      	ldr	r3, [r7, #16]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 8006456:	64fb      	str	r3, [r7, #76]	; 0x4c
 8006458:	2301      	movs	r3, #1
 800645a:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800645c:	697b      	ldr	r3, [r7, #20]
 800645e:	f383 8810 	msr	PRIMASK, r3
}
 8006462:	46c0      	nop			; (mov r8, r8)
 8006464:	68fb      	ldr	r3, [r7, #12]
 8006466:	681b      	ldr	r3, [r3, #0]
 8006468:	681a      	ldr	r2, [r3, #0]
 800646a:	68fb      	ldr	r3, [r7, #12]
 800646c:	681b      	ldr	r3, [r3, #0]
 800646e:	4924      	ldr	r1, [pc, #144]	; (8006500 <UART_WaitOnFlagUntilTimeout+0x18c>)
 8006470:	400a      	ands	r2, r1
 8006472:	601a      	str	r2, [r3, #0]
 8006474:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006476:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006478:	69bb      	ldr	r3, [r7, #24]
 800647a:	f383 8810 	msr	PRIMASK, r3
}
 800647e:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8006480:	f3ef 8310 	mrs	r3, PRIMASK
 8006484:	61fb      	str	r3, [r7, #28]
  return(result);
 8006486:	69fb      	ldr	r3, [r7, #28]
                                                  USART_CR1_TXEIE_TXFNFIE));
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006488:	64bb      	str	r3, [r7, #72]	; 0x48
 800648a:	2301      	movs	r3, #1
 800648c:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800648e:	6a3b      	ldr	r3, [r7, #32]
 8006490:	f383 8810 	msr	PRIMASK, r3
}
 8006494:	46c0      	nop			; (mov r8, r8)
 8006496:	68fb      	ldr	r3, [r7, #12]
 8006498:	681b      	ldr	r3, [r3, #0]
 800649a:	689a      	ldr	r2, [r3, #8]
 800649c:	68fb      	ldr	r3, [r7, #12]
 800649e:	681b      	ldr	r3, [r3, #0]
 80064a0:	2101      	movs	r1, #1
 80064a2:	438a      	bics	r2, r1
 80064a4:	609a      	str	r2, [r3, #8]
 80064a6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80064a8:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80064aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80064ac:	f383 8810 	msr	PRIMASK, r3
}
 80064b0:	46c0      	nop			; (mov r8, r8)

          huart->gState = HAL_UART_STATE_READY;
 80064b2:	68fb      	ldr	r3, [r7, #12]
 80064b4:	2288      	movs	r2, #136	; 0x88
 80064b6:	2120      	movs	r1, #32
 80064b8:	5099      	str	r1, [r3, r2]
          huart->RxState = HAL_UART_STATE_READY;
 80064ba:	68fb      	ldr	r3, [r7, #12]
 80064bc:	228c      	movs	r2, #140	; 0x8c
 80064be:	2120      	movs	r1, #32
 80064c0:	5099      	str	r1, [r3, r2]
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80064c2:	68fb      	ldr	r3, [r7, #12]
 80064c4:	2290      	movs	r2, #144	; 0x90
 80064c6:	2120      	movs	r1, #32
 80064c8:	5099      	str	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80064ca:	68fb      	ldr	r3, [r7, #12]
 80064cc:	2284      	movs	r2, #132	; 0x84
 80064ce:	2100      	movs	r1, #0
 80064d0:	5499      	strb	r1, [r3, r2]

          return HAL_TIMEOUT;
 80064d2:	2303      	movs	r3, #3
 80064d4:	e010      	b.n	80064f8 <UART_WaitOnFlagUntilTimeout+0x184>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80064d6:	68fb      	ldr	r3, [r7, #12]
 80064d8:	681b      	ldr	r3, [r3, #0]
 80064da:	69db      	ldr	r3, [r3, #28]
 80064dc:	68ba      	ldr	r2, [r7, #8]
 80064de:	4013      	ands	r3, r2
 80064e0:	68ba      	ldr	r2, [r7, #8]
 80064e2:	1ad3      	subs	r3, r2, r3
 80064e4:	425a      	negs	r2, r3
 80064e6:	4153      	adcs	r3, r2
 80064e8:	b2db      	uxtb	r3, r3
 80064ea:	001a      	movs	r2, r3
 80064ec:	1dfb      	adds	r3, r7, #7
 80064ee:	781b      	ldrb	r3, [r3, #0]
 80064f0:	429a      	cmp	r2, r3
 80064f2:	d100      	bne.n	80064f6 <UART_WaitOnFlagUntilTimeout+0x182>
 80064f4:	e747      	b.n	8006386 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80064f6:	2300      	movs	r3, #0
}
 80064f8:	0018      	movs	r0, r3
 80064fa:	46bd      	mov	sp, r7
 80064fc:	b014      	add	sp, #80	; 0x50
 80064fe:	bd80      	pop	{r7, pc}
 8006500:	fffffe5f 	.word	0xfffffe5f

08006504 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8006504:	b580      	push	{r7, lr}
 8006506:	b084      	sub	sp, #16
 8006508:	af00      	add	r7, sp, #0
 800650a:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 800650c:	687b      	ldr	r3, [r7, #4]
 800650e:	2284      	movs	r2, #132	; 0x84
 8006510:	5c9b      	ldrb	r3, [r3, r2]
 8006512:	2b01      	cmp	r3, #1
 8006514:	d101      	bne.n	800651a <HAL_UARTEx_DisableFifoMode+0x16>
 8006516:	2302      	movs	r3, #2
 8006518:	e027      	b.n	800656a <HAL_UARTEx_DisableFifoMode+0x66>
 800651a:	687b      	ldr	r3, [r7, #4]
 800651c:	2284      	movs	r2, #132	; 0x84
 800651e:	2101      	movs	r1, #1
 8006520:	5499      	strb	r1, [r3, r2]

  huart->gState = HAL_UART_STATE_BUSY;
 8006522:	687b      	ldr	r3, [r7, #4]
 8006524:	2288      	movs	r2, #136	; 0x88
 8006526:	2124      	movs	r1, #36	; 0x24
 8006528:	5099      	str	r1, [r3, r2]

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800652a:	687b      	ldr	r3, [r7, #4]
 800652c:	681b      	ldr	r3, [r3, #0]
 800652e:	681b      	ldr	r3, [r3, #0]
 8006530:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8006532:	687b      	ldr	r3, [r7, #4]
 8006534:	681b      	ldr	r3, [r3, #0]
 8006536:	681a      	ldr	r2, [r3, #0]
 8006538:	687b      	ldr	r3, [r7, #4]
 800653a:	681b      	ldr	r3, [r3, #0]
 800653c:	2101      	movs	r1, #1
 800653e:	438a      	bics	r2, r1
 8006540:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8006542:	68fb      	ldr	r3, [r7, #12]
 8006544:	4a0b      	ldr	r2, [pc, #44]	; (8006574 <HAL_UARTEx_DisableFifoMode+0x70>)
 8006546:	4013      	ands	r3, r2
 8006548:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 800654a:	687b      	ldr	r3, [r7, #4]
 800654c:	2200      	movs	r2, #0
 800654e:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8006550:	687b      	ldr	r3, [r7, #4]
 8006552:	681b      	ldr	r3, [r3, #0]
 8006554:	68fa      	ldr	r2, [r7, #12]
 8006556:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8006558:	687b      	ldr	r3, [r7, #4]
 800655a:	2288      	movs	r2, #136	; 0x88
 800655c:	2120      	movs	r1, #32
 800655e:	5099      	str	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8006560:	687b      	ldr	r3, [r7, #4]
 8006562:	2284      	movs	r2, #132	; 0x84
 8006564:	2100      	movs	r1, #0
 8006566:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8006568:	2300      	movs	r3, #0
}
 800656a:	0018      	movs	r0, r3
 800656c:	46bd      	mov	sp, r7
 800656e:	b004      	add	sp, #16
 8006570:	bd80      	pop	{r7, pc}
 8006572:	46c0      	nop			; (mov r8, r8)
 8006574:	dfffffff 	.word	0xdfffffff

08006578 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8006578:	b580      	push	{r7, lr}
 800657a:	b084      	sub	sp, #16
 800657c:	af00      	add	r7, sp, #0
 800657e:	6078      	str	r0, [r7, #4]
 8006580:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8006582:	687b      	ldr	r3, [r7, #4]
 8006584:	2284      	movs	r2, #132	; 0x84
 8006586:	5c9b      	ldrb	r3, [r3, r2]
 8006588:	2b01      	cmp	r3, #1
 800658a:	d101      	bne.n	8006590 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 800658c:	2302      	movs	r3, #2
 800658e:	e02e      	b.n	80065ee <HAL_UARTEx_SetTxFifoThreshold+0x76>
 8006590:	687b      	ldr	r3, [r7, #4]
 8006592:	2284      	movs	r2, #132	; 0x84
 8006594:	2101      	movs	r1, #1
 8006596:	5499      	strb	r1, [r3, r2]

  huart->gState = HAL_UART_STATE_BUSY;
 8006598:	687b      	ldr	r3, [r7, #4]
 800659a:	2288      	movs	r2, #136	; 0x88
 800659c:	2124      	movs	r1, #36	; 0x24
 800659e:	5099      	str	r1, [r3, r2]

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80065a0:	687b      	ldr	r3, [r7, #4]
 80065a2:	681b      	ldr	r3, [r3, #0]
 80065a4:	681b      	ldr	r3, [r3, #0]
 80065a6:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80065a8:	687b      	ldr	r3, [r7, #4]
 80065aa:	681b      	ldr	r3, [r3, #0]
 80065ac:	681a      	ldr	r2, [r3, #0]
 80065ae:	687b      	ldr	r3, [r7, #4]
 80065b0:	681b      	ldr	r3, [r3, #0]
 80065b2:	2101      	movs	r1, #1
 80065b4:	438a      	bics	r2, r1
 80065b6:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 80065b8:	687b      	ldr	r3, [r7, #4]
 80065ba:	681b      	ldr	r3, [r3, #0]
 80065bc:	689b      	ldr	r3, [r3, #8]
 80065be:	00db      	lsls	r3, r3, #3
 80065c0:	08d9      	lsrs	r1, r3, #3
 80065c2:	687b      	ldr	r3, [r7, #4]
 80065c4:	681b      	ldr	r3, [r3, #0]
 80065c6:	683a      	ldr	r2, [r7, #0]
 80065c8:	430a      	orrs	r2, r1
 80065ca:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 80065cc:	687b      	ldr	r3, [r7, #4]
 80065ce:	0018      	movs	r0, r3
 80065d0:	f000 f854 	bl	800667c <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80065d4:	687b      	ldr	r3, [r7, #4]
 80065d6:	681b      	ldr	r3, [r3, #0]
 80065d8:	68fa      	ldr	r2, [r7, #12]
 80065da:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80065dc:	687b      	ldr	r3, [r7, #4]
 80065de:	2288      	movs	r2, #136	; 0x88
 80065e0:	2120      	movs	r1, #32
 80065e2:	5099      	str	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80065e4:	687b      	ldr	r3, [r7, #4]
 80065e6:	2284      	movs	r2, #132	; 0x84
 80065e8:	2100      	movs	r1, #0
 80065ea:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80065ec:	2300      	movs	r3, #0
}
 80065ee:	0018      	movs	r0, r3
 80065f0:	46bd      	mov	sp, r7
 80065f2:	b004      	add	sp, #16
 80065f4:	bd80      	pop	{r7, pc}
	...

080065f8 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 80065f8:	b580      	push	{r7, lr}
 80065fa:	b084      	sub	sp, #16
 80065fc:	af00      	add	r7, sp, #0
 80065fe:	6078      	str	r0, [r7, #4]
 8006600:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8006602:	687b      	ldr	r3, [r7, #4]
 8006604:	2284      	movs	r2, #132	; 0x84
 8006606:	5c9b      	ldrb	r3, [r3, r2]
 8006608:	2b01      	cmp	r3, #1
 800660a:	d101      	bne.n	8006610 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 800660c:	2302      	movs	r3, #2
 800660e:	e02f      	b.n	8006670 <HAL_UARTEx_SetRxFifoThreshold+0x78>
 8006610:	687b      	ldr	r3, [r7, #4]
 8006612:	2284      	movs	r2, #132	; 0x84
 8006614:	2101      	movs	r1, #1
 8006616:	5499      	strb	r1, [r3, r2]

  huart->gState = HAL_UART_STATE_BUSY;
 8006618:	687b      	ldr	r3, [r7, #4]
 800661a:	2288      	movs	r2, #136	; 0x88
 800661c:	2124      	movs	r1, #36	; 0x24
 800661e:	5099      	str	r1, [r3, r2]

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8006620:	687b      	ldr	r3, [r7, #4]
 8006622:	681b      	ldr	r3, [r3, #0]
 8006624:	681b      	ldr	r3, [r3, #0]
 8006626:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8006628:	687b      	ldr	r3, [r7, #4]
 800662a:	681b      	ldr	r3, [r3, #0]
 800662c:	681a      	ldr	r2, [r3, #0]
 800662e:	687b      	ldr	r3, [r7, #4]
 8006630:	681b      	ldr	r3, [r3, #0]
 8006632:	2101      	movs	r1, #1
 8006634:	438a      	bics	r2, r1
 8006636:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8006638:	687b      	ldr	r3, [r7, #4]
 800663a:	681b      	ldr	r3, [r3, #0]
 800663c:	689b      	ldr	r3, [r3, #8]
 800663e:	4a0e      	ldr	r2, [pc, #56]	; (8006678 <HAL_UARTEx_SetRxFifoThreshold+0x80>)
 8006640:	4013      	ands	r3, r2
 8006642:	0019      	movs	r1, r3
 8006644:	687b      	ldr	r3, [r7, #4]
 8006646:	681b      	ldr	r3, [r3, #0]
 8006648:	683a      	ldr	r2, [r7, #0]
 800664a:	430a      	orrs	r2, r1
 800664c:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800664e:	687b      	ldr	r3, [r7, #4]
 8006650:	0018      	movs	r0, r3
 8006652:	f000 f813 	bl	800667c <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8006656:	687b      	ldr	r3, [r7, #4]
 8006658:	681b      	ldr	r3, [r3, #0]
 800665a:	68fa      	ldr	r2, [r7, #12]
 800665c:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800665e:	687b      	ldr	r3, [r7, #4]
 8006660:	2288      	movs	r2, #136	; 0x88
 8006662:	2120      	movs	r1, #32
 8006664:	5099      	str	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8006666:	687b      	ldr	r3, [r7, #4]
 8006668:	2284      	movs	r2, #132	; 0x84
 800666a:	2100      	movs	r1, #0
 800666c:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800666e:	2300      	movs	r3, #0
}
 8006670:	0018      	movs	r0, r3
 8006672:	46bd      	mov	sp, r7
 8006674:	b004      	add	sp, #16
 8006676:	bd80      	pop	{r7, pc}
 8006678:	f1ffffff 	.word	0xf1ffffff

0800667c <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 800667c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800667e:	b085      	sub	sp, #20
 8006680:	af00      	add	r7, sp, #0
 8006682:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8006684:	687b      	ldr	r3, [r7, #4]
 8006686:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8006688:	2b00      	cmp	r3, #0
 800668a:	d108      	bne.n	800669e <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 800668c:	687b      	ldr	r3, [r7, #4]
 800668e:	226a      	movs	r2, #106	; 0x6a
 8006690:	2101      	movs	r1, #1
 8006692:	5299      	strh	r1, [r3, r2]
    huart->NbRxDataToProcess = 1U;
 8006694:	687b      	ldr	r3, [r7, #4]
 8006696:	2268      	movs	r2, #104	; 0x68
 8006698:	2101      	movs	r1, #1
 800669a:	5299      	strh	r1, [r3, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 800669c:	e043      	b.n	8006726 <UARTEx_SetNbDataToProcess+0xaa>
    rx_fifo_depth = RX_FIFO_DEPTH;
 800669e:	260f      	movs	r6, #15
 80066a0:	19bb      	adds	r3, r7, r6
 80066a2:	2208      	movs	r2, #8
 80066a4:	701a      	strb	r2, [r3, #0]
    tx_fifo_depth = TX_FIFO_DEPTH;
 80066a6:	200e      	movs	r0, #14
 80066a8:	183b      	adds	r3, r7, r0
 80066aa:	2208      	movs	r2, #8
 80066ac:	701a      	strb	r2, [r3, #0]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 80066ae:	687b      	ldr	r3, [r7, #4]
 80066b0:	681b      	ldr	r3, [r3, #0]
 80066b2:	689b      	ldr	r3, [r3, #8]
 80066b4:	0e5b      	lsrs	r3, r3, #25
 80066b6:	b2da      	uxtb	r2, r3
 80066b8:	240d      	movs	r4, #13
 80066ba:	193b      	adds	r3, r7, r4
 80066bc:	2107      	movs	r1, #7
 80066be:	400a      	ands	r2, r1
 80066c0:	701a      	strb	r2, [r3, #0]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 80066c2:	687b      	ldr	r3, [r7, #4]
 80066c4:	681b      	ldr	r3, [r3, #0]
 80066c6:	689b      	ldr	r3, [r3, #8]
 80066c8:	0f5b      	lsrs	r3, r3, #29
 80066ca:	b2da      	uxtb	r2, r3
 80066cc:	250c      	movs	r5, #12
 80066ce:	197b      	adds	r3, r7, r5
 80066d0:	2107      	movs	r1, #7
 80066d2:	400a      	ands	r2, r1
 80066d4:	701a      	strb	r2, [r3, #0]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 80066d6:	183b      	adds	r3, r7, r0
 80066d8:	781b      	ldrb	r3, [r3, #0]
 80066da:	197a      	adds	r2, r7, r5
 80066dc:	7812      	ldrb	r2, [r2, #0]
 80066de:	4914      	ldr	r1, [pc, #80]	; (8006730 <UARTEx_SetNbDataToProcess+0xb4>)
 80066e0:	5c8a      	ldrb	r2, [r1, r2]
 80066e2:	435a      	muls	r2, r3
 80066e4:	0010      	movs	r0, r2
                               (uint16_t)denominator[tx_fifo_threshold];
 80066e6:	197b      	adds	r3, r7, r5
 80066e8:	781b      	ldrb	r3, [r3, #0]
 80066ea:	4a12      	ldr	r2, [pc, #72]	; (8006734 <UARTEx_SetNbDataToProcess+0xb8>)
 80066ec:	5cd3      	ldrb	r3, [r2, r3]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 80066ee:	0019      	movs	r1, r3
 80066f0:	f7f9 fdae 	bl	8000250 <__divsi3>
 80066f4:	0003      	movs	r3, r0
 80066f6:	b299      	uxth	r1, r3
 80066f8:	687b      	ldr	r3, [r7, #4]
 80066fa:	226a      	movs	r2, #106	; 0x6a
 80066fc:	5299      	strh	r1, [r3, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 80066fe:	19bb      	adds	r3, r7, r6
 8006700:	781b      	ldrb	r3, [r3, #0]
 8006702:	193a      	adds	r2, r7, r4
 8006704:	7812      	ldrb	r2, [r2, #0]
 8006706:	490a      	ldr	r1, [pc, #40]	; (8006730 <UARTEx_SetNbDataToProcess+0xb4>)
 8006708:	5c8a      	ldrb	r2, [r1, r2]
 800670a:	435a      	muls	r2, r3
 800670c:	0010      	movs	r0, r2
                               (uint16_t)denominator[rx_fifo_threshold];
 800670e:	193b      	adds	r3, r7, r4
 8006710:	781b      	ldrb	r3, [r3, #0]
 8006712:	4a08      	ldr	r2, [pc, #32]	; (8006734 <UARTEx_SetNbDataToProcess+0xb8>)
 8006714:	5cd3      	ldrb	r3, [r2, r3]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8006716:	0019      	movs	r1, r3
 8006718:	f7f9 fd9a 	bl	8000250 <__divsi3>
 800671c:	0003      	movs	r3, r0
 800671e:	b299      	uxth	r1, r3
 8006720:	687b      	ldr	r3, [r7, #4]
 8006722:	2268      	movs	r2, #104	; 0x68
 8006724:	5299      	strh	r1, [r3, r2]
}
 8006726:	46c0      	nop			; (mov r8, r8)
 8006728:	46bd      	mov	sp, r7
 800672a:	b005      	add	sp, #20
 800672c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800672e:	46c0      	nop			; (mov r8, r8)
 8006730:	0800e50c 	.word	0x0800e50c
 8006734:	0800e514 	.word	0x0800e514

08006738 <astronode_send_cfg_sr>:
        }
    }
}

void astronode_send_cfg_sr(void)
{
 8006738:	b5b0      	push	{r4, r5, r7, lr}
 800673a:	b0e4      	sub	sp, #400	; 0x190
 800673c:	af00      	add	r7, sp, #0
    astronode_app_msg_t request = {0};
 800673e:	24c8      	movs	r4, #200	; 0xc8
 8006740:	193b      	adds	r3, r7, r4
 8006742:	0018      	movs	r0, r3
 8006744:	23c6      	movs	r3, #198	; 0xc6
 8006746:	001a      	movs	r2, r3
 8006748:	2100      	movs	r1, #0
 800674a:	f001 fcef 	bl	800812c <memset>
    astronode_app_msg_t answer = {0};
 800674e:	4b13      	ldr	r3, [pc, #76]	; (800679c <astronode_send_cfg_sr+0x64>)
 8006750:	25c8      	movs	r5, #200	; 0xc8
 8006752:	006d      	lsls	r5, r5, #1
 8006754:	195b      	adds	r3, r3, r5
 8006756:	19db      	adds	r3, r3, r7
 8006758:	0018      	movs	r0, r3
 800675a:	23c6      	movs	r3, #198	; 0xc6
 800675c:	001a      	movs	r2, r3
 800675e:	2100      	movs	r1, #0
 8006760:	f001 fce4 	bl	800812c <memset>

    request.op_code = ASTRONODE_OP_CODE_CFG_SR;
 8006764:	193b      	adds	r3, r7, r4
 8006766:	2210      	movs	r2, #16
 8006768:	701a      	strb	r2, [r3, #0]

    astronode_transport_send_receive(&request, &answer);
 800676a:	003a      	movs	r2, r7
 800676c:	193b      	adds	r3, r7, r4
 800676e:	0011      	movs	r1, r2
 8006770:	0018      	movs	r0, r3
 8006772:	f001 f8e9 	bl	8007948 <astronode_transport_send_receive>

    if (answer.op_code == ASTRONODE_OP_CODE_CFG_SA)
 8006776:	4b09      	ldr	r3, [pc, #36]	; (800679c <astronode_send_cfg_sr+0x64>)
 8006778:	195b      	adds	r3, r3, r5
 800677a:	19db      	adds	r3, r3, r7
 800677c:	781b      	ldrb	r3, [r3, #0]
 800677e:	2b90      	cmp	r3, #144	; 0x90
 8006780:	d104      	bne.n	800678c <astronode_send_cfg_sr+0x54>
    {
        send_debug_logs("Astronode configuration successfully saved in NVM.");
 8006782:	4b07      	ldr	r3, [pc, #28]	; (80067a0 <astronode_send_cfg_sr+0x68>)
 8006784:	0018      	movs	r0, r3
 8006786:	f7fc f8b1 	bl	80028ec <send_debug_logs>
    }
    else
    {
        send_debug_logs("Failed to save the Astronode configuration in NVM.");
    }
}
 800678a:	e003      	b.n	8006794 <astronode_send_cfg_sr+0x5c>
        send_debug_logs("Failed to save the Astronode configuration in NVM.");
 800678c:	4b05      	ldr	r3, [pc, #20]	; (80067a4 <astronode_send_cfg_sr+0x6c>)
 800678e:	0018      	movs	r0, r3
 8006790:	f7fc f8ac 	bl	80028ec <send_debug_logs>
}
 8006794:	46c0      	nop			; (mov r8, r8)
 8006796:	46bd      	mov	sp, r7
 8006798:	b064      	add	sp, #400	; 0x190
 800679a:	bdb0      	pop	{r4, r5, r7, pc}
 800679c:	fffffe70 	.word	0xfffffe70
 80067a0:	0800d0ac 	.word	0x0800d0ac
 80067a4:	0800d0e0 	.word	0x0800d0e0

080067a8 <astronode_send_cfg_wr>:
                            bool deep_sleep_mode,
                            bool message_ack_event_pin_mask,
                            bool reset_notification_event_pin_mask,
							bool command_available_event_pin_mask,
							bool message_tx_event_pin_mask)
{
 80067a8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80067aa:	b0e7      	sub	sp, #412	; 0x19c
 80067ac:	af00      	add	r7, sp, #0
 80067ae:	0005      	movs	r5, r0
 80067b0:	000c      	movs	r4, r1
 80067b2:	0010      	movs	r0, r2
 80067b4:	0019      	movs	r1, r3
 80067b6:	4b4b      	ldr	r3, [pc, #300]	; (80068e4 <astronode_send_cfg_wr+0x13c>)
 80067b8:	26cc      	movs	r6, #204	; 0xcc
 80067ba:	0076      	lsls	r6, r6, #1
 80067bc:	199b      	adds	r3, r3, r6
 80067be:	19db      	adds	r3, r3, r7
 80067c0:	1c2a      	adds	r2, r5, #0
 80067c2:	701a      	strb	r2, [r3, #0]
 80067c4:	4b48      	ldr	r3, [pc, #288]	; (80068e8 <astronode_send_cfg_wr+0x140>)
 80067c6:	0035      	movs	r5, r6
 80067c8:	195b      	adds	r3, r3, r5
 80067ca:	19db      	adds	r3, r3, r7
 80067cc:	1c22      	adds	r2, r4, #0
 80067ce:	701a      	strb	r2, [r3, #0]
 80067d0:	4b46      	ldr	r3, [pc, #280]	; (80068ec <astronode_send_cfg_wr+0x144>)
 80067d2:	002c      	movs	r4, r5
 80067d4:	191b      	adds	r3, r3, r4
 80067d6:	19db      	adds	r3, r3, r7
 80067d8:	1c02      	adds	r2, r0, #0
 80067da:	701a      	strb	r2, [r3, #0]
 80067dc:	4b44      	ldr	r3, [pc, #272]	; (80068f0 <astronode_send_cfg_wr+0x148>)
 80067de:	191b      	adds	r3, r3, r4
 80067e0:	19db      	adds	r3, r3, r7
 80067e2:	1c0a      	adds	r2, r1, #0
 80067e4:	701a      	strb	r2, [r3, #0]
    astronode_app_msg_t request = {0};
 80067e6:	25d0      	movs	r5, #208	; 0xd0
 80067e8:	197b      	adds	r3, r7, r5
 80067ea:	0018      	movs	r0, r3
 80067ec:	23c6      	movs	r3, #198	; 0xc6
 80067ee:	001a      	movs	r2, r3
 80067f0:	2100      	movs	r1, #0
 80067f2:	f001 fc9b 	bl	800812c <memset>
    astronode_app_msg_t answer = {0};
 80067f6:	4b3f      	ldr	r3, [pc, #252]	; (80068f4 <astronode_send_cfg_wr+0x14c>)
 80067f8:	191b      	adds	r3, r3, r4
 80067fa:	19db      	adds	r3, r3, r7
 80067fc:	0018      	movs	r0, r3
 80067fe:	23c6      	movs	r3, #198	; 0xc6
 8006800:	001a      	movs	r2, r3
 8006802:	2100      	movs	r1, #0
 8006804:	f001 fc92 	bl	800812c <memset>

    request.op_code = ASTRONODE_OP_CODE_CFG_WR;
 8006808:	0029      	movs	r1, r5
 800680a:	187b      	adds	r3, r7, r1
 800680c:	2205      	movs	r2, #5
 800680e:	701a      	strb	r2, [r3, #0]

    request.p_payload[ASTRONODE_BYTE_OFFSET_CFG_WR_CONFIG] = payload_acknowledgment << ASTRONODE_BIT_OFFSET_PAYLOAD_ACK
        | add_geolocation << ASTRONODE_BIT_OFFSET_ADD_GEO
 8006810:	4b34      	ldr	r3, [pc, #208]	; (80068e4 <astronode_send_cfg_wr+0x13c>)
 8006812:	191b      	adds	r3, r3, r4
 8006814:	19db      	adds	r3, r3, r7
 8006816:	2200      	movs	r2, #0
 8006818:	569a      	ldrsb	r2, [r3, r2]
 800681a:	4b33      	ldr	r3, [pc, #204]	; (80068e8 <astronode_send_cfg_wr+0x140>)
 800681c:	191b      	adds	r3, r3, r4
 800681e:	19db      	adds	r3, r3, r7
 8006820:	781b      	ldrb	r3, [r3, #0]
 8006822:	005b      	lsls	r3, r3, #1
 8006824:	b25b      	sxtb	r3, r3
 8006826:	4313      	orrs	r3, r2
 8006828:	b25a      	sxtb	r2, r3
        | enable_ephemeris << ASTRONODE_BIT_OFFSET_ENABLE_EPH
 800682a:	4b30      	ldr	r3, [pc, #192]	; (80068ec <astronode_send_cfg_wr+0x144>)
 800682c:	191b      	adds	r3, r3, r4
 800682e:	19db      	adds	r3, r3, r7
 8006830:	781b      	ldrb	r3, [r3, #0]
 8006832:	009b      	lsls	r3, r3, #2
 8006834:	b25b      	sxtb	r3, r3
 8006836:	4313      	orrs	r3, r2
 8006838:	b25a      	sxtb	r2, r3
        | deep_sleep_mode << ASTRONODE_BIT_OFFSET_DEEP_SLEEP_MODE;
 800683a:	4b2d      	ldr	r3, [pc, #180]	; (80068f0 <astronode_send_cfg_wr+0x148>)
 800683c:	191b      	adds	r3, r3, r4
 800683e:	19db      	adds	r3, r3, r7
 8006840:	781b      	ldrb	r3, [r3, #0]
 8006842:	00db      	lsls	r3, r3, #3
 8006844:	b25b      	sxtb	r3, r3
 8006846:	4313      	orrs	r3, r2
 8006848:	b25b      	sxtb	r3, r3
 800684a:	b2da      	uxtb	r2, r3
    request.p_payload[ASTRONODE_BYTE_OFFSET_CFG_WR_CONFIG] = payload_acknowledgment << ASTRONODE_BIT_OFFSET_PAYLOAD_ACK
 800684c:	187b      	adds	r3, r7, r1
 800684e:	705a      	strb	r2, [r3, #1]

    request.p_payload[ASTRONODE_BYTE_OFFSET_CFG_WR_EVT_PIN_MASK] = message_ack_event_pin_mask << ASTRONODE_BIT_OFFSET_MSG_ACK_EVT_PIN_MASK
        | reset_notification_event_pin_mask << ASTRONODE_BIT_OFFSET_RST_NTF_EVT_PIN_MASK
 8006850:	23d4      	movs	r3, #212	; 0xd4
 8006852:	005b      	lsls	r3, r3, #1
 8006854:	2508      	movs	r5, #8
 8006856:	195b      	adds	r3, r3, r5
 8006858:	19db      	adds	r3, r3, r7
 800685a:	2200      	movs	r2, #0
 800685c:	569a      	ldrsb	r2, [r3, r2]
 800685e:	23d6      	movs	r3, #214	; 0xd6
 8006860:	005b      	lsls	r3, r3, #1
 8006862:	195b      	adds	r3, r3, r5
 8006864:	19db      	adds	r3, r3, r7
 8006866:	781b      	ldrb	r3, [r3, #0]
 8006868:	005b      	lsls	r3, r3, #1
 800686a:	b25b      	sxtb	r3, r3
 800686c:	4313      	orrs	r3, r2
 800686e:	b25a      	sxtb	r2, r3
        | command_available_event_pin_mask << ASTRONODE_BIT_OFFSET_CMD_AVA_EVT_PIN_MASK
 8006870:	23d8      	movs	r3, #216	; 0xd8
 8006872:	005b      	lsls	r3, r3, #1
 8006874:	195b      	adds	r3, r3, r5
 8006876:	19db      	adds	r3, r3, r7
 8006878:	781b      	ldrb	r3, [r3, #0]
 800687a:	009b      	lsls	r3, r3, #2
 800687c:	b25b      	sxtb	r3, r3
 800687e:	4313      	orrs	r3, r2
 8006880:	b25a      	sxtb	r2, r3
        | message_tx_event_pin_mask << ASTRONODE_BIT_OFFSET_MSG_TXP_EVT_PIN_MASK;
 8006882:	23da      	movs	r3, #218	; 0xda
 8006884:	005b      	lsls	r3, r3, #1
 8006886:	195b      	adds	r3, r3, r5
 8006888:	19db      	adds	r3, r3, r7
 800688a:	781b      	ldrb	r3, [r3, #0]
 800688c:	00db      	lsls	r3, r3, #3
 800688e:	b25b      	sxtb	r3, r3
 8006890:	4313      	orrs	r3, r2
 8006892:	b25b      	sxtb	r3, r3
 8006894:	b2da      	uxtb	r2, r3
    request.p_payload[ASTRONODE_BYTE_OFFSET_CFG_WR_EVT_PIN_MASK] = message_ack_event_pin_mask << ASTRONODE_BIT_OFFSET_MSG_ACK_EVT_PIN_MASK
 8006896:	187b      	adds	r3, r7, r1
 8006898:	70da      	strb	r2, [r3, #3]

    request.payload_len = 3;
 800689a:	0008      	movs	r0, r1
 800689c:	187b      	adds	r3, r7, r1
 800689e:	22c4      	movs	r2, #196	; 0xc4
 80068a0:	2103      	movs	r1, #3
 80068a2:	5299      	strh	r1, [r3, r2]

    if (astronode_transport_send_receive(&request, &answer) == RS_SUCCESS)
 80068a4:	002b      	movs	r3, r5
 80068a6:	18fa      	adds	r2, r7, r3
 80068a8:	183b      	adds	r3, r7, r0
 80068aa:	0011      	movs	r1, r2
 80068ac:	0018      	movs	r0, r3
 80068ae:	f001 f84b 	bl	8007948 <astronode_transport_send_receive>
 80068b2:	0003      	movs	r3, r0
 80068b4:	2b01      	cmp	r3, #1
 80068b6:	d10f      	bne.n	80068d8 <astronode_send_cfg_wr+0x130>
    {
        if (answer.op_code == ASTRONODE_OP_CODE_CFG_WA)
 80068b8:	4b0e      	ldr	r3, [pc, #56]	; (80068f4 <astronode_send_cfg_wr+0x14c>)
 80068ba:	191b      	adds	r3, r3, r4
 80068bc:	19db      	adds	r3, r3, r7
 80068be:	781b      	ldrb	r3, [r3, #0]
 80068c0:	2b85      	cmp	r3, #133	; 0x85
 80068c2:	d105      	bne.n	80068d0 <astronode_send_cfg_wr+0x128>
        {
            send_debug_logs("Astronode configuration successfully set.");
 80068c4:	4b0c      	ldr	r3, [pc, #48]	; (80068f8 <astronode_send_cfg_wr+0x150>)
 80068c6:	0018      	movs	r0, r3
 80068c8:	f7fc f810 	bl	80028ec <send_debug_logs>
            return true ;
 80068cc:	2301      	movs	r3, #1
 80068ce:	e004      	b.n	80068da <astronode_send_cfg_wr+0x132>
        }
        else
        {
            send_debug_logs("Failed to set the Astronode configuration.");
 80068d0:	4b0a      	ldr	r3, [pc, #40]	; (80068fc <astronode_send_cfg_wr+0x154>)
 80068d2:	0018      	movs	r0, r3
 80068d4:	f7fc f80a 	bl	80028ec <send_debug_logs>
        }
    }
    return false ;
 80068d8:	2300      	movs	r3, #0
}
 80068da:	0018      	movs	r0, r3
 80068dc:	46bd      	mov	sp, r7
 80068de:	b067      	add	sp, #412	; 0x19c
 80068e0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80068e2:	46c0      	nop			; (mov r8, r8)
 80068e4:	fffffe6f 	.word	0xfffffe6f
 80068e8:	fffffe6e 	.word	0xfffffe6e
 80068ec:	fffffe6d 	.word	0xfffffe6d
 80068f0:	fffffe6c 	.word	0xfffffe6c
 80068f4:	fffffe70 	.word	0xfffffe70
 80068f8:	0800d114 	.word	0x0800d114
 80068fc:	0800d140 	.word	0x0800d140

08006900 <astronode_send_mgi_rr>:
        send_debug_logs("Failed to save the Astronode context in NVM.");
    }
}

void astronode_send_mgi_rr(void)
{
 8006900:	b5f0      	push	{r4, r5, r6, r7, lr}
 8006902:	b0ed      	sub	sp, #436	; 0x1b4
 8006904:	af00      	add	r7, sp, #0
    astronode_app_msg_t request = {0};
 8006906:	21c8      	movs	r1, #200	; 0xc8
 8006908:	2318      	movs	r3, #24
 800690a:	18cb      	adds	r3, r1, r3
 800690c:	19db      	adds	r3, r3, r7
 800690e:	0018      	movs	r0, r3
 8006910:	23c6      	movs	r3, #198	; 0xc6
 8006912:	001a      	movs	r2, r3
 8006914:	2100      	movs	r1, #0
 8006916:	f001 fc09 	bl	800812c <memset>
    astronode_app_msg_t answer = {0};
 800691a:	4b4a      	ldr	r3, [pc, #296]	; (8006a44 <astronode_send_mgi_rr+0x144>)
 800691c:	26cc      	movs	r6, #204	; 0xcc
 800691e:	0076      	lsls	r6, r6, #1
 8006920:	199b      	adds	r3, r3, r6
 8006922:	2218      	movs	r2, #24
 8006924:	4694      	mov	ip, r2
 8006926:	44bc      	add	ip, r7
 8006928:	4463      	add	r3, ip
 800692a:	0018      	movs	r0, r3
 800692c:	23c6      	movs	r3, #198	; 0xc6
 800692e:	001a      	movs	r2, r3
 8006930:	2100      	movs	r1, #0
 8006932:	f001 fbfb 	bl	800812c <memset>

    request.op_code = ASTRONODE_OP_CODE_MGI_RR;
 8006936:	21c8      	movs	r1, #200	; 0xc8
 8006938:	2318      	movs	r3, #24
 800693a:	18cb      	adds	r3, r1, r3
 800693c:	19db      	adds	r3, r3, r7
 800693e:	2219      	movs	r2, #25
 8006940:	701a      	strb	r2, [r3, #0]

    if (astronode_transport_send_receive(&request, &answer) == RS_SUCCESS)
 8006942:	2318      	movs	r3, #24
 8006944:	18fa      	adds	r2, r7, r3
 8006946:	2318      	movs	r3, #24
 8006948:	18cb      	adds	r3, r1, r3
 800694a:	19db      	adds	r3, r3, r7
 800694c:	0011      	movs	r1, r2
 800694e:	0018      	movs	r0, r3
 8006950:	f000 fffa 	bl	8007948 <astronode_transport_send_receive>
 8006954:	0003      	movs	r3, r0
 8006956:	2b01      	cmp	r3, #1
 8006958:	d16f      	bne.n	8006a3a <astronode_send_mgi_rr+0x13a>
    {
        if (answer.op_code == ASTRONODE_OP_CODE_MGI_RA)
 800695a:	4b3a      	ldr	r3, [pc, #232]	; (8006a44 <astronode_send_mgi_rr+0x144>)
 800695c:	0032      	movs	r2, r6
 800695e:	189b      	adds	r3, r3, r2
 8006960:	2118      	movs	r1, #24
 8006962:	468c      	mov	ip, r1
 8006964:	44bc      	add	ip, r7
 8006966:	4463      	add	r3, ip
 8006968:	781b      	ldrb	r3, [r3, #0]
 800696a:	2b99      	cmp	r3, #153	; 0x99
 800696c:	d161      	bne.n	8006a32 <astronode_send_mgi_rr+0x132>
        {
 800696e:	466b      	mov	r3, sp
 8006970:	001e      	movs	r6, r3
            char guid[answer.payload_len];
 8006972:	4b34      	ldr	r3, [pc, #208]	; (8006a44 <astronode_send_mgi_rr+0x144>)
 8006974:	189b      	adds	r3, r3, r2
 8006976:	2218      	movs	r2, #24
 8006978:	4694      	mov	ip, r2
 800697a:	44bc      	add	ip, r7
 800697c:	4463      	add	r3, ip
 800697e:	22c4      	movs	r2, #196	; 0xc4
 8006980:	5a9b      	ldrh	r3, [r3, r2]
 8006982:	001a      	movs	r2, r3
 8006984:	3a01      	subs	r2, #1
 8006986:	21ca      	movs	r1, #202	; 0xca
 8006988:	0049      	lsls	r1, r1, #1
 800698a:	2018      	movs	r0, #24
 800698c:	1809      	adds	r1, r1, r0
 800698e:	19c9      	adds	r1, r1, r7
 8006990:	600a      	str	r2, [r1, #0]
 8006992:	001c      	movs	r4, r3
 8006994:	2200      	movs	r2, #0
 8006996:	0015      	movs	r5, r2
 8006998:	0020      	movs	r0, r4
 800699a:	0029      	movs	r1, r5
 800699c:	0004      	movs	r4, r0
 800699e:	0f62      	lsrs	r2, r4, #29
 80069a0:	000c      	movs	r4, r1
 80069a2:	00e4      	lsls	r4, r4, #3
 80069a4:	617c      	str	r4, [r7, #20]
 80069a6:	697c      	ldr	r4, [r7, #20]
 80069a8:	4314      	orrs	r4, r2
 80069aa:	617c      	str	r4, [r7, #20]
 80069ac:	0001      	movs	r1, r0
 80069ae:	00c9      	lsls	r1, r1, #3
 80069b0:	6139      	str	r1, [r7, #16]
 80069b2:	603b      	str	r3, [r7, #0]
 80069b4:	2200      	movs	r2, #0
 80069b6:	607a      	str	r2, [r7, #4]
 80069b8:	6838      	ldr	r0, [r7, #0]
 80069ba:	6879      	ldr	r1, [r7, #4]
 80069bc:	0004      	movs	r4, r0
 80069be:	0f62      	lsrs	r2, r4, #29
 80069c0:	000c      	movs	r4, r1
 80069c2:	00e4      	lsls	r4, r4, #3
 80069c4:	60fc      	str	r4, [r7, #12]
 80069c6:	68fc      	ldr	r4, [r7, #12]
 80069c8:	4314      	orrs	r4, r2
 80069ca:	60fc      	str	r4, [r7, #12]
 80069cc:	0001      	movs	r1, r0
 80069ce:	00ca      	lsls	r2, r1, #3
 80069d0:	60ba      	str	r2, [r7, #8]
 80069d2:	3307      	adds	r3, #7
 80069d4:	08db      	lsrs	r3, r3, #3
 80069d6:	00db      	lsls	r3, r3, #3
 80069d8:	4669      	mov	r1, sp
 80069da:	1acb      	subs	r3, r1, r3
 80069dc:	469d      	mov	sp, r3
 80069de:	466b      	mov	r3, sp
 80069e0:	3300      	adds	r3, #0
 80069e2:	24c8      	movs	r4, #200	; 0xc8
 80069e4:	0064      	lsls	r4, r4, #1
 80069e6:	2218      	movs	r2, #24
 80069e8:	18a2      	adds	r2, r4, r2
 80069ea:	19d1      	adds	r1, r2, r7
 80069ec:	600b      	str	r3, [r1, #0]
            send_debug_logs("Module GUID is:");
 80069ee:	4b16      	ldr	r3, [pc, #88]	; (8006a48 <astronode_send_mgi_rr+0x148>)
 80069f0:	0018      	movs	r0, r3
 80069f2:	f7fb ff7b 	bl	80028ec <send_debug_logs>
            snprintf(guid, answer.payload_len, "%s", answer.p_payload);
 80069f6:	4b13      	ldr	r3, [pc, #76]	; (8006a44 <astronode_send_mgi_rr+0x144>)
 80069f8:	22cc      	movs	r2, #204	; 0xcc
 80069fa:	0052      	lsls	r2, r2, #1
 80069fc:	189b      	adds	r3, r3, r2
 80069fe:	2218      	movs	r2, #24
 8006a00:	4694      	mov	ip, r2
 8006a02:	44bc      	add	ip, r7
 8006a04:	4463      	add	r3, ip
 8006a06:	22c4      	movs	r2, #196	; 0xc4
 8006a08:	5a9b      	ldrh	r3, [r3, r2]
 8006a0a:	0019      	movs	r1, r3
 8006a0c:	2318      	movs	r3, #24
 8006a0e:	18fb      	adds	r3, r7, r3
 8006a10:	3301      	adds	r3, #1
 8006a12:	4a0e      	ldr	r2, [pc, #56]	; (8006a4c <astronode_send_mgi_rr+0x14c>)
 8006a14:	2018      	movs	r0, #24
 8006a16:	1820      	adds	r0, r4, r0
 8006a18:	19c0      	adds	r0, r0, r7
 8006a1a:	6800      	ldr	r0, [r0, #0]
 8006a1c:	f001 fae6 	bl	8007fec <snprintf>
            send_debug_logs(guid);
 8006a20:	2318      	movs	r3, #24
 8006a22:	18e3      	adds	r3, r4, r3
 8006a24:	19db      	adds	r3, r3, r7
 8006a26:	681b      	ldr	r3, [r3, #0]
 8006a28:	0018      	movs	r0, r3
 8006a2a:	f7fb ff5f 	bl	80028ec <send_debug_logs>
 8006a2e:	46b5      	mov	sp, r6
        else
        {
            send_debug_logs("Failed to read module GUID.");
        }
    }
}
 8006a30:	e003      	b.n	8006a3a <astronode_send_mgi_rr+0x13a>
            send_debug_logs("Failed to read module GUID.");
 8006a32:	4b07      	ldr	r3, [pc, #28]	; (8006a50 <astronode_send_mgi_rr+0x150>)
 8006a34:	0018      	movs	r0, r3
 8006a36:	f7fb ff59 	bl	80028ec <send_debug_logs>
}
 8006a3a:	46c0      	nop			; (mov r8, r8)
 8006a3c:	46bd      	mov	sp, r7
 8006a3e:	b06d      	add	sp, #436	; 0x1b4
 8006a40:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8006a42:	46c0      	nop			; (mov r8, r8)
 8006a44:	fffffe68 	.word	0xfffffe68
 8006a48:	0800d1cc 	.word	0x0800d1cc
 8006a4c:	0800d1dc 	.word	0x0800d1dc
 8006a50:	0800d1e0 	.word	0x0800d1e0

08006a54 <astronode_send_msn_rr>:

void astronode_send_msn_rr(void)
{
 8006a54:	b5f0      	push	{r4, r5, r6, r7, lr}
 8006a56:	b0ed      	sub	sp, #436	; 0x1b4
 8006a58:	af00      	add	r7, sp, #0
    astronode_app_msg_t request = {0};
 8006a5a:	21c8      	movs	r1, #200	; 0xc8
 8006a5c:	2318      	movs	r3, #24
 8006a5e:	18cb      	adds	r3, r1, r3
 8006a60:	19db      	adds	r3, r3, r7
 8006a62:	0018      	movs	r0, r3
 8006a64:	23c6      	movs	r3, #198	; 0xc6
 8006a66:	001a      	movs	r2, r3
 8006a68:	2100      	movs	r1, #0
 8006a6a:	f001 fb5f 	bl	800812c <memset>
    astronode_app_msg_t answer = {0};
 8006a6e:	4b4a      	ldr	r3, [pc, #296]	; (8006b98 <astronode_send_msn_rr+0x144>)
 8006a70:	26cc      	movs	r6, #204	; 0xcc
 8006a72:	0076      	lsls	r6, r6, #1
 8006a74:	199b      	adds	r3, r3, r6
 8006a76:	2218      	movs	r2, #24
 8006a78:	4694      	mov	ip, r2
 8006a7a:	44bc      	add	ip, r7
 8006a7c:	4463      	add	r3, ip
 8006a7e:	0018      	movs	r0, r3
 8006a80:	23c6      	movs	r3, #198	; 0xc6
 8006a82:	001a      	movs	r2, r3
 8006a84:	2100      	movs	r1, #0
 8006a86:	f001 fb51 	bl	800812c <memset>

    request.op_code = ASTRONODE_OP_CODE_MSN_RR;
 8006a8a:	21c8      	movs	r1, #200	; 0xc8
 8006a8c:	2318      	movs	r3, #24
 8006a8e:	18cb      	adds	r3, r1, r3
 8006a90:	19db      	adds	r3, r3, r7
 8006a92:	221a      	movs	r2, #26
 8006a94:	701a      	strb	r2, [r3, #0]

    if (astronode_transport_send_receive(&request, &answer) == RS_SUCCESS)
 8006a96:	2318      	movs	r3, #24
 8006a98:	18fa      	adds	r2, r7, r3
 8006a9a:	2318      	movs	r3, #24
 8006a9c:	18cb      	adds	r3, r1, r3
 8006a9e:	19db      	adds	r3, r3, r7
 8006aa0:	0011      	movs	r1, r2
 8006aa2:	0018      	movs	r0, r3
 8006aa4:	f000 ff50 	bl	8007948 <astronode_transport_send_receive>
 8006aa8:	0003      	movs	r3, r0
 8006aaa:	2b01      	cmp	r3, #1
 8006aac:	d16f      	bne.n	8006b8e <astronode_send_msn_rr+0x13a>
    {
        if (answer.op_code == ASTRONODE_OP_CODE_MSN_RA)
 8006aae:	4b3a      	ldr	r3, [pc, #232]	; (8006b98 <astronode_send_msn_rr+0x144>)
 8006ab0:	0032      	movs	r2, r6
 8006ab2:	189b      	adds	r3, r3, r2
 8006ab4:	2118      	movs	r1, #24
 8006ab6:	468c      	mov	ip, r1
 8006ab8:	44bc      	add	ip, r7
 8006aba:	4463      	add	r3, ip
 8006abc:	781b      	ldrb	r3, [r3, #0]
 8006abe:	2b9a      	cmp	r3, #154	; 0x9a
 8006ac0:	d161      	bne.n	8006b86 <astronode_send_msn_rr+0x132>
        {
 8006ac2:	466b      	mov	r3, sp
 8006ac4:	001e      	movs	r6, r3
            char serial_number[answer.payload_len];
 8006ac6:	4b34      	ldr	r3, [pc, #208]	; (8006b98 <astronode_send_msn_rr+0x144>)
 8006ac8:	189b      	adds	r3, r3, r2
 8006aca:	2218      	movs	r2, #24
 8006acc:	4694      	mov	ip, r2
 8006ace:	44bc      	add	ip, r7
 8006ad0:	4463      	add	r3, ip
 8006ad2:	22c4      	movs	r2, #196	; 0xc4
 8006ad4:	5a9b      	ldrh	r3, [r3, r2]
 8006ad6:	001a      	movs	r2, r3
 8006ad8:	3a01      	subs	r2, #1
 8006ada:	21ca      	movs	r1, #202	; 0xca
 8006adc:	0049      	lsls	r1, r1, #1
 8006ade:	2018      	movs	r0, #24
 8006ae0:	1809      	adds	r1, r1, r0
 8006ae2:	19c9      	adds	r1, r1, r7
 8006ae4:	600a      	str	r2, [r1, #0]
 8006ae6:	001c      	movs	r4, r3
 8006ae8:	2200      	movs	r2, #0
 8006aea:	0015      	movs	r5, r2
 8006aec:	0020      	movs	r0, r4
 8006aee:	0029      	movs	r1, r5
 8006af0:	0004      	movs	r4, r0
 8006af2:	0f62      	lsrs	r2, r4, #29
 8006af4:	000c      	movs	r4, r1
 8006af6:	00e4      	lsls	r4, r4, #3
 8006af8:	617c      	str	r4, [r7, #20]
 8006afa:	697c      	ldr	r4, [r7, #20]
 8006afc:	4314      	orrs	r4, r2
 8006afe:	617c      	str	r4, [r7, #20]
 8006b00:	0001      	movs	r1, r0
 8006b02:	00c9      	lsls	r1, r1, #3
 8006b04:	6139      	str	r1, [r7, #16]
 8006b06:	603b      	str	r3, [r7, #0]
 8006b08:	2200      	movs	r2, #0
 8006b0a:	607a      	str	r2, [r7, #4]
 8006b0c:	6838      	ldr	r0, [r7, #0]
 8006b0e:	6879      	ldr	r1, [r7, #4]
 8006b10:	0004      	movs	r4, r0
 8006b12:	0f62      	lsrs	r2, r4, #29
 8006b14:	000c      	movs	r4, r1
 8006b16:	00e4      	lsls	r4, r4, #3
 8006b18:	60fc      	str	r4, [r7, #12]
 8006b1a:	68fc      	ldr	r4, [r7, #12]
 8006b1c:	4314      	orrs	r4, r2
 8006b1e:	60fc      	str	r4, [r7, #12]
 8006b20:	0001      	movs	r1, r0
 8006b22:	00ca      	lsls	r2, r1, #3
 8006b24:	60ba      	str	r2, [r7, #8]
 8006b26:	3307      	adds	r3, #7
 8006b28:	08db      	lsrs	r3, r3, #3
 8006b2a:	00db      	lsls	r3, r3, #3
 8006b2c:	4669      	mov	r1, sp
 8006b2e:	1acb      	subs	r3, r1, r3
 8006b30:	469d      	mov	sp, r3
 8006b32:	466b      	mov	r3, sp
 8006b34:	3300      	adds	r3, #0
 8006b36:	24c8      	movs	r4, #200	; 0xc8
 8006b38:	0064      	lsls	r4, r4, #1
 8006b3a:	2218      	movs	r2, #24
 8006b3c:	18a2      	adds	r2, r4, r2
 8006b3e:	19d1      	adds	r1, r2, r7
 8006b40:	600b      	str	r3, [r1, #0]
            send_debug_logs("Module's Serial Number is:");
 8006b42:	4b16      	ldr	r3, [pc, #88]	; (8006b9c <astronode_send_msn_rr+0x148>)
 8006b44:	0018      	movs	r0, r3
 8006b46:	f7fb fed1 	bl	80028ec <send_debug_logs>
            snprintf(serial_number, answer.payload_len, "%s", answer.p_payload);
 8006b4a:	4b13      	ldr	r3, [pc, #76]	; (8006b98 <astronode_send_msn_rr+0x144>)
 8006b4c:	22cc      	movs	r2, #204	; 0xcc
 8006b4e:	0052      	lsls	r2, r2, #1
 8006b50:	189b      	adds	r3, r3, r2
 8006b52:	2218      	movs	r2, #24
 8006b54:	4694      	mov	ip, r2
 8006b56:	44bc      	add	ip, r7
 8006b58:	4463      	add	r3, ip
 8006b5a:	22c4      	movs	r2, #196	; 0xc4
 8006b5c:	5a9b      	ldrh	r3, [r3, r2]
 8006b5e:	0019      	movs	r1, r3
 8006b60:	2318      	movs	r3, #24
 8006b62:	18fb      	adds	r3, r7, r3
 8006b64:	3301      	adds	r3, #1
 8006b66:	4a0e      	ldr	r2, [pc, #56]	; (8006ba0 <astronode_send_msn_rr+0x14c>)
 8006b68:	2018      	movs	r0, #24
 8006b6a:	1820      	adds	r0, r4, r0
 8006b6c:	19c0      	adds	r0, r0, r7
 8006b6e:	6800      	ldr	r0, [r0, #0]
 8006b70:	f001 fa3c 	bl	8007fec <snprintf>
            send_debug_logs(serial_number);
 8006b74:	2318      	movs	r3, #24
 8006b76:	18e3      	adds	r3, r4, r3
 8006b78:	19db      	adds	r3, r3, r7
 8006b7a:	681b      	ldr	r3, [r3, #0]
 8006b7c:	0018      	movs	r0, r3
 8006b7e:	f7fb feb5 	bl	80028ec <send_debug_logs>
 8006b82:	46b5      	mov	sp, r6
        else
        {
            send_debug_logs("Failed to read module Serial Number.");
        }
    }
}
 8006b84:	e003      	b.n	8006b8e <astronode_send_msn_rr+0x13a>
            send_debug_logs("Failed to read module Serial Number.");
 8006b86:	4b07      	ldr	r3, [pc, #28]	; (8006ba4 <astronode_send_msn_rr+0x150>)
 8006b88:	0018      	movs	r0, r3
 8006b8a:	f7fb feaf 	bl	80028ec <send_debug_logs>
}
 8006b8e:	46c0      	nop			; (mov r8, r8)
 8006b90:	46bd      	mov	sp, r7
 8006b92:	b06d      	add	sp, #436	; 0x1b4
 8006b94:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8006b96:	46c0      	nop			; (mov r8, r8)
 8006b98:	fffffe68 	.word	0xfffffe68
 8006b9c:	0800d1fc 	.word	0x0800d1fc
 8006ba0:	0800d1dc 	.word	0x0800d1dc
 8006ba4:	0800d218 	.word	0x0800d218

08006ba8 <astronode_send_evt_rr>:
    }
    return 0xFFFFFFFF ; // Longest possible time
}

void astronode_send_evt_rr(void)
{
 8006ba8:	b5b0      	push	{r4, r5, r7, lr}
 8006baa:	b0e4      	sub	sp, #400	; 0x190
 8006bac:	af00      	add	r7, sp, #0
    astronode_app_msg_t request = {0};
 8006bae:	24c8      	movs	r4, #200	; 0xc8
 8006bb0:	193b      	adds	r3, r7, r4
 8006bb2:	0018      	movs	r0, r3
 8006bb4:	23c6      	movs	r3, #198	; 0xc6
 8006bb6:	001a      	movs	r2, r3
 8006bb8:	2100      	movs	r1, #0
 8006bba:	f001 fab7 	bl	800812c <memset>
    astronode_app_msg_t answer = {0};
 8006bbe:	4b31      	ldr	r3, [pc, #196]	; (8006c84 <astronode_send_evt_rr+0xdc>)
 8006bc0:	25c8      	movs	r5, #200	; 0xc8
 8006bc2:	006d      	lsls	r5, r5, #1
 8006bc4:	195b      	adds	r3, r3, r5
 8006bc6:	19db      	adds	r3, r3, r7
 8006bc8:	0018      	movs	r0, r3
 8006bca:	23c6      	movs	r3, #198	; 0xc6
 8006bcc:	001a      	movs	r2, r3
 8006bce:	2100      	movs	r1, #0
 8006bd0:	f001 faac 	bl	800812c <memset>

    request.op_code = ASTRONODE_OP_CODE_EVT_RR;
 8006bd4:	193b      	adds	r3, r7, r4
 8006bd6:	2265      	movs	r2, #101	; 0x65
 8006bd8:	701a      	strb	r2, [r3, #0]

    if (astronode_transport_send_receive(&request, &answer) == RS_SUCCESS)
 8006bda:	003a      	movs	r2, r7
 8006bdc:	193b      	adds	r3, r7, r4
 8006bde:	0011      	movs	r1, r2
 8006be0:	0018      	movs	r0, r3
 8006be2:	f000 feb1 	bl	8007948 <astronode_transport_send_receive>
 8006be6:	0003      	movs	r3, r0
 8006be8:	2b01      	cmp	r3, #1
 8006bea:	d147      	bne.n	8006c7c <astronode_send_evt_rr+0xd4>
    {
        if (answer.op_code == ASTRONODE_OP_CODE_EVT_RA)
 8006bec:	4b25      	ldr	r3, [pc, #148]	; (8006c84 <astronode_send_evt_rr+0xdc>)
 8006bee:	195b      	adds	r3, r3, r5
 8006bf0:	19db      	adds	r3, r3, r7
 8006bf2:	781b      	ldrb	r3, [r3, #0]
 8006bf4:	2be5      	cmp	r3, #229	; 0xe5
 8006bf6:	d141      	bne.n	8006c7c <astronode_send_evt_rr+0xd4>
        {
            if ((answer.p_payload[ASTRONODE_BYTE_OFFSET_EVT_RR_EVENT]) & (1 << ASTRONODE_BIT_OFFSET_ACK))
 8006bf8:	4b22      	ldr	r3, [pc, #136]	; (8006c84 <astronode_send_evt_rr+0xdc>)
 8006bfa:	195b      	adds	r3, r3, r5
 8006bfc:	19db      	adds	r3, r3, r7
 8006bfe:	785b      	ldrb	r3, [r3, #1]
 8006c00:	001a      	movs	r2, r3
 8006c02:	2301      	movs	r3, #1
 8006c04:	4013      	ands	r3, r2
 8006c06:	d006      	beq.n	8006c16 <astronode_send_evt_rr+0x6e>
            {
                g_is_sak_available = true;
 8006c08:	4b1f      	ldr	r3, [pc, #124]	; (8006c88 <astronode_send_evt_rr+0xe0>)
 8006c0a:	2201      	movs	r2, #1
 8006c0c:	701a      	strb	r2, [r3, #0]
                send_debug_logs("Message acknowledgment available.");
 8006c0e:	4b1f      	ldr	r3, [pc, #124]	; (8006c8c <astronode_send_evt_rr+0xe4>)
 8006c10:	0018      	movs	r0, r3
 8006c12:	f7fb fe6b 	bl	80028ec <send_debug_logs>
            }
            if ((answer.p_payload[ASTRONODE_BYTE_OFFSET_EVT_RR_EVENT]) & (1 << ASTRONODE_BIT_OFFSET_RST))
 8006c16:	4b1b      	ldr	r3, [pc, #108]	; (8006c84 <astronode_send_evt_rr+0xdc>)
 8006c18:	22c8      	movs	r2, #200	; 0xc8
 8006c1a:	0052      	lsls	r2, r2, #1
 8006c1c:	189b      	adds	r3, r3, r2
 8006c1e:	19db      	adds	r3, r3, r7
 8006c20:	785b      	ldrb	r3, [r3, #1]
 8006c22:	001a      	movs	r2, r3
 8006c24:	2302      	movs	r3, #2
 8006c26:	4013      	ands	r3, r2
 8006c28:	d006      	beq.n	8006c38 <astronode_send_evt_rr+0x90>
            {
                g_is_astronode_reset = true;
 8006c2a:	4b19      	ldr	r3, [pc, #100]	; (8006c90 <astronode_send_evt_rr+0xe8>)
 8006c2c:	2201      	movs	r2, #1
 8006c2e:	701a      	strb	r2, [r3, #0]
                send_debug_logs("Astronode has reset.");
 8006c30:	4b18      	ldr	r3, [pc, #96]	; (8006c94 <astronode_send_evt_rr+0xec>)
 8006c32:	0018      	movs	r0, r3
 8006c34:	f7fb fe5a 	bl	80028ec <send_debug_logs>
            }
            if ((answer.p_payload[ASTRONODE_BYTE_OFFSET_EVT_RR_EVENT]) & (1 << ASTRONODE_BIT_OFFSET_CMD))
 8006c38:	4b12      	ldr	r3, [pc, #72]	; (8006c84 <astronode_send_evt_rr+0xdc>)
 8006c3a:	22c8      	movs	r2, #200	; 0xc8
 8006c3c:	0052      	lsls	r2, r2, #1
 8006c3e:	189b      	adds	r3, r3, r2
 8006c40:	19db      	adds	r3, r3, r7
 8006c42:	785b      	ldrb	r3, [r3, #1]
 8006c44:	001a      	movs	r2, r3
 8006c46:	2304      	movs	r3, #4
 8006c48:	4013      	ands	r3, r2
 8006c4a:	d006      	beq.n	8006c5a <astronode_send_evt_rr+0xb2>
            {
                g_is_command_available = true;
 8006c4c:	4b12      	ldr	r3, [pc, #72]	; (8006c98 <astronode_send_evt_rr+0xf0>)
 8006c4e:	2201      	movs	r2, #1
 8006c50:	701a      	strb	r2, [r3, #0]
                send_debug_logs("Command available.");
 8006c52:	4b12      	ldr	r3, [pc, #72]	; (8006c9c <astronode_send_evt_rr+0xf4>)
 8006c54:	0018      	movs	r0, r3
 8006c56:	f7fb fe49 	bl	80028ec <send_debug_logs>
            }
            if ((answer.p_payload[ASTRONODE_BYTE_OFFSET_EVT_RR_EVENT]) & (1 << ASTRONODE_BIT_OFFEST_MSG_TX))
 8006c5a:	4b0a      	ldr	r3, [pc, #40]	; (8006c84 <astronode_send_evt_rr+0xdc>)
 8006c5c:	22c8      	movs	r2, #200	; 0xc8
 8006c5e:	0052      	lsls	r2, r2, #1
 8006c60:	189b      	adds	r3, r3, r2
 8006c62:	19db      	adds	r3, r3, r7
 8006c64:	785b      	ldrb	r3, [r3, #1]
 8006c66:	001a      	movs	r2, r3
 8006c68:	2308      	movs	r3, #8
 8006c6a:	4013      	ands	r3, r2
 8006c6c:	d006      	beq.n	8006c7c <astronode_send_evt_rr+0xd4>
            {
                g_is_tx_msg_pending = true;
 8006c6e:	4b0c      	ldr	r3, [pc, #48]	; (8006ca0 <astronode_send_evt_rr+0xf8>)
 8006c70:	2201      	movs	r2, #1
 8006c72:	701a      	strb	r2, [r3, #0]
                send_debug_logs("TX message pending.");
 8006c74:	4b0b      	ldr	r3, [pc, #44]	; (8006ca4 <astronode_send_evt_rr+0xfc>)
 8006c76:	0018      	movs	r0, r3
 8006c78:	f7fb fe38 	bl	80028ec <send_debug_logs>
            }

        }
    }
}
 8006c7c:	46c0      	nop			; (mov r8, r8)
 8006c7e:	46bd      	mov	sp, r7
 8006c80:	b064      	add	sp, #400	; 0x190
 8006c82:	bdb0      	pop	{r4, r5, r7, pc}
 8006c84:	fffffe70 	.word	0xfffffe70
 8006c88:	2000089c 	.word	0x2000089c
 8006c8c:	0800d2c0 	.word	0x0800d2c0
 8006c90:	2000089d 	.word	0x2000089d
 8006c94:	0800d2e4 	.word	0x0800d2e4
 8006c98:	2000089e 	.word	0x2000089e
 8006c9c:	0800d2fc 	.word	0x0800d2fc
 8006ca0:	2000089f 	.word	0x2000089f
 8006ca4:	0800d310 	.word	0x0800d310

08006ca8 <astronode_send_pld_fr>:
    }
    return false ;
}

void astronode_send_pld_fr(void)
{
 8006ca8:	b5b0      	push	{r4, r5, r7, lr}
 8006caa:	b0e4      	sub	sp, #400	; 0x190
 8006cac:	af00      	add	r7, sp, #0
    astronode_app_msg_t request = {0};
 8006cae:	24c8      	movs	r4, #200	; 0xc8
 8006cb0:	193b      	adds	r3, r7, r4
 8006cb2:	0018      	movs	r0, r3
 8006cb4:	23c6      	movs	r3, #198	; 0xc6
 8006cb6:	001a      	movs	r2, r3
 8006cb8:	2100      	movs	r1, #0
 8006cba:	f001 fa37 	bl	800812c <memset>
    astronode_app_msg_t answer = {0};
 8006cbe:	4b15      	ldr	r3, [pc, #84]	; (8006d14 <astronode_send_pld_fr+0x6c>)
 8006cc0:	25c8      	movs	r5, #200	; 0xc8
 8006cc2:	006d      	lsls	r5, r5, #1
 8006cc4:	195b      	adds	r3, r3, r5
 8006cc6:	19db      	adds	r3, r3, r7
 8006cc8:	0018      	movs	r0, r3
 8006cca:	23c6      	movs	r3, #198	; 0xc6
 8006ccc:	001a      	movs	r2, r3
 8006cce:	2100      	movs	r1, #0
 8006cd0:	f001 fa2c 	bl	800812c <memset>

    request.op_code = ASTRONODE_OP_CODE_PLD_FR;
 8006cd4:	193b      	adds	r3, r7, r4
 8006cd6:	2227      	movs	r2, #39	; 0x27
 8006cd8:	701a      	strb	r2, [r3, #0]

    if (astronode_transport_send_receive(&request, &answer) == RS_SUCCESS)
 8006cda:	003a      	movs	r2, r7
 8006cdc:	193b      	adds	r3, r7, r4
 8006cde:	0011      	movs	r1, r2
 8006ce0:	0018      	movs	r0, r3
 8006ce2:	f000 fe31 	bl	8007948 <astronode_transport_send_receive>
 8006ce6:	0003      	movs	r3, r0
 8006ce8:	2b01      	cmp	r3, #1
 8006cea:	d10e      	bne.n	8006d0a <astronode_send_pld_fr+0x62>
    {
        if (answer.op_code == ASTRONODE_OP_CODE_PLD_FA)
 8006cec:	4b09      	ldr	r3, [pc, #36]	; (8006d14 <astronode_send_pld_fr+0x6c>)
 8006cee:	195b      	adds	r3, r3, r5
 8006cf0:	19db      	adds	r3, r3, r7
 8006cf2:	781b      	ldrb	r3, [r3, #0]
 8006cf4:	2ba7      	cmp	r3, #167	; 0xa7
 8006cf6:	d104      	bne.n	8006d02 <astronode_send_pld_fr+0x5a>
        {
            send_debug_logs("astronode_application: payload queue has been cleared.");
 8006cf8:	4b07      	ldr	r3, [pc, #28]	; (8006d18 <astronode_send_pld_fr+0x70>)
 8006cfa:	0018      	movs	r0, r3
 8006cfc:	f7fb fdf6 	bl	80028ec <send_debug_logs>
        else
        {
            send_debug_logs("astronode_application: Failed to clear the payload queue.");
        }
    }
}
 8006d00:	e003      	b.n	8006d0a <astronode_send_pld_fr+0x62>
            send_debug_logs("astronode_application: Failed to clear the payload queue.");
 8006d02:	4b06      	ldr	r3, [pc, #24]	; (8006d1c <astronode_send_pld_fr+0x74>)
 8006d04:	0018      	movs	r0, r3
 8006d06:	f7fb fdf1 	bl	80028ec <send_debug_logs>
}
 8006d0a:	46c0      	nop			; (mov r8, r8)
 8006d0c:	46bd      	mov	sp, r7
 8006d0e:	b064      	add	sp, #400	; 0x190
 8006d10:	bdb0      	pop	{r4, r5, r7, pc}
 8006d12:	46c0      	nop			; (mov r8, r8)
 8006d14:	fffffe70 	.word	0xfffffe70
 8006d18:	0800d424 	.word	0x0800d424
 8006d1c:	0800d45c 	.word	0x0800d45c

08006d20 <astronode_send_res_cr>:

void astronode_send_res_cr(void)
{
 8006d20:	b5b0      	push	{r4, r5, r7, lr}
 8006d22:	b0e4      	sub	sp, #400	; 0x190
 8006d24:	af00      	add	r7, sp, #0
    astronode_app_msg_t request = {0};
 8006d26:	24c8      	movs	r4, #200	; 0xc8
 8006d28:	193b      	adds	r3, r7, r4
 8006d2a:	0018      	movs	r0, r3
 8006d2c:	23c6      	movs	r3, #198	; 0xc6
 8006d2e:	001a      	movs	r2, r3
 8006d30:	2100      	movs	r1, #0
 8006d32:	f001 f9fb 	bl	800812c <memset>
    astronode_app_msg_t answer = {0};
 8006d36:	4b16      	ldr	r3, [pc, #88]	; (8006d90 <astronode_send_res_cr+0x70>)
 8006d38:	25c8      	movs	r5, #200	; 0xc8
 8006d3a:	006d      	lsls	r5, r5, #1
 8006d3c:	195b      	adds	r3, r3, r5
 8006d3e:	19db      	adds	r3, r3, r7
 8006d40:	0018      	movs	r0, r3
 8006d42:	23c6      	movs	r3, #198	; 0xc6
 8006d44:	001a      	movs	r2, r3
 8006d46:	2100      	movs	r1, #0
 8006d48:	f001 f9f0 	bl	800812c <memset>

    request.op_code = ASTRONODE_OP_CODE_RES_CR;
 8006d4c:	193b      	adds	r3, r7, r4
 8006d4e:	2255      	movs	r2, #85	; 0x55
 8006d50:	701a      	strb	r2, [r3, #0]

    if (astronode_transport_send_receive(&request, &answer) == RS_SUCCESS)
 8006d52:	003a      	movs	r2, r7
 8006d54:	193b      	adds	r3, r7, r4
 8006d56:	0011      	movs	r1, r2
 8006d58:	0018      	movs	r0, r3
 8006d5a:	f000 fdf5 	bl	8007948 <astronode_transport_send_receive>
 8006d5e:	0003      	movs	r3, r0
 8006d60:	2b01      	cmp	r3, #1
 8006d62:	d111      	bne.n	8006d88 <astronode_send_res_cr+0x68>
    {
        if (answer.op_code == ASTRONODE_OP_CODE_RES_CA)
 8006d64:	4b0a      	ldr	r3, [pc, #40]	; (8006d90 <astronode_send_res_cr+0x70>)
 8006d66:	195b      	adds	r3, r3, r5
 8006d68:	19db      	adds	r3, r3, r7
 8006d6a:	781b      	ldrb	r3, [r3, #0]
 8006d6c:	2bd5      	cmp	r3, #213	; 0xd5
 8006d6e:	d107      	bne.n	8006d80 <astronode_send_res_cr+0x60>
        {
            g_is_astronode_reset = false;
 8006d70:	4b08      	ldr	r3, [pc, #32]	; (8006d94 <astronode_send_res_cr+0x74>)
 8006d72:	2200      	movs	r2, #0
 8006d74:	701a      	strb	r2, [r3, #0]
            send_debug_logs("astronode_application: The reset has been cleared.");
 8006d76:	4b08      	ldr	r3, [pc, #32]	; (8006d98 <astronode_send_res_cr+0x78>)
 8006d78:	0018      	movs	r0, r3
 8006d7a:	f7fb fdb7 	bl	80028ec <send_debug_logs>
        else
        {
            send_debug_logs("astronode_application: No reset to clear.");
        }
    }
}
 8006d7e:	e003      	b.n	8006d88 <astronode_send_res_cr+0x68>
            send_debug_logs("astronode_application: No reset to clear.");
 8006d80:	4b06      	ldr	r3, [pc, #24]	; (8006d9c <astronode_send_res_cr+0x7c>)
 8006d82:	0018      	movs	r0, r3
 8006d84:	f7fb fdb2 	bl	80028ec <send_debug_logs>
}
 8006d88:	46c0      	nop			; (mov r8, r8)
 8006d8a:	46bd      	mov	sp, r7
 8006d8c:	b064      	add	sp, #400	; 0x190
 8006d8e:	bdb0      	pop	{r4, r5, r7, pc}
 8006d90:	fffffe70 	.word	0xfffffe70
 8006d94:	2000089d 	.word	0x2000089d
 8006d98:	0800d498 	.word	0x0800d498
 8006d9c:	0800d4cc 	.word	0x0800d4cc

08006da0 <astronode_send_rtc_rr>:

uint32_t astronode_send_rtc_rr ( void )
{
 8006da0:	b5b0      	push	{r4, r5, r7, lr}
 8006da2:	b0fa      	sub	sp, #488	; 0x1e8
 8006da4:	af00      	add	r7, sp, #0
    astronode_app_msg_t request = {0} ;
 8006da6:	258e      	movs	r5, #142	; 0x8e
 8006da8:	006d      	lsls	r5, r5, #1
 8006daa:	197b      	adds	r3, r7, r5
 8006dac:	0018      	movs	r0, r3
 8006dae:	23c6      	movs	r3, #198	; 0xc6
 8006db0:	001a      	movs	r2, r3
 8006db2:	2100      	movs	r1, #0
 8006db4:	f001 f9ba 	bl	800812c <memset>
    astronode_app_msg_t answer = {0} ;
 8006db8:	4b28      	ldr	r3, [pc, #160]	; (8006e5c <astronode_send_rtc_rr+0xbc>)
 8006dba:	24f4      	movs	r4, #244	; 0xf4
 8006dbc:	0064      	lsls	r4, r4, #1
 8006dbe:	191b      	adds	r3, r3, r4
 8006dc0:	19db      	adds	r3, r3, r7
 8006dc2:	0018      	movs	r0, r3
 8006dc4:	23c6      	movs	r3, #198	; 0xc6
 8006dc6:	001a      	movs	r2, r3
 8006dc8:	2100      	movs	r1, #0
 8006dca:	f001 f9af 	bl	800812c <memset>

    request.op_code = ASTRONODE_OP_CODE_RTC_RR ;
 8006dce:	197b      	adds	r3, r7, r5
 8006dd0:	2217      	movs	r2, #23
 8006dd2:	701a      	strb	r2, [r3, #0]

    if ( astronode_transport_send_receive ( &request , &answer ) == RS_SUCCESS )
 8006dd4:	2354      	movs	r3, #84	; 0x54
 8006dd6:	18fa      	adds	r2, r7, r3
 8006dd8:	197b      	adds	r3, r7, r5
 8006dda:	0011      	movs	r1, r2
 8006ddc:	0018      	movs	r0, r3
 8006dde:	f000 fdb3 	bl	8007948 <astronode_transport_send_receive>
 8006de2:	0003      	movs	r3, r0
 8006de4:	2b01      	cmp	r3, #1
 8006de6:	d133      	bne.n	8006e50 <astronode_send_rtc_rr+0xb0>
    {
        if ( answer.op_code == ASTRONODE_OP_CODE_RTC_RA )
 8006de8:	4b1c      	ldr	r3, [pc, #112]	; (8006e5c <astronode_send_rtc_rr+0xbc>)
 8006dea:	0021      	movs	r1, r4
 8006dec:	185b      	adds	r3, r3, r1
 8006dee:	19db      	adds	r3, r3, r7
 8006df0:	781b      	ldrb	r3, [r3, #0]
 8006df2:	2b97      	cmp	r3, #151	; 0x97
 8006df4:	d128      	bne.n	8006e48 <astronode_send_rtc_rr+0xa8>
        {
            uint32_t rtc_time = answer.p_payload[0]
 8006df6:	4b19      	ldr	r3, [pc, #100]	; (8006e5c <astronode_send_rtc_rr+0xbc>)
 8006df8:	185b      	adds	r3, r3, r1
 8006dfa:	19db      	adds	r3, r3, r7
 8006dfc:	785b      	ldrb	r3, [r3, #1]
 8006dfe:	001a      	movs	r2, r3
                                        + ( answer.p_payload[1] << 8 )
 8006e00:	4b16      	ldr	r3, [pc, #88]	; (8006e5c <astronode_send_rtc_rr+0xbc>)
 8006e02:	185b      	adds	r3, r3, r1
 8006e04:	19db      	adds	r3, r3, r7
 8006e06:	789b      	ldrb	r3, [r3, #2]
 8006e08:	021b      	lsls	r3, r3, #8
 8006e0a:	18d2      	adds	r2, r2, r3
                                        + ( answer.p_payload[2] << 16 )
 8006e0c:	4b13      	ldr	r3, [pc, #76]	; (8006e5c <astronode_send_rtc_rr+0xbc>)
 8006e0e:	185b      	adds	r3, r3, r1
 8006e10:	19db      	adds	r3, r3, r7
 8006e12:	78db      	ldrb	r3, [r3, #3]
 8006e14:	041b      	lsls	r3, r3, #16
 8006e16:	18d2      	adds	r2, r2, r3
                                        + ( answer.p_payload[3] << 24 ) ;
 8006e18:	4b10      	ldr	r3, [pc, #64]	; (8006e5c <astronode_send_rtc_rr+0xbc>)
 8006e1a:	185b      	adds	r3, r3, r1
 8006e1c:	19db      	adds	r3, r3, r7
 8006e1e:	791b      	ldrb	r3, [r3, #4]
 8006e20:	061b      	lsls	r3, r3, #24
 8006e22:	18d3      	adds	r3, r2, r3
            uint32_t rtc_time = answer.p_payload[0]
 8006e24:	24f2      	movs	r4, #242	; 0xf2
 8006e26:	0064      	lsls	r4, r4, #1
 8006e28:	193a      	adds	r2, r7, r4
 8006e2a:	6013      	str	r3, [r2, #0]
            char str[ASTRONODE_UART_DEBUG_BUFFER_LENGTH] ;
            sprintf ( str , "RTC time since Astrocast Epoch (2018-01-01 00:00:00 UTC): %lds." , rtc_time ) ;
 8006e2c:	193b      	adds	r3, r7, r4
 8006e2e:	681a      	ldr	r2, [r3, #0]
 8006e30:	490b      	ldr	r1, [pc, #44]	; (8006e60 <astronode_send_rtc_rr+0xc0>)
 8006e32:	1d3b      	adds	r3, r7, #4
 8006e34:	0018      	movs	r0, r3
 8006e36:	f001 f90d 	bl	8008054 <sprintf>
            send_debug_logs ( str ) ;
 8006e3a:	1d3b      	adds	r3, r7, #4
 8006e3c:	0018      	movs	r0, r3
 8006e3e:	f7fb fd55 	bl	80028ec <send_debug_logs>
            return rtc_time ;
 8006e42:	193b      	adds	r3, r7, r4
 8006e44:	681b      	ldr	r3, [r3, #0]
 8006e46:	e004      	b.n	8006e52 <astronode_send_rtc_rr+0xb2>
        }
        else
        {
            send_debug_logs ( "Failed to read rtc time." ) ;
 8006e48:	4b06      	ldr	r3, [pc, #24]	; (8006e64 <astronode_send_rtc_rr+0xc4>)
 8006e4a:	0018      	movs	r0, r3
 8006e4c:	f7fb fd4e 	bl	80028ec <send_debug_logs>
        }
    }
    return 0 ;
 8006e50:	2300      	movs	r3, #0
}
 8006e52:	0018      	movs	r0, r3
 8006e54:	46bd      	mov	sp, r7
 8006e56:	b07a      	add	sp, #488	; 0x1e8
 8006e58:	bdb0      	pop	{r4, r5, r7, pc}
 8006e5a:	46c0      	nop			; (mov r8, r8)
 8006e5c:	fffffe6c 	.word	0xfffffe6c
 8006e60:	0800d4f8 	.word	0x0800d4f8
 8006e64:	0800d538 	.word	0x0800d538

08006e68 <astronode_send_sak_rr>:

void astronode_send_sak_rr(void)
{
 8006e68:	b5b0      	push	{r4, r5, r7, lr}
 8006e6a:	b0f8      	sub	sp, #480	; 0x1e0
 8006e6c:	af00      	add	r7, sp, #0
    astronode_app_msg_t request = {0};
 8006e6e:	258c      	movs	r5, #140	; 0x8c
 8006e70:	006d      	lsls	r5, r5, #1
 8006e72:	197b      	adds	r3, r7, r5
 8006e74:	0018      	movs	r0, r3
 8006e76:	23c6      	movs	r3, #198	; 0xc6
 8006e78:	001a      	movs	r2, r3
 8006e7a:	2100      	movs	r1, #0
 8006e7c:	f001 f956 	bl	800812c <memset>
    astronode_app_msg_t answer = {0};
 8006e80:	4b21      	ldr	r3, [pc, #132]	; (8006f08 <astronode_send_sak_rr+0xa0>)
 8006e82:	24f0      	movs	r4, #240	; 0xf0
 8006e84:	0064      	lsls	r4, r4, #1
 8006e86:	191b      	adds	r3, r3, r4
 8006e88:	19db      	adds	r3, r3, r7
 8006e8a:	0018      	movs	r0, r3
 8006e8c:	23c6      	movs	r3, #198	; 0xc6
 8006e8e:	001a      	movs	r2, r3
 8006e90:	2100      	movs	r1, #0
 8006e92:	f001 f94b 	bl	800812c <memset>

    request.op_code = ASTRONODE_OP_CODE_SAK_RR;
 8006e96:	197b      	adds	r3, r7, r5
 8006e98:	2245      	movs	r2, #69	; 0x45
 8006e9a:	701a      	strb	r2, [r3, #0]

    if (astronode_transport_send_receive(&request, &answer) == RS_SUCCESS)
 8006e9c:	2350      	movs	r3, #80	; 0x50
 8006e9e:	18fa      	adds	r2, r7, r3
 8006ea0:	197b      	adds	r3, r7, r5
 8006ea2:	0011      	movs	r1, r2
 8006ea4:	0018      	movs	r0, r3
 8006ea6:	f000 fd4f 	bl	8007948 <astronode_transport_send_receive>
 8006eaa:	0003      	movs	r3, r0
 8006eac:	2b01      	cmp	r3, #1
 8006eae:	d126      	bne.n	8006efe <astronode_send_sak_rr+0x96>
    {
        if (answer.op_code == ASTRONODE_OP_CODE_SAK_RA)
 8006eb0:	4b15      	ldr	r3, [pc, #84]	; (8006f08 <astronode_send_sak_rr+0xa0>)
 8006eb2:	191b      	adds	r3, r3, r4
 8006eb4:	19db      	adds	r3, r3, r7
 8006eb6:	781b      	ldrb	r3, [r3, #0]
 8006eb8:	2bc5      	cmp	r3, #197	; 0xc5
 8006eba:	d11c      	bne.n	8006ef6 <astronode_send_sak_rr+0x8e>
        {
            uint16_t payload_id = answer.p_payload[0] + (answer.p_payload[1] << 8);
 8006ebc:	4b12      	ldr	r3, [pc, #72]	; (8006f08 <astronode_send_sak_rr+0xa0>)
 8006ebe:	191b      	adds	r3, r3, r4
 8006ec0:	19db      	adds	r3, r3, r7
 8006ec2:	785b      	ldrb	r3, [r3, #1]
 8006ec4:	b299      	uxth	r1, r3
 8006ec6:	4b10      	ldr	r3, [pc, #64]	; (8006f08 <astronode_send_sak_rr+0xa0>)
 8006ec8:	191b      	adds	r3, r3, r4
 8006eca:	19db      	adds	r3, r3, r7
 8006ecc:	789b      	ldrb	r3, [r3, #2]
 8006ece:	b29b      	uxth	r3, r3
 8006ed0:	021b      	lsls	r3, r3, #8
 8006ed2:	b29a      	uxth	r2, r3
 8006ed4:	20ef      	movs	r0, #239	; 0xef
 8006ed6:	0040      	lsls	r0, r0, #1
 8006ed8:	183b      	adds	r3, r7, r0
 8006eda:	188a      	adds	r2, r1, r2
 8006edc:	801a      	strh	r2, [r3, #0]
            char str[ASTRONODE_UART_DEBUG_BUFFER_LENGTH];
            sprintf(str, "Acknowledgment for payload %d is available.", payload_id);
 8006ede:	183b      	adds	r3, r7, r0
 8006ee0:	881a      	ldrh	r2, [r3, #0]
 8006ee2:	490a      	ldr	r1, [pc, #40]	; (8006f0c <astronode_send_sak_rr+0xa4>)
 8006ee4:	003b      	movs	r3, r7
 8006ee6:	0018      	movs	r0, r3
 8006ee8:	f001 f8b4 	bl	8008054 <sprintf>
            send_debug_logs(str);
 8006eec:	003b      	movs	r3, r7
 8006eee:	0018      	movs	r0, r3
 8006ef0:	f7fb fcfc 	bl	80028ec <send_debug_logs>
        else
        {
            send_debug_logs("astronode_application: No acknowledgment available.");
        }
    }
}
 8006ef4:	e003      	b.n	8006efe <astronode_send_sak_rr+0x96>
            send_debug_logs("astronode_application: No acknowledgment available.");
 8006ef6:	4b06      	ldr	r3, [pc, #24]	; (8006f10 <astronode_send_sak_rr+0xa8>)
 8006ef8:	0018      	movs	r0, r3
 8006efa:	f7fb fcf7 	bl	80028ec <send_debug_logs>
}
 8006efe:	46c0      	nop			; (mov r8, r8)
 8006f00:	46bd      	mov	sp, r7
 8006f02:	b078      	add	sp, #480	; 0x1e0
 8006f04:	bdb0      	pop	{r4, r5, r7, pc}
 8006f06:	46c0      	nop			; (mov r8, r8)
 8006f08:	fffffe70 	.word	0xfffffe70
 8006f0c:	0800d554 	.word	0x0800d554
 8006f10:	0800d580 	.word	0x0800d580

08006f14 <astronode_send_sak_cr>:

void astronode_send_sak_cr(void)
{
 8006f14:	b5b0      	push	{r4, r5, r7, lr}
 8006f16:	b0e4      	sub	sp, #400	; 0x190
 8006f18:	af00      	add	r7, sp, #0
    astronode_app_msg_t request = {0};
 8006f1a:	24c8      	movs	r4, #200	; 0xc8
 8006f1c:	193b      	adds	r3, r7, r4
 8006f1e:	0018      	movs	r0, r3
 8006f20:	23c6      	movs	r3, #198	; 0xc6
 8006f22:	001a      	movs	r2, r3
 8006f24:	2100      	movs	r1, #0
 8006f26:	f001 f901 	bl	800812c <memset>
    astronode_app_msg_t answer = {0};
 8006f2a:	4b16      	ldr	r3, [pc, #88]	; (8006f84 <astronode_send_sak_cr+0x70>)
 8006f2c:	25c8      	movs	r5, #200	; 0xc8
 8006f2e:	006d      	lsls	r5, r5, #1
 8006f30:	195b      	adds	r3, r3, r5
 8006f32:	19db      	adds	r3, r3, r7
 8006f34:	0018      	movs	r0, r3
 8006f36:	23c6      	movs	r3, #198	; 0xc6
 8006f38:	001a      	movs	r2, r3
 8006f3a:	2100      	movs	r1, #0
 8006f3c:	f001 f8f6 	bl	800812c <memset>

    request.op_code = ASTRONODE_OP_CODE_SAK_CR;
 8006f40:	193b      	adds	r3, r7, r4
 8006f42:	2246      	movs	r2, #70	; 0x46
 8006f44:	701a      	strb	r2, [r3, #0]

    if (astronode_transport_send_receive(&request, &answer) == RS_SUCCESS)
 8006f46:	003a      	movs	r2, r7
 8006f48:	193b      	adds	r3, r7, r4
 8006f4a:	0011      	movs	r1, r2
 8006f4c:	0018      	movs	r0, r3
 8006f4e:	f000 fcfb 	bl	8007948 <astronode_transport_send_receive>
 8006f52:	0003      	movs	r3, r0
 8006f54:	2b01      	cmp	r3, #1
 8006f56:	d111      	bne.n	8006f7c <astronode_send_sak_cr+0x68>
    {
        if (answer.op_code == ASTRONODE_OP_CODE_SAK_CA)
 8006f58:	4b0a      	ldr	r3, [pc, #40]	; (8006f84 <astronode_send_sak_cr+0x70>)
 8006f5a:	195b      	adds	r3, r3, r5
 8006f5c:	19db      	adds	r3, r3, r7
 8006f5e:	781b      	ldrb	r3, [r3, #0]
 8006f60:	2bc6      	cmp	r3, #198	; 0xc6
 8006f62:	d107      	bne.n	8006f74 <astronode_send_sak_cr+0x60>
        {
            g_is_sak_available = false;
 8006f64:	4b08      	ldr	r3, [pc, #32]	; (8006f88 <astronode_send_sak_cr+0x74>)
 8006f66:	2200      	movs	r2, #0
 8006f68:	701a      	strb	r2, [r3, #0]
            send_debug_logs("The acknowledgment has been cleared.");
 8006f6a:	4b08      	ldr	r3, [pc, #32]	; (8006f8c <astronode_send_sak_cr+0x78>)
 8006f6c:	0018      	movs	r0, r3
 8006f6e:	f7fb fcbd 	bl	80028ec <send_debug_logs>
        else
        {
            send_debug_logs("No acknowledgment available.");
        }
    }
}
 8006f72:	e003      	b.n	8006f7c <astronode_send_sak_cr+0x68>
            send_debug_logs("No acknowledgment available.");
 8006f74:	4b06      	ldr	r3, [pc, #24]	; (8006f90 <astronode_send_sak_cr+0x7c>)
 8006f76:	0018      	movs	r0, r3
 8006f78:	f7fb fcb8 	bl	80028ec <send_debug_logs>
}
 8006f7c:	46c0      	nop			; (mov r8, r8)
 8006f7e:	46bd      	mov	sp, r7
 8006f80:	b064      	add	sp, #400	; 0x190
 8006f82:	bdb0      	pop	{r4, r5, r7, pc}
 8006f84:	fffffe70 	.word	0xfffffe70
 8006f88:	2000089c 	.word	0x2000089c
 8006f8c:	0800d5b4 	.word	0x0800d5b4
 8006f90:	0800d5dc 	.word	0x0800d5dc

08006f94 <astronode_send_mpn_rr>:
        }
    }
}

void astronode_send_mpn_rr(void)
{
 8006f94:	b5f0      	push	{r4, r5, r6, r7, lr}
 8006f96:	b0ed      	sub	sp, #436	; 0x1b4
 8006f98:	af00      	add	r7, sp, #0
    astronode_app_msg_t request = {0};
 8006f9a:	21c8      	movs	r1, #200	; 0xc8
 8006f9c:	2318      	movs	r3, #24
 8006f9e:	18cb      	adds	r3, r1, r3
 8006fa0:	19db      	adds	r3, r3, r7
 8006fa2:	0018      	movs	r0, r3
 8006fa4:	23c6      	movs	r3, #198	; 0xc6
 8006fa6:	001a      	movs	r2, r3
 8006fa8:	2100      	movs	r1, #0
 8006faa:	f001 f8bf 	bl	800812c <memset>
    astronode_app_msg_t answer = {0};
 8006fae:	4b4a      	ldr	r3, [pc, #296]	; (80070d8 <astronode_send_mpn_rr+0x144>)
 8006fb0:	26cc      	movs	r6, #204	; 0xcc
 8006fb2:	0076      	lsls	r6, r6, #1
 8006fb4:	199b      	adds	r3, r3, r6
 8006fb6:	2218      	movs	r2, #24
 8006fb8:	4694      	mov	ip, r2
 8006fba:	44bc      	add	ip, r7
 8006fbc:	4463      	add	r3, ip
 8006fbe:	0018      	movs	r0, r3
 8006fc0:	23c6      	movs	r3, #198	; 0xc6
 8006fc2:	001a      	movs	r2, r3
 8006fc4:	2100      	movs	r1, #0
 8006fc6:	f001 f8b1 	bl	800812c <memset>

    request.op_code = ASTRONODE_OP_CODE_MPN_RR;
 8006fca:	21c8      	movs	r1, #200	; 0xc8
 8006fcc:	2318      	movs	r3, #24
 8006fce:	18cb      	adds	r3, r1, r3
 8006fd0:	19db      	adds	r3, r3, r7
 8006fd2:	221b      	movs	r2, #27
 8006fd4:	701a      	strb	r2, [r3, #0]

    if (astronode_transport_send_receive(&request, &answer) == RS_SUCCESS)
 8006fd6:	2318      	movs	r3, #24
 8006fd8:	18fa      	adds	r2, r7, r3
 8006fda:	2318      	movs	r3, #24
 8006fdc:	18cb      	adds	r3, r1, r3
 8006fde:	19db      	adds	r3, r3, r7
 8006fe0:	0011      	movs	r1, r2
 8006fe2:	0018      	movs	r0, r3
 8006fe4:	f000 fcb0 	bl	8007948 <astronode_transport_send_receive>
 8006fe8:	0003      	movs	r3, r0
 8006fea:	2b01      	cmp	r3, #1
 8006fec:	d16f      	bne.n	80070ce <astronode_send_mpn_rr+0x13a>
    {
        if (answer.op_code == ASTRONODE_OP_CODE_MPN_RA)
 8006fee:	4b3a      	ldr	r3, [pc, #232]	; (80070d8 <astronode_send_mpn_rr+0x144>)
 8006ff0:	0032      	movs	r2, r6
 8006ff2:	189b      	adds	r3, r3, r2
 8006ff4:	2118      	movs	r1, #24
 8006ff6:	468c      	mov	ip, r1
 8006ff8:	44bc      	add	ip, r7
 8006ffa:	4463      	add	r3, ip
 8006ffc:	781b      	ldrb	r3, [r3, #0]
 8006ffe:	2b9b      	cmp	r3, #155	; 0x9b
 8007000:	d161      	bne.n	80070c6 <astronode_send_mpn_rr+0x132>
        {
 8007002:	466b      	mov	r3, sp
 8007004:	001e      	movs	r6, r3
            char product_number[answer.payload_len];
 8007006:	4b34      	ldr	r3, [pc, #208]	; (80070d8 <astronode_send_mpn_rr+0x144>)
 8007008:	189b      	adds	r3, r3, r2
 800700a:	2218      	movs	r2, #24
 800700c:	4694      	mov	ip, r2
 800700e:	44bc      	add	ip, r7
 8007010:	4463      	add	r3, ip
 8007012:	22c4      	movs	r2, #196	; 0xc4
 8007014:	5a9b      	ldrh	r3, [r3, r2]
 8007016:	001a      	movs	r2, r3
 8007018:	3a01      	subs	r2, #1
 800701a:	21ca      	movs	r1, #202	; 0xca
 800701c:	0049      	lsls	r1, r1, #1
 800701e:	2018      	movs	r0, #24
 8007020:	1809      	adds	r1, r1, r0
 8007022:	19c9      	adds	r1, r1, r7
 8007024:	600a      	str	r2, [r1, #0]
 8007026:	001c      	movs	r4, r3
 8007028:	2200      	movs	r2, #0
 800702a:	0015      	movs	r5, r2
 800702c:	0020      	movs	r0, r4
 800702e:	0029      	movs	r1, r5
 8007030:	0004      	movs	r4, r0
 8007032:	0f62      	lsrs	r2, r4, #29
 8007034:	000c      	movs	r4, r1
 8007036:	00e4      	lsls	r4, r4, #3
 8007038:	617c      	str	r4, [r7, #20]
 800703a:	697c      	ldr	r4, [r7, #20]
 800703c:	4314      	orrs	r4, r2
 800703e:	617c      	str	r4, [r7, #20]
 8007040:	0001      	movs	r1, r0
 8007042:	00c9      	lsls	r1, r1, #3
 8007044:	6139      	str	r1, [r7, #16]
 8007046:	603b      	str	r3, [r7, #0]
 8007048:	2200      	movs	r2, #0
 800704a:	607a      	str	r2, [r7, #4]
 800704c:	6838      	ldr	r0, [r7, #0]
 800704e:	6879      	ldr	r1, [r7, #4]
 8007050:	0004      	movs	r4, r0
 8007052:	0f62      	lsrs	r2, r4, #29
 8007054:	000c      	movs	r4, r1
 8007056:	00e4      	lsls	r4, r4, #3
 8007058:	60fc      	str	r4, [r7, #12]
 800705a:	68fc      	ldr	r4, [r7, #12]
 800705c:	4314      	orrs	r4, r2
 800705e:	60fc      	str	r4, [r7, #12]
 8007060:	0001      	movs	r1, r0
 8007062:	00ca      	lsls	r2, r1, #3
 8007064:	60ba      	str	r2, [r7, #8]
 8007066:	3307      	adds	r3, #7
 8007068:	08db      	lsrs	r3, r3, #3
 800706a:	00db      	lsls	r3, r3, #3
 800706c:	4669      	mov	r1, sp
 800706e:	1acb      	subs	r3, r1, r3
 8007070:	469d      	mov	sp, r3
 8007072:	466b      	mov	r3, sp
 8007074:	3300      	adds	r3, #0
 8007076:	24c8      	movs	r4, #200	; 0xc8
 8007078:	0064      	lsls	r4, r4, #1
 800707a:	2218      	movs	r2, #24
 800707c:	18a2      	adds	r2, r4, r2
 800707e:	19d1      	adds	r1, r2, r7
 8007080:	600b      	str	r3, [r1, #0]
            send_debug_logs("Module's product number is:");
 8007082:	4b16      	ldr	r3, [pc, #88]	; (80070dc <astronode_send_mpn_rr+0x148>)
 8007084:	0018      	movs	r0, r3
 8007086:	f7fb fc31 	bl	80028ec <send_debug_logs>
            snprintf(product_number, answer.payload_len, "%s", answer.p_payload);
 800708a:	4b13      	ldr	r3, [pc, #76]	; (80070d8 <astronode_send_mpn_rr+0x144>)
 800708c:	22cc      	movs	r2, #204	; 0xcc
 800708e:	0052      	lsls	r2, r2, #1
 8007090:	189b      	adds	r3, r3, r2
 8007092:	2218      	movs	r2, #24
 8007094:	4694      	mov	ip, r2
 8007096:	44bc      	add	ip, r7
 8007098:	4463      	add	r3, ip
 800709a:	22c4      	movs	r2, #196	; 0xc4
 800709c:	5a9b      	ldrh	r3, [r3, r2]
 800709e:	0019      	movs	r1, r3
 80070a0:	2318      	movs	r3, #24
 80070a2:	18fb      	adds	r3, r7, r3
 80070a4:	3301      	adds	r3, #1
 80070a6:	4a0e      	ldr	r2, [pc, #56]	; (80070e0 <astronode_send_mpn_rr+0x14c>)
 80070a8:	2018      	movs	r0, #24
 80070aa:	1820      	adds	r0, r4, r0
 80070ac:	19c0      	adds	r0, r0, r7
 80070ae:	6800      	ldr	r0, [r0, #0]
 80070b0:	f000 ff9c 	bl	8007fec <snprintf>
            send_debug_logs(product_number);
 80070b4:	2318      	movs	r3, #24
 80070b6:	18e3      	adds	r3, r4, r3
 80070b8:	19db      	adds	r3, r3, r7
 80070ba:	681b      	ldr	r3, [r3, #0]
 80070bc:	0018      	movs	r0, r3
 80070be:	f7fb fc15 	bl	80028ec <send_debug_logs>
 80070c2:	46b5      	mov	sp, r6
        else
        {
            send_debug_logs("Failed to read module Serial Number.");
        }
    }
}
 80070c4:	e003      	b.n	80070ce <astronode_send_mpn_rr+0x13a>
            send_debug_logs("Failed to read module Serial Number.");
 80070c6:	4b07      	ldr	r3, [pc, #28]	; (80070e4 <astronode_send_mpn_rr+0x150>)
 80070c8:	0018      	movs	r0, r3
 80070ca:	f7fb fc0f 	bl	80028ec <send_debug_logs>
}
 80070ce:	46c0      	nop			; (mov r8, r8)
 80070d0:	46bd      	mov	sp, r7
 80070d2:	b06d      	add	sp, #436	; 0x1b4
 80070d4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80070d6:	46c0      	nop			; (mov r8, r8)
 80070d8:	fffffe68 	.word	0xfffffe68
 80070dc:	0800d6a4 	.word	0x0800d6a4
 80070e0:	0800d1dc 	.word	0x0800d1dc
 80070e4:	0800d218 	.word	0x0800d218

080070e8 <astronode_send_cmd_cr>:
        }
    }
}

void astronode_send_cmd_cr(void)
{
 80070e8:	b5b0      	push	{r4, r5, r7, lr}
 80070ea:	b0e4      	sub	sp, #400	; 0x190
 80070ec:	af00      	add	r7, sp, #0
    astronode_app_msg_t request = {0};
 80070ee:	24c8      	movs	r4, #200	; 0xc8
 80070f0:	193b      	adds	r3, r7, r4
 80070f2:	0018      	movs	r0, r3
 80070f4:	23c6      	movs	r3, #198	; 0xc6
 80070f6:	001a      	movs	r2, r3
 80070f8:	2100      	movs	r1, #0
 80070fa:	f001 f817 	bl	800812c <memset>
    astronode_app_msg_t answer = {0};
 80070fe:	4b16      	ldr	r3, [pc, #88]	; (8007158 <astronode_send_cmd_cr+0x70>)
 8007100:	25c8      	movs	r5, #200	; 0xc8
 8007102:	006d      	lsls	r5, r5, #1
 8007104:	195b      	adds	r3, r3, r5
 8007106:	19db      	adds	r3, r3, r7
 8007108:	0018      	movs	r0, r3
 800710a:	23c6      	movs	r3, #198	; 0xc6
 800710c:	001a      	movs	r2, r3
 800710e:	2100      	movs	r1, #0
 8007110:	f001 f80c 	bl	800812c <memset>

    request.op_code = ASTRONODE_OP_CODE_CMD_CR;
 8007114:	193b      	adds	r3, r7, r4
 8007116:	2248      	movs	r2, #72	; 0x48
 8007118:	701a      	strb	r2, [r3, #0]

    if (astronode_transport_send_receive(&request, &answer) == RS_SUCCESS)
 800711a:	003a      	movs	r2, r7
 800711c:	193b      	adds	r3, r7, r4
 800711e:	0011      	movs	r1, r2
 8007120:	0018      	movs	r0, r3
 8007122:	f000 fc11 	bl	8007948 <astronode_transport_send_receive>
 8007126:	0003      	movs	r3, r0
 8007128:	2b01      	cmp	r3, #1
 800712a:	d111      	bne.n	8007150 <astronode_send_cmd_cr+0x68>
    {
        if (answer.op_code == ASTRONODE_OP_CODE_CMD_CA)
 800712c:	4b0a      	ldr	r3, [pc, #40]	; (8007158 <astronode_send_cmd_cr+0x70>)
 800712e:	195b      	adds	r3, r3, r5
 8007130:	19db      	adds	r3, r3, r7
 8007132:	781b      	ldrb	r3, [r3, #0]
 8007134:	2bc8      	cmp	r3, #200	; 0xc8
 8007136:	d107      	bne.n	8007148 <astronode_send_cmd_cr+0x60>
        {
            g_is_command_available = false;
 8007138:	4b08      	ldr	r3, [pc, #32]	; (800715c <astronode_send_cmd_cr+0x74>)
 800713a:	2200      	movs	r2, #0
 800713c:	701a      	strb	r2, [r3, #0]
            send_debug_logs("The command ack has been cleared.");
 800713e:	4b08      	ldr	r3, [pc, #32]	; (8007160 <astronode_send_cmd_cr+0x78>)
 8007140:	0018      	movs	r0, r3
 8007142:	f7fb fbd3 	bl	80028ec <send_debug_logs>
        else
        {
            send_debug_logs("No command to clear.");
        }
    }
}
 8007146:	e003      	b.n	8007150 <astronode_send_cmd_cr+0x68>
            send_debug_logs("No command to clear.");
 8007148:	4b06      	ldr	r3, [pc, #24]	; (8007164 <astronode_send_cmd_cr+0x7c>)
 800714a:	0018      	movs	r0, r3
 800714c:	f7fb fbce 	bl	80028ec <send_debug_logs>
}
 8007150:	46c0      	nop			; (mov r8, r8)
 8007152:	46bd      	mov	sp, r7
 8007154:	b064      	add	sp, #400	; 0x190
 8007156:	bdb0      	pop	{r4, r5, r7, pc}
 8007158:	fffffe70 	.word	0xfffffe70
 800715c:	2000089e 	.word	0x2000089e
 8007160:	0800daf4 	.word	0x0800daf4
 8007164:	0800db18 	.word	0x0800db18

08007168 <astronode_send_cmd_rr>:

void astronode_send_cmd_rr(void)
{
 8007168:	b5f0      	push	{r4, r5, r6, r7, lr}
 800716a:	4cac      	ldr	r4, [pc, #688]	; (800741c <astronode_send_cmd_rr+0x2b4>)
 800716c:	44a5      	add	sp, r4
 800716e:	af00      	add	r7, sp, #0
    astronode_app_msg_t request = {0};
 8007170:	218c      	movs	r1, #140	; 0x8c
 8007172:	0049      	lsls	r1, r1, #1
 8007174:	2318      	movs	r3, #24
 8007176:	18cb      	adds	r3, r1, r3
 8007178:	19db      	adds	r3, r3, r7
 800717a:	0018      	movs	r0, r3
 800717c:	23c6      	movs	r3, #198	; 0xc6
 800717e:	001a      	movs	r2, r3
 8007180:	2100      	movs	r1, #0
 8007182:	f000 ffd3 	bl	800812c <memset>
    astronode_app_msg_t answer = {0};
 8007186:	4ba6      	ldr	r3, [pc, #664]	; (8007420 <astronode_send_cmd_rr+0x2b8>)
 8007188:	26f8      	movs	r6, #248	; 0xf8
 800718a:	0076      	lsls	r6, r6, #1
 800718c:	199b      	adds	r3, r3, r6
 800718e:	2218      	movs	r2, #24
 8007190:	4694      	mov	ip, r2
 8007192:	44bc      	add	ip, r7
 8007194:	4463      	add	r3, ip
 8007196:	0018      	movs	r0, r3
 8007198:	23c6      	movs	r3, #198	; 0xc6
 800719a:	001a      	movs	r2, r3
 800719c:	2100      	movs	r1, #0
 800719e:	f000 ffc5 	bl	800812c <memset>

    request.op_code = ASTRONODE_OP_CODE_CMD_RR;
 80071a2:	218c      	movs	r1, #140	; 0x8c
 80071a4:	0049      	lsls	r1, r1, #1
 80071a6:	2318      	movs	r3, #24
 80071a8:	18cb      	adds	r3, r1, r3
 80071aa:	19db      	adds	r3, r3, r7
 80071ac:	2247      	movs	r2, #71	; 0x47
 80071ae:	701a      	strb	r2, [r3, #0]

    if (astronode_transport_send_receive(&request, &answer) == RS_SUCCESS)
 80071b0:	2350      	movs	r3, #80	; 0x50
 80071b2:	2218      	movs	r2, #24
 80071b4:	189b      	adds	r3, r3, r2
 80071b6:	19da      	adds	r2, r3, r7
 80071b8:	2318      	movs	r3, #24
 80071ba:	18cb      	adds	r3, r1, r3
 80071bc:	19db      	adds	r3, r3, r7
 80071be:	0011      	movs	r1, r2
 80071c0:	0018      	movs	r0, r3
 80071c2:	f000 fbc1 	bl	8007948 <astronode_transport_send_receive>
 80071c6:	0003      	movs	r3, r0
 80071c8:	2b01      	cmp	r3, #1
 80071ca:	d000      	beq.n	80071ce <astronode_send_cmd_rr+0x66>
 80071cc:	e121      	b.n	8007412 <astronode_send_cmd_rr+0x2aa>
    {
        if (answer.op_code == ASTRONODE_OP_CODE_CMD_RA)
 80071ce:	4b94      	ldr	r3, [pc, #592]	; (8007420 <astronode_send_cmd_rr+0x2b8>)
 80071d0:	199b      	adds	r3, r3, r6
 80071d2:	2218      	movs	r2, #24
 80071d4:	4694      	mov	ip, r2
 80071d6:	44bc      	add	ip, r7
 80071d8:	4463      	add	r3, ip
 80071da:	781b      	ldrb	r3, [r3, #0]
 80071dc:	2bc7      	cmp	r3, #199	; 0xc7
 80071de:	d000      	beq.n	80071e2 <astronode_send_cmd_rr+0x7a>
 80071e0:	e113      	b.n	800740a <astronode_send_cmd_rr+0x2a2>
        {
 80071e2:	466b      	mov	r3, sp
 80071e4:	001e      	movs	r6, r3
            send_debug_logs("Received downlink command");
 80071e6:	4b8f      	ldr	r3, [pc, #572]	; (8007424 <astronode_send_cmd_rr+0x2bc>)
 80071e8:	0018      	movs	r0, r3
 80071ea:	f7fb fb7f 	bl	80028ec <send_debug_logs>
            uint32_t rtc_time = answer.p_payload[0]
 80071ee:	4b8c      	ldr	r3, [pc, #560]	; (8007420 <astronode_send_cmd_rr+0x2b8>)
 80071f0:	21f8      	movs	r1, #248	; 0xf8
 80071f2:	0049      	lsls	r1, r1, #1
 80071f4:	185b      	adds	r3, r3, r1
 80071f6:	2218      	movs	r2, #24
 80071f8:	4694      	mov	ip, r2
 80071fa:	44bc      	add	ip, r7
 80071fc:	4463      	add	r3, ip
 80071fe:	785b      	ldrb	r3, [r3, #1]
 8007200:	001a      	movs	r2, r3
                                + (answer.p_payload[1] << 8)
 8007202:	4b87      	ldr	r3, [pc, #540]	; (8007420 <astronode_send_cmd_rr+0x2b8>)
 8007204:	185b      	adds	r3, r3, r1
 8007206:	2018      	movs	r0, #24
 8007208:	4684      	mov	ip, r0
 800720a:	44bc      	add	ip, r7
 800720c:	4463      	add	r3, ip
 800720e:	789b      	ldrb	r3, [r3, #2]
 8007210:	021b      	lsls	r3, r3, #8
 8007212:	18d2      	adds	r2, r2, r3
                                + (answer.p_payload[2] << 16)
 8007214:	4b82      	ldr	r3, [pc, #520]	; (8007420 <astronode_send_cmd_rr+0x2b8>)
 8007216:	185b      	adds	r3, r3, r1
 8007218:	2018      	movs	r0, #24
 800721a:	4684      	mov	ip, r0
 800721c:	44bc      	add	ip, r7
 800721e:	4463      	add	r3, ip
 8007220:	78db      	ldrb	r3, [r3, #3]
 8007222:	041b      	lsls	r3, r3, #16
 8007224:	18d2      	adds	r2, r2, r3
                                + (answer.p_payload[3] << 24);
 8007226:	4b7e      	ldr	r3, [pc, #504]	; (8007420 <astronode_send_cmd_rr+0x2b8>)
 8007228:	185b      	adds	r3, r3, r1
 800722a:	2118      	movs	r1, #24
 800722c:	468c      	mov	ip, r1
 800722e:	44bc      	add	ip, r7
 8007230:	4463      	add	r3, ip
 8007232:	791b      	ldrb	r3, [r3, #4]
 8007234:	061b      	lsls	r3, r3, #24
 8007236:	18d3      	adds	r3, r2, r3
            uint32_t rtc_time = answer.p_payload[0]
 8007238:	22f4      	movs	r2, #244	; 0xf4
 800723a:	0052      	lsls	r2, r2, #1
 800723c:	2118      	movs	r1, #24
 800723e:	1851      	adds	r1, r2, r1
 8007240:	19c8      	adds	r0, r1, r7
 8007242:	6003      	str	r3, [r0, #0]
            char str[ASTRONODE_UART_DEBUG_BUFFER_LENGTH];
            sprintf(str, "Command created date, Ref is astrocast Epoch (2018-01-01 00:00:00 UTC): %lds.", rtc_time);
 8007244:	2318      	movs	r3, #24
 8007246:	18d3      	adds	r3, r2, r3
 8007248:	19db      	adds	r3, r3, r7
 800724a:	681a      	ldr	r2, [r3, #0]
 800724c:	4976      	ldr	r1, [pc, #472]	; (8007428 <astronode_send_cmd_rr+0x2c0>)
 800724e:	2318      	movs	r3, #24
 8007250:	18fb      	adds	r3, r7, r3
 8007252:	0018      	movs	r0, r3
 8007254:	f000 fefe 	bl	8008054 <sprintf>
            send_debug_logs(str);
 8007258:	2318      	movs	r3, #24
 800725a:	18fb      	adds	r3, r7, r3
 800725c:	0018      	movs	r0, r3
 800725e:	f7fb fb45 	bl	80028ec <send_debug_logs>

            if (((answer.payload_len - 4) != 40) && ((answer.payload_len - 4) != 8))
 8007262:	4b6f      	ldr	r3, [pc, #444]	; (8007420 <astronode_send_cmd_rr+0x2b8>)
 8007264:	21f8      	movs	r1, #248	; 0xf8
 8007266:	0049      	lsls	r1, r1, #1
 8007268:	185b      	adds	r3, r3, r1
 800726a:	2218      	movs	r2, #24
 800726c:	4694      	mov	ip, r2
 800726e:	44bc      	add	ip, r7
 8007270:	4463      	add	r3, ip
 8007272:	22c4      	movs	r2, #196	; 0xc4
 8007274:	5a9b      	ldrh	r3, [r3, r2]
 8007276:	2b2c      	cmp	r3, #44	; 0x2c
 8007278:	d00e      	beq.n	8007298 <astronode_send_cmd_rr+0x130>
 800727a:	4b69      	ldr	r3, [pc, #420]	; (8007420 <astronode_send_cmd_rr+0x2b8>)
 800727c:	185b      	adds	r3, r3, r1
 800727e:	2218      	movs	r2, #24
 8007280:	4694      	mov	ip, r2
 8007282:	44bc      	add	ip, r7
 8007284:	4463      	add	r3, ip
 8007286:	22c4      	movs	r2, #196	; 0xc4
 8007288:	5a9b      	ldrh	r3, [r3, r2]
 800728a:	2b0c      	cmp	r3, #12
 800728c:	d004      	beq.n	8007298 <astronode_send_cmd_rr+0x130>
            {
                send_debug_logs("Command size error");
 800728e:	4b67      	ldr	r3, [pc, #412]	; (800742c <astronode_send_cmd_rr+0x2c4>)
 8007290:	0018      	movs	r0, r3
 8007292:	f7fb fb2b 	bl	80028ec <send_debug_logs>
                return;
 8007296:	e0b6      	b.n	8007406 <astronode_send_cmd_rr+0x29e>
            }

            char command_content[answer.payload_len];
 8007298:	4b61      	ldr	r3, [pc, #388]	; (8007420 <astronode_send_cmd_rr+0x2b8>)
 800729a:	22f8      	movs	r2, #248	; 0xf8
 800729c:	0052      	lsls	r2, r2, #1
 800729e:	189b      	adds	r3, r3, r2
 80072a0:	2218      	movs	r2, #24
 80072a2:	4694      	mov	ip, r2
 80072a4:	44bc      	add	ip, r7
 80072a6:	4463      	add	r3, ip
 80072a8:	22c4      	movs	r2, #196	; 0xc4
 80072aa:	5a9b      	ldrh	r3, [r3, r2]
 80072ac:	001a      	movs	r2, r3
 80072ae:	3a01      	subs	r2, #1
 80072b0:	21f2      	movs	r1, #242	; 0xf2
 80072b2:	0049      	lsls	r1, r1, #1
 80072b4:	2018      	movs	r0, #24
 80072b6:	1809      	adds	r1, r1, r0
 80072b8:	19c9      	adds	r1, r1, r7
 80072ba:	600a      	str	r2, [r1, #0]
 80072bc:	001c      	movs	r4, r3
 80072be:	2200      	movs	r2, #0
 80072c0:	0015      	movs	r5, r2
 80072c2:	0020      	movs	r0, r4
 80072c4:	0029      	movs	r1, r5
 80072c6:	0004      	movs	r4, r0
 80072c8:	0f62      	lsrs	r2, r4, #29
 80072ca:	000c      	movs	r4, r1
 80072cc:	00e4      	lsls	r4, r4, #3
 80072ce:	617c      	str	r4, [r7, #20]
 80072d0:	697c      	ldr	r4, [r7, #20]
 80072d2:	4314      	orrs	r4, r2
 80072d4:	617c      	str	r4, [r7, #20]
 80072d6:	0001      	movs	r1, r0
 80072d8:	00c9      	lsls	r1, r1, #3
 80072da:	6139      	str	r1, [r7, #16]
 80072dc:	603b      	str	r3, [r7, #0]
 80072de:	2200      	movs	r2, #0
 80072e0:	607a      	str	r2, [r7, #4]
 80072e2:	6838      	ldr	r0, [r7, #0]
 80072e4:	6879      	ldr	r1, [r7, #4]
 80072e6:	0004      	movs	r4, r0
 80072e8:	0f62      	lsrs	r2, r4, #29
 80072ea:	000c      	movs	r4, r1
 80072ec:	00e4      	lsls	r4, r4, #3
 80072ee:	60fc      	str	r4, [r7, #12]
 80072f0:	68fc      	ldr	r4, [r7, #12]
 80072f2:	4314      	orrs	r4, r2
 80072f4:	60fc      	str	r4, [r7, #12]
 80072f6:	0001      	movs	r1, r0
 80072f8:	00ca      	lsls	r2, r1, #3
 80072fa:	60ba      	str	r2, [r7, #8]
 80072fc:	3307      	adds	r3, #7
 80072fe:	08db      	lsrs	r3, r3, #3
 8007300:	00db      	lsls	r3, r3, #3
 8007302:	4669      	mov	r1, sp
 8007304:	1acb      	subs	r3, r1, r3
 8007306:	469d      	mov	sp, r3
 8007308:	466b      	mov	r3, sp
 800730a:	3300      	adds	r3, #0
 800730c:	20f0      	movs	r0, #240	; 0xf0
 800730e:	0040      	lsls	r0, r0, #1
 8007310:	2218      	movs	r2, #24
 8007312:	1882      	adds	r2, r0, r2
 8007314:	19d1      	adds	r1, r2, r7
 8007316:	600b      	str	r3, [r1, #0]
            uint16_t command_content_size = snprintf(command_content, (answer.payload_len - 4) + 1, "%s", &answer.p_payload[4]);
 8007318:	4b41      	ldr	r3, [pc, #260]	; (8007420 <astronode_send_cmd_rr+0x2b8>)
 800731a:	22f8      	movs	r2, #248	; 0xf8
 800731c:	0052      	lsls	r2, r2, #1
 800731e:	189b      	adds	r3, r3, r2
 8007320:	2218      	movs	r2, #24
 8007322:	4694      	mov	ip, r2
 8007324:	44bc      	add	ip, r7
 8007326:	4463      	add	r3, ip
 8007328:	22c4      	movs	r2, #196	; 0xc4
 800732a:	5a9b      	ldrh	r3, [r3, r2]
 800732c:	3b03      	subs	r3, #3
 800732e:	0019      	movs	r1, r3
 8007330:	2350      	movs	r3, #80	; 0x50
 8007332:	2218      	movs	r2, #24
 8007334:	189b      	adds	r3, r3, r2
 8007336:	19db      	adds	r3, r3, r7
 8007338:	3305      	adds	r3, #5
 800733a:	4a3d      	ldr	r2, [pc, #244]	; (8007430 <astronode_send_cmd_rr+0x2c8>)
 800733c:	2418      	movs	r4, #24
 800733e:	1900      	adds	r0, r0, r4
 8007340:	19c0      	adds	r0, r0, r7
 8007342:	6800      	ldr	r0, [r0, #0]
 8007344:	f000 fe52 	bl	8007fec <snprintf>
 8007348:	0002      	movs	r2, r0
 800734a:	23ef      	movs	r3, #239	; 0xef
 800734c:	005b      	lsls	r3, r3, #1
 800734e:	2118      	movs	r1, #24
 8007350:	185b      	adds	r3, r3, r1
 8007352:	19db      	adds	r3, r3, r7
 8007354:	801a      	strh	r2, [r3, #0]
            for (uint8_t index = 0; index < command_content_size; index++)
 8007356:	23f0      	movs	r3, #240	; 0xf0
 8007358:	33ff      	adds	r3, #255	; 0xff
 800735a:	2218      	movs	r2, #24
 800735c:	189b      	adds	r3, r3, r2
 800735e:	19db      	adds	r3, r3, r7
 8007360:	2200      	movs	r2, #0
 8007362:	701a      	strb	r2, [r3, #0]
 8007364:	e024      	b.n	80073b0 <astronode_send_cmd_rr+0x248>
            {
            	if (isprint((unsigned char)command_content[index]) == 0)
 8007366:	23f0      	movs	r3, #240	; 0xf0
 8007368:	33ff      	adds	r3, #255	; 0xff
 800736a:	2218      	movs	r2, #24
 800736c:	189b      	adds	r3, r3, r2
 800736e:	19db      	adds	r3, r3, r7
 8007370:	781b      	ldrb	r3, [r3, #0]
 8007372:	22f0      	movs	r2, #240	; 0xf0
 8007374:	0052      	lsls	r2, r2, #1
 8007376:	2118      	movs	r1, #24
 8007378:	1852      	adds	r2, r2, r1
 800737a:	19d2      	adds	r2, r2, r7
 800737c:	6812      	ldr	r2, [r2, #0]
 800737e:	5cd3      	ldrb	r3, [r2, r3]
 8007380:	1c5a      	adds	r2, r3, #1
 8007382:	4b2c      	ldr	r3, [pc, #176]	; (8007434 <astronode_send_cmd_rr+0x2cc>)
 8007384:	18d3      	adds	r3, r2, r3
 8007386:	781b      	ldrb	r3, [r3, #0]
 8007388:	001a      	movs	r2, r3
 800738a:	2397      	movs	r3, #151	; 0x97
 800738c:	4013      	ands	r3, r2
 800738e:	d104      	bne.n	800739a <astronode_send_cmd_rr+0x232>
                {
                    send_debug_logs("Command contains non printable characters");
 8007390:	4b29      	ldr	r3, [pc, #164]	; (8007438 <astronode_send_cmd_rr+0x2d0>)
 8007392:	0018      	movs	r0, r3
 8007394:	f7fb faaa 	bl	80028ec <send_debug_logs>
                    return;
 8007398:	e035      	b.n	8007406 <astronode_send_cmd_rr+0x29e>
            for (uint8_t index = 0; index < command_content_size; index++)
 800739a:	21f0      	movs	r1, #240	; 0xf0
 800739c:	31ff      	adds	r1, #255	; 0xff
 800739e:	2318      	movs	r3, #24
 80073a0:	18cb      	adds	r3, r1, r3
 80073a2:	19db      	adds	r3, r3, r7
 80073a4:	781a      	ldrb	r2, [r3, #0]
 80073a6:	2318      	movs	r3, #24
 80073a8:	18cb      	adds	r3, r1, r3
 80073aa:	19db      	adds	r3, r3, r7
 80073ac:	3201      	adds	r2, #1
 80073ae:	701a      	strb	r2, [r3, #0]
 80073b0:	23f0      	movs	r3, #240	; 0xf0
 80073b2:	33ff      	adds	r3, #255	; 0xff
 80073b4:	2218      	movs	r2, #24
 80073b6:	189b      	adds	r3, r3, r2
 80073b8:	19db      	adds	r3, r3, r7
 80073ba:	781b      	ldrb	r3, [r3, #0]
 80073bc:	b29b      	uxth	r3, r3
 80073be:	22ef      	movs	r2, #239	; 0xef
 80073c0:	0052      	lsls	r2, r2, #1
 80073c2:	2118      	movs	r1, #24
 80073c4:	1852      	adds	r2, r2, r1
 80073c6:	19d2      	adds	r2, r2, r7
 80073c8:	8812      	ldrh	r2, [r2, #0]
 80073ca:	429a      	cmp	r2, r3
 80073cc:	d8cb      	bhi.n	8007366 <astronode_send_cmd_rr+0x1fe>
                }
            }
            send_debug_logs("Command content is: ");
 80073ce:	4b1b      	ldr	r3, [pc, #108]	; (800743c <astronode_send_cmd_rr+0x2d4>)
 80073d0:	0018      	movs	r0, r3
 80073d2:	f7fb fa8b 	bl	80028ec <send_debug_logs>
            sprintf(command_content, "%s ", &answer.p_payload[4]);
 80073d6:	2350      	movs	r3, #80	; 0x50
 80073d8:	2218      	movs	r2, #24
 80073da:	189b      	adds	r3, r3, r2
 80073dc:	19db      	adds	r3, r3, r7
 80073de:	1d5a      	adds	r2, r3, #5
 80073e0:	4917      	ldr	r1, [pc, #92]	; (8007440 <astronode_send_cmd_rr+0x2d8>)
 80073e2:	24f0      	movs	r4, #240	; 0xf0
 80073e4:	0064      	lsls	r4, r4, #1
 80073e6:	2318      	movs	r3, #24
 80073e8:	18e3      	adds	r3, r4, r3
 80073ea:	19db      	adds	r3, r3, r7
 80073ec:	681b      	ldr	r3, [r3, #0]
 80073ee:	0018      	movs	r0, r3
 80073f0:	f000 fe30 	bl	8008054 <sprintf>
            send_debug_logs(command_content);
 80073f4:	2318      	movs	r3, #24
 80073f6:	18e3      	adds	r3, r4, r3
 80073f8:	19db      	adds	r3, r3, r7
 80073fa:	681b      	ldr	r3, [r3, #0]
 80073fc:	0018      	movs	r0, r3
 80073fe:	f7fb fa75 	bl	80028ec <send_debug_logs>
 8007402:	46b5      	mov	sp, r6
 8007404:	e005      	b.n	8007412 <astronode_send_cmd_rr+0x2aa>
                return;
 8007406:	46b5      	mov	sp, r6
 8007408:	e003      	b.n	8007412 <astronode_send_cmd_rr+0x2aa>
        }
        else
        {
            send_debug_logs("No command available.");
 800740a:	4b0e      	ldr	r3, [pc, #56]	; (8007444 <astronode_send_cmd_rr+0x2dc>)
 800740c:	0018      	movs	r0, r3
 800740e:	f7fb fa6d 	bl	80028ec <send_debug_logs>
        }
    }
}
 8007412:	46bd      	mov	sp, r7
 8007414:	2383      	movs	r3, #131	; 0x83
 8007416:	009b      	lsls	r3, r3, #2
 8007418:	449d      	add	sp, r3
 800741a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800741c:	fffffdf4 	.word	0xfffffdf4
 8007420:	fffffe60 	.word	0xfffffe60
 8007424:	0800db30 	.word	0x0800db30
 8007428:	0800db4c 	.word	0x0800db4c
 800742c:	0800db9c 	.word	0x0800db9c
 8007430:	0800d1dc 	.word	0x0800d1dc
 8007434:	0800e52c 	.word	0x0800e52c
 8007438:	0800dbb0 	.word	0x0800dbb0
 800743c:	0800dbdc 	.word	0x0800dbdc
 8007440:	0800dbf4 	.word	0x0800dbf4
 8007444:	0800dbf8 	.word	0x0800dbf8

08007448 <is_sak_available>:
        }
    }
}

bool is_sak_available()
{
 8007448:	b580      	push	{r7, lr}
 800744a:	af00      	add	r7, sp, #0
    return g_is_sak_available;
 800744c:	4b02      	ldr	r3, [pc, #8]	; (8007458 <is_sak_available+0x10>)
 800744e:	781b      	ldrb	r3, [r3, #0]
}
 8007450:	0018      	movs	r0, r3
 8007452:	46bd      	mov	sp, r7
 8007454:	bd80      	pop	{r7, pc}
 8007456:	46c0      	nop			; (mov r8, r8)
 8007458:	2000089c 	.word	0x2000089c

0800745c <is_astronode_reset>:

bool is_astronode_reset()
{
 800745c:	b580      	push	{r7, lr}
 800745e:	af00      	add	r7, sp, #0
    return g_is_astronode_reset;
 8007460:	4b02      	ldr	r3, [pc, #8]	; (800746c <is_astronode_reset+0x10>)
 8007462:	781b      	ldrb	r3, [r3, #0]
}
 8007464:	0018      	movs	r0, r3
 8007466:	46bd      	mov	sp, r7
 8007468:	bd80      	pop	{r7, pc}
 800746a:	46c0      	nop			; (mov r8, r8)
 800746c:	2000089d 	.word	0x2000089d

08007470 <is_command_available>:

bool is_command_available()
{
 8007470:	b580      	push	{r7, lr}
 8007472:	af00      	add	r7, sp, #0
    return g_is_command_available;
 8007474:	4b02      	ldr	r3, [pc, #8]	; (8007480 <is_command_available+0x10>)
 8007476:	781b      	ldrb	r3, [r3, #0]
}
 8007478:	0018      	movs	r0, r3
 800747a:	46bd      	mov	sp, r7
 800747c:	bd80      	pop	{r7, pc}
 800747e:	46c0      	nop			; (mov r8, r8)
 8007480:	2000089e 	.word	0x2000089e

08007484 <ascii_to_value>:

//------------------------------------------------------------------------------
// Function definitions
//------------------------------------------------------------------------------
static bool ascii_to_value(const uint8_t ascii, uint8_t *p_value)
{
 8007484:	b580      	push	{r7, lr}
 8007486:	b082      	sub	sp, #8
 8007488:	af00      	add	r7, sp, #0
 800748a:	0002      	movs	r2, r0
 800748c:	6039      	str	r1, [r7, #0]
 800748e:	1dfb      	adds	r3, r7, #7
 8007490:	701a      	strb	r2, [r3, #0]
    if (ascii >= '0' && ascii <= '9')
 8007492:	1dfb      	adds	r3, r7, #7
 8007494:	781b      	ldrb	r3, [r3, #0]
 8007496:	2b2f      	cmp	r3, #47	; 0x2f
 8007498:	d90b      	bls.n	80074b2 <ascii_to_value+0x2e>
 800749a:	1dfb      	adds	r3, r7, #7
 800749c:	781b      	ldrb	r3, [r3, #0]
 800749e:	2b39      	cmp	r3, #57	; 0x39
 80074a0:	d807      	bhi.n	80074b2 <ascii_to_value+0x2e>
    {
        *p_value = ascii - '0';
 80074a2:	1dfb      	adds	r3, r7, #7
 80074a4:	781b      	ldrb	r3, [r3, #0]
 80074a6:	3b30      	subs	r3, #48	; 0x30
 80074a8:	b2da      	uxtb	r2, r3
 80074aa:	683b      	ldr	r3, [r7, #0]
 80074ac:	701a      	strb	r2, [r3, #0]
        return true;
 80074ae:	2301      	movs	r3, #1
 80074b0:	e010      	b.n	80074d4 <ascii_to_value+0x50>
    }
    else if (ascii >= 'A' && ascii <= 'F')
 80074b2:	1dfb      	adds	r3, r7, #7
 80074b4:	781b      	ldrb	r3, [r3, #0]
 80074b6:	2b40      	cmp	r3, #64	; 0x40
 80074b8:	d90b      	bls.n	80074d2 <ascii_to_value+0x4e>
 80074ba:	1dfb      	adds	r3, r7, #7
 80074bc:	781b      	ldrb	r3, [r3, #0]
 80074be:	2b46      	cmp	r3, #70	; 0x46
 80074c0:	d807      	bhi.n	80074d2 <ascii_to_value+0x4e>
    {
        *p_value = ascii - 'A' + 10;
 80074c2:	1dfb      	adds	r3, r7, #7
 80074c4:	781b      	ldrb	r3, [r3, #0]
 80074c6:	3b37      	subs	r3, #55	; 0x37
 80074c8:	b2da      	uxtb	r2, r3
 80074ca:	683b      	ldr	r3, [r7, #0]
 80074cc:	701a      	strb	r2, [r3, #0]
        return true;
 80074ce:	2301      	movs	r3, #1
 80074d0:	e000      	b.n	80074d4 <ascii_to_value+0x50>
    }
    else
    {
        return false;
 80074d2:	2300      	movs	r3, #0
    }
}
 80074d4:	0018      	movs	r0, r3
 80074d6:	46bd      	mov	sp, r7
 80074d8:	b002      	add	sp, #8
 80074da:	bd80      	pop	{r7, pc}

080074dc <astronode_create_request_transport>:

static uint16_t astronode_create_request_transport(astronode_app_msg_t *p_source_message, uint8_t *p_destination_buffer)
{
 80074dc:	b5f0      	push	{r4, r5, r6, r7, lr}
 80074de:	b085      	sub	sp, #20
 80074e0:	af00      	add	r7, sp, #0
 80074e2:	6078      	str	r0, [r7, #4]
 80074e4:	6039      	str	r1, [r7, #0]
    uint16_t index = 0;
 80074e6:	250e      	movs	r5, #14
 80074e8:	197b      	adds	r3, r7, r5
 80074ea:	2200      	movs	r2, #0
 80074ec:	801a      	strh	r2, [r3, #0]

    p_destination_buffer[index++] = ASTRONODE_TRANSPORT_STX;
 80074ee:	197b      	adds	r3, r7, r5
 80074f0:	881b      	ldrh	r3, [r3, #0]
 80074f2:	197a      	adds	r2, r7, r5
 80074f4:	1c59      	adds	r1, r3, #1
 80074f6:	8011      	strh	r1, [r2, #0]
 80074f8:	001a      	movs	r2, r3
 80074fa:	683b      	ldr	r3, [r7, #0]
 80074fc:	189b      	adds	r3, r3, r2
 80074fe:	2202      	movs	r2, #2
 8007500:	701a      	strb	r2, [r3, #0]

    uint16_t crc = calculate_crc((const uint8_t *)&p_source_message->op_code, 1, 0xFFFF);
 8007502:	687b      	ldr	r3, [r7, #4]
 8007504:	260a      	movs	r6, #10
 8007506:	19bc      	adds	r4, r7, r6
 8007508:	4a44      	ldr	r2, [pc, #272]	; (800761c <astronode_create_request_transport+0x140>)
 800750a:	2101      	movs	r1, #1
 800750c:	0018      	movs	r0, r3
 800750e:	f000 fa7d 	bl	8007a0c <calculate_crc>
 8007512:	0003      	movs	r3, r0
 8007514:	8023      	strh	r3, [r4, #0]
    crc = calculate_crc((const uint8_t *)&p_source_message->p_payload, p_source_message->payload_len, crc);
 8007516:	687b      	ldr	r3, [r7, #4]
 8007518:	1c58      	adds	r0, r3, #1
 800751a:	687b      	ldr	r3, [r7, #4]
 800751c:	22c4      	movs	r2, #196	; 0xc4
 800751e:	5a99      	ldrh	r1, [r3, r2]
 8007520:	19bc      	adds	r4, r7, r6
 8007522:	19bb      	adds	r3, r7, r6
 8007524:	881b      	ldrh	r3, [r3, #0]
 8007526:	001a      	movs	r2, r3
 8007528:	f000 fa70 	bl	8007a0c <calculate_crc>
 800752c:	0003      	movs	r3, r0
 800752e:	8023      	strh	r3, [r4, #0]
    crc = ((crc << 8) & 0xff00) | ((crc >> 8) & 0x00ff);
 8007530:	19bb      	adds	r3, r7, r6
 8007532:	881b      	ldrh	r3, [r3, #0]
 8007534:	021b      	lsls	r3, r3, #8
 8007536:	b21a      	sxth	r2, r3
 8007538:	0031      	movs	r1, r6
 800753a:	19bb      	adds	r3, r7, r6
 800753c:	881b      	ldrh	r3, [r3, #0]
 800753e:	0a1b      	lsrs	r3, r3, #8
 8007540:	b29b      	uxth	r3, r3
 8007542:	b21b      	sxth	r3, r3
 8007544:	4313      	orrs	r3, r2
 8007546:	b21a      	sxth	r2, r3
 8007548:	187b      	adds	r3, r7, r1
 800754a:	801a      	strh	r2, [r3, #0]

    uint8_to_ascii_buffer(p_source_message->op_code, &p_destination_buffer[index]);
 800754c:	687b      	ldr	r3, [r7, #4]
 800754e:	7818      	ldrb	r0, [r3, #0]
 8007550:	197b      	adds	r3, r7, r5
 8007552:	881b      	ldrh	r3, [r3, #0]
 8007554:	683a      	ldr	r2, [r7, #0]
 8007556:	18d3      	adds	r3, r2, r3
 8007558:	0019      	movs	r1, r3
 800755a:	f000 fbeb 	bl	8007d34 <uint8_to_ascii_buffer>
    index += 2;
 800755e:	197b      	adds	r3, r7, r5
 8007560:	197a      	adds	r2, r7, r5
 8007562:	8812      	ldrh	r2, [r2, #0]
 8007564:	3202      	adds	r2, #2
 8007566:	801a      	strh	r2, [r3, #0]

    for (uint16_t i = 0; i < p_source_message->payload_len; i++)
 8007568:	230c      	movs	r3, #12
 800756a:	18fb      	adds	r3, r7, r3
 800756c:	2200      	movs	r2, #0
 800756e:	801a      	strh	r2, [r3, #0]
 8007570:	e017      	b.n	80075a2 <astronode_create_request_transport+0xc6>
    {
        uint8_to_ascii_buffer(p_source_message->p_payload[i], &p_destination_buffer[index]);
 8007572:	240c      	movs	r4, #12
 8007574:	193b      	adds	r3, r7, r4
 8007576:	881b      	ldrh	r3, [r3, #0]
 8007578:	687a      	ldr	r2, [r7, #4]
 800757a:	18d3      	adds	r3, r2, r3
 800757c:	7858      	ldrb	r0, [r3, #1]
 800757e:	250e      	movs	r5, #14
 8007580:	197b      	adds	r3, r7, r5
 8007582:	881b      	ldrh	r3, [r3, #0]
 8007584:	683a      	ldr	r2, [r7, #0]
 8007586:	18d3      	adds	r3, r2, r3
 8007588:	0019      	movs	r1, r3
 800758a:	f000 fbd3 	bl	8007d34 <uint8_to_ascii_buffer>
        index += 2;
 800758e:	197b      	adds	r3, r7, r5
 8007590:	197a      	adds	r2, r7, r5
 8007592:	8812      	ldrh	r2, [r2, #0]
 8007594:	3202      	adds	r2, #2
 8007596:	801a      	strh	r2, [r3, #0]
    for (uint16_t i = 0; i < p_source_message->payload_len; i++)
 8007598:	193b      	adds	r3, r7, r4
 800759a:	881a      	ldrh	r2, [r3, #0]
 800759c:	193b      	adds	r3, r7, r4
 800759e:	3201      	adds	r2, #1
 80075a0:	801a      	strh	r2, [r3, #0]
 80075a2:	687b      	ldr	r3, [r7, #4]
 80075a4:	22c4      	movs	r2, #196	; 0xc4
 80075a6:	5a9b      	ldrh	r3, [r3, r2]
 80075a8:	220c      	movs	r2, #12
 80075aa:	18ba      	adds	r2, r7, r2
 80075ac:	8812      	ldrh	r2, [r2, #0]
 80075ae:	429a      	cmp	r2, r3
 80075b0:	d3df      	bcc.n	8007572 <astronode_create_request_transport+0x96>
    }

    uint8_to_ascii_buffer(crc >> 8, &p_destination_buffer[index]);
 80075b2:	250a      	movs	r5, #10
 80075b4:	197b      	adds	r3, r7, r5
 80075b6:	881b      	ldrh	r3, [r3, #0]
 80075b8:	0a1b      	lsrs	r3, r3, #8
 80075ba:	b29b      	uxth	r3, r3
 80075bc:	b2d8      	uxtb	r0, r3
 80075be:	240e      	movs	r4, #14
 80075c0:	193b      	adds	r3, r7, r4
 80075c2:	881b      	ldrh	r3, [r3, #0]
 80075c4:	683a      	ldr	r2, [r7, #0]
 80075c6:	18d3      	adds	r3, r2, r3
 80075c8:	0019      	movs	r1, r3
 80075ca:	f000 fbb3 	bl	8007d34 <uint8_to_ascii_buffer>
    index += 2;
 80075ce:	0021      	movs	r1, r4
 80075d0:	187b      	adds	r3, r7, r1
 80075d2:	187a      	adds	r2, r7, r1
 80075d4:	8812      	ldrh	r2, [r2, #0]
 80075d6:	3202      	adds	r2, #2
 80075d8:	801a      	strh	r2, [r3, #0]
    uint8_to_ascii_buffer(crc & 0xFF, &p_destination_buffer[index]);
 80075da:	197b      	adds	r3, r7, r5
 80075dc:	881b      	ldrh	r3, [r3, #0]
 80075de:	b2d8      	uxtb	r0, r3
 80075e0:	000c      	movs	r4, r1
 80075e2:	187b      	adds	r3, r7, r1
 80075e4:	881b      	ldrh	r3, [r3, #0]
 80075e6:	683a      	ldr	r2, [r7, #0]
 80075e8:	18d3      	adds	r3, r2, r3
 80075ea:	0019      	movs	r1, r3
 80075ec:	f000 fba2 	bl	8007d34 <uint8_to_ascii_buffer>
    index += 2;
 80075f0:	0020      	movs	r0, r4
 80075f2:	183b      	adds	r3, r7, r0
 80075f4:	183a      	adds	r2, r7, r0
 80075f6:	8812      	ldrh	r2, [r2, #0]
 80075f8:	3202      	adds	r2, #2
 80075fa:	801a      	strh	r2, [r3, #0]

    p_destination_buffer[index++] = ASTRONODE_TRANSPORT_ETX;
 80075fc:	183b      	adds	r3, r7, r0
 80075fe:	881b      	ldrh	r3, [r3, #0]
 8007600:	183a      	adds	r2, r7, r0
 8007602:	1c59      	adds	r1, r3, #1
 8007604:	8011      	strh	r1, [r2, #0]
 8007606:	001a      	movs	r2, r3
 8007608:	683b      	ldr	r3, [r7, #0]
 800760a:	189b      	adds	r3, r3, r2
 800760c:	2203      	movs	r2, #3
 800760e:	701a      	strb	r2, [r3, #0]

    return index;
 8007610:	183b      	adds	r3, r7, r0
 8007612:	881b      	ldrh	r3, [r3, #0]
}
 8007614:	0018      	movs	r0, r3
 8007616:	46bd      	mov	sp, r7
 8007618:	b005      	add	sp, #20
 800761a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800761c:	0000ffff 	.word	0x0000ffff

08007620 <astronode_decode_answer_transport>:

static return_status_t astronode_decode_answer_transport(uint8_t *p_source_buffer, uint16_t length_buffer, astronode_app_msg_t *p_destination_message)
{
 8007620:	b5f0      	push	{r4, r5, r6, r7, lr}
 8007622:	b089      	sub	sp, #36	; 0x24
 8007624:	af00      	add	r7, sp, #0
 8007626:	60f8      	str	r0, [r7, #12]
 8007628:	607a      	str	r2, [r7, #4]
 800762a:	230a      	movs	r3, #10
 800762c:	18fb      	adds	r3, r7, r3
 800762e:	1c0a      	adds	r2, r1, #0
 8007630:	801a      	strh	r2, [r3, #0]
    if (p_source_buffer[0] != ASTRONODE_TRANSPORT_STX)
 8007632:	68fb      	ldr	r3, [r7, #12]
 8007634:	781b      	ldrb	r3, [r3, #0]
 8007636:	2b02      	cmp	r3, #2
 8007638:	d005      	beq.n	8007646 <astronode_decode_answer_transport+0x26>
    {
        send_debug_logs("ERROR : Message received from the Astronode does not start with STX character.");
 800763a:	4bbd      	ldr	r3, [pc, #756]	; (8007930 <astronode_decode_answer_transport+0x310>)
 800763c:	0018      	movs	r0, r3
 800763e:	f7fb f955 	bl	80028ec <send_debug_logs>
        return RS_FAILURE;
 8007642:	2300      	movs	r3, #0
 8007644:	e170      	b.n	8007928 <astronode_decode_answer_transport+0x308>
    }

    if (length_buffer % 2 == 1 || length_buffer < 8) // 8: STX, ETX, 2 x opcode, 4 x CRC
 8007646:	210a      	movs	r1, #10
 8007648:	187b      	adds	r3, r7, r1
 800764a:	881b      	ldrh	r3, [r3, #0]
 800764c:	2201      	movs	r2, #1
 800764e:	4013      	ands	r3, r2
 8007650:	b29b      	uxth	r3, r3
 8007652:	2b00      	cmp	r3, #0
 8007654:	d103      	bne.n	800765e <astronode_decode_answer_transport+0x3e>
 8007656:	187b      	adds	r3, r7, r1
 8007658:	881b      	ldrh	r3, [r3, #0]
 800765a:	2b07      	cmp	r3, #7
 800765c:	d805      	bhi.n	800766a <astronode_decode_answer_transport+0x4a>
    {
        send_debug_logs("ERROR : Message received from the Astronode is missing at least one character.");
 800765e:	4bb5      	ldr	r3, [pc, #724]	; (8007934 <astronode_decode_answer_transport+0x314>)
 8007660:	0018      	movs	r0, r3
 8007662:	f7fb f943 	bl	80028ec <send_debug_logs>
        return RS_FAILURE;
 8007666:	2300      	movs	r3, #0
 8007668:	e15e      	b.n	8007928 <astronode_decode_answer_transport+0x308>
    }

    p_destination_message->payload_len = (length_buffer - 8) / 2;
 800766a:	230a      	movs	r3, #10
 800766c:	18fb      	adds	r3, r7, r3
 800766e:	881b      	ldrh	r3, [r3, #0]
 8007670:	3b08      	subs	r3, #8
 8007672:	2b00      	cmp	r3, #0
 8007674:	da00      	bge.n	8007678 <astronode_decode_answer_transport+0x58>
 8007676:	3301      	adds	r3, #1
 8007678:	105b      	asrs	r3, r3, #1
 800767a:	b299      	uxth	r1, r3
 800767c:	687b      	ldr	r3, [r7, #4]
 800767e:	22c4      	movs	r2, #196	; 0xc4
 8007680:	5299      	strh	r1, [r3, r2]

    if (p_source_buffer[length_buffer - 1] != ASTRONODE_TRANSPORT_ETX)
 8007682:	230a      	movs	r3, #10
 8007684:	18fb      	adds	r3, r7, r3
 8007686:	881b      	ldrh	r3, [r3, #0]
 8007688:	3b01      	subs	r3, #1
 800768a:	68fa      	ldr	r2, [r7, #12]
 800768c:	18d3      	adds	r3, r2, r3
 800768e:	781b      	ldrb	r3, [r3, #0]
 8007690:	2b03      	cmp	r3, #3
 8007692:	d005      	beq.n	80076a0 <astronode_decode_answer_transport+0x80>
    {
        send_debug_logs("ERROR : Message received from the Astronode does not end with ETX character.");
 8007694:	4ba8      	ldr	r3, [pc, #672]	; (8007938 <astronode_decode_answer_transport+0x318>)
 8007696:	0018      	movs	r0, r3
 8007698:	f7fb f928 	bl	80028ec <send_debug_logs>
        return RS_FAILURE;
 800769c:	2300      	movs	r3, #0
 800769e:	e143      	b.n	8007928 <astronode_decode_answer_transport+0x308>
    }

    uint8_t nibble_high = 0;
 80076a0:	2117      	movs	r1, #23
 80076a2:	187b      	adds	r3, r7, r1
 80076a4:	2200      	movs	r2, #0
 80076a6:	701a      	strb	r2, [r3, #0]
    uint8_t nibble_low = 0;
 80076a8:	2416      	movs	r4, #22
 80076aa:	193b      	adds	r3, r7, r4
 80076ac:	2200      	movs	r2, #0
 80076ae:	701a      	strb	r2, [r3, #0]

    // Op code
    if (ascii_to_value(p_source_buffer[1], &nibble_high) == false
 80076b0:	68fb      	ldr	r3, [r7, #12]
 80076b2:	3301      	adds	r3, #1
 80076b4:	781b      	ldrb	r3, [r3, #0]
 80076b6:	187a      	adds	r2, r7, r1
 80076b8:	0011      	movs	r1, r2
 80076ba:	0018      	movs	r0, r3
 80076bc:	f7ff fee2 	bl	8007484 <ascii_to_value>
 80076c0:	0003      	movs	r3, r0
 80076c2:	001a      	movs	r2, r3
 80076c4:	2301      	movs	r3, #1
 80076c6:	4053      	eors	r3, r2
 80076c8:	b2db      	uxtb	r3, r3
 80076ca:	2b00      	cmp	r3, #0
 80076cc:	d10e      	bne.n	80076ec <astronode_decode_answer_transport+0xcc>
        || ascii_to_value(p_source_buffer[2], &nibble_low) == false)
 80076ce:	68fb      	ldr	r3, [r7, #12]
 80076d0:	3302      	adds	r3, #2
 80076d2:	781b      	ldrb	r3, [r3, #0]
 80076d4:	193a      	adds	r2, r7, r4
 80076d6:	0011      	movs	r1, r2
 80076d8:	0018      	movs	r0, r3
 80076da:	f7ff fed3 	bl	8007484 <ascii_to_value>
 80076de:	0003      	movs	r3, r0
 80076e0:	001a      	movs	r2, r3
 80076e2:	2301      	movs	r3, #1
 80076e4:	4053      	eors	r3, r2
 80076e6:	b2db      	uxtb	r3, r3
 80076e8:	2b00      	cmp	r3, #0
 80076ea:	d005      	beq.n	80076f8 <astronode_decode_answer_transport+0xd8>
    {
        send_debug_logs("ERROR : Message received from the Astronode contains a non-ASCII character.");
 80076ec:	4b93      	ldr	r3, [pc, #588]	; (800793c <astronode_decode_answer_transport+0x31c>)
 80076ee:	0018      	movs	r0, r3
 80076f0:	f7fb f8fc 	bl	80028ec <send_debug_logs>
        return RS_FAILURE;
 80076f4:	2300      	movs	r3, #0
 80076f6:	e117      	b.n	8007928 <astronode_decode_answer_transport+0x308>
    }

    p_destination_message->op_code = (nibble_high << 4) + nibble_low;
 80076f8:	2317      	movs	r3, #23
 80076fa:	18fb      	adds	r3, r7, r3
 80076fc:	781b      	ldrb	r3, [r3, #0]
 80076fe:	011b      	lsls	r3, r3, #4
 8007700:	b2da      	uxtb	r2, r3
 8007702:	2316      	movs	r3, #22
 8007704:	18fb      	adds	r3, r7, r3
 8007706:	781b      	ldrb	r3, [r3, #0]
 8007708:	18d3      	adds	r3, r2, r3
 800770a:	b2da      	uxtb	r2, r3
 800770c:	687b      	ldr	r3, [r7, #4]
 800770e:	701a      	strb	r2, [r3, #0]

    // Payload
    for (uint16_t i = 3, j = 0; i < length_buffer - 5; i += 2)
 8007710:	231e      	movs	r3, #30
 8007712:	18fb      	adds	r3, r7, r3
 8007714:	2203      	movs	r2, #3
 8007716:	801a      	strh	r2, [r3, #0]
 8007718:	231c      	movs	r3, #28
 800771a:	18fb      	adds	r3, r7, r3
 800771c:	2200      	movs	r2, #0
 800771e:	801a      	strh	r2, [r3, #0]
 8007720:	e045      	b.n	80077ae <astronode_decode_answer_transport+0x18e>
    {
        if (ascii_to_value(p_source_buffer[i], &nibble_high) == false
 8007722:	241e      	movs	r4, #30
 8007724:	193b      	adds	r3, r7, r4
 8007726:	881b      	ldrh	r3, [r3, #0]
 8007728:	68fa      	ldr	r2, [r7, #12]
 800772a:	18d3      	adds	r3, r2, r3
 800772c:	781b      	ldrb	r3, [r3, #0]
 800772e:	2217      	movs	r2, #23
 8007730:	18ba      	adds	r2, r7, r2
 8007732:	0011      	movs	r1, r2
 8007734:	0018      	movs	r0, r3
 8007736:	f7ff fea5 	bl	8007484 <ascii_to_value>
 800773a:	0003      	movs	r3, r0
 800773c:	001a      	movs	r2, r3
 800773e:	2301      	movs	r3, #1
 8007740:	4053      	eors	r3, r2
 8007742:	b2db      	uxtb	r3, r3
 8007744:	2b00      	cmp	r3, #0
 8007746:	d112      	bne.n	800776e <astronode_decode_answer_transport+0x14e>
            || ascii_to_value(p_source_buffer[i + 1], &nibble_low) == false)
 8007748:	193b      	adds	r3, r7, r4
 800774a:	881b      	ldrh	r3, [r3, #0]
 800774c:	3301      	adds	r3, #1
 800774e:	68fa      	ldr	r2, [r7, #12]
 8007750:	18d3      	adds	r3, r2, r3
 8007752:	781b      	ldrb	r3, [r3, #0]
 8007754:	2216      	movs	r2, #22
 8007756:	18ba      	adds	r2, r7, r2
 8007758:	0011      	movs	r1, r2
 800775a:	0018      	movs	r0, r3
 800775c:	f7ff fe92 	bl	8007484 <ascii_to_value>
 8007760:	0003      	movs	r3, r0
 8007762:	001a      	movs	r2, r3
 8007764:	2301      	movs	r3, #1
 8007766:	4053      	eors	r3, r2
 8007768:	b2db      	uxtb	r3, r3
 800776a:	2b00      	cmp	r3, #0
 800776c:	d005      	beq.n	800777a <astronode_decode_answer_transport+0x15a>
        {
            send_debug_logs("ERROR : Message received from the Astronode contains a non-ASCII character.");
 800776e:	4b73      	ldr	r3, [pc, #460]	; (800793c <astronode_decode_answer_transport+0x31c>)
 8007770:	0018      	movs	r0, r3
 8007772:	f7fb f8bb 	bl	80028ec <send_debug_logs>
            return RS_FAILURE;
 8007776:	2300      	movs	r3, #0
 8007778:	e0d6      	b.n	8007928 <astronode_decode_answer_transport+0x308>
        }

        p_destination_message->p_payload[j++] = (nibble_high << 4) + nibble_low;
 800777a:	2317      	movs	r3, #23
 800777c:	18fb      	adds	r3, r7, r3
 800777e:	781b      	ldrb	r3, [r3, #0]
 8007780:	011b      	lsls	r3, r3, #4
 8007782:	b2d9      	uxtb	r1, r3
 8007784:	2316      	movs	r3, #22
 8007786:	18fb      	adds	r3, r7, r3
 8007788:	781a      	ldrb	r2, [r3, #0]
 800778a:	201c      	movs	r0, #28
 800778c:	183b      	adds	r3, r7, r0
 800778e:	881b      	ldrh	r3, [r3, #0]
 8007790:	1838      	adds	r0, r7, r0
 8007792:	1c5c      	adds	r4, r3, #1
 8007794:	8004      	strh	r4, [r0, #0]
 8007796:	0018      	movs	r0, r3
 8007798:	188b      	adds	r3, r1, r2
 800779a:	b2da      	uxtb	r2, r3
 800779c:	687b      	ldr	r3, [r7, #4]
 800779e:	181b      	adds	r3, r3, r0
 80077a0:	705a      	strb	r2, [r3, #1]
    for (uint16_t i = 3, j = 0; i < length_buffer - 5; i += 2)
 80077a2:	221e      	movs	r2, #30
 80077a4:	18bb      	adds	r3, r7, r2
 80077a6:	18ba      	adds	r2, r7, r2
 80077a8:	8812      	ldrh	r2, [r2, #0]
 80077aa:	3202      	adds	r2, #2
 80077ac:	801a      	strh	r2, [r3, #0]
 80077ae:	231e      	movs	r3, #30
 80077b0:	18fb      	adds	r3, r7, r3
 80077b2:	881a      	ldrh	r2, [r3, #0]
 80077b4:	260a      	movs	r6, #10
 80077b6:	19bb      	adds	r3, r7, r6
 80077b8:	881b      	ldrh	r3, [r3, #0]
 80077ba:	3b05      	subs	r3, #5
 80077bc:	429a      	cmp	r2, r3
 80077be:	dbb0      	blt.n	8007722 <astronode_decode_answer_transport+0x102>
    }

    // CRC
    uint16_t crc_calculated = calculate_crc((const uint8_t *)&p_destination_message->op_code, 1, 0xFFFF);
 80077c0:	687b      	ldr	r3, [r7, #4]
 80077c2:	251a      	movs	r5, #26
 80077c4:	197c      	adds	r4, r7, r5
 80077c6:	4a5e      	ldr	r2, [pc, #376]	; (8007940 <astronode_decode_answer_transport+0x320>)
 80077c8:	2101      	movs	r1, #1
 80077ca:	0018      	movs	r0, r3
 80077cc:	f000 f91e 	bl	8007a0c <calculate_crc>
 80077d0:	0003      	movs	r3, r0
 80077d2:	8023      	strh	r3, [r4, #0]
    crc_calculated = calculate_crc((const uint8_t *)&p_destination_message->p_payload, p_destination_message->payload_len, crc_calculated);
 80077d4:	687b      	ldr	r3, [r7, #4]
 80077d6:	1c58      	adds	r0, r3, #1
 80077d8:	687b      	ldr	r3, [r7, #4]
 80077da:	22c4      	movs	r2, #196	; 0xc4
 80077dc:	5a99      	ldrh	r1, [r3, r2]
 80077de:	197c      	adds	r4, r7, r5
 80077e0:	197b      	adds	r3, r7, r5
 80077e2:	881b      	ldrh	r3, [r3, #0]
 80077e4:	001a      	movs	r2, r3
 80077e6:	f000 f911 	bl	8007a0c <calculate_crc>
 80077ea:	0003      	movs	r3, r0
 80077ec:	8023      	strh	r3, [r4, #0]
    crc_calculated = ((crc_calculated << 8) & 0xff00) | ((crc_calculated >> 8) & 0x00ff);
 80077ee:	197b      	adds	r3, r7, r5
 80077f0:	881b      	ldrh	r3, [r3, #0]
 80077f2:	021b      	lsls	r3, r3, #8
 80077f4:	b21a      	sxth	r2, r3
 80077f6:	0029      	movs	r1, r5
 80077f8:	197b      	adds	r3, r7, r5
 80077fa:	881b      	ldrh	r3, [r3, #0]
 80077fc:	0a1b      	lsrs	r3, r3, #8
 80077fe:	b29b      	uxth	r3, r3
 8007800:	b21b      	sxth	r3, r3
 8007802:	4313      	orrs	r3, r2
 8007804:	b21a      	sxth	r2, r3
 8007806:	187b      	adds	r3, r7, r1
 8007808:	801a      	strh	r2, [r3, #0]


    if (ascii_to_value(p_source_buffer[length_buffer - 5], &nibble_high) == false
 800780a:	19bb      	adds	r3, r7, r6
 800780c:	881b      	ldrh	r3, [r3, #0]
 800780e:	3b05      	subs	r3, #5
 8007810:	68fa      	ldr	r2, [r7, #12]
 8007812:	18d3      	adds	r3, r2, r3
 8007814:	781b      	ldrb	r3, [r3, #0]
 8007816:	2217      	movs	r2, #23
 8007818:	18ba      	adds	r2, r7, r2
 800781a:	0011      	movs	r1, r2
 800781c:	0018      	movs	r0, r3
 800781e:	f7ff fe31 	bl	8007484 <ascii_to_value>
 8007822:	0003      	movs	r3, r0
 8007824:	001a      	movs	r2, r3
 8007826:	2301      	movs	r3, #1
 8007828:	4053      	eors	r3, r2
 800782a:	b2db      	uxtb	r3, r3
 800782c:	2b00      	cmp	r3, #0
 800782e:	d112      	bne.n	8007856 <astronode_decode_answer_transport+0x236>
        || ascii_to_value(p_source_buffer[length_buffer - 4], &nibble_low) == false)
 8007830:	19bb      	adds	r3, r7, r6
 8007832:	881b      	ldrh	r3, [r3, #0]
 8007834:	3b04      	subs	r3, #4
 8007836:	68fa      	ldr	r2, [r7, #12]
 8007838:	18d3      	adds	r3, r2, r3
 800783a:	781b      	ldrb	r3, [r3, #0]
 800783c:	2216      	movs	r2, #22
 800783e:	18ba      	adds	r2, r7, r2
 8007840:	0011      	movs	r1, r2
 8007842:	0018      	movs	r0, r3
 8007844:	f7ff fe1e 	bl	8007484 <ascii_to_value>
 8007848:	0003      	movs	r3, r0
 800784a:	001a      	movs	r2, r3
 800784c:	2301      	movs	r3, #1
 800784e:	4053      	eors	r3, r2
 8007850:	b2db      	uxtb	r3, r3
 8007852:	2b00      	cmp	r3, #0
 8007854:	d005      	beq.n	8007862 <astronode_decode_answer_transport+0x242>
    {
        send_debug_logs("ERROR : Message received from the Astronode contains a non-ASCII character.");
 8007856:	4b39      	ldr	r3, [pc, #228]	; (800793c <astronode_decode_answer_transport+0x31c>)
 8007858:	0018      	movs	r0, r3
 800785a:	f7fb f847 	bl	80028ec <send_debug_logs>
        return RS_FAILURE;
 800785e:	2300      	movs	r3, #0
 8007860:	e062      	b.n	8007928 <astronode_decode_answer_transport+0x308>
    }

    uint16_t crc_received = (nibble_high << 12) + (nibble_low << 8);
 8007862:	2017      	movs	r0, #23
 8007864:	183b      	adds	r3, r7, r0
 8007866:	781b      	ldrb	r3, [r3, #0]
 8007868:	b29b      	uxth	r3, r3
 800786a:	031b      	lsls	r3, r3, #12
 800786c:	b299      	uxth	r1, r3
 800786e:	2416      	movs	r4, #22
 8007870:	193b      	adds	r3, r7, r4
 8007872:	781b      	ldrb	r3, [r3, #0]
 8007874:	b29b      	uxth	r3, r3
 8007876:	021b      	lsls	r3, r3, #8
 8007878:	b29a      	uxth	r2, r3
 800787a:	2318      	movs	r3, #24
 800787c:	18fb      	adds	r3, r7, r3
 800787e:	188a      	adds	r2, r1, r2
 8007880:	801a      	strh	r2, [r3, #0]

    if (ascii_to_value(p_source_buffer[length_buffer - 3], &nibble_high) == false
 8007882:	250a      	movs	r5, #10
 8007884:	197b      	adds	r3, r7, r5
 8007886:	881b      	ldrh	r3, [r3, #0]
 8007888:	3b03      	subs	r3, #3
 800788a:	68fa      	ldr	r2, [r7, #12]
 800788c:	18d3      	adds	r3, r2, r3
 800788e:	781b      	ldrb	r3, [r3, #0]
 8007890:	183a      	adds	r2, r7, r0
 8007892:	0011      	movs	r1, r2
 8007894:	0018      	movs	r0, r3
 8007896:	f7ff fdf5 	bl	8007484 <ascii_to_value>
 800789a:	0003      	movs	r3, r0
 800789c:	001a      	movs	r2, r3
 800789e:	2301      	movs	r3, #1
 80078a0:	4053      	eors	r3, r2
 80078a2:	b2db      	uxtb	r3, r3
 80078a4:	2b00      	cmp	r3, #0
 80078a6:	d111      	bne.n	80078cc <astronode_decode_answer_transport+0x2ac>
        || ascii_to_value(p_source_buffer[length_buffer - 2], &nibble_low) == false)
 80078a8:	197b      	adds	r3, r7, r5
 80078aa:	881b      	ldrh	r3, [r3, #0]
 80078ac:	3b02      	subs	r3, #2
 80078ae:	68fa      	ldr	r2, [r7, #12]
 80078b0:	18d3      	adds	r3, r2, r3
 80078b2:	781b      	ldrb	r3, [r3, #0]
 80078b4:	193a      	adds	r2, r7, r4
 80078b6:	0011      	movs	r1, r2
 80078b8:	0018      	movs	r0, r3
 80078ba:	f7ff fde3 	bl	8007484 <ascii_to_value>
 80078be:	0003      	movs	r3, r0
 80078c0:	001a      	movs	r2, r3
 80078c2:	2301      	movs	r3, #1
 80078c4:	4053      	eors	r3, r2
 80078c6:	b2db      	uxtb	r3, r3
 80078c8:	2b00      	cmp	r3, #0
 80078ca:	d005      	beq.n	80078d8 <astronode_decode_answer_transport+0x2b8>
    {
        send_debug_logs("ERROR : Message received from the Astronode contains a non-ASCII character.");
 80078cc:	4b1b      	ldr	r3, [pc, #108]	; (800793c <astronode_decode_answer_transport+0x31c>)
 80078ce:	0018      	movs	r0, r3
 80078d0:	f7fb f80c 	bl	80028ec <send_debug_logs>
        return RS_FAILURE;
 80078d4:	2300      	movs	r3, #0
 80078d6:	e027      	b.n	8007928 <astronode_decode_answer_transport+0x308>
    }

    crc_received += (nibble_high << 4) + nibble_low;
 80078d8:	2317      	movs	r3, #23
 80078da:	18fb      	adds	r3, r7, r3
 80078dc:	781b      	ldrb	r3, [r3, #0]
 80078de:	b29b      	uxth	r3, r3
 80078e0:	011b      	lsls	r3, r3, #4
 80078e2:	b29a      	uxth	r2, r3
 80078e4:	2316      	movs	r3, #22
 80078e6:	18fb      	adds	r3, r7, r3
 80078e8:	781b      	ldrb	r3, [r3, #0]
 80078ea:	b29b      	uxth	r3, r3
 80078ec:	18d3      	adds	r3, r2, r3
 80078ee:	b299      	uxth	r1, r3
 80078f0:	2018      	movs	r0, #24
 80078f2:	183b      	adds	r3, r7, r0
 80078f4:	183a      	adds	r2, r7, r0
 80078f6:	8812      	ldrh	r2, [r2, #0]
 80078f8:	188a      	adds	r2, r1, r2
 80078fa:	801a      	strh	r2, [r3, #0]

    if (crc_received != crc_calculated)
 80078fc:	183a      	adds	r2, r7, r0
 80078fe:	231a      	movs	r3, #26
 8007900:	18fb      	adds	r3, r7, r3
 8007902:	8812      	ldrh	r2, [r2, #0]
 8007904:	881b      	ldrh	r3, [r3, #0]
 8007906:	429a      	cmp	r2, r3
 8007908:	d005      	beq.n	8007916 <astronode_decode_answer_transport+0x2f6>
    {
        send_debug_logs("ERROR : CRC sent by the Astronode does not match the expected CRC");
 800790a:	4b0e      	ldr	r3, [pc, #56]	; (8007944 <astronode_decode_answer_transport+0x324>)
 800790c:	0018      	movs	r0, r3
 800790e:	f7fa ffed 	bl	80028ec <send_debug_logs>
        return RS_FAILURE;
 8007912:	2300      	movs	r3, #0
 8007914:	e008      	b.n	8007928 <astronode_decode_answer_transport+0x308>
    }

    if (p_destination_message->op_code == ASTRONODE_OP_CODE_ERROR)
 8007916:	687b      	ldr	r3, [r7, #4]
 8007918:	781b      	ldrb	r3, [r3, #0]
 800791a:	2bff      	cmp	r3, #255	; 0xff
 800791c:	d103      	bne.n	8007926 <astronode_decode_answer_transport+0x306>
    {
        check_for_error(p_destination_message);
 800791e:	687b      	ldr	r3, [r7, #4]
 8007920:	0018      	movs	r0, r3
 8007922:	f000 f8c3 	bl	8007aac <check_for_error>
    }

    return RS_SUCCESS;
 8007926:	2301      	movs	r3, #1
}
 8007928:	0018      	movs	r0, r3
 800792a:	46bd      	mov	sp, r7
 800792c:	b009      	add	sp, #36	; 0x24
 800792e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8007930:	0800dc88 	.word	0x0800dc88
 8007934:	0800dcd8 	.word	0x0800dcd8
 8007938:	0800dd28 	.word	0x0800dd28
 800793c:	0800dd78 	.word	0x0800dd78
 8007940:	0000ffff 	.word	0x0000ffff
 8007944:	0800ddc4 	.word	0x0800ddc4

08007948 <astronode_transport_send_receive>:

return_status_t astronode_transport_send_receive(astronode_app_msg_t *p_request, astronode_app_msg_t *p_answer)
{
 8007948:	b5f0      	push	{r4, r5, r6, r7, lr}
 800794a:	4c2b      	ldr	r4, [pc, #172]	; (80079f8 <astronode_transport_send_receive+0xb0>)
 800794c:	44a5      	add	sp, r4
 800794e:	af00      	add	r7, sp, #0
 8007950:	6078      	str	r0, [r7, #4]
 8007952:	6039      	str	r1, [r7, #0]
    uint8_t request_transport[ASTRONODE_TRANSPORT_MSG_MAX_LEN_BYTES] = {0};
 8007954:	4b29      	ldr	r3, [pc, #164]	; (80079fc <astronode_transport_send_receive+0xb4>)
 8007956:	25ca      	movs	r5, #202	; 0xca
 8007958:	00ad      	lsls	r5, r5, #2
 800795a:	195b      	adds	r3, r3, r5
 800795c:	19db      	adds	r3, r3, r7
 800795e:	2200      	movs	r2, #0
 8007960:	601a      	str	r2, [r3, #0]
 8007962:	3304      	adds	r3, #4
 8007964:	22c4      	movs	r2, #196	; 0xc4
 8007966:	0052      	lsls	r2, r2, #1
 8007968:	2100      	movs	r1, #0
 800796a:	0018      	movs	r0, r3
 800796c:	f000 fbde 	bl	800812c <memset>
    uint8_t answer_transport[ASTRONODE_TRANSPORT_MSG_MAX_LEN_BYTES] = {0};
 8007970:	4b23      	ldr	r3, [pc, #140]	; (8007a00 <astronode_transport_send_receive+0xb8>)
 8007972:	195b      	adds	r3, r3, r5
 8007974:	19db      	adds	r3, r3, r7
 8007976:	2200      	movs	r2, #0
 8007978:	601a      	str	r2, [r3, #0]
 800797a:	3304      	adds	r3, #4
 800797c:	22c4      	movs	r2, #196	; 0xc4
 800797e:	0052      	lsls	r2, r2, #1
 8007980:	2100      	movs	r1, #0
 8007982:	0018      	movs	r0, r3
 8007984:	f000 fbd2 	bl	800812c <memset>
    uint16_t answer_length =  0;
 8007988:	4b1e      	ldr	r3, [pc, #120]	; (8007a04 <astronode_transport_send_receive+0xbc>)
 800798a:	195b      	adds	r3, r3, r5
 800798c:	19db      	adds	r3, r3, r7
 800798e:	2200      	movs	r2, #0
 8007990:	801a      	strh	r2, [r3, #0]

    uint16_t request_length = astronode_create_request_transport(p_request, request_transport);
 8007992:	4e1d      	ldr	r6, [pc, #116]	; (8007a08 <astronode_transport_send_receive+0xc0>)
 8007994:	19bc      	adds	r4, r7, r6
 8007996:	23cc      	movs	r3, #204	; 0xcc
 8007998:	005b      	lsls	r3, r3, #1
 800799a:	18fa      	adds	r2, r7, r3
 800799c:	687b      	ldr	r3, [r7, #4]
 800799e:	0011      	movs	r1, r2
 80079a0:	0018      	movs	r0, r3
 80079a2:	f7ff fd9b 	bl	80074dc <astronode_create_request_transport>
 80079a6:	0003      	movs	r3, r0
 80079a8:	8023      	strh	r3, [r4, #0]

    send_astronode_request(request_transport, request_length);
 80079aa:	19bb      	adds	r3, r7, r6
 80079ac:	881a      	ldrh	r2, [r3, #0]
 80079ae:	23cc      	movs	r3, #204	; 0xcc
 80079b0:	005b      	lsls	r3, r3, #1
 80079b2:	18fb      	adds	r3, r7, r3
 80079b4:	0011      	movs	r1, r2
 80079b6:	0018      	movs	r0, r3
 80079b8:	f7fa ffe2 	bl	8002980 <send_astronode_request>
    if(receive_astronode_answer(answer_transport, &answer_length) == RS_SUCCESS)
 80079bc:	230a      	movs	r3, #10
 80079be:	18fa      	adds	r2, r7, r3
 80079c0:	240c      	movs	r4, #12
 80079c2:	193b      	adds	r3, r7, r4
 80079c4:	0011      	movs	r1, r2
 80079c6:	0018      	movs	r0, r3
 80079c8:	f000 f92c 	bl	8007c24 <receive_astronode_answer>
 80079cc:	0003      	movs	r3, r0
 80079ce:	2b01      	cmp	r3, #1
 80079d0:	d10a      	bne.n	80079e8 <astronode_transport_send_receive+0xa0>
    {
        return astronode_decode_answer_transport(answer_transport, answer_length, p_answer);
 80079d2:	4b0c      	ldr	r3, [pc, #48]	; (8007a04 <astronode_transport_send_receive+0xbc>)
 80079d4:	195b      	adds	r3, r3, r5
 80079d6:	19db      	adds	r3, r3, r7
 80079d8:	8819      	ldrh	r1, [r3, #0]
 80079da:	683a      	ldr	r2, [r7, #0]
 80079dc:	193b      	adds	r3, r7, r4
 80079de:	0018      	movs	r0, r3
 80079e0:	f7ff fe1e 	bl	8007620 <astronode_decode_answer_transport>
 80079e4:	0003      	movs	r3, r0
 80079e6:	e000      	b.n	80079ea <astronode_transport_send_receive+0xa2>
    }
    else
    {
        return RS_FAILURE;
 80079e8:	2300      	movs	r3, #0
    }
}
 80079ea:	0018      	movs	r0, r3
 80079ec:	46bd      	mov	sp, r7
 80079ee:	23cb      	movs	r3, #203	; 0xcb
 80079f0:	009b      	lsls	r3, r3, #2
 80079f2:	449d      	add	sp, r3
 80079f4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80079f6:	46c0      	nop			; (mov r8, r8)
 80079f8:	fffffcd4 	.word	0xfffffcd4
 80079fc:	fffffe70 	.word	0xfffffe70
 8007a00:	fffffce4 	.word	0xfffffce4
 8007a04:	fffffce2 	.word	0xfffffce2
 8007a08:	00000326 	.word	0x00000326

08007a0c <calculate_crc>:

static uint16_t calculate_crc(const uint8_t *p_data, uint16_t data_len, uint16_t init_value)
{
 8007a0c:	b590      	push	{r4, r7, lr}
 8007a0e:	b085      	sub	sp, #20
 8007a10:	af00      	add	r7, sp, #0
 8007a12:	6078      	str	r0, [r7, #4]
 8007a14:	0008      	movs	r0, r1
 8007a16:	0011      	movs	r1, r2
 8007a18:	1cbb      	adds	r3, r7, #2
 8007a1a:	1c02      	adds	r2, r0, #0
 8007a1c:	801a      	strh	r2, [r3, #0]
 8007a1e:	003b      	movs	r3, r7
 8007a20:	1c0a      	adds	r2, r1, #0
 8007a22:	801a      	strh	r2, [r3, #0]
    uint16_t crc = init_value;
 8007a24:	230e      	movs	r3, #14
 8007a26:	18fb      	adds	r3, r7, r3
 8007a28:	003a      	movs	r2, r7
 8007a2a:	8812      	ldrh	r2, [r2, #0]
 8007a2c:	801a      	strh	r2, [r3, #0]

    while (data_len--)
 8007a2e:	e02e      	b.n	8007a8e <calculate_crc+0x82>
    {
        uint16_t x = crc >> 8 ^ *p_data++;
 8007a30:	240e      	movs	r4, #14
 8007a32:	193b      	adds	r3, r7, r4
 8007a34:	881b      	ldrh	r3, [r3, #0]
 8007a36:	0a1b      	lsrs	r3, r3, #8
 8007a38:	b299      	uxth	r1, r3
 8007a3a:	687b      	ldr	r3, [r7, #4]
 8007a3c:	1c5a      	adds	r2, r3, #1
 8007a3e:	607a      	str	r2, [r7, #4]
 8007a40:	781b      	ldrb	r3, [r3, #0]
 8007a42:	b29a      	uxth	r2, r3
 8007a44:	200c      	movs	r0, #12
 8007a46:	183b      	adds	r3, r7, r0
 8007a48:	404a      	eors	r2, r1
 8007a4a:	801a      	strh	r2, [r3, #0]
        x ^= x >> 4;
 8007a4c:	183b      	adds	r3, r7, r0
 8007a4e:	881b      	ldrh	r3, [r3, #0]
 8007a50:	091b      	lsrs	r3, r3, #4
 8007a52:	b299      	uxth	r1, r3
 8007a54:	183b      	adds	r3, r7, r0
 8007a56:	183a      	adds	r2, r7, r0
 8007a58:	8812      	ldrh	r2, [r2, #0]
 8007a5a:	404a      	eors	r2, r1
 8007a5c:	801a      	strh	r2, [r3, #0]
        crc = (crc << 8) ^ (x << 12) ^ (x << 5) ^ (x);
 8007a5e:	0021      	movs	r1, r4
 8007a60:	187b      	adds	r3, r7, r1
 8007a62:	881b      	ldrh	r3, [r3, #0]
 8007a64:	021b      	lsls	r3, r3, #8
 8007a66:	b21a      	sxth	r2, r3
 8007a68:	183b      	adds	r3, r7, r0
 8007a6a:	881b      	ldrh	r3, [r3, #0]
 8007a6c:	031b      	lsls	r3, r3, #12
 8007a6e:	b21b      	sxth	r3, r3
 8007a70:	4053      	eors	r3, r2
 8007a72:	b21a      	sxth	r2, r3
 8007a74:	183b      	adds	r3, r7, r0
 8007a76:	881b      	ldrh	r3, [r3, #0]
 8007a78:	015b      	lsls	r3, r3, #5
 8007a7a:	b21b      	sxth	r3, r3
 8007a7c:	4053      	eors	r3, r2
 8007a7e:	b21a      	sxth	r2, r3
 8007a80:	183b      	adds	r3, r7, r0
 8007a82:	2000      	movs	r0, #0
 8007a84:	5e1b      	ldrsh	r3, [r3, r0]
 8007a86:	4053      	eors	r3, r2
 8007a88:	b21a      	sxth	r2, r3
 8007a8a:	187b      	adds	r3, r7, r1
 8007a8c:	801a      	strh	r2, [r3, #0]
    while (data_len--)
 8007a8e:	1cbb      	adds	r3, r7, #2
 8007a90:	881b      	ldrh	r3, [r3, #0]
 8007a92:	1cba      	adds	r2, r7, #2
 8007a94:	1e59      	subs	r1, r3, #1
 8007a96:	8011      	strh	r1, [r2, #0]
 8007a98:	2b00      	cmp	r3, #0
 8007a9a:	d1c9      	bne.n	8007a30 <calculate_crc+0x24>
    }
    return crc;
 8007a9c:	230e      	movs	r3, #14
 8007a9e:	18fb      	adds	r3, r7, r3
 8007aa0:	881b      	ldrh	r3, [r3, #0]
}
 8007aa2:	0018      	movs	r0, r3
 8007aa4:	46bd      	mov	sp, r7
 8007aa6:	b005      	add	sp, #20
 8007aa8:	bd90      	pop	{r4, r7, pc}
	...

08007aac <check_for_error>:

static void check_for_error(astronode_app_msg_t *p_answer)
{
 8007aac:	b580      	push	{r7, lr}
 8007aae:	b084      	sub	sp, #16
 8007ab0:	af00      	add	r7, sp, #0
 8007ab2:	6078      	str	r0, [r7, #4]
    uint16_t error_code = p_answer->p_payload[0] + (p_answer->p_payload[1] << 8);
 8007ab4:	687b      	ldr	r3, [r7, #4]
 8007ab6:	785b      	ldrb	r3, [r3, #1]
 8007ab8:	b299      	uxth	r1, r3
 8007aba:	687b      	ldr	r3, [r7, #4]
 8007abc:	789b      	ldrb	r3, [r3, #2]
 8007abe:	b29b      	uxth	r3, r3
 8007ac0:	021b      	lsls	r3, r3, #8
 8007ac2:	b29a      	uxth	r2, r3
 8007ac4:	200e      	movs	r0, #14
 8007ac6:	183b      	adds	r3, r7, r0
 8007ac8:	188a      	adds	r2, r1, r2
 8007aca:	801a      	strh	r2, [r3, #0]

    switch (error_code)
 8007acc:	183b      	adds	r3, r7, r0
 8007ace:	881b      	ldrh	r3, [r3, #0]
 8007ad0:	4a40      	ldr	r2, [pc, #256]	; (8007bd4 <check_for_error+0x128>)
 8007ad2:	4293      	cmp	r3, r2
 8007ad4:	d100      	bne.n	8007ad8 <check_for_error+0x2c>
 8007ad6:	e06f      	b.n	8007bb8 <check_for_error+0x10c>
 8007ad8:	4a3e      	ldr	r2, [pc, #248]	; (8007bd4 <check_for_error+0x128>)
 8007ada:	4293      	cmp	r3, r2
 8007adc:	dd00      	ble.n	8007ae0 <check_for_error+0x34>
 8007ade:	e070      	b.n	8007bc2 <check_for_error+0x116>
 8007ae0:	4a3d      	ldr	r2, [pc, #244]	; (8007bd8 <check_for_error+0x12c>)
 8007ae2:	4293      	cmp	r3, r2
 8007ae4:	d100      	bne.n	8007ae8 <check_for_error+0x3c>
 8007ae6:	e062      	b.n	8007bae <check_for_error+0x102>
 8007ae8:	4a3b      	ldr	r2, [pc, #236]	; (8007bd8 <check_for_error+0x12c>)
 8007aea:	4293      	cmp	r3, r2
 8007aec:	dd00      	ble.n	8007af0 <check_for_error+0x44>
 8007aee:	e068      	b.n	8007bc2 <check_for_error+0x116>
 8007af0:	4a3a      	ldr	r2, [pc, #232]	; (8007bdc <check_for_error+0x130>)
 8007af2:	4293      	cmp	r3, r2
 8007af4:	d056      	beq.n	8007ba4 <check_for_error+0xf8>
 8007af6:	4a39      	ldr	r2, [pc, #228]	; (8007bdc <check_for_error+0x130>)
 8007af8:	4293      	cmp	r3, r2
 8007afa:	dd00      	ble.n	8007afe <check_for_error+0x52>
 8007afc:	e061      	b.n	8007bc2 <check_for_error+0x116>
 8007afe:	4a38      	ldr	r2, [pc, #224]	; (8007be0 <check_for_error+0x134>)
 8007b00:	4293      	cmp	r3, r2
 8007b02:	d04a      	beq.n	8007b9a <check_for_error+0xee>
 8007b04:	4a36      	ldr	r2, [pc, #216]	; (8007be0 <check_for_error+0x134>)
 8007b06:	4293      	cmp	r3, r2
 8007b08:	dc5b      	bgt.n	8007bc2 <check_for_error+0x116>
 8007b0a:	4a36      	ldr	r2, [pc, #216]	; (8007be4 <check_for_error+0x138>)
 8007b0c:	4293      	cmp	r3, r2
 8007b0e:	d03f      	beq.n	8007b90 <check_for_error+0xe4>
 8007b10:	4a34      	ldr	r2, [pc, #208]	; (8007be4 <check_for_error+0x138>)
 8007b12:	4293      	cmp	r3, r2
 8007b14:	dc55      	bgt.n	8007bc2 <check_for_error+0x116>
 8007b16:	4a34      	ldr	r2, [pc, #208]	; (8007be8 <check_for_error+0x13c>)
 8007b18:	4293      	cmp	r3, r2
 8007b1a:	d034      	beq.n	8007b86 <check_for_error+0xda>
 8007b1c:	4a32      	ldr	r2, [pc, #200]	; (8007be8 <check_for_error+0x13c>)
 8007b1e:	4293      	cmp	r3, r2
 8007b20:	dc4f      	bgt.n	8007bc2 <check_for_error+0x116>
 8007b22:	4a32      	ldr	r2, [pc, #200]	; (8007bec <check_for_error+0x140>)
 8007b24:	4293      	cmp	r3, r2
 8007b26:	d029      	beq.n	8007b7c <check_for_error+0xd0>
 8007b28:	4a30      	ldr	r2, [pc, #192]	; (8007bec <check_for_error+0x140>)
 8007b2a:	4293      	cmp	r3, r2
 8007b2c:	dc49      	bgt.n	8007bc2 <check_for_error+0x116>
 8007b2e:	4a30      	ldr	r2, [pc, #192]	; (8007bf0 <check_for_error+0x144>)
 8007b30:	4293      	cmp	r3, r2
 8007b32:	d01e      	beq.n	8007b72 <check_for_error+0xc6>
 8007b34:	4a2e      	ldr	r2, [pc, #184]	; (8007bf0 <check_for_error+0x144>)
 8007b36:	4293      	cmp	r3, r2
 8007b38:	dc43      	bgt.n	8007bc2 <check_for_error+0x116>
 8007b3a:	2222      	movs	r2, #34	; 0x22
 8007b3c:	32ff      	adds	r2, #255	; 0xff
 8007b3e:	4293      	cmp	r3, r2
 8007b40:	d012      	beq.n	8007b68 <check_for_error+0xbc>
 8007b42:	2291      	movs	r2, #145	; 0x91
 8007b44:	0052      	lsls	r2, r2, #1
 8007b46:	4293      	cmp	r3, r2
 8007b48:	da3b      	bge.n	8007bc2 <check_for_error+0x116>
 8007b4a:	2b01      	cmp	r3, #1
 8007b4c:	d002      	beq.n	8007b54 <check_for_error+0xa8>
 8007b4e:	2b11      	cmp	r3, #17
 8007b50:	d005      	beq.n	8007b5e <check_for_error+0xb2>
 8007b52:	e036      	b.n	8007bc2 <check_for_error+0x116>
    {
        case ASTRONODE_ERR_CODE_CRC_NOT_VALID:
            send_debug_logs("[ERROR] CRC_NOT_VALID : Discrepancy between provided CRC and expected CRC.");
 8007b54:	4b27      	ldr	r3, [pc, #156]	; (8007bf4 <check_for_error+0x148>)
 8007b56:	0018      	movs	r0, r3
 8007b58:	f7fa fec8 	bl	80028ec <send_debug_logs>
            break;
 8007b5c:	e036      	b.n	8007bcc <check_for_error+0x120>

        case ASTRONODE_ERR_CODE_LENGTH_NOT_VALID:
            send_debug_logs("[ERROR] LENGTH_NOT_VALID : Message exceeds the maximum length allowed by the given operation code.");
 8007b5e:	4b26      	ldr	r3, [pc, #152]	; (8007bf8 <check_for_error+0x14c>)
 8007b60:	0018      	movs	r0, r3
 8007b62:	f7fa fec3 	bl	80028ec <send_debug_logs>
            break;
 8007b66:	e031      	b.n	8007bcc <check_for_error+0x120>

        case ASTRONODE_ERR_CODE_OPCODE_NOT_VALID:
            send_debug_logs("[ERROR] OPCODE_NOT_VALID : Invalid operation code used.");
 8007b68:	4b24      	ldr	r3, [pc, #144]	; (8007bfc <check_for_error+0x150>)
 8007b6a:	0018      	movs	r0, r3
 8007b6c:	f7fa febe 	bl	80028ec <send_debug_logs>
            break;
 8007b70:	e02c      	b.n	8007bcc <check_for_error+0x120>

        case ASTRONODE_ERR_CODE_FORMAT_NOT_VALID:
            send_debug_logs("[ERROR] FORMAT_NOT_VALID : At least one of the fields (SSID, password, token) is not composed of exclusively printable standard ASCII characters (0x20 to 0x7E).");
 8007b72:	4b23      	ldr	r3, [pc, #140]	; (8007c00 <check_for_error+0x154>)
 8007b74:	0018      	movs	r0, r3
 8007b76:	f7fa feb9 	bl	80028ec <send_debug_logs>
            break;
 8007b7a:	e027      	b.n	8007bcc <check_for_error+0x120>

        case ASTRONODE_ERR_CODE_FLASH_WRITING_FAILED:
            send_debug_logs("[ERROR] FLASH_WRITING_FAILED : Failed to write the Wi-Fi settings (SSID, password, token) to the flash.");
 8007b7c:	4b21      	ldr	r3, [pc, #132]	; (8007c04 <check_for_error+0x158>)
 8007b7e:	0018      	movs	r0, r3
 8007b80:	f7fa feb4 	bl	80028ec <send_debug_logs>
            break;
 8007b84:	e022      	b.n	8007bcc <check_for_error+0x120>

        case ASTRONODE_ERR_CODE_BUFFER_FULL:
            send_debug_logs("[ERROR] BUFFER_FULL : Failed to queue the payload because the sending queue is already full.");
 8007b86:	4b20      	ldr	r3, [pc, #128]	; (8007c08 <check_for_error+0x15c>)
 8007b88:	0018      	movs	r0, r3
 8007b8a:	f7fa feaf 	bl	80028ec <send_debug_logs>
            break;
 8007b8e:	e01d      	b.n	8007bcc <check_for_error+0x120>

        case ASTRONODE_ERR_CODE_DUPLICATE_ID:
            send_debug_logs("[ERROR] DUPLICATE_ID : Failed to queue the payload because the Payload ID provided by the asset is already in use in the Astronode queue.");
 8007b90:	4b1e      	ldr	r3, [pc, #120]	; (8007c0c <check_for_error+0x160>)
 8007b92:	0018      	movs	r0, r3
 8007b94:	f7fa feaa 	bl	80028ec <send_debug_logs>
            break;
 8007b98:	e018      	b.n	8007bcc <check_for_error+0x120>

        case ASTRONODE_ERR_CODE_BUFFER_EMPTY:
            send_debug_logs("[ERROR] BUFFER_EMPTY : Failed to dequeue a payload from the buffer because the buffer is empty.");
 8007b9a:	4b1d      	ldr	r3, [pc, #116]	; (8007c10 <check_for_error+0x164>)
 8007b9c:	0018      	movs	r0, r3
 8007b9e:	f7fa fea5 	bl	80028ec <send_debug_logs>
            break;
 8007ba2:	e013      	b.n	8007bcc <check_for_error+0x120>

        case ASTRONODE_ERR_CODE_INVALID_POS:
            send_debug_logs("[ERROR] INVALID_POS : Failed to update the geolocation information. Latitude and longitude fields must in the range [-90,90] degrees and [-180,180] degrees, respectively.");
 8007ba4:	4b1b      	ldr	r3, [pc, #108]	; (8007c14 <check_for_error+0x168>)
 8007ba6:	0018      	movs	r0, r3
 8007ba8:	f7fa fea0 	bl	80028ec <send_debug_logs>
            break;
 8007bac:	e00e      	b.n	8007bcc <check_for_error+0x120>

        case ASTRONODE_ERR_CODE_NO_ACK:
            send_debug_logs("[ERROR] NO_ACK : No satellite acknowledgement available for any payload.");
 8007bae:	4b1a      	ldr	r3, [pc, #104]	; (8007c18 <check_for_error+0x16c>)
 8007bb0:	0018      	movs	r0, r3
 8007bb2:	f7fa fe9b 	bl	80028ec <send_debug_logs>
            break;
 8007bb6:	e009      	b.n	8007bcc <check_for_error+0x120>

        case ASTRONODE_ERR_CODE_NO_CLEAR:
            send_debug_logs("[ERROR] NO_CLEAR : No payload ack to clear, or it was already cleared.");
 8007bb8:	4b18      	ldr	r3, [pc, #96]	; (8007c1c <check_for_error+0x170>)
 8007bba:	0018      	movs	r0, r3
 8007bbc:	f7fa fe96 	bl	80028ec <send_debug_logs>
            break;
 8007bc0:	e004      	b.n	8007bcc <check_for_error+0x120>

        default:
            send_debug_logs("[ERROR] error_code is not defined.");
 8007bc2:	4b17      	ldr	r3, [pc, #92]	; (8007c20 <check_for_error+0x174>)
 8007bc4:	0018      	movs	r0, r3
 8007bc6:	f7fa fe91 	bl	80028ec <send_debug_logs>
            break;
 8007bca:	46c0      	nop			; (mov r8, r8)
    }
}
 8007bcc:	46c0      	nop			; (mov r8, r8)
 8007bce:	46bd      	mov	sp, r7
 8007bd0:	b004      	add	sp, #16
 8007bd2:	bd80      	pop	{r7, pc}
 8007bd4:	00004601 	.word	0x00004601
 8007bd8:	00004501 	.word	0x00004501
 8007bdc:	00003501 	.word	0x00003501
 8007be0:	00002601 	.word	0x00002601
 8007be4:	00002511 	.word	0x00002511
 8007be8:	00002501 	.word	0x00002501
 8007bec:	00000611 	.word	0x00000611
 8007bf0:	00000601 	.word	0x00000601
 8007bf4:	0800de08 	.word	0x0800de08
 8007bf8:	0800de54 	.word	0x0800de54
 8007bfc:	0800deb8 	.word	0x0800deb8
 8007c00:	0800def0 	.word	0x0800def0
 8007c04:	0800df94 	.word	0x0800df94
 8007c08:	0800dffc 	.word	0x0800dffc
 8007c0c:	0800e05c 	.word	0x0800e05c
 8007c10:	0800e0e8 	.word	0x0800e0e8
 8007c14:	0800e148 	.word	0x0800e148
 8007c18:	0800e1f4 	.word	0x0800e1f4
 8007c1c:	0800e240 	.word	0x0800e240
 8007c20:	0800e288 	.word	0x0800e288

08007c24 <receive_astronode_answer>:

static return_status_t receive_astronode_answer(uint8_t *p_rx_buffer, uint16_t *p_buffer_length)
{
 8007c24:	b5b0      	push	{r4, r5, r7, lr}
 8007c26:	b086      	sub	sp, #24
 8007c28:	af00      	add	r7, sp, #0
 8007c2a:	6078      	str	r0, [r7, #4]
 8007c2c:	6039      	str	r1, [r7, #0]
    uint8_t rx_char = 0;
 8007c2e:	230f      	movs	r3, #15
 8007c30:	18fb      	adds	r3, r7, r3
 8007c32:	2200      	movs	r2, #0
 8007c34:	701a      	strb	r2, [r3, #0]
    uint16_t length = 0;
 8007c36:	2316      	movs	r3, #22
 8007c38:	18fb      	adds	r3, r7, r3
 8007c3a:	2200      	movs	r2, #0
 8007c3c:	801a      	strh	r2, [r3, #0]
    uint32_t timeout_answer_received = get_systick();
 8007c3e:	f7fa fee3 	bl	8002a08 <get_systick>
 8007c42:	0003      	movs	r3, r0
 8007c44:	613b      	str	r3, [r7, #16]
    bool is_answer_received = false;
 8007c46:	2315      	movs	r3, #21
 8007c48:	18fb      	adds	r3, r7, r3
 8007c4a:	2200      	movs	r2, #0
 8007c4c:	701a      	strb	r2, [r3, #0]

    while (is_answer_received == false)
 8007c4e:	e054      	b.n	8007cfa <receive_astronode_answer+0xd6>
    {
        if (is_systick_timeout_over(timeout_answer_received, ASTRONODE_ANSWER_TIMEOUT_MS))
 8007c50:	4a34      	ldr	r2, [pc, #208]	; (8007d24 <receive_astronode_answer+0x100>)
 8007c52:	693b      	ldr	r3, [r7, #16]
 8007c54:	0011      	movs	r1, r2
 8007c56:	0018      	movs	r0, r3
 8007c58:	f7fa fede 	bl	8002a18 <is_systick_timeout_over>
 8007c5c:	1e03      	subs	r3, r0, #0
 8007c5e:	d005      	beq.n	8007c6c <receive_astronode_answer+0x48>
        {
            send_debug_logs("ERROR : Received answer timeout..");
 8007c60:	4b31      	ldr	r3, [pc, #196]	; (8007d28 <receive_astronode_answer+0x104>)
 8007c62:	0018      	movs	r0, r3
 8007c64:	f7fa fe42 	bl	80028ec <send_debug_logs>
            return RS_FAILURE;
 8007c68:	2300      	movs	r3, #0
 8007c6a:	e057      	b.n	8007d1c <receive_astronode_answer+0xf8>
        }
        if (is_astronode_character_received(&rx_char))
 8007c6c:	250f      	movs	r5, #15
 8007c6e:	197b      	adds	r3, r7, r5
 8007c70:	0018      	movs	r0, r3
 8007c72:	f7fa fea3 	bl	80029bc <is_astronode_character_received>
 8007c76:	0003      	movs	r3, r0
 8007c78:	0019      	movs	r1, r3
 8007c7a:	2016      	movs	r0, #22
 8007c7c:	183b      	adds	r3, r7, r0
 8007c7e:	183a      	adds	r2, r7, r0
 8007c80:	8812      	ldrh	r2, [r2, #0]
 8007c82:	801a      	strh	r2, [r3, #0]
 8007c84:	2415      	movs	r4, #21
 8007c86:	193b      	adds	r3, r7, r4
 8007c88:	193a      	adds	r2, r7, r4
 8007c8a:	7812      	ldrb	r2, [r2, #0]
 8007c8c:	701a      	strb	r2, [r3, #0]
 8007c8e:	2900      	cmp	r1, #0
 8007c90:	d033      	beq.n	8007cfa <receive_astronode_answer+0xd6>
        {
            if (rx_char == ASTRONODE_TRANSPORT_STX)
 8007c92:	197b      	adds	r3, r7, r5
 8007c94:	781b      	ldrb	r3, [r3, #0]
 8007c96:	2b02      	cmp	r3, #2
 8007c98:	d105      	bne.n	8007ca6 <receive_astronode_answer+0x82>
            {
                is_answer_received = false;
 8007c9a:	193b      	adds	r3, r7, r4
 8007c9c:	2200      	movs	r2, #0
 8007c9e:	701a      	strb	r2, [r3, #0]
                length = 0;
 8007ca0:	183b      	adds	r3, r7, r0
 8007ca2:	2200      	movs	r2, #0
 8007ca4:	801a      	strh	r2, [r3, #0]
            }

            p_rx_buffer[length] = rx_char;
 8007ca6:	2116      	movs	r1, #22
 8007ca8:	187b      	adds	r3, r7, r1
 8007caa:	881b      	ldrh	r3, [r3, #0]
 8007cac:	687a      	ldr	r2, [r7, #4]
 8007cae:	18d3      	adds	r3, r2, r3
 8007cb0:	220f      	movs	r2, #15
 8007cb2:	18ba      	adds	r2, r7, r2
 8007cb4:	7812      	ldrb	r2, [r2, #0]
 8007cb6:	701a      	strb	r2, [r3, #0]
            length++;
 8007cb8:	187b      	adds	r3, r7, r1
 8007cba:	881a      	ldrh	r2, [r3, #0]
 8007cbc:	187b      	adds	r3, r7, r1
 8007cbe:	3201      	adds	r2, #1
 8007cc0:	801a      	strh	r2, [r3, #0]

            if (length > ASTRONODE_MAX_LENGTH_RESPONSE)
 8007cc2:	187b      	adds	r3, r7, r1
 8007cc4:	881b      	ldrh	r3, [r3, #0]
 8007cc6:	2bb2      	cmp	r3, #178	; 0xb2
 8007cc8:	d905      	bls.n	8007cd6 <receive_astronode_answer+0xb2>
            {
                send_debug_logs("ERROR : Message received from the Astronode exceed maximum length allowed.");
 8007cca:	4b18      	ldr	r3, [pc, #96]	; (8007d2c <receive_astronode_answer+0x108>)
 8007ccc:	0018      	movs	r0, r3
 8007cce:	f7fa fe0d 	bl	80028ec <send_debug_logs>
                return RS_FAILURE;
 8007cd2:	2300      	movs	r3, #0
 8007cd4:	e022      	b.n	8007d1c <receive_astronode_answer+0xf8>
            }

            if (rx_char == ASTRONODE_TRANSPORT_ETX)
 8007cd6:	230f      	movs	r3, #15
 8007cd8:	18fb      	adds	r3, r7, r3
 8007cda:	781b      	ldrb	r3, [r3, #0]
 8007cdc:	2b03      	cmp	r3, #3
 8007cde:	d10c      	bne.n	8007cfa <receive_astronode_answer+0xd6>
            {
                if (length > 1)
 8007ce0:	2216      	movs	r2, #22
 8007ce2:	18bb      	adds	r3, r7, r2
 8007ce4:	881b      	ldrh	r3, [r3, #0]
 8007ce6:	2b01      	cmp	r3, #1
 8007ce8:	d907      	bls.n	8007cfa <receive_astronode_answer+0xd6>
                {
                    *p_buffer_length = length;
 8007cea:	683b      	ldr	r3, [r7, #0]
 8007cec:	18ba      	adds	r2, r7, r2
 8007cee:	8812      	ldrh	r2, [r2, #0]
 8007cf0:	801a      	strh	r2, [r3, #0]
                    is_answer_received = true;
 8007cf2:	2315      	movs	r3, #21
 8007cf4:	18fb      	adds	r3, r7, r3
 8007cf6:	2201      	movs	r2, #1
 8007cf8:	701a      	strb	r2, [r3, #0]
    while (is_answer_received == false)
 8007cfa:	2315      	movs	r3, #21
 8007cfc:	18fb      	adds	r3, r7, r3
 8007cfe:	781b      	ldrb	r3, [r3, #0]
 8007d00:	2201      	movs	r2, #1
 8007d02:	4053      	eors	r3, r2
 8007d04:	b2db      	uxtb	r3, r3
 8007d06:	2b00      	cmp	r3, #0
 8007d08:	d1a2      	bne.n	8007c50 <receive_astronode_answer+0x2c>
                }
            }
        }
    }
    send_debug_logs("Message received from the Astronode <-- ");
 8007d0a:	4b09      	ldr	r3, [pc, #36]	; (8007d30 <receive_astronode_answer+0x10c>)
 8007d0c:	0018      	movs	r0, r3
 8007d0e:	f7fa fded 	bl	80028ec <send_debug_logs>
    send_debug_logs((char *) p_rx_buffer);
 8007d12:	687b      	ldr	r3, [r7, #4]
 8007d14:	0018      	movs	r0, r3
 8007d16:	f7fa fde9 	bl	80028ec <send_debug_logs>

    return RS_SUCCESS;
 8007d1a:	2301      	movs	r3, #1
}
 8007d1c:	0018      	movs	r0, r3
 8007d1e:	46bd      	mov	sp, r7
 8007d20:	b006      	add	sp, #24
 8007d22:	bdb0      	pop	{r4, r5, r7, pc}
 8007d24:	000005dc 	.word	0x000005dc
 8007d28:	0800e2ac 	.word	0x0800e2ac
 8007d2c:	0800e2d0 	.word	0x0800e2d0
 8007d30:	0800e31c 	.word	0x0800e31c

08007d34 <uint8_to_ascii_buffer>:

static void uint8_to_ascii_buffer(const uint8_t value, uint8_t *p_target_buffer)
{
 8007d34:	b580      	push	{r7, lr}
 8007d36:	b082      	sub	sp, #8
 8007d38:	af00      	add	r7, sp, #0
 8007d3a:	0002      	movs	r2, r0
 8007d3c:	6039      	str	r1, [r7, #0]
 8007d3e:	1dfb      	adds	r3, r7, #7
 8007d40:	701a      	strb	r2, [r3, #0]
    p_target_buffer[0] = g_ascii_lookup[value >> 4];
 8007d42:	1dfb      	adds	r3, r7, #7
 8007d44:	781b      	ldrb	r3, [r3, #0]
 8007d46:	091b      	lsrs	r3, r3, #4
 8007d48:	b2db      	uxtb	r3, r3
 8007d4a:	001a      	movs	r2, r3
 8007d4c:	4b08      	ldr	r3, [pc, #32]	; (8007d70 <uint8_to_ascii_buffer+0x3c>)
 8007d4e:	5c9a      	ldrb	r2, [r3, r2]
 8007d50:	683b      	ldr	r3, [r7, #0]
 8007d52:	701a      	strb	r2, [r3, #0]
    p_target_buffer[1] = g_ascii_lookup[value & 0x0F];
 8007d54:	1dfb      	adds	r3, r7, #7
 8007d56:	781b      	ldrb	r3, [r3, #0]
 8007d58:	220f      	movs	r2, #15
 8007d5a:	401a      	ands	r2, r3
 8007d5c:	683b      	ldr	r3, [r7, #0]
 8007d5e:	3301      	adds	r3, #1
 8007d60:	4903      	ldr	r1, [pc, #12]	; (8007d70 <uint8_to_ascii_buffer+0x3c>)
 8007d62:	5c8a      	ldrb	r2, [r1, r2]
 8007d64:	701a      	strb	r2, [r3, #0]
}
 8007d66:	46c0      	nop			; (mov r8, r8)
 8007d68:	46bd      	mov	sp, r7
 8007d6a:	b002      	add	sp, #8
 8007d6c:	bd80      	pop	{r7, pc}
 8007d6e:	46c0      	nop			; (mov r8, r8)
 8007d70:	0800e51c 	.word	0x0800e51c

08007d74 <my_astro_read_evt_reg>:
		send_debug_logs ( "ERROR: Payload exceeded ASTRONODE_APP_PAYLOAD_MAX_LEN_BYTES value." ) ;
	}
	return false ;
}
bool my_astro_read_evt_reg ( void )
{
 8007d74:	b580      	push	{r7, lr}
 8007d76:	af00      	add	r7, sp, #0
	send_debug_logs ( "my_astro: evt pin is high." ) ;
 8007d78:	4b15      	ldr	r3, [pc, #84]	; (8007dd0 <my_astro_read_evt_reg+0x5c>)
 8007d7a:	0018      	movs	r0, r3
 8007d7c:	f7fa fdb6 	bl	80028ec <send_debug_logs>
	astronode_send_evt_rr () ;
 8007d80:	f7fe ff12 	bl	8006ba8 <astronode_send_evt_rr>
	if (is_sak_available () )
 8007d84:	f7ff fb60 	bl	8007448 <is_sak_available>
 8007d88:	1e03      	subs	r3, r0, #0
 8007d8a:	d007      	beq.n	8007d9c <my_astro_read_evt_reg+0x28>
	{
	  astronode_send_sak_rr () ;
 8007d8c:	f7ff f86c 	bl	8006e68 <astronode_send_sak_rr>
	  astronode_send_sak_cr () ;
 8007d90:	f7ff f8c0 	bl	8006f14 <astronode_send_sak_cr>
	  send_debug_logs ( "my_astro: message has been acknowledged." ) ;
 8007d94:	4b0f      	ldr	r3, [pc, #60]	; (8007dd4 <my_astro_read_evt_reg+0x60>)
 8007d96:	0018      	movs	r0, r3
 8007d98:	f7fa fda8 	bl	80028ec <send_debug_logs>
	  //astronode_send_per_rr () ;
	}
	if ( is_astronode_reset () )
 8007d9c:	f7ff fb5e 	bl	800745c <is_astronode_reset>
 8007da0:	1e03      	subs	r3, r0, #0
 8007da2:	d005      	beq.n	8007db0 <my_astro_read_evt_reg+0x3c>
	{
	  send_debug_logs ( "my_astro: terminal has been reset." ) ;
 8007da4:	4b0c      	ldr	r3, [pc, #48]	; (8007dd8 <my_astro_read_evt_reg+0x64>)
 8007da6:	0018      	movs	r0, r3
 8007da8:	f7fa fda0 	bl	80028ec <send_debug_logs>
	  astronode_send_res_cr () ;
 8007dac:	f7fe ffb8 	bl	8006d20 <astronode_send_res_cr>
	}
	if ( is_command_available () )
 8007db0:	f7ff fb5e 	bl	8007470 <is_command_available>
 8007db4:	1e03      	subs	r3, r0, #0
 8007db6:	d007      	beq.n	8007dc8 <my_astro_read_evt_reg+0x54>
	{
	  send_debug_logs ( "my_astro: unicast command is available" ) ;
 8007db8:	4b08      	ldr	r3, [pc, #32]	; (8007ddc <my_astro_read_evt_reg+0x68>)
 8007dba:	0018      	movs	r0, r3
 8007dbc:	f7fa fd96 	bl	80028ec <send_debug_logs>
	  astronode_send_cmd_rr () ;
 8007dc0:	f7ff f9d2 	bl	8007168 <astronode_send_cmd_rr>
	  astronode_send_cmd_cr () ;
 8007dc4:	f7ff f990 	bl	80070e8 <astronode_send_cmd_cr>
	}
	return true ;
 8007dc8:	2301      	movs	r3, #1
}
 8007dca:	0018      	movs	r0, r3
 8007dcc:	46bd      	mov	sp, r7
 8007dce:	bd80      	pop	{r7, pc}
 8007dd0:	0800e38c 	.word	0x0800e38c
 8007dd4:	0800e3a8 	.word	0x0800e3a8
 8007dd8:	0800e3d4 	.word	0x0800e3d4
 8007ddc:	0800e3f8 	.word	0x0800e3f8

08007de0 <my_rtc_get_time_s>:
{
	HAL_RTC_GetDate ( &hrtc , d , RTC_FORMAT_BIN ) ;
	HAL_RTC_GetTime ( &hrtc , t , RTC_FORMAT_BIN ) ;
}
uint16_t my_rtc_get_time_s ( char* dt_s )
{
 8007de0:	b5f0      	push	{r4, r5, r6, r7, lr}
 8007de2:	b08d      	sub	sp, #52	; 0x34
 8007de4:	af04      	add	r7, sp, #16
 8007de6:	6078      	str	r0, [r7, #4]
	RTC_DateTypeDef gDate;
	RTC_TimeTypeDef gTime;

	//char cdt[20];

	HAL_RTC_GetTime ( &hrtc , &gTime , RTC_FORMAT_BIN ) ;
 8007de8:	2508      	movs	r5, #8
 8007dea:	1979      	adds	r1, r7, r5
 8007dec:	4b1b      	ldr	r3, [pc, #108]	; (8007e5c <my_rtc_get_time_s+0x7c>)
 8007dee:	2200      	movs	r2, #0
 8007df0:	0018      	movs	r0, r3
 8007df2:	f7fc fdeb 	bl	80049cc <HAL_RTC_GetTime>
	HAL_RTC_GetDate ( &hrtc , &gDate , RTC_FORMAT_BIN ) ;
 8007df6:	241c      	movs	r4, #28
 8007df8:	1939      	adds	r1, r7, r4
 8007dfa:	4b18      	ldr	r3, [pc, #96]	; (8007e5c <my_rtc_get_time_s+0x7c>)
 8007dfc:	2200      	movs	r2, #0
 8007dfe:	0018      	movs	r0, r3
 8007e00:	f7fc fed2 	bl	8004ba8 <HAL_RTC_GetDate>

	sprintf ( dt_s , "%4d.%02d.%02d %02d:%02d:%02d" , 2000 + gDate.Year , gDate.Month , gDate.Date , gTime.Hours , gTime.Minutes , gTime.Seconds) ;
 8007e04:	0021      	movs	r1, r4
 8007e06:	187b      	adds	r3, r7, r1
 8007e08:	78db      	ldrb	r3, [r3, #3]
 8007e0a:	22fa      	movs	r2, #250	; 0xfa
 8007e0c:	00d2      	lsls	r2, r2, #3
 8007e0e:	189a      	adds	r2, r3, r2
 8007e10:	187b      	adds	r3, r7, r1
 8007e12:	785b      	ldrb	r3, [r3, #1]
 8007e14:	469c      	mov	ip, r3
 8007e16:	187b      	adds	r3, r7, r1
 8007e18:	789b      	ldrb	r3, [r3, #2]
 8007e1a:	001c      	movs	r4, r3
 8007e1c:	0028      	movs	r0, r5
 8007e1e:	183b      	adds	r3, r7, r0
 8007e20:	781b      	ldrb	r3, [r3, #0]
 8007e22:	001d      	movs	r5, r3
 8007e24:	183b      	adds	r3, r7, r0
 8007e26:	785b      	ldrb	r3, [r3, #1]
 8007e28:	001e      	movs	r6, r3
 8007e2a:	183b      	adds	r3, r7, r0
 8007e2c:	789b      	ldrb	r3, [r3, #2]
 8007e2e:	490c      	ldr	r1, [pc, #48]	; (8007e60 <my_rtc_get_time_s+0x80>)
 8007e30:	6878      	ldr	r0, [r7, #4]
 8007e32:	9303      	str	r3, [sp, #12]
 8007e34:	9602      	str	r6, [sp, #8]
 8007e36:	9501      	str	r5, [sp, #4]
 8007e38:	9400      	str	r4, [sp, #0]
 8007e3a:	4663      	mov	r3, ip
 8007e3c:	f000 f90a 	bl	8008054 <sprintf>

	return (uint16_t) ( 2000 + gDate.Year ) ;
 8007e40:	211c      	movs	r1, #28
 8007e42:	187b      	adds	r3, r7, r1
 8007e44:	78db      	ldrb	r3, [r3, #3]
 8007e46:	b29b      	uxth	r3, r3
 8007e48:	22fa      	movs	r2, #250	; 0xfa
 8007e4a:	00d2      	lsls	r2, r2, #3
 8007e4c:	4694      	mov	ip, r2
 8007e4e:	4463      	add	r3, ip
 8007e50:	b29b      	uxth	r3, r3
}
 8007e52:	0018      	movs	r0, r3
 8007e54:	46bd      	mov	sp, r7
 8007e56:	b009      	add	sp, #36	; 0x24
 8007e58:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8007e5a:	46c0      	nop			; (mov r8, r8)
 8007e5c:	200006dc 	.word	0x200006dc
 8007e60:	0800e420 	.word	0x0800e420

08007e64 <std>:
 8007e64:	2300      	movs	r3, #0
 8007e66:	b510      	push	{r4, lr}
 8007e68:	0004      	movs	r4, r0
 8007e6a:	6003      	str	r3, [r0, #0]
 8007e6c:	6043      	str	r3, [r0, #4]
 8007e6e:	6083      	str	r3, [r0, #8]
 8007e70:	8181      	strh	r1, [r0, #12]
 8007e72:	6643      	str	r3, [r0, #100]	; 0x64
 8007e74:	81c2      	strh	r2, [r0, #14]
 8007e76:	6103      	str	r3, [r0, #16]
 8007e78:	6143      	str	r3, [r0, #20]
 8007e7a:	6183      	str	r3, [r0, #24]
 8007e7c:	0019      	movs	r1, r3
 8007e7e:	2208      	movs	r2, #8
 8007e80:	305c      	adds	r0, #92	; 0x5c
 8007e82:	f000 f953 	bl	800812c <memset>
 8007e86:	4b0b      	ldr	r3, [pc, #44]	; (8007eb4 <std+0x50>)
 8007e88:	61e4      	str	r4, [r4, #28]
 8007e8a:	6223      	str	r3, [r4, #32]
 8007e8c:	4b0a      	ldr	r3, [pc, #40]	; (8007eb8 <std+0x54>)
 8007e8e:	6263      	str	r3, [r4, #36]	; 0x24
 8007e90:	4b0a      	ldr	r3, [pc, #40]	; (8007ebc <std+0x58>)
 8007e92:	62a3      	str	r3, [r4, #40]	; 0x28
 8007e94:	4b0a      	ldr	r3, [pc, #40]	; (8007ec0 <std+0x5c>)
 8007e96:	62e3      	str	r3, [r4, #44]	; 0x2c
 8007e98:	4b0a      	ldr	r3, [pc, #40]	; (8007ec4 <std+0x60>)
 8007e9a:	429c      	cmp	r4, r3
 8007e9c:	d005      	beq.n	8007eaa <std+0x46>
 8007e9e:	4b0a      	ldr	r3, [pc, #40]	; (8007ec8 <std+0x64>)
 8007ea0:	429c      	cmp	r4, r3
 8007ea2:	d002      	beq.n	8007eaa <std+0x46>
 8007ea4:	4b09      	ldr	r3, [pc, #36]	; (8007ecc <std+0x68>)
 8007ea6:	429c      	cmp	r4, r3
 8007ea8:	d103      	bne.n	8007eb2 <std+0x4e>
 8007eaa:	0020      	movs	r0, r4
 8007eac:	3058      	adds	r0, #88	; 0x58
 8007eae:	f000 f9c5 	bl	800823c <__retarget_lock_init_recursive>
 8007eb2:	bd10      	pop	{r4, pc}
 8007eb4:	08008095 	.word	0x08008095
 8007eb8:	080080bd 	.word	0x080080bd
 8007ebc:	080080f5 	.word	0x080080f5
 8007ec0:	08008121 	.word	0x08008121
 8007ec4:	200008a0 	.word	0x200008a0
 8007ec8:	20000908 	.word	0x20000908
 8007ecc:	20000970 	.word	0x20000970

08007ed0 <stdio_exit_handler>:
 8007ed0:	b510      	push	{r4, lr}
 8007ed2:	4a03      	ldr	r2, [pc, #12]	; (8007ee0 <stdio_exit_handler+0x10>)
 8007ed4:	4903      	ldr	r1, [pc, #12]	; (8007ee4 <stdio_exit_handler+0x14>)
 8007ed6:	4804      	ldr	r0, [pc, #16]	; (8007ee8 <stdio_exit_handler+0x18>)
 8007ed8:	f000 f86c 	bl	8007fb4 <_fwalk_sglue>
 8007edc:	bd10      	pop	{r4, pc}
 8007ede:	46c0      	nop			; (mov r8, r8)
 8007ee0:	20000010 	.word	0x20000010
 8007ee4:	0800a42d 	.word	0x0800a42d
 8007ee8:	20000188 	.word	0x20000188

08007eec <cleanup_stdio>:
 8007eec:	6841      	ldr	r1, [r0, #4]
 8007eee:	4b0b      	ldr	r3, [pc, #44]	; (8007f1c <cleanup_stdio+0x30>)
 8007ef0:	b510      	push	{r4, lr}
 8007ef2:	0004      	movs	r4, r0
 8007ef4:	4299      	cmp	r1, r3
 8007ef6:	d001      	beq.n	8007efc <cleanup_stdio+0x10>
 8007ef8:	f002 fa98 	bl	800a42c <_fclose_r>
 8007efc:	68a1      	ldr	r1, [r4, #8]
 8007efe:	4b08      	ldr	r3, [pc, #32]	; (8007f20 <cleanup_stdio+0x34>)
 8007f00:	4299      	cmp	r1, r3
 8007f02:	d002      	beq.n	8007f0a <cleanup_stdio+0x1e>
 8007f04:	0020      	movs	r0, r4
 8007f06:	f002 fa91 	bl	800a42c <_fclose_r>
 8007f0a:	68e1      	ldr	r1, [r4, #12]
 8007f0c:	4b05      	ldr	r3, [pc, #20]	; (8007f24 <cleanup_stdio+0x38>)
 8007f0e:	4299      	cmp	r1, r3
 8007f10:	d002      	beq.n	8007f18 <cleanup_stdio+0x2c>
 8007f12:	0020      	movs	r0, r4
 8007f14:	f002 fa8a 	bl	800a42c <_fclose_r>
 8007f18:	bd10      	pop	{r4, pc}
 8007f1a:	46c0      	nop			; (mov r8, r8)
 8007f1c:	200008a0 	.word	0x200008a0
 8007f20:	20000908 	.word	0x20000908
 8007f24:	20000970 	.word	0x20000970

08007f28 <global_stdio_init.part.0>:
 8007f28:	b510      	push	{r4, lr}
 8007f2a:	4b09      	ldr	r3, [pc, #36]	; (8007f50 <global_stdio_init.part.0+0x28>)
 8007f2c:	4a09      	ldr	r2, [pc, #36]	; (8007f54 <global_stdio_init.part.0+0x2c>)
 8007f2e:	2104      	movs	r1, #4
 8007f30:	601a      	str	r2, [r3, #0]
 8007f32:	4809      	ldr	r0, [pc, #36]	; (8007f58 <global_stdio_init.part.0+0x30>)
 8007f34:	2200      	movs	r2, #0
 8007f36:	f7ff ff95 	bl	8007e64 <std>
 8007f3a:	2201      	movs	r2, #1
 8007f3c:	2109      	movs	r1, #9
 8007f3e:	4807      	ldr	r0, [pc, #28]	; (8007f5c <global_stdio_init.part.0+0x34>)
 8007f40:	f7ff ff90 	bl	8007e64 <std>
 8007f44:	2202      	movs	r2, #2
 8007f46:	2112      	movs	r1, #18
 8007f48:	4805      	ldr	r0, [pc, #20]	; (8007f60 <global_stdio_init.part.0+0x38>)
 8007f4a:	f7ff ff8b 	bl	8007e64 <std>
 8007f4e:	bd10      	pop	{r4, pc}
 8007f50:	200009d8 	.word	0x200009d8
 8007f54:	08007ed1 	.word	0x08007ed1
 8007f58:	200008a0 	.word	0x200008a0
 8007f5c:	20000908 	.word	0x20000908
 8007f60:	20000970 	.word	0x20000970

08007f64 <__sfp_lock_acquire>:
 8007f64:	b510      	push	{r4, lr}
 8007f66:	4802      	ldr	r0, [pc, #8]	; (8007f70 <__sfp_lock_acquire+0xc>)
 8007f68:	f000 f96a 	bl	8008240 <__retarget_lock_acquire_recursive>
 8007f6c:	bd10      	pop	{r4, pc}
 8007f6e:	46c0      	nop			; (mov r8, r8)
 8007f70:	200009e2 	.word	0x200009e2

08007f74 <__sfp_lock_release>:
 8007f74:	b510      	push	{r4, lr}
 8007f76:	4802      	ldr	r0, [pc, #8]	; (8007f80 <__sfp_lock_release+0xc>)
 8007f78:	f000 f963 	bl	8008242 <__retarget_lock_release_recursive>
 8007f7c:	bd10      	pop	{r4, pc}
 8007f7e:	46c0      	nop			; (mov r8, r8)
 8007f80:	200009e2 	.word	0x200009e2

08007f84 <__sinit>:
 8007f84:	b510      	push	{r4, lr}
 8007f86:	0004      	movs	r4, r0
 8007f88:	f7ff ffec 	bl	8007f64 <__sfp_lock_acquire>
 8007f8c:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8007f8e:	2b00      	cmp	r3, #0
 8007f90:	d002      	beq.n	8007f98 <__sinit+0x14>
 8007f92:	f7ff ffef 	bl	8007f74 <__sfp_lock_release>
 8007f96:	bd10      	pop	{r4, pc}
 8007f98:	4b04      	ldr	r3, [pc, #16]	; (8007fac <__sinit+0x28>)
 8007f9a:	6363      	str	r3, [r4, #52]	; 0x34
 8007f9c:	4b04      	ldr	r3, [pc, #16]	; (8007fb0 <__sinit+0x2c>)
 8007f9e:	681b      	ldr	r3, [r3, #0]
 8007fa0:	2b00      	cmp	r3, #0
 8007fa2:	d1f6      	bne.n	8007f92 <__sinit+0xe>
 8007fa4:	f7ff ffc0 	bl	8007f28 <global_stdio_init.part.0>
 8007fa8:	e7f3      	b.n	8007f92 <__sinit+0xe>
 8007faa:	46c0      	nop			; (mov r8, r8)
 8007fac:	08007eed 	.word	0x08007eed
 8007fb0:	200009d8 	.word	0x200009d8

08007fb4 <_fwalk_sglue>:
 8007fb4:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8007fb6:	0014      	movs	r4, r2
 8007fb8:	2600      	movs	r6, #0
 8007fba:	9000      	str	r0, [sp, #0]
 8007fbc:	9101      	str	r1, [sp, #4]
 8007fbe:	68a5      	ldr	r5, [r4, #8]
 8007fc0:	6867      	ldr	r7, [r4, #4]
 8007fc2:	3f01      	subs	r7, #1
 8007fc4:	d504      	bpl.n	8007fd0 <_fwalk_sglue+0x1c>
 8007fc6:	6824      	ldr	r4, [r4, #0]
 8007fc8:	2c00      	cmp	r4, #0
 8007fca:	d1f8      	bne.n	8007fbe <_fwalk_sglue+0xa>
 8007fcc:	0030      	movs	r0, r6
 8007fce:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8007fd0:	89ab      	ldrh	r3, [r5, #12]
 8007fd2:	2b01      	cmp	r3, #1
 8007fd4:	d908      	bls.n	8007fe8 <_fwalk_sglue+0x34>
 8007fd6:	220e      	movs	r2, #14
 8007fd8:	5eab      	ldrsh	r3, [r5, r2]
 8007fda:	3301      	adds	r3, #1
 8007fdc:	d004      	beq.n	8007fe8 <_fwalk_sglue+0x34>
 8007fde:	0029      	movs	r1, r5
 8007fe0:	9800      	ldr	r0, [sp, #0]
 8007fe2:	9b01      	ldr	r3, [sp, #4]
 8007fe4:	4798      	blx	r3
 8007fe6:	4306      	orrs	r6, r0
 8007fe8:	3568      	adds	r5, #104	; 0x68
 8007fea:	e7ea      	b.n	8007fc2 <_fwalk_sglue+0xe>

08007fec <snprintf>:
 8007fec:	b40c      	push	{r2, r3}
 8007fee:	b530      	push	{r4, r5, lr}
 8007ff0:	4b17      	ldr	r3, [pc, #92]	; (8008050 <snprintf+0x64>)
 8007ff2:	000c      	movs	r4, r1
 8007ff4:	681d      	ldr	r5, [r3, #0]
 8007ff6:	b09d      	sub	sp, #116	; 0x74
 8007ff8:	2900      	cmp	r1, #0
 8007ffa:	da08      	bge.n	800800e <snprintf+0x22>
 8007ffc:	238b      	movs	r3, #139	; 0x8b
 8007ffe:	2001      	movs	r0, #1
 8008000:	602b      	str	r3, [r5, #0]
 8008002:	4240      	negs	r0, r0
 8008004:	b01d      	add	sp, #116	; 0x74
 8008006:	bc30      	pop	{r4, r5}
 8008008:	bc08      	pop	{r3}
 800800a:	b002      	add	sp, #8
 800800c:	4718      	bx	r3
 800800e:	2382      	movs	r3, #130	; 0x82
 8008010:	466a      	mov	r2, sp
 8008012:	009b      	lsls	r3, r3, #2
 8008014:	8293      	strh	r3, [r2, #20]
 8008016:	2300      	movs	r3, #0
 8008018:	9002      	str	r0, [sp, #8]
 800801a:	9006      	str	r0, [sp, #24]
 800801c:	4299      	cmp	r1, r3
 800801e:	d000      	beq.n	8008022 <snprintf+0x36>
 8008020:	1e4b      	subs	r3, r1, #1
 8008022:	9304      	str	r3, [sp, #16]
 8008024:	9307      	str	r3, [sp, #28]
 8008026:	2301      	movs	r3, #1
 8008028:	466a      	mov	r2, sp
 800802a:	425b      	negs	r3, r3
 800802c:	82d3      	strh	r3, [r2, #22]
 800802e:	0028      	movs	r0, r5
 8008030:	ab21      	add	r3, sp, #132	; 0x84
 8008032:	9a20      	ldr	r2, [sp, #128]	; 0x80
 8008034:	a902      	add	r1, sp, #8
 8008036:	9301      	str	r3, [sp, #4]
 8008038:	f000 ffb6 	bl	8008fa8 <_svfprintf_r>
 800803c:	1c43      	adds	r3, r0, #1
 800803e:	da01      	bge.n	8008044 <snprintf+0x58>
 8008040:	238b      	movs	r3, #139	; 0x8b
 8008042:	602b      	str	r3, [r5, #0]
 8008044:	2c00      	cmp	r4, #0
 8008046:	d0dd      	beq.n	8008004 <snprintf+0x18>
 8008048:	2200      	movs	r2, #0
 800804a:	9b02      	ldr	r3, [sp, #8]
 800804c:	701a      	strb	r2, [r3, #0]
 800804e:	e7d9      	b.n	8008004 <snprintf+0x18>
 8008050:	200002a8 	.word	0x200002a8

08008054 <sprintf>:
 8008054:	b40e      	push	{r1, r2, r3}
 8008056:	b500      	push	{lr}
 8008058:	490b      	ldr	r1, [pc, #44]	; (8008088 <sprintf+0x34>)
 800805a:	b09c      	sub	sp, #112	; 0x70
 800805c:	ab1d      	add	r3, sp, #116	; 0x74
 800805e:	9002      	str	r0, [sp, #8]
 8008060:	9006      	str	r0, [sp, #24]
 8008062:	9107      	str	r1, [sp, #28]
 8008064:	9104      	str	r1, [sp, #16]
 8008066:	4809      	ldr	r0, [pc, #36]	; (800808c <sprintf+0x38>)
 8008068:	4909      	ldr	r1, [pc, #36]	; (8008090 <sprintf+0x3c>)
 800806a:	cb04      	ldmia	r3!, {r2}
 800806c:	9105      	str	r1, [sp, #20]
 800806e:	6800      	ldr	r0, [r0, #0]
 8008070:	a902      	add	r1, sp, #8
 8008072:	9301      	str	r3, [sp, #4]
 8008074:	f000 ff98 	bl	8008fa8 <_svfprintf_r>
 8008078:	2200      	movs	r2, #0
 800807a:	9b02      	ldr	r3, [sp, #8]
 800807c:	701a      	strb	r2, [r3, #0]
 800807e:	b01c      	add	sp, #112	; 0x70
 8008080:	bc08      	pop	{r3}
 8008082:	b003      	add	sp, #12
 8008084:	4718      	bx	r3
 8008086:	46c0      	nop			; (mov r8, r8)
 8008088:	7fffffff 	.word	0x7fffffff
 800808c:	200002a8 	.word	0x200002a8
 8008090:	ffff0208 	.word	0xffff0208

08008094 <__sread>:
 8008094:	b570      	push	{r4, r5, r6, lr}
 8008096:	000c      	movs	r4, r1
 8008098:	250e      	movs	r5, #14
 800809a:	5f49      	ldrsh	r1, [r1, r5]
 800809c:	f000 f87c 	bl	8008198 <_read_r>
 80080a0:	2800      	cmp	r0, #0
 80080a2:	db03      	blt.n	80080ac <__sread+0x18>
 80080a4:	6d23      	ldr	r3, [r4, #80]	; 0x50
 80080a6:	181b      	adds	r3, r3, r0
 80080a8:	6523      	str	r3, [r4, #80]	; 0x50
 80080aa:	bd70      	pop	{r4, r5, r6, pc}
 80080ac:	89a3      	ldrh	r3, [r4, #12]
 80080ae:	4a02      	ldr	r2, [pc, #8]	; (80080b8 <__sread+0x24>)
 80080b0:	4013      	ands	r3, r2
 80080b2:	81a3      	strh	r3, [r4, #12]
 80080b4:	e7f9      	b.n	80080aa <__sread+0x16>
 80080b6:	46c0      	nop			; (mov r8, r8)
 80080b8:	ffffefff 	.word	0xffffefff

080080bc <__swrite>:
 80080bc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80080be:	001f      	movs	r7, r3
 80080c0:	898b      	ldrh	r3, [r1, #12]
 80080c2:	0005      	movs	r5, r0
 80080c4:	000c      	movs	r4, r1
 80080c6:	0016      	movs	r6, r2
 80080c8:	05db      	lsls	r3, r3, #23
 80080ca:	d505      	bpl.n	80080d8 <__swrite+0x1c>
 80080cc:	230e      	movs	r3, #14
 80080ce:	5ec9      	ldrsh	r1, [r1, r3]
 80080d0:	2200      	movs	r2, #0
 80080d2:	2302      	movs	r3, #2
 80080d4:	f000 f84c 	bl	8008170 <_lseek_r>
 80080d8:	89a3      	ldrh	r3, [r4, #12]
 80080da:	4a05      	ldr	r2, [pc, #20]	; (80080f0 <__swrite+0x34>)
 80080dc:	0028      	movs	r0, r5
 80080de:	4013      	ands	r3, r2
 80080e0:	81a3      	strh	r3, [r4, #12]
 80080e2:	0032      	movs	r2, r6
 80080e4:	230e      	movs	r3, #14
 80080e6:	5ee1      	ldrsh	r1, [r4, r3]
 80080e8:	003b      	movs	r3, r7
 80080ea:	f000 f869 	bl	80081c0 <_write_r>
 80080ee:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80080f0:	ffffefff 	.word	0xffffefff

080080f4 <__sseek>:
 80080f4:	b570      	push	{r4, r5, r6, lr}
 80080f6:	000c      	movs	r4, r1
 80080f8:	250e      	movs	r5, #14
 80080fa:	5f49      	ldrsh	r1, [r1, r5]
 80080fc:	f000 f838 	bl	8008170 <_lseek_r>
 8008100:	89a3      	ldrh	r3, [r4, #12]
 8008102:	1c42      	adds	r2, r0, #1
 8008104:	d103      	bne.n	800810e <__sseek+0x1a>
 8008106:	4a05      	ldr	r2, [pc, #20]	; (800811c <__sseek+0x28>)
 8008108:	4013      	ands	r3, r2
 800810a:	81a3      	strh	r3, [r4, #12]
 800810c:	bd70      	pop	{r4, r5, r6, pc}
 800810e:	2280      	movs	r2, #128	; 0x80
 8008110:	0152      	lsls	r2, r2, #5
 8008112:	4313      	orrs	r3, r2
 8008114:	81a3      	strh	r3, [r4, #12]
 8008116:	6520      	str	r0, [r4, #80]	; 0x50
 8008118:	e7f8      	b.n	800810c <__sseek+0x18>
 800811a:	46c0      	nop			; (mov r8, r8)
 800811c:	ffffefff 	.word	0xffffefff

08008120 <__sclose>:
 8008120:	b510      	push	{r4, lr}
 8008122:	230e      	movs	r3, #14
 8008124:	5ec9      	ldrsh	r1, [r1, r3]
 8008126:	f000 f811 	bl	800814c <_close_r>
 800812a:	bd10      	pop	{r4, pc}

0800812c <memset>:
 800812c:	0003      	movs	r3, r0
 800812e:	1882      	adds	r2, r0, r2
 8008130:	4293      	cmp	r3, r2
 8008132:	d100      	bne.n	8008136 <memset+0xa>
 8008134:	4770      	bx	lr
 8008136:	7019      	strb	r1, [r3, #0]
 8008138:	3301      	adds	r3, #1
 800813a:	e7f9      	b.n	8008130 <memset+0x4>

0800813c <__locale_mb_cur_max>:
 800813c:	2294      	movs	r2, #148	; 0x94
 800813e:	4b02      	ldr	r3, [pc, #8]	; (8008148 <__locale_mb_cur_max+0xc>)
 8008140:	0052      	lsls	r2, r2, #1
 8008142:	5c98      	ldrb	r0, [r3, r2]
 8008144:	4770      	bx	lr
 8008146:	46c0      	nop			; (mov r8, r8)
 8008148:	2000001c 	.word	0x2000001c

0800814c <_close_r>:
 800814c:	2300      	movs	r3, #0
 800814e:	b570      	push	{r4, r5, r6, lr}
 8008150:	4d06      	ldr	r5, [pc, #24]	; (800816c <_close_r+0x20>)
 8008152:	0004      	movs	r4, r0
 8008154:	0008      	movs	r0, r1
 8008156:	602b      	str	r3, [r5, #0]
 8008158:	f7fa ff3b 	bl	8002fd2 <_close>
 800815c:	1c43      	adds	r3, r0, #1
 800815e:	d103      	bne.n	8008168 <_close_r+0x1c>
 8008160:	682b      	ldr	r3, [r5, #0]
 8008162:	2b00      	cmp	r3, #0
 8008164:	d000      	beq.n	8008168 <_close_r+0x1c>
 8008166:	6023      	str	r3, [r4, #0]
 8008168:	bd70      	pop	{r4, r5, r6, pc}
 800816a:	46c0      	nop			; (mov r8, r8)
 800816c:	200009dc 	.word	0x200009dc

08008170 <_lseek_r>:
 8008170:	b570      	push	{r4, r5, r6, lr}
 8008172:	0004      	movs	r4, r0
 8008174:	0008      	movs	r0, r1
 8008176:	0011      	movs	r1, r2
 8008178:	001a      	movs	r2, r3
 800817a:	2300      	movs	r3, #0
 800817c:	4d05      	ldr	r5, [pc, #20]	; (8008194 <_lseek_r+0x24>)
 800817e:	602b      	str	r3, [r5, #0]
 8008180:	f7fa ff48 	bl	8003014 <_lseek>
 8008184:	1c43      	adds	r3, r0, #1
 8008186:	d103      	bne.n	8008190 <_lseek_r+0x20>
 8008188:	682b      	ldr	r3, [r5, #0]
 800818a:	2b00      	cmp	r3, #0
 800818c:	d000      	beq.n	8008190 <_lseek_r+0x20>
 800818e:	6023      	str	r3, [r4, #0]
 8008190:	bd70      	pop	{r4, r5, r6, pc}
 8008192:	46c0      	nop			; (mov r8, r8)
 8008194:	200009dc 	.word	0x200009dc

08008198 <_read_r>:
 8008198:	b570      	push	{r4, r5, r6, lr}
 800819a:	0004      	movs	r4, r0
 800819c:	0008      	movs	r0, r1
 800819e:	0011      	movs	r1, r2
 80081a0:	001a      	movs	r2, r3
 80081a2:	2300      	movs	r3, #0
 80081a4:	4d05      	ldr	r5, [pc, #20]	; (80081bc <_read_r+0x24>)
 80081a6:	602b      	str	r3, [r5, #0]
 80081a8:	f7fa feda 	bl	8002f60 <_read>
 80081ac:	1c43      	adds	r3, r0, #1
 80081ae:	d103      	bne.n	80081b8 <_read_r+0x20>
 80081b0:	682b      	ldr	r3, [r5, #0]
 80081b2:	2b00      	cmp	r3, #0
 80081b4:	d000      	beq.n	80081b8 <_read_r+0x20>
 80081b6:	6023      	str	r3, [r4, #0]
 80081b8:	bd70      	pop	{r4, r5, r6, pc}
 80081ba:	46c0      	nop			; (mov r8, r8)
 80081bc:	200009dc 	.word	0x200009dc

080081c0 <_write_r>:
 80081c0:	b570      	push	{r4, r5, r6, lr}
 80081c2:	0004      	movs	r4, r0
 80081c4:	0008      	movs	r0, r1
 80081c6:	0011      	movs	r1, r2
 80081c8:	001a      	movs	r2, r3
 80081ca:	2300      	movs	r3, #0
 80081cc:	4d05      	ldr	r5, [pc, #20]	; (80081e4 <_write_r+0x24>)
 80081ce:	602b      	str	r3, [r5, #0]
 80081d0:	f7fa fee3 	bl	8002f9a <_write>
 80081d4:	1c43      	adds	r3, r0, #1
 80081d6:	d103      	bne.n	80081e0 <_write_r+0x20>
 80081d8:	682b      	ldr	r3, [r5, #0]
 80081da:	2b00      	cmp	r3, #0
 80081dc:	d000      	beq.n	80081e0 <_write_r+0x20>
 80081de:	6023      	str	r3, [r4, #0]
 80081e0:	bd70      	pop	{r4, r5, r6, pc}
 80081e2:	46c0      	nop			; (mov r8, r8)
 80081e4:	200009dc 	.word	0x200009dc

080081e8 <__errno>:
 80081e8:	4b01      	ldr	r3, [pc, #4]	; (80081f0 <__errno+0x8>)
 80081ea:	6818      	ldr	r0, [r3, #0]
 80081ec:	4770      	bx	lr
 80081ee:	46c0      	nop			; (mov r8, r8)
 80081f0:	200002a8 	.word	0x200002a8

080081f4 <__libc_init_array>:
 80081f4:	b570      	push	{r4, r5, r6, lr}
 80081f6:	2600      	movs	r6, #0
 80081f8:	4c0c      	ldr	r4, [pc, #48]	; (800822c <__libc_init_array+0x38>)
 80081fa:	4d0d      	ldr	r5, [pc, #52]	; (8008230 <__libc_init_array+0x3c>)
 80081fc:	1b64      	subs	r4, r4, r5
 80081fe:	10a4      	asrs	r4, r4, #2
 8008200:	42a6      	cmp	r6, r4
 8008202:	d109      	bne.n	8008218 <__libc_init_array+0x24>
 8008204:	2600      	movs	r6, #0
 8008206:	f004 fced 	bl	800cbe4 <_init>
 800820a:	4c0a      	ldr	r4, [pc, #40]	; (8008234 <__libc_init_array+0x40>)
 800820c:	4d0a      	ldr	r5, [pc, #40]	; (8008238 <__libc_init_array+0x44>)
 800820e:	1b64      	subs	r4, r4, r5
 8008210:	10a4      	asrs	r4, r4, #2
 8008212:	42a6      	cmp	r6, r4
 8008214:	d105      	bne.n	8008222 <__libc_init_array+0x2e>
 8008216:	bd70      	pop	{r4, r5, r6, pc}
 8008218:	00b3      	lsls	r3, r6, #2
 800821a:	58eb      	ldr	r3, [r5, r3]
 800821c:	4798      	blx	r3
 800821e:	3601      	adds	r6, #1
 8008220:	e7ee      	b.n	8008200 <__libc_init_array+0xc>
 8008222:	00b3      	lsls	r3, r6, #2
 8008224:	58eb      	ldr	r3, [r5, r3]
 8008226:	4798      	blx	r3
 8008228:	3601      	adds	r6, #1
 800822a:	e7f2      	b.n	8008212 <__libc_init_array+0x1e>
 800822c:	0800e8c4 	.word	0x0800e8c4
 8008230:	0800e8c4 	.word	0x0800e8c4
 8008234:	0800e8cc 	.word	0x0800e8cc
 8008238:	0800e8c4 	.word	0x0800e8c4

0800823c <__retarget_lock_init_recursive>:
 800823c:	4770      	bx	lr

0800823e <__retarget_lock_close_recursive>:
 800823e:	4770      	bx	lr

08008240 <__retarget_lock_acquire_recursive>:
 8008240:	4770      	bx	lr

08008242 <__retarget_lock_release_recursive>:
 8008242:	4770      	bx	lr

08008244 <memcpy>:
 8008244:	2300      	movs	r3, #0
 8008246:	b510      	push	{r4, lr}
 8008248:	429a      	cmp	r2, r3
 800824a:	d100      	bne.n	800824e <memcpy+0xa>
 800824c:	bd10      	pop	{r4, pc}
 800824e:	5ccc      	ldrb	r4, [r1, r3]
 8008250:	54c4      	strb	r4, [r0, r3]
 8008252:	3301      	adds	r3, #1
 8008254:	e7f8      	b.n	8008248 <memcpy+0x4>
	...

08008258 <register_fini>:
 8008258:	4b03      	ldr	r3, [pc, #12]	; (8008268 <register_fini+0x10>)
 800825a:	b510      	push	{r4, lr}
 800825c:	2b00      	cmp	r3, #0
 800825e:	d002      	beq.n	8008266 <register_fini+0xe>
 8008260:	4802      	ldr	r0, [pc, #8]	; (800826c <register_fini+0x14>)
 8008262:	f000 f805 	bl	8008270 <atexit>
 8008266:	bd10      	pop	{r4, pc}
 8008268:	00000000 	.word	0x00000000
 800826c:	0800a6b9 	.word	0x0800a6b9

08008270 <atexit>:
 8008270:	2300      	movs	r3, #0
 8008272:	b510      	push	{r4, lr}
 8008274:	0001      	movs	r1, r0
 8008276:	001a      	movs	r2, r3
 8008278:	0018      	movs	r0, r3
 800827a:	f002 fa79 	bl	800a770 <__register_exitproc>
 800827e:	bd10      	pop	{r4, pc}

08008280 <_malloc_trim_r>:
 8008280:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8008282:	0004      	movs	r4, r0
 8008284:	2008      	movs	r0, #8
 8008286:	000d      	movs	r5, r1
 8008288:	f002 fa2a 	bl	800a6e0 <sysconf>
 800828c:	0006      	movs	r6, r0
 800828e:	0020      	movs	r0, r4
 8008290:	f000 fb22 	bl	80088d8 <__malloc_lock>
 8008294:	2203      	movs	r2, #3
 8008296:	4f21      	ldr	r7, [pc, #132]	; (800831c <_malloc_trim_r+0x9c>)
 8008298:	0031      	movs	r1, r6
 800829a:	68bb      	ldr	r3, [r7, #8]
 800829c:	685b      	ldr	r3, [r3, #4]
 800829e:	4393      	bics	r3, r2
 80082a0:	1b58      	subs	r0, r3, r5
 80082a2:	3811      	subs	r0, #17
 80082a4:	1980      	adds	r0, r0, r6
 80082a6:	9301      	str	r3, [sp, #4]
 80082a8:	f7f7 ff48 	bl	800013c <__udivsi3>
 80082ac:	1e45      	subs	r5, r0, #1
 80082ae:	4375      	muls	r5, r6
 80082b0:	42ae      	cmp	r6, r5
 80082b2:	dd04      	ble.n	80082be <_malloc_trim_r+0x3e>
 80082b4:	0020      	movs	r0, r4
 80082b6:	f000 fb17 	bl	80088e8 <__malloc_unlock>
 80082ba:	2000      	movs	r0, #0
 80082bc:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 80082be:	2100      	movs	r1, #0
 80082c0:	0020      	movs	r0, r4
 80082c2:	f002 f9e7 	bl	800a694 <_sbrk_r>
 80082c6:	68bb      	ldr	r3, [r7, #8]
 80082c8:	9a01      	ldr	r2, [sp, #4]
 80082ca:	189b      	adds	r3, r3, r2
 80082cc:	4298      	cmp	r0, r3
 80082ce:	d1f1      	bne.n	80082b4 <_malloc_trim_r+0x34>
 80082d0:	0020      	movs	r0, r4
 80082d2:	4269      	negs	r1, r5
 80082d4:	f002 f9de 	bl	800a694 <_sbrk_r>
 80082d8:	3001      	adds	r0, #1
 80082da:	d110      	bne.n	80082fe <_malloc_trim_r+0x7e>
 80082dc:	2100      	movs	r1, #0
 80082de:	0020      	movs	r0, r4
 80082e0:	f002 f9d8 	bl	800a694 <_sbrk_r>
 80082e4:	68ba      	ldr	r2, [r7, #8]
 80082e6:	1a81      	subs	r1, r0, r2
 80082e8:	290f      	cmp	r1, #15
 80082ea:	dde3      	ble.n	80082b4 <_malloc_trim_r+0x34>
 80082ec:	4d0c      	ldr	r5, [pc, #48]	; (8008320 <_malloc_trim_r+0xa0>)
 80082ee:	4b0d      	ldr	r3, [pc, #52]	; (8008324 <_malloc_trim_r+0xa4>)
 80082f0:	682d      	ldr	r5, [r5, #0]
 80082f2:	1b40      	subs	r0, r0, r5
 80082f4:	6018      	str	r0, [r3, #0]
 80082f6:	2301      	movs	r3, #1
 80082f8:	430b      	orrs	r3, r1
 80082fa:	6053      	str	r3, [r2, #4]
 80082fc:	e7da      	b.n	80082b4 <_malloc_trim_r+0x34>
 80082fe:	2601      	movs	r6, #1
 8008300:	9b01      	ldr	r3, [sp, #4]
 8008302:	68ba      	ldr	r2, [r7, #8]
 8008304:	1b5b      	subs	r3, r3, r5
 8008306:	4333      	orrs	r3, r6
 8008308:	6053      	str	r3, [r2, #4]
 800830a:	4a06      	ldr	r2, [pc, #24]	; (8008324 <_malloc_trim_r+0xa4>)
 800830c:	0020      	movs	r0, r4
 800830e:	6813      	ldr	r3, [r2, #0]
 8008310:	1b5b      	subs	r3, r3, r5
 8008312:	6013      	str	r3, [r2, #0]
 8008314:	f000 fae8 	bl	80088e8 <__malloc_unlock>
 8008318:	0030      	movs	r0, r6
 800831a:	e7cf      	b.n	80082bc <_malloc_trim_r+0x3c>
 800831c:	200002b0 	.word	0x200002b0
 8008320:	200006b8 	.word	0x200006b8
 8008324:	200009e8 	.word	0x200009e8

08008328 <_free_r>:
 8008328:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800832a:	1e0d      	subs	r5, r1, #0
 800832c:	9001      	str	r0, [sp, #4]
 800832e:	d02d      	beq.n	800838c <_free_r+0x64>
 8008330:	f000 fad2 	bl	80088d8 <__malloc_lock>
 8008334:	2301      	movs	r3, #1
 8008336:	0029      	movs	r1, r5
 8008338:	469c      	mov	ip, r3
 800833a:	3908      	subs	r1, #8
 800833c:	684f      	ldr	r7, [r1, #4]
 800833e:	4662      	mov	r2, ip
 8008340:	003b      	movs	r3, r7
 8008342:	4664      	mov	r4, ip
 8008344:	4393      	bics	r3, r2
 8008346:	18c8      	adds	r0, r1, r3
 8008348:	6845      	ldr	r5, [r0, #4]
 800834a:	3202      	adds	r2, #2
 800834c:	4395      	bics	r5, r2
 800834e:	4a4a      	ldr	r2, [pc, #296]	; (8008478 <_free_r+0x150>)
 8008350:	4027      	ands	r7, r4
 8008352:	6896      	ldr	r6, [r2, #8]
 8008354:	4286      	cmp	r6, r0
 8008356:	d11a      	bne.n	800838e <_free_r+0x66>
 8008358:	195b      	adds	r3, r3, r5
 800835a:	2f00      	cmp	r7, #0
 800835c:	d106      	bne.n	800836c <_free_r+0x44>
 800835e:	6808      	ldr	r0, [r1, #0]
 8008360:	1a09      	subs	r1, r1, r0
 8008362:	688d      	ldr	r5, [r1, #8]
 8008364:	181b      	adds	r3, r3, r0
 8008366:	68c8      	ldr	r0, [r1, #12]
 8008368:	60e8      	str	r0, [r5, #12]
 800836a:	6085      	str	r5, [r0, #8]
 800836c:	2001      	movs	r0, #1
 800836e:	4318      	orrs	r0, r3
 8008370:	6048      	str	r0, [r1, #4]
 8008372:	6091      	str	r1, [r2, #8]
 8008374:	4a41      	ldr	r2, [pc, #260]	; (800847c <_free_r+0x154>)
 8008376:	6812      	ldr	r2, [r2, #0]
 8008378:	429a      	cmp	r2, r3
 800837a:	d804      	bhi.n	8008386 <_free_r+0x5e>
 800837c:	4b40      	ldr	r3, [pc, #256]	; (8008480 <_free_r+0x158>)
 800837e:	9801      	ldr	r0, [sp, #4]
 8008380:	6819      	ldr	r1, [r3, #0]
 8008382:	f7ff ff7d 	bl	8008280 <_malloc_trim_r>
 8008386:	9801      	ldr	r0, [sp, #4]
 8008388:	f000 faae 	bl	80088e8 <__malloc_unlock>
 800838c:	bdf7      	pop	{r0, r1, r2, r4, r5, r6, r7, pc}
 800838e:	2600      	movs	r6, #0
 8008390:	6045      	str	r5, [r0, #4]
 8008392:	42b7      	cmp	r7, r6
 8008394:	d109      	bne.n	80083aa <_free_r+0x82>
 8008396:	680f      	ldr	r7, [r1, #0]
 8008398:	4c3a      	ldr	r4, [pc, #232]	; (8008484 <_free_r+0x15c>)
 800839a:	1bc9      	subs	r1, r1, r7
 800839c:	19db      	adds	r3, r3, r7
 800839e:	688f      	ldr	r7, [r1, #8]
 80083a0:	42a7      	cmp	r7, r4
 80083a2:	d02c      	beq.n	80083fe <_free_r+0xd6>
 80083a4:	68cc      	ldr	r4, [r1, #12]
 80083a6:	60fc      	str	r4, [r7, #12]
 80083a8:	60a7      	str	r7, [r4, #8]
 80083aa:	1947      	adds	r7, r0, r5
 80083ac:	687c      	ldr	r4, [r7, #4]
 80083ae:	2701      	movs	r7, #1
 80083b0:	423c      	tst	r4, r7
 80083b2:	d10b      	bne.n	80083cc <_free_r+0xa4>
 80083b4:	195b      	adds	r3, r3, r5
 80083b6:	6885      	ldr	r5, [r0, #8]
 80083b8:	2e00      	cmp	r6, #0
 80083ba:	d122      	bne.n	8008402 <_free_r+0xda>
 80083bc:	4c31      	ldr	r4, [pc, #196]	; (8008484 <_free_r+0x15c>)
 80083be:	42a5      	cmp	r5, r4
 80083c0:	d11f      	bne.n	8008402 <_free_r+0xda>
 80083c2:	003e      	movs	r6, r7
 80083c4:	6151      	str	r1, [r2, #20]
 80083c6:	6111      	str	r1, [r2, #16]
 80083c8:	60cd      	str	r5, [r1, #12]
 80083ca:	608d      	str	r5, [r1, #8]
 80083cc:	2501      	movs	r5, #1
 80083ce:	0028      	movs	r0, r5
 80083d0:	4318      	orrs	r0, r3
 80083d2:	6048      	str	r0, [r1, #4]
 80083d4:	50cb      	str	r3, [r1, r3]
 80083d6:	2e00      	cmp	r6, #0
 80083d8:	d1d5      	bne.n	8008386 <_free_r+0x5e>
 80083da:	2080      	movs	r0, #128	; 0x80
 80083dc:	0080      	lsls	r0, r0, #2
 80083de:	4283      	cmp	r3, r0
 80083e0:	d213      	bcs.n	800840a <_free_r+0xe2>
 80083e2:	08d8      	lsrs	r0, r3, #3
 80083e4:	095b      	lsrs	r3, r3, #5
 80083e6:	409d      	lsls	r5, r3
 80083e8:	6853      	ldr	r3, [r2, #4]
 80083ea:	431d      	orrs	r5, r3
 80083ec:	00c3      	lsls	r3, r0, #3
 80083ee:	189b      	adds	r3, r3, r2
 80083f0:	6055      	str	r5, [r2, #4]
 80083f2:	689a      	ldr	r2, [r3, #8]
 80083f4:	60cb      	str	r3, [r1, #12]
 80083f6:	608a      	str	r2, [r1, #8]
 80083f8:	6099      	str	r1, [r3, #8]
 80083fa:	60d1      	str	r1, [r2, #12]
 80083fc:	e7c3      	b.n	8008386 <_free_r+0x5e>
 80083fe:	4666      	mov	r6, ip
 8008400:	e7d3      	b.n	80083aa <_free_r+0x82>
 8008402:	68c0      	ldr	r0, [r0, #12]
 8008404:	60e8      	str	r0, [r5, #12]
 8008406:	6085      	str	r5, [r0, #8]
 8008408:	e7e0      	b.n	80083cc <_free_r+0xa4>
 800840a:	0a5d      	lsrs	r5, r3, #9
 800840c:	2d04      	cmp	r5, #4
 800840e:	d812      	bhi.n	8008436 <_free_r+0x10e>
 8008410:	0998      	lsrs	r0, r3, #6
 8008412:	3038      	adds	r0, #56	; 0x38
 8008414:	00c6      	lsls	r6, r0, #3
 8008416:	18b6      	adds	r6, r6, r2
 8008418:	68b5      	ldr	r5, [r6, #8]
 800841a:	2703      	movs	r7, #3
 800841c:	42ae      	cmp	r6, r5
 800841e:	d125      	bne.n	800846c <_free_r+0x144>
 8008420:	2301      	movs	r3, #1
 8008422:	1080      	asrs	r0, r0, #2
 8008424:	4083      	lsls	r3, r0
 8008426:	6850      	ldr	r0, [r2, #4]
 8008428:	4303      	orrs	r3, r0
 800842a:	6053      	str	r3, [r2, #4]
 800842c:	60ce      	str	r6, [r1, #12]
 800842e:	608d      	str	r5, [r1, #8]
 8008430:	60b1      	str	r1, [r6, #8]
 8008432:	60e9      	str	r1, [r5, #12]
 8008434:	e7a7      	b.n	8008386 <_free_r+0x5e>
 8008436:	2d14      	cmp	r5, #20
 8008438:	d802      	bhi.n	8008440 <_free_r+0x118>
 800843a:	0028      	movs	r0, r5
 800843c:	305b      	adds	r0, #91	; 0x5b
 800843e:	e7e9      	b.n	8008414 <_free_r+0xec>
 8008440:	2d54      	cmp	r5, #84	; 0x54
 8008442:	d802      	bhi.n	800844a <_free_r+0x122>
 8008444:	0b18      	lsrs	r0, r3, #12
 8008446:	306e      	adds	r0, #110	; 0x6e
 8008448:	e7e4      	b.n	8008414 <_free_r+0xec>
 800844a:	20aa      	movs	r0, #170	; 0xaa
 800844c:	0040      	lsls	r0, r0, #1
 800844e:	4285      	cmp	r5, r0
 8008450:	d802      	bhi.n	8008458 <_free_r+0x130>
 8008452:	0bd8      	lsrs	r0, r3, #15
 8008454:	3077      	adds	r0, #119	; 0x77
 8008456:	e7dd      	b.n	8008414 <_free_r+0xec>
 8008458:	4e0b      	ldr	r6, [pc, #44]	; (8008488 <_free_r+0x160>)
 800845a:	207e      	movs	r0, #126	; 0x7e
 800845c:	42b5      	cmp	r5, r6
 800845e:	d8d9      	bhi.n	8008414 <_free_r+0xec>
 8008460:	0c98      	lsrs	r0, r3, #18
 8008462:	307c      	adds	r0, #124	; 0x7c
 8008464:	e7d6      	b.n	8008414 <_free_r+0xec>
 8008466:	68ad      	ldr	r5, [r5, #8]
 8008468:	42ae      	cmp	r6, r5
 800846a:	d003      	beq.n	8008474 <_free_r+0x14c>
 800846c:	686a      	ldr	r2, [r5, #4]
 800846e:	43ba      	bics	r2, r7
 8008470:	429a      	cmp	r2, r3
 8008472:	d8f8      	bhi.n	8008466 <_free_r+0x13e>
 8008474:	68ee      	ldr	r6, [r5, #12]
 8008476:	e7d9      	b.n	800842c <_free_r+0x104>
 8008478:	200002b0 	.word	0x200002b0
 800847c:	200006bc 	.word	0x200006bc
 8008480:	20000a18 	.word	0x20000a18
 8008484:	200002b8 	.word	0x200002b8
 8008488:	00000554 	.word	0x00000554

0800848c <_malloc_r>:
 800848c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800848e:	000d      	movs	r5, r1
 8008490:	b087      	sub	sp, #28
 8008492:	350b      	adds	r5, #11
 8008494:	9001      	str	r0, [sp, #4]
 8008496:	2d16      	cmp	r5, #22
 8008498:	d908      	bls.n	80084ac <_malloc_r+0x20>
 800849a:	2207      	movs	r2, #7
 800849c:	4395      	bics	r5, r2
 800849e:	d506      	bpl.n	80084ae <_malloc_r+0x22>
 80084a0:	230c      	movs	r3, #12
 80084a2:	9a01      	ldr	r2, [sp, #4]
 80084a4:	6013      	str	r3, [r2, #0]
 80084a6:	2000      	movs	r0, #0
 80084a8:	b007      	add	sp, #28
 80084aa:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80084ac:	2510      	movs	r5, #16
 80084ae:	42a9      	cmp	r1, r5
 80084b0:	d8f6      	bhi.n	80084a0 <_malloc_r+0x14>
 80084b2:	9801      	ldr	r0, [sp, #4]
 80084b4:	f000 fa10 	bl	80088d8 <__malloc_lock>
 80084b8:	23fc      	movs	r3, #252	; 0xfc
 80084ba:	4ebe      	ldr	r6, [pc, #760]	; (80087b4 <_malloc_r+0x328>)
 80084bc:	005b      	lsls	r3, r3, #1
 80084be:	429d      	cmp	r5, r3
 80084c0:	d219      	bcs.n	80084f6 <_malloc_r+0x6a>
 80084c2:	002a      	movs	r2, r5
 80084c4:	3208      	adds	r2, #8
 80084c6:	18b2      	adds	r2, r6, r2
 80084c8:	0011      	movs	r1, r2
 80084ca:	6854      	ldr	r4, [r2, #4]
 80084cc:	3908      	subs	r1, #8
 80084ce:	08eb      	lsrs	r3, r5, #3
 80084d0:	428c      	cmp	r4, r1
 80084d2:	d103      	bne.n	80084dc <_malloc_r+0x50>
 80084d4:	68d4      	ldr	r4, [r2, #12]
 80084d6:	3302      	adds	r3, #2
 80084d8:	42a2      	cmp	r2, r4
 80084da:	d022      	beq.n	8008522 <_malloc_r+0x96>
 80084dc:	2203      	movs	r2, #3
 80084de:	6863      	ldr	r3, [r4, #4]
 80084e0:	68a1      	ldr	r1, [r4, #8]
 80084e2:	4393      	bics	r3, r2
 80084e4:	68e2      	ldr	r2, [r4, #12]
 80084e6:	18e3      	adds	r3, r4, r3
 80084e8:	60ca      	str	r2, [r1, #12]
 80084ea:	6091      	str	r1, [r2, #8]
 80084ec:	2201      	movs	r2, #1
 80084ee:	6859      	ldr	r1, [r3, #4]
 80084f0:	430a      	orrs	r2, r1
 80084f2:	605a      	str	r2, [r3, #4]
 80084f4:	e02a      	b.n	800854c <_malloc_r+0xc0>
 80084f6:	233f      	movs	r3, #63	; 0x3f
 80084f8:	0a6a      	lsrs	r2, r5, #9
 80084fa:	d003      	beq.n	8008504 <_malloc_r+0x78>
 80084fc:	2a04      	cmp	r2, #4
 80084fe:	d82b      	bhi.n	8008558 <_malloc_r+0xcc>
 8008500:	09ab      	lsrs	r3, r5, #6
 8008502:	3338      	adds	r3, #56	; 0x38
 8008504:	2203      	movs	r2, #3
 8008506:	4694      	mov	ip, r2
 8008508:	00d9      	lsls	r1, r3, #3
 800850a:	1989      	adds	r1, r1, r6
 800850c:	68cc      	ldr	r4, [r1, #12]
 800850e:	428c      	cmp	r4, r1
 8008510:	d006      	beq.n	8008520 <_malloc_r+0x94>
 8008512:	4660      	mov	r0, ip
 8008514:	6862      	ldr	r2, [r4, #4]
 8008516:	4382      	bics	r2, r0
 8008518:	1b57      	subs	r7, r2, r5
 800851a:	2f0f      	cmp	r7, #15
 800851c:	dd34      	ble.n	8008588 <_malloc_r+0xfc>
 800851e:	3b01      	subs	r3, #1
 8008520:	3301      	adds	r3, #1
 8008522:	6934      	ldr	r4, [r6, #16]
 8008524:	49a4      	ldr	r1, [pc, #656]	; (80087b8 <_malloc_r+0x32c>)
 8008526:	428c      	cmp	r4, r1
 8008528:	d055      	beq.n	80085d6 <_malloc_r+0x14a>
 800852a:	2003      	movs	r0, #3
 800852c:	6862      	ldr	r2, [r4, #4]
 800852e:	4382      	bics	r2, r0
 8008530:	1b50      	subs	r0, r2, r5
 8008532:	280f      	cmp	r0, #15
 8008534:	dd36      	ble.n	80085a4 <_malloc_r+0x118>
 8008536:	2301      	movs	r3, #1
 8008538:	1967      	adds	r7, r4, r5
 800853a:	431d      	orrs	r5, r3
 800853c:	4303      	orrs	r3, r0
 800853e:	6065      	str	r5, [r4, #4]
 8008540:	6177      	str	r7, [r6, #20]
 8008542:	6137      	str	r7, [r6, #16]
 8008544:	60f9      	str	r1, [r7, #12]
 8008546:	60b9      	str	r1, [r7, #8]
 8008548:	607b      	str	r3, [r7, #4]
 800854a:	50a0      	str	r0, [r4, r2]
 800854c:	9801      	ldr	r0, [sp, #4]
 800854e:	f000 f9cb 	bl	80088e8 <__malloc_unlock>
 8008552:	0020      	movs	r0, r4
 8008554:	3008      	adds	r0, #8
 8008556:	e7a7      	b.n	80084a8 <_malloc_r+0x1c>
 8008558:	2a14      	cmp	r2, #20
 800855a:	d802      	bhi.n	8008562 <_malloc_r+0xd6>
 800855c:	0013      	movs	r3, r2
 800855e:	335b      	adds	r3, #91	; 0x5b
 8008560:	e7d0      	b.n	8008504 <_malloc_r+0x78>
 8008562:	2a54      	cmp	r2, #84	; 0x54
 8008564:	d802      	bhi.n	800856c <_malloc_r+0xe0>
 8008566:	0b2b      	lsrs	r3, r5, #12
 8008568:	336e      	adds	r3, #110	; 0x6e
 800856a:	e7cb      	b.n	8008504 <_malloc_r+0x78>
 800856c:	23aa      	movs	r3, #170	; 0xaa
 800856e:	005b      	lsls	r3, r3, #1
 8008570:	429a      	cmp	r2, r3
 8008572:	d802      	bhi.n	800857a <_malloc_r+0xee>
 8008574:	0beb      	lsrs	r3, r5, #15
 8008576:	3377      	adds	r3, #119	; 0x77
 8008578:	e7c4      	b.n	8008504 <_malloc_r+0x78>
 800857a:	4990      	ldr	r1, [pc, #576]	; (80087bc <_malloc_r+0x330>)
 800857c:	237e      	movs	r3, #126	; 0x7e
 800857e:	428a      	cmp	r2, r1
 8008580:	d8c0      	bhi.n	8008504 <_malloc_r+0x78>
 8008582:	0cab      	lsrs	r3, r5, #18
 8008584:	337c      	adds	r3, #124	; 0x7c
 8008586:	e7bd      	b.n	8008504 <_malloc_r+0x78>
 8008588:	68e0      	ldr	r0, [r4, #12]
 800858a:	2f00      	cmp	r7, #0
 800858c:	db08      	blt.n	80085a0 <_malloc_r+0x114>
 800858e:	68a3      	ldr	r3, [r4, #8]
 8008590:	60d8      	str	r0, [r3, #12]
 8008592:	6083      	str	r3, [r0, #8]
 8008594:	2301      	movs	r3, #1
 8008596:	18a2      	adds	r2, r4, r2
 8008598:	6851      	ldr	r1, [r2, #4]
 800859a:	430b      	orrs	r3, r1
 800859c:	6053      	str	r3, [r2, #4]
 800859e:	e7d5      	b.n	800854c <_malloc_r+0xc0>
 80085a0:	0004      	movs	r4, r0
 80085a2:	e7b4      	b.n	800850e <_malloc_r+0x82>
 80085a4:	6171      	str	r1, [r6, #20]
 80085a6:	6131      	str	r1, [r6, #16]
 80085a8:	2800      	cmp	r0, #0
 80085aa:	daf3      	bge.n	8008594 <_malloc_r+0x108>
 80085ac:	6871      	ldr	r1, [r6, #4]
 80085ae:	468c      	mov	ip, r1
 80085b0:	2180      	movs	r1, #128	; 0x80
 80085b2:	0089      	lsls	r1, r1, #2
 80085b4:	428a      	cmp	r2, r1
 80085b6:	d300      	bcc.n	80085ba <_malloc_r+0x12e>
 80085b8:	e08c      	b.n	80086d4 <_malloc_r+0x248>
 80085ba:	08d1      	lsrs	r1, r2, #3
 80085bc:	0950      	lsrs	r0, r2, #5
 80085be:	2201      	movs	r2, #1
 80085c0:	4082      	lsls	r2, r0
 80085c2:	4660      	mov	r0, ip
 80085c4:	4302      	orrs	r2, r0
 80085c6:	6072      	str	r2, [r6, #4]
 80085c8:	00ca      	lsls	r2, r1, #3
 80085ca:	1992      	adds	r2, r2, r6
 80085cc:	6891      	ldr	r1, [r2, #8]
 80085ce:	60e2      	str	r2, [r4, #12]
 80085d0:	60a1      	str	r1, [r4, #8]
 80085d2:	6094      	str	r4, [r2, #8]
 80085d4:	60cc      	str	r4, [r1, #12]
 80085d6:	2201      	movs	r2, #1
 80085d8:	4876      	ldr	r0, [pc, #472]	; (80087b4 <_malloc_r+0x328>)
 80085da:	1099      	asrs	r1, r3, #2
 80085dc:	408a      	lsls	r2, r1
 80085de:	6841      	ldr	r1, [r0, #4]
 80085e0:	4291      	cmp	r1, r2
 80085e2:	d328      	bcc.n	8008636 <_malloc_r+0x1aa>
 80085e4:	420a      	tst	r2, r1
 80085e6:	d105      	bne.n	80085f4 <_malloc_r+0x168>
 80085e8:	2403      	movs	r4, #3
 80085ea:	43a3      	bics	r3, r4
 80085ec:	0052      	lsls	r2, r2, #1
 80085ee:	3304      	adds	r3, #4
 80085f0:	420a      	tst	r2, r1
 80085f2:	d0fb      	beq.n	80085ec <_malloc_r+0x160>
 80085f4:	496f      	ldr	r1, [pc, #444]	; (80087b4 <_malloc_r+0x328>)
 80085f6:	9104      	str	r1, [sp, #16]
 80085f8:	00d9      	lsls	r1, r3, #3
 80085fa:	1841      	adds	r1, r0, r1
 80085fc:	468c      	mov	ip, r1
 80085fe:	000f      	movs	r7, r1
 8008600:	9302      	str	r3, [sp, #8]
 8008602:	68fc      	ldr	r4, [r7, #12]
 8008604:	42bc      	cmp	r4, r7
 8008606:	d000      	beq.n	800860a <_malloc_r+0x17e>
 8008608:	e09b      	b.n	8008742 <_malloc_r+0x2b6>
 800860a:	2403      	movs	r4, #3
 800860c:	9902      	ldr	r1, [sp, #8]
 800860e:	3708      	adds	r7, #8
 8008610:	3101      	adds	r1, #1
 8008612:	9102      	str	r1, [sp, #8]
 8008614:	4221      	tst	r1, r4
 8008616:	d1f4      	bne.n	8008602 <_malloc_r+0x176>
 8008618:	2103      	movs	r1, #3
 800861a:	420b      	tst	r3, r1
 800861c:	d000      	beq.n	8008620 <_malloc_r+0x194>
 800861e:	e0b7      	b.n	8008790 <_malloc_r+0x304>
 8008620:	6843      	ldr	r3, [r0, #4]
 8008622:	4393      	bics	r3, r2
 8008624:	6043      	str	r3, [r0, #4]
 8008626:	9b04      	ldr	r3, [sp, #16]
 8008628:	0052      	lsls	r2, r2, #1
 800862a:	6859      	ldr	r1, [r3, #4]
 800862c:	4291      	cmp	r1, r2
 800862e:	d302      	bcc.n	8008636 <_malloc_r+0x1aa>
 8008630:	2a00      	cmp	r2, #0
 8008632:	d000      	beq.n	8008636 <_malloc_r+0x1aa>
 8008634:	e0bb      	b.n	80087ae <_malloc_r+0x322>
 8008636:	2203      	movs	r2, #3
 8008638:	6883      	ldr	r3, [r0, #8]
 800863a:	9302      	str	r3, [sp, #8]
 800863c:	685b      	ldr	r3, [r3, #4]
 800863e:	4393      	bics	r3, r2
 8008640:	9303      	str	r3, [sp, #12]
 8008642:	42ab      	cmp	r3, r5
 8008644:	d303      	bcc.n	800864e <_malloc_r+0x1c2>
 8008646:	1b59      	subs	r1, r3, r5
 8008648:	290f      	cmp	r1, #15
 800864a:	dd00      	ble.n	800864e <_malloc_r+0x1c2>
 800864c:	e123      	b.n	8008896 <_malloc_r+0x40a>
 800864e:	9b02      	ldr	r3, [sp, #8]
 8008650:	9a03      	ldr	r2, [sp, #12]
 8008652:	2008      	movs	r0, #8
 8008654:	189e      	adds	r6, r3, r2
 8008656:	4b5a      	ldr	r3, [pc, #360]	; (80087c0 <_malloc_r+0x334>)
 8008658:	681f      	ldr	r7, [r3, #0]
 800865a:	f002 f841 	bl	800a6e0 <sysconf>
 800865e:	4b59      	ldr	r3, [pc, #356]	; (80087c4 <_malloc_r+0x338>)
 8008660:	3710      	adds	r7, #16
 8008662:	681b      	ldr	r3, [r3, #0]
 8008664:	197f      	adds	r7, r7, r5
 8008666:	9004      	str	r0, [sp, #16]
 8008668:	3301      	adds	r3, #1
 800866a:	d003      	beq.n	8008674 <_malloc_r+0x1e8>
 800866c:	1e7b      	subs	r3, r7, #1
 800866e:	181b      	adds	r3, r3, r0
 8008670:	4247      	negs	r7, r0
 8008672:	401f      	ands	r7, r3
 8008674:	0039      	movs	r1, r7
 8008676:	9801      	ldr	r0, [sp, #4]
 8008678:	f002 f80c 	bl	800a694 <_sbrk_r>
 800867c:	0004      	movs	r4, r0
 800867e:	1c43      	adds	r3, r0, #1
 8008680:	d100      	bne.n	8008684 <_malloc_r+0x1f8>
 8008682:	e0de      	b.n	8008842 <_malloc_r+0x3b6>
 8008684:	4286      	cmp	r6, r0
 8008686:	d904      	bls.n	8008692 <_malloc_r+0x206>
 8008688:	4b4a      	ldr	r3, [pc, #296]	; (80087b4 <_malloc_r+0x328>)
 800868a:	9a02      	ldr	r2, [sp, #8]
 800868c:	429a      	cmp	r2, r3
 800868e:	d000      	beq.n	8008692 <_malloc_r+0x206>
 8008690:	e0d7      	b.n	8008842 <_malloc_r+0x3b6>
 8008692:	4a4d      	ldr	r2, [pc, #308]	; (80087c8 <_malloc_r+0x33c>)
 8008694:	6813      	ldr	r3, [r2, #0]
 8008696:	18fb      	adds	r3, r7, r3
 8008698:	6013      	str	r3, [r2, #0]
 800869a:	9a04      	ldr	r2, [sp, #16]
 800869c:	3a01      	subs	r2, #1
 800869e:	42a6      	cmp	r6, r4
 80086a0:	d000      	beq.n	80086a4 <_malloc_r+0x218>
 80086a2:	e097      	b.n	80087d4 <_malloc_r+0x348>
 80086a4:	4216      	tst	r6, r2
 80086a6:	d000      	beq.n	80086aa <_malloc_r+0x21e>
 80086a8:	e094      	b.n	80087d4 <_malloc_r+0x348>
 80086aa:	4b42      	ldr	r3, [pc, #264]	; (80087b4 <_malloc_r+0x328>)
 80086ac:	689a      	ldr	r2, [r3, #8]
 80086ae:	9b03      	ldr	r3, [sp, #12]
 80086b0:	19df      	adds	r7, r3, r7
 80086b2:	2301      	movs	r3, #1
 80086b4:	433b      	orrs	r3, r7
 80086b6:	6053      	str	r3, [r2, #4]
 80086b8:	4b43      	ldr	r3, [pc, #268]	; (80087c8 <_malloc_r+0x33c>)
 80086ba:	4a44      	ldr	r2, [pc, #272]	; (80087cc <_malloc_r+0x340>)
 80086bc:	681b      	ldr	r3, [r3, #0]
 80086be:	6811      	ldr	r1, [r2, #0]
 80086c0:	428b      	cmp	r3, r1
 80086c2:	d900      	bls.n	80086c6 <_malloc_r+0x23a>
 80086c4:	6013      	str	r3, [r2, #0]
 80086c6:	4a42      	ldr	r2, [pc, #264]	; (80087d0 <_malloc_r+0x344>)
 80086c8:	6811      	ldr	r1, [r2, #0]
 80086ca:	428b      	cmp	r3, r1
 80086cc:	d800      	bhi.n	80086d0 <_malloc_r+0x244>
 80086ce:	e0b8      	b.n	8008842 <_malloc_r+0x3b6>
 80086d0:	6013      	str	r3, [r2, #0]
 80086d2:	e0b6      	b.n	8008842 <_malloc_r+0x3b6>
 80086d4:	0a50      	lsrs	r0, r2, #9
 80086d6:	2804      	cmp	r0, #4
 80086d8:	d811      	bhi.n	80086fe <_malloc_r+0x272>
 80086da:	0991      	lsrs	r1, r2, #6
 80086dc:	3138      	adds	r1, #56	; 0x38
 80086de:	00cf      	lsls	r7, r1, #3
 80086e0:	19bf      	adds	r7, r7, r6
 80086e2:	68b8      	ldr	r0, [r7, #8]
 80086e4:	4287      	cmp	r7, r0
 80086e6:	d125      	bne.n	8008734 <_malloc_r+0x2a8>
 80086e8:	2201      	movs	r2, #1
 80086ea:	1089      	asrs	r1, r1, #2
 80086ec:	408a      	lsls	r2, r1
 80086ee:	4661      	mov	r1, ip
 80086f0:	430a      	orrs	r2, r1
 80086f2:	6072      	str	r2, [r6, #4]
 80086f4:	60e7      	str	r7, [r4, #12]
 80086f6:	60a0      	str	r0, [r4, #8]
 80086f8:	60bc      	str	r4, [r7, #8]
 80086fa:	60c4      	str	r4, [r0, #12]
 80086fc:	e76b      	b.n	80085d6 <_malloc_r+0x14a>
 80086fe:	2814      	cmp	r0, #20
 8008700:	d802      	bhi.n	8008708 <_malloc_r+0x27c>
 8008702:	0001      	movs	r1, r0
 8008704:	315b      	adds	r1, #91	; 0x5b
 8008706:	e7ea      	b.n	80086de <_malloc_r+0x252>
 8008708:	2854      	cmp	r0, #84	; 0x54
 800870a:	d802      	bhi.n	8008712 <_malloc_r+0x286>
 800870c:	0b11      	lsrs	r1, r2, #12
 800870e:	316e      	adds	r1, #110	; 0x6e
 8008710:	e7e5      	b.n	80086de <_malloc_r+0x252>
 8008712:	21aa      	movs	r1, #170	; 0xaa
 8008714:	0049      	lsls	r1, r1, #1
 8008716:	4288      	cmp	r0, r1
 8008718:	d802      	bhi.n	8008720 <_malloc_r+0x294>
 800871a:	0bd1      	lsrs	r1, r2, #15
 800871c:	3177      	adds	r1, #119	; 0x77
 800871e:	e7de      	b.n	80086de <_malloc_r+0x252>
 8008720:	4f26      	ldr	r7, [pc, #152]	; (80087bc <_malloc_r+0x330>)
 8008722:	217e      	movs	r1, #126	; 0x7e
 8008724:	42b8      	cmp	r0, r7
 8008726:	d8da      	bhi.n	80086de <_malloc_r+0x252>
 8008728:	0c91      	lsrs	r1, r2, #18
 800872a:	317c      	adds	r1, #124	; 0x7c
 800872c:	e7d7      	b.n	80086de <_malloc_r+0x252>
 800872e:	6880      	ldr	r0, [r0, #8]
 8008730:	4287      	cmp	r7, r0
 8008732:	d004      	beq.n	800873e <_malloc_r+0x2b2>
 8008734:	2603      	movs	r6, #3
 8008736:	6841      	ldr	r1, [r0, #4]
 8008738:	43b1      	bics	r1, r6
 800873a:	4291      	cmp	r1, r2
 800873c:	d8f7      	bhi.n	800872e <_malloc_r+0x2a2>
 800873e:	68c7      	ldr	r7, [r0, #12]
 8008740:	e7d8      	b.n	80086f4 <_malloc_r+0x268>
 8008742:	2603      	movs	r6, #3
 8008744:	6861      	ldr	r1, [r4, #4]
 8008746:	43b1      	bics	r1, r6
 8008748:	9103      	str	r1, [sp, #12]
 800874a:	68e6      	ldr	r6, [r4, #12]
 800874c:	1b49      	subs	r1, r1, r5
 800874e:	290f      	cmp	r1, #15
 8008750:	dd10      	ble.n	8008774 <_malloc_r+0x2e8>
 8008752:	2201      	movs	r2, #1
 8008754:	1963      	adds	r3, r4, r5
 8008756:	4315      	orrs	r5, r2
 8008758:	6065      	str	r5, [r4, #4]
 800875a:	68a5      	ldr	r5, [r4, #8]
 800875c:	430a      	orrs	r2, r1
 800875e:	60ee      	str	r6, [r5, #12]
 8008760:	60b5      	str	r5, [r6, #8]
 8008762:	6143      	str	r3, [r0, #20]
 8008764:	6103      	str	r3, [r0, #16]
 8008766:	4814      	ldr	r0, [pc, #80]	; (80087b8 <_malloc_r+0x32c>)
 8008768:	605a      	str	r2, [r3, #4]
 800876a:	60d8      	str	r0, [r3, #12]
 800876c:	6098      	str	r0, [r3, #8]
 800876e:	9b03      	ldr	r3, [sp, #12]
 8008770:	50e1      	str	r1, [r4, r3]
 8008772:	e6eb      	b.n	800854c <_malloc_r+0xc0>
 8008774:	2900      	cmp	r1, #0
 8008776:	db09      	blt.n	800878c <_malloc_r+0x300>
 8008778:	9b03      	ldr	r3, [sp, #12]
 800877a:	18e1      	adds	r1, r4, r3
 800877c:	2301      	movs	r3, #1
 800877e:	684a      	ldr	r2, [r1, #4]
 8008780:	4313      	orrs	r3, r2
 8008782:	604b      	str	r3, [r1, #4]
 8008784:	68a3      	ldr	r3, [r4, #8]
 8008786:	60de      	str	r6, [r3, #12]
 8008788:	60b3      	str	r3, [r6, #8]
 800878a:	e6df      	b.n	800854c <_malloc_r+0xc0>
 800878c:	0034      	movs	r4, r6
 800878e:	e739      	b.n	8008604 <_malloc_r+0x178>
 8008790:	2108      	movs	r1, #8
 8008792:	4249      	negs	r1, r1
 8008794:	448c      	add	ip, r1
 8008796:	4661      	mov	r1, ip
 8008798:	6889      	ldr	r1, [r1, #8]
 800879a:	3b01      	subs	r3, #1
 800879c:	4561      	cmp	r1, ip
 800879e:	d100      	bne.n	80087a2 <_malloc_r+0x316>
 80087a0:	e73a      	b.n	8008618 <_malloc_r+0x18c>
 80087a2:	e740      	b.n	8008626 <_malloc_r+0x19a>
 80087a4:	3304      	adds	r3, #4
 80087a6:	0052      	lsls	r2, r2, #1
 80087a8:	420a      	tst	r2, r1
 80087aa:	d0fb      	beq.n	80087a4 <_malloc_r+0x318>
 80087ac:	e724      	b.n	80085f8 <_malloc_r+0x16c>
 80087ae:	9b02      	ldr	r3, [sp, #8]
 80087b0:	e7fa      	b.n	80087a8 <_malloc_r+0x31c>
 80087b2:	46c0      	nop			; (mov r8, r8)
 80087b4:	200002b0 	.word	0x200002b0
 80087b8:	200002b8 	.word	0x200002b8
 80087bc:	00000554 	.word	0x00000554
 80087c0:	20000a18 	.word	0x20000a18
 80087c4:	200006b8 	.word	0x200006b8
 80087c8:	200009e8 	.word	0x200009e8
 80087cc:	20000a10 	.word	0x20000a10
 80087d0:	20000a14 	.word	0x20000a14
 80087d4:	4934      	ldr	r1, [pc, #208]	; (80088a8 <_malloc_r+0x41c>)
 80087d6:	6808      	ldr	r0, [r1, #0]
 80087d8:	3001      	adds	r0, #1
 80087da:	d140      	bne.n	800885e <_malloc_r+0x3d2>
 80087dc:	600c      	str	r4, [r1, #0]
 80087de:	2107      	movs	r1, #7
 80087e0:	0026      	movs	r6, r4
 80087e2:	2300      	movs	r3, #0
 80087e4:	400e      	ands	r6, r1
 80087e6:	420c      	tst	r4, r1
 80087e8:	d002      	beq.n	80087f0 <_malloc_r+0x364>
 80087ea:	3308      	adds	r3, #8
 80087ec:	1b9b      	subs	r3, r3, r6
 80087ee:	18e4      	adds	r4, r4, r3
 80087f0:	19e1      	adds	r1, r4, r7
 80087f2:	9105      	str	r1, [sp, #20]
 80087f4:	9f05      	ldr	r7, [sp, #20]
 80087f6:	9904      	ldr	r1, [sp, #16]
 80087f8:	4017      	ands	r7, r2
 80087fa:	18cb      	adds	r3, r1, r3
 80087fc:	1bdf      	subs	r7, r3, r7
 80087fe:	4017      	ands	r7, r2
 8008800:	0039      	movs	r1, r7
 8008802:	9801      	ldr	r0, [sp, #4]
 8008804:	f001 ff46 	bl	800a694 <_sbrk_r>
 8008808:	1c43      	adds	r3, r0, #1
 800880a:	d107      	bne.n	800881c <_malloc_r+0x390>
 800880c:	1e37      	subs	r7, r6, #0
 800880e:	9805      	ldr	r0, [sp, #20]
 8008810:	d004      	beq.n	800881c <_malloc_r+0x390>
 8008812:	0030      	movs	r0, r6
 8008814:	2700      	movs	r7, #0
 8008816:	9b05      	ldr	r3, [sp, #20]
 8008818:	3808      	subs	r0, #8
 800881a:	1818      	adds	r0, r3, r0
 800881c:	4a23      	ldr	r2, [pc, #140]	; (80088ac <_malloc_r+0x420>)
 800881e:	1b00      	subs	r0, r0, r4
 8008820:	6813      	ldr	r3, [r2, #0]
 8008822:	19c0      	adds	r0, r0, r7
 8008824:	19db      	adds	r3, r3, r7
 8008826:	6013      	str	r3, [r2, #0]
 8008828:	2201      	movs	r2, #1
 800882a:	4b21      	ldr	r3, [pc, #132]	; (80088b0 <_malloc_r+0x424>)
 800882c:	9902      	ldr	r1, [sp, #8]
 800882e:	4310      	orrs	r0, r2
 8008830:	609c      	str	r4, [r3, #8]
 8008832:	6060      	str	r0, [r4, #4]
 8008834:	4299      	cmp	r1, r3
 8008836:	d100      	bne.n	800883a <_malloc_r+0x3ae>
 8008838:	e73e      	b.n	80086b8 <_malloc_r+0x22c>
 800883a:	9b03      	ldr	r3, [sp, #12]
 800883c:	2b0f      	cmp	r3, #15
 800883e:	d813      	bhi.n	8008868 <_malloc_r+0x3dc>
 8008840:	6062      	str	r2, [r4, #4]
 8008842:	2203      	movs	r2, #3
 8008844:	4b1a      	ldr	r3, [pc, #104]	; (80088b0 <_malloc_r+0x424>)
 8008846:	689b      	ldr	r3, [r3, #8]
 8008848:	685b      	ldr	r3, [r3, #4]
 800884a:	4393      	bics	r3, r2
 800884c:	1b59      	subs	r1, r3, r5
 800884e:	42ab      	cmp	r3, r5
 8008850:	d301      	bcc.n	8008856 <_malloc_r+0x3ca>
 8008852:	290f      	cmp	r1, #15
 8008854:	dc1f      	bgt.n	8008896 <_malloc_r+0x40a>
 8008856:	9801      	ldr	r0, [sp, #4]
 8008858:	f000 f846 	bl	80088e8 <__malloc_unlock>
 800885c:	e623      	b.n	80084a6 <_malloc_r+0x1a>
 800885e:	4913      	ldr	r1, [pc, #76]	; (80088ac <_malloc_r+0x420>)
 8008860:	1ba6      	subs	r6, r4, r6
 8008862:	18f6      	adds	r6, r6, r3
 8008864:	600e      	str	r6, [r1, #0]
 8008866:	e7ba      	b.n	80087de <_malloc_r+0x352>
 8008868:	2107      	movs	r1, #7
 800886a:	9b03      	ldr	r3, [sp, #12]
 800886c:	3b0c      	subs	r3, #12
 800886e:	438b      	bics	r3, r1
 8008870:	9902      	ldr	r1, [sp, #8]
 8008872:	6849      	ldr	r1, [r1, #4]
 8008874:	400a      	ands	r2, r1
 8008876:	9902      	ldr	r1, [sp, #8]
 8008878:	431a      	orrs	r2, r3
 800887a:	604a      	str	r2, [r1, #4]
 800887c:	18ca      	adds	r2, r1, r3
 800887e:	2105      	movs	r1, #5
 8008880:	6051      	str	r1, [r2, #4]
 8008882:	6091      	str	r1, [r2, #8]
 8008884:	2b0f      	cmp	r3, #15
 8008886:	d800      	bhi.n	800888a <_malloc_r+0x3fe>
 8008888:	e716      	b.n	80086b8 <_malloc_r+0x22c>
 800888a:	9902      	ldr	r1, [sp, #8]
 800888c:	9801      	ldr	r0, [sp, #4]
 800888e:	3108      	adds	r1, #8
 8008890:	f7ff fd4a 	bl	8008328 <_free_r>
 8008894:	e710      	b.n	80086b8 <_malloc_r+0x22c>
 8008896:	2201      	movs	r2, #1
 8008898:	0013      	movs	r3, r2
 800889a:	4805      	ldr	r0, [pc, #20]	; (80088b0 <_malloc_r+0x424>)
 800889c:	432b      	orrs	r3, r5
 800889e:	6884      	ldr	r4, [r0, #8]
 80088a0:	6063      	str	r3, [r4, #4]
 80088a2:	1963      	adds	r3, r4, r5
 80088a4:	6083      	str	r3, [r0, #8]
 80088a6:	e623      	b.n	80084f0 <_malloc_r+0x64>
 80088a8:	200006b8 	.word	0x200006b8
 80088ac:	200009e8 	.word	0x200009e8
 80088b0:	200002b0 	.word	0x200002b0

080088b4 <__ascii_mbtowc>:
 80088b4:	b082      	sub	sp, #8
 80088b6:	2900      	cmp	r1, #0
 80088b8:	d100      	bne.n	80088bc <__ascii_mbtowc+0x8>
 80088ba:	a901      	add	r1, sp, #4
 80088bc:	1e10      	subs	r0, r2, #0
 80088be:	d006      	beq.n	80088ce <__ascii_mbtowc+0x1a>
 80088c0:	2b00      	cmp	r3, #0
 80088c2:	d006      	beq.n	80088d2 <__ascii_mbtowc+0x1e>
 80088c4:	7813      	ldrb	r3, [r2, #0]
 80088c6:	600b      	str	r3, [r1, #0]
 80088c8:	7810      	ldrb	r0, [r2, #0]
 80088ca:	1e43      	subs	r3, r0, #1
 80088cc:	4198      	sbcs	r0, r3
 80088ce:	b002      	add	sp, #8
 80088d0:	4770      	bx	lr
 80088d2:	2002      	movs	r0, #2
 80088d4:	4240      	negs	r0, r0
 80088d6:	e7fa      	b.n	80088ce <__ascii_mbtowc+0x1a>

080088d8 <__malloc_lock>:
 80088d8:	b510      	push	{r4, lr}
 80088da:	4802      	ldr	r0, [pc, #8]	; (80088e4 <__malloc_lock+0xc>)
 80088dc:	f7ff fcb0 	bl	8008240 <__retarget_lock_acquire_recursive>
 80088e0:	bd10      	pop	{r4, pc}
 80088e2:	46c0      	nop			; (mov r8, r8)
 80088e4:	200009e1 	.word	0x200009e1

080088e8 <__malloc_unlock>:
 80088e8:	b510      	push	{r4, lr}
 80088ea:	4802      	ldr	r0, [pc, #8]	; (80088f4 <__malloc_unlock+0xc>)
 80088ec:	f7ff fca9 	bl	8008242 <__retarget_lock_release_recursive>
 80088f0:	bd10      	pop	{r4, pc}
 80088f2:	46c0      	nop			; (mov r8, r8)
 80088f4:	200009e1 	.word	0x200009e1

080088f8 <_Balloc>:
 80088f8:	6c43      	ldr	r3, [r0, #68]	; 0x44
 80088fa:	b570      	push	{r4, r5, r6, lr}
 80088fc:	0006      	movs	r6, r0
 80088fe:	000c      	movs	r4, r1
 8008900:	2b00      	cmp	r3, #0
 8008902:	d012      	beq.n	800892a <_Balloc+0x32>
 8008904:	6c73      	ldr	r3, [r6, #68]	; 0x44
 8008906:	00a2      	lsls	r2, r4, #2
 8008908:	189b      	adds	r3, r3, r2
 800890a:	6818      	ldr	r0, [r3, #0]
 800890c:	2800      	cmp	r0, #0
 800890e:	d115      	bne.n	800893c <_Balloc+0x44>
 8008910:	2101      	movs	r1, #1
 8008912:	000d      	movs	r5, r1
 8008914:	40a5      	lsls	r5, r4
 8008916:	1d6a      	adds	r2, r5, #5
 8008918:	0030      	movs	r0, r6
 800891a:	0092      	lsls	r2, r2, #2
 800891c:	f001 ff86 	bl	800a82c <_calloc_r>
 8008920:	2800      	cmp	r0, #0
 8008922:	d009      	beq.n	8008938 <_Balloc+0x40>
 8008924:	6044      	str	r4, [r0, #4]
 8008926:	6085      	str	r5, [r0, #8]
 8008928:	e00a      	b.n	8008940 <_Balloc+0x48>
 800892a:	2221      	movs	r2, #33	; 0x21
 800892c:	2104      	movs	r1, #4
 800892e:	f001 ff7d 	bl	800a82c <_calloc_r>
 8008932:	6470      	str	r0, [r6, #68]	; 0x44
 8008934:	2800      	cmp	r0, #0
 8008936:	d1e5      	bne.n	8008904 <_Balloc+0xc>
 8008938:	2000      	movs	r0, #0
 800893a:	bd70      	pop	{r4, r5, r6, pc}
 800893c:	6802      	ldr	r2, [r0, #0]
 800893e:	601a      	str	r2, [r3, #0]
 8008940:	2300      	movs	r3, #0
 8008942:	6103      	str	r3, [r0, #16]
 8008944:	60c3      	str	r3, [r0, #12]
 8008946:	e7f8      	b.n	800893a <_Balloc+0x42>

08008948 <_Bfree>:
 8008948:	2900      	cmp	r1, #0
 800894a:	d006      	beq.n	800895a <_Bfree+0x12>
 800894c:	684a      	ldr	r2, [r1, #4]
 800894e:	6c43      	ldr	r3, [r0, #68]	; 0x44
 8008950:	0092      	lsls	r2, r2, #2
 8008952:	189b      	adds	r3, r3, r2
 8008954:	681a      	ldr	r2, [r3, #0]
 8008956:	600a      	str	r2, [r1, #0]
 8008958:	6019      	str	r1, [r3, #0]
 800895a:	4770      	bx	lr

0800895c <__multadd>:
 800895c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800895e:	000e      	movs	r6, r1
 8008960:	9001      	str	r0, [sp, #4]
 8008962:	000c      	movs	r4, r1
 8008964:	001d      	movs	r5, r3
 8008966:	2000      	movs	r0, #0
 8008968:	690f      	ldr	r7, [r1, #16]
 800896a:	3614      	adds	r6, #20
 800896c:	6833      	ldr	r3, [r6, #0]
 800896e:	3001      	adds	r0, #1
 8008970:	b299      	uxth	r1, r3
 8008972:	4351      	muls	r1, r2
 8008974:	0c1b      	lsrs	r3, r3, #16
 8008976:	4353      	muls	r3, r2
 8008978:	1949      	adds	r1, r1, r5
 800897a:	0c0d      	lsrs	r5, r1, #16
 800897c:	195b      	adds	r3, r3, r5
 800897e:	0c1d      	lsrs	r5, r3, #16
 8008980:	b289      	uxth	r1, r1
 8008982:	041b      	lsls	r3, r3, #16
 8008984:	185b      	adds	r3, r3, r1
 8008986:	c608      	stmia	r6!, {r3}
 8008988:	4287      	cmp	r7, r0
 800898a:	dcef      	bgt.n	800896c <__multadd+0x10>
 800898c:	2d00      	cmp	r5, #0
 800898e:	d022      	beq.n	80089d6 <__multadd+0x7a>
 8008990:	68a3      	ldr	r3, [r4, #8]
 8008992:	42bb      	cmp	r3, r7
 8008994:	dc19      	bgt.n	80089ca <__multadd+0x6e>
 8008996:	6861      	ldr	r1, [r4, #4]
 8008998:	9801      	ldr	r0, [sp, #4]
 800899a:	3101      	adds	r1, #1
 800899c:	f7ff ffac 	bl	80088f8 <_Balloc>
 80089a0:	1e06      	subs	r6, r0, #0
 80089a2:	d105      	bne.n	80089b0 <__multadd+0x54>
 80089a4:	0032      	movs	r2, r6
 80089a6:	21ba      	movs	r1, #186	; 0xba
 80089a8:	4b0c      	ldr	r3, [pc, #48]	; (80089dc <__multadd+0x80>)
 80089aa:	480d      	ldr	r0, [pc, #52]	; (80089e0 <__multadd+0x84>)
 80089ac:	f001 ff20 	bl	800a7f0 <__assert_func>
 80089b0:	0021      	movs	r1, r4
 80089b2:	6922      	ldr	r2, [r4, #16]
 80089b4:	310c      	adds	r1, #12
 80089b6:	3202      	adds	r2, #2
 80089b8:	0092      	lsls	r2, r2, #2
 80089ba:	300c      	adds	r0, #12
 80089bc:	f7ff fc42 	bl	8008244 <memcpy>
 80089c0:	0021      	movs	r1, r4
 80089c2:	9801      	ldr	r0, [sp, #4]
 80089c4:	f7ff ffc0 	bl	8008948 <_Bfree>
 80089c8:	0034      	movs	r4, r6
 80089ca:	1d3b      	adds	r3, r7, #4
 80089cc:	009b      	lsls	r3, r3, #2
 80089ce:	18e3      	adds	r3, r4, r3
 80089d0:	605d      	str	r5, [r3, #4]
 80089d2:	1c7b      	adds	r3, r7, #1
 80089d4:	6123      	str	r3, [r4, #16]
 80089d6:	0020      	movs	r0, r4
 80089d8:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 80089da:	46c0      	nop			; (mov r8, r8)
 80089dc:	0800e637 	.word	0x0800e637
 80089e0:	0800e648 	.word	0x0800e648

080089e4 <__hi0bits>:
 80089e4:	0003      	movs	r3, r0
 80089e6:	0c02      	lsrs	r2, r0, #16
 80089e8:	2000      	movs	r0, #0
 80089ea:	4282      	cmp	r2, r0
 80089ec:	d101      	bne.n	80089f2 <__hi0bits+0xe>
 80089ee:	041b      	lsls	r3, r3, #16
 80089f0:	3010      	adds	r0, #16
 80089f2:	0e1a      	lsrs	r2, r3, #24
 80089f4:	d101      	bne.n	80089fa <__hi0bits+0x16>
 80089f6:	3008      	adds	r0, #8
 80089f8:	021b      	lsls	r3, r3, #8
 80089fa:	0f1a      	lsrs	r2, r3, #28
 80089fc:	d101      	bne.n	8008a02 <__hi0bits+0x1e>
 80089fe:	3004      	adds	r0, #4
 8008a00:	011b      	lsls	r3, r3, #4
 8008a02:	0f9a      	lsrs	r2, r3, #30
 8008a04:	d101      	bne.n	8008a0a <__hi0bits+0x26>
 8008a06:	3002      	adds	r0, #2
 8008a08:	009b      	lsls	r3, r3, #2
 8008a0a:	2b00      	cmp	r3, #0
 8008a0c:	db03      	blt.n	8008a16 <__hi0bits+0x32>
 8008a0e:	3001      	adds	r0, #1
 8008a10:	005b      	lsls	r3, r3, #1
 8008a12:	d400      	bmi.n	8008a16 <__hi0bits+0x32>
 8008a14:	2020      	movs	r0, #32
 8008a16:	4770      	bx	lr

08008a18 <__lo0bits>:
 8008a18:	6803      	ldr	r3, [r0, #0]
 8008a1a:	0001      	movs	r1, r0
 8008a1c:	2207      	movs	r2, #7
 8008a1e:	0018      	movs	r0, r3
 8008a20:	4010      	ands	r0, r2
 8008a22:	4213      	tst	r3, r2
 8008a24:	d00d      	beq.n	8008a42 <__lo0bits+0x2a>
 8008a26:	3a06      	subs	r2, #6
 8008a28:	2000      	movs	r0, #0
 8008a2a:	4213      	tst	r3, r2
 8008a2c:	d105      	bne.n	8008a3a <__lo0bits+0x22>
 8008a2e:	3002      	adds	r0, #2
 8008a30:	4203      	tst	r3, r0
 8008a32:	d003      	beq.n	8008a3c <__lo0bits+0x24>
 8008a34:	40d3      	lsrs	r3, r2
 8008a36:	0010      	movs	r0, r2
 8008a38:	600b      	str	r3, [r1, #0]
 8008a3a:	4770      	bx	lr
 8008a3c:	089b      	lsrs	r3, r3, #2
 8008a3e:	600b      	str	r3, [r1, #0]
 8008a40:	e7fb      	b.n	8008a3a <__lo0bits+0x22>
 8008a42:	b29a      	uxth	r2, r3
 8008a44:	2a00      	cmp	r2, #0
 8008a46:	d101      	bne.n	8008a4c <__lo0bits+0x34>
 8008a48:	2010      	movs	r0, #16
 8008a4a:	0c1b      	lsrs	r3, r3, #16
 8008a4c:	b2da      	uxtb	r2, r3
 8008a4e:	2a00      	cmp	r2, #0
 8008a50:	d101      	bne.n	8008a56 <__lo0bits+0x3e>
 8008a52:	3008      	adds	r0, #8
 8008a54:	0a1b      	lsrs	r3, r3, #8
 8008a56:	071a      	lsls	r2, r3, #28
 8008a58:	d101      	bne.n	8008a5e <__lo0bits+0x46>
 8008a5a:	3004      	adds	r0, #4
 8008a5c:	091b      	lsrs	r3, r3, #4
 8008a5e:	079a      	lsls	r2, r3, #30
 8008a60:	d101      	bne.n	8008a66 <__lo0bits+0x4e>
 8008a62:	3002      	adds	r0, #2
 8008a64:	089b      	lsrs	r3, r3, #2
 8008a66:	07da      	lsls	r2, r3, #31
 8008a68:	d4e9      	bmi.n	8008a3e <__lo0bits+0x26>
 8008a6a:	3001      	adds	r0, #1
 8008a6c:	085b      	lsrs	r3, r3, #1
 8008a6e:	d1e6      	bne.n	8008a3e <__lo0bits+0x26>
 8008a70:	2020      	movs	r0, #32
 8008a72:	e7e2      	b.n	8008a3a <__lo0bits+0x22>

08008a74 <__i2b>:
 8008a74:	b510      	push	{r4, lr}
 8008a76:	000c      	movs	r4, r1
 8008a78:	2101      	movs	r1, #1
 8008a7a:	f7ff ff3d 	bl	80088f8 <_Balloc>
 8008a7e:	2800      	cmp	r0, #0
 8008a80:	d107      	bne.n	8008a92 <__i2b+0x1e>
 8008a82:	2146      	movs	r1, #70	; 0x46
 8008a84:	4c05      	ldr	r4, [pc, #20]	; (8008a9c <__i2b+0x28>)
 8008a86:	0002      	movs	r2, r0
 8008a88:	4b05      	ldr	r3, [pc, #20]	; (8008aa0 <__i2b+0x2c>)
 8008a8a:	0020      	movs	r0, r4
 8008a8c:	31ff      	adds	r1, #255	; 0xff
 8008a8e:	f001 feaf 	bl	800a7f0 <__assert_func>
 8008a92:	2301      	movs	r3, #1
 8008a94:	6144      	str	r4, [r0, #20]
 8008a96:	6103      	str	r3, [r0, #16]
 8008a98:	bd10      	pop	{r4, pc}
 8008a9a:	46c0      	nop			; (mov r8, r8)
 8008a9c:	0800e648 	.word	0x0800e648
 8008aa0:	0800e637 	.word	0x0800e637

08008aa4 <__multiply>:
 8008aa4:	b5f0      	push	{r4, r5, r6, r7, lr}
 8008aa6:	0015      	movs	r5, r2
 8008aa8:	690a      	ldr	r2, [r1, #16]
 8008aaa:	692b      	ldr	r3, [r5, #16]
 8008aac:	000c      	movs	r4, r1
 8008aae:	b08b      	sub	sp, #44	; 0x2c
 8008ab0:	429a      	cmp	r2, r3
 8008ab2:	da01      	bge.n	8008ab8 <__multiply+0x14>
 8008ab4:	002c      	movs	r4, r5
 8008ab6:	000d      	movs	r5, r1
 8008ab8:	6927      	ldr	r7, [r4, #16]
 8008aba:	692e      	ldr	r6, [r5, #16]
 8008abc:	6861      	ldr	r1, [r4, #4]
 8008abe:	19bb      	adds	r3, r7, r6
 8008ac0:	9303      	str	r3, [sp, #12]
 8008ac2:	68a3      	ldr	r3, [r4, #8]
 8008ac4:	19ba      	adds	r2, r7, r6
 8008ac6:	4293      	cmp	r3, r2
 8008ac8:	da00      	bge.n	8008acc <__multiply+0x28>
 8008aca:	3101      	adds	r1, #1
 8008acc:	f7ff ff14 	bl	80088f8 <_Balloc>
 8008ad0:	9002      	str	r0, [sp, #8]
 8008ad2:	2800      	cmp	r0, #0
 8008ad4:	d106      	bne.n	8008ae4 <__multiply+0x40>
 8008ad6:	21b1      	movs	r1, #177	; 0xb1
 8008ad8:	4b48      	ldr	r3, [pc, #288]	; (8008bfc <__multiply+0x158>)
 8008ada:	4849      	ldr	r0, [pc, #292]	; (8008c00 <__multiply+0x15c>)
 8008adc:	9a02      	ldr	r2, [sp, #8]
 8008ade:	0049      	lsls	r1, r1, #1
 8008ae0:	f001 fe86 	bl	800a7f0 <__assert_func>
 8008ae4:	9b02      	ldr	r3, [sp, #8]
 8008ae6:	2200      	movs	r2, #0
 8008ae8:	3314      	adds	r3, #20
 8008aea:	469c      	mov	ip, r3
 8008aec:	19bb      	adds	r3, r7, r6
 8008aee:	009b      	lsls	r3, r3, #2
 8008af0:	4463      	add	r3, ip
 8008af2:	9304      	str	r3, [sp, #16]
 8008af4:	4663      	mov	r3, ip
 8008af6:	9904      	ldr	r1, [sp, #16]
 8008af8:	428b      	cmp	r3, r1
 8008afa:	d32a      	bcc.n	8008b52 <__multiply+0xae>
 8008afc:	0023      	movs	r3, r4
 8008afe:	00bf      	lsls	r7, r7, #2
 8008b00:	3314      	adds	r3, #20
 8008b02:	3514      	adds	r5, #20
 8008b04:	9308      	str	r3, [sp, #32]
 8008b06:	00b6      	lsls	r6, r6, #2
 8008b08:	19db      	adds	r3, r3, r7
 8008b0a:	9305      	str	r3, [sp, #20]
 8008b0c:	19ab      	adds	r3, r5, r6
 8008b0e:	9309      	str	r3, [sp, #36]	; 0x24
 8008b10:	2304      	movs	r3, #4
 8008b12:	9306      	str	r3, [sp, #24]
 8008b14:	0023      	movs	r3, r4
 8008b16:	9a05      	ldr	r2, [sp, #20]
 8008b18:	3315      	adds	r3, #21
 8008b1a:	9501      	str	r5, [sp, #4]
 8008b1c:	429a      	cmp	r2, r3
 8008b1e:	d305      	bcc.n	8008b2c <__multiply+0x88>
 8008b20:	1b13      	subs	r3, r2, r4
 8008b22:	3b15      	subs	r3, #21
 8008b24:	089b      	lsrs	r3, r3, #2
 8008b26:	3301      	adds	r3, #1
 8008b28:	009b      	lsls	r3, r3, #2
 8008b2a:	9306      	str	r3, [sp, #24]
 8008b2c:	9b01      	ldr	r3, [sp, #4]
 8008b2e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8008b30:	4293      	cmp	r3, r2
 8008b32:	d310      	bcc.n	8008b56 <__multiply+0xb2>
 8008b34:	9b03      	ldr	r3, [sp, #12]
 8008b36:	2b00      	cmp	r3, #0
 8008b38:	dd05      	ble.n	8008b46 <__multiply+0xa2>
 8008b3a:	9b04      	ldr	r3, [sp, #16]
 8008b3c:	3b04      	subs	r3, #4
 8008b3e:	9304      	str	r3, [sp, #16]
 8008b40:	681b      	ldr	r3, [r3, #0]
 8008b42:	2b00      	cmp	r3, #0
 8008b44:	d056      	beq.n	8008bf4 <__multiply+0x150>
 8008b46:	9b02      	ldr	r3, [sp, #8]
 8008b48:	9a03      	ldr	r2, [sp, #12]
 8008b4a:	0018      	movs	r0, r3
 8008b4c:	611a      	str	r2, [r3, #16]
 8008b4e:	b00b      	add	sp, #44	; 0x2c
 8008b50:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8008b52:	c304      	stmia	r3!, {r2}
 8008b54:	e7cf      	b.n	8008af6 <__multiply+0x52>
 8008b56:	9b01      	ldr	r3, [sp, #4]
 8008b58:	6818      	ldr	r0, [r3, #0]
 8008b5a:	b280      	uxth	r0, r0
 8008b5c:	2800      	cmp	r0, #0
 8008b5e:	d01e      	beq.n	8008b9e <__multiply+0xfa>
 8008b60:	4667      	mov	r7, ip
 8008b62:	2500      	movs	r5, #0
 8008b64:	9e08      	ldr	r6, [sp, #32]
 8008b66:	ce02      	ldmia	r6!, {r1}
 8008b68:	683b      	ldr	r3, [r7, #0]
 8008b6a:	9307      	str	r3, [sp, #28]
 8008b6c:	b28b      	uxth	r3, r1
 8008b6e:	4343      	muls	r3, r0
 8008b70:	001a      	movs	r2, r3
 8008b72:	466b      	mov	r3, sp
 8008b74:	8b9b      	ldrh	r3, [r3, #28]
 8008b76:	18d3      	adds	r3, r2, r3
 8008b78:	195b      	adds	r3, r3, r5
 8008b7a:	0c0d      	lsrs	r5, r1, #16
 8008b7c:	4345      	muls	r5, r0
 8008b7e:	9a07      	ldr	r2, [sp, #28]
 8008b80:	0c11      	lsrs	r1, r2, #16
 8008b82:	1869      	adds	r1, r5, r1
 8008b84:	0c1a      	lsrs	r2, r3, #16
 8008b86:	188a      	adds	r2, r1, r2
 8008b88:	b29b      	uxth	r3, r3
 8008b8a:	0c15      	lsrs	r5, r2, #16
 8008b8c:	0412      	lsls	r2, r2, #16
 8008b8e:	431a      	orrs	r2, r3
 8008b90:	9b05      	ldr	r3, [sp, #20]
 8008b92:	c704      	stmia	r7!, {r2}
 8008b94:	42b3      	cmp	r3, r6
 8008b96:	d8e6      	bhi.n	8008b66 <__multiply+0xc2>
 8008b98:	4663      	mov	r3, ip
 8008b9a:	9a06      	ldr	r2, [sp, #24]
 8008b9c:	509d      	str	r5, [r3, r2]
 8008b9e:	9b01      	ldr	r3, [sp, #4]
 8008ba0:	6818      	ldr	r0, [r3, #0]
 8008ba2:	0c00      	lsrs	r0, r0, #16
 8008ba4:	d020      	beq.n	8008be8 <__multiply+0x144>
 8008ba6:	4663      	mov	r3, ip
 8008ba8:	0025      	movs	r5, r4
 8008baa:	4661      	mov	r1, ip
 8008bac:	2700      	movs	r7, #0
 8008bae:	681b      	ldr	r3, [r3, #0]
 8008bb0:	3514      	adds	r5, #20
 8008bb2:	682a      	ldr	r2, [r5, #0]
 8008bb4:	680e      	ldr	r6, [r1, #0]
 8008bb6:	b292      	uxth	r2, r2
 8008bb8:	4342      	muls	r2, r0
 8008bba:	0c36      	lsrs	r6, r6, #16
 8008bbc:	1992      	adds	r2, r2, r6
 8008bbe:	19d2      	adds	r2, r2, r7
 8008bc0:	0416      	lsls	r6, r2, #16
 8008bc2:	b29b      	uxth	r3, r3
 8008bc4:	431e      	orrs	r6, r3
 8008bc6:	600e      	str	r6, [r1, #0]
 8008bc8:	cd40      	ldmia	r5!, {r6}
 8008bca:	684b      	ldr	r3, [r1, #4]
 8008bcc:	0c36      	lsrs	r6, r6, #16
 8008bce:	4346      	muls	r6, r0
 8008bd0:	b29b      	uxth	r3, r3
 8008bd2:	0c12      	lsrs	r2, r2, #16
 8008bd4:	18f3      	adds	r3, r6, r3
 8008bd6:	189b      	adds	r3, r3, r2
 8008bd8:	9a05      	ldr	r2, [sp, #20]
 8008bda:	0c1f      	lsrs	r7, r3, #16
 8008bdc:	3104      	adds	r1, #4
 8008bde:	42aa      	cmp	r2, r5
 8008be0:	d8e7      	bhi.n	8008bb2 <__multiply+0x10e>
 8008be2:	4662      	mov	r2, ip
 8008be4:	9906      	ldr	r1, [sp, #24]
 8008be6:	5053      	str	r3, [r2, r1]
 8008be8:	9b01      	ldr	r3, [sp, #4]
 8008bea:	3304      	adds	r3, #4
 8008bec:	9301      	str	r3, [sp, #4]
 8008bee:	2304      	movs	r3, #4
 8008bf0:	449c      	add	ip, r3
 8008bf2:	e79b      	b.n	8008b2c <__multiply+0x88>
 8008bf4:	9b03      	ldr	r3, [sp, #12]
 8008bf6:	3b01      	subs	r3, #1
 8008bf8:	9303      	str	r3, [sp, #12]
 8008bfa:	e79b      	b.n	8008b34 <__multiply+0x90>
 8008bfc:	0800e637 	.word	0x0800e637
 8008c00:	0800e648 	.word	0x0800e648

08008c04 <__pow5mult>:
 8008c04:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8008c06:	2303      	movs	r3, #3
 8008c08:	0015      	movs	r5, r2
 8008c0a:	0007      	movs	r7, r0
 8008c0c:	000e      	movs	r6, r1
 8008c0e:	401a      	ands	r2, r3
 8008c10:	421d      	tst	r5, r3
 8008c12:	d008      	beq.n	8008c26 <__pow5mult+0x22>
 8008c14:	491a      	ldr	r1, [pc, #104]	; (8008c80 <__pow5mult+0x7c>)
 8008c16:	3a01      	subs	r2, #1
 8008c18:	0092      	lsls	r2, r2, #2
 8008c1a:	5852      	ldr	r2, [r2, r1]
 8008c1c:	2300      	movs	r3, #0
 8008c1e:	0031      	movs	r1, r6
 8008c20:	f7ff fe9c 	bl	800895c <__multadd>
 8008c24:	0006      	movs	r6, r0
 8008c26:	10ad      	asrs	r5, r5, #2
 8008c28:	d027      	beq.n	8008c7a <__pow5mult+0x76>
 8008c2a:	6c3c      	ldr	r4, [r7, #64]	; 0x40
 8008c2c:	2c00      	cmp	r4, #0
 8008c2e:	d107      	bne.n	8008c40 <__pow5mult+0x3c>
 8008c30:	0038      	movs	r0, r7
 8008c32:	4914      	ldr	r1, [pc, #80]	; (8008c84 <__pow5mult+0x80>)
 8008c34:	f7ff ff1e 	bl	8008a74 <__i2b>
 8008c38:	2300      	movs	r3, #0
 8008c3a:	0004      	movs	r4, r0
 8008c3c:	6438      	str	r0, [r7, #64]	; 0x40
 8008c3e:	6003      	str	r3, [r0, #0]
 8008c40:	2301      	movs	r3, #1
 8008c42:	421d      	tst	r5, r3
 8008c44:	d00a      	beq.n	8008c5c <__pow5mult+0x58>
 8008c46:	0031      	movs	r1, r6
 8008c48:	0022      	movs	r2, r4
 8008c4a:	0038      	movs	r0, r7
 8008c4c:	f7ff ff2a 	bl	8008aa4 <__multiply>
 8008c50:	0031      	movs	r1, r6
 8008c52:	9001      	str	r0, [sp, #4]
 8008c54:	0038      	movs	r0, r7
 8008c56:	f7ff fe77 	bl	8008948 <_Bfree>
 8008c5a:	9e01      	ldr	r6, [sp, #4]
 8008c5c:	106d      	asrs	r5, r5, #1
 8008c5e:	d00c      	beq.n	8008c7a <__pow5mult+0x76>
 8008c60:	6820      	ldr	r0, [r4, #0]
 8008c62:	2800      	cmp	r0, #0
 8008c64:	d107      	bne.n	8008c76 <__pow5mult+0x72>
 8008c66:	0022      	movs	r2, r4
 8008c68:	0021      	movs	r1, r4
 8008c6a:	0038      	movs	r0, r7
 8008c6c:	f7ff ff1a 	bl	8008aa4 <__multiply>
 8008c70:	2300      	movs	r3, #0
 8008c72:	6020      	str	r0, [r4, #0]
 8008c74:	6003      	str	r3, [r0, #0]
 8008c76:	0004      	movs	r4, r0
 8008c78:	e7e2      	b.n	8008c40 <__pow5mult+0x3c>
 8008c7a:	0030      	movs	r0, r6
 8008c7c:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8008c7e:	46c0      	nop			; (mov r8, r8)
 8008c80:	0800e798 	.word	0x0800e798
 8008c84:	00000271 	.word	0x00000271

08008c88 <__lshift>:
 8008c88:	b5f0      	push	{r4, r5, r6, r7, lr}
 8008c8a:	000c      	movs	r4, r1
 8008c8c:	0017      	movs	r7, r2
 8008c8e:	6923      	ldr	r3, [r4, #16]
 8008c90:	1155      	asrs	r5, r2, #5
 8008c92:	b087      	sub	sp, #28
 8008c94:	18eb      	adds	r3, r5, r3
 8008c96:	9302      	str	r3, [sp, #8]
 8008c98:	3301      	adds	r3, #1
 8008c9a:	9301      	str	r3, [sp, #4]
 8008c9c:	6849      	ldr	r1, [r1, #4]
 8008c9e:	68a3      	ldr	r3, [r4, #8]
 8008ca0:	9004      	str	r0, [sp, #16]
 8008ca2:	9a01      	ldr	r2, [sp, #4]
 8008ca4:	4293      	cmp	r3, r2
 8008ca6:	db10      	blt.n	8008cca <__lshift+0x42>
 8008ca8:	9804      	ldr	r0, [sp, #16]
 8008caa:	f7ff fe25 	bl	80088f8 <_Balloc>
 8008cae:	2300      	movs	r3, #0
 8008cb0:	0002      	movs	r2, r0
 8008cb2:	0006      	movs	r6, r0
 8008cb4:	0019      	movs	r1, r3
 8008cb6:	3214      	adds	r2, #20
 8008cb8:	4298      	cmp	r0, r3
 8008cba:	d10c      	bne.n	8008cd6 <__lshift+0x4e>
 8008cbc:	31df      	adds	r1, #223	; 0xdf
 8008cbe:	0032      	movs	r2, r6
 8008cc0:	4b26      	ldr	r3, [pc, #152]	; (8008d5c <__lshift+0xd4>)
 8008cc2:	4827      	ldr	r0, [pc, #156]	; (8008d60 <__lshift+0xd8>)
 8008cc4:	31ff      	adds	r1, #255	; 0xff
 8008cc6:	f001 fd93 	bl	800a7f0 <__assert_func>
 8008cca:	3101      	adds	r1, #1
 8008ccc:	005b      	lsls	r3, r3, #1
 8008cce:	e7e8      	b.n	8008ca2 <__lshift+0x1a>
 8008cd0:	0098      	lsls	r0, r3, #2
 8008cd2:	5011      	str	r1, [r2, r0]
 8008cd4:	3301      	adds	r3, #1
 8008cd6:	42ab      	cmp	r3, r5
 8008cd8:	dbfa      	blt.n	8008cd0 <__lshift+0x48>
 8008cda:	43eb      	mvns	r3, r5
 8008cdc:	17db      	asrs	r3, r3, #31
 8008cde:	401d      	ands	r5, r3
 8008ce0:	211f      	movs	r1, #31
 8008ce2:	0023      	movs	r3, r4
 8008ce4:	0038      	movs	r0, r7
 8008ce6:	00ad      	lsls	r5, r5, #2
 8008ce8:	1955      	adds	r5, r2, r5
 8008cea:	6922      	ldr	r2, [r4, #16]
 8008cec:	3314      	adds	r3, #20
 8008cee:	0092      	lsls	r2, r2, #2
 8008cf0:	4008      	ands	r0, r1
 8008cf2:	4684      	mov	ip, r0
 8008cf4:	189a      	adds	r2, r3, r2
 8008cf6:	420f      	tst	r7, r1
 8008cf8:	d02a      	beq.n	8008d50 <__lshift+0xc8>
 8008cfa:	3101      	adds	r1, #1
 8008cfc:	1a09      	subs	r1, r1, r0
 8008cfe:	9105      	str	r1, [sp, #20]
 8008d00:	2100      	movs	r1, #0
 8008d02:	9503      	str	r5, [sp, #12]
 8008d04:	4667      	mov	r7, ip
 8008d06:	6818      	ldr	r0, [r3, #0]
 8008d08:	40b8      	lsls	r0, r7
 8008d0a:	4308      	orrs	r0, r1
 8008d0c:	9903      	ldr	r1, [sp, #12]
 8008d0e:	c101      	stmia	r1!, {r0}
 8008d10:	9103      	str	r1, [sp, #12]
 8008d12:	9805      	ldr	r0, [sp, #20]
 8008d14:	cb02      	ldmia	r3!, {r1}
 8008d16:	40c1      	lsrs	r1, r0
 8008d18:	429a      	cmp	r2, r3
 8008d1a:	d8f3      	bhi.n	8008d04 <__lshift+0x7c>
 8008d1c:	0020      	movs	r0, r4
 8008d1e:	3015      	adds	r0, #21
 8008d20:	2304      	movs	r3, #4
 8008d22:	4282      	cmp	r2, r0
 8008d24:	d304      	bcc.n	8008d30 <__lshift+0xa8>
 8008d26:	1b13      	subs	r3, r2, r4
 8008d28:	3b15      	subs	r3, #21
 8008d2a:	089b      	lsrs	r3, r3, #2
 8008d2c:	3301      	adds	r3, #1
 8008d2e:	009b      	lsls	r3, r3, #2
 8008d30:	50e9      	str	r1, [r5, r3]
 8008d32:	2900      	cmp	r1, #0
 8008d34:	d002      	beq.n	8008d3c <__lshift+0xb4>
 8008d36:	9b02      	ldr	r3, [sp, #8]
 8008d38:	3302      	adds	r3, #2
 8008d3a:	9301      	str	r3, [sp, #4]
 8008d3c:	9b01      	ldr	r3, [sp, #4]
 8008d3e:	9804      	ldr	r0, [sp, #16]
 8008d40:	3b01      	subs	r3, #1
 8008d42:	0021      	movs	r1, r4
 8008d44:	6133      	str	r3, [r6, #16]
 8008d46:	f7ff fdff 	bl	8008948 <_Bfree>
 8008d4a:	0030      	movs	r0, r6
 8008d4c:	b007      	add	sp, #28
 8008d4e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8008d50:	cb02      	ldmia	r3!, {r1}
 8008d52:	c502      	stmia	r5!, {r1}
 8008d54:	429a      	cmp	r2, r3
 8008d56:	d8fb      	bhi.n	8008d50 <__lshift+0xc8>
 8008d58:	e7f0      	b.n	8008d3c <__lshift+0xb4>
 8008d5a:	46c0      	nop			; (mov r8, r8)
 8008d5c:	0800e637 	.word	0x0800e637
 8008d60:	0800e648 	.word	0x0800e648

08008d64 <__mcmp>:
 8008d64:	b530      	push	{r4, r5, lr}
 8008d66:	690b      	ldr	r3, [r1, #16]
 8008d68:	6904      	ldr	r4, [r0, #16]
 8008d6a:	0002      	movs	r2, r0
 8008d6c:	1ae0      	subs	r0, r4, r3
 8008d6e:	429c      	cmp	r4, r3
 8008d70:	d10e      	bne.n	8008d90 <__mcmp+0x2c>
 8008d72:	3214      	adds	r2, #20
 8008d74:	009b      	lsls	r3, r3, #2
 8008d76:	3114      	adds	r1, #20
 8008d78:	0014      	movs	r4, r2
 8008d7a:	18c9      	adds	r1, r1, r3
 8008d7c:	18d2      	adds	r2, r2, r3
 8008d7e:	3a04      	subs	r2, #4
 8008d80:	3904      	subs	r1, #4
 8008d82:	6815      	ldr	r5, [r2, #0]
 8008d84:	680b      	ldr	r3, [r1, #0]
 8008d86:	429d      	cmp	r5, r3
 8008d88:	d003      	beq.n	8008d92 <__mcmp+0x2e>
 8008d8a:	2001      	movs	r0, #1
 8008d8c:	429d      	cmp	r5, r3
 8008d8e:	d303      	bcc.n	8008d98 <__mcmp+0x34>
 8008d90:	bd30      	pop	{r4, r5, pc}
 8008d92:	4294      	cmp	r4, r2
 8008d94:	d3f3      	bcc.n	8008d7e <__mcmp+0x1a>
 8008d96:	e7fb      	b.n	8008d90 <__mcmp+0x2c>
 8008d98:	4240      	negs	r0, r0
 8008d9a:	e7f9      	b.n	8008d90 <__mcmp+0x2c>

08008d9c <__mdiff>:
 8008d9c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8008d9e:	000e      	movs	r6, r1
 8008da0:	0007      	movs	r7, r0
 8008da2:	0011      	movs	r1, r2
 8008da4:	0030      	movs	r0, r6
 8008da6:	b087      	sub	sp, #28
 8008da8:	0014      	movs	r4, r2
 8008daa:	f7ff ffdb 	bl	8008d64 <__mcmp>
 8008dae:	1e05      	subs	r5, r0, #0
 8008db0:	d110      	bne.n	8008dd4 <__mdiff+0x38>
 8008db2:	0001      	movs	r1, r0
 8008db4:	0038      	movs	r0, r7
 8008db6:	f7ff fd9f 	bl	80088f8 <_Balloc>
 8008dba:	1e02      	subs	r2, r0, #0
 8008dbc:	d104      	bne.n	8008dc8 <__mdiff+0x2c>
 8008dbe:	4b3f      	ldr	r3, [pc, #252]	; (8008ebc <__mdiff+0x120>)
 8008dc0:	483f      	ldr	r0, [pc, #252]	; (8008ec0 <__mdiff+0x124>)
 8008dc2:	4940      	ldr	r1, [pc, #256]	; (8008ec4 <__mdiff+0x128>)
 8008dc4:	f001 fd14 	bl	800a7f0 <__assert_func>
 8008dc8:	2301      	movs	r3, #1
 8008dca:	6145      	str	r5, [r0, #20]
 8008dcc:	6103      	str	r3, [r0, #16]
 8008dce:	0010      	movs	r0, r2
 8008dd0:	b007      	add	sp, #28
 8008dd2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8008dd4:	2301      	movs	r3, #1
 8008dd6:	9301      	str	r3, [sp, #4]
 8008dd8:	2800      	cmp	r0, #0
 8008dda:	db04      	blt.n	8008de6 <__mdiff+0x4a>
 8008ddc:	0023      	movs	r3, r4
 8008dde:	0034      	movs	r4, r6
 8008de0:	001e      	movs	r6, r3
 8008de2:	2300      	movs	r3, #0
 8008de4:	9301      	str	r3, [sp, #4]
 8008de6:	0038      	movs	r0, r7
 8008de8:	6861      	ldr	r1, [r4, #4]
 8008dea:	f7ff fd85 	bl	80088f8 <_Balloc>
 8008dee:	1e02      	subs	r2, r0, #0
 8008df0:	d103      	bne.n	8008dfa <__mdiff+0x5e>
 8008df2:	4b32      	ldr	r3, [pc, #200]	; (8008ebc <__mdiff+0x120>)
 8008df4:	4832      	ldr	r0, [pc, #200]	; (8008ec0 <__mdiff+0x124>)
 8008df6:	4934      	ldr	r1, [pc, #208]	; (8008ec8 <__mdiff+0x12c>)
 8008df8:	e7e4      	b.n	8008dc4 <__mdiff+0x28>
 8008dfa:	9b01      	ldr	r3, [sp, #4]
 8008dfc:	2700      	movs	r7, #0
 8008dfe:	60c3      	str	r3, [r0, #12]
 8008e00:	6920      	ldr	r0, [r4, #16]
 8008e02:	3414      	adds	r4, #20
 8008e04:	0083      	lsls	r3, r0, #2
 8008e06:	18e3      	adds	r3, r4, r3
 8008e08:	0021      	movs	r1, r4
 8008e0a:	9401      	str	r4, [sp, #4]
 8008e0c:	0034      	movs	r4, r6
 8008e0e:	9302      	str	r3, [sp, #8]
 8008e10:	6933      	ldr	r3, [r6, #16]
 8008e12:	3414      	adds	r4, #20
 8008e14:	009b      	lsls	r3, r3, #2
 8008e16:	18e3      	adds	r3, r4, r3
 8008e18:	9303      	str	r3, [sp, #12]
 8008e1a:	0013      	movs	r3, r2
 8008e1c:	3314      	adds	r3, #20
 8008e1e:	469c      	mov	ip, r3
 8008e20:	9305      	str	r3, [sp, #20]
 8008e22:	9104      	str	r1, [sp, #16]
 8008e24:	9b04      	ldr	r3, [sp, #16]
 8008e26:	cc02      	ldmia	r4!, {r1}
 8008e28:	cb20      	ldmia	r3!, {r5}
 8008e2a:	9304      	str	r3, [sp, #16]
 8008e2c:	b2ab      	uxth	r3, r5
 8008e2e:	19df      	adds	r7, r3, r7
 8008e30:	b28b      	uxth	r3, r1
 8008e32:	1afb      	subs	r3, r7, r3
 8008e34:	0c09      	lsrs	r1, r1, #16
 8008e36:	0c2d      	lsrs	r5, r5, #16
 8008e38:	1a6d      	subs	r5, r5, r1
 8008e3a:	1419      	asrs	r1, r3, #16
 8008e3c:	1869      	adds	r1, r5, r1
 8008e3e:	b29b      	uxth	r3, r3
 8008e40:	140f      	asrs	r7, r1, #16
 8008e42:	0409      	lsls	r1, r1, #16
 8008e44:	4319      	orrs	r1, r3
 8008e46:	4663      	mov	r3, ip
 8008e48:	c302      	stmia	r3!, {r1}
 8008e4a:	469c      	mov	ip, r3
 8008e4c:	9b03      	ldr	r3, [sp, #12]
 8008e4e:	42a3      	cmp	r3, r4
 8008e50:	d8e8      	bhi.n	8008e24 <__mdiff+0x88>
 8008e52:	0031      	movs	r1, r6
 8008e54:	9c03      	ldr	r4, [sp, #12]
 8008e56:	3115      	adds	r1, #21
 8008e58:	2304      	movs	r3, #4
 8008e5a:	428c      	cmp	r4, r1
 8008e5c:	d304      	bcc.n	8008e68 <__mdiff+0xcc>
 8008e5e:	1ba3      	subs	r3, r4, r6
 8008e60:	3b15      	subs	r3, #21
 8008e62:	089b      	lsrs	r3, r3, #2
 8008e64:	3301      	adds	r3, #1
 8008e66:	009b      	lsls	r3, r3, #2
 8008e68:	9901      	ldr	r1, [sp, #4]
 8008e6a:	18cd      	adds	r5, r1, r3
 8008e6c:	9905      	ldr	r1, [sp, #20]
 8008e6e:	002e      	movs	r6, r5
 8008e70:	18cb      	adds	r3, r1, r3
 8008e72:	469c      	mov	ip, r3
 8008e74:	9902      	ldr	r1, [sp, #8]
 8008e76:	428e      	cmp	r6, r1
 8008e78:	d310      	bcc.n	8008e9c <__mdiff+0x100>
 8008e7a:	9e02      	ldr	r6, [sp, #8]
 8008e7c:	1ee9      	subs	r1, r5, #3
 8008e7e:	2400      	movs	r4, #0
 8008e80:	428e      	cmp	r6, r1
 8008e82:	d304      	bcc.n	8008e8e <__mdiff+0xf2>
 8008e84:	0031      	movs	r1, r6
 8008e86:	3103      	adds	r1, #3
 8008e88:	1b49      	subs	r1, r1, r5
 8008e8a:	0889      	lsrs	r1, r1, #2
 8008e8c:	008c      	lsls	r4, r1, #2
 8008e8e:	191b      	adds	r3, r3, r4
 8008e90:	3b04      	subs	r3, #4
 8008e92:	6819      	ldr	r1, [r3, #0]
 8008e94:	2900      	cmp	r1, #0
 8008e96:	d00f      	beq.n	8008eb8 <__mdiff+0x11c>
 8008e98:	6110      	str	r0, [r2, #16]
 8008e9a:	e798      	b.n	8008dce <__mdiff+0x32>
 8008e9c:	ce02      	ldmia	r6!, {r1}
 8008e9e:	b28c      	uxth	r4, r1
 8008ea0:	19e4      	adds	r4, r4, r7
 8008ea2:	0c0f      	lsrs	r7, r1, #16
 8008ea4:	1421      	asrs	r1, r4, #16
 8008ea6:	1879      	adds	r1, r7, r1
 8008ea8:	b2a4      	uxth	r4, r4
 8008eaa:	140f      	asrs	r7, r1, #16
 8008eac:	0409      	lsls	r1, r1, #16
 8008eae:	4321      	orrs	r1, r4
 8008eb0:	4664      	mov	r4, ip
 8008eb2:	c402      	stmia	r4!, {r1}
 8008eb4:	46a4      	mov	ip, r4
 8008eb6:	e7dd      	b.n	8008e74 <__mdiff+0xd8>
 8008eb8:	3801      	subs	r0, #1
 8008eba:	e7e9      	b.n	8008e90 <__mdiff+0xf4>
 8008ebc:	0800e637 	.word	0x0800e637
 8008ec0:	0800e648 	.word	0x0800e648
 8008ec4:	00000237 	.word	0x00000237
 8008ec8:	00000245 	.word	0x00000245

08008ecc <__d2b>:
 8008ecc:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8008ece:	2101      	movs	r1, #1
 8008ed0:	0014      	movs	r4, r2
 8008ed2:	001d      	movs	r5, r3
 8008ed4:	9f08      	ldr	r7, [sp, #32]
 8008ed6:	f7ff fd0f 	bl	80088f8 <_Balloc>
 8008eda:	1e06      	subs	r6, r0, #0
 8008edc:	d105      	bne.n	8008eea <__d2b+0x1e>
 8008ede:	0032      	movs	r2, r6
 8008ee0:	4b24      	ldr	r3, [pc, #144]	; (8008f74 <__d2b+0xa8>)
 8008ee2:	4825      	ldr	r0, [pc, #148]	; (8008f78 <__d2b+0xac>)
 8008ee4:	4925      	ldr	r1, [pc, #148]	; (8008f7c <__d2b+0xb0>)
 8008ee6:	f001 fc83 	bl	800a7f0 <__assert_func>
 8008eea:	032b      	lsls	r3, r5, #12
 8008eec:	006d      	lsls	r5, r5, #1
 8008eee:	0b1b      	lsrs	r3, r3, #12
 8008ef0:	0d6d      	lsrs	r5, r5, #21
 8008ef2:	d125      	bne.n	8008f40 <__d2b+0x74>
 8008ef4:	9301      	str	r3, [sp, #4]
 8008ef6:	2c00      	cmp	r4, #0
 8008ef8:	d028      	beq.n	8008f4c <__d2b+0x80>
 8008efa:	4668      	mov	r0, sp
 8008efc:	9400      	str	r4, [sp, #0]
 8008efe:	f7ff fd8b 	bl	8008a18 <__lo0bits>
 8008f02:	9b01      	ldr	r3, [sp, #4]
 8008f04:	9900      	ldr	r1, [sp, #0]
 8008f06:	2800      	cmp	r0, #0
 8008f08:	d01e      	beq.n	8008f48 <__d2b+0x7c>
 8008f0a:	2220      	movs	r2, #32
 8008f0c:	001c      	movs	r4, r3
 8008f0e:	1a12      	subs	r2, r2, r0
 8008f10:	4094      	lsls	r4, r2
 8008f12:	0022      	movs	r2, r4
 8008f14:	40c3      	lsrs	r3, r0
 8008f16:	430a      	orrs	r2, r1
 8008f18:	6172      	str	r2, [r6, #20]
 8008f1a:	9301      	str	r3, [sp, #4]
 8008f1c:	9c01      	ldr	r4, [sp, #4]
 8008f1e:	61b4      	str	r4, [r6, #24]
 8008f20:	1e63      	subs	r3, r4, #1
 8008f22:	419c      	sbcs	r4, r3
 8008f24:	3401      	adds	r4, #1
 8008f26:	6134      	str	r4, [r6, #16]
 8008f28:	2d00      	cmp	r5, #0
 8008f2a:	d017      	beq.n	8008f5c <__d2b+0x90>
 8008f2c:	2435      	movs	r4, #53	; 0x35
 8008f2e:	4b14      	ldr	r3, [pc, #80]	; (8008f80 <__d2b+0xb4>)
 8008f30:	18ed      	adds	r5, r5, r3
 8008f32:	182d      	adds	r5, r5, r0
 8008f34:	603d      	str	r5, [r7, #0]
 8008f36:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008f38:	1a24      	subs	r4, r4, r0
 8008f3a:	601c      	str	r4, [r3, #0]
 8008f3c:	0030      	movs	r0, r6
 8008f3e:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8008f40:	2280      	movs	r2, #128	; 0x80
 8008f42:	0352      	lsls	r2, r2, #13
 8008f44:	4313      	orrs	r3, r2
 8008f46:	e7d5      	b.n	8008ef4 <__d2b+0x28>
 8008f48:	6171      	str	r1, [r6, #20]
 8008f4a:	e7e7      	b.n	8008f1c <__d2b+0x50>
 8008f4c:	a801      	add	r0, sp, #4
 8008f4e:	f7ff fd63 	bl	8008a18 <__lo0bits>
 8008f52:	9b01      	ldr	r3, [sp, #4]
 8008f54:	2401      	movs	r4, #1
 8008f56:	6173      	str	r3, [r6, #20]
 8008f58:	3020      	adds	r0, #32
 8008f5a:	e7e4      	b.n	8008f26 <__d2b+0x5a>
 8008f5c:	4b09      	ldr	r3, [pc, #36]	; (8008f84 <__d2b+0xb8>)
 8008f5e:	18c0      	adds	r0, r0, r3
 8008f60:	4b09      	ldr	r3, [pc, #36]	; (8008f88 <__d2b+0xbc>)
 8008f62:	6038      	str	r0, [r7, #0]
 8008f64:	18e3      	adds	r3, r4, r3
 8008f66:	009b      	lsls	r3, r3, #2
 8008f68:	18f3      	adds	r3, r6, r3
 8008f6a:	6958      	ldr	r0, [r3, #20]
 8008f6c:	f7ff fd3a 	bl	80089e4 <__hi0bits>
 8008f70:	0164      	lsls	r4, r4, #5
 8008f72:	e7e0      	b.n	8008f36 <__d2b+0x6a>
 8008f74:	0800e637 	.word	0x0800e637
 8008f78:	0800e648 	.word	0x0800e648
 8008f7c:	0000030f 	.word	0x0000030f
 8008f80:	fffffbcd 	.word	0xfffffbcd
 8008f84:	fffffbce 	.word	0xfffffbce
 8008f88:	3fffffff 	.word	0x3fffffff

08008f8c <__ascii_wctomb>:
 8008f8c:	0003      	movs	r3, r0
 8008f8e:	1e08      	subs	r0, r1, #0
 8008f90:	d005      	beq.n	8008f9e <__ascii_wctomb+0x12>
 8008f92:	2aff      	cmp	r2, #255	; 0xff
 8008f94:	d904      	bls.n	8008fa0 <__ascii_wctomb+0x14>
 8008f96:	228a      	movs	r2, #138	; 0x8a
 8008f98:	2001      	movs	r0, #1
 8008f9a:	601a      	str	r2, [r3, #0]
 8008f9c:	4240      	negs	r0, r0
 8008f9e:	4770      	bx	lr
 8008fa0:	2001      	movs	r0, #1
 8008fa2:	700a      	strb	r2, [r1, #0]
 8008fa4:	e7fb      	b.n	8008f9e <__ascii_wctomb+0x12>
	...

08008fa8 <_svfprintf_r>:
 8008fa8:	b5f0      	push	{r4, r5, r6, r7, lr}
 8008faa:	b0d9      	sub	sp, #356	; 0x164
 8008fac:	001c      	movs	r4, r3
 8008fae:	910b      	str	r1, [sp, #44]	; 0x2c
 8008fb0:	9208      	str	r2, [sp, #32]
 8008fb2:	900a      	str	r0, [sp, #40]	; 0x28
 8008fb4:	f001 fb6a 	bl	800a68c <_localeconv_r>
 8008fb8:	6803      	ldr	r3, [r0, #0]
 8008fba:	0018      	movs	r0, r3
 8008fbc:	931c      	str	r3, [sp, #112]	; 0x70
 8008fbe:	f7f7 f8a1 	bl	8000104 <strlen>
 8008fc2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8008fc4:	9016      	str	r0, [sp, #88]	; 0x58
 8008fc6:	899b      	ldrh	r3, [r3, #12]
 8008fc8:	061b      	lsls	r3, r3, #24
 8008fca:	d517      	bpl.n	8008ffc <_svfprintf_r+0x54>
 8008fcc:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8008fce:	691b      	ldr	r3, [r3, #16]
 8008fd0:	2b00      	cmp	r3, #0
 8008fd2:	d113      	bne.n	8008ffc <_svfprintf_r+0x54>
 8008fd4:	2140      	movs	r1, #64	; 0x40
 8008fd6:	980a      	ldr	r0, [sp, #40]	; 0x28
 8008fd8:	f7ff fa58 	bl	800848c <_malloc_r>
 8008fdc:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8008fde:	6018      	str	r0, [r3, #0]
 8008fe0:	6118      	str	r0, [r3, #16]
 8008fe2:	2800      	cmp	r0, #0
 8008fe4:	d107      	bne.n	8008ff6 <_svfprintf_r+0x4e>
 8008fe6:	230c      	movs	r3, #12
 8008fe8:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8008fea:	6013      	str	r3, [r2, #0]
 8008fec:	3b0d      	subs	r3, #13
 8008fee:	9317      	str	r3, [sp, #92]	; 0x5c
 8008ff0:	9817      	ldr	r0, [sp, #92]	; 0x5c
 8008ff2:	b059      	add	sp, #356	; 0x164
 8008ff4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8008ff6:	2340      	movs	r3, #64	; 0x40
 8008ff8:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8008ffa:	6153      	str	r3, [r2, #20]
 8008ffc:	2300      	movs	r3, #0
 8008ffe:	2200      	movs	r2, #0
 8009000:	932e      	str	r3, [sp, #184]	; 0xb8
 8009002:	932d      	str	r3, [sp, #180]	; 0xb4
 8009004:	930e      	str	r3, [sp, #56]	; 0x38
 8009006:	2300      	movs	r3, #0
 8009008:	9214      	str	r2, [sp, #80]	; 0x50
 800900a:	9315      	str	r3, [sp, #84]	; 0x54
 800900c:	2300      	movs	r3, #0
 800900e:	af2f      	add	r7, sp, #188	; 0xbc
 8009010:	972c      	str	r7, [sp, #176]	; 0xb0
 8009012:	931f      	str	r3, [sp, #124]	; 0x7c
 8009014:	931e      	str	r3, [sp, #120]	; 0x78
 8009016:	9312      	str	r3, [sp, #72]	; 0x48
 8009018:	931b      	str	r3, [sp, #108]	; 0x6c
 800901a:	931d      	str	r3, [sp, #116]	; 0x74
 800901c:	9317      	str	r3, [sp, #92]	; 0x5c
 800901e:	9d08      	ldr	r5, [sp, #32]
 8009020:	782b      	ldrb	r3, [r5, #0]
 8009022:	2b00      	cmp	r3, #0
 8009024:	d002      	beq.n	800902c <_svfprintf_r+0x84>
 8009026:	2b25      	cmp	r3, #37	; 0x25
 8009028:	d000      	beq.n	800902c <_svfprintf_r+0x84>
 800902a:	e091      	b.n	8009150 <_svfprintf_r+0x1a8>
 800902c:	9b08      	ldr	r3, [sp, #32]
 800902e:	1aee      	subs	r6, r5, r3
 8009030:	429d      	cmp	r5, r3
 8009032:	d016      	beq.n	8009062 <_svfprintf_r+0xba>
 8009034:	603b      	str	r3, [r7, #0]
 8009036:	9b2e      	ldr	r3, [sp, #184]	; 0xb8
 8009038:	607e      	str	r6, [r7, #4]
 800903a:	199b      	adds	r3, r3, r6
 800903c:	932e      	str	r3, [sp, #184]	; 0xb8
 800903e:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
 8009040:	3708      	adds	r7, #8
 8009042:	3301      	adds	r3, #1
 8009044:	932d      	str	r3, [sp, #180]	; 0xb4
 8009046:	2b07      	cmp	r3, #7
 8009048:	dd08      	ble.n	800905c <_svfprintf_r+0xb4>
 800904a:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800904c:	980a      	ldr	r0, [sp, #40]	; 0x28
 800904e:	aa2c      	add	r2, sp, #176	; 0xb0
 8009050:	f002 face 	bl	800b5f0 <__ssprint_r>
 8009054:	2800      	cmp	r0, #0
 8009056:	d000      	beq.n	800905a <_svfprintf_r+0xb2>
 8009058:	e1cf      	b.n	80093fa <_svfprintf_r+0x452>
 800905a:	af2f      	add	r7, sp, #188	; 0xbc
 800905c:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800905e:	199b      	adds	r3, r3, r6
 8009060:	9317      	str	r3, [sp, #92]	; 0x5c
 8009062:	782b      	ldrb	r3, [r5, #0]
 8009064:	2b00      	cmp	r3, #0
 8009066:	d101      	bne.n	800906c <_svfprintf_r+0xc4>
 8009068:	f001 f99e 	bl	800a3a8 <_svfprintf_r+0x1400>
 800906c:	221b      	movs	r2, #27
 800906e:	2300      	movs	r3, #0
 8009070:	a91e      	add	r1, sp, #120	; 0x78
 8009072:	1852      	adds	r2, r2, r1
 8009074:	7013      	strb	r3, [r2, #0]
 8009076:	2201      	movs	r2, #1
 8009078:	001e      	movs	r6, r3
 800907a:	4252      	negs	r2, r2
 800907c:	3501      	adds	r5, #1
 800907e:	9209      	str	r2, [sp, #36]	; 0x24
 8009080:	9318      	str	r3, [sp, #96]	; 0x60
 8009082:	1c6b      	adds	r3, r5, #1
 8009084:	9313      	str	r3, [sp, #76]	; 0x4c
 8009086:	782b      	ldrb	r3, [r5, #0]
 8009088:	930f      	str	r3, [sp, #60]	; 0x3c
 800908a:	980f      	ldr	r0, [sp, #60]	; 0x3c
 800908c:	3820      	subs	r0, #32
 800908e:	285a      	cmp	r0, #90	; 0x5a
 8009090:	d901      	bls.n	8009096 <_svfprintf_r+0xee>
 8009092:	f000 fe20 	bl	8009cd6 <_svfprintf_r+0xd2e>
 8009096:	f7f7 f847 	bl	8000128 <__gnu_thumb1_case_uhi>
 800909a:	0078      	.short	0x0078
 800909c:	061e061e 	.word	0x061e061e
 80090a0:	061e0082 	.word	0x061e0082
 80090a4:	061e061e 	.word	0x061e061e
 80090a8:	061e005d 	.word	0x061e005d
 80090ac:	0084061e 	.word	0x0084061e
 80090b0:	061e008c 	.word	0x061e008c
 80090b4:	0091008a 	.word	0x0091008a
 80090b8:	00b2061e 	.word	0x00b2061e
 80090bc:	00b400b4 	.word	0x00b400b4
 80090c0:	00b400b4 	.word	0x00b400b4
 80090c4:	00b400b4 	.word	0x00b400b4
 80090c8:	00b400b4 	.word	0x00b400b4
 80090cc:	061e00b4 	.word	0x061e00b4
 80090d0:	061e061e 	.word	0x061e061e
 80090d4:	061e061e 	.word	0x061e061e
 80090d8:	061e061e 	.word	0x061e061e
 80090dc:	061e013b 	.word	0x061e013b
 80090e0:	00f400e0 	.word	0x00f400e0
 80090e4:	013b013b 	.word	0x013b013b
 80090e8:	061e013b 	.word	0x061e013b
 80090ec:	061e061e 	.word	0x061e061e
 80090f0:	00c7061e 	.word	0x00c7061e
 80090f4:	061e061e 	.word	0x061e061e
 80090f8:	061e04c7 	.word	0x061e04c7
 80090fc:	061e061e 	.word	0x061e061e
 8009100:	061e050a 	.word	0x061e050a
 8009104:	061e052a 	.word	0x061e052a
 8009108:	055c061e 	.word	0x055c061e
 800910c:	061e061e 	.word	0x061e061e
 8009110:	061e061e 	.word	0x061e061e
 8009114:	061e061e 	.word	0x061e061e
 8009118:	061e061e 	.word	0x061e061e
 800911c:	061e013b 	.word	0x061e013b
 8009120:	00f600e0 	.word	0x00f600e0
 8009124:	013b013b 	.word	0x013b013b
 8009128:	00c9013b 	.word	0x00c9013b
 800912c:	00dc00f6 	.word	0x00dc00f6
 8009130:	00d5061e 	.word	0x00d5061e
 8009134:	04a7061e 	.word	0x04a7061e
 8009138:	04fa04c9 	.word	0x04fa04c9
 800913c:	061e00dc 	.word	0x061e00dc
 8009140:	0080050a 	.word	0x0080050a
 8009144:	061e052c 	.word	0x061e052c
 8009148:	057c061e 	.word	0x057c061e
 800914c:	0080061e 	.word	0x0080061e
 8009150:	3501      	adds	r5, #1
 8009152:	e765      	b.n	8009020 <_svfprintf_r+0x78>
 8009154:	980a      	ldr	r0, [sp, #40]	; 0x28
 8009156:	f001 fa99 	bl	800a68c <_localeconv_r>
 800915a:	6843      	ldr	r3, [r0, #4]
 800915c:	0018      	movs	r0, r3
 800915e:	931d      	str	r3, [sp, #116]	; 0x74
 8009160:	f7f6 ffd0 	bl	8000104 <strlen>
 8009164:	901b      	str	r0, [sp, #108]	; 0x6c
 8009166:	980a      	ldr	r0, [sp, #40]	; 0x28
 8009168:	f001 fa90 	bl	800a68c <_localeconv_r>
 800916c:	6883      	ldr	r3, [r0, #8]
 800916e:	9312      	str	r3, [sp, #72]	; 0x48
 8009170:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8009172:	2b00      	cmp	r3, #0
 8009174:	d011      	beq.n	800919a <_svfprintf_r+0x1f2>
 8009176:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8009178:	2b00      	cmp	r3, #0
 800917a:	d00e      	beq.n	800919a <_svfprintf_r+0x1f2>
 800917c:	781b      	ldrb	r3, [r3, #0]
 800917e:	2b00      	cmp	r3, #0
 8009180:	d00b      	beq.n	800919a <_svfprintf_r+0x1f2>
 8009182:	2380      	movs	r3, #128	; 0x80
 8009184:	00db      	lsls	r3, r3, #3
 8009186:	431e      	orrs	r6, r3
 8009188:	e007      	b.n	800919a <_svfprintf_r+0x1f2>
 800918a:	231b      	movs	r3, #27
 800918c:	aa1e      	add	r2, sp, #120	; 0x78
 800918e:	189b      	adds	r3, r3, r2
 8009190:	781a      	ldrb	r2, [r3, #0]
 8009192:	2a00      	cmp	r2, #0
 8009194:	d101      	bne.n	800919a <_svfprintf_r+0x1f2>
 8009196:	3220      	adds	r2, #32
 8009198:	701a      	strb	r2, [r3, #0]
 800919a:	9d13      	ldr	r5, [sp, #76]	; 0x4c
 800919c:	e771      	b.n	8009082 <_svfprintf_r+0xda>
 800919e:	2301      	movs	r3, #1
 80091a0:	e7f1      	b.n	8009186 <_svfprintf_r+0x1de>
 80091a2:	cc08      	ldmia	r4!, {r3}
 80091a4:	9318      	str	r3, [sp, #96]	; 0x60
 80091a6:	2b00      	cmp	r3, #0
 80091a8:	daf7      	bge.n	800919a <_svfprintf_r+0x1f2>
 80091aa:	425b      	negs	r3, r3
 80091ac:	9318      	str	r3, [sp, #96]	; 0x60
 80091ae:	2304      	movs	r3, #4
 80091b0:	e7e9      	b.n	8009186 <_svfprintf_r+0x1de>
 80091b2:	231b      	movs	r3, #27
 80091b4:	aa1e      	add	r2, sp, #120	; 0x78
 80091b6:	189b      	adds	r3, r3, r2
 80091b8:	222b      	movs	r2, #43	; 0x2b
 80091ba:	e7ed      	b.n	8009198 <_svfprintf_r+0x1f0>
 80091bc:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 80091be:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 80091c0:	7812      	ldrb	r2, [r2, #0]
 80091c2:	3301      	adds	r3, #1
 80091c4:	920f      	str	r2, [sp, #60]	; 0x3c
 80091c6:	2a2a      	cmp	r2, #42	; 0x2a
 80091c8:	d010      	beq.n	80091ec <_svfprintf_r+0x244>
 80091ca:	2200      	movs	r2, #0
 80091cc:	9209      	str	r2, [sp, #36]	; 0x24
 80091ce:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 80091d0:	9313      	str	r3, [sp, #76]	; 0x4c
 80091d2:	3a30      	subs	r2, #48	; 0x30
 80091d4:	2a09      	cmp	r2, #9
 80091d6:	d900      	bls.n	80091da <_svfprintf_r+0x232>
 80091d8:	e757      	b.n	800908a <_svfprintf_r+0xe2>
 80091da:	200a      	movs	r0, #10
 80091dc:	9909      	ldr	r1, [sp, #36]	; 0x24
 80091de:	4341      	muls	r1, r0
 80091e0:	188a      	adds	r2, r1, r2
 80091e2:	9209      	str	r2, [sp, #36]	; 0x24
 80091e4:	781a      	ldrb	r2, [r3, #0]
 80091e6:	3301      	adds	r3, #1
 80091e8:	920f      	str	r2, [sp, #60]	; 0x3c
 80091ea:	e7f0      	b.n	80091ce <_svfprintf_r+0x226>
 80091ec:	cc04      	ldmia	r4!, {r2}
 80091ee:	9209      	str	r2, [sp, #36]	; 0x24
 80091f0:	2a00      	cmp	r2, #0
 80091f2:	da02      	bge.n	80091fa <_svfprintf_r+0x252>
 80091f4:	2201      	movs	r2, #1
 80091f6:	4252      	negs	r2, r2
 80091f8:	9209      	str	r2, [sp, #36]	; 0x24
 80091fa:	9313      	str	r3, [sp, #76]	; 0x4c
 80091fc:	e7cd      	b.n	800919a <_svfprintf_r+0x1f2>
 80091fe:	2380      	movs	r3, #128	; 0x80
 8009200:	e7c1      	b.n	8009186 <_svfprintf_r+0x1de>
 8009202:	2200      	movs	r2, #0
 8009204:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8009206:	9218      	str	r2, [sp, #96]	; 0x60
 8009208:	210a      	movs	r1, #10
 800920a:	9a18      	ldr	r2, [sp, #96]	; 0x60
 800920c:	434a      	muls	r2, r1
 800920e:	990f      	ldr	r1, [sp, #60]	; 0x3c
 8009210:	3930      	subs	r1, #48	; 0x30
 8009212:	188a      	adds	r2, r1, r2
 8009214:	9218      	str	r2, [sp, #96]	; 0x60
 8009216:	001a      	movs	r2, r3
 8009218:	7812      	ldrb	r2, [r2, #0]
 800921a:	3301      	adds	r3, #1
 800921c:	920f      	str	r2, [sp, #60]	; 0x3c
 800921e:	3a30      	subs	r2, #48	; 0x30
 8009220:	9313      	str	r3, [sp, #76]	; 0x4c
 8009222:	2a09      	cmp	r2, #9
 8009224:	d9f0      	bls.n	8009208 <_svfprintf_r+0x260>
 8009226:	e730      	b.n	800908a <_svfprintf_r+0xe2>
 8009228:	2308      	movs	r3, #8
 800922a:	e7ac      	b.n	8009186 <_svfprintf_r+0x1de>
 800922c:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800922e:	781b      	ldrb	r3, [r3, #0]
 8009230:	2b68      	cmp	r3, #104	; 0x68
 8009232:	d105      	bne.n	8009240 <_svfprintf_r+0x298>
 8009234:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8009236:	3301      	adds	r3, #1
 8009238:	9313      	str	r3, [sp, #76]	; 0x4c
 800923a:	2380      	movs	r3, #128	; 0x80
 800923c:	009b      	lsls	r3, r3, #2
 800923e:	e7a2      	b.n	8009186 <_svfprintf_r+0x1de>
 8009240:	2340      	movs	r3, #64	; 0x40
 8009242:	e7a0      	b.n	8009186 <_svfprintf_r+0x1de>
 8009244:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8009246:	781b      	ldrb	r3, [r3, #0]
 8009248:	2b6c      	cmp	r3, #108	; 0x6c
 800924a:	d104      	bne.n	8009256 <_svfprintf_r+0x2ae>
 800924c:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800924e:	3301      	adds	r3, #1
 8009250:	9313      	str	r3, [sp, #76]	; 0x4c
 8009252:	2320      	movs	r3, #32
 8009254:	e797      	b.n	8009186 <_svfprintf_r+0x1de>
 8009256:	2310      	movs	r3, #16
 8009258:	e795      	b.n	8009186 <_svfprintf_r+0x1de>
 800925a:	0021      	movs	r1, r4
 800925c:	c904      	ldmia	r1!, {r2}
 800925e:	ab3f      	add	r3, sp, #252	; 0xfc
 8009260:	910d      	str	r1, [sp, #52]	; 0x34
 8009262:	211b      	movs	r1, #27
 8009264:	701a      	strb	r2, [r3, #0]
 8009266:	2200      	movs	r2, #0
 8009268:	a81e      	add	r0, sp, #120	; 0x78
 800926a:	1809      	adds	r1, r1, r0
 800926c:	700a      	strb	r2, [r1, #0]
 800926e:	920c      	str	r2, [sp, #48]	; 0x30
 8009270:	3201      	adds	r2, #1
 8009272:	9209      	str	r2, [sp, #36]	; 0x24
 8009274:	2200      	movs	r2, #0
 8009276:	9308      	str	r3, [sp, #32]
 8009278:	0015      	movs	r5, r2
 800927a:	9219      	str	r2, [sp, #100]	; 0x64
 800927c:	9210      	str	r2, [sp, #64]	; 0x40
 800927e:	9211      	str	r2, [sp, #68]	; 0x44
 8009280:	e1f1      	b.n	8009666 <_svfprintf_r+0x6be>
 8009282:	2310      	movs	r3, #16
 8009284:	431e      	orrs	r6, r3
 8009286:	06b3      	lsls	r3, r6, #26
 8009288:	d531      	bpl.n	80092ee <_svfprintf_r+0x346>
 800928a:	2307      	movs	r3, #7
 800928c:	3407      	adds	r4, #7
 800928e:	439c      	bics	r4, r3
 8009290:	0022      	movs	r2, r4
 8009292:	ca18      	ldmia	r2!, {r3, r4}
 8009294:	9306      	str	r3, [sp, #24]
 8009296:	9407      	str	r4, [sp, #28]
 8009298:	920d      	str	r2, [sp, #52]	; 0x34
 800929a:	9a07      	ldr	r2, [sp, #28]
 800929c:	2301      	movs	r3, #1
 800929e:	2a00      	cmp	r2, #0
 80092a0:	da0b      	bge.n	80092ba <_svfprintf_r+0x312>
 80092a2:	9c06      	ldr	r4, [sp, #24]
 80092a4:	9d07      	ldr	r5, [sp, #28]
 80092a6:	2200      	movs	r2, #0
 80092a8:	4261      	negs	r1, r4
 80092aa:	41aa      	sbcs	r2, r5
 80092ac:	9106      	str	r1, [sp, #24]
 80092ae:	9207      	str	r2, [sp, #28]
 80092b0:	221b      	movs	r2, #27
 80092b2:	a91e      	add	r1, sp, #120	; 0x78
 80092b4:	1852      	adds	r2, r2, r1
 80092b6:	212d      	movs	r1, #45	; 0x2d
 80092b8:	7011      	strb	r1, [r2, #0]
 80092ba:	9907      	ldr	r1, [sp, #28]
 80092bc:	9a06      	ldr	r2, [sp, #24]
 80092be:	430a      	orrs	r2, r1
 80092c0:	9909      	ldr	r1, [sp, #36]	; 0x24
 80092c2:	3101      	adds	r1, #1
 80092c4:	d101      	bne.n	80092ca <_svfprintf_r+0x322>
 80092c6:	f001 f87b 	bl	800a3c0 <_svfprintf_r+0x1418>
 80092ca:	2180      	movs	r1, #128	; 0x80
 80092cc:	0034      	movs	r4, r6
 80092ce:	438c      	bics	r4, r1
 80092d0:	2a00      	cmp	r2, #0
 80092d2:	d001      	beq.n	80092d8 <_svfprintf_r+0x330>
 80092d4:	f001 f879 	bl	800a3ca <_svfprintf_r+0x1422>
 80092d8:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80092da:	2a00      	cmp	r2, #0
 80092dc:	d101      	bne.n	80092e2 <_svfprintf_r+0x33a>
 80092de:	f000 fcef 	bl	8009cc0 <_svfprintf_r+0xd18>
 80092e2:	2b01      	cmp	r3, #1
 80092e4:	d001      	beq.n	80092ea <_svfprintf_r+0x342>
 80092e6:	f001 f874 	bl	800a3d2 <_svfprintf_r+0x142a>
 80092ea:	f000 fc79 	bl	8009be0 <_svfprintf_r+0xc38>
 80092ee:	0022      	movs	r2, r4
 80092f0:	ca08      	ldmia	r2!, {r3}
 80092f2:	920d      	str	r2, [sp, #52]	; 0x34
 80092f4:	06f2      	lsls	r2, r6, #27
 80092f6:	d503      	bpl.n	8009300 <_svfprintf_r+0x358>
 80092f8:	9306      	str	r3, [sp, #24]
 80092fa:	17db      	asrs	r3, r3, #31
 80092fc:	9307      	str	r3, [sp, #28]
 80092fe:	e7cc      	b.n	800929a <_svfprintf_r+0x2f2>
 8009300:	0672      	lsls	r2, r6, #25
 8009302:	d501      	bpl.n	8009308 <_svfprintf_r+0x360>
 8009304:	b21b      	sxth	r3, r3
 8009306:	e7f7      	b.n	80092f8 <_svfprintf_r+0x350>
 8009308:	05b2      	lsls	r2, r6, #22
 800930a:	d5f5      	bpl.n	80092f8 <_svfprintf_r+0x350>
 800930c:	b25b      	sxtb	r3, r3
 800930e:	e7f3      	b.n	80092f8 <_svfprintf_r+0x350>
 8009310:	2307      	movs	r3, #7
 8009312:	3407      	adds	r4, #7
 8009314:	439c      	bics	r4, r3
 8009316:	0022      	movs	r2, r4
 8009318:	ca18      	ldmia	r2!, {r3, r4}
 800931a:	920d      	str	r2, [sp, #52]	; 0x34
 800931c:	2201      	movs	r2, #1
 800931e:	9314      	str	r3, [sp, #80]	; 0x50
 8009320:	9415      	str	r4, [sp, #84]	; 0x54
 8009322:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8009324:	9d14      	ldr	r5, [sp, #80]	; 0x50
 8009326:	005c      	lsls	r4, r3, #1
 8009328:	0864      	lsrs	r4, r4, #1
 800932a:	0028      	movs	r0, r5
 800932c:	0021      	movs	r1, r4
 800932e:	4b3e      	ldr	r3, [pc, #248]	; (8009428 <_svfprintf_r+0x480>)
 8009330:	4252      	negs	r2, r2
 8009332:	f7f8 ff41 	bl	80021b8 <__aeabi_dcmpun>
 8009336:	2800      	cmp	r0, #0
 8009338:	d126      	bne.n	8009388 <_svfprintf_r+0x3e0>
 800933a:	2201      	movs	r2, #1
 800933c:	0028      	movs	r0, r5
 800933e:	0021      	movs	r1, r4
 8009340:	4b39      	ldr	r3, [pc, #228]	; (8009428 <_svfprintf_r+0x480>)
 8009342:	4252      	negs	r2, r2
 8009344:	f7f7 f890 	bl	8000468 <__aeabi_dcmple>
 8009348:	2800      	cmp	r0, #0
 800934a:	d11d      	bne.n	8009388 <_svfprintf_r+0x3e0>
 800934c:	9814      	ldr	r0, [sp, #80]	; 0x50
 800934e:	9915      	ldr	r1, [sp, #84]	; 0x54
 8009350:	2200      	movs	r2, #0
 8009352:	2300      	movs	r3, #0
 8009354:	f7f7 f87e 	bl	8000454 <__aeabi_dcmplt>
 8009358:	2800      	cmp	r0, #0
 800935a:	d004      	beq.n	8009366 <_svfprintf_r+0x3be>
 800935c:	231b      	movs	r3, #27
 800935e:	aa1e      	add	r2, sp, #120	; 0x78
 8009360:	189b      	adds	r3, r3, r2
 8009362:	222d      	movs	r2, #45	; 0x2d
 8009364:	701a      	strb	r2, [r3, #0]
 8009366:	4b31      	ldr	r3, [pc, #196]	; (800942c <_svfprintf_r+0x484>)
 8009368:	9308      	str	r3, [sp, #32]
 800936a:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800936c:	2b47      	cmp	r3, #71	; 0x47
 800936e:	dd01      	ble.n	8009374 <_svfprintf_r+0x3cc>
 8009370:	4b2f      	ldr	r3, [pc, #188]	; (8009430 <_svfprintf_r+0x488>)
 8009372:	9308      	str	r3, [sp, #32]
 8009374:	2380      	movs	r3, #128	; 0x80
 8009376:	439e      	bics	r6, r3
 8009378:	2300      	movs	r3, #0
 800937a:	930c      	str	r3, [sp, #48]	; 0x30
 800937c:	3303      	adds	r3, #3
 800937e:	9309      	str	r3, [sp, #36]	; 0x24
 8009380:	2300      	movs	r3, #0
 8009382:	9319      	str	r3, [sp, #100]	; 0x64
 8009384:	f000 fc78 	bl	8009c78 <_svfprintf_r+0xcd0>
 8009388:	9a14      	ldr	r2, [sp, #80]	; 0x50
 800938a:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800938c:	0010      	movs	r0, r2
 800938e:	0019      	movs	r1, r3
 8009390:	f7f8 ff12 	bl	80021b8 <__aeabi_dcmpun>
 8009394:	2800      	cmp	r0, #0
 8009396:	d00e      	beq.n	80093b6 <_svfprintf_r+0x40e>
 8009398:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800939a:	2b00      	cmp	r3, #0
 800939c:	da04      	bge.n	80093a8 <_svfprintf_r+0x400>
 800939e:	231b      	movs	r3, #27
 80093a0:	aa1e      	add	r2, sp, #120	; 0x78
 80093a2:	189b      	adds	r3, r3, r2
 80093a4:	222d      	movs	r2, #45	; 0x2d
 80093a6:	701a      	strb	r2, [r3, #0]
 80093a8:	4b22      	ldr	r3, [pc, #136]	; (8009434 <_svfprintf_r+0x48c>)
 80093aa:	9308      	str	r3, [sp, #32]
 80093ac:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80093ae:	2b47      	cmp	r3, #71	; 0x47
 80093b0:	dde0      	ble.n	8009374 <_svfprintf_r+0x3cc>
 80093b2:	4b21      	ldr	r3, [pc, #132]	; (8009438 <_svfprintf_r+0x490>)
 80093b4:	e7dd      	b.n	8009372 <_svfprintf_r+0x3ca>
 80093b6:	2320      	movs	r3, #32
 80093b8:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 80093ba:	439a      	bics	r2, r3
 80093bc:	9210      	str	r2, [sp, #64]	; 0x40
 80093be:	2a41      	cmp	r2, #65	; 0x41
 80093c0:	d123      	bne.n	800940a <_svfprintf_r+0x462>
 80093c2:	2230      	movs	r2, #48	; 0x30
 80093c4:	990f      	ldr	r1, [sp, #60]	; 0x3c
 80093c6:	ab25      	add	r3, sp, #148	; 0x94
 80093c8:	701a      	strb	r2, [r3, #0]
 80093ca:	3248      	adds	r2, #72	; 0x48
 80093cc:	2961      	cmp	r1, #97	; 0x61
 80093ce:	d000      	beq.n	80093d2 <_svfprintf_r+0x42a>
 80093d0:	3a20      	subs	r2, #32
 80093d2:	705a      	strb	r2, [r3, #1]
 80093d4:	2302      	movs	r3, #2
 80093d6:	431e      	orrs	r6, r3
 80093d8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80093da:	2b63      	cmp	r3, #99	; 0x63
 80093dc:	dd2e      	ble.n	800943c <_svfprintf_r+0x494>
 80093de:	980a      	ldr	r0, [sp, #40]	; 0x28
 80093e0:	1c59      	adds	r1, r3, #1
 80093e2:	f7ff f853 	bl	800848c <_malloc_r>
 80093e6:	9008      	str	r0, [sp, #32]
 80093e8:	2800      	cmp	r0, #0
 80093ea:	d000      	beq.n	80093ee <_svfprintf_r+0x446>
 80093ec:	e216      	b.n	800981c <_svfprintf_r+0x874>
 80093ee:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80093f0:	899a      	ldrh	r2, [r3, #12]
 80093f2:	2340      	movs	r3, #64	; 0x40
 80093f4:	4313      	orrs	r3, r2
 80093f6:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 80093f8:	8193      	strh	r3, [r2, #12]
 80093fa:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80093fc:	899b      	ldrh	r3, [r3, #12]
 80093fe:	065b      	lsls	r3, r3, #25
 8009400:	d400      	bmi.n	8009404 <_svfprintf_r+0x45c>
 8009402:	e5f5      	b.n	8008ff0 <_svfprintf_r+0x48>
 8009404:	2301      	movs	r3, #1
 8009406:	425b      	negs	r3, r3
 8009408:	e5f1      	b.n	8008fee <_svfprintf_r+0x46>
 800940a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800940c:	900c      	str	r0, [sp, #48]	; 0x30
 800940e:	3301      	adds	r3, #1
 8009410:	d100      	bne.n	8009414 <_svfprintf_r+0x46c>
 8009412:	e206      	b.n	8009822 <_svfprintf_r+0x87a>
 8009414:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8009416:	2b47      	cmp	r3, #71	; 0x47
 8009418:	d114      	bne.n	8009444 <_svfprintf_r+0x49c>
 800941a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800941c:	2b00      	cmp	r3, #0
 800941e:	d111      	bne.n	8009444 <_svfprintf_r+0x49c>
 8009420:	3301      	adds	r3, #1
 8009422:	9309      	str	r3, [sp, #36]	; 0x24
 8009424:	e00e      	b.n	8009444 <_svfprintf_r+0x49c>
 8009426:	46c0      	nop			; (mov r8, r8)
 8009428:	7fefffff 	.word	0x7fefffff
 800942c:	0800e7a4 	.word	0x0800e7a4
 8009430:	0800e7a8 	.word	0x0800e7a8
 8009434:	0800e7ac 	.word	0x0800e7ac
 8009438:	0800e7b0 	.word	0x0800e7b0
 800943c:	2300      	movs	r3, #0
 800943e:	930c      	str	r3, [sp, #48]	; 0x30
 8009440:	ab3f      	add	r3, sp, #252	; 0xfc
 8009442:	9308      	str	r3, [sp, #32]
 8009444:	2380      	movs	r3, #128	; 0x80
 8009446:	005b      	lsls	r3, r3, #1
 8009448:	4333      	orrs	r3, r6
 800944a:	931a      	str	r3, [sp, #104]	; 0x68
 800944c:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800944e:	9d14      	ldr	r5, [sp, #80]	; 0x50
 8009450:	2b00      	cmp	r3, #0
 8009452:	db00      	blt.n	8009456 <_svfprintf_r+0x4ae>
 8009454:	e1e7      	b.n	8009826 <_svfprintf_r+0x87e>
 8009456:	2280      	movs	r2, #128	; 0x80
 8009458:	0612      	lsls	r2, r2, #24
 800945a:	4694      	mov	ip, r2
 800945c:	4463      	add	r3, ip
 800945e:	930e      	str	r3, [sp, #56]	; 0x38
 8009460:	232d      	movs	r3, #45	; 0x2d
 8009462:	9322      	str	r3, [sp, #136]	; 0x88
 8009464:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8009466:	2b41      	cmp	r3, #65	; 0x41
 8009468:	d000      	beq.n	800946c <_svfprintf_r+0x4c4>
 800946a:	e1f5      	b.n	8009858 <_svfprintf_r+0x8b0>
 800946c:	0028      	movs	r0, r5
 800946e:	aa26      	add	r2, sp, #152	; 0x98
 8009470:	990e      	ldr	r1, [sp, #56]	; 0x38
 8009472:	f001 f94b 	bl	800a70c <frexp>
 8009476:	23ff      	movs	r3, #255	; 0xff
 8009478:	2200      	movs	r2, #0
 800947a:	059b      	lsls	r3, r3, #22
 800947c:	f7f8 f858 	bl	8001530 <__aeabi_dmul>
 8009480:	2200      	movs	r2, #0
 8009482:	2300      	movs	r3, #0
 8009484:	0004      	movs	r4, r0
 8009486:	000d      	movs	r5, r1
 8009488:	f7f6 ffde 	bl	8000448 <__aeabi_dcmpeq>
 800948c:	2800      	cmp	r0, #0
 800948e:	d001      	beq.n	8009494 <_svfprintf_r+0x4ec>
 8009490:	2301      	movs	r3, #1
 8009492:	9326      	str	r3, [sp, #152]	; 0x98
 8009494:	4bda      	ldr	r3, [pc, #872]	; (8009800 <_svfprintf_r+0x858>)
 8009496:	9319      	str	r3, [sp, #100]	; 0x64
 8009498:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800949a:	2b61      	cmp	r3, #97	; 0x61
 800949c:	d001      	beq.n	80094a2 <_svfprintf_r+0x4fa>
 800949e:	4bd9      	ldr	r3, [pc, #868]	; (8009804 <_svfprintf_r+0x85c>)
 80094a0:	9319      	str	r3, [sp, #100]	; 0x64
 80094a2:	9b08      	ldr	r3, [sp, #32]
 80094a4:	930e      	str	r3, [sp, #56]	; 0x38
 80094a6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80094a8:	3b01      	subs	r3, #1
 80094aa:	9311      	str	r3, [sp, #68]	; 0x44
 80094ac:	2200      	movs	r2, #0
 80094ae:	4bd6      	ldr	r3, [pc, #856]	; (8009808 <_svfprintf_r+0x860>)
 80094b0:	0020      	movs	r0, r4
 80094b2:	0029      	movs	r1, r5
 80094b4:	f7f8 f83c 	bl	8001530 <__aeabi_dmul>
 80094b8:	000d      	movs	r5, r1
 80094ba:	0004      	movs	r4, r0
 80094bc:	f7f8 fe9a 	bl	80021f4 <__aeabi_d2iz>
 80094c0:	9021      	str	r0, [sp, #132]	; 0x84
 80094c2:	f7f8 fecd 	bl	8002260 <__aeabi_i2d>
 80094c6:	0002      	movs	r2, r0
 80094c8:	000b      	movs	r3, r1
 80094ca:	0020      	movs	r0, r4
 80094cc:	0029      	movs	r1, r5
 80094ce:	f7f8 faf1 	bl	8001ab4 <__aeabi_dsub>
 80094d2:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80094d4:	000d      	movs	r5, r1
 80094d6:	001a      	movs	r2, r3
 80094d8:	3201      	adds	r2, #1
 80094da:	9921      	ldr	r1, [sp, #132]	; 0x84
 80094dc:	920e      	str	r2, [sp, #56]	; 0x38
 80094de:	9223      	str	r2, [sp, #140]	; 0x8c
 80094e0:	9a19      	ldr	r2, [sp, #100]	; 0x64
 80094e2:	0004      	movs	r4, r0
 80094e4:	5c52      	ldrb	r2, [r2, r1]
 80094e6:	701a      	strb	r2, [r3, #0]
 80094e8:	9b11      	ldr	r3, [sp, #68]	; 0x44
 80094ea:	9320      	str	r3, [sp, #128]	; 0x80
 80094ec:	3301      	adds	r3, #1
 80094ee:	d00a      	beq.n	8009506 <_svfprintf_r+0x55e>
 80094f0:	9b11      	ldr	r3, [sp, #68]	; 0x44
 80094f2:	2200      	movs	r2, #0
 80094f4:	3b01      	subs	r3, #1
 80094f6:	9311      	str	r3, [sp, #68]	; 0x44
 80094f8:	0020      	movs	r0, r4
 80094fa:	2300      	movs	r3, #0
 80094fc:	0029      	movs	r1, r5
 80094fe:	f7f6 ffa3 	bl	8000448 <__aeabi_dcmpeq>
 8009502:	2800      	cmp	r0, #0
 8009504:	d0d2      	beq.n	80094ac <_svfprintf_r+0x504>
 8009506:	2200      	movs	r2, #0
 8009508:	0020      	movs	r0, r4
 800950a:	0029      	movs	r1, r5
 800950c:	4bbf      	ldr	r3, [pc, #764]	; (800980c <_svfprintf_r+0x864>)
 800950e:	f7f6 ffb5 	bl	800047c <__aeabi_dcmpgt>
 8009512:	2800      	cmp	r0, #0
 8009514:	d10c      	bne.n	8009530 <_svfprintf_r+0x588>
 8009516:	2200      	movs	r2, #0
 8009518:	0020      	movs	r0, r4
 800951a:	0029      	movs	r1, r5
 800951c:	4bbb      	ldr	r3, [pc, #748]	; (800980c <_svfprintf_r+0x864>)
 800951e:	f7f6 ff93 	bl	8000448 <__aeabi_dcmpeq>
 8009522:	2800      	cmp	r0, #0
 8009524:	d100      	bne.n	8009528 <_svfprintf_r+0x580>
 8009526:	e191      	b.n	800984c <_svfprintf_r+0x8a4>
 8009528:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800952a:	07db      	lsls	r3, r3, #31
 800952c:	d400      	bmi.n	8009530 <_svfprintf_r+0x588>
 800952e:	e18d      	b.n	800984c <_svfprintf_r+0x8a4>
 8009530:	2030      	movs	r0, #48	; 0x30
 8009532:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8009534:	932a      	str	r3, [sp, #168]	; 0xa8
 8009536:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8009538:	7bdb      	ldrb	r3, [r3, #15]
 800953a:	9a2a      	ldr	r2, [sp, #168]	; 0xa8
 800953c:	3a01      	subs	r2, #1
 800953e:	922a      	str	r2, [sp, #168]	; 0xa8
 8009540:	7811      	ldrb	r1, [r2, #0]
 8009542:	4299      	cmp	r1, r3
 8009544:	d100      	bne.n	8009548 <_svfprintf_r+0x5a0>
 8009546:	e171      	b.n	800982c <_svfprintf_r+0x884>
 8009548:	1c4b      	adds	r3, r1, #1
 800954a:	b2db      	uxtb	r3, r3
 800954c:	2939      	cmp	r1, #57	; 0x39
 800954e:	d101      	bne.n	8009554 <_svfprintf_r+0x5ac>
 8009550:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8009552:	7a9b      	ldrb	r3, [r3, #10]
 8009554:	7013      	strb	r3, [r2, #0]
 8009556:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8009558:	9a08      	ldr	r2, [sp, #32]
 800955a:	9d26      	ldr	r5, [sp, #152]	; 0x98
 800955c:	1a9b      	subs	r3, r3, r2
 800955e:	930e      	str	r3, [sp, #56]	; 0x38
 8009560:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8009562:	2b47      	cmp	r3, #71	; 0x47
 8009564:	d000      	beq.n	8009568 <_svfprintf_r+0x5c0>
 8009566:	e1c4      	b.n	80098f2 <_svfprintf_r+0x94a>
 8009568:	1ceb      	adds	r3, r5, #3
 800956a:	db03      	blt.n	8009574 <_svfprintf_r+0x5cc>
 800956c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800956e:	42ab      	cmp	r3, r5
 8009570:	db00      	blt.n	8009574 <_svfprintf_r+0x5cc>
 8009572:	e1e6      	b.n	8009942 <_svfprintf_r+0x99a>
 8009574:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8009576:	3b02      	subs	r3, #2
 8009578:	930f      	str	r3, [sp, #60]	; 0x3c
 800957a:	223c      	movs	r2, #60	; 0x3c
 800957c:	466b      	mov	r3, sp
 800957e:	990f      	ldr	r1, [sp, #60]	; 0x3c
 8009580:	189b      	adds	r3, r3, r2
 8009582:	1e6c      	subs	r4, r5, #1
 8009584:	3a1c      	subs	r2, #28
 8009586:	2000      	movs	r0, #0
 8009588:	781b      	ldrb	r3, [r3, #0]
 800958a:	9426      	str	r4, [sp, #152]	; 0x98
 800958c:	4391      	bics	r1, r2
 800958e:	2941      	cmp	r1, #65	; 0x41
 8009590:	d102      	bne.n	8009598 <_svfprintf_r+0x5f0>
 8009592:	330f      	adds	r3, #15
 8009594:	b2db      	uxtb	r3, r3
 8009596:	3001      	adds	r0, #1
 8009598:	a928      	add	r1, sp, #160	; 0xa0
 800959a:	700b      	strb	r3, [r1, #0]
 800959c:	232b      	movs	r3, #43	; 0x2b
 800959e:	2c00      	cmp	r4, #0
 80095a0:	da02      	bge.n	80095a8 <_svfprintf_r+0x600>
 80095a2:	2401      	movs	r4, #1
 80095a4:	3302      	adds	r3, #2
 80095a6:	1b64      	subs	r4, r4, r5
 80095a8:	704b      	strb	r3, [r1, #1]
 80095aa:	2c09      	cmp	r4, #9
 80095ac:	dc00      	bgt.n	80095b0 <_svfprintf_r+0x608>
 80095ae:	e1ba      	b.n	8009926 <_svfprintf_r+0x97e>
 80095b0:	2337      	movs	r3, #55	; 0x37
 80095b2:	250a      	movs	r5, #10
 80095b4:	aa1e      	add	r2, sp, #120	; 0x78
 80095b6:	189b      	adds	r3, r3, r2
 80095b8:	9310      	str	r3, [sp, #64]	; 0x40
 80095ba:	9b10      	ldr	r3, [sp, #64]	; 0x40
 80095bc:	0020      	movs	r0, r4
 80095be:	9309      	str	r3, [sp, #36]	; 0x24
 80095c0:	0029      	movs	r1, r5
 80095c2:	3b01      	subs	r3, #1
 80095c4:	9310      	str	r3, [sp, #64]	; 0x40
 80095c6:	f7f6 ff29 	bl	800041c <__aeabi_idivmod>
 80095ca:	9b10      	ldr	r3, [sp, #64]	; 0x40
 80095cc:	3130      	adds	r1, #48	; 0x30
 80095ce:	7019      	strb	r1, [r3, #0]
 80095d0:	0020      	movs	r0, r4
 80095d2:	0029      	movs	r1, r5
 80095d4:	9411      	str	r4, [sp, #68]	; 0x44
 80095d6:	f7f6 fe3b 	bl	8000250 <__divsi3>
 80095da:	9b11      	ldr	r3, [sp, #68]	; 0x44
 80095dc:	0004      	movs	r4, r0
 80095de:	2b63      	cmp	r3, #99	; 0x63
 80095e0:	dceb      	bgt.n	80095ba <_svfprintf_r+0x612>
 80095e2:	222a      	movs	r2, #42	; 0x2a
 80095e4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80095e6:	a81e      	add	r0, sp, #120	; 0x78
 80095e8:	1e99      	subs	r1, r3, #2
 80095ea:	1812      	adds	r2, r2, r0
 80095ec:	2037      	movs	r0, #55	; 0x37
 80095ee:	000b      	movs	r3, r1
 80095f0:	3430      	adds	r4, #48	; 0x30
 80095f2:	700c      	strb	r4, [r1, #0]
 80095f4:	ac1e      	add	r4, sp, #120	; 0x78
 80095f6:	1900      	adds	r0, r0, r4
 80095f8:	4283      	cmp	r3, r0
 80095fa:	d200      	bcs.n	80095fe <_svfprintf_r+0x656>
 80095fc:	e18e      	b.n	800991c <_svfprintf_r+0x974>
 80095fe:	2300      	movs	r3, #0
 8009600:	4281      	cmp	r1, r0
 8009602:	d804      	bhi.n	800960e <_svfprintf_r+0x666>
 8009604:	aa1e      	add	r2, sp, #120	; 0x78
 8009606:	3339      	adds	r3, #57	; 0x39
 8009608:	189b      	adds	r3, r3, r2
 800960a:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800960c:	1a9b      	subs	r3, r3, r2
 800960e:	222a      	movs	r2, #42	; 0x2a
 8009610:	a91e      	add	r1, sp, #120	; 0x78
 8009612:	1852      	adds	r2, r2, r1
 8009614:	18d3      	adds	r3, r2, r3
 8009616:	aa28      	add	r2, sp, #160	; 0xa0
 8009618:	1a9b      	subs	r3, r3, r2
 800961a:	931e      	str	r3, [sp, #120]	; 0x78
 800961c:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 800961e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8009620:	4694      	mov	ip, r2
 8009622:	4463      	add	r3, ip
 8009624:	9309      	str	r3, [sp, #36]	; 0x24
 8009626:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8009628:	2b01      	cmp	r3, #1
 800962a:	dc01      	bgt.n	8009630 <_svfprintf_r+0x688>
 800962c:	07f3      	lsls	r3, r6, #31
 800962e:	d504      	bpl.n	800963a <_svfprintf_r+0x692>
 8009630:	9a16      	ldr	r2, [sp, #88]	; 0x58
 8009632:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009634:	4694      	mov	ip, r2
 8009636:	4463      	add	r3, ip
 8009638:	9309      	str	r3, [sp, #36]	; 0x24
 800963a:	2280      	movs	r2, #128	; 0x80
 800963c:	4b74      	ldr	r3, [pc, #464]	; (8009810 <_svfprintf_r+0x868>)
 800963e:	0052      	lsls	r2, r2, #1
 8009640:	4033      	ands	r3, r6
 8009642:	431a      	orrs	r2, r3
 8009644:	2300      	movs	r3, #0
 8009646:	001d      	movs	r5, r3
 8009648:	921a      	str	r2, [sp, #104]	; 0x68
 800964a:	9310      	str	r3, [sp, #64]	; 0x40
 800964c:	9311      	str	r3, [sp, #68]	; 0x44
 800964e:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8009650:	9e1a      	ldr	r6, [sp, #104]	; 0x68
 8009652:	9319      	str	r3, [sp, #100]	; 0x64
 8009654:	2b00      	cmp	r3, #0
 8009656:	d006      	beq.n	8009666 <_svfprintf_r+0x6be>
 8009658:	231b      	movs	r3, #27
 800965a:	aa1e      	add	r2, sp, #120	; 0x78
 800965c:	189b      	adds	r3, r3, r2
 800965e:	222d      	movs	r2, #45	; 0x2d
 8009660:	701a      	strb	r2, [r3, #0]
 8009662:	2300      	movs	r3, #0
 8009664:	9319      	str	r3, [sp, #100]	; 0x64
 8009666:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8009668:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800966a:	931a      	str	r3, [sp, #104]	; 0x68
 800966c:	4293      	cmp	r3, r2
 800966e:	da00      	bge.n	8009672 <_svfprintf_r+0x6ca>
 8009670:	921a      	str	r2, [sp, #104]	; 0x68
 8009672:	231b      	movs	r3, #27
 8009674:	aa1e      	add	r2, sp, #120	; 0x78
 8009676:	189b      	adds	r3, r3, r2
 8009678:	781b      	ldrb	r3, [r3, #0]
 800967a:	1e5a      	subs	r2, r3, #1
 800967c:	4193      	sbcs	r3, r2
 800967e:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 8009680:	18d3      	adds	r3, r2, r3
 8009682:	931a      	str	r3, [sp, #104]	; 0x68
 8009684:	0032      	movs	r2, r6
 8009686:	2302      	movs	r3, #2
 8009688:	401a      	ands	r2, r3
 800968a:	9220      	str	r2, [sp, #128]	; 0x80
 800968c:	421e      	tst	r6, r3
 800968e:	d002      	beq.n	8009696 <_svfprintf_r+0x6ee>
 8009690:	9b1a      	ldr	r3, [sp, #104]	; 0x68
 8009692:	3302      	adds	r3, #2
 8009694:	931a      	str	r3, [sp, #104]	; 0x68
 8009696:	2384      	movs	r3, #132	; 0x84
 8009698:	0032      	movs	r2, r6
 800969a:	401a      	ands	r2, r3
 800969c:	9221      	str	r2, [sp, #132]	; 0x84
 800969e:	421e      	tst	r6, r3
 80096a0:	d11f      	bne.n	80096e2 <_svfprintf_r+0x73a>
 80096a2:	9b18      	ldr	r3, [sp, #96]	; 0x60
 80096a4:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 80096a6:	1a9c      	subs	r4, r3, r2
 80096a8:	2c00      	cmp	r4, #0
 80096aa:	dd1a      	ble.n	80096e2 <_svfprintf_r+0x73a>
 80096ac:	0039      	movs	r1, r7
 80096ae:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
 80096b0:	4858      	ldr	r0, [pc, #352]	; (8009814 <_svfprintf_r+0x86c>)
 80096b2:	9a2e      	ldr	r2, [sp, #184]	; 0xb8
 80096b4:	3301      	adds	r3, #1
 80096b6:	3108      	adds	r1, #8
 80096b8:	6038      	str	r0, [r7, #0]
 80096ba:	2c10      	cmp	r4, #16
 80096bc:	dd00      	ble.n	80096c0 <_svfprintf_r+0x718>
 80096be:	e31c      	b.n	8009cfa <_svfprintf_r+0xd52>
 80096c0:	607c      	str	r4, [r7, #4]
 80096c2:	18a4      	adds	r4, r4, r2
 80096c4:	000f      	movs	r7, r1
 80096c6:	942e      	str	r4, [sp, #184]	; 0xb8
 80096c8:	932d      	str	r3, [sp, #180]	; 0xb4
 80096ca:	2b07      	cmp	r3, #7
 80096cc:	dd09      	ble.n	80096e2 <_svfprintf_r+0x73a>
 80096ce:	990b      	ldr	r1, [sp, #44]	; 0x2c
 80096d0:	980a      	ldr	r0, [sp, #40]	; 0x28
 80096d2:	aa2c      	add	r2, sp, #176	; 0xb0
 80096d4:	f001 ff8c 	bl	800b5f0 <__ssprint_r>
 80096d8:	2800      	cmp	r0, #0
 80096da:	d001      	beq.n	80096e0 <_svfprintf_r+0x738>
 80096dc:	f000 fe43 	bl	800a366 <_svfprintf_r+0x13be>
 80096e0:	af2f      	add	r7, sp, #188	; 0xbc
 80096e2:	221b      	movs	r2, #27
 80096e4:	a91e      	add	r1, sp, #120	; 0x78
 80096e6:	1852      	adds	r2, r2, r1
 80096e8:	7811      	ldrb	r1, [r2, #0]
 80096ea:	9b2e      	ldr	r3, [sp, #184]	; 0xb8
 80096ec:	2900      	cmp	r1, #0
 80096ee:	d014      	beq.n	800971a <_svfprintf_r+0x772>
 80096f0:	603a      	str	r2, [r7, #0]
 80096f2:	2201      	movs	r2, #1
 80096f4:	189b      	adds	r3, r3, r2
 80096f6:	932e      	str	r3, [sp, #184]	; 0xb8
 80096f8:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
 80096fa:	607a      	str	r2, [r7, #4]
 80096fc:	189b      	adds	r3, r3, r2
 80096fe:	932d      	str	r3, [sp, #180]	; 0xb4
 8009700:	3708      	adds	r7, #8
 8009702:	2b07      	cmp	r3, #7
 8009704:	dd09      	ble.n	800971a <_svfprintf_r+0x772>
 8009706:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8009708:	980a      	ldr	r0, [sp, #40]	; 0x28
 800970a:	aa2c      	add	r2, sp, #176	; 0xb0
 800970c:	f001 ff70 	bl	800b5f0 <__ssprint_r>
 8009710:	2800      	cmp	r0, #0
 8009712:	d001      	beq.n	8009718 <_svfprintf_r+0x770>
 8009714:	f000 fe27 	bl	800a366 <_svfprintf_r+0x13be>
 8009718:	af2f      	add	r7, sp, #188	; 0xbc
 800971a:	9a20      	ldr	r2, [sp, #128]	; 0x80
 800971c:	9b2e      	ldr	r3, [sp, #184]	; 0xb8
 800971e:	2a00      	cmp	r2, #0
 8009720:	d015      	beq.n	800974e <_svfprintf_r+0x7a6>
 8009722:	aa25      	add	r2, sp, #148	; 0x94
 8009724:	603a      	str	r2, [r7, #0]
 8009726:	2202      	movs	r2, #2
 8009728:	189b      	adds	r3, r3, r2
 800972a:	932e      	str	r3, [sp, #184]	; 0xb8
 800972c:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
 800972e:	607a      	str	r2, [r7, #4]
 8009730:	3301      	adds	r3, #1
 8009732:	932d      	str	r3, [sp, #180]	; 0xb4
 8009734:	3708      	adds	r7, #8
 8009736:	2b07      	cmp	r3, #7
 8009738:	dd09      	ble.n	800974e <_svfprintf_r+0x7a6>
 800973a:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800973c:	980a      	ldr	r0, [sp, #40]	; 0x28
 800973e:	aa2c      	add	r2, sp, #176	; 0xb0
 8009740:	f001 ff56 	bl	800b5f0 <__ssprint_r>
 8009744:	2800      	cmp	r0, #0
 8009746:	d001      	beq.n	800974c <_svfprintf_r+0x7a4>
 8009748:	f000 fe0d 	bl	800a366 <_svfprintf_r+0x13be>
 800974c:	af2f      	add	r7, sp, #188	; 0xbc
 800974e:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8009750:	2b80      	cmp	r3, #128	; 0x80
 8009752:	d11f      	bne.n	8009794 <_svfprintf_r+0x7ec>
 8009754:	9b18      	ldr	r3, [sp, #96]	; 0x60
 8009756:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 8009758:	1a9c      	subs	r4, r3, r2
 800975a:	2c00      	cmp	r4, #0
 800975c:	dd1a      	ble.n	8009794 <_svfprintf_r+0x7ec>
 800975e:	0039      	movs	r1, r7
 8009760:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
 8009762:	482d      	ldr	r0, [pc, #180]	; (8009818 <_svfprintf_r+0x870>)
 8009764:	9a2e      	ldr	r2, [sp, #184]	; 0xb8
 8009766:	3301      	adds	r3, #1
 8009768:	3108      	adds	r1, #8
 800976a:	6038      	str	r0, [r7, #0]
 800976c:	2c10      	cmp	r4, #16
 800976e:	dd00      	ble.n	8009772 <_svfprintf_r+0x7ca>
 8009770:	e2d6      	b.n	8009d20 <_svfprintf_r+0xd78>
 8009772:	607c      	str	r4, [r7, #4]
 8009774:	18a4      	adds	r4, r4, r2
 8009776:	000f      	movs	r7, r1
 8009778:	942e      	str	r4, [sp, #184]	; 0xb8
 800977a:	932d      	str	r3, [sp, #180]	; 0xb4
 800977c:	2b07      	cmp	r3, #7
 800977e:	dd09      	ble.n	8009794 <_svfprintf_r+0x7ec>
 8009780:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8009782:	980a      	ldr	r0, [sp, #40]	; 0x28
 8009784:	aa2c      	add	r2, sp, #176	; 0xb0
 8009786:	f001 ff33 	bl	800b5f0 <__ssprint_r>
 800978a:	2800      	cmp	r0, #0
 800978c:	d001      	beq.n	8009792 <_svfprintf_r+0x7ea>
 800978e:	f000 fdea 	bl	800a366 <_svfprintf_r+0x13be>
 8009792:	af2f      	add	r7, sp, #188	; 0xbc
 8009794:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8009796:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8009798:	1a9c      	subs	r4, r3, r2
 800979a:	2c00      	cmp	r4, #0
 800979c:	dd1a      	ble.n	80097d4 <_svfprintf_r+0x82c>
 800979e:	0039      	movs	r1, r7
 80097a0:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
 80097a2:	481d      	ldr	r0, [pc, #116]	; (8009818 <_svfprintf_r+0x870>)
 80097a4:	9a2e      	ldr	r2, [sp, #184]	; 0xb8
 80097a6:	3301      	adds	r3, #1
 80097a8:	3108      	adds	r1, #8
 80097aa:	6038      	str	r0, [r7, #0]
 80097ac:	2c10      	cmp	r4, #16
 80097ae:	dd00      	ble.n	80097b2 <_svfprintf_r+0x80a>
 80097b0:	e2c9      	b.n	8009d46 <_svfprintf_r+0xd9e>
 80097b2:	18a2      	adds	r2, r4, r2
 80097b4:	607c      	str	r4, [r7, #4]
 80097b6:	922e      	str	r2, [sp, #184]	; 0xb8
 80097b8:	000f      	movs	r7, r1
 80097ba:	932d      	str	r3, [sp, #180]	; 0xb4
 80097bc:	2b07      	cmp	r3, #7
 80097be:	dd09      	ble.n	80097d4 <_svfprintf_r+0x82c>
 80097c0:	990b      	ldr	r1, [sp, #44]	; 0x2c
 80097c2:	980a      	ldr	r0, [sp, #40]	; 0x28
 80097c4:	aa2c      	add	r2, sp, #176	; 0xb0
 80097c6:	f001 ff13 	bl	800b5f0 <__ssprint_r>
 80097ca:	2800      	cmp	r0, #0
 80097cc:	d001      	beq.n	80097d2 <_svfprintf_r+0x82a>
 80097ce:	f000 fdca 	bl	800a366 <_svfprintf_r+0x13be>
 80097d2:	af2f      	add	r7, sp, #188	; 0xbc
 80097d4:	9b2e      	ldr	r3, [sp, #184]	; 0xb8
 80097d6:	9319      	str	r3, [sp, #100]	; 0x64
 80097d8:	05f3      	lsls	r3, r6, #23
 80097da:	d500      	bpl.n	80097de <_svfprintf_r+0x836>
 80097dc:	e2ce      	b.n	8009d7c <_svfprintf_r+0xdd4>
 80097de:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80097e0:	9b08      	ldr	r3, [sp, #32]
 80097e2:	4694      	mov	ip, r2
 80097e4:	603b      	str	r3, [r7, #0]
 80097e6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80097e8:	607b      	str	r3, [r7, #4]
 80097ea:	9b19      	ldr	r3, [sp, #100]	; 0x64
 80097ec:	4463      	add	r3, ip
 80097ee:	932e      	str	r3, [sp, #184]	; 0xb8
 80097f0:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
 80097f2:	3301      	adds	r3, #1
 80097f4:	932d      	str	r3, [sp, #180]	; 0xb4
 80097f6:	2b07      	cmp	r3, #7
 80097f8:	dd00      	ble.n	80097fc <_svfprintf_r+0x854>
 80097fa:	e3a3      	b.n	8009f44 <_svfprintf_r+0xf9c>
 80097fc:	3708      	adds	r7, #8
 80097fe:	e301      	b.n	8009e04 <_svfprintf_r+0xe5c>
 8009800:	0800e7b4 	.word	0x0800e7b4
 8009804:	0800e7c5 	.word	0x0800e7c5
 8009808:	40300000 	.word	0x40300000
 800980c:	3fe00000 	.word	0x3fe00000
 8009810:	fffffbff 	.word	0xfffffbff
 8009814:	0800e7d8 	.word	0x0800e7d8
 8009818:	0800e7e8 	.word	0x0800e7e8
 800981c:	9b08      	ldr	r3, [sp, #32]
 800981e:	930c      	str	r3, [sp, #48]	; 0x30
 8009820:	e610      	b.n	8009444 <_svfprintf_r+0x49c>
 8009822:	2306      	movs	r3, #6
 8009824:	e5fd      	b.n	8009422 <_svfprintf_r+0x47a>
 8009826:	930e      	str	r3, [sp, #56]	; 0x38
 8009828:	2300      	movs	r3, #0
 800982a:	e61a      	b.n	8009462 <_svfprintf_r+0x4ba>
 800982c:	7010      	strb	r0, [r2, #0]
 800982e:	e684      	b.n	800953a <_svfprintf_r+0x592>
 8009830:	7018      	strb	r0, [r3, #0]
 8009832:	3301      	adds	r3, #1
 8009834:	1aca      	subs	r2, r1, r3
 8009836:	d5fb      	bpl.n	8009830 <_svfprintf_r+0x888>
 8009838:	9a20      	ldr	r2, [sp, #128]	; 0x80
 800983a:	2300      	movs	r3, #0
 800983c:	3201      	adds	r2, #1
 800983e:	db01      	blt.n	8009844 <_svfprintf_r+0x89c>
 8009840:	9b20      	ldr	r3, [sp, #128]	; 0x80
 8009842:	3301      	adds	r3, #1
 8009844:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8009846:	18d3      	adds	r3, r2, r3
 8009848:	9323      	str	r3, [sp, #140]	; 0x8c
 800984a:	e684      	b.n	8009556 <_svfprintf_r+0x5ae>
 800984c:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800984e:	9920      	ldr	r1, [sp, #128]	; 0x80
 8009850:	2030      	movs	r0, #48	; 0x30
 8009852:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8009854:	1851      	adds	r1, r2, r1
 8009856:	e7ed      	b.n	8009834 <_svfprintf_r+0x88c>
 8009858:	9a10      	ldr	r2, [sp, #64]	; 0x40
 800985a:	2303      	movs	r3, #3
 800985c:	9c09      	ldr	r4, [sp, #36]	; 0x24
 800985e:	2a46      	cmp	r2, #70	; 0x46
 8009860:	d006      	beq.n	8009870 <_svfprintf_r+0x8c8>
 8009862:	0014      	movs	r4, r2
 8009864:	3c45      	subs	r4, #69	; 0x45
 8009866:	4262      	negs	r2, r4
 8009868:	4154      	adcs	r4, r2
 800986a:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800986c:	3b01      	subs	r3, #1
 800986e:	1914      	adds	r4, r2, r4
 8009870:	aa2a      	add	r2, sp, #168	; 0xa8
 8009872:	9204      	str	r2, [sp, #16]
 8009874:	aa27      	add	r2, sp, #156	; 0x9c
 8009876:	9203      	str	r2, [sp, #12]
 8009878:	aa26      	add	r2, sp, #152	; 0x98
 800987a:	9202      	str	r2, [sp, #8]
 800987c:	9300      	str	r3, [sp, #0]
 800987e:	002a      	movs	r2, r5
 8009880:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8009882:	980a      	ldr	r0, [sp, #40]	; 0x28
 8009884:	9401      	str	r4, [sp, #4]
 8009886:	f001 f8af 	bl	800a9e8 <_dtoa_r>
 800988a:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800988c:	9008      	str	r0, [sp, #32]
 800988e:	2b47      	cmp	r3, #71	; 0x47
 8009890:	d103      	bne.n	800989a <_svfprintf_r+0x8f2>
 8009892:	07f3      	lsls	r3, r6, #31
 8009894:	d401      	bmi.n	800989a <_svfprintf_r+0x8f2>
 8009896:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
 8009898:	e65e      	b.n	8009558 <_svfprintf_r+0x5b0>
 800989a:	9b08      	ldr	r3, [sp, #32]
 800989c:	191b      	adds	r3, r3, r4
 800989e:	9311      	str	r3, [sp, #68]	; 0x44
 80098a0:	9b10      	ldr	r3, [sp, #64]	; 0x40
 80098a2:	2b46      	cmp	r3, #70	; 0x46
 80098a4:	d112      	bne.n	80098cc <_svfprintf_r+0x924>
 80098a6:	9b08      	ldr	r3, [sp, #32]
 80098a8:	781b      	ldrb	r3, [r3, #0]
 80098aa:	2b30      	cmp	r3, #48	; 0x30
 80098ac:	d10a      	bne.n	80098c4 <_svfprintf_r+0x91c>
 80098ae:	2200      	movs	r2, #0
 80098b0:	2300      	movs	r3, #0
 80098b2:	0028      	movs	r0, r5
 80098b4:	990e      	ldr	r1, [sp, #56]	; 0x38
 80098b6:	f7f6 fdc7 	bl	8000448 <__aeabi_dcmpeq>
 80098ba:	2800      	cmp	r0, #0
 80098bc:	d102      	bne.n	80098c4 <_svfprintf_r+0x91c>
 80098be:	2301      	movs	r3, #1
 80098c0:	1b1b      	subs	r3, r3, r4
 80098c2:	9326      	str	r3, [sp, #152]	; 0x98
 80098c4:	9a11      	ldr	r2, [sp, #68]	; 0x44
 80098c6:	9b26      	ldr	r3, [sp, #152]	; 0x98
 80098c8:	18d3      	adds	r3, r2, r3
 80098ca:	9311      	str	r3, [sp, #68]	; 0x44
 80098cc:	2200      	movs	r2, #0
 80098ce:	2300      	movs	r3, #0
 80098d0:	0028      	movs	r0, r5
 80098d2:	990e      	ldr	r1, [sp, #56]	; 0x38
 80098d4:	f7f6 fdb8 	bl	8000448 <__aeabi_dcmpeq>
 80098d8:	2800      	cmp	r0, #0
 80098da:	d001      	beq.n	80098e0 <_svfprintf_r+0x938>
 80098dc:	9b11      	ldr	r3, [sp, #68]	; 0x44
 80098de:	932a      	str	r3, [sp, #168]	; 0xa8
 80098e0:	2230      	movs	r2, #48	; 0x30
 80098e2:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
 80098e4:	9911      	ldr	r1, [sp, #68]	; 0x44
 80098e6:	4299      	cmp	r1, r3
 80098e8:	d9d5      	bls.n	8009896 <_svfprintf_r+0x8ee>
 80098ea:	1c59      	adds	r1, r3, #1
 80098ec:	912a      	str	r1, [sp, #168]	; 0xa8
 80098ee:	701a      	strb	r2, [r3, #0]
 80098f0:	e7f7      	b.n	80098e2 <_svfprintf_r+0x93a>
 80098f2:	9b10      	ldr	r3, [sp, #64]	; 0x40
 80098f4:	2b46      	cmp	r3, #70	; 0x46
 80098f6:	d000      	beq.n	80098fa <_svfprintf_r+0x952>
 80098f8:	e63f      	b.n	800957a <_svfprintf_r+0x5d2>
 80098fa:	2201      	movs	r2, #1
 80098fc:	0033      	movs	r3, r6
 80098fe:	9909      	ldr	r1, [sp, #36]	; 0x24
 8009900:	4013      	ands	r3, r2
 8009902:	430b      	orrs	r3, r1
 8009904:	2d00      	cmp	r5, #0
 8009906:	dd2c      	ble.n	8009962 <_svfprintf_r+0x9ba>
 8009908:	2b00      	cmp	r3, #0
 800990a:	d046      	beq.n	800999a <_svfprintf_r+0x9f2>
 800990c:	000a      	movs	r2, r1
 800990e:	9b16      	ldr	r3, [sp, #88]	; 0x58
 8009910:	18eb      	adds	r3, r5, r3
 8009912:	18d3      	adds	r3, r2, r3
 8009914:	9309      	str	r3, [sp, #36]	; 0x24
 8009916:	2366      	movs	r3, #102	; 0x66
 8009918:	930f      	str	r3, [sp, #60]	; 0x3c
 800991a:	e030      	b.n	800997e <_svfprintf_r+0x9d6>
 800991c:	781c      	ldrb	r4, [r3, #0]
 800991e:	3301      	adds	r3, #1
 8009920:	7014      	strb	r4, [r2, #0]
 8009922:	3201      	adds	r2, #1
 8009924:	e668      	b.n	80095f8 <_svfprintf_r+0x650>
 8009926:	222a      	movs	r2, #42	; 0x2a
 8009928:	ab1e      	add	r3, sp, #120	; 0x78
 800992a:	18d2      	adds	r2, r2, r3
 800992c:	2800      	cmp	r0, #0
 800992e:	d104      	bne.n	800993a <_svfprintf_r+0x992>
 8009930:	2330      	movs	r3, #48	; 0x30
 8009932:	222b      	movs	r2, #43	; 0x2b
 8009934:	708b      	strb	r3, [r1, #2]
 8009936:	ab1e      	add	r3, sp, #120	; 0x78
 8009938:	18d2      	adds	r2, r2, r3
 800993a:	3430      	adds	r4, #48	; 0x30
 800993c:	1c53      	adds	r3, r2, #1
 800993e:	7014      	strb	r4, [r2, #0]
 8009940:	e669      	b.n	8009616 <_svfprintf_r+0x66e>
 8009942:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8009944:	42ab      	cmp	r3, r5
 8009946:	dd12      	ble.n	800996e <_svfprintf_r+0x9c6>
 8009948:	9a16      	ldr	r2, [sp, #88]	; 0x58
 800994a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800994c:	4694      	mov	ip, r2
 800994e:	4463      	add	r3, ip
 8009950:	9309      	str	r3, [sp, #36]	; 0x24
 8009952:	2367      	movs	r3, #103	; 0x67
 8009954:	930f      	str	r3, [sp, #60]	; 0x3c
 8009956:	2d00      	cmp	r5, #0
 8009958:	dc11      	bgt.n	800997e <_svfprintf_r+0x9d6>
 800995a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800995c:	1b5b      	subs	r3, r3, r5
 800995e:	3301      	adds	r3, #1
 8009960:	e00c      	b.n	800997c <_svfprintf_r+0x9d4>
 8009962:	2b00      	cmp	r3, #0
 8009964:	d01b      	beq.n	800999e <_svfprintf_r+0x9f6>
 8009966:	9b16      	ldr	r3, [sp, #88]	; 0x58
 8009968:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800996a:	3301      	adds	r3, #1
 800996c:	e7d1      	b.n	8009912 <_svfprintf_r+0x96a>
 800996e:	2367      	movs	r3, #103	; 0x67
 8009970:	9509      	str	r5, [sp, #36]	; 0x24
 8009972:	930f      	str	r3, [sp, #60]	; 0x3c
 8009974:	07f3      	lsls	r3, r6, #31
 8009976:	d502      	bpl.n	800997e <_svfprintf_r+0x9d6>
 8009978:	9b16      	ldr	r3, [sp, #88]	; 0x58
 800997a:	18eb      	adds	r3, r5, r3
 800997c:	9309      	str	r3, [sp, #36]	; 0x24
 800997e:	2380      	movs	r3, #128	; 0x80
 8009980:	0032      	movs	r2, r6
 8009982:	00db      	lsls	r3, r3, #3
 8009984:	401a      	ands	r2, r3
 8009986:	9211      	str	r2, [sp, #68]	; 0x44
 8009988:	2200      	movs	r2, #0
 800998a:	9210      	str	r2, [sp, #64]	; 0x40
 800998c:	421e      	tst	r6, r3
 800998e:	d100      	bne.n	8009992 <_svfprintf_r+0x9ea>
 8009990:	e65d      	b.n	800964e <_svfprintf_r+0x6a6>
 8009992:	4295      	cmp	r5, r2
 8009994:	dc25      	bgt.n	80099e2 <_svfprintf_r+0xa3a>
 8009996:	9211      	str	r2, [sp, #68]	; 0x44
 8009998:	e659      	b.n	800964e <_svfprintf_r+0x6a6>
 800999a:	9509      	str	r5, [sp, #36]	; 0x24
 800999c:	e7bb      	b.n	8009916 <_svfprintf_r+0x96e>
 800999e:	2366      	movs	r3, #102	; 0x66
 80099a0:	9209      	str	r2, [sp, #36]	; 0x24
 80099a2:	930f      	str	r3, [sp, #60]	; 0x3c
 80099a4:	e7eb      	b.n	800997e <_svfprintf_r+0x9d6>
 80099a6:	42ab      	cmp	r3, r5
 80099a8:	da0e      	bge.n	80099c8 <_svfprintf_r+0xa20>
 80099aa:	1aed      	subs	r5, r5, r3
 80099ac:	9b12      	ldr	r3, [sp, #72]	; 0x48
 80099ae:	785b      	ldrb	r3, [r3, #1]
 80099b0:	2b00      	cmp	r3, #0
 80099b2:	d012      	beq.n	80099da <_svfprintf_r+0xa32>
 80099b4:	9b11      	ldr	r3, [sp, #68]	; 0x44
 80099b6:	3301      	adds	r3, #1
 80099b8:	9311      	str	r3, [sp, #68]	; 0x44
 80099ba:	9b12      	ldr	r3, [sp, #72]	; 0x48
 80099bc:	3301      	adds	r3, #1
 80099be:	9312      	str	r3, [sp, #72]	; 0x48
 80099c0:	9b12      	ldr	r3, [sp, #72]	; 0x48
 80099c2:	781b      	ldrb	r3, [r3, #0]
 80099c4:	2bff      	cmp	r3, #255	; 0xff
 80099c6:	d1ee      	bne.n	80099a6 <_svfprintf_r+0x9fe>
 80099c8:	9a10      	ldr	r2, [sp, #64]	; 0x40
 80099ca:	9b11      	ldr	r3, [sp, #68]	; 0x44
 80099cc:	189b      	adds	r3, r3, r2
 80099ce:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
 80099d0:	4353      	muls	r3, r2
 80099d2:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80099d4:	189b      	adds	r3, r3, r2
 80099d6:	9309      	str	r3, [sp, #36]	; 0x24
 80099d8:	e639      	b.n	800964e <_svfprintf_r+0x6a6>
 80099da:	9b10      	ldr	r3, [sp, #64]	; 0x40
 80099dc:	3301      	adds	r3, #1
 80099de:	9310      	str	r3, [sp, #64]	; 0x40
 80099e0:	e7ee      	b.n	80099c0 <_svfprintf_r+0xa18>
 80099e2:	9b10      	ldr	r3, [sp, #64]	; 0x40
 80099e4:	9311      	str	r3, [sp, #68]	; 0x44
 80099e6:	e7eb      	b.n	80099c0 <_svfprintf_r+0xa18>
 80099e8:	1d23      	adds	r3, r4, #4
 80099ea:	930d      	str	r3, [sp, #52]	; 0x34
 80099ec:	06b3      	lsls	r3, r6, #26
 80099ee:	d509      	bpl.n	8009a04 <_svfprintf_r+0xa5c>
 80099f0:	6823      	ldr	r3, [r4, #0]
 80099f2:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 80099f4:	601a      	str	r2, [r3, #0]
 80099f6:	17d2      	asrs	r2, r2, #31
 80099f8:	605a      	str	r2, [r3, #4]
 80099fa:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 80099fc:	9c0d      	ldr	r4, [sp, #52]	; 0x34
 80099fe:	9308      	str	r3, [sp, #32]
 8009a00:	f7ff fb0d 	bl	800901e <_svfprintf_r+0x76>
 8009a04:	06f3      	lsls	r3, r6, #27
 8009a06:	d503      	bpl.n	8009a10 <_svfprintf_r+0xa68>
 8009a08:	6823      	ldr	r3, [r4, #0]
 8009a0a:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 8009a0c:	601a      	str	r2, [r3, #0]
 8009a0e:	e7f4      	b.n	80099fa <_svfprintf_r+0xa52>
 8009a10:	0673      	lsls	r3, r6, #25
 8009a12:	d503      	bpl.n	8009a1c <_svfprintf_r+0xa74>
 8009a14:	6823      	ldr	r3, [r4, #0]
 8009a16:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 8009a18:	801a      	strh	r2, [r3, #0]
 8009a1a:	e7ee      	b.n	80099fa <_svfprintf_r+0xa52>
 8009a1c:	05b6      	lsls	r6, r6, #22
 8009a1e:	d5f3      	bpl.n	8009a08 <_svfprintf_r+0xa60>
 8009a20:	6823      	ldr	r3, [r4, #0]
 8009a22:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 8009a24:	701a      	strb	r2, [r3, #0]
 8009a26:	e7e8      	b.n	80099fa <_svfprintf_r+0xa52>
 8009a28:	2310      	movs	r3, #16
 8009a2a:	431e      	orrs	r6, r3
 8009a2c:	2320      	movs	r3, #32
 8009a2e:	0030      	movs	r0, r6
 8009a30:	4018      	ands	r0, r3
 8009a32:	421e      	tst	r6, r3
 8009a34:	d00f      	beq.n	8009a56 <_svfprintf_r+0xaae>
 8009a36:	3b19      	subs	r3, #25
 8009a38:	3407      	adds	r4, #7
 8009a3a:	439c      	bics	r4, r3
 8009a3c:	0022      	movs	r2, r4
 8009a3e:	ca18      	ldmia	r2!, {r3, r4}
 8009a40:	9306      	str	r3, [sp, #24]
 8009a42:	9407      	str	r4, [sp, #28]
 8009a44:	920d      	str	r2, [sp, #52]	; 0x34
 8009a46:	4bc9      	ldr	r3, [pc, #804]	; (8009d6c <_svfprintf_r+0xdc4>)
 8009a48:	401e      	ands	r6, r3
 8009a4a:	2300      	movs	r3, #0
 8009a4c:	221b      	movs	r2, #27
 8009a4e:	a91e      	add	r1, sp, #120	; 0x78
 8009a50:	1852      	adds	r2, r2, r1
 8009a52:	2100      	movs	r1, #0
 8009a54:	e430      	b.n	80092b8 <_svfprintf_r+0x310>
 8009a56:	0022      	movs	r2, r4
 8009a58:	ca08      	ldmia	r2!, {r3}
 8009a5a:	0031      	movs	r1, r6
 8009a5c:	920d      	str	r2, [sp, #52]	; 0x34
 8009a5e:	2210      	movs	r2, #16
 8009a60:	4011      	ands	r1, r2
 8009a62:	4216      	tst	r6, r2
 8009a64:	d002      	beq.n	8009a6c <_svfprintf_r+0xac4>
 8009a66:	9306      	str	r3, [sp, #24]
 8009a68:	9007      	str	r0, [sp, #28]
 8009a6a:	e7ec      	b.n	8009a46 <_svfprintf_r+0xa9e>
 8009a6c:	2240      	movs	r2, #64	; 0x40
 8009a6e:	0030      	movs	r0, r6
 8009a70:	4010      	ands	r0, r2
 8009a72:	4216      	tst	r6, r2
 8009a74:	d003      	beq.n	8009a7e <_svfprintf_r+0xad6>
 8009a76:	b29b      	uxth	r3, r3
 8009a78:	9306      	str	r3, [sp, #24]
 8009a7a:	9107      	str	r1, [sp, #28]
 8009a7c:	e7e3      	b.n	8009a46 <_svfprintf_r+0xa9e>
 8009a7e:	2280      	movs	r2, #128	; 0x80
 8009a80:	0031      	movs	r1, r6
 8009a82:	0092      	lsls	r2, r2, #2
 8009a84:	4011      	ands	r1, r2
 8009a86:	4216      	tst	r6, r2
 8009a88:	d0f6      	beq.n	8009a78 <_svfprintf_r+0xad0>
 8009a8a:	b2db      	uxtb	r3, r3
 8009a8c:	e7eb      	b.n	8009a66 <_svfprintf_r+0xabe>
 8009a8e:	0023      	movs	r3, r4
 8009a90:	cb04      	ldmia	r3!, {r2}
 8009a92:	49b7      	ldr	r1, [pc, #732]	; (8009d70 <_svfprintf_r+0xdc8>)
 8009a94:	9206      	str	r2, [sp, #24]
 8009a96:	aa25      	add	r2, sp, #148	; 0x94
 8009a98:	8011      	strh	r1, [r2, #0]
 8009a9a:	4ab6      	ldr	r2, [pc, #728]	; (8009d74 <_svfprintf_r+0xdcc>)
 8009a9c:	930d      	str	r3, [sp, #52]	; 0x34
 8009a9e:	2300      	movs	r3, #0
 8009aa0:	921f      	str	r2, [sp, #124]	; 0x7c
 8009aa2:	2278      	movs	r2, #120	; 0x78
 8009aa4:	9307      	str	r3, [sp, #28]
 8009aa6:	3302      	adds	r3, #2
 8009aa8:	431e      	orrs	r6, r3
 8009aaa:	920f      	str	r2, [sp, #60]	; 0x3c
 8009aac:	e7ce      	b.n	8009a4c <_svfprintf_r+0xaa4>
 8009aae:	0023      	movs	r3, r4
 8009ab0:	cb04      	ldmia	r3!, {r2}
 8009ab2:	2400      	movs	r4, #0
 8009ab4:	930d      	str	r3, [sp, #52]	; 0x34
 8009ab6:	231b      	movs	r3, #27
 8009ab8:	9208      	str	r2, [sp, #32]
 8009aba:	aa1e      	add	r2, sp, #120	; 0x78
 8009abc:	189b      	adds	r3, r3, r2
 8009abe:	701c      	strb	r4, [r3, #0]
 8009ac0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009ac2:	3301      	adds	r3, #1
 8009ac4:	d00e      	beq.n	8009ae4 <_svfprintf_r+0xb3c>
 8009ac6:	0021      	movs	r1, r4
 8009ac8:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8009aca:	9808      	ldr	r0, [sp, #32]
 8009acc:	f000 fe13 	bl	800a6f6 <memchr>
 8009ad0:	900c      	str	r0, [sp, #48]	; 0x30
 8009ad2:	42a0      	cmp	r0, r4
 8009ad4:	d100      	bne.n	8009ad8 <_svfprintf_r+0xb30>
 8009ad6:	e10d      	b.n	8009cf4 <_svfprintf_r+0xd4c>
 8009ad8:	9a08      	ldr	r2, [sp, #32]
 8009ada:	1a83      	subs	r3, r0, r2
 8009adc:	9309      	str	r3, [sp, #36]	; 0x24
 8009ade:	0023      	movs	r3, r4
 8009ae0:	940c      	str	r4, [sp, #48]	; 0x30
 8009ae2:	e44e      	b.n	8009382 <_svfprintf_r+0x3da>
 8009ae4:	9808      	ldr	r0, [sp, #32]
 8009ae6:	f7f6 fb0d 	bl	8000104 <strlen>
 8009aea:	9009      	str	r0, [sp, #36]	; 0x24
 8009aec:	e7f7      	b.n	8009ade <_svfprintf_r+0xb36>
 8009aee:	2310      	movs	r3, #16
 8009af0:	431e      	orrs	r6, r3
 8009af2:	2320      	movs	r3, #32
 8009af4:	0030      	movs	r0, r6
 8009af6:	4018      	ands	r0, r3
 8009af8:	421e      	tst	r6, r3
 8009afa:	d009      	beq.n	8009b10 <_svfprintf_r+0xb68>
 8009afc:	3b19      	subs	r3, #25
 8009afe:	3407      	adds	r4, #7
 8009b00:	439c      	bics	r4, r3
 8009b02:	0022      	movs	r2, r4
 8009b04:	ca18      	ldmia	r2!, {r3, r4}
 8009b06:	9306      	str	r3, [sp, #24]
 8009b08:	9407      	str	r4, [sp, #28]
 8009b0a:	920d      	str	r2, [sp, #52]	; 0x34
 8009b0c:	2301      	movs	r3, #1
 8009b0e:	e79d      	b.n	8009a4c <_svfprintf_r+0xaa4>
 8009b10:	0023      	movs	r3, r4
 8009b12:	cb04      	ldmia	r3!, {r2}
 8009b14:	0031      	movs	r1, r6
 8009b16:	930d      	str	r3, [sp, #52]	; 0x34
 8009b18:	2310      	movs	r3, #16
 8009b1a:	4019      	ands	r1, r3
 8009b1c:	421e      	tst	r6, r3
 8009b1e:	d003      	beq.n	8009b28 <_svfprintf_r+0xb80>
 8009b20:	9206      	str	r2, [sp, #24]
 8009b22:	9007      	str	r0, [sp, #28]
 8009b24:	3b0f      	subs	r3, #15
 8009b26:	e791      	b.n	8009a4c <_svfprintf_r+0xaa4>
 8009b28:	2340      	movs	r3, #64	; 0x40
 8009b2a:	0030      	movs	r0, r6
 8009b2c:	4018      	ands	r0, r3
 8009b2e:	421e      	tst	r6, r3
 8009b30:	d003      	beq.n	8009b3a <_svfprintf_r+0xb92>
 8009b32:	b293      	uxth	r3, r2
 8009b34:	9306      	str	r3, [sp, #24]
 8009b36:	9107      	str	r1, [sp, #28]
 8009b38:	e7e8      	b.n	8009b0c <_svfprintf_r+0xb64>
 8009b3a:	2380      	movs	r3, #128	; 0x80
 8009b3c:	0031      	movs	r1, r6
 8009b3e:	009b      	lsls	r3, r3, #2
 8009b40:	4019      	ands	r1, r3
 8009b42:	421e      	tst	r6, r3
 8009b44:	d003      	beq.n	8009b4e <_svfprintf_r+0xba6>
 8009b46:	b2d3      	uxtb	r3, r2
 8009b48:	9306      	str	r3, [sp, #24]
 8009b4a:	9007      	str	r0, [sp, #28]
 8009b4c:	e7de      	b.n	8009b0c <_svfprintf_r+0xb64>
 8009b4e:	9206      	str	r2, [sp, #24]
 8009b50:	e7f1      	b.n	8009b36 <_svfprintf_r+0xb8e>
 8009b52:	4b89      	ldr	r3, [pc, #548]	; (8009d78 <_svfprintf_r+0xdd0>)
 8009b54:	0030      	movs	r0, r6
 8009b56:	931f      	str	r3, [sp, #124]	; 0x7c
 8009b58:	2320      	movs	r3, #32
 8009b5a:	4018      	ands	r0, r3
 8009b5c:	421e      	tst	r6, r3
 8009b5e:	d01a      	beq.n	8009b96 <_svfprintf_r+0xbee>
 8009b60:	3b19      	subs	r3, #25
 8009b62:	3407      	adds	r4, #7
 8009b64:	439c      	bics	r4, r3
 8009b66:	0022      	movs	r2, r4
 8009b68:	ca18      	ldmia	r2!, {r3, r4}
 8009b6a:	9306      	str	r3, [sp, #24]
 8009b6c:	9407      	str	r4, [sp, #28]
 8009b6e:	920d      	str	r2, [sp, #52]	; 0x34
 8009b70:	07f3      	lsls	r3, r6, #31
 8009b72:	d50a      	bpl.n	8009b8a <_svfprintf_r+0xbe2>
 8009b74:	9b06      	ldr	r3, [sp, #24]
 8009b76:	9a07      	ldr	r2, [sp, #28]
 8009b78:	4313      	orrs	r3, r2
 8009b7a:	d006      	beq.n	8009b8a <_svfprintf_r+0xbe2>
 8009b7c:	2230      	movs	r2, #48	; 0x30
 8009b7e:	ab25      	add	r3, sp, #148	; 0x94
 8009b80:	701a      	strb	r2, [r3, #0]
 8009b82:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8009b84:	705a      	strb	r2, [r3, #1]
 8009b86:	2302      	movs	r3, #2
 8009b88:	431e      	orrs	r6, r3
 8009b8a:	4b78      	ldr	r3, [pc, #480]	; (8009d6c <_svfprintf_r+0xdc4>)
 8009b8c:	401e      	ands	r6, r3
 8009b8e:	2302      	movs	r3, #2
 8009b90:	e75c      	b.n	8009a4c <_svfprintf_r+0xaa4>
 8009b92:	4b78      	ldr	r3, [pc, #480]	; (8009d74 <_svfprintf_r+0xdcc>)
 8009b94:	e7de      	b.n	8009b54 <_svfprintf_r+0xbac>
 8009b96:	0023      	movs	r3, r4
 8009b98:	cb04      	ldmia	r3!, {r2}
 8009b9a:	0031      	movs	r1, r6
 8009b9c:	930d      	str	r3, [sp, #52]	; 0x34
 8009b9e:	2310      	movs	r3, #16
 8009ba0:	4019      	ands	r1, r3
 8009ba2:	421e      	tst	r6, r3
 8009ba4:	d002      	beq.n	8009bac <_svfprintf_r+0xc04>
 8009ba6:	9206      	str	r2, [sp, #24]
 8009ba8:	9007      	str	r0, [sp, #28]
 8009baa:	e7e1      	b.n	8009b70 <_svfprintf_r+0xbc8>
 8009bac:	2340      	movs	r3, #64	; 0x40
 8009bae:	0030      	movs	r0, r6
 8009bb0:	4018      	ands	r0, r3
 8009bb2:	421e      	tst	r6, r3
 8009bb4:	d003      	beq.n	8009bbe <_svfprintf_r+0xc16>
 8009bb6:	b293      	uxth	r3, r2
 8009bb8:	9306      	str	r3, [sp, #24]
 8009bba:	9107      	str	r1, [sp, #28]
 8009bbc:	e7d8      	b.n	8009b70 <_svfprintf_r+0xbc8>
 8009bbe:	2380      	movs	r3, #128	; 0x80
 8009bc0:	0031      	movs	r1, r6
 8009bc2:	009b      	lsls	r3, r3, #2
 8009bc4:	4019      	ands	r1, r3
 8009bc6:	421e      	tst	r6, r3
 8009bc8:	d002      	beq.n	8009bd0 <_svfprintf_r+0xc28>
 8009bca:	b2d3      	uxtb	r3, r2
 8009bcc:	9306      	str	r3, [sp, #24]
 8009bce:	e7eb      	b.n	8009ba8 <_svfprintf_r+0xc00>
 8009bd0:	9206      	str	r2, [sp, #24]
 8009bd2:	e7f2      	b.n	8009bba <_svfprintf_r+0xc12>
 8009bd4:	9b07      	ldr	r3, [sp, #28]
 8009bd6:	2b00      	cmp	r3, #0
 8009bd8:	d10a      	bne.n	8009bf0 <_svfprintf_r+0xc48>
 8009bda:	9b06      	ldr	r3, [sp, #24]
 8009bdc:	2b09      	cmp	r3, #9
 8009bde:	d807      	bhi.n	8009bf0 <_svfprintf_r+0xc48>
 8009be0:	23e7      	movs	r3, #231	; 0xe7
 8009be2:	aa1e      	add	r2, sp, #120	; 0x78
 8009be4:	189b      	adds	r3, r3, r2
 8009be6:	9a06      	ldr	r2, [sp, #24]
 8009be8:	3230      	adds	r2, #48	; 0x30
 8009bea:	701a      	strb	r2, [r3, #0]
 8009bec:	f000 fc18 	bl	800a420 <_svfprintf_r+0x1478>
 8009bf0:	2680      	movs	r6, #128	; 0x80
 8009bf2:	2300      	movs	r3, #0
 8009bf4:	00f6      	lsls	r6, r6, #3
 8009bf6:	930e      	str	r3, [sp, #56]	; 0x38
 8009bf8:	ad58      	add	r5, sp, #352	; 0x160
 8009bfa:	4026      	ands	r6, r4
 8009bfc:	220a      	movs	r2, #10
 8009bfe:	9806      	ldr	r0, [sp, #24]
 8009c00:	9907      	ldr	r1, [sp, #28]
 8009c02:	2300      	movs	r3, #0
 8009c04:	f7f6 fc4e 	bl	80004a4 <__aeabi_uldivmod>
 8009c08:	1e6b      	subs	r3, r5, #1
 8009c0a:	3230      	adds	r2, #48	; 0x30
 8009c0c:	9308      	str	r3, [sp, #32]
 8009c0e:	701a      	strb	r2, [r3, #0]
 8009c10:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8009c12:	900c      	str	r0, [sp, #48]	; 0x30
 8009c14:	3301      	adds	r3, #1
 8009c16:	9110      	str	r1, [sp, #64]	; 0x40
 8009c18:	930e      	str	r3, [sp, #56]	; 0x38
 8009c1a:	2e00      	cmp	r6, #0
 8009c1c:	d01d      	beq.n	8009c5a <_svfprintf_r+0xcb2>
 8009c1e:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8009c20:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8009c22:	781b      	ldrb	r3, [r3, #0]
 8009c24:	429a      	cmp	r2, r3
 8009c26:	d118      	bne.n	8009c5a <_svfprintf_r+0xcb2>
 8009c28:	2aff      	cmp	r2, #255	; 0xff
 8009c2a:	d016      	beq.n	8009c5a <_svfprintf_r+0xcb2>
 8009c2c:	9b07      	ldr	r3, [sp, #28]
 8009c2e:	2b00      	cmp	r3, #0
 8009c30:	d102      	bne.n	8009c38 <_svfprintf_r+0xc90>
 8009c32:	9b06      	ldr	r3, [sp, #24]
 8009c34:	2b09      	cmp	r3, #9
 8009c36:	d910      	bls.n	8009c5a <_svfprintf_r+0xcb2>
 8009c38:	9b08      	ldr	r3, [sp, #32]
 8009c3a:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
 8009c3c:	991d      	ldr	r1, [sp, #116]	; 0x74
 8009c3e:	1a9b      	subs	r3, r3, r2
 8009c40:	0018      	movs	r0, r3
 8009c42:	9308      	str	r3, [sp, #32]
 8009c44:	f000 fd0e 	bl	800a664 <strncpy>
 8009c48:	2200      	movs	r2, #0
 8009c4a:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8009c4c:	920e      	str	r2, [sp, #56]	; 0x38
 8009c4e:	785b      	ldrb	r3, [r3, #1]
 8009c50:	1e5a      	subs	r2, r3, #1
 8009c52:	4193      	sbcs	r3, r2
 8009c54:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8009c56:	18d3      	adds	r3, r2, r3
 8009c58:	9312      	str	r3, [sp, #72]	; 0x48
 8009c5a:	9b07      	ldr	r3, [sp, #28]
 8009c5c:	2b00      	cmp	r3, #0
 8009c5e:	d10f      	bne.n	8009c80 <_svfprintf_r+0xcd8>
 8009c60:	9b06      	ldr	r3, [sp, #24]
 8009c62:	2b09      	cmp	r3, #9
 8009c64:	d80c      	bhi.n	8009c80 <_svfprintf_r+0xcd8>
 8009c66:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009c68:	9a08      	ldr	r2, [sp, #32]
 8009c6a:	9319      	str	r3, [sp, #100]	; 0x64
 8009c6c:	ab58      	add	r3, sp, #352	; 0x160
 8009c6e:	1a9b      	subs	r3, r3, r2
 8009c70:	9309      	str	r3, [sp, #36]	; 0x24
 8009c72:	2300      	movs	r3, #0
 8009c74:	0026      	movs	r6, r4
 8009c76:	930c      	str	r3, [sp, #48]	; 0x30
 8009c78:	001d      	movs	r5, r3
 8009c7a:	9310      	str	r3, [sp, #64]	; 0x40
 8009c7c:	9311      	str	r3, [sp, #68]	; 0x44
 8009c7e:	e4f2      	b.n	8009666 <_svfprintf_r+0x6be>
 8009c80:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8009c82:	9d08      	ldr	r5, [sp, #32]
 8009c84:	9306      	str	r3, [sp, #24]
 8009c86:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8009c88:	9307      	str	r3, [sp, #28]
 8009c8a:	e7b7      	b.n	8009bfc <_svfprintf_r+0xc54>
 8009c8c:	200f      	movs	r0, #15
 8009c8e:	ab58      	add	r3, sp, #352	; 0x160
 8009c90:	9308      	str	r3, [sp, #32]
 8009c92:	9b08      	ldr	r3, [sp, #32]
 8009c94:	9a1f      	ldr	r2, [sp, #124]	; 0x7c
 8009c96:	3b01      	subs	r3, #1
 8009c98:	9308      	str	r3, [sp, #32]
 8009c9a:	9b06      	ldr	r3, [sp, #24]
 8009c9c:	4003      	ands	r3, r0
 8009c9e:	5cd3      	ldrb	r3, [r2, r3]
 8009ca0:	9a08      	ldr	r2, [sp, #32]
 8009ca2:	7013      	strb	r3, [r2, #0]
 8009ca4:	9b07      	ldr	r3, [sp, #28]
 8009ca6:	0719      	lsls	r1, r3, #28
 8009ca8:	9b06      	ldr	r3, [sp, #24]
 8009caa:	091a      	lsrs	r2, r3, #4
 8009cac:	9b07      	ldr	r3, [sp, #28]
 8009cae:	4311      	orrs	r1, r2
 8009cb0:	091b      	lsrs	r3, r3, #4
 8009cb2:	9307      	str	r3, [sp, #28]
 8009cb4:	000b      	movs	r3, r1
 8009cb6:	9a07      	ldr	r2, [sp, #28]
 8009cb8:	9106      	str	r1, [sp, #24]
 8009cba:	4313      	orrs	r3, r2
 8009cbc:	d1e9      	bne.n	8009c92 <_svfprintf_r+0xcea>
 8009cbe:	e7d2      	b.n	8009c66 <_svfprintf_r+0xcbe>
 8009cc0:	aa58      	add	r2, sp, #352	; 0x160
 8009cc2:	9208      	str	r2, [sp, #32]
 8009cc4:	2b00      	cmp	r3, #0
 8009cc6:	d1ce      	bne.n	8009c66 <_svfprintf_r+0xcbe>
 8009cc8:	07f6      	lsls	r6, r6, #31
 8009cca:	d5cc      	bpl.n	8009c66 <_svfprintf_r+0xcbe>
 8009ccc:	aa1e      	add	r2, sp, #120	; 0x78
 8009cce:	33e7      	adds	r3, #231	; 0xe7
 8009cd0:	189b      	adds	r3, r3, r2
 8009cd2:	2230      	movs	r2, #48	; 0x30
 8009cd4:	e789      	b.n	8009bea <_svfprintf_r+0xc42>
 8009cd6:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8009cd8:	2b00      	cmp	r3, #0
 8009cda:	d100      	bne.n	8009cde <_svfprintf_r+0xd36>
 8009cdc:	e364      	b.n	800a3a8 <_svfprintf_r+0x1400>
 8009cde:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8009ce0:	211b      	movs	r1, #27
 8009ce2:	ab3f      	add	r3, sp, #252	; 0xfc
 8009ce4:	701a      	strb	r2, [r3, #0]
 8009ce6:	2200      	movs	r2, #0
 8009ce8:	a81e      	add	r0, sp, #120	; 0x78
 8009cea:	1809      	adds	r1, r1, r0
 8009cec:	700a      	strb	r2, [r1, #0]
 8009cee:	940d      	str	r4, [sp, #52]	; 0x34
 8009cf0:	f7ff fabd 	bl	800926e <_svfprintf_r+0x2c6>
 8009cf4:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8009cf6:	f7ff fb44 	bl	8009382 <_svfprintf_r+0x3da>
 8009cfa:	2010      	movs	r0, #16
 8009cfc:	1812      	adds	r2, r2, r0
 8009cfe:	6078      	str	r0, [r7, #4]
 8009d00:	922e      	str	r2, [sp, #184]	; 0xb8
 8009d02:	932d      	str	r3, [sp, #180]	; 0xb4
 8009d04:	2b07      	cmp	r3, #7
 8009d06:	dd08      	ble.n	8009d1a <_svfprintf_r+0xd72>
 8009d08:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8009d0a:	980a      	ldr	r0, [sp, #40]	; 0x28
 8009d0c:	aa2c      	add	r2, sp, #176	; 0xb0
 8009d0e:	f001 fc6f 	bl	800b5f0 <__ssprint_r>
 8009d12:	2800      	cmp	r0, #0
 8009d14:	d000      	beq.n	8009d18 <_svfprintf_r+0xd70>
 8009d16:	e326      	b.n	800a366 <_svfprintf_r+0x13be>
 8009d18:	a92f      	add	r1, sp, #188	; 0xbc
 8009d1a:	000f      	movs	r7, r1
 8009d1c:	3c10      	subs	r4, #16
 8009d1e:	e4c5      	b.n	80096ac <_svfprintf_r+0x704>
 8009d20:	2010      	movs	r0, #16
 8009d22:	1812      	adds	r2, r2, r0
 8009d24:	6078      	str	r0, [r7, #4]
 8009d26:	922e      	str	r2, [sp, #184]	; 0xb8
 8009d28:	932d      	str	r3, [sp, #180]	; 0xb4
 8009d2a:	2b07      	cmp	r3, #7
 8009d2c:	dd08      	ble.n	8009d40 <_svfprintf_r+0xd98>
 8009d2e:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8009d30:	980a      	ldr	r0, [sp, #40]	; 0x28
 8009d32:	aa2c      	add	r2, sp, #176	; 0xb0
 8009d34:	f001 fc5c 	bl	800b5f0 <__ssprint_r>
 8009d38:	2800      	cmp	r0, #0
 8009d3a:	d000      	beq.n	8009d3e <_svfprintf_r+0xd96>
 8009d3c:	e313      	b.n	800a366 <_svfprintf_r+0x13be>
 8009d3e:	a92f      	add	r1, sp, #188	; 0xbc
 8009d40:	000f      	movs	r7, r1
 8009d42:	3c10      	subs	r4, #16
 8009d44:	e50b      	b.n	800975e <_svfprintf_r+0x7b6>
 8009d46:	2010      	movs	r0, #16
 8009d48:	1812      	adds	r2, r2, r0
 8009d4a:	6078      	str	r0, [r7, #4]
 8009d4c:	922e      	str	r2, [sp, #184]	; 0xb8
 8009d4e:	932d      	str	r3, [sp, #180]	; 0xb4
 8009d50:	2b07      	cmp	r3, #7
 8009d52:	dd08      	ble.n	8009d66 <_svfprintf_r+0xdbe>
 8009d54:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8009d56:	980a      	ldr	r0, [sp, #40]	; 0x28
 8009d58:	aa2c      	add	r2, sp, #176	; 0xb0
 8009d5a:	f001 fc49 	bl	800b5f0 <__ssprint_r>
 8009d5e:	2800      	cmp	r0, #0
 8009d60:	d000      	beq.n	8009d64 <_svfprintf_r+0xdbc>
 8009d62:	e300      	b.n	800a366 <_svfprintf_r+0x13be>
 8009d64:	a92f      	add	r1, sp, #188	; 0xbc
 8009d66:	000f      	movs	r7, r1
 8009d68:	3c10      	subs	r4, #16
 8009d6a:	e518      	b.n	800979e <_svfprintf_r+0x7f6>
 8009d6c:	fffffbff 	.word	0xfffffbff
 8009d70:	00007830 	.word	0x00007830
 8009d74:	0800e7b4 	.word	0x0800e7b4
 8009d78:	0800e7c5 	.word	0x0800e7c5
 8009d7c:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8009d7e:	2b65      	cmp	r3, #101	; 0x65
 8009d80:	dc00      	bgt.n	8009d84 <_svfprintf_r+0xddc>
 8009d82:	e241      	b.n	800a208 <_svfprintf_r+0x1260>
 8009d84:	9814      	ldr	r0, [sp, #80]	; 0x50
 8009d86:	9915      	ldr	r1, [sp, #84]	; 0x54
 8009d88:	2200      	movs	r2, #0
 8009d8a:	2300      	movs	r3, #0
 8009d8c:	f7f6 fb5c 	bl	8000448 <__aeabi_dcmpeq>
 8009d90:	2800      	cmp	r0, #0
 8009d92:	d077      	beq.n	8009e84 <_svfprintf_r+0xedc>
 8009d94:	4bca      	ldr	r3, [pc, #808]	; (800a0c0 <_svfprintf_r+0x1118>)
 8009d96:	603b      	str	r3, [r7, #0]
 8009d98:	2301      	movs	r3, #1
 8009d9a:	607b      	str	r3, [r7, #4]
 8009d9c:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8009d9e:	3708      	adds	r7, #8
 8009da0:	3301      	adds	r3, #1
 8009da2:	932e      	str	r3, [sp, #184]	; 0xb8
 8009da4:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
 8009da6:	3301      	adds	r3, #1
 8009da8:	932d      	str	r3, [sp, #180]	; 0xb4
 8009daa:	2b07      	cmp	r3, #7
 8009dac:	dd08      	ble.n	8009dc0 <_svfprintf_r+0xe18>
 8009dae:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8009db0:	980a      	ldr	r0, [sp, #40]	; 0x28
 8009db2:	aa2c      	add	r2, sp, #176	; 0xb0
 8009db4:	f001 fc1c 	bl	800b5f0 <__ssprint_r>
 8009db8:	2800      	cmp	r0, #0
 8009dba:	d000      	beq.n	8009dbe <_svfprintf_r+0xe16>
 8009dbc:	e2d3      	b.n	800a366 <_svfprintf_r+0x13be>
 8009dbe:	af2f      	add	r7, sp, #188	; 0xbc
 8009dc0:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8009dc2:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8009dc4:	4293      	cmp	r3, r2
 8009dc6:	db01      	blt.n	8009dcc <_svfprintf_r+0xe24>
 8009dc8:	07f3      	lsls	r3, r6, #31
 8009dca:	d51b      	bpl.n	8009e04 <_svfprintf_r+0xe5c>
 8009dcc:	9b1c      	ldr	r3, [sp, #112]	; 0x70
 8009dce:	9a16      	ldr	r2, [sp, #88]	; 0x58
 8009dd0:	603b      	str	r3, [r7, #0]
 8009dd2:	9b16      	ldr	r3, [sp, #88]	; 0x58
 8009dd4:	607b      	str	r3, [r7, #4]
 8009dd6:	9b2e      	ldr	r3, [sp, #184]	; 0xb8
 8009dd8:	3708      	adds	r7, #8
 8009dda:	189b      	adds	r3, r3, r2
 8009ddc:	932e      	str	r3, [sp, #184]	; 0xb8
 8009dde:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
 8009de0:	3301      	adds	r3, #1
 8009de2:	932d      	str	r3, [sp, #180]	; 0xb4
 8009de4:	2b07      	cmp	r3, #7
 8009de6:	dd08      	ble.n	8009dfa <_svfprintf_r+0xe52>
 8009de8:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8009dea:	980a      	ldr	r0, [sp, #40]	; 0x28
 8009dec:	aa2c      	add	r2, sp, #176	; 0xb0
 8009dee:	f001 fbff 	bl	800b5f0 <__ssprint_r>
 8009df2:	2800      	cmp	r0, #0
 8009df4:	d000      	beq.n	8009df8 <_svfprintf_r+0xe50>
 8009df6:	e2b6      	b.n	800a366 <_svfprintf_r+0x13be>
 8009df8:	af2f      	add	r7, sp, #188	; 0xbc
 8009dfa:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8009dfc:	2510      	movs	r5, #16
 8009dfe:	1e5c      	subs	r4, r3, #1
 8009e00:	2c00      	cmp	r4, #0
 8009e02:	dc2e      	bgt.n	8009e62 <_svfprintf_r+0xeba>
 8009e04:	0776      	lsls	r6, r6, #29
 8009e06:	d500      	bpl.n	8009e0a <_svfprintf_r+0xe62>
 8009e08:	e290      	b.n	800a32c <_svfprintf_r+0x1384>
 8009e0a:	9b18      	ldr	r3, [sp, #96]	; 0x60
 8009e0c:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 8009e0e:	4293      	cmp	r3, r2
 8009e10:	da00      	bge.n	8009e14 <_svfprintf_r+0xe6c>
 8009e12:	0013      	movs	r3, r2
 8009e14:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 8009e16:	18d3      	adds	r3, r2, r3
 8009e18:	9317      	str	r3, [sp, #92]	; 0x5c
 8009e1a:	9b2e      	ldr	r3, [sp, #184]	; 0xb8
 8009e1c:	2b00      	cmp	r3, #0
 8009e1e:	d007      	beq.n	8009e30 <_svfprintf_r+0xe88>
 8009e20:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8009e22:	980a      	ldr	r0, [sp, #40]	; 0x28
 8009e24:	aa2c      	add	r2, sp, #176	; 0xb0
 8009e26:	f001 fbe3 	bl	800b5f0 <__ssprint_r>
 8009e2a:	2800      	cmp	r0, #0
 8009e2c:	d000      	beq.n	8009e30 <_svfprintf_r+0xe88>
 8009e2e:	e29a      	b.n	800a366 <_svfprintf_r+0x13be>
 8009e30:	2300      	movs	r3, #0
 8009e32:	932d      	str	r3, [sp, #180]	; 0xb4
 8009e34:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8009e36:	2b00      	cmp	r3, #0
 8009e38:	d000      	beq.n	8009e3c <_svfprintf_r+0xe94>
 8009e3a:	e2b0      	b.n	800a39e <_svfprintf_r+0x13f6>
 8009e3c:	af2f      	add	r7, sp, #188	; 0xbc
 8009e3e:	e5dc      	b.n	80099fa <_svfprintf_r+0xa52>
 8009e40:	3210      	adds	r2, #16
 8009e42:	607d      	str	r5, [r7, #4]
 8009e44:	922e      	str	r2, [sp, #184]	; 0xb8
 8009e46:	932d      	str	r3, [sp, #180]	; 0xb4
 8009e48:	2b07      	cmp	r3, #7
 8009e4a:	dd08      	ble.n	8009e5e <_svfprintf_r+0xeb6>
 8009e4c:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8009e4e:	980a      	ldr	r0, [sp, #40]	; 0x28
 8009e50:	aa2c      	add	r2, sp, #176	; 0xb0
 8009e52:	f001 fbcd 	bl	800b5f0 <__ssprint_r>
 8009e56:	2800      	cmp	r0, #0
 8009e58:	d000      	beq.n	8009e5c <_svfprintf_r+0xeb4>
 8009e5a:	e284      	b.n	800a366 <_svfprintf_r+0x13be>
 8009e5c:	a92f      	add	r1, sp, #188	; 0xbc
 8009e5e:	000f      	movs	r7, r1
 8009e60:	3c10      	subs	r4, #16
 8009e62:	0039      	movs	r1, r7
 8009e64:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
 8009e66:	4897      	ldr	r0, [pc, #604]	; (800a0c4 <_svfprintf_r+0x111c>)
 8009e68:	9a2e      	ldr	r2, [sp, #184]	; 0xb8
 8009e6a:	3301      	adds	r3, #1
 8009e6c:	3108      	adds	r1, #8
 8009e6e:	6038      	str	r0, [r7, #0]
 8009e70:	2c10      	cmp	r4, #16
 8009e72:	dce5      	bgt.n	8009e40 <_svfprintf_r+0xe98>
 8009e74:	607c      	str	r4, [r7, #4]
 8009e76:	18a4      	adds	r4, r4, r2
 8009e78:	942e      	str	r4, [sp, #184]	; 0xb8
 8009e7a:	000f      	movs	r7, r1
 8009e7c:	932d      	str	r3, [sp, #180]	; 0xb4
 8009e7e:	2b07      	cmp	r3, #7
 8009e80:	ddc0      	ble.n	8009e04 <_svfprintf_r+0xe5c>
 8009e82:	e05f      	b.n	8009f44 <_svfprintf_r+0xf9c>
 8009e84:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8009e86:	2b00      	cmp	r3, #0
 8009e88:	dc78      	bgt.n	8009f7c <_svfprintf_r+0xfd4>
 8009e8a:	4b8d      	ldr	r3, [pc, #564]	; (800a0c0 <_svfprintf_r+0x1118>)
 8009e8c:	603b      	str	r3, [r7, #0]
 8009e8e:	2301      	movs	r3, #1
 8009e90:	607b      	str	r3, [r7, #4]
 8009e92:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8009e94:	3708      	adds	r7, #8
 8009e96:	3301      	adds	r3, #1
 8009e98:	932e      	str	r3, [sp, #184]	; 0xb8
 8009e9a:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
 8009e9c:	3301      	adds	r3, #1
 8009e9e:	932d      	str	r3, [sp, #180]	; 0xb4
 8009ea0:	2b07      	cmp	r3, #7
 8009ea2:	dd08      	ble.n	8009eb6 <_svfprintf_r+0xf0e>
 8009ea4:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8009ea6:	980a      	ldr	r0, [sp, #40]	; 0x28
 8009ea8:	aa2c      	add	r2, sp, #176	; 0xb0
 8009eaa:	f001 fba1 	bl	800b5f0 <__ssprint_r>
 8009eae:	2800      	cmp	r0, #0
 8009eb0:	d000      	beq.n	8009eb4 <_svfprintf_r+0xf0c>
 8009eb2:	e258      	b.n	800a366 <_svfprintf_r+0x13be>
 8009eb4:	af2f      	add	r7, sp, #188	; 0xbc
 8009eb6:	990e      	ldr	r1, [sp, #56]	; 0x38
 8009eb8:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8009eba:	9a2e      	ldr	r2, [sp, #184]	; 0xb8
 8009ebc:	430b      	orrs	r3, r1
 8009ebe:	2101      	movs	r1, #1
 8009ec0:	4031      	ands	r1, r6
 8009ec2:	430b      	orrs	r3, r1
 8009ec4:	d09e      	beq.n	8009e04 <_svfprintf_r+0xe5c>
 8009ec6:	9b1c      	ldr	r3, [sp, #112]	; 0x70
 8009ec8:	603b      	str	r3, [r7, #0]
 8009eca:	9b16      	ldr	r3, [sp, #88]	; 0x58
 8009ecc:	607b      	str	r3, [r7, #4]
 8009ece:	189a      	adds	r2, r3, r2
 8009ed0:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
 8009ed2:	922e      	str	r2, [sp, #184]	; 0xb8
 8009ed4:	3301      	adds	r3, #1
 8009ed6:	932d      	str	r3, [sp, #180]	; 0xb4
 8009ed8:	3708      	adds	r7, #8
 8009eda:	2b07      	cmp	r3, #7
 8009edc:	dd08      	ble.n	8009ef0 <_svfprintf_r+0xf48>
 8009ede:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8009ee0:	980a      	ldr	r0, [sp, #40]	; 0x28
 8009ee2:	aa2c      	add	r2, sp, #176	; 0xb0
 8009ee4:	f001 fb84 	bl	800b5f0 <__ssprint_r>
 8009ee8:	2800      	cmp	r0, #0
 8009eea:	d000      	beq.n	8009eee <_svfprintf_r+0xf46>
 8009eec:	e23b      	b.n	800a366 <_svfprintf_r+0x13be>
 8009eee:	af2f      	add	r7, sp, #188	; 0xbc
 8009ef0:	9c26      	ldr	r4, [sp, #152]	; 0x98
 8009ef2:	2c00      	cmp	r4, #0
 8009ef4:	da19      	bge.n	8009f2a <_svfprintf_r+0xf82>
 8009ef6:	0038      	movs	r0, r7
 8009ef8:	2510      	movs	r5, #16
 8009efa:	4264      	negs	r4, r4
 8009efc:	992d      	ldr	r1, [sp, #180]	; 0xb4
 8009efe:	4a71      	ldr	r2, [pc, #452]	; (800a0c4 <_svfprintf_r+0x111c>)
 8009f00:	9b2e      	ldr	r3, [sp, #184]	; 0xb8
 8009f02:	3101      	adds	r1, #1
 8009f04:	3708      	adds	r7, #8
 8009f06:	6002      	str	r2, [r0, #0]
 8009f08:	2c10      	cmp	r4, #16
 8009f0a:	dc25      	bgt.n	8009f58 <_svfprintf_r+0xfb0>
 8009f0c:	6044      	str	r4, [r0, #4]
 8009f0e:	18e4      	adds	r4, r4, r3
 8009f10:	942e      	str	r4, [sp, #184]	; 0xb8
 8009f12:	912d      	str	r1, [sp, #180]	; 0xb4
 8009f14:	2907      	cmp	r1, #7
 8009f16:	dd08      	ble.n	8009f2a <_svfprintf_r+0xf82>
 8009f18:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8009f1a:	980a      	ldr	r0, [sp, #40]	; 0x28
 8009f1c:	aa2c      	add	r2, sp, #176	; 0xb0
 8009f1e:	f001 fb67 	bl	800b5f0 <__ssprint_r>
 8009f22:	2800      	cmp	r0, #0
 8009f24:	d000      	beq.n	8009f28 <_svfprintf_r+0xf80>
 8009f26:	e21e      	b.n	800a366 <_svfprintf_r+0x13be>
 8009f28:	af2f      	add	r7, sp, #188	; 0xbc
 8009f2a:	9b08      	ldr	r3, [sp, #32]
 8009f2c:	9a2e      	ldr	r2, [sp, #184]	; 0xb8
 8009f2e:	603b      	str	r3, [r7, #0]
 8009f30:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8009f32:	18d2      	adds	r2, r2, r3
 8009f34:	922e      	str	r2, [sp, #184]	; 0xb8
 8009f36:	9a2d      	ldr	r2, [sp, #180]	; 0xb4
 8009f38:	607b      	str	r3, [r7, #4]
 8009f3a:	3201      	adds	r2, #1
 8009f3c:	922d      	str	r2, [sp, #180]	; 0xb4
 8009f3e:	2a07      	cmp	r2, #7
 8009f40:	dc00      	bgt.n	8009f44 <_svfprintf_r+0xf9c>
 8009f42:	e45b      	b.n	80097fc <_svfprintf_r+0x854>
 8009f44:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8009f46:	980a      	ldr	r0, [sp, #40]	; 0x28
 8009f48:	aa2c      	add	r2, sp, #176	; 0xb0
 8009f4a:	f001 fb51 	bl	800b5f0 <__ssprint_r>
 8009f4e:	2800      	cmp	r0, #0
 8009f50:	d000      	beq.n	8009f54 <_svfprintf_r+0xfac>
 8009f52:	e208      	b.n	800a366 <_svfprintf_r+0x13be>
 8009f54:	af2f      	add	r7, sp, #188	; 0xbc
 8009f56:	e755      	b.n	8009e04 <_svfprintf_r+0xe5c>
 8009f58:	3310      	adds	r3, #16
 8009f5a:	6045      	str	r5, [r0, #4]
 8009f5c:	932e      	str	r3, [sp, #184]	; 0xb8
 8009f5e:	912d      	str	r1, [sp, #180]	; 0xb4
 8009f60:	2907      	cmp	r1, #7
 8009f62:	dd08      	ble.n	8009f76 <_svfprintf_r+0xfce>
 8009f64:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8009f66:	980a      	ldr	r0, [sp, #40]	; 0x28
 8009f68:	aa2c      	add	r2, sp, #176	; 0xb0
 8009f6a:	f001 fb41 	bl	800b5f0 <__ssprint_r>
 8009f6e:	2800      	cmp	r0, #0
 8009f70:	d000      	beq.n	8009f74 <_svfprintf_r+0xfcc>
 8009f72:	e1f8      	b.n	800a366 <_svfprintf_r+0x13be>
 8009f74:	af2f      	add	r7, sp, #188	; 0xbc
 8009f76:	0038      	movs	r0, r7
 8009f78:	3c10      	subs	r4, #16
 8009f7a:	e7bf      	b.n	8009efc <_svfprintf_r+0xf54>
 8009f7c:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8009f7e:	002c      	movs	r4, r5
 8009f80:	429d      	cmp	r5, r3
 8009f82:	dd00      	ble.n	8009f86 <_svfprintf_r+0xfde>
 8009f84:	001c      	movs	r4, r3
 8009f86:	2c00      	cmp	r4, #0
 8009f88:	dd14      	ble.n	8009fb4 <_svfprintf_r+0x100c>
 8009f8a:	9b08      	ldr	r3, [sp, #32]
 8009f8c:	607c      	str	r4, [r7, #4]
 8009f8e:	603b      	str	r3, [r7, #0]
 8009f90:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8009f92:	3708      	adds	r7, #8
 8009f94:	18e3      	adds	r3, r4, r3
 8009f96:	932e      	str	r3, [sp, #184]	; 0xb8
 8009f98:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
 8009f9a:	3301      	adds	r3, #1
 8009f9c:	932d      	str	r3, [sp, #180]	; 0xb4
 8009f9e:	2b07      	cmp	r3, #7
 8009fa0:	dd08      	ble.n	8009fb4 <_svfprintf_r+0x100c>
 8009fa2:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8009fa4:	980a      	ldr	r0, [sp, #40]	; 0x28
 8009fa6:	aa2c      	add	r2, sp, #176	; 0xb0
 8009fa8:	f001 fb22 	bl	800b5f0 <__ssprint_r>
 8009fac:	2800      	cmp	r0, #0
 8009fae:	d000      	beq.n	8009fb2 <_svfprintf_r+0x100a>
 8009fb0:	e1d9      	b.n	800a366 <_svfprintf_r+0x13be>
 8009fb2:	af2f      	add	r7, sp, #188	; 0xbc
 8009fb4:	43e3      	mvns	r3, r4
 8009fb6:	17db      	asrs	r3, r3, #31
 8009fb8:	401c      	ands	r4, r3
 8009fba:	1b2c      	subs	r4, r5, r4
 8009fbc:	2c00      	cmp	r4, #0
 8009fbe:	dd18      	ble.n	8009ff2 <_svfprintf_r+0x104a>
 8009fc0:	0039      	movs	r1, r7
 8009fc2:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
 8009fc4:	483f      	ldr	r0, [pc, #252]	; (800a0c4 <_svfprintf_r+0x111c>)
 8009fc6:	9a2e      	ldr	r2, [sp, #184]	; 0xb8
 8009fc8:	3301      	adds	r3, #1
 8009fca:	3108      	adds	r1, #8
 8009fcc:	6038      	str	r0, [r7, #0]
 8009fce:	2c10      	cmp	r4, #16
 8009fd0:	dc7a      	bgt.n	800a0c8 <_svfprintf_r+0x1120>
 8009fd2:	607c      	str	r4, [r7, #4]
 8009fd4:	18a4      	adds	r4, r4, r2
 8009fd6:	000f      	movs	r7, r1
 8009fd8:	942e      	str	r4, [sp, #184]	; 0xb8
 8009fda:	932d      	str	r3, [sp, #180]	; 0xb4
 8009fdc:	2b07      	cmp	r3, #7
 8009fde:	dd08      	ble.n	8009ff2 <_svfprintf_r+0x104a>
 8009fe0:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8009fe2:	980a      	ldr	r0, [sp, #40]	; 0x28
 8009fe4:	aa2c      	add	r2, sp, #176	; 0xb0
 8009fe6:	f001 fb03 	bl	800b5f0 <__ssprint_r>
 8009fea:	2800      	cmp	r0, #0
 8009fec:	d000      	beq.n	8009ff0 <_svfprintf_r+0x1048>
 8009fee:	e1ba      	b.n	800a366 <_svfprintf_r+0x13be>
 8009ff0:	af2f      	add	r7, sp, #188	; 0xbc
 8009ff2:	9b08      	ldr	r3, [sp, #32]
 8009ff4:	195d      	adds	r5, r3, r5
 8009ff6:	0573      	lsls	r3, r6, #21
 8009ff8:	d50b      	bpl.n	800a012 <_svfprintf_r+0x106a>
 8009ffa:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8009ffc:	2b00      	cmp	r3, #0
 8009ffe:	d176      	bne.n	800a0ee <_svfprintf_r+0x1146>
 800a000:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800a002:	2b00      	cmp	r3, #0
 800a004:	d176      	bne.n	800a0f4 <_svfprintf_r+0x114c>
 800a006:	9b08      	ldr	r3, [sp, #32]
 800a008:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800a00a:	189b      	adds	r3, r3, r2
 800a00c:	429d      	cmp	r5, r3
 800a00e:	d900      	bls.n	800a012 <_svfprintf_r+0x106a>
 800a010:	001d      	movs	r5, r3
 800a012:	9b26      	ldr	r3, [sp, #152]	; 0x98
 800a014:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800a016:	4293      	cmp	r3, r2
 800a018:	db01      	blt.n	800a01e <_svfprintf_r+0x1076>
 800a01a:	07f3      	lsls	r3, r6, #31
 800a01c:	d516      	bpl.n	800a04c <_svfprintf_r+0x10a4>
 800a01e:	9b1c      	ldr	r3, [sp, #112]	; 0x70
 800a020:	9a16      	ldr	r2, [sp, #88]	; 0x58
 800a022:	603b      	str	r3, [r7, #0]
 800a024:	9b16      	ldr	r3, [sp, #88]	; 0x58
 800a026:	607b      	str	r3, [r7, #4]
 800a028:	9b2e      	ldr	r3, [sp, #184]	; 0xb8
 800a02a:	3708      	adds	r7, #8
 800a02c:	189b      	adds	r3, r3, r2
 800a02e:	932e      	str	r3, [sp, #184]	; 0xb8
 800a030:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
 800a032:	3301      	adds	r3, #1
 800a034:	932d      	str	r3, [sp, #180]	; 0xb4
 800a036:	2b07      	cmp	r3, #7
 800a038:	dd08      	ble.n	800a04c <_svfprintf_r+0x10a4>
 800a03a:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800a03c:	980a      	ldr	r0, [sp, #40]	; 0x28
 800a03e:	aa2c      	add	r2, sp, #176	; 0xb0
 800a040:	f001 fad6 	bl	800b5f0 <__ssprint_r>
 800a044:	2800      	cmp	r0, #0
 800a046:	d000      	beq.n	800a04a <_svfprintf_r+0x10a2>
 800a048:	e18d      	b.n	800a366 <_svfprintf_r+0x13be>
 800a04a:	af2f      	add	r7, sp, #188	; 0xbc
 800a04c:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800a04e:	9b08      	ldr	r3, [sp, #32]
 800a050:	4694      	mov	ip, r2
 800a052:	9c26      	ldr	r4, [sp, #152]	; 0x98
 800a054:	4463      	add	r3, ip
 800a056:	1b5b      	subs	r3, r3, r5
 800a058:	1b14      	subs	r4, r2, r4
 800a05a:	429c      	cmp	r4, r3
 800a05c:	dd00      	ble.n	800a060 <_svfprintf_r+0x10b8>
 800a05e:	001c      	movs	r4, r3
 800a060:	9b2e      	ldr	r3, [sp, #184]	; 0xb8
 800a062:	2c00      	cmp	r4, #0
 800a064:	dd12      	ble.n	800a08c <_svfprintf_r+0x10e4>
 800a066:	18e3      	adds	r3, r4, r3
 800a068:	932e      	str	r3, [sp, #184]	; 0xb8
 800a06a:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
 800a06c:	603d      	str	r5, [r7, #0]
 800a06e:	3301      	adds	r3, #1
 800a070:	607c      	str	r4, [r7, #4]
 800a072:	932d      	str	r3, [sp, #180]	; 0xb4
 800a074:	3708      	adds	r7, #8
 800a076:	2b07      	cmp	r3, #7
 800a078:	dd08      	ble.n	800a08c <_svfprintf_r+0x10e4>
 800a07a:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800a07c:	980a      	ldr	r0, [sp, #40]	; 0x28
 800a07e:	aa2c      	add	r2, sp, #176	; 0xb0
 800a080:	f001 fab6 	bl	800b5f0 <__ssprint_r>
 800a084:	2800      	cmp	r0, #0
 800a086:	d000      	beq.n	800a08a <_svfprintf_r+0x10e2>
 800a088:	e16d      	b.n	800a366 <_svfprintf_r+0x13be>
 800a08a:	af2f      	add	r7, sp, #188	; 0xbc
 800a08c:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800a08e:	9b26      	ldr	r3, [sp, #152]	; 0x98
 800a090:	2510      	movs	r5, #16
 800a092:	1ad3      	subs	r3, r2, r3
 800a094:	43e2      	mvns	r2, r4
 800a096:	17d2      	asrs	r2, r2, #31
 800a098:	4014      	ands	r4, r2
 800a09a:	1b1c      	subs	r4, r3, r4
 800a09c:	2c00      	cmp	r4, #0
 800a09e:	dc00      	bgt.n	800a0a2 <_svfprintf_r+0x10fa>
 800a0a0:	e6b0      	b.n	8009e04 <_svfprintf_r+0xe5c>
 800a0a2:	0039      	movs	r1, r7
 800a0a4:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
 800a0a6:	4807      	ldr	r0, [pc, #28]	; (800a0c4 <_svfprintf_r+0x111c>)
 800a0a8:	9a2e      	ldr	r2, [sp, #184]	; 0xb8
 800a0aa:	3301      	adds	r3, #1
 800a0ac:	3108      	adds	r1, #8
 800a0ae:	6038      	str	r0, [r7, #0]
 800a0b0:	2c10      	cmp	r4, #16
 800a0b2:	dd00      	ble.n	800a0b6 <_svfprintf_r+0x110e>
 800a0b4:	e096      	b.n	800a1e4 <_svfprintf_r+0x123c>
 800a0b6:	1912      	adds	r2, r2, r4
 800a0b8:	607c      	str	r4, [r7, #4]
 800a0ba:	922e      	str	r2, [sp, #184]	; 0xb8
 800a0bc:	e6dd      	b.n	8009e7a <_svfprintf_r+0xed2>
 800a0be:	46c0      	nop			; (mov r8, r8)
 800a0c0:	0800e7d6 	.word	0x0800e7d6
 800a0c4:	0800e7e8 	.word	0x0800e7e8
 800a0c8:	2010      	movs	r0, #16
 800a0ca:	1812      	adds	r2, r2, r0
 800a0cc:	6078      	str	r0, [r7, #4]
 800a0ce:	922e      	str	r2, [sp, #184]	; 0xb8
 800a0d0:	932d      	str	r3, [sp, #180]	; 0xb4
 800a0d2:	2b07      	cmp	r3, #7
 800a0d4:	dd08      	ble.n	800a0e8 <_svfprintf_r+0x1140>
 800a0d6:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800a0d8:	980a      	ldr	r0, [sp, #40]	; 0x28
 800a0da:	aa2c      	add	r2, sp, #176	; 0xb0
 800a0dc:	f001 fa88 	bl	800b5f0 <__ssprint_r>
 800a0e0:	2800      	cmp	r0, #0
 800a0e2:	d000      	beq.n	800a0e6 <_svfprintf_r+0x113e>
 800a0e4:	e13f      	b.n	800a366 <_svfprintf_r+0x13be>
 800a0e6:	a92f      	add	r1, sp, #188	; 0xbc
 800a0e8:	000f      	movs	r7, r1
 800a0ea:	3c10      	subs	r4, #16
 800a0ec:	e768      	b.n	8009fc0 <_svfprintf_r+0x1018>
 800a0ee:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800a0f0:	2b00      	cmp	r3, #0
 800a0f2:	d05d      	beq.n	800a1b0 <_svfprintf_r+0x1208>
 800a0f4:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800a0f6:	3b01      	subs	r3, #1
 800a0f8:	9310      	str	r3, [sp, #64]	; 0x40
 800a0fa:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 800a0fc:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
 800a0fe:	603b      	str	r3, [r7, #0]
 800a100:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800a102:	607b      	str	r3, [r7, #4]
 800a104:	9b2e      	ldr	r3, [sp, #184]	; 0xb8
 800a106:	3708      	adds	r7, #8
 800a108:	189b      	adds	r3, r3, r2
 800a10a:	932e      	str	r3, [sp, #184]	; 0xb8
 800a10c:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
 800a10e:	3301      	adds	r3, #1
 800a110:	932d      	str	r3, [sp, #180]	; 0xb4
 800a112:	2b07      	cmp	r3, #7
 800a114:	dd08      	ble.n	800a128 <_svfprintf_r+0x1180>
 800a116:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800a118:	980a      	ldr	r0, [sp, #40]	; 0x28
 800a11a:	aa2c      	add	r2, sp, #176	; 0xb0
 800a11c:	f001 fa68 	bl	800b5f0 <__ssprint_r>
 800a120:	2800      	cmp	r0, #0
 800a122:	d000      	beq.n	800a126 <_svfprintf_r+0x117e>
 800a124:	e11f      	b.n	800a366 <_svfprintf_r+0x13be>
 800a126:	af2f      	add	r7, sp, #188	; 0xbc
 800a128:	9b08      	ldr	r3, [sp, #32]
 800a12a:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800a12c:	189c      	adds	r4, r3, r2
 800a12e:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800a130:	1b64      	subs	r4, r4, r5
 800a132:	781b      	ldrb	r3, [r3, #0]
 800a134:	429c      	cmp	r4, r3
 800a136:	dd00      	ble.n	800a13a <_svfprintf_r+0x1192>
 800a138:	001c      	movs	r4, r3
 800a13a:	9b2e      	ldr	r3, [sp, #184]	; 0xb8
 800a13c:	2c00      	cmp	r4, #0
 800a13e:	dd12      	ble.n	800a166 <_svfprintf_r+0x11be>
 800a140:	18e3      	adds	r3, r4, r3
 800a142:	932e      	str	r3, [sp, #184]	; 0xb8
 800a144:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
 800a146:	603d      	str	r5, [r7, #0]
 800a148:	3301      	adds	r3, #1
 800a14a:	607c      	str	r4, [r7, #4]
 800a14c:	932d      	str	r3, [sp, #180]	; 0xb4
 800a14e:	3708      	adds	r7, #8
 800a150:	2b07      	cmp	r3, #7
 800a152:	dd08      	ble.n	800a166 <_svfprintf_r+0x11be>
 800a154:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800a156:	980a      	ldr	r0, [sp, #40]	; 0x28
 800a158:	aa2c      	add	r2, sp, #176	; 0xb0
 800a15a:	f001 fa49 	bl	800b5f0 <__ssprint_r>
 800a15e:	2800      	cmp	r0, #0
 800a160:	d000      	beq.n	800a164 <_svfprintf_r+0x11bc>
 800a162:	e100      	b.n	800a366 <_svfprintf_r+0x13be>
 800a164:	af2f      	add	r7, sp, #188	; 0xbc
 800a166:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800a168:	781a      	ldrb	r2, [r3, #0]
 800a16a:	43e3      	mvns	r3, r4
 800a16c:	17db      	asrs	r3, r3, #31
 800a16e:	401c      	ands	r4, r3
 800a170:	1b14      	subs	r4, r2, r4
 800a172:	2c00      	cmp	r4, #0
 800a174:	dd18      	ble.n	800a1a8 <_svfprintf_r+0x1200>
 800a176:	0039      	movs	r1, r7
 800a178:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
 800a17a:	48aa      	ldr	r0, [pc, #680]	; (800a424 <_svfprintf_r+0x147c>)
 800a17c:	9a2e      	ldr	r2, [sp, #184]	; 0xb8
 800a17e:	3301      	adds	r3, #1
 800a180:	3108      	adds	r1, #8
 800a182:	6038      	str	r0, [r7, #0]
 800a184:	2c10      	cmp	r4, #16
 800a186:	dc1a      	bgt.n	800a1be <_svfprintf_r+0x1216>
 800a188:	1912      	adds	r2, r2, r4
 800a18a:	607c      	str	r4, [r7, #4]
 800a18c:	922e      	str	r2, [sp, #184]	; 0xb8
 800a18e:	000f      	movs	r7, r1
 800a190:	932d      	str	r3, [sp, #180]	; 0xb4
 800a192:	2b07      	cmp	r3, #7
 800a194:	dd08      	ble.n	800a1a8 <_svfprintf_r+0x1200>
 800a196:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800a198:	980a      	ldr	r0, [sp, #40]	; 0x28
 800a19a:	aa2c      	add	r2, sp, #176	; 0xb0
 800a19c:	f001 fa28 	bl	800b5f0 <__ssprint_r>
 800a1a0:	2800      	cmp	r0, #0
 800a1a2:	d000      	beq.n	800a1a6 <_svfprintf_r+0x11fe>
 800a1a4:	e0df      	b.n	800a366 <_svfprintf_r+0x13be>
 800a1a6:	af2f      	add	r7, sp, #188	; 0xbc
 800a1a8:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800a1aa:	781b      	ldrb	r3, [r3, #0]
 800a1ac:	18ed      	adds	r5, r5, r3
 800a1ae:	e724      	b.n	8009ffa <_svfprintf_r+0x1052>
 800a1b0:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800a1b2:	3b01      	subs	r3, #1
 800a1b4:	9312      	str	r3, [sp, #72]	; 0x48
 800a1b6:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800a1b8:	3b01      	subs	r3, #1
 800a1ba:	9311      	str	r3, [sp, #68]	; 0x44
 800a1bc:	e79d      	b.n	800a0fa <_svfprintf_r+0x1152>
 800a1be:	2010      	movs	r0, #16
 800a1c0:	1812      	adds	r2, r2, r0
 800a1c2:	6078      	str	r0, [r7, #4]
 800a1c4:	922e      	str	r2, [sp, #184]	; 0xb8
 800a1c6:	932d      	str	r3, [sp, #180]	; 0xb4
 800a1c8:	2b07      	cmp	r3, #7
 800a1ca:	dd08      	ble.n	800a1de <_svfprintf_r+0x1236>
 800a1cc:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800a1ce:	980a      	ldr	r0, [sp, #40]	; 0x28
 800a1d0:	aa2c      	add	r2, sp, #176	; 0xb0
 800a1d2:	f001 fa0d 	bl	800b5f0 <__ssprint_r>
 800a1d6:	2800      	cmp	r0, #0
 800a1d8:	d000      	beq.n	800a1dc <_svfprintf_r+0x1234>
 800a1da:	e0c4      	b.n	800a366 <_svfprintf_r+0x13be>
 800a1dc:	a92f      	add	r1, sp, #188	; 0xbc
 800a1de:	000f      	movs	r7, r1
 800a1e0:	3c10      	subs	r4, #16
 800a1e2:	e7c8      	b.n	800a176 <_svfprintf_r+0x11ce>
 800a1e4:	3210      	adds	r2, #16
 800a1e6:	607d      	str	r5, [r7, #4]
 800a1e8:	922e      	str	r2, [sp, #184]	; 0xb8
 800a1ea:	932d      	str	r3, [sp, #180]	; 0xb4
 800a1ec:	2b07      	cmp	r3, #7
 800a1ee:	dd08      	ble.n	800a202 <_svfprintf_r+0x125a>
 800a1f0:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800a1f2:	980a      	ldr	r0, [sp, #40]	; 0x28
 800a1f4:	aa2c      	add	r2, sp, #176	; 0xb0
 800a1f6:	f001 f9fb 	bl	800b5f0 <__ssprint_r>
 800a1fa:	2800      	cmp	r0, #0
 800a1fc:	d000      	beq.n	800a200 <_svfprintf_r+0x1258>
 800a1fe:	e0b2      	b.n	800a366 <_svfprintf_r+0x13be>
 800a200:	a92f      	add	r1, sp, #188	; 0xbc
 800a202:	000f      	movs	r7, r1
 800a204:	3c10      	subs	r4, #16
 800a206:	e74c      	b.n	800a0a2 <_svfprintf_r+0x10fa>
 800a208:	003c      	movs	r4, r7
 800a20a:	9919      	ldr	r1, [sp, #100]	; 0x64
 800a20c:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
 800a20e:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800a210:	3101      	adds	r1, #1
 800a212:	3301      	adds	r3, #1
 800a214:	3408      	adds	r4, #8
 800a216:	2a01      	cmp	r2, #1
 800a218:	dc03      	bgt.n	800a222 <_svfprintf_r+0x127a>
 800a21a:	2201      	movs	r2, #1
 800a21c:	4216      	tst	r6, r2
 800a21e:	d100      	bne.n	800a222 <_svfprintf_r+0x127a>
 800a220:	e07f      	b.n	800a322 <_svfprintf_r+0x137a>
 800a222:	9a08      	ldr	r2, [sp, #32]
 800a224:	912e      	str	r1, [sp, #184]	; 0xb8
 800a226:	603a      	str	r2, [r7, #0]
 800a228:	2201      	movs	r2, #1
 800a22a:	932d      	str	r3, [sp, #180]	; 0xb4
 800a22c:	607a      	str	r2, [r7, #4]
 800a22e:	2b07      	cmp	r3, #7
 800a230:	dd08      	ble.n	800a244 <_svfprintf_r+0x129c>
 800a232:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800a234:	980a      	ldr	r0, [sp, #40]	; 0x28
 800a236:	aa2c      	add	r2, sp, #176	; 0xb0
 800a238:	f001 f9da 	bl	800b5f0 <__ssprint_r>
 800a23c:	2800      	cmp	r0, #0
 800a23e:	d000      	beq.n	800a242 <_svfprintf_r+0x129a>
 800a240:	e091      	b.n	800a366 <_svfprintf_r+0x13be>
 800a242:	ac2f      	add	r4, sp, #188	; 0xbc
 800a244:	9b1c      	ldr	r3, [sp, #112]	; 0x70
 800a246:	9a16      	ldr	r2, [sp, #88]	; 0x58
 800a248:	6023      	str	r3, [r4, #0]
 800a24a:	9b16      	ldr	r3, [sp, #88]	; 0x58
 800a24c:	6063      	str	r3, [r4, #4]
 800a24e:	9b2e      	ldr	r3, [sp, #184]	; 0xb8
 800a250:	3408      	adds	r4, #8
 800a252:	189b      	adds	r3, r3, r2
 800a254:	932e      	str	r3, [sp, #184]	; 0xb8
 800a256:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
 800a258:	3301      	adds	r3, #1
 800a25a:	932d      	str	r3, [sp, #180]	; 0xb4
 800a25c:	2b07      	cmp	r3, #7
 800a25e:	dd07      	ble.n	800a270 <_svfprintf_r+0x12c8>
 800a260:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800a262:	980a      	ldr	r0, [sp, #40]	; 0x28
 800a264:	aa2c      	add	r2, sp, #176	; 0xb0
 800a266:	f001 f9c3 	bl	800b5f0 <__ssprint_r>
 800a26a:	2800      	cmp	r0, #0
 800a26c:	d17b      	bne.n	800a366 <_svfprintf_r+0x13be>
 800a26e:	ac2f      	add	r4, sp, #188	; 0xbc
 800a270:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
 800a272:	2200      	movs	r2, #0
 800a274:	9814      	ldr	r0, [sp, #80]	; 0x50
 800a276:	9915      	ldr	r1, [sp, #84]	; 0x54
 800a278:	9309      	str	r3, [sp, #36]	; 0x24
 800a27a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800a27c:	9f2e      	ldr	r7, [sp, #184]	; 0xb8
 800a27e:	1e5d      	subs	r5, r3, #1
 800a280:	2300      	movs	r3, #0
 800a282:	f7f6 f8e1 	bl	8000448 <__aeabi_dcmpeq>
 800a286:	2800      	cmp	r0, #0
 800a288:	d126      	bne.n	800a2d8 <_svfprintf_r+0x1330>
 800a28a:	9b08      	ldr	r3, [sp, #32]
 800a28c:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800a28e:	3301      	adds	r3, #1
 800a290:	990e      	ldr	r1, [sp, #56]	; 0x38
 800a292:	6023      	str	r3, [r4, #0]
 800a294:	1e7b      	subs	r3, r7, #1
 800a296:	3201      	adds	r2, #1
 800a298:	185b      	adds	r3, r3, r1
 800a29a:	6065      	str	r5, [r4, #4]
 800a29c:	932e      	str	r3, [sp, #184]	; 0xb8
 800a29e:	922d      	str	r2, [sp, #180]	; 0xb4
 800a2a0:	3408      	adds	r4, #8
 800a2a2:	2a07      	cmp	r2, #7
 800a2a4:	dd07      	ble.n	800a2b6 <_svfprintf_r+0x130e>
 800a2a6:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800a2a8:	980a      	ldr	r0, [sp, #40]	; 0x28
 800a2aa:	aa2c      	add	r2, sp, #176	; 0xb0
 800a2ac:	f001 f9a0 	bl	800b5f0 <__ssprint_r>
 800a2b0:	2800      	cmp	r0, #0
 800a2b2:	d158      	bne.n	800a366 <_svfprintf_r+0x13be>
 800a2b4:	ac2f      	add	r4, sp, #188	; 0xbc
 800a2b6:	ab28      	add	r3, sp, #160	; 0xa0
 800a2b8:	6023      	str	r3, [r4, #0]
 800a2ba:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 800a2bc:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 800a2be:	6063      	str	r3, [r4, #4]
 800a2c0:	9b2e      	ldr	r3, [sp, #184]	; 0xb8
 800a2c2:	189b      	adds	r3, r3, r2
 800a2c4:	932e      	str	r3, [sp, #184]	; 0xb8
 800a2c6:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
 800a2c8:	3301      	adds	r3, #1
 800a2ca:	932d      	str	r3, [sp, #180]	; 0xb4
 800a2cc:	2b07      	cmp	r3, #7
 800a2ce:	dd00      	ble.n	800a2d2 <_svfprintf_r+0x132a>
 800a2d0:	e638      	b.n	8009f44 <_svfprintf_r+0xf9c>
 800a2d2:	3408      	adds	r4, #8
 800a2d4:	0027      	movs	r7, r4
 800a2d6:	e595      	b.n	8009e04 <_svfprintf_r+0xe5c>
 800a2d8:	2710      	movs	r7, #16
 800a2da:	2d00      	cmp	r5, #0
 800a2dc:	ddeb      	ble.n	800a2b6 <_svfprintf_r+0x130e>
 800a2de:	0021      	movs	r1, r4
 800a2e0:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
 800a2e2:	4850      	ldr	r0, [pc, #320]	; (800a424 <_svfprintf_r+0x147c>)
 800a2e4:	9a2e      	ldr	r2, [sp, #184]	; 0xb8
 800a2e6:	3301      	adds	r3, #1
 800a2e8:	3108      	adds	r1, #8
 800a2ea:	6020      	str	r0, [r4, #0]
 800a2ec:	2d10      	cmp	r5, #16
 800a2ee:	dc07      	bgt.n	800a300 <_svfprintf_r+0x1358>
 800a2f0:	6065      	str	r5, [r4, #4]
 800a2f2:	000c      	movs	r4, r1
 800a2f4:	18ad      	adds	r5, r5, r2
 800a2f6:	952e      	str	r5, [sp, #184]	; 0xb8
 800a2f8:	932d      	str	r3, [sp, #180]	; 0xb4
 800a2fa:	2b07      	cmp	r3, #7
 800a2fc:	dddb      	ble.n	800a2b6 <_svfprintf_r+0x130e>
 800a2fe:	e7d2      	b.n	800a2a6 <_svfprintf_r+0x12fe>
 800a300:	3210      	adds	r2, #16
 800a302:	6067      	str	r7, [r4, #4]
 800a304:	922e      	str	r2, [sp, #184]	; 0xb8
 800a306:	932d      	str	r3, [sp, #180]	; 0xb4
 800a308:	2b07      	cmp	r3, #7
 800a30a:	dd07      	ble.n	800a31c <_svfprintf_r+0x1374>
 800a30c:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800a30e:	980a      	ldr	r0, [sp, #40]	; 0x28
 800a310:	aa2c      	add	r2, sp, #176	; 0xb0
 800a312:	f001 f96d 	bl	800b5f0 <__ssprint_r>
 800a316:	2800      	cmp	r0, #0
 800a318:	d125      	bne.n	800a366 <_svfprintf_r+0x13be>
 800a31a:	a92f      	add	r1, sp, #188	; 0xbc
 800a31c:	000c      	movs	r4, r1
 800a31e:	3d10      	subs	r5, #16
 800a320:	e7dd      	b.n	800a2de <_svfprintf_r+0x1336>
 800a322:	9808      	ldr	r0, [sp, #32]
 800a324:	912e      	str	r1, [sp, #184]	; 0xb8
 800a326:	c705      	stmia	r7!, {r0, r2}
 800a328:	932d      	str	r3, [sp, #180]	; 0xb4
 800a32a:	e7e6      	b.n	800a2fa <_svfprintf_r+0x1352>
 800a32c:	9b18      	ldr	r3, [sp, #96]	; 0x60
 800a32e:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 800a330:	2510      	movs	r5, #16
 800a332:	1a9c      	subs	r4, r3, r2
 800a334:	2c00      	cmp	r4, #0
 800a336:	dc00      	bgt.n	800a33a <_svfprintf_r+0x1392>
 800a338:	e567      	b.n	8009e0a <_svfprintf_r+0xe62>
 800a33a:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
 800a33c:	493a      	ldr	r1, [pc, #232]	; (800a428 <_svfprintf_r+0x1480>)
 800a33e:	9a2e      	ldr	r2, [sp, #184]	; 0xb8
 800a340:	3301      	adds	r3, #1
 800a342:	6039      	str	r1, [r7, #0]
 800a344:	2c10      	cmp	r4, #16
 800a346:	dc19      	bgt.n	800a37c <_svfprintf_r+0x13d4>
 800a348:	607c      	str	r4, [r7, #4]
 800a34a:	18a4      	adds	r4, r4, r2
 800a34c:	942e      	str	r4, [sp, #184]	; 0xb8
 800a34e:	932d      	str	r3, [sp, #180]	; 0xb4
 800a350:	2b07      	cmp	r3, #7
 800a352:	dc00      	bgt.n	800a356 <_svfprintf_r+0x13ae>
 800a354:	e559      	b.n	8009e0a <_svfprintf_r+0xe62>
 800a356:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800a358:	980a      	ldr	r0, [sp, #40]	; 0x28
 800a35a:	aa2c      	add	r2, sp, #176	; 0xb0
 800a35c:	f001 f948 	bl	800b5f0 <__ssprint_r>
 800a360:	2800      	cmp	r0, #0
 800a362:	d100      	bne.n	800a366 <_svfprintf_r+0x13be>
 800a364:	e551      	b.n	8009e0a <_svfprintf_r+0xe62>
 800a366:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800a368:	2b00      	cmp	r3, #0
 800a36a:	d101      	bne.n	800a370 <_svfprintf_r+0x13c8>
 800a36c:	f7ff f845 	bl	80093fa <_svfprintf_r+0x452>
 800a370:	0019      	movs	r1, r3
 800a372:	980a      	ldr	r0, [sp, #40]	; 0x28
 800a374:	f7fd ffd8 	bl	8008328 <_free_r>
 800a378:	f7ff f83f 	bl	80093fa <_svfprintf_r+0x452>
 800a37c:	3210      	adds	r2, #16
 800a37e:	607d      	str	r5, [r7, #4]
 800a380:	922e      	str	r2, [sp, #184]	; 0xb8
 800a382:	932d      	str	r3, [sp, #180]	; 0xb4
 800a384:	3708      	adds	r7, #8
 800a386:	2b07      	cmp	r3, #7
 800a388:	dd07      	ble.n	800a39a <_svfprintf_r+0x13f2>
 800a38a:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800a38c:	980a      	ldr	r0, [sp, #40]	; 0x28
 800a38e:	aa2c      	add	r2, sp, #176	; 0xb0
 800a390:	f001 f92e 	bl	800b5f0 <__ssprint_r>
 800a394:	2800      	cmp	r0, #0
 800a396:	d1e6      	bne.n	800a366 <_svfprintf_r+0x13be>
 800a398:	af2f      	add	r7, sp, #188	; 0xbc
 800a39a:	3c10      	subs	r4, #16
 800a39c:	e7cd      	b.n	800a33a <_svfprintf_r+0x1392>
 800a39e:	990c      	ldr	r1, [sp, #48]	; 0x30
 800a3a0:	980a      	ldr	r0, [sp, #40]	; 0x28
 800a3a2:	f7fd ffc1 	bl	8008328 <_free_r>
 800a3a6:	e549      	b.n	8009e3c <_svfprintf_r+0xe94>
 800a3a8:	9b2e      	ldr	r3, [sp, #184]	; 0xb8
 800a3aa:	2b00      	cmp	r3, #0
 800a3ac:	d101      	bne.n	800a3b2 <_svfprintf_r+0x140a>
 800a3ae:	f7ff f824 	bl	80093fa <_svfprintf_r+0x452>
 800a3b2:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800a3b4:	980a      	ldr	r0, [sp, #40]	; 0x28
 800a3b6:	aa2c      	add	r2, sp, #176	; 0xb0
 800a3b8:	f001 f91a 	bl	800b5f0 <__ssprint_r>
 800a3bc:	f7ff f81d 	bl	80093fa <_svfprintf_r+0x452>
 800a3c0:	0034      	movs	r4, r6
 800a3c2:	2a00      	cmp	r2, #0
 800a3c4:	d101      	bne.n	800a3ca <_svfprintf_r+0x1422>
 800a3c6:	f7fe ff8c 	bl	80092e2 <_svfprintf_r+0x33a>
 800a3ca:	2b01      	cmp	r3, #1
 800a3cc:	d101      	bne.n	800a3d2 <_svfprintf_r+0x142a>
 800a3ce:	f7ff fc01 	bl	8009bd4 <_svfprintf_r+0xc2c>
 800a3d2:	2b02      	cmp	r3, #2
 800a3d4:	d100      	bne.n	800a3d8 <_svfprintf_r+0x1430>
 800a3d6:	e459      	b.n	8009c8c <_svfprintf_r+0xce4>
 800a3d8:	2507      	movs	r5, #7
 800a3da:	ab58      	add	r3, sp, #352	; 0x160
 800a3dc:	9308      	str	r3, [sp, #32]
 800a3de:	9a08      	ldr	r2, [sp, #32]
 800a3e0:	0013      	movs	r3, r2
 800a3e2:	3b01      	subs	r3, #1
 800a3e4:	9308      	str	r3, [sp, #32]
 800a3e6:	9b06      	ldr	r3, [sp, #24]
 800a3e8:	9908      	ldr	r1, [sp, #32]
 800a3ea:	402b      	ands	r3, r5
 800a3ec:	3330      	adds	r3, #48	; 0x30
 800a3ee:	700b      	strb	r3, [r1, #0]
 800a3f0:	9907      	ldr	r1, [sp, #28]
 800a3f2:	074e      	lsls	r6, r1, #29
 800a3f4:	9906      	ldr	r1, [sp, #24]
 800a3f6:	08c8      	lsrs	r0, r1, #3
 800a3f8:	9907      	ldr	r1, [sp, #28]
 800a3fa:	4306      	orrs	r6, r0
 800a3fc:	08c9      	lsrs	r1, r1, #3
 800a3fe:	9107      	str	r1, [sp, #28]
 800a400:	0031      	movs	r1, r6
 800a402:	9807      	ldr	r0, [sp, #28]
 800a404:	9606      	str	r6, [sp, #24]
 800a406:	4301      	orrs	r1, r0
 800a408:	d1e9      	bne.n	800a3de <_svfprintf_r+0x1436>
 800a40a:	07e1      	lsls	r1, r4, #31
 800a40c:	d400      	bmi.n	800a410 <_svfprintf_r+0x1468>
 800a40e:	e42a      	b.n	8009c66 <_svfprintf_r+0xcbe>
 800a410:	2b30      	cmp	r3, #48	; 0x30
 800a412:	d100      	bne.n	800a416 <_svfprintf_r+0x146e>
 800a414:	e427      	b.n	8009c66 <_svfprintf_r+0xcbe>
 800a416:	2130      	movs	r1, #48	; 0x30
 800a418:	9b08      	ldr	r3, [sp, #32]
 800a41a:	3b01      	subs	r3, #1
 800a41c:	7019      	strb	r1, [r3, #0]
 800a41e:	1e93      	subs	r3, r2, #2
 800a420:	9308      	str	r3, [sp, #32]
 800a422:	e420      	b.n	8009c66 <_svfprintf_r+0xcbe>
 800a424:	0800e7e8 	.word	0x0800e7e8
 800a428:	0800e7d8 	.word	0x0800e7d8

0800a42c <_fclose_r>:
 800a42c:	b570      	push	{r4, r5, r6, lr}
 800a42e:	0005      	movs	r5, r0
 800a430:	1e0c      	subs	r4, r1, #0
 800a432:	d102      	bne.n	800a43a <_fclose_r+0xe>
 800a434:	2600      	movs	r6, #0
 800a436:	0030      	movs	r0, r6
 800a438:	bd70      	pop	{r4, r5, r6, pc}
 800a43a:	2800      	cmp	r0, #0
 800a43c:	d004      	beq.n	800a448 <_fclose_r+0x1c>
 800a43e:	6b43      	ldr	r3, [r0, #52]	; 0x34
 800a440:	2b00      	cmp	r3, #0
 800a442:	d101      	bne.n	800a448 <_fclose_r+0x1c>
 800a444:	f7fd fd9e 	bl	8007f84 <__sinit>
 800a448:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800a44a:	07db      	lsls	r3, r3, #31
 800a44c:	d405      	bmi.n	800a45a <_fclose_r+0x2e>
 800a44e:	89a3      	ldrh	r3, [r4, #12]
 800a450:	059b      	lsls	r3, r3, #22
 800a452:	d402      	bmi.n	800a45a <_fclose_r+0x2e>
 800a454:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800a456:	f7fd fef3 	bl	8008240 <__retarget_lock_acquire_recursive>
 800a45a:	220c      	movs	r2, #12
 800a45c:	5ea3      	ldrsh	r3, [r4, r2]
 800a45e:	2b00      	cmp	r3, #0
 800a460:	d109      	bne.n	800a476 <_fclose_r+0x4a>
 800a462:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800a464:	3301      	adds	r3, #1
 800a466:	0016      	movs	r6, r2
 800a468:	401e      	ands	r6, r3
 800a46a:	421a      	tst	r2, r3
 800a46c:	d1e2      	bne.n	800a434 <_fclose_r+0x8>
 800a46e:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800a470:	f7fd fee7 	bl	8008242 <__retarget_lock_release_recursive>
 800a474:	e7df      	b.n	800a436 <_fclose_r+0xa>
 800a476:	0021      	movs	r1, r4
 800a478:	0028      	movs	r0, r5
 800a47a:	f000 f837 	bl	800a4ec <__sflush_r>
 800a47e:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 800a480:	0006      	movs	r6, r0
 800a482:	2b00      	cmp	r3, #0
 800a484:	d006      	beq.n	800a494 <_fclose_r+0x68>
 800a486:	0028      	movs	r0, r5
 800a488:	69e1      	ldr	r1, [r4, #28]
 800a48a:	4798      	blx	r3
 800a48c:	2800      	cmp	r0, #0
 800a48e:	da01      	bge.n	800a494 <_fclose_r+0x68>
 800a490:	2601      	movs	r6, #1
 800a492:	4276      	negs	r6, r6
 800a494:	89a3      	ldrh	r3, [r4, #12]
 800a496:	061b      	lsls	r3, r3, #24
 800a498:	d503      	bpl.n	800a4a2 <_fclose_r+0x76>
 800a49a:	0028      	movs	r0, r5
 800a49c:	6921      	ldr	r1, [r4, #16]
 800a49e:	f7fd ff43 	bl	8008328 <_free_r>
 800a4a2:	6b21      	ldr	r1, [r4, #48]	; 0x30
 800a4a4:	2900      	cmp	r1, #0
 800a4a6:	d008      	beq.n	800a4ba <_fclose_r+0x8e>
 800a4a8:	0023      	movs	r3, r4
 800a4aa:	3340      	adds	r3, #64	; 0x40
 800a4ac:	4299      	cmp	r1, r3
 800a4ae:	d002      	beq.n	800a4b6 <_fclose_r+0x8a>
 800a4b0:	0028      	movs	r0, r5
 800a4b2:	f7fd ff39 	bl	8008328 <_free_r>
 800a4b6:	2300      	movs	r3, #0
 800a4b8:	6323      	str	r3, [r4, #48]	; 0x30
 800a4ba:	6c61      	ldr	r1, [r4, #68]	; 0x44
 800a4bc:	2900      	cmp	r1, #0
 800a4be:	d004      	beq.n	800a4ca <_fclose_r+0x9e>
 800a4c0:	0028      	movs	r0, r5
 800a4c2:	f7fd ff31 	bl	8008328 <_free_r>
 800a4c6:	2300      	movs	r3, #0
 800a4c8:	6463      	str	r3, [r4, #68]	; 0x44
 800a4ca:	f7fd fd4b 	bl	8007f64 <__sfp_lock_acquire>
 800a4ce:	2300      	movs	r3, #0
 800a4d0:	81a3      	strh	r3, [r4, #12]
 800a4d2:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800a4d4:	07db      	lsls	r3, r3, #31
 800a4d6:	d402      	bmi.n	800a4de <_fclose_r+0xb2>
 800a4d8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800a4da:	f7fd feb2 	bl	8008242 <__retarget_lock_release_recursive>
 800a4de:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800a4e0:	f7fd fead 	bl	800823e <__retarget_lock_close_recursive>
 800a4e4:	f7fd fd46 	bl	8007f74 <__sfp_lock_release>
 800a4e8:	e7a5      	b.n	800a436 <_fclose_r+0xa>
	...

0800a4ec <__sflush_r>:
 800a4ec:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800a4ee:	230c      	movs	r3, #12
 800a4f0:	5eca      	ldrsh	r2, [r1, r3]
 800a4f2:	000c      	movs	r4, r1
 800a4f4:	0005      	movs	r5, r0
 800a4f6:	b291      	uxth	r1, r2
 800a4f8:	0713      	lsls	r3, r2, #28
 800a4fa:	d464      	bmi.n	800a5c6 <__sflush_r+0xda>
 800a4fc:	2380      	movs	r3, #128	; 0x80
 800a4fe:	011b      	lsls	r3, r3, #4
 800a500:	4313      	orrs	r3, r2
 800a502:	6862      	ldr	r2, [r4, #4]
 800a504:	81a3      	strh	r3, [r4, #12]
 800a506:	2a00      	cmp	r2, #0
 800a508:	dc04      	bgt.n	800a514 <__sflush_r+0x28>
 800a50a:	6be2      	ldr	r2, [r4, #60]	; 0x3c
 800a50c:	2a00      	cmp	r2, #0
 800a50e:	dc01      	bgt.n	800a514 <__sflush_r+0x28>
 800a510:	2000      	movs	r0, #0
 800a512:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 800a514:	6aa7      	ldr	r7, [r4, #40]	; 0x28
 800a516:	2f00      	cmp	r7, #0
 800a518:	d0fa      	beq.n	800a510 <__sflush_r+0x24>
 800a51a:	2200      	movs	r2, #0
 800a51c:	2080      	movs	r0, #128	; 0x80
 800a51e:	682e      	ldr	r6, [r5, #0]
 800a520:	602a      	str	r2, [r5, #0]
 800a522:	001a      	movs	r2, r3
 800a524:	0140      	lsls	r0, r0, #5
 800a526:	69e1      	ldr	r1, [r4, #28]
 800a528:	4002      	ands	r2, r0
 800a52a:	4203      	tst	r3, r0
 800a52c:	d038      	beq.n	800a5a0 <__sflush_r+0xb4>
 800a52e:	6d20      	ldr	r0, [r4, #80]	; 0x50
 800a530:	89a3      	ldrh	r3, [r4, #12]
 800a532:	075b      	lsls	r3, r3, #29
 800a534:	d506      	bpl.n	800a544 <__sflush_r+0x58>
 800a536:	6863      	ldr	r3, [r4, #4]
 800a538:	1ac0      	subs	r0, r0, r3
 800a53a:	6b23      	ldr	r3, [r4, #48]	; 0x30
 800a53c:	2b00      	cmp	r3, #0
 800a53e:	d001      	beq.n	800a544 <__sflush_r+0x58>
 800a540:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 800a542:	1ac0      	subs	r0, r0, r3
 800a544:	0002      	movs	r2, r0
 800a546:	2300      	movs	r3, #0
 800a548:	0028      	movs	r0, r5
 800a54a:	6aa7      	ldr	r7, [r4, #40]	; 0x28
 800a54c:	69e1      	ldr	r1, [r4, #28]
 800a54e:	47b8      	blx	r7
 800a550:	89a2      	ldrh	r2, [r4, #12]
 800a552:	1c43      	adds	r3, r0, #1
 800a554:	d106      	bne.n	800a564 <__sflush_r+0x78>
 800a556:	6829      	ldr	r1, [r5, #0]
 800a558:	291d      	cmp	r1, #29
 800a55a:	d830      	bhi.n	800a5be <__sflush_r+0xd2>
 800a55c:	4b2c      	ldr	r3, [pc, #176]	; (800a610 <__sflush_r+0x124>)
 800a55e:	410b      	asrs	r3, r1
 800a560:	07db      	lsls	r3, r3, #31
 800a562:	d42c      	bmi.n	800a5be <__sflush_r+0xd2>
 800a564:	4b2b      	ldr	r3, [pc, #172]	; (800a614 <__sflush_r+0x128>)
 800a566:	4013      	ands	r3, r2
 800a568:	2200      	movs	r2, #0
 800a56a:	6062      	str	r2, [r4, #4]
 800a56c:	6922      	ldr	r2, [r4, #16]
 800a56e:	b21b      	sxth	r3, r3
 800a570:	81a3      	strh	r3, [r4, #12]
 800a572:	6022      	str	r2, [r4, #0]
 800a574:	04db      	lsls	r3, r3, #19
 800a576:	d505      	bpl.n	800a584 <__sflush_r+0x98>
 800a578:	1c43      	adds	r3, r0, #1
 800a57a:	d102      	bne.n	800a582 <__sflush_r+0x96>
 800a57c:	682b      	ldr	r3, [r5, #0]
 800a57e:	2b00      	cmp	r3, #0
 800a580:	d100      	bne.n	800a584 <__sflush_r+0x98>
 800a582:	6520      	str	r0, [r4, #80]	; 0x50
 800a584:	6b21      	ldr	r1, [r4, #48]	; 0x30
 800a586:	602e      	str	r6, [r5, #0]
 800a588:	2900      	cmp	r1, #0
 800a58a:	d0c1      	beq.n	800a510 <__sflush_r+0x24>
 800a58c:	0023      	movs	r3, r4
 800a58e:	3340      	adds	r3, #64	; 0x40
 800a590:	4299      	cmp	r1, r3
 800a592:	d002      	beq.n	800a59a <__sflush_r+0xae>
 800a594:	0028      	movs	r0, r5
 800a596:	f7fd fec7 	bl	8008328 <_free_r>
 800a59a:	2000      	movs	r0, #0
 800a59c:	6320      	str	r0, [r4, #48]	; 0x30
 800a59e:	e7b8      	b.n	800a512 <__sflush_r+0x26>
 800a5a0:	2301      	movs	r3, #1
 800a5a2:	0028      	movs	r0, r5
 800a5a4:	47b8      	blx	r7
 800a5a6:	1c43      	adds	r3, r0, #1
 800a5a8:	d1c2      	bne.n	800a530 <__sflush_r+0x44>
 800a5aa:	682b      	ldr	r3, [r5, #0]
 800a5ac:	2b00      	cmp	r3, #0
 800a5ae:	d0bf      	beq.n	800a530 <__sflush_r+0x44>
 800a5b0:	2b1d      	cmp	r3, #29
 800a5b2:	d001      	beq.n	800a5b8 <__sflush_r+0xcc>
 800a5b4:	2b16      	cmp	r3, #22
 800a5b6:	d101      	bne.n	800a5bc <__sflush_r+0xd0>
 800a5b8:	602e      	str	r6, [r5, #0]
 800a5ba:	e7a9      	b.n	800a510 <__sflush_r+0x24>
 800a5bc:	89a2      	ldrh	r2, [r4, #12]
 800a5be:	2340      	movs	r3, #64	; 0x40
 800a5c0:	4313      	orrs	r3, r2
 800a5c2:	81a3      	strh	r3, [r4, #12]
 800a5c4:	e7a5      	b.n	800a512 <__sflush_r+0x26>
 800a5c6:	6926      	ldr	r6, [r4, #16]
 800a5c8:	2e00      	cmp	r6, #0
 800a5ca:	d0a1      	beq.n	800a510 <__sflush_r+0x24>
 800a5cc:	6827      	ldr	r7, [r4, #0]
 800a5ce:	6026      	str	r6, [r4, #0]
 800a5d0:	1bbb      	subs	r3, r7, r6
 800a5d2:	9301      	str	r3, [sp, #4]
 800a5d4:	2300      	movs	r3, #0
 800a5d6:	0789      	lsls	r1, r1, #30
 800a5d8:	d100      	bne.n	800a5dc <__sflush_r+0xf0>
 800a5da:	6963      	ldr	r3, [r4, #20]
 800a5dc:	60a3      	str	r3, [r4, #8]
 800a5de:	9b01      	ldr	r3, [sp, #4]
 800a5e0:	2b00      	cmp	r3, #0
 800a5e2:	dc00      	bgt.n	800a5e6 <__sflush_r+0xfa>
 800a5e4:	e794      	b.n	800a510 <__sflush_r+0x24>
 800a5e6:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800a5e8:	0032      	movs	r2, r6
 800a5ea:	001f      	movs	r7, r3
 800a5ec:	0028      	movs	r0, r5
 800a5ee:	9b01      	ldr	r3, [sp, #4]
 800a5f0:	69e1      	ldr	r1, [r4, #28]
 800a5f2:	47b8      	blx	r7
 800a5f4:	2800      	cmp	r0, #0
 800a5f6:	dc06      	bgt.n	800a606 <__sflush_r+0x11a>
 800a5f8:	2340      	movs	r3, #64	; 0x40
 800a5fa:	2001      	movs	r0, #1
 800a5fc:	89a2      	ldrh	r2, [r4, #12]
 800a5fe:	4240      	negs	r0, r0
 800a600:	4313      	orrs	r3, r2
 800a602:	81a3      	strh	r3, [r4, #12]
 800a604:	e785      	b.n	800a512 <__sflush_r+0x26>
 800a606:	9b01      	ldr	r3, [sp, #4]
 800a608:	1836      	adds	r6, r6, r0
 800a60a:	1a1b      	subs	r3, r3, r0
 800a60c:	9301      	str	r3, [sp, #4]
 800a60e:	e7e6      	b.n	800a5de <__sflush_r+0xf2>
 800a610:	dfbffffe 	.word	0xdfbffffe
 800a614:	fffff7ff 	.word	0xfffff7ff

0800a618 <_fflush_r>:
 800a618:	b570      	push	{r4, r5, r6, lr}
 800a61a:	0005      	movs	r5, r0
 800a61c:	000c      	movs	r4, r1
 800a61e:	2800      	cmp	r0, #0
 800a620:	d004      	beq.n	800a62c <_fflush_r+0x14>
 800a622:	6b43      	ldr	r3, [r0, #52]	; 0x34
 800a624:	2b00      	cmp	r3, #0
 800a626:	d101      	bne.n	800a62c <_fflush_r+0x14>
 800a628:	f7fd fcac 	bl	8007f84 <__sinit>
 800a62c:	220c      	movs	r2, #12
 800a62e:	5ea3      	ldrsh	r3, [r4, r2]
 800a630:	1e1e      	subs	r6, r3, #0
 800a632:	d015      	beq.n	800a660 <_fflush_r+0x48>
 800a634:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800a636:	07d2      	lsls	r2, r2, #31
 800a638:	d404      	bmi.n	800a644 <_fflush_r+0x2c>
 800a63a:	059b      	lsls	r3, r3, #22
 800a63c:	d402      	bmi.n	800a644 <_fflush_r+0x2c>
 800a63e:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800a640:	f7fd fdfe 	bl	8008240 <__retarget_lock_acquire_recursive>
 800a644:	0021      	movs	r1, r4
 800a646:	0028      	movs	r0, r5
 800a648:	f7ff ff50 	bl	800a4ec <__sflush_r>
 800a64c:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800a64e:	0006      	movs	r6, r0
 800a650:	07db      	lsls	r3, r3, #31
 800a652:	d405      	bmi.n	800a660 <_fflush_r+0x48>
 800a654:	89a3      	ldrh	r3, [r4, #12]
 800a656:	059b      	lsls	r3, r3, #22
 800a658:	d402      	bmi.n	800a660 <_fflush_r+0x48>
 800a65a:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800a65c:	f7fd fdf1 	bl	8008242 <__retarget_lock_release_recursive>
 800a660:	0030      	movs	r0, r6
 800a662:	bd70      	pop	{r4, r5, r6, pc}

0800a664 <strncpy>:
 800a664:	0003      	movs	r3, r0
 800a666:	b530      	push	{r4, r5, lr}
 800a668:	001d      	movs	r5, r3
 800a66a:	2a00      	cmp	r2, #0
 800a66c:	d006      	beq.n	800a67c <strncpy+0x18>
 800a66e:	780c      	ldrb	r4, [r1, #0]
 800a670:	3a01      	subs	r2, #1
 800a672:	3301      	adds	r3, #1
 800a674:	702c      	strb	r4, [r5, #0]
 800a676:	3101      	adds	r1, #1
 800a678:	2c00      	cmp	r4, #0
 800a67a:	d1f5      	bne.n	800a668 <strncpy+0x4>
 800a67c:	2100      	movs	r1, #0
 800a67e:	189a      	adds	r2, r3, r2
 800a680:	4293      	cmp	r3, r2
 800a682:	d100      	bne.n	800a686 <strncpy+0x22>
 800a684:	bd30      	pop	{r4, r5, pc}
 800a686:	7019      	strb	r1, [r3, #0]
 800a688:	3301      	adds	r3, #1
 800a68a:	e7f9      	b.n	800a680 <strncpy+0x1c>

0800a68c <_localeconv_r>:
 800a68c:	4800      	ldr	r0, [pc, #0]	; (800a690 <_localeconv_r+0x4>)
 800a68e:	4770      	bx	lr
 800a690:	2000010c 	.word	0x2000010c

0800a694 <_sbrk_r>:
 800a694:	2300      	movs	r3, #0
 800a696:	b570      	push	{r4, r5, r6, lr}
 800a698:	4d06      	ldr	r5, [pc, #24]	; (800a6b4 <_sbrk_r+0x20>)
 800a69a:	0004      	movs	r4, r0
 800a69c:	0008      	movs	r0, r1
 800a69e:	602b      	str	r3, [r5, #0]
 800a6a0:	f7f8 fcc4 	bl	800302c <_sbrk>
 800a6a4:	1c43      	adds	r3, r0, #1
 800a6a6:	d103      	bne.n	800a6b0 <_sbrk_r+0x1c>
 800a6a8:	682b      	ldr	r3, [r5, #0]
 800a6aa:	2b00      	cmp	r3, #0
 800a6ac:	d000      	beq.n	800a6b0 <_sbrk_r+0x1c>
 800a6ae:	6023      	str	r3, [r4, #0]
 800a6b0:	bd70      	pop	{r4, r5, r6, pc}
 800a6b2:	46c0      	nop			; (mov r8, r8)
 800a6b4:	200009dc 	.word	0x200009dc

0800a6b8 <__libc_fini_array>:
 800a6b8:	b570      	push	{r4, r5, r6, lr}
 800a6ba:	4c07      	ldr	r4, [pc, #28]	; (800a6d8 <__libc_fini_array+0x20>)
 800a6bc:	4d07      	ldr	r5, [pc, #28]	; (800a6dc <__libc_fini_array+0x24>)
 800a6be:	1b64      	subs	r4, r4, r5
 800a6c0:	10a4      	asrs	r4, r4, #2
 800a6c2:	2c00      	cmp	r4, #0
 800a6c4:	d102      	bne.n	800a6cc <__libc_fini_array+0x14>
 800a6c6:	f002 fa93 	bl	800cbf0 <_fini>
 800a6ca:	bd70      	pop	{r4, r5, r6, pc}
 800a6cc:	3c01      	subs	r4, #1
 800a6ce:	00a3      	lsls	r3, r4, #2
 800a6d0:	58eb      	ldr	r3, [r5, r3]
 800a6d2:	4798      	blx	r3
 800a6d4:	e7f5      	b.n	800a6c2 <__libc_fini_array+0xa>
 800a6d6:	46c0      	nop			; (mov r8, r8)
 800a6d8:	0800e8d0 	.word	0x0800e8d0
 800a6dc:	0800e8cc 	.word	0x0800e8cc

0800a6e0 <sysconf>:
 800a6e0:	2380      	movs	r3, #128	; 0x80
 800a6e2:	b510      	push	{r4, lr}
 800a6e4:	2808      	cmp	r0, #8
 800a6e6:	d004      	beq.n	800a6f2 <sysconf+0x12>
 800a6e8:	f7fd fd7e 	bl	80081e8 <__errno>
 800a6ec:	2316      	movs	r3, #22
 800a6ee:	6003      	str	r3, [r0, #0]
 800a6f0:	3b17      	subs	r3, #23
 800a6f2:	0018      	movs	r0, r3
 800a6f4:	bd10      	pop	{r4, pc}

0800a6f6 <memchr>:
 800a6f6:	b2c9      	uxtb	r1, r1
 800a6f8:	1882      	adds	r2, r0, r2
 800a6fa:	4290      	cmp	r0, r2
 800a6fc:	d101      	bne.n	800a702 <memchr+0xc>
 800a6fe:	2000      	movs	r0, #0
 800a700:	4770      	bx	lr
 800a702:	7803      	ldrb	r3, [r0, #0]
 800a704:	428b      	cmp	r3, r1
 800a706:	d0fb      	beq.n	800a700 <memchr+0xa>
 800a708:	3001      	adds	r0, #1
 800a70a:	e7f6      	b.n	800a6fa <memchr+0x4>

0800a70c <frexp>:
 800a70c:	b570      	push	{r4, r5, r6, lr}
 800a70e:	0014      	movs	r4, r2
 800a710:	2500      	movs	r5, #0
 800a712:	6025      	str	r5, [r4, #0]
 800a714:	4d10      	ldr	r5, [pc, #64]	; (800a758 <frexp+0x4c>)
 800a716:	004b      	lsls	r3, r1, #1
 800a718:	000a      	movs	r2, r1
 800a71a:	085b      	lsrs	r3, r3, #1
 800a71c:	42ab      	cmp	r3, r5
 800a71e:	dc1a      	bgt.n	800a756 <frexp+0x4a>
 800a720:	001d      	movs	r5, r3
 800a722:	4305      	orrs	r5, r0
 800a724:	d017      	beq.n	800a756 <frexp+0x4a>
 800a726:	4d0d      	ldr	r5, [pc, #52]	; (800a75c <frexp+0x50>)
 800a728:	4229      	tst	r1, r5
 800a72a:	d109      	bne.n	800a740 <frexp+0x34>
 800a72c:	2200      	movs	r2, #0
 800a72e:	4b0c      	ldr	r3, [pc, #48]	; (800a760 <frexp+0x54>)
 800a730:	f7f6 fefe 	bl	8001530 <__aeabi_dmul>
 800a734:	2536      	movs	r5, #54	; 0x36
 800a736:	000a      	movs	r2, r1
 800a738:	004b      	lsls	r3, r1, #1
 800a73a:	426d      	negs	r5, r5
 800a73c:	085b      	lsrs	r3, r3, #1
 800a73e:	6025      	str	r5, [r4, #0]
 800a740:	4d08      	ldr	r5, [pc, #32]	; (800a764 <frexp+0x58>)
 800a742:	151b      	asrs	r3, r3, #20
 800a744:	195b      	adds	r3, r3, r5
 800a746:	6825      	ldr	r5, [r4, #0]
 800a748:	18eb      	adds	r3, r5, r3
 800a74a:	6023      	str	r3, [r4, #0]
 800a74c:	4b06      	ldr	r3, [pc, #24]	; (800a768 <frexp+0x5c>)
 800a74e:	401a      	ands	r2, r3
 800a750:	4b06      	ldr	r3, [pc, #24]	; (800a76c <frexp+0x60>)
 800a752:	4313      	orrs	r3, r2
 800a754:	0019      	movs	r1, r3
 800a756:	bd70      	pop	{r4, r5, r6, pc}
 800a758:	7fefffff 	.word	0x7fefffff
 800a75c:	7ff00000 	.word	0x7ff00000
 800a760:	43500000 	.word	0x43500000
 800a764:	fffffc02 	.word	0xfffffc02
 800a768:	800fffff 	.word	0x800fffff
 800a76c:	3fe00000 	.word	0x3fe00000

0800a770 <__register_exitproc>:
 800a770:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800a772:	4f1c      	ldr	r7, [pc, #112]	; (800a7e4 <__register_exitproc+0x74>)
 800a774:	0004      	movs	r4, r0
 800a776:	6838      	ldr	r0, [r7, #0]
 800a778:	0016      	movs	r6, r2
 800a77a:	9301      	str	r3, [sp, #4]
 800a77c:	9100      	str	r1, [sp, #0]
 800a77e:	f7fd fd5f 	bl	8008240 <__retarget_lock_acquire_recursive>
 800a782:	4a19      	ldr	r2, [pc, #100]	; (800a7e8 <__register_exitproc+0x78>)
 800a784:	6813      	ldr	r3, [r2, #0]
 800a786:	2b00      	cmp	r3, #0
 800a788:	d101      	bne.n	800a78e <__register_exitproc+0x1e>
 800a78a:	4b18      	ldr	r3, [pc, #96]	; (800a7ec <__register_exitproc+0x7c>)
 800a78c:	6013      	str	r3, [r2, #0]
 800a78e:	685a      	ldr	r2, [r3, #4]
 800a790:	6838      	ldr	r0, [r7, #0]
 800a792:	2a1f      	cmp	r2, #31
 800a794:	dd04      	ble.n	800a7a0 <__register_exitproc+0x30>
 800a796:	f7fd fd54 	bl	8008242 <__retarget_lock_release_recursive>
 800a79a:	2001      	movs	r0, #1
 800a79c:	4240      	negs	r0, r0
 800a79e:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 800a7a0:	2c00      	cmp	r4, #0
 800a7a2:	d014      	beq.n	800a7ce <__register_exitproc+0x5e>
 800a7a4:	0091      	lsls	r1, r2, #2
 800a7a6:	1859      	adds	r1, r3, r1
 800a7a8:	000f      	movs	r7, r1
 800a7aa:	3788      	adds	r7, #136	; 0x88
 800a7ac:	603e      	str	r6, [r7, #0]
 800a7ae:	2701      	movs	r7, #1
 800a7b0:	001e      	movs	r6, r3
 800a7b2:	4097      	lsls	r7, r2
 800a7b4:	3685      	adds	r6, #133	; 0x85
 800a7b6:	36ff      	adds	r6, #255	; 0xff
 800a7b8:	6875      	ldr	r5, [r6, #4]
 800a7ba:	31fc      	adds	r1, #252	; 0xfc
 800a7bc:	433d      	orrs	r5, r7
 800a7be:	6075      	str	r5, [r6, #4]
 800a7c0:	9d01      	ldr	r5, [sp, #4]
 800a7c2:	60cd      	str	r5, [r1, #12]
 800a7c4:	2c02      	cmp	r4, #2
 800a7c6:	d102      	bne.n	800a7ce <__register_exitproc+0x5e>
 800a7c8:	68b1      	ldr	r1, [r6, #8]
 800a7ca:	4339      	orrs	r1, r7
 800a7cc:	60b1      	str	r1, [r6, #8]
 800a7ce:	1c51      	adds	r1, r2, #1
 800a7d0:	6059      	str	r1, [r3, #4]
 800a7d2:	3202      	adds	r2, #2
 800a7d4:	9900      	ldr	r1, [sp, #0]
 800a7d6:	0092      	lsls	r2, r2, #2
 800a7d8:	50d1      	str	r1, [r2, r3]
 800a7da:	f7fd fd32 	bl	8008242 <__retarget_lock_release_recursive>
 800a7de:	2000      	movs	r0, #0
 800a7e0:	e7dd      	b.n	800a79e <__register_exitproc+0x2e>
 800a7e2:	46c0      	nop			; (mov r8, r8)
 800a7e4:	200002ac 	.word	0x200002ac
 800a7e8:	200009e4 	.word	0x200009e4
 800a7ec:	20000a1c 	.word	0x20000a1c

0800a7f0 <__assert_func>:
 800a7f0:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
 800a7f2:	0014      	movs	r4, r2
 800a7f4:	001a      	movs	r2, r3
 800a7f6:	4b09      	ldr	r3, [pc, #36]	; (800a81c <__assert_func+0x2c>)
 800a7f8:	0005      	movs	r5, r0
 800a7fa:	681b      	ldr	r3, [r3, #0]
 800a7fc:	000e      	movs	r6, r1
 800a7fe:	68d8      	ldr	r0, [r3, #12]
 800a800:	4b07      	ldr	r3, [pc, #28]	; (800a820 <__assert_func+0x30>)
 800a802:	2c00      	cmp	r4, #0
 800a804:	d101      	bne.n	800a80a <__assert_func+0x1a>
 800a806:	4b07      	ldr	r3, [pc, #28]	; (800a824 <__assert_func+0x34>)
 800a808:	001c      	movs	r4, r3
 800a80a:	4907      	ldr	r1, [pc, #28]	; (800a828 <__assert_func+0x38>)
 800a80c:	9301      	str	r3, [sp, #4]
 800a80e:	9402      	str	r4, [sp, #8]
 800a810:	002b      	movs	r3, r5
 800a812:	9600      	str	r6, [sp, #0]
 800a814:	f000 fedc 	bl	800b5d0 <fiprintf>
 800a818:	f001 fef0 	bl	800c5fc <abort>
 800a81c:	200002a8 	.word	0x200002a8
 800a820:	0800e7f8 	.word	0x0800e7f8
 800a824:	0800e833 	.word	0x0800e833
 800a828:	0800e805 	.word	0x0800e805

0800a82c <_calloc_r>:
 800a82c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a82e:	2400      	movs	r4, #0
 800a830:	0c0b      	lsrs	r3, r1, #16
 800a832:	0c16      	lsrs	r6, r2, #16
 800a834:	42a3      	cmp	r3, r4
 800a836:	d133      	bne.n	800a8a0 <_calloc_r+0x74>
 800a838:	42a6      	cmp	r6, r4
 800a83a:	d121      	bne.n	800a880 <_calloc_r+0x54>
 800a83c:	b28b      	uxth	r3, r1
 800a83e:	b291      	uxth	r1, r2
 800a840:	4359      	muls	r1, r3
 800a842:	f7fd fe23 	bl	800848c <_malloc_r>
 800a846:	1e05      	subs	r5, r0, #0
 800a848:	d033      	beq.n	800a8b2 <_calloc_r+0x86>
 800a84a:	0003      	movs	r3, r0
 800a84c:	3b08      	subs	r3, #8
 800a84e:	685a      	ldr	r2, [r3, #4]
 800a850:	2303      	movs	r3, #3
 800a852:	439a      	bics	r2, r3
 800a854:	3a04      	subs	r2, #4
 800a856:	2a24      	cmp	r2, #36	; 0x24
 800a858:	d832      	bhi.n	800a8c0 <_calloc_r+0x94>
 800a85a:	0003      	movs	r3, r0
 800a85c:	2a13      	cmp	r2, #19
 800a85e:	d90a      	bls.n	800a876 <_calloc_r+0x4a>
 800a860:	6004      	str	r4, [r0, #0]
 800a862:	6044      	str	r4, [r0, #4]
 800a864:	3308      	adds	r3, #8
 800a866:	2a1b      	cmp	r2, #27
 800a868:	d905      	bls.n	800a876 <_calloc_r+0x4a>
 800a86a:	6084      	str	r4, [r0, #8]
 800a86c:	60c4      	str	r4, [r0, #12]
 800a86e:	2a24      	cmp	r2, #36	; 0x24
 800a870:	d021      	beq.n	800a8b6 <_calloc_r+0x8a>
 800a872:	0003      	movs	r3, r0
 800a874:	3310      	adds	r3, #16
 800a876:	2200      	movs	r2, #0
 800a878:	601a      	str	r2, [r3, #0]
 800a87a:	605a      	str	r2, [r3, #4]
 800a87c:	609a      	str	r2, [r3, #8]
 800a87e:	e018      	b.n	800a8b2 <_calloc_r+0x86>
 800a880:	1c33      	adds	r3, r6, #0
 800a882:	1c0d      	adds	r5, r1, #0
 800a884:	b289      	uxth	r1, r1
 800a886:	b292      	uxth	r2, r2
 800a888:	434a      	muls	r2, r1
 800a88a:	b2ad      	uxth	r5, r5
 800a88c:	b299      	uxth	r1, r3
 800a88e:	4369      	muls	r1, r5
 800a890:	0c13      	lsrs	r3, r2, #16
 800a892:	18c9      	adds	r1, r1, r3
 800a894:	0c0b      	lsrs	r3, r1, #16
 800a896:	d107      	bne.n	800a8a8 <_calloc_r+0x7c>
 800a898:	0409      	lsls	r1, r1, #16
 800a89a:	b292      	uxth	r2, r2
 800a89c:	4311      	orrs	r1, r2
 800a89e:	e7d0      	b.n	800a842 <_calloc_r+0x16>
 800a8a0:	2e00      	cmp	r6, #0
 800a8a2:	d101      	bne.n	800a8a8 <_calloc_r+0x7c>
 800a8a4:	1c15      	adds	r5, r2, #0
 800a8a6:	e7ed      	b.n	800a884 <_calloc_r+0x58>
 800a8a8:	f7fd fc9e 	bl	80081e8 <__errno>
 800a8ac:	230c      	movs	r3, #12
 800a8ae:	2500      	movs	r5, #0
 800a8b0:	6003      	str	r3, [r0, #0]
 800a8b2:	0028      	movs	r0, r5
 800a8b4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800a8b6:	0003      	movs	r3, r0
 800a8b8:	6104      	str	r4, [r0, #16]
 800a8ba:	3318      	adds	r3, #24
 800a8bc:	6144      	str	r4, [r0, #20]
 800a8be:	e7da      	b.n	800a876 <_calloc_r+0x4a>
 800a8c0:	2100      	movs	r1, #0
 800a8c2:	f7fd fc33 	bl	800812c <memset>
 800a8c6:	e7f4      	b.n	800a8b2 <_calloc_r+0x86>

0800a8c8 <quorem>:
 800a8c8:	b5f0      	push	{r4, r5, r6, r7, lr}
 800a8ca:	6902      	ldr	r2, [r0, #16]
 800a8cc:	690b      	ldr	r3, [r1, #16]
 800a8ce:	b089      	sub	sp, #36	; 0x24
 800a8d0:	0007      	movs	r7, r0
 800a8d2:	9104      	str	r1, [sp, #16]
 800a8d4:	2000      	movs	r0, #0
 800a8d6:	429a      	cmp	r2, r3
 800a8d8:	db69      	blt.n	800a9ae <quorem+0xe6>
 800a8da:	3b01      	subs	r3, #1
 800a8dc:	009c      	lsls	r4, r3, #2
 800a8de:	9301      	str	r3, [sp, #4]
 800a8e0:	000b      	movs	r3, r1
 800a8e2:	3314      	adds	r3, #20
 800a8e4:	9306      	str	r3, [sp, #24]
 800a8e6:	191b      	adds	r3, r3, r4
 800a8e8:	9305      	str	r3, [sp, #20]
 800a8ea:	003b      	movs	r3, r7
 800a8ec:	3314      	adds	r3, #20
 800a8ee:	9303      	str	r3, [sp, #12]
 800a8f0:	191c      	adds	r4, r3, r4
 800a8f2:	9b05      	ldr	r3, [sp, #20]
 800a8f4:	6826      	ldr	r6, [r4, #0]
 800a8f6:	681d      	ldr	r5, [r3, #0]
 800a8f8:	0030      	movs	r0, r6
 800a8fa:	3501      	adds	r5, #1
 800a8fc:	0029      	movs	r1, r5
 800a8fe:	f7f5 fc1d 	bl	800013c <__udivsi3>
 800a902:	9002      	str	r0, [sp, #8]
 800a904:	42ae      	cmp	r6, r5
 800a906:	d329      	bcc.n	800a95c <quorem+0x94>
 800a908:	9b06      	ldr	r3, [sp, #24]
 800a90a:	2600      	movs	r6, #0
 800a90c:	469c      	mov	ip, r3
 800a90e:	9d03      	ldr	r5, [sp, #12]
 800a910:	9606      	str	r6, [sp, #24]
 800a912:	4662      	mov	r2, ip
 800a914:	ca08      	ldmia	r2!, {r3}
 800a916:	6828      	ldr	r0, [r5, #0]
 800a918:	4694      	mov	ip, r2
 800a91a:	9a02      	ldr	r2, [sp, #8]
 800a91c:	b299      	uxth	r1, r3
 800a91e:	4351      	muls	r1, r2
 800a920:	0c1b      	lsrs	r3, r3, #16
 800a922:	4353      	muls	r3, r2
 800a924:	1989      	adds	r1, r1, r6
 800a926:	0c0a      	lsrs	r2, r1, #16
 800a928:	189b      	adds	r3, r3, r2
 800a92a:	9307      	str	r3, [sp, #28]
 800a92c:	0c1e      	lsrs	r6, r3, #16
 800a92e:	9b06      	ldr	r3, [sp, #24]
 800a930:	b282      	uxth	r2, r0
 800a932:	18d2      	adds	r2, r2, r3
 800a934:	466b      	mov	r3, sp
 800a936:	b289      	uxth	r1, r1
 800a938:	8b9b      	ldrh	r3, [r3, #28]
 800a93a:	1a52      	subs	r2, r2, r1
 800a93c:	0c01      	lsrs	r1, r0, #16
 800a93e:	1ac9      	subs	r1, r1, r3
 800a940:	1413      	asrs	r3, r2, #16
 800a942:	18cb      	adds	r3, r1, r3
 800a944:	1419      	asrs	r1, r3, #16
 800a946:	b292      	uxth	r2, r2
 800a948:	041b      	lsls	r3, r3, #16
 800a94a:	4313      	orrs	r3, r2
 800a94c:	c508      	stmia	r5!, {r3}
 800a94e:	9b05      	ldr	r3, [sp, #20]
 800a950:	9106      	str	r1, [sp, #24]
 800a952:	4563      	cmp	r3, ip
 800a954:	d2dd      	bcs.n	800a912 <quorem+0x4a>
 800a956:	6823      	ldr	r3, [r4, #0]
 800a958:	2b00      	cmp	r3, #0
 800a95a:	d030      	beq.n	800a9be <quorem+0xf6>
 800a95c:	0038      	movs	r0, r7
 800a95e:	9904      	ldr	r1, [sp, #16]
 800a960:	f7fe fa00 	bl	8008d64 <__mcmp>
 800a964:	2800      	cmp	r0, #0
 800a966:	db21      	blt.n	800a9ac <quorem+0xe4>
 800a968:	0038      	movs	r0, r7
 800a96a:	2600      	movs	r6, #0
 800a96c:	9b02      	ldr	r3, [sp, #8]
 800a96e:	9c04      	ldr	r4, [sp, #16]
 800a970:	3301      	adds	r3, #1
 800a972:	9302      	str	r3, [sp, #8]
 800a974:	3014      	adds	r0, #20
 800a976:	3414      	adds	r4, #20
 800a978:	6803      	ldr	r3, [r0, #0]
 800a97a:	cc02      	ldmia	r4!, {r1}
 800a97c:	b29d      	uxth	r5, r3
 800a97e:	19ad      	adds	r5, r5, r6
 800a980:	b28a      	uxth	r2, r1
 800a982:	1aaa      	subs	r2, r5, r2
 800a984:	0c09      	lsrs	r1, r1, #16
 800a986:	0c1b      	lsrs	r3, r3, #16
 800a988:	1a5b      	subs	r3, r3, r1
 800a98a:	1411      	asrs	r1, r2, #16
 800a98c:	185b      	adds	r3, r3, r1
 800a98e:	141e      	asrs	r6, r3, #16
 800a990:	b292      	uxth	r2, r2
 800a992:	041b      	lsls	r3, r3, #16
 800a994:	4313      	orrs	r3, r2
 800a996:	c008      	stmia	r0!, {r3}
 800a998:	9b05      	ldr	r3, [sp, #20]
 800a99a:	42a3      	cmp	r3, r4
 800a99c:	d2ec      	bcs.n	800a978 <quorem+0xb0>
 800a99e:	9b01      	ldr	r3, [sp, #4]
 800a9a0:	9a03      	ldr	r2, [sp, #12]
 800a9a2:	009b      	lsls	r3, r3, #2
 800a9a4:	18d3      	adds	r3, r2, r3
 800a9a6:	681a      	ldr	r2, [r3, #0]
 800a9a8:	2a00      	cmp	r2, #0
 800a9aa:	d015      	beq.n	800a9d8 <quorem+0x110>
 800a9ac:	9802      	ldr	r0, [sp, #8]
 800a9ae:	b009      	add	sp, #36	; 0x24
 800a9b0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800a9b2:	6823      	ldr	r3, [r4, #0]
 800a9b4:	2b00      	cmp	r3, #0
 800a9b6:	d106      	bne.n	800a9c6 <quorem+0xfe>
 800a9b8:	9b01      	ldr	r3, [sp, #4]
 800a9ba:	3b01      	subs	r3, #1
 800a9bc:	9301      	str	r3, [sp, #4]
 800a9be:	9b03      	ldr	r3, [sp, #12]
 800a9c0:	3c04      	subs	r4, #4
 800a9c2:	42a3      	cmp	r3, r4
 800a9c4:	d3f5      	bcc.n	800a9b2 <quorem+0xea>
 800a9c6:	9b01      	ldr	r3, [sp, #4]
 800a9c8:	613b      	str	r3, [r7, #16]
 800a9ca:	e7c7      	b.n	800a95c <quorem+0x94>
 800a9cc:	681a      	ldr	r2, [r3, #0]
 800a9ce:	2a00      	cmp	r2, #0
 800a9d0:	d106      	bne.n	800a9e0 <quorem+0x118>
 800a9d2:	9a01      	ldr	r2, [sp, #4]
 800a9d4:	3a01      	subs	r2, #1
 800a9d6:	9201      	str	r2, [sp, #4]
 800a9d8:	9a03      	ldr	r2, [sp, #12]
 800a9da:	3b04      	subs	r3, #4
 800a9dc:	429a      	cmp	r2, r3
 800a9de:	d3f5      	bcc.n	800a9cc <quorem+0x104>
 800a9e0:	9b01      	ldr	r3, [sp, #4]
 800a9e2:	613b      	str	r3, [r7, #16]
 800a9e4:	e7e2      	b.n	800a9ac <quorem+0xe4>
	...

0800a9e8 <_dtoa_r>:
 800a9e8:	b5f0      	push	{r4, r5, r6, r7, lr}
 800a9ea:	0014      	movs	r4, r2
 800a9ec:	001d      	movs	r5, r3
 800a9ee:	6b81      	ldr	r1, [r0, #56]	; 0x38
 800a9f0:	b09d      	sub	sp, #116	; 0x74
 800a9f2:	9408      	str	r4, [sp, #32]
 800a9f4:	9509      	str	r5, [sp, #36]	; 0x24
 800a9f6:	9e25      	ldr	r6, [sp, #148]	; 0x94
 800a9f8:	9004      	str	r0, [sp, #16]
 800a9fa:	2900      	cmp	r1, #0
 800a9fc:	d009      	beq.n	800aa12 <_dtoa_r+0x2a>
 800a9fe:	2301      	movs	r3, #1
 800aa00:	6bc2      	ldr	r2, [r0, #60]	; 0x3c
 800aa02:	4093      	lsls	r3, r2
 800aa04:	604a      	str	r2, [r1, #4]
 800aa06:	608b      	str	r3, [r1, #8]
 800aa08:	f7fd ff9e 	bl	8008948 <_Bfree>
 800aa0c:	2300      	movs	r3, #0
 800aa0e:	9a04      	ldr	r2, [sp, #16]
 800aa10:	6393      	str	r3, [r2, #56]	; 0x38
 800aa12:	2d00      	cmp	r5, #0
 800aa14:	da1e      	bge.n	800aa54 <_dtoa_r+0x6c>
 800aa16:	2301      	movs	r3, #1
 800aa18:	6033      	str	r3, [r6, #0]
 800aa1a:	006b      	lsls	r3, r5, #1
 800aa1c:	085b      	lsrs	r3, r3, #1
 800aa1e:	9309      	str	r3, [sp, #36]	; 0x24
 800aa20:	9f09      	ldr	r7, [sp, #36]	; 0x24
 800aa22:	4bb5      	ldr	r3, [pc, #724]	; (800acf8 <_dtoa_r+0x310>)
 800aa24:	4ab4      	ldr	r2, [pc, #720]	; (800acf8 <_dtoa_r+0x310>)
 800aa26:	403b      	ands	r3, r7
 800aa28:	4293      	cmp	r3, r2
 800aa2a:	d116      	bne.n	800aa5a <_dtoa_r+0x72>
 800aa2c:	4bb3      	ldr	r3, [pc, #716]	; (800acfc <_dtoa_r+0x314>)
 800aa2e:	9a24      	ldr	r2, [sp, #144]	; 0x90
 800aa30:	6013      	str	r3, [r2, #0]
 800aa32:	033b      	lsls	r3, r7, #12
 800aa34:	0b1b      	lsrs	r3, r3, #12
 800aa36:	4323      	orrs	r3, r4
 800aa38:	d101      	bne.n	800aa3e <_dtoa_r+0x56>
 800aa3a:	f000 fdb2 	bl	800b5a2 <_dtoa_r+0xbba>
 800aa3e:	4bb0      	ldr	r3, [pc, #704]	; (800ad00 <_dtoa_r+0x318>)
 800aa40:	9a26      	ldr	r2, [sp, #152]	; 0x98
 800aa42:	9306      	str	r3, [sp, #24]
 800aa44:	2a00      	cmp	r2, #0
 800aa46:	d002      	beq.n	800aa4e <_dtoa_r+0x66>
 800aa48:	4bae      	ldr	r3, [pc, #696]	; (800ad04 <_dtoa_r+0x31c>)
 800aa4a:	9a26      	ldr	r2, [sp, #152]	; 0x98
 800aa4c:	6013      	str	r3, [r2, #0]
 800aa4e:	9806      	ldr	r0, [sp, #24]
 800aa50:	b01d      	add	sp, #116	; 0x74
 800aa52:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800aa54:	2300      	movs	r3, #0
 800aa56:	6033      	str	r3, [r6, #0]
 800aa58:	e7e2      	b.n	800aa20 <_dtoa_r+0x38>
 800aa5a:	9a08      	ldr	r2, [sp, #32]
 800aa5c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800aa5e:	9210      	str	r2, [sp, #64]	; 0x40
 800aa60:	9311      	str	r3, [sp, #68]	; 0x44
 800aa62:	9810      	ldr	r0, [sp, #64]	; 0x40
 800aa64:	9911      	ldr	r1, [sp, #68]	; 0x44
 800aa66:	2200      	movs	r2, #0
 800aa68:	2300      	movs	r3, #0
 800aa6a:	f7f5 fced 	bl	8000448 <__aeabi_dcmpeq>
 800aa6e:	1e06      	subs	r6, r0, #0
 800aa70:	d009      	beq.n	800aa86 <_dtoa_r+0x9e>
 800aa72:	2301      	movs	r3, #1
 800aa74:	9a24      	ldr	r2, [sp, #144]	; 0x90
 800aa76:	6013      	str	r3, [r2, #0]
 800aa78:	4ba3      	ldr	r3, [pc, #652]	; (800ad08 <_dtoa_r+0x320>)
 800aa7a:	9306      	str	r3, [sp, #24]
 800aa7c:	9b26      	ldr	r3, [sp, #152]	; 0x98
 800aa7e:	2b00      	cmp	r3, #0
 800aa80:	d0e5      	beq.n	800aa4e <_dtoa_r+0x66>
 800aa82:	4ba2      	ldr	r3, [pc, #648]	; (800ad0c <_dtoa_r+0x324>)
 800aa84:	e7e1      	b.n	800aa4a <_dtoa_r+0x62>
 800aa86:	ab1a      	add	r3, sp, #104	; 0x68
 800aa88:	9301      	str	r3, [sp, #4]
 800aa8a:	ab1b      	add	r3, sp, #108	; 0x6c
 800aa8c:	9300      	str	r3, [sp, #0]
 800aa8e:	9804      	ldr	r0, [sp, #16]
 800aa90:	9a10      	ldr	r2, [sp, #64]	; 0x40
 800aa92:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800aa94:	f7fe fa1a 	bl	8008ecc <__d2b>
 800aa98:	007a      	lsls	r2, r7, #1
 800aa9a:	9005      	str	r0, [sp, #20]
 800aa9c:	0d52      	lsrs	r2, r2, #21
 800aa9e:	d100      	bne.n	800aaa2 <_dtoa_r+0xba>
 800aaa0:	e07b      	b.n	800ab9a <_dtoa_r+0x1b2>
 800aaa2:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800aaa4:	9617      	str	r6, [sp, #92]	; 0x5c
 800aaa6:	0319      	lsls	r1, r3, #12
 800aaa8:	4b99      	ldr	r3, [pc, #612]	; (800ad10 <_dtoa_r+0x328>)
 800aaaa:	0b09      	lsrs	r1, r1, #12
 800aaac:	430b      	orrs	r3, r1
 800aaae:	4999      	ldr	r1, [pc, #612]	; (800ad14 <_dtoa_r+0x32c>)
 800aab0:	1857      	adds	r7, r2, r1
 800aab2:	9810      	ldr	r0, [sp, #64]	; 0x40
 800aab4:	9911      	ldr	r1, [sp, #68]	; 0x44
 800aab6:	0019      	movs	r1, r3
 800aab8:	2200      	movs	r2, #0
 800aaba:	4b97      	ldr	r3, [pc, #604]	; (800ad18 <_dtoa_r+0x330>)
 800aabc:	f7f6 fffa 	bl	8001ab4 <__aeabi_dsub>
 800aac0:	4a96      	ldr	r2, [pc, #600]	; (800ad1c <_dtoa_r+0x334>)
 800aac2:	4b97      	ldr	r3, [pc, #604]	; (800ad20 <_dtoa_r+0x338>)
 800aac4:	f7f6 fd34 	bl	8001530 <__aeabi_dmul>
 800aac8:	4a96      	ldr	r2, [pc, #600]	; (800ad24 <_dtoa_r+0x33c>)
 800aaca:	4b97      	ldr	r3, [pc, #604]	; (800ad28 <_dtoa_r+0x340>)
 800aacc:	f7f5 fdd6 	bl	800067c <__aeabi_dadd>
 800aad0:	0004      	movs	r4, r0
 800aad2:	0038      	movs	r0, r7
 800aad4:	000d      	movs	r5, r1
 800aad6:	f7f7 fbc3 	bl	8002260 <__aeabi_i2d>
 800aada:	4a94      	ldr	r2, [pc, #592]	; (800ad2c <_dtoa_r+0x344>)
 800aadc:	4b94      	ldr	r3, [pc, #592]	; (800ad30 <_dtoa_r+0x348>)
 800aade:	f7f6 fd27 	bl	8001530 <__aeabi_dmul>
 800aae2:	0002      	movs	r2, r0
 800aae4:	000b      	movs	r3, r1
 800aae6:	0020      	movs	r0, r4
 800aae8:	0029      	movs	r1, r5
 800aaea:	f7f5 fdc7 	bl	800067c <__aeabi_dadd>
 800aaee:	0004      	movs	r4, r0
 800aaf0:	000d      	movs	r5, r1
 800aaf2:	f7f7 fb7f 	bl	80021f4 <__aeabi_d2iz>
 800aaf6:	2200      	movs	r2, #0
 800aaf8:	9003      	str	r0, [sp, #12]
 800aafa:	2300      	movs	r3, #0
 800aafc:	0020      	movs	r0, r4
 800aafe:	0029      	movs	r1, r5
 800ab00:	f7f5 fca8 	bl	8000454 <__aeabi_dcmplt>
 800ab04:	2800      	cmp	r0, #0
 800ab06:	d00b      	beq.n	800ab20 <_dtoa_r+0x138>
 800ab08:	9803      	ldr	r0, [sp, #12]
 800ab0a:	f7f7 fba9 	bl	8002260 <__aeabi_i2d>
 800ab0e:	002b      	movs	r3, r5
 800ab10:	0022      	movs	r2, r4
 800ab12:	f7f5 fc99 	bl	8000448 <__aeabi_dcmpeq>
 800ab16:	4243      	negs	r3, r0
 800ab18:	4158      	adcs	r0, r3
 800ab1a:	9b03      	ldr	r3, [sp, #12]
 800ab1c:	1a1b      	subs	r3, r3, r0
 800ab1e:	9303      	str	r3, [sp, #12]
 800ab20:	2301      	movs	r3, #1
 800ab22:	9316      	str	r3, [sp, #88]	; 0x58
 800ab24:	9b03      	ldr	r3, [sp, #12]
 800ab26:	2b16      	cmp	r3, #22
 800ab28:	d810      	bhi.n	800ab4c <_dtoa_r+0x164>
 800ab2a:	9810      	ldr	r0, [sp, #64]	; 0x40
 800ab2c:	9911      	ldr	r1, [sp, #68]	; 0x44
 800ab2e:	9a03      	ldr	r2, [sp, #12]
 800ab30:	4b80      	ldr	r3, [pc, #512]	; (800ad34 <_dtoa_r+0x34c>)
 800ab32:	00d2      	lsls	r2, r2, #3
 800ab34:	189b      	adds	r3, r3, r2
 800ab36:	681a      	ldr	r2, [r3, #0]
 800ab38:	685b      	ldr	r3, [r3, #4]
 800ab3a:	f7f5 fc8b 	bl	8000454 <__aeabi_dcmplt>
 800ab3e:	2800      	cmp	r0, #0
 800ab40:	d047      	beq.n	800abd2 <_dtoa_r+0x1ea>
 800ab42:	9b03      	ldr	r3, [sp, #12]
 800ab44:	3b01      	subs	r3, #1
 800ab46:	9303      	str	r3, [sp, #12]
 800ab48:	2300      	movs	r3, #0
 800ab4a:	9316      	str	r3, [sp, #88]	; 0x58
 800ab4c:	2200      	movs	r2, #0
 800ab4e:	9b1a      	ldr	r3, [sp, #104]	; 0x68
 800ab50:	920a      	str	r2, [sp, #40]	; 0x28
 800ab52:	1bdb      	subs	r3, r3, r7
 800ab54:	1e5a      	subs	r2, r3, #1
 800ab56:	d53e      	bpl.n	800abd6 <_dtoa_r+0x1ee>
 800ab58:	2201      	movs	r2, #1
 800ab5a:	1ad3      	subs	r3, r2, r3
 800ab5c:	930a      	str	r3, [sp, #40]	; 0x28
 800ab5e:	2300      	movs	r3, #0
 800ab60:	930c      	str	r3, [sp, #48]	; 0x30
 800ab62:	9b03      	ldr	r3, [sp, #12]
 800ab64:	2b00      	cmp	r3, #0
 800ab66:	db38      	blt.n	800abda <_dtoa_r+0x1f2>
 800ab68:	9a03      	ldr	r2, [sp, #12]
 800ab6a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800ab6c:	4694      	mov	ip, r2
 800ab6e:	4463      	add	r3, ip
 800ab70:	930c      	str	r3, [sp, #48]	; 0x30
 800ab72:	2300      	movs	r3, #0
 800ab74:	9213      	str	r2, [sp, #76]	; 0x4c
 800ab76:	930d      	str	r3, [sp, #52]	; 0x34
 800ab78:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800ab7a:	2401      	movs	r4, #1
 800ab7c:	2b09      	cmp	r3, #9
 800ab7e:	d867      	bhi.n	800ac50 <_dtoa_r+0x268>
 800ab80:	2b05      	cmp	r3, #5
 800ab82:	dd02      	ble.n	800ab8a <_dtoa_r+0x1a2>
 800ab84:	2400      	movs	r4, #0
 800ab86:	3b04      	subs	r3, #4
 800ab88:	9322      	str	r3, [sp, #136]	; 0x88
 800ab8a:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800ab8c:	1e98      	subs	r0, r3, #2
 800ab8e:	2803      	cmp	r0, #3
 800ab90:	d867      	bhi.n	800ac62 <_dtoa_r+0x27a>
 800ab92:	f7f5 fabf 	bl	8000114 <__gnu_thumb1_case_uqi>
 800ab96:	3a2b      	.short	0x3a2b
 800ab98:	5b38      	.short	0x5b38
 800ab9a:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800ab9c:	9e1a      	ldr	r6, [sp, #104]	; 0x68
 800ab9e:	18f6      	adds	r6, r6, r3
 800aba0:	4b65      	ldr	r3, [pc, #404]	; (800ad38 <_dtoa_r+0x350>)
 800aba2:	18f2      	adds	r2, r6, r3
 800aba4:	2a20      	cmp	r2, #32
 800aba6:	dd0f      	ble.n	800abc8 <_dtoa_r+0x1e0>
 800aba8:	2340      	movs	r3, #64	; 0x40
 800abaa:	1a9b      	subs	r3, r3, r2
 800abac:	409f      	lsls	r7, r3
 800abae:	4b63      	ldr	r3, [pc, #396]	; (800ad3c <_dtoa_r+0x354>)
 800abb0:	0038      	movs	r0, r7
 800abb2:	18f3      	adds	r3, r6, r3
 800abb4:	40dc      	lsrs	r4, r3
 800abb6:	4320      	orrs	r0, r4
 800abb8:	f7f7 fb82 	bl	80022c0 <__aeabi_ui2d>
 800abbc:	2201      	movs	r2, #1
 800abbe:	4b60      	ldr	r3, [pc, #384]	; (800ad40 <_dtoa_r+0x358>)
 800abc0:	1e77      	subs	r7, r6, #1
 800abc2:	18cb      	adds	r3, r1, r3
 800abc4:	9217      	str	r2, [sp, #92]	; 0x5c
 800abc6:	e776      	b.n	800aab6 <_dtoa_r+0xce>
 800abc8:	2320      	movs	r3, #32
 800abca:	0020      	movs	r0, r4
 800abcc:	1a9b      	subs	r3, r3, r2
 800abce:	4098      	lsls	r0, r3
 800abd0:	e7f2      	b.n	800abb8 <_dtoa_r+0x1d0>
 800abd2:	9016      	str	r0, [sp, #88]	; 0x58
 800abd4:	e7ba      	b.n	800ab4c <_dtoa_r+0x164>
 800abd6:	920c      	str	r2, [sp, #48]	; 0x30
 800abd8:	e7c3      	b.n	800ab62 <_dtoa_r+0x17a>
 800abda:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800abdc:	9a03      	ldr	r2, [sp, #12]
 800abde:	1a9b      	subs	r3, r3, r2
 800abe0:	930a      	str	r3, [sp, #40]	; 0x28
 800abe2:	4253      	negs	r3, r2
 800abe4:	930d      	str	r3, [sp, #52]	; 0x34
 800abe6:	2300      	movs	r3, #0
 800abe8:	9313      	str	r3, [sp, #76]	; 0x4c
 800abea:	e7c5      	b.n	800ab78 <_dtoa_r+0x190>
 800abec:	2300      	movs	r3, #0
 800abee:	930f      	str	r3, [sp, #60]	; 0x3c
 800abf0:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 800abf2:	930b      	str	r3, [sp, #44]	; 0x2c
 800abf4:	9307      	str	r3, [sp, #28]
 800abf6:	2b00      	cmp	r3, #0
 800abf8:	dc13      	bgt.n	800ac22 <_dtoa_r+0x23a>
 800abfa:	2301      	movs	r3, #1
 800abfc:	001a      	movs	r2, r3
 800abfe:	930b      	str	r3, [sp, #44]	; 0x2c
 800ac00:	9307      	str	r3, [sp, #28]
 800ac02:	9223      	str	r2, [sp, #140]	; 0x8c
 800ac04:	e00d      	b.n	800ac22 <_dtoa_r+0x23a>
 800ac06:	2301      	movs	r3, #1
 800ac08:	e7f1      	b.n	800abee <_dtoa_r+0x206>
 800ac0a:	2300      	movs	r3, #0
 800ac0c:	9a23      	ldr	r2, [sp, #140]	; 0x8c
 800ac0e:	930f      	str	r3, [sp, #60]	; 0x3c
 800ac10:	4694      	mov	ip, r2
 800ac12:	9b03      	ldr	r3, [sp, #12]
 800ac14:	4463      	add	r3, ip
 800ac16:	930b      	str	r3, [sp, #44]	; 0x2c
 800ac18:	3301      	adds	r3, #1
 800ac1a:	9307      	str	r3, [sp, #28]
 800ac1c:	2b00      	cmp	r3, #0
 800ac1e:	dc00      	bgt.n	800ac22 <_dtoa_r+0x23a>
 800ac20:	2301      	movs	r3, #1
 800ac22:	2100      	movs	r1, #0
 800ac24:	2204      	movs	r2, #4
 800ac26:	0010      	movs	r0, r2
 800ac28:	3014      	adds	r0, #20
 800ac2a:	4298      	cmp	r0, r3
 800ac2c:	d91d      	bls.n	800ac6a <_dtoa_r+0x282>
 800ac2e:	9b04      	ldr	r3, [sp, #16]
 800ac30:	0018      	movs	r0, r3
 800ac32:	63d9      	str	r1, [r3, #60]	; 0x3c
 800ac34:	f7fd fe60 	bl	80088f8 <_Balloc>
 800ac38:	9006      	str	r0, [sp, #24]
 800ac3a:	2800      	cmp	r0, #0
 800ac3c:	d118      	bne.n	800ac70 <_dtoa_r+0x288>
 800ac3e:	21b0      	movs	r1, #176	; 0xb0
 800ac40:	4b40      	ldr	r3, [pc, #256]	; (800ad44 <_dtoa_r+0x35c>)
 800ac42:	4841      	ldr	r0, [pc, #260]	; (800ad48 <_dtoa_r+0x360>)
 800ac44:	9a06      	ldr	r2, [sp, #24]
 800ac46:	31ff      	adds	r1, #255	; 0xff
 800ac48:	f7ff fdd2 	bl	800a7f0 <__assert_func>
 800ac4c:	2301      	movs	r3, #1
 800ac4e:	e7dd      	b.n	800ac0c <_dtoa_r+0x224>
 800ac50:	2300      	movs	r3, #0
 800ac52:	940f      	str	r4, [sp, #60]	; 0x3c
 800ac54:	9322      	str	r3, [sp, #136]	; 0x88
 800ac56:	3b01      	subs	r3, #1
 800ac58:	930b      	str	r3, [sp, #44]	; 0x2c
 800ac5a:	9307      	str	r3, [sp, #28]
 800ac5c:	2200      	movs	r2, #0
 800ac5e:	3313      	adds	r3, #19
 800ac60:	e7cf      	b.n	800ac02 <_dtoa_r+0x21a>
 800ac62:	2301      	movs	r3, #1
 800ac64:	930f      	str	r3, [sp, #60]	; 0x3c
 800ac66:	3b02      	subs	r3, #2
 800ac68:	e7f6      	b.n	800ac58 <_dtoa_r+0x270>
 800ac6a:	3101      	adds	r1, #1
 800ac6c:	0052      	lsls	r2, r2, #1
 800ac6e:	e7da      	b.n	800ac26 <_dtoa_r+0x23e>
 800ac70:	9b04      	ldr	r3, [sp, #16]
 800ac72:	9a06      	ldr	r2, [sp, #24]
 800ac74:	639a      	str	r2, [r3, #56]	; 0x38
 800ac76:	9b07      	ldr	r3, [sp, #28]
 800ac78:	2b0e      	cmp	r3, #14
 800ac7a:	d900      	bls.n	800ac7e <_dtoa_r+0x296>
 800ac7c:	e0e3      	b.n	800ae46 <_dtoa_r+0x45e>
 800ac7e:	2c00      	cmp	r4, #0
 800ac80:	d100      	bne.n	800ac84 <_dtoa_r+0x29c>
 800ac82:	e0e0      	b.n	800ae46 <_dtoa_r+0x45e>
 800ac84:	9b03      	ldr	r3, [sp, #12]
 800ac86:	2b00      	cmp	r3, #0
 800ac88:	dd62      	ble.n	800ad50 <_dtoa_r+0x368>
 800ac8a:	210f      	movs	r1, #15
 800ac8c:	9a03      	ldr	r2, [sp, #12]
 800ac8e:	4b29      	ldr	r3, [pc, #164]	; (800ad34 <_dtoa_r+0x34c>)
 800ac90:	400a      	ands	r2, r1
 800ac92:	00d2      	lsls	r2, r2, #3
 800ac94:	189b      	adds	r3, r3, r2
 800ac96:	681e      	ldr	r6, [r3, #0]
 800ac98:	685f      	ldr	r7, [r3, #4]
 800ac9a:	9b03      	ldr	r3, [sp, #12]
 800ac9c:	2402      	movs	r4, #2
 800ac9e:	111d      	asrs	r5, r3, #4
 800aca0:	05db      	lsls	r3, r3, #23
 800aca2:	d50a      	bpl.n	800acba <_dtoa_r+0x2d2>
 800aca4:	4b29      	ldr	r3, [pc, #164]	; (800ad4c <_dtoa_r+0x364>)
 800aca6:	400d      	ands	r5, r1
 800aca8:	6a1a      	ldr	r2, [r3, #32]
 800acaa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800acac:	9810      	ldr	r0, [sp, #64]	; 0x40
 800acae:	9911      	ldr	r1, [sp, #68]	; 0x44
 800acb0:	f7f6 f844 	bl	8000d3c <__aeabi_ddiv>
 800acb4:	9008      	str	r0, [sp, #32]
 800acb6:	9109      	str	r1, [sp, #36]	; 0x24
 800acb8:	3401      	adds	r4, #1
 800acba:	4b24      	ldr	r3, [pc, #144]	; (800ad4c <_dtoa_r+0x364>)
 800acbc:	930e      	str	r3, [sp, #56]	; 0x38
 800acbe:	2d00      	cmp	r5, #0
 800acc0:	d108      	bne.n	800acd4 <_dtoa_r+0x2ec>
 800acc2:	9808      	ldr	r0, [sp, #32]
 800acc4:	9909      	ldr	r1, [sp, #36]	; 0x24
 800acc6:	0032      	movs	r2, r6
 800acc8:	003b      	movs	r3, r7
 800acca:	f7f6 f837 	bl	8000d3c <__aeabi_ddiv>
 800acce:	9008      	str	r0, [sp, #32]
 800acd0:	9109      	str	r1, [sp, #36]	; 0x24
 800acd2:	e058      	b.n	800ad86 <_dtoa_r+0x39e>
 800acd4:	2301      	movs	r3, #1
 800acd6:	421d      	tst	r5, r3
 800acd8:	d009      	beq.n	800acee <_dtoa_r+0x306>
 800acda:	18e4      	adds	r4, r4, r3
 800acdc:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800acde:	0030      	movs	r0, r6
 800ace0:	681a      	ldr	r2, [r3, #0]
 800ace2:	685b      	ldr	r3, [r3, #4]
 800ace4:	0039      	movs	r1, r7
 800ace6:	f7f6 fc23 	bl	8001530 <__aeabi_dmul>
 800acea:	0006      	movs	r6, r0
 800acec:	000f      	movs	r7, r1
 800acee:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800acf0:	106d      	asrs	r5, r5, #1
 800acf2:	3308      	adds	r3, #8
 800acf4:	e7e2      	b.n	800acbc <_dtoa_r+0x2d4>
 800acf6:	46c0      	nop			; (mov r8, r8)
 800acf8:	7ff00000 	.word	0x7ff00000
 800acfc:	0000270f 	.word	0x0000270f
 800ad00:	0800e83d 	.word	0x0800e83d
 800ad04:	0800e840 	.word	0x0800e840
 800ad08:	0800e7d6 	.word	0x0800e7d6
 800ad0c:	0800e7d7 	.word	0x0800e7d7
 800ad10:	3ff00000 	.word	0x3ff00000
 800ad14:	fffffc01 	.word	0xfffffc01
 800ad18:	3ff80000 	.word	0x3ff80000
 800ad1c:	636f4361 	.word	0x636f4361
 800ad20:	3fd287a7 	.word	0x3fd287a7
 800ad24:	8b60c8b3 	.word	0x8b60c8b3
 800ad28:	3fc68a28 	.word	0x3fc68a28
 800ad2c:	509f79fb 	.word	0x509f79fb
 800ad30:	3fd34413 	.word	0x3fd34413
 800ad34:	0800e6d0 	.word	0x0800e6d0
 800ad38:	00000432 	.word	0x00000432
 800ad3c:	00000412 	.word	0x00000412
 800ad40:	fe100000 	.word	0xfe100000
 800ad44:	0800e637 	.word	0x0800e637
 800ad48:	0800e841 	.word	0x0800e841
 800ad4c:	0800e6a8 	.word	0x0800e6a8
 800ad50:	9b03      	ldr	r3, [sp, #12]
 800ad52:	2402      	movs	r4, #2
 800ad54:	2b00      	cmp	r3, #0
 800ad56:	d016      	beq.n	800ad86 <_dtoa_r+0x39e>
 800ad58:	9810      	ldr	r0, [sp, #64]	; 0x40
 800ad5a:	9911      	ldr	r1, [sp, #68]	; 0x44
 800ad5c:	220f      	movs	r2, #15
 800ad5e:	425d      	negs	r5, r3
 800ad60:	402a      	ands	r2, r5
 800ad62:	4bdd      	ldr	r3, [pc, #884]	; (800b0d8 <_dtoa_r+0x6f0>)
 800ad64:	00d2      	lsls	r2, r2, #3
 800ad66:	189b      	adds	r3, r3, r2
 800ad68:	681a      	ldr	r2, [r3, #0]
 800ad6a:	685b      	ldr	r3, [r3, #4]
 800ad6c:	f7f6 fbe0 	bl	8001530 <__aeabi_dmul>
 800ad70:	2701      	movs	r7, #1
 800ad72:	2300      	movs	r3, #0
 800ad74:	9008      	str	r0, [sp, #32]
 800ad76:	9109      	str	r1, [sp, #36]	; 0x24
 800ad78:	4ed8      	ldr	r6, [pc, #864]	; (800b0dc <_dtoa_r+0x6f4>)
 800ad7a:	112d      	asrs	r5, r5, #4
 800ad7c:	2d00      	cmp	r5, #0
 800ad7e:	d000      	beq.n	800ad82 <_dtoa_r+0x39a>
 800ad80:	e091      	b.n	800aea6 <_dtoa_r+0x4be>
 800ad82:	2b00      	cmp	r3, #0
 800ad84:	d1a3      	bne.n	800acce <_dtoa_r+0x2e6>
 800ad86:	9e08      	ldr	r6, [sp, #32]
 800ad88:	9f09      	ldr	r7, [sp, #36]	; 0x24
 800ad8a:	9b16      	ldr	r3, [sp, #88]	; 0x58
 800ad8c:	2b00      	cmp	r3, #0
 800ad8e:	d100      	bne.n	800ad92 <_dtoa_r+0x3aa>
 800ad90:	e094      	b.n	800aebc <_dtoa_r+0x4d4>
 800ad92:	2200      	movs	r2, #0
 800ad94:	0030      	movs	r0, r6
 800ad96:	0039      	movs	r1, r7
 800ad98:	4bd1      	ldr	r3, [pc, #836]	; (800b0e0 <_dtoa_r+0x6f8>)
 800ad9a:	f7f5 fb5b 	bl	8000454 <__aeabi_dcmplt>
 800ad9e:	2800      	cmp	r0, #0
 800ada0:	d100      	bne.n	800ada4 <_dtoa_r+0x3bc>
 800ada2:	e08b      	b.n	800aebc <_dtoa_r+0x4d4>
 800ada4:	9b07      	ldr	r3, [sp, #28]
 800ada6:	2b00      	cmp	r3, #0
 800ada8:	d100      	bne.n	800adac <_dtoa_r+0x3c4>
 800adaa:	e087      	b.n	800aebc <_dtoa_r+0x4d4>
 800adac:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800adae:	2b00      	cmp	r3, #0
 800adb0:	dd45      	ble.n	800ae3e <_dtoa_r+0x456>
 800adb2:	9b03      	ldr	r3, [sp, #12]
 800adb4:	2200      	movs	r2, #0
 800adb6:	3b01      	subs	r3, #1
 800adb8:	930e      	str	r3, [sp, #56]	; 0x38
 800adba:	0030      	movs	r0, r6
 800adbc:	4bc9      	ldr	r3, [pc, #804]	; (800b0e4 <_dtoa_r+0x6fc>)
 800adbe:	0039      	movs	r1, r7
 800adc0:	f7f6 fbb6 	bl	8001530 <__aeabi_dmul>
 800adc4:	9008      	str	r0, [sp, #32]
 800adc6:	9109      	str	r1, [sp, #36]	; 0x24
 800adc8:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800adca:	3401      	adds	r4, #1
 800adcc:	0020      	movs	r0, r4
 800adce:	9e08      	ldr	r6, [sp, #32]
 800add0:	9f09      	ldr	r7, [sp, #36]	; 0x24
 800add2:	9312      	str	r3, [sp, #72]	; 0x48
 800add4:	f7f7 fa44 	bl	8002260 <__aeabi_i2d>
 800add8:	0032      	movs	r2, r6
 800adda:	003b      	movs	r3, r7
 800addc:	f7f6 fba8 	bl	8001530 <__aeabi_dmul>
 800ade0:	2200      	movs	r2, #0
 800ade2:	4bc1      	ldr	r3, [pc, #772]	; (800b0e8 <_dtoa_r+0x700>)
 800ade4:	f7f5 fc4a 	bl	800067c <__aeabi_dadd>
 800ade8:	4ac0      	ldr	r2, [pc, #768]	; (800b0ec <_dtoa_r+0x704>)
 800adea:	9014      	str	r0, [sp, #80]	; 0x50
 800adec:	9115      	str	r1, [sp, #84]	; 0x54
 800adee:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800adf0:	9c15      	ldr	r4, [sp, #84]	; 0x54
 800adf2:	4694      	mov	ip, r2
 800adf4:	9308      	str	r3, [sp, #32]
 800adf6:	9409      	str	r4, [sp, #36]	; 0x24
 800adf8:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800adfa:	4463      	add	r3, ip
 800adfc:	9318      	str	r3, [sp, #96]	; 0x60
 800adfe:	9309      	str	r3, [sp, #36]	; 0x24
 800ae00:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800ae02:	2b00      	cmp	r3, #0
 800ae04:	d15e      	bne.n	800aec4 <_dtoa_r+0x4dc>
 800ae06:	2200      	movs	r2, #0
 800ae08:	4bb9      	ldr	r3, [pc, #740]	; (800b0f0 <_dtoa_r+0x708>)
 800ae0a:	0030      	movs	r0, r6
 800ae0c:	0039      	movs	r1, r7
 800ae0e:	f7f6 fe51 	bl	8001ab4 <__aeabi_dsub>
 800ae12:	9a08      	ldr	r2, [sp, #32]
 800ae14:	9b18      	ldr	r3, [sp, #96]	; 0x60
 800ae16:	0004      	movs	r4, r0
 800ae18:	000d      	movs	r5, r1
 800ae1a:	f7f5 fb2f 	bl	800047c <__aeabi_dcmpgt>
 800ae1e:	2800      	cmp	r0, #0
 800ae20:	d000      	beq.n	800ae24 <_dtoa_r+0x43c>
 800ae22:	e2b3      	b.n	800b38c <_dtoa_r+0x9a4>
 800ae24:	48b3      	ldr	r0, [pc, #716]	; (800b0f4 <_dtoa_r+0x70c>)
 800ae26:	9915      	ldr	r1, [sp, #84]	; 0x54
 800ae28:	4684      	mov	ip, r0
 800ae2a:	4461      	add	r1, ip
 800ae2c:	000b      	movs	r3, r1
 800ae2e:	0020      	movs	r0, r4
 800ae30:	0029      	movs	r1, r5
 800ae32:	9a08      	ldr	r2, [sp, #32]
 800ae34:	f7f5 fb0e 	bl	8000454 <__aeabi_dcmplt>
 800ae38:	2800      	cmp	r0, #0
 800ae3a:	d000      	beq.n	800ae3e <_dtoa_r+0x456>
 800ae3c:	e2a3      	b.n	800b386 <_dtoa_r+0x99e>
 800ae3e:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800ae40:	9c11      	ldr	r4, [sp, #68]	; 0x44
 800ae42:	9308      	str	r3, [sp, #32]
 800ae44:	9409      	str	r4, [sp, #36]	; 0x24
 800ae46:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800ae48:	2b00      	cmp	r3, #0
 800ae4a:	da00      	bge.n	800ae4e <_dtoa_r+0x466>
 800ae4c:	e179      	b.n	800b142 <_dtoa_r+0x75a>
 800ae4e:	9a03      	ldr	r2, [sp, #12]
 800ae50:	2a0e      	cmp	r2, #14
 800ae52:	dd00      	ble.n	800ae56 <_dtoa_r+0x46e>
 800ae54:	e175      	b.n	800b142 <_dtoa_r+0x75a>
 800ae56:	4ba0      	ldr	r3, [pc, #640]	; (800b0d8 <_dtoa_r+0x6f0>)
 800ae58:	00d2      	lsls	r2, r2, #3
 800ae5a:	189b      	adds	r3, r3, r2
 800ae5c:	681e      	ldr	r6, [r3, #0]
 800ae5e:	685f      	ldr	r7, [r3, #4]
 800ae60:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 800ae62:	2b00      	cmp	r3, #0
 800ae64:	db00      	blt.n	800ae68 <_dtoa_r+0x480>
 800ae66:	e0e5      	b.n	800b034 <_dtoa_r+0x64c>
 800ae68:	9b07      	ldr	r3, [sp, #28]
 800ae6a:	2b00      	cmp	r3, #0
 800ae6c:	dd00      	ble.n	800ae70 <_dtoa_r+0x488>
 800ae6e:	e0e1      	b.n	800b034 <_dtoa_r+0x64c>
 800ae70:	d000      	beq.n	800ae74 <_dtoa_r+0x48c>
 800ae72:	e288      	b.n	800b386 <_dtoa_r+0x99e>
 800ae74:	2200      	movs	r2, #0
 800ae76:	0030      	movs	r0, r6
 800ae78:	0039      	movs	r1, r7
 800ae7a:	4b9d      	ldr	r3, [pc, #628]	; (800b0f0 <_dtoa_r+0x708>)
 800ae7c:	f7f6 fb58 	bl	8001530 <__aeabi_dmul>
 800ae80:	9a08      	ldr	r2, [sp, #32]
 800ae82:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800ae84:	f7f5 fb04 	bl	8000490 <__aeabi_dcmpge>
 800ae88:	9e07      	ldr	r6, [sp, #28]
 800ae8a:	0037      	movs	r7, r6
 800ae8c:	2800      	cmp	r0, #0
 800ae8e:	d000      	beq.n	800ae92 <_dtoa_r+0x4aa>
 800ae90:	e25f      	b.n	800b352 <_dtoa_r+0x96a>
 800ae92:	9b06      	ldr	r3, [sp, #24]
 800ae94:	9a06      	ldr	r2, [sp, #24]
 800ae96:	3301      	adds	r3, #1
 800ae98:	9308      	str	r3, [sp, #32]
 800ae9a:	2331      	movs	r3, #49	; 0x31
 800ae9c:	7013      	strb	r3, [r2, #0]
 800ae9e:	9b03      	ldr	r3, [sp, #12]
 800aea0:	3301      	adds	r3, #1
 800aea2:	9303      	str	r3, [sp, #12]
 800aea4:	e25a      	b.n	800b35c <_dtoa_r+0x974>
 800aea6:	423d      	tst	r5, r7
 800aea8:	d005      	beq.n	800aeb6 <_dtoa_r+0x4ce>
 800aeaa:	6832      	ldr	r2, [r6, #0]
 800aeac:	6873      	ldr	r3, [r6, #4]
 800aeae:	f7f6 fb3f 	bl	8001530 <__aeabi_dmul>
 800aeb2:	003b      	movs	r3, r7
 800aeb4:	3401      	adds	r4, #1
 800aeb6:	106d      	asrs	r5, r5, #1
 800aeb8:	3608      	adds	r6, #8
 800aeba:	e75f      	b.n	800ad7c <_dtoa_r+0x394>
 800aebc:	9b03      	ldr	r3, [sp, #12]
 800aebe:	930e      	str	r3, [sp, #56]	; 0x38
 800aec0:	9b07      	ldr	r3, [sp, #28]
 800aec2:	e783      	b.n	800adcc <_dtoa_r+0x3e4>
 800aec4:	9a12      	ldr	r2, [sp, #72]	; 0x48
 800aec6:	4b84      	ldr	r3, [pc, #528]	; (800b0d8 <_dtoa_r+0x6f0>)
 800aec8:	3a01      	subs	r2, #1
 800aeca:	00d2      	lsls	r2, r2, #3
 800aecc:	990f      	ldr	r1, [sp, #60]	; 0x3c
 800aece:	189b      	adds	r3, r3, r2
 800aed0:	9c08      	ldr	r4, [sp, #32]
 800aed2:	9d09      	ldr	r5, [sp, #36]	; 0x24
 800aed4:	681a      	ldr	r2, [r3, #0]
 800aed6:	685b      	ldr	r3, [r3, #4]
 800aed8:	2900      	cmp	r1, #0
 800aeda:	d051      	beq.n	800af80 <_dtoa_r+0x598>
 800aedc:	2000      	movs	r0, #0
 800aede:	4986      	ldr	r1, [pc, #536]	; (800b0f8 <_dtoa_r+0x710>)
 800aee0:	f7f5 ff2c 	bl	8000d3c <__aeabi_ddiv>
 800aee4:	0022      	movs	r2, r4
 800aee6:	002b      	movs	r3, r5
 800aee8:	f7f6 fde4 	bl	8001ab4 <__aeabi_dsub>
 800aeec:	9a06      	ldr	r2, [sp, #24]
 800aeee:	0004      	movs	r4, r0
 800aef0:	4694      	mov	ip, r2
 800aef2:	000d      	movs	r5, r1
 800aef4:	9b06      	ldr	r3, [sp, #24]
 800aef6:	9314      	str	r3, [sp, #80]	; 0x50
 800aef8:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800aefa:	4463      	add	r3, ip
 800aefc:	9318      	str	r3, [sp, #96]	; 0x60
 800aefe:	0039      	movs	r1, r7
 800af00:	0030      	movs	r0, r6
 800af02:	f7f7 f977 	bl	80021f4 <__aeabi_d2iz>
 800af06:	9012      	str	r0, [sp, #72]	; 0x48
 800af08:	f7f7 f9aa 	bl	8002260 <__aeabi_i2d>
 800af0c:	0002      	movs	r2, r0
 800af0e:	000b      	movs	r3, r1
 800af10:	0030      	movs	r0, r6
 800af12:	0039      	movs	r1, r7
 800af14:	f7f6 fdce 	bl	8001ab4 <__aeabi_dsub>
 800af18:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800af1a:	9a14      	ldr	r2, [sp, #80]	; 0x50
 800af1c:	3301      	adds	r3, #1
 800af1e:	9308      	str	r3, [sp, #32]
 800af20:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800af22:	0006      	movs	r6, r0
 800af24:	3330      	adds	r3, #48	; 0x30
 800af26:	7013      	strb	r3, [r2, #0]
 800af28:	0022      	movs	r2, r4
 800af2a:	002b      	movs	r3, r5
 800af2c:	000f      	movs	r7, r1
 800af2e:	f7f5 fa91 	bl	8000454 <__aeabi_dcmplt>
 800af32:	2800      	cmp	r0, #0
 800af34:	d174      	bne.n	800b020 <_dtoa_r+0x638>
 800af36:	0032      	movs	r2, r6
 800af38:	003b      	movs	r3, r7
 800af3a:	2000      	movs	r0, #0
 800af3c:	4968      	ldr	r1, [pc, #416]	; (800b0e0 <_dtoa_r+0x6f8>)
 800af3e:	f7f6 fdb9 	bl	8001ab4 <__aeabi_dsub>
 800af42:	0022      	movs	r2, r4
 800af44:	002b      	movs	r3, r5
 800af46:	f7f5 fa85 	bl	8000454 <__aeabi_dcmplt>
 800af4a:	2800      	cmp	r0, #0
 800af4c:	d000      	beq.n	800af50 <_dtoa_r+0x568>
 800af4e:	e0d7      	b.n	800b100 <_dtoa_r+0x718>
 800af50:	9b18      	ldr	r3, [sp, #96]	; 0x60
 800af52:	9a08      	ldr	r2, [sp, #32]
 800af54:	4293      	cmp	r3, r2
 800af56:	d100      	bne.n	800af5a <_dtoa_r+0x572>
 800af58:	e771      	b.n	800ae3e <_dtoa_r+0x456>
 800af5a:	2200      	movs	r2, #0
 800af5c:	0020      	movs	r0, r4
 800af5e:	0029      	movs	r1, r5
 800af60:	4b60      	ldr	r3, [pc, #384]	; (800b0e4 <_dtoa_r+0x6fc>)
 800af62:	f7f6 fae5 	bl	8001530 <__aeabi_dmul>
 800af66:	4b5f      	ldr	r3, [pc, #380]	; (800b0e4 <_dtoa_r+0x6fc>)
 800af68:	0004      	movs	r4, r0
 800af6a:	000d      	movs	r5, r1
 800af6c:	0030      	movs	r0, r6
 800af6e:	0039      	movs	r1, r7
 800af70:	2200      	movs	r2, #0
 800af72:	f7f6 fadd 	bl	8001530 <__aeabi_dmul>
 800af76:	9b08      	ldr	r3, [sp, #32]
 800af78:	0006      	movs	r6, r0
 800af7a:	000f      	movs	r7, r1
 800af7c:	9314      	str	r3, [sp, #80]	; 0x50
 800af7e:	e7be      	b.n	800aefe <_dtoa_r+0x516>
 800af80:	0020      	movs	r0, r4
 800af82:	0029      	movs	r1, r5
 800af84:	f7f6 fad4 	bl	8001530 <__aeabi_dmul>
 800af88:	9a06      	ldr	r2, [sp, #24]
 800af8a:	9b06      	ldr	r3, [sp, #24]
 800af8c:	4694      	mov	ip, r2
 800af8e:	9308      	str	r3, [sp, #32]
 800af90:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800af92:	9014      	str	r0, [sp, #80]	; 0x50
 800af94:	9115      	str	r1, [sp, #84]	; 0x54
 800af96:	4463      	add	r3, ip
 800af98:	9319      	str	r3, [sp, #100]	; 0x64
 800af9a:	0030      	movs	r0, r6
 800af9c:	0039      	movs	r1, r7
 800af9e:	f7f7 f929 	bl	80021f4 <__aeabi_d2iz>
 800afa2:	9018      	str	r0, [sp, #96]	; 0x60
 800afa4:	f7f7 f95c 	bl	8002260 <__aeabi_i2d>
 800afa8:	0002      	movs	r2, r0
 800afaa:	000b      	movs	r3, r1
 800afac:	0030      	movs	r0, r6
 800afae:	0039      	movs	r1, r7
 800afb0:	f7f6 fd80 	bl	8001ab4 <__aeabi_dsub>
 800afb4:	9e18      	ldr	r6, [sp, #96]	; 0x60
 800afb6:	9b08      	ldr	r3, [sp, #32]
 800afb8:	3630      	adds	r6, #48	; 0x30
 800afba:	9a19      	ldr	r2, [sp, #100]	; 0x64
 800afbc:	701e      	strb	r6, [r3, #0]
 800afbe:	3301      	adds	r3, #1
 800afc0:	0004      	movs	r4, r0
 800afc2:	000d      	movs	r5, r1
 800afc4:	9308      	str	r3, [sp, #32]
 800afc6:	4293      	cmp	r3, r2
 800afc8:	d12d      	bne.n	800b026 <_dtoa_r+0x63e>
 800afca:	9814      	ldr	r0, [sp, #80]	; 0x50
 800afcc:	9915      	ldr	r1, [sp, #84]	; 0x54
 800afce:	9a06      	ldr	r2, [sp, #24]
 800afd0:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800afd2:	4694      	mov	ip, r2
 800afd4:	4463      	add	r3, ip
 800afd6:	2200      	movs	r2, #0
 800afd8:	9308      	str	r3, [sp, #32]
 800afda:	4b47      	ldr	r3, [pc, #284]	; (800b0f8 <_dtoa_r+0x710>)
 800afdc:	f7f5 fb4e 	bl	800067c <__aeabi_dadd>
 800afe0:	0002      	movs	r2, r0
 800afe2:	000b      	movs	r3, r1
 800afe4:	0020      	movs	r0, r4
 800afe6:	0029      	movs	r1, r5
 800afe8:	f7f5 fa48 	bl	800047c <__aeabi_dcmpgt>
 800afec:	2800      	cmp	r0, #0
 800afee:	d000      	beq.n	800aff2 <_dtoa_r+0x60a>
 800aff0:	e086      	b.n	800b100 <_dtoa_r+0x718>
 800aff2:	9a14      	ldr	r2, [sp, #80]	; 0x50
 800aff4:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800aff6:	2000      	movs	r0, #0
 800aff8:	493f      	ldr	r1, [pc, #252]	; (800b0f8 <_dtoa_r+0x710>)
 800affa:	f7f6 fd5b 	bl	8001ab4 <__aeabi_dsub>
 800affe:	0002      	movs	r2, r0
 800b000:	000b      	movs	r3, r1
 800b002:	0020      	movs	r0, r4
 800b004:	0029      	movs	r1, r5
 800b006:	f7f5 fa25 	bl	8000454 <__aeabi_dcmplt>
 800b00a:	2800      	cmp	r0, #0
 800b00c:	d100      	bne.n	800b010 <_dtoa_r+0x628>
 800b00e:	e716      	b.n	800ae3e <_dtoa_r+0x456>
 800b010:	9b08      	ldr	r3, [sp, #32]
 800b012:	001a      	movs	r2, r3
 800b014:	3a01      	subs	r2, #1
 800b016:	9208      	str	r2, [sp, #32]
 800b018:	7812      	ldrb	r2, [r2, #0]
 800b01a:	2a30      	cmp	r2, #48	; 0x30
 800b01c:	d0f8      	beq.n	800b010 <_dtoa_r+0x628>
 800b01e:	9308      	str	r3, [sp, #32]
 800b020:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800b022:	9303      	str	r3, [sp, #12]
 800b024:	e046      	b.n	800b0b4 <_dtoa_r+0x6cc>
 800b026:	2200      	movs	r2, #0
 800b028:	4b2e      	ldr	r3, [pc, #184]	; (800b0e4 <_dtoa_r+0x6fc>)
 800b02a:	f7f6 fa81 	bl	8001530 <__aeabi_dmul>
 800b02e:	0006      	movs	r6, r0
 800b030:	000f      	movs	r7, r1
 800b032:	e7b2      	b.n	800af9a <_dtoa_r+0x5b2>
 800b034:	9b06      	ldr	r3, [sp, #24]
 800b036:	9a06      	ldr	r2, [sp, #24]
 800b038:	930a      	str	r3, [sp, #40]	; 0x28
 800b03a:	9b07      	ldr	r3, [sp, #28]
 800b03c:	9c08      	ldr	r4, [sp, #32]
 800b03e:	9d09      	ldr	r5, [sp, #36]	; 0x24
 800b040:	3b01      	subs	r3, #1
 800b042:	189b      	adds	r3, r3, r2
 800b044:	930b      	str	r3, [sp, #44]	; 0x2c
 800b046:	0032      	movs	r2, r6
 800b048:	003b      	movs	r3, r7
 800b04a:	0020      	movs	r0, r4
 800b04c:	0029      	movs	r1, r5
 800b04e:	f7f5 fe75 	bl	8000d3c <__aeabi_ddiv>
 800b052:	f7f7 f8cf 	bl	80021f4 <__aeabi_d2iz>
 800b056:	9007      	str	r0, [sp, #28]
 800b058:	f7f7 f902 	bl	8002260 <__aeabi_i2d>
 800b05c:	0032      	movs	r2, r6
 800b05e:	003b      	movs	r3, r7
 800b060:	f7f6 fa66 	bl	8001530 <__aeabi_dmul>
 800b064:	0002      	movs	r2, r0
 800b066:	000b      	movs	r3, r1
 800b068:	0020      	movs	r0, r4
 800b06a:	0029      	movs	r1, r5
 800b06c:	f7f6 fd22 	bl	8001ab4 <__aeabi_dsub>
 800b070:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800b072:	001a      	movs	r2, r3
 800b074:	3201      	adds	r2, #1
 800b076:	920a      	str	r2, [sp, #40]	; 0x28
 800b078:	9208      	str	r2, [sp, #32]
 800b07a:	9a07      	ldr	r2, [sp, #28]
 800b07c:	3230      	adds	r2, #48	; 0x30
 800b07e:	701a      	strb	r2, [r3, #0]
 800b080:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800b082:	429a      	cmp	r2, r3
 800b084:	d14f      	bne.n	800b126 <_dtoa_r+0x73e>
 800b086:	0002      	movs	r2, r0
 800b088:	000b      	movs	r3, r1
 800b08a:	f7f5 faf7 	bl	800067c <__aeabi_dadd>
 800b08e:	0032      	movs	r2, r6
 800b090:	003b      	movs	r3, r7
 800b092:	0004      	movs	r4, r0
 800b094:	000d      	movs	r5, r1
 800b096:	f7f5 f9f1 	bl	800047c <__aeabi_dcmpgt>
 800b09a:	2800      	cmp	r0, #0
 800b09c:	d12e      	bne.n	800b0fc <_dtoa_r+0x714>
 800b09e:	0032      	movs	r2, r6
 800b0a0:	003b      	movs	r3, r7
 800b0a2:	0020      	movs	r0, r4
 800b0a4:	0029      	movs	r1, r5
 800b0a6:	f7f5 f9cf 	bl	8000448 <__aeabi_dcmpeq>
 800b0aa:	2800      	cmp	r0, #0
 800b0ac:	d002      	beq.n	800b0b4 <_dtoa_r+0x6cc>
 800b0ae:	9b07      	ldr	r3, [sp, #28]
 800b0b0:	07de      	lsls	r6, r3, #31
 800b0b2:	d423      	bmi.n	800b0fc <_dtoa_r+0x714>
 800b0b4:	9905      	ldr	r1, [sp, #20]
 800b0b6:	9804      	ldr	r0, [sp, #16]
 800b0b8:	f7fd fc46 	bl	8008948 <_Bfree>
 800b0bc:	2300      	movs	r3, #0
 800b0be:	9a08      	ldr	r2, [sp, #32]
 800b0c0:	7013      	strb	r3, [r2, #0]
 800b0c2:	9b03      	ldr	r3, [sp, #12]
 800b0c4:	9a24      	ldr	r2, [sp, #144]	; 0x90
 800b0c6:	3301      	adds	r3, #1
 800b0c8:	6013      	str	r3, [r2, #0]
 800b0ca:	9b26      	ldr	r3, [sp, #152]	; 0x98
 800b0cc:	2b00      	cmp	r3, #0
 800b0ce:	d100      	bne.n	800b0d2 <_dtoa_r+0x6ea>
 800b0d0:	e4bd      	b.n	800aa4e <_dtoa_r+0x66>
 800b0d2:	9a08      	ldr	r2, [sp, #32]
 800b0d4:	601a      	str	r2, [r3, #0]
 800b0d6:	e4ba      	b.n	800aa4e <_dtoa_r+0x66>
 800b0d8:	0800e6d0 	.word	0x0800e6d0
 800b0dc:	0800e6a8 	.word	0x0800e6a8
 800b0e0:	3ff00000 	.word	0x3ff00000
 800b0e4:	40240000 	.word	0x40240000
 800b0e8:	401c0000 	.word	0x401c0000
 800b0ec:	fcc00000 	.word	0xfcc00000
 800b0f0:	40140000 	.word	0x40140000
 800b0f4:	7cc00000 	.word	0x7cc00000
 800b0f8:	3fe00000 	.word	0x3fe00000
 800b0fc:	9b03      	ldr	r3, [sp, #12]
 800b0fe:	930e      	str	r3, [sp, #56]	; 0x38
 800b100:	9b08      	ldr	r3, [sp, #32]
 800b102:	9308      	str	r3, [sp, #32]
 800b104:	3b01      	subs	r3, #1
 800b106:	781a      	ldrb	r2, [r3, #0]
 800b108:	2a39      	cmp	r2, #57	; 0x39
 800b10a:	d108      	bne.n	800b11e <_dtoa_r+0x736>
 800b10c:	9a06      	ldr	r2, [sp, #24]
 800b10e:	429a      	cmp	r2, r3
 800b110:	d1f7      	bne.n	800b102 <_dtoa_r+0x71a>
 800b112:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800b114:	9906      	ldr	r1, [sp, #24]
 800b116:	3201      	adds	r2, #1
 800b118:	920e      	str	r2, [sp, #56]	; 0x38
 800b11a:	2230      	movs	r2, #48	; 0x30
 800b11c:	700a      	strb	r2, [r1, #0]
 800b11e:	781a      	ldrb	r2, [r3, #0]
 800b120:	3201      	adds	r2, #1
 800b122:	701a      	strb	r2, [r3, #0]
 800b124:	e77c      	b.n	800b020 <_dtoa_r+0x638>
 800b126:	2200      	movs	r2, #0
 800b128:	4ba9      	ldr	r3, [pc, #676]	; (800b3d0 <_dtoa_r+0x9e8>)
 800b12a:	f7f6 fa01 	bl	8001530 <__aeabi_dmul>
 800b12e:	2200      	movs	r2, #0
 800b130:	2300      	movs	r3, #0
 800b132:	0004      	movs	r4, r0
 800b134:	000d      	movs	r5, r1
 800b136:	f7f5 f987 	bl	8000448 <__aeabi_dcmpeq>
 800b13a:	2800      	cmp	r0, #0
 800b13c:	d100      	bne.n	800b140 <_dtoa_r+0x758>
 800b13e:	e782      	b.n	800b046 <_dtoa_r+0x65e>
 800b140:	e7b8      	b.n	800b0b4 <_dtoa_r+0x6cc>
 800b142:	9f0f      	ldr	r7, [sp, #60]	; 0x3c
 800b144:	9d0d      	ldr	r5, [sp, #52]	; 0x34
 800b146:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 800b148:	2f00      	cmp	r7, #0
 800b14a:	d012      	beq.n	800b172 <_dtoa_r+0x78a>
 800b14c:	9a22      	ldr	r2, [sp, #136]	; 0x88
 800b14e:	2a01      	cmp	r2, #1
 800b150:	dc6e      	bgt.n	800b230 <_dtoa_r+0x848>
 800b152:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 800b154:	2a00      	cmp	r2, #0
 800b156:	d065      	beq.n	800b224 <_dtoa_r+0x83c>
 800b158:	4a9e      	ldr	r2, [pc, #632]	; (800b3d4 <_dtoa_r+0x9ec>)
 800b15a:	189b      	adds	r3, r3, r2
 800b15c:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800b15e:	2101      	movs	r1, #1
 800b160:	18d2      	adds	r2, r2, r3
 800b162:	920a      	str	r2, [sp, #40]	; 0x28
 800b164:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800b166:	9804      	ldr	r0, [sp, #16]
 800b168:	18d3      	adds	r3, r2, r3
 800b16a:	930c      	str	r3, [sp, #48]	; 0x30
 800b16c:	f7fd fc82 	bl	8008a74 <__i2b>
 800b170:	0007      	movs	r7, r0
 800b172:	2c00      	cmp	r4, #0
 800b174:	d00e      	beq.n	800b194 <_dtoa_r+0x7ac>
 800b176:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800b178:	2b00      	cmp	r3, #0
 800b17a:	dd0b      	ble.n	800b194 <_dtoa_r+0x7ac>
 800b17c:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800b17e:	0023      	movs	r3, r4
 800b180:	4294      	cmp	r4, r2
 800b182:	dd00      	ble.n	800b186 <_dtoa_r+0x79e>
 800b184:	0013      	movs	r3, r2
 800b186:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800b188:	1ae4      	subs	r4, r4, r3
 800b18a:	1ad2      	subs	r2, r2, r3
 800b18c:	920a      	str	r2, [sp, #40]	; 0x28
 800b18e:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800b190:	1ad3      	subs	r3, r2, r3
 800b192:	930c      	str	r3, [sp, #48]	; 0x30
 800b194:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800b196:	2b00      	cmp	r3, #0
 800b198:	d01e      	beq.n	800b1d8 <_dtoa_r+0x7f0>
 800b19a:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800b19c:	2b00      	cmp	r3, #0
 800b19e:	d05c      	beq.n	800b25a <_dtoa_r+0x872>
 800b1a0:	2d00      	cmp	r5, #0
 800b1a2:	dd10      	ble.n	800b1c6 <_dtoa_r+0x7de>
 800b1a4:	0039      	movs	r1, r7
 800b1a6:	002a      	movs	r2, r5
 800b1a8:	9804      	ldr	r0, [sp, #16]
 800b1aa:	f7fd fd2b 	bl	8008c04 <__pow5mult>
 800b1ae:	9a05      	ldr	r2, [sp, #20]
 800b1b0:	0001      	movs	r1, r0
 800b1b2:	0007      	movs	r7, r0
 800b1b4:	9804      	ldr	r0, [sp, #16]
 800b1b6:	f7fd fc75 	bl	8008aa4 <__multiply>
 800b1ba:	0006      	movs	r6, r0
 800b1bc:	9905      	ldr	r1, [sp, #20]
 800b1be:	9804      	ldr	r0, [sp, #16]
 800b1c0:	f7fd fbc2 	bl	8008948 <_Bfree>
 800b1c4:	9605      	str	r6, [sp, #20]
 800b1c6:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800b1c8:	1b5a      	subs	r2, r3, r5
 800b1ca:	42ab      	cmp	r3, r5
 800b1cc:	d004      	beq.n	800b1d8 <_dtoa_r+0x7f0>
 800b1ce:	9905      	ldr	r1, [sp, #20]
 800b1d0:	9804      	ldr	r0, [sp, #16]
 800b1d2:	f7fd fd17 	bl	8008c04 <__pow5mult>
 800b1d6:	9005      	str	r0, [sp, #20]
 800b1d8:	2101      	movs	r1, #1
 800b1da:	9804      	ldr	r0, [sp, #16]
 800b1dc:	f7fd fc4a 	bl	8008a74 <__i2b>
 800b1e0:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800b1e2:	0006      	movs	r6, r0
 800b1e4:	2b00      	cmp	r3, #0
 800b1e6:	dd3a      	ble.n	800b25e <_dtoa_r+0x876>
 800b1e8:	001a      	movs	r2, r3
 800b1ea:	0001      	movs	r1, r0
 800b1ec:	9804      	ldr	r0, [sp, #16]
 800b1ee:	f7fd fd09 	bl	8008c04 <__pow5mult>
 800b1f2:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800b1f4:	0006      	movs	r6, r0
 800b1f6:	2500      	movs	r5, #0
 800b1f8:	2b01      	cmp	r3, #1
 800b1fa:	dc38      	bgt.n	800b26e <_dtoa_r+0x886>
 800b1fc:	2500      	movs	r5, #0
 800b1fe:	9b08      	ldr	r3, [sp, #32]
 800b200:	42ab      	cmp	r3, r5
 800b202:	d130      	bne.n	800b266 <_dtoa_r+0x87e>
 800b204:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b206:	031b      	lsls	r3, r3, #12
 800b208:	42ab      	cmp	r3, r5
 800b20a:	d12c      	bne.n	800b266 <_dtoa_r+0x87e>
 800b20c:	4b72      	ldr	r3, [pc, #456]	; (800b3d8 <_dtoa_r+0x9f0>)
 800b20e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800b210:	4213      	tst	r3, r2
 800b212:	d028      	beq.n	800b266 <_dtoa_r+0x87e>
 800b214:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800b216:	3501      	adds	r5, #1
 800b218:	3301      	adds	r3, #1
 800b21a:	930a      	str	r3, [sp, #40]	; 0x28
 800b21c:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800b21e:	3301      	adds	r3, #1
 800b220:	930c      	str	r3, [sp, #48]	; 0x30
 800b222:	e020      	b.n	800b266 <_dtoa_r+0x87e>
 800b224:	2336      	movs	r3, #54	; 0x36
 800b226:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 800b228:	9d0d      	ldr	r5, [sp, #52]	; 0x34
 800b22a:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 800b22c:	1a9b      	subs	r3, r3, r2
 800b22e:	e795      	b.n	800b15c <_dtoa_r+0x774>
 800b230:	9b07      	ldr	r3, [sp, #28]
 800b232:	1e5d      	subs	r5, r3, #1
 800b234:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800b236:	42ab      	cmp	r3, r5
 800b238:	db07      	blt.n	800b24a <_dtoa_r+0x862>
 800b23a:	1b5d      	subs	r5, r3, r5
 800b23c:	9b07      	ldr	r3, [sp, #28]
 800b23e:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 800b240:	2b00      	cmp	r3, #0
 800b242:	da8b      	bge.n	800b15c <_dtoa_r+0x774>
 800b244:	1ae4      	subs	r4, r4, r3
 800b246:	2300      	movs	r3, #0
 800b248:	e788      	b.n	800b15c <_dtoa_r+0x774>
 800b24a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800b24c:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 800b24e:	1aeb      	subs	r3, r5, r3
 800b250:	18d3      	adds	r3, r2, r3
 800b252:	950d      	str	r5, [sp, #52]	; 0x34
 800b254:	9313      	str	r3, [sp, #76]	; 0x4c
 800b256:	2500      	movs	r5, #0
 800b258:	e7f0      	b.n	800b23c <_dtoa_r+0x854>
 800b25a:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800b25c:	e7b7      	b.n	800b1ce <_dtoa_r+0x7e6>
 800b25e:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800b260:	2500      	movs	r5, #0
 800b262:	2b01      	cmp	r3, #1
 800b264:	ddca      	ble.n	800b1fc <_dtoa_r+0x814>
 800b266:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800b268:	2001      	movs	r0, #1
 800b26a:	2b00      	cmp	r3, #0
 800b26c:	d008      	beq.n	800b280 <_dtoa_r+0x898>
 800b26e:	6933      	ldr	r3, [r6, #16]
 800b270:	3303      	adds	r3, #3
 800b272:	009b      	lsls	r3, r3, #2
 800b274:	18f3      	adds	r3, r6, r3
 800b276:	6858      	ldr	r0, [r3, #4]
 800b278:	f7fd fbb4 	bl	80089e4 <__hi0bits>
 800b27c:	2320      	movs	r3, #32
 800b27e:	1a18      	subs	r0, r3, r0
 800b280:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800b282:	1818      	adds	r0, r3, r0
 800b284:	0002      	movs	r2, r0
 800b286:	231f      	movs	r3, #31
 800b288:	401a      	ands	r2, r3
 800b28a:	4218      	tst	r0, r3
 800b28c:	d047      	beq.n	800b31e <_dtoa_r+0x936>
 800b28e:	3301      	adds	r3, #1
 800b290:	1a9b      	subs	r3, r3, r2
 800b292:	2b04      	cmp	r3, #4
 800b294:	dd3f      	ble.n	800b316 <_dtoa_r+0x92e>
 800b296:	231c      	movs	r3, #28
 800b298:	1a9b      	subs	r3, r3, r2
 800b29a:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800b29c:	18e4      	adds	r4, r4, r3
 800b29e:	18d2      	adds	r2, r2, r3
 800b2a0:	920a      	str	r2, [sp, #40]	; 0x28
 800b2a2:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800b2a4:	18d3      	adds	r3, r2, r3
 800b2a6:	930c      	str	r3, [sp, #48]	; 0x30
 800b2a8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800b2aa:	2b00      	cmp	r3, #0
 800b2ac:	dd05      	ble.n	800b2ba <_dtoa_r+0x8d2>
 800b2ae:	001a      	movs	r2, r3
 800b2b0:	9905      	ldr	r1, [sp, #20]
 800b2b2:	9804      	ldr	r0, [sp, #16]
 800b2b4:	f7fd fce8 	bl	8008c88 <__lshift>
 800b2b8:	9005      	str	r0, [sp, #20]
 800b2ba:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800b2bc:	2b00      	cmp	r3, #0
 800b2be:	dd05      	ble.n	800b2cc <_dtoa_r+0x8e4>
 800b2c0:	0031      	movs	r1, r6
 800b2c2:	001a      	movs	r2, r3
 800b2c4:	9804      	ldr	r0, [sp, #16]
 800b2c6:	f7fd fcdf 	bl	8008c88 <__lshift>
 800b2ca:	0006      	movs	r6, r0
 800b2cc:	9b16      	ldr	r3, [sp, #88]	; 0x58
 800b2ce:	2b00      	cmp	r3, #0
 800b2d0:	d027      	beq.n	800b322 <_dtoa_r+0x93a>
 800b2d2:	0031      	movs	r1, r6
 800b2d4:	9805      	ldr	r0, [sp, #20]
 800b2d6:	f7fd fd45 	bl	8008d64 <__mcmp>
 800b2da:	2800      	cmp	r0, #0
 800b2dc:	da21      	bge.n	800b322 <_dtoa_r+0x93a>
 800b2de:	9b03      	ldr	r3, [sp, #12]
 800b2e0:	220a      	movs	r2, #10
 800b2e2:	3b01      	subs	r3, #1
 800b2e4:	9303      	str	r3, [sp, #12]
 800b2e6:	9905      	ldr	r1, [sp, #20]
 800b2e8:	2300      	movs	r3, #0
 800b2ea:	9804      	ldr	r0, [sp, #16]
 800b2ec:	f7fd fb36 	bl	800895c <__multadd>
 800b2f0:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800b2f2:	9005      	str	r0, [sp, #20]
 800b2f4:	2b00      	cmp	r3, #0
 800b2f6:	d100      	bne.n	800b2fa <_dtoa_r+0x912>
 800b2f8:	e15d      	b.n	800b5b6 <_dtoa_r+0xbce>
 800b2fa:	2300      	movs	r3, #0
 800b2fc:	0039      	movs	r1, r7
 800b2fe:	220a      	movs	r2, #10
 800b300:	9804      	ldr	r0, [sp, #16]
 800b302:	f7fd fb2b 	bl	800895c <__multadd>
 800b306:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800b308:	0007      	movs	r7, r0
 800b30a:	2b00      	cmp	r3, #0
 800b30c:	dc49      	bgt.n	800b3a2 <_dtoa_r+0x9ba>
 800b30e:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800b310:	2b02      	cmp	r3, #2
 800b312:	dc0e      	bgt.n	800b332 <_dtoa_r+0x94a>
 800b314:	e045      	b.n	800b3a2 <_dtoa_r+0x9ba>
 800b316:	2b04      	cmp	r3, #4
 800b318:	d0c6      	beq.n	800b2a8 <_dtoa_r+0x8c0>
 800b31a:	331c      	adds	r3, #28
 800b31c:	e7bd      	b.n	800b29a <_dtoa_r+0x8b2>
 800b31e:	0013      	movs	r3, r2
 800b320:	e7fb      	b.n	800b31a <_dtoa_r+0x932>
 800b322:	9b07      	ldr	r3, [sp, #28]
 800b324:	2b00      	cmp	r3, #0
 800b326:	dc36      	bgt.n	800b396 <_dtoa_r+0x9ae>
 800b328:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800b32a:	2b02      	cmp	r3, #2
 800b32c:	dd33      	ble.n	800b396 <_dtoa_r+0x9ae>
 800b32e:	9b07      	ldr	r3, [sp, #28]
 800b330:	930b      	str	r3, [sp, #44]	; 0x2c
 800b332:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800b334:	2b00      	cmp	r3, #0
 800b336:	d10c      	bne.n	800b352 <_dtoa_r+0x96a>
 800b338:	0031      	movs	r1, r6
 800b33a:	2205      	movs	r2, #5
 800b33c:	9804      	ldr	r0, [sp, #16]
 800b33e:	f7fd fb0d 	bl	800895c <__multadd>
 800b342:	0006      	movs	r6, r0
 800b344:	0001      	movs	r1, r0
 800b346:	9805      	ldr	r0, [sp, #20]
 800b348:	f7fd fd0c 	bl	8008d64 <__mcmp>
 800b34c:	2800      	cmp	r0, #0
 800b34e:	dd00      	ble.n	800b352 <_dtoa_r+0x96a>
 800b350:	e59f      	b.n	800ae92 <_dtoa_r+0x4aa>
 800b352:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 800b354:	43db      	mvns	r3, r3
 800b356:	9303      	str	r3, [sp, #12]
 800b358:	9b06      	ldr	r3, [sp, #24]
 800b35a:	9308      	str	r3, [sp, #32]
 800b35c:	2500      	movs	r5, #0
 800b35e:	0031      	movs	r1, r6
 800b360:	9804      	ldr	r0, [sp, #16]
 800b362:	f7fd faf1 	bl	8008948 <_Bfree>
 800b366:	2f00      	cmp	r7, #0
 800b368:	d100      	bne.n	800b36c <_dtoa_r+0x984>
 800b36a:	e6a3      	b.n	800b0b4 <_dtoa_r+0x6cc>
 800b36c:	2d00      	cmp	r5, #0
 800b36e:	d005      	beq.n	800b37c <_dtoa_r+0x994>
 800b370:	42bd      	cmp	r5, r7
 800b372:	d003      	beq.n	800b37c <_dtoa_r+0x994>
 800b374:	0029      	movs	r1, r5
 800b376:	9804      	ldr	r0, [sp, #16]
 800b378:	f7fd fae6 	bl	8008948 <_Bfree>
 800b37c:	0039      	movs	r1, r7
 800b37e:	9804      	ldr	r0, [sp, #16]
 800b380:	f7fd fae2 	bl	8008948 <_Bfree>
 800b384:	e696      	b.n	800b0b4 <_dtoa_r+0x6cc>
 800b386:	2600      	movs	r6, #0
 800b388:	0037      	movs	r7, r6
 800b38a:	e7e2      	b.n	800b352 <_dtoa_r+0x96a>
 800b38c:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800b38e:	9e12      	ldr	r6, [sp, #72]	; 0x48
 800b390:	9303      	str	r3, [sp, #12]
 800b392:	0037      	movs	r7, r6
 800b394:	e57d      	b.n	800ae92 <_dtoa_r+0x4aa>
 800b396:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800b398:	2b00      	cmp	r3, #0
 800b39a:	d100      	bne.n	800b39e <_dtoa_r+0x9b6>
 800b39c:	e0c3      	b.n	800b526 <_dtoa_r+0xb3e>
 800b39e:	9b07      	ldr	r3, [sp, #28]
 800b3a0:	930b      	str	r3, [sp, #44]	; 0x2c
 800b3a2:	2c00      	cmp	r4, #0
 800b3a4:	dd05      	ble.n	800b3b2 <_dtoa_r+0x9ca>
 800b3a6:	0039      	movs	r1, r7
 800b3a8:	0022      	movs	r2, r4
 800b3aa:	9804      	ldr	r0, [sp, #16]
 800b3ac:	f7fd fc6c 	bl	8008c88 <__lshift>
 800b3b0:	0007      	movs	r7, r0
 800b3b2:	0038      	movs	r0, r7
 800b3b4:	2d00      	cmp	r5, #0
 800b3b6:	d024      	beq.n	800b402 <_dtoa_r+0xa1a>
 800b3b8:	6879      	ldr	r1, [r7, #4]
 800b3ba:	9804      	ldr	r0, [sp, #16]
 800b3bc:	f7fd fa9c 	bl	80088f8 <_Balloc>
 800b3c0:	1e04      	subs	r4, r0, #0
 800b3c2:	d111      	bne.n	800b3e8 <_dtoa_r+0xa00>
 800b3c4:	0022      	movs	r2, r4
 800b3c6:	4b05      	ldr	r3, [pc, #20]	; (800b3dc <_dtoa_r+0x9f4>)
 800b3c8:	4805      	ldr	r0, [pc, #20]	; (800b3e0 <_dtoa_r+0x9f8>)
 800b3ca:	4906      	ldr	r1, [pc, #24]	; (800b3e4 <_dtoa_r+0x9fc>)
 800b3cc:	e43c      	b.n	800ac48 <_dtoa_r+0x260>
 800b3ce:	46c0      	nop			; (mov r8, r8)
 800b3d0:	40240000 	.word	0x40240000
 800b3d4:	00000433 	.word	0x00000433
 800b3d8:	7ff00000 	.word	0x7ff00000
 800b3dc:	0800e637 	.word	0x0800e637
 800b3e0:	0800e841 	.word	0x0800e841
 800b3e4:	000002ef 	.word	0x000002ef
 800b3e8:	0039      	movs	r1, r7
 800b3ea:	693a      	ldr	r2, [r7, #16]
 800b3ec:	310c      	adds	r1, #12
 800b3ee:	3202      	adds	r2, #2
 800b3f0:	0092      	lsls	r2, r2, #2
 800b3f2:	300c      	adds	r0, #12
 800b3f4:	f7fc ff26 	bl	8008244 <memcpy>
 800b3f8:	2201      	movs	r2, #1
 800b3fa:	0021      	movs	r1, r4
 800b3fc:	9804      	ldr	r0, [sp, #16]
 800b3fe:	f7fd fc43 	bl	8008c88 <__lshift>
 800b402:	9b06      	ldr	r3, [sp, #24]
 800b404:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800b406:	9307      	str	r3, [sp, #28]
 800b408:	3b01      	subs	r3, #1
 800b40a:	189b      	adds	r3, r3, r2
 800b40c:	2201      	movs	r2, #1
 800b40e:	003d      	movs	r5, r7
 800b410:	0007      	movs	r7, r0
 800b412:	930e      	str	r3, [sp, #56]	; 0x38
 800b414:	9b08      	ldr	r3, [sp, #32]
 800b416:	4013      	ands	r3, r2
 800b418:	930d      	str	r3, [sp, #52]	; 0x34
 800b41a:	0031      	movs	r1, r6
 800b41c:	9805      	ldr	r0, [sp, #20]
 800b41e:	f7ff fa53 	bl	800a8c8 <quorem>
 800b422:	0029      	movs	r1, r5
 800b424:	0004      	movs	r4, r0
 800b426:	900b      	str	r0, [sp, #44]	; 0x2c
 800b428:	9805      	ldr	r0, [sp, #20]
 800b42a:	f7fd fc9b 	bl	8008d64 <__mcmp>
 800b42e:	003a      	movs	r2, r7
 800b430:	900c      	str	r0, [sp, #48]	; 0x30
 800b432:	0031      	movs	r1, r6
 800b434:	9804      	ldr	r0, [sp, #16]
 800b436:	f7fd fcb1 	bl	8008d9c <__mdiff>
 800b43a:	2201      	movs	r2, #1
 800b43c:	68c3      	ldr	r3, [r0, #12]
 800b43e:	3430      	adds	r4, #48	; 0x30
 800b440:	9008      	str	r0, [sp, #32]
 800b442:	920a      	str	r2, [sp, #40]	; 0x28
 800b444:	2b00      	cmp	r3, #0
 800b446:	d104      	bne.n	800b452 <_dtoa_r+0xa6a>
 800b448:	0001      	movs	r1, r0
 800b44a:	9805      	ldr	r0, [sp, #20]
 800b44c:	f7fd fc8a 	bl	8008d64 <__mcmp>
 800b450:	900a      	str	r0, [sp, #40]	; 0x28
 800b452:	9908      	ldr	r1, [sp, #32]
 800b454:	9804      	ldr	r0, [sp, #16]
 800b456:	f7fd fa77 	bl	8008948 <_Bfree>
 800b45a:	9b07      	ldr	r3, [sp, #28]
 800b45c:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800b45e:	3301      	adds	r3, #1
 800b460:	9308      	str	r3, [sp, #32]
 800b462:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800b464:	4313      	orrs	r3, r2
 800b466:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800b468:	4313      	orrs	r3, r2
 800b46a:	d109      	bne.n	800b480 <_dtoa_r+0xa98>
 800b46c:	2c39      	cmp	r4, #57	; 0x39
 800b46e:	d022      	beq.n	800b4b6 <_dtoa_r+0xace>
 800b470:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800b472:	2b00      	cmp	r3, #0
 800b474:	dd01      	ble.n	800b47a <_dtoa_r+0xa92>
 800b476:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
 800b478:	3431      	adds	r4, #49	; 0x31
 800b47a:	9b07      	ldr	r3, [sp, #28]
 800b47c:	701c      	strb	r4, [r3, #0]
 800b47e:	e76e      	b.n	800b35e <_dtoa_r+0x976>
 800b480:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800b482:	2b00      	cmp	r3, #0
 800b484:	db04      	blt.n	800b490 <_dtoa_r+0xaa8>
 800b486:	9a22      	ldr	r2, [sp, #136]	; 0x88
 800b488:	4313      	orrs	r3, r2
 800b48a:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800b48c:	4313      	orrs	r3, r2
 800b48e:	d11e      	bne.n	800b4ce <_dtoa_r+0xae6>
 800b490:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800b492:	2b00      	cmp	r3, #0
 800b494:	ddf1      	ble.n	800b47a <_dtoa_r+0xa92>
 800b496:	9905      	ldr	r1, [sp, #20]
 800b498:	2201      	movs	r2, #1
 800b49a:	9804      	ldr	r0, [sp, #16]
 800b49c:	f7fd fbf4 	bl	8008c88 <__lshift>
 800b4a0:	0031      	movs	r1, r6
 800b4a2:	9005      	str	r0, [sp, #20]
 800b4a4:	f7fd fc5e 	bl	8008d64 <__mcmp>
 800b4a8:	2800      	cmp	r0, #0
 800b4aa:	dc02      	bgt.n	800b4b2 <_dtoa_r+0xaca>
 800b4ac:	d1e5      	bne.n	800b47a <_dtoa_r+0xa92>
 800b4ae:	07e3      	lsls	r3, r4, #31
 800b4b0:	d5e3      	bpl.n	800b47a <_dtoa_r+0xa92>
 800b4b2:	2c39      	cmp	r4, #57	; 0x39
 800b4b4:	d1df      	bne.n	800b476 <_dtoa_r+0xa8e>
 800b4b6:	2339      	movs	r3, #57	; 0x39
 800b4b8:	9a07      	ldr	r2, [sp, #28]
 800b4ba:	7013      	strb	r3, [r2, #0]
 800b4bc:	9b08      	ldr	r3, [sp, #32]
 800b4be:	9308      	str	r3, [sp, #32]
 800b4c0:	3b01      	subs	r3, #1
 800b4c2:	781a      	ldrb	r2, [r3, #0]
 800b4c4:	2a39      	cmp	r2, #57	; 0x39
 800b4c6:	d063      	beq.n	800b590 <_dtoa_r+0xba8>
 800b4c8:	3201      	adds	r2, #1
 800b4ca:	701a      	strb	r2, [r3, #0]
 800b4cc:	e747      	b.n	800b35e <_dtoa_r+0x976>
 800b4ce:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800b4d0:	2b00      	cmp	r3, #0
 800b4d2:	dd03      	ble.n	800b4dc <_dtoa_r+0xaf4>
 800b4d4:	2c39      	cmp	r4, #57	; 0x39
 800b4d6:	d0ee      	beq.n	800b4b6 <_dtoa_r+0xace>
 800b4d8:	3401      	adds	r4, #1
 800b4da:	e7ce      	b.n	800b47a <_dtoa_r+0xa92>
 800b4dc:	9b07      	ldr	r3, [sp, #28]
 800b4de:	9a07      	ldr	r2, [sp, #28]
 800b4e0:	701c      	strb	r4, [r3, #0]
 800b4e2:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800b4e4:	4293      	cmp	r3, r2
 800b4e6:	d03e      	beq.n	800b566 <_dtoa_r+0xb7e>
 800b4e8:	2300      	movs	r3, #0
 800b4ea:	220a      	movs	r2, #10
 800b4ec:	9905      	ldr	r1, [sp, #20]
 800b4ee:	9804      	ldr	r0, [sp, #16]
 800b4f0:	f7fd fa34 	bl	800895c <__multadd>
 800b4f4:	2300      	movs	r3, #0
 800b4f6:	9005      	str	r0, [sp, #20]
 800b4f8:	220a      	movs	r2, #10
 800b4fa:	0029      	movs	r1, r5
 800b4fc:	9804      	ldr	r0, [sp, #16]
 800b4fe:	42bd      	cmp	r5, r7
 800b500:	d106      	bne.n	800b510 <_dtoa_r+0xb28>
 800b502:	f7fd fa2b 	bl	800895c <__multadd>
 800b506:	0005      	movs	r5, r0
 800b508:	0007      	movs	r7, r0
 800b50a:	9b08      	ldr	r3, [sp, #32]
 800b50c:	9307      	str	r3, [sp, #28]
 800b50e:	e784      	b.n	800b41a <_dtoa_r+0xa32>
 800b510:	f7fd fa24 	bl	800895c <__multadd>
 800b514:	0039      	movs	r1, r7
 800b516:	0005      	movs	r5, r0
 800b518:	2300      	movs	r3, #0
 800b51a:	220a      	movs	r2, #10
 800b51c:	9804      	ldr	r0, [sp, #16]
 800b51e:	f7fd fa1d 	bl	800895c <__multadd>
 800b522:	0007      	movs	r7, r0
 800b524:	e7f1      	b.n	800b50a <_dtoa_r+0xb22>
 800b526:	9b07      	ldr	r3, [sp, #28]
 800b528:	930b      	str	r3, [sp, #44]	; 0x2c
 800b52a:	2500      	movs	r5, #0
 800b52c:	0031      	movs	r1, r6
 800b52e:	9805      	ldr	r0, [sp, #20]
 800b530:	f7ff f9ca 	bl	800a8c8 <quorem>
 800b534:	9b06      	ldr	r3, [sp, #24]
 800b536:	3030      	adds	r0, #48	; 0x30
 800b538:	5558      	strb	r0, [r3, r5]
 800b53a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800b53c:	3501      	adds	r5, #1
 800b53e:	0004      	movs	r4, r0
 800b540:	42ab      	cmp	r3, r5
 800b542:	dd07      	ble.n	800b554 <_dtoa_r+0xb6c>
 800b544:	2300      	movs	r3, #0
 800b546:	220a      	movs	r2, #10
 800b548:	9905      	ldr	r1, [sp, #20]
 800b54a:	9804      	ldr	r0, [sp, #16]
 800b54c:	f7fd fa06 	bl	800895c <__multadd>
 800b550:	9005      	str	r0, [sp, #20]
 800b552:	e7eb      	b.n	800b52c <_dtoa_r+0xb44>
 800b554:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800b556:	2301      	movs	r3, #1
 800b558:	2a00      	cmp	r2, #0
 800b55a:	dd00      	ble.n	800b55e <_dtoa_r+0xb76>
 800b55c:	0013      	movs	r3, r2
 800b55e:	2500      	movs	r5, #0
 800b560:	9a06      	ldr	r2, [sp, #24]
 800b562:	18d3      	adds	r3, r2, r3
 800b564:	9308      	str	r3, [sp, #32]
 800b566:	9905      	ldr	r1, [sp, #20]
 800b568:	2201      	movs	r2, #1
 800b56a:	9804      	ldr	r0, [sp, #16]
 800b56c:	f7fd fb8c 	bl	8008c88 <__lshift>
 800b570:	0031      	movs	r1, r6
 800b572:	9005      	str	r0, [sp, #20]
 800b574:	f7fd fbf6 	bl	8008d64 <__mcmp>
 800b578:	2800      	cmp	r0, #0
 800b57a:	dc9f      	bgt.n	800b4bc <_dtoa_r+0xad4>
 800b57c:	d101      	bne.n	800b582 <_dtoa_r+0xb9a>
 800b57e:	07e4      	lsls	r4, r4, #31
 800b580:	d49c      	bmi.n	800b4bc <_dtoa_r+0xad4>
 800b582:	9b08      	ldr	r3, [sp, #32]
 800b584:	9308      	str	r3, [sp, #32]
 800b586:	3b01      	subs	r3, #1
 800b588:	781a      	ldrb	r2, [r3, #0]
 800b58a:	2a30      	cmp	r2, #48	; 0x30
 800b58c:	d0fa      	beq.n	800b584 <_dtoa_r+0xb9c>
 800b58e:	e6e6      	b.n	800b35e <_dtoa_r+0x976>
 800b590:	9a06      	ldr	r2, [sp, #24]
 800b592:	429a      	cmp	r2, r3
 800b594:	d193      	bne.n	800b4be <_dtoa_r+0xad6>
 800b596:	9b03      	ldr	r3, [sp, #12]
 800b598:	3301      	adds	r3, #1
 800b59a:	9303      	str	r3, [sp, #12]
 800b59c:	2331      	movs	r3, #49	; 0x31
 800b59e:	7013      	strb	r3, [r2, #0]
 800b5a0:	e6dd      	b.n	800b35e <_dtoa_r+0x976>
 800b5a2:	4b09      	ldr	r3, [pc, #36]	; (800b5c8 <_dtoa_r+0xbe0>)
 800b5a4:	9a26      	ldr	r2, [sp, #152]	; 0x98
 800b5a6:	9306      	str	r3, [sp, #24]
 800b5a8:	4b08      	ldr	r3, [pc, #32]	; (800b5cc <_dtoa_r+0xbe4>)
 800b5aa:	2a00      	cmp	r2, #0
 800b5ac:	d001      	beq.n	800b5b2 <_dtoa_r+0xbca>
 800b5ae:	f7ff fa4c 	bl	800aa4a <_dtoa_r+0x62>
 800b5b2:	f7ff fa4c 	bl	800aa4e <_dtoa_r+0x66>
 800b5b6:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800b5b8:	2b00      	cmp	r3, #0
 800b5ba:	dcb6      	bgt.n	800b52a <_dtoa_r+0xb42>
 800b5bc:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800b5be:	2b02      	cmp	r3, #2
 800b5c0:	dd00      	ble.n	800b5c4 <_dtoa_r+0xbdc>
 800b5c2:	e6b6      	b.n	800b332 <_dtoa_r+0x94a>
 800b5c4:	e7b1      	b.n	800b52a <_dtoa_r+0xb42>
 800b5c6:	46c0      	nop			; (mov r8, r8)
 800b5c8:	0800e834 	.word	0x0800e834
 800b5cc:	0800e83c 	.word	0x0800e83c

0800b5d0 <fiprintf>:
 800b5d0:	b40e      	push	{r1, r2, r3}
 800b5d2:	b517      	push	{r0, r1, r2, r4, lr}
 800b5d4:	4c05      	ldr	r4, [pc, #20]	; (800b5ec <fiprintf+0x1c>)
 800b5d6:	ab05      	add	r3, sp, #20
 800b5d8:	cb04      	ldmia	r3!, {r2}
 800b5da:	0001      	movs	r1, r0
 800b5dc:	6820      	ldr	r0, [r4, #0]
 800b5de:	9301      	str	r3, [sp, #4]
 800b5e0:	f000 f8be 	bl	800b760 <_vfiprintf_r>
 800b5e4:	bc1e      	pop	{r1, r2, r3, r4}
 800b5e6:	bc08      	pop	{r3}
 800b5e8:	b003      	add	sp, #12
 800b5ea:	4718      	bx	r3
 800b5ec:	200002a8 	.word	0x200002a8

0800b5f0 <__ssprint_r>:
 800b5f0:	b5f0      	push	{r4, r5, r6, r7, lr}
 800b5f2:	6813      	ldr	r3, [r2, #0]
 800b5f4:	b087      	sub	sp, #28
 800b5f6:	0017      	movs	r7, r2
 800b5f8:	9303      	str	r3, [sp, #12]
 800b5fa:	6893      	ldr	r3, [r2, #8]
 800b5fc:	2200      	movs	r2, #0
 800b5fe:	000c      	movs	r4, r1
 800b600:	9005      	str	r0, [sp, #20]
 800b602:	9202      	str	r2, [sp, #8]
 800b604:	9201      	str	r2, [sp, #4]
 800b606:	4293      	cmp	r3, r2
 800b608:	d10d      	bne.n	800b626 <__ssprint_r+0x36>
 800b60a:	2000      	movs	r0, #0
 800b60c:	2300      	movs	r3, #0
 800b60e:	607b      	str	r3, [r7, #4]
 800b610:	b007      	add	sp, #28
 800b612:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800b614:	9b03      	ldr	r3, [sp, #12]
 800b616:	681b      	ldr	r3, [r3, #0]
 800b618:	9302      	str	r3, [sp, #8]
 800b61a:	9b03      	ldr	r3, [sp, #12]
 800b61c:	685b      	ldr	r3, [r3, #4]
 800b61e:	9301      	str	r3, [sp, #4]
 800b620:	9b03      	ldr	r3, [sp, #12]
 800b622:	3308      	adds	r3, #8
 800b624:	9303      	str	r3, [sp, #12]
 800b626:	9a01      	ldr	r2, [sp, #4]
 800b628:	68a6      	ldr	r6, [r4, #8]
 800b62a:	6823      	ldr	r3, [r4, #0]
 800b62c:	2a00      	cmp	r2, #0
 800b62e:	d0f1      	beq.n	800b614 <__ssprint_r+0x24>
 800b630:	42b2      	cmp	r2, r6
 800b632:	d32e      	bcc.n	800b692 <__ssprint_r+0xa2>
 800b634:	2190      	movs	r1, #144	; 0x90
 800b636:	89a2      	ldrh	r2, [r4, #12]
 800b638:	00c9      	lsls	r1, r1, #3
 800b63a:	420a      	tst	r2, r1
 800b63c:	d029      	beq.n	800b692 <__ssprint_r+0xa2>
 800b63e:	2003      	movs	r0, #3
 800b640:	6921      	ldr	r1, [r4, #16]
 800b642:	1a5b      	subs	r3, r3, r1
 800b644:	9304      	str	r3, [sp, #16]
 800b646:	6963      	ldr	r3, [r4, #20]
 800b648:	4343      	muls	r3, r0
 800b64a:	0fdd      	lsrs	r5, r3, #31
 800b64c:	18ed      	adds	r5, r5, r3
 800b64e:	9b04      	ldr	r3, [sp, #16]
 800b650:	9801      	ldr	r0, [sp, #4]
 800b652:	3301      	adds	r3, #1
 800b654:	181b      	adds	r3, r3, r0
 800b656:	106d      	asrs	r5, r5, #1
 800b658:	42ab      	cmp	r3, r5
 800b65a:	d900      	bls.n	800b65e <__ssprint_r+0x6e>
 800b65c:	001d      	movs	r5, r3
 800b65e:	0552      	lsls	r2, r2, #21
 800b660:	d532      	bpl.n	800b6c8 <__ssprint_r+0xd8>
 800b662:	0029      	movs	r1, r5
 800b664:	9805      	ldr	r0, [sp, #20]
 800b666:	f7fc ff11 	bl	800848c <_malloc_r>
 800b66a:	1e06      	subs	r6, r0, #0
 800b66c:	d036      	beq.n	800b6dc <__ssprint_r+0xec>
 800b66e:	9a04      	ldr	r2, [sp, #16]
 800b670:	6921      	ldr	r1, [r4, #16]
 800b672:	f7fc fde7 	bl	8008244 <memcpy>
 800b676:	89a2      	ldrh	r2, [r4, #12]
 800b678:	4b1e      	ldr	r3, [pc, #120]	; (800b6f4 <__ssprint_r+0x104>)
 800b67a:	401a      	ands	r2, r3
 800b67c:	2380      	movs	r3, #128	; 0x80
 800b67e:	4313      	orrs	r3, r2
 800b680:	81a3      	strh	r3, [r4, #12]
 800b682:	9b04      	ldr	r3, [sp, #16]
 800b684:	6126      	str	r6, [r4, #16]
 800b686:	18f6      	adds	r6, r6, r3
 800b688:	6026      	str	r6, [r4, #0]
 800b68a:	6165      	str	r5, [r4, #20]
 800b68c:	9e01      	ldr	r6, [sp, #4]
 800b68e:	1aed      	subs	r5, r5, r3
 800b690:	60a5      	str	r5, [r4, #8]
 800b692:	9b01      	ldr	r3, [sp, #4]
 800b694:	429e      	cmp	r6, r3
 800b696:	d900      	bls.n	800b69a <__ssprint_r+0xaa>
 800b698:	001e      	movs	r6, r3
 800b69a:	0032      	movs	r2, r6
 800b69c:	9902      	ldr	r1, [sp, #8]
 800b69e:	6820      	ldr	r0, [r4, #0]
 800b6a0:	f000 ff99 	bl	800c5d6 <memmove>
 800b6a4:	9a01      	ldr	r2, [sp, #4]
 800b6a6:	68a3      	ldr	r3, [r4, #8]
 800b6a8:	4694      	mov	ip, r2
 800b6aa:	1b9b      	subs	r3, r3, r6
 800b6ac:	60a3      	str	r3, [r4, #8]
 800b6ae:	6823      	ldr	r3, [r4, #0]
 800b6b0:	199b      	adds	r3, r3, r6
 800b6b2:	6023      	str	r3, [r4, #0]
 800b6b4:	9b02      	ldr	r3, [sp, #8]
 800b6b6:	4463      	add	r3, ip
 800b6b8:	9302      	str	r3, [sp, #8]
 800b6ba:	68bb      	ldr	r3, [r7, #8]
 800b6bc:	1a9b      	subs	r3, r3, r2
 800b6be:	60bb      	str	r3, [r7, #8]
 800b6c0:	d0a3      	beq.n	800b60a <__ssprint_r+0x1a>
 800b6c2:	2300      	movs	r3, #0
 800b6c4:	9301      	str	r3, [sp, #4]
 800b6c6:	e7ae      	b.n	800b626 <__ssprint_r+0x36>
 800b6c8:	002a      	movs	r2, r5
 800b6ca:	9805      	ldr	r0, [sp, #20]
 800b6cc:	f000 ff9e 	bl	800c60c <_realloc_r>
 800b6d0:	1e06      	subs	r6, r0, #0
 800b6d2:	d1d6      	bne.n	800b682 <__ssprint_r+0x92>
 800b6d4:	6921      	ldr	r1, [r4, #16]
 800b6d6:	9805      	ldr	r0, [sp, #20]
 800b6d8:	f7fc fe26 	bl	8008328 <_free_r>
 800b6dc:	230c      	movs	r3, #12
 800b6de:	9a05      	ldr	r2, [sp, #20]
 800b6e0:	2001      	movs	r0, #1
 800b6e2:	6013      	str	r3, [r2, #0]
 800b6e4:	89a2      	ldrh	r2, [r4, #12]
 800b6e6:	3334      	adds	r3, #52	; 0x34
 800b6e8:	4313      	orrs	r3, r2
 800b6ea:	81a3      	strh	r3, [r4, #12]
 800b6ec:	2300      	movs	r3, #0
 800b6ee:	4240      	negs	r0, r0
 800b6f0:	60bb      	str	r3, [r7, #8]
 800b6f2:	e78b      	b.n	800b60c <__ssprint_r+0x1c>
 800b6f4:	fffffb7f 	.word	0xfffffb7f

0800b6f8 <__sprint_r>:
 800b6f8:	b5f0      	push	{r4, r5, r6, r7, lr}
 800b6fa:	6893      	ldr	r3, [r2, #8]
 800b6fc:	b085      	sub	sp, #20
 800b6fe:	9001      	str	r0, [sp, #4]
 800b700:	000d      	movs	r5, r1
 800b702:	0014      	movs	r4, r2
 800b704:	1e18      	subs	r0, r3, #0
 800b706:	d018      	beq.n	800b73a <__sprint_r+0x42>
 800b708:	6e4b      	ldr	r3, [r1, #100]	; 0x64
 800b70a:	049b      	lsls	r3, r3, #18
 800b70c:	d524      	bpl.n	800b758 <__sprint_r+0x60>
 800b70e:	6817      	ldr	r7, [r2, #0]
 800b710:	2600      	movs	r6, #0
 800b712:	683b      	ldr	r3, [r7, #0]
 800b714:	9302      	str	r3, [sp, #8]
 800b716:	687b      	ldr	r3, [r7, #4]
 800b718:	9300      	str	r3, [sp, #0]
 800b71a:	089b      	lsrs	r3, r3, #2
 800b71c:	9303      	str	r3, [sp, #12]
 800b71e:	9b03      	ldr	r3, [sp, #12]
 800b720:	42b3      	cmp	r3, r6
 800b722:	dc0e      	bgt.n	800b742 <__sprint_r+0x4a>
 800b724:	2203      	movs	r2, #3
 800b726:	9b00      	ldr	r3, [sp, #0]
 800b728:	68a0      	ldr	r0, [r4, #8]
 800b72a:	4393      	bics	r3, r2
 800b72c:	1ac0      	subs	r0, r0, r3
 800b72e:	60a0      	str	r0, [r4, #8]
 800b730:	3708      	adds	r7, #8
 800b732:	2800      	cmp	r0, #0
 800b734:	d1ec      	bne.n	800b710 <__sprint_r+0x18>
 800b736:	2300      	movs	r3, #0
 800b738:	60a3      	str	r3, [r4, #8]
 800b73a:	2300      	movs	r3, #0
 800b73c:	6063      	str	r3, [r4, #4]
 800b73e:	b005      	add	sp, #20
 800b740:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800b742:	9902      	ldr	r1, [sp, #8]
 800b744:	00b3      	lsls	r3, r6, #2
 800b746:	58c9      	ldr	r1, [r1, r3]
 800b748:	002a      	movs	r2, r5
 800b74a:	9801      	ldr	r0, [sp, #4]
 800b74c:	f000 ff1a 	bl	800c584 <_fputwc_r>
 800b750:	1c43      	adds	r3, r0, #1
 800b752:	d0f0      	beq.n	800b736 <__sprint_r+0x3e>
 800b754:	3601      	adds	r6, #1
 800b756:	e7e2      	b.n	800b71e <__sprint_r+0x26>
 800b758:	9801      	ldr	r0, [sp, #4]
 800b75a:	f000 fd13 	bl	800c184 <__sfvwrite_r>
 800b75e:	e7ea      	b.n	800b736 <__sprint_r+0x3e>

0800b760 <_vfiprintf_r>:
 800b760:	b5f0      	push	{r4, r5, r6, r7, lr}
 800b762:	b0c1      	sub	sp, #260	; 0x104
 800b764:	001c      	movs	r4, r3
 800b766:	001f      	movs	r7, r3
 800b768:	9006      	str	r0, [sp, #24]
 800b76a:	9103      	str	r1, [sp, #12]
 800b76c:	9207      	str	r2, [sp, #28]
 800b76e:	2800      	cmp	r0, #0
 800b770:	d004      	beq.n	800b77c <_vfiprintf_r+0x1c>
 800b772:	6b43      	ldr	r3, [r0, #52]	; 0x34
 800b774:	2b00      	cmp	r3, #0
 800b776:	d101      	bne.n	800b77c <_vfiprintf_r+0x1c>
 800b778:	f7fc fc04 	bl	8007f84 <__sinit>
 800b77c:	9b03      	ldr	r3, [sp, #12]
 800b77e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800b780:	07db      	lsls	r3, r3, #31
 800b782:	d407      	bmi.n	800b794 <_vfiprintf_r+0x34>
 800b784:	9b03      	ldr	r3, [sp, #12]
 800b786:	899b      	ldrh	r3, [r3, #12]
 800b788:	059b      	lsls	r3, r3, #22
 800b78a:	d403      	bmi.n	800b794 <_vfiprintf_r+0x34>
 800b78c:	9b03      	ldr	r3, [sp, #12]
 800b78e:	6d98      	ldr	r0, [r3, #88]	; 0x58
 800b790:	f7fc fd56 	bl	8008240 <__retarget_lock_acquire_recursive>
 800b794:	9b03      	ldr	r3, [sp, #12]
 800b796:	220c      	movs	r2, #12
 800b798:	5e9a      	ldrsh	r2, [r3, r2]
 800b79a:	2380      	movs	r3, #128	; 0x80
 800b79c:	019b      	lsls	r3, r3, #6
 800b79e:	421a      	tst	r2, r3
 800b7a0:	d107      	bne.n	800b7b2 <_vfiprintf_r+0x52>
 800b7a2:	4313      	orrs	r3, r2
 800b7a4:	9a03      	ldr	r2, [sp, #12]
 800b7a6:	8193      	strh	r3, [r2, #12]
 800b7a8:	6e53      	ldr	r3, [r2, #100]	; 0x64
 800b7aa:	4aa3      	ldr	r2, [pc, #652]	; (800ba38 <_vfiprintf_r+0x2d8>)
 800b7ac:	4013      	ands	r3, r2
 800b7ae:	9a03      	ldr	r2, [sp, #12]
 800b7b0:	6653      	str	r3, [r2, #100]	; 0x64
 800b7b2:	9b03      	ldr	r3, [sp, #12]
 800b7b4:	899b      	ldrh	r3, [r3, #12]
 800b7b6:	071b      	lsls	r3, r3, #28
 800b7b8:	d503      	bpl.n	800b7c2 <_vfiprintf_r+0x62>
 800b7ba:	9b03      	ldr	r3, [sp, #12]
 800b7bc:	691b      	ldr	r3, [r3, #16]
 800b7be:	2b00      	cmp	r3, #0
 800b7c0:	d118      	bne.n	800b7f4 <_vfiprintf_r+0x94>
 800b7c2:	9903      	ldr	r1, [sp, #12]
 800b7c4:	9806      	ldr	r0, [sp, #24]
 800b7c6:	f000 fe3b 	bl	800c440 <__swsetup_r>
 800b7ca:	2800      	cmp	r0, #0
 800b7cc:	d012      	beq.n	800b7f4 <_vfiprintf_r+0x94>
 800b7ce:	9b03      	ldr	r3, [sp, #12]
 800b7d0:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800b7d2:	07db      	lsls	r3, r3, #31
 800b7d4:	d505      	bpl.n	800b7e2 <_vfiprintf_r+0x82>
 800b7d6:	2301      	movs	r3, #1
 800b7d8:	425b      	negs	r3, r3
 800b7da:	9308      	str	r3, [sp, #32]
 800b7dc:	9808      	ldr	r0, [sp, #32]
 800b7de:	b041      	add	sp, #260	; 0x104
 800b7e0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800b7e2:	9b03      	ldr	r3, [sp, #12]
 800b7e4:	899b      	ldrh	r3, [r3, #12]
 800b7e6:	059b      	lsls	r3, r3, #22
 800b7e8:	d4f5      	bmi.n	800b7d6 <_vfiprintf_r+0x76>
 800b7ea:	9b03      	ldr	r3, [sp, #12]
 800b7ec:	6d98      	ldr	r0, [r3, #88]	; 0x58
 800b7ee:	f7fc fd28 	bl	8008242 <__retarget_lock_release_recursive>
 800b7f2:	e7f0      	b.n	800b7d6 <_vfiprintf_r+0x76>
 800b7f4:	221a      	movs	r2, #26
 800b7f6:	9b03      	ldr	r3, [sp, #12]
 800b7f8:	899b      	ldrh	r3, [r3, #12]
 800b7fa:	401a      	ands	r2, r3
 800b7fc:	2a0a      	cmp	r2, #10
 800b7fe:	d116      	bne.n	800b82e <_vfiprintf_r+0xce>
 800b800:	9a03      	ldr	r2, [sp, #12]
 800b802:	210e      	movs	r1, #14
 800b804:	5e52      	ldrsh	r2, [r2, r1]
 800b806:	2a00      	cmp	r2, #0
 800b808:	db11      	blt.n	800b82e <_vfiprintf_r+0xce>
 800b80a:	9a03      	ldr	r2, [sp, #12]
 800b80c:	6e52      	ldr	r2, [r2, #100]	; 0x64
 800b80e:	07d2      	lsls	r2, r2, #31
 800b810:	d405      	bmi.n	800b81e <_vfiprintf_r+0xbe>
 800b812:	059b      	lsls	r3, r3, #22
 800b814:	d403      	bmi.n	800b81e <_vfiprintf_r+0xbe>
 800b816:	9b03      	ldr	r3, [sp, #12]
 800b818:	6d98      	ldr	r0, [r3, #88]	; 0x58
 800b81a:	f7fc fd12 	bl	8008242 <__retarget_lock_release_recursive>
 800b81e:	0023      	movs	r3, r4
 800b820:	9a07      	ldr	r2, [sp, #28]
 800b822:	9903      	ldr	r1, [sp, #12]
 800b824:	9806      	ldr	r0, [sp, #24]
 800b826:	f000 fc69 	bl	800c0fc <__sbprintf>
 800b82a:	9008      	str	r0, [sp, #32]
 800b82c:	e7d6      	b.n	800b7dc <_vfiprintf_r+0x7c>
 800b82e:	2300      	movs	r3, #0
 800b830:	ad17      	add	r5, sp, #92	; 0x5c
 800b832:	9514      	str	r5, [sp, #80]	; 0x50
 800b834:	9316      	str	r3, [sp, #88]	; 0x58
 800b836:	9315      	str	r3, [sp, #84]	; 0x54
 800b838:	930c      	str	r3, [sp, #48]	; 0x30
 800b83a:	930d      	str	r3, [sp, #52]	; 0x34
 800b83c:	930e      	str	r3, [sp, #56]	; 0x38
 800b83e:	930f      	str	r3, [sp, #60]	; 0x3c
 800b840:	9308      	str	r3, [sp, #32]
 800b842:	9c07      	ldr	r4, [sp, #28]
 800b844:	7823      	ldrb	r3, [r4, #0]
 800b846:	2b00      	cmp	r3, #0
 800b848:	d002      	beq.n	800b850 <_vfiprintf_r+0xf0>
 800b84a:	2b25      	cmp	r3, #37	; 0x25
 800b84c:	d000      	beq.n	800b850 <_vfiprintf_r+0xf0>
 800b84e:	e08d      	b.n	800b96c <_vfiprintf_r+0x20c>
 800b850:	9b07      	ldr	r3, [sp, #28]
 800b852:	1ae6      	subs	r6, r4, r3
 800b854:	429c      	cmp	r4, r3
 800b856:	d016      	beq.n	800b886 <_vfiprintf_r+0x126>
 800b858:	602b      	str	r3, [r5, #0]
 800b85a:	9b16      	ldr	r3, [sp, #88]	; 0x58
 800b85c:	606e      	str	r6, [r5, #4]
 800b85e:	199b      	adds	r3, r3, r6
 800b860:	9316      	str	r3, [sp, #88]	; 0x58
 800b862:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800b864:	3508      	adds	r5, #8
 800b866:	3301      	adds	r3, #1
 800b868:	9315      	str	r3, [sp, #84]	; 0x54
 800b86a:	2b07      	cmp	r3, #7
 800b86c:	dd08      	ble.n	800b880 <_vfiprintf_r+0x120>
 800b86e:	9903      	ldr	r1, [sp, #12]
 800b870:	9806      	ldr	r0, [sp, #24]
 800b872:	aa14      	add	r2, sp, #80	; 0x50
 800b874:	f7ff ff40 	bl	800b6f8 <__sprint_r>
 800b878:	2800      	cmp	r0, #0
 800b87a:	d000      	beq.n	800b87e <_vfiprintf_r+0x11e>
 800b87c:	e3d9      	b.n	800c032 <_vfiprintf_r+0x8d2>
 800b87e:	ad17      	add	r5, sp, #92	; 0x5c
 800b880:	9b08      	ldr	r3, [sp, #32]
 800b882:	199b      	adds	r3, r3, r6
 800b884:	9308      	str	r3, [sp, #32]
 800b886:	7823      	ldrb	r3, [r4, #0]
 800b888:	2b00      	cmp	r3, #0
 800b88a:	d101      	bne.n	800b890 <_vfiprintf_r+0x130>
 800b88c:	f000 fbf6 	bl	800c07c <_vfiprintf_r+0x91c>
 800b890:	2200      	movs	r2, #0
 800b892:	a912      	add	r1, sp, #72	; 0x48
 800b894:	70ca      	strb	r2, [r1, #3]
 800b896:	2101      	movs	r1, #1
 800b898:	1c63      	adds	r3, r4, #1
 800b89a:	0014      	movs	r4, r2
 800b89c:	4249      	negs	r1, r1
 800b89e:	9105      	str	r1, [sp, #20]
 800b8a0:	9209      	str	r2, [sp, #36]	; 0x24
 800b8a2:	1c5a      	adds	r2, r3, #1
 800b8a4:	781b      	ldrb	r3, [r3, #0]
 800b8a6:	9207      	str	r2, [sp, #28]
 800b8a8:	0018      	movs	r0, r3
 800b8aa:	3820      	subs	r0, #32
 800b8ac:	285a      	cmp	r0, #90	; 0x5a
 800b8ae:	d900      	bls.n	800b8b2 <_vfiprintf_r+0x152>
 800b8b0:	e362      	b.n	800bf78 <_vfiprintf_r+0x818>
 800b8b2:	f7f4 fc39 	bl	8000128 <__gnu_thumb1_case_uhi>
 800b8b6:	0078      	.short	0x0078
 800b8b8:	03610361 	.word	0x03610361
 800b8bc:	03610081 	.word	0x03610081
 800b8c0:	03610361 	.word	0x03610361
 800b8c4:	0361005d 	.word	0x0361005d
 800b8c8:	00830361 	.word	0x00830361
 800b8cc:	0361008b 	.word	0x0361008b
 800b8d0:	008f0089 	.word	0x008f0089
 800b8d4:	00ad0361 	.word	0x00ad0361
 800b8d8:	00af00af 	.word	0x00af00af
 800b8dc:	00af00af 	.word	0x00af00af
 800b8e0:	00af00af 	.word	0x00af00af
 800b8e4:	00af00af 	.word	0x00af00af
 800b8e8:	036100af 	.word	0x036100af
 800b8ec:	03610361 	.word	0x03610361
 800b8f0:	03610361 	.word	0x03610361
 800b8f4:	03610361 	.word	0x03610361
 800b8f8:	03610361 	.word	0x03610361
 800b8fc:	00e600da 	.word	0x00e600da
 800b900:	03610361 	.word	0x03610361
 800b904:	03610361 	.word	0x03610361
 800b908:	03610361 	.word	0x03610361
 800b90c:	03610361 	.word	0x03610361
 800b910:	03610361 	.word	0x03610361
 800b914:	03610143 	.word	0x03610143
 800b918:	03610361 	.word	0x03610361
 800b91c:	03610182 	.word	0x03610182
 800b920:	0361027c 	.word	0x0361027c
 800b924:	02ae0361 	.word	0x02ae0361
 800b928:	03610361 	.word	0x03610361
 800b92c:	03610361 	.word	0x03610361
 800b930:	03610361 	.word	0x03610361
 800b934:	03610361 	.word	0x03610361
 800b938:	03610361 	.word	0x03610361
 800b93c:	00e800da 	.word	0x00e800da
 800b940:	03610361 	.word	0x03610361
 800b944:	00c30361 	.word	0x00c30361
 800b948:	00d600e8 	.word	0x00d600e8
 800b94c:	00cf0361 	.word	0x00cf0361
 800b950:	01260361 	.word	0x01260361
 800b954:	01740145 	.word	0x01740145
 800b958:	036100d6 	.word	0x036100d6
 800b95c:	007f0182 	.word	0x007f0182
 800b960:	0361027e 	.word	0x0361027e
 800b964:	02cd0361 	.word	0x02cd0361
 800b968:	007f0361 	.word	0x007f0361
 800b96c:	3401      	adds	r4, #1
 800b96e:	e769      	b.n	800b844 <_vfiprintf_r+0xe4>
 800b970:	9806      	ldr	r0, [sp, #24]
 800b972:	f7fe fe8b 	bl	800a68c <_localeconv_r>
 800b976:	6843      	ldr	r3, [r0, #4]
 800b978:	0018      	movs	r0, r3
 800b97a:	930f      	str	r3, [sp, #60]	; 0x3c
 800b97c:	f7f4 fbc2 	bl	8000104 <strlen>
 800b980:	900e      	str	r0, [sp, #56]	; 0x38
 800b982:	9806      	ldr	r0, [sp, #24]
 800b984:	f7fe fe82 	bl	800a68c <_localeconv_r>
 800b988:	6883      	ldr	r3, [r0, #8]
 800b98a:	930d      	str	r3, [sp, #52]	; 0x34
 800b98c:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800b98e:	2b00      	cmp	r3, #0
 800b990:	d010      	beq.n	800b9b4 <_vfiprintf_r+0x254>
 800b992:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800b994:	2b00      	cmp	r3, #0
 800b996:	d00d      	beq.n	800b9b4 <_vfiprintf_r+0x254>
 800b998:	781b      	ldrb	r3, [r3, #0]
 800b99a:	2b00      	cmp	r3, #0
 800b99c:	d00a      	beq.n	800b9b4 <_vfiprintf_r+0x254>
 800b99e:	2380      	movs	r3, #128	; 0x80
 800b9a0:	00db      	lsls	r3, r3, #3
 800b9a2:	431c      	orrs	r4, r3
 800b9a4:	e006      	b.n	800b9b4 <_vfiprintf_r+0x254>
 800b9a6:	ab12      	add	r3, sp, #72	; 0x48
 800b9a8:	78da      	ldrb	r2, [r3, #3]
 800b9aa:	3303      	adds	r3, #3
 800b9ac:	2a00      	cmp	r2, #0
 800b9ae:	d101      	bne.n	800b9b4 <_vfiprintf_r+0x254>
 800b9b0:	3220      	adds	r2, #32
 800b9b2:	701a      	strb	r2, [r3, #0]
 800b9b4:	9b07      	ldr	r3, [sp, #28]
 800b9b6:	e774      	b.n	800b8a2 <_vfiprintf_r+0x142>
 800b9b8:	2301      	movs	r3, #1
 800b9ba:	e7f2      	b.n	800b9a2 <_vfiprintf_r+0x242>
 800b9bc:	cf08      	ldmia	r7!, {r3}
 800b9be:	9309      	str	r3, [sp, #36]	; 0x24
 800b9c0:	2b00      	cmp	r3, #0
 800b9c2:	daf7      	bge.n	800b9b4 <_vfiprintf_r+0x254>
 800b9c4:	425b      	negs	r3, r3
 800b9c6:	9309      	str	r3, [sp, #36]	; 0x24
 800b9c8:	2304      	movs	r3, #4
 800b9ca:	e7ea      	b.n	800b9a2 <_vfiprintf_r+0x242>
 800b9cc:	222b      	movs	r2, #43	; 0x2b
 800b9ce:	ab12      	add	r3, sp, #72	; 0x48
 800b9d0:	70da      	strb	r2, [r3, #3]
 800b9d2:	e7ef      	b.n	800b9b4 <_vfiprintf_r+0x254>
 800b9d4:	9b07      	ldr	r3, [sp, #28]
 800b9d6:	1c5a      	adds	r2, r3, #1
 800b9d8:	781b      	ldrb	r3, [r3, #0]
 800b9da:	2b2a      	cmp	r3, #42	; 0x2a
 800b9dc:	d00f      	beq.n	800b9fe <_vfiprintf_r+0x29e>
 800b9de:	2100      	movs	r1, #0
 800b9e0:	9105      	str	r1, [sp, #20]
 800b9e2:	0019      	movs	r1, r3
 800b9e4:	3930      	subs	r1, #48	; 0x30
 800b9e6:	9207      	str	r2, [sp, #28]
 800b9e8:	2909      	cmp	r1, #9
 800b9ea:	d900      	bls.n	800b9ee <_vfiprintf_r+0x28e>
 800b9ec:	e75c      	b.n	800b8a8 <_vfiprintf_r+0x148>
 800b9ee:	200a      	movs	r0, #10
 800b9f0:	9b05      	ldr	r3, [sp, #20]
 800b9f2:	4343      	muls	r3, r0
 800b9f4:	185b      	adds	r3, r3, r1
 800b9f6:	9305      	str	r3, [sp, #20]
 800b9f8:	7813      	ldrb	r3, [r2, #0]
 800b9fa:	3201      	adds	r2, #1
 800b9fc:	e7f1      	b.n	800b9e2 <_vfiprintf_r+0x282>
 800b9fe:	cf08      	ldmia	r7!, {r3}
 800ba00:	9305      	str	r3, [sp, #20]
 800ba02:	2b00      	cmp	r3, #0
 800ba04:	da02      	bge.n	800ba0c <_vfiprintf_r+0x2ac>
 800ba06:	2301      	movs	r3, #1
 800ba08:	425b      	negs	r3, r3
 800ba0a:	9305      	str	r3, [sp, #20]
 800ba0c:	9207      	str	r2, [sp, #28]
 800ba0e:	e7d1      	b.n	800b9b4 <_vfiprintf_r+0x254>
 800ba10:	2380      	movs	r3, #128	; 0x80
 800ba12:	e7c6      	b.n	800b9a2 <_vfiprintf_r+0x242>
 800ba14:	2100      	movs	r1, #0
 800ba16:	9a07      	ldr	r2, [sp, #28]
 800ba18:	9109      	str	r1, [sp, #36]	; 0x24
 800ba1a:	200a      	movs	r0, #10
 800ba1c:	9909      	ldr	r1, [sp, #36]	; 0x24
 800ba1e:	3b30      	subs	r3, #48	; 0x30
 800ba20:	4341      	muls	r1, r0
 800ba22:	185b      	adds	r3, r3, r1
 800ba24:	9309      	str	r3, [sp, #36]	; 0x24
 800ba26:	0013      	movs	r3, r2
 800ba28:	781b      	ldrb	r3, [r3, #0]
 800ba2a:	3201      	adds	r2, #1
 800ba2c:	0019      	movs	r1, r3
 800ba2e:	3930      	subs	r1, #48	; 0x30
 800ba30:	9207      	str	r2, [sp, #28]
 800ba32:	2909      	cmp	r1, #9
 800ba34:	d9f1      	bls.n	800ba1a <_vfiprintf_r+0x2ba>
 800ba36:	e737      	b.n	800b8a8 <_vfiprintf_r+0x148>
 800ba38:	ffffdfff 	.word	0xffffdfff
 800ba3c:	9b07      	ldr	r3, [sp, #28]
 800ba3e:	781b      	ldrb	r3, [r3, #0]
 800ba40:	2b68      	cmp	r3, #104	; 0x68
 800ba42:	d105      	bne.n	800ba50 <_vfiprintf_r+0x2f0>
 800ba44:	9b07      	ldr	r3, [sp, #28]
 800ba46:	3301      	adds	r3, #1
 800ba48:	9307      	str	r3, [sp, #28]
 800ba4a:	2380      	movs	r3, #128	; 0x80
 800ba4c:	009b      	lsls	r3, r3, #2
 800ba4e:	e7a8      	b.n	800b9a2 <_vfiprintf_r+0x242>
 800ba50:	2340      	movs	r3, #64	; 0x40
 800ba52:	e7a6      	b.n	800b9a2 <_vfiprintf_r+0x242>
 800ba54:	9b07      	ldr	r3, [sp, #28]
 800ba56:	781b      	ldrb	r3, [r3, #0]
 800ba58:	2b6c      	cmp	r3, #108	; 0x6c
 800ba5a:	d104      	bne.n	800ba66 <_vfiprintf_r+0x306>
 800ba5c:	9b07      	ldr	r3, [sp, #28]
 800ba5e:	3301      	adds	r3, #1
 800ba60:	9307      	str	r3, [sp, #28]
 800ba62:	2320      	movs	r3, #32
 800ba64:	e79d      	b.n	800b9a2 <_vfiprintf_r+0x242>
 800ba66:	2310      	movs	r3, #16
 800ba68:	e79b      	b.n	800b9a2 <_vfiprintf_r+0x242>
 800ba6a:	003a      	movs	r2, r7
 800ba6c:	ca08      	ldmia	r2!, {r3}
 800ba6e:	ae27      	add	r6, sp, #156	; 0x9c
 800ba70:	7033      	strb	r3, [r6, #0]
 800ba72:	2300      	movs	r3, #0
 800ba74:	9204      	str	r2, [sp, #16]
 800ba76:	aa12      	add	r2, sp, #72	; 0x48
 800ba78:	70d3      	strb	r3, [r2, #3]
 800ba7a:	2201      	movs	r2, #1
 800ba7c:	930b      	str	r3, [sp, #44]	; 0x2c
 800ba7e:	9205      	str	r2, [sp, #20]
 800ba80:	e0b0      	b.n	800bbe4 <_vfiprintf_r+0x484>
 800ba82:	2310      	movs	r3, #16
 800ba84:	431c      	orrs	r4, r3
 800ba86:	06a3      	lsls	r3, r4, #26
 800ba88:	d52a      	bpl.n	800bae0 <_vfiprintf_r+0x380>
 800ba8a:	2307      	movs	r3, #7
 800ba8c:	3707      	adds	r7, #7
 800ba8e:	439f      	bics	r7, r3
 800ba90:	0039      	movs	r1, r7
 800ba92:	c90c      	ldmia	r1!, {r2, r3}
 800ba94:	9200      	str	r2, [sp, #0]
 800ba96:	9301      	str	r3, [sp, #4]
 800ba98:	9104      	str	r1, [sp, #16]
 800ba9a:	9a01      	ldr	r2, [sp, #4]
 800ba9c:	2301      	movs	r3, #1
 800ba9e:	2a00      	cmp	r2, #0
 800baa0:	da09      	bge.n	800bab6 <_vfiprintf_r+0x356>
 800baa2:	9e00      	ldr	r6, [sp, #0]
 800baa4:	9f01      	ldr	r7, [sp, #4]
 800baa6:	2200      	movs	r2, #0
 800baa8:	4271      	negs	r1, r6
 800baaa:	41ba      	sbcs	r2, r7
 800baac:	9100      	str	r1, [sp, #0]
 800baae:	9201      	str	r2, [sp, #4]
 800bab0:	212d      	movs	r1, #45	; 0x2d
 800bab2:	aa12      	add	r2, sp, #72	; 0x48
 800bab4:	70d1      	strb	r1, [r2, #3]
 800bab6:	9901      	ldr	r1, [sp, #4]
 800bab8:	9a00      	ldr	r2, [sp, #0]
 800baba:	430a      	orrs	r2, r1
 800babc:	9905      	ldr	r1, [sp, #20]
 800babe:	3101      	adds	r1, #1
 800bac0:	d100      	bne.n	800bac4 <_vfiprintf_r+0x364>
 800bac2:	e2e9      	b.n	800c098 <_vfiprintf_r+0x938>
 800bac4:	2180      	movs	r1, #128	; 0x80
 800bac6:	0027      	movs	r7, r4
 800bac8:	438f      	bics	r7, r1
 800baca:	2a00      	cmp	r2, #0
 800bacc:	d000      	beq.n	800bad0 <_vfiprintf_r+0x370>
 800bace:	e2e7      	b.n	800c0a0 <_vfiprintf_r+0x940>
 800bad0:	9a05      	ldr	r2, [sp, #20]
 800bad2:	2a00      	cmp	r2, #0
 800bad4:	d100      	bne.n	800bad8 <_vfiprintf_r+0x378>
 800bad6:	e243      	b.n	800bf60 <_vfiprintf_r+0x800>
 800bad8:	2b01      	cmp	r3, #1
 800bada:	d000      	beq.n	800bade <_vfiprintf_r+0x37e>
 800badc:	e2e3      	b.n	800c0a6 <_vfiprintf_r+0x946>
 800bade:	e1e7      	b.n	800beb0 <_vfiprintf_r+0x750>
 800bae0:	003a      	movs	r2, r7
 800bae2:	ca08      	ldmia	r2!, {r3}
 800bae4:	9204      	str	r2, [sp, #16]
 800bae6:	06e2      	lsls	r2, r4, #27
 800bae8:	d503      	bpl.n	800baf2 <_vfiprintf_r+0x392>
 800baea:	9300      	str	r3, [sp, #0]
 800baec:	17db      	asrs	r3, r3, #31
 800baee:	9301      	str	r3, [sp, #4]
 800baf0:	e7d3      	b.n	800ba9a <_vfiprintf_r+0x33a>
 800baf2:	0662      	lsls	r2, r4, #25
 800baf4:	d501      	bpl.n	800bafa <_vfiprintf_r+0x39a>
 800baf6:	b21b      	sxth	r3, r3
 800baf8:	e7f7      	b.n	800baea <_vfiprintf_r+0x38a>
 800bafa:	05a2      	lsls	r2, r4, #22
 800bafc:	d5f5      	bpl.n	800baea <_vfiprintf_r+0x38a>
 800bafe:	b25b      	sxtb	r3, r3
 800bb00:	e7f3      	b.n	800baea <_vfiprintf_r+0x38a>
 800bb02:	1d3b      	adds	r3, r7, #4
 800bb04:	9304      	str	r3, [sp, #16]
 800bb06:	06a3      	lsls	r3, r4, #26
 800bb08:	d506      	bpl.n	800bb18 <_vfiprintf_r+0x3b8>
 800bb0a:	683b      	ldr	r3, [r7, #0]
 800bb0c:	9a08      	ldr	r2, [sp, #32]
 800bb0e:	601a      	str	r2, [r3, #0]
 800bb10:	17d2      	asrs	r2, r2, #31
 800bb12:	605a      	str	r2, [r3, #4]
 800bb14:	9f04      	ldr	r7, [sp, #16]
 800bb16:	e694      	b.n	800b842 <_vfiprintf_r+0xe2>
 800bb18:	06e3      	lsls	r3, r4, #27
 800bb1a:	d503      	bpl.n	800bb24 <_vfiprintf_r+0x3c4>
 800bb1c:	683b      	ldr	r3, [r7, #0]
 800bb1e:	9a08      	ldr	r2, [sp, #32]
 800bb20:	601a      	str	r2, [r3, #0]
 800bb22:	e7f7      	b.n	800bb14 <_vfiprintf_r+0x3b4>
 800bb24:	0663      	lsls	r3, r4, #25
 800bb26:	d503      	bpl.n	800bb30 <_vfiprintf_r+0x3d0>
 800bb28:	683b      	ldr	r3, [r7, #0]
 800bb2a:	9a08      	ldr	r2, [sp, #32]
 800bb2c:	801a      	strh	r2, [r3, #0]
 800bb2e:	e7f1      	b.n	800bb14 <_vfiprintf_r+0x3b4>
 800bb30:	05a4      	lsls	r4, r4, #22
 800bb32:	d5f3      	bpl.n	800bb1c <_vfiprintf_r+0x3bc>
 800bb34:	683b      	ldr	r3, [r7, #0]
 800bb36:	9a08      	ldr	r2, [sp, #32]
 800bb38:	701a      	strb	r2, [r3, #0]
 800bb3a:	e7eb      	b.n	800bb14 <_vfiprintf_r+0x3b4>
 800bb3c:	2310      	movs	r3, #16
 800bb3e:	431c      	orrs	r4, r3
 800bb40:	2320      	movs	r3, #32
 800bb42:	0020      	movs	r0, r4
 800bb44:	4018      	ands	r0, r3
 800bb46:	421c      	tst	r4, r3
 800bb48:	d00d      	beq.n	800bb66 <_vfiprintf_r+0x406>
 800bb4a:	3b19      	subs	r3, #25
 800bb4c:	3707      	adds	r7, #7
 800bb4e:	439f      	bics	r7, r3
 800bb50:	0039      	movs	r1, r7
 800bb52:	c90c      	ldmia	r1!, {r2, r3}
 800bb54:	9200      	str	r2, [sp, #0]
 800bb56:	9301      	str	r3, [sp, #4]
 800bb58:	9104      	str	r1, [sp, #16]
 800bb5a:	4bcc      	ldr	r3, [pc, #816]	; (800be8c <_vfiprintf_r+0x72c>)
 800bb5c:	401c      	ands	r4, r3
 800bb5e:	2300      	movs	r3, #0
 800bb60:	2100      	movs	r1, #0
 800bb62:	aa12      	add	r2, sp, #72	; 0x48
 800bb64:	e7a6      	b.n	800bab4 <_vfiprintf_r+0x354>
 800bb66:	003a      	movs	r2, r7
 800bb68:	ca08      	ldmia	r2!, {r3}
 800bb6a:	0021      	movs	r1, r4
 800bb6c:	9204      	str	r2, [sp, #16]
 800bb6e:	2210      	movs	r2, #16
 800bb70:	4011      	ands	r1, r2
 800bb72:	4214      	tst	r4, r2
 800bb74:	d002      	beq.n	800bb7c <_vfiprintf_r+0x41c>
 800bb76:	9300      	str	r3, [sp, #0]
 800bb78:	9001      	str	r0, [sp, #4]
 800bb7a:	e7ee      	b.n	800bb5a <_vfiprintf_r+0x3fa>
 800bb7c:	2240      	movs	r2, #64	; 0x40
 800bb7e:	0020      	movs	r0, r4
 800bb80:	4010      	ands	r0, r2
 800bb82:	4214      	tst	r4, r2
 800bb84:	d003      	beq.n	800bb8e <_vfiprintf_r+0x42e>
 800bb86:	b29b      	uxth	r3, r3
 800bb88:	9300      	str	r3, [sp, #0]
 800bb8a:	9101      	str	r1, [sp, #4]
 800bb8c:	e7e5      	b.n	800bb5a <_vfiprintf_r+0x3fa>
 800bb8e:	2280      	movs	r2, #128	; 0x80
 800bb90:	0021      	movs	r1, r4
 800bb92:	0092      	lsls	r2, r2, #2
 800bb94:	4011      	ands	r1, r2
 800bb96:	4214      	tst	r4, r2
 800bb98:	d0f6      	beq.n	800bb88 <_vfiprintf_r+0x428>
 800bb9a:	b2db      	uxtb	r3, r3
 800bb9c:	e7eb      	b.n	800bb76 <_vfiprintf_r+0x416>
 800bb9e:	003b      	movs	r3, r7
 800bba0:	cb04      	ldmia	r3!, {r2}
 800bba2:	49bb      	ldr	r1, [pc, #748]	; (800be90 <_vfiprintf_r+0x730>)
 800bba4:	9304      	str	r3, [sp, #16]
 800bba6:	2300      	movs	r3, #0
 800bba8:	9200      	str	r2, [sp, #0]
 800bbaa:	aa13      	add	r2, sp, #76	; 0x4c
 800bbac:	8011      	strh	r1, [r2, #0]
 800bbae:	4ab9      	ldr	r2, [pc, #740]	; (800be94 <_vfiprintf_r+0x734>)
 800bbb0:	9301      	str	r3, [sp, #4]
 800bbb2:	3302      	adds	r3, #2
 800bbb4:	431c      	orrs	r4, r3
 800bbb6:	920c      	str	r2, [sp, #48]	; 0x30
 800bbb8:	e7d2      	b.n	800bb60 <_vfiprintf_r+0x400>
 800bbba:	003b      	movs	r3, r7
 800bbbc:	2700      	movs	r7, #0
 800bbbe:	cb40      	ldmia	r3!, {r6}
 800bbc0:	9304      	str	r3, [sp, #16]
 800bbc2:	ab12      	add	r3, sp, #72	; 0x48
 800bbc4:	70df      	strb	r7, [r3, #3]
 800bbc6:	9b05      	ldr	r3, [sp, #20]
 800bbc8:	3301      	adds	r3, #1
 800bbca:	d100      	bne.n	800bbce <_vfiprintf_r+0x46e>
 800bbcc:	e0ea      	b.n	800bda4 <_vfiprintf_r+0x644>
 800bbce:	0039      	movs	r1, r7
 800bbd0:	0030      	movs	r0, r6
 800bbd2:	9a05      	ldr	r2, [sp, #20]
 800bbd4:	f7fe fd8f 	bl	800a6f6 <memchr>
 800bbd8:	900b      	str	r0, [sp, #44]	; 0x2c
 800bbda:	42b8      	cmp	r0, r7
 800bbdc:	d002      	beq.n	800bbe4 <_vfiprintf_r+0x484>
 800bbde:	1b83      	subs	r3, r0, r6
 800bbe0:	9305      	str	r3, [sp, #20]
 800bbe2:	970b      	str	r7, [sp, #44]	; 0x2c
 800bbe4:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800bbe6:	9a05      	ldr	r2, [sp, #20]
 800bbe8:	930a      	str	r3, [sp, #40]	; 0x28
 800bbea:	4293      	cmp	r3, r2
 800bbec:	da00      	bge.n	800bbf0 <_vfiprintf_r+0x490>
 800bbee:	920a      	str	r2, [sp, #40]	; 0x28
 800bbf0:	ab12      	add	r3, sp, #72	; 0x48
 800bbf2:	3303      	adds	r3, #3
 800bbf4:	781b      	ldrb	r3, [r3, #0]
 800bbf6:	1e5a      	subs	r2, r3, #1
 800bbf8:	4193      	sbcs	r3, r2
 800bbfa:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800bbfc:	18d3      	adds	r3, r2, r3
 800bbfe:	930a      	str	r3, [sp, #40]	; 0x28
 800bc00:	0022      	movs	r2, r4
 800bc02:	2302      	movs	r3, #2
 800bc04:	401a      	ands	r2, r3
 800bc06:	9210      	str	r2, [sp, #64]	; 0x40
 800bc08:	421c      	tst	r4, r3
 800bc0a:	d002      	beq.n	800bc12 <_vfiprintf_r+0x4b2>
 800bc0c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800bc0e:	3302      	adds	r3, #2
 800bc10:	930a      	str	r3, [sp, #40]	; 0x28
 800bc12:	2384      	movs	r3, #132	; 0x84
 800bc14:	0022      	movs	r2, r4
 800bc16:	401a      	ands	r2, r3
 800bc18:	9211      	str	r2, [sp, #68]	; 0x44
 800bc1a:	421c      	tst	r4, r3
 800bc1c:	d11e      	bne.n	800bc5c <_vfiprintf_r+0x4fc>
 800bc1e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800bc20:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800bc22:	1a9f      	subs	r7, r3, r2
 800bc24:	2f00      	cmp	r7, #0
 800bc26:	dd19      	ble.n	800bc5c <_vfiprintf_r+0x4fc>
 800bc28:	0029      	movs	r1, r5
 800bc2a:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800bc2c:	489a      	ldr	r0, [pc, #616]	; (800be98 <_vfiprintf_r+0x738>)
 800bc2e:	9a16      	ldr	r2, [sp, #88]	; 0x58
 800bc30:	3301      	adds	r3, #1
 800bc32:	3108      	adds	r1, #8
 800bc34:	6028      	str	r0, [r5, #0]
 800bc36:	2f10      	cmp	r7, #16
 800bc38:	dd00      	ble.n	800bc3c <_vfiprintf_r+0x4dc>
 800bc3a:	e1a7      	b.n	800bf8c <_vfiprintf_r+0x82c>
 800bc3c:	606f      	str	r7, [r5, #4]
 800bc3e:	18bf      	adds	r7, r7, r2
 800bc40:	000d      	movs	r5, r1
 800bc42:	9716      	str	r7, [sp, #88]	; 0x58
 800bc44:	9315      	str	r3, [sp, #84]	; 0x54
 800bc46:	2b07      	cmp	r3, #7
 800bc48:	dd08      	ble.n	800bc5c <_vfiprintf_r+0x4fc>
 800bc4a:	9903      	ldr	r1, [sp, #12]
 800bc4c:	9806      	ldr	r0, [sp, #24]
 800bc4e:	aa14      	add	r2, sp, #80	; 0x50
 800bc50:	f7ff fd52 	bl	800b6f8 <__sprint_r>
 800bc54:	2800      	cmp	r0, #0
 800bc56:	d000      	beq.n	800bc5a <_vfiprintf_r+0x4fa>
 800bc58:	e1eb      	b.n	800c032 <_vfiprintf_r+0x8d2>
 800bc5a:	ad17      	add	r5, sp, #92	; 0x5c
 800bc5c:	a912      	add	r1, sp, #72	; 0x48
 800bc5e:	78c8      	ldrb	r0, [r1, #3]
 800bc60:	9a16      	ldr	r2, [sp, #88]	; 0x58
 800bc62:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800bc64:	3103      	adds	r1, #3
 800bc66:	2800      	cmp	r0, #0
 800bc68:	d012      	beq.n	800bc90 <_vfiprintf_r+0x530>
 800bc6a:	6029      	str	r1, [r5, #0]
 800bc6c:	2101      	movs	r1, #1
 800bc6e:	3301      	adds	r3, #1
 800bc70:	1852      	adds	r2, r2, r1
 800bc72:	6069      	str	r1, [r5, #4]
 800bc74:	9216      	str	r2, [sp, #88]	; 0x58
 800bc76:	9315      	str	r3, [sp, #84]	; 0x54
 800bc78:	3508      	adds	r5, #8
 800bc7a:	2b07      	cmp	r3, #7
 800bc7c:	dd08      	ble.n	800bc90 <_vfiprintf_r+0x530>
 800bc7e:	9903      	ldr	r1, [sp, #12]
 800bc80:	9806      	ldr	r0, [sp, #24]
 800bc82:	aa14      	add	r2, sp, #80	; 0x50
 800bc84:	f7ff fd38 	bl	800b6f8 <__sprint_r>
 800bc88:	2800      	cmp	r0, #0
 800bc8a:	d000      	beq.n	800bc8e <_vfiprintf_r+0x52e>
 800bc8c:	e1d1      	b.n	800c032 <_vfiprintf_r+0x8d2>
 800bc8e:	ad17      	add	r5, sp, #92	; 0x5c
 800bc90:	9910      	ldr	r1, [sp, #64]	; 0x40
 800bc92:	9a16      	ldr	r2, [sp, #88]	; 0x58
 800bc94:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800bc96:	2900      	cmp	r1, #0
 800bc98:	d013      	beq.n	800bcc2 <_vfiprintf_r+0x562>
 800bc9a:	a913      	add	r1, sp, #76	; 0x4c
 800bc9c:	6029      	str	r1, [r5, #0]
 800bc9e:	2102      	movs	r1, #2
 800bca0:	3301      	adds	r3, #1
 800bca2:	1852      	adds	r2, r2, r1
 800bca4:	6069      	str	r1, [r5, #4]
 800bca6:	9216      	str	r2, [sp, #88]	; 0x58
 800bca8:	9315      	str	r3, [sp, #84]	; 0x54
 800bcaa:	3508      	adds	r5, #8
 800bcac:	2b07      	cmp	r3, #7
 800bcae:	dd08      	ble.n	800bcc2 <_vfiprintf_r+0x562>
 800bcb0:	9903      	ldr	r1, [sp, #12]
 800bcb2:	9806      	ldr	r0, [sp, #24]
 800bcb4:	aa14      	add	r2, sp, #80	; 0x50
 800bcb6:	f7ff fd1f 	bl	800b6f8 <__sprint_r>
 800bcba:	2800      	cmp	r0, #0
 800bcbc:	d000      	beq.n	800bcc0 <_vfiprintf_r+0x560>
 800bcbe:	e1b8      	b.n	800c032 <_vfiprintf_r+0x8d2>
 800bcc0:	ad17      	add	r5, sp, #92	; 0x5c
 800bcc2:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800bcc4:	2b80      	cmp	r3, #128	; 0x80
 800bcc6:	d11e      	bne.n	800bd06 <_vfiprintf_r+0x5a6>
 800bcc8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800bcca:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800bccc:	1a9f      	subs	r7, r3, r2
 800bcce:	2f00      	cmp	r7, #0
 800bcd0:	dd19      	ble.n	800bd06 <_vfiprintf_r+0x5a6>
 800bcd2:	0029      	movs	r1, r5
 800bcd4:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800bcd6:	4871      	ldr	r0, [pc, #452]	; (800be9c <_vfiprintf_r+0x73c>)
 800bcd8:	9a16      	ldr	r2, [sp, #88]	; 0x58
 800bcda:	3301      	adds	r3, #1
 800bcdc:	3108      	adds	r1, #8
 800bcde:	6028      	str	r0, [r5, #0]
 800bce0:	2f10      	cmp	r7, #16
 800bce2:	dd00      	ble.n	800bce6 <_vfiprintf_r+0x586>
 800bce4:	e164      	b.n	800bfb0 <_vfiprintf_r+0x850>
 800bce6:	606f      	str	r7, [r5, #4]
 800bce8:	18bf      	adds	r7, r7, r2
 800bcea:	000d      	movs	r5, r1
 800bcec:	9716      	str	r7, [sp, #88]	; 0x58
 800bcee:	9315      	str	r3, [sp, #84]	; 0x54
 800bcf0:	2b07      	cmp	r3, #7
 800bcf2:	dd08      	ble.n	800bd06 <_vfiprintf_r+0x5a6>
 800bcf4:	9903      	ldr	r1, [sp, #12]
 800bcf6:	9806      	ldr	r0, [sp, #24]
 800bcf8:	aa14      	add	r2, sp, #80	; 0x50
 800bcfa:	f7ff fcfd 	bl	800b6f8 <__sprint_r>
 800bcfe:	2800      	cmp	r0, #0
 800bd00:	d000      	beq.n	800bd04 <_vfiprintf_r+0x5a4>
 800bd02:	e196      	b.n	800c032 <_vfiprintf_r+0x8d2>
 800bd04:	ad17      	add	r5, sp, #92	; 0x5c
 800bd06:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800bd08:	9a05      	ldr	r2, [sp, #20]
 800bd0a:	1a9f      	subs	r7, r3, r2
 800bd0c:	2f00      	cmp	r7, #0
 800bd0e:	dd19      	ble.n	800bd44 <_vfiprintf_r+0x5e4>
 800bd10:	0029      	movs	r1, r5
 800bd12:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800bd14:	4861      	ldr	r0, [pc, #388]	; (800be9c <_vfiprintf_r+0x73c>)
 800bd16:	9a16      	ldr	r2, [sp, #88]	; 0x58
 800bd18:	3301      	adds	r3, #1
 800bd1a:	3108      	adds	r1, #8
 800bd1c:	6028      	str	r0, [r5, #0]
 800bd1e:	2f10      	cmp	r7, #16
 800bd20:	dd00      	ble.n	800bd24 <_vfiprintf_r+0x5c4>
 800bd22:	e157      	b.n	800bfd4 <_vfiprintf_r+0x874>
 800bd24:	606f      	str	r7, [r5, #4]
 800bd26:	18bf      	adds	r7, r7, r2
 800bd28:	000d      	movs	r5, r1
 800bd2a:	9716      	str	r7, [sp, #88]	; 0x58
 800bd2c:	9315      	str	r3, [sp, #84]	; 0x54
 800bd2e:	2b07      	cmp	r3, #7
 800bd30:	dd08      	ble.n	800bd44 <_vfiprintf_r+0x5e4>
 800bd32:	9903      	ldr	r1, [sp, #12]
 800bd34:	9806      	ldr	r0, [sp, #24]
 800bd36:	aa14      	add	r2, sp, #80	; 0x50
 800bd38:	f7ff fcde 	bl	800b6f8 <__sprint_r>
 800bd3c:	2800      	cmp	r0, #0
 800bd3e:	d000      	beq.n	800bd42 <_vfiprintf_r+0x5e2>
 800bd40:	e177      	b.n	800c032 <_vfiprintf_r+0x8d2>
 800bd42:	ad17      	add	r5, sp, #92	; 0x5c
 800bd44:	9b05      	ldr	r3, [sp, #20]
 800bd46:	9a05      	ldr	r2, [sp, #20]
 800bd48:	606b      	str	r3, [r5, #4]
 800bd4a:	9b16      	ldr	r3, [sp, #88]	; 0x58
 800bd4c:	602e      	str	r6, [r5, #0]
 800bd4e:	189b      	adds	r3, r3, r2
 800bd50:	9316      	str	r3, [sp, #88]	; 0x58
 800bd52:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800bd54:	3508      	adds	r5, #8
 800bd56:	3301      	adds	r3, #1
 800bd58:	9315      	str	r3, [sp, #84]	; 0x54
 800bd5a:	2b07      	cmp	r3, #7
 800bd5c:	dd08      	ble.n	800bd70 <_vfiprintf_r+0x610>
 800bd5e:	9903      	ldr	r1, [sp, #12]
 800bd60:	9806      	ldr	r0, [sp, #24]
 800bd62:	aa14      	add	r2, sp, #80	; 0x50
 800bd64:	f7ff fcc8 	bl	800b6f8 <__sprint_r>
 800bd68:	2800      	cmp	r0, #0
 800bd6a:	d000      	beq.n	800bd6e <_vfiprintf_r+0x60e>
 800bd6c:	e161      	b.n	800c032 <_vfiprintf_r+0x8d2>
 800bd6e:	ad17      	add	r5, sp, #92	; 0x5c
 800bd70:	0764      	lsls	r4, r4, #29
 800bd72:	d500      	bpl.n	800bd76 <_vfiprintf_r+0x616>
 800bd74:	e140      	b.n	800bff8 <_vfiprintf_r+0x898>
 800bd76:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800bd78:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800bd7a:	4293      	cmp	r3, r2
 800bd7c:	da00      	bge.n	800bd80 <_vfiprintf_r+0x620>
 800bd7e:	0013      	movs	r3, r2
 800bd80:	9a08      	ldr	r2, [sp, #32]
 800bd82:	18d3      	adds	r3, r2, r3
 800bd84:	9308      	str	r3, [sp, #32]
 800bd86:	9b16      	ldr	r3, [sp, #88]	; 0x58
 800bd88:	2b00      	cmp	r3, #0
 800bd8a:	d007      	beq.n	800bd9c <_vfiprintf_r+0x63c>
 800bd8c:	9903      	ldr	r1, [sp, #12]
 800bd8e:	9806      	ldr	r0, [sp, #24]
 800bd90:	aa14      	add	r2, sp, #80	; 0x50
 800bd92:	f7ff fcb1 	bl	800b6f8 <__sprint_r>
 800bd96:	2800      	cmp	r0, #0
 800bd98:	d000      	beq.n	800bd9c <_vfiprintf_r+0x63c>
 800bd9a:	e14a      	b.n	800c032 <_vfiprintf_r+0x8d2>
 800bd9c:	2300      	movs	r3, #0
 800bd9e:	ad17      	add	r5, sp, #92	; 0x5c
 800bda0:	9315      	str	r3, [sp, #84]	; 0x54
 800bda2:	e6b7      	b.n	800bb14 <_vfiprintf_r+0x3b4>
 800bda4:	0030      	movs	r0, r6
 800bda6:	f7f4 f9ad 	bl	8000104 <strlen>
 800bdaa:	9005      	str	r0, [sp, #20]
 800bdac:	e719      	b.n	800bbe2 <_vfiprintf_r+0x482>
 800bdae:	2310      	movs	r3, #16
 800bdb0:	431c      	orrs	r4, r3
 800bdb2:	2320      	movs	r3, #32
 800bdb4:	0020      	movs	r0, r4
 800bdb6:	4018      	ands	r0, r3
 800bdb8:	421c      	tst	r4, r3
 800bdba:	d009      	beq.n	800bdd0 <_vfiprintf_r+0x670>
 800bdbc:	3b19      	subs	r3, #25
 800bdbe:	3707      	adds	r7, #7
 800bdc0:	439f      	bics	r7, r3
 800bdc2:	0039      	movs	r1, r7
 800bdc4:	c90c      	ldmia	r1!, {r2, r3}
 800bdc6:	9200      	str	r2, [sp, #0]
 800bdc8:	9301      	str	r3, [sp, #4]
 800bdca:	9104      	str	r1, [sp, #16]
 800bdcc:	2301      	movs	r3, #1
 800bdce:	e6c7      	b.n	800bb60 <_vfiprintf_r+0x400>
 800bdd0:	003b      	movs	r3, r7
 800bdd2:	cb04      	ldmia	r3!, {r2}
 800bdd4:	0021      	movs	r1, r4
 800bdd6:	9304      	str	r3, [sp, #16]
 800bdd8:	2310      	movs	r3, #16
 800bdda:	4019      	ands	r1, r3
 800bddc:	421c      	tst	r4, r3
 800bdde:	d003      	beq.n	800bde8 <_vfiprintf_r+0x688>
 800bde0:	9200      	str	r2, [sp, #0]
 800bde2:	9001      	str	r0, [sp, #4]
 800bde4:	3b0f      	subs	r3, #15
 800bde6:	e6bb      	b.n	800bb60 <_vfiprintf_r+0x400>
 800bde8:	2340      	movs	r3, #64	; 0x40
 800bdea:	0020      	movs	r0, r4
 800bdec:	4018      	ands	r0, r3
 800bdee:	421c      	tst	r4, r3
 800bdf0:	d003      	beq.n	800bdfa <_vfiprintf_r+0x69a>
 800bdf2:	b293      	uxth	r3, r2
 800bdf4:	9300      	str	r3, [sp, #0]
 800bdf6:	9101      	str	r1, [sp, #4]
 800bdf8:	e7e8      	b.n	800bdcc <_vfiprintf_r+0x66c>
 800bdfa:	2380      	movs	r3, #128	; 0x80
 800bdfc:	0021      	movs	r1, r4
 800bdfe:	009b      	lsls	r3, r3, #2
 800be00:	4019      	ands	r1, r3
 800be02:	421c      	tst	r4, r3
 800be04:	d003      	beq.n	800be0e <_vfiprintf_r+0x6ae>
 800be06:	b2d3      	uxtb	r3, r2
 800be08:	9300      	str	r3, [sp, #0]
 800be0a:	9001      	str	r0, [sp, #4]
 800be0c:	e7de      	b.n	800bdcc <_vfiprintf_r+0x66c>
 800be0e:	9200      	str	r2, [sp, #0]
 800be10:	e7f1      	b.n	800bdf6 <_vfiprintf_r+0x696>
 800be12:	4a23      	ldr	r2, [pc, #140]	; (800bea0 <_vfiprintf_r+0x740>)
 800be14:	0020      	movs	r0, r4
 800be16:	920c      	str	r2, [sp, #48]	; 0x30
 800be18:	2220      	movs	r2, #32
 800be1a:	4010      	ands	r0, r2
 800be1c:	4214      	tst	r4, r2
 800be1e:	d019      	beq.n	800be54 <_vfiprintf_r+0x6f4>
 800be20:	3a19      	subs	r2, #25
 800be22:	3707      	adds	r7, #7
 800be24:	4397      	bics	r7, r2
 800be26:	0038      	movs	r0, r7
 800be28:	c806      	ldmia	r0!, {r1, r2}
 800be2a:	9100      	str	r1, [sp, #0]
 800be2c:	9201      	str	r2, [sp, #4]
 800be2e:	9004      	str	r0, [sp, #16]
 800be30:	07e2      	lsls	r2, r4, #31
 800be32:	d509      	bpl.n	800be48 <_vfiprintf_r+0x6e8>
 800be34:	9a00      	ldr	r2, [sp, #0]
 800be36:	9901      	ldr	r1, [sp, #4]
 800be38:	430a      	orrs	r2, r1
 800be3a:	d005      	beq.n	800be48 <_vfiprintf_r+0x6e8>
 800be3c:	aa13      	add	r2, sp, #76	; 0x4c
 800be3e:	2130      	movs	r1, #48	; 0x30
 800be40:	7053      	strb	r3, [r2, #1]
 800be42:	2302      	movs	r3, #2
 800be44:	7011      	strb	r1, [r2, #0]
 800be46:	431c      	orrs	r4, r3
 800be48:	4b10      	ldr	r3, [pc, #64]	; (800be8c <_vfiprintf_r+0x72c>)
 800be4a:	401c      	ands	r4, r3
 800be4c:	2302      	movs	r3, #2
 800be4e:	e687      	b.n	800bb60 <_vfiprintf_r+0x400>
 800be50:	4a10      	ldr	r2, [pc, #64]	; (800be94 <_vfiprintf_r+0x734>)
 800be52:	e7df      	b.n	800be14 <_vfiprintf_r+0x6b4>
 800be54:	0039      	movs	r1, r7
 800be56:	c904      	ldmia	r1!, {r2}
 800be58:	0026      	movs	r6, r4
 800be5a:	9104      	str	r1, [sp, #16]
 800be5c:	2110      	movs	r1, #16
 800be5e:	400e      	ands	r6, r1
 800be60:	420c      	tst	r4, r1
 800be62:	d002      	beq.n	800be6a <_vfiprintf_r+0x70a>
 800be64:	9200      	str	r2, [sp, #0]
 800be66:	9001      	str	r0, [sp, #4]
 800be68:	e7e2      	b.n	800be30 <_vfiprintf_r+0x6d0>
 800be6a:	2140      	movs	r1, #64	; 0x40
 800be6c:	0020      	movs	r0, r4
 800be6e:	4008      	ands	r0, r1
 800be70:	420c      	tst	r4, r1
 800be72:	d003      	beq.n	800be7c <_vfiprintf_r+0x71c>
 800be74:	b292      	uxth	r2, r2
 800be76:	9200      	str	r2, [sp, #0]
 800be78:	9601      	str	r6, [sp, #4]
 800be7a:	e7d9      	b.n	800be30 <_vfiprintf_r+0x6d0>
 800be7c:	2180      	movs	r1, #128	; 0x80
 800be7e:	0026      	movs	r6, r4
 800be80:	0089      	lsls	r1, r1, #2
 800be82:	400e      	ands	r6, r1
 800be84:	420c      	tst	r4, r1
 800be86:	d0f6      	beq.n	800be76 <_vfiprintf_r+0x716>
 800be88:	b2d2      	uxtb	r2, r2
 800be8a:	e7eb      	b.n	800be64 <_vfiprintf_r+0x704>
 800be8c:	fffffbff 	.word	0xfffffbff
 800be90:	00007830 	.word	0x00007830
 800be94:	0800e7b4 	.word	0x0800e7b4
 800be98:	0800e899 	.word	0x0800e899
 800be9c:	0800e8a9 	.word	0x0800e8a9
 800bea0:	0800e7c5 	.word	0x0800e7c5
 800bea4:	9b01      	ldr	r3, [sp, #4]
 800bea6:	2b00      	cmp	r3, #0
 800bea8:	d109      	bne.n	800bebe <_vfiprintf_r+0x75e>
 800beaa:	9b00      	ldr	r3, [sp, #0]
 800beac:	2b09      	cmp	r3, #9
 800beae:	d806      	bhi.n	800bebe <_vfiprintf_r+0x75e>
 800beb0:	26b7      	movs	r6, #183	; 0xb7
 800beb2:	ab12      	add	r3, sp, #72	; 0x48
 800beb4:	18f6      	adds	r6, r6, r3
 800beb6:	9b00      	ldr	r3, [sp, #0]
 800beb8:	3330      	adds	r3, #48	; 0x30
 800beba:	7033      	strb	r3, [r6, #0]
 800bebc:	e115      	b.n	800c0ea <_vfiprintf_r+0x98a>
 800bebe:	2380      	movs	r3, #128	; 0x80
 800bec0:	2400      	movs	r4, #0
 800bec2:	00db      	lsls	r3, r3, #3
 800bec4:	403b      	ands	r3, r7
 800bec6:	ae40      	add	r6, sp, #256	; 0x100
 800bec8:	930a      	str	r3, [sp, #40]	; 0x28
 800beca:	220a      	movs	r2, #10
 800becc:	9800      	ldr	r0, [sp, #0]
 800bece:	9901      	ldr	r1, [sp, #4]
 800bed0:	2300      	movs	r3, #0
 800bed2:	f7f4 fae7 	bl	80004a4 <__aeabi_uldivmod>
 800bed6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800bed8:	3e01      	subs	r6, #1
 800beda:	3230      	adds	r2, #48	; 0x30
 800bedc:	900b      	str	r0, [sp, #44]	; 0x2c
 800bede:	9110      	str	r1, [sp, #64]	; 0x40
 800bee0:	7032      	strb	r2, [r6, #0]
 800bee2:	3401      	adds	r4, #1
 800bee4:	2b00      	cmp	r3, #0
 800bee6:	d01a      	beq.n	800bf1e <_vfiprintf_r+0x7be>
 800bee8:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800beea:	781b      	ldrb	r3, [r3, #0]
 800beec:	42a3      	cmp	r3, r4
 800beee:	d116      	bne.n	800bf1e <_vfiprintf_r+0x7be>
 800bef0:	2cff      	cmp	r4, #255	; 0xff
 800bef2:	d014      	beq.n	800bf1e <_vfiprintf_r+0x7be>
 800bef4:	9b01      	ldr	r3, [sp, #4]
 800bef6:	2b00      	cmp	r3, #0
 800bef8:	d102      	bne.n	800bf00 <_vfiprintf_r+0x7a0>
 800befa:	9b00      	ldr	r3, [sp, #0]
 800befc:	2b09      	cmp	r3, #9
 800befe:	d90e      	bls.n	800bf1e <_vfiprintf_r+0x7be>
 800bf00:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800bf02:	990f      	ldr	r1, [sp, #60]	; 0x3c
 800bf04:	1af6      	subs	r6, r6, r3
 800bf06:	001a      	movs	r2, r3
 800bf08:	0030      	movs	r0, r6
 800bf0a:	f7fe fbab 	bl	800a664 <strncpy>
 800bf0e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800bf10:	2400      	movs	r4, #0
 800bf12:	785b      	ldrb	r3, [r3, #1]
 800bf14:	1e5a      	subs	r2, r3, #1
 800bf16:	4193      	sbcs	r3, r2
 800bf18:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800bf1a:	18d3      	adds	r3, r2, r3
 800bf1c:	930d      	str	r3, [sp, #52]	; 0x34
 800bf1e:	9b01      	ldr	r3, [sp, #4]
 800bf20:	2b00      	cmp	r3, #0
 800bf22:	d103      	bne.n	800bf2c <_vfiprintf_r+0x7cc>
 800bf24:	9b00      	ldr	r3, [sp, #0]
 800bf26:	2b09      	cmp	r3, #9
 800bf28:	d800      	bhi.n	800bf2c <_vfiprintf_r+0x7cc>
 800bf2a:	e0de      	b.n	800c0ea <_vfiprintf_r+0x98a>
 800bf2c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800bf2e:	9300      	str	r3, [sp, #0]
 800bf30:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800bf32:	9301      	str	r3, [sp, #4]
 800bf34:	e7c9      	b.n	800beca <_vfiprintf_r+0x76a>
 800bf36:	200f      	movs	r0, #15
 800bf38:	9b00      	ldr	r3, [sp, #0]
 800bf3a:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800bf3c:	4003      	ands	r3, r0
 800bf3e:	5cd3      	ldrb	r3, [r2, r3]
 800bf40:	3e01      	subs	r6, #1
 800bf42:	7033      	strb	r3, [r6, #0]
 800bf44:	9b01      	ldr	r3, [sp, #4]
 800bf46:	0719      	lsls	r1, r3, #28
 800bf48:	9b00      	ldr	r3, [sp, #0]
 800bf4a:	091a      	lsrs	r2, r3, #4
 800bf4c:	9b01      	ldr	r3, [sp, #4]
 800bf4e:	4311      	orrs	r1, r2
 800bf50:	091b      	lsrs	r3, r3, #4
 800bf52:	9301      	str	r3, [sp, #4]
 800bf54:	000b      	movs	r3, r1
 800bf56:	9a01      	ldr	r2, [sp, #4]
 800bf58:	9100      	str	r1, [sp, #0]
 800bf5a:	4313      	orrs	r3, r2
 800bf5c:	d1ec      	bne.n	800bf38 <_vfiprintf_r+0x7d8>
 800bf5e:	e0c4      	b.n	800c0ea <_vfiprintf_r+0x98a>
 800bf60:	ae40      	add	r6, sp, #256	; 0x100
 800bf62:	2b00      	cmp	r3, #0
 800bf64:	d000      	beq.n	800bf68 <_vfiprintf_r+0x808>
 800bf66:	e0c0      	b.n	800c0ea <_vfiprintf_r+0x98a>
 800bf68:	07e4      	lsls	r4, r4, #31
 800bf6a:	d400      	bmi.n	800bf6e <_vfiprintf_r+0x80e>
 800bf6c:	e0bd      	b.n	800c0ea <_vfiprintf_r+0x98a>
 800bf6e:	26b7      	movs	r6, #183	; 0xb7
 800bf70:	ab12      	add	r3, sp, #72	; 0x48
 800bf72:	18f6      	adds	r6, r6, r3
 800bf74:	2330      	movs	r3, #48	; 0x30
 800bf76:	e7a0      	b.n	800beba <_vfiprintf_r+0x75a>
 800bf78:	2b00      	cmp	r3, #0
 800bf7a:	d100      	bne.n	800bf7e <_vfiprintf_r+0x81e>
 800bf7c:	e07e      	b.n	800c07c <_vfiprintf_r+0x91c>
 800bf7e:	ae27      	add	r6, sp, #156	; 0x9c
 800bf80:	7033      	strb	r3, [r6, #0]
 800bf82:	2300      	movs	r3, #0
 800bf84:	aa12      	add	r2, sp, #72	; 0x48
 800bf86:	70d3      	strb	r3, [r2, #3]
 800bf88:	9704      	str	r7, [sp, #16]
 800bf8a:	e576      	b.n	800ba7a <_vfiprintf_r+0x31a>
 800bf8c:	2010      	movs	r0, #16
 800bf8e:	1812      	adds	r2, r2, r0
 800bf90:	6068      	str	r0, [r5, #4]
 800bf92:	9216      	str	r2, [sp, #88]	; 0x58
 800bf94:	9315      	str	r3, [sp, #84]	; 0x54
 800bf96:	2b07      	cmp	r3, #7
 800bf98:	dd07      	ble.n	800bfaa <_vfiprintf_r+0x84a>
 800bf9a:	9903      	ldr	r1, [sp, #12]
 800bf9c:	9806      	ldr	r0, [sp, #24]
 800bf9e:	aa14      	add	r2, sp, #80	; 0x50
 800bfa0:	f7ff fbaa 	bl	800b6f8 <__sprint_r>
 800bfa4:	2800      	cmp	r0, #0
 800bfa6:	d144      	bne.n	800c032 <_vfiprintf_r+0x8d2>
 800bfa8:	a917      	add	r1, sp, #92	; 0x5c
 800bfaa:	000d      	movs	r5, r1
 800bfac:	3f10      	subs	r7, #16
 800bfae:	e63b      	b.n	800bc28 <_vfiprintf_r+0x4c8>
 800bfb0:	2010      	movs	r0, #16
 800bfb2:	1812      	adds	r2, r2, r0
 800bfb4:	6068      	str	r0, [r5, #4]
 800bfb6:	9216      	str	r2, [sp, #88]	; 0x58
 800bfb8:	9315      	str	r3, [sp, #84]	; 0x54
 800bfba:	2b07      	cmp	r3, #7
 800bfbc:	dd07      	ble.n	800bfce <_vfiprintf_r+0x86e>
 800bfbe:	9903      	ldr	r1, [sp, #12]
 800bfc0:	9806      	ldr	r0, [sp, #24]
 800bfc2:	aa14      	add	r2, sp, #80	; 0x50
 800bfc4:	f7ff fb98 	bl	800b6f8 <__sprint_r>
 800bfc8:	2800      	cmp	r0, #0
 800bfca:	d132      	bne.n	800c032 <_vfiprintf_r+0x8d2>
 800bfcc:	a917      	add	r1, sp, #92	; 0x5c
 800bfce:	000d      	movs	r5, r1
 800bfd0:	3f10      	subs	r7, #16
 800bfd2:	e67e      	b.n	800bcd2 <_vfiprintf_r+0x572>
 800bfd4:	2010      	movs	r0, #16
 800bfd6:	1812      	adds	r2, r2, r0
 800bfd8:	6068      	str	r0, [r5, #4]
 800bfda:	9216      	str	r2, [sp, #88]	; 0x58
 800bfdc:	9315      	str	r3, [sp, #84]	; 0x54
 800bfde:	2b07      	cmp	r3, #7
 800bfe0:	dd07      	ble.n	800bff2 <_vfiprintf_r+0x892>
 800bfe2:	9903      	ldr	r1, [sp, #12]
 800bfe4:	9806      	ldr	r0, [sp, #24]
 800bfe6:	aa14      	add	r2, sp, #80	; 0x50
 800bfe8:	f7ff fb86 	bl	800b6f8 <__sprint_r>
 800bfec:	2800      	cmp	r0, #0
 800bfee:	d120      	bne.n	800c032 <_vfiprintf_r+0x8d2>
 800bff0:	a917      	add	r1, sp, #92	; 0x5c
 800bff2:	000d      	movs	r5, r1
 800bff4:	3f10      	subs	r7, #16
 800bff6:	e68b      	b.n	800bd10 <_vfiprintf_r+0x5b0>
 800bff8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800bffa:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800bffc:	2610      	movs	r6, #16
 800bffe:	1a9c      	subs	r4, r3, r2
 800c000:	2c00      	cmp	r4, #0
 800c002:	dc00      	bgt.n	800c006 <_vfiprintf_r+0x8a6>
 800c004:	e6b7      	b.n	800bd76 <_vfiprintf_r+0x616>
 800c006:	9915      	ldr	r1, [sp, #84]	; 0x54
 800c008:	4a3b      	ldr	r2, [pc, #236]	; (800c0f8 <_vfiprintf_r+0x998>)
 800c00a:	9b16      	ldr	r3, [sp, #88]	; 0x58
 800c00c:	3101      	adds	r1, #1
 800c00e:	602a      	str	r2, [r5, #0]
 800c010:	2c10      	cmp	r4, #16
 800c012:	dc22      	bgt.n	800c05a <_vfiprintf_r+0x8fa>
 800c014:	606c      	str	r4, [r5, #4]
 800c016:	18e4      	adds	r4, r4, r3
 800c018:	9416      	str	r4, [sp, #88]	; 0x58
 800c01a:	9115      	str	r1, [sp, #84]	; 0x54
 800c01c:	2907      	cmp	r1, #7
 800c01e:	dc00      	bgt.n	800c022 <_vfiprintf_r+0x8c2>
 800c020:	e6a9      	b.n	800bd76 <_vfiprintf_r+0x616>
 800c022:	9903      	ldr	r1, [sp, #12]
 800c024:	9806      	ldr	r0, [sp, #24]
 800c026:	aa14      	add	r2, sp, #80	; 0x50
 800c028:	f7ff fb66 	bl	800b6f8 <__sprint_r>
 800c02c:	2800      	cmp	r0, #0
 800c02e:	d100      	bne.n	800c032 <_vfiprintf_r+0x8d2>
 800c030:	e6a1      	b.n	800bd76 <_vfiprintf_r+0x616>
 800c032:	9b03      	ldr	r3, [sp, #12]
 800c034:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800c036:	07db      	lsls	r3, r3, #31
 800c038:	d407      	bmi.n	800c04a <_vfiprintf_r+0x8ea>
 800c03a:	9b03      	ldr	r3, [sp, #12]
 800c03c:	899b      	ldrh	r3, [r3, #12]
 800c03e:	059b      	lsls	r3, r3, #22
 800c040:	d403      	bmi.n	800c04a <_vfiprintf_r+0x8ea>
 800c042:	9b03      	ldr	r3, [sp, #12]
 800c044:	6d98      	ldr	r0, [r3, #88]	; 0x58
 800c046:	f7fc f8fc 	bl	8008242 <__retarget_lock_release_recursive>
 800c04a:	9b03      	ldr	r3, [sp, #12]
 800c04c:	899b      	ldrh	r3, [r3, #12]
 800c04e:	065b      	lsls	r3, r3, #25
 800c050:	d401      	bmi.n	800c056 <_vfiprintf_r+0x8f6>
 800c052:	f7ff fbc3 	bl	800b7dc <_vfiprintf_r+0x7c>
 800c056:	f7ff fbbe 	bl	800b7d6 <_vfiprintf_r+0x76>
 800c05a:	3310      	adds	r3, #16
 800c05c:	606e      	str	r6, [r5, #4]
 800c05e:	9316      	str	r3, [sp, #88]	; 0x58
 800c060:	9115      	str	r1, [sp, #84]	; 0x54
 800c062:	3508      	adds	r5, #8
 800c064:	2907      	cmp	r1, #7
 800c066:	dd07      	ble.n	800c078 <_vfiprintf_r+0x918>
 800c068:	9903      	ldr	r1, [sp, #12]
 800c06a:	9806      	ldr	r0, [sp, #24]
 800c06c:	aa14      	add	r2, sp, #80	; 0x50
 800c06e:	f7ff fb43 	bl	800b6f8 <__sprint_r>
 800c072:	2800      	cmp	r0, #0
 800c074:	d1dd      	bne.n	800c032 <_vfiprintf_r+0x8d2>
 800c076:	ad17      	add	r5, sp, #92	; 0x5c
 800c078:	3c10      	subs	r4, #16
 800c07a:	e7c4      	b.n	800c006 <_vfiprintf_r+0x8a6>
 800c07c:	9b16      	ldr	r3, [sp, #88]	; 0x58
 800c07e:	2b00      	cmp	r3, #0
 800c080:	d102      	bne.n	800c088 <_vfiprintf_r+0x928>
 800c082:	2300      	movs	r3, #0
 800c084:	9315      	str	r3, [sp, #84]	; 0x54
 800c086:	e7d4      	b.n	800c032 <_vfiprintf_r+0x8d2>
 800c088:	9903      	ldr	r1, [sp, #12]
 800c08a:	9806      	ldr	r0, [sp, #24]
 800c08c:	aa14      	add	r2, sp, #80	; 0x50
 800c08e:	f7ff fb33 	bl	800b6f8 <__sprint_r>
 800c092:	2800      	cmp	r0, #0
 800c094:	d0f5      	beq.n	800c082 <_vfiprintf_r+0x922>
 800c096:	e7cc      	b.n	800c032 <_vfiprintf_r+0x8d2>
 800c098:	0027      	movs	r7, r4
 800c09a:	2a00      	cmp	r2, #0
 800c09c:	d100      	bne.n	800c0a0 <_vfiprintf_r+0x940>
 800c09e:	e51b      	b.n	800bad8 <_vfiprintf_r+0x378>
 800c0a0:	2b01      	cmp	r3, #1
 800c0a2:	d100      	bne.n	800c0a6 <_vfiprintf_r+0x946>
 800c0a4:	e6fe      	b.n	800bea4 <_vfiprintf_r+0x744>
 800c0a6:	ae40      	add	r6, sp, #256	; 0x100
 800c0a8:	2b02      	cmp	r3, #2
 800c0aa:	d100      	bne.n	800c0ae <_vfiprintf_r+0x94e>
 800c0ac:	e743      	b.n	800bf36 <_vfiprintf_r+0x7d6>
 800c0ae:	2307      	movs	r3, #7
 800c0b0:	469c      	mov	ip, r3
 800c0b2:	4663      	mov	r3, ip
 800c0b4:	9900      	ldr	r1, [sp, #0]
 800c0b6:	0032      	movs	r2, r6
 800c0b8:	400b      	ands	r3, r1
 800c0ba:	9901      	ldr	r1, [sp, #4]
 800c0bc:	3e01      	subs	r6, #1
 800c0be:	074c      	lsls	r4, r1, #29
 800c0c0:	9900      	ldr	r1, [sp, #0]
 800c0c2:	3330      	adds	r3, #48	; 0x30
 800c0c4:	08c8      	lsrs	r0, r1, #3
 800c0c6:	9901      	ldr	r1, [sp, #4]
 800c0c8:	4304      	orrs	r4, r0
 800c0ca:	08c9      	lsrs	r1, r1, #3
 800c0cc:	9101      	str	r1, [sp, #4]
 800c0ce:	0021      	movs	r1, r4
 800c0d0:	9801      	ldr	r0, [sp, #4]
 800c0d2:	7033      	strb	r3, [r6, #0]
 800c0d4:	9400      	str	r4, [sp, #0]
 800c0d6:	4301      	orrs	r1, r0
 800c0d8:	d1eb      	bne.n	800c0b2 <_vfiprintf_r+0x952>
 800c0da:	07f9      	lsls	r1, r7, #31
 800c0dc:	d505      	bpl.n	800c0ea <_vfiprintf_r+0x98a>
 800c0de:	2b30      	cmp	r3, #48	; 0x30
 800c0e0:	d003      	beq.n	800c0ea <_vfiprintf_r+0x98a>
 800c0e2:	2330      	movs	r3, #48	; 0x30
 800c0e4:	3e01      	subs	r6, #1
 800c0e6:	7033      	strb	r3, [r6, #0]
 800c0e8:	1e96      	subs	r6, r2, #2
 800c0ea:	9b05      	ldr	r3, [sp, #20]
 800c0ec:	003c      	movs	r4, r7
 800c0ee:	930b      	str	r3, [sp, #44]	; 0x2c
 800c0f0:	ab40      	add	r3, sp, #256	; 0x100
 800c0f2:	1b9b      	subs	r3, r3, r6
 800c0f4:	9305      	str	r3, [sp, #20]
 800c0f6:	e575      	b.n	800bbe4 <_vfiprintf_r+0x484>
 800c0f8:	0800e899 	.word	0x0800e899

0800c0fc <__sbprintf>:
 800c0fc:	b5f0      	push	{r4, r5, r6, r7, lr}
 800c0fe:	0015      	movs	r5, r2
 800c100:	2202      	movs	r2, #2
 800c102:	4c1e      	ldr	r4, [pc, #120]	; (800c17c <__sbprintf+0x80>)
 800c104:	001f      	movs	r7, r3
 800c106:	898b      	ldrh	r3, [r1, #12]
 800c108:	44a5      	add	sp, r4
 800c10a:	4393      	bics	r3, r2
 800c10c:	466a      	mov	r2, sp
 800c10e:	8193      	strh	r3, [r2, #12]
 800c110:	6e4b      	ldr	r3, [r1, #100]	; 0x64
 800c112:	0006      	movs	r6, r0
 800c114:	9319      	str	r3, [sp, #100]	; 0x64
 800c116:	89cb      	ldrh	r3, [r1, #14]
 800c118:	a816      	add	r0, sp, #88	; 0x58
 800c11a:	81d3      	strh	r3, [r2, #14]
 800c11c:	69cb      	ldr	r3, [r1, #28]
 800c11e:	000c      	movs	r4, r1
 800c120:	9307      	str	r3, [sp, #28]
 800c122:	6a4b      	ldr	r3, [r1, #36]	; 0x24
 800c124:	9309      	str	r3, [sp, #36]	; 0x24
 800c126:	ab1a      	add	r3, sp, #104	; 0x68
 800c128:	9300      	str	r3, [sp, #0]
 800c12a:	9304      	str	r3, [sp, #16]
 800c12c:	2380      	movs	r3, #128	; 0x80
 800c12e:	00db      	lsls	r3, r3, #3
 800c130:	9302      	str	r3, [sp, #8]
 800c132:	9305      	str	r3, [sp, #20]
 800c134:	2300      	movs	r3, #0
 800c136:	9306      	str	r3, [sp, #24]
 800c138:	f7fc f880 	bl	800823c <__retarget_lock_init_recursive>
 800c13c:	002a      	movs	r2, r5
 800c13e:	003b      	movs	r3, r7
 800c140:	4669      	mov	r1, sp
 800c142:	0030      	movs	r0, r6
 800c144:	f7ff fb0c 	bl	800b760 <_vfiprintf_r>
 800c148:	1e05      	subs	r5, r0, #0
 800c14a:	db07      	blt.n	800c15c <__sbprintf+0x60>
 800c14c:	4669      	mov	r1, sp
 800c14e:	0030      	movs	r0, r6
 800c150:	f7fe fa62 	bl	800a618 <_fflush_r>
 800c154:	2800      	cmp	r0, #0
 800c156:	d001      	beq.n	800c15c <__sbprintf+0x60>
 800c158:	2501      	movs	r5, #1
 800c15a:	426d      	negs	r5, r5
 800c15c:	466b      	mov	r3, sp
 800c15e:	899a      	ldrh	r2, [r3, #12]
 800c160:	2340      	movs	r3, #64	; 0x40
 800c162:	421a      	tst	r2, r3
 800c164:	d002      	beq.n	800c16c <__sbprintf+0x70>
 800c166:	89a2      	ldrh	r2, [r4, #12]
 800c168:	4313      	orrs	r3, r2
 800c16a:	81a3      	strh	r3, [r4, #12]
 800c16c:	9816      	ldr	r0, [sp, #88]	; 0x58
 800c16e:	f7fc f866 	bl	800823e <__retarget_lock_close_recursive>
 800c172:	0028      	movs	r0, r5
 800c174:	4b02      	ldr	r3, [pc, #8]	; (800c180 <__sbprintf+0x84>)
 800c176:	449d      	add	sp, r3
 800c178:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800c17a:	46c0      	nop			; (mov r8, r8)
 800c17c:	fffffb94 	.word	0xfffffb94
 800c180:	0000046c 	.word	0x0000046c

0800c184 <__sfvwrite_r>:
 800c184:	b5f0      	push	{r4, r5, r6, r7, lr}
 800c186:	6893      	ldr	r3, [r2, #8]
 800c188:	b087      	sub	sp, #28
 800c18a:	000c      	movs	r4, r1
 800c18c:	9002      	str	r0, [sp, #8]
 800c18e:	9204      	str	r2, [sp, #16]
 800c190:	2b00      	cmp	r3, #0
 800c192:	d102      	bne.n	800c19a <__sfvwrite_r+0x16>
 800c194:	2000      	movs	r0, #0
 800c196:	b007      	add	sp, #28
 800c198:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800c19a:	898b      	ldrh	r3, [r1, #12]
 800c19c:	071b      	lsls	r3, r3, #28
 800c19e:	d557      	bpl.n	800c250 <__sfvwrite_r+0xcc>
 800c1a0:	690b      	ldr	r3, [r1, #16]
 800c1a2:	2b00      	cmp	r3, #0
 800c1a4:	d054      	beq.n	800c250 <__sfvwrite_r+0xcc>
 800c1a6:	9b04      	ldr	r3, [sp, #16]
 800c1a8:	2202      	movs	r2, #2
 800c1aa:	681b      	ldr	r3, [r3, #0]
 800c1ac:	9301      	str	r3, [sp, #4]
 800c1ae:	89a3      	ldrh	r3, [r4, #12]
 800c1b0:	001f      	movs	r7, r3
 800c1b2:	4017      	ands	r7, r2
 800c1b4:	4213      	tst	r3, r2
 800c1b6:	d171      	bne.n	800c29c <__sfvwrite_r+0x118>
 800c1b8:	2201      	movs	r2, #1
 800c1ba:	2101      	movs	r1, #1
 800c1bc:	401a      	ands	r2, r3
 800c1be:	420b      	tst	r3, r1
 800c1c0:	d100      	bne.n	800c1c4 <__sfvwrite_r+0x40>
 800c1c2:	e0a5      	b.n	800c310 <__sfvwrite_r+0x18c>
 800c1c4:	0038      	movs	r0, r7
 800c1c6:	003e      	movs	r6, r7
 800c1c8:	9703      	str	r7, [sp, #12]
 800c1ca:	9b03      	ldr	r3, [sp, #12]
 800c1cc:	2b00      	cmp	r3, #0
 800c1ce:	d100      	bne.n	800c1d2 <__sfvwrite_r+0x4e>
 800c1d0:	e10b      	b.n	800c3ea <__sfvwrite_r+0x266>
 800c1d2:	2800      	cmp	r0, #0
 800c1d4:	d10a      	bne.n	800c1ec <__sfvwrite_r+0x68>
 800c1d6:	001a      	movs	r2, r3
 800c1d8:	210a      	movs	r1, #10
 800c1da:	0030      	movs	r0, r6
 800c1dc:	f7fe fa8b 	bl	800a6f6 <memchr>
 800c1e0:	9b03      	ldr	r3, [sp, #12]
 800c1e2:	1c5f      	adds	r7, r3, #1
 800c1e4:	2800      	cmp	r0, #0
 800c1e6:	d001      	beq.n	800c1ec <__sfvwrite_r+0x68>
 800c1e8:	3001      	adds	r0, #1
 800c1ea:	1b87      	subs	r7, r0, r6
 800c1ec:	9b03      	ldr	r3, [sp, #12]
 800c1ee:	9705      	str	r7, [sp, #20]
 800c1f0:	429f      	cmp	r7, r3
 800c1f2:	d900      	bls.n	800c1f6 <__sfvwrite_r+0x72>
 800c1f4:	9305      	str	r3, [sp, #20]
 800c1f6:	6820      	ldr	r0, [r4, #0]
 800c1f8:	6922      	ldr	r2, [r4, #16]
 800c1fa:	68a5      	ldr	r5, [r4, #8]
 800c1fc:	6963      	ldr	r3, [r4, #20]
 800c1fe:	4290      	cmp	r0, r2
 800c200:	d800      	bhi.n	800c204 <__sfvwrite_r+0x80>
 800c202:	e0fb      	b.n	800c3fc <__sfvwrite_r+0x278>
 800c204:	9a05      	ldr	r2, [sp, #20]
 800c206:	18ed      	adds	r5, r5, r3
 800c208:	42aa      	cmp	r2, r5
 800c20a:	dc00      	bgt.n	800c20e <__sfvwrite_r+0x8a>
 800c20c:	e0f6      	b.n	800c3fc <__sfvwrite_r+0x278>
 800c20e:	0031      	movs	r1, r6
 800c210:	002a      	movs	r2, r5
 800c212:	f000 f9e0 	bl	800c5d6 <memmove>
 800c216:	6823      	ldr	r3, [r4, #0]
 800c218:	0021      	movs	r1, r4
 800c21a:	195b      	adds	r3, r3, r5
 800c21c:	9802      	ldr	r0, [sp, #8]
 800c21e:	6023      	str	r3, [r4, #0]
 800c220:	f7fe f9fa 	bl	800a618 <_fflush_r>
 800c224:	2800      	cmp	r0, #0
 800c226:	d16e      	bne.n	800c306 <__sfvwrite_r+0x182>
 800c228:	2001      	movs	r0, #1
 800c22a:	1b7f      	subs	r7, r7, r5
 800c22c:	d105      	bne.n	800c23a <__sfvwrite_r+0xb6>
 800c22e:	0021      	movs	r1, r4
 800c230:	9802      	ldr	r0, [sp, #8]
 800c232:	f7fe f9f1 	bl	800a618 <_fflush_r>
 800c236:	2800      	cmp	r0, #0
 800c238:	d165      	bne.n	800c306 <__sfvwrite_r+0x182>
 800c23a:	9b03      	ldr	r3, [sp, #12]
 800c23c:	9a04      	ldr	r2, [sp, #16]
 800c23e:	1b5b      	subs	r3, r3, r5
 800c240:	9303      	str	r3, [sp, #12]
 800c242:	9b04      	ldr	r3, [sp, #16]
 800c244:	1976      	adds	r6, r6, r5
 800c246:	689b      	ldr	r3, [r3, #8]
 800c248:	1b5b      	subs	r3, r3, r5
 800c24a:	6093      	str	r3, [r2, #8]
 800c24c:	d1bd      	bne.n	800c1ca <__sfvwrite_r+0x46>
 800c24e:	e7a1      	b.n	800c194 <__sfvwrite_r+0x10>
 800c250:	0021      	movs	r1, r4
 800c252:	9802      	ldr	r0, [sp, #8]
 800c254:	f000 f8f4 	bl	800c440 <__swsetup_r>
 800c258:	2800      	cmp	r0, #0
 800c25a:	d0a4      	beq.n	800c1a6 <__sfvwrite_r+0x22>
 800c25c:	2001      	movs	r0, #1
 800c25e:	4240      	negs	r0, r0
 800c260:	e799      	b.n	800c196 <__sfvwrite_r+0x12>
 800c262:	9b01      	ldr	r3, [sp, #4]
 800c264:	681e      	ldr	r6, [r3, #0]
 800c266:	685d      	ldr	r5, [r3, #4]
 800c268:	3308      	adds	r3, #8
 800c26a:	9301      	str	r3, [sp, #4]
 800c26c:	6a67      	ldr	r7, [r4, #36]	; 0x24
 800c26e:	69e1      	ldr	r1, [r4, #28]
 800c270:	2d00      	cmp	r5, #0
 800c272:	d0f6      	beq.n	800c262 <__sfvwrite_r+0xde>
 800c274:	4a6e      	ldr	r2, [pc, #440]	; (800c430 <__sfvwrite_r+0x2ac>)
 800c276:	002b      	movs	r3, r5
 800c278:	4295      	cmp	r5, r2
 800c27a:	d900      	bls.n	800c27e <__sfvwrite_r+0xfa>
 800c27c:	0013      	movs	r3, r2
 800c27e:	0032      	movs	r2, r6
 800c280:	9802      	ldr	r0, [sp, #8]
 800c282:	47b8      	blx	r7
 800c284:	2800      	cmp	r0, #0
 800c286:	dd3e      	ble.n	800c306 <__sfvwrite_r+0x182>
 800c288:	9b04      	ldr	r3, [sp, #16]
 800c28a:	9a04      	ldr	r2, [sp, #16]
 800c28c:	689b      	ldr	r3, [r3, #8]
 800c28e:	1836      	adds	r6, r6, r0
 800c290:	1a1b      	subs	r3, r3, r0
 800c292:	1a2d      	subs	r5, r5, r0
 800c294:	6093      	str	r3, [r2, #8]
 800c296:	2b00      	cmp	r3, #0
 800c298:	d1e8      	bne.n	800c26c <__sfvwrite_r+0xe8>
 800c29a:	e77b      	b.n	800c194 <__sfvwrite_r+0x10>
 800c29c:	2600      	movs	r6, #0
 800c29e:	0035      	movs	r5, r6
 800c2a0:	e7e4      	b.n	800c26c <__sfvwrite_r+0xe8>
 800c2a2:	9b01      	ldr	r3, [sp, #4]
 800c2a4:	681b      	ldr	r3, [r3, #0]
 800c2a6:	9303      	str	r3, [sp, #12]
 800c2a8:	9b01      	ldr	r3, [sp, #4]
 800c2aa:	685d      	ldr	r5, [r3, #4]
 800c2ac:	3308      	adds	r3, #8
 800c2ae:	9301      	str	r3, [sp, #4]
 800c2b0:	220c      	movs	r2, #12
 800c2b2:	5ea3      	ldrsh	r3, [r4, r2]
 800c2b4:	6820      	ldr	r0, [r4, #0]
 800c2b6:	68a6      	ldr	r6, [r4, #8]
 800c2b8:	2d00      	cmp	r5, #0
 800c2ba:	d0f2      	beq.n	800c2a2 <__sfvwrite_r+0x11e>
 800c2bc:	2180      	movs	r1, #128	; 0x80
 800c2be:	0089      	lsls	r1, r1, #2
 800c2c0:	b29a      	uxth	r2, r3
 800c2c2:	420b      	tst	r3, r1
 800c2c4:	d062      	beq.n	800c38c <__sfvwrite_r+0x208>
 800c2c6:	42ae      	cmp	r6, r5
 800c2c8:	d837      	bhi.n	800c33a <__sfvwrite_r+0x1b6>
 800c2ca:	2390      	movs	r3, #144	; 0x90
 800c2cc:	00db      	lsls	r3, r3, #3
 800c2ce:	421a      	tst	r2, r3
 800c2d0:	d033      	beq.n	800c33a <__sfvwrite_r+0x1b6>
 800c2d2:	6921      	ldr	r1, [r4, #16]
 800c2d4:	1a43      	subs	r3, r0, r1
 800c2d6:	2003      	movs	r0, #3
 800c2d8:	9305      	str	r3, [sp, #20]
 800c2da:	6963      	ldr	r3, [r4, #20]
 800c2dc:	4343      	muls	r3, r0
 800c2de:	0fdf      	lsrs	r7, r3, #31
 800c2e0:	18ff      	adds	r7, r7, r3
 800c2e2:	9b05      	ldr	r3, [sp, #20]
 800c2e4:	107f      	asrs	r7, r7, #1
 800c2e6:	3301      	adds	r3, #1
 800c2e8:	195b      	adds	r3, r3, r5
 800c2ea:	42bb      	cmp	r3, r7
 800c2ec:	d900      	bls.n	800c2f0 <__sfvwrite_r+0x16c>
 800c2ee:	001f      	movs	r7, r3
 800c2f0:	0552      	lsls	r2, r2, #21
 800c2f2:	d53c      	bpl.n	800c36e <__sfvwrite_r+0x1ea>
 800c2f4:	0039      	movs	r1, r7
 800c2f6:	9802      	ldr	r0, [sp, #8]
 800c2f8:	f7fc f8c8 	bl	800848c <_malloc_r>
 800c2fc:	1e06      	subs	r6, r0, #0
 800c2fe:	d10a      	bne.n	800c316 <__sfvwrite_r+0x192>
 800c300:	230c      	movs	r3, #12
 800c302:	9a02      	ldr	r2, [sp, #8]
 800c304:	6013      	str	r3, [r2, #0]
 800c306:	2340      	movs	r3, #64	; 0x40
 800c308:	89a2      	ldrh	r2, [r4, #12]
 800c30a:	4313      	orrs	r3, r2
 800c30c:	81a3      	strh	r3, [r4, #12]
 800c30e:	e7a5      	b.n	800c25c <__sfvwrite_r+0xd8>
 800c310:	0015      	movs	r5, r2
 800c312:	9203      	str	r2, [sp, #12]
 800c314:	e7cc      	b.n	800c2b0 <__sfvwrite_r+0x12c>
 800c316:	9a05      	ldr	r2, [sp, #20]
 800c318:	6921      	ldr	r1, [r4, #16]
 800c31a:	f7fb ff93 	bl	8008244 <memcpy>
 800c31e:	89a2      	ldrh	r2, [r4, #12]
 800c320:	4b44      	ldr	r3, [pc, #272]	; (800c434 <__sfvwrite_r+0x2b0>)
 800c322:	401a      	ands	r2, r3
 800c324:	2380      	movs	r3, #128	; 0x80
 800c326:	4313      	orrs	r3, r2
 800c328:	81a3      	strh	r3, [r4, #12]
 800c32a:	9b05      	ldr	r3, [sp, #20]
 800c32c:	6126      	str	r6, [r4, #16]
 800c32e:	18f6      	adds	r6, r6, r3
 800c330:	6026      	str	r6, [r4, #0]
 800c332:	002e      	movs	r6, r5
 800c334:	6167      	str	r7, [r4, #20]
 800c336:	1aff      	subs	r7, r7, r3
 800c338:	60a7      	str	r7, [r4, #8]
 800c33a:	002f      	movs	r7, r5
 800c33c:	42ae      	cmp	r6, r5
 800c33e:	d900      	bls.n	800c342 <__sfvwrite_r+0x1be>
 800c340:	002e      	movs	r6, r5
 800c342:	0032      	movs	r2, r6
 800c344:	9903      	ldr	r1, [sp, #12]
 800c346:	6820      	ldr	r0, [r4, #0]
 800c348:	f000 f945 	bl	800c5d6 <memmove>
 800c34c:	68a3      	ldr	r3, [r4, #8]
 800c34e:	1b9b      	subs	r3, r3, r6
 800c350:	60a3      	str	r3, [r4, #8]
 800c352:	6823      	ldr	r3, [r4, #0]
 800c354:	199b      	adds	r3, r3, r6
 800c356:	6023      	str	r3, [r4, #0]
 800c358:	9b03      	ldr	r3, [sp, #12]
 800c35a:	9a04      	ldr	r2, [sp, #16]
 800c35c:	19db      	adds	r3, r3, r7
 800c35e:	9303      	str	r3, [sp, #12]
 800c360:	9b04      	ldr	r3, [sp, #16]
 800c362:	1bed      	subs	r5, r5, r7
 800c364:	689b      	ldr	r3, [r3, #8]
 800c366:	1bdb      	subs	r3, r3, r7
 800c368:	6093      	str	r3, [r2, #8]
 800c36a:	d1a1      	bne.n	800c2b0 <__sfvwrite_r+0x12c>
 800c36c:	e712      	b.n	800c194 <__sfvwrite_r+0x10>
 800c36e:	003a      	movs	r2, r7
 800c370:	9802      	ldr	r0, [sp, #8]
 800c372:	f000 f94b 	bl	800c60c <_realloc_r>
 800c376:	1e06      	subs	r6, r0, #0
 800c378:	d1d7      	bne.n	800c32a <__sfvwrite_r+0x1a6>
 800c37a:	6921      	ldr	r1, [r4, #16]
 800c37c:	9802      	ldr	r0, [sp, #8]
 800c37e:	f7fb ffd3 	bl	8008328 <_free_r>
 800c382:	2280      	movs	r2, #128	; 0x80
 800c384:	89a3      	ldrh	r3, [r4, #12]
 800c386:	4393      	bics	r3, r2
 800c388:	81a3      	strh	r3, [r4, #12]
 800c38a:	e7b9      	b.n	800c300 <__sfvwrite_r+0x17c>
 800c38c:	6923      	ldr	r3, [r4, #16]
 800c38e:	4283      	cmp	r3, r0
 800c390:	d302      	bcc.n	800c398 <__sfvwrite_r+0x214>
 800c392:	6967      	ldr	r7, [r4, #20]
 800c394:	42af      	cmp	r7, r5
 800c396:	d916      	bls.n	800c3c6 <__sfvwrite_r+0x242>
 800c398:	42ae      	cmp	r6, r5
 800c39a:	d900      	bls.n	800c39e <__sfvwrite_r+0x21a>
 800c39c:	002e      	movs	r6, r5
 800c39e:	0032      	movs	r2, r6
 800c3a0:	9903      	ldr	r1, [sp, #12]
 800c3a2:	f000 f918 	bl	800c5d6 <memmove>
 800c3a6:	68a3      	ldr	r3, [r4, #8]
 800c3a8:	6822      	ldr	r2, [r4, #0]
 800c3aa:	1b9b      	subs	r3, r3, r6
 800c3ac:	1992      	adds	r2, r2, r6
 800c3ae:	0037      	movs	r7, r6
 800c3b0:	60a3      	str	r3, [r4, #8]
 800c3b2:	6022      	str	r2, [r4, #0]
 800c3b4:	2b00      	cmp	r3, #0
 800c3b6:	d1cf      	bne.n	800c358 <__sfvwrite_r+0x1d4>
 800c3b8:	0021      	movs	r1, r4
 800c3ba:	9802      	ldr	r0, [sp, #8]
 800c3bc:	f7fe f92c 	bl	800a618 <_fflush_r>
 800c3c0:	2800      	cmp	r0, #0
 800c3c2:	d0c9      	beq.n	800c358 <__sfvwrite_r+0x1d4>
 800c3c4:	e79f      	b.n	800c306 <__sfvwrite_r+0x182>
 800c3c6:	4b1c      	ldr	r3, [pc, #112]	; (800c438 <__sfvwrite_r+0x2b4>)
 800c3c8:	0028      	movs	r0, r5
 800c3ca:	429d      	cmp	r5, r3
 800c3cc:	d900      	bls.n	800c3d0 <__sfvwrite_r+0x24c>
 800c3ce:	481b      	ldr	r0, [pc, #108]	; (800c43c <__sfvwrite_r+0x2b8>)
 800c3d0:	0039      	movs	r1, r7
 800c3d2:	f7f3 ff3d 	bl	8000250 <__divsi3>
 800c3d6:	003b      	movs	r3, r7
 800c3d8:	6a66      	ldr	r6, [r4, #36]	; 0x24
 800c3da:	4343      	muls	r3, r0
 800c3dc:	9a03      	ldr	r2, [sp, #12]
 800c3de:	69e1      	ldr	r1, [r4, #28]
 800c3e0:	9802      	ldr	r0, [sp, #8]
 800c3e2:	47b0      	blx	r6
 800c3e4:	1e07      	subs	r7, r0, #0
 800c3e6:	dcb7      	bgt.n	800c358 <__sfvwrite_r+0x1d4>
 800c3e8:	e78d      	b.n	800c306 <__sfvwrite_r+0x182>
 800c3ea:	9b01      	ldr	r3, [sp, #4]
 800c3ec:	2000      	movs	r0, #0
 800c3ee:	681e      	ldr	r6, [r3, #0]
 800c3f0:	685b      	ldr	r3, [r3, #4]
 800c3f2:	9303      	str	r3, [sp, #12]
 800c3f4:	9b01      	ldr	r3, [sp, #4]
 800c3f6:	3308      	adds	r3, #8
 800c3f8:	9301      	str	r3, [sp, #4]
 800c3fa:	e6e6      	b.n	800c1ca <__sfvwrite_r+0x46>
 800c3fc:	9a05      	ldr	r2, [sp, #20]
 800c3fe:	4293      	cmp	r3, r2
 800c400:	dc08      	bgt.n	800c414 <__sfvwrite_r+0x290>
 800c402:	6a65      	ldr	r5, [r4, #36]	; 0x24
 800c404:	0032      	movs	r2, r6
 800c406:	69e1      	ldr	r1, [r4, #28]
 800c408:	9802      	ldr	r0, [sp, #8]
 800c40a:	47a8      	blx	r5
 800c40c:	1e05      	subs	r5, r0, #0
 800c40e:	dd00      	ble.n	800c412 <__sfvwrite_r+0x28e>
 800c410:	e70a      	b.n	800c228 <__sfvwrite_r+0xa4>
 800c412:	e778      	b.n	800c306 <__sfvwrite_r+0x182>
 800c414:	9a05      	ldr	r2, [sp, #20]
 800c416:	0031      	movs	r1, r6
 800c418:	f000 f8dd 	bl	800c5d6 <memmove>
 800c41c:	9a05      	ldr	r2, [sp, #20]
 800c41e:	68a3      	ldr	r3, [r4, #8]
 800c420:	0015      	movs	r5, r2
 800c422:	1a9b      	subs	r3, r3, r2
 800c424:	60a3      	str	r3, [r4, #8]
 800c426:	6823      	ldr	r3, [r4, #0]
 800c428:	189b      	adds	r3, r3, r2
 800c42a:	6023      	str	r3, [r4, #0]
 800c42c:	e6fc      	b.n	800c228 <__sfvwrite_r+0xa4>
 800c42e:	46c0      	nop			; (mov r8, r8)
 800c430:	7ffffc00 	.word	0x7ffffc00
 800c434:	fffffb7f 	.word	0xfffffb7f
 800c438:	7ffffffe 	.word	0x7ffffffe
 800c43c:	7fffffff 	.word	0x7fffffff

0800c440 <__swsetup_r>:
 800c440:	4b30      	ldr	r3, [pc, #192]	; (800c504 <__swsetup_r+0xc4>)
 800c442:	b570      	push	{r4, r5, r6, lr}
 800c444:	0005      	movs	r5, r0
 800c446:	6818      	ldr	r0, [r3, #0]
 800c448:	000c      	movs	r4, r1
 800c44a:	2800      	cmp	r0, #0
 800c44c:	d004      	beq.n	800c458 <__swsetup_r+0x18>
 800c44e:	6b43      	ldr	r3, [r0, #52]	; 0x34
 800c450:	2b00      	cmp	r3, #0
 800c452:	d101      	bne.n	800c458 <__swsetup_r+0x18>
 800c454:	f7fb fd96 	bl	8007f84 <__sinit>
 800c458:	230c      	movs	r3, #12
 800c45a:	5ee2      	ldrsh	r2, [r4, r3]
 800c45c:	b293      	uxth	r3, r2
 800c45e:	0711      	lsls	r1, r2, #28
 800c460:	d423      	bmi.n	800c4aa <__swsetup_r+0x6a>
 800c462:	06d9      	lsls	r1, r3, #27
 800c464:	d407      	bmi.n	800c476 <__swsetup_r+0x36>
 800c466:	2309      	movs	r3, #9
 800c468:	2001      	movs	r0, #1
 800c46a:	602b      	str	r3, [r5, #0]
 800c46c:	3337      	adds	r3, #55	; 0x37
 800c46e:	4313      	orrs	r3, r2
 800c470:	81a3      	strh	r3, [r4, #12]
 800c472:	4240      	negs	r0, r0
 800c474:	bd70      	pop	{r4, r5, r6, pc}
 800c476:	075b      	lsls	r3, r3, #29
 800c478:	d513      	bpl.n	800c4a2 <__swsetup_r+0x62>
 800c47a:	6b21      	ldr	r1, [r4, #48]	; 0x30
 800c47c:	2900      	cmp	r1, #0
 800c47e:	d008      	beq.n	800c492 <__swsetup_r+0x52>
 800c480:	0023      	movs	r3, r4
 800c482:	3340      	adds	r3, #64	; 0x40
 800c484:	4299      	cmp	r1, r3
 800c486:	d002      	beq.n	800c48e <__swsetup_r+0x4e>
 800c488:	0028      	movs	r0, r5
 800c48a:	f7fb ff4d 	bl	8008328 <_free_r>
 800c48e:	2300      	movs	r3, #0
 800c490:	6323      	str	r3, [r4, #48]	; 0x30
 800c492:	2224      	movs	r2, #36	; 0x24
 800c494:	89a3      	ldrh	r3, [r4, #12]
 800c496:	4393      	bics	r3, r2
 800c498:	81a3      	strh	r3, [r4, #12]
 800c49a:	2300      	movs	r3, #0
 800c49c:	6063      	str	r3, [r4, #4]
 800c49e:	6923      	ldr	r3, [r4, #16]
 800c4a0:	6023      	str	r3, [r4, #0]
 800c4a2:	2308      	movs	r3, #8
 800c4a4:	89a2      	ldrh	r2, [r4, #12]
 800c4a6:	4313      	orrs	r3, r2
 800c4a8:	81a3      	strh	r3, [r4, #12]
 800c4aa:	6923      	ldr	r3, [r4, #16]
 800c4ac:	2b00      	cmp	r3, #0
 800c4ae:	d10b      	bne.n	800c4c8 <__swsetup_r+0x88>
 800c4b0:	21a0      	movs	r1, #160	; 0xa0
 800c4b2:	2280      	movs	r2, #128	; 0x80
 800c4b4:	89a3      	ldrh	r3, [r4, #12]
 800c4b6:	0089      	lsls	r1, r1, #2
 800c4b8:	0092      	lsls	r2, r2, #2
 800c4ba:	400b      	ands	r3, r1
 800c4bc:	4293      	cmp	r3, r2
 800c4be:	d003      	beq.n	800c4c8 <__swsetup_r+0x88>
 800c4c0:	0021      	movs	r1, r4
 800c4c2:	0028      	movs	r0, r5
 800c4c4:	f000 fa8e 	bl	800c9e4 <__smakebuf_r>
 800c4c8:	220c      	movs	r2, #12
 800c4ca:	5ea3      	ldrsh	r3, [r4, r2]
 800c4cc:	2001      	movs	r0, #1
 800c4ce:	001a      	movs	r2, r3
 800c4d0:	b299      	uxth	r1, r3
 800c4d2:	4002      	ands	r2, r0
 800c4d4:	4203      	tst	r3, r0
 800c4d6:	d00f      	beq.n	800c4f8 <__swsetup_r+0xb8>
 800c4d8:	2200      	movs	r2, #0
 800c4da:	60a2      	str	r2, [r4, #8]
 800c4dc:	6962      	ldr	r2, [r4, #20]
 800c4de:	4252      	negs	r2, r2
 800c4e0:	61a2      	str	r2, [r4, #24]
 800c4e2:	2000      	movs	r0, #0
 800c4e4:	6922      	ldr	r2, [r4, #16]
 800c4e6:	4282      	cmp	r2, r0
 800c4e8:	d1c4      	bne.n	800c474 <__swsetup_r+0x34>
 800c4ea:	0609      	lsls	r1, r1, #24
 800c4ec:	d5c2      	bpl.n	800c474 <__swsetup_r+0x34>
 800c4ee:	2240      	movs	r2, #64	; 0x40
 800c4f0:	4313      	orrs	r3, r2
 800c4f2:	81a3      	strh	r3, [r4, #12]
 800c4f4:	3801      	subs	r0, #1
 800c4f6:	e7bd      	b.n	800c474 <__swsetup_r+0x34>
 800c4f8:	0788      	lsls	r0, r1, #30
 800c4fa:	d400      	bmi.n	800c4fe <__swsetup_r+0xbe>
 800c4fc:	6962      	ldr	r2, [r4, #20]
 800c4fe:	60a2      	str	r2, [r4, #8]
 800c500:	e7ef      	b.n	800c4e2 <__swsetup_r+0xa2>
 800c502:	46c0      	nop			; (mov r8, r8)
 800c504:	200002a8 	.word	0x200002a8

0800c508 <__fputwc>:
 800c508:	b5f0      	push	{r4, r5, r6, r7, lr}
 800c50a:	b085      	sub	sp, #20
 800c50c:	000e      	movs	r6, r1
 800c50e:	0015      	movs	r5, r2
 800c510:	9001      	str	r0, [sp, #4]
 800c512:	f7fb fe13 	bl	800813c <__locale_mb_cur_max>
 800c516:	0004      	movs	r4, r0
 800c518:	2801      	cmp	r0, #1
 800c51a:	d119      	bne.n	800c550 <__fputwc+0x48>
 800c51c:	1e73      	subs	r3, r6, #1
 800c51e:	2bfe      	cmp	r3, #254	; 0xfe
 800c520:	d816      	bhi.n	800c550 <__fputwc+0x48>
 800c522:	ab02      	add	r3, sp, #8
 800c524:	711e      	strb	r6, [r3, #4]
 800c526:	2700      	movs	r7, #0
 800c528:	42a7      	cmp	r7, r4
 800c52a:	d020      	beq.n	800c56e <__fputwc+0x66>
 800c52c:	ab03      	add	r3, sp, #12
 800c52e:	5dd9      	ldrb	r1, [r3, r7]
 800c530:	68ab      	ldr	r3, [r5, #8]
 800c532:	3b01      	subs	r3, #1
 800c534:	60ab      	str	r3, [r5, #8]
 800c536:	2b00      	cmp	r3, #0
 800c538:	da04      	bge.n	800c544 <__fputwc+0x3c>
 800c53a:	69aa      	ldr	r2, [r5, #24]
 800c53c:	4293      	cmp	r3, r2
 800c53e:	db19      	blt.n	800c574 <__fputwc+0x6c>
 800c540:	290a      	cmp	r1, #10
 800c542:	d017      	beq.n	800c574 <__fputwc+0x6c>
 800c544:	682b      	ldr	r3, [r5, #0]
 800c546:	1c5a      	adds	r2, r3, #1
 800c548:	602a      	str	r2, [r5, #0]
 800c54a:	7019      	strb	r1, [r3, #0]
 800c54c:	3701      	adds	r7, #1
 800c54e:	e7eb      	b.n	800c528 <__fputwc+0x20>
 800c550:	002b      	movs	r3, r5
 800c552:	0032      	movs	r2, r6
 800c554:	9801      	ldr	r0, [sp, #4]
 800c556:	335c      	adds	r3, #92	; 0x5c
 800c558:	a903      	add	r1, sp, #12
 800c55a:	f000 f9fd 	bl	800c958 <_wcrtomb_r>
 800c55e:	0004      	movs	r4, r0
 800c560:	1c43      	adds	r3, r0, #1
 800c562:	d1e0      	bne.n	800c526 <__fputwc+0x1e>
 800c564:	2340      	movs	r3, #64	; 0x40
 800c566:	0006      	movs	r6, r0
 800c568:	89aa      	ldrh	r2, [r5, #12]
 800c56a:	4313      	orrs	r3, r2
 800c56c:	81ab      	strh	r3, [r5, #12]
 800c56e:	0030      	movs	r0, r6
 800c570:	b005      	add	sp, #20
 800c572:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800c574:	002a      	movs	r2, r5
 800c576:	9801      	ldr	r0, [sp, #4]
 800c578:	f000 fa72 	bl	800ca60 <__swbuf_r>
 800c57c:	1c43      	adds	r3, r0, #1
 800c57e:	d1e5      	bne.n	800c54c <__fputwc+0x44>
 800c580:	0006      	movs	r6, r0
 800c582:	e7f4      	b.n	800c56e <__fputwc+0x66>

0800c584 <_fputwc_r>:
 800c584:	6e53      	ldr	r3, [r2, #100]	; 0x64
 800c586:	b570      	push	{r4, r5, r6, lr}
 800c588:	0005      	movs	r5, r0
 800c58a:	000e      	movs	r6, r1
 800c58c:	0014      	movs	r4, r2
 800c58e:	07db      	lsls	r3, r3, #31
 800c590:	d405      	bmi.n	800c59e <_fputwc_r+0x1a>
 800c592:	8993      	ldrh	r3, [r2, #12]
 800c594:	059b      	lsls	r3, r3, #22
 800c596:	d402      	bmi.n	800c59e <_fputwc_r+0x1a>
 800c598:	6d90      	ldr	r0, [r2, #88]	; 0x58
 800c59a:	f7fb fe51 	bl	8008240 <__retarget_lock_acquire_recursive>
 800c59e:	230c      	movs	r3, #12
 800c5a0:	5ee2      	ldrsh	r2, [r4, r3]
 800c5a2:	2380      	movs	r3, #128	; 0x80
 800c5a4:	019b      	lsls	r3, r3, #6
 800c5a6:	421a      	tst	r2, r3
 800c5a8:	d104      	bne.n	800c5b4 <_fputwc_r+0x30>
 800c5aa:	431a      	orrs	r2, r3
 800c5ac:	81a2      	strh	r2, [r4, #12]
 800c5ae:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800c5b0:	4313      	orrs	r3, r2
 800c5b2:	6663      	str	r3, [r4, #100]	; 0x64
 800c5b4:	0028      	movs	r0, r5
 800c5b6:	0022      	movs	r2, r4
 800c5b8:	0031      	movs	r1, r6
 800c5ba:	f7ff ffa5 	bl	800c508 <__fputwc>
 800c5be:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800c5c0:	0005      	movs	r5, r0
 800c5c2:	07db      	lsls	r3, r3, #31
 800c5c4:	d405      	bmi.n	800c5d2 <_fputwc_r+0x4e>
 800c5c6:	89a3      	ldrh	r3, [r4, #12]
 800c5c8:	059b      	lsls	r3, r3, #22
 800c5ca:	d402      	bmi.n	800c5d2 <_fputwc_r+0x4e>
 800c5cc:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800c5ce:	f7fb fe38 	bl	8008242 <__retarget_lock_release_recursive>
 800c5d2:	0028      	movs	r0, r5
 800c5d4:	bd70      	pop	{r4, r5, r6, pc}

0800c5d6 <memmove>:
 800c5d6:	b510      	push	{r4, lr}
 800c5d8:	4288      	cmp	r0, r1
 800c5da:	d902      	bls.n	800c5e2 <memmove+0xc>
 800c5dc:	188b      	adds	r3, r1, r2
 800c5de:	4298      	cmp	r0, r3
 800c5e0:	d303      	bcc.n	800c5ea <memmove+0x14>
 800c5e2:	2300      	movs	r3, #0
 800c5e4:	e007      	b.n	800c5f6 <memmove+0x20>
 800c5e6:	5c8b      	ldrb	r3, [r1, r2]
 800c5e8:	5483      	strb	r3, [r0, r2]
 800c5ea:	3a01      	subs	r2, #1
 800c5ec:	d2fb      	bcs.n	800c5e6 <memmove+0x10>
 800c5ee:	bd10      	pop	{r4, pc}
 800c5f0:	5ccc      	ldrb	r4, [r1, r3]
 800c5f2:	54c4      	strb	r4, [r0, r3]
 800c5f4:	3301      	adds	r3, #1
 800c5f6:	429a      	cmp	r2, r3
 800c5f8:	d1fa      	bne.n	800c5f0 <memmove+0x1a>
 800c5fa:	e7f8      	b.n	800c5ee <memmove+0x18>

0800c5fc <abort>:
 800c5fc:	2006      	movs	r0, #6
 800c5fe:	b510      	push	{r4, lr}
 800c600:	f000 faac 	bl	800cb5c <raise>
 800c604:	2001      	movs	r0, #1
 800c606:	f7f6 fc9f 	bl	8002f48 <_exit>
	...

0800c60c <_realloc_r>:
 800c60c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800c60e:	b087      	sub	sp, #28
 800c610:	1e0c      	subs	r4, r1, #0
 800c612:	9001      	str	r0, [sp, #4]
 800c614:	9205      	str	r2, [sp, #20]
 800c616:	d106      	bne.n	800c626 <_realloc_r+0x1a>
 800c618:	0011      	movs	r1, r2
 800c61a:	f7fb ff37 	bl	800848c <_malloc_r>
 800c61e:	0007      	movs	r7, r0
 800c620:	0038      	movs	r0, r7
 800c622:	b007      	add	sp, #28
 800c624:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800c626:	9801      	ldr	r0, [sp, #4]
 800c628:	f7fc f956 	bl	80088d8 <__malloc_lock>
 800c62c:	0023      	movs	r3, r4
 800c62e:	3b08      	subs	r3, #8
 800c630:	685f      	ldr	r7, [r3, #4]
 800c632:	9304      	str	r3, [sp, #16]
 800c634:	9b05      	ldr	r3, [sp, #20]
 800c636:	330b      	adds	r3, #11
 800c638:	2b16      	cmp	r3, #22
 800c63a:	d908      	bls.n	800c64e <_realloc_r+0x42>
 800c63c:	2207      	movs	r2, #7
 800c63e:	4393      	bics	r3, r2
 800c640:	9300      	str	r3, [sp, #0]
 800c642:	d506      	bpl.n	800c652 <_realloc_r+0x46>
 800c644:	230c      	movs	r3, #12
 800c646:	9a01      	ldr	r2, [sp, #4]
 800c648:	2700      	movs	r7, #0
 800c64a:	6013      	str	r3, [r2, #0]
 800c64c:	e7e8      	b.n	800c620 <_realloc_r+0x14>
 800c64e:	2310      	movs	r3, #16
 800c650:	9300      	str	r3, [sp, #0]
 800c652:	9b00      	ldr	r3, [sp, #0]
 800c654:	9a05      	ldr	r2, [sp, #20]
 800c656:	4293      	cmp	r3, r2
 800c658:	d3f4      	bcc.n	800c644 <_realloc_r+0x38>
 800c65a:	9b04      	ldr	r3, [sp, #16]
 800c65c:	003a      	movs	r2, r7
 800c65e:	9302      	str	r3, [sp, #8]
 800c660:	2303      	movs	r3, #3
 800c662:	439a      	bics	r2, r3
 800c664:	9b00      	ldr	r3, [sp, #0]
 800c666:	9203      	str	r2, [sp, #12]
 800c668:	4293      	cmp	r3, r2
 800c66a:	dc00      	bgt.n	800c66e <_realloc_r+0x62>
 800c66c:	e169      	b.n	800c942 <_realloc_r+0x336>
 800c66e:	9b04      	ldr	r3, [sp, #16]
 800c670:	48b8      	ldr	r0, [pc, #736]	; (800c954 <_realloc_r+0x348>)
 800c672:	189b      	adds	r3, r3, r2
 800c674:	6882      	ldr	r2, [r0, #8]
 800c676:	4694      	mov	ip, r2
 800c678:	685a      	ldr	r2, [r3, #4]
 800c67a:	459c      	cmp	ip, r3
 800c67c:	d006      	beq.n	800c68c <_realloc_r+0x80>
 800c67e:	2501      	movs	r5, #1
 800c680:	0011      	movs	r1, r2
 800c682:	43a9      	bics	r1, r5
 800c684:	1859      	adds	r1, r3, r1
 800c686:	6849      	ldr	r1, [r1, #4]
 800c688:	4229      	tst	r1, r5
 800c68a:	d144      	bne.n	800c716 <_realloc_r+0x10a>
 800c68c:	2103      	movs	r1, #3
 800c68e:	438a      	bics	r2, r1
 800c690:	9903      	ldr	r1, [sp, #12]
 800c692:	188e      	adds	r6, r1, r2
 800c694:	9900      	ldr	r1, [sp, #0]
 800c696:	459c      	cmp	ip, r3
 800c698:	d117      	bne.n	800c6ca <_realloc_r+0xbe>
 800c69a:	3110      	adds	r1, #16
 800c69c:	42b1      	cmp	r1, r6
 800c69e:	dc3c      	bgt.n	800c71a <_realloc_r+0x10e>
 800c6a0:	9a00      	ldr	r2, [sp, #0]
 800c6a2:	2101      	movs	r1, #1
 800c6a4:	4694      	mov	ip, r2
 800c6a6:	1ab6      	subs	r6, r6, r2
 800c6a8:	0022      	movs	r2, r4
 800c6aa:	9b04      	ldr	r3, [sp, #16]
 800c6ac:	430e      	orrs	r6, r1
 800c6ae:	4463      	add	r3, ip
 800c6b0:	6083      	str	r3, [r0, #8]
 800c6b2:	3a08      	subs	r2, #8
 800c6b4:	605e      	str	r6, [r3, #4]
 800c6b6:	6853      	ldr	r3, [r2, #4]
 800c6b8:	9801      	ldr	r0, [sp, #4]
 800c6ba:	400b      	ands	r3, r1
 800c6bc:	4661      	mov	r1, ip
 800c6be:	430b      	orrs	r3, r1
 800c6c0:	6053      	str	r3, [r2, #4]
 800c6c2:	f7fc f911 	bl	80088e8 <__malloc_unlock>
 800c6c6:	0027      	movs	r7, r4
 800c6c8:	e7aa      	b.n	800c620 <_realloc_r+0x14>
 800c6ca:	42b1      	cmp	r1, r6
 800c6cc:	dc25      	bgt.n	800c71a <_realloc_r+0x10e>
 800c6ce:	68da      	ldr	r2, [r3, #12]
 800c6d0:	689b      	ldr	r3, [r3, #8]
 800c6d2:	60da      	str	r2, [r3, #12]
 800c6d4:	6093      	str	r3, [r2, #8]
 800c6d6:	9b00      	ldr	r3, [sp, #0]
 800c6d8:	9a02      	ldr	r2, [sp, #8]
 800c6da:	1af4      	subs	r4, r6, r3
 800c6dc:	9b02      	ldr	r3, [sp, #8]
 800c6de:	1992      	adds	r2, r2, r6
 800c6e0:	6858      	ldr	r0, [r3, #4]
 800c6e2:	2301      	movs	r3, #1
 800c6e4:	4018      	ands	r0, r3
 800c6e6:	2c0f      	cmp	r4, #15
 800c6e8:	d800      	bhi.n	800c6ec <_realloc_r+0xe0>
 800c6ea:	e12c      	b.n	800c946 <_realloc_r+0x33a>
 800c6ec:	9d00      	ldr	r5, [sp, #0]
 800c6ee:	9902      	ldr	r1, [sp, #8]
 800c6f0:	4328      	orrs	r0, r5
 800c6f2:	1949      	adds	r1, r1, r5
 800c6f4:	9d02      	ldr	r5, [sp, #8]
 800c6f6:	431c      	orrs	r4, r3
 800c6f8:	6068      	str	r0, [r5, #4]
 800c6fa:	604c      	str	r4, [r1, #4]
 800c6fc:	6850      	ldr	r0, [r2, #4]
 800c6fe:	3108      	adds	r1, #8
 800c700:	4303      	orrs	r3, r0
 800c702:	6053      	str	r3, [r2, #4]
 800c704:	9801      	ldr	r0, [sp, #4]
 800c706:	f7fb fe0f 	bl	8008328 <_free_r>
 800c70a:	9801      	ldr	r0, [sp, #4]
 800c70c:	f7fc f8ec 	bl	80088e8 <__malloc_unlock>
 800c710:	9f02      	ldr	r7, [sp, #8]
 800c712:	3708      	adds	r7, #8
 800c714:	e784      	b.n	800c620 <_realloc_r+0x14>
 800c716:	2200      	movs	r2, #0
 800c718:	0013      	movs	r3, r2
 800c71a:	07ff      	lsls	r7, r7, #31
 800c71c:	d500      	bpl.n	800c720 <_realloc_r+0x114>
 800c71e:	e0c6      	b.n	800c8ae <_realloc_r+0x2a2>
 800c720:	0021      	movs	r1, r4
 800c722:	2003      	movs	r0, #3
 800c724:	3908      	subs	r1, #8
 800c726:	680d      	ldr	r5, [r1, #0]
 800c728:	9904      	ldr	r1, [sp, #16]
 800c72a:	1b4d      	subs	r5, r1, r5
 800c72c:	6869      	ldr	r1, [r5, #4]
 800c72e:	4381      	bics	r1, r0
 800c730:	9803      	ldr	r0, [sp, #12]
 800c732:	180f      	adds	r7, r1, r0
 800c734:	2b00      	cmp	r3, #0
 800c736:	d100      	bne.n	800c73a <_realloc_r+0x12e>
 800c738:	e084      	b.n	800c844 <_realloc_r+0x238>
 800c73a:	19d6      	adds	r6, r2, r7
 800c73c:	459c      	cmp	ip, r3
 800c73e:	d148      	bne.n	800c7d2 <_realloc_r+0x1c6>
 800c740:	9b00      	ldr	r3, [sp, #0]
 800c742:	3310      	adds	r3, #16
 800c744:	42b3      	cmp	r3, r6
 800c746:	dc7d      	bgt.n	800c844 <_realloc_r+0x238>
 800c748:	68aa      	ldr	r2, [r5, #8]
 800c74a:	68eb      	ldr	r3, [r5, #12]
 800c74c:	002f      	movs	r7, r5
 800c74e:	60d3      	str	r3, [r2, #12]
 800c750:	609a      	str	r2, [r3, #8]
 800c752:	0002      	movs	r2, r0
 800c754:	3a04      	subs	r2, #4
 800c756:	3708      	adds	r7, #8
 800c758:	2a24      	cmp	r2, #36	; 0x24
 800c75a:	d835      	bhi.n	800c7c8 <_realloc_r+0x1bc>
 800c75c:	003b      	movs	r3, r7
 800c75e:	2a13      	cmp	r2, #19
 800c760:	d908      	bls.n	800c774 <_realloc_r+0x168>
 800c762:	6823      	ldr	r3, [r4, #0]
 800c764:	60ab      	str	r3, [r5, #8]
 800c766:	6863      	ldr	r3, [r4, #4]
 800c768:	60eb      	str	r3, [r5, #12]
 800c76a:	2a1b      	cmp	r2, #27
 800c76c:	d81a      	bhi.n	800c7a4 <_realloc_r+0x198>
 800c76e:	002b      	movs	r3, r5
 800c770:	3408      	adds	r4, #8
 800c772:	3310      	adds	r3, #16
 800c774:	6822      	ldr	r2, [r4, #0]
 800c776:	601a      	str	r2, [r3, #0]
 800c778:	6862      	ldr	r2, [r4, #4]
 800c77a:	605a      	str	r2, [r3, #4]
 800c77c:	68a2      	ldr	r2, [r4, #8]
 800c77e:	609a      	str	r2, [r3, #8]
 800c780:	9b00      	ldr	r3, [sp, #0]
 800c782:	4a74      	ldr	r2, [pc, #464]	; (800c954 <_realloc_r+0x348>)
 800c784:	18eb      	adds	r3, r5, r3
 800c786:	6093      	str	r3, [r2, #8]
 800c788:	9a00      	ldr	r2, [sp, #0]
 800c78a:	1ab6      	subs	r6, r6, r2
 800c78c:	2201      	movs	r2, #1
 800c78e:	4316      	orrs	r6, r2
 800c790:	605e      	str	r6, [r3, #4]
 800c792:	686b      	ldr	r3, [r5, #4]
 800c794:	4013      	ands	r3, r2
 800c796:	9a00      	ldr	r2, [sp, #0]
 800c798:	4313      	orrs	r3, r2
 800c79a:	606b      	str	r3, [r5, #4]
 800c79c:	9801      	ldr	r0, [sp, #4]
 800c79e:	f7fc f8a3 	bl	80088e8 <__malloc_unlock>
 800c7a2:	e73d      	b.n	800c620 <_realloc_r+0x14>
 800c7a4:	68a3      	ldr	r3, [r4, #8]
 800c7a6:	612b      	str	r3, [r5, #16]
 800c7a8:	68e3      	ldr	r3, [r4, #12]
 800c7aa:	616b      	str	r3, [r5, #20]
 800c7ac:	2a24      	cmp	r2, #36	; 0x24
 800c7ae:	d003      	beq.n	800c7b8 <_realloc_r+0x1ac>
 800c7b0:	002b      	movs	r3, r5
 800c7b2:	3410      	adds	r4, #16
 800c7b4:	3318      	adds	r3, #24
 800c7b6:	e7dd      	b.n	800c774 <_realloc_r+0x168>
 800c7b8:	6923      	ldr	r3, [r4, #16]
 800c7ba:	61ab      	str	r3, [r5, #24]
 800c7bc:	002b      	movs	r3, r5
 800c7be:	6962      	ldr	r2, [r4, #20]
 800c7c0:	3320      	adds	r3, #32
 800c7c2:	61ea      	str	r2, [r5, #28]
 800c7c4:	3418      	adds	r4, #24
 800c7c6:	e7d5      	b.n	800c774 <_realloc_r+0x168>
 800c7c8:	0021      	movs	r1, r4
 800c7ca:	0038      	movs	r0, r7
 800c7cc:	f7ff ff03 	bl	800c5d6 <memmove>
 800c7d0:	e7d6      	b.n	800c780 <_realloc_r+0x174>
 800c7d2:	9a00      	ldr	r2, [sp, #0]
 800c7d4:	42b2      	cmp	r2, r6
 800c7d6:	dc35      	bgt.n	800c844 <_realloc_r+0x238>
 800c7d8:	0028      	movs	r0, r5
 800c7da:	68da      	ldr	r2, [r3, #12]
 800c7dc:	689b      	ldr	r3, [r3, #8]
 800c7de:	3008      	adds	r0, #8
 800c7e0:	60da      	str	r2, [r3, #12]
 800c7e2:	6093      	str	r3, [r2, #8]
 800c7e4:	68aa      	ldr	r2, [r5, #8]
 800c7e6:	68eb      	ldr	r3, [r5, #12]
 800c7e8:	60d3      	str	r3, [r2, #12]
 800c7ea:	609a      	str	r2, [r3, #8]
 800c7ec:	9a03      	ldr	r2, [sp, #12]
 800c7ee:	3a04      	subs	r2, #4
 800c7f0:	2a24      	cmp	r2, #36	; 0x24
 800c7f2:	d823      	bhi.n	800c83c <_realloc_r+0x230>
 800c7f4:	2a13      	cmp	r2, #19
 800c7f6:	d907      	bls.n	800c808 <_realloc_r+0x1fc>
 800c7f8:	6823      	ldr	r3, [r4, #0]
 800c7fa:	60ab      	str	r3, [r5, #8]
 800c7fc:	6863      	ldr	r3, [r4, #4]
 800c7fe:	60eb      	str	r3, [r5, #12]
 800c800:	2a1b      	cmp	r2, #27
 800c802:	d809      	bhi.n	800c818 <_realloc_r+0x20c>
 800c804:	3408      	adds	r4, #8
 800c806:	3008      	adds	r0, #8
 800c808:	6823      	ldr	r3, [r4, #0]
 800c80a:	6003      	str	r3, [r0, #0]
 800c80c:	6863      	ldr	r3, [r4, #4]
 800c80e:	6043      	str	r3, [r0, #4]
 800c810:	68a3      	ldr	r3, [r4, #8]
 800c812:	6083      	str	r3, [r0, #8]
 800c814:	9502      	str	r5, [sp, #8]
 800c816:	e75e      	b.n	800c6d6 <_realloc_r+0xca>
 800c818:	68a3      	ldr	r3, [r4, #8]
 800c81a:	612b      	str	r3, [r5, #16]
 800c81c:	68e3      	ldr	r3, [r4, #12]
 800c81e:	616b      	str	r3, [r5, #20]
 800c820:	2a24      	cmp	r2, #36	; 0x24
 800c822:	d003      	beq.n	800c82c <_realloc_r+0x220>
 800c824:	0028      	movs	r0, r5
 800c826:	3410      	adds	r4, #16
 800c828:	3018      	adds	r0, #24
 800c82a:	e7ed      	b.n	800c808 <_realloc_r+0x1fc>
 800c82c:	0028      	movs	r0, r5
 800c82e:	6923      	ldr	r3, [r4, #16]
 800c830:	3020      	adds	r0, #32
 800c832:	61ab      	str	r3, [r5, #24]
 800c834:	6963      	ldr	r3, [r4, #20]
 800c836:	3418      	adds	r4, #24
 800c838:	61eb      	str	r3, [r5, #28]
 800c83a:	e7e5      	b.n	800c808 <_realloc_r+0x1fc>
 800c83c:	0021      	movs	r1, r4
 800c83e:	f7ff feca 	bl	800c5d6 <memmove>
 800c842:	e7e7      	b.n	800c814 <_realloc_r+0x208>
 800c844:	9b00      	ldr	r3, [sp, #0]
 800c846:	42bb      	cmp	r3, r7
 800c848:	dc31      	bgt.n	800c8ae <_realloc_r+0x2a2>
 800c84a:	0028      	movs	r0, r5
 800c84c:	68aa      	ldr	r2, [r5, #8]
 800c84e:	68eb      	ldr	r3, [r5, #12]
 800c850:	3008      	adds	r0, #8
 800c852:	60d3      	str	r3, [r2, #12]
 800c854:	609a      	str	r2, [r3, #8]
 800c856:	9a03      	ldr	r2, [sp, #12]
 800c858:	3a04      	subs	r2, #4
 800c85a:	2a24      	cmp	r2, #36	; 0x24
 800c85c:	d823      	bhi.n	800c8a6 <_realloc_r+0x29a>
 800c85e:	2a13      	cmp	r2, #19
 800c860:	d907      	bls.n	800c872 <_realloc_r+0x266>
 800c862:	6823      	ldr	r3, [r4, #0]
 800c864:	60ab      	str	r3, [r5, #8]
 800c866:	6863      	ldr	r3, [r4, #4]
 800c868:	60eb      	str	r3, [r5, #12]
 800c86a:	2a1b      	cmp	r2, #27
 800c86c:	d809      	bhi.n	800c882 <_realloc_r+0x276>
 800c86e:	3408      	adds	r4, #8
 800c870:	3008      	adds	r0, #8
 800c872:	6823      	ldr	r3, [r4, #0]
 800c874:	6003      	str	r3, [r0, #0]
 800c876:	6863      	ldr	r3, [r4, #4]
 800c878:	6043      	str	r3, [r0, #4]
 800c87a:	68a3      	ldr	r3, [r4, #8]
 800c87c:	6083      	str	r3, [r0, #8]
 800c87e:	003e      	movs	r6, r7
 800c880:	e7c8      	b.n	800c814 <_realloc_r+0x208>
 800c882:	68a3      	ldr	r3, [r4, #8]
 800c884:	612b      	str	r3, [r5, #16]
 800c886:	68e3      	ldr	r3, [r4, #12]
 800c888:	616b      	str	r3, [r5, #20]
 800c88a:	2a24      	cmp	r2, #36	; 0x24
 800c88c:	d003      	beq.n	800c896 <_realloc_r+0x28a>
 800c88e:	0028      	movs	r0, r5
 800c890:	3410      	adds	r4, #16
 800c892:	3018      	adds	r0, #24
 800c894:	e7ed      	b.n	800c872 <_realloc_r+0x266>
 800c896:	0028      	movs	r0, r5
 800c898:	6923      	ldr	r3, [r4, #16]
 800c89a:	3020      	adds	r0, #32
 800c89c:	61ab      	str	r3, [r5, #24]
 800c89e:	6963      	ldr	r3, [r4, #20]
 800c8a0:	3418      	adds	r4, #24
 800c8a2:	61eb      	str	r3, [r5, #28]
 800c8a4:	e7e5      	b.n	800c872 <_realloc_r+0x266>
 800c8a6:	0021      	movs	r1, r4
 800c8a8:	f7ff fe95 	bl	800c5d6 <memmove>
 800c8ac:	e7e7      	b.n	800c87e <_realloc_r+0x272>
 800c8ae:	9905      	ldr	r1, [sp, #20]
 800c8b0:	9801      	ldr	r0, [sp, #4]
 800c8b2:	f7fb fdeb 	bl	800848c <_malloc_r>
 800c8b6:	1e07      	subs	r7, r0, #0
 800c8b8:	d100      	bne.n	800c8bc <_realloc_r+0x2b0>
 800c8ba:	e76f      	b.n	800c79c <_realloc_r+0x190>
 800c8bc:	0023      	movs	r3, r4
 800c8be:	2201      	movs	r2, #1
 800c8c0:	3b08      	subs	r3, #8
 800c8c2:	685b      	ldr	r3, [r3, #4]
 800c8c4:	4393      	bics	r3, r2
 800c8c6:	9a04      	ldr	r2, [sp, #16]
 800c8c8:	18d3      	adds	r3, r2, r3
 800c8ca:	0002      	movs	r2, r0
 800c8cc:	3a08      	subs	r2, #8
 800c8ce:	4293      	cmp	r3, r2
 800c8d0:	d105      	bne.n	800c8de <_realloc_r+0x2d2>
 800c8d2:	685e      	ldr	r6, [r3, #4]
 800c8d4:	2303      	movs	r3, #3
 800c8d6:	439e      	bics	r6, r3
 800c8d8:	9b03      	ldr	r3, [sp, #12]
 800c8da:	18f6      	adds	r6, r6, r3
 800c8dc:	e6fb      	b.n	800c6d6 <_realloc_r+0xca>
 800c8de:	9a03      	ldr	r2, [sp, #12]
 800c8e0:	3a04      	subs	r2, #4
 800c8e2:	2a24      	cmp	r2, #36	; 0x24
 800c8e4:	d829      	bhi.n	800c93a <_realloc_r+0x32e>
 800c8e6:	0003      	movs	r3, r0
 800c8e8:	0021      	movs	r1, r4
 800c8ea:	2a13      	cmp	r2, #19
 800c8ec:	d908      	bls.n	800c900 <_realloc_r+0x2f4>
 800c8ee:	6823      	ldr	r3, [r4, #0]
 800c8f0:	6003      	str	r3, [r0, #0]
 800c8f2:	6863      	ldr	r3, [r4, #4]
 800c8f4:	6043      	str	r3, [r0, #4]
 800c8f6:	2a1b      	cmp	r2, #27
 800c8f8:	d80d      	bhi.n	800c916 <_realloc_r+0x30a>
 800c8fa:	0003      	movs	r3, r0
 800c8fc:	3108      	adds	r1, #8
 800c8fe:	3308      	adds	r3, #8
 800c900:	680a      	ldr	r2, [r1, #0]
 800c902:	601a      	str	r2, [r3, #0]
 800c904:	684a      	ldr	r2, [r1, #4]
 800c906:	605a      	str	r2, [r3, #4]
 800c908:	688a      	ldr	r2, [r1, #8]
 800c90a:	609a      	str	r2, [r3, #8]
 800c90c:	0021      	movs	r1, r4
 800c90e:	9801      	ldr	r0, [sp, #4]
 800c910:	f7fb fd0a 	bl	8008328 <_free_r>
 800c914:	e742      	b.n	800c79c <_realloc_r+0x190>
 800c916:	68a3      	ldr	r3, [r4, #8]
 800c918:	6083      	str	r3, [r0, #8]
 800c91a:	68e3      	ldr	r3, [r4, #12]
 800c91c:	60c3      	str	r3, [r0, #12]
 800c91e:	2a24      	cmp	r2, #36	; 0x24
 800c920:	d003      	beq.n	800c92a <_realloc_r+0x31e>
 800c922:	0003      	movs	r3, r0
 800c924:	3110      	adds	r1, #16
 800c926:	3310      	adds	r3, #16
 800c928:	e7ea      	b.n	800c900 <_realloc_r+0x2f4>
 800c92a:	6923      	ldr	r3, [r4, #16]
 800c92c:	3118      	adds	r1, #24
 800c92e:	6103      	str	r3, [r0, #16]
 800c930:	0003      	movs	r3, r0
 800c932:	6962      	ldr	r2, [r4, #20]
 800c934:	3318      	adds	r3, #24
 800c936:	6142      	str	r2, [r0, #20]
 800c938:	e7e2      	b.n	800c900 <_realloc_r+0x2f4>
 800c93a:	0021      	movs	r1, r4
 800c93c:	f7ff fe4b 	bl	800c5d6 <memmove>
 800c940:	e7e4      	b.n	800c90c <_realloc_r+0x300>
 800c942:	9e03      	ldr	r6, [sp, #12]
 800c944:	e6c7      	b.n	800c6d6 <_realloc_r+0xca>
 800c946:	9902      	ldr	r1, [sp, #8]
 800c948:	4306      	orrs	r6, r0
 800c94a:	604e      	str	r6, [r1, #4]
 800c94c:	6851      	ldr	r1, [r2, #4]
 800c94e:	430b      	orrs	r3, r1
 800c950:	6053      	str	r3, [r2, #4]
 800c952:	e6da      	b.n	800c70a <_realloc_r+0xfe>
 800c954:	200002b0 	.word	0x200002b0

0800c958 <_wcrtomb_r>:
 800c958:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
 800c95a:	001d      	movs	r5, r3
 800c95c:	4b09      	ldr	r3, [pc, #36]	; (800c984 <_wcrtomb_r+0x2c>)
 800c95e:	0004      	movs	r4, r0
 800c960:	33e0      	adds	r3, #224	; 0xe0
 800c962:	681e      	ldr	r6, [r3, #0]
 800c964:	002b      	movs	r3, r5
 800c966:	2900      	cmp	r1, #0
 800c968:	d101      	bne.n	800c96e <_wcrtomb_r+0x16>
 800c96a:	000a      	movs	r2, r1
 800c96c:	a901      	add	r1, sp, #4
 800c96e:	0020      	movs	r0, r4
 800c970:	47b0      	blx	r6
 800c972:	1c43      	adds	r3, r0, #1
 800c974:	d103      	bne.n	800c97e <_wcrtomb_r+0x26>
 800c976:	2300      	movs	r3, #0
 800c978:	602b      	str	r3, [r5, #0]
 800c97a:	338a      	adds	r3, #138	; 0x8a
 800c97c:	6023      	str	r3, [r4, #0]
 800c97e:	b004      	add	sp, #16
 800c980:	bd70      	pop	{r4, r5, r6, pc}
 800c982:	46c0      	nop			; (mov r8, r8)
 800c984:	2000001c 	.word	0x2000001c

0800c988 <__swhatbuf_r>:
 800c988:	b570      	push	{r4, r5, r6, lr}
 800c98a:	000e      	movs	r6, r1
 800c98c:	001d      	movs	r5, r3
 800c98e:	230e      	movs	r3, #14
 800c990:	5ec9      	ldrsh	r1, [r1, r3]
 800c992:	0014      	movs	r4, r2
 800c994:	b096      	sub	sp, #88	; 0x58
 800c996:	2900      	cmp	r1, #0
 800c998:	da09      	bge.n	800c9ae <__swhatbuf_r+0x26>
 800c99a:	89b2      	ldrh	r2, [r6, #12]
 800c99c:	2380      	movs	r3, #128	; 0x80
 800c99e:	0011      	movs	r1, r2
 800c9a0:	4019      	ands	r1, r3
 800c9a2:	421a      	tst	r2, r3
 800c9a4:	d018      	beq.n	800c9d8 <__swhatbuf_r+0x50>
 800c9a6:	2100      	movs	r1, #0
 800c9a8:	3b40      	subs	r3, #64	; 0x40
 800c9aa:	0008      	movs	r0, r1
 800c9ac:	e010      	b.n	800c9d0 <__swhatbuf_r+0x48>
 800c9ae:	466a      	mov	r2, sp
 800c9b0:	f000 f8de 	bl	800cb70 <_fstat_r>
 800c9b4:	2800      	cmp	r0, #0
 800c9b6:	dbf0      	blt.n	800c99a <__swhatbuf_r+0x12>
 800c9b8:	23f0      	movs	r3, #240	; 0xf0
 800c9ba:	9901      	ldr	r1, [sp, #4]
 800c9bc:	021b      	lsls	r3, r3, #8
 800c9be:	4019      	ands	r1, r3
 800c9c0:	4b07      	ldr	r3, [pc, #28]	; (800c9e0 <__swhatbuf_r+0x58>)
 800c9c2:	2080      	movs	r0, #128	; 0x80
 800c9c4:	18c9      	adds	r1, r1, r3
 800c9c6:	424b      	negs	r3, r1
 800c9c8:	4159      	adcs	r1, r3
 800c9ca:	2380      	movs	r3, #128	; 0x80
 800c9cc:	0100      	lsls	r0, r0, #4
 800c9ce:	00db      	lsls	r3, r3, #3
 800c9d0:	6029      	str	r1, [r5, #0]
 800c9d2:	6023      	str	r3, [r4, #0]
 800c9d4:	b016      	add	sp, #88	; 0x58
 800c9d6:	bd70      	pop	{r4, r5, r6, pc}
 800c9d8:	2380      	movs	r3, #128	; 0x80
 800c9da:	00db      	lsls	r3, r3, #3
 800c9dc:	e7e5      	b.n	800c9aa <__swhatbuf_r+0x22>
 800c9de:	46c0      	nop			; (mov r8, r8)
 800c9e0:	ffffe000 	.word	0xffffe000

0800c9e4 <__smakebuf_r>:
 800c9e4:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800c9e6:	2602      	movs	r6, #2
 800c9e8:	898b      	ldrh	r3, [r1, #12]
 800c9ea:	0005      	movs	r5, r0
 800c9ec:	000c      	movs	r4, r1
 800c9ee:	4233      	tst	r3, r6
 800c9f0:	d006      	beq.n	800ca00 <__smakebuf_r+0x1c>
 800c9f2:	0023      	movs	r3, r4
 800c9f4:	3343      	adds	r3, #67	; 0x43
 800c9f6:	6023      	str	r3, [r4, #0]
 800c9f8:	6123      	str	r3, [r4, #16]
 800c9fa:	2301      	movs	r3, #1
 800c9fc:	6163      	str	r3, [r4, #20]
 800c9fe:	bdf7      	pop	{r0, r1, r2, r4, r5, r6, r7, pc}
 800ca00:	466a      	mov	r2, sp
 800ca02:	ab01      	add	r3, sp, #4
 800ca04:	f7ff ffc0 	bl	800c988 <__swhatbuf_r>
 800ca08:	9900      	ldr	r1, [sp, #0]
 800ca0a:	0007      	movs	r7, r0
 800ca0c:	0028      	movs	r0, r5
 800ca0e:	f7fb fd3d 	bl	800848c <_malloc_r>
 800ca12:	2800      	cmp	r0, #0
 800ca14:	d108      	bne.n	800ca28 <__smakebuf_r+0x44>
 800ca16:	220c      	movs	r2, #12
 800ca18:	5ea3      	ldrsh	r3, [r4, r2]
 800ca1a:	059a      	lsls	r2, r3, #22
 800ca1c:	d4ef      	bmi.n	800c9fe <__smakebuf_r+0x1a>
 800ca1e:	2203      	movs	r2, #3
 800ca20:	4393      	bics	r3, r2
 800ca22:	431e      	orrs	r6, r3
 800ca24:	81a6      	strh	r6, [r4, #12]
 800ca26:	e7e4      	b.n	800c9f2 <__smakebuf_r+0xe>
 800ca28:	2380      	movs	r3, #128	; 0x80
 800ca2a:	89a2      	ldrh	r2, [r4, #12]
 800ca2c:	6020      	str	r0, [r4, #0]
 800ca2e:	4313      	orrs	r3, r2
 800ca30:	81a3      	strh	r3, [r4, #12]
 800ca32:	9b00      	ldr	r3, [sp, #0]
 800ca34:	6120      	str	r0, [r4, #16]
 800ca36:	6163      	str	r3, [r4, #20]
 800ca38:	9b01      	ldr	r3, [sp, #4]
 800ca3a:	2b00      	cmp	r3, #0
 800ca3c:	d00c      	beq.n	800ca58 <__smakebuf_r+0x74>
 800ca3e:	0028      	movs	r0, r5
 800ca40:	230e      	movs	r3, #14
 800ca42:	5ee1      	ldrsh	r1, [r4, r3]
 800ca44:	f000 f8a6 	bl	800cb94 <_isatty_r>
 800ca48:	2800      	cmp	r0, #0
 800ca4a:	d005      	beq.n	800ca58 <__smakebuf_r+0x74>
 800ca4c:	2303      	movs	r3, #3
 800ca4e:	89a2      	ldrh	r2, [r4, #12]
 800ca50:	439a      	bics	r2, r3
 800ca52:	3b02      	subs	r3, #2
 800ca54:	4313      	orrs	r3, r2
 800ca56:	81a3      	strh	r3, [r4, #12]
 800ca58:	89a3      	ldrh	r3, [r4, #12]
 800ca5a:	433b      	orrs	r3, r7
 800ca5c:	81a3      	strh	r3, [r4, #12]
 800ca5e:	e7ce      	b.n	800c9fe <__smakebuf_r+0x1a>

0800ca60 <__swbuf_r>:
 800ca60:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ca62:	0006      	movs	r6, r0
 800ca64:	000d      	movs	r5, r1
 800ca66:	0014      	movs	r4, r2
 800ca68:	2800      	cmp	r0, #0
 800ca6a:	d004      	beq.n	800ca76 <__swbuf_r+0x16>
 800ca6c:	6b43      	ldr	r3, [r0, #52]	; 0x34
 800ca6e:	2b00      	cmp	r3, #0
 800ca70:	d101      	bne.n	800ca76 <__swbuf_r+0x16>
 800ca72:	f7fb fa87 	bl	8007f84 <__sinit>
 800ca76:	69a3      	ldr	r3, [r4, #24]
 800ca78:	60a3      	str	r3, [r4, #8]
 800ca7a:	89a3      	ldrh	r3, [r4, #12]
 800ca7c:	071b      	lsls	r3, r3, #28
 800ca7e:	d52e      	bpl.n	800cade <__swbuf_r+0x7e>
 800ca80:	6923      	ldr	r3, [r4, #16]
 800ca82:	2b00      	cmp	r3, #0
 800ca84:	d02b      	beq.n	800cade <__swbuf_r+0x7e>
 800ca86:	230c      	movs	r3, #12
 800ca88:	5ee2      	ldrsh	r2, [r4, r3]
 800ca8a:	2380      	movs	r3, #128	; 0x80
 800ca8c:	019b      	lsls	r3, r3, #6
 800ca8e:	b2ef      	uxtb	r7, r5
 800ca90:	b2ed      	uxtb	r5, r5
 800ca92:	421a      	tst	r2, r3
 800ca94:	d02c      	beq.n	800caf0 <__swbuf_r+0x90>
 800ca96:	6923      	ldr	r3, [r4, #16]
 800ca98:	6820      	ldr	r0, [r4, #0]
 800ca9a:	1ac0      	subs	r0, r0, r3
 800ca9c:	6963      	ldr	r3, [r4, #20]
 800ca9e:	4283      	cmp	r3, r0
 800caa0:	dc05      	bgt.n	800caae <__swbuf_r+0x4e>
 800caa2:	0021      	movs	r1, r4
 800caa4:	0030      	movs	r0, r6
 800caa6:	f7fd fdb7 	bl	800a618 <_fflush_r>
 800caaa:	2800      	cmp	r0, #0
 800caac:	d11d      	bne.n	800caea <__swbuf_r+0x8a>
 800caae:	68a3      	ldr	r3, [r4, #8]
 800cab0:	3001      	adds	r0, #1
 800cab2:	3b01      	subs	r3, #1
 800cab4:	60a3      	str	r3, [r4, #8]
 800cab6:	6823      	ldr	r3, [r4, #0]
 800cab8:	1c5a      	adds	r2, r3, #1
 800caba:	6022      	str	r2, [r4, #0]
 800cabc:	701f      	strb	r7, [r3, #0]
 800cabe:	6963      	ldr	r3, [r4, #20]
 800cac0:	4283      	cmp	r3, r0
 800cac2:	d004      	beq.n	800cace <__swbuf_r+0x6e>
 800cac4:	89a3      	ldrh	r3, [r4, #12]
 800cac6:	07db      	lsls	r3, r3, #31
 800cac8:	d507      	bpl.n	800cada <__swbuf_r+0x7a>
 800caca:	2d0a      	cmp	r5, #10
 800cacc:	d105      	bne.n	800cada <__swbuf_r+0x7a>
 800cace:	0021      	movs	r1, r4
 800cad0:	0030      	movs	r0, r6
 800cad2:	f7fd fda1 	bl	800a618 <_fflush_r>
 800cad6:	2800      	cmp	r0, #0
 800cad8:	d107      	bne.n	800caea <__swbuf_r+0x8a>
 800cada:	0028      	movs	r0, r5
 800cadc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800cade:	0021      	movs	r1, r4
 800cae0:	0030      	movs	r0, r6
 800cae2:	f7ff fcad 	bl	800c440 <__swsetup_r>
 800cae6:	2800      	cmp	r0, #0
 800cae8:	d0cd      	beq.n	800ca86 <__swbuf_r+0x26>
 800caea:	2501      	movs	r5, #1
 800caec:	426d      	negs	r5, r5
 800caee:	e7f4      	b.n	800cada <__swbuf_r+0x7a>
 800caf0:	4313      	orrs	r3, r2
 800caf2:	81a3      	strh	r3, [r4, #12]
 800caf4:	4a02      	ldr	r2, [pc, #8]	; (800cb00 <__swbuf_r+0xa0>)
 800caf6:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800caf8:	4013      	ands	r3, r2
 800cafa:	6663      	str	r3, [r4, #100]	; 0x64
 800cafc:	e7cb      	b.n	800ca96 <__swbuf_r+0x36>
 800cafe:	46c0      	nop			; (mov r8, r8)
 800cb00:	ffffdfff 	.word	0xffffdfff

0800cb04 <_raise_r>:
 800cb04:	b570      	push	{r4, r5, r6, lr}
 800cb06:	0004      	movs	r4, r0
 800cb08:	000d      	movs	r5, r1
 800cb0a:	291f      	cmp	r1, #31
 800cb0c:	d904      	bls.n	800cb18 <_raise_r+0x14>
 800cb0e:	2316      	movs	r3, #22
 800cb10:	6003      	str	r3, [r0, #0]
 800cb12:	2001      	movs	r0, #1
 800cb14:	4240      	negs	r0, r0
 800cb16:	bd70      	pop	{r4, r5, r6, pc}
 800cb18:	0003      	movs	r3, r0
 800cb1a:	33fc      	adds	r3, #252	; 0xfc
 800cb1c:	69db      	ldr	r3, [r3, #28]
 800cb1e:	2b00      	cmp	r3, #0
 800cb20:	d004      	beq.n	800cb2c <_raise_r+0x28>
 800cb22:	008a      	lsls	r2, r1, #2
 800cb24:	189b      	adds	r3, r3, r2
 800cb26:	681a      	ldr	r2, [r3, #0]
 800cb28:	2a00      	cmp	r2, #0
 800cb2a:	d108      	bne.n	800cb3e <_raise_r+0x3a>
 800cb2c:	0020      	movs	r0, r4
 800cb2e:	f000 f855 	bl	800cbdc <_getpid_r>
 800cb32:	002a      	movs	r2, r5
 800cb34:	0001      	movs	r1, r0
 800cb36:	0020      	movs	r0, r4
 800cb38:	f000 f83e 	bl	800cbb8 <_kill_r>
 800cb3c:	e7eb      	b.n	800cb16 <_raise_r+0x12>
 800cb3e:	2000      	movs	r0, #0
 800cb40:	2a01      	cmp	r2, #1
 800cb42:	d0e8      	beq.n	800cb16 <_raise_r+0x12>
 800cb44:	1c51      	adds	r1, r2, #1
 800cb46:	d103      	bne.n	800cb50 <_raise_r+0x4c>
 800cb48:	2316      	movs	r3, #22
 800cb4a:	3001      	adds	r0, #1
 800cb4c:	6023      	str	r3, [r4, #0]
 800cb4e:	e7e2      	b.n	800cb16 <_raise_r+0x12>
 800cb50:	2400      	movs	r4, #0
 800cb52:	0028      	movs	r0, r5
 800cb54:	601c      	str	r4, [r3, #0]
 800cb56:	4790      	blx	r2
 800cb58:	0020      	movs	r0, r4
 800cb5a:	e7dc      	b.n	800cb16 <_raise_r+0x12>

0800cb5c <raise>:
 800cb5c:	b510      	push	{r4, lr}
 800cb5e:	4b03      	ldr	r3, [pc, #12]	; (800cb6c <raise+0x10>)
 800cb60:	0001      	movs	r1, r0
 800cb62:	6818      	ldr	r0, [r3, #0]
 800cb64:	f7ff ffce 	bl	800cb04 <_raise_r>
 800cb68:	bd10      	pop	{r4, pc}
 800cb6a:	46c0      	nop			; (mov r8, r8)
 800cb6c:	200002a8 	.word	0x200002a8

0800cb70 <_fstat_r>:
 800cb70:	2300      	movs	r3, #0
 800cb72:	b570      	push	{r4, r5, r6, lr}
 800cb74:	4d06      	ldr	r5, [pc, #24]	; (800cb90 <_fstat_r+0x20>)
 800cb76:	0004      	movs	r4, r0
 800cb78:	0008      	movs	r0, r1
 800cb7a:	0011      	movs	r1, r2
 800cb7c:	602b      	str	r3, [r5, #0]
 800cb7e:	f7f6 fa32 	bl	8002fe6 <_fstat>
 800cb82:	1c43      	adds	r3, r0, #1
 800cb84:	d103      	bne.n	800cb8e <_fstat_r+0x1e>
 800cb86:	682b      	ldr	r3, [r5, #0]
 800cb88:	2b00      	cmp	r3, #0
 800cb8a:	d000      	beq.n	800cb8e <_fstat_r+0x1e>
 800cb8c:	6023      	str	r3, [r4, #0]
 800cb8e:	bd70      	pop	{r4, r5, r6, pc}
 800cb90:	200009dc 	.word	0x200009dc

0800cb94 <_isatty_r>:
 800cb94:	2300      	movs	r3, #0
 800cb96:	b570      	push	{r4, r5, r6, lr}
 800cb98:	4d06      	ldr	r5, [pc, #24]	; (800cbb4 <_isatty_r+0x20>)
 800cb9a:	0004      	movs	r4, r0
 800cb9c:	0008      	movs	r0, r1
 800cb9e:	602b      	str	r3, [r5, #0]
 800cba0:	f7f6 fa2f 	bl	8003002 <_isatty>
 800cba4:	1c43      	adds	r3, r0, #1
 800cba6:	d103      	bne.n	800cbb0 <_isatty_r+0x1c>
 800cba8:	682b      	ldr	r3, [r5, #0]
 800cbaa:	2b00      	cmp	r3, #0
 800cbac:	d000      	beq.n	800cbb0 <_isatty_r+0x1c>
 800cbae:	6023      	str	r3, [r4, #0]
 800cbb0:	bd70      	pop	{r4, r5, r6, pc}
 800cbb2:	46c0      	nop			; (mov r8, r8)
 800cbb4:	200009dc 	.word	0x200009dc

0800cbb8 <_kill_r>:
 800cbb8:	2300      	movs	r3, #0
 800cbba:	b570      	push	{r4, r5, r6, lr}
 800cbbc:	4d06      	ldr	r5, [pc, #24]	; (800cbd8 <_kill_r+0x20>)
 800cbbe:	0004      	movs	r4, r0
 800cbc0:	0008      	movs	r0, r1
 800cbc2:	0011      	movs	r1, r2
 800cbc4:	602b      	str	r3, [r5, #0]
 800cbc6:	f7f6 f9af 	bl	8002f28 <_kill>
 800cbca:	1c43      	adds	r3, r0, #1
 800cbcc:	d103      	bne.n	800cbd6 <_kill_r+0x1e>
 800cbce:	682b      	ldr	r3, [r5, #0]
 800cbd0:	2b00      	cmp	r3, #0
 800cbd2:	d000      	beq.n	800cbd6 <_kill_r+0x1e>
 800cbd4:	6023      	str	r3, [r4, #0]
 800cbd6:	bd70      	pop	{r4, r5, r6, pc}
 800cbd8:	200009dc 	.word	0x200009dc

0800cbdc <_getpid_r>:
 800cbdc:	b510      	push	{r4, lr}
 800cbde:	f7f6 f99d 	bl	8002f1c <_getpid>
 800cbe2:	bd10      	pop	{r4, pc}

0800cbe4 <_init>:
 800cbe4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800cbe6:	46c0      	nop			; (mov r8, r8)
 800cbe8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800cbea:	bc08      	pop	{r3}
 800cbec:	469e      	mov	lr, r3
 800cbee:	4770      	bx	lr

0800cbf0 <_fini>:
 800cbf0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800cbf2:	46c0      	nop			; (mov r8, r8)
 800cbf4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800cbf6:	bc08      	pop	{r3}
 800cbf8:	469e      	mov	lr, r3
 800cbfa:	4770      	bx	lr
